#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])))).x > injectionSwitch.y))))
        barrier();
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         barrier();
        }
      }
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bool(false))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(-7171.3641, max(-7171.3641, -7171.3641))), (_GLF_IDENTITY(_GLF_FUZZED(-7171.3641), clamp(_GLF_FUZZED(-7171.3641), _GLF_FUZZED(-7171.3641), _GLF_FUZZED(-7171.3641)))) / determinant(mat4(sqrt(1.0), 0.0, 0.0, 0.0, 1.0, exp(0.0), 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0))), (injectionSwitch)[1]), vec2((_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])))[0], _GLF_FUZZED(6.7)), bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat4(injectionSwitch, 1.0, determinant(mat3(1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0)), 1.0, 1.0, cos(0.0), 0.0, 0.0, tan(0.0), 1.0, 0.0, tan(0.0), 1.0, sin(0.0), _GLF_IDENTITY(dot(vec3(1.0, 1.0, 1.0), vec3(0.0, 0.0, 0.0)), dot(vec3(1.0, 1.0, 1.0), vec3(0.0, 0.0, 0.0)))), (mat4(injectionSwitch, 1.0, determinant(mat3(1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0)), 1.0, 1.0, cos(0.0), 0.0, 0.0, tan(0.0), 1.0, 0.0, tan(0.0), 1.0, sin(0.0), _GLF_IDENTITY(dot(vec3(1.0, 1.0, 1.0), vec3(0.0, 0.0, 0.0)), dot(vec3(1.0, 1.0, 1.0), vec3(0.0, 0.0, 0.0))))) * mat4(1.0)))).y))))).y))), true && (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-7171.3641), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(6.7)), bvec2(_GLF_TRUE(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, bool(bvec4(true, true, true, true)))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), (injectionSwitch.x < injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))).y, bool(bvec3(injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-7171.3641), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(6.7)), bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))).y, _GLF_IDENTITY(float(vec3(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-7171.3641), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(6.7)), bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))).y, max(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-7171.3641), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(6.7)), bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))).y, _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-7171.3641), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(6.7)), bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))).y)), 0.0, 0.0)), (float(vec3(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-7171.3641), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(6.7)), bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))).y, max(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-7171.3641), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(6.7)), bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))).y, _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-7171.3641), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(6.7)), bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))).y)), 0.0, 0.0))) / 1.0)), true, true)))))), true && (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(clamp(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), injectionSwitch, injectionSwitch), clamp(clamp(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), injectionSwitch, injectionSwitch), clamp(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), injectionSwitch, injectionSwitch), clamp(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), injectionSwitch, injectionSwitch)))), mix(vec2(_GLF_FUZZED(-7171.3641), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(6.7)), _GLF_IDENTITY(bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x > injectionSwitch.y)), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x > injectionSwitch.y))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bvec2(bvec4(bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x > injectionSwitch.y)), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x > injectionSwitch.y))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false, false))))).y))))))))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0)), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), _GLF_IDENTITY(bool(bvec4((injectionSwitch.x < injectionSwitch.y), true, true, true)), (bool(bvec4((_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).x < injectionSwitch.y), true, true, true))) || false))), false || (bool(_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec4((injectionSwitch.x < injectionSwitch.y), true, true, true)), (bool(bvec4((injectionSwitch.x < injectionSwitch.y), true, true, true))) || false), (_GLF_IDENTITY(bool(bvec4((injectionSwitch.x < injectionSwitch.y), true, true, true)), (bool(bvec4((injectionSwitch.x < injectionSwitch.y), true, true, true))) || false)) || false))))))))))
        {
         do
          {
           barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       else
        {
        }
      }
    }
   else
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))
      barrier();
    }
  }
 else
  {
  }
 uvec4 GLF_merged4_0_1_17_1_1_13_2_1_14_3_1_12subgroup_local_idsubgroup_sizeworkgroup_baseworkgroup_id;
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), ! (! (bool(false)))))), ! (! _GLF_IDENTITY((false), false || ((false)))))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bvec3(false, true, true)))))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     for(int _injected_loop_counter = (1 ^ 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       barrier();
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((_GLF_IDENTITY(false, false || (false))), ((_GLF_IDENTITY(false, false || (false)))) || false) && true)), ! (! (_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((_GLF_IDENTITY(false, false || (false))) && true, bool(bvec3((_GLF_IDENTITY(false, false || (false))) && true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)))))))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
    }
  }
 uint subgroup_id = gl_SubgroupID;
uint subgroup_size = 16;
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y))))
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, int(int(_injected_loop_counter))) != _GLF_IDENTITY((_GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)) & 69806, (true ? int(_GLF_ZERO(0.0, injectionSwitch.x)) & _GLF_IDENTITY(69806, (69806) / ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3)))) : _GLF_FUZZED(bitCount(_injected_loop_counter))))), 0 + (_GLF_IDENTITY((_GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)) & 69806, (true ? int(_GLF_ZERO(0.0, injectionSwitch.x)) & _GLF_IDENTITY(69806, (69806) / ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3)))) : _GLF_FUZZED(bitCount(_injected_loop_counter))))), (false ? _GLF_FUZZED(64082) : (_GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)) & 69806, (true ? int(_GLF_ZERO(0.0, injectionSwitch.x)) & _GLF_IDENTITY(69806, (69806) / ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3)))) : _GLF_FUZZED(bitCount(_injected_loop_counter)))))))))); _injected_loop_counter --)
    {
     barrier();
    }
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   GLF_merged4_0_1_17_1_1_13_2_1_14_3_1_12subgroup_local_idsubgroup_sizeworkgroup_baseworkgroup_id.y = subgroup_size;
  }
 else
  {
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-6.5, 3653.3543)) : injectionSwitch)).x, mix(float(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-6.5, 3653.3543)) : injectionSwitch)).x), float(_GLF_FUZZED(47.39)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) > injectionSwitch.y, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y) && true))))))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, ! (! (true)))))), true, false)), true && (bool(bvec3(_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, ! (! (true)))))), true, false)))))))
    {
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   else
    {
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y))))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), ! (! (_GLF_WRAPPED_IF_FALSE(false)))))
              {
              }
             else
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(2493.7970)), float(injectionSwitch.y), bool(true)))))))
                barrier();
               barrier();
              }
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 barrier();
                }
              }
            }
           if(_GLF_DEAD(false))
            barrier();
          }
        }
       if(_GLF_DEAD(false))
        barrier();
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), (bool(bool(false))) && true))));
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   do
    {
     for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
          barrier();
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
  {
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))))))
      barrier();
     do
      {
       for(int _injected_loop_counter = _GLF_IDENTITY(0, (0) - 0); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (true ? _injected_loop_counter : _GLF_FUZZED(min(_injected_loop_counter, 61628)))) != 1); _GLF_IDENTITY(_injected_loop_counter ++, 0 ^ (_injected_loop_counter ++)))
        {
         barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
      }
     while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))));
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0)))))
      barrier();
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
 for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != (_GLF_IDENTITY(0 & -23236, (76058 & 0) | (_GLF_IDENTITY(0 & -23236, (true ? 0 & -23236 : _GLF_FUZZED(46865))))))); _injected_loop_counter --)
  {
   do
    {
     do
      {
       GLF_merged4_0_1_17_1_1_13_2_1_14_3_1_12subgroup_local_idsubgroup_sizeworkgroup_baseworkgroup_id.x = _GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, 0u | (subgroup_local_id))) ^ 0u), uint(uvec2(_GLF_IDENTITY(subgroup_local_id, (false ? _GLF_FUZZED(126462u) : subgroup_local_id)), uint(_GLF_ZERO(0.0, injectionSwitch.x)))));
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), (_GLF_WRAPPED_LOOP(false)) || false));
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec3(bvec2(false, false), false)))))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    {
     do
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(0, _GLF_IDENTITY(int(ivec3(0, 0, 0)), ~ (~ (int(ivec3(0, 0, 0)))))), ~ (~ (0))), (_GLF_IDENTITY(_GLF_IDENTITY(0, _GLF_IDENTITY(int(ivec3(0, 0, 0)), ~ (~ (int(_GLF_IDENTITY(ivec3(0, 0, 0), max(ivec3(0, 0, 0), _GLF_IDENTITY(ivec3(0, 0, 0), ~ (~ (ivec3(0, 0, 0))))))))))), ~ (~ (0)))) | (_GLF_IDENTITY(_GLF_IDENTITY(0, _GLF_IDENTITY(int(ivec3(0, 0, 0)), ~ (~ (int(ivec3(0, 0, 0)))))), ~ (~ _GLF_IDENTITY((0), ((0)) - 0)))))); _GLF_IDENTITY(_injected_loop_counter --, (true ? _GLF_IDENTITY(_injected_loop_counter --, ~ (_GLF_IDENTITY(~ (_injected_loop_counter --), ~ (~ (~ (_injected_loop_counter --)))))) : _GLF_FUZZED(_injected_loop_counter))))
      {
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   barrier();
  }
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (true)))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(false, ! (! (false))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), (bool(bvec2(_GLF_IDENTITY(false, ! (! (false))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) || false))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))), true && ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))))))
    barrier();
  }
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, false || _GLF_IDENTITY((false), bool(bvec3((false), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), (injectionSwitch.x > injectionSwitch.y))))
    {
     do
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
     barrier();
    }
  }
 else
  {
  }
 GLF_merged4_0_1_17_1_1_13_2_1_14_3_1_12subgroup_local_idsubgroup_sizeworkgroup_baseworkgroup_id.w = workgroup_id;
 if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)), (_GLF_DEAD(false)) && true), false)), (bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true), false))) && true)))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec2(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false)))))))))
    barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, ! (! (false)))), _GLF_IDENTITY(false, (false) && true) || (_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (false)), ((! (false))) || false)), bool(bool(_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (false)), ((! (false))) || false)))))), ! _GLF_IDENTITY((! (bool(_GLF_IDENTITY(false, ! (! (false)))))), true && ((! (bool(_GLF_IDENTITY(false, ! (! (false)))))))))))), (_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, ! (! (false)))), _GLF_IDENTITY(false, (false) && true) || (_GLF_IDENTITY(bool(_GLF_IDENTITY(false, ! (! (false)))), ! _GLF_IDENTITY((! (bool(_GLF_IDENTITY(false, ! (! (false)))))), _GLF_IDENTITY(true && ((! (bool(_GLF_IDENTITY(false, ! (! (false))))))), bool(bvec4(true && _GLF_IDENTITY(((! (bool(_GLF_IDENTITY(false, ! (! (false))))))), _GLF_IDENTITY(bool(bvec4(((! (bool(_GLF_IDENTITY(false, ! (! (false))))))), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(bvec4(((! (bool(_GLF_IDENTITY(false, ! (! (false))))))), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)), bool(bvec4(bool(bvec4(((! (bool(_GLF_IDENTITY(false, ! (! (false))))))), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)), true, false, true)))), true && (bool(_GLF_IDENTITY(bool(bvec4(((! (bool(_GLF_IDENTITY(false, ! (! (false))))))), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)), bool(bvec4(bool(bvec4(((! (bool(_GLF_IDENTITY(false, ! (! (false))))))), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)), true, false, true))))))))), false, true, false)))))))), ! _GLF_IDENTITY((! (_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, ! (! (false)))), _GLF_IDENTITY(false, (false) && true) || (_GLF_IDENTITY(bool(_GLF_IDENTITY(false, ! (! (false)))), ! _GLF_IDENTITY((! (bool(_GLF_IDENTITY(false, ! (! (false)))))), true && ((! (bool(_GLF_IDENTITY(false, ! (! (false))))))))))), false || _GLF_IDENTITY((_GLF_IDENTITY(bool(_GLF_IDENTITY(false, ! (! (false)))), _GLF_IDENTITY(false, (false) && true) || (_GLF_IDENTITY(bool(_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (false)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || ((! (false)))))), ! _GLF_IDENTITY((! (bool(_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY((false), ((false)) && true)))))))), true && ((! (bool(_GLF_IDENTITY(false, ! (! (false)))))))))))), ((_GLF_IDENTITY(bool(_GLF_IDENTITY(false, ! (! (false)))), _GLF_IDENTITY(false, (false) && true) || (_GLF_IDENTITY(bool(_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (false)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || ((! (false)))))), ! _GLF_IDENTITY((! (bool(_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY((false), ((false)) && true)))))))), true && ((! (bool(_GLF_IDENTITY(false, ! (! (false))))))))))))) && true))), ! (_GLF_IDENTITY(! (bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, ! (! (false)))), _GLF_IDENTITY(false, (false) && true) || (_GLF_IDENTITY(bool(_GLF_IDENTITY(false, ! (! (false)))), ! _GLF_IDENTITY((! (bool(_GLF_IDENTITY(false, ! (! (false)))))), true && ((! (bool(_GLF_IDENTITY(false, ! (! (false))))))))))), false || _GLF_IDENTITY((_GLF_IDENTITY(bool(_GLF_IDENTITY(false, ! (! (false)))), _GLF_IDENTITY(false, (false) && true) || (_GLF_IDENTITY(bool(_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (false)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || ((! (false)))))), ! _GLF_IDENTITY((! (bool(_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY((false), ((false)) && true)))))))), true && ((! (bool(_GLF_IDENTITY(false, ! (! (false)))))))))))), ((_GLF_IDENTITY(bool(_GLF_IDENTITY(false, ! (! (false)))), _GLF_IDENTITY(false, (false) && true) || (_GLF_IDENTITY(bool(_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (false)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || ((! (false)))))), ! _GLF_IDENTITY((! (bool(_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY((false), ((false)) && true)))))))), true && ((! (bool(_GLF_IDENTITY(false, ! (! (false))))))))))))) && true)))), true && (! (bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, ! (! (false)))), _GLF_IDENTITY(false, (false) && true) || (_GLF_IDENTITY(bool(_GLF_IDENTITY(false, ! (! (false)))), ! _GLF_IDENTITY((! (bool(_GLF_IDENTITY(false, ! (! (false)))))), true && ((! (bool(_GLF_IDENTITY(false, ! (! (false))))))))))), false || _GLF_IDENTITY((_GLF_IDENTITY(bool(_GLF_IDENTITY(false, ! (! (false)))), _GLF_IDENTITY(false, (false) && true) || (_GLF_IDENTITY(bool(_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (false)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || ((! (false)))))), ! _GLF_IDENTITY((! (bool(_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY((false), ((false)) && true)))))))), true && ((! (bool(_GLF_IDENTITY(false, ! (! (false)))))))))))), ((_GLF_IDENTITY(bool(_GLF_IDENTITY(false, ! (! (false)))), _GLF_IDENTITY(false, (false) && true) || (_GLF_IDENTITY(bool(_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (false)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || ((! (false)))))), ! _GLF_IDENTITY((! (bool(_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY((false), ((false)) && true)))))))), true && ((! (bool(_GLF_IDENTITY(false, ! (! (false))))))))))))) && true)))))))))), (_GLF_IDENTITY((! (_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, ! (! (false)))), _GLF_IDENTITY(false, (false) && true) || (_GLF_IDENTITY(bool(_GLF_IDENTITY(false, ! (! (false)))), ! _GLF_IDENTITY((! (bool(_GLF_IDENTITY(false, ! (! (false)))))), true && ((! (bool(_GLF_IDENTITY(false, ! (! (false))))))))))), false || _GLF_IDENTITY((_GLF_IDENTITY(bool(_GLF_IDENTITY(false, ! (! (false)))), _GLF_IDENTITY(false, (false) && true) || (_GLF_IDENTITY(bool(_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (false)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || ((! (false)))))), ! _GLF_IDENTITY((! (bool(_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY((false), ((false)) && true)))))))), true && ((! (bool(_GLF_IDENTITY(false, ! (! (false)))))))))))), ((_GLF_IDENTITY(bool(_GLF_IDENTITY(false, ! (! (false)))), _GLF_IDENTITY(false, (false) && true) || (_GLF_IDENTITY(bool(_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (false)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || ((! (false)))))), ! _GLF_IDENTITY((! (bool(_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY((false), ((false)) && true)))))))), true && ((! (bool(_GLF_IDENTITY(false, ! (! (false))))))))))))) && true))), ! (_GLF_IDENTITY(! (bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, ! (! (false)))), _GLF_IDENTITY(false, (false) && true) || (_GLF_IDENTITY(bool(_GLF_IDENTITY(false, ! (! (false)))), ! _GLF_IDENTITY((! (bool(_GLF_IDENTITY(false, ! (! (false)))))), true && ((! (bool(_GLF_IDENTITY(false, ! (! (false))))))))))), false || _GLF_IDENTITY((_GLF_IDENTITY(bool(_GLF_IDENTITY(false, ! (! (false)))), _GLF_IDENTITY(false, (false) && true) || (_GLF_IDENTITY(bool(_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (false)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || ((! (false)))))), ! _GLF_IDENTITY((! (bool(_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY((false), ((false)) && true)))))))), true && ((! (bool(_GLF_IDENTITY(false, ! (! (false)))))))))))), ((_GLF_IDENTITY(bool(_GLF_IDENTITY(false, ! (! (false)))), _GLF_IDENTITY(false, (false) && true) || (_GLF_IDENTITY(bool(_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (false)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || ((! (false)))))), ! _GLF_IDENTITY((! (bool(_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY((false), ((false)) && true)))))))), true && ((! (bool(_GLF_IDENTITY(false, ! (! (false))))))))))))) && true)))), true && (! (bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, ! (! (false)))), _GLF_IDENTITY(false, (false) && true) || (_GLF_IDENTITY(bool(_GLF_IDENTITY(false, ! (! (false)))), ! _GLF_IDENTITY((! (bool(_GLF_IDENTITY(false, ! (! (false)))))), true && ((! (bool(_GLF_IDENTITY(false, ! (! (false))))))))))), false || _GLF_IDENTITY((_GLF_IDENTITY(bool(_GLF_IDENTITY(false, ! (! (false)))), _GLF_IDENTITY(false, (false) && true) || (_GLF_IDENTITY(bool(_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (false)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || ((! (false)))))), ! _GLF_IDENTITY((! (bool(_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY((false), ((false)) && true)))))))), true && ((! (bool(_GLF_IDENTITY(false, ! (! (false)))))))))))), ((_GLF_IDENTITY(bool(_GLF_IDENTITY(false, ! (! (false)))), _GLF_IDENTITY(false, (false) && true) || (_GLF_IDENTITY(bool(_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (false)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || ((! (false)))))), ! _GLF_IDENTITY((! (bool(_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY((false), ((false)) && true)))))))), true && ((! (bool(_GLF_IDENTITY(false, ! (! (false))))))))))))) && true)))))))))), ! (! ((! (_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, ! (! (false)))), _GLF_IDENTITY(false, (false) && true) || (_GLF_IDENTITY(bool(_GLF_IDENTITY(false, ! (! (false)))), ! _GLF_IDENTITY((! (bool(_GLF_IDENTITY(false, ! (! (false)))))), true && ((! (bool(_GLF_IDENTITY(false, ! (! (false))))))))))), false || _GLF_IDENTITY((_GLF_IDENTITY(bool(_GLF_IDENTITY(false, ! (! (false)))), _GLF_IDENTITY(false, (false) && true) || (_GLF_IDENTITY(bool(_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (false)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || ((! (false)))))), ! _GLF_IDENTITY((! (bool(_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY((false), ((false)) && true)))))))), true && ((! (bool(_GLF_IDENTITY(false, ! (! (false)))))))))))), ((_GLF_IDENTITY(bool(_GLF_IDENTITY(false, ! (! (false)))), _GLF_IDENTITY(false, (false) && true) || (_GLF_IDENTITY(bool(_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (false)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || ((! (false)))))), ! _GLF_IDENTITY((! (bool(_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY((false), ((false)) && true)))))))), true && ((! (bool(_GLF_IDENTITY(false, ! (! (false))))))))))))) && true))), ! (_GLF_IDENTITY(! (bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, ! (! (false)))), _GLF_IDENTITY(false, (false) && true) || (_GLF_IDENTITY(bool(_GLF_IDENTITY(false, ! (! (false)))), ! _GLF_IDENTITY((! (bool(_GLF_IDENTITY(false, ! (! (false)))))), true && ((! (bool(_GLF_IDENTITY(false, ! (! (false))))))))))), false || _GLF_IDENTITY((_GLF_IDENTITY(bool(_GLF_IDENTITY(false, ! (! (false)))), _GLF_IDENTITY(false, (false) && true) || (_GLF_IDENTITY(bool(_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (false)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || ((! (false)))))), ! _GLF_IDENTITY((! (bool(_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY((false), ((false)) && true)))))))), true && ((! (bool(_GLF_IDENTITY(false, ! (! (false)))))))))))), ((_GLF_IDENTITY(bool(_GLF_IDENTITY(false, ! (! (false)))), _GLF_IDENTITY(false, (false) && true) || (_GLF_IDENTITY(bool(_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (false)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || ((! (false)))))), ! _GLF_IDENTITY((! (bool(_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY((false), ((false)) && true)))))))), true && ((! (bool(_GLF_IDENTITY(false, ! (! (false))))))))))))) && true)))), true && (! (bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, ! (! (false)))), _GLF_IDENTITY(false, (false) && true) || (_GLF_IDENTITY(bool(_GLF_IDENTITY(false, ! (! (false)))), ! _GLF_IDENTITY((! (bool(_GLF_IDENTITY(false, ! (! (false)))))), true && ((! (bool(_GLF_IDENTITY(false, ! (! (false))))))))))), false || _GLF_IDENTITY((_GLF_IDENTITY(bool(_GLF_IDENTITY(false, ! (! (false)))), _GLF_IDENTITY(false, (false) && true) || (_GLF_IDENTITY(bool(_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (false)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || ((! (false)))))), ! _GLF_IDENTITY((! (bool(_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY((false), ((false)) && true)))))))), true && ((! (bool(_GLF_IDENTITY(false, ! (! (false)))))))))))), ((_GLF_IDENTITY(bool(_GLF_IDENTITY(false, ! (! (false)))), _GLF_IDENTITY(false, (false) && true) || (_GLF_IDENTITY(bool(_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (false)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || ((! (false)))))), ! _GLF_IDENTITY((! (bool(_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY((false), ((false)) && true)))))))), true && ((! (bool(_GLF_IDENTITY(false, ! (! (false))))))))))))) && true)))))))))))))) && true))) && true))))
  {
   if(_GLF_DEAD(false))
    {
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   for(int _injected_loop_counter = _GLF_IDENTITY(0, _GLF_IDENTITY(int(ivec2(0, int(_GLF_ONE(1.0, injectionSwitch.y)))), max(int(ivec2(0, int(_GLF_ONE(1.0, injectionSwitch.y)))), int(ivec2(0, int(_GLF_ONE(1.0, injectionSwitch.y))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (_GLF_IDENTITY(((_GLF_IDENTITY(1, max(_GLF_IDENTITY(1, (1) | (1)), _GLF_IDENTITY(1, (false ? _GLF_FUZZED(_injected_loop_counter) : 1)))) | 1) << _GLF_IDENTITY(int(_GLF_IDENTITY(5, min(5, _GLF_IDENTITY(5, _GLF_IDENTITY(clamp(5, 5, 5), (clamp(5, 5, 5)) | (clamp(5, 5, 5))))))), _GLF_IDENTITY(int(5), int(ivec3(int(5), ((-84834 & 0) & 55430), 0))))) >> _GLF_IDENTITY(int(5), int(5)), clamp(((1 | 1) << _GLF_IDENTITY(int(_GLF_IDENTITY(5, min(5, _GLF_IDENTITY(_GLF_IDENTITY(5, clamp(5, 5, _GLF_IDENTITY(5, _GLF_IDENTITY((5), _GLF_IDENTITY(int(ivec3((5), 1, 1)), max(int(ivec3((5), 1, 1)), int(ivec3((5), 1, 1))))) | (-74700 & 0)))), clamp(_GLF_IDENTITY(5, clamp(5, 5, _GLF_IDENTITY(5, (5) | (-74700 & 0)))), _GLF_IDENTITY(5, clamp(5, 5, _GLF_IDENTITY(5, (5) | (-74700 & 0)))), _GLF_IDENTITY(5, clamp(5, 5, _GLF_IDENTITY(5, (5) | (-74700 & 0))))))))), _GLF_IDENTITY(int(5), int(ivec3(int(_GLF_IDENTITY(5, min(5, 5))), _GLF_IDENTITY(((-84834 & 0) & 55430), clamp(((-84834 & 0) & 55430), ((-84834 & 0) & 55430), ((-84834 & 0) & 55430))), 0))))) >> _GLF_IDENTITY(int(5), int(5)), _GLF_IDENTITY(((1 | 1) << _GLF_IDENTITY(int(_GLF_IDENTITY(5, min(5, _GLF_IDENTITY(5, _GLF_IDENTITY(clamp(5, 5, 5), (clamp(5, 5, _GLF_IDENTITY(5, (_GLF_IDENTITY(5, (_GLF_IDENTITY(5, (5) * 1)) / 1)) | (5)))) | _GLF_IDENTITY(0, ~ (~ (_GLF_IDENTITY(0, clamp(0, 0, 0)))))))))), _GLF_IDENTITY(int(5), int(ivec3(int(5), ((-84834 & 0) & 55430), 0))))) >> _GLF_IDENTITY(int(5), int(5)), max(((1 | 1) << _GLF_IDENTITY(int(_GLF_IDENTITY(5, min(5, _GLF_IDENTITY(5, clamp(5, 5, 5))))), _GLF_IDENTITY(int(5), int(ivec3(int(5), ((_GLF_IDENTITY(-84834, (false ? _GLF_FUZZED(_injected_loop_counter) : -84834)) & 0) & 55430), 0))))) >> _GLF_IDENTITY(int(5), int(5)), _GLF_IDENTITY(((1 | _GLF_IDENTITY(1, min(_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-1869) : 1)), 1))) << _GLF_IDENTITY(int(_GLF_IDENTITY(5, min(_GLF_IDENTITY(5, ~ (~ (5))), _GLF_IDENTITY(5, _GLF_IDENTITY(clamp(5, 5, _GLF_IDENTITY(5, (5) >> 0)), (clamp(5, _GLF_IDENTITY(5, (5) | (_GLF_IDENTITY(5, 0 + (5)))), 5)) + _GLF_IDENTITY(0, 0 ^ (_GLF_IDENTITY(0, (0) | int(_GLF_ZERO(0.0, injectionSwitch.x)))))))))), _GLF_IDENTITY(int(5), int(ivec3(int(5), ((-84834 & 0) & _GLF_IDENTITY(55430, max(_GLF_IDENTITY(55430, min(55430, 55430)), 55430))), 0))))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(5), (int(5)) - 0), int(5)), (((_GLF_IDENTITY(1, 1 * (1)) | 1) << _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_IDENTITY(5, min(5, _GLF_IDENTITY(5, clamp(5, 5, _GLF_IDENTITY(5, min(5, _GLF_IDENTITY(5, (5) ^ 0))))))), (_GLF_IDENTITY(5, _GLF_IDENTITY(min(5, _GLF_IDENTITY(5, clamp(5, 5, _GLF_IDENTITY(5, (5) * 1)))), (min(5, _GLF_IDENTITY(5, clamp(5, 5, _GLF_IDENTITY(5, (5) * 1))))) ^ 0))) - 0)), 0 | (_GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_IDENTITY(5, min(5, _GLF_IDENTITY(5, clamp(5, 5, _GLF_IDENTITY(5, min(5, _GLF_IDENTITY(5, (5) ^ 0))))))), (_GLF_IDENTITY(5, _GLF_IDENTITY(min(5, _GLF_IDENTITY(5, clamp(5, 5, _GLF_IDENTITY(5, (5) * 1)))), (min(5, _GLF_IDENTITY(5, clamp(5, 5, _GLF_IDENTITY(5, (5) * 1))))) ^ 0))) - 0)), (false ? _GLF_FUZZED(_injected_loop_counter) : int(_GLF_IDENTITY(_GLF_IDENTITY(5, min(5, _GLF_IDENTITY(5, clamp(5, 5, _GLF_IDENTITY(5, min(5, _GLF_IDENTITY(5, (5) ^ 0))))))), (_GLF_IDENTITY(5, _GLF_IDENTITY(min(5, _GLF_IDENTITY(5, clamp(5, 5, _GLF_IDENTITY(5, (5) * 1)))), (min(5, _GLF_IDENTITY(5, clamp(5, 5, _GLF_IDENTITY(5, (5) * 1))))) ^ 0))) - 0)))))), _GLF_IDENTITY(int(5), int(ivec3(int(5), ((-84834 & 0) & 55430), 0))))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(5), ~ (~ (int(5)))), _GLF_IDENTITY(int(5), max(_GLF_IDENTITY(int(5), (int(5)) ^ (0 << _GLF_IDENTITY(int(7), int(7)))), int(5))))) / 1))), _GLF_IDENTITY(((1 | 1) << _GLF_IDENTITY(int(_GLF_IDENTITY(5, min(5, _GLF_IDENTITY(_GLF_IDENTITY(5, min(5, 5)), clamp(5, 5, 5))))), _GLF_IDENTITY(int(5), int(_GLF_IDENTITY(ivec3(int(5), ((_GLF_IDENTITY(-84834, 0 | (-84834)) & 0) & 55430), 0), ivec3(0, 0, 0) | (ivec3(int(5), ((_GLF_IDENTITY(_GLF_IDENTITY(-84834, (_GLF_IDENTITY(-84834, (-84834) / 1)) >> 0), 0 | (-84834)) & 0) & 55430), 0))))))) >> _GLF_IDENTITY(int(5), int(_GLF_IDENTITY(5, min(5, 5)))), clamp((_GLF_IDENTITY((1 | 1), ((1 | 1)) - 0) << _GLF_IDENTITY(int(_GLF_IDENTITY(5, min(5, _GLF_IDENTITY(5, clamp(5, 5, 5))))), _GLF_IDENTITY(int(5), int(ivec3(int(5), ((_GLF_IDENTITY(_GLF_IDENTITY(-84834, (_GLF_IDENTITY(-84834, (-84834) - 0)) - 0) & 0, (true ? _GLF_IDENTITY(-84834, (_GLF_IDENTITY(-84834, (-84834) - 0)) - 0) & 0 : _GLF_FUZZED(findMSB(_injected_loop_counter))))) & 55430), 0))))) >> _GLF_IDENTITY(int(5), int(5)), _GLF_IDENTITY(((1 | 1) << _GLF_IDENTITY(int(_GLF_IDENTITY(5, min(5, _GLF_IDENTITY(5, clamp(5, 5, 5))))), _GLF_IDENTITY(int(5), int(ivec3(int(5), ((_GLF_IDENTITY(-84834, 0 | (-84834)) & 0) & 55430), 0))))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(5, clamp(5, 5, 5))), int(5)), max(_GLF_IDENTITY(((1 | 1) << _GLF_IDENTITY(int(_GLF_IDENTITY(5, min(5, _GLF_IDENTITY(5, clamp(5, 5, 5))))), _GLF_IDENTITY(int(5), int(ivec3(int(5), ((_GLF_IDENTITY(-84834, 0 | (-84834)) & 0) & 55430), 0))))) >> _GLF_IDENTITY(int(5), int(5)), ~ (~ (_GLF_IDENTITY(((1 | 1) << _GLF_IDENTITY(int(_GLF_IDENTITY(5, min(5, _GLF_IDENTITY(5, clamp(5, 5, 5))))), _GLF_IDENTITY(int(5), int(ivec3(int(5), ((_GLF_IDENTITY(-84834, 0 | (-84834)) & 0) & 55430), 0))))) >> _GLF_IDENTITY(int(5), int(5)), 0 | (_GLF_IDENTITY(((1 | 1) << _GLF_IDENTITY(int(_GLF_IDENTITY(5, min(5, _GLF_IDENTITY(5, clamp(5, 5, 5))))), _GLF_IDENTITY(int(5), int(ivec3(int(5), ((_GLF_IDENTITY(-84834, 0 | (-84834)) & 0) & 55430), 0))))) >> _GLF_IDENTITY(int(5), int(5)), (((1 | 1) << _GLF_IDENTITY(int(_GLF_IDENTITY(5, min(5, _GLF_IDENTITY(5, clamp(5, 5, 5))))), _GLF_IDENTITY(int(5), int(ivec3(int(5), ((_GLF_IDENTITY(-84834, 0 | (-84834)) & 0) & 55430), 0))))) >> _GLF_IDENTITY(int(5), int(5))) | (_GLF_IDENTITY(((1 | 1) << _GLF_IDENTITY(int(_GLF_IDENTITY(5, min(5, _GLF_IDENTITY(5, clamp(5, 5, 5))))), _GLF_IDENTITY(int(5), int(ivec3(int(5), ((_GLF_IDENTITY(-84834, 0 | (-84834)) & 0) & 55430), 0))))) >> _GLF_IDENTITY(int(5), int(5)), min(((1 | 1) << _GLF_IDENTITY(int(_GLF_IDENTITY(5, min(5, _GLF_IDENTITY(5, clamp(5, 5, 5))))), _GLF_IDENTITY(int(5), int(ivec3(int(5), ((_GLF_IDENTITY(-84834, 0 | (-84834)) & 0) & 55430), 0))))) >> _GLF_IDENTITY(int(5), int(5)), ((1 | 1) << _GLF_IDENTITY(int(_GLF_IDENTITY(5, min(5, _GLF_IDENTITY(5, clamp(5, 5, 5))))), _GLF_IDENTITY(int(5), int(ivec3(int(5), ((_GLF_IDENTITY(-84834, 0 | (-84834)) & 0) & 55430), 0))))) >> _GLF_IDENTITY(int(5), int(5))))))))))), _GLF_IDENTITY(((1 | _GLF_IDENTITY(1, min(_GLF_IDENTITY(1, (1) ^ 0), 1))) << _GLF_IDENTITY(int(_GLF_IDENTITY(5, min(5, _GLF_IDENTITY(5, clamp(5, 5, 5))))), _GLF_IDENTITY(int(5), int(ivec3(int(5), ((_GLF_IDENTITY(-84834, 0 | (-84834)) & 0) & 55430), 0))))) >> _GLF_IDENTITY(int(5), int(5)), min(((_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) | (1))) | int(_GLF_ZERO(0.0, injectionSwitch.x))) | 1) << _GLF_IDENTITY(int(_GLF_IDENTITY(5, min(5, _GLF_IDENTITY(5, clamp(5, 5, 5))))), _GLF_IDENTITY(int(5), int(ivec3(int(5), ((_GLF_IDENTITY(-84834, 0 | (-84834)) & 0) & 55430), 0))))) >> _GLF_IDENTITY(int(5), int(5)), ((1 | 1) << _GLF_IDENTITY(int(_GLF_IDENTITY(5, min(5, _GLF_IDENTITY(5, clamp(5, 5, 5))))), _GLF_IDENTITY(int(5), int(ivec3(int(5), ((_GLF_IDENTITY(-84834, 0 | (-84834)) & 0) & 55430), 0))))) >> _GLF_IDENTITY(int(5), int(5)))))), ((_GLF_IDENTITY(1 | 1, max(1 | 1, 1 | 1))) << _GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_IDENTITY(5, min(5, _GLF_IDENTITY(5, clamp(5, 5, 5)))), min(_GLF_IDENTITY(5, min(5, _GLF_IDENTITY(5, clamp(5, 5, 5)))), _GLF_IDENTITY(5, min(5, _GLF_IDENTITY(5, clamp(5, 5, 5))))))), _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(ivec3(int(5), (_GLF_IDENTITY((-84834 & 0) & 55430, 1 * ((-84834 & 0) & 55430))), 0)), (_GLF_IDENTITY(_GLF_IDENTITY(int(ivec3(int(5), ((-84834 & 0) & 55430), 0)), clamp(int(ivec3(int(5), ((-84834 & 0) & 55430), 0)), _GLF_IDENTITY(int(ivec3(int(5), (_GLF_IDENTITY((-84834 & 0), 0 | ((-84834 & 0))) & 55430), 0)), (false ? _GLF_FUZZED(_injected_loop_counter) : int(ivec3(int(5), ((-84834 & _GLF_IDENTITY(0, 0 ^ (0))) & 55430), 0)))), int(ivec3(int(5), ((_GLF_IDENTITY(-84834 & 0, 0 | (-84834 & 0))) & 55430), 0)))), int(int(int(ivec3(int(5), ((-84834 & 0) & 55430), 0)))))) | 0)))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(5, (5) | (5))), int(5)))))))); _injected_loop_counter ++)
    {
     barrier();
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       for(int _injected_loop_counter = int(_GLF_ONE(1.0, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, 1.0 * (injectionSwitch.y)), injectionSwitch.y)), injectionSwitch.y)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch.y : _GLF_IDENTITY(_GLF_FUZZED(7508.3359), (_GLF_IDENTITY(false, true && (false)) ? _GLF_FUZZED(-3.9) : _GLF_IDENTITY(_GLF_FUZZED(7508.3359), mix(float(_GLF_FUZZED(7508.3359)), float(_GLF_FUZZED(1.3)), bool(false))))))))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > 0, ! (! (_GLF_IDENTITY(_injected_loop_counter > 0, _GLF_IDENTITY(bool(bvec2(_injected_loop_counter > 0, false)), ! (! (bool(bvec2(_injected_loop_counter > 0, false)))))))))); _injected_loop_counter --)
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) && true)))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         else
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             barrier();
            }
          }
         if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (true))))
          {
           if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))))
            {
             do
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))))
                  {
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        {
                         if(_GLF_WRAPPED_IF_FALSE(false))
                          {
                          }
                         else
                          {
                           barrier();
                          }
                        }
                       for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (_GLF_IDENTITY(int(5), (int(5)) >> 0)) | (int(5))))); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 >> _GLF_IDENTITY(int(7), int(7)))); _injected_loop_counter --)
                        {
                         barrier();
                        }
                       if(_GLF_DEAD(false))
                        barrier();
                      }
                    }
                   barrier();
                   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec4(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, true, true)))))), false, false, false)), true && (bool(bvec4(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec4(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, true, true)))))), false, false, false))))))
                    barrier();
                  }
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                   else
                    {
                     barrier();
                    }
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 do
                  {
                   barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
             do
              {
               do
                {
                 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, max(0, 0))); _injected_loop_counter --)
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))))))), true, true), _GLF_IDENTITY(bvec3(bvec3(bvec3(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y))))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), true, true))), bvec3(bvec4(bvec3(bvec3(bvec3(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(414.388)), float(injectionSwitch.y), bool(true))))))))), _GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, true && (true)))), true))), true)))))))
                    barrier();
                  }
                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                  {
                   do
                    {
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(bvec2(_GLF_DEAD(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec2(bvec4(_GLF_IDENTITY(bvec2(_GLF_DEAD(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec2(bvec3(bvec2(_GLF_DEAD(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true))), false, false))))))
                        barrier();
                       barrier();
                      }
                    }
                   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bool((injectionSwitch.x > injectionSwitch.y)))))));
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
                      barrier();
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      {
                       if(_GLF_WRAPPED_IF_FALSE(false))
                        {
                        }
                       else
                        {
                         barrier();
                        }
                       if(_GLF_DEAD(false))
                        barrier();
                      }
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                    }
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                  }
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   do
                    {
                     barrier();
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                   do
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      {
                       do
                        {
                         barrier();
                        }
                       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                      }
                    }
                   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y))));
                  }
                 else
                  {
                  }
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, false)))))
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 barrier();
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
               if(_GLF_DEAD(false))
                barrier();
              }
             if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))))
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 do
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / abs(vec2(1.0, 1.0))).x > injectionSwitch.y))));
                }
               else
                {
                }
              }
            }
           else
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
          }
         else
          {
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
        }
      }
    }
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, true && (true))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bool(false)))) && true)))
        barrier();
      }
     else
      {
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
      barrier();
     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), true && (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), ! (! (_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (true)))))))))))))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), ! (! ((false))))))))
            barrier();
           barrier();
          }
        }
       else
        {
        }
      }
     else
      {
      }
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 uint workgroup_base = workgroup_size * GLF_merged4_0_1_17_1_1_13_2_1_14_3_1_12subgroup_local_idsubgroup_sizeworkgroup_baseworkgroup_id.w;
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       barrier();
      }
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       barrier();
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, 0.0 + (injectionSwitch.y))))))
    barrier();
   do
    {
     GLF_merged4_0_1_17_1_1_13_2_1_14_3_1_12subgroup_local_idsubgroup_sizeworkgroup_baseworkgroup_id.z = workgroup_base;
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != 1, (_injected_loop_counter != 1) || false)); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true)), bool(bvec3(bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true)), false, false))))))
        {
         do
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 | 0)); _injected_loop_counter --)
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   else
    {
    }
  }
 uint virtual_gid = GLF_merged4_0_1_17_1_1_13_2_1_14_3_1_12subgroup_local_idsubgroup_sizeworkgroup_baseworkgroup_id.z + _GLF_IDENTITY(subgroup_id * GLF_merged4_0_1_17_1_1_13_2_1_14_3_1_12subgroup_local_idsubgroup_sizeworkgroup_baseworkgroup_id.y, max(subgroup_id * GLF_merged4_0_1_17_1_1_13_2_1_14_3_1_12subgroup_local_idsubgroup_sizeworkgroup_baseworkgroup_id.y, subgroup_id * GLF_merged4_0_1_17_1_1_13_2_1_14_3_1_12subgroup_local_idsubgroup_sizeworkgroup_baseworkgroup_id.y)) + GLF_merged4_0_1_17_1_1_13_2_1_14_3_1_12subgroup_local_idsubgroup_sizeworkgroup_baseworkgroup_id.x;
 do
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         do
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             barrier();
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), (_GLF_IDENTITY(false, (false) && true)) || false)));
        }
      }
     else
      {
      }
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(true, false || _GLF_IDENTITY((true), ((true)) || false)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, false || _GLF_IDENTITY((true), ((true)) || false))), true && (! (_GLF_IDENTITY(true, false || _GLF_IDENTITY(_GLF_IDENTITY((true), ((true)) || false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY((true), ((true)) || false)))))))))))
      {
       barrier();
      }
     else
      {
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
  }
 uint next_virtual_gid = GLF_merged4_0_1_17_1_1_13_2_1_14_3_1_12subgroup_local_idsubgroup_sizeworkgroup_baseworkgroup_id.z + subgroup_id * GLF_merged4_0_1_17_1_1_13_2_1_14_3_1_12subgroup_local_idsubgroup_sizeworkgroup_baseworkgroup_id.y + ((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_17_1_1_13_2_1_14_3_1_12subgroup_local_idsubgroup_sizeworkgroup_baseworkgroup_id, (GLF_merged4_0_1_17_1_1_13_2_1_14_3_1_12subgroup_local_idsubgroup_sizeworkgroup_baseworkgroup_id) | uvec4(0u, 0u, 0u, 0u)).x, max(_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_17_1_1_13_2_1_14_3_1_12subgroup_local_idsubgroup_sizeworkgroup_baseworkgroup_id, (GLF_merged4_0_1_17_1_1_13_2_1_14_3_1_12subgroup_local_idsubgroup_sizeworkgroup_baseworkgroup_id) | uvec4(0u, 0u, 0u, 0u)).x, (false ? _GLF_FUZZED(virtual_gid) : _GLF_IDENTITY(GLF_merged4_0_1_17_1_1_13_2_1_14_3_1_12subgroup_local_idsubgroup_sizeworkgroup_baseworkgroup_id, (GLF_merged4_0_1_17_1_1_13_2_1_14_3_1_12subgroup_local_idsubgroup_sizeworkgroup_baseworkgroup_id) | uvec4(0u, 0u, 0u, 0u)).x)), _GLF_IDENTITY(GLF_merged4_0_1_17_1_1_13_2_1_14_3_1_12subgroup_local_idsubgroup_sizeworkgroup_baseworkgroup_id, (GLF_merged4_0_1_17_1_1_13_2_1_14_3_1_12subgroup_local_idsubgroup_sizeworkgroup_baseworkgroup_id) | uvec4(0u, 0u, 0u, 0u)).x)), (GLF_merged4_0_1_17_1_1_13_2_1_14_3_1_12subgroup_local_idsubgroup_sizeworkgroup_baseworkgroup_id.x) * 1u) + 1) % GLF_merged4_0_1_17_1_1_13_2_1_14_3_1_12subgroup_local_idsubgroup_sizeworkgroup_baseworkgroup_id.y);
 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(true, true && (true)), bool(bool(_GLF_IDENTITY(true, _GLF_IDENTITY(true, (true) && true) && (true)))))))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)), bool(bvec4(bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x < injectionSwitch.y)), true)), true, true, _GLF_IDENTITY(true, _GLF_IDENTITY(bool(bool(true)), ! (! (bool(bool(true))))))))))), bool(bvec4(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)), bool(bvec4(bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x < injectionSwitch.y)), true)), true, true, _GLF_IDENTITY(true, _GLF_IDENTITY(bool(bool(true)), ! (! (bool(bool(true))))))))))), true, true, false))))
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec3(false, false, false))), (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-6.1)), float(injectionSwitch.x), bool(true))) > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec3(false, false, false))), (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-6.1)), float(injectionSwitch.x), bool(true))) > injectionSwitch.y)), (_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, _GLF_IDENTITY(false, (false) && true), false)), _GLF_IDENTITY(bool(bvec4(bool(bvec3(false, _GLF_IDENTITY(false, (false) && true), false)), false, false, false)), bool(bool(bool(bvec4(bool(bvec3(false, _GLF_IDENTITY(false, (false) && true), false)), false, false, false))))))), (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-6.1)), float(injectionSwitch.x), bool(true))) > injectionSwitch.y))) || false)) && true), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))
            {
             if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), ! (! (_GLF_WRAPPED_IF_TRUE(true)))))
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
                  barrier();
                 barrier();
                }
              }
             else
              {
              }
            }
          }
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
        }
       _GLF_IDENTITY(buf[virtual_gid] = 1, (_GLF_IDENTITY(_GLF_IDENTITY(buf[virtual_gid] = 1, ~ (~ (buf[virtual_gid] = 1))), (1u ^ 1u) ^ (_GLF_IDENTITY(buf[virtual_gid] = 1, ~ (~ (buf[virtual_gid] = 1)))))) << 0u);
      }
     else
      {
      }
    }
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_IDENTITY(GLF_merged4_0_1_17_1_1_13_2_1_14_3_1_12subgroup_local_idsubgroup_sizeworkgroup_baseworkgroup_id.x + 1, (true ? GLF_merged4_0_1_17_1_1_13_2_1_14_3_1_12subgroup_local_idsubgroup_sizeworkgroup_baseworkgroup_id.x + 1 : _GLF_FUZZED(30611u))) < GLF_merged4_0_1_17_1_1_13_2_1_14_3_1_12subgroup_local_idsubgroup_sizeworkgroup_baseworkgroup_id.y)
  {
   int i = 0;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       barrier();
      }
     else
      {
      }
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(mat2(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), injectionSwitch, _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)))), determinant(mat2(0.0, 0.0, 0.0, 0.0)), 0.0))).y), ! (! ((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), injectionSwitch)).x, mix(float(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))), injectionSwitch)), injectionSwitch)).x), float(_GLF_FUZZED(-93.66)), bool(false))), (true ? _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), injectionSwitch)).x : _GLF_FUZZED(2567.5358))) > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y, _GLF_IDENTITY(dot(vec4(1.0, _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(-6.4) : _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(vec4(-985.887, -6.8, -9.7, 7.3).x)), float(0.0), bool(true))))), _GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, float(vec4(0.0, 1.0, 0.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0))))))) * 1.0), 0.0), vec4(1.0, 0.0, 0.0, 0.0)), dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(1.0, 0.0, 0.0, 0.0))) * _GLF_IDENTITY((injectionSwitch.y), max(_GLF_IDENTITY((injectionSwitch.y), clamp((injectionSwitch.y), (injectionSwitch.y), (injectionSwitch.y))), (injectionSwitch.y)))))))))))
      barrier();
    }
   atomicStore(buf[next_virtual_gid], uint(2), 4, 64, 4);
   for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY((1 & 1), (_GLF_IDENTITY((1 & 1), min((1 & 1), (1 & 1)))) * 1)); _injected_loop_counter ++)
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
          {
           barrier();
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 else
  {
   for(int _injected_loop_counter = _GLF_IDENTITY(1, min(1, 1)); _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           barrier();
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           else
            {
            }
          }
         else
          {
          }
        }
      }
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     do
      {
       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), ! (! (_GLF_WRAPPED_IF_FALSE(false)))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((false), false || (_GLF_IDENTITY((false), (_GLF_IDENTITY((false), bool(bvec3((false), true, true)))) && true))) || false)))
            barrier();
           if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, false || (true))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           else
            {
             if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
              barrier();
            }
           if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), bool(bvec3(! (true), false, false)))))))
            {
             do
              {
               for(int _injected_loop_counter = int(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), max(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != 1, true && (_injected_loop_counter != 1))); _injected_loop_counter ++)
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                    barrier();
                   barrier();
                  }
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])))).x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
                    {
                     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        barrier();
                       barrier();
                      }
                    }
                  }
                 else
                  {
                  }
                 if(_GLF_DEAD(false))
                  barrier();
                }
               if(_GLF_DEAD(false))
                barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           else
            {
            }
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
                  barrier();
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   if(_GLF_DEAD(false))
                    {
                     do
                      {
                       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0)))))
                        {
                         for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                          {
                           barrier();
                          }
                        }
                       else
                        {
                        }
                      }
                     while(_GLF_WRAPPED_LOOP(false));
                    }
                   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                    {
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                        {
                         barrier();
                        }
                       else
                        {
                        }
                      }
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) && true)))
                        {
                        }
                       else
                        {
                         barrier();
                        }
                      }
                    }
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 else
                  {
                  }
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   barrier();
                  }
                 else
                  {
                  }
                }
               if(_GLF_DEAD(false))
                {
                 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (int(_GLF_ZERO(0.0, injectionSwitch.x)) | 0)); _injected_loop_counter --)
                  {
                   barrier();
                  }
                }
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   barrier();
                  }
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, false || (false))), _GLF_IDENTITY(bool(bvec4(! (_GLF_IDENTITY(false, false || (false))), false, false, false)), false || (bool(bvec4(! (_GLF_IDENTITY(false, false || (false))), false, false, false))))))), _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false))))
                    barrier();
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 else
                  {
                  }
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                  {
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                      {
                       if(_GLF_WRAPPED_IF_TRUE(true))
                        {
                         if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y))))))))) && true), bool(bool(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y))))))))) && true)))))
                          {
                          }
                         else
                          {
                           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                            barrier();
                           if(_GLF_WRAPPED_IF_FALSE(false))
                            {
                            }
                           else
                            {
                             for(int _injected_loop_counter = 0; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != (0 | 1)), (_GLF_WRAPPED_LOOP(_injected_loop_counter != (0 | 1))) && true); _injected_loop_counter ++)
                              {
                               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                                {
                                 if(_GLF_DEAD(false))
                                  barrier();
                                }
                               barrier();
                              }
                            }
                          }
                        }
                       else
                        {
                        }
                      }
                     else
                      {
                      }
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                   else
                    {
                     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) && true)) || false))), bool(bool(_GLF_IDENTITY(false, bool(bvec3(false, false, true))))))))
                      barrier();
                    }
                  }
                 else
                  {
                  }
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                   do
                    {
                     barrier();
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                  }
                }
               else
                {
                }
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 barrier();
                }
               if(_GLF_DEAD(false))
                {
                 do
                  {
                   barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                 if(_GLF_DEAD(false))
                  barrier();
                }
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
          }
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   for(int _injected_loop_counter = (0 ^ (1 ^ (0 | 1))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, 0 ^ (_injected_loop_counter)) != (1 | 0)); _GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) ^ (0 | 0)))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
           do
            {
             if(_GLF_DEAD(false))
              {
               do
                {
                 barrier();
                }
               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
           atomicStore(buf[next_virtual_gid], uint(2), _GLF_IDENTITY(4, 0 + (4)), 64, 4);
          }
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   do
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-283.354), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-1804.6744)), bvec2(true, false))).y))))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x < injectionSwitch.y))) && true)))
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
      }
     barrier();
    }
  }
 else
  {
  }
}
