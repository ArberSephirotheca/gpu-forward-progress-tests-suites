#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! (_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))), false || ((injectionSwitch.x > injectionSwitch.y)))))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     do
      {
       return;
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     return;
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         return;
        }
       else
        {
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
    }
  }
 do
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != 0, (_injected_loop_counter != 0) && true)); _injected_loop_counter --)
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
        {
         do
          {
           do
            {
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (0 ^ 1)); _injected_loop_counter ++)
              {
               return;
              }
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                break;
               continue;
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
           if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))
            return;
           if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY((_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false, (_GLF_IDENTITY((_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false, ((_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))) || false) && true)) || false)))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), bool(bvec4(false, true, true, true)))))
              return;
             break;
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bool(bvec2(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
        break;
       return;
      }
     if(_GLF_DEAD(false))
      break;
     if(_GLF_DEAD(false))
      {
       do
        {
         return;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
   else
    {
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 do
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        continue;
       return;
      }
     do
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        continue;
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec3(bvec2(false, false), false))), bvec2(bvec2(bvec2(false, false))))))))
      break;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      break;
     do
      {
       if(_GLF_DEAD(false))
        break;
       for(int _injected_loop_counter = _GLF_IDENTITY(0, int(int(_GLF_IDENTITY(0, int(int(0)))))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, clamp(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, min(_injected_loop_counter, _injected_loop_counter)), (_GLF_IDENTITY(_injected_loop_counter, min(_injected_loop_counter, _injected_loop_counter))) << 0), _injected_loop_counter, _injected_loop_counter)) != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 & 1)); _injected_loop_counter ++)
          {
           return;
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (! (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-8.0) : injectionSwitch.y)))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))
    continue;
   if(_GLF_DEAD(false))
    break;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    break;
  }
 while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (false))))))), (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, false || (false))), ! (! (_GLF_WRAPPED_LOOP(false))))) && true));
 uint subgroup_id = gl_SubgroupID;
uint subgroup_size = 16;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(false))
  return;
 uint num_workgroup = _GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, uvec3(0u, 0u, 0u) | (_GLF_IDENTITY(gl_NumWorkGroups, clamp(gl_NumWorkGroups, gl_NumWorkGroups, gl_NumWorkGroups)))), uvec3(0u, 0u, 0u) | (_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, uvec3(0u, 0u, 0u) | (_GLF_IDENTITY(gl_NumWorkGroups, clamp(gl_NumWorkGroups, gl_NumWorkGroups, gl_NumWorkGroups)))), min(_GLF_IDENTITY(gl_NumWorkGroups, uvec3(0u, 0u, 0u) | (_GLF_IDENTITY(gl_NumWorkGroups, clamp(gl_NumWorkGroups, gl_NumWorkGroups, gl_NumWorkGroups)))), _GLF_IDENTITY(gl_NumWorkGroups, uvec3(0u, 0u, 0u) | (_GLF_IDENTITY(gl_NumWorkGroups, clamp(gl_NumWorkGroups, gl_NumWorkGroups, gl_NumWorkGroups)))))))).x;
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (injectionSwitch.x < injectionSwitch.y) || false))))))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))))))
    return;
  }
 else
  {
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))), float(_GLF_FUZZED(8907.1508)), bool(false)))))))))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     return;
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   for(int _injected_loop_counter = (int(_GLF_ONE(1.0, injectionSwitch.y)) | 1); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > (0 << _GLF_IDENTITY(int(1), int(1))), ! (! (_GLF_IDENTITY(_injected_loop_counter > (0 << _GLF_IDENTITY(int(1), int(1))), ! (! (_injected_loop_counter > (0 << _GLF_IDENTITY(int(1), int(1)))))))))); _injected_loop_counter --)
    {
     return;
    }
  }
 uint workgroup_id = _GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID, clamp(gl_WorkGroupID, gl_WorkGroupID, _GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID, clamp(_GLF_IDENTITY(gl_WorkGroupID, _GLF_IDENTITY((true ? gl_WorkGroupID : _GLF_FUZZED(uvec3(75141u, 182611u, 40174u))), max((true ? gl_WorkGroupID : _GLF_FUZZED(uvec3(75141u, 182611u, 40174u))), (true ? gl_WorkGroupID : _GLF_FUZZED(uvec3(75141u, 182611u, 40174u)))))), gl_WorkGroupID, gl_WorkGroupID)), clamp(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID, clamp(_GLF_IDENTITY(gl_WorkGroupID, _GLF_IDENTITY((true ? gl_WorkGroupID : _GLF_FUZZED(uvec3(75141u, 182611u, 40174u))), max((true ? gl_WorkGroupID : _GLF_FUZZED(uvec3(75141u, 182611u, 40174u))), (true ? gl_WorkGroupID : _GLF_FUZZED(uvec3(75141u, 182611u, 40174u)))))), _GLF_IDENTITY(gl_WorkGroupID, (gl_WorkGroupID) | uvec3(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))), gl_WorkGroupID)), (_GLF_IDENTITY(gl_WorkGroupID, clamp(_GLF_IDENTITY(gl_WorkGroupID, _GLF_IDENTITY((true ? gl_WorkGroupID : _GLF_FUZZED(_GLF_IDENTITY(uvec3(75141u, 182611u, 40174u), (_GLF_IDENTITY(uvec3(75141u, 182611u, 40174u), (uvec3(75141u, 182611u, 40174u)) | (_GLF_IDENTITY(uvec3(75141u, 182611u, 40174u), uvec3(uvec3(uvec3(75141u, 182611u, 40174u))))))) | (uvec3(75141u, 182611u, 40174u))))), max((true ? gl_WorkGroupID : _GLF_FUZZED(uvec3(75141u, 182611u, 40174u))), (_GLF_IDENTITY(true ? gl_WorkGroupID : _GLF_FUZZED(uvec3(75141u, 182611u, 40174u)), (_GLF_IDENTITY(true ? gl_WorkGroupID : _GLF_FUZZED(uvec3(75141u, 182611u, 40174u)), (true ? gl_WorkGroupID : _GLF_FUZZED(uvec3(75141u, 182611u, 40174u))) / uvec3(1u, 1u, 1u))) | (_GLF_IDENTITY(true ? gl_WorkGroupID : _GLF_FUZZED(uvec3(75141u, 182611u, 40174u)), (true ? gl_WorkGroupID : _GLF_FUZZED(uvec3(75141u, 182611u, 40174u))) | (_GLF_IDENTITY(true ? gl_WorkGroupID : _GLF_FUZZED(uvec3(75141u, 182611u, 40174u)), (false ? _GLF_FUZZED(uvec3(64175u, 29517u, 43612u)) : true ? gl_WorkGroupID : _GLF_FUZZED(uvec3(75141u, 182611u, 40174u)))))))))))), gl_WorkGroupID, gl_WorkGroupID))) << uvec3(0u, 0u, 0u)), _GLF_IDENTITY(gl_WorkGroupID, clamp(_GLF_IDENTITY(gl_WorkGroupID, _GLF_IDENTITY((true ? gl_WorkGroupID : _GLF_FUZZED(uvec3(75141u, 182611u, 40174u))), max((true ? gl_WorkGroupID : _GLF_FUZZED(uvec3(75141u, 182611u, 40174u))), (true ? gl_WorkGroupID : _GLF_FUZZED(uvec3(75141u, 182611u, 40174u)))))), gl_WorkGroupID, gl_WorkGroupID)), _GLF_IDENTITY(gl_WorkGroupID, clamp(_GLF_IDENTITY(gl_WorkGroupID, _GLF_IDENTITY((true ? gl_WorkGroupID : _GLF_FUZZED(uvec3(75141u, 182611u, 40174u))), max((true ? gl_WorkGroupID : _GLF_FUZZED(uvec3(75141u, 182611u, 40174u))), (_GLF_IDENTITY(true, (_GLF_IDENTITY(true, (true) && true)) && true) ? gl_WorkGroupID : _GLF_FUZZED(uvec3(75141u, 182611u, 40174u)))))), gl_WorkGroupID, gl_WorkGroupID)))))), uvec3(gl_WorkGroupID[0], gl_WorkGroupID[1], gl_WorkGroupID[_GLF_IDENTITY(2, (_GLF_IDENTITY(2, int(ivec2(2, 0)))) | (2))])).x;
 uint workgroup_base = _GLF_IDENTITY(workgroup_size * workgroup_id, (workgroup_size * workgroup_id) | (_GLF_IDENTITY(workgroup_size * workgroup_id, (true ? workgroup_size * workgroup_id : _GLF_FUZZED(workgroup_id)))));
 uint virtual_gid = _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(workgroup_base, uint(uint(workgroup_base))) + _GLF_IDENTITY(subgroup_id, uint(uint(subgroup_id))) * subgroup_size), max((_GLF_IDENTITY(workgroup_base, (_GLF_IDENTITY(workgroup_base, (workgroup_base) << 0u)) ^ 0u) + subgroup_id * subgroup_size), (workgroup_base + subgroup_id * subgroup_size))), 1u * _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY((workgroup_base + _GLF_IDENTITY(subgroup_id, uint(uint(subgroup_id))) * subgroup_size), max((_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, (_GLF_IDENTITY(workgroup_base, (workgroup_base) << 0u)) ^ 0u) + subgroup_id * subgroup_size, (false ? _GLF_FUZZED(workgroup_size) : _GLF_IDENTITY(workgroup_base, (_GLF_IDENTITY(workgroup_base, (workgroup_base) << _GLF_IDENTITY(0u, 0u + (_GLF_IDENTITY(0u, ~ (~ (0u))))))) ^ 0u) + subgroup_id * subgroup_size))), (workgroup_base + subgroup_id * subgroup_size))), (_GLF_IDENTITY((workgroup_base + _GLF_IDENTITY(subgroup_id, uint(uint(subgroup_id))) * subgroup_size), max((_GLF_IDENTITY(workgroup_base, _GLF_IDENTITY((_GLF_IDENTITY(workgroup_base, (workgroup_base) << 0u)) ^ 0u, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY((_GLF_IDENTITY(workgroup_base, (workgroup_base) << 0u)) ^ 0u, ((_GLF_IDENTITY(workgroup_base, (workgroup_base) << 0u)) ^ _GLF_IDENTITY(0u, 0u ^ (0u))) >> 0u) : _GLF_FUZZED(workgroup_size)))) + subgroup_id * subgroup_size), (workgroup_base + subgroup_id * subgroup_size)))) - 0u)), clamp((_GLF_IDENTITY(_GLF_IDENTITY((workgroup_base + _GLF_IDENTITY(subgroup_id, uint(uint(subgroup_id))) * subgroup_size), max((_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, (workgroup_base) - 0u), (_GLF_IDENTITY(workgroup_base, (workgroup_base) << 0u)) ^ 0u) + subgroup_id * subgroup_size), (workgroup_base + subgroup_id * subgroup_size))), (_GLF_IDENTITY((workgroup_base + _GLF_IDENTITY(subgroup_id, uint(uint(subgroup_id))) * subgroup_size), max((_GLF_IDENTITY(workgroup_base, _GLF_IDENTITY((_GLF_IDENTITY(workgroup_base, (workgroup_base) << 0u)) ^ 0u, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY((_GLF_IDENTITY(workgroup_base, (workgroup_base) << 0u)) ^ 0u, ((_GLF_IDENTITY(workgroup_base, (workgroup_base) << 0u)) ^ 0u) >> 0u) : _GLF_FUZZED(workgroup_size)))) + subgroup_id * subgroup_size), (workgroup_base + subgroup_id * subgroup_size)))) - 0u)), (_GLF_IDENTITY(_GLF_IDENTITY((workgroup_base + _GLF_IDENTITY(subgroup_id, uint(uint(subgroup_id))) * subgroup_size), max((_GLF_IDENTITY(workgroup_base, (_GLF_IDENTITY(workgroup_base, (workgroup_base) << 0u)) ^ 0u) + subgroup_id * subgroup_size), (workgroup_base + subgroup_id * subgroup_size))), (_GLF_IDENTITY((workgroup_base + _GLF_IDENTITY(subgroup_id, uint(uint(subgroup_id))) * subgroup_size), max((_GLF_IDENTITY(workgroup_base, _GLF_IDENTITY((_GLF_IDENTITY(workgroup_base, (workgroup_base) << 0u)) ^ 0u, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY((_GLF_IDENTITY(workgroup_base, (workgroup_base) << 0u)) ^ 0u, ((_GLF_IDENTITY(workgroup_base, _GLF_IDENTITY((workgroup_base) << 0u, min(_GLF_IDENTITY((workgroup_base) << 0u, clamp((workgroup_base) << 0u, (workgroup_base) << 0u, (workgroup_base) << 0u)), (workgroup_base) << 0u)))) ^ 0u) >> 0u) : _GLF_FUZZED(workgroup_size)))) + subgroup_id * subgroup_size), (workgroup_base + subgroup_id * subgroup_size)))) - 0u)), (_GLF_IDENTITY(_GLF_IDENTITY((workgroup_base + _GLF_IDENTITY(subgroup_id, uint(uint(subgroup_id))) * subgroup_size), max((_GLF_IDENTITY(workgroup_base, (_GLF_IDENTITY(workgroup_base, (workgroup_base) << 0u)) ^ 0u) + subgroup_id * subgroup_size), (workgroup_base + subgroup_id * subgroup_size))), (_GLF_IDENTITY((workgroup_base + _GLF_IDENTITY(subgroup_id, uint(uint(subgroup_id))) * subgroup_size), max((_GLF_IDENTITY(workgroup_base, _GLF_IDENTITY((_GLF_IDENTITY(workgroup_base, (workgroup_base) << 0u)) ^ 0u, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY((_GLF_IDENTITY(workgroup_base, (workgroup_base) << 0u)) ^ 0u, ((_GLF_IDENTITY(workgroup_base, (workgroup_base) << _GLF_IDENTITY(0u, _GLF_IDENTITY(uint(uvec3(0u, 0u, uint(_GLF_ONE(1.0, injectionSwitch.y)))), (uint(uvec3(0u, 0u, uint(_GLF_ONE(1.0, injectionSwitch.y))))) >> 0u)))) ^ 0u) >> 0u) : _GLF_FUZZED(workgroup_size)))) + subgroup_id * subgroup_size), (workgroup_base + subgroup_id * subgroup_size)))) - 0u))))) + uint(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(0.0, clamp(_GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(-3.8))), 0.0, 0.0)), 0.0) + (injectionSwitch))), max((_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(0.0, clamp(_GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(-3.8))), 0.0, 0.0)), 0.0) + (injectionSwitch))), (_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(0.0, clamp(_GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(-3.8))), 0.0, 0.0)), 0.0) + (injectionSwitch))))) * mat2(1.0)).x)), _GLF_IDENTITY(1u * (_GLF_IDENTITY(_GLF_IDENTITY((workgroup_base + _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, uint(uint(subgroup_id))), max(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, uint(uint(subgroup_id))), 0u | (_GLF_IDENTITY(subgroup_id, uint(uint(subgroup_id))))), _GLF_IDENTITY(subgroup_id, uint(uint(subgroup_id))))) * subgroup_size), max((workgroup_base + subgroup_id * subgroup_size), (workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(max(clamp(workgroup_id, workgroup_size, workgroup_id), subgroup_local_id)) : _GLF_IDENTITY(subgroup_size, min(_GLF_IDENTITY(subgroup_size, (subgroup_size) * 1u), subgroup_size))))))) + uint(_GLF_ZERO(0.0, injectionSwitch.x)), min(_GLF_IDENTITY(_GLF_IDENTITY((workgroup_base + _GLF_IDENTITY(subgroup_id, uint(uint(subgroup_id))) * subgroup_size), max((workgroup_base + subgroup_id * subgroup_size), (workgroup_base + subgroup_id * subgroup_size))) + uint(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(452.524))))), uint(uvec3(_GLF_IDENTITY((workgroup_base + _GLF_IDENTITY(subgroup_id, uint(uint(subgroup_id))) * subgroup_size), max((workgroup_base + subgroup_id * subgroup_size), _GLF_IDENTITY((workgroup_base + subgroup_id * subgroup_size), uint(uint(_GLF_IDENTITY((workgroup_base + subgroup_id * subgroup_size), ((workgroup_base + subgroup_id * subgroup_size)) + 0u)))))) + uint(_GLF_ZERO(0.0, injectionSwitch.x)), 1u, 1u))), _GLF_IDENTITY((workgroup_base + _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, uint(uint(subgroup_id))) * subgroup_size, _GLF_IDENTITY(uint(uint(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, uint(uint(subgroup_id))) * subgroup_size, clamp(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, uint(uint(subgroup_id))) * subgroup_size, (_GLF_IDENTITY(subgroup_id, uint(uint(subgroup_id))) * subgroup_size) | (_GLF_IDENTITY(subgroup_id, uint(uint(subgroup_id))) * subgroup_size)), _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, uint(uint(subgroup_id))) * subgroup_size, uint(uvec2(_GLF_IDENTITY(subgroup_id, uint(uint(subgroup_id))) * subgroup_size, 1u))), _GLF_IDENTITY(subgroup_id, uint(uint(subgroup_id))) * subgroup_size)))), 0u | (uint(uint(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, uint(uint(subgroup_id))) * subgroup_size, clamp(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, uint(uint(subgroup_id))) * subgroup_size, (_GLF_IDENTITY(subgroup_id, uint(uint(subgroup_id))) * subgroup_size) | (_GLF_IDENTITY(subgroup_id, uint(uint(subgroup_id))) * subgroup_size)), _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, uint(uint(subgroup_id))) * subgroup_size, uint(uvec2(_GLF_IDENTITY(subgroup_id, uint(uint(subgroup_id))) * subgroup_size, 1u))), _GLF_IDENTITY(subgroup_id, uint(uint(subgroup_id))) * subgroup_size)))))))), max((workgroup_base + subgroup_id * subgroup_size), (workgroup_base + subgroup_id * subgroup_size))) + uint(_GLF_ZERO(0.0, injectionSwitch.x))))), (false ? _GLF_FUZZED((workgroup_base)) : _GLF_IDENTITY(1u * (_GLF_IDENTITY(_GLF_IDENTITY((workgroup_base + _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, uint(uint(subgroup_id))), max(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, uint(uint(subgroup_id))), 0u | (_GLF_IDENTITY(subgroup_id, uint(uint(subgroup_id))))), _GLF_IDENTITY(subgroup_id, uint(uint(subgroup_id))))) * subgroup_size), max((workgroup_base + subgroup_id * subgroup_size), (workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(max(clamp(workgroup_id, workgroup_size, workgroup_id), subgroup_local_id)) : _GLF_IDENTITY(subgroup_size, min(_GLF_IDENTITY(subgroup_size, (subgroup_size) * 1u), subgroup_size))))))) + uint(_GLF_ZERO(0.0, injectionSwitch.x)), min(_GLF_IDENTITY(_GLF_IDENTITY((workgroup_base + _GLF_IDENTITY(subgroup_id, uint(uint(subgroup_id))) * subgroup_size), max((workgroup_base + subgroup_id * subgroup_size), (workgroup_base + subgroup_id * subgroup_size))) + uint(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(452.524))))), uint(uvec3(_GLF_IDENTITY((workgroup_base + _GLF_IDENTITY(subgroup_id, uint(uint(subgroup_id))) * subgroup_size), max((workgroup_base + subgroup_id * subgroup_size), _GLF_IDENTITY((workgroup_base + subgroup_id * subgroup_size), uint(uint(_GLF_IDENTITY((workgroup_base + subgroup_id * subgroup_size), ((workgroup_base + subgroup_id * subgroup_size)) + 0u)))))) + uint(_GLF_ZERO(0.0, injectionSwitch.x)), 1u, 1u))), _GLF_IDENTITY((workgroup_base + _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, uint(uint(subgroup_id))) * subgroup_size, _GLF_IDENTITY(uint(uint(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, uint(uint(subgroup_id))) * subgroup_size, clamp(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, uint(uint(subgroup_id))) * subgroup_size, (_GLF_IDENTITY(subgroup_id, uint(uint(subgroup_id))) * subgroup_size) | (_GLF_IDENTITY(subgroup_id, uint(uint(subgroup_id))) * subgroup_size)), _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, uint(uint(subgroup_id))) * subgroup_size, uint(uvec2(_GLF_IDENTITY(subgroup_id, uint(uint(subgroup_id))) * subgroup_size, 1u))), _GLF_IDENTITY(subgroup_id, uint(uint(subgroup_id))) * subgroup_size)))), 0u | (uint(uint(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, uint(uint(subgroup_id))) * subgroup_size, clamp(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, uint(uint(subgroup_id))) * subgroup_size, (_GLF_IDENTITY(subgroup_id, uint(uint(subgroup_id))) * subgroup_size) | (_GLF_IDENTITY(subgroup_id, uint(uint(subgroup_id))) * subgroup_size)), _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, uint(uint(subgroup_id))) * subgroup_size, uint(uvec2(_GLF_IDENTITY(subgroup_id, uint(uint(subgroup_id))) * subgroup_size, 1u))), _GLF_IDENTITY(subgroup_id, uint(uint(subgroup_id))) * subgroup_size)))))))), max((workgroup_base + subgroup_id * subgroup_size), (workgroup_base + subgroup_id * subgroup_size))) + uint(_GLF_ZERO(0.0, injectionSwitch.x))))), uint(uint(1u * (_GLF_IDENTITY(_GLF_IDENTITY((workgroup_base + _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, uint(uint(subgroup_id))), max(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, uint(uint(subgroup_id))), 0u | (_GLF_IDENTITY(subgroup_id, uint(uint(subgroup_id))))), _GLF_IDENTITY(subgroup_id, uint(uint(subgroup_id))))) * subgroup_size), max((workgroup_base + subgroup_id * subgroup_size), (workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(max(clamp(workgroup_id, workgroup_size, workgroup_id), subgroup_local_id)) : _GLF_IDENTITY(subgroup_size, min(_GLF_IDENTITY(subgroup_size, (subgroup_size) * 1u), subgroup_size))))))) + uint(_GLF_ZERO(0.0, injectionSwitch.x)), min(_GLF_IDENTITY(_GLF_IDENTITY((workgroup_base + _GLF_IDENTITY(subgroup_id, uint(uint(subgroup_id))) * subgroup_size), max((workgroup_base + subgroup_id * subgroup_size), (workgroup_base + subgroup_id * subgroup_size))) + uint(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(452.524))))), uint(uvec3(_GLF_IDENTITY((workgroup_base + _GLF_IDENTITY(subgroup_id, uint(uint(subgroup_id))) * subgroup_size), max((workgroup_base + subgroup_id * subgroup_size), _GLF_IDENTITY((workgroup_base + subgroup_id * subgroup_size), uint(uint(_GLF_IDENTITY((workgroup_base + subgroup_id * subgroup_size), ((workgroup_base + subgroup_id * subgroup_size)) + 0u)))))) + uint(_GLF_ZERO(0.0, injectionSwitch.x)), 1u, 1u))), _GLF_IDENTITY((workgroup_base + _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, uint(uint(subgroup_id))) * subgroup_size, _GLF_IDENTITY(uint(uint(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, uint(uint(subgroup_id))) * subgroup_size, clamp(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, uint(uint(subgroup_id))) * subgroup_size, (_GLF_IDENTITY(subgroup_id, uint(uint(subgroup_id))) * subgroup_size) | (_GLF_IDENTITY(subgroup_id, uint(uint(subgroup_id))) * subgroup_size)), _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, uint(uint(subgroup_id))) * subgroup_size, uint(uvec2(_GLF_IDENTITY(subgroup_id, uint(uint(subgroup_id))) * subgroup_size, 1u))), _GLF_IDENTITY(subgroup_id, uint(uint(subgroup_id))) * subgroup_size)))), 0u | (uint(uint(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, uint(uint(subgroup_id))) * subgroup_size, clamp(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, uint(uint(subgroup_id))) * subgroup_size, (_GLF_IDENTITY(subgroup_id, uint(uint(subgroup_id))) * subgroup_size) | (_GLF_IDENTITY(subgroup_id, uint(uint(subgroup_id))) * subgroup_size)), _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, uint(uint(subgroup_id))) * subgroup_size, uint(uvec2(_GLF_IDENTITY(subgroup_id, uint(uint(subgroup_id))) * subgroup_size, 1u))), _GLF_IDENTITY(subgroup_id, uint(uint(subgroup_id))) * subgroup_size)))))))), max((workgroup_base + subgroup_id * subgroup_size), (workgroup_base + subgroup_id * subgroup_size))) + uint(_GLF_ZERO(0.0, injectionSwitch.x)))))))))))) + subgroup_local_id, (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? workgroup_base + subgroup_id * subgroup_size + subgroup_local_id : _GLF_FUZZED(((_GLF_IDENTITY(workgroup_size, (workgroup_size) | (workgroup_size)) % subgroup_id) - subgroup_size)), (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).y)), ! (! (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).y)), false || (_GLF_TRUE(true, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) < _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, vec2(mat2x3(injectionSwitch, 0.0, 1.0, 1.0, 0.0))), injectionSwitch)), injectionSwitch, injectionSwitch)), injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)))).y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))) * round(length(normalize(vec3(1.0, 1.0, 1.0)))))), false || ((_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) < _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, vec2(mat2x3(injectionSwitch, 0.0, 1.0, 1.0, 0.0))), injectionSwitch)), injectionSwitch, injectionSwitch)), injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)))).y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))) * round(length(normalize(vec3(1.0, 1.0, 1.0)))))))))))))) ? _GLF_IDENTITY(workgroup_base, clamp(workgroup_base, workgroup_base, workgroup_base)) + subgroup_id * subgroup_size + subgroup_local_id : _GLF_FUZZED(((workgroup_size % subgroup_id) - subgroup_size))) / _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1u, _GLF_IDENTITY((1u), ((1u)) - 0u) | (1u)), 0u + (_GLF_IDENTITY(1u, _GLF_IDENTITY((1u), ((1u)) - 0u) | (1u)))), max(_GLF_IDENTITY(1u, (1u) | (1u)), _GLF_IDENTITY(_GLF_IDENTITY(1u, (1u) | (_GLF_IDENTITY(1u, 0u | (1u)))), ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (_GLF_IDENTITY(1u, (1u) | (1u))), ~ (~ (~ _GLF_IDENTITY((_GLF_IDENTITY(1u, (1u) | (1u))), ~ (~ ((_GLF_IDENTITY(1u, (1u) | (1u))))))))), (~ _GLF_IDENTITY((_GLF_IDENTITY(1u, (1u) | (1u))), min((_GLF_IDENTITY(1u, (1u) | (1u))), (_GLF_IDENTITY(1u, (1u) | (1u)))))) << 0u))))))));
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     return;
    }
   else
    {
    }
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), true && (! (false)))))))
  return;
 uint next_virtual_gid = _GLF_IDENTITY(workgroup_base, clamp(workgroup_base, workgroup_base, _GLF_IDENTITY(workgroup_base, clamp(workgroup_base, _GLF_IDENTITY(workgroup_base, ~ (~ (workgroup_base))), _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, (workgroup_base) - uint(_GLF_ZERO(0.0, injectionSwitch.x))), clamp(_GLF_IDENTITY(workgroup_base, (workgroup_base) - uint(_GLF_ZERO(0.0, injectionSwitch.x))), _GLF_IDENTITY(workgroup_base, _GLF_IDENTITY((workgroup_base), (_GLF_IDENTITY((workgroup_base), ~ (~ ((workgroup_base))))) | (_GLF_IDENTITY((workgroup_base), ((workgroup_base)) | 0u))) - _GLF_IDENTITY(uint(_GLF_ZERO(0.0, injectionSwitch.x)), (_GLF_IDENTITY(uint(_GLF_ZERO(0.0, injectionSwitch.x)), max(uint(_GLF_ZERO(0.0, injectionSwitch.x)), uint(_GLF_ZERO(0.0, injectionSwitch.x))))) / 1u)), _GLF_IDENTITY(workgroup_base, (workgroup_base) - uint(_GLF_ZERO(0.0, injectionSwitch.x))))))))) + subgroup_id * subgroup_size + _GLF_IDENTITY((_GLF_IDENTITY((subgroup_local_id + _GLF_IDENTITY(_GLF_IDENTITY(1, (1) >> 0), (_GLF_IDENTITY(_GLF_IDENTITY(1, (1) >> 0), min(_GLF_IDENTITY(1, (1) >> 0), _GLF_IDENTITY(1, (1) >> 0)))) << 0)), ((subgroup_local_id + _GLF_IDENTITY(_GLF_IDENTITY(1, (1) >> 0), (_GLF_IDENTITY(_GLF_IDENTITY(1, (1) >> 0), min(_GLF_IDENTITY(1, (1) >> _GLF_IDENTITY(0, clamp(0, 0, 0))), _GLF_IDENTITY(_GLF_IDENTITY(1, 1 * (1)), (1) >> 0)))) << 0))) | ((subgroup_local_id + _GLF_IDENTITY(_GLF_IDENTITY(1, (1) >> 0), (_GLF_IDENTITY(_GLF_IDENTITY(1, (1) >> 0), min(_GLF_IDENTITY(1, (1) >> 0), _GLF_IDENTITY(1, (1) >> _GLF_IDENTITY(0, max(0, 0)))))) << _GLF_IDENTITY(0, min(_GLF_IDENTITY(0, 0 ^ (0)), 0)))))) % subgroup_size), ~ (~ ((_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id + 1), _GLF_IDENTITY(((subgroup_local_id + 1)) + 0u, (((subgroup_local_id + 1)) + 0u) >> 0u)) % subgroup_size, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) + 0u) % subgroup_size), uint(uvec4(~ (_GLF_IDENTITY((subgroup_local_id + 1), (_GLF_IDENTITY((subgroup_local_id + 1), min((subgroup_local_id + 1), _GLF_IDENTITY((subgroup_local_id + 1), clamp((subgroup_local_id + 1), _GLF_IDENTITY((subgroup_local_id + 1), uint(uvec3((subgroup_local_id + 1), 1u, 1u))), (subgroup_local_id + 1)))))) + 0u) % subgroup_size), 0u, 0u, 0u)))))))));
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), bool(bvec2(_GLF_WRAPPED_IF_FALSE(false), true))))
      {
      }
     else
      {
       return;
      }
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
    }
  }
 if(_GLF_DEAD(false))
  return;
 do
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 do
  {
   _GLF_IDENTITY(buf[virtual_gid] = 1, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(buf[virtual_gid] = 1, (_GLF_IDENTITY(buf[virtual_gid] = 1, uint(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (buf[virtual_gid] = 1))) / (0u | 1u)), 0u | (buf[virtual_gid] = 1)), 0u + (_GLF_IDENTITY(_GLF_IDENTITY(buf[virtual_gid] = 1, (_GLF_IDENTITY(buf[virtual_gid] = 1, uint(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (buf[virtual_gid] = 1))) / (_GLF_IDENTITY(0u, max(0u, _GLF_IDENTITY(0u, max(0u, 0u)))) | 1u)), 0u | _GLF_IDENTITY((buf[virtual_gid] = 1), (false ? _GLF_FUZZED(num_workgroup) : (buf[virtual_gid] = 1)))))), (_GLF_IDENTITY(buf[virtual_gid] = 1, 0u | (buf[virtual_gid] = 1))) | 0u), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(buf[virtual_gid] = _GLF_IDENTITY(_GLF_IDENTITY(1, (1) << 0), ~ _GLF_IDENTITY(_GLF_IDENTITY((~ (_GLF_IDENTITY(1, (_GLF_IDENTITY(_GLF_IDENTITY(1, 0 | (1)), (_GLF_IDENTITY(1, 0 | (1))) << 0)) ^ int(_GLF_ZERO(0.0, injectionSwitch.x))))), ((~ (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, 0 | (1))) ^ int(_GLF_ZERO(0.0, injectionSwitch.x)))))) * _GLF_IDENTITY(1, ~ (_GLF_IDENTITY(~ (1), (~ (1)) / 1)))), (_GLF_IDENTITY((~ (_GLF_IDENTITY(1, (_GLF_IDENTITY(_GLF_IDENTITY(1, 0 | (1)), (_GLF_IDENTITY(1, 0 | (1))) << 0)) ^ int(_GLF_ZERO(0.0, injectionSwitch.x))))), ((~ (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, 0 | (1))) ^ int(_GLF_ZERO(0.0, injectionSwitch.x)))))) * _GLF_IDENTITY(1, ~ (_GLF_IDENTITY(~ (1), (~ (1)) / 1))))) | 0)), 0u | (buf[virtual_gid] = 1)), (_GLF_IDENTITY(buf[virtual_gid] = 1, 0u | (buf[virtual_gid] = 1))) | 0u), ~ _GLF_IDENTITY((~ (_GLF_IDENTITY(_GLF_IDENTITY(buf[virtual_gid] = 1, 0u | (buf[virtual_gid] = 1)), (_GLF_IDENTITY(buf[virtual_gid] = 1, _GLF_IDENTITY(0u, ~ (~ (0u))) | _GLF_IDENTITY((buf[virtual_gid] = 1), ((buf[virtual_gid] = 1)) << 0u))) | 0u))), ((~ (_GLF_IDENTITY(_GLF_IDENTITY(buf[virtual_gid] = 1, 0u | (buf[virtual_gid] = 1)), (_GLF_IDENTITY(buf[virtual_gid] = 1, _GLF_IDENTITY(0u, ~ (~ (0u))) | _GLF_IDENTITY((buf[virtual_gid] = 1), ((buf[virtual_gid] = 1)) << 0u))) | 0u)))) >> 0u)), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(buf[virtual_gid] = _GLF_IDENTITY(_GLF_IDENTITY(1, (1) << _GLF_IDENTITY(0, 0 ^ (0))), ~ _GLF_IDENTITY(_GLF_IDENTITY((~ (_GLF_IDENTITY(1, (_GLF_IDENTITY(_GLF_IDENTITY(1, 0 | (1)), (_GLF_IDENTITY(1, 0 | (1))) << 0)) ^ int(_GLF_ZERO(0.0, injectionSwitch.x))))), ((~ (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, 0 | (_GLF_IDENTITY(1, max(1, 1))))) ^ int(_GLF_ZERO(0.0, injectionSwitch.x)))))) * _GLF_IDENTITY(1, ~ (_GLF_IDENTITY(~ (1), (~ (1)) / 1)))), (_GLF_IDENTITY((~ (_GLF_IDENTITY(1, (_GLF_IDENTITY(_GLF_IDENTITY(1, 0 | (1)), (_GLF_IDENTITY(1, 0 | (1))) << 0)) ^ int(_GLF_ZERO(0.0, injectionSwitch.x))))), ((~ (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, 0 | (1))) ^ int(_GLF_ZERO(0.0, injectionSwitch.x)))))) * _GLF_IDENTITY(1, ~ (_GLF_IDENTITY(~ (1), (~ (1)) / 1))))) | 0)), 0u | (buf[virtual_gid] = 1)), (_GLF_IDENTITY(buf[virtual_gid] = 1, 0u | (buf[virtual_gid] = 1))) | 0u), ~ _GLF_IDENTITY((~ (_GLF_IDENTITY(_GLF_IDENTITY(buf[virtual_gid] = 1, 0u | (buf[virtual_gid] = 1)), (_GLF_IDENTITY(buf[virtual_gid] = 1, _GLF_IDENTITY(0u, ~ (~ (0u))) | _GLF_IDENTITY(_GLF_IDENTITY((buf[virtual_gid] = 1), ((buf[virtual_gid] = 1)) << 0u), ((buf[virtual_gid] = 1)) << 0u))) | 0u))), ((~ (_GLF_IDENTITY(_GLF_IDENTITY(buf[virtual_gid] = 1, 0u | (buf[virtual_gid] = 1)), (_GLF_IDENTITY(buf[virtual_gid] = 1, _GLF_IDENTITY(0u, ~ (~ (0u))) | _GLF_IDENTITY((buf[virtual_gid] = 1), ((buf[virtual_gid] = 1)) << 0u))) | 0u)))) >> 0u))) / ((1u << _GLF_IDENTITY(uint(1u), _GLF_IDENTITY(uint(1u), (uint(1u)) - 0u))) >> _GLF_IDENTITY(uint(1u), uint(1u))))) ^ 0u)) + 0u);
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0)))));
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    return;
   do
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         return;
        }
       else
        {
        }
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))))
        break;
       if(_GLF_DEAD(false))
        break;
       for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
          continue;
         if(subgroup_local_id + 1 < subgroup_size)
          {
           int i = _GLF_IDENTITY(0, clamp(0, _GLF_IDENTITY(_GLF_IDENTITY(0, (0) - 0), (true ? _GLF_IDENTITY(0, (0) - 0) : _GLF_FUZZED(-21640))), 0));
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y, (injectionSwitch.x < injectionSwitch.y) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))
                {
                 return;
                 if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
                  break;
                }
               else
                {
                 if(_GLF_DEAD(false))
                  return;
                }
              }
            }
           if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), (_GLF_WRAPPED_IF_TRUE(true)) || _GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bool((injectionSwitch.x > injectionSwitch.y)))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), (_GLF_WRAPPED_IF_TRUE(true)) || _GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bool((injectionSwitch.x > injectionSwitch.y)))))), bool(bvec4(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), (_GLF_WRAPPED_IF_TRUE(true)) || _GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bool((injectionSwitch.x > injectionSwitch.y)))))), true, true, true)))), ! (_GLF_IDENTITY(! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), (_GLF_WRAPPED_IF_TRUE(true)) || _GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bool((injectionSwitch.x > injectionSwitch.y)))))), bool(bvec4(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), (_GLF_WRAPPED_IF_TRUE(true)) || _GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bool((injectionSwitch.x > injectionSwitch.y)))))), true, true, true))))), bool(bvec2(! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), (_GLF_WRAPPED_IF_TRUE(true)) || _GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bool((injectionSwitch.x > injectionSwitch.y)))))), bool(bvec4(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), (_GLF_WRAPPED_IF_TRUE(true)) || _GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bool((injectionSwitch.x > injectionSwitch.y)))))), true, true, true))))), false))))))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), injectionSwitch)).x > injectionSwitch.y))))
              return;
            }
           else
            {
            }
           if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), bool(bvec2(_GLF_WRAPPED_IF_TRUE(true), false)))), false || (bool(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), bool(bvec2(_GLF_WRAPPED_IF_TRUE(true), false))))))), bool(_GLF_IDENTITY(bool(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), bool(bvec2(_GLF_WRAPPED_IF_TRUE(true), false)))), false || (bool(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), bool(bvec2(_GLF_WRAPPED_IF_TRUE(true), false)))))))), ! (! (bool(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), bool(bvec2(_GLF_WRAPPED_IF_TRUE(true), false)))), false || (bool(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), bool(bvec2(_GLF_WRAPPED_IF_TRUE(true), false)))))))))))))))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                {
                 do
                  {
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     do
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(4709.1868)), _GLF_IDENTITY(float(injectionSwitch.x), clamp(_GLF_IDENTITY(float(injectionSwitch.x), (float(injectionSwitch.x)) - 0.0), float(injectionSwitch.x), float(injectionSwitch.x))), bool(_GLF_IDENTITY(true, _GLF_IDENTITY(false || (_GLF_IDENTITY(true, (_GLF_IDENTITY(true, true && (true))) || false)), false || (false || (_GLF_IDENTITY(true, (_GLF_IDENTITY(true, true && (true))) || false)))))))) > injectionSwitch.y))))
                        {
                         if(_GLF_WRAPPED_IF_TRUE(true))
                          {
                           return;
                          }
                         else
                          {
                          }
                        }
                      }
                     while(_GLF_WRAPPED_LOOP(false));
                     for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY((int(_GLF_ZERO(0.0, injectionSwitch.x)) | _GLF_IDENTITY(_GLF_IDENTITY(0, int(_GLF_IDENTITY(int(0), 0 ^ (int(0))))), 0 ^ (_GLF_IDENTITY(0, int(_GLF_IDENTITY(int(0), 0 ^ (int(0)))))))), ((int(_GLF_ZERO(0.0, injectionSwitch.x)) | _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(0, _GLF_IDENTITY(int(ivec4(_GLF_IDENTITY(0, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(0, (0) | 0)), int(int(~ (_GLF_IDENTITY(0, (0) | 0))))))), int(_GLF_ONE(1.0, injectionSwitch.y)), ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6))), 0)), (int(ivec4(_GLF_IDENTITY(0, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(0, (0) | 0)), int(int(~ (_GLF_IDENTITY(0, (0) | 0))))))), int(_GLF_ONE(1.0, injectionSwitch.y)), ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6))), 0))) << 0)), int(_GLF_IDENTITY(int(0), _GLF_IDENTITY(0 ^ (int(0)), min(0 ^ (int(0)), 0 ^ (int(0))))))), 0 ^ _GLF_IDENTITY((_GLF_IDENTITY(0, int(_GLF_IDENTITY(int(0), 0 ^ (int(0)))))), min((_GLF_IDENTITY(0, int(_GLF_IDENTITY(int(0), 0 ^ _GLF_IDENTITY((int(0)), ~ (~ ((int(0))))))))), (_GLF_IDENTITY(0, int(_GLF_IDENTITY(int(0), 0 ^ (int(0))))))))))) << 0)); _GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) ^ 0))
                      {
                       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bool((injectionSwitch.x > injectionSwitch.y))))), true && (_GLF_FALSE(_GLF_IDENTITY(false, (false) || false), (injectionSwitch.x > injectionSwitch.y))))))
                        {
                         if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false))))
                          continue;
                         if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(5371.8249) : injectionSwitch.x)), max(injectionSwitch.x, injectionSwitch.x))), max((_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(max(injectionSwitch.x, injectionSwitch.x), mix(float(_GLF_IDENTITY(max(injectionSwitch.x, injectionSwitch.x), float(_GLF_IDENTITY(float(max(injectionSwitch.x, injectionSwitch.x)), (float(max(injectionSwitch.x, injectionSwitch.x))) - 0.0)))), float(_GLF_FUZZED(97.06)), bool(false))))), (_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat4(injectionSwitch, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, 0.0))), 1.0), transpose(_GLF_IDENTITY(transpose(mat4(injectionSwitch, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, 0.0))), 1.0)), (transpose(mat4(injectionSwitch, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, 0.0))), 1.0))) - mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))))).y)) ? _GLF_FUZZED(vec2(3.6, -5489.0871)) : injectionSwitch)), injectionSwitch)).x, injectionSwitch.x))))) - _GLF_IDENTITY(0.0, min(0.0, 0.0))) > injectionSwitch.y, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(5371.8249) : _GLF_IDENTITY(injectionSwitch.x, float(vec4(_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(5.0) : injectionSwitch.x)), _GLF_IDENTITY(dot(vec3(0.0, 0.0, _GLF_IDENTITY(0.0, min(0.0, _GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, (0.0) - 0.0)) - 0.0)))), vec3(1.0, 1.0, 1.0)), dot(vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0))), 1.0, 0.0))))), max(injectionSwitch.x, injectionSwitch.x))), max((_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(max(injectionSwitch.x, injectionSwitch.x), mix(float(max(injectionSwitch.x, injectionSwitch.x)), float(_GLF_FUZZED(97.06)), bool(false))))), (_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(vec2(3.6, -5489.0871)) : injectionSwitch)), injectionSwitch)).x, injectionSwitch.x))))) - 0.0) > injectionSwitch.y, bool(bool(_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(5371.8249) : _GLF_IDENTITY(injectionSwitch.x, float(vec4(_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(5.0) : injectionSwitch.x)), _GLF_IDENTITY(dot(vec3(0.0, 0.0, _GLF_IDENTITY(0.0, min(0.0, _GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, (0.0) - 0.0)) - 0.0)))), vec3(1.0, 1.0, 1.0)), dot(vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0))), 1.0, 0.0))))), max(injectionSwitch.x, injectionSwitch.x))), max((_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(max(injectionSwitch.x, injectionSwitch.x), mix(float(max(injectionSwitch.x, injectionSwitch.x)), float(_GLF_FUZZED(97.06)), bool(false))))), (_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(vec2(3.6, -5489.0871)) : injectionSwitch)), injectionSwitch)).x, injectionSwitch.x))))) - 0.0) > injectionSwitch.y)))) || false)), false || ((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(5371.8249) : injectionSwitch.x)), max(injectionSwitch.x, injectionSwitch.x))), max((_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(max(injectionSwitch.x, injectionSwitch.x), mix(float(_GLF_IDENTITY(max(injectionSwitch.x, injectionSwitch.x), float(_GLF_IDENTITY(float(max(injectionSwitch.x, injectionSwitch.x)), (float(max(injectionSwitch.x, injectionSwitch.x))) - 0.0)))), float(_GLF_FUZZED(97.06)), bool(false))))), (_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat4(injectionSwitch, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, 0.0))), 1.0), transpose(_GLF_IDENTITY(transpose(mat4(injectionSwitch, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, 0.0))), 1.0)), (transpose(mat4(injectionSwitch, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, 0.0))), 1.0))) - mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))))).y)) ? _GLF_FUZZED(vec2(3.6, -5489.0871)) : injectionSwitch)), injectionSwitch)).x, injectionSwitch.x))))) - _GLF_IDENTITY(0.0, min(0.0, 0.0))) > injectionSwitch.y, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(5371.8249) : _GLF_IDENTITY(injectionSwitch.x, float(vec4(_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(5.0) : injectionSwitch.x)), _GLF_IDENTITY(dot(vec3(0.0, 0.0, _GLF_IDENTITY(0.0, min(0.0, _GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, (0.0) - 0.0)) - 0.0)))), vec3(1.0, 1.0, 1.0)), dot(vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0))), 1.0, 0.0))))), max(injectionSwitch.x, injectionSwitch.x))), max((_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(max(injectionSwitch.x, injectionSwitch.x), mix(float(max(injectionSwitch.x, injectionSwitch.x)), float(_GLF_FUZZED(97.06)), bool(false))))), (_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(vec2(3.6, -5489.0871)) : injectionSwitch)), injectionSwitch)).x, injectionSwitch.x))))) - 0.0) > injectionSwitch.y, bool(bool(_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(5371.8249) : _GLF_IDENTITY(injectionSwitch.x, float(vec4(_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(5.0) : injectionSwitch.x)), _GLF_IDENTITY(dot(vec3(0.0, 0.0, _GLF_IDENTITY(0.0, min(0.0, _GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, (0.0) - 0.0)) - 0.0)))), vec3(1.0, 1.0, 1.0)), dot(vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0))), 1.0, 0.0))))), max(injectionSwitch.x, injectionSwitch.x))), max((_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(max(injectionSwitch.x, injectionSwitch.x), mix(float(max(injectionSwitch.x, injectionSwitch.x)), float(_GLF_FUZZED(97.06)), bool(false))))), (_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(vec2(3.6, -5489.0871)) : injectionSwitch)), injectionSwitch)).x, injectionSwitch.x))))) - 0.0) > injectionSwitch.y)))) || false)))))))
                          continue;
                         if(_GLF_DEAD(false))
                          break;
                         if(_GLF_DEAD(false))
                          continue;
                         if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, false || (true))))
                          {
                           if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
                            continue;
                           return;
                          }
                         else
                          {
                          }
                         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true))))))
                          continue;
                         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false)) || false)), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY((_GLF_IDENTITY(! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0) > injectionSwitch.y))), (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false)) || false)), bool(bvec3((_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false)) || false)), true, true))), true, true)), false || (bool(bvec3(_GLF_IDENTITY((_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false)) || false)), bool(bvec3((_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false)) || false)), true, _GLF_IDENTITY(true, (true) || false)))), true, true))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY((_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false), bool(bvec4(_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false), false, false, true)))) || false)), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY((_GLF_IDENTITY(! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0) > injectionSwitch.y))), (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false)) || false)), bool(bvec3((_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true))))) || false)) || false)), true, true))), true, true)), false || (bool(bvec3(_GLF_IDENTITY((_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY((! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false, ((! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false) || false))) || false)), bool(bvec3((_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false)) || false)), true, _GLF_IDENTITY(true, (true) || false)))), true, true))))))))))
                          continue;
                         if(_GLF_DEAD(false))
                          break;
                        }
                       if(_GLF_DEAD(false))
                        {
                         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))
                          break;
                         continue;
                        }
                      }
                     if(_GLF_DEAD(false))
                      continue;
                    }
                   else
                    {
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true))))
                        continue;
                       break;
                      }
                    }
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), ! (! (false)))) && true), true, true, false))), _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(bvec3((injectionSwitch.x > injectionSwitch.y), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bool(bvec4(bool(bvec3((injectionSwitch.x > injectionSwitch.y), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true, true, true)))))));
                 if(_GLF_DEAD(false))
                  continue;
                }
               else
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bvec3(false, true, false))))))))
                  continue;
                }
              }
             else
              {
              }
            }
           else
            {
            }
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              continue;
             if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y) && true)))))
              {
               if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_IF_TRUE(true)), (! (_GLF_WRAPPED_IF_TRUE(true))) || false))))
                {
                 if(_GLF_DEAD(false))
                  return;
                }
               else
                {
                }
               return;
              }
            }
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)))).y))))
            continue;
           atomicStore(buf[_GLF_IDENTITY(_GLF_IDENTITY(next_virtual_gid, (_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) < injectionSwitch.y)) ? next_virtual_gid : _GLF_FUZZED(num_workgroup))), (_GLF_IDENTITY(_GLF_IDENTITY(next_virtual_gid, (_GLF_TRUE(_GLF_IDENTITY(true, ! (! (true))), (injectionSwitch.x < injectionSwitch.y)) ? next_virtual_gid : _GLF_FUZZED(num_workgroup))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(next_virtual_gid, (_GLF_IDENTITY(next_virtual_gid, min(next_virtual_gid, next_virtual_gid))) | (next_virtual_gid)), (_GLF_IDENTITY(next_virtual_gid, (next_virtual_gid) | 0u)) << _GLF_IDENTITY(0u, min(0u, 0u))), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? next_virtual_gid : _GLF_FUZZED(num_workgroup))), uint(uvec4(_GLF_IDENTITY(next_virtual_gid, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? next_virtual_gid : _GLF_FUZZED(num_workgroup))), 1u, 0u, _GLF_IDENTITY(0u, uint(uvec2(0u, 1u)))))), _GLF_IDENTITY(next_virtual_gid, (_GLF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(true, (true) || false), false), _GLF_IDENTITY(bvec2(bvec2(bvec2(_GLF_IDENTITY(true, (true) || false), false))), _GLF_IDENTITY(bvec2(bvec2(_GLF_IDENTITY(bvec2(bvec2(bvec2(_GLF_IDENTITY(true, (true) || false), false))), bvec2(bvec2(bvec2(bvec2(bvec2(_GLF_IDENTITY(true, (true) || false), false)))))))), bvec2(bvec2(bvec2(bvec2(_GLF_IDENTITY(bvec2(bvec2(bvec2(_GLF_IDENTITY(true, (true) || false), false))), bvec2(bvec2(bvec2(bvec2(bvec2(_GLF_IDENTITY(true, (true) || false), false)))))))))))))), ! (! (bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(true, (true) || false), false), bvec2(bvec2(bvec2(_GLF_IDENTITY(true, (_GLF_IDENTITY(_GLF_IDENTITY(true, true && (true)), bool(bvec4(true, false, true, true)))) || false), false))))))))), (injectionSwitch.x < injectionSwitch.y)) ? next_virtual_gid : _GLF_FUZZED(num_workgroup))), _GLF_IDENTITY(next_virtual_gid, (_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x < injectionSwitch.y)) ? next_virtual_gid : _GLF_FUZZED(num_workgroup)))))) - 0u)], _GLF_IDENTITY(uint(2), (uint(2)) / 1u), 4, 64, 4);
          }
         else
          {
           if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), true && (_GLF_WRAPPED_IF_TRUE(true))))
            {
             if(_GLF_DEAD(false))
              return;
             if(_GLF_DEAD(false))
              break;
             do
              {
               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, ! (! _GLF_IDENTITY((_GLF_IDENTITY(true, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(_GLF_IDENTITY(bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), _GLF_IDENTITY(bool(bvec2(bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true)), ! (! (bool(bvec2(bool(_GLF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY((true), ! (! ((true)))) || false), (injectionSwitch.x < injectionSwitch.y))), true)))))))) && (_GLF_IDENTITY(true, ! (! (true)))), bool(bvec4(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(_GLF_IDENTITY(bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), _GLF_IDENTITY(bool(bvec2(bool(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(vec2(injectionSwitch), (vec2(injectionSwitch)) / vec2(1.0, 1.0)))).x < injectionSwitch.y))), true)), _GLF_IDENTITY(! (! (bool(bvec2(bool(_GLF_TRUE(_GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, ! (! (true))))), (injectionSwitch.x < injectionSwitch.y))), true)))), ! (! (! (! (bool(bvec2(bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true))))))))))) && (_GLF_IDENTITY(true, ! (! (true)))), true, true, true))))), ((_GLF_IDENTITY(true, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(_GLF_IDENTITY(bool(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))).y))), _GLF_IDENTITY(bool(bvec2(bool(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), true && ((injectionSwitch.x < injectionSwitch.y))))), true)), ! (_GLF_IDENTITY(! (bool(bvec2(bool(_GLF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY((true) || false, ! (! (_GLF_IDENTITY((true) || false, true && ((true) || false)))))), (injectionSwitch.x < injectionSwitch.y))), true))), (! (bool(bvec2(bool(_GLF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY((true), ((true)) || false) || false), (injectionSwitch.x < injectionSwitch.y))), true)))) || false)))))) && (_GLF_IDENTITY(true, ! (! (true)))), bool(bvec4(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) && true)), _GLF_IDENTITY(bool(bvec2(bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true)), _GLF_IDENTITY(_GLF_IDENTITY(! (! (bool(bvec2(bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true)))), ! (! (! (! (bool(bvec2(bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true))))))), bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(! (! (bool(bvec2(bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true)))), ! (! (! (! (bool(bvec2(bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true))))))), (_GLF_IDENTITY(! (! (bool(bvec2(bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true)))), ! (! (! (! (bool(bvec2(bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true)))))))) && true), false, false))))))) && (_GLF_IDENTITY(true, ! (! (true)))), true, true, true)))))) && true))))), (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch))) / cos(vec2(0.0, 0.0))).x < _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mix(vec2((injectionSwitch)[0], _GLF_FUZZED(6.0)), vec2(_GLF_FUZZED(5.3), (injectionSwitch)[1]), bvec2(false, true)), _GLF_IDENTITY(vec2(1.0, 1.0) * (mix(vec2((injectionSwitch)[0], _GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(6.0), min(_GLF_IDENTITY(_GLF_FUZZED(6.0), min(_GLF_FUZZED(6.0), _GLF_IDENTITY(_GLF_FUZZED(6.0), max(_GLF_FUZZED(6.0), _GLF_FUZZED(6.0))))), _GLF_FUZZED(6.0))), (false ? _GLF_FUZZED(7404.0375) : _GLF_FUZZED(6.0)))), vec2(_GLF_FUZZED(_GLF_IDENTITY(5.3, max(_GLF_IDENTITY(5.3, (5.3) - 0.0), _GLF_IDENTITY(5.3, float(mat4(5.3, 0.0, determinant(mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0)), 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0, 1.0, 1.0)))))), (injectionSwitch)[1]), bvec2(false, true))), mix(vec2((vec2(1.0, 1.0) * (mix(vec2((injectionSwitch)[0], _GLF_IDENTITY(_GLF_FUZZED(6.0), (false ? _GLF_FUZZED(7404.0375) : _GLF_FUZZED(6.0)))), vec2(_GLF_FUZZED(5.3), (injectionSwitch)[1]), bvec2(false, true))))[0], (vec2(1.0, 1.0) * (mix(vec2((injectionSwitch)[0], _GLF_IDENTITY(_GLF_FUZZED(6.0), (false ? _GLF_FUZZED(7404.0375) : _GLF_FUZZED(6.0)))), vec2(_GLF_FUZZED(5.3), (injectionSwitch)[1]), bvec2(false, true))))[1]), vec2(_GLF_FUZZED(float(27092)), _GLF_FUZZED(-8962.4286)), bvec2(false, false))))).y))))
                {
                 if(_GLF_DEAD(false))
                  return;
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(false))
                    continue;
                   continue;
                  }
                 if(_GLF_DEAD(false))
                  break;
                 if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
                  continue;
                 if(_GLF_DEAD(false))
                  continue;
                 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                  {
                   atomicStore(buf[next_virtual_gid], _GLF_IDENTITY(uint(2), (_GLF_IDENTITY(uint(2), (uint(2)) >> 0u)) | (0u << _GLF_IDENTITY(uint(0u), uint(0u)))), 4, 64, 4);
                  }
                 if(_GLF_DEAD(false))
                  return;
                }
               else
                {
                 if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec3(_GLF_DEAD(false), true, true)), (bool(bvec3(_GLF_DEAD(false), true, true))) && true)))
                  break;
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  break;
                 if(_GLF_DEAD(false))
                  continue;
                }
              }
             while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), bool(bool(_GLF_WRAPPED_LOOP(false)))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec2(bvec3(bvec2(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), bool(bool(_GLF_WRAPPED_LOOP(false)))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false))))));
            }
           else
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              continue;
             if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true)))))
              break;
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(mat3x4(injectionSwitch.y, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, abs(1.0), 0.0, 0.0)))))))
            {
             do
              {
               return;
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
          }
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 else
  {
  }
}
