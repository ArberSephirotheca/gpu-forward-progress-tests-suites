#version 460
struct _GLF_struct_1 {
 vec2 _f0;
 vec2 _f1;
} ;

struct _GLF_struct_0 {
 bvec3 _f0;
 mat2x4 _f1;
 mat2x4 _f2;
 ivec3 _f3;
} ;

struct _GLF_struct_2 {
 mat2x3 _f0;
 vec3 _f1;
 bvec3 _f2;
 uvec4 _f3;
 _GLF_struct_0 _f4;
 _GLF_struct_1 _f5;
} ;

struct _GLF_struct_3 {
 uint num_workgroup;
 _GLF_struct_2 _f0;
 uvec3 _f1;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
uint subgroup_size = 16;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 _GLF_struct_3 _GLF_struct_replacement_3 = _GLF_struct_3(gl_NumWorkGroups.x, _GLF_struct_2(mat2x3(1.0), vec3(1.0), bvec3(true), uvec4(1u), _GLF_struct_0(bvec3(true), mat2x4(1.0), mat2x4(1.0), ivec3(1)), _GLF_struct_1(vec2(1.0), vec2(1.0))), uvec3(1u));
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = workgroup_size * workgroup_id;
 uint virtual_gid = workgroup_base + subgroup_id * subgroup_size + subgroup_local_id;
 uint next_virtual_gid = workgroup_base + subgroup_id * subgroup_size + ((subgroup_local_id + 1) % subgroup_size);
 buf[virtual_gid] = 1;
 atomicStore(buf[next_virtual_gid], uint(2), 4, 64, 4);
}
