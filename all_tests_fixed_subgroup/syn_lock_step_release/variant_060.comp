#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! _GLF_IDENTITY((false), false || ((false))), ! (! (! (false))))))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
  barrier();
 if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).y)))) || false), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) || false)))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(_GLF_IDENTITY(float(_GLF_FUZZED(65.99)), (false ? _GLF_FUZZED((-8059.4299 * -718.033)) : float(_GLF_FUZZED(65.99)))), _GLF_IDENTITY(float(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, float(_GLF_IDENTITY(vec2(injectionSwitch.y, 0.0), clamp(vec2(injectionSwitch.y, 0.0), vec2(injectionSwitch.y, 0.0), vec2(injectionSwitch.y, 0.0)))))))), mix(float(_GLF_IDENTITY(float(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))), (true ? float(_GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(37.86), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-9722.1134)), bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))), injectionSwitch, injectionSwitch)).y, _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))) : _GLF_FUZZED(4.8)))), float(_GLF_FUZZED(-6.3)), bool(false))), bool(true)))))), _GLF_IDENTITY(bool(bvec3(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(_GLF_IDENTITY(float(_GLF_FUZZED(65.99)), (false ? _GLF_FUZZED((-8059.4299 * -718.033)) : float(_GLF_FUZZED(65.99)))), _GLF_IDENTITY(float(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))), mix(float(_GLF_IDENTITY(float(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y, min(injectionSwitch.y, injectionSwitch.y))), (true ? float(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))) : _GLF_FUZZED(4.8)))), float(_GLF_FUZZED(-6.3)), bool(false))), bool(true)))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)), bool(bvec3(bool(bvec3(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(_GLF_IDENTITY(float(_GLF_FUZZED(65.99)), (false ? _GLF_FUZZED((-8059.4299 * -718.033)) : float(_GLF_FUZZED(65.99)))), _GLF_IDENTITY(float(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))), mix(float(_GLF_IDENTITY(float(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))), (true ? float(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))) : _GLF_FUZZED(4.8)))), float(_GLF_FUZZED(-6.3)), bool(false))), bool(true)))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)), true, false)))), ! (! (_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec3(false, true, false))), (injectionSwitch.x > injectionSwitch.y))))))) && true))
  {
   do
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       barrier();
      }
     else
      {
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0))))), vec2(0.0, 0.0) + ((_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0))))))) - vec2(0.0, 0.0)).x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 do
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), _GLF_IDENTITY(min(int(_GLF_ONE(1.0, injectionSwitch.y)), _GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), min(int(_GLF_ONE(1.0, injectionSwitch.y)), int(_GLF_ONE(1.0, injectionSwitch.y))))), (true ? min(int(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), (_GLF_ONE(1.0, injectionSwitch.y)) + 0.0)), _GLF_IDENTITY(int(_GLF_ONE(_GLF_IDENTITY(1.0, max(1.0, _GLF_IDENTITY(1.0, (1.0) + 0.0))), injectionSwitch.y)), min(int(_GLF_ONE(1.0, injectionSwitch.y)), int(_GLF_ONE(1.0, injectionSwitch.y))))) : _GLF_FUZZED(-80337)))), int(ivec2(_GLF_IDENTITY(int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)))))))), _GLF_IDENTITY(min(int(_GLF_ONE(1.0, injectionSwitch.y)), _GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), min(int(_GLF_ONE(1.0, injectionSwitch.y)), int(_GLF_ONE(1.0, injectionSwitch.y))))), (true ? min(int(_GLF_ONE(1.0, injectionSwitch.y)), _GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), min(int(_GLF_ONE(_GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, min(1.0, 1.0)), _GLF_IDENTITY(1.0, max(1.0, _GLF_IDENTITY(1.0, (1.0) - 0.0))))), injectionSwitch.y)), int(_GLF_ONE(1.0, injectionSwitch.y))))) : _GLF_FUZZED(-80337)))), 0)))); _injected_loop_counter ++)
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])))).x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch, mat2(_GLF_IDENTITY(_GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(42.61))), 1.0)), determinant(mat3(1.0, 0.0, abs(1.0), tan(0.0), 1.0, 0.0, 0.0, 0.0, 1.0)) * (_GLF_IDENTITY(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), (1.0) / _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(10.14))))))) * (injectionSwitch)).x > injectionSwitch.y))), bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(5303.4395), _GLF_IDENTITY((injectionSwitch)[1], max((injectionSwitch)[1], (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)))))[1]))), vec2((injectionSwitch)[0], _GLF_FUZZED(3482.3784)), bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))), _GLF_IDENTITY(mat2(1.0), _GLF_IDENTITY((mat2(1.0)) + mat2(0.0, 0.0, 0.0, 0.0), mat2(0.0, 0.0, 0.0, 0.0) + (_GLF_IDENTITY((mat2(1.0)) + mat2(0.0, 0.0, 0.0, 0.0), (true ? (mat2(1.0)) + mat2(0.0, 0.0, 0.0, 0.0) : _GLF_FUZZED(mat2(122.475, 767.301, -30.44, -35.47))))))) * (injectionSwitch)).x > _GLF_IDENTITY(injectionSwitch, mat2(_GLF_IDENTITY(1.0, 0.0 + (_GLF_IDENTITY(1.0, min(1.0, 1.0))))) * (injectionSwitch)).y, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), max(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)))), min(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), (false ? _GLF_FUZZED(vec2(-4.1, 39.12)) : _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)))), _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)))).x > injectionSwitch.y) || false))))))))
          {
           do
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(true && (_GLF_IDENTITY(false, (false) && true)), _GLF_TRUE(_GLF_IDENTITY(true, (true) || false), (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(true && (false), bool(bvec2(true && (_GLF_IDENTITY(false, ! (! (false)))), true))))))))
              {
               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false))
                  barrier();
                }
               else
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   barrier();
                  }
                }
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(mat3(injectionSwitch, 1.0, 1.0, 1.0, 0.0, cos(0.0), 0.0, _GLF_IDENTITY(dot(vec4(_GLF_IDENTITY(dot(vec2(0.0, 0.0), vec2(1.0, 1.0)), dot(vec2(0.0, 0.0), vec2(1.0, 1.0))), 0.0, 0.0, _GLF_IDENTITY(0.0, min(0.0, 0.0))), vec4(1.0, 1.0, 1.0, 1.0)), dot(vec4(_GLF_IDENTITY(_GLF_IDENTITY(dot(vec2(0.0, 0.0), vec2(1.0, 1.0)), mix(float(_GLF_FUZZED(-891.283)), float(_GLF_IDENTITY(dot(vec2(0.0, 0.0), vec2(1.0, 1.0)), mix(float(dot(vec2(0.0, 0.0), vec2(1.0, 1.0))), float(_GLF_FUZZED((970.983 * 4.3))), bool(false)))), bool(true))), dot(vec2(0.0, 0.0), vec2(1.0, 1.0))), 0.0, 0.0, 0.0), vec4(1.0, 1.0, 1.0, 1.0)))))).x > injectionSwitch.y))));
           barrier();
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)))).y), ! (! (_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)))).y), false || ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)))).y)))))))))
              barrier();
            }
          }
        }
      }
     else
      {
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
        }
       else
        {
        }
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(1196.3653, 6.1)) : injectionSwitch)).y))))
        barrier();
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       barrier();
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y) || false, ! (! ((injectionSwitch.x > injectionSwitch.y) || false)))))), bool(bvec4(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))))), true, true, _GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, false, false, true)), true && (bool(bvec4(false, false, false, true))))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), bool(bvec4(false, _GLF_IDENTITY(false, bool(bvec3(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))), false, true))), (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(false, false, false, true))), true && (_GLF_IDENTITY(false, bool(bvec4(false, false, false, true)))))) && true)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))));
uint subgroup_size = 16;
 if(_GLF_DEAD(false))
  barrier();
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, 0.0 + (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).x, mix(float(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(32.43) : injectionSwitch.x)), _GLF_IDENTITY((false ? _GLF_FUZZED(7497.5638) : injectionSwitch.x), (false ? _GLF_FUZZED(5516.3928) : (false ? _GLF_FUZZED(7497.5638) : injectionSwitch.x))))), float(_GLF_FUZZED(float(22351))), bool(false))))) > injectionSwitch.y), _GLF_IDENTITY(bool(bvec2((_GLF_IDENTITY(injectionSwitch.x, 0.0 + (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).x, mix(float(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch), mat2(1.0) * (mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch)))).x, _GLF_IDENTITY((false ? _GLF_FUZZED(32.43) : injectionSwitch.x), _GLF_IDENTITY(max((false ? _GLF_FUZZED(32.43) : injectionSwitch.x), (false ? _GLF_FUZZED(32.43) : injectionSwitch.x)), (max((false ? _GLF_FUZZED(32.43) : injectionSwitch.x), (false ? _GLF_FUZZED(32.43) : injectionSwitch.x))) / 1.0))), (false ? _GLF_FUZZED(7497.5638) : injectionSwitch.x))), float(_GLF_IDENTITY(_GLF_FUZZED(float(22351)), (_GLF_IDENTITY(_GLF_FUZZED(float(22351)), mix(float(_GLF_IDENTITY(_GLF_FUZZED(float(22351)), float(mat2(_GLF_FUZZED(float(22351)), 1.0, 0.0, 0.0)))), float(_GLF_FUZZED(209.145)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) / 1.0)), bool(false))))) > injectionSwitch.y), false)), (_GLF_IDENTITY(bool(bvec2((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).x, 0.0 + (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) + vec2(_GLF_IDENTITY(0.0, (true ? _GLF_IDENTITY(0.0, max(0.0, 0.0)) : _GLF_FUZZED((-9572.8074 - 2.7)))), 0.0), mat2(1.0) * ((injectionSwitch) + vec2(_GLF_IDENTITY(0.0, (true ? _GLF_IDENTITY(0.0, max(0.0, 0.0)) : _GLF_FUZZED((-9572.8074 - 2.7)))), 0.0)))).x, mix(float(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY((false ? _GLF_FUZZED(32.43) : injectionSwitch.x), _GLF_IDENTITY(float(mat3x2((false ? _GLF_FUZZED(32.43) : injectionSwitch.x), 1.0, length(vec3(0.0, 0.0, 0.0)), 1.0, 1.0, 1.0)), min(float(mat3x2((false ? _GLF_FUZZED(32.43) : injectionSwitch.x), 1.0, length(vec3(0.0, 0.0, 0.0)), 1.0, 1.0, 1.0)), float(mat3x2((false ? _GLF_FUZZED(32.43) : injectionSwitch.x), 1.0, length(vec3(0.0, 0.0, 0.0)), 1.0, 1.0, 1.0)))))), (false ? _GLF_FUZZED(7497.5638) : injectionSwitch.x))), float(_GLF_FUZZED(float(22351))), bool(false))))) > injectionSwitch.y), false)), bool(bvec4(bool(bvec2((_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(269.120)), _GLF_IDENTITY(float(0.0), (false ? _GLF_FUZZED(min(-16.27, -6.4)) : float(0.0))), bool(true))) + (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).x, mix(_GLF_IDENTITY(float(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(32.43) : injectionSwitch.x)), mix(float(_GLF_FUZZED(-2.5)), float(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(-2.0)), vec2(_GLF_FUZZED(9.4), (injectionSwitch)[1]), bvec2(false, true))).x, (false ? _GLF_FUZZED(32.43) : injectionSwitch.x))), bool(true))), (false ? _GLF_FUZZED(7497.5638) : injectionSwitch.x))), (false ? _GLF_FUZZED(mix(mix(623.968, 113.953, 79.58), -7145.7127, 1.3)) : float(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(32.43) : injectionSwitch.x)), mix(float(_GLF_FUZZED(-2.5)), float(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(-2.0)), vec2(_GLF_FUZZED(9.4), (injectionSwitch)[1]), bvec2(false, true))).x, (false ? _GLF_FUZZED(32.43) : injectionSwitch.x))), bool(true))), (false ? _GLF_FUZZED(7497.5638) : injectionSwitch.x))))), float(_GLF_FUZZED(float(22351))), bool(false))))) > injectionSwitch.y), false)), false, false, false)))) && true)))))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, false || (false)))))))))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   do
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))));
  }
 else
  {
  }
 for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) >> 0) != _GLF_IDENTITY(1, max(1, 1))); _GLF_IDENTITY(_injected_loop_counter ++, (_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, bool(bvec4(injectionSwitch.x < injectionSwitch.y, false, false, false))))) ? _GLF_IDENTITY(_injected_loop_counter ++, (_GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) << 0)) - 0) : _GLF_FUZZED(-61394))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         barrier();
        }
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false)))))))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       barrier();
      }
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) && true)))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)), (injectionSwitch) - vec2(0.0, 0.0)), injectionSwitch)).x > injectionSwitch.y), ! (! (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)), injectionSwitch)).x > _GLF_IDENTITY(injectionSwitch.y, 0.0 + (injectionSwitch.y))), bool(bvec4((_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat2x3(injectionSwitch, 0.0, abs(0.0), 0.0, 1.0))), (_GLF_IDENTITY(injectionSwitch, vec2(mat2x3(injectionSwitch, 0.0, abs(0.0), 0.0, 1.0)))) - vec2(0.0, 0.0))) - vec2(0.0, 0.0)), injectionSwitch)).x > injectionSwitch.y), true, true, false)))))))))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       barrier();
      }
     else
      {
      }
    }
  }
 else
  {
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
  barrier();
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - log(1.0)) < injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), false || (! ((false))))))))))), (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 else
  {
  }
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, ! (! (true)))) && true)))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x)) > injectionSwitch.y)) || (false), bool(_GLF_IDENTITY(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false)), bool(bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false))))))))), ! (! (_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x)) > _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(-480.383)), bool(false))), _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(868.612)), bool(false))))))) || (false), bool(_GLF_IDENTITY(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false)), bool(_GLF_IDENTITY(bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false))), bool(_GLF_IDENTITY(bool(bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false)))), bool(bool(bool(bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false)))))))))))))))))))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    {
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 >> _GLF_IDENTITY(int(7), int(7)))); _injected_loop_counter --)
        {
         for(int _injected_loop_counter = (((-53419 & 0) << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), (_GLF_IDENTITY(int(3), (int(3)) / 1)) | (int(3))))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
          {
           if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) || false)), true && (_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, _GLF_IDENTITY(true, bool(bvec4(true, true, true, false))), false)), ! (! (bool(bvec3(false, _GLF_IDENTITY(true, bool(bvec4(true, true, true, false))), false))))))))))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, false || (true)), (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(9.9, 99.49)))).y))))
                {
                 barrier();
                }
               else
                {
                }
              }
             do
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))) / 1.0)))))
                  {
                   barrier();
                  }
                 else
                  {
                  }
                }
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
             if(_GLF_DEAD(false))
              barrier();
            }
           else
            {
             if(_GLF_DEAD(false))
              {
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                {
                 barrier();
                }
               if(_GLF_DEAD(false))
                barrier();
              }
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                barrier();
               barrier();
              }
            }
          }
        }
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < ((((1 << _GLF_IDENTITY(int(3), int(_GLF_IDENTITY(3, (3) - int(_GLF_ZERO(0.0, injectionSwitch.x)))))) >> _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), (int(3)) << 0))) << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3))), false || (_injected_loop_counter < ((((1 << _GLF_IDENTITY(int(3), int(_GLF_IDENTITY(3, (3) - int(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(float(vec3(_GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0)), clamp(float(vec3(_GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0)), float(vec3(_GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0)), float(vec3(_GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0)))))))))) >> _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), (int(3)) << 0))) << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3)))))); _injected_loop_counter ++)
        {
         if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), (_GLF_WRAPPED_IF_TRUE(true)) && true))
          {
           barrier();
           if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bvec3(false, true, false)))))
            {
            }
           else
            {
             if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true)) || false))
              {
               if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false)))))))
                barrier();
               barrier();
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           do
            {
             if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, false)), false || (bool(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec4(_GLF_IDENTITY(bvec2(false, false), _GLF_IDENTITY(bvec2(bvec4(bvec2(false, false), false, true)), bvec2(bvec2(bvec2(bvec4(bvec2(false, false), false, true)))))), true, false))))))), (_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x)) > injectionSwitch.y))))
              barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         else
          {
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ 0)); _injected_loop_counter --)
          {
           barrier();
          }
        }
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = 0; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))), false || (_GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))))); _injected_loop_counter ++)
            {
             barrier();
            }
          }
        }
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      {
       do
        {
         barrier();
         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
      }
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2))), (((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2)))) ^ 0)); _injected_loop_counter ++)
  {
   for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(atomicXor(_injected_loop_counter, 24789))))); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))))))
        barrier();
       barrier();
      }
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false)))))), ! (! (_GLF_IDENTITY(false, _GLF_IDENTITY((_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY((false) && true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(_GLF_IDENTITY((false) && true, true && ((false) && true)), true && _GLF_IDENTITY(((false) && true), (((false) && true)) && true)))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((false) && true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY((false) && true, _GLF_IDENTITY(true, (true) && true) && ((false) && true))))), ! (! (! (_GLF_IDENTITY((false) && true, _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY((false) && true, true && ((false) && true))), bool(bool(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, vec2(mat4x2(_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)), 1.0, 0.0, abs(1.0), 1.0, 0.0, 1.0))).x < _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y)))) && (_GLF_IDENTITY((false) && true, true && ((false) && true))))))))))))))), ! (! ((_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY((false) && true, _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY((false) && true, true && ((false) && true))), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY((false) && true, true && ((false) && true)))) || false)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((false) && true, _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, float(mat2x3(injectionSwitch.y, 1.0, 0.0, exp(sqrt(0.0)), 1.0, cos(0.0)))))) && (_GLF_IDENTITY((false) && true, true && ((false) && true))))), ! (! (! (_GLF_IDENTITY((false) && true, _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY((false) && true, true && ((false) && true))), bool(bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY((false) && true, true && ((false) && true)))))))))))))))))) && _GLF_TRUE(true, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(7.9))))), (_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)))).x) * 1.0) < injectionSwitch.y))))))), _GLF_IDENTITY(false || (_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(_GLF_IDENTITY(! (false), ! (! (! (false)))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(! (false), _GLF_IDENTITY(! (! (! (false))), (_GLF_IDENTITY(! (! (! (false))), ! (! (! (_GLF_IDENTITY(! (! (false)), (! (! (false))) || false)))))) || false))), true && (! (_GLF_IDENTITY(! (false), _GLF_IDENTITY(! (! (! (_GLF_IDENTITY(false, ! (! (false)))))), false || (! (! (! (_GLF_IDENTITY(false, ! (! (false)))))))))))))))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), (_GLF_IDENTITY(false, _GLF_IDENTITY((false) && true, _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y)) && (_GLF_IDENTITY((false) && _GLF_IDENTITY(true, ! (! (true))), true && ((false) && true)))))) && _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0) < injectionSwitch.y)))))))), bool(_GLF_IDENTITY(bvec2(false || (_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(_GLF_IDENTITY(! (false), ! (! (! (false)))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(! (false), ! (! (! (false))))), true && (! (_GLF_IDENTITY(! (false), _GLF_IDENTITY(! (! (! (_GLF_IDENTITY(false, ! (! (false)))))), (_GLF_IDENTITY(! (! (! (_GLF_IDENTITY(false, ! (! (false)))))), true && (! (! (! (_GLF_IDENTITY(false, ! (! (false))))))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))))), ! (! (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, _GLF_IDENTITY((_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec4(false, true, true, false)))) || false)) && true, _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y)), bool(bvec2(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y)), true))) && (_GLF_IDENTITY((false) && true, true && ((false) && true)))))) && _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0) < injectionSwitch.y)))))))), false), bvec2(bvec4(bvec2(_GLF_IDENTITY(false || (_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(_GLF_IDENTITY(! (false), ! (! (! (false)))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(! (false), ! (! (! (false))))), true && (! (_GLF_IDENTITY(! (false), ! (! (! (_GLF_IDENTITY(false, ! (! (false)))))))))))))), ! (! (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, _GLF_IDENTITY((false) && true, _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y)) && (_GLF_IDENTITY((false) && true, true && ((false) && true)))))) && _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0) < injectionSwitch.y)))))))), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(false || (_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(_GLF_IDENTITY(! (false), ! (! (! (false)))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(! (false), ! (! (! (false))))), true && (! (_GLF_IDENTITY(! (false), ! (! (! (_GLF_IDENTITY(false, ! (! (false)))))))))))))), ! (! (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, _GLF_IDENTITY((false) && true, _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y)) && (_GLF_IDENTITY((false) && true, true && ((false) && true)))))) && _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0) < injectionSwitch.y)))))))), (false || (_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(_GLF_IDENTITY(! (false), ! (! (! (false)))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(! (false), ! (! (! (false))))), true && (! (_GLF_IDENTITY(! (false), ! (! (! (_GLF_IDENTITY(false, ! (! (false)))))))))))))), ! (! (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, _GLF_IDENTITY((false) && true, _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y)) && (_GLF_IDENTITY((false) && true, true && ((false) && true)))))) && _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0) < injectionSwitch.y))))))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true, true, _GLF_IDENTITY(true, (true) && true))), bool(bvec2(bool(bvec4(_GLF_IDENTITY(false || (_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(_GLF_IDENTITY(! (false), ! (! (! (false)))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(! (false), ! (! (! (false))))), true && (! (_GLF_IDENTITY(! (false), ! (! (! (_GLF_IDENTITY(false, ! (! (false)))))))))))))), ! (! (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, _GLF_IDENTITY((false) && true, _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y)) && (_GLF_IDENTITY((false) && true, true && ((false) && true)))))) && _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0) < injectionSwitch.y)))))))), (false || (_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(_GLF_IDENTITY(! (false), ! (! (! (false)))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(! (false), ! (! (! (false))))), true && (! (_GLF_IDENTITY(! (false), ! (! (! (_GLF_IDENTITY(false, ! (! (false)))))))))))))), ! (! (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, _GLF_IDENTITY((false) && true, _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y)) && (_GLF_IDENTITY((false) && true, true && ((false) && true)))))) && _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0) < injectionSwitch.y))))))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true, true, _GLF_IDENTITY(true, (true) && true))), true)))), false), false, _GLF_IDENTITY(true, (true) || _GLF_IDENTITY(false, bool(bvec2(false, false)))))))))))
      {
       for(int _injected_loop_counter = (0 & 81931); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, clamp(_injected_loop_counter, _injected_loop_counter, _injected_loop_counter)) != (1 & 1)); _injected_loop_counter ++)
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
          {
           if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bool(false)))) && true), (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(false, false, false, false))), ! (! (_GLF_IDENTITY(false, bool(bvec4(false, false, false, false)))))), false, true, true)))))
            barrier();
           barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, false)))))
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               barrier();
              }
             else
              {
              }
            }
          }
        }
      }
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec4(false, true, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), max(mat2(1.0) * (injectionSwitch), mat2(1.0) * (injectionSwitch)))).y)), bool(bvec2(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec4(false, true, true, _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED((-667.098 - 4336.8166))), bool(false)))))))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), max(mat2(1.0) * (injectionSwitch), mat2(1.0) * (injectionSwitch)))).y)), false)))))
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
   if(_GLF_DEAD(false))
    barrier();
   do
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), injectionSwitch)).y))))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         barrier();
        }
       else
        {
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - log(1.0)) > injectionSwitch.y))))
      barrier();
    }
   do
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true, false)))))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(5), int(5))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
            {
             barrier();
            }
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 >> _GLF_IDENTITY(int(8), int(8)))); _injected_loop_counter --)
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_DEAD(false))
                barrier();
              }
            }
           else
            {
            }
          }
         barrier();
        }
      }
    }
   while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, true && (false))), (_GLF_IDENTITY(! (_GLF_IDENTITY(false, true && (false))), (! (_GLF_IDENTITY(false, true && (false)))) || false)) || false)))))), ! (! (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, true && (false)))))));
  }
 for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
  {
   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bvec3(false, true, true))))))) || false), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y)))) || false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x > injectionSwitch.y))), true && (_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) || false), (injectionSwitch.x > injectionSwitch.y))))))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y))))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false), _GLF_IDENTITY(false, ! (! (false))), true, false))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
    barrier();
  }
 else
  {
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   do
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(_GLF_IDENTITY(mat3x4(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), 0.0, 0.0, length(vec2(0.0, 0.0)), 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, determinant(mat4(0.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(1.0, 1.0 * (1.0)), length(vec3(0.0, 0.0, 0.0)), 0.0, 0.0, 0.0, log(1.0), 0.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(1.0, min(1.0, 1.0)), 0.0))), mat3x4(mat4(mat3x4(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), 0.0, 0.0, length(vec2(0.0, 0.0)), 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, determinant(_GLF_IDENTITY(mat4(0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, 1.0 * (0.0)), 1.0, _GLF_IDENTITY(length(vec3(_GLF_IDENTITY(0.0, _GLF_IDENTITY(float(mat3x4(0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0)), max(float(mat3x4(0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0)), float(mat3x4(0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0))))), 0.0, 0.0)), (length(vec3(0.0, 0.0, 0.0))) + 0.0), 0.0, 0.0, 0.0, log(1.0), 0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, min(0.0, 0.0)), 1.0, 0.0), (false ? _GLF_FUZZED(mat4(-4683.3320, -2004.3815, 0.1, -53.14, 2.7, 848.697, -1345.0199, 4381.6535, -0.9, 7.9, 58.67, 81.60, -5.7, -2614.5050, -1.2, 4.6)) : mat4(0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, 1.0 * (0.0)), 1.0, _GLF_IDENTITY(length(vec3(_GLF_IDENTITY(0.0, _GLF_IDENTITY(float(mat3x4(0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0)), max(float(mat3x4(0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0)), float(mat3x4(0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0))))), 0.0, 0.0)), (length(vec3(0.0, 0.0, 0.0))) + 0.0), 0.0, 0.0, 0.0, log(1.0), 0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, min(0.0, 0.0)), 1.0, 0.0))))))))), (vec2(_GLF_IDENTITY(mat3x4(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), 0.0, _GLF_IDENTITY(0.0, _GLF_IDENTITY(float(mat3(0.0, 1.0, 0.0, _GLF_IDENTITY(sqrt(1.0), clamp(sqrt(1.0), sqrt(1.0), sqrt(1.0))), _GLF_ONE(1.0, injectionSwitch.y), exp(0.0), 0.0, 0.0, 1.0)), 0.0 + (float(mat3(0.0, 1.0, 0.0, sqrt(1.0), _GLF_ONE(1.0, injectionSwitch.y), exp(_GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0))) / 1.0)), 0.0, 0.0, 1.0))))), length(vec2(0.0, 0.0)), 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, determinant(mat4(0.0, 0.0, 0.0, 0.0, 1.0, length(vec3(0.0, 0.0, 0.0)), 0.0, 0.0, 0.0, log(1.0), 0.0, 0.0, 0.0, 0.0, 1.0, 0.0))), mat3x4(mat4(mat3x4(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(min(injectionSwitch, injectionSwitch), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? min(injectionSwitch, injectionSwitch) : _GLF_FUZZED(injectionSwitch)))), 0.0, 0.0, length(vec2(0.0, 0.0)), 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, _GLF_IDENTITY(determinant(mat4(0.0, 0.0, 0.0, 0.0, 1.0, length(vec3(0.0, 0.0, 0.0)), 0.0, 0.0, 0.0, log(1.0), 0.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(7777.9987)), float(_GLF_IDENTITY(1.0, min(1.0, 1.0))), bool(true))), 0.0)), min(determinant(mat4(0.0, 0.0, 0.0, 0.0, 1.0, length(vec3(0.0, _GLF_IDENTITY(0.0, (0.0) + 0.0), 0.0)), 0.0, 0.0, 0.0, log(1.0), 0.0, 0.0, _GLF_IDENTITY(0.0, float(_GLF_IDENTITY(mat2(0.0, 1.0, 0.0, 0.0), mat2(mat3x4(mat2(0.0, 1.0, 0.0, 0.0)))))), 0.0, 1.0, _GLF_IDENTITY(0.0, (0.0) - 0.0))), determinant(mat4(0.0, 0.0, 0.0, 0.0, 1.0, length(vec3(0.0, 0.0, 0.0)), _GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(1.3)), bool(false))), 0.0, 0.0, log(1.0), 0.0, 0.0, 0.0, 0.0, 1.0, 0.0)))))))))) - vec2(0.0, 0.0))).x > injectionSwitch.y)), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec3(bvec3(_GLF_IDENTITY(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec3(bvec3(bvec3(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(true ? injectionSwitch.x : _GLF_FUZZED(-5408.4546), min(_GLF_IDENTITY(true ? injectionSwitch.x : _GLF_FUZZED(-5408.4546), 1.0 * (true ? injectionSwitch.x : _GLF_FUZZED(-5408.4546))), true ? injectionSwitch.x : _GLF_FUZZED(-5408.4546))))) > injectionSwitch.y)), false, _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)))))))))))), true && (bool(_GLF_IDENTITY(bvec3(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y)), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec3(bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec3(bvec3(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-9.0)), float(injectionSwitch.x), bool(true))) > injectionSwitch.y)))))))))))))))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         for(int _injected_loop_counter = _GLF_IDENTITY(_GLF_IDENTITY(0, (0) * _GLF_IDENTITY(1, min(_GLF_IDENTITY(1, (1) >> 0), 1))), (_GLF_IDENTITY(0, (0) * _GLF_IDENTITY(1, min(_GLF_IDENTITY(1, (1) >> 0), 1)))) >> 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_IDENTITY(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y), 1.0 * (_GLF_ONE(1.0, injectionSwitch.y))))); _injected_loop_counter ++)
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_DEAD(false))
                {
                 for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(3), int(3)), max(_GLF_IDENTITY(int(3), int(3)), _GLF_IDENTITY(int(3), int(3)))))); _injected_loop_counter ++)
                  {
                   barrier();
                  }
                }
              }
            }
           else
            {
            }
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             barrier();
            }
           else
            {
            }
          }
        }
       else
        {
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, _GLF_IDENTITY((false), bool(bvec4((false), true, false, false))) || false)));
  }
 uint workgroup_base = workgroup_size * _GLF_IDENTITY(workgroup_id, (workgroup_id) - 0u);
 uint virtual_gid = _GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_id, max(subgroup_id, _GLF_IDENTITY(subgroup_id, (subgroup_id) / 1u))) * subgroup_size + _GLF_IDENTITY(subgroup_local_id, clamp(subgroup_local_id, subgroup_local_id, subgroup_local_id)), (_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size + subgroup_local_id, max(_GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_id * subgroup_size, min(_GLF_IDENTITY(subgroup_id * subgroup_size, _GLF_IDENTITY((true ? subgroup_id * subgroup_size : _GLF_FUZZED(subgroup_id)), ((true ? subgroup_id * subgroup_size : _GLF_FUZZED(subgroup_id))) ^ 0u)), _GLF_IDENTITY(subgroup_id, (false ? _GLF_FUZZED(num_workgroup) : subgroup_id)) * subgroup_size)) + subgroup_local_id, (workgroup_base + _GLF_IDENTITY(subgroup_id * subgroup_size, min(_GLF_IDENTITY(subgroup_id * subgroup_size, (true ? subgroup_id * subgroup_size : _GLF_FUZZED(subgroup_id))), subgroup_id * subgroup_size)) + subgroup_local_id) + 0u), _GLF_IDENTITY(workgroup_base + subgroup_id * _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, ~ (_GLF_IDENTITY(~ (subgroup_size), min(~ (_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec4(subgroup_size, 0u, 0u, 0u), _GLF_IDENTITY((uvec4(subgroup_size, 0u, 0u, 0u)) | (uvec4(subgroup_size, 0u, 0u, _GLF_IDENTITY(0u, (0u) ^ 0u))), ((uvec4(subgroup_size, 0u, 0u, _GLF_IDENTITY(0u, 0u ^ (0u)))) | _GLF_IDENTITY((uvec4(subgroup_size, 0u, 0u, 0u)), ((uvec4(subgroup_size, 0u, 0u, 0u))) | ((uvec4(subgroup_size, 0u, 0u, 0u))))) / uvec4(1u, 1u, 1u, 1u)))), (uint(_GLF_IDENTITY(uvec4(subgroup_size, 0u, 0u, 0u), (uvec4(subgroup_size, 0u, 0u, 0u)) | (uvec4(subgroup_size, 0u, 0u, 0u))))) / uint(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), min(_GLF_ONE(1.0, injectionSwitch.y), _GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), (false ? _GLF_FUZZED(573.892) : _GLF_ONE(1.0, injectionSwitch.y))))))))), ~ (subgroup_size))))), (_GLF_IDENTITY(subgroup_size, ~ (_GLF_IDENTITY(~ (subgroup_size), min(~ (_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec4(subgroup_size, 0u, 0u, _GLF_IDENTITY(0u, (0u) / 1u)), (uvec4(subgroup_size, 0u, 0u, 0u)) | (uvec4(subgroup_size, 0u, 0u, 0u)))), (uint(_GLF_IDENTITY(uvec4(subgroup_size, 0u, 0u, 0u), (uvec4(subgroup_size, 0u, 0u, 0u)) | (uvec4(subgroup_size, 0u, 0u, 0u))))) / uint(_GLF_ONE(1.0, injectionSwitch.y))))), ~ (subgroup_size)))))) ^ (20873u & 0u)), max(_GLF_IDENTITY(workgroup_base, (workgroup_base) | 0u) + subgroup_id * _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (subgroup_size), min(~ (_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec4(subgroup_size, 0u, 0u, 0u), _GLF_IDENTITY((uvec4(subgroup_size, 0u, 0u, 0u)) | (uvec4(subgroup_size, 0u, 0u, 0u)), ((uvec4(subgroup_size, 0u, 0u, _GLF_IDENTITY(0u, 0u ^ (0u)))) | _GLF_IDENTITY((uvec4(subgroup_size, 0u, 0u, 0u)), ((uvec4(subgroup_size, 0u, 0u, 0u))) | ((uvec4(subgroup_size, 0u, 0u, 0u))))) / uvec4(1u, 1u, 1u, 1u)))), (uint(_GLF_IDENTITY(uvec4(subgroup_size, 0u, 0u, 0u), (uvec4(subgroup_size, 0u, 0u, 0u)) | (uvec4(subgroup_size, 0u, 0u, 0u))))) / uint(_GLF_ONE(1.0, injectionSwitch.y))))), ~ (subgroup_size))), max(_GLF_IDENTITY(_GLF_IDENTITY(~ (subgroup_size), min(~ (_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec4(subgroup_size, 0u, 0u, 0u), _GLF_IDENTITY((uvec4(subgroup_size, 0u, 0u, 0u)) | (uvec4(subgroup_size, 0u, 0u, 0u)), ((uvec4(subgroup_size, 0u, 0u, _GLF_IDENTITY(0u, 0u ^ (0u)))) | _GLF_IDENTITY((uvec4(subgroup_size, 0u, 0u, 0u)), ((uvec4(subgroup_size, 0u, 0u, 0u))) | ((uvec4(subgroup_size, 0u, 0u, 0u))))) / uvec4(1u, 1u, 1u, 1u)))), (uint(_GLF_IDENTITY(uvec4(subgroup_size, 0u, 0u, 0u), (uvec4(subgroup_size, 0u, 0u, 0u)) | (uvec4(subgroup_size, 0u, 0u, 0u))))) / uint(_GLF_ONE(1.0, injectionSwitch.y))))), ~ (subgroup_size))), max(_GLF_IDENTITY(~ (subgroup_size), min(~ (_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec4(subgroup_size, 0u, 0u, 0u), _GLF_IDENTITY((uvec4(subgroup_size, 0u, 0u, 0u)) | (uvec4(subgroup_size, 0u, 0u, 0u)), ((uvec4(subgroup_size, 0u, 0u, _GLF_IDENTITY(0u, 0u ^ (0u)))) | _GLF_IDENTITY((uvec4(subgroup_size, 0u, 0u, 0u)), ((uvec4(subgroup_size, 0u, 0u, 0u))) | ((uvec4(subgroup_size, 0u, 0u, 0u))))) / uvec4(1u, 1u, 1u, 1u)))), (uint(_GLF_IDENTITY(uvec4(subgroup_size, 0u, 0u, 0u), (uvec4(subgroup_size, 0u, 0u, 0u)) | (uvec4(subgroup_size, 0u, 0u, 0u))))) / uint(_GLF_ONE(1.0, injectionSwitch.y))))), ~ (subgroup_size))), _GLF_IDENTITY(~ (subgroup_size), min(~ (_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec4(subgroup_size, 0u, 0u, 0u), _GLF_IDENTITY((uvec4(subgroup_size, 0u, 0u, 0u)) | (uvec4(subgroup_size, 0u, 0u, 0u)), ((uvec4(subgroup_size, 0u, 0u, _GLF_IDENTITY(0u, 0u ^ (0u)))) | _GLF_IDENTITY((uvec4(subgroup_size, 0u, 0u, 0u)), ((uvec4(subgroup_size, 0u, 0u, 0u))) | ((uvec4(subgroup_size, 0u, 0u, 0u))))) / uvec4(1u, 1u, 1u, 1u)))), (uint(_GLF_IDENTITY(uvec4(subgroup_size, 0u, 0u, 0u), (uvec4(subgroup_size, 0u, 0u, 0u)) | (uvec4(subgroup_size, 0u, 0u, 0u))))) / uint(_GLF_ONE(1.0, injectionSwitch.y))))), ~ (subgroup_size))))), _GLF_IDENTITY(_GLF_IDENTITY(~ (subgroup_size), min(~ (_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec4(subgroup_size, 0u, 0u, 0u), _GLF_IDENTITY((uvec4(subgroup_size, 0u, 0u, 0u)) | (uvec4(subgroup_size, 0u, 0u, 0u)), ((uvec4(subgroup_size, 0u, 0u, _GLF_IDENTITY(0u, 0u ^ (0u)))) | _GLF_IDENTITY((uvec4(subgroup_size, 0u, 0u, 0u)), ((uvec4(subgroup_size, 0u, 0u, 0u))) | ((uvec4(subgroup_size, 0u, 0u, 0u))))) / uvec4(1u, 1u, 1u, 1u)))), (uint(_GLF_IDENTITY(uvec4(subgroup_size, 0u, 0u, 0u), (uvec4(subgroup_size, 0u, 0u, 0u)) | (uvec4(subgroup_size, 0u, 0u, 0u))))) / uint(_GLF_ONE(1.0, injectionSwitch.y))))), ~ (subgroup_size))), max(_GLF_IDENTITY(~ (subgroup_size), min(~ (_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec4(subgroup_size, 0u, 0u, 0u), _GLF_IDENTITY((uvec4(subgroup_size, 0u, 0u, 0u)) | (uvec4(subgroup_size, 0u, 0u, 0u)), ((uvec4(subgroup_size, 0u, 0u, _GLF_IDENTITY(0u, 0u ^ (0u)))) | _GLF_IDENTITY((uvec4(subgroup_size, 0u, 0u, 0u)), ((uvec4(subgroup_size, 0u, 0u, 0u))) | ((uvec4(subgroup_size, 0u, 0u, 0u))))) / uvec4(1u, 1u, 1u, 1u)))), (uint(_GLF_IDENTITY(uvec4(subgroup_size, 0u, 0u, 0u), (uvec4(subgroup_size, 0u, 0u, 0u)) | (uvec4(subgroup_size, 0u, 0u, 0u))))) / uint(_GLF_ONE(1.0, injectionSwitch.y))))), ~ (subgroup_size))), _GLF_IDENTITY(~ (subgroup_size), min(~ (_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec4(subgroup_size, 0u, 0u, 0u), _GLF_IDENTITY((uvec4(subgroup_size, 0u, 0u, 0u)) | (uvec4(subgroup_size, 0u, 0u, 0u)), ((uvec4(subgroup_size, 0u, 0u, _GLF_IDENTITY(0u, 0u ^ (0u)))) | _GLF_IDENTITY((uvec4(subgroup_size, 0u, 0u, 0u)), ((uvec4(subgroup_size, 0u, 0u, 0u))) | ((uvec4(subgroup_size, 0u, 0u, 0u))))) / uvec4(1u, 1u, 1u, 1u)))), (uint(_GLF_IDENTITY(uvec4(subgroup_size, 0u, 0u, 0u), (uvec4(subgroup_size, 0u, 0u, 0u)) | (uvec4(subgroup_size, 0u, 0u, 0u))))) / uint(_GLF_ONE(1.0, injectionSwitch.y))))), ~ (subgroup_size))))))))), _GLF_IDENTITY((_GLF_IDENTITY(subgroup_size, ~ (_GLF_IDENTITY(~ (subgroup_size), min(~ (_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec4(subgroup_size, 0u, 0u, 0u), (uvec4(subgroup_size, 0u, 0u, 0u)) | (_GLF_IDENTITY(uvec4(subgroup_size, 0u, 0u, 0u), (_GLF_IDENTITY(uvec4(subgroup_size, 0u, 0u, 0u), uvec4(0u, 0u, 0u, 0u) | (uvec4(subgroup_size, 0u, 0u, 0u)))) << uvec4(0u, 0u, 0u, 0u))))), (uint(_GLF_IDENTITY(uvec4(subgroup_size, 0u, 0u, 0u), (uvec4(subgroup_size, 0u, 0u, 0u)) | (uvec4(subgroup_size, 0u, 0u, 0u))))) / uint(_GLF_ONE(1.0, injectionSwitch.y))))), ~ (subgroup_size)))))), (true ? _GLF_IDENTITY((_GLF_IDENTITY(subgroup_size, ~ (_GLF_IDENTITY(~ (subgroup_size), min(~ (_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec4(subgroup_size, 0u, 0u, 0u), (uvec4(subgroup_size, 0u, 0u, 0u)) | (_GLF_IDENTITY(uvec4(subgroup_size, 0u, 0u, 0u), (_GLF_IDENTITY(uvec4(subgroup_size, 0u, 0u, 0u), uvec4(0u, 0u, 0u, 0u) | (uvec4(subgroup_size, 0u, 0u, 0u)))) << uvec4(0u, 0u, 0u, 0u))))), (uint(_GLF_IDENTITY(uvec4(subgroup_size, 0u, 0u, 0u), (uvec4(subgroup_size, 0u, 0u, 0u)) | (uvec4(subgroup_size, 0u, 0u, 0u))))) / uint(_GLF_ONE(1.0, injectionSwitch.y))))), ~ (subgroup_size)))))), uint(uint(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_size, ~ (_GLF_IDENTITY(~ (subgroup_size), min(~ (_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec4(subgroup_size, 0u, 0u, 0u), (uvec4(subgroup_size, 0u, 0u, 0u)) | (_GLF_IDENTITY(uvec4(subgroup_size, 0u, 0u, 0u), (_GLF_IDENTITY(uvec4(subgroup_size, 0u, 0u, 0u), uvec4(0u, 0u, 0u, 0u) | (uvec4(subgroup_size, 0u, 0u, 0u)))) << uvec4(0u, 0u, 0u, 0u))))), (uint(_GLF_IDENTITY(uvec4(subgroup_size, 0u, 0u, 0u), (uvec4(subgroup_size, 0u, 0u, 0u)) | (uvec4(subgroup_size, 0u, 0u, 0u))))) / uint(_GLF_ONE(1.0, injectionSwitch.y))))), ~ (subgroup_size)))))), ((_GLF_IDENTITY(subgroup_size, ~ (_GLF_IDENTITY(~ (subgroup_size), min(~ (_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec4(subgroup_size, 0u, 0u, 0u), (uvec4(subgroup_size, 0u, 0u, 0u)) | (_GLF_IDENTITY(uvec4(subgroup_size, 0u, 0u, 0u), (_GLF_IDENTITY(uvec4(subgroup_size, 0u, 0u, 0u), uvec4(0u, 0u, 0u, 0u) | (uvec4(subgroup_size, 0u, 0u, 0u)))) << uvec4(0u, 0u, 0u, 0u))))), (uint(_GLF_IDENTITY(uvec4(subgroup_size, 0u, 0u, 0u), (uvec4(subgroup_size, 0u, 0u, 0u)) | (uvec4(subgroup_size, 0u, 0u, 0u))))) / uint(_GLF_ONE(1.0, injectionSwitch.y))))), ~ (subgroup_size))))))) >> 0u)))) : _GLF_FUZZED(subgroup_local_id))) ^ (20873u & 0u)), workgroup_base + subgroup_id * _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, ~ (_GLF_IDENTITY(~ (subgroup_size), min(~ (_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec4(subgroup_size, 0u, 0u, 0u), _GLF_IDENTITY((uvec4(subgroup_size, 0u, 0u, 0u)) | (uvec4(subgroup_size, 0u, 0u, 0u)), ((uvec4(subgroup_size, 0u, 0u, _GLF_IDENTITY(0u, 0u ^ (0u)))) | _GLF_IDENTITY((uvec4(subgroup_size, 0u, 0u, 0u)), ((uvec4(subgroup_size, 0u, 0u, 0u))) | ((uvec4(subgroup_size, 0u, 0u, 0u))))) / uvec4(1u, 1u, 1u, 1u)))), (uint(_GLF_IDENTITY(uvec4(subgroup_size, 0u, 0u, 0u), (uvec4(subgroup_size, 0u, 0u, 0u)) | (uvec4(subgroup_size, 0u, 0u, 0u))))) / uint(_GLF_ONE(1.0, injectionSwitch.y))))), ~ (subgroup_size))))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, ~ (_GLF_IDENTITY(~ (subgroup_size), min(~ (_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec4(subgroup_size, 0u, 0u, 0u), _GLF_IDENTITY((uvec4(subgroup_size, 0u, 0u, 0u)) | (uvec4(subgroup_size, 0u, 0u, 0u)), ((uvec4(subgroup_size, 0u, 0u, _GLF_IDENTITY(0u, 0u ^ (0u)))) | _GLF_IDENTITY((uvec4(subgroup_size, 0u, 0u, 0u)), ((uvec4(subgroup_size, 0u, 0u, 0u))) | ((uvec4(subgroup_size, 0u, 0u, 0u))))) / uvec4(1u, 1u, 1u, 1u)))), (uint(_GLF_IDENTITY(uvec4(subgroup_size, 0u, 0u, 0u), (uvec4(subgroup_size, 0u, 0u, 0u)) | (uvec4(subgroup_size, 0u, 0u, 0u))))) / uint(_GLF_ONE(1.0, injectionSwitch.y))))), ~ (subgroup_size))))), min(_GLF_IDENTITY(subgroup_size, ~ (_GLF_IDENTITY(~ (subgroup_size), min(~ (_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec4(subgroup_size, 0u, 0u, 0u), _GLF_IDENTITY((uvec4(subgroup_size, 0u, 0u, 0u)) | (uvec4(subgroup_size, 0u, 0u, 0u)), ((uvec4(subgroup_size, 0u, 0u, _GLF_IDENTITY(0u, 0u ^ (0u)))) | _GLF_IDENTITY((uvec4(subgroup_size, 0u, 0u, 0u)), ((uvec4(subgroup_size, 0u, 0u, 0u))) | ((uvec4(subgroup_size, 0u, 0u, 0u))))) / uvec4(1u, 1u, 1u, 1u)))), (uint(_GLF_IDENTITY(uvec4(subgroup_size, 0u, 0u, 0u), (uvec4(subgroup_size, 0u, 0u, 0u)) | (uvec4(subgroup_size, 0u, 0u, 0u))))) / uint(_GLF_ONE(1.0, injectionSwitch.y))))), ~ (subgroup_size))))), _GLF_IDENTITY(subgroup_size, ~ (_GLF_IDENTITY(~ (subgroup_size), min(~ (_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec4(subgroup_size, 0u, 0u, 0u), _GLF_IDENTITY((uvec4(subgroup_size, 0u, 0u, 0u)) | (uvec4(subgroup_size, 0u, 0u, 0u)), ((uvec4(subgroup_size, 0u, 0u, _GLF_IDENTITY(0u, 0u ^ (0u)))) | _GLF_IDENTITY((uvec4(subgroup_size, 0u, 0u, 0u)), ((uvec4(subgroup_size, 0u, 0u, 0u))) | ((uvec4(subgroup_size, 0u, 0u, 0u))))) / uvec4(1u, 1u, 1u, 1u)))), (uint(_GLF_IDENTITY(uvec4(subgroup_size, 0u, 0u, 0u), (uvec4(subgroup_size, 0u, 0u, 0u)) | (uvec4(subgroup_size, 0u, 0u, 0u))))) / uint(_GLF_ONE(1.0, injectionSwitch.y))))), ~ (subgroup_size)))))))), uint(uvec3(_GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, ~ (_GLF_IDENTITY(~ (subgroup_size), min(~ (_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec4(subgroup_size, 0u, 0u, 0u), _GLF_IDENTITY((uvec4(subgroup_size, 0u, 0u, 0u)) | (uvec4(subgroup_size, 0u, 0u, 0u)), ((uvec4(subgroup_size, 0u, 0u, _GLF_IDENTITY(0u, 0u ^ (0u)))) | _GLF_IDENTITY((uvec4(subgroup_size, 0u, 0u, 0u)), ((uvec4(subgroup_size, 0u, 0u, 0u))) | ((uvec4(subgroup_size, 0u, 0u, 0u))))) / uvec4(1u, 1u, 1u, 1u)))), (uint(_GLF_IDENTITY(uvec4(subgroup_size, 0u, 0u, 0u), (uvec4(subgroup_size, 0u, 0u, 0u)) | (uvec4(subgroup_size, 0u, 0u, 0u))))) / uint(_GLF_ONE(1.0, injectionSwitch.y))))), ~ (subgroup_size))))), min(_GLF_IDENTITY(subgroup_size, ~ (_GLF_IDENTITY(~ (subgroup_size), min(~ (_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec4(subgroup_size, 0u, 0u, 0u), _GLF_IDENTITY((uvec4(subgroup_size, 0u, 0u, 0u)) | (uvec4(subgroup_size, 0u, 0u, 0u)), ((uvec4(subgroup_size, 0u, 0u, _GLF_IDENTITY(0u, 0u ^ (0u)))) | _GLF_IDENTITY((uvec4(subgroup_size, 0u, 0u, 0u)), ((uvec4(subgroup_size, 0u, 0u, 0u))) | ((uvec4(subgroup_size, 0u, 0u, 0u))))) / uvec4(1u, 1u, 1u, 1u)))), (uint(_GLF_IDENTITY(uvec4(subgroup_size, 0u, 0u, 0u), (uvec4(subgroup_size, 0u, 0u, 0u)) | (uvec4(subgroup_size, 0u, 0u, 0u))))) / uint(_GLF_ONE(1.0, injectionSwitch.y))))), ~ (subgroup_size))))), _GLF_IDENTITY(subgroup_size, ~ (_GLF_IDENTITY(~ (subgroup_size), min(~ (_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec4(subgroup_size, 0u, 0u, 0u), _GLF_IDENTITY((uvec4(subgroup_size, 0u, 0u, 0u)) | (uvec4(subgroup_size, 0u, 0u, 0u)), ((uvec4(subgroup_size, 0u, 0u, _GLF_IDENTITY(0u, 0u ^ (0u)))) | _GLF_IDENTITY((uvec4(subgroup_size, 0u, 0u, 0u)), ((uvec4(subgroup_size, 0u, 0u, 0u))) | ((uvec4(subgroup_size, 0u, 0u, 0u))))) / uvec4(1u, 1u, 1u, 1u)))), (uint(_GLF_IDENTITY(uvec4(subgroup_size, 0u, 0u, 0u), (uvec4(subgroup_size, 0u, 0u, 0u)) | (uvec4(subgroup_size, 0u, 0u, 0u))))) / uint(_GLF_ONE(1.0, injectionSwitch.y))))), ~ (subgroup_size)))))))), max(~ (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, ~ (_GLF_IDENTITY(~ (subgroup_size), min(~ (_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec4(subgroup_size, 0u, 0u, 0u), _GLF_IDENTITY((uvec4(subgroup_size, 0u, 0u, 0u)) | (uvec4(subgroup_size, 0u, 0u, 0u)), ((uvec4(subgroup_size, 0u, 0u, _GLF_IDENTITY(0u, 0u ^ (0u)))) | _GLF_IDENTITY((uvec4(subgroup_size, 0u, 0u, 0u)), ((uvec4(subgroup_size, 0u, 0u, 0u))) | ((uvec4(subgroup_size, 0u, 0u, 0u))))) / uvec4(1u, 1u, 1u, 1u)))), (uint(_GLF_IDENTITY(uvec4(subgroup_size, 0u, 0u, 0u), (uvec4(subgroup_size, 0u, 0u, 0u)) | (uvec4(subgroup_size, 0u, 0u, 0u))))) / uint(_GLF_ONE(1.0, injectionSwitch.y))))), ~ (subgroup_size))))), min(_GLF_IDENTITY(subgroup_size, ~ (_GLF_IDENTITY(~ (subgroup_size), min(~ (_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec4(subgroup_size, 0u, 0u, 0u), _GLF_IDENTITY((uvec4(subgroup_size, 0u, 0u, 0u)) | (uvec4(subgroup_size, 0u, 0u, 0u)), ((uvec4(subgroup_size, 0u, 0u, _GLF_IDENTITY(0u, 0u ^ (0u)))) | _GLF_IDENTITY((uvec4(subgroup_size, 0u, 0u, 0u)), ((uvec4(subgroup_size, 0u, 0u, 0u))) | ((uvec4(subgroup_size, 0u, 0u, 0u))))) / uvec4(1u, 1u, 1u, 1u)))), (uint(_GLF_IDENTITY(uvec4(subgroup_size, 0u, 0u, 0u), (uvec4(subgroup_size, 0u, 0u, 0u)) | (uvec4(subgroup_size, 0u, 0u, 0u))))) / uint(_GLF_ONE(1.0, injectionSwitch.y))))), ~ (subgroup_size))))), _GLF_IDENTITY(subgroup_size, ~ (_GLF_IDENTITY(~ (subgroup_size), min(~ (_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec4(subgroup_size, 0u, 0u, 0u), _GLF_IDENTITY((uvec4(subgroup_size, 0u, 0u, 0u)) | (uvec4(subgroup_size, 0u, 0u, 0u)), ((uvec4(subgroup_size, 0u, 0u, _GLF_IDENTITY(0u, 0u ^ (0u)))) | _GLF_IDENTITY((uvec4(subgroup_size, 0u, 0u, 0u)), ((uvec4(subgroup_size, 0u, 0u, 0u))) | ((uvec4(subgroup_size, 0u, 0u, 0u))))) / uvec4(1u, 1u, 1u, 1u)))), (uint(_GLF_IDENTITY(uvec4(subgroup_size, 0u, 0u, 0u), (uvec4(subgroup_size, 0u, 0u, 0u)) | (uvec4(subgroup_size, 0u, 0u, 0u))))) / uint(_GLF_ONE(1.0, injectionSwitch.y))))), ~ (subgroup_size)))))))), ~ (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, ~ (_GLF_IDENTITY(~ (subgroup_size), min(~ (_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec4(subgroup_size, 0u, 0u, 0u), _GLF_IDENTITY((uvec4(subgroup_size, 0u, 0u, 0u)) | (uvec4(subgroup_size, 0u, 0u, 0u)), ((uvec4(subgroup_size, 0u, 0u, _GLF_IDENTITY(0u, 0u ^ (0u)))) | _GLF_IDENTITY((uvec4(subgroup_size, 0u, 0u, 0u)), ((uvec4(subgroup_size, 0u, 0u, 0u))) | ((uvec4(subgroup_size, 0u, 0u, 0u))))) / uvec4(1u, 1u, 1u, 1u)))), (uint(_GLF_IDENTITY(uvec4(subgroup_size, 0u, 0u, 0u), (uvec4(subgroup_size, 0u, 0u, 0u)) | (uvec4(subgroup_size, 0u, 0u, 0u))))) / uint(_GLF_ONE(1.0, injectionSwitch.y))))), ~ (subgroup_size))))), min(_GLF_IDENTITY(subgroup_size, ~ (_GLF_IDENTITY(~ (subgroup_size), min(~ (_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec4(subgroup_size, 0u, 0u, 0u), _GLF_IDENTITY((uvec4(subgroup_size, 0u, 0u, 0u)) | (uvec4(subgroup_size, 0u, 0u, 0u)), ((uvec4(subgroup_size, 0u, 0u, _GLF_IDENTITY(0u, 0u ^ (0u)))) | _GLF_IDENTITY((uvec4(subgroup_size, 0u, 0u, 0u)), ((uvec4(subgroup_size, 0u, 0u, 0u))) | ((uvec4(subgroup_size, 0u, 0u, 0u))))) / uvec4(1u, 1u, 1u, 1u)))), (uint(_GLF_IDENTITY(uvec4(subgroup_size, 0u, 0u, 0u), (uvec4(subgroup_size, 0u, 0u, 0u)) | (uvec4(subgroup_size, 0u, 0u, 0u))))) / uint(_GLF_ONE(1.0, injectionSwitch.y))))), ~ (subgroup_size))))), _GLF_IDENTITY(subgroup_size, ~ (_GLF_IDENTITY(~ (subgroup_size), min(~ (_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec4(subgroup_size, 0u, 0u, 0u), _GLF_IDENTITY((uvec4(subgroup_size, 0u, 0u, 0u)) | (uvec4(subgroup_size, 0u, 0u, 0u)), ((uvec4(subgroup_size, 0u, 0u, _GLF_IDENTITY(0u, 0u ^ (0u)))) | _GLF_IDENTITY((uvec4(subgroup_size, 0u, 0u, 0u)), ((uvec4(subgroup_size, 0u, 0u, 0u))) | ((uvec4(subgroup_size, 0u, 0u, 0u))))) / uvec4(1u, 1u, 1u, 1u)))), (uint(_GLF_IDENTITY(uvec4(subgroup_size, 0u, 0u, 0u), (uvec4(subgroup_size, 0u, 0u, 0u)) | (uvec4(subgroup_size, 0u, 0u, 0u))))) / uint(_GLF_ONE(1.0, injectionSwitch.y))))), ~ (subgroup_size)))))))))), uint(_GLF_ONE(1.0, injectionSwitch.y)), 1u))))), (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (subgroup_size) >> 0u), ~ (_GLF_IDENTITY(~ (subgroup_size), min(~ (_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec4(subgroup_size, 0u, 0u, 0u), (uvec4(subgroup_size, 0u, 0u, 0u)) | (uvec4(_GLF_IDENTITY(subgroup_size, (true ? subgroup_size : _GLF_FUZZED(subgroup_local_id))), 0u, 0u, 0u)))), (_GLF_IDENTITY(uint(_GLF_IDENTITY(uvec4(subgroup_size, 0u, 0u, 0u), (uvec4(subgroup_size, 0u, 0u, 0u)) | (uvec4(_GLF_IDENTITY(subgroup_size, ~ (~ (subgroup_size))), 0u, 0u, 0u)))), (uint(_GLF_IDENTITY(uvec4(subgroup_size, 0u, 0u, 0u), (uvec4(subgroup_size, 0u, 0u, 0u)) | (uvec4(_GLF_IDENTITY(subgroup_size, ~ (~ (subgroup_size))), 0u, 0u, 0u))))) << 0u)) / uint(_GLF_ONE(1.0, injectionSwitch.y))))), ~ (subgroup_size)))))) ^ (20873u & 0u)))) + _GLF_IDENTITY(subgroup_local_id, clamp(_GLF_IDENTITY(subgroup_local_id, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? subgroup_local_id : _GLF_FUZZED(80071u))), subgroup_local_id, subgroup_local_id))))) | (workgroup_base + subgroup_id * subgroup_size + subgroup_local_id));
 uint next_virtual_gid = _GLF_IDENTITY(workgroup_base, _GLF_IDENTITY(clamp(workgroup_base, workgroup_base, workgroup_base), ~ (~ (clamp(workgroup_base, workgroup_base, workgroup_base))))) + subgroup_id * subgroup_size + ((_GLF_IDENTITY(subgroup_local_id + 1, ~ (~ (_GLF_IDENTITY(subgroup_local_id + 1, ~ (~ (subgroup_local_id + 1))))))) % subgroup_size);
 buf[virtual_gid] = 1;
 atomicStore(buf[next_virtual_gid], uint(2), _GLF_IDENTITY(4, int(ivec3(_GLF_IDENTITY(4, (4) | (4)), 0, 0))), 64, _GLF_IDENTITY(4, min(4, 4)));
 if(_GLF_DEAD(false))
  {
   do
    {
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))), ! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, false || (false))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false || (false))), ! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, false || (false))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false || (false))), bool(_GLF_IDENTITY(bvec2(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, false || (false))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false || (false))), true), bvec2(bvec2(bvec2(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, false || (false))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false || (false))), true)))))))))))))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), (_GLF_WRAPPED_IF_TRUE(true)) || false))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         barrier();
        }
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, false))))
      barrier();
    }
  }
 for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
        barrier();
       do
        {
         barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(false))
        barrier();
      }
     barrier();
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
}
