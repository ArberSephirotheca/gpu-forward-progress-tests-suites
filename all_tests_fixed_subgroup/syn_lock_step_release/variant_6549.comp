#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(false))
  {
   do
    {
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 uvec2 GLF_merged2_0_1_16_1_1_13next_virtual_gidnum_workgroup;
 uvec4 GLF_merged4_0_1_13_1_1_11_2_1_13_3_1_14num_workgroupsubgroup_idsubgroup_sizeworkgroup_base;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), injectionSwitch)).y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         barrier();
        }
      }
     return;
    }
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        break;
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
          {
           barrier();
          }
         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, false, true)))))
          continue;
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, float(float(injectionSwitch.x))))) < _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0)))))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              return;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
                {
                 if(_GLF_DEAD(false))
                  return;
                 return;
                }
              }
             barrier();
             if(_GLF_DEAD(false))
              continue;
            }
           if(_GLF_DEAD(false))
            {
             do
              {
               barrier();
              }
             while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, false || (false)), true, false, false)))));
            }
          }
         else
          {
          }
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               return;
              }
             else
              {
              }
            }
           barrier();
          }
        }
      }
    }
   if(_GLF_DEAD(false))
    return;
   for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (int(2)) | 0))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 do
  {
   if(_GLF_DEAD(false))
    {
     do
      {
       return;
      }
     while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec4(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, false, false)))) && true)) || false));
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), (_GLF_IDENTITY(false, true && (false))) && true)));
 do
  {
   do
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bool(_GLF_DEAD(false))), (bool(bool(_GLF_DEAD(false)))) && true)))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))))
            continue;
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            return;
           return;
          }
         do
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
              return;
             return;
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        }
       do
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
       barrier();
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(1, 0 | (1))); _injected_loop_counter ++)
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != 1, _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_injected_loop_counter != 1, ! (! (_injected_loop_counter != 1))))), bool(bool(bool(bool(_GLF_IDENTITY(_injected_loop_counter != 1, ! (! (_injected_loop_counter != 1)))))))))); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
         _GLF_IDENTITY(GLF_merged4_0_1_13_1_1_11_2_1_13_3_1_14num_workgroupsubgroup_idsubgroup_sizeworkgroup_base.y = subgroup_id, (GLF_merged4_0_1_13_1_1_11_2_1_13_3_1_14num_workgroupsubgroup_idsubgroup_sizeworkgroup_base.y = subgroup_id) ^ (_GLF_IDENTITY(0u << _GLF_IDENTITY(uint(7u), uint(7u)), (_GLF_IDENTITY(true, (true) && true) ? 0u << _GLF_IDENTITY(uint(7u), uint(7u)) : _GLF_FUZZED(subgroup_id)))));
         if(_GLF_DEAD(false))
          break;
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               barrier();
              }
             else
              {
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 if(_GLF_DEAD(false))
                  break;
                 return;
                }
              }
            }
           if(_GLF_DEAD(false))
            break;
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               barrier();
              }
             else
              {
              }
            }
          }
        }
      }
     else
      {
      }
    }
  }
 do
  {
   do
    {
     if(_GLF_DEAD(false))
      return;
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(false))
    break;
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
uint subgroup_size = 16;
 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), true && (_GLF_WRAPPED_IF_TRUE(true)))))))
  {
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   return;
  }
 do
  {
   GLF_merged4_0_1_13_1_1_11_2_1_13_3_1_14num_workgroupsubgroup_idsubgroup_sizeworkgroup_base.z = subgroup_size;
  }
 while(_GLF_WRAPPED_LOOP(false));
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        return;
      }
     else
      {
      }
     return;
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  return;
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-36.34), _GLF_FUZZED(-8.5)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))).x, (true ? _GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(vec3(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0), 0.0, 1.0)), (float(vec3(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0), 0.0, 1.0))) * 1.0))))) * 1.0) : _GLF_FUZZED((-6.2)))) > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y, (injectionSwitch.y) + _GLF_IDENTITY(0.0, min(0.0, 0.0)))))))
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), bool(bvec4(_GLF_IDENTITY(! (_GLF_DEAD(false)), true && (! (_GLF_DEAD(false)))), false, _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED((-2.4 / -165.317))), bool(false))))), false))))))
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         return;
        }
      }
    }
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 do
  {
   do
    {
     GLF_merged2_0_1_16_1_1_13next_virtual_gidnum_workgroup.y = num_workgroup;
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(_GLF_IDENTITY(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true), bvec3(bvec3(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true))))))))
    continue;
   if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   if(_GLF_DEAD(false))
    {
     do
      {
       for(int _injected_loop_counter = (0 ^ 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
        {
         barrier();
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-90.31)), float(injectionSwitch.y), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))));
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) || false), (injectionSwitch.x > injectionSwitch.y))));
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0), injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y)), false || (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0), injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(false, (false) && true)))))
      barrier();
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(_GLF_IDENTITY(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bool(bvec2(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true))))))
      return;
    }
   else
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), (true ? injectionSwitch.x : _GLF_FUZZED(5560.6881))) > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), (true ? _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)) : _GLF_FUZZED(-602.574))))), _GLF_IDENTITY(! _GLF_IDENTITY((_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))) && true)), ((! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) && true), (_GLF_IDENTITY(! (! (_GLF_FALSE(_GLF_IDENTITY(false, bool(bool(false))), (injectionSwitch.x > injectionSwitch.y)))), bool(bvec2(! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false)))) && true))))
      barrier();
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (1 ^ int(_GLF_ONE(1.0, injectionSwitch.y)))); _injected_loop_counter --)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], min(_GLF_IDENTITY(injectionSwitch[0], _GLF_IDENTITY(float(vec2(injectionSwitch[0], 0.0)), min(float(vec2(injectionSwitch[0], 0.0)), float(vec2(injectionSwitch[0], 0.0))))), injectionSwitch[0])), injectionSwitch[1])).y))))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
           if(_GLF_DEAD(false))
            return;
          }
         else
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
              }
             else
              {
               return;
              }
            }
           return;
           if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, true, false)))))
            return;
           if(_GLF_DEAD(false))
            barrier();
          }
        }
      }
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   GLF_merged4_0_1_13_1_1_11_2_1_13_3_1_14num_workgroupsubgroup_idsubgroup_sizeworkgroup_base.x = GLF_merged2_0_1_16_1_1_13next_virtual_gidnum_workgroup.y;
  }
 else
  {
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))))), _GLF_IDENTITY(bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)), (_GLF_IDENTITY(bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)), (bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_IDENTITY(bool(bvec3(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, false)), (bool(bvec3(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, false))) && true)), false))) || false)) || false))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     return;
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1))); _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    return;
                  }
                 if(_GLF_DEAD(false))
                  return;
                 if(_GLF_DEAD(false))
                  barrier();
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               barrier();
               if(_GLF_DEAD(false))
                barrier();
              }
            }
          }
         else
          {
          }
         if(_GLF_DEAD(false))
          {
           do
            {
             return;
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
          }
        }
      }
    }
  }
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (87625 & 0)); _injected_loop_counter --)
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 >> _GLF_IDENTITY(int(1), int(1)))); _injected_loop_counter --)
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (_GLF_IDENTITY(! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true && (! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), true && (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (_GLF_IDENTITY(! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true && (! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
        return;
       return;
      }
    }
  }
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (true ? _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0) : _GLF_FUZZED(-69.22)))))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(bvec2(_GLF_DEAD(false), false), bvec2(bvec2(bvec2(_GLF_DEAD(false), false)))))))
      return;
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))).y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         barrier();
        }
      }
     do
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        continue;
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(_GLF_IDENTITY(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))
      return;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
     for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(2), _GLF_IDENTITY(_GLF_IDENTITY(int(2), _GLF_IDENTITY(_GLF_IDENTITY(int(ivec2(int(_GLF_IDENTITY(_GLF_IDENTITY(2, int(ivec3(2, 1, int(_GLF_ONE(1.0, injectionSwitch.y))))), 0 | (_GLF_IDENTITY(2, int(ivec3(2, 1, int(_GLF_ONE(1.0, injectionSwitch.y)))))))), 1)), (int(_GLF_IDENTITY(ivec2(int(_GLF_IDENTITY(_GLF_IDENTITY(2, int(ivec3(2, 1, int(_GLF_ONE(1.0, injectionSwitch.y))))), 0 | (_GLF_IDENTITY(2, int(ivec3(2, 1, int(_GLF_ONE(1.0, injectionSwitch.y)))))))), 1), min(_GLF_IDENTITY(ivec2(int(_GLF_IDENTITY(_GLF_IDENTITY(2, int(ivec3(2, 1, int(_GLF_ONE(1.0, injectionSwitch.y))))), 0 | (_GLF_IDENTITY(2, int(ivec3(2, 1, int(_GLF_ONE(1.0, injectionSwitch.y)))))))), 1), ivec2(ivec2(_GLF_IDENTITY(ivec2(int(_GLF_IDENTITY(_GLF_IDENTITY(2, int(ivec3(2, 1, int(_GLF_ONE(1.0, injectionSwitch.y))))), 0 | (_GLF_IDENTITY(2, int(ivec3(2, 1, int(_GLF_ONE(1.0, injectionSwitch.y)))))))), 1), (ivec2(int(_GLF_IDENTITY(_GLF_IDENTITY(2, int(ivec3(2, 1, int(_GLF_ONE(1.0, injectionSwitch.y))))), 0 | (_GLF_IDENTITY(2, int(ivec3(2, 1, int(_GLF_ONE(1.0, injectionSwitch.y)))))))), 1)) - ivec2(0, 0))))), ivec2(int(_GLF_IDENTITY(_GLF_IDENTITY(2, int(ivec3(2, 1, int(_GLF_ONE(1.0, injectionSwitch.y))))), 0 | (_GLF_IDENTITY(2, int(ivec3(2, 1, int(_GLF_ONE(1.0, injectionSwitch.y)))))))), 1))))) >> 0), 0 + (_GLF_IDENTITY(int(ivec2(int(2), 1)), (int(ivec2(int(_GLF_IDENTITY(2, (false ? _GLF_FUZZED(-38507) : 2))), 1))) ^ _GLF_IDENTITY(0, (0) | 0))))), (int(2)) - 0))) >> _GLF_IDENTITY(int(2), int(2))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         return;
        }
       do
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           continue;
          }
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       barrier();
      }
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        return;
      }
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))), true)), (_GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))), true)), false || (bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))), true))))) && true)))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   return;
  }
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, false || (false))))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat2(injectionSwitch, _GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0))).y, clamp(_GLF_IDENTITY(injectionSwitch, vec2(mat2(injectionSwitch, 0.0, 0.0))).y, _GLF_IDENTITY(injectionSwitch, vec2(mat2(injectionSwitch, 0.0, 0.0))).y, _GLF_IDENTITY(injectionSwitch, vec2(mat2(injectionSwitch, 0.0, 0.0))).y))))))
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             continue;
            }
           return;
          }
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               return;
              }
             else
              {
              }
            }
          }
         else
          {
          }
        }
       return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         return;
        }
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             return;
            }
           else
            {
            }
          }
        }
      }
     else
      {
       do
        {
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
          {
           if(_GLF_DEAD(false))
            return;
           barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))));
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           barrier();
          }
         else
          {
          }
        }
      }
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         return;
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])))), injectionSwitch)).x > injectionSwitch.y))))
          return;
        }
       else
        {
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 uint workgroup_base = _GLF_IDENTITY(workgroup_size, (workgroup_size) >> _GLF_IDENTITY(0u, uint(_GLF_IDENTITY(uint(0u), (_GLF_IDENTITY(uint(0u), min(uint(0u), uint(0u)))) ^ 0u)))) * workgroup_id;
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)), injectionSwitch)).x > injectionSwitch.y))))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       do
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
          barrier();
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           return;
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
       if(_GLF_DEAD(false))
        return;
      }
    }
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     barrier();
    }
   else
    {
    }
  }
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
      continue;
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       barrier();
      }
     else
      {
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 if(_GLF_DEAD(false))
  return;
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, float(mat3(injectionSwitch.x, 1.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), determinant(mat4(0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, sin(0.0), 0.0, 1.0, 0.0, 0.0, 0.0, 0.0)), 0.0, 0.0, round(length(normalize(1.0)))))) < injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y))))))))
    barrier();
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
       continue;
      }
     for(int _injected_loop_counter = ((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(0), int(0)), (1 << _GLF_IDENTITY(_GLF_IDENTITY(int(0), min(int(0), int(0))), int(0))) * ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))))) >> _GLF_IDENTITY(int(0), int(0))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != 0, true && (_injected_loop_counter != 0))); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           do
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 return;
                }
              }
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0) > injectionSwitch.y))))
            barrier();
          }
         else
          {
          }
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           return;
          }
         else
          {
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
        }
       if(_GLF_DEAD(false))
        barrier();
      }
    }
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec4((injectionSwitch.x > injectionSwitch.y), _GLF_TRUE(_GLF_IDENTITY(true, false || (true)), (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)).y)), true, _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(vec3(injectionSwitch.x, 0.0, determinant(mat3(1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0)))), mix(float(float(vec3(injectionSwitch.x, 0.0, determinant(mat3(1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0))))), float(_GLF_FUZZED(-8.9)), bool(false))))), float(_GLF_FUZZED(_GLF_IDENTITY((- -6.4), ((- -6.4)) / round(length(normalize(vec2(1.0, 1.0))))))), bool(false))) > injectionSwitch.y))))))))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        return;
       do
        {
         for(int _injected_loop_counter = _GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), (int(_GLF_ONE(1.0, injectionSwitch.y))) >> 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) + _GLF_IDENTITY(0, int(ivec3(_GLF_IDENTITY(0, (true ? _GLF_IDENTITY(0, (0) / 1) : _GLF_FUZZED(_injected_loop_counter))), _GLF_IDENTITY(1, clamp(1, 1, 1)), _GLF_IDENTITY(1, (1) >> 0))))))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true)), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-743.003), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-2.4)), bvec2(true, false))).x < injectionSwitch.y)) && (_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true)), bool(bool(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((_GLF_IDENTITY(injectionSwitch.x, exp(0.0) * (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0))) > injectionSwitch.y)) && true)))))))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              break;
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                return;
               barrier();
              }
             if(_GLF_DEAD(false))
              continue;
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (false))))))))))
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    break;
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     return;
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                   else
                    {
                    }
                  }
                }
              }
             return;
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                barrier();
               break;
              }
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                }
               else
                {
                 return;
                }
              }
             if(_GLF_DEAD(false))
              barrier();
            }
           if(_GLF_DEAD(false))
            barrier();
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) && _GLF_IDENTITY(true, (true) && true))));
       if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), false || (bool(false)))))) || false)))
        barrier();
      }
    }
   else
    {
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = (0 | (-83282 & 0)); _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y))); _injected_loop_counter ++)
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (injectionSwitch.x > injectionSwitch.y))), bool(bvec2(! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (injectionSwitch.x > injectionSwitch.y))), true)))))))))
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           return;
          }
         barrier();
         if(_GLF_DEAD(false))
          return;
         for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 | 1)); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
             do
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
          }
         if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))).y)))), ! (! ((_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), ! (! (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))).y, min(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))).y, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))).y))))))))))))
          {
           if(_GLF_DEAD(false))
            continue;
           do
            {
             do
              {
               if(_GLF_DEAD(false))
                continue;
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(-1892.3081)))))))
                  {
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     return;
                    }
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                }
               else
                {
                }
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
            }
           while(_GLF_WRAPPED_LOOP(false));
           if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bool(false)))))
            {
            }
           else
            {
             return;
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              return;
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
              }
             else
              {
               return;
              }
            }
          }
        }
      }
    }
   do
    {
     do
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY((_GLF_IDENTITY(0 | 1, (0 | 1) << int(_GLF_ZERO(0.0, injectionSwitch.x)))), 1 * ((_GLF_IDENTITY(0 | 1, (0 | 1) << int(_GLF_ZERO(0.0, injectionSwitch.x))))))); _injected_loop_counter ++)
            {
             GLF_merged4_0_1_13_1_1_11_2_1_13_3_1_14num_workgroupsubgroup_idsubgroup_sizeworkgroup_base.w = workgroup_base;
            }
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
            break;
           barrier();
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(injectionSwitch.x > injectionSwitch.y)))), ! (! (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(injectionSwitch.x > injectionSwitch.y)))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(injectionSwitch.x > injectionSwitch.y)))), ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(injectionSwitch.x > injectionSwitch.y))))) || false)), (! (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(injectionSwitch.x > injectionSwitch.y)))), ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(injectionSwitch.x > injectionSwitch.y))))) || false))) || false)))))))))))
              continue;
             barrier();
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              {
               do
                {
                 return;
                }
               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-6.8, 36.68)) : _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)))).y, mix(float(_GLF_FUZZED(vec2(-8.3, -8.3).g)), float(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-6.8, 36.68)) : _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)))).y), bool(true)))))));
              }
             if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
              continue;
             barrier();
            }
           if(_GLF_DEAD(false))
            break;
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             else
              {
              }
             return;
            }
           if(_GLF_DEAD(false))
            continue;
           return;
          }
        }
       else
        {
         if(_GLF_DEAD(false))
          break;
        }
      }
     else
      {
       if(_GLF_DEAD(false))
        break;
      }
     if(_GLF_DEAD(false))
      continue;
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         return;
        }
      }
     barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, true, true, true)), bool(bvec3(bool(bvec4(_GLF_IDENTITY(false, (false) || false), true, true, true)), false, _GLF_IDENTITY(true, (true) && true)))))))
    {
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         barrier();
        }
      }
     return;
    }
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   for(int _injected_loop_counter = (0 | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(_GLF_IDENTITY(1, 0 ^ (1)), (_GLF_IDENTITY(1, 0 ^ (1))) ^ 0)); _GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) | 0))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, (1) - 0)); _injected_loop_counter ++)
        {
         barrier();
        }
      }
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       barrier();
      }
    }
  }
 uint virtual_gid = GLF_merged4_0_1_13_1_1_11_2_1_13_3_1_14num_workgroupsubgroup_idsubgroup_sizeworkgroup_base.w + GLF_merged4_0_1_13_1_1_11_2_1_13_3_1_14num_workgroupsubgroup_idsubgroup_sizeworkgroup_base.y * GLF_merged4_0_1_13_1_1_11_2_1_13_3_1_14num_workgroupsubgroup_idsubgroup_sizeworkgroup_base.z + subgroup_local_id;
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, 0 ^ (_injected_loop_counter)) != (0 << _GLF_IDENTITY(int(8), int(8)))); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > 0, ! (_GLF_IDENTITY(! (_injected_loop_counter > 0), bool(bvec4(! (_injected_loop_counter > 0), true, true, false)))))); _injected_loop_counter --)
  {
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y))))), bool(_GLF_IDENTITY(bvec2(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y))))), false), bvec2(bvec4(bvec2(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y))))), false), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))
    {
     do
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           continue;
          }
         break;
        }
       if(_GLF_DEAD(false))
        break;
       return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))), (_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))), (_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))), ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)))) || false)) || false)) && true))))
        break;
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, float(mat3(injectionSwitch.y, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0)))))))));
    }
  }
 uint next_virtual_gid = GLF_merged4_0_1_13_1_1_11_2_1_13_3_1_14num_workgroupsubgroup_idsubgroup_sizeworkgroup_base.w + GLF_merged4_0_1_13_1_1_11_2_1_13_3_1_14num_workgroupsubgroup_idsubgroup_sizeworkgroup_base.y * GLF_merged4_0_1_13_1_1_11_2_1_13_3_1_14num_workgroupsubgroup_idsubgroup_sizeworkgroup_base.z + _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY((subgroup_local_id + _GLF_IDENTITY(1, (_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0))))) ? _GLF_FUZZED(31734) : _GLF_IDENTITY(1, max(1, 1))))) % GLF_merged4_0_1_13_1_1_11_2_1_13_3_1_14num_workgroupsubgroup_idsubgroup_sizeworkgroup_base.z, _GLF_IDENTITY(((subgroup_local_id + 1) % GLF_merged4_0_1_13_1_1_11_2_1_13_3_1_14num_workgroupsubgroup_idsubgroup_sizeworkgroup_base.z) ^ 0u, (((_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | (subgroup_local_id)) + 1) % GLF_merged4_0_1_13_1_1_11_2_1_13_3_1_14num_workgroupsubgroup_idsubgroup_sizeworkgroup_base.z) ^ _GLF_IDENTITY(0u, (0u) / 1u)) ^ (0u | 0u)))), max((_GLF_IDENTITY((subgroup_local_id + _GLF_IDENTITY(1, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(31734) : _GLF_IDENTITY(1, max(1, 1))))) % GLF_merged4_0_1_13_1_1_11_2_1_13_3_1_14num_workgroupsubgroup_idsubgroup_sizeworkgroup_base.z, _GLF_IDENTITY(((_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | (subgroup_local_id)) + 1) % GLF_merged4_0_1_13_1_1_11_2_1_13_3_1_14num_workgroupsubgroup_idsubgroup_sizeworkgroup_base.z) ^ 0u, (((subgroup_local_id + 1) % GLF_merged4_0_1_13_1_1_11_2_1_13_3_1_14num_workgroupsubgroup_idsubgroup_sizeworkgroup_base.z) ^ 0u) ^ (0u | 0u)))), _GLF_IDENTITY((_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id + _GLF_IDENTITY(1, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(31734) : _GLF_IDENTITY(1, max(1, 1)))), 0u ^ (subgroup_local_id + _GLF_IDENTITY(1, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(31734) : _GLF_IDENTITY(1, max(1, 1))))))) % GLF_merged4_0_1_13_1_1_11_2_1_13_3_1_14num_workgroupsubgroup_idsubgroup_sizeworkgroup_base.z, _GLF_IDENTITY(((subgroup_local_id + 1) % GLF_merged4_0_1_13_1_1_11_2_1_13_3_1_14num_workgroupsubgroup_idsubgroup_sizeworkgroup_base.z) ^ 0u, (((subgroup_local_id + 1) % GLF_merged4_0_1_13_1_1_11_2_1_13_3_1_14num_workgroupsubgroup_idsubgroup_sizeworkgroup_base.z) ^ 0u) ^ (0u | 0u)))), 1u * ((_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id + _GLF_IDENTITY(1, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_IDENTITY(_GLF_FUZZED(31734), ~ (~ (_GLF_FUZZED(31734)))) : _GLF_IDENTITY(1, max(1, 1))))), (true ? (subgroup_local_id + _GLF_IDENTITY(1, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_IDENTITY(_GLF_FUZZED(31734), ~ (~ (_GLF_FUZZED(31734)))) : _GLF_IDENTITY(1, max(1, 1))))) : _GLF_FUZZED(workgroup_id))) % GLF_merged4_0_1_13_1_1_11_2_1_13_3_1_14num_workgroupsubgroup_idsubgroup_sizeworkgroup_base.z, _GLF_IDENTITY(((subgroup_local_id + 1) % _GLF_IDENTITY(GLF_merged4_0_1_13_1_1_11_2_1_13_3_1_14num_workgroupsubgroup_idsubgroup_sizeworkgroup_base, (GLF_merged4_0_1_13_1_1_11_2_1_13_3_1_14num_workgroupsubgroup_idsubgroup_sizeworkgroup_base) << uvec4(0u, 0u, 0u, 0u)).z) ^ 0u, (((subgroup_local_id + 1) % GLF_merged4_0_1_13_1_1_11_2_1_13_3_1_14num_workgroupsubgroup_idsubgroup_sizeworkgroup_base.z) ^ 0u) ^ (0u | 0u)))))))), _GLF_IDENTITY(((_GLF_IDENTITY((subgroup_local_id + 1) % GLF_merged4_0_1_13_1_1_11_2_1_13_3_1_14num_workgroupsubgroup_idsubgroup_sizeworkgroup_base.z, _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY((subgroup_local_id + 1) % GLF_merged4_0_1_13_1_1_11_2_1_13_3_1_14num_workgroupsubgroup_idsubgroup_sizeworkgroup_base.z, uint(_GLF_IDENTITY(uvec4((_GLF_IDENTITY(subgroup_local_id + 1, 1u * (subgroup_local_id + 1))) % GLF_merged4_0_1_13_1_1_11_2_1_13_3_1_14num_workgroupsubgroup_idsubgroup_sizeworkgroup_base.z, 0u, 0u, 0u), ~ (~ (uvec4((subgroup_local_id + 1) % GLF_merged4_0_1_13_1_1_11_2_1_13_3_1_14num_workgroupsubgroup_idsubgroup_sizeworkgroup_base.z, 0u, 0u, _GLF_IDENTITY(0u, _GLF_IDENTITY((_GLF_IDENTITY(false, bool(bool(false))) ? _GLF_FUZZED(GLF_merged2_0_1_16_1_1_13next_virtual_gidnum_workgroup.s) : 0u), uint(uvec3((_GLF_IDENTITY(false, bool(bool(false))) ? _GLF_FUZZED(GLF_merged2_0_1_16_1_1_13next_virtual_gidnum_workgroup.s) : 0u), 1u, 1u))))))))))) ^ 0u, _GLF_IDENTITY((((subgroup_local_id + 1) % GLF_merged4_0_1_13_1_1_11_2_1_13_3_1_14num_workgroupsubgroup_idsubgroup_sizeworkgroup_base.z) ^ 0u) ^ (0u | 0u), uint(_GLF_IDENTITY(uvec3((((subgroup_local_id + 1) % GLF_merged4_0_1_13_1_1_11_2_1_13_3_1_14num_workgroupsubgroup_idsubgroup_sizeworkgroup_base.z) ^ 0u) ^ (0u | 0u), 1u, 0u), uvec3(0u, 0u, 0u) ^ (uvec3((((subgroup_local_id + 1) % GLF_merged4_0_1_13_1_1_11_2_1_13_3_1_14num_workgroupsubgroup_idsubgroup_sizeworkgroup_base.z) ^ 0u) ^ (0u | 0u), 1u, 0u)))))), (0u >> _GLF_IDENTITY(uint(1u), uint(1u))) ^ (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY((subgroup_local_id + 1) % GLF_merged4_0_1_13_1_1_11_2_1_13_3_1_14num_workgroupsubgroup_idsubgroup_sizeworkgroup_base.z, uint(_GLF_IDENTITY(uvec4((_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) ^ 0u)) % GLF_merged4_0_1_13_1_1_11_2_1_13_3_1_14num_workgroupsubgroup_idsubgroup_sizeworkgroup_base.z, 0u, 0u, 0u), ~ (~ (uvec4((subgroup_local_id + 1) % GLF_merged4_0_1_13_1_1_11_2_1_13_3_1_14num_workgroupsubgroup_idsubgroup_sizeworkgroup_base.z, 0u, 0u, 0u))))))) ^ _GLF_IDENTITY(0u, (0u) | 0u), (((subgroup_local_id + 1) % GLF_merged4_0_1_13_1_1_11_2_1_13_3_1_14num_workgroupsubgroup_idsubgroup_sizeworkgroup_base.z) ^ 0u) ^ (0u | 0u)), _GLF_IDENTITY(clamp(_GLF_IDENTITY((_GLF_IDENTITY((subgroup_local_id + 1) % GLF_merged4_0_1_13_1_1_11_2_1_13_3_1_14num_workgroupsubgroup_idsubgroup_sizeworkgroup_base.z, uint(_GLF_IDENTITY(uvec4((subgroup_local_id + 1) % GLF_merged4_0_1_13_1_1_11_2_1_13_3_1_14num_workgroupsubgroup_idsubgroup_sizeworkgroup_base.z, _GLF_IDENTITY(0u, max(0u, 0u)), 0u, 0u), ~ (_GLF_IDENTITY(~ (uvec4((subgroup_local_id + 1) % GLF_merged4_0_1_13_1_1_11_2_1_13_3_1_14num_workgroupsubgroup_idsubgroup_sizeworkgroup_base.z, 0u, 0u, 0u)), (~ (uvec4((subgroup_local_id + 1) % GLF_merged4_0_1_13_1_1_11_2_1_13_3_1_14num_workgroupsubgroup_idsubgroup_sizeworkgroup_base.z, 0u, 0u, 0u))) >> (uvec4(0u, 0u, 0u, 0u) & (uvec4(140561u, 68744u, 71514u, 168831u) >> 134899u)))))))) ^ _GLF_IDENTITY(0u, clamp(_GLF_IDENTITY(0u, (true ? 0u : _GLF_FUZZED(subgroup_local_id))), 0u, 0u)), (((subgroup_local_id + 1) % GLF_merged4_0_1_13_1_1_11_2_1_13_3_1_14num_workgroupsubgroup_idsubgroup_sizeworkgroup_base.z) ^ 0u) ^ (0u | 0u)), _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY((subgroup_local_id + _GLF_IDENTITY(1, _GLF_IDENTITY(0, 1 * (0)) | (1))) % GLF_merged4_0_1_13_1_1_11_2_1_13_3_1_14num_workgroupsubgroup_idsubgroup_sizeworkgroup_base.z, uint(_GLF_IDENTITY(uvec4((subgroup_local_id + 1) % GLF_merged4_0_1_13_1_1_11_2_1_13_3_1_14num_workgroupsubgroup_idsubgroup_sizeworkgroup_base.z, 0u, 0u, 0u), ~ (~ (uvec4((subgroup_local_id + 1) % GLF_merged4_0_1_13_1_1_11_2_1_13_3_1_14num_workgroupsubgroup_idsubgroup_sizeworkgroup_base.z, 0u, 0u, 0u))))))) ^ 0u, _GLF_IDENTITY((((subgroup_local_id + 1) % GLF_merged4_0_1_13_1_1_11_2_1_13_3_1_14num_workgroupsubgroup_idsubgroup_sizeworkgroup_base.z) ^ 0u), uint(uvec4(_GLF_IDENTITY((((subgroup_local_id + 1) % GLF_merged4_0_1_13_1_1_11_2_1_13_3_1_14num_workgroupsubgroup_idsubgroup_sizeworkgroup_base.z) ^ 0u), ((((subgroup_local_id + 1) % GLF_merged4_0_1_13_1_1_11_2_1_13_3_1_14num_workgroupsubgroup_idsubgroup_sizeworkgroup_base.z) ^ 0u)) + (34096u & 0u)), 1u, 0u, 0u))) ^ (0u | 0u)), 0u | (_GLF_IDENTITY((_GLF_IDENTITY((subgroup_local_id + 1) % GLF_merged4_0_1_13_1_1_11_2_1_13_3_1_14num_workgroupsubgroup_idsubgroup_sizeworkgroup_base.z, uint(_GLF_IDENTITY(uvec4((subgroup_local_id + 1) % GLF_merged4_0_1_13_1_1_11_2_1_13_3_1_14num_workgroupsubgroup_idsubgroup_sizeworkgroup_base.z, 0u, 0u, 0u), ~ (~ (uvec4((subgroup_local_id + 1) % GLF_merged4_0_1_13_1_1_11_2_1_13_3_1_14num_workgroupsubgroup_idsubgroup_sizeworkgroup_base.z, 0u, 0u, 0u))))))) ^ 0u, (((subgroup_local_id + 1) % GLF_merged4_0_1_13_1_1_11_2_1_13_3_1_14num_workgroupsubgroup_idsubgroup_sizeworkgroup_base.z) ^ 0u) ^ (0u | 0u)))), _GLF_IDENTITY((_GLF_IDENTITY((subgroup_local_id + 1) % GLF_merged4_0_1_13_1_1_11_2_1_13_3_1_14num_workgroupsubgroup_idsubgroup_sizeworkgroup_base.z, uint(_GLF_IDENTITY(uvec4((subgroup_local_id + 1) % GLF_merged4_0_1_13_1_1_11_2_1_13_3_1_14num_workgroupsubgroup_idsubgroup_sizeworkgroup_base.z, 0u, 0u, 0u), ~ (~ (uvec4((subgroup_local_id + 1) % GLF_merged4_0_1_13_1_1_11_2_1_13_3_1_14num_workgroupsubgroup_idsubgroup_sizeworkgroup_base.z, 0u, 0u, 0u))))))) ^ 0u, (((subgroup_local_id + 1) % GLF_merged4_0_1_13_1_1_11_2_1_13_3_1_14num_workgroupsubgroup_idsubgroup_sizeworkgroup_base.z) ^ 0u) ^ (0u | 0u))), (_GLF_IDENTITY(clamp(_GLF_IDENTITY((_GLF_IDENTITY((subgroup_local_id + 1) % GLF_merged4_0_1_13_1_1_11_2_1_13_3_1_14num_workgroupsubgroup_idsubgroup_sizeworkgroup_base.z, uint(_GLF_IDENTITY(uvec4((subgroup_local_id + 1) % GLF_merged4_0_1_13_1_1_11_2_1_13_3_1_14num_workgroupsubgroup_idsubgroup_sizeworkgroup_base.z, _GLF_IDENTITY(0u, max(0u, 0u)), 0u, 0u), ~ (_GLF_IDENTITY(~ (uvec4((subgroup_local_id + 1) % GLF_merged4_0_1_13_1_1_11_2_1_13_3_1_14num_workgroupsubgroup_idsubgroup_sizeworkgroup_base.z, 0u, 0u, 0u)), (~ (uvec4((subgroup_local_id + 1) % GLF_merged4_0_1_13_1_1_11_2_1_13_3_1_14num_workgroupsubgroup_idsubgroup_sizeworkgroup_base.z, 0u, 0u, 0u))) >> (uvec4(0u, 0u, 0u, 0u) & (uvec4(140561u, 68744u, 71514u, 168831u) >> 134899u)))))))) ^ _GLF_IDENTITY(0u, clamp(_GLF_IDENTITY(0u, (true ? 0u : _GLF_FUZZED(subgroup_local_id))), 0u, 0u)), (((subgroup_local_id + 1) % GLF_merged4_0_1_13_1_1_11_2_1_13_3_1_14num_workgroupsubgroup_idsubgroup_sizeworkgroup_base.z) ^ 0u) ^ (0u | 0u)), _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY((subgroup_local_id + _GLF_IDENTITY(1, _GLF_IDENTITY(0, 1 * (0)) | (1))) % GLF_merged4_0_1_13_1_1_11_2_1_13_3_1_14num_workgroupsubgroup_idsubgroup_sizeworkgroup_base.z, uint(_GLF_IDENTITY(uvec4((subgroup_local_id + 1) % GLF_merged4_0_1_13_1_1_11_2_1_13_3_1_14num_workgroupsubgroup_idsubgroup_sizeworkgroup_base.z, 0u, 0u, 0u), ~ (~ (uvec4((subgroup_local_id + 1) % GLF_merged4_0_1_13_1_1_11_2_1_13_3_1_14num_workgroupsubgroup_idsubgroup_sizeworkgroup_base.z, 0u, 0u, 0u))))))) ^ 0u, _GLF_IDENTITY((((subgroup_local_id + 1) % GLF_merged4_0_1_13_1_1_11_2_1_13_3_1_14num_workgroupsubgroup_idsubgroup_sizeworkgroup_base.z) ^ 0u), uint(uvec4(_GLF_IDENTITY((((subgroup_local_id + 1) % GLF_merged4_0_1_13_1_1_11_2_1_13_3_1_14num_workgroupsubgroup_idsubgroup_sizeworkgroup_base.z) ^ 0u), ((((subgroup_local_id + 1) % GLF_merged4_0_1_13_1_1_11_2_1_13_3_1_14num_workgroupsubgroup_idsubgroup_sizeworkgroup_base.z) ^ 0u)) + (34096u & 0u)), 1u, 0u, 0u))) ^ (0u | 0u)), 0u | (_GLF_IDENTITY((_GLF_IDENTITY((subgroup_local_id + 1) % GLF_merged4_0_1_13_1_1_11_2_1_13_3_1_14num_workgroupsubgroup_idsubgroup_sizeworkgroup_base.z, uint(_GLF_IDENTITY(uvec4((subgroup_local_id + 1) % GLF_merged4_0_1_13_1_1_11_2_1_13_3_1_14num_workgroupsubgroup_idsubgroup_sizeworkgroup_base.z, 0u, 0u, 0u), ~ (~ (uvec4((subgroup_local_id + 1) % GLF_merged4_0_1_13_1_1_11_2_1_13_3_1_14num_workgroupsubgroup_idsubgroup_sizeworkgroup_base.z, 0u, 0u, 0u))))))) ^ 0u, (((subgroup_local_id + 1) % GLF_merged4_0_1_13_1_1_11_2_1_13_3_1_14num_workgroupsubgroup_idsubgroup_sizeworkgroup_base.z) ^ 0u) ^ (0u | 0u)))), _GLF_IDENTITY((_GLF_IDENTITY((subgroup_local_id + 1) % GLF_merged4_0_1_13_1_1_11_2_1_13_3_1_14num_workgroupsubgroup_idsubgroup_sizeworkgroup_base.z, uint(_GLF_IDENTITY(uvec4((subgroup_local_id + 1) % GLF_merged4_0_1_13_1_1_11_2_1_13_3_1_14num_workgroupsubgroup_idsubgroup_sizeworkgroup_base.z, 0u, 0u, 0u), ~ (~ (uvec4((subgroup_local_id + 1) % GLF_merged4_0_1_13_1_1_11_2_1_13_3_1_14num_workgroupsubgroup_idsubgroup_sizeworkgroup_base.z, 0u, 0u, 0u))))))) ^ 0u, (((subgroup_local_id + 1) % GLF_merged4_0_1_13_1_1_11_2_1_13_3_1_14num_workgroupsubgroup_idsubgroup_sizeworkgroup_base.z) ^ 0u) ^ (0u | 0u))), ~ (~ (clamp(_GLF_IDENTITY((_GLF_IDENTITY((subgroup_local_id + 1) % GLF_merged4_0_1_13_1_1_11_2_1_13_3_1_14num_workgroupsubgroup_idsubgroup_sizeworkgroup_base.z, uint(_GLF_IDENTITY(uvec4((subgroup_local_id + 1) % GLF_merged4_0_1_13_1_1_11_2_1_13_3_1_14num_workgroupsubgroup_idsubgroup_sizeworkgroup_base.z, _GLF_IDENTITY(0u, max(0u, 0u)), 0u, 0u), ~ (_GLF_IDENTITY(~ (uvec4((subgroup_local_id + 1) % GLF_merged4_0_1_13_1_1_11_2_1_13_3_1_14num_workgroupsubgroup_idsubgroup_sizeworkgroup_base.z, 0u, 0u, 0u)), (~ (uvec4((subgroup_local_id + 1) % GLF_merged4_0_1_13_1_1_11_2_1_13_3_1_14num_workgroupsubgroup_idsubgroup_sizeworkgroup_base.z, 0u, 0u, 0u))) >> (uvec4(0u, 0u, 0u, 0u) & (uvec4(140561u, 68744u, 71514u, 168831u) >> 134899u)))))))) ^ _GLF_IDENTITY(0u, clamp(_GLF_IDENTITY(0u, (true ? 0u : _GLF_FUZZED(subgroup_local_id))), 0u, 0u)), (((subgroup_local_id + 1) % GLF_merged4_0_1_13_1_1_11_2_1_13_3_1_14num_workgroupsubgroup_idsubgroup_sizeworkgroup_base.z) ^ 0u) ^ (0u | 0u)), _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY((subgroup_local_id + _GLF_IDENTITY(1, _GLF_IDENTITY(0, 1 * (0)) | (1))) % GLF_merged4_0_1_13_1_1_11_2_1_13_3_1_14num_workgroupsubgroup_idsubgroup_sizeworkgroup_base.z, uint(_GLF_IDENTITY(uvec4((subgroup_local_id + 1) % GLF_merged4_0_1_13_1_1_11_2_1_13_3_1_14num_workgroupsubgroup_idsubgroup_sizeworkgroup_base.z, 0u, 0u, 0u), ~ (~ (uvec4((subgroup_local_id + 1) % GLF_merged4_0_1_13_1_1_11_2_1_13_3_1_14num_workgroupsubgroup_idsubgroup_sizeworkgroup_base.z, 0u, 0u, 0u))))))) ^ 0u, _GLF_IDENTITY((((subgroup_local_id + 1) % GLF_merged4_0_1_13_1_1_11_2_1_13_3_1_14num_workgroupsubgroup_idsubgroup_sizeworkgroup_base.z) ^ 0u), uint(uvec4(_GLF_IDENTITY((((subgroup_local_id + 1) % GLF_merged4_0_1_13_1_1_11_2_1_13_3_1_14num_workgroupsubgroup_idsubgroup_sizeworkgroup_base.z) ^ 0u), ((((subgroup_local_id + 1) % GLF_merged4_0_1_13_1_1_11_2_1_13_3_1_14num_workgroupsubgroup_idsubgroup_sizeworkgroup_base.z) ^ 0u)) + (34096u & 0u)), 1u, 0u, 0u))) ^ (0u | 0u)), 0u | (_GLF_IDENTITY((_GLF_IDENTITY((subgroup_local_id + 1) % GLF_merged4_0_1_13_1_1_11_2_1_13_3_1_14num_workgroupsubgroup_idsubgroup_sizeworkgroup_base.z, uint(_GLF_IDENTITY(uvec4((subgroup_local_id + 1) % GLF_merged4_0_1_13_1_1_11_2_1_13_3_1_14num_workgroupsubgroup_idsubgroup_sizeworkgroup_base.z, 0u, 0u, 0u), ~ (~ (uvec4((subgroup_local_id + 1) % GLF_merged4_0_1_13_1_1_11_2_1_13_3_1_14num_workgroupsubgroup_idsubgroup_sizeworkgroup_base.z, 0u, 0u, 0u))))))) ^ 0u, (((subgroup_local_id + 1) % GLF_merged4_0_1_13_1_1_11_2_1_13_3_1_14num_workgroupsubgroup_idsubgroup_sizeworkgroup_base.z) ^ 0u) ^ (0u | 0u)))), _GLF_IDENTITY((_GLF_IDENTITY((subgroup_local_id + 1) % GLF_merged4_0_1_13_1_1_11_2_1_13_3_1_14num_workgroupsubgroup_idsubgroup_sizeworkgroup_base.z, uint(_GLF_IDENTITY(uvec4((subgroup_local_id + 1) % GLF_merged4_0_1_13_1_1_11_2_1_13_3_1_14num_workgroupsubgroup_idsubgroup_sizeworkgroup_base.z, 0u, 0u, 0u), ~ (~ (uvec4((subgroup_local_id + 1) % GLF_merged4_0_1_13_1_1_11_2_1_13_3_1_14num_workgroupsubgroup_idsubgroup_sizeworkgroup_base.z, 0u, 0u, 0u))))))) ^ 0u, (((subgroup_local_id + 1) % GLF_merged4_0_1_13_1_1_11_2_1_13_3_1_14num_workgroupsubgroup_idsubgroup_sizeworkgroup_base.z) ^ 0u) ^ (0u | 0u))))))) >> (0u << _GLF_IDENTITY(uint(6u), _GLF_IDENTITY(uint(6u), uint(uvec4(uint(6u), 1u, 0u, 1u)))))))))))) ^ 0u, _GLF_IDENTITY((((_GLF_IDENTITY((subgroup_local_id + 1) % GLF_merged4_0_1_13_1_1_11_2_1_13_3_1_14num_workgroupsubgroup_idsubgroup_sizeworkgroup_base.z, _GLF_IDENTITY(_GLF_IDENTITY(((subgroup_local_id + 1) % GLF_merged4_0_1_13_1_1_11_2_1_13_3_1_14num_workgroupsubgroup_idsubgroup_sizeworkgroup_base.z) ^ 0u, (((subgroup_local_id + 1) % _GLF_IDENTITY(GLF_merged4_0_1_13_1_1_11_2_1_13_3_1_14num_workgroupsubgroup_idsubgroup_sizeworkgroup_base, (GLF_merged4_0_1_13_1_1_11_2_1_13_3_1_14num_workgroupsubgroup_idsubgroup_sizeworkgroup_base) | (GLF_merged4_0_1_13_1_1_11_2_1_13_3_1_14num_workgroupsubgroup_idsubgroup_sizeworkgroup_base)).z) ^ 0u) ^ (0u | 0u)), clamp(_GLF_IDENTITY(((subgroup_local_id + 1) % GLF_merged4_0_1_13_1_1_11_2_1_13_3_1_14num_workgroupsubgroup_idsubgroup_sizeworkgroup_base.z) ^ 0u, (((subgroup_local_id + 1) % _GLF_IDENTITY(GLF_merged4_0_1_13_1_1_11_2_1_13_3_1_14num_workgroupsubgroup_idsubgroup_sizeworkgroup_base, (GLF_merged4_0_1_13_1_1_11_2_1_13_3_1_14num_workgroupsubgroup_idsubgroup_sizeworkgroup_base) | (GLF_merged4_0_1_13_1_1_11_2_1_13_3_1_14num_workgroupsubgroup_idsubgroup_sizeworkgroup_base)).z) ^ 0u) ^ (0u | 0u)), _GLF_IDENTITY(((subgroup_local_id + 1) % GLF_merged4_0_1_13_1_1_11_2_1_13_3_1_14num_workgroupsubgroup_idsubgroup_sizeworkgroup_base.z) ^ 0u, (((subgroup_local_id + 1) % _GLF_IDENTITY(GLF_merged4_0_1_13_1_1_11_2_1_13_3_1_14num_workgroupsubgroup_idsubgroup_sizeworkgroup_base, (GLF_merged4_0_1_13_1_1_11_2_1_13_3_1_14num_workgroupsubgroup_idsubgroup_sizeworkgroup_base) | (GLF_merged4_0_1_13_1_1_11_2_1_13_3_1_14num_workgroupsubgroup_idsubgroup_sizeworkgroup_base)).z) ^ 0u) ^ (0u | 0u)), _GLF_IDENTITY(_GLF_IDENTITY(((subgroup_local_id + 1) % GLF_merged4_0_1_13_1_1_11_2_1_13_3_1_14num_workgroupsubgroup_idsubgroup_sizeworkgroup_base.z) ^ 0u, ~ (~ (((subgroup_local_id + 1) % GLF_merged4_0_1_13_1_1_11_2_1_13_3_1_14num_workgroupsubgroup_idsubgroup_sizeworkgroup_base.z) ^ 0u))), (((subgroup_local_id + 1) % _GLF_IDENTITY(GLF_merged4_0_1_13_1_1_11_2_1_13_3_1_14num_workgroupsubgroup_idsubgroup_sizeworkgroup_base, (GLF_merged4_0_1_13_1_1_11_2_1_13_3_1_14num_workgroupsubgroup_idsubgroup_sizeworkgroup_base) | (GLF_merged4_0_1_13_1_1_11_2_1_13_3_1_14num_workgroupsubgroup_idsubgroup_sizeworkgroup_base)).z) ^ 0u) ^ (0u | 0u))))))) ^ 0u), 0u | ((((_GLF_IDENTITY((subgroup_local_id + 1) % GLF_merged4_0_1_13_1_1_11_2_1_13_3_1_14num_workgroupsubgroup_idsubgroup_sizeworkgroup_base.z, _GLF_IDENTITY(_GLF_IDENTITY(((subgroup_local_id + 1) % GLF_merged4_0_1_13_1_1_11_2_1_13_3_1_14num_workgroupsubgroup_idsubgroup_sizeworkgroup_base.z) ^ _GLF_IDENTITY(0u, (0u) - _GLF_IDENTITY(0u, (false ? _GLF_FUZZED(workgroup_size) : 0u))), (((subgroup_local_id + 1) % _GLF_IDENTITY(GLF_merged4_0_1_13_1_1_11_2_1_13_3_1_14num_workgroupsubgroup_idsubgroup_sizeworkgroup_base, (GLF_merged4_0_1_13_1_1_11_2_1_13_3_1_14num_workgroupsubgroup_idsubgroup_sizeworkgroup_base) | (GLF_merged4_0_1_13_1_1_11_2_1_13_3_1_14num_workgroupsubgroup_idsubgroup_sizeworkgroup_base)).z) ^ 0u) ^ (0u | 0u)), clamp(_GLF_IDENTITY(_GLF_IDENTITY(((subgroup_local_id + 1) % GLF_merged4_0_1_13_1_1_11_2_1_13_3_1_14num_workgroupsubgroup_idsubgroup_sizeworkgroup_base.z) ^ 0u, (((subgroup_local_id + 1) % GLF_merged4_0_1_13_1_1_11_2_1_13_3_1_14num_workgroupsubgroup_idsubgroup_sizeworkgroup_base.z) ^ 0u) ^ 0u), (((subgroup_local_id + 1) % _GLF_IDENTITY(GLF_merged4_0_1_13_1_1_11_2_1_13_3_1_14num_workgroupsubgroup_idsubgroup_sizeworkgroup_base, (GLF_merged4_0_1_13_1_1_11_2_1_13_3_1_14num_workgroupsubgroup_idsubgroup_sizeworkgroup_base) | (GLF_merged4_0_1_13_1_1_11_2_1_13_3_1_14num_workgroupsubgroup_idsubgroup_sizeworkgroup_base)).z) ^ 0u) ^ (0u | 0u)), _GLF_IDENTITY(((subgroup_local_id + 1) % GLF_merged4_0_1_13_1_1_11_2_1_13_3_1_14num_workgroupsubgroup_idsubgroup_sizeworkgroup_base.z) ^ 0u, _GLF_IDENTITY((((subgroup_local_id + 1) % _GLF_IDENTITY(GLF_merged4_0_1_13_1_1_11_2_1_13_3_1_14num_workgroupsubgroup_idsubgroup_sizeworkgroup_base, (GLF_merged4_0_1_13_1_1_11_2_1_13_3_1_14num_workgroupsubgroup_idsubgroup_sizeworkgroup_base) | (GLF_merged4_0_1_13_1_1_11_2_1_13_3_1_14num_workgroupsubgroup_idsubgroup_sizeworkgroup_base)).z) ^ 0u), min((((subgroup_local_id + 1) % _GLF_IDENTITY(GLF_merged4_0_1_13_1_1_11_2_1_13_3_1_14num_workgroupsubgroup_idsubgroup_sizeworkgroup_base, (GLF_merged4_0_1_13_1_1_11_2_1_13_3_1_14num_workgroupsubgroup_idsubgroup_sizeworkgroup_base) | (GLF_merged4_0_1_13_1_1_11_2_1_13_3_1_14num_workgroupsubgroup_idsubgroup_sizeworkgroup_base)).z) ^ 0u), (((subgroup_local_id + 1) % _GLF_IDENTITY(GLF_merged4_0_1_13_1_1_11_2_1_13_3_1_14num_workgroupsubgroup_idsubgroup_sizeworkgroup_base, (GLF_merged4_0_1_13_1_1_11_2_1_13_3_1_14num_workgroupsubgroup_idsubgroup_sizeworkgroup_base) | (GLF_merged4_0_1_13_1_1_11_2_1_13_3_1_14num_workgroupsubgroup_idsubgroup_sizeworkgroup_base)).z) ^ 0u))) ^ (0u | 0u)), _GLF_IDENTITY(((subgroup_local_id + 1) % GLF_merged4_0_1_13_1_1_11_2_1_13_3_1_14num_workgroupsubgroup_idsubgroup_sizeworkgroup_base.z) ^ 0u, ((_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) ^ 0u) + 1), max((_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) ^ 0u) + 1), (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) ^ 0u) + 1))) % _GLF_IDENTITY(GLF_merged4_0_1_13_1_1_11_2_1_13_3_1_14num_workgroupsubgroup_idsubgroup_sizeworkgroup_base, (GLF_merged4_0_1_13_1_1_11_2_1_13_3_1_14num_workgroupsubgroup_idsubgroup_sizeworkgroup_base) | (GLF_merged4_0_1_13_1_1_11_2_1_13_3_1_14num_workgroupsubgroup_idsubgroup_sizeworkgroup_base)).z) ^ 0u) ^ (0u | 0u))))))) ^ 0u))) >> (0u << _GLF_IDENTITY(uint(8u), uint(_GLF_IDENTITY(8u, (8u) - (0u >> _GLF_IDENTITY(uint(0u), uint(0u)))))))));
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, bool(bvec4(true, true, false, true))))))))
    {
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
    }
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   return;
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   return;
  }
 if(_GLF_DEAD(false))
  return;
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x > injectionSwitch.y)))))))))
    {
     do
      {
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             barrier();
            }
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y))))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
        }
       else
        {
        }
      }
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       do
        {
         return;
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
        break;
      }
     for(int _injected_loop_counter = 0; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), ! (! (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) >> 0) != 1)))); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) && _GLF_IDENTITY(true, (true) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) || false)))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && _GLF_IDENTITY((false), _GLF_IDENTITY(bool(bvec3((false), true, false)), ! (! (bool(bvec3((false), true, false)))))))))
          break;
         barrier();
         if(_GLF_DEAD(false))
          continue;
        }
      }
     if(_GLF_DEAD(false))
      break;
    }
   if(_GLF_DEAD(false))
    continue;
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false)))), (_GLF_DEAD(false)) && true))))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     GLF_merged2_0_1_16_1_1_13next_virtual_gidnum_workgroup.x = next_virtual_gid;
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, false || (false))))))
        {
        }
       else
        {
         return;
        }
      }
    }
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     barrier();
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
    }
   return;
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
  return;
 do
  {
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(3), int(3))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       return;
      }
    }
   buf[virtual_gid] = _GLF_IDENTITY(1, max(1, 1));
  }
 while(_GLF_WRAPPED_LOOP(false));
 for(int _injected_loop_counter = _GLF_IDENTITY(0, int(_GLF_IDENTITY(int(0), min(int(0), int(0))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
           for(int _injected_loop_counter = (90440 & 0); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y)), _GLF_IDENTITY(bool(bvec3(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y)), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (_GLF_IDENTITY(! (bool(bvec3(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y)), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), bool(bvec3(! (bool(bvec3(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y)), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), true, false))))))); _injected_loop_counter ++)
            {
             barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(_GLF_IDENTITY(bvec3((injectionSwitch.x > injectionSwitch.y), true, false), bvec3(bvec4(bvec3((injectionSwitch.x > injectionSwitch.y), true, false), false))))))))
              continue;
            }
          }
         barrier();
         if(_GLF_DEAD(false))
          return;
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), bool(bool(_GLF_IDENTITY(false, true && (false)))))))
      return;
     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), true && (_GLF_WRAPPED_IF_TRUE(true))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
        return;
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(0), int(0))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _GLF_IDENTITY(_injected_loop_counter ++, ~ (~ (_GLF_IDENTITY(_injected_loop_counter ++, _GLF_IDENTITY((0 | 0), 0 + (_GLF_IDENTITY((0 | 0), ((0 | 0)) - 0))) | (_injected_loop_counter ++))))))
          {
           do
            {
             if(_GLF_DEAD(false))
              return;
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
          }
        }
       do
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) | 0) != _GLF_IDENTITY((0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(8), int(8)), (_GLF_IDENTITY(int(8), int(8))) / int(_GLF_ONE(1.0, injectionSwitch.y)))), _GLF_IDENTITY(((_GLF_IDENTITY(0 >> _GLF_IDENTITY(int(8), int(8)), ~ (~ (0 >> _GLF_IDENTITY(int(8), int(8))))))) - 0, 0 ^ (((0 >> _GLF_IDENTITY(int(8), int(8)))) - 0)))); _injected_loop_counter --)
          {
           if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), bool(_GLF_IDENTITY(bvec2(_GLF_WRAPPED_IF_FALSE(false), false), bvec2(bvec3(bvec2(_GLF_WRAPPED_IF_FALSE(false), false), false))))))
            {
            }
           else
            {
             if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
              }
             else
              {
               if(_GLF_DEAD(false))
                barrier();
               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, int(ivec3(_injected_loop_counter, 0, 1))) > 0, bool(bvec2(_injected_loop_counter > 0, true)))); _injected_loop_counter --)
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, false, true)))))
                  barrier();
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  return;
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
            }
          }
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         do
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
           if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(_GLF_IDENTITY(mat3x2(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0), 1.0, 1.0, 1.0, 0.0, 0.0), (false ? _GLF_FUZZED(mat3x2(2398.6215, 3.8, 5.1, 71.39, -8065.2739, 6.4)) : mat3x2(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0), 1.0, 1.0, 1.0, 0.0, 0.0)))), clamp(float(_GLF_IDENTITY(mat3x2(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0), 1.0, 1.0, 1.0, 0.0, 0.0), (false ? _GLF_FUZZED(mat3x2(2398.6215, 3.8, 5.1, 71.39, -8065.2739, 6.4)) : mat3x2(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0), 1.0, 1.0, 1.0, 0.0, 0.0)))), float(_GLF_IDENTITY(mat3x2(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - _GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(-3.4) : 0.0)), _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(2.6)), float(0.0), bool(true)))))), 1.0, 1.0, 1.0, 0.0, 0.0), (_GLF_IDENTITY(false, (false) && true) ? _GLF_FUZZED(mat3x2(2398.6215, 3.8, 5.1, 71.39, -8065.2739, 6.4)) : mat3x2(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0), 1.0, 1.0, 1.0, 0.0, 0.0)))), _GLF_IDENTITY(float(_GLF_IDENTITY(mat3x2(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0), 1.0, 1.0, 1.0, 0.0, 0.0), (false ? _GLF_FUZZED(mat3x2(2398.6215, 3.8, 5.1, 71.39, -8065.2739, 6.4)) : mat3x2(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0), 1.0, 1.0, 1.0, 0.0, 0.0)))), clamp(float(_GLF_IDENTITY(mat3x2(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0), 1.0, 1.0, 1.0, 0.0, 0.0), (false ? _GLF_FUZZED(mat3x2(2398.6215, 3.8, 5.1, 71.39, _GLF_IDENTITY(-8065.2739, clamp(-8065.2739, -8065.2739, _GLF_IDENTITY(-8065.2739, clamp(-8065.2739, -8065.2739, -8065.2739)))), 6.4)) : mat3x2(_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch, vec2(vec3(injectionSwitch, sqrt(1.0)))).y) - 0.0), 1.0, 1.0, 1.0, 0.0, 0.0)))), float(_GLF_IDENTITY(mat3x2(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0), 1.0, 1.0, 1.0, 0.0, 0.0), (false ? _GLF_FUZZED(mat3x2(2398.6215, 3.8, 5.1, 71.39, _GLF_IDENTITY(-8065.2739, float(mat3(-8065.2739, 0.0, exp(0.0), 0.0, 0.0, 0.0, 1.0, 0.0, sqrt(0.0)))), 6.4)) : mat3x2(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0), min(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0), 1.0 * (_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0))))) : _GLF_FUZZED(step(exp(9722.7662), 9.3)))), 1.0, 1.0, 1.0, 0.0, 0.0)))), float(_GLF_IDENTITY(mat3x2(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0), 1.0, 1.0, 1.0, 0.0, 0.0), (false ? _GLF_FUZZED(mat3x2(2398.6215, 3.8, 5.1, 71.39, -8065.2739, 6.4)) : mat3x2(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0), 1.0, _GLF_IDENTITY(1.0, min(1.0, 1.0)), 1.0, 0.0, 0.0)))))))))))), bool(bvec4(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(true, false || (true)) && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), false, false, true))))))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
          }
         else
          {
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         break;
        }
       if(_GLF_DEAD(false))
        return;
      }
     else
      {
      }
     do
      {
       if(_GLF_DEAD(false))
        return;
      }
     while(_GLF_WRAPPED_LOOP(false));
     do
      {
       atomicStore(buf[_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged2_0_1_16_1_1_13next_virtual_gidnum_workgroup.x, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged2_0_1_16_1_1_13next_virtual_gidnum_workgroup, (_GLF_IDENTITY(GLF_merged2_0_1_16_1_1_13next_virtual_gidnum_workgroup, min(GLF_merged2_0_1_16_1_1_13next_virtual_gidnum_workgroup, GLF_merged2_0_1_16_1_1_13next_virtual_gidnum_workgroup))) ^ (uvec2(0u, 0u) ^ uvec2(0u, 0u))).x, (GLF_merged2_0_1_16_1_1_13next_virtual_gidnum_workgroup.x) - 0u), clamp(_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged2_0_1_16_1_1_13next_virtual_gidnum_workgroup.x, (GLF_merged2_0_1_16_1_1_13next_virtual_gidnum_workgroup.x) - 0u), (_GLF_IDENTITY(GLF_merged2_0_1_16_1_1_13next_virtual_gidnum_workgroup.x, (GLF_merged2_0_1_16_1_1_13next_virtual_gidnum_workgroup.x) - 0u)) / 1u), _GLF_IDENTITY(_GLF_IDENTITY(GLF_merged2_0_1_16_1_1_13next_virtual_gidnum_workgroup.x, (GLF_merged2_0_1_16_1_1_13next_virtual_gidnum_workgroup.x) - 0u), (true ? _GLF_IDENTITY(GLF_merged2_0_1_16_1_1_13next_virtual_gidnum_workgroup.x, (GLF_merged2_0_1_16_1_1_13next_virtual_gidnum_workgroup.x) - 0u) : _GLF_FUZZED(subgroup_size))), _GLF_IDENTITY(GLF_merged2_0_1_16_1_1_13next_virtual_gidnum_workgroup.x, (GLF_merged2_0_1_16_1_1_13next_virtual_gidnum_workgroup.x) - 0u)))) | (GLF_merged2_0_1_16_1_1_13next_virtual_gidnum_workgroup.x)), (GLF_merged2_0_1_16_1_1_13next_virtual_gidnum_workgroup.x) + _GLF_IDENTITY(_GLF_IDENTITY(0u, (0u) | 0u), _GLF_IDENTITY(uint(uvec3(0u, uint(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), (false ? _GLF_FUZZED(4.0) : _GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - sin(0.0))) / 1.0))))), (_GLF_IDENTITY(0u, max(0u, 0u)) | 0u))), (false ? _GLF_FUZZED(subgroup_size) : _GLF_IDENTITY(uint(uvec3(_GLF_IDENTITY(_GLF_IDENTITY(0u, (false ? _GLF_IDENTITY(_GLF_FUZZED(workgroup_id), max(_GLF_IDENTITY(_GLF_FUZZED(workgroup_id), (true ? _GLF_FUZZED(workgroup_id) : _GLF_FUZZED(num_workgroup))), _GLF_FUZZED(workgroup_id))) : 0u)), (_GLF_IDENTITY(_GLF_IDENTITY(0u, (false ? _GLF_IDENTITY(_GLF_FUZZED(workgroup_id), max(_GLF_IDENTITY(_GLF_FUZZED(workgroup_id), (true ? _GLF_FUZZED(workgroup_id) : _GLF_FUZZED(num_workgroup))), _GLF_FUZZED(workgroup_id))) : 0u)), (_GLF_IDENTITY(0u, (false ? _GLF_IDENTITY(_GLF_FUZZED(workgroup_id), max(_GLF_IDENTITY(_GLF_FUZZED(workgroup_id), (true ? _GLF_FUZZED(workgroup_id) : _GLF_FUZZED(num_workgroup))), _GLF_FUZZED(workgroup_id))) : 0u))) >> 0u)) | (_GLF_IDENTITY(0u, (false ? _GLF_IDENTITY(_GLF_FUZZED(workgroup_id), max(_GLF_IDENTITY(_GLF_FUZZED(workgroup_id), (true ? _GLF_FUZZED(workgroup_id) : _GLF_FUZZED(num_workgroup))), _GLF_FUZZED(workgroup_id))) : 0u)))), uint(_GLF_ZERO(_GLF_IDENTITY(0.0, clamp(0.0, _GLF_IDENTITY(0.0, float(_GLF_IDENTITY(vec4(0.0, 0.0, 1.0, 0.0), min(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0))))), _GLF_IDENTITY(0.0, (0.0) - 0.0))), injectionSwitch.x)), (_GLF_IDENTITY(0u | 0u, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(0u, (0u) - 0u) | 0u), clamp(~ (0u | 0u), ~ (0u | _GLF_IDENTITY(0u, ~ (~ (0u)))), ~ (0u | 0u)))))))), (false ? _GLF_FUZZED(num_workgroup) : uint(uvec3(_GLF_IDENTITY(_GLF_IDENTITY(0u, (_GLF_IDENTITY(_GLF_IDENTITY(0u, (true ? 0u : _GLF_FUZZED(subgroup_id))), 0u ^ (_GLF_IDENTITY(0u, ~ (~ (0u)))))) - 0u), min(0u, _GLF_IDENTITY(0u, _GLF_IDENTITY((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 0u : _GLF_FUZZED(105799u)), (false ? _GLF_FUZZED(workgroup_base) : (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 0u : _GLF_FUZZED(105799u))))))), uint(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), float(vec4(_GLF_ZERO(0.0, injectionSwitch.x), exp(0.0), 0.0, 1.0)))), (_GLF_IDENTITY(0u, max(0u, _GLF_IDENTITY(0u, (0u) * 1u))) | 0u)))))))))], uint(2), 4, _GLF_IDENTITY(64, (64) | (_GLF_IDENTITY(64, (_GLF_IDENTITY(64, (64) ^ 0)) << 0))), 4);
      }
     while(_GLF_WRAPPED_LOOP(false));
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], float(vec2(injectionSwitch[0], log(1.0)))), injectionSwitch[1])).x > injectionSwitch.y))))
        return;
      }
     while(_GLF_WRAPPED_LOOP(false));
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        {
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        }
      }
     if(_GLF_DEAD(false))
      return;
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec2(! (false), true)))))))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             barrier();
            }
           else
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(9.1, -9.9)) : _GLF_IDENTITY(injectionSwitch, vec2(vec2(injectionSwitch))))).x > injectionSwitch.y))))
              continue;
            }
          }
         do
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (true)))))
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           else
            {
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y))))
        continue;
      }
    }
   else
    {
    }
  }
 do
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) || false))), (_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false))) || false)))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(792.621) : injectionSwitch.x)))), injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, float(mat2x3(injectionSwitch.x, 1.0, exp(0.0), 1.0, 0.0, 1.0))))) > injectionSwitch.y)))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     break;
    }
   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
    {
     do
      {
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_DEAD(false))))
      barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     do
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         barrier();
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    break;
  }
 while(_GLF_WRAPPED_LOOP(false));
}
