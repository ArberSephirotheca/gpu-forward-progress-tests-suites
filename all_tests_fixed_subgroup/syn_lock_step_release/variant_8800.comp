#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 do
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    barrier();
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, 0 + (_injected_loop_counter)) != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, _GLF_IDENTITY(false, ! (! (false))), true), bvec3(bvec3(bvec3(false, false, _GLF_IDENTITY(true, true && (true)))))))))), (false) && _GLF_IDENTITY(_GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, (true) && true))), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(true, false || (true)), true, true)), _GLF_IDENTITY((bool(bvec3(true, true, true))) && true, bool(bvec4((bool(bvec3(true, true, true))) && true, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))))))))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
         do
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, true, _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true && (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), true && (! (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true && (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))))))))
              barrier();
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if(_GLF_DEAD(false))
                barrier();
              }
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if(_GLF_DEAD(false))
                barrier();
              }
             else
              {
              }
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), injectionSwitch)).x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              barrier();
             for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
              {
               barrier();
               if(_GLF_DEAD(false))
                barrier();
              }
             if(_GLF_DEAD(false))
              barrier();
            }
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
            barrier();
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             barrier();
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           do
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 barrier();
                }
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(false))
                {
                 if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), true && (! (_GLF_DEAD(false))))))))))
                  barrier();
                 barrier();
                }
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 do
                  {
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                     barrier();
                    }
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bvec3(false, false, false)))));
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(true, bool(bvec2(true, false))), ! (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY(true, bool(bvec2(true, false)))), (! (_GLF_IDENTITY(true, bool(bvec2(true, false))))) && true), _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, float(_GLF_IDENTITY(mat4x3(injectionSwitch.y, 0.0, 0.0, 0.0, 0.0, 1.0, cos(0.0), 1.0, 1.0, 0.0, cos(0.0), 0.0), (mat4x3(injectionSwitch.y, 0.0, 0.0, 0.0, 0.0, 1.0, cos(0.0), 1.0, 1.0, _GLF_IDENTITY(0.0, clamp(_GLF_IDENTITY(0.0, min(0.0, 0.0)), 0.0, _GLF_IDENTITY(0.0, float(mat4x2(0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0))))), cos(0.0), 0.0)) * mat4(1.0)))))) && _GLF_IDENTITY((! (_GLF_IDENTITY(true, bool(bvec2(true, false))))), true && ((! _GLF_IDENTITY((_GLF_IDENTITY(true, bool(bvec2(true, false)))), true && ((_GLF_IDENTITY(true, bool(bvec2(true, false))))))))))))))
                  {
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        barrier();
                       barrier();
                      }
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                     for(int _injected_loop_counter = (0 & 51039); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), (int(1)) | (int(1))))) >> _GLF_IDENTITY(int(1), int(1)))); _injected_loop_counter ++)
                      {
                       if(_GLF_WRAPPED_IF_FALSE(false))
                        {
                        }
                       else
                        {
                         barrier();
                         if(_GLF_DEAD(false))
                          barrier();
                         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), bool(bool(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))), ! (! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), bool(bool(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))))))))
                          barrier();
                        }
                       if(_GLF_DEAD(false))
                        barrier();
                      }
                    }
                   else
                    {
                    }
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                     barrier();
                    }
                  }
                 else
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                }
               else
                {
                }
               for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(6), int(6))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < (1 | 0), ! (! (_injected_loop_counter < (1 | 0))))); _injected_loop_counter ++)
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((false) && true, ! (! ((false) && true))))), true && (_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((false) && true, ! (! ((false) && true))))))))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   barrier();
                  }
                }
               if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 barrier();
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 do
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, bool(bvec4(false, true, true, false))), false))), true && (false))))
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                     barrier();
                    }
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                 barrier();
                }
              }
             if(_GLF_DEAD(false))
              barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
           do
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               barrier();
              }
             else
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             if(_GLF_DEAD(false))
              barrier();
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0)))));
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
             barrier();
            }
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             barrier();
            }
           else
            {
            }
          }
        }
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
      }
    }
  }
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(false))
  barrier();
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(_GLF_IDENTITY(-9688.9285, _GLF_IDENTITY(float(mat2x4(-9688.9285, 1.0, 0.0, 0.0, 0.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), 1.0, _GLF_IDENTITY(_GLF_IDENTITY(1.0, (1.0) / 1.0), (_GLF_IDENTITY(1.0, (1.0) / 1.0)) / 1.0))), min(float(mat2x4(-9688.9285, 1.0, 0.0, 0.0, 0.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), 1.0, _GLF_IDENTITY(_GLF_IDENTITY(1.0, (1.0) / 1.0), (_GLF_IDENTITY(1.0, (1.0) / 1.0)) / 1.0))), _GLF_IDENTITY(float(mat2x4(-9688.9285, 1.0, 0.0, 0.0, 0.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), 1.0, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1.0, (1.0) / 1.0), (_GLF_IDENTITY(1.0, (1.0) / 1.0)) + 0.0), (_GLF_IDENTITY(1.0, (1.0) / 1.0)) / 1.0))), (float(mat2x4(-9688.9285, 1.0, 0.0, 0.0, 0.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), 1.0, _GLF_IDENTITY(_GLF_IDENTITY(1.0, (1.0) / 1.0), (_GLF_IDENTITY(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(-33.66) : _GLF_IDENTITY(1.0, (1.0) + 0.0))), (1.0) / 1.0)) / 1.0)))) - 0.0)))))), bool(false))), injectionSwitch.x)) > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)).y))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false))))))))
      {
       do
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, bool(bvec4(false, false, false, false))), true, false, false)))));
      }
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), ! (! (false)))))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     else
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(0, min(0, 0))); _GLF_IDENTITY(_injected_loop_counter --, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _injected_loop_counter -- : _GLF_FUZZED(_injected_loop_counter))))
        {
         do
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
             if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
              barrier();
            }
           else
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
             if(_GLF_DEAD(false))
              {
               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > ((0 << _GLF_IDENTITY(int(2), int(2))) << _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), 0 ^ (int(2)))))); _injected_loop_counter --)
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                  {
                   barrier();
                  }
                 else
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                     barrier();
                    }
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(true, (true) || false) && (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)))) && true)))))
                  barrier();
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
              }
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-5.1) : injectionSwitch.y))))));
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
  barrier();
uint subgroup_size = 16;
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y))))))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 do
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
    {
     for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (int(0)) << 0))); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
      {
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(false));
 for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), (false) || false)))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             barrier();
            }
           else
            {
             if(_GLF_DEAD(false))
              barrier();
            }
          }
        }
      }
     if(_GLF_DEAD(false))
      {
       do
        {
         barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, true, false)))))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(false))
        barrier();
      }
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (int(5)) | 0)))); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       do
        {
         do
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
                barrier();
               barrier();
              }
             do
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
                  barrier();
                }
               else
                {
                 if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_WRAPPED_IF_TRUE(true))
                      {
                       if(_GLF_DEAD(false))
                        {
                         do
                          {
                           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                            {
                             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                              barrier();
                             barrier();
                            }
                           barrier();
                          }
                         while(_GLF_WRAPPED_LOOP(false));
                        }
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        barrier();
                       barrier();
                       if(_GLF_DEAD(false))
                        barrier();
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        {
                         if(_GLF_DEAD(false))
                          barrier();
                         barrier();
                        }
                      }
                     else
                      {
                      }
                    }
                   barrier();
                   do
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_DEAD(false))
                        barrier();
                       barrier();
                      }
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))));
                  }
                }
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
             barrier();
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, bool(bvec3(false, true, false))))))))
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
             if(_GLF_DEAD(false))
              barrier();
            }
           else
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               barrier();
              }
            }
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     for(int _injected_loop_counter = (1 & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 << _GLF_IDENTITY(int(5), int(5)))); _injected_loop_counter --)
      {
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   else
    {
    }
  }
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5))), min(((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5))), ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(5, (5) / 1)), int(5)))))); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) && true)))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
        barrier();
      }
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), false || (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), ! (! (_GLF_WRAPPED_IF_TRUE(true))))))))))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, false, false)), ! (! (bool(bvec3(false, false, false))))))))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
        }
      }
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(vec2(injectionSwitch.y, 1.0)))))))
      barrier();
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
        barrier();
      }
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         do
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           else
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
      }
     for(int _injected_loop_counter = (0 ^ 1); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0), false || (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0), (_GLF_WRAPPED_LOOP(_injected_loop_counter != 0)) && true))); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        barrier();
       for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), ! (! (_GLF_WRAPPED_IF_TRUE(true)))))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, true && (false))) || _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(vec3(injectionSwitch, 0.0), _GLF_IDENTITY(vec3(_GLF_IDENTITY(mat3x2(_GLF_IDENTITY(vec3(injectionSwitch, 0.0), (vec3(injectionSwitch, 0.0)) * mat3(1.0)), 1.0, 0.0, 1.0), mat3x2(0.0, 0.0, 0.0, 0.0, 0.0, 0.0) + (mat3x2(_GLF_IDENTITY(vec3(injectionSwitch, 0.0), (vec3(injectionSwitch, 0.0)) * mat3(1.0)), 1.0, 0.0, 1.0)))), vec3(vec3(vec3(_GLF_IDENTITY(mat3x2(_GLF_IDENTITY(vec3(injectionSwitch, 0.0), (vec3(injectionSwitch, 0.0)) * mat3(1.0)), 1.0, 0.0, 1.0), mat3x2(0.0, 0.0, 0.0, 0.0, 0.0, 0.0) + (mat3x2(_GLF_IDENTITY(vec3(injectionSwitch, 0.0), (vec3(injectionSwitch, 0.0)) * mat3(_GLF_IDENTITY(1.0, min(1.0, 1.0)))), 1.0, 0.0, 1.0)))))))))).y)))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 do
                  {
                   do
                    {
                     barrier();
                    }
                   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || ((injectionSwitch.x > injectionSwitch.y))))))
                {
                }
               else
                {
                 barrier();
                }
              }
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
        }
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   barrier();
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, clamp(_GLF_IDENTITY(_injected_loop_counter, max(_injected_loop_counter, _injected_loop_counter)), _injected_loop_counter, _injected_loop_counter)) < 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (! (_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(1715.2292), _GLF_FUZZED(vec3(-8131.5668, -506.677, 744.508).x)), vec2(_GLF_IDENTITY((injectionSwitch)[0], max((injectionSwitch)[0], (injectionSwitch)[0])), (injectionSwitch)[1]), bvec2(_GLF_IDENTITY(true, false || (true)), true))).y)))))))
        {
         do
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             barrier();
            }
           else
            {
             if(_GLF_DEAD(false))
              barrier();
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       else
        {
        }
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, false, true)))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > _GLF_IDENTITY(0, max(0, 0)), (_injected_loop_counter > _GLF_IDENTITY(_GLF_IDENTITY(0, max(0, 0)), 1 * (_GLF_IDENTITY(0, max(0, 0))))) || false)); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec3((injectionSwitch.x > injectionSwitch.y), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))))))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! _GLF_IDENTITY((! (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(3744.8588)), float(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))), bool(true)))))) - 0.0), injectionSwitch.x)) > injectionSwitch.y)), ((! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0), injectionSwitch.x)), (true ? _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(vec2(injectionSwitch))).x, (injectionSwitch.x) - 0.0), injectionSwitch.x)) : _GLF_FUZZED(-4003.4656))) > injectionSwitch.y))) && true))), ! _GLF_IDENTITY((! ((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2((_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)))[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(5.9), _GLF_FUZZED(22.00)), bvec2(false, false))).x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y, ! (! (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)))))))))), ((_GLF_IDENTITY(_GLF_IDENTITY(! ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(mat2(injectionSwitch, 1.0, 1.0))).y))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (! ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(mat2(injectionSwitch, 1.0, 1.0))).y))))))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(! ((_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0), ! (! (injectionSwitch.x > injectionSwitch.y))))), bool(bvec4(! ((_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0), ! (! (injectionSwitch.x > injectionSwitch.y))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), (_GLF_IDENTITY(! ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), bool(_GLF_IDENTITY(bool(! (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(bool(! _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y)))), false, true, false))))))), bool(bvec4(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), bool(_GLF_IDENTITY(bool(! (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(bool(! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y)))), false, true, false)))))), ! (! (bool(_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), bool(_GLF_IDENTITY(bool(! (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(bool(! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y)))), false, true, false)))))))))), true, true, true)))))))), bool(bvec4(_GLF_IDENTITY(! ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))))), (_GLF_IDENTITY(! ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))))), bool(bool(! ((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(_GLF_IDENTITY(bvec2(injectionSwitch.x > injectionSwitch.y, false), bvec2(bvec2(bvec2(injectionSwitch.x > injectionSwitch.y, false)))))), ! (! (injectionSwitch.x > injectionSwitch.y))))))))) || false), true, false, true)))) && true)))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))
  barrier();
 for(int _injected_loop_counter = (99258 & 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint workgroup_size = _GLF_IDENTITY(gl_WorkGroupSize, ~ (~ (gl_WorkGroupSize))).x;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   do
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       for(int _injected_loop_counter = (1 ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
        }
       barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, _GLF_IDENTITY((false), false || (_GLF_IDENTITY((false), bool(bool((false)))))) && true)));
  }
 do
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec3((injectionSwitch.x > injectionSwitch.y), false, false))))))))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
           else
            {
            }
          }
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], min(injectionSwitch[1], injectionSwitch[1])))).x > injectionSwitch.y))))
            barrier();
           barrier();
          }
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec4((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(injectionSwitch.x > injectionSwitch.y, false, true, false))), false)))), false, _GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ((injectionSwitch.x < injectionSwitch.y)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), false))))))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
          }
         else
          {
           barrier();
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           do
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))));
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false || (false))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(3, int(_GLF_IDENTITY(ivec4(_GLF_IDENTITY(3, (3) >> 0), int(_GLF_ZERO(0.0, injectionSwitch.x)), (1 ^ 0), 0), max(ivec4(_GLF_IDENTITY(3, (3) >> 0), int(_GLF_ZERO(0.0, injectionSwitch.x)), (1 ^ 0), 0), ivec4(_GLF_IDENTITY(3, (3) >> 0), int(_GLF_ZERO(0.0, injectionSwitch.x)), (1 ^ 0), 0)))))), _GLF_IDENTITY(int(3), (int(3)) | _GLF_IDENTITY(0, min(0, _GLF_IDENTITY(0, (0) | (0)))))))); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
        barrier();
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
          barrier();
         if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bool(true)))))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, true)), (bool(bvec2(false, true))) || false))))))
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               barrier();
              }
             else
              {
              }
            }
           barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
      }
    }
  }
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, (1) | (1))); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     else
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 barrier();
                }
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
                barrier();
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   barrier();
                  }
                }
               else
                {
                }
              }
             else
              {
              }
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
              {
               for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_GLF_IDENTITY(_injected_loop_counter, max(_injected_loop_counter, _GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) | (_injected_loop_counter)), (_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) | (_injected_loop_counter))) >> int(_GLF_ZERO(0.0, injectionSwitch.x)))))) | (_injected_loop_counter)) < 1); _injected_loop_counter ++)
                {
                 barrier();
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   barrier();
                  }
                }
              }
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (injectionSwitch.x > injectionSwitch.y))))))
              barrier();
            }
          }
         else
          {
          }
        }
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
      }
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             barrier();
            }
           else
            {
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), false || ((injectionSwitch.x < injectionSwitch.y))))))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
              barrier();
             barrier();
            }
           if(_GLF_DEAD(false))
            barrier();
           barrier();
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
             if(_GLF_DEAD(false))
              barrier();
            }
          }
         else
          {
          }
        }
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(vec3(1.1, 3890.1554, 271.952).r)), float(injectionSwitch.y), bool(true))))), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 & 1) & 1)); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0), _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)))) > _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(2.8)), bool(false)))))))
        barrier();
      }
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, false || _GLF_IDENTITY((true), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) < injectionSwitch.y)) && ((true))))))
        {
         barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
        }
       else
        {
        }
       if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, false || (false)), false))))) || false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3))); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 << _GLF_IDENTITY(int(6), int(6)))); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    barrier();
   do
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(false))
    barrier();
  }
 uint workgroup_base = workgroup_size * workgroup_id;
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bool(_GLF_DEAD(false))), ! (! (bool(_GLF_IDENTITY(bool(_GLF_DEAD(false)), ! (_GLF_IDENTITY(! (bool(_GLF_DEAD(false))), bool(bvec3(! (bool(_GLF_DEAD(false))), false, false)))))))))), _GLF_IDENTITY((_GLF_DEAD(false)) || false, _GLF_IDENTITY(bool(bool((_GLF_DEAD(false)) || false)), ! (! (bool(bool((_GLF_DEAD(false)) || false))))))))
      {
       if(_GLF_DEAD(false))
        barrier();
       do
        {
         if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)))) < injectionSwitch.y), ((_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)))) < injectionSwitch.y)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, false, true, false)), true && (bool(bvec4(false, false, true, false)))))))
              barrier();
             barrier();
            }
           else
            {
            }
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(4356.9476)), float(injectionSwitch.x), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) > injectionSwitch.y))))
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
          {
           barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           barrier();
          }
         else
          {
          }
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(false))
          {
           do
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
                    barrier();
                   barrier();
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 if(_GLF_DEAD(false))
                  barrier();
                }
               else
                {
                }
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(false))
                barrier();
               barrier();
               if(_GLF_DEAD(false))
                barrier();
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 for(int _injected_loop_counter = _GLF_IDENTITY(_GLF_IDENTITY(1, ~ (~ (1))), (_GLF_IDENTITY(1, ~ (~ (1)))) | (0 | 0)); _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
                  {
                   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, max(_GLF_IDENTITY(_injected_loop_counter, max(_injected_loop_counter, _injected_loop_counter)), _injected_loop_counter)) > int(_GLF_ZERO(_GLF_IDENTITY(0.0, (true ? _GLF_IDENTITY(0.0, min(0.0, 0.0)) : _GLF_FUZZED(9308.5692))), injectionSwitch.x))); _injected_loop_counter --)
                    {
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                      }
                     else
                      {
                       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))
                        barrier();
                       if(_GLF_WRAPPED_IF_FALSE(false))
                        {
                        }
                       else
                        {
                         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                          {
                           if(_GLF_DEAD(false))
                            barrier();
                           barrier();
                          }
                         barrier();
                        }
                      }
                     if(_GLF_DEAD(false))
                      barrier();
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                     for(int _injected_loop_counter = 0; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1)) && true); _injected_loop_counter ++)
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        barrier();
                       if(_GLF_DEAD(false))
                        barrier();
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        barrier();
                      }
                    }
                  }
                }
               if(_GLF_DEAD(false))
                barrier();
              }
            }
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
           barrier();
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             do
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   barrier();
                  }
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 barrier();
                }
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 barrier();
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           else
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(2), int(2))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bvec3(false, false, true)))))
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                   else
                    {
                     barrier();
                    }
                  }
                }
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(false))
                barrier();
              }
             else
              {
               if(_GLF_DEAD(false))
                barrier();
              }
            }
           for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(1), int(1))); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, 0 | (1))); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               if(_GLF_DEAD(false))
                {
                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   barrier();
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                  }
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch)).x, max(_GLF_IDENTITY(injectionSwitch, mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch)).x, _GLF_IDENTITY(injectionSwitch, mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch)).x)) > injectionSwitch.y))))
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), (_GLF_IDENTITY(false, true && (false))) || false)))
                    barrier();
                   barrier();
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                  }
                 barrier();
                }
               if(_GLF_DEAD(false))
                barrier();
              }
             else
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 barrier();
                }
              }
             if(_GLF_DEAD(false))
              barrier();
            }
          }
        }
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         do
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
            }
           else
            {
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), true && (_GLF_IDENTITY(false, ! (! (false)))))))
              barrier();
             barrier();
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, 0.0 + (injectionSwitch.y))))))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec4(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, true, false))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               barrier();
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 do
                  {
                   barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) && true)));
                }
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 barrier();
                }
               if(_GLF_DEAD(false))
                barrier();
              }
             else
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], 1.0 * (injectionSwitch[1])))).x > injectionSwitch.y))))
                barrier();
               barrier();
              }
             if(_GLF_DEAD(false))
              barrier();
            }
           else
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           if(_GLF_DEAD(false))
            barrier();
          }
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       do
        {
         barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec4(false, true, true, true)))) && true)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y, ! (! (_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-613.426)), bool(false))) > injectionSwitch.y))))))), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y), ! (! ((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(false, ! (! (false))) || (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch))) - vec2(0.0, 0.0), mix(vec2(_GLF_FUZZED(-259.621), ((_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch))) - vec2(0.0, 0.0))[1]), vec2(((_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch))) - vec2(0.0, 0.0))[0], _GLF_FUZZED(-5.4)), bvec2(true, false)))).x > injectionSwitch.y))))))))))), _GLF_IDENTITY(bool(bvec4(bool(bool(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(-98.79)), vec2(_GLF_FUZZED(3.7), (injectionSwitch)[1]), bvec2(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))).x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))) * 1.0)))))))))))), false, true, false)), (_GLF_IDENTITY(bool(bvec4(bool(bool(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y), ! (! ((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), bool(bool(! (injectionSwitch.x > injectionSwitch.y)))))), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(uintBitsToFloat(workgroup_id)) : injectionSwitch.x)) > injectionSwitch.y, ! (_GLF_IDENTITY(_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), bool(bool(! (injectionSwitch.x > injectionSwitch.y)))), false || (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(bool(! (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).x) / _GLF_IDENTITY(dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 1.0, abs(0.0), 0.0)), dot(_GLF_IDENTITY(vec4(0.0, 1.0, 0.0, 0.0), mix(vec4((vec4(0.0, 1.0, 0.0, 0.0))[0], (vec4(0.0, 1.0, 0.0, 0.0))[1], _GLF_IDENTITY((vec4(0.0, 1.0, 0.0, 0.0))[2], (true ? (vec4(0.0, 1.0, 0.0, 0.0))[2] : _GLF_FUZZED(1.7))), _GLF_FUZZED((681.836 / -8.4))), vec4(_GLF_FUZZED(8135.7185), _GLF_FUZZED(3807.8336), _GLF_FUZZED(-438.082), (vec4(0.0, 1.0, 0.0, 0.0))[3]), bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true))), vec4(0.0, 1.0, abs(0.0), 0.0)))) > injectionSwitch.y))), ! (! (_GLF_IDENTITY(bool(bool(! (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).x) / _GLF_IDENTITY(dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 1.0, abs(0.0), 0.0)), dot(_GLF_IDENTITY(vec4(0.0, 1.0, 0.0, 0.0), mix(vec4((vec4(0.0, 1.0, 0.0, 0.0))[0], (vec4(0.0, 1.0, 0.0, 0.0))[1], _GLF_IDENTITY((vec4(0.0, 1.0, 0.0, 0.0))[2], (true ? (vec4(0.0, 1.0, 0.0, 0.0))[2] : _GLF_FUZZED(1.7))), _GLF_FUZZED((681.836 / -8.4))), vec4(_GLF_FUZZED(8135.7185), _GLF_FUZZED(3807.8336), _GLF_FUZZED(-438.082), (vec4(0.0, 1.0, 0.0, 0.0))[3]), bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true))), vec4(0.0, 1.0, abs(0.0), 0.0)))) > injectionSwitch.y))), false || (bool(bool(! (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).x) / _GLF_IDENTITY(dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 1.0, abs(0.0), 0.0)), dot(_GLF_IDENTITY(vec4(0.0, 1.0, 0.0, 0.0), mix(vec4((vec4(0.0, 1.0, 0.0, 0.0))[0], (vec4(0.0, 1.0, 0.0, 0.0))[1], _GLF_IDENTITY((vec4(0.0, 1.0, 0.0, 0.0))[2], (true ? (vec4(0.0, 1.0, 0.0, 0.0))[2] : _GLF_FUZZED(1.7))), _GLF_FUZZED((681.836 / -8.4))), vec4(_GLF_FUZZED(8135.7185), _GLF_FUZZED(3807.8336), _GLF_FUZZED(-438.082), (vec4(0.0, 1.0, 0.0, 0.0))[3]), bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true))), vec4(0.0, 1.0, abs(0.0), 0.0)))) > injectionSwitch.y)))))))))))))) && true))))))), false, true, false)), false || (bool(bvec4(bool(bool(_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(dot(vec3(-12.99, 538.631, -78.52), vec3(-4.7, 3149.3827, 476.775))) : _GLF_IDENTITY(injectionSwitch.y, exp(0.0) * (injectionSwitch.y))))), ! (! ((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), bool(bool(! (injectionSwitch.x > injectionSwitch.y)))))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(uintBitsToFloat(workgroup_id)) : injectionSwitch.x)) > injectionSwitch.y, ! (_GLF_IDENTITY(_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), bool(bool(! (injectionSwitch.x > injectionSwitch.y)))), false || (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), bool(bool(! (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / _GLF_IDENTITY(dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 1.0, abs(0.0), 0.0)), dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 1.0, abs(0.0), 0.0)))) > injectionSwitch.y))))))))) && true))))))), false, true, _GLF_IDENTITY(false, bool(bvec2(false, false)))))))) || false)))), _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) || (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ((injectionSwitch.x < injectionSwitch.y)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))) ? injectionSwitch.x : _GLF_FUZZED(-864.119))) > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * cos(0.0)), (true ? _GLF_IDENTITY(injectionSwitch.y, float(mat2(_GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-410.231)), float(injectionSwitch.y), bool(true))), injectionSwitch.y)), 0.0, determinant(mat3(0.0, 1.0, log(1.0), 0.0, 0.0, 1.0, 0.0, 0.0, 0.0)), _GLF_IDENTITY(0.0, min(0.0, 0.0))))) : _GLF_FUZZED(-87.85)))))))))
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
        {
         for(int _injected_loop_counter = (_GLF_IDENTITY((0 << _GLF_IDENTITY(int(4), int(_GLF_IDENTITY(4, (4) ^ 0)))), clamp(_GLF_IDENTITY((0 << _GLF_IDENTITY(int(4), int(_GLF_IDENTITY(4, (4) ^ 0)))), ~ (~ ((0 << _GLF_IDENTITY(int(4), int(_GLF_IDENTITY(4, (4) ^ 0))))))), _GLF_IDENTITY((0 << _GLF_IDENTITY(int(4), int(_GLF_IDENTITY(4, (4) ^ 0)))), (false ? _GLF_FUZZED(-10431) : (0 << _GLF_IDENTITY(int(4), int(_GLF_IDENTITY(_GLF_IDENTITY(4, max(4, 4)), (4) ^ 0)))))), (0 << _GLF_IDENTITY(int(4), int(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(4, int(ivec2(_GLF_IDENTITY(4, (4) << 0), 0))), (4) ^ 0), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(4, (4) ^ 0), max(_GLF_IDENTITY(_GLF_IDENTITY(4, (_GLF_IDENTITY(4, (4) / 1)) >> 0), (4) ^ 0), _GLF_IDENTITY(4, (4) ^ 0))))))))))) << _GLF_IDENTITY(int(6), int(6))); _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(1, (false ? _GLF_FUZZED(_GLF_IDENTITY(-93848, (-93848) - 0)) : 1))); _injected_loop_counter ++)
          {
           barrier();
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             barrier();
            }
           if(_GLF_DEAD(false))
            barrier();
          }
         barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
      barrier();
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) && true)))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, true && (true))), ! (! (_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, true && (true))))))))))))
        {
         barrier();
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
      }
    }
   else
    {
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), min(_GLF_IDENTITY(int(1), int(1)), _GLF_IDENTITY(int(1), int(1)))))); _GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) | 0))
        {
         barrier();
        }
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))
        barrier();
       barrier();
      }
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(mod(vec2(-9963.6696, 41.18), 3.6)))).y), ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(mod(vec2(-9963.6696, 41.18), 3.6)))).y)) && true))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bvec4(injectionSwitch.x > injectionSwitch.y, false, false, false)), (bool(bvec4(injectionSwitch.x > injectionSwitch.y, false, false, false))) || false))))))
  barrier();
 uint virtual_gid = _GLF_IDENTITY(workgroup_base, ((1u << _GLF_IDENTITY(uint(_GLF_IDENTITY(6u, (6u) + 0u)), uint(6u))) >> _GLF_IDENTITY(uint(6u), uint(6u))) * (workgroup_base)) + _GLF_IDENTITY(subgroup_id * subgroup_size, (true ? _GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) - 0u) : _GLF_FUZZED((num_workgroup / subgroup_local_id)))) + subgroup_local_id;
 if(_GLF_DEAD(false))
  barrier();
 uint next_virtual_gid = _GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, max(workgroup_base + subgroup_id * subgroup_size, workgroup_base + subgroup_id * subgroup_size)) + (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(~ (subgroup_local_id), (_GLF_IDENTITY(~ (subgroup_local_id), (~ (subgroup_local_id)) ^ 0u)) ^ 0u), ~ (~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, ~ (~ (subgroup_local_id))), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, ~ (~ (subgroup_local_id))), uint(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(subgroup_local_id, ~ (~ (subgroup_local_id))), 0u), max(uvec2(_GLF_IDENTITY(subgroup_local_id, ~ (~ (subgroup_local_id))), 0u), uvec2(_GLF_IDENTITY(subgroup_local_id, ~ (~ (subgroup_local_id))), 0u)))))))))))), _GLF_IDENTITY(0u | (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(~ (subgroup_local_id), (~ (subgroup_local_id)) / uint(_GLF_ONE(1.0, injectionSwitch.y))), (_GLF_IDENTITY(~ (subgroup_local_id), (~ (subgroup_local_id)) ^ 0u)) ^ 0u), ~ (~ (~ (subgroup_local_id))))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(0u | (_GLF_IDENTITY(_GLF_IDENTITY(~ (subgroup_local_id), (_GLF_IDENTITY(~ (subgroup_local_id), (~ (subgroup_local_id)) ^ 0u)) ^ 0u), ~ (~ (~ (subgroup_local_id))))), uint(uvec3(0u | (_GLF_IDENTITY(_GLF_IDENTITY(~ (subgroup_local_id), (_GLF_IDENTITY(~ (subgroup_local_id), (~ (subgroup_local_id)) ^ 0u)) ^ 0u), ~ _GLF_IDENTITY((~ (~ (subgroup_local_id))), ~ (~ ((~ (~ (subgroup_local_id)))))))), 0u, (0u | 0u))))), clamp(~ (_GLF_IDENTITY(0u | (_GLF_IDENTITY(_GLF_IDENTITY(~ (subgroup_local_id), (_GLF_IDENTITY(~ (subgroup_local_id), (~ (subgroup_local_id)) ^ 0u)) ^ 0u), ~ (~ (~ (subgroup_local_id))))), uint(uvec3(0u | (_GLF_IDENTITY(_GLF_IDENTITY(~ (subgroup_local_id), (_GLF_IDENTITY(~ (subgroup_local_id), (~ (subgroup_local_id)) ^ 0u)) ^ 0u), ~ _GLF_IDENTITY((~ (~ (subgroup_local_id))), ((~ (~ (subgroup_local_id)))) | 0u))), 0u, (0u | 0u))))), ~ (_GLF_IDENTITY(0u | (_GLF_IDENTITY(_GLF_IDENTITY(~ (subgroup_local_id), (_GLF_IDENTITY(~ (subgroup_local_id), (~ (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) / uint(_GLF_ONE(1.0, injectionSwitch.y))))) ^ 0u)) ^ 0u), ~ (~ (~ (subgroup_local_id))))), uint(uvec3(0u | (_GLF_IDENTITY(_GLF_IDENTITY(~ (subgroup_local_id), (_GLF_IDENTITY(~ (subgroup_local_id), (~ (subgroup_local_id)) ^ 0u)) ^ 0u), ~ (~ (~ (subgroup_local_id))))), 0u, (0u | 0u))))), ~ (_GLF_IDENTITY(0u | (_GLF_IDENTITY(_GLF_IDENTITY(~ (subgroup_local_id), (_GLF_IDENTITY(~ (subgroup_local_id), (_GLF_IDENTITY(~ (subgroup_local_id), min(~ (subgroup_local_id), ~ (subgroup_local_id)))) ^ 0u)) ^ 0u), ~ (~ (~ (subgroup_local_id))))), uint(uvec3(0u | (_GLF_IDENTITY(_GLF_IDENTITY(~ (subgroup_local_id), (_GLF_IDENTITY(~ (subgroup_local_id), (~ (subgroup_local_id)) ^ 0u)) ^ 0u), ~ (~ (~ (subgroup_local_id))))), 0u, (_GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, (0u) | (0u))) << 0u) | 0u))))))))))), max(~ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(~ (subgroup_local_id), (_GLF_IDENTITY(~ (subgroup_local_id), (_GLF_IDENTITY(~ (subgroup_local_id), ~ _GLF_IDENTITY((~ (~ (subgroup_local_id))), ((~ (~ (subgroup_local_id)))) >> 0u))) ^ 0u)) ^ 0u), ~ (~ (~ (subgroup_local_id)))), _GLF_IDENTITY(0u | (_GLF_IDENTITY(_GLF_IDENTITY(~ (subgroup_local_id), (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_local_id, clamp(_GLF_IDENTITY(subgroup_local_id, (true ? subgroup_local_id : _GLF_FUZZED(workgroup_id))), subgroup_local_id, subgroup_local_id))), (~ (subgroup_local_id)) ^ 0u)) ^ 0u), ~ (~ (~ (subgroup_local_id))))), (0u | (_GLF_IDENTITY(_GLF_IDENTITY(~ (subgroup_local_id), (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_local_id, clamp(_GLF_IDENTITY(subgroup_local_id, (true ? subgroup_local_id : _GLF_FUZZED(workgroup_id))), subgroup_local_id, subgroup_local_id))), (~ (subgroup_local_id)) ^ 0u)) ^ 0u), ~ (~ (~ (subgroup_local_id)))))) << (0u | 0u)))), ~ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(~ (subgroup_local_id), (_GLF_IDENTITY(_GLF_IDENTITY(~ (subgroup_local_id), clamp(~ (subgroup_local_id), ~ (subgroup_local_id), _GLF_IDENTITY(~ _GLF_IDENTITY((subgroup_local_id), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(workgroup_size) : _GLF_IDENTITY((subgroup_local_id), min((subgroup_local_id), (subgroup_local_id))))), min(~ (subgroup_local_id), _GLF_IDENTITY(~ (subgroup_local_id), (~ (subgroup_local_id)) | 0u))))), (~ (subgroup_local_id)) ^ 0u)) ^ 0u), ~ (~ (~ (subgroup_local_id)))), 0u | (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(~ (subgroup_local_id), ~ (~ (_GLF_IDENTITY(~ (subgroup_local_id), uint(uvec3(~ (subgroup_local_id), 0u, 1u)))))), (_GLF_IDENTITY(_GLF_IDENTITY(~ (subgroup_local_id), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(~ (subgroup_local_id), min(~ (subgroup_local_id), ~ (subgroup_local_id)))), _GLF_IDENTITY(uint(uint(~ (_GLF_IDENTITY(~ (subgroup_local_id), min(~ (subgroup_local_id), ~ (subgroup_local_id)))))), (uint(uint(~ (_GLF_IDENTITY(~ (subgroup_local_id), min(~ (subgroup_local_id), ~ (subgroup_local_id))))))) | 0u)))), (~ (subgroup_local_id)) ^ 0u)) ^ 0u), _GLF_IDENTITY(~ (~ (~ (subgroup_local_id))), (_GLF_IDENTITY(~ (~ (~ (subgroup_local_id))), (~ (~ (~ (subgroup_local_id)))) + 0u)) | (0u >> _GLF_IDENTITY(uint(1u), uint(1u))))))))))) + 1, (_GLF_IDENTITY(subgroup_local_id, ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (subgroup_local_id), _GLF_IDENTITY((_GLF_IDENTITY(~ (subgroup_local_id), (~ (subgroup_local_id)) ^ 0u)) ^ 0u, ((_GLF_IDENTITY(_GLF_IDENTITY(~ (subgroup_local_id), _GLF_IDENTITY((~ (subgroup_local_id)), ~ (~ (_GLF_IDENTITY((~ (subgroup_local_id)), min(_GLF_IDENTITY((~ (subgroup_local_id)), ((~ (subgroup_local_id))) - 0u), (~ (subgroup_local_id))))))) >> 0u), (~ (subgroup_local_id)) ^ 0u)) ^ 0u) | ((_GLF_IDENTITY(~ (subgroup_local_id), (~ (subgroup_local_id)) ^ 0u)) ^ 0u))), ~ _GLF_IDENTITY((~ (~ (subgroup_local_id))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY((~ (~ _GLF_IDENTITY((subgroup_local_id), ~ (~ ((subgroup_local_id)))))), _GLF_IDENTITY(0u | ((~ (~ _GLF_IDENTITY((subgroup_local_id), ~ (~ ((subgroup_local_id))))))), (_GLF_IDENTITY(0u | ((~ (~ _GLF_IDENTITY((subgroup_local_id), ~ (~ ((subgroup_local_id))))))), max(0u | ((~ (~ _GLF_IDENTITY((subgroup_local_id), ~ (~ ((subgroup_local_id))))))), 0u | ((~ (~ _GLF_IDENTITY((subgroup_local_id), ~ (~ ((subgroup_local_id)))))))))) / 1u))), clamp(~ ((~ (~ (subgroup_local_id)))), ~ ((~ (~ (subgroup_local_id)))), ~ ((~ (~ (subgroup_local_id))))))))))) + 1) << 0u)), (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (subgroup_local_id), (_GLF_IDENTITY(~ (subgroup_local_id), _GLF_IDENTITY(_GLF_IDENTITY((~ _GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) << 0u)), uint(_GLF_IDENTITY(uint((subgroup_local_id)), 0u + (_GLF_IDENTITY(_GLF_IDENTITY(uint((subgroup_local_id)), (uint((subgroup_local_id))) - 0u), min(uint((subgroup_local_id)), uint((subgroup_local_id))))))))) ^ 0u, ~ (~ ((~ _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, min(_GLF_IDENTITY(subgroup_local_id, clamp(subgroup_local_id, subgroup_local_id, subgroup_local_id)), subgroup_local_id)), _GLF_IDENTITY((subgroup_local_id) << 0u, ((subgroup_local_id) << 0u) << 0u))), uint(_GLF_IDENTITY(uint((subgroup_local_id)), 0u + (_GLF_IDENTITY(_GLF_IDENTITY(uint((subgroup_local_id)), (uint((subgroup_local_id))) - 0u), min(uint((subgroup_local_id)), uint((subgroup_local_id))))))))) ^ 0u))), ((~ _GLF_IDENTITY((subgroup_local_id), uint(_GLF_IDENTITY(uint((subgroup_local_id)), 0u + (_GLF_IDENTITY(uint(_GLF_IDENTITY((subgroup_local_id), ((subgroup_local_id)) + 0u)), min(uint((subgroup_local_id)), _GLF_IDENTITY(uint((subgroup_local_id)), (false ? _GLF_FUZZED(130171u) : uint((subgroup_local_id))))))))))) ^ 0u) | ((~ _GLF_IDENTITY((subgroup_local_id), uint(_GLF_IDENTITY(uint((subgroup_local_id)), _GLF_IDENTITY(0u + (_GLF_IDENTITY(uint((subgroup_local_id)), min(uint((subgroup_local_id)), uint((subgroup_local_id))))), clamp(0u + (_GLF_IDENTITY(uint((subgroup_local_id)), min(uint((subgroup_local_id)), uint((subgroup_local_id))))), 0u + (_GLF_IDENTITY(uint((subgroup_local_id)), min(uint((subgroup_local_id)), uint((subgroup_local_id))))), _GLF_IDENTITY(0u + (_GLF_IDENTITY(uint((subgroup_local_id)), min(uint((subgroup_local_id)), uint((subgroup_local_id))))), (0u + (_GLF_IDENTITY(uint((subgroup_local_id)), min(uint((subgroup_local_id)), uint((subgroup_local_id)))))) / 1u))))))) ^ 0u)))) ^ 0u), ~ _GLF_IDENTITY((~ _GLF_IDENTITY((~ (subgroup_local_id)), 0u + ((~ (subgroup_local_id))))), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false))) ? _GLF_FUZZED(virtual_gid) : (~ _GLF_IDENTITY((~ (subgroup_local_id)), 0u + ((_GLF_IDENTITY(~ (subgroup_local_id), ~ (~ (~ (subgroup_local_id))))))))))))) + 1), ((_GLF_IDENTITY(subgroup_local_id, ~ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(~ (subgroup_local_id), (_GLF_IDENTITY(~ (subgroup_local_id), (~ (subgroup_local_id)) ^ 0u)) ^ 0u), ~ (~ (~ (subgroup_local_id)))), 0u ^ (_GLF_IDENTITY(_GLF_IDENTITY(~ (subgroup_local_id), (_GLF_IDENTITY(_GLF_IDENTITY(~ (subgroup_local_id), (~ (subgroup_local_id)) ^ 0u), (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) >> uint(_GLF_ZERO(0.0, injectionSwitch.x)))), (~ _GLF_IDENTITY((subgroup_local_id), (91672u & 0u) ^ ((subgroup_local_id)))) ^ 0u)) * 1u)) ^ 0u), ~ (~ (~ (subgroup_local_id)))))))) + 1)) - 0u)) - 0u), max(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | (subgroup_local_id)), _GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(~ (subgroup_local_id), (_GLF_IDENTITY(~ (subgroup_local_id), (~ (subgroup_local_id)) ^ 0u)) ^ 0u), ~ (~ (~ (subgroup_local_id)))), 0u | (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(~ (subgroup_local_id), (_GLF_IDENTITY(~ (subgroup_local_id), (_GLF_IDENTITY(~ (subgroup_local_id), max(~ (subgroup_local_id), ~ (subgroup_local_id)))) ^ 0u)) ^ 0u), _GLF_IDENTITY(max(_GLF_IDENTITY(_GLF_IDENTITY(~ (subgroup_local_id), (_GLF_IDENTITY(~ (subgroup_local_id), (~ (subgroup_local_id)) ^ 0u)) ^ 0u), min(_GLF_IDENTITY(~ (subgroup_local_id), (_GLF_IDENTITY(~ (subgroup_local_id), (~ (subgroup_local_id)) ^ 0u)) ^ 0u), _GLF_IDENTITY(~ (subgroup_local_id), (_GLF_IDENTITY(~ (subgroup_local_id), (~ (subgroup_local_id)) ^ 0u)) ^ 0u))), _GLF_IDENTITY(~ (subgroup_local_id), (_GLF_IDENTITY(~ (subgroup_local_id), (~ (subgroup_local_id)) ^ 0u)) ^ 0u)), 1u * (max(_GLF_IDENTITY(_GLF_IDENTITY(~ (subgroup_local_id), (_GLF_IDENTITY(~ (subgroup_local_id), (~ (subgroup_local_id)) ^ 0u)) ^ 0u), min(_GLF_IDENTITY(~ (subgroup_local_id), (_GLF_IDENTITY(~ (subgroup_local_id), (~ (subgroup_local_id)) ^ 0u)) ^ 0u), _GLF_IDENTITY(~ (subgroup_local_id), (_GLF_IDENTITY(~ (subgroup_local_id), (~ (subgroup_local_id)) ^ 0u)) ^ 0u))), _GLF_IDENTITY(~ (subgroup_local_id), (_GLF_IDENTITY(~ (subgroup_local_id), (~ (subgroup_local_id)) ^ 0u)) ^ 0u))))), ~ (~ (~ (subgroup_local_id))))))), max(_GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(~ (subgroup_local_id), (_GLF_IDENTITY(~ (subgroup_local_id), (~ (subgroup_local_id)) ^ 0u)) ^ 0u), ~ (~ (~ (subgroup_local_id)))), 0u | (_GLF_IDENTITY(_GLF_IDENTITY(~ (subgroup_local_id), (_GLF_IDENTITY(~ (subgroup_local_id), (~ _GLF_IDENTITY((subgroup_local_id), ~ (~ ((subgroup_local_id))))) ^ 0u)) ^ 0u), ~ (~ _GLF_IDENTITY((~ (subgroup_local_id)), clamp((~ (subgroup_local_id)), (~ (subgroup_local_id)), (~ (subgroup_local_id))))))))), clamp(~ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(~ (subgroup_local_id), (_GLF_IDENTITY(~ (subgroup_local_id), (~ (subgroup_local_id)) ^ 0u)) ^ 0u), ~ (~ (~ (subgroup_local_id)))), 0u | (_GLF_IDENTITY(_GLF_IDENTITY(~ (subgroup_local_id), (_GLF_IDENTITY(~ (subgroup_local_id), (~ _GLF_IDENTITY((subgroup_local_id), ~ (~ ((subgroup_local_id))))) ^ 0u)) ^ 0u), ~ (~ _GLF_IDENTITY((~ (subgroup_local_id)), clamp((~ (subgroup_local_id)), (~ (subgroup_local_id)), (~ (subgroup_local_id))))))))), ~ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(~ (subgroup_local_id), (_GLF_IDENTITY(~ (subgroup_local_id), (~ (subgroup_local_id)) ^ 0u)) ^ 0u), ~ (~ (~ (subgroup_local_id)))), 0u | (_GLF_IDENTITY(_GLF_IDENTITY(~ (subgroup_local_id), (_GLF_IDENTITY(~ (subgroup_local_id), (~ _GLF_IDENTITY((subgroup_local_id), ~ (~ ((subgroup_local_id))))) ^ 0u)) ^ 0u), ~ (~ _GLF_IDENTITY((~ (subgroup_local_id)), clamp((~ (subgroup_local_id)), (~ (subgroup_local_id)), (~ (subgroup_local_id))))))))), _GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(~ (subgroup_local_id), (_GLF_IDENTITY(~ (subgroup_local_id), (~ (subgroup_local_id)) ^ 0u)) ^ 0u), ~ (~ (~ (subgroup_local_id)))), 0u | (_GLF_IDENTITY(_GLF_IDENTITY(~ (subgroup_local_id), (_GLF_IDENTITY(~ (subgroup_local_id), (~ _GLF_IDENTITY((subgroup_local_id), ~ (~ ((subgroup_local_id))))) ^ 0u)) ^ 0u), ~ (~ _GLF_IDENTITY((~ (subgroup_local_id)), clamp((~ (subgroup_local_id)), (~ (subgroup_local_id)), (~ (subgroup_local_id))))))))), max(~ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(~ (subgroup_local_id), (_GLF_IDENTITY(~ (subgroup_local_id), (~ (subgroup_local_id)) ^ 0u)) ^ 0u), ~ (~ (~ (subgroup_local_id)))), 0u | (_GLF_IDENTITY(_GLF_IDENTITY(~ (subgroup_local_id), (_GLF_IDENTITY(~ (subgroup_local_id), (~ _GLF_IDENTITY((subgroup_local_id), ~ (~ ((subgroup_local_id))))) ^ 0u)) ^ 0u), ~ (~ _GLF_IDENTITY((~ (subgroup_local_id)), clamp((~ (subgroup_local_id)), (~ (subgroup_local_id)), (~ (subgroup_local_id))))))))), ~ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(~ (subgroup_local_id), (_GLF_IDENTITY(~ (subgroup_local_id), (~ (subgroup_local_id)) ^ 0u)) ^ 0u), ~ (~ (~ (subgroup_local_id)))), 0u | (_GLF_IDENTITY(_GLF_IDENTITY(~ (subgroup_local_id), (_GLF_IDENTITY(~ (subgroup_local_id), (~ _GLF_IDENTITY((subgroup_local_id), ~ (~ ((subgroup_local_id))))) ^ 0u)) ^ 0u), ~ (~ _GLF_IDENTITY((~ (subgroup_local_id)), clamp((~ (subgroup_local_id)), (~ (subgroup_local_id)), (~ (subgroup_local_id))))))))))))), ~ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(~ (subgroup_local_id), (~ (subgroup_local_id)) | (~ (subgroup_local_id))), (_GLF_IDENTITY(~ _GLF_IDENTITY((subgroup_local_id), max((subgroup_local_id), _GLF_IDENTITY((subgroup_local_id), (false ? _GLF_FUZZED((true ? uvec2(22886u, 15188u)[1] : workgroup_id)) : (subgroup_local_id))))), (~ (subgroup_local_id)) ^ 0u)) ^ 0u), ~ (~ (~ _GLF_IDENTITY((subgroup_local_id), clamp((subgroup_local_id), (subgroup_local_id), (subgroup_local_id)))))), 0u | (_GLF_IDENTITY(_GLF_IDENTITY(~ (subgroup_local_id), _GLF_IDENTITY((_GLF_IDENTITY(~ (subgroup_local_id), (~ (subgroup_local_id)) ^ _GLF_IDENTITY(0u, 0u ^ (0u)))), 0u + ((_GLF_IDENTITY(~ (subgroup_local_id), (~ (subgroup_local_id)) ^ _GLF_IDENTITY(0u, 0u ^ (0u)))))) ^ 0u), ~ (~ (~ (subgroup_local_id)))))))))) + 1, (_GLF_IDENTITY(subgroup_local_id, ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (subgroup_local_id), _GLF_IDENTITY((_GLF_IDENTITY(~ (subgroup_local_id), (~ _GLF_IDENTITY((subgroup_local_id), ((subgroup_local_id)) | 0u)) ^ 0u)) ^ 0u, _GLF_IDENTITY(((_GLF_IDENTITY(~ (subgroup_local_id), (~ (subgroup_local_id)) ^ 0u)) ^ 0u) | (_GLF_IDENTITY((_GLF_IDENTITY(~ (subgroup_local_id), (~ (subgroup_local_id)) ^ 0u)), ~ (~ ((_GLF_IDENTITY(~ (subgroup_local_id), (~ (subgroup_local_id)) ^ 0u))))) ^ 0u), (_GLF_IDENTITY(((_GLF_IDENTITY(~ (subgroup_local_id), (~ (subgroup_local_id)) ^ 0u)) ^ 0u) | (_GLF_IDENTITY((_GLF_IDENTITY(~ (subgroup_local_id), (~ (subgroup_local_id)) ^ 0u)), ~ (~ ((_GLF_IDENTITY(~ (subgroup_local_id), (~ (subgroup_local_id)) ^ 0u))))) ^ 0u), uint(_GLF_IDENTITY(uvec2(((_GLF_IDENTITY(~ (subgroup_local_id), (~ (subgroup_local_id)) ^ 0u)) ^ 0u) | (_GLF_IDENTITY((_GLF_IDENTITY(~ (subgroup_local_id), (~ (subgroup_local_id)) ^ 0u)), ~ (~ ((_GLF_IDENTITY(~ (subgroup_local_id), (~ (subgroup_local_id)) ^ 0u))))) ^ 0u), 0u), (uvec2(((_GLF_IDENTITY(~ (subgroup_local_id), (~ (subgroup_local_id)) ^ 0u)) ^ 0u) | (_GLF_IDENTITY((_GLF_IDENTITY(~ (subgroup_local_id), (~ (subgroup_local_id)) ^ 0u)), ~ (~ ((_GLF_IDENTITY(~ (subgroup_local_id), (~ (subgroup_local_id)) ^ 0u))))) ^ 0u), 0u)) * uvec2(1u, 1u))))) >> (0u << _GLF_IDENTITY(uint(7u), uint(7u)))))), ~ _GLF_IDENTITY((~ (~ (subgroup_local_id))), ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ ((~ (~ (subgroup_local_id)))), clamp(~ ((~ (~ (subgroup_local_id)))), ~ ((~ _GLF_IDENTITY((~ (subgroup_local_id)), (false ? _GLF_FUZZED(6193u) : (~ (subgroup_local_id)))))), ~ ((~ (~ (subgroup_local_id)))))), clamp(_GLF_IDENTITY(~ ((~ (~ (subgroup_local_id)))), clamp(~ ((~ (~ (subgroup_local_id)))), ~ ((~ (~ (subgroup_local_id)))), ~ ((~ (~ (subgroup_local_id)))))), _GLF_IDENTITY(~ ((~ (~ (subgroup_local_id)))), clamp(~ _GLF_IDENTITY(((~ (~ (subgroup_local_id)))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(((~ (~ (subgroup_local_id)))), min(_GLF_IDENTITY(((~ (~ (subgroup_local_id)))), 1u * (((~ (~ (subgroup_local_id)))))), _GLF_IDENTITY(((~ (~ (subgroup_local_id)))), (((~ (~ (subgroup_local_id))))) | (((~ (~ (subgroup_local_id))))))))), (~ (_GLF_IDENTITY(((~ (~ (subgroup_local_id)))), min(_GLF_IDENTITY(((~ (~ (subgroup_local_id)))), 1u * (((~ (~ (subgroup_local_id)))))), _GLF_IDENTITY(((~ (~ (subgroup_local_id)))), (((~ (~ (subgroup_local_id))))) | (((~ (~ (subgroup_local_id)))))))))) - 0u))), ~ ((~ (~ (subgroup_local_id)))), ~ ((~ (~ (subgroup_local_id)))))), _GLF_IDENTITY(_GLF_IDENTITY(~ ((~ (~ (subgroup_local_id)))), clamp(~ ((~ (~ (subgroup_local_id)))), ~ ((~ (~ (subgroup_local_id)))), ~ ((~ (~ (subgroup_local_id)))))), clamp(_GLF_IDENTITY(~ ((~ (~ (subgroup_local_id)))), clamp(~ ((~ (~ (subgroup_local_id)))), ~ ((~ (~ (subgroup_local_id)))), ~ ((~ (~ (subgroup_local_id)))))), _GLF_IDENTITY(~ (_GLF_IDENTITY((~ (~ (subgroup_local_id))), uint(uvec4(_GLF_IDENTITY((~ (~ (subgroup_local_id))), (_GLF_IDENTITY((~ (~ (subgroup_local_id))), ((~ (~ (subgroup_local_id)))) / 1u)) | ((~ (~ (subgroup_local_id))))), 1u, 1u, 1u)))), clamp(~ ((~ (~ (subgroup_local_id)))), ~ ((~ (~ (subgroup_local_id)))), ~ ((~ (~ (subgroup_local_id)))))), _GLF_IDENTITY(~ ((~ (~ (subgroup_local_id)))), clamp(~ ((~ (~ (subgroup_local_id)))), ~ ((~ (~ (subgroup_local_id)))), ~ ((~ (~ (subgroup_local_id))))))))))))))) + 1) << 0u)), (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (subgroup_local_id), (_GLF_IDENTITY(~ (subgroup_local_id), _GLF_IDENTITY((~ _GLF_IDENTITY((subgroup_local_id), uint(_GLF_IDENTITY(uint((subgroup_local_id)), 0u + (_GLF_IDENTITY(uint((subgroup_local_id)), min(uint((subgroup_local_id)), uint((subgroup_local_id))))))))) ^ 0u, _GLF_IDENTITY(((~ _GLF_IDENTITY((subgroup_local_id), uint(_GLF_IDENTITY(uint((subgroup_local_id)), 0u + (_GLF_IDENTITY(uint((subgroup_local_id)), min(uint((subgroup_local_id)), uint((subgroup_local_id))))))))) ^ 0u) | ((~ _GLF_IDENTITY((subgroup_local_id), uint(_GLF_IDENTITY(uint((subgroup_local_id)), 0u + (_GLF_IDENTITY(uint((subgroup_local_id)), min(uint((subgroup_local_id)), uint((subgroup_local_id))))))))) ^ 0u), (((~ _GLF_IDENTITY((subgroup_local_id), uint(_GLF_IDENTITY(uint((subgroup_local_id)), 0u + (_GLF_IDENTITY(_GLF_IDENTITY(uint((subgroup_local_id)), min(uint((subgroup_local_id)), uint((subgroup_local_id)))), min(_GLF_IDENTITY(_GLF_IDENTITY(uint((subgroup_local_id)), min(uint((subgroup_local_id)), uint((subgroup_local_id)))), (_GLF_IDENTITY(uint((subgroup_local_id)), min(uint((subgroup_local_id)), uint((subgroup_local_id))))) * 1u), _GLF_IDENTITY(_GLF_IDENTITY(uint((subgroup_local_id)), min(uint((subgroup_local_id)), uint((subgroup_local_id)))), (_GLF_IDENTITY(uint((subgroup_local_id)), min(uint((subgroup_local_id)), uint((subgroup_local_id))))) - 0u)))))))) ^ 0u) | ((~ _GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id), uint(_GLF_IDENTITY(uint((subgroup_local_id)), 0u + (_GLF_IDENTITY(uint((subgroup_local_id)), min(uint((subgroup_local_id)), uint((subgroup_local_id)))))))), (_GLF_IDENTITY((subgroup_local_id), uint(_GLF_IDENTITY(uint((subgroup_local_id)), 0u + (_GLF_IDENTITY(uint((_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) << 0u))), min(uint((subgroup_local_id)), uint((subgroup_local_id))))))))) - 0u)) ^ 0u)) * 1u)))) ^ 0u), ~ _GLF_IDENTITY((~ _GLF_IDENTITY((~ (subgroup_local_id)), 0u + ((~ (subgroup_local_id))))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(virtual_gid) : (~ _GLF_IDENTITY((~ (_GLF_IDENTITY(subgroup_local_id, 0u + (subgroup_local_id)))), 0u + ((~ (subgroup_local_id)))))))))) + 1), ((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, ~ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(~ (subgroup_local_id), (_GLF_IDENTITY(~ (subgroup_local_id), (~ (subgroup_local_id)) ^ 0u)) ^ 0u), ~ (~ (~ (subgroup_local_id)))), 0u ^ (_GLF_IDENTITY(_GLF_IDENTITY(~ (subgroup_local_id), (_GLF_IDENTITY(~ (subgroup_local_id), (~ (subgroup_local_id)) ^ 0u)) ^ 0u), ~ (_GLF_IDENTITY(~ (~ (subgroup_local_id)), (~ (~ (subgroup_local_id))) + 0u))))))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_local_id, ~ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(~ (subgroup_local_id), (_GLF_IDENTITY(~ (subgroup_local_id), (~ (subgroup_local_id)) ^ 0u)) ^ 0u), ~ (~ (~ (subgroup_local_id)))), 0u ^ (_GLF_IDENTITY(_GLF_IDENTITY(~ (subgroup_local_id), (_GLF_IDENTITY(~ (subgroup_local_id), (~ (subgroup_local_id)) ^ 0u)) ^ 0u), ~ _GLF_IDENTITY((~ (~ (subgroup_local_id))), clamp(_GLF_IDENTITY((~ (~ (subgroup_local_id))), max((~ (~ (subgroup_local_id))), (~ (~ (subgroup_local_id))))), (~ (~ (subgroup_local_id))), _GLF_IDENTITY((~ (~ (subgroup_local_id))), (_GLF_IDENTITY((~ (~ (subgroup_local_id))), min((~ (~ (subgroup_local_id))), (~ (~ (subgroup_local_id)))))) - 0u))))))))), (~ (_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(~ (subgroup_local_id), (_GLF_IDENTITY(~ (subgroup_local_id), (_GLF_IDENTITY(~ (subgroup_local_id), (_GLF_IDENTITY(~ (subgroup_local_id), 0u ^ (~ (subgroup_local_id)))) / (1u & 1u))) ^ 0u)) ^ 0u), ~ (~ (~ (subgroup_local_id)))), 0u ^ (_GLF_IDENTITY(_GLF_IDENTITY(~ (subgroup_local_id), (_GLF_IDENTITY(~ (subgroup_local_id), (~ (subgroup_local_id)) ^ 0u)) ^ 0u), ~ _GLF_IDENTITY((~ (~ (subgroup_local_id))), min((~ (~ (subgroup_local_id))), (~ (~ (subgroup_local_id))))))))), 0u ^ (_GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(~ (subgroup_local_id), (_GLF_IDENTITY(~ (subgroup_local_id), (_GLF_IDENTITY(~ (subgroup_local_id), (_GLF_IDENTITY(~ (subgroup_local_id), 0u ^ (~ (subgroup_local_id)))) / (1u & 1u))) ^ 0u)) ^ 0u), ~ (~ (~ (subgroup_local_id)))), 0u ^ (_GLF_IDENTITY(_GLF_IDENTITY(~ (subgroup_local_id), (_GLF_IDENTITY(~ (subgroup_local_id), (~ (subgroup_local_id)) ^ 0u)) ^ 0u), ~ _GLF_IDENTITY((~ (~ (subgroup_local_id))), min((~ (~ (subgroup_local_id))), (~ (~ (subgroup_local_id))))))))), (~ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(~ (subgroup_local_id), (_GLF_IDENTITY(~ (subgroup_local_id), (_GLF_IDENTITY(~ (subgroup_local_id), (_GLF_IDENTITY(~ (subgroup_local_id), 0u ^ (~ (subgroup_local_id)))) / (1u & 1u))) ^ 0u)) ^ 0u), ~ (~ (~ (subgroup_local_id)))), 0u ^ (_GLF_IDENTITY(_GLF_IDENTITY(~ (subgroup_local_id), (_GLF_IDENTITY(~ (subgroup_local_id), (~ (subgroup_local_id)) ^ 0u)) ^ 0u), ~ _GLF_IDENTITY((~ (~ (subgroup_local_id))), min((~ (~ (subgroup_local_id))), (~ (~ (subgroup_local_id)))))))))) / ((1u << _GLF_IDENTITY(uint(3u), uint(3u))) >> _GLF_IDENTITY(uint(3u), uint(3u))))))))) * 1u))) + 1)) - 0u)) - 0u), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(_GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(~ (subgroup_local_id), (_GLF_IDENTITY(~ (subgroup_local_id), (~ (subgroup_local_id)) ^ 0u)) ^ 0u), ~ (~ (~ (subgroup_local_id)))), 0u | (_GLF_IDENTITY(_GLF_IDENTITY(~ (subgroup_local_id), (_GLF_IDENTITY(~ (subgroup_local_id), (~ (_GLF_IDENTITY(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)) | (subgroup_local_id)))) ^ 0u)) ^ 0u), ~ (~ (~ (subgroup_local_id))))))), max(~ _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(~ (subgroup_local_id), (_GLF_IDENTITY(~ (subgroup_local_id), (~ (subgroup_local_id)) ^ 0u)) ^ 0u), ~ (~ (~ (subgroup_local_id)))), 0u | (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(~ (subgroup_local_id), clamp(~ (subgroup_local_id), _GLF_IDENTITY(~ (subgroup_local_id), (~ (subgroup_local_id)) | (~ (subgroup_local_id))), ~ (subgroup_local_id))), (_GLF_IDENTITY(~ (subgroup_local_id), (~ (subgroup_local_id)) ^ 0u)) ^ 0u), ~ (~ (~ (subgroup_local_id))))))), ~ (~ ((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(~ (subgroup_local_id), (_GLF_IDENTITY(~ (subgroup_local_id), (~ (subgroup_local_id)) ^ 0u)) ^ 0u), ~ (~ (~ (subgroup_local_id)))), 0u | (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(~ (subgroup_local_id), clamp(~ (subgroup_local_id), _GLF_IDENTITY(~ (subgroup_local_id), (~ (subgroup_local_id)) | (~ (subgroup_local_id))), ~ (subgroup_local_id))), (_GLF_IDENTITY(~ (subgroup_local_id), (~ (subgroup_local_id)) ^ 0u)) ^ 0u), ~ (~ (~ (subgroup_local_id)))))))))), ~ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(~ (subgroup_local_id), _GLF_IDENTITY((_GLF_IDENTITY(~ (subgroup_local_id), (~ (subgroup_local_id)) ^ 0u)), max((_GLF_IDENTITY(~ (subgroup_local_id), (~ (subgroup_local_id)) ^ 0u)), (_GLF_IDENTITY(~ (subgroup_local_id), (~ (subgroup_local_id)) ^ 0u)))) ^ 0u), ~ (~ (~ (subgroup_local_id)))), 0u | (_GLF_IDENTITY(_GLF_IDENTITY(~ (subgroup_local_id), (_GLF_IDENTITY(~ (subgroup_local_id), (~ (subgroup_local_id)) ^ 0u)) ^ 0u), ~ (~ (~ (subgroup_local_id))))))))), 0u | (_GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(~ (subgroup_local_id), (_GLF_IDENTITY(~ (subgroup_local_id), (~ (subgroup_local_id)) ^ 0u)) ^ 0u), ~ (~ (~ (subgroup_local_id)))), 0u | (_GLF_IDENTITY(_GLF_IDENTITY(~ (subgroup_local_id), (_GLF_IDENTITY(~ (subgroup_local_id), (~ (subgroup_local_id)) ^ 0u)) ^ 0u), ~ (~ (~ (subgroup_local_id))))))), max(~ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(~ (subgroup_local_id), (_GLF_IDENTITY(~ (subgroup_local_id), (~ (subgroup_local_id)) ^ 0u)) ^ 0u), ~ (~ (~ (subgroup_local_id)))), 0u | (_GLF_IDENTITY(_GLF_IDENTITY(~ (subgroup_local_id), (_GLF_IDENTITY(~ (subgroup_local_id), (~ (subgroup_local_id)) ^ 0u)) ^ 0u), ~ (~ (~ (subgroup_local_id))))))), ~ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(~ (subgroup_local_id), (_GLF_IDENTITY(~ (subgroup_local_id), (~ (subgroup_local_id)) ^ 0u)) ^ 0u), _GLF_IDENTITY(~ (~ (~ (subgroup_local_id))), min(_GLF_IDENTITY(~ (~ (~ (subgroup_local_id))), (~ (~ (~ (subgroup_local_id)))) ^ 0u), ~ (~ (~ (subgroup_local_id)))))), 0u | (_GLF_IDENTITY(_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, max(subgroup_local_id, subgroup_local_id))) / 1u)), (_GLF_IDENTITY(~ (subgroup_local_id), (~ (subgroup_local_id)) ^ 0u)) ^ 0u), ~ (~ (~ (subgroup_local_id)))))))))))) + 1, (_GLF_IDENTITY(subgroup_local_id, ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (subgroup_local_id), _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(~ (subgroup_local_id), (~ (subgroup_local_id)) ^ 0u), (_GLF_IDENTITY(~ (subgroup_local_id), (~ (subgroup_local_id)) ^ 0u)) | (1u ^ uint(_GLF_ONE(1.0, injectionSwitch.y))))) ^ 0u, (_GLF_IDENTITY((_GLF_IDENTITY(~ (subgroup_local_id), (~ (subgroup_local_id)) ^ 0u)) ^ 0u, max(_GLF_IDENTITY((_GLF_IDENTITY(~ (subgroup_local_id), (~ (subgroup_local_id)) ^ 0u)) ^ 0u, 1u * ((_GLF_IDENTITY(~ (subgroup_local_id), (~ (subgroup_local_id)) ^ 0u)) ^ 0u)), (_GLF_IDENTITY(~ (subgroup_local_id), (~ (subgroup_local_id)) ^ 0u)) ^ 0u))) | (_GLF_IDENTITY((_GLF_IDENTITY(~ (subgroup_local_id), (~ (subgroup_local_id)) ^ 0u)), (_GLF_IDENTITY((_GLF_IDENTITY(~ (subgroup_local_id), (~ (subgroup_local_id)) ^ 0u)), min((_GLF_IDENTITY(~ (subgroup_local_id), (~ (subgroup_local_id)) ^ 0u)), (_GLF_IDENTITY(~ (subgroup_local_id), (~ (subgroup_local_id)) ^ 0u))))) - 0u) ^ 0u)), (_GLF_IDENTITY((_GLF_IDENTITY(~ (subgroup_local_id), (~ (subgroup_local_id)) ^ 0u)) ^ 0u, ((_GLF_IDENTITY(~ (subgroup_local_id), (~ (subgroup_local_id)) ^ 0u)) ^ 0u) | ((_GLF_IDENTITY(~ (subgroup_local_id), (~ (subgroup_local_id)) ^ 0u)) ^ 0u))) | 0u)), ~ _GLF_IDENTITY((~ (~ (subgroup_local_id))), ~ (_GLF_IDENTITY(~ ((~ (~ (subgroup_local_id)))), clamp(~ ((~ (~ (subgroup_local_id)))), ~ ((~ (~ (subgroup_local_id)))), ~ ((~ (~ (subgroup_local_id))))))))))) + 1) << 0u)), (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (subgroup_local_id), (_GLF_IDENTITY(~ (subgroup_local_id), _GLF_IDENTITY((~ _GLF_IDENTITY((subgroup_local_id), uint(_GLF_IDENTITY(uint((subgroup_local_id)), _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, 0u + (0u))) >> (0u | 0u)) + (_GLF_IDENTITY(_GLF_IDENTITY(uint((subgroup_local_id)), clamp(_GLF_IDENTITY(uint((subgroup_local_id)), (uint((subgroup_local_id))) + 0u), uint((subgroup_local_id)), _GLF_IDENTITY(uint((subgroup_local_id)), (uint((subgroup_local_id))) << 0u))), min(uint((subgroup_local_id)), uint((subgroup_local_id))))))))) ^ 0u, ((~ _GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id), uint(_GLF_IDENTITY(uint((subgroup_local_id)), 0u + (_GLF_IDENTITY(uint((subgroup_local_id)), min(uint((subgroup_local_id)), uint((subgroup_local_id)))))))), clamp(_GLF_IDENTITY((subgroup_local_id), uint(_GLF_IDENTITY(uint((subgroup_local_id)), 0u + (_GLF_IDENTITY(uint((subgroup_local_id)), min(uint((subgroup_local_id)), uint((subgroup_local_id)))))))), _GLF_IDENTITY((subgroup_local_id), uint(_GLF_IDENTITY(uint((subgroup_local_id)), 0u + (_GLF_IDENTITY(uint((subgroup_local_id)), min(uint((subgroup_local_id)), uint((subgroup_local_id)))))))), _GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id), uint(_GLF_IDENTITY(uint((subgroup_local_id)), 0u + (_GLF_IDENTITY(uint((subgroup_local_id)), min(uint((subgroup_local_id)), uint((subgroup_local_id)))))))), clamp(_GLF_IDENTITY((subgroup_local_id), uint(_GLF_IDENTITY(uint((subgroup_local_id)), 0u + (_GLF_IDENTITY(uint((subgroup_local_id)), min(uint((subgroup_local_id)), uint((subgroup_local_id)))))))), _GLF_IDENTITY((subgroup_local_id), uint(_GLF_IDENTITY(uint((subgroup_local_id)), 0u + (_GLF_IDENTITY(uint((subgroup_local_id)), min(uint((subgroup_local_id)), uint((subgroup_local_id)))))))), _GLF_IDENTITY((subgroup_local_id), uint(_GLF_IDENTITY(uint((subgroup_local_id)), 0u + (_GLF_IDENTITY(uint((subgroup_local_id)), min(uint((subgroup_local_id)), uint((subgroup_local_id))))))))))))) ^ 0u) | ((~ _GLF_IDENTITY((subgroup_local_id), uint(_GLF_IDENTITY(uint(_GLF_IDENTITY((subgroup_local_id), 1u * ((subgroup_local_id)))), 0u + (_GLF_IDENTITY(uint((subgroup_local_id)), min(uint((subgroup_local_id)), uint((subgroup_local_id))))))))) ^ 0u)))) ^ 0u), ~ _GLF_IDENTITY((~ _GLF_IDENTITY((~ (subgroup_local_id)), _GLF_IDENTITY(0u + ((~ (subgroup_local_id))), ~ (~ (_GLF_IDENTITY(0u + ((~ (subgroup_local_id))), (0u + ((~ (subgroup_local_id)))) | (0u + ((~ (subgroup_local_id)))))))))), (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)))) ? _GLF_FUZZED(virtual_gid) : (~ _GLF_IDENTITY((~ (subgroup_local_id)), 0u + ((~ (subgroup_local_id)))))))))) + 1), ((_GLF_IDENTITY(subgroup_local_id, ~ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(~ (subgroup_local_id), (_GLF_IDENTITY(~ (subgroup_local_id), _GLF_IDENTITY((~ (subgroup_local_id)) ^ 0u, ((~ (subgroup_local_id)) ^ 0u) | ((~ (subgroup_local_id)) ^ 0u)))) ^ 0u), ~ (~ (~ (subgroup_local_id)))), 0u ^ (_GLF_IDENTITY(_GLF_IDENTITY(~ (subgroup_local_id), (_GLF_IDENTITY(~ (subgroup_local_id), (~ (subgroup_local_id)) ^ 0u)) ^ 0u), ~ _GLF_IDENTITY((~ (~ (subgroup_local_id))), clamp((~ (~ (subgroup_local_id))), (~ (~ (subgroup_local_id))), (~ (~ (subgroup_local_id)))))))))) + 1)) - 0u)) - 0u))) % subgroup_size);
 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) && true)))
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bool(true)))))
          {
           barrier();
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
          }
        }
       else
        {
        }
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     do
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bvec4(true, false, true, true)))))
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6)))); _injected_loop_counter ++)
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
            }
           else
            {
            }
           if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec2(_GLF_IDENTITY(! (false), (! (false)) || false), true))))), _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec2(! (false), true)))))), ! (! (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec2(! (false), true)))))), bool(bvec4(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec2(! (false), true)))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false)))))))), ! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! _GLF_IDENTITY((false), ((false)) || false), bool(bvec2(! (false), true)))))), _GLF_IDENTITY(bool(bool(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(_GLF_IDENTITY(! (false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (! (false))), bool(bvec2(! _GLF_IDENTITY((false), bool(bvec2((false), true))), true)))))))), (bool(bool(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec2(! (false), _GLF_IDENTITY(true, false || (true))))))))))) || false))))))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true))))
          barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(mat3x2(_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(2.3)), bool(false))), _GLF_ONE(1.0, injectionSwitch.y), 1.0, 1.0, 0.0, _GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(0.0, sin(0.0))), dot(vec2(1.0, 1.0), vec2(0.0, sin(0.0))))))) > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).x > injectionSwitch.y))))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
      }
    }
  }
 do
  {
   for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      barrier();
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec3(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y)), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))))), bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), true && (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), false, true, false)))) && true)))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             barrier();
            }
           else
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)))))
              barrier();
            }
          }
         do
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 | 1)); _injected_loop_counter ++)
              {
               if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bool(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec4((injectionSwitch.x > injectionSwitch.y), true, true, true)))) && true)))))))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 barrier();
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               barrier();
               if(_GLF_DEAD(false))
                barrier();
              }
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               barrier();
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
             if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), false || (! (true)))))))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               barrier();
              }
             else
              {
              }
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           if(_GLF_DEAD(false))
            {
             do
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 barrier();
                }
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   if(_GLF_DEAD(false))
                    barrier();
                   barrier();
                  }
                 if(_GLF_DEAD(false))
                  barrier();
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
             do
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 barrier();
                }
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), ! (! (_GLF_IDENTITY(false, true && (false)))))))
                  barrier();
                 barrier();
                 do
                  {
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (false)))))
                      {
                       if(_GLF_DEAD(false))
                        barrier();
                      }
                     else
                      {
                       barrier();
                      }
                    }
                   if(_GLF_DEAD(false))
                    barrier();
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                      {
                       do
                        {
                         barrier();
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          barrier();
                         if(_GLF_DEAD(false))
                          barrier();
                        }
                       while(_GLF_WRAPPED_LOOP(false));
                      }
                     else
                      {
                       if(_GLF_DEAD(false))
                        barrier();
                      }
                    }
                   if(_GLF_DEAD(false))
                    barrier();
                   if(_GLF_DEAD(false))
                    barrier();
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     barrier();
                    }
                   else
                    {
                    }
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                  }
                }
               else
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 if(_GLF_DEAD(false))
                  barrier();
                }
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 barrier();
                }
               if(_GLF_DEAD(false))
                barrier();
              }
             else
              {
               if(_GLF_DEAD(false))
                {
                 for(int _injected_loop_counter = (0 & -22587); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5)))); _injected_loop_counter ++)
                  {
                   barrier();
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                }
              }
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, false || (false))) && true)))
                barrier();
               barrier();
              }
            }
           if(_GLF_DEAD(false))
            barrier();
          }
         while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y)), true && _GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false))), bool(bool(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))));
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)) : _GLF_FUZZED(vec2(77.85, 570.970)))).x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               barrier();
              }
             barrier();
            }
           if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) && true)))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
              barrier();
            }
           else
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
              barrier();
             barrier();
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         do
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
            {
             barrier();
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(_GLF_IDENTITY(mat2x4(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), 1.0, _GLF_IDENTITY(sqrt(1.0), (false ? _GLF_FUZZED(-8635.9195) : sqrt(1.0))), 1.0, 0.0, 0.0, 0.0, exp(0.0)), mat2x4(mat3x4(mat2x4(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), 1.0, sqrt(1.0), 1.0, 0.0, 0.0, 0.0, exp(0.0)))))), (float(_GLF_IDENTITY(mat2x4(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), 1.0, _GLF_IDENTITY(sqrt(1.0), (false ? _GLF_FUZZED(-8635.9195) : sqrt(1.0))), 1.0, 0.0, 0.0, 0.0, exp(0.0)), mat2x4(mat3x4(mat2x4(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), 1.0, sqrt(1.0), 1.0, 0.0, 0.0, 0.0, exp(0.0))))))) - 0.0)) < injectionSwitch.y)), ! _GLF_IDENTITY((! (_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)))), mix(vec2(_GLF_FUZZED(-13.80), _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)))))[1], float(_GLF_IDENTITY(mat2x3((_GLF_IDENTITY(injectionSwitch, (false ? _GLF_IDENTITY(_GLF_FUZZED(injectionSwitch), (_GLF_FUZZED(injectionSwitch)) / vec2(1.0, 1.0)) : _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)))))[1], 1.0, 1.0, 0.0, sqrt(1.0), 1.0), (true ? mat2x3((_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)))))[1], 1.0, 1.0, 0.0, sqrt(1.0), 1.0) : _GLF_FUZZED(mat2x3(-2.7, -9.7, -1029.5636, 8.4, 7490.4822, 9.4))))))), vec2((_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)))))[0], _GLF_FUZZED(7162.9040)), bvec2(_GLF_IDENTITY(true, ! (! (true))), false))).y)))), false || ((! (_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)))).y)))))))), bool(bvec3(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).y)), ! _GLF_IDENTITY((! (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)))).y)), ! (! (_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)))).y))))))), false || ((! (_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat4(injectionSwitch, 1.0, 1.0, 1.0, 0.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(0.0, 1.0)), dot(vec2(1.0, 0.0), vec2(0.0, 1.0))), determinant(mat3(1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0)), 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, exp(0.0)), transpose(transpose(mat4(injectionSwitch, 1.0, 1.0, 1.0, 0.0, _GLF_IDENTITY(_GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(0.0, 1.0)), dot(vec2(1.0, 0.0), vec2(0.0, 1.0))), float(float(_GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(0.0, 1.0)), dot(vec2(1.0, 0.0), vec2(0.0, 1.0)))))), determinant(mat3(1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0)), 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, exp(0.0)))))))) : _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)))).y)))))))), true, true))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0) > injectionSwitch.y))))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       buf[virtual_gid] = 1;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
    }
   else
    {
    }
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, false || _GLF_IDENTITY((false), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3((false), false, false), _GLF_IDENTITY(_GLF_IDENTITY(bvec3(bvec3(bvec3((false), false, _GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec4(bvec2(false, false), false, false)))))))))), _GLF_IDENTITY(bvec3(bvec4(bvec3(bvec3(bvec3((false), false, _GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec4(bvec2(false, false), false, false)))))))))), false)), bvec3(bvec4(bvec3(bvec4(bvec3(bvec3(bvec3((false), false, _GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec4(bvec2(false, false), false, false)))))))))), false)), false)))), bvec3(bvec4(bvec3(bvec3(bvec3((false), false, false))), false))))), ! _GLF_IDENTITY((! (bool(_GLF_IDENTITY(bvec3((false), false, false), _GLF_IDENTITY(bvec3(bvec3(bvec3((false), false, false))), bvec3(bvec4(bvec3(bvec3(bvec3((false), false, false))), false))))))), ! (_GLF_IDENTITY(! ((! (bool(_GLF_IDENTITY(bvec3((false), false, false), _GLF_IDENTITY(bvec3(bvec3(bvec3((false), false, false))), bvec3(bvec4(bvec3(bvec3(bvec3((false), false, false))), false)))))))), (_GLF_IDENTITY(! ((! (bool(_GLF_IDENTITY(bvec3((false), false, false), _GLF_IDENTITY(bvec3(bvec3(bvec3((false), false, false))), bvec3(bvec4(bvec3(bvec3(bvec3((false), false, false))), false)))))))), (! ((! (bool(_GLF_IDENTITY(bvec3((false), false, false), _GLF_IDENTITY(bvec3(bvec3(bvec3((false), false, false))), bvec3(bvec4(bvec3(bvec3(bvec3((false), false, false))), false))))))))) && true)) || false)))))), false, true)))), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_IF_FALSE(false)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(! (_GLF_WRAPPED_IF_FALSE(false)), ! (! (_GLF_IDENTITY(! (_GLF_WRAPPED_IF_FALSE(false)), true && (! (_GLF_WRAPPED_IF_FALSE(false)))))))), true && (! (_GLF_IDENTITY(! (_GLF_WRAPPED_IF_FALSE(false)), ! (! (_GLF_IDENTITY(! (_GLF_WRAPPED_IF_FALSE(false)), true && (! (_GLF_WRAPPED_IF_FALSE(false))))))))))))))) || false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(_GLF_IDENTITY(bvec2(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true)), true), bvec2(bvec2(_GLF_IDENTITY(bvec2(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true)), true), bvec2(_GLF_IDENTITY(bvec3(bvec2(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true)), true), true), bvec3(bvec3(bvec3(bvec2(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true)), true), true)))))))))))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (true)))))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
        }
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_IDENTITY(_GLF_FUZZED(0.0), (_GLF_FUZZED(0.0)) * 1.0)), vec2(_GLF_FUZZED(-153.506), (injectionSwitch)[1]), bvec2(false, true))).x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         for(int _injected_loop_counter = _GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), 1 * (int(_GLF_ONE(1.0, injectionSwitch.y)))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
             for(int _injected_loop_counter = ((_GLF_IDENTITY(1, clamp(1, 1, _GLF_IDENTITY(1, (1) * 1))) << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(_GLF_IDENTITY(7, max(_GLF_IDENTITY(7, 0 | (7)), 7))))); _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY((_GLF_IDENTITY(0, max(0, _GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(_injected_loop_counter))))))) & (+ 97359)), max(_GLF_IDENTITY((_GLF_IDENTITY(0, max(0, _GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(_injected_loop_counter))))))) & (+ 97359)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY((_GLF_IDENTITY(0, max(0, _GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(_injected_loop_counter))))))) & (+ 97359)), clamp((_GLF_IDENTITY(0, max(0, _GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(_injected_loop_counter))))))) & (+ 97359)), (_GLF_IDENTITY(0, max(0, _GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(_injected_loop_counter))))))) & (+ 97359)), (_GLF_IDENTITY(0, max(0, _GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(_injected_loop_counter))))))) & (+ 97359)))) : _GLF_FUZZED(-60062))), (_GLF_IDENTITY(0, max(0, _GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(_injected_loop_counter))))))) & (+ 97359))))); _injected_loop_counter --)
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
              barrier();
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               barrier();
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(false))
                barrier();
              }
             else
              {
              }
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   barrier();
                  }
                 barrier();
                 if(_GLF_DEAD(false))
                  barrier();
                }
               if(_GLF_DEAD(false))
                barrier();
              }
             else
              {
              }
             if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
              {
               if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
                barrier();
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 barrier();
                }
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
             else
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 barrier();
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 barrier();
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if(_GLF_DEAD(false))
                barrier();
              }
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
            }
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               barrier();
              }
            }
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
         barrier();
         if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec2(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), ! (! (_GLF_IDENTITY(bool(bvec2(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), true && (bool(bvec2(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))))))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             for(int _injected_loop_counter = (1 & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > ((-76622 & 0) >> _GLF_IDENTITY(int(8), _GLF_IDENTITY(int(8), _GLF_IDENTITY(min(_GLF_IDENTITY(int(8), int(ivec2(int(8), 1))), int(8)), min(min(_GLF_IDENTITY(int(8), int(ivec2(int(8), 1))), int(8)), min(_GLF_IDENTITY(int(8), int(ivec2(int(8), 1))), int(8)))))))); _injected_loop_counter --)
              {
               barrier();
               if(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, bool(bvec3(false, false, false)))))))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 barrier();
                }
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 barrier();
                }
              }
            }
          }
         else
          {
          }
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat3x4(injectionSwitch, _GLF_ONE(1.0, injectionSwitch.y), 1.0, 0.0, 1.0, sqrt(1.0), 1.0, 1.0, determinant(mat3(1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, abs(1.0))), 1.0, 0.0), mat4(1.0) * (mat3x4(injectionSwitch, _GLF_ONE(1.0, injectionSwitch.y), 1.0, 0.0, 1.0, sqrt(1.0), 1.0, 1.0, determinant(mat3(1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, abs(1.0))), 1.0, 0.0))))).y, float(_GLF_IDENTITY(vec4(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat3x4(injectionSwitch, _GLF_ONE(1.0, injectionSwitch.y), 1.0, 0.0, 1.0, sqrt(1.0), 1.0, 1.0, determinant(mat3(1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, abs(1.0))), 1.0, 0.0), mat4(1.0) * (mat3x4(injectionSwitch, _GLF_ONE(1.0, injectionSwitch.y), 1.0, 0.0, 1.0, sqrt(1.0), 1.0, 1.0, determinant(mat3(1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, abs(1.0))), 1.0, 0.0))))).y, float(mat2x4(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat3x4(injectionSwitch, _GLF_ONE(1.0, injectionSwitch.y), 1.0, 0.0, 1.0, sqrt(1.0), 1.0, 1.0, determinant(mat3(1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, abs(1.0))), 1.0, 0.0), mat4(1.0) * (mat3x4(injectionSwitch, _GLF_ONE(1.0, injectionSwitch.y), 1.0, 0.0, 1.0, sqrt(1.0), 1.0, 1.0, determinant(mat3(1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, abs(1.0))), 1.0, 0.0))))).y, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, cos(0.0)))), 0.0, 0.0, 0.0), clamp(vec4(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat3x4(injectionSwitch, _GLF_ONE(1.0, injectionSwitch.y), 1.0, 0.0, 1.0, sqrt(1.0), 1.0, 1.0, determinant(mat3(1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, abs(1.0))), 1.0, 0.0), mat4(1.0) * (mat3x4(injectionSwitch, _GLF_ONE(1.0, injectionSwitch.y), 1.0, 0.0, 1.0, sqrt(1.0), 1.0, 1.0, determinant(mat3(1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, abs(1.0))), 1.0, 0.0))))).y, float(mat2x4(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat3x4(injectionSwitch, _GLF_ONE(1.0, injectionSwitch.y), 1.0, 0.0, 1.0, sqrt(1.0), 1.0, 1.0, determinant(mat3(1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, abs(1.0))), 1.0, 0.0), mat4(1.0) * (mat3x4(injectionSwitch, _GLF_ONE(1.0, injectionSwitch.y), 1.0, 0.0, 1.0, sqrt(1.0), 1.0, 1.0, determinant(mat3(1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, abs(1.0))), 1.0, 0.0))))).y, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, cos(0.0)))), 0.0, 0.0, 0.0), vec4(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat3x4(injectionSwitch, _GLF_ONE(1.0, injectionSwitch.y), 1.0, 0.0, 1.0, sqrt(1.0), 1.0, 1.0, determinant(mat3(1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, abs(1.0))), 1.0, 0.0), mat4(1.0) * (mat3x4(injectionSwitch, _GLF_ONE(1.0, injectionSwitch.y), 1.0, 0.0, 1.0, sqrt(1.0), 1.0, 1.0, determinant(mat3(1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, abs(1.0))), 1.0, 0.0))))).y, float(mat2x4(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat3x4(injectionSwitch, _GLF_ONE(1.0, injectionSwitch.y), 1.0, 0.0, 1.0, sqrt(1.0), 1.0, 1.0, determinant(mat3(1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, abs(1.0))), 1.0, 0.0), mat4(1.0) * (mat3x4(injectionSwitch, _GLF_ONE(1.0, injectionSwitch.y), 1.0, 0.0, 1.0, sqrt(1.0), 1.0, 1.0, determinant(mat3(1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, abs(1.0))), 1.0, 0.0))))).y, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, cos(0.0)))), 0.0, 0.0, 0.0), vec4(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat3x4(injectionSwitch, _GLF_ONE(1.0, injectionSwitch.y), 1.0, 0.0, 1.0, sqrt(1.0), 1.0, 1.0, determinant(mat3(1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, abs(1.0))), 1.0, 0.0), mat4(1.0) * (mat3x4(injectionSwitch, _GLF_ONE(1.0, injectionSwitch.y), 1.0, 0.0, 1.0, sqrt(1.0), 1.0, 1.0, determinant(mat3(1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, abs(1.0))), 1.0, 0.0))))).y, float(mat2x4(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat3x4(injectionSwitch, _GLF_ONE(1.0, injectionSwitch.y), 1.0, 0.0, 1.0, sqrt(1.0), 1.0, 1.0, determinant(mat3(1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, abs(1.0))), 1.0, 0.0), mat4(1.0) * (mat3x4(injectionSwitch, _GLF_ONE(1.0, injectionSwitch.y), 1.0, 0.0, 1.0, sqrt(1.0), 1.0, 1.0, determinant(mat3(1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, abs(1.0))), 1.0, 0.0))))).y, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, cos(0.0)))), 0.0, 0.0, 0.0))))), ! (! (injectionSwitch.x > injectionSwitch.y)))))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, max(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) >> 0), _injected_loop_counter)) > (0 >> _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(_GLF_IDENTITY(0, max(0, _GLF_IDENTITY(0, (0) | 0)))), ~ (~ (int(0))))))); _GLF_IDENTITY(_injected_loop_counter --, (true ? _injected_loop_counter -- : _GLF_FUZZED(89442))))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
          barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
       for(int _injected_loop_counter = (1 ^ 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 | (0 >> _GLF_IDENTITY(int(2), int(2))))); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (injectionSwitch.x > injectionSwitch.y))))
        {
         do
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             barrier();
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           if(_GLF_DEAD(false))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = _GLF_IDENTITY(_GLF_IDENTITY(1, (1) - 0), (1) / 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) || false)))))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 barrier();
                }
               if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
                barrier();
               barrier();
              }
             do
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if(_GLF_DEAD(false))
                barrier();
              }
             while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))));
            }
          }
         do
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
              barrier();
             barrier();
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
         do
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))
            barrier();
           if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) || false)))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
            }
           else
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, true && (true))))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                     barrier();
                    }
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(5.7)), vec2(_GLF_FUZZED(-9.2), (injectionSwitch)[1]), bvec2(false, _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) && true)))).x > injectionSwitch.y)), _GLF_IDENTITY(bool(bvec2(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(5.7)), vec2(_GLF_FUZZED(-9.2), (injectionSwitch)[1]), bvec2(false, _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) && true)))).x > injectionSwitch.y)), false)), ! (! (_GLF_IDENTITY(bool(bvec2(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(5.7)), vec2(_GLF_FUZZED(-9.2), (injectionSwitch)[1]), bvec2(false, _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) && true)))).x > injectionSwitch.y)), false)), ! (! (bool(bvec2(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(5.7)), vec2(_GLF_FUZZED(-9.2), (injectionSwitch)[1]), bvec2(false, _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) && true)))).x > injectionSwitch.y)), false))))))))), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_IDENTITY(_GLF_FUZZED(5.7), min(_GLF_FUZZED(5.7), _GLF_FUZZED(5.7)))), vec2(_GLF_FUZZED(-9.2), (injectionSwitch)[1]), bvec2(false, _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_IDENTITY((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) && _GLF_IDENTITY(true, bool(bvec4(_GLF_IDENTITY(true, bool(bvec4(true, true, false, false))), false, false, false))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) && _GLF_IDENTITY(true, bool(bvec4(_GLF_IDENTITY(true, bool(bvec4(true, true, false, false))), false, false, false))), true && ((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) && _GLF_IDENTITY(true, bool(bvec4(_GLF_IDENTITY(true, bool(bvec4(true, true, false, false))), false, false, false)))))), bool(bool(! (_GLF_IDENTITY((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) && _GLF_IDENTITY(true, bool(bvec4(_GLF_IDENTITY(true, bool(bvec4(true, true, false, false))), false, false, false))), true && ((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) && _GLF_IDENTITY(true, bool(bvec4(_GLF_IDENTITY(true, bool(bvec4(true, true, false, false))), false, false, false))))))))))))))).x > injectionSwitch.y))) || false)), ! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, mix(vec2((_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(vec3(injectionSwitch, 0.0)), vec2(vec2(_GLF_IDENTITY(_GLF_IDENTITY(vec2(vec3(injectionSwitch, 0.0)), (vec2(vec3(injectionSwitch, 0.0))) / vec2(1.0, 1.0)), max(_GLF_IDENTITY(vec2(vec3(injectionSwitch, 0.0)), (vec2(vec3(injectionSwitch, 0.0))) / vec2(1.0, 1.0)), _GLF_IDENTITY(vec2(vec3(injectionSwitch, 0.0)), (vec2(vec3(injectionSwitch, 0.0))) / vec2(1.0, 1.0)))))))))[_GLF_IDENTITY(0, min(0, 0))], _GLF_FUZZED(5.7)), vec2(_GLF_FUZZED(_GLF_IDENTITY(-9.2, 1.0 * (-9.2))), (injectionSwitch)[1]), bvec2(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))).x > injectionSwitch.y), ! (! ((_GLF_IDENTITY(injectionSwitch, mix(vec2((_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(vec3(injectionSwitch, 0.0)), vec2(vec2(_GLF_IDENTITY(_GLF_IDENTITY(vec2(vec3(injectionSwitch, 0.0)), (vec2(vec3(injectionSwitch, 0.0))) / vec2(1.0, 1.0)), max(_GLF_IDENTITY(vec2(vec3(injectionSwitch, 0.0)), (vec2(vec3(injectionSwitch, 0.0))) / vec2(1.0, 1.0)), _GLF_IDENTITY(vec2(vec3(injectionSwitch, 0.0)), (vec2(vec3(injectionSwitch, 0.0))) / vec2(1.0, 1.0)))))))))[_GLF_IDENTITY(0, min(0, 0))], _GLF_FUZZED(5.7)), vec2(_GLF_FUZZED(_GLF_IDENTITY(-9.2, 1.0 * (-9.2))), (injectionSwitch)[1]), bvec2(false, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, bool(bvec4(injectionSwitch.x < injectionSwitch.y, false, false, false)))))))).x > injectionSwitch.y)))))), bool(bvec3(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mix(vec2((injectionSwitch)[0], _GLF_FUZZED(5.7)), vec2(_GLF_FUZZED(-9.2), (injectionSwitch)[1]), _GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, ! (! (false))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, ! (! (false))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec2(bvec4(bvec2(_GLF_IDENTITY(false, ! (! (false))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true, false)))), bvec2(bvec2(bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, ! (! (false))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec2(bvec4(bvec2(_GLF_IDENTITY(false, ! (! (false))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true, false)))))))))), mat2(1.0) * (mix(vec2((injectionSwitch)[0], _GLF_FUZZED(5.7)), vec2(_GLF_FUZZED(-9.2), (injectionSwitch)[1]), _GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, ! (! (false))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, ! (! (false))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec2(bvec4(bvec2(_GLF_IDENTITY(false, ! (! (false))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true, false)))), bvec2(bvec2(bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, ! (! (false))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec2(bvec4(bvec2(_GLF_IDENTITY(false, ! (! (false))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true, false))))))))))))).x > injectionSwitch.y))), _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(6338.2973)), float(injectionSwitch.y), bool(true))))), bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), true)))))))
                    {
                     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      {
                       if(_GLF_DEAD(false))
                        barrier();
                      }
                     else
                      {
                       if(_GLF_DEAD(false))
                        {
                         if(_GLF_DEAD(false))
                          barrier();
                         barrier();
                        }
                       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), bool(bool(_GLF_WRAPPED_IF_TRUE(true)))))
                        {
                         if(_GLF_WRAPPED_IF_FALSE(false))
                          {
                          }
                         else
                          {
                           if(_GLF_DEAD(false))
                            barrier();
                           do
                            {
                             barrier();
                             if(_GLF_DEAD(false))
                              barrier();
                            }
                           while(_GLF_WRAPPED_LOOP(false));
                          }
                         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                          {
                           do
                            {
                             if(_GLF_DEAD(false))
                              barrier();
                             if(_GLF_DEAD(false))
                              barrier();
                            }
                           while(_GLF_WRAPPED_LOOP(false));
                           if(_GLF_DEAD(false))
                            barrier();
                           do
                            {
                             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                              barrier();
                             if(_GLF_DEAD(false))
                              {
                               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                barrier();
                               barrier();
                              }
                            }
                           while(_GLF_WRAPPED_LOOP(false));
                          }
                        }
                       else
                        {
                         if(_GLF_DEAD(false))
                          barrier();
                        }
                      }
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                     if(_GLF_DEAD(false))
                      barrier();
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                    }
                   if(_GLF_DEAD(false))
                    barrier();
                   if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
                    {
                     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(825.589)), float(injectionSwitch.x), bool(true))) > injectionSwitch.y))))
                      {
                       if(_GLF_DEAD(false))
                        barrier();
                      }
                     else
                      {
                       barrier();
                       if(_GLF_DEAD(false))
                        barrier();
                      }
                    }
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   barrier();
                  }
                }
               else
                {
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                {
                 do
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec2(false, false)))) && true)));
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    {
                     do
                      {
                       if(_GLF_DEAD(false))
                        barrier();
                       barrier();
                      }
                     while(_GLF_WRAPPED_LOOP(false));
                    }
                   if(_GLF_DEAD(false))
                    barrier();
                   barrier();
                  }
                }
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), bool(bvec3(! (_GLF_DEAD(false)), false, false))))))
                  {
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      {
                      }
                     else
                      {
                       barrier();
                      }
                    }
                   barrier();
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 if(_GLF_DEAD(false))
                  barrier();
                 barrier();
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   barrier();
                  }
                 if(_GLF_DEAD(false))
                  barrier();
                }
              }
             else
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(vec3(injectionSwitch.y, 0.0, sqrt(0.0))))))))
                {
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x < injectionSwitch.y))))
                  {
                   barrier();
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 else
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 if(_GLF_DEAD(false))
                  barrier();
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if(_GLF_DEAD(false))
                barrier();
              }
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
                barrier();
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
            }
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       else
        {
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       atomicStore(buf[next_virtual_gid], _GLF_IDENTITY(uint(2), max(uint(2), _GLF_IDENTITY(uint(2), max(uint(2), uint(2))))), 4, 64, 4);
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
}
