#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_8 {
 uvec2 _f0;
 float _f1;
 bvec2 _f2;
 mat3x4 _f3;
 vec4 _f4;
} ;

struct _GLF_struct_7 {
 float _f0;
 int _f1;
 uvec4 _f2;
 bvec3 _f3;
 mat3 _f4;
 float _f5;
} ;

struct _GLF_struct_9 {
 _GLF_struct_7 _f0;
 _GLF_struct_8 _f1;
 int _f2;
 float _f3;
} ;

struct _GLF_struct_10 {
 uint workgroup_size;
 _GLF_struct_9 _f0;
} ;

struct _GLF_struct_5 {
 vec3 _f0;
} ;

struct _GLF_struct_3 {
 bvec4 _f0;
 bvec2 _f1;
 bvec3 _f2;
 uvec4 _f3;
 mat3 _f4;
 vec4 _f5;
} ;

struct _GLF_struct_2 {
 mat4x2 _f0;
 mat2x3 _f1;
 vec2 _f2;
 mat2 _f3;
 mat3x4 _f4;
 int _f5;
 mat3x4 _f6;
} ;

struct _GLF_struct_1 {
 ivec4 _f0;
} ;

struct _GLF_struct_0 {
 uvec2 _f0;
 vec2 _f1;
 int _f2;
 uvec3 _f3;
 vec2 _f4;
 mat4x3 _f5;
 mat4 _f6;
} ;

struct _GLF_struct_4 {
 mat3x2 _f0;
 _GLF_struct_0 _f1;
 _GLF_struct_1 _f2;
 _GLF_struct_2 _f3;
 _GLF_struct_3 _f4;
 ivec3 _f5;
 bool _f6;
} ;

struct _GLF_struct_6 {
 uint subgroup_local_id;
 mat3x4 _f0;
 _GLF_struct_4 _f1;
 _GLF_struct_5 _f2;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
uint subgroup_size = 16;
 _GLF_struct_6 _GLF_struct_replacement_6 = _GLF_struct_6(gl_SubgroupInvocationID, mat3x4(1.0), _GLF_struct_4(mat3x2(1.0), _GLF_struct_0(uvec2(1u), vec2(1.0), 1, uvec3(1u), vec2(_GLF_IDENTITY(1.0, (1.0) / 1.0)), mat4x3(1.0), mat4(1.0)), _GLF_struct_1(ivec4(1)), _GLF_struct_2(mat4x2(1.0), mat2x3(1.0), vec2(1.0), mat2(1.0), mat3x4(1.0), 1, mat3x4(1.0)), _GLF_struct_3(bvec4(true), bvec2(true), bvec3(true), uvec4(1u), mat3(1.0), vec4(1.0)), ivec3(1), true), _GLF_struct_5(vec3(1.0)));
 uint num_workgroup = _GLF_IDENTITY(gl_NumWorkGroups.x, clamp(gl_NumWorkGroups.x, gl_NumWorkGroups.x, gl_NumWorkGroups.x));
 _GLF_struct_10 _GLF_struct_replacement_10 = _GLF_struct_10(gl_WorkGroupSize.x, _GLF_struct_9(_GLF_struct_7(1.0, 1, uvec4(_GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, uint(uint(1u)))) << 0u)), bvec3(true), mat3(1.0), 1.0), _GLF_struct_8(uvec2(1u), _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(6.2)), float(1.0), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), bvec2(true), mat3x4(1.0), vec4(1.0)), 1, 1.0));
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = _GLF_struct_replacement_10.workgroup_size * workgroup_id;
 uint virtual_gid = workgroup_base + subgroup_id * subgroup_size + _GLF_IDENTITY(_GLF_struct_replacement_6.subgroup_local_id, (true ? _GLF_struct_replacement_6.subgroup_local_id : _GLF_FUZZED(subgroup_size)));
 uint next_virtual_gid = workgroup_base + subgroup_id * subgroup_size + ((_GLF_struct_replacement_6.subgroup_local_id + 1) % subgroup_size);
 buf[virtual_gid] = 1;
 atomicStore(buf[next_virtual_gid], uint(2), _GLF_IDENTITY(4, (_GLF_IDENTITY(4, (_GLF_IDENTITY(4, max(4, 4))) + 0)) / 1), 64, 4);
}
