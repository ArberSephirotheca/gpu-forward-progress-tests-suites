#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    return;
  }
 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bool(_GLF_IDENTITY(bvec3(! (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true, false), bvec3(bvec4(bvec3(! (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))))), true, false), false))))))))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-5.1)), float(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED((true ? 7390.6368 : -5.5))), float(injectionSwitch.x), bool(true)))), bool(true))) > injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        return;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).x > injectionSwitch.y) || false)))))
      {
       for(int _injected_loop_counter = (1 & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), (_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(5.7)), bool(false))), injectionSwitch.x)))) - 0.0))); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              return;
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
              {
               return;
              }
             if(_GLF_DEAD(false))
              break;
            }
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             return;
            }
           else
            {
            }
          }
        }
       return;
      }
     return;
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, bool(bool(false)))))))
  return;
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
  }
 uint subgroup_id = gl_SubgroupID;
uint subgroup_size = 16;
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     for(int _injected_loop_counter = 1; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > (0 >> _GLF_IDENTITY(int(2), int(2)))), bool(bvec2(_GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY((0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(2), int(2)), (_GLF_IDENTITY(_GLF_IDENTITY(int(2), int(2)), (_GLF_IDENTITY(int(2), int(2))) | (_GLF_IDENTITY(int(2), int(2))))) ^ 0)), clamp((0 >> _GLF_IDENTITY(int(2), int(2))), (0 >> _GLF_IDENTITY(int(2), int(2))), (0 >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), ~ (~ (int(2))))))))), _GLF_IDENTITY(false, ! (! (false)))))); _GLF_IDENTITY(_injected_loop_counter --, _GLF_IDENTITY((true ? _injected_loop_counter -- : _GLF_FUZZED(_injected_loop_counter)), ~ (~ ((true ? _injected_loop_counter -- : _GLF_FUZZED(_injected_loop_counter)))))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
       for(int _injected_loop_counter = 1; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > (_GLF_IDENTITY(0 ^ (0 >> _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(2), int(_GLF_IDENTITY(int(int(2)), ~ (~ (int(int(2))))))), int(2)), min(_GLF_IDENTITY(_GLF_IDENTITY(int(2), int(_GLF_IDENTITY(int(int(2)), ~ _GLF_IDENTITY((~ (int(int(2)))), 1 * (_GLF_IDENTITY((~ (int(int(2)))), ((~ (int(int(2))))) | ((~ (int(int(2))))))))))), int(2)), _GLF_IDENTITY(_GLF_IDENTITY(int(2), int(_GLF_IDENTITY(int(int(2)), ~ (~ (int(int(2))))))), int(2))))), (0 ^ (0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(2), int(_GLF_IDENTITY(int(int(2)), ~ (~ (int(int(2))))))), int(2)))) * int(_GLF_ONE(1.0, injectionSwitch.y))))), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > (0 ^ (0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(2), int(_GLF_IDENTITY(_GLF_IDENTITY(int(int(2)), (int(int(2))) - (0 | 0)), ~ (~ (int(int(2))))))), int(2))))), _GLF_IDENTITY((_GLF_WRAPPED_LOOP(_injected_loop_counter > (0 ^ (0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(2), int(_GLF_IDENTITY(int(int(2)), ~ (~ (int(int(2))))))), int(2)))))) || false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || ((_GLF_WRAPPED_LOOP(_injected_loop_counter > (0 ^ (0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(2), int(_GLF_IDENTITY(int(int(2)), ~ (~ (int(int(2))))))), int(2)))))) || false))), true), _GLF_IDENTITY(bvec2(bvec4(bvec2(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > (0 ^ (0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(2), int(_GLF_IDENTITY(_GLF_IDENTITY(int(int(2)), (int(int(2))) - (0 | 0)), ~ (~ (int(int(2))))))), int(2))))), _GLF_IDENTITY((_GLF_WRAPPED_LOOP(_injected_loop_counter > (0 ^ (0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(2), int(_GLF_IDENTITY(int(int(2)), ~ (~ (int(int(2))))))), int(2)))))) || false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || ((_GLF_WRAPPED_LOOP(_injected_loop_counter > (0 ^ (0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(2), int(_GLF_IDENTITY(int(int(2)), ~ (~ (int(int(2))))))), int(2)))))) || false))), true), false, true)), _GLF_IDENTITY(bvec2(bvec4(bvec2(bvec4(bvec2(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > (0 ^ (0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(2), int(_GLF_IDENTITY(_GLF_IDENTITY(int(int(2)), (int(int(2))) - (0 | 0)), ~ (~ (int(int(2))))))), int(2))))), _GLF_IDENTITY((_GLF_WRAPPED_LOOP(_injected_loop_counter > (0 ^ (0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(2), int(_GLF_IDENTITY(int(int(2)), ~ (~ (int(int(2))))))), int(2)))))) || false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || ((_GLF_WRAPPED_LOOP(_injected_loop_counter > (0 ^ (0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(2), int(_GLF_IDENTITY(int(int(2)), ~ (~ (int(int(2))))))), int(2)))))) || false))), true), false, true)), false, false)), bvec2(bvec3(bvec2(bvec4(bvec2(bvec4(bvec2(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > (0 ^ (0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(2), int(_GLF_IDENTITY(_GLF_IDENTITY(int(int(2)), (int(int(2))) - (0 | 0)), ~ (~ (int(int(2))))))), int(2))))), _GLF_IDENTITY((_GLF_WRAPPED_LOOP(_injected_loop_counter > (0 ^ (0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(2), int(_GLF_IDENTITY(int(int(2)), ~ (~ (int(int(2))))))), int(2)))))) || false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || ((_GLF_WRAPPED_LOOP(_injected_loop_counter > (0 ^ (0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(2), int(_GLF_IDENTITY(int(int(2)), ~ (~ (int(int(2))))))), int(2)))))) || false))), true), false, true)), false, false)), true))))))); _injected_loop_counter --)
        {
         do
          {
           barrier();
           do
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(false))
          return;
        }
      }
    }
   else
    {
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != (_GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) << 0)) - 0) << _GLF_IDENTITY(int(2), int(2)))); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        break;
       for(int _injected_loop_counter = ((1 | 1) & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 >> _GLF_IDENTITY(int(4), int(4)))); _injected_loop_counter --)
        {
         do
          {
           return;
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        }
      }
    }
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  return;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 do
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bvec2(_GLF_IDENTITY(true, (true) || false), false)))))
      {
       do
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            break;
          }
         else
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))
              {
               for(int _injected_loop_counter = (int(_GLF_ZERO(_GLF_IDENTITY(0.0, clamp(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), 0.0, 0.0)), _GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-5261.3349)), bool(false))))) | _GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) >> 0)) - 0)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                {
                 if(_GLF_DEAD(false))
                  return;
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   return;
                   if(_GLF_DEAD(false))
                    return;
                  }
                 else
                  {
                  }
                }
              }
            }
          }
        }
       while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), true && (_GLF_WRAPPED_LOOP(false))));
       if(_GLF_DEAD(false))
        break;
      }
     else
      {
      }
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(false, false, true), bvec3(bvec4(bvec3(false, false, true), true)))), bool(bool(bool(_GLF_IDENTITY(bvec3(false, false, true), bvec3(bvec4(bvec3(false, false, true), true)))))))), (injectionSwitch.x > injectionSwitch.y))))
      continue;
    }
   else
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      return;
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  return;
 uint num_workgroup = _GLF_IDENTITY(gl_NumWorkGroups.x, (gl_NumWorkGroups.x) | 0u);
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) && true) && (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false)))))))))
    return;
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
  }
 do
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, false, true)))))
      {
       do
        {
         return;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    break;
  }
 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || ((injectionSwitch.x > injectionSwitch.y)))), bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))));
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
     return;
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
      return;
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-883.812, -1.4)) : injectionSwitch)))).y))))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(injectionSwitch.x, float(mat2x4(injectionSwitch.x, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0)))), float(_GLF_FUZZED(-497.927)), bool(false)))) - 0.0) < injectionSwitch.y))))
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 >> _GLF_IDENTITY(int(7), int(7)))); _injected_loop_counter --)
          {
           return;
          }
        }
       else
        {
        }
      }
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, true && (false))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec4(false, false, false, true))), (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(_GLF_IDENTITY(_GLF_IDENTITY(-3.6, mix(float(_GLF_IDENTITY(-3.6, clamp(-3.6, _GLF_IDENTITY(-3.6, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, 0.0))) * (-3.6)), -3.6))), float(_GLF_FUZZED(2422.1495)), bool(false))), (_GLF_IDENTITY(_GLF_IDENTITY(-3.6, mix(float(_GLF_IDENTITY(-3.6, clamp(-3.6, -3.6, -3.6))), float(_GLF_FUZZED(2422.1495)), bool(false))), _GLF_IDENTITY(clamp(_GLF_IDENTITY(-3.6, mix(float(_GLF_IDENTITY(-3.6, clamp(-3.6, -3.6, -3.6))), float(_GLF_FUZZED(2422.1495)), bool(false))), _GLF_IDENTITY(-3.6, mix(float(_GLF_IDENTITY(-3.6, clamp(-3.6, -3.6, -3.6))), float(_GLF_FUZZED(2422.1495)), bool(false))), _GLF_IDENTITY(-3.6, mix(float(_GLF_IDENTITY(-3.6, clamp(-3.6, -3.6, -3.6))), float(_GLF_FUZZED(2422.1495)), bool(false)))), (_GLF_TRUE(_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec2(true, true), bvec2(bvec2(bvec2(true, true)))))), (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(clamp(_GLF_IDENTITY(_GLF_IDENTITY(-3.6, mix(float(_GLF_IDENTITY(-3.6, clamp(-3.6, -3.6, -3.6))), float(_GLF_FUZZED(2422.1495)), bool(false))), max(_GLF_IDENTITY(_GLF_IDENTITY(-3.6, mix(float(_GLF_IDENTITY(-3.6, clamp(-3.6, -3.6, -3.6))), float(_GLF_FUZZED(2422.1495)), bool(false))), min(_GLF_IDENTITY(-3.6, mix(float(_GLF_IDENTITY(-3.6, clamp(-3.6, -3.6, -3.6))), float(_GLF_FUZZED(2422.1495)), bool(false))), _GLF_IDENTITY(-3.6, mix(float(_GLF_IDENTITY(-3.6, clamp(-3.6, -3.6, -3.6))), float(_GLF_FUZZED(2422.1495)), bool(false))))), _GLF_IDENTITY(-3.6, mix(float(_GLF_IDENTITY(-3.6, clamp(-3.6, -3.6, -3.6))), float(_GLF_FUZZED(2422.1495)), bool(false))))), _GLF_IDENTITY(-3.6, mix(float(_GLF_IDENTITY(-3.6, clamp(-3.6, -3.6, -3.6))), float(_GLF_FUZZED(2422.1495)), bool(false))), _GLF_IDENTITY(-3.6, mix(float(_GLF_IDENTITY(-3.6, clamp(-3.6, -3.6, -3.6))), float(_GLF_FUZZED(2422.1495)), bool(false)))), (clamp(_GLF_IDENTITY(-3.6, mix(float(_GLF_IDENTITY(-3.6, clamp(-3.6, -3.6, -3.6))), float(_GLF_FUZZED(2422.1495)), bool(false))), _GLF_IDENTITY(-3.6, mix(float(_GLF_IDENTITY(-3.6, clamp(-3.6, -3.6, -3.6))), float(_GLF_FUZZED(2422.1495)), bool(false))), _GLF_IDENTITY(-3.6, mix(float(_GLF_IDENTITY(-3.6, clamp(-3.6, -3.6, -3.6))), float(_GLF_FUZZED(2422.1495)), bool(false))))) / 1.0) : _GLF_FUZZED(6.0))))) * 1.0))), float(injectionSwitch.x), bool(true))) > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y, (_GLF_IDENTITY(true, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec2(bvec4(_GLF_IDENTITY(bvec2(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec2(bvec4(bvec2(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false, true))), true, false)))), ! (! (bool(_GLF_IDENTITY(bvec2(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec2(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec2(bvec4(bvec2(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false, true))), bvec2(bvec3(_GLF_IDENTITY(bvec2(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec2(bvec4(bvec2(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false, true))), false))), true, false)))))))) ? _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y, _GLF_ZERO(0.0, injectionSwitch.x) + _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y), 0.0 + (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y), mix(float(_GLF_FUZZED(41.33)), float((_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y)), bool(true)))))) : _GLF_FUZZED(normalize(-2.8))))))))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ((injectionSwitch.x < injectionSwitch.y)) && true))))
        {
         do
          {
           do
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(false))
                break;
               return;
              }
             else
              {
              }
            }
           while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))));
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec4(false, true, false, true))), (injectionSwitch.x > injectionSwitch.y))));
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat4(injectionSwitch, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, tan(0.0), 1.0, 1.0, 1.0, 1.0, determinant(mat4(cos(0.0), 0.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(dot(vec3(0.0, 0.0, 1.0), vec3(0.0, 0.0, 1.0)), dot(vec3(0.0, 0.0, 1.0), vec3(0.0, 0.0, 1.0))), 0.0, 0.0, 1.0, 1.0, 1.0, length(vec3(0.0, 0.0, 0.0)), 0.0, 1.0, 0.0, 1.0)), 1.0, 1.0), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(mat4(850.733, -606.027, 21.90, -0.7, -273.765, 1.0, -92.47, 4685.1941, 3.7, -3.6, 3.9, 875.678, 27.04, -9.3, -49.82, 101.423)) : mat4(injectionSwitch, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, tan(0.0), 1.0, 1.0, 1.0, 1.0, determinant(mat4(cos(0.0), 0.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(dot(vec3(0.0, 0.0, 1.0), vec3(0.0, 0.0, 1.0)), dot(vec3(0.0, 0.0, 1.0), vec3(0.0, 0.0, 1.0))), 0.0, 0.0, 1.0, 1.0, 1.0, length(vec3(0.0, 0.0, 0.0)), 0.0, 1.0, 0.0, 1.0)), 1.0, 1.0))))).y))))
            {
            }
           else
            {
             return;
            }
          }
        }
       else
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            return;
          }
         else
          {
          }
        }
      }
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       do
        {
         return;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false)))))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         return;
        }
       else
        {
        }
      }
    }
   if(_GLF_DEAD(false))
    return;
   do
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         for(int _injected_loop_counter = _GLF_IDENTITY(0, max(0, _GLF_IDENTITY(0, max(_GLF_IDENTITY(0, (0) >> 0), 0)))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
          {
           return;
          }
         if(_GLF_DEAD(false))
          break;
        }
       else
        {
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (false)), bool(bool((! (false))))))))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 uint workgroup_id = _GLF_IDENTITY(gl_WorkGroupID.x, uint(uvec3(_GLF_IDENTITY(gl_WorkGroupID.x, uint(uvec4(gl_WorkGroupID.x, ((1u << _GLF_IDENTITY(_GLF_IDENTITY(uint(3u), max(uint(3u), uint(3u))), uint(3u))) >> _GLF_IDENTITY(uint(3u), uint(3u))), 0u, 0u))), 0u, (1u & 1u))));
 for(int _injected_loop_counter = (-19747 & 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < (int(_GLF_ZERO(0.0, injectionSwitch.x)) | int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y)))); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || false)) || false)))
    {
     do
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          return;
        }
       else
        {
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      continue;
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(0, (0 >> _GLF_IDENTITY(int(6), int(6))) | (_GLF_IDENTITY(0, _GLF_IDENTITY((0), 0 | ((0))) | (0))))); _injected_loop_counter --)
        {
         return;
         if(_GLF_DEAD(false))
          break;
        }
       if(_GLF_DEAD(false))
        continue;
      }
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     return;
    }
   else
    {
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)), bool(bvec3(bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)), true, true))))))
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       return;
      }
    }
   return;
  }
 for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, ~ (~ (_injected_loop_counter))) > 0); _GLF_IDENTITY(_injected_loop_counter --, ~ (~ (_injected_loop_counter --))))
  {
   if(_GLF_DEAD(false))
    return;
  }
 for(int _injected_loop_counter = 0; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, (1) | (1))), bool(bool(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != 1, ! _GLF_IDENTITY((! (_injected_loop_counter != 1)), false || ((! (_injected_loop_counter != 1)))))), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1))))))); _injected_loop_counter ++)
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(false))
      break;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y))))
      {
       if(_GLF_DEAD(false))
        break;
       break;
      }
     if(_GLF_DEAD(false))
      continue;
    }
   else
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, (true) && true), (injectionSwitch.x < injectionSwitch.y))))
        {
         if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) || false))
          {
          }
         else
          {
           do
            {
             if(_GLF_DEAD(false))
              {
               do
                {
                 if(_GLF_DEAD(false))
                  break;
                 return;
                }
               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
           barrier();
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              break;
             if(_GLF_DEAD(false))
              {
               do
                {
                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _GLF_IDENTITY(_injected_loop_counter ++, (_GLF_IDENTITY(_injected_loop_counter ++, ~ (~ (_injected_loop_counter ++)))) >> 0))
                  {
                   return;
                  }
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             do
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                return;
              }
             while(_GLF_WRAPPED_LOOP(false));
             break;
            }
          }
        }
       else
        {
         if(_GLF_DEAD(false))
          break;
        }
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      continue;
    }
   else
    {
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         return;
        }
       else
        {
        }
      }
    }
  }
 uint workgroup_base = workgroup_size * workgroup_id;
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(7330.9984), _GLF_FUZZED(-204.149)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))).x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    return;
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(false))
    return;
  }
 uint virtual_gid = _GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size + _GLF_IDENTITY(subgroup_local_id, 0u ^ (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, max(subgroup_local_id, subgroup_local_id)), (subgroup_local_id) >> 0u))), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, uint(uvec3(workgroup_base + subgroup_id * subgroup_size, 0u, 1u))) + _GLF_IDENTITY(subgroup_local_id, 0u ^ (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) >> 0u))), (_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size + _GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(clamp(subgroup_local_id, subgroup_local_id, subgroup_local_id), (_GLF_IDENTITY(clamp(subgroup_local_id, subgroup_local_id, subgroup_local_id), (clamp(subgroup_local_id, subgroup_local_id, subgroup_local_id)) | (clamp(subgroup_local_id, subgroup_local_id, subgroup_local_id)))) | (_GLF_IDENTITY(clamp(subgroup_local_id, subgroup_local_id, subgroup_local_id), min(clamp(subgroup_local_id, subgroup_local_id, subgroup_local_id), clamp(subgroup_local_id, subgroup_local_id, subgroup_local_id)))))), 0u ^ (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) >> 0u))), (workgroup_base + subgroup_id * subgroup_size + _GLF_IDENTITY(subgroup_local_id, 0u ^ (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) >> _GLF_IDENTITY(0u, uint(uvec3(_GLF_IDENTITY(0u, 0u ^ (_GLF_IDENTITY(0u, (0u) + 0u))), 1u, uint(_GLF_ONE(1.0, injectionSwitch.y))))))))) - 0u)) / 1u))));
 uint next_virtual_gid = _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, 0u ^ (subgroup_size)), (_GLF_IDENTITY(false ? _GLF_FUZZED(subgroup_local_id) : workgroup_base + _GLF_IDENTITY(subgroup_id * subgroup_size, uint(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (subgroup_id * subgroup_size)), (false ? _GLF_IDENTITY(_GLF_FUZZED(subgroup_local_id), (_GLF_FUZZED(subgroup_local_id)) | (_GLF_FUZZED(subgroup_local_id))) : workgroup_base + _GLF_IDENTITY(subgroup_id * subgroup_size, uint(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (subgroup_id * subgroup_size))) | (false ? _GLF_FUZZED(subgroup_local_id) : workgroup_base + _GLF_IDENTITY(subgroup_id * subgroup_size, uint(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (subgroup_id * subgroup_size)))))), clamp(_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, (false ? _GLF_FUZZED(subgroup_local_id) : workgroup_base + _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) >> 0u), min(subgroup_id * subgroup_size, _GLF_IDENTITY(subgroup_id, (false ? _GLF_FUZZED(_GLF_IDENTITY((workgroup_id % (num_workgroup << 100304u)), 0u + (_GLF_IDENTITY((workgroup_id % (num_workgroup << 100304u)), max((workgroup_id % (num_workgroup << 100304u)), (workgroup_id % (num_workgroup << 100304u))))))) : subgroup_id)) * subgroup_size)))), _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, (_GLF_IDENTITY(false, true && _GLF_IDENTITY((false), (_GLF_IDENTITY((false), bool(bool((false))))) && true)) ? _GLF_FUZZED(subgroup_local_id) : workgroup_base + subgroup_id * subgroup_size)), uint(uvec2(_GLF_IDENTITY(workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, (true ? subgroup_size : _GLF_FUZZED(workgroup_id))), (false ? _GLF_FUZZED(subgroup_local_id) : _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, (workgroup_base + subgroup_id * subgroup_size) | (91876u & 0u)), max(workgroup_base + _GLF_IDENTITY(subgroup_id * subgroup_size, clamp(subgroup_id * subgroup_size, subgroup_id * subgroup_size, _GLF_IDENTITY(subgroup_id * subgroup_size, 0u + (subgroup_id * subgroup_size)))), workgroup_base + subgroup_id * subgroup_size)))), 1u))), _GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, (false ? _GLF_IDENTITY(_GLF_FUZZED(subgroup_local_id), (_GLF_FUZZED(subgroup_local_id)) << 0u) : workgroup_base + subgroup_id * subgroup_size)))) + (_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id + _GLF_IDENTITY(1, _GLF_IDENTITY(clamp(_GLF_IDENTITY(1, min(1, 1)), 1, 1), ~ (~ (_GLF_IDENTITY(clamp(_GLF_IDENTITY(1, min(1, 1)), 1, 1), min(_GLF_IDENTITY(clamp(_GLF_IDENTITY(1, min(1, 1)), 1, 1), 0 ^ (clamp(_GLF_IDENTITY(1, min(1, 1)), 1, 1))), clamp(_GLF_IDENTITY(1, min(1, 1)), 1, 1)))))))) % subgroup_size, max(_GLF_IDENTITY((subgroup_local_id + _GLF_IDENTITY(1, _GLF_IDENTITY(clamp(_GLF_IDENTITY(1, min(1, 1)), 1, 1), ~ (~ (_GLF_IDENTITY(clamp(_GLF_IDENTITY(1, min(1, 1)), 1, 1), min(_GLF_IDENTITY(clamp(_GLF_IDENTITY(1, min(1, 1)), 1, 1), 0 ^ (clamp(_GLF_IDENTITY(1, min(1, 1)), 1, 1))), clamp(_GLF_IDENTITY(1, min(1, 1)), 1, 1)))))))) % subgroup_size, ((subgroup_local_id + _GLF_IDENTITY(1, _GLF_IDENTITY(clamp(_GLF_IDENTITY(1, min(1, 1)), 1, 1), ~ (~ (_GLF_IDENTITY(clamp(_GLF_IDENTITY(1, min(1, 1)), 1, 1), min(_GLF_IDENTITY(clamp(_GLF_IDENTITY(1, min(1, 1)), 1, 1), 0 ^ (clamp(_GLF_IDENTITY(1, min(1, 1)), 1, 1))), clamp(_GLF_IDENTITY(1, min(1, 1)), 1, 1)))))))) % subgroup_size) * 1u), (subgroup_local_id + _GLF_IDENTITY(1, _GLF_IDENTITY(clamp(_GLF_IDENTITY(1, min(1, 1)), 1, 1), ~ (~ (_GLF_IDENTITY(clamp(_GLF_IDENTITY(1, min(1, 1)), 1, 1), min(_GLF_IDENTITY(clamp(_GLF_IDENTITY(1, min(1, 1)), 1, 1), 0 ^ (clamp(_GLF_IDENTITY(1, min(1, 1)), 1, 1))), clamp(_GLF_IDENTITY(1, min(1, 1)), 1, 1)))))))) % subgroup_size)), _GLF_IDENTITY((_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec3(_GLF_IDENTITY((subgroup_local_id + 1), (_GLF_IDENTITY((subgroup_local_id + 1), 0u + ((subgroup_local_id + 1)))) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x))) % subgroup_size, _GLF_IDENTITY((1u ^ 0u), ((1u ^ 0u)) | 0u), _GLF_IDENTITY((0u << _GLF_IDENTITY(_GLF_IDENTITY(uint(6u), uint(6u)), (_GLF_IDENTITY(uint(6u), uint(6u))) | (_GLF_IDENTITY(1u, (1u) - uint(_GLF_ZERO(0.0, injectionSwitch.x))) ^ 1u))), ((_GLF_IDENTITY(0u << _GLF_IDENTITY(_GLF_IDENTITY(uint(6u), uint(6u)), min(_GLF_IDENTITY(uint(6u), uint(6u)), _GLF_IDENTITY(uint(6u), uint(6u)))), (0u << _GLF_IDENTITY(uint(6u), uint(6u))) << uint(_GLF_ZERO(0.0, injectionSwitch.x))))) | ((_GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, (true ? 0u : _GLF_FUZZED(virtual_gid)))) / 1u)) * 1u) << _GLF_IDENTITY(uint(6u), uint(6u)))))), ~ (~ (uvec3((subgroup_local_id + _GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(756)))) % subgroup_size, (1u ^ 0u), (0u << _GLF_IDENTITY(_GLF_IDENTITY(uint(6u), uint(6u)), 0u | (_GLF_IDENTITY(uint(_GLF_IDENTITY(6u, (6u) | (6u))), uint(6u)))))))))), (false ? _GLF_FUZZED(_GLF_IDENTITY(workgroup_base, _GLF_IDENTITY((_GLF_IDENTITY(workgroup_base, (workgroup_base) - 0u)) >> 0u, ((_GLF_IDENTITY(workgroup_base, (workgroup_base) - 0u)) >> 0u) ^ 0u))) : _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec3((subgroup_local_id + 1) % subgroup_size, (1u ^ _GLF_IDENTITY(0u, clamp(0u, 0u, _GLF_IDENTITY(0u, uint(uint(0u)))))), _GLF_IDENTITY((0u << _GLF_IDENTITY(_GLF_IDENTITY(uint(6u), uint(6u)), (_GLF_IDENTITY(_GLF_IDENTITY(uint(6u), uint(6u)), uint(uvec4(_GLF_IDENTITY(uint(6u), uint(_GLF_IDENTITY(6u, uint(uvec3(6u, 0u, (1u & 1u)))))), 0u, 0u, 1u)))) | 0u)), ((0u << _GLF_IDENTITY(uint(6u), uint(6u)))) | (_GLF_IDENTITY((0u << _GLF_IDENTITY(_GLF_IDENTITY(uint(6u), (uint(6u)) * (_GLF_IDENTITY(1u ^ _GLF_IDENTITY(_GLF_IDENTITY(0u, (0u) / 1u), ~ (~ (_GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, ~ (~ (_GLF_IDENTITY(0u, (0u) | 0u))))) >> 0u)))), (1u ^ 0u) ^ (1u ^ 1u)))), uint(6u))), (true ? (0u << _GLF_IDENTITY(_GLF_IDENTITY(uint(6u), (uint(6u)) * (_GLF_IDENTITY(1u ^ _GLF_IDENTITY(0u, ~ (~ (0u))), (1u ^ 0u) ^ (1u ^ 1u)))), uint(6u))) : _GLF_FUZZED(workgroup_base)))))), ~ (_GLF_IDENTITY(~ (uvec3((subgroup_local_id + 1) % subgroup_size, (1u ^ 0u), (0u << _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uint(6u), (uint(6u)) ^ 0u), uint(6u)), 0u | (_GLF_IDENTITY(uint(6u), uint(6u))))))), min(~ (uvec3((subgroup_local_id + 1) % subgroup_size, (1u ^ 0u), (0u << _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uint(6u), (uint(6u)) ^ 0u), uint(6u)), 0u | (_GLF_IDENTITY(uint(6u), uint(6u))))))), _GLF_IDENTITY(~ (uvec3((subgroup_local_id + 1) % subgroup_size, (1u ^ 0u), (0u << _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uint(6u), (uint(6u)) ^ 0u), uint(6u)), 0u | (_GLF_IDENTITY(uint(6u), uint(6u))))))), min(_GLF_IDENTITY(~ (uvec3((subgroup_local_id + 1) % subgroup_size, (1u ^ 0u), (0u << _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uint(6u), (uint(6u)) ^ 0u), uint(6u)), 0u | (_GLF_IDENTITY(uint(6u), uint(6u))))))), (true ? ~ (uvec3((subgroup_local_id + 1) % subgroup_size, (1u ^ 0u), (0u << _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uint(6u), (uint(6u)) ^ 0u), uint(6u)), 0u | (_GLF_IDENTITY(uint(6u), uint(6u))))))) : _GLF_FUZZED(uvec3(21219u, 100566u, 78907u)))), ~ (uvec3((subgroup_local_id + 1) % subgroup_size, (1u ^ 0u), (0u << _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uint(6u), (uint(6u)) ^ 0u), uint(6u)), 0u | (_GLF_IDENTITY(uint(6u), uint(6u)))))))))))))), (false ? _GLF_FUZZED(workgroup_base) : uint(_GLF_IDENTITY(uvec3((subgroup_local_id + 1) % subgroup_size, (1u ^ _GLF_IDENTITY(0u, clamp(0u, 0u, _GLF_IDENTITY(0u, uint(uint(0u)))))), _GLF_IDENTITY((0u << _GLF_IDENTITY(_GLF_IDENTITY(uint(6u), uint(6u)), (_GLF_IDENTITY(_GLF_IDENTITY(uint(6u), uint(6u)), uint(uvec4(_GLF_IDENTITY(uint(6u), uint(_GLF_IDENTITY(6u, uint(uvec3(6u, 0u, (1u & 1u)))))), 0u, 0u, 1u)))) | 0u)), ((0u << _GLF_IDENTITY(uint(6u), uint(6u)))) | (_GLF_IDENTITY((0u << _GLF_IDENTITY(_GLF_IDENTITY(uint(6u), (uint(6u)) * (_GLF_IDENTITY(1u ^ _GLF_IDENTITY(_GLF_IDENTITY(0u, (0u) / 1u), ~ (~ (_GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, ~ (~ (_GLF_IDENTITY(0u, (0u) | 0u))))) >> 0u)))), (1u ^ 0u) ^ (1u ^ 1u)))), uint(6u))), (true ? (0u << _GLF_IDENTITY(_GLF_IDENTITY(uint(6u), (uint(6u)) * (_GLF_IDENTITY(1u ^ _GLF_IDENTITY(0u, ~ (~ (0u))), (1u ^ 0u) ^ (1u ^ 1u)))), uint(6u))) : _GLF_FUZZED(workgroup_base)))))), ~ (_GLF_IDENTITY(~ (uvec3((subgroup_local_id + 1) % subgroup_size, (1u ^ 0u), (0u << _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uint(6u), (uint(6u)) ^ 0u), uint(6u)), 0u | (_GLF_IDENTITY(uint(6u), uint(6u))))))), min(~ (uvec3((subgroup_local_id + 1) % subgroup_size, (1u ^ 0u), (0u << _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uint(6u), (uint(6u)) ^ 0u), uint(6u)), 0u | (_GLF_IDENTITY(uint(6u), uint(6u))))))), _GLF_IDENTITY(~ (uvec3((subgroup_local_id + 1) % subgroup_size, (1u ^ 0u), (0u << _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uint(6u), (uint(6u)) ^ 0u), uint(6u)), 0u | (_GLF_IDENTITY(uint(6u), uint(6u))))))), min(_GLF_IDENTITY(~ (uvec3((subgroup_local_id + 1) % subgroup_size, (1u ^ 0u), (0u << _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uint(6u), (uint(6u)) ^ 0u), uint(6u)), 0u | (_GLF_IDENTITY(uint(6u), uint(6u))))))), (true ? ~ (uvec3((subgroup_local_id + 1) % subgroup_size, (1u ^ 0u), (0u << _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uint(6u), (uint(6u)) ^ 0u), uint(6u)), 0u | (_GLF_IDENTITY(uint(6u), uint(6u))))))) : _GLF_FUZZED(uvec3(21219u, 100566u, 78907u)))), ~ (uvec3((subgroup_local_id + 1) % subgroup_size, (1u ^ 0u), (0u << _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uint(6u), (uint(6u)) ^ 0u), uint(6u)), 0u | (_GLF_IDENTITY(uint(6u), uint(6u)))))))))))))))))))) + 0u, clamp((_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec3(_GLF_IDENTITY((subgroup_local_id + 1), (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id + 1, max(subgroup_local_id + 1, subgroup_local_id + 1))), 0u + ((subgroup_local_id + 1)))) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x))) % subgroup_size, (1u ^ 0u), _GLF_IDENTITY((0u << _GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(6u, (6u) / 1u)), uint(6u)), (_GLF_IDENTITY(uint(6u), uint(6u))) | (1u ^ 1u))), ((_GLF_IDENTITY(0u << _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uint(6u), uint(uvec2(uint(6u), 1u))), uint(6u)), min(_GLF_IDENTITY(uint(6u), uint(6u)), _GLF_IDENTITY(uint(6u), uint(6u)))), (0u << _GLF_IDENTITY(uint(6u), uint(6u))) << uint(_GLF_ZERO(0.0, injectionSwitch.x))))) | ((_GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, (true ? 0u : _GLF_FUZZED(virtual_gid)))) / 1u)) * 1u) << _GLF_IDENTITY(uint(6u), uint(6u)))))), ~ (~ (uvec3((subgroup_local_id + _GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(756)))) % subgroup_size, (1u ^ 0u), (0u << _GLF_IDENTITY(_GLF_IDENTITY(uint(6u), uint(6u)), _GLF_IDENTITY(0u | (_GLF_IDENTITY(uint(6u), uint(6u))), 0u ^ (0u | (_GLF_IDENTITY(uint(6u), uint(6u)))))))))))), (false ? _GLF_FUZZED(_GLF_IDENTITY(workgroup_base, (_GLF_IDENTITY(workgroup_base, (workgroup_base) - 0u)) >> 0u)) : uint(_GLF_IDENTITY(uvec3((subgroup_local_id + 1) % subgroup_size, (_GLF_IDENTITY(1u, clamp(_GLF_IDENTITY(1u, (true ? 1u : _GLF_FUZZED(workgroup_base))), 1u, 1u)) ^ _GLF_IDENTITY(0u, clamp(0u, 0u, _GLF_IDENTITY(0u, uint(uint(0u)))))), _GLF_IDENTITY((0u << _GLF_IDENTITY(_GLF_IDENTITY(uint(6u), uint(6u)), (_GLF_IDENTITY(_GLF_IDENTITY(uint(6u), uint(6u)), uint(uvec4(_GLF_IDENTITY(uint(6u), uint(6u)), 0u, 0u, 1u)))) | 0u)), ((0u << _GLF_IDENTITY(uint(6u), uint(6u)))) | (_GLF_IDENTITY((0u << _GLF_IDENTITY(_GLF_IDENTITY(uint(6u), (uint(6u)) * (_GLF_IDENTITY(1u ^ _GLF_IDENTITY(0u, ~ (~ (0u))), (1u ^ 0u) ^ (1u ^ 1u)))), uint(6u))), (true ? (0u << _GLF_IDENTITY(_GLF_IDENTITY(uint(6u), (uint(6u)) * (_GLF_IDENTITY(1u ^ _GLF_IDENTITY(0u, ~ (~ (0u))), (1u ^ 0u) ^ (1u ^ 1u)))), uint(6u))) : _GLF_FUZZED(workgroup_base)))))), ~ (~ (uvec3((subgroup_local_id + 1) % subgroup_size, (1u ^ 0u), (0u << _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uint(6u), (uint(6u)) ^ 0u), (_GLF_IDENTITY(uint(6u), (uint(6u)) ^ 0u)) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x))), uint(6u)), 0u | (_GLF_IDENTITY(uint(6u), uint(6u)))))))))))))) + 0u, _GLF_IDENTITY((_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec3(_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id + 1), max(_GLF_IDENTITY((subgroup_local_id + 1), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? (subgroup_local_id + 1) : _GLF_FUZZED(subgroup_size))), _GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) | ((subgroup_local_id + 1))))), (_GLF_IDENTITY((subgroup_local_id + 1), 0u + ((subgroup_local_id + 1)))) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x))) % subgroup_size, (1u ^ 0u), _GLF_IDENTITY((0u << _GLF_IDENTITY(_GLF_IDENTITY(uint(6u), uint(6u)), (_GLF_IDENTITY(uint(6u), uint(6u))) | (1u ^ 1u))), ((_GLF_IDENTITY(0u << _GLF_IDENTITY(_GLF_IDENTITY(uint(6u), uint(6u)), min(_GLF_IDENTITY(uint(6u), uint(6u)), _GLF_IDENTITY(uint(6u), uint(6u)))), (0u << _GLF_IDENTITY(uint(6u), uint(6u))) << uint(_GLF_ZERO(0.0, injectionSwitch.x))))) | ((_GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, (true ? 0u : _GLF_FUZZED(virtual_gid)))) / 1u)) * 1u) << _GLF_IDENTITY(uint(6u), uint(6u)))))), ~ (~ (uvec3((subgroup_local_id + _GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(756)))) % subgroup_size, (1u ^ 0u), (0u << _GLF_IDENTITY(_GLF_IDENTITY(uint(6u), uint(6u)), 0u | (_GLF_IDENTITY(_GLF_IDENTITY(uint(6u), (uint(6u)) + 0u), uint(6u)))))))))), (false ? _GLF_FUZZED(_GLF_IDENTITY(workgroup_base, (_GLF_IDENTITY(workgroup_base, (workgroup_base) - 0u)) >> 0u)) : uint(_GLF_IDENTITY(uvec3((subgroup_local_id + 1) % subgroup_size, (1u ^ _GLF_IDENTITY(0u, clamp(0u, 0u, _GLF_IDENTITY(0u, uint(uint(0u)))))), _GLF_IDENTITY((0u << _GLF_IDENTITY(_GLF_IDENTITY(uint(6u), uint(6u)), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(uint(6u), uint(6u)), uint(uvec4(_GLF_IDENTITY(uint(6u), uint(6u)), 0u, 0u, 1u)))) | 0u, (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(uint(6u), uint(6u)), uint(uvec4(_GLF_IDENTITY(uint(6u), uint(6u)), 0u, 0u, 1u)))) | 0u, ~ (_GLF_IDENTITY(~ ((_GLF_IDENTITY(_GLF_IDENTITY(uint(6u), uint(6u)), uint(uvec4(_GLF_IDENTITY(uint(6u), uint(6u)), 0u, 0u, 1u)))) | 0u), clamp(~ ((_GLF_IDENTITY(_GLF_IDENTITY(uint(6u), uint(6u)), uint(uvec4(_GLF_IDENTITY(uint(6u), uint(6u)), 0u, 0u, 1u)))) | 0u), ~ ((_GLF_IDENTITY(_GLF_IDENTITY(uint(6u), uint(6u)), uint(uvec4(_GLF_IDENTITY(uint(6u), uint(6u)), 0u, 0u, 1u)))) | 0u), ~ ((_GLF_IDENTITY(_GLF_IDENTITY(uint(6u), uint(6u)), uint(uvec4(_GLF_IDENTITY(uint(6u), uint(6u)), 0u, 0u, 1u)))) | 0u)))))) | 0u))), ((0u << _GLF_IDENTITY(uint(6u), uint(6u)))) | (_GLF_IDENTITY((0u << _GLF_IDENTITY(_GLF_IDENTITY(uint(6u), (_GLF_IDENTITY(uint(6u), 1u * (uint(6u)))) * (_GLF_IDENTITY(_GLF_IDENTITY(1u ^ _GLF_IDENTITY(0u, ~ (~ (0u))), (1u ^ 0u) ^ (1u ^ 1u)), max(_GLF_IDENTITY(1u ^ _GLF_IDENTITY(0u, ~ (~ (0u))), (1u ^ 0u) ^ (1u ^ 1u)), _GLF_IDENTITY(1u ^ _GLF_IDENTITY(0u, ~ (~ (0u))), (1u ^ 0u) ^ (1u ^ 1u)))))), uint(6u))), (true ? (0u << _GLF_IDENTITY(_GLF_IDENTITY(uint(6u), (uint(6u)) * (_GLF_IDENTITY(1u ^ _GLF_IDENTITY(_GLF_IDENTITY(0u, ~ (~ (0u))), (true ? _GLF_IDENTITY(0u, ~ (~ (0u))) : _GLF_FUZZED(subgroup_size))), (1u ^ 0u) ^ (1u ^ 1u)))), uint(6u))) : _GLF_FUZZED(workgroup_base)))))), ~ (_GLF_IDENTITY(~ (uvec3((subgroup_local_id + 1) % subgroup_size, (1u ^ 0u), (0u << _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uint(6u), (uint(6u)) ^ 0u), uint(6u)), 0u | (_GLF_IDENTITY(uint(6u), uint(6u))))))), (~ (uvec3((subgroup_local_id + 1) % subgroup_size, (1u ^ 0u), (0u << _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uint(6u), (uint(6u)) ^ 0u), uint(6u)), 0u | (_GLF_IDENTITY(uint(6u), uint(6u)))))))) / uvec3(1u, 1u, 1u))))))))) + 0u, uint(uvec3((_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec3(_GLF_IDENTITY((subgroup_local_id + 1), (_GLF_IDENTITY((subgroup_local_id + 1), 0u + _GLF_IDENTITY(((subgroup_local_id + 1)), (((subgroup_local_id + 1))) >> 0u))) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x))) % subgroup_size, (1u ^ 0u), _GLF_IDENTITY((0u << _GLF_IDENTITY(_GLF_IDENTITY(uint(6u), uint(6u)), (_GLF_IDENTITY(uint(6u), uint(6u))) | (1u ^ 1u))), ((_GLF_IDENTITY(0u << _GLF_IDENTITY(_GLF_IDENTITY(uint(6u), uint(6u)), min(_GLF_IDENTITY(uint(6u), uint(6u)), _GLF_IDENTITY(uint(6u), uint(6u)))), (0u << _GLF_IDENTITY(uint(6u), uint(6u))) << uint(_GLF_ZERO(0.0, injectionSwitch.x))))) | ((_GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, (true ? 0u : _GLF_FUZZED(virtual_gid)))) / 1u)) * 1u) << _GLF_IDENTITY(uint(6u), uint(6u)))))), ~ (~ (uvec3((subgroup_local_id + _GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(756)))) % subgroup_size, (1u ^ 0u), (0u << _GLF_IDENTITY(_GLF_IDENTITY(uint(6u), uint(6u)), 0u | (_GLF_IDENTITY(uint(6u), uint(6u)))))))))), (false ? _GLF_FUZZED(_GLF_IDENTITY(workgroup_base, (_GLF_IDENTITY(workgroup_base, (workgroup_base) - 0u)) >> 0u)) : uint(_GLF_IDENTITY(uvec3((subgroup_local_id + 1) % subgroup_size, _GLF_IDENTITY((1u ^ _GLF_IDENTITY(0u, clamp(0u, 0u, _GLF_IDENTITY(0u, uint(uint(0u)))))), max((1u ^ _GLF_IDENTITY(0u, clamp(0u, 0u, _GLF_IDENTITY(0u, uint(uint(0u)))))), (1u ^ _GLF_IDENTITY(0u, clamp(0u, 0u, _GLF_IDENTITY(0u, uint(uint(0u)))))))), _GLF_IDENTITY((0u << _GLF_IDENTITY(_GLF_IDENTITY(uint(6u), uint(6u)), (_GLF_IDENTITY(_GLF_IDENTITY(uint(6u), uint(6u)), uint(uvec4(_GLF_IDENTITY(uint(6u), uint(6u)), 0u, 0u, 1u)))) | 0u)), ((0u << _GLF_IDENTITY(uint(6u), uint(6u)))) | (_GLF_IDENTITY((0u << _GLF_IDENTITY(_GLF_IDENTITY(uint(6u), (uint(6u)) * (_GLF_IDENTITY(_GLF_IDENTITY(1u ^ _GLF_IDENTITY(0u, ~ (~ (0u))), (1u ^ 0u) ^ (1u ^ 1u)), (_GLF_IDENTITY(_GLF_IDENTITY(1u ^ _GLF_IDENTITY(0u, ~ (~ (0u))), (1u ^ 0u) ^ (1u ^ 1u)), (_GLF_IDENTITY(1u ^ _GLF_IDENTITY(0u, ~ (~ (0u))), (1u ^ 0u) ^ (1u ^ 1u))) >> 0u)) | (_GLF_IDENTITY(1u ^ _GLF_IDENTITY(0u, ~ (~ (0u))), (1u ^ 0u) ^ (1u ^ 1u)))))), uint(6u))), (true ? (0u << _GLF_IDENTITY(_GLF_IDENTITY(uint(6u), (uint(6u)) * (_GLF_IDENTITY(_GLF_IDENTITY(1u ^ _GLF_IDENTITY(0u, ~ (~ (0u))), (_GLF_IDENTITY(1u ^ _GLF_IDENTITY(0u, ~ (~ (0u))), 0u | (1u ^ _GLF_IDENTITY(0u, ~ (~ (0u)))))) | (1u ^ _GLF_IDENTITY(0u, ~ (~ (0u))))), (1u ^ 0u) ^ (1u ^ 1u)))), uint(6u))) : _GLF_FUZZED(workgroup_base)))))), ~ (~ (uvec3((subgroup_local_id + 1) % subgroup_size, (1u ^ 0u), (0u << _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uint(6u), (uint(6u)) ^ 0u), uint(6u)), 0u | (_GLF_IDENTITY(uint(6u), uint(6u)))))))))))))) + 0u, 1u, 1u))), (_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec3(_GLF_IDENTITY((subgroup_local_id + 1), (_GLF_IDENTITY((subgroup_local_id + 1), 0u + ((subgroup_local_id + 1)))) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x))) % subgroup_size, (1u ^ 0u), _GLF_IDENTITY((0u << _GLF_IDENTITY(_GLF_IDENTITY(uint(6u), uint(6u)), (_GLF_IDENTITY(uint(6u), uint(6u))) | (_GLF_IDENTITY(1u ^ 1u, max(1u ^ 1u, 1u ^ 1u))))), ((_GLF_IDENTITY(0u << _GLF_IDENTITY(_GLF_IDENTITY(uint(6u), uint(6u)), min(_GLF_IDENTITY(uint(6u), uint(6u)), _GLF_IDENTITY(uint(6u), _GLF_IDENTITY(uint(6u), (true ? _GLF_IDENTITY(uint(6u), (uint(6u)) - 0u) : _GLF_FUZZED(virtual_gid)))))), (0u << _GLF_IDENTITY(uint(6u), uint(6u))) << uint(_GLF_ZERO(0.0, injectionSwitch.x))))) | ((_GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, (true ? 0u : _GLF_FUZZED(virtual_gid)))) / 1u)) * 1u) << _GLF_IDENTITY(uint(6u), uint(6u)))))), ~ (~ (uvec3((subgroup_local_id + _GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(756)))) % subgroup_size, (1u ^ 0u), (0u << _GLF_IDENTITY(_GLF_IDENTITY(uint(6u), uint(6u)), 0u | (_GLF_IDENTITY(uint(6u), uint(6u)))))))))), (false ? _GLF_FUZZED(_GLF_IDENTITY(workgroup_base, (_GLF_IDENTITY(workgroup_base, (workgroup_base) - 0u)) >> 0u)) : uint(_GLF_IDENTITY(uvec3((subgroup_local_id + 1) % subgroup_size, (1u ^ _GLF_IDENTITY(0u, clamp(0u, 0u, _GLF_IDENTITY(0u, uint(uint(0u)))))), _GLF_IDENTITY((0u << _GLF_IDENTITY(_GLF_IDENTITY(uint(6u), uint(6u)), (_GLF_IDENTITY(_GLF_IDENTITY(uint(6u), uint(6u)), uint(uvec4(_GLF_IDENTITY(uint(6u), uint(6u)), 0u, 0u, 1u)))) | 0u)), ((0u << _GLF_IDENTITY(uint(6u), uint(6u)))) | (_GLF_IDENTITY((0u << _GLF_IDENTITY(_GLF_IDENTITY(uint(6u), (uint(6u)) * (_GLF_IDENTITY(1u ^ _GLF_IDENTITY(0u, ~ (~ (0u))), (1u ^ 0u) ^ (1u ^ 1u)))), uint(6u))), (true ? (0u << _GLF_IDENTITY(_GLF_IDENTITY(uint(6u), (uint(6u)) * (_GLF_IDENTITY(1u ^ _GLF_IDENTITY(0u, ~ (~ (0u))), (1u ^ 0u) ^ (1u ^ 1u)))), uint(6u))) : _GLF_FUZZED(workgroup_base)))))), ~ (~ (uvec3((subgroup_local_id + 1) % subgroup_size, (1u ^ 0u), (0u << _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uint(6u), (uint(6u)) ^ 0u), uint(6u)), 0u | (_GLF_IDENTITY(uint(6u), uint(6u)))))))))))))) + 0u))));
 buf[virtual_gid] = 1;
 for(int _injected_loop_counter = (0 | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y))))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec3(! (false), true, false))))), true && (_GLF_IDENTITY(false, true && (false))))))
      return;
     do
      {
       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bool(_GLF_IDENTITY(true, (true) && true))))), ! (! _GLF_IDENTITY((_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bool(_GLF_IDENTITY(true, (true) && true)))))), (_GLF_IDENTITY((_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bool(_GLF_IDENTITY(true, (true) && true)))))), false || ((_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bool(_GLF_IDENTITY(true, (true) && true))))))))) && true))))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, _GLF_IDENTITY(true, (true) || false) && (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (injectionSwitch.x < injectionSwitch.y) && true)))))))) && (false)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, _GLF_IDENTITY(true, (true) || false) && (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (injectionSwitch.x < injectionSwitch.y) && true)))))))) && (false))), ! (! (! (_GLF_IDENTITY(false, _GLF_TRUE(true, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, _GLF_IDENTITY(true, (true) || false) && (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (injectionSwitch.x < injectionSwitch.y) && true)))))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, _GLF_IDENTITY(true, (true) || false) && (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (injectionSwitch.x < injectionSwitch.y) && true)))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, _GLF_IDENTITY(true, (true) || false) && (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (injectionSwitch.x < injectionSwitch.y) && true))))))), bool(bvec2(! (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, _GLF_IDENTITY(true, (true) || false) && (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (injectionSwitch.x < injectionSwitch.y) && true))))))), true)))))))))) && (false))))))))))
            {
             if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec2(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0), bool(bvec3(injectionSwitch.x > injectionSwitch.y, false, true))))))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))
              {
              }
             else
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 do
                  {
                   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 >> _GLF_IDENTITY(int(8), int(8)))); _injected_loop_counter --)
                    {
                     if(_GLF_DEAD(false))
                      return;
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_WRAPPED_IF_TRUE(true))
                        {
                         for(int _injected_loop_counter = (((1 | 1) << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                          {
                           if(_GLF_DEAD(false))
                            {
                             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 | 1)); _injected_loop_counter ++)
                              {
                               return;
                              }
                             if(_GLF_DEAD(false))
                              continue;
                            }
                          }
                         if(_GLF_WRAPPED_IF_TRUE(true))
                          {
                           return;
                           if(_GLF_DEAD(false))
                            break;
                          }
                         else
                          {
                          }
                        }
                       else
                        {
                        }
                       if(_GLF_DEAD(false))
                        continue;
                      }
                    }
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
               else
                {
                }
               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_WRAPPED_IF_TRUE(true))
                      {
                       return;
                      }
                     else
                      {
                      }
                    }
                  }
                 else
                  {
                  }
                }
               else
                {
                 if(_GLF_DEAD(false))
                  break;
                }
               do
                {
                 if(_GLF_DEAD(false))
                  break;
                 return;
                 if(_GLF_DEAD(false))
                  continue;
                 if(_GLF_DEAD(false))
                  continue;
                }
               while(_GLF_WRAPPED_LOOP(false));
               if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
                return;
              }
            }
          }
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        break;
      }
     while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x, mix(float(_GLF_FUZZED(9.3)), float(injectionSwitch.x), bool(true))) > injectionSwitch.y))), ! (! (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch), (true ? (injectionSwitch) : _GLF_FUZZED(vec2(-1.8, 9788.1841)))) * vec2(1.0, 1.0)), injectionSwitch)).x, mix(float(_GLF_FUZZED(9.3)), float(injectionSwitch.x), bool(true))) > injectionSwitch.y)))))));
     return;
    }
  }
 atomicStore(buf[next_virtual_gid], _GLF_IDENTITY(uint(2), _GLF_IDENTITY(0u, (0u) | (_GLF_IDENTITY(0u, (0u & 65904u) | (0u)))) ^ (uint(2))), 4, 64, 4);
}
