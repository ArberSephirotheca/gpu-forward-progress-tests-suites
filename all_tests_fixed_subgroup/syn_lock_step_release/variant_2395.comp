#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y))))))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, false || _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, false || (true))))), bool(bvec4(true, _GLF_IDENTITY(false, (false) || false), true, false)))), (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(true, bool(bvec4(true, _GLF_IDENTITY(false, (false) || false), true, false)))), bool(bvec3((_GLF_IDENTITY(true, bool(bvec4(true, _GLF_IDENTITY(false, (false) || false), true, false)))), false, false))), ! (! (_GLF_IDENTITY((_GLF_IDENTITY(true, bool(bvec4(true, _GLF_IDENTITY(false, (false) || false), true, false)))), bool(bvec3((_GLF_IDENTITY(true, bool(bvec4(true, _GLF_IDENTITY(false, (false) || false), true, false)))), false, false))))))) || false))))
      {
       if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true), (_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), true, false, false)))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         barrier();
        }
      }
     else
      {
      }
    }
   else
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) || false)))
      {
      }
     else
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-331.049), _GLF_FUZZED(8.9)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true)))) * vec2(1.0, 1.0)).y))))
        {
         barrier();
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
          }
         if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_DEAD(false), true, true))))
          return;
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, float(mat4(injectionSwitch.y, 1.0, 1.0, 1.0, sin(0.0), 1.0, 0.0, 0.0, 0.0, 1.0, determinant(mat2(1.0, 0.0, 1.0, 1.0)), 1.0, 0.0, 1.0, 1.0, 1.0)))), ((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, float(mat4(injectionSwitch.y, 1.0, 1.0, 1.0, sin(0.0), 1.0, 0.0, 0.0, 0.0, 1.0, determinant(mat2(1.0, 0.0, 1.0, 1.0)), 1.0, 0.0, 1.0, 1.0, 1.0))))) && true))))
            {
             barrier();
            }
           else
            {
            }
          }
        }
      }
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 uint subgroup_id = gl_SubgroupID;
uint subgroup_size = 16;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), _GLF_IDENTITY(true, _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(true, (true) && true)), ! (! (bool(_GLF_IDENTITY(_GLF_IDENTITY(true, (true) && true), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, (true) && true)), bool(bvec3(! (_GLF_IDENTITY(true, (true) && true)), true, true)))))))))), bool(bvec4(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(true, (true) && true)), ! (! (bool(_GLF_IDENTITY(true, (true) && true)))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, false)))) && (false)))))))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     barrier();
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
  barrier();
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, true, false)))))
  barrier();
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, true, true)))))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
  return;
 if(_GLF_DEAD(false))
  barrier();
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(false))
        return;
      }
     else
      {
       barrier();
      }
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       return;
      }
    }
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 uint workgroup_id = _GLF_IDENTITY(gl_WorkGroupID, ~ (~ (_GLF_IDENTITY(gl_WorkGroupID, (gl_WorkGroupID) ^ uvec3(0u, 0u, 0u))))).x;
 uint workgroup_base = workgroup_size * workgroup_id;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 uint virtual_gid = workgroup_base + _GLF_IDENTITY(subgroup_id, _GLF_IDENTITY(uint(uint(subgroup_id)), _GLF_IDENTITY((uint(uint(subgroup_id))), 0u ^ ((uint(uint(subgroup_id))))) << 0u)) * subgroup_size + subgroup_local_id;
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(_GLF_IDENTITY(mat3x2(_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY((false ? _GLF_FUZZED(-458.584) : injectionSwitch.x), _GLF_IDENTITY(min((false ? _GLF_FUZZED(-458.584) : injectionSwitch.x), (false ? _GLF_FUZZED(-458.584) : injectionSwitch.x)), 0.0 + (min((false ? _GLF_FUZZED(-458.584) : injectionSwitch.x), (false ? _GLF_FUZZED(-458.584) : injectionSwitch.x)))))), 0.0, 1.0, 0.0, 1.0, 0.0), (false ? _GLF_FUZZED(mat3x2(-709.428, 3512.9469, -753.004, 3.1, 63.36, -9022.5676)) : mat3x2(_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(_GLF_IDENTITY(-458.584, (-458.584) - 0.0)) : injectionSwitch.x)), 0.0, 1.0, 0.0, 1.0, 0.0)))), (float(_GLF_IDENTITY(mat3x2(_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY((false ? _GLF_FUZZED(_GLF_IDENTITY(-458.584, min(_GLF_IDENTITY(-458.584, _GLF_IDENTITY(min(-458.584, -458.584), mix(float(_GLF_FUZZED(-262.925)), float(_GLF_IDENTITY(min(-458.584, -458.584), max(min(-458.584, -458.584), min(-458.584, -458.584)))), bool(true)))), _GLF_IDENTITY(-458.584, float(mat3(-458.584, 0.0, 1.0, _GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(0.0, 0.0)), dot(vec2(1.0, 1.0), vec2(0.0, _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(389.409)), float(_GLF_IDENTITY(0.0, float(mat3(0.0, abs(1.0), 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0)))), bool(true)))))), 0.0, 1.0, _GLF_IDENTITY(1.0, (1.0) - 0.0), _GLF_IDENTITY(_GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(672.164))), max(_GLF_IDENTITY(0.0, min(0.0, _GLF_IDENTITY(0.0, max(0.0, 0.0)))), 0.0)), 0.0)))))) : injectionSwitch.x), clamp(_GLF_IDENTITY((false ? _GLF_FUZZED(_GLF_IDENTITY(-458.584, min(_GLF_IDENTITY(_GLF_IDENTITY(-458.584, (-458.584) / exp(_GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(0.0, 1.0)), dot(vec2(1.0, 0.0), vec2(0.0, 1.0))))), min(-458.584, -458.584)), _GLF_IDENTITY(-458.584, float(mat3(-458.584, 0.0, 1.0, _GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(0.0, 0.0)), _GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(0.0, 0.0)), float(mat2x4(dot(vec2(1.0, 1.0), vec2(0.0, 0.0)), 0.0, 1.0, 1.0, 0.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, 0.0))), 0.0, 1.0)))), 0.0, 1.0, 1.0, 0.0, 0.0)))))) : injectionSwitch.x), _GLF_IDENTITY(float(mat4x2((false ? _GLF_FUZZED(_GLF_IDENTITY(-458.584, min(_GLF_IDENTITY(_GLF_IDENTITY(-458.584, min(-458.584, -458.584)), clamp(_GLF_IDENTITY(-458.584, min(-458.584, -458.584)), _GLF_IDENTITY(_GLF_IDENTITY(-458.584, min(-458.584, -458.584)), abs(1.0) * (_GLF_IDENTITY(-458.584, min(_GLF_IDENTITY(-458.584, min(-458.584, -458.584)), -458.584)))), _GLF_IDENTITY(-458.584, min(-458.584, -458.584)))), _GLF_IDENTITY(-458.584, float(mat3(-458.584, 0.0, 1.0, _GLF_IDENTITY(dot(vec2(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, _GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, min(1.0, 1.0)), 1.0, 1.0)))), 1.0), vec2(0.0, 0.0)), dot(vec2(1.0, 1.0), vec2(0.0, 0.0))), 0.0, 1.0, 1.0, 0.0, 0.0)))))) : injectionSwitch.x), 1.0, 1.0, 1.0, 0.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), dot(_GLF_IDENTITY(vec3(1.0, 0.0, 0.0), clamp(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0), _GLF_IDENTITY(vec3(1.0, 0.0, 0.0), clamp(vec3(1.0, 0.0, 0.0), _GLF_IDENTITY(vec3(1.0, 0.0, 0.0), max(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0))), _GLF_IDENTITY(vec3(1.0, 0.0, 0.0), max(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0))))))), vec3(1.0, 0.0, 0.0))), 0.0, 0.0)), (float(mat4x2((_GLF_IDENTITY(false ? _GLF_FUZZED(_GLF_IDENTITY(-458.584, min(_GLF_IDENTITY(-458.584, min(-458.584, -458.584)), _GLF_IDENTITY(-458.584, float(mat3(_GLF_IDENTITY(_GLF_IDENTITY(-458.584, float(mat4(-458.584, 1.0, 0.0, 1.0, _GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-1648.7159)), bool(false))), log(1.0), 1.0, sqrt(1.0), 1.0, sqrt(1.0), 0.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, _GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, (0.0) * 1.0)) / _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, 1.0)), _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, 1.0)), mix(float(dot(vec2(0.0, 1.0), vec2(0.0, 1.0))), float(_GLF_FUZZED(6.7)), bool(false))))), 1.0))), max(_GLF_IDENTITY(-458.584, float(mat4(-458.584, 1.0, 0.0, 1.0, _GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-1648.7159)), bool(false))), log(1.0), 1.0, sqrt(1.0), 1.0, sqrt(1.0), 0.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, _GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, (0.0) * 1.0)) / _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, 1.0)), _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, 1.0)), mix(float(dot(vec2(0.0, 1.0), vec2(0.0, 1.0))), float(_GLF_FUZZED(6.7)), bool(false))))), 1.0))), _GLF_IDENTITY(-458.584, float(mat4(-458.584, 1.0, 0.0, 1.0, _GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-1648.7159)), bool(false))), log(1.0), 1.0, sqrt(1.0), 1.0, sqrt(1.0), 0.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, _GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, (0.0) * 1.0)) / _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, 1.0)), _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, 1.0)), mix(float(dot(vec2(0.0, 1.0), vec2(0.0, 1.0))), float(_GLF_FUZZED(6.7)), bool(false))))), 1.0))))), 0.0, 1.0, _GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(0.0, 0.0)), dot(vec2(1.0, 1.0), vec2(0.0, 0.0))), _GLF_IDENTITY(0.0, float(mat2x4(0.0, 0.0, 1.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0, 0.0))), 1.0, 1.0, 0.0, 0.0)))))) : injectionSwitch.x, max(false ? _GLF_FUZZED(_GLF_IDENTITY(-458.584, min(_GLF_IDENTITY(-458.584, min(-458.584, -458.584)), _GLF_IDENTITY(-458.584, float(mat3(_GLF_IDENTITY(_GLF_IDENTITY(-458.584, float(mat4(-458.584, 1.0, 0.0, 1.0, _GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-1648.7159)), bool(false))), log(1.0), 1.0, sqrt(1.0), 1.0, sqrt(1.0), 0.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, _GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, (0.0) * 1.0)) / _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, 1.0)), _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, 1.0)), mix(float(dot(vec2(0.0, 1.0), vec2(0.0, 1.0))), float(_GLF_FUZZED(6.7)), bool(false))))), 1.0))), clamp(_GLF_IDENTITY(-458.584, float(mat4(-458.584, 1.0, 0.0, 1.0, _GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-1648.7159)), bool(false))), log(1.0), 1.0, sqrt(1.0), 1.0, sqrt(1.0), 0.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, _GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, (0.0) * 1.0)) / _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, 1.0)), _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, 1.0)), mix(float(dot(vec2(0.0, 1.0), vec2(0.0, 1.0))), float(_GLF_FUZZED(6.7)), bool(false))))), 1.0))), _GLF_IDENTITY(-458.584, float(mat4(-458.584, 1.0, 0.0, 1.0, _GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-1648.7159)), bool(false))), log(1.0), 1.0, sqrt(1.0), 1.0, sqrt(1.0), 0.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, _GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, (0.0) * 1.0)) / _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, 1.0)), _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, 1.0)), mix(float(dot(vec2(0.0, 1.0), vec2(0.0, 1.0))), float(_GLF_FUZZED(6.7)), bool(false))))), 1.0))), _GLF_IDENTITY(-458.584, float(mat4(-458.584, 1.0, 0.0, 1.0, _GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-1648.7159)), bool(false))), log(1.0), 1.0, sqrt(1.0), 1.0, sqrt(1.0), 0.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, _GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, (0.0) * 1.0)) / _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, 1.0)), _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, 1.0)), mix(float(dot(vec2(0.0, 1.0), vec2(0.0, 1.0))), float(_GLF_FUZZED(6.7)), bool(false))))), 1.0))))), 0.0, 1.0, _GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(0.0, 0.0)), dot(vec2(1.0, 1.0), vec2(0.0, 0.0))), 0.0, 1.0, 1.0, 0.0, 0.0)))))) : injectionSwitch.x, _GLF_IDENTITY(false ? _GLF_FUZZED(_GLF_IDENTITY(-458.584, min(_GLF_IDENTITY(-458.584, min(-458.584, -458.584)), _GLF_IDENTITY(-458.584, float(mat3(_GLF_IDENTITY(-458.584, float(mat4(-458.584, 1.0, 0.0, 1.0, _GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-1648.7159)), bool(false))), log(1.0), 1.0, sqrt(1.0), 1.0, sqrt(1.0), 0.0, 0.0, _GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(5.7)))), 0.0, _GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, (0.0) * 1.0)) / _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, 1.0)), _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, 1.0)), mix(float(dot(vec2(0.0, 1.0), _GLF_IDENTITY(vec2(0.0, 1.0), vec2(mat2x3(vec2(0.0, 1.0), 1.0, 1.0, 1.0, 0.0))))), float(_GLF_FUZZED(6.7)), bool(false))))), 1.0))), 0.0, 1.0, _GLF_IDENTITY(dot(vec2(1.0, 1.0), _GLF_IDENTITY(vec2(0.0, 0.0), (false ? _GLF_FUZZED(vec2(2.8, -6535.6098)) : vec2(0.0, 0.0)))), dot(vec2(1.0, 1.0), vec2(0.0, 0.0))), 0.0, 1.0, 1.0, 0.0, 0.0)))))) : injectionSwitch.x, min(false ? _GLF_FUZZED(_GLF_IDENTITY(-458.584, min(_GLF_IDENTITY(-458.584, min(-458.584, -458.584)), _GLF_IDENTITY(-458.584, float(mat3(_GLF_IDENTITY(-458.584, float(mat4(-458.584, 1.0, 0.0, 1.0, _GLF_IDENTITY(0.0, mix(_GLF_IDENTITY(float(_GLF_IDENTITY(0.0, max(0.0, 0.0))), clamp(_GLF_IDENTITY(float(_GLF_IDENTITY(0.0, max(0.0, 0.0))), (false ? _GLF_FUZZED(-8.6) : float(_GLF_IDENTITY(0.0, max(0.0, 0.0))))), float(_GLF_IDENTITY(0.0, max(0.0, 0.0))), float(_GLF_IDENTITY(0.0, max(0.0, 0.0))))), float(_GLF_FUZZED(-1648.7159)), bool(false))), log(1.0), 1.0, sqrt(1.0), 1.0, sqrt(1.0), 0.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, _GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, (0.0) * 1.0)) / _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, 1.0)), _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, 1.0)), mix(float(dot(vec2(0.0, 1.0), vec2(0.0, 1.0))), float(_GLF_FUZZED(6.7)), bool(false))))), 1.0))), 0.0, 1.0, _GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(0.0, 0.0)), dot(vec2(1.0, 1.0), vec2(0.0, _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED((-747.625))), float(0.0), bool(true)))))), 0.0, 1.0, 1.0, 0.0, 0.0)))))) : injectionSwitch.x, false ? _GLF_FUZZED(_GLF_IDENTITY(-458.584, min(_GLF_IDENTITY(-458.584, min(-458.584, -458.584)), _GLF_IDENTITY(-458.584, float(mat3(_GLF_IDENTITY(-458.584, float(mat4(-458.584, 1.0, 0.0, 1.0, _GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-1648.7159)), bool(false))), log(1.0), 1.0, sqrt(1.0), 1.0, sqrt(1.0), 0.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, _GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, (0.0) * 1.0)) / _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, 1.0)), _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, 1.0)), mix(float(dot(vec2(0.0, 1.0), vec2(0.0, 1.0))), float(_GLF_FUZZED(6.7)), bool(false))))), 1.0))), 0.0, 1.0, _GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(0.0, 0.0)), dot(vec2(1.0, 1.0), vec2(0.0, 0.0))), 0.0, 1.0, 1.0, 0.0, 0.0)))))) : injectionSwitch.x))))), 1.0, _GLF_IDENTITY(1.0, min(_GLF_IDENTITY(_GLF_IDENTITY(1.0, float(mat4(1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, sqrt(1.0), 0.0, 0.0, 1.0))), clamp(_GLF_IDENTITY(1.0, float(mat4(1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, sqrt(1.0), 0.0, 0.0, 1.0))), _GLF_IDENTITY(1.0, float(mat4(1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, sqrt(1.0), 0.0, 0.0, 1.0))), _GLF_IDENTITY(_GLF_IDENTITY(1.0, float(mat4(1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, sqrt(1.0), 0.0, 0.0, 1.0))), (_GLF_IDENTITY(_GLF_IDENTITY(1.0, float(mat4(1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, sqrt(1.0), 0.0, 0.0, 1.0))), min(_GLF_IDENTITY(1.0, float(mat4(1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, sqrt(1.0), 0.0, 0.0, 1.0))), _GLF_IDENTITY(1.0, float(mat4(1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, sqrt(1.0), 0.0, 0.0, 1.0)))))) - 0.0))), 1.0)), 1.0, 0.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), dot(vec3(1.0, 0.0, _GLF_IDENTITY(0.0, min(0.0, _GLF_IDENTITY(0.0, (0.0) * 1.0)))), vec3(1.0, 0.0, 0.0))), 0.0, 0.0))) / 1.0)), (_GLF_IDENTITY(false ? _GLF_FUZZED(_GLF_IDENTITY(-458.584, min(_GLF_IDENTITY(-458.584, min(-458.584, -458.584)), _GLF_IDENTITY(-458.584, float(mat3(-458.584, 0.0, 1.0, _GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(0.0, 0.0)), dot(vec2(1.0, 1.0), vec2(0.0, 0.0))), 0.0, 1.0, 1.0, 0.0, 0.0)))))) : injectionSwitch.x, (false ? _GLF_FUZZED(_GLF_IDENTITY(-458.584, min(_GLF_IDENTITY(-458.584, min(-458.584, -458.584)), _GLF_IDENTITY(-458.584, float(mat3(-458.584, 0.0, 1.0, _GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(0.0, 0.0)), dot(vec2(1.0, 1.0), vec2(0.0, 0.0))), 0.0, 1.0, 1.0, 0.0, _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(7514.7881)), float(0.0), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))))) : injectionSwitch.x) + 0.0)), (false ? _GLF_FUZZED(_GLF_IDENTITY(-458.584, min(_GLF_IDENTITY(_GLF_IDENTITY(-458.584, (-458.584) * 1.0), min(-458.584, -458.584)), _GLF_IDENTITY(-458.584, float(_GLF_IDENTITY(mat3(-458.584, 0.0, 1.0, _GLF_IDENTITY(dot(_GLF_IDENTITY(vec2(1.0, 1.0), max(vec2(1.0, 1.0), _GLF_IDENTITY(vec2(1.0, 1.0), clamp(vec2(1.0, 1.0), vec2(1.0, 1.0), vec2(1.0, 1.0))))), vec2(0.0, 0.0)), dot(_GLF_IDENTITY(vec2(1.0, 1.0), clamp(vec2(1.0, 1.0), _GLF_IDENTITY(vec2(1.0, 1.0), (vec2(1.0, 1.0)) + _GLF_IDENTITY(vec2(0.0, 0.0), min(_GLF_IDENTITY(vec2(0.0, 0.0), vec2(1.0, 1.0) * (vec2(0.0, 0.0))), vec2(0.0, 0.0)))), vec2(1.0, 1.0))), vec2(0.0, 0.0))), 0.0, 1.0, 1.0, 0.0, 0.0), (mat3(-458.584, 0.0, 1.0, _GLF_IDENTITY(dot(_GLF_IDENTITY(vec2(1.0, 1.0), max(vec2(1.0, 1.0), _GLF_IDENTITY(vec2(1.0, 1.0), clamp(vec2(1.0, 1.0), vec2(1.0, 1.0), vec2(1.0, 1.0))))), vec2(0.0, 0.0)), dot(_GLF_IDENTITY(vec2(1.0, 1.0), clamp(vec2(1.0, 1.0), _GLF_IDENTITY(vec2(1.0, 1.0), (vec2(1.0, 1.0)) + _GLF_IDENTITY(vec2(0.0, 0.0), min(_GLF_IDENTITY(vec2(0.0, 0.0), vec2(1.0, 1.0) * (vec2(0.0, 0.0))), vec2(0.0, 0.0)))), vec2(1.0, 1.0))), vec2(0.0, 0.0))), 0.0, 1.0, 1.0, 0.0, 0.0)) + mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))))))) : injectionSwitch.x)))), 0.0, 1.0, 0.0, 1.0, 0.0), (false ? _GLF_FUZZED(mat3x2(-709.428, 3512.9469, -753.004, 3.1, 63.36, -9022.5676)) : mat3x2(_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(-458.584) : _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat4x2(injectionSwitch, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0)), max(vec2(mat4x2(injectionSwitch, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0)), vec2(mat4x2(injectionSwitch, 0.0, _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-4.7)), float(0.0), bool(true))), _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(-9.8) : _GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(acos(4.5)))))), 1.0, 0.0, 1.0))))).x)), 0.0, 1.0, 0.0, 1.0, 0.0))))) - 0.0))) / exp(0.0)) > injectionSwitch.y)), bool(bool(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1]))[0], injectionSwitch[_GLF_IDENTITY(1, (1) >> 0)])))).x, clamp(_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])))).x, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1]))[1]), (vec2(injectionSwitch[0], _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), clamp(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1]))))[1])) * vec2(1.0, 1.0)))), mix(vec2(((_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[_GLF_IDENTITY(0, _GLF_IDENTITY(0 + (_GLF_IDENTITY(0, (0) ^ 0)), (0 + (_GLF_IDENTITY(0, (0) ^ 0))) ^ 0))], injectionSwitch[1]))))[0], _GLF_FUZZED(-7.5)), vec2(_GLF_FUZZED(-1.5), ((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1]))) - vec2(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)))))[1]), bvec2(false, true)))).x, clamp(_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(_GLF_IDENTITY(injectionSwitch[0], (injectionSwitch[0]) + 0.0), _GLF_IDENTITY(injectionSwitch[1], 1.0 * (injectionSwitch[1]))), min(vec2(_GLF_IDENTITY(injectionSwitch[_GLF_IDENTITY(0, (0) | (0))], _GLF_IDENTITY((injectionSwitch[0]) + 0.0, mix(float(_GLF_IDENTITY((injectionSwitch[0]) + 0.0, 0.0 + (_GLF_IDENTITY((injectionSwitch[0]) + 0.0, min((injectionSwitch[0]) + 0.0, (injectionSwitch[0]) + 0.0))))), float(_GLF_FUZZED(-5.0)), bool(false)))), _GLF_IDENTITY(injectionSwitch[1], (_GLF_IDENTITY(injectionSwitch[1], (injectionSwitch[_GLF_IDENTITY(1, (0 >> _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), min(int(0), int(0))))) | (_GLF_IDENTITY(1, (true ? _GLF_IDENTITY(1, (1) << 0) : _GLF_FUZZED(86320)))))]) + determinant(mat3(0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0)))) / 1.0)), vec2(_GLF_IDENTITY(injectionSwitch[0], (injectionSwitch[0]) + _GLF_IDENTITY(0.0, clamp(_GLF_IDENTITY(0.0, (0.0) / 1.0), _GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(96.18)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), _GLF_IDENTITY(0.0, tan(0.0) + (0.0))))), injectionSwitch[_GLF_IDENTITY(1, max(1, _GLF_IDENTITY(1, int(ivec2(1, 0)))))]))))), ((_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(_GLF_IDENTITY(injectionSwitch[0], (injectionSwitch[0]) + 0.0), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch[1], 1.0 * (injectionSwitch[1])), 0.0 + (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch[1], 1.0 * (injectionSwitch[1])), float(mat2x3(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch[1], 1.0 * (injectionSwitch[1])), 1.0 * (_GLF_IDENTITY(injectionSwitch[1], 1.0 * (injectionSwitch[1])))), 1.0, tan(0.0), 0.0, 1.0, 0.0)))))), min(vec2(_GLF_IDENTITY(injectionSwitch[0], _GLF_IDENTITY((injectionSwitch[0]) + 0.0, mix(float(_GLF_IDENTITY((injectionSwitch[0]) + 0.0, 0.0 + (_GLF_IDENTITY((injectionSwitch[0]) + 0.0, min((injectionSwitch[0]) + 0.0, (injectionSwitch[0]) + 0.0))))), float(_GLF_FUZZED(-5.0)), bool(false)))), _GLF_IDENTITY(injectionSwitch[1], (_GLF_IDENTITY(injectionSwitch[1], (injectionSwitch[1]) + determinant(mat3(0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0)))) / 1.0)), vec2(_GLF_IDENTITY(injectionSwitch[0], (injectionSwitch[0]) + _GLF_IDENTITY(0.0, clamp(_GLF_IDENTITY(0.0, (0.0) / 1.0), 0.0, _GLF_IDENTITY(0.0, tan(0.0) + (0.0))))), injectionSwitch[_GLF_IDENTITY(1, max(1, _GLF_IDENTITY(1, int(ivec2(1, 0)))))])))))) + vec2(0.0, 0.0))).x, _GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], clamp(injectionSwitch[1], injectionSwitch[1], injectionSwitch[1])))))).x, _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(1.0, 1.0) * (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1]))), mix(vec2((vec2(1.0, 1.0) * (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1]))))[0], _GLF_FUZZED(3069.3421)), vec2(_GLF_FUZZED((4.7 - 57.17)), (_GLF_IDENTITY(vec2(1.0, 1.0), min(vec2(1.0, 1.0), vec2(1.0, 1.0))) * (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1]))))[1]), bvec2(_GLF_IDENTITY(false, true && (false)), true)))).x)), _GLF_IDENTITY(injectionSwitch, vec2(1.0, _GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, _GLF_IDENTITY((1.0) - 0.0, _GLF_IDENTITY(float(vec3((1.0) - 0.0, 1.0, cos(0.0))), (float(vec3((1.0) - 0.0, 1.0, cos(0.0)))) + 0.0))), 1.0))) * (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(-7.3, -8.0)))), vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch))[1])))).x)) > injectionSwitch.y)))))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     do
      {
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bool(false)))));
    }
   else
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     else
      {
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bool(bvec2(bool(bvec2(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false)))), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))))))))))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     do
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0)))));
    }
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       do
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
       barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_DEAD(false))
  {
   do
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
   return;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     barrier();
    }
   else
    {
    }
  }
 uint next_virtual_gid = workgroup_base + subgroup_id * subgroup_size + (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id + 1, 0u ^ (subgroup_local_id + 1))), max((_GLF_IDENTITY(subgroup_local_id + _GLF_IDENTITY(1, _GLF_IDENTITY(int(ivec2(_GLF_IDENTITY(1, ~ (~ (_GLF_IDENTITY(1, (1) | 0)))), 0)), clamp(int(ivec2(_GLF_IDENTITY(1, ~ (~ (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, min(_GLF_IDENTITY(1, min(1, 1)), 1))) | 0)))), 0)), _GLF_IDENTITY(int(ivec2(_GLF_IDENTITY(1, ~ (~ (_GLF_IDENTITY(1, (1) | 0)))), 0)), (int(ivec2(_GLF_IDENTITY(1, ~ (~ (_GLF_IDENTITY(1, (1) | 0)))), 0))) / 1), int(ivec2(_GLF_IDENTITY(1, ~ (~ (_GLF_IDENTITY(1, (1) | 0)))), 0))))), _GLF_IDENTITY(0u, max(_GLF_IDENTITY(0u, _GLF_IDENTITY(uint(uvec2(0u, (0u | 0u))), (uint(uvec2(0u, (0u | 0u)))) / 1u)), 0u)) ^ (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, ~ (~ (subgroup_local_id))), (_GLF_IDENTITY(0u, max(_GLF_IDENTITY(0u, (0u) >> 0u), _GLF_IDENTITY(0u, uint(uvec3(0u, 1u, 0u))))) << _GLF_IDENTITY(uint(3u), _GLF_IDENTITY(uint(3u), (uint(3u)) + 0u))) ^ (subgroup_local_id)) + 1))), _GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id + 1, 0u ^ (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | (0u | 0u)) + 1))), clamp((_GLF_IDENTITY(subgroup_local_id + 1, 0u ^ (subgroup_local_id + 1))), (_GLF_IDENTITY(subgroup_local_id + 1, 0u ^ (subgroup_local_id + 1))), (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, _GLF_IDENTITY(uint(uvec3(subgroup_local_id + 1, 0u, 0u)), ~ (~ (uint(uvec3(subgroup_local_id + 1, 0u, 0u)))))), 0u ^ (subgroup_local_id + 1))))))) % subgroup_size);
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   for(int _injected_loop_counter = (_GLF_IDENTITY((1 ^ 0), 1 * ((1 ^ 0))) ^ 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((0 ^ 1) ^ int(_GLF_ZERO(0.0, injectionSwitch.x)))); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        break;
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), (! ((injectionSwitch.x > injectionSwitch.y))) || false))))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
        return;
       if(_GLF_DEAD(false))
        break;
       barrier();
      }
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = (0 ^ ((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4)))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
        {
         barrier();
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
  }
 else
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) && true)))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
        return;
       barrier();
      }
    }
  }
 if(_GLF_DEAD(false))
  return;
 buf[virtual_gid] = _GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(1, 0 | (1))));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)))).x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))))))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) && true)), bool(bvec4(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bool(bvec2(! (! (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, (true ? _GLF_IDENTITY(injectionSwitch.x, float(vec2(injectionSwitch.x, 0.0))) : _GLF_FUZZED(-365.725))), injectionSwitch.x)) > injectionSwitch.y)), bool(bool(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(true, bool(bvec3(true, false, _GLF_IDENTITY(true, (true) && true)))) ? _GLF_IDENTITY(injectionSwitch.x, float(vec2(injectionSwitch.x, 0.0))) : _GLF_FUZZED(-365.725))), injectionSwitch.x)) > injectionSwitch.y))))))), true)))), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y, _GLF_IDENTITY(bool(bool(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch))) / vec2(1.0, 1.0)).y, injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y)))), false || (bool(bool(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y, injectionSwitch.y)), injectionSwitch.y))))))))), true, false)))))
  {
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(8.0)), bool(false)))))))
        barrier();
       barrier();
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     do
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, float(float(injectionSwitch.x))) < injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
         barrier();
        }
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   else
    {
    }
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     return;
    }
   else
    {
    }
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(! (_GLF_IDENTITY(! (false), bool(bool(! (false))))), bool(bvec4(_GLF_IDENTITY(! (_GLF_IDENTITY(! (false), bool(bool(! (false))))), ! (! (! (_GLF_IDENTITY(! (false), bool(bool(! (false)))))))), true, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, false || (false)))))))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     barrier();
    }
  }
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       barrier();
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || _GLF_IDENTITY(false, ! _GLF_IDENTITY((! (false)), bool(bvec4(_GLF_IDENTITY((! (false)), bool(bool((! (false))))), false, _GLF_IDENTITY(true, true && (true)), false)))))))
        barrier();
       do
        {
         for(int _injected_loop_counter = (_GLF_IDENTITY(_GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, max(0, _GLF_IDENTITY(0, (0) | (0)))))), (_GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, max(0, _GLF_IDENTITY(0, (0) | (0))))))) | 0) << _GLF_IDENTITY(int(7), int(7))); _GLF_WRAPPED_LOOP(_injected_loop_counter < (((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(6)) | _GLF_IDENTITY((int(6)), (false ? _GLF_FUZZED((++ _injected_loop_counter)) : _GLF_IDENTITY((int(6)), ((int(6))) << 0)))))) & 1)); _GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) << (48581 & 0)))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), true && (_GLF_IDENTITY(! (false), (_GLF_IDENTITY(! (false), (! (false)) && true)) && true)))))))
            barrier();
           barrier();
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           barrier();
          }
         else
          {
          }
        }
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), ! (! (! (_GLF_DEAD(false)))))))))))
        barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, 1.0 * (injectionSwitch.y))))))
        barrier();
      }
     else
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat2x3(injectionSwitch, 0.0, exp(0.0), 0.0, 1.0), mat3(1.0) * (mat2x3(injectionSwitch, 0.0, exp(0.0), 0.0, 1.0))))).y))))
          barrier();
         barrier();
        }
       do
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(0, 0 | (_GLF_IDENTITY(0, _GLF_IDENTITY((0), ((0)) << 0) | (0))))), _GLF_IDENTITY(int(_GLF_IDENTITY(0, _GLF_IDENTITY((0), (_GLF_IDENTITY((0), clamp((0), (0), (0)))) / 1) - 0)), _GLF_IDENTITY(_GLF_IDENTITY(int(ivec2(int(0), 0)), int(_GLF_IDENTITY(ivec4(int(ivec2(int(0), 0)), 1, 0, 0), (ivec4(int(ivec2(int(0), 0)), 1, 0, _GLF_IDENTITY(0, _GLF_IDENTITY(int(ivec4(0, 1, 0, (0 << _GLF_IDENTITY(int(3), int(_GLF_IDENTITY(3, (_GLF_IDENTITY(3, 0 | (_GLF_IDENTITY(3, min(3, 3))))) / 1)))))), (int(ivec4(0, 1, 0, (0 << _GLF_IDENTITY(_GLF_IDENTITY(int(3), (_GLF_IDENTITY(int(3), _GLF_IDENTITY((_GLF_IDENTITY(int(3), (true ? int(3) : _GLF_FUZZED(-42961)))), (true ? (_GLF_IDENTITY(int(3), (true ? int(3) : _GLF_FUZZED(-42961)))) : _GLF_FUZZED(53798))) | (int(3)))) >> 0), int(_GLF_IDENTITY(3, max(3, 3)))))))) >> 0)))) - ivec4(0, 0, 0, 0)))), (_GLF_IDENTITY(int(_GLF_IDENTITY(ivec2(int(0), 0), ivec2(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), clamp(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(924.629) : _GLF_ZERO(0.0, injectionSwitch.x)))))) ^ _GLF_IDENTITY((ivec2(int(0), 0)), ivec2(1, 1) * ((ivec2(int(0), 0)))))), int(_GLF_IDENTITY(_GLF_IDENTITY(ivec4(int(ivec2(int(0), 0)), 1, 0, 0), (ivec4(int(ivec2(int(0), 0)), 1, 0, _GLF_IDENTITY(0, _GLF_IDENTITY(int(ivec4(0, 1, 0, (0 << _GLF_IDENTITY(int(3), int(3))))), (int(ivec4(0, 1, 0, (0 << _GLF_IDENTITY(int(3), int(3)))))) >> 0)))) - ivec4(0, 0, 0, 0)), (_GLF_IDENTITY(ivec4(_GLF_IDENTITY(int(ivec2(int(0), 0)), (int(ivec2(int(0), 0))) / int(_GLF_ONE(1.0, injectionSwitch.y))), 1, 0, 0), (ivec4(_GLF_IDENTITY(int(ivec2(int(_GLF_IDENTITY(0, (0) >> 0)), 0)), clamp(int(ivec2(int(0), 0)), int(ivec2(int(0), 0)), int(ivec2(int(0), 0)))), 1, 0, _GLF_IDENTITY(0, _GLF_IDENTITY(int(ivec4(0, 1, 0, (0 << _GLF_IDENTITY(int(3), int(_GLF_IDENTITY(3, _GLF_IDENTITY(int(ivec4(3, 0, 0, 0)), max(_GLF_IDENTITY(int(ivec4(3, 0, 0, 0)), 0 ^ (_GLF_IDENTITY(int(ivec4(3, 0, 0, 0)), ~ (~ (int(ivec4(3, 0, 0, 0))))))), int(ivec4(_GLF_IDENTITY(3, ~ (~ (3))), 0, 0, 0)))))))))), (int(ivec4(0, 1, 0, (0 << _GLF_IDENTITY(int(3), int(3)))))) >> 0)))) - ivec4(0, 0, 0, 0))) * ivec4(1, 1, 1, 1))))) ^ 0)))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, clamp(_GLF_IDENTITY(_injected_loop_counter, 1 * (_injected_loop_counter)), _GLF_IDENTITY(_injected_loop_counter, (true ? _injected_loop_counter : _GLF_FUZZED(bitCount(ivec3(79710, -62722, _GLF_IDENTITY(3189, (3189) / 1)))[0]))), _injected_loop_counter)) != 0); _injected_loop_counter --)
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               barrier();
              }
             else
              {
              }
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(-129.520)), vec2(_GLF_FUZZED(5.7), (injectionSwitch)[1]), bvec2(false, true))).y))));
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))))))
      barrier();
     barrier();
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch)))[1])).x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_DEAD(false), true, false))))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), bool(bvec3(_GLF_WRAPPED_IF_FALSE(false), false, false))))
        {
        }
       else
        {
         for(int _injected_loop_counter = _GLF_IDENTITY(int(_GLF_ZERO(_GLF_IDENTITY(0.0, clamp(0.0, _GLF_IDENTITY(0.0, float(vec2(0.0, 0.0))), 0.0)), injectionSwitch.x)), 1 * (int(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), mix(float(_GLF_ZERO(0.0, injectionSwitch.x)), float(_GLF_FUZZED(-3.9)), bool(false)))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _GLF_IDENTITY(_injected_loop_counter ++, 0 + (_GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) + 0))))
          {
           barrier();
          }
        }
      }
     barrier();
    }
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
        barrier();
       barrier();
       if(_GLF_DEAD(false))
        return;
      }
    }
   else
    {
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bool(! (false))))))) && true)))
    barrier();
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), false || (! (false))))), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), false || (! (false))))), true)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), false || (! (false))))), true)), (bool(bvec2(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), false || (! (false))))), true))) && true)), (! (_GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), false || (! (false))))), true)), (bool(bvec2(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), false || (! (false))))), true))) && true))) || false)))), (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, true && (false))));
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(mat4(injectionSwitch.x, 1.0, 1.0, 0.0, 1.0, determinant(mat2(1.0, 0.0, 0.0, 1.0)), 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0))) > injectionSwitch.y)), false))), false || (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-132.652)), float(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0)), bool(true))) > injectionSwitch.y)), false || (_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0), mix(_GLF_IDENTITY(float(_GLF_FUZZED(-132.652)), float(_GLF_IDENTITY(vec3(float(_GLF_FUZZED(-132.652)), 1.0, sin(0.0)), vec3(mat3(vec3(float(_GLF_FUZZED(-132.652)), 1.0, sin(0.0)), 1.0, 1.0, 1.0, length(vec2(0.0, 0.0)), 0.0, 0.0))))), float(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0)), bool(true))) > injectionSwitch.y)))), bool(bvec2(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(mat4(injectionSwitch.x, 1.0, 1.0, 0.0, 1.0, determinant(mat2(1.0, 0.0, 0.0, 1.0)), 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0))) > injectionSwitch.y)), false)))))))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         barrier();
        }
      }
     return;
    }
   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), true && (_GLF_WRAPPED_IF_TRUE(true))))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(2.8)), bool(false)))))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
   else
    {
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   else
    {
    }
   for(int _injected_loop_counter = _GLF_IDENTITY(1, max(1, 1)); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY((_GLF_IDENTITY(0, clamp(0, 0, _GLF_IDENTITY(0, min(0, _GLF_IDENTITY(0, (0) * (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(7), int(7))), (0 ^ 0) ^ ((1 << _GLF_IDENTITY(int(7), int(7))))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(7), (_GLF_IDENTITY(int(7), (int(7)) / 1)) - 0), int(7)))))))) >> _GLF_IDENTITY(int(0), int(0))), clamp(_GLF_IDENTITY((0 >> _GLF_IDENTITY(int(0), int(0))), ((0 >> _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (int(0)) >> 0)))) | 0), (0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(0), (int(0)) << 0), int(0))), (_GLF_IDENTITY(0 >> _GLF_IDENTITY(int(0), int(0)), (0 >> _GLF_IDENTITY(int(0), int(0))) << int(_GLF_ZERO(0.0, injectionSwitch.x))))))); _injected_loop_counter --)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(mix(float(injectionSwitch.x), float(_GLF_FUZZED(-444.978)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), clamp(mix(float(injectionSwitch.x), float(_GLF_FUZZED(-444.978)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), mix(float(injectionSwitch.x), float(_GLF_FUZZED(-444.978)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), _GLF_IDENTITY(mix(float(injectionSwitch.x), float(_GLF_FUZZED(-444.978)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), max(mix(float(injectionSwitch.x), float(_GLF_FUZZED(-444.978)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), mix(float(injectionSwitch.x), float(_GLF_FUZZED(-444.978)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))) > injectionSwitch.y, bool(bvec2(injectionSwitch.x > injectionSwitch.y, true)))), (_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(1.9)), float(injectionSwitch.y), bool(true))), injectionSwitch.y))), true && (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))), bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(1.9)), float(injectionSwitch.y), bool(true))), injectionSwitch.y))), true && (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))), ! (! (_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(1.9)), float(injectionSwitch.y), bool(true))), injectionSwitch.y))), true && (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))), ! (! ((injectionSwitch.x > injectionSwitch.y))))))))), true && (_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(5431.2673)), vec2(_GLF_FUZZED(vec3(8790.5056, -4.5, -3.4).p), (injectionSwitch)[1]), bvec2(false, true))).y, _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(1.9)), float(injectionSwitch.y), bool(true))), injectionSwitch.y))), true && (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))))), true, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))) || false))))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, ~ (~ (_injected_loop_counter))) != _GLF_IDENTITY((0 & -99669), _GLF_IDENTITY(max(_GLF_IDENTITY((0 & -99669), min((0 & -99669), (0 & -99669))), (0 & -99669)), ~ (~ (max(_GLF_IDENTITY((0 & -99669), min((0 & -99669), (0 & -99669))), (0 & -99669))))))); _injected_loop_counter --)
        {
         return;
        }
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, false, false), bvec3(bvec4(bvec3(false, false, false), false))))), true, true, true))), (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       barrier();
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
   atomicStore(buf[_GLF_IDENTITY(next_virtual_gid, _GLF_IDENTITY(uint(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (next_virtual_gid), 0u | (uint(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (next_virtual_gid))))], uint(2), 4, 64, 4);
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, true, true, false)), _GLF_IDENTITY(false || (bool(bvec4(false, true, true, false))), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(false || (bool(bvec4(false, true, true, false))), false || (false || (bool(bvec4(false, true, true, false))))), true)), (bool(bvec2(_GLF_IDENTITY(false || (bool(bvec4(false, true, true, false))), false || (false || (bool(bvec4(false, true, true, false))))), true))) || false))))))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(true && (false), ! (! (true && (_GLF_IDENTITY(false, bool(bool(false))))))))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
          barrier();
        }
       else
        {
         do
          {
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), (_GLF_IDENTITY(false, false || (false))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))));
        }
       do
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)), max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)), vec2(vec3(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)), 0.0))), _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)))).y))))
          {
           if(_GLF_DEAD(false))
            barrier();
           return;
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, false || (false))));
       barrier();
      }
    }
   else
    {
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, true && (false))), (! (_GLF_IDENTITY(false, true && (false)))) || false)))))
    barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((false ? _GLF_FUZZED(min(-1510.4141, -839.418)) : _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-2346.2438)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), mix(float(_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-2346.2438)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), float(_GLF_FUZZED(-5.6)), bool(false)))), mix(float((false ? _GLF_FUZZED(min(-1510.4141, -839.418)) : _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-2346.2438)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), mix(float(_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-2346.2438)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), float(_GLF_FUZZED(-5.6)), bool(false))))), float(_GLF_FUZZED(vec3(396.824, 2.0, 8.7).r)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), _GLF_IDENTITY(float(mat2(_GLF_IDENTITY((false ? _GLF_FUZZED(min(-1510.4141, -839.418)) : _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-2346.2438)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), mix(float(_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-2346.2438)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), float(_GLF_FUZZED(-5.6)), bool(false)))), mix(float((false ? _GLF_FUZZED(min(-1510.4141, -839.418)) : _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-2346.2438)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), mix(float(_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-2346.2438)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), float(_GLF_FUZZED(-5.6)), bool(false))))), float(_GLF_FUZZED(vec3(396.824, 2.0, 8.7).r)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), 0.0, 0.0, 0.0)), max(float(mat2(_GLF_IDENTITY((false ? _GLF_FUZZED(min(-1510.4141, -839.418)) : _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-2346.2438)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), mix(float(_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-2346.2438)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), float(_GLF_FUZZED(-5.6)), bool(false)))), mix(float((false ? _GLF_FUZZED(min(-1510.4141, -839.418)) : _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-2346.2438)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), mix(float(_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-2346.2438)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), float(_GLF_FUZZED(-5.6)), bool(false))))), float(_GLF_FUZZED(vec3(396.824, 2.0, 8.7).r)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), 0.0, 0.0, 0.0)), float(mat2(_GLF_IDENTITY((false ? _GLF_FUZZED(min(-1510.4141, -839.418)) : _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-2346.2438)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), mix(float(_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-2346.2438)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), float(_GLF_FUZZED(-5.6)), bool(false)))), mix(float((false ? _GLF_FUZZED(min(-1510.4141, -839.418)) : _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-2346.2438)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), mix(float(_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-2346.2438)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), float(_GLF_FUZZED(-5.6)), bool(false))))), float(_GLF_FUZZED(vec3(396.824, 2.0, 8.7).r)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), 0.0, 0.0, 0.0))))), float(mat2x4(_GLF_IDENTITY((false ? _GLF_FUZZED(min(-1510.4141, -839.418)) : _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-2346.2438)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), mix(float(_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-2346.2438)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), float(_GLF_FUZZED(-5.6)), bool(false)))), mix(float((false ? _GLF_FUZZED(min(-1510.4141, -839.418)) : _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-2346.2438)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), mix(float(_GLF_IDENTITY(injectionSwitch.x, mix(_GLF_IDENTITY(float(injectionSwitch.x), mix(float(_GLF_FUZZED(-6.6)), float(float(injectionSwitch.x)), bool(true))), float(_GLF_FUZZED(-2346.2438)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), float(_GLF_FUZZED(-5.6)), bool(false))))), float(_GLF_FUZZED(vec3(396.824, 2.0, 8.7).r)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0)))) > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(_GLF_ONE(1.0, injectionSwitch.y)), (false ? _GLF_FUZZED(injectionSwitch) : (injectionSwitch) * mat2(_GLF_ONE(1.0, injectionSwitch.y))))), abs(vec2(0.0, 0.0)) + (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(_GLF_ONE(1.0, injectionSwitch.y)), (false ? _GLF_FUZZED(injectionSwitch) : (injectionSwitch) * mat2(_GLF_ONE(1.0, injectionSwitch.y))))), mix(vec2(_GLF_FUZZED(-1.3), _GLF_FUZZED(-2078.1824)), vec2(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(_GLF_ONE(1.0, injectionSwitch.y)), (false ? _GLF_FUZZED(injectionSwitch) : (injectionSwitch) * mat2(_GLF_ONE(1.0, injectionSwitch.y))))))[0], min((_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(_GLF_ONE(1.0, injectionSwitch.y)), (false ? _GLF_FUZZED(injectionSwitch) : (injectionSwitch) * mat2(_GLF_ONE(1.0, injectionSwitch.y))))))[0], (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(_GLF_ONE(1.0, injectionSwitch.y)), (false ? _GLF_FUZZED(injectionSwitch) : (injectionSwitch) * mat2(_GLF_ONE(1.0, injectionSwitch.y))))))[0])), (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(_GLF_ONE(1.0, injectionSwitch.y)), (false ? _GLF_FUZZED(injectionSwitch) : (injectionSwitch) * mat2(_GLF_ONE(1.0, injectionSwitch.y))))))[1]), bvec2(true, true))))).y))))))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     barrier();
    }
   else
    {
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), (true ? int(7) : _GLF_FUZZED(-68827))))) >> _GLF_IDENTITY(int(7), int(7))); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), bool(bvec4(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), false, true, false))); _GLF_IDENTITY(_injected_loop_counter --, (_GLF_IDENTITY(_injected_loop_counter --, ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (_injected_loop_counter --), (~ (_injected_loop_counter --)) << 0), (true ? _GLF_IDENTITY(_GLF_IDENTITY(~ (_injected_loop_counter --), (~ (_injected_loop_counter --)) << 0), (_GLF_IDENTITY(_GLF_IDENTITY(~ (_injected_loop_counter --), (~ (_injected_loop_counter --)) << 0), (true ? _GLF_IDENTITY(~ (_injected_loop_counter --), (_GLF_IDENTITY(~ (_injected_loop_counter --), (~ (_injected_loop_counter --)) >> 0)) << 0) : _GLF_FUZZED(-86556)))) - 0) : _GLF_FUZZED(57055)))))) >> 0))
      {
       barrier();
      }
    }
   return;
   for(int _injected_loop_counter = (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), _GLF_IDENTITY(~ (~ (int(7))), (~ (~ (int(7)))) >> 0)))), max((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), _GLF_IDENTITY(~ (~ (int(7))), (~ (~ (int(7)))) >> 0))), (_GLF_IDENTITY(_GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), _GLF_IDENTITY(~ (~ (int(7))), (~ (~ (int(7)))) >> 0))), (1 ^ 0) * (_GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), _GLF_IDENTITY(~ (~ (int(7))), (~ (~ (int(7)))) >> 0)))))) - 0)), _GLF_IDENTITY((1 << _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), _GLF_IDENTITY(~ _GLF_IDENTITY((~ (_GLF_IDENTITY(int(7), (int(7)) - 0))), ((~ (_GLF_IDENTITY(int(7), (int(7)) - 0)))) >> (0 >> _GLF_IDENTITY(int(6), int(6)))), (_GLF_IDENTITY(~ (~ (int(7))), min(~ (~ (int(7))), _GLF_IDENTITY(~ (~ (int(7))), (~ (~ (int(7)))) ^ (0 << _GLF_IDENTITY(int(4), int(4))))))) >> 0)))), (_GLF_IDENTITY((_GLF_IDENTITY(1, clamp(1, 1, _GLF_IDENTITY(1, (false ? _GLF_FUZZED(-5469) : 1)))) << _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), _GLF_IDENTITY(~ (~ (int(_GLF_IDENTITY(7, (false ? _GLF_FUZZED(62384) : 7))))), (~ (~ (int(7)))) >> 0)))), int(ivec2((_GLF_IDENTITY(1, clamp(1, 1, _GLF_IDENTITY(1, (false ? _GLF_FUZZED(-5469) : 1)))) << _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), _GLF_IDENTITY(~ (~ (int(_GLF_IDENTITY(7, (false ? _GLF_FUZZED(62384) : 7))))), (~ (~ (int(7)))) >> 0)))), 0)))) | _GLF_IDENTITY(0, _GLF_IDENTITY(int(_GLF_IDENTITY(int(0), (int(0)) / 1)), (_GLF_IDENTITY(int(_GLF_IDENTITY(int(0), (int(0)) / 1)), clamp(int(_GLF_IDENTITY(int(0), (int(0)) / 1)), int(_GLF_IDENTITY(int(0), (int(0)) / 1)), int(_GLF_IDENTITY(int(0), (int(0)) / 1))))) << 0))))) >> _GLF_IDENTITY(int(7), int(7))); _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x))) * 1.0)))); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, true && (false)), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (! (injectionSwitch.x < injectionSwitch.y))))))))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = ((_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, max(1, 1))) >> 0)) | (1)) << _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), _GLF_IDENTITY((_GLF_IDENTITY(int(2), (false ? _GLF_FUZZED(90768) : int(2)))), int(_GLF_IDENTITY(ivec3((_GLF_IDENTITY(int(2), (false ? _GLF_FUZZED(90768) : int(2)))), int(_GLF_ZERO(0.0, injectionSwitch.x)), 0), max(_GLF_IDENTITY(ivec3((_GLF_IDENTITY(int(2), (false ? _GLF_FUZZED(90768) : int(2)))), int(_GLF_ZERO(0.0, injectionSwitch.x)), 0), min(ivec3((_GLF_IDENTITY(int(2), (false ? _GLF_FUZZED(90768) : int(2)))), int(_GLF_ZERO(0.0, injectionSwitch.x)), 0), ivec3((_GLF_IDENTITY(int(2), (false ? _GLF_FUZZED(90768) : int(2)))), int(_GLF_ZERO(0.0, injectionSwitch.x)), 0))), ivec3((_GLF_IDENTITY(int(2), (false ? _GLF_FUZZED(90768) : int(2)))), int(_GLF_ZERO(0.0, injectionSwitch.x)), 0))))) | 0))) >> _GLF_IDENTITY(int(2), int(2))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
        {
         return;
        }
      }
     for(int _injected_loop_counter = ((((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(6)) | (int(6))))) << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(4, int(ivec4(4, 0, 0, 0)))), int(4))); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), (_GLF_WRAPPED_LOOP(_injected_loop_counter > 0)) && true)) || false); _GLF_IDENTITY(_injected_loop_counter --, 0 | (_GLF_IDENTITY(_injected_loop_counter --, 0 | (_injected_loop_counter --)))))
      {
       barrier();
      }
    }
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))), false, false)), (bool(bvec3(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))), false, false))) || false))))))
    {
    }
   else
    {
     barrier();
    }
  }
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, (false) && true)))), bool(bool(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, (false) && true))))))))
  barrier();
}
