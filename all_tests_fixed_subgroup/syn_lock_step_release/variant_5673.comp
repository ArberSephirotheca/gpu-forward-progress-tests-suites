#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y))))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
    return;
  }
 for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x)), (_injected_loop_counter != int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x))))) && true)); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    continue;
   if(_GLF_DEAD(false))
    continue;
   if(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false))))))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bvec3(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true && (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), true)), true && (bool(bvec3(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true && (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), true)))))))))), (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bvec3(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true && (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), true)), true && (bool(bvec3(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).y)), true && (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), true))))))))))) && true))
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(_GLF_IDENTITY(int(2), ~ (~ (int(2)))), (int(2)) << 0))); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(1, ~ (~ (1)))), bool(_GLF_IDENTITY(bool(_GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(1, ~ (~ (1))))), (bool(_GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(1, ~ (~ (1)))))) && true))); _injected_loop_counter ++)
          {
           barrier();
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) && true), (false) || false)))
            continue;
          }
        }
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      break;
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).y)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).y)), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).y))), (! (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).y)))) || false)))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))), bool(bool(_GLF_IDENTITY(! _GLF_IDENTITY((_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false)))), ! (! _GLF_IDENTITY(((_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (! (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true)))) || false))))), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(((_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (! (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true)))) || false))))), (((_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (! (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true)))) || false)))))) || false))), ! (_GLF_IDENTITY(! (bool(bool(_GLF_IDENTITY(((_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (! (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true)))) || false))))), (((_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (! (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true)))) || false)))))) || false)))), bool(bvec2(! (bool(bool(_GLF_IDENTITY(((_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (! (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true)))) || false))))), (((_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (! (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true)))) || false)))))) || false)))), false)))))))), bool(bvec2(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false))))))))), ! (_GLF_IDENTITY(! (bool(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).x > injectionSwitch.y)), ! (! _GLF_IDENTITY((_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + sin(vec2(0.0, 0.0))).x > injectionSwitch.y))), bool(bvec3((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))))))), true && _GLF_IDENTITY((! (bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), ((! (_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), injectionSwitch, injectionSwitch)))).x > injectionSwitch.y)))))), ! (! (bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), injectionSwitch, injectionSwitch)))).x > injectionSwitch.y)))))))))))) && _GLF_IDENTITY(true, bool(bvec3(true, true, false)))))))))))))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, (false) || false)))))
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               continue;
              }
             barrier();
            }
           if(_GLF_DEAD(false))
            barrier();
           barrier();
           if(_GLF_DEAD(false))
            break;
           if(_GLF_DEAD(false))
            barrier();
          }
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
          {
           return;
          }
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
      }
     else
      {
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
         barrier();
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          continue;
         continue;
        }
       if(_GLF_DEAD(false))
        break;
      }
     if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))), _GLF_IDENTITY(true && (_GLF_DEAD(false)), false || (true && (_GLF_DEAD(false))))))))
      barrier();
    }
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bvec4(true, _GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) && true)))), _GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), ! (_GLF_IDENTITY(! (bool(bool(false))), _GLF_IDENTITY((! (bool(bool(false)))) && true, ! (! ((! (bool(bool(false)))) && true))))))), false)))))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        continue;
       barrier();
      }
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      break;
     for(int _injected_loop_counter = _GLF_IDENTITY(1, (_GLF_IDENTITY(true, true && (true)) ? 1 : _GLF_FUZZED(_injected_loop_counter))); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 & -84897)); _injected_loop_counter --)
      {
       barrier();
      }
    }
  }
 do
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || false)) && true)))
    break;
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec3((injectionSwitch.x > injectionSwitch.y), true, false))))))
  barrier();
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (((0 | (1 & 1)) << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6)))); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, false || (false))))))
        break;
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec4(false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))), _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bool((injectionSwitch.x > injectionSwitch.y))))) || false))))
      break;
    }
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    {
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
   barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
    return;
   return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED((true ? -1621.1310 : -194.948))), float(injectionSwitch.y), bool(true))), injectionSwitch.y)), false || (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, float(float(injectionSwitch.y))), clamp(_GLF_IDENTITY(injectionSwitch.y, float(float(injectionSwitch.y))), _GLF_IDENTITY(injectionSwitch.y, float(float(injectionSwitch.y))), _GLF_IDENTITY(injectionSwitch.y, float(float(injectionSwitch.y))))), mix(float(_GLF_FUZZED(-7.4)), float(_GLF_IDENTITY(injectionSwitch.y, float(vec4(_GLF_IDENTITY(injectionSwitch, vec2(mat4(injectionSwitch, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, sin(0.0), 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0))).y, 1.0, 0.0, 1.0)))), bool(true))))), true && (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(-13.47))) < injectionSwitch.y)) ? _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / _GLF_IDENTITY(dot(vec4(determinant(_GLF_IDENTITY(mat4(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0), (mat4(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0)) / mat4(1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0))), sqrt(0.0), 0.0, 0.0), vec4(1.0, 0.0, tan(0.0), 0.0)), dot(vec4(determinant(mat4(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0)), sqrt(0.0), 0.0, 0.0), vec4(1.0, 0.0, tan(0.0), 0.0)))) : _GLF_FUZZED(152.992))), false || (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(-60.82))))), _GLF_IDENTITY(injectionSwitch.y, float(mat3(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0), 1.0, 1.0, _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(1.0, 0.0)), dot(vec2(0.0, 1.0), vec2(1.0, 0.0))), 0.0, 1.0, 0.0, 1.0, 0.0))))), mix(float(_GLF_FUZZED(-7.4)), _GLF_IDENTITY(float(_GLF_IDENTITY(injectionSwitch.y, float(_GLF_IDENTITY(vec4(injectionSwitch.y, 1.0, 0.0, 1.0), clamp(vec4(injectionSwitch.y, 1.0, 0.0, 1.0), vec4(injectionSwitch.y, 1.0, 0.0, 1.0), vec4(injectionSwitch.y, 1.0, 0.0, 1.0)))))), (_GLF_IDENTITY(float(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, float(_GLF_IDENTITY(vec4(injectionSwitch.y, 1.0, 0.0, 1.0), clamp(vec4(injectionSwitch.y, 1.0, 0.0, 1.0), vec4(injectionSwitch.y, 1.0, 0.0, 1.0), vec4(injectionSwitch.y, 1.0, 0.0, 1.0))))), max(_GLF_IDENTITY(injectionSwitch.y, float(_GLF_IDENTITY(vec4(injectionSwitch.y, 1.0, 0.0, 1.0), clamp(vec4(injectionSwitch.y, 1.0, 0.0, 1.0), vec4(injectionSwitch.y, 1.0, 0.0, 1.0), vec4(injectionSwitch.y, 1.0, 0.0, 1.0))))), _GLF_IDENTITY(injectionSwitch.y, float(_GLF_IDENTITY(vec4(injectionSwitch.y, 1.0, 0.0, 1.0), clamp(vec4(injectionSwitch.y, 1.0, 0.0, 1.0), vec4(injectionSwitch.y, 1.0, 0.0, 1.0), vec4(injectionSwitch.y, 1.0, 0.0, 1.0)))))))), (float(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, float(_GLF_IDENTITY(vec4(injectionSwitch.y, 1.0, 0.0, 1.0), clamp(vec4(injectionSwitch.y, 1.0, 0.0, 1.0), vec4(injectionSwitch.y, 1.0, 0.0, 1.0), vec4(injectionSwitch.y, 1.0, 0.0, 1.0))))), max(_GLF_IDENTITY(injectionSwitch.y, float(_GLF_IDENTITY(vec4(injectionSwitch.y, 1.0, 0.0, 1.0), clamp(vec4(injectionSwitch.y, 1.0, 0.0, 1.0), vec4(injectionSwitch.y, 1.0, 0.0, 1.0), vec4(injectionSwitch.y, 1.0, 0.0, 1.0))))), _GLF_IDENTITY(injectionSwitch.y, float(_GLF_IDENTITY(vec4(injectionSwitch.y, 1.0, 0.0, 1.0), clamp(vec4(injectionSwitch.y, 1.0, 0.0, 1.0), vec4(injectionSwitch.y, 1.0, 0.0, 1.0), vec4(injectionSwitch.y, 1.0, 0.0, 1.0))))))))) + 0.0)) * determinant(mat3(1.0, 0.0, sqrt(0.0), 1.0, 1.0, 0.0, 1.0, 1.0, sqrt(1.0)))), bool(true)))))))))))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   else
    {
     barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
    return;
  }
 uvec4 GLF_merged4_0_1_17_1_1_11_2_1_12_3_1_14subgroup_local_idvirtual_gidworkgroup_idworkgroup_size;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, (false) || false), true), bvec2(bvec2(bvec2(_GLF_IDENTITY(false, (false) || false), true))))))))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      return;
     return;
    }
   do
    {
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))), injectionSwitch, injectionSwitch)).x, _GLF_IDENTITY(clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x), float(_GLF_IDENTITY(_GLF_IDENTITY(mat4(clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).x), _GLF_IDENTITY(_GLF_IDENTITY(determinant(mat4(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0)), float(_GLF_IDENTITY(mat2x4(determinant(mat4(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0)), 1.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), tan(0.0), 1.0, 1.0, 0.0), (mat2x4(determinant(mat4(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0)), 1.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), tan(0.0), 1.0, 1.0, 0.0)) * mat2(1.0)))), (false ? _GLF_FUZZED(-1.5) : determinant(mat4(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0)))), abs(0.0), 1.0, exp(0.0), 1.0, 0.0, 1.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), sqrt(1.0), 1.0, 0.0, 0.0, 0.0, 1.0), (false ? _GLF_FUZZED(mat4(mat4x3(9327.6357, 4.2, 1.0, -57.64, 7.4, -1.4, 4.5, 2.6, 23.69, -1.2, 2.5, -3351.9737))) : _GLF_IDENTITY(mat4(clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x), determinant(mat4(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0)), abs(0.0), 1.0, exp(0.0), 1.0, 0.0, _GLF_IDENTITY(1.0, max(1.0, _GLF_IDENTITY(1.0, max(1.0, 1.0)))), 1.0, _GLF_ZERO(0.0, injectionSwitch.x), sqrt(1.0), 1.0, 0.0, 0.0, 0.0, 1.0), (_GLF_IDENTITY(mat4(clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x), determinant(mat4(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0)), abs(0.0), 1.0, exp(0.0), 1.0, 0.0, _GLF_IDENTITY(1.0, max(1.0, _GLF_IDENTITY(1.0, max(1.0, 1.0)))), 1.0, _GLF_ZERO(0.0, injectionSwitch.x), sqrt(1.0), 1.0, 0.0, 0.0, 0.0, 1.0), transpose(transpose(mat4(clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x), determinant(mat4(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0)), abs(0.0), 1.0, exp(0.0), 1.0, 0.0, _GLF_IDENTITY(1.0, max(1.0, _GLF_IDENTITY(1.0, max(1.0, 1.0)))), 1.0, _GLF_ZERO(0.0, injectionSwitch.x), sqrt(1.0), 1.0, 0.0, 0.0, 0.0, 1.0))))) * mat4(1.0)))), (_GLF_IDENTITY(_GLF_IDENTITY(mat4(clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).x), _GLF_IDENTITY(_GLF_IDENTITY(determinant(mat4(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0)), float(_GLF_IDENTITY(mat2x4(determinant(mat4(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0)), 1.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), tan(0.0), 1.0, 1.0, 0.0), (mat2x4(determinant(mat4(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0)), 1.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), tan(0.0), 1.0, 1.0, 0.0)) * mat2(1.0)))), (false ? _GLF_FUZZED(-1.5) : determinant(mat4(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0)))), abs(0.0), 1.0, exp(0.0), 1.0, 0.0, 1.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), sqrt(1.0), 1.0, 0.0, 0.0, 0.0, 1.0), (false ? _GLF_FUZZED(mat4(mat4x3(9327.6357, 4.2, 1.0, -57.64, 7.4, -1.4, 4.5, 2.6, 23.69, -1.2, 2.5, -3351.9737))) : _GLF_IDENTITY(mat4(clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x), determinant(mat4(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0)), abs(0.0), 1.0, exp(0.0), 1.0, 0.0, _GLF_IDENTITY(1.0, max(1.0, _GLF_IDENTITY(1.0, max(1.0, 1.0)))), 1.0, _GLF_ZERO(0.0, injectionSwitch.x), sqrt(1.0), 1.0, 0.0, 0.0, 0.0, 1.0), (_GLF_IDENTITY(mat4(clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x), determinant(mat4(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0)), abs(0.0), 1.0, exp(0.0), 1.0, 0.0, _GLF_IDENTITY(1.0, max(1.0, _GLF_IDENTITY(1.0, max(1.0, 1.0)))), 1.0, _GLF_ZERO(0.0, injectionSwitch.x), sqrt(1.0), 1.0, 0.0, 0.0, 0.0, 1.0), transpose(transpose(mat4(clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x), determinant(mat4(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0)), abs(0.0), 1.0, exp(0.0), 1.0, 0.0, _GLF_IDENTITY(1.0, max(1.0, _GLF_IDENTITY(1.0, max(1.0, 1.0)))), 1.0, _GLF_ZERO(0.0, injectionSwitch.x), sqrt(1.0), 1.0, 0.0, 0.0, 0.0, 1.0))))) * mat4(1.0)))), (_GLF_IDENTITY(_GLF_IDENTITY(mat4(clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).x), _GLF_IDENTITY(_GLF_IDENTITY(determinant(mat4(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0)), float(_GLF_IDENTITY(mat2x4(determinant(mat4(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0)), 1.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), tan(0.0), 1.0, 1.0, 0.0), (mat2x4(determinant(mat4(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0)), 1.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), tan(0.0), 1.0, 1.0, 0.0)) * mat2(1.0)))), (false ? _GLF_FUZZED(-1.5) : determinant(mat4(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0)))), abs(0.0), 1.0, exp(0.0), 1.0, 0.0, 1.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), sqrt(1.0), 1.0, 0.0, 0.0, 0.0, 1.0), (false ? _GLF_FUZZED(mat4(mat4x3(9327.6357, 4.2, 1.0, -57.64, 7.4, -1.4, 4.5, 2.6, 23.69, -1.2, 2.5, -3351.9737))) : _GLF_IDENTITY(mat4(clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x), determinant(mat4(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0)), abs(0.0), 1.0, exp(0.0), 1.0, 0.0, _GLF_IDENTITY(1.0, max(1.0, _GLF_IDENTITY(1.0, max(1.0, 1.0)))), 1.0, _GLF_ZERO(0.0, injectionSwitch.x), sqrt(1.0), 1.0, 0.0, 0.0, 0.0, 1.0), (_GLF_IDENTITY(mat4(clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x), determinant(mat4(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0)), abs(0.0), 1.0, exp(0.0), 1.0, 0.0, _GLF_IDENTITY(1.0, max(1.0, _GLF_IDENTITY(1.0, max(1.0, 1.0)))), 1.0, _GLF_ZERO(0.0, injectionSwitch.x), sqrt(1.0), 1.0, 0.0, 0.0, 0.0, 1.0), transpose(transpose(mat4(clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x), determinant(mat4(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0)), abs(0.0), 1.0, exp(0.0), 1.0, 0.0, _GLF_IDENTITY(1.0, max(1.0, _GLF_IDENTITY(1.0, max(1.0, 1.0)))), 1.0, _GLF_ZERO(0.0, injectionSwitch.x), sqrt(1.0), 1.0, 0.0, 0.0, 0.0, 1.0))))) * mat4(1.0)))), transpose(transpose(_GLF_IDENTITY(mat4(clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).x), _GLF_IDENTITY(_GLF_IDENTITY(determinant(mat4(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0)), float(_GLF_IDENTITY(mat2x4(determinant(mat4(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0)), 1.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), tan(0.0), 1.0, 1.0, 0.0), (mat2x4(determinant(mat4(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0)), 1.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), tan(0.0), 1.0, 1.0, 0.0)) * mat2(1.0)))), (false ? _GLF_FUZZED(-1.5) : determinant(mat4(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0)))), abs(0.0), 1.0, exp(0.0), 1.0, 0.0, 1.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), sqrt(1.0), 1.0, 0.0, 0.0, 0.0, 1.0), (false ? _GLF_FUZZED(mat4(mat4x3(9327.6357, 4.2, 1.0, -57.64, 7.4, -1.4, 4.5, 2.6, 23.69, -1.2, 2.5, -3351.9737))) : _GLF_IDENTITY(mat4(clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x), determinant(mat4(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0)), abs(0.0), 1.0, exp(0.0), 1.0, 0.0, _GLF_IDENTITY(1.0, max(1.0, _GLF_IDENTITY(1.0, max(1.0, 1.0)))), 1.0, _GLF_ZERO(0.0, injectionSwitch.x), sqrt(1.0), 1.0, 0.0, 0.0, 0.0, 1.0), (_GLF_IDENTITY(mat4(clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x), determinant(mat4(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0)), abs(0.0), 1.0, exp(0.0), 1.0, 0.0, _GLF_IDENTITY(1.0, max(1.0, _GLF_IDENTITY(1.0, max(1.0, 1.0)))), 1.0, _GLF_ZERO(0.0, injectionSwitch.x), sqrt(1.0), 1.0, 0.0, 0.0, 0.0, 1.0), transpose(transpose(mat4(clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x), determinant(mat4(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0)), abs(0.0), 1.0, exp(0.0), 1.0, 0.0, _GLF_IDENTITY(1.0, max(1.0, _GLF_IDENTITY(1.0, max(1.0, 1.0)))), 1.0, _GLF_ZERO(0.0, injectionSwitch.x), sqrt(1.0), 1.0, 0.0, 0.0, 0.0, 1.0))))) * mat4(1.0)))))))) - mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))) + mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))))) * 1.0) > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((false), _GLF_IDENTITY((_GLF_IDENTITY((false), ((false)) && true)), true && (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY((false), ((false)) && true), ! (! (_GLF_IDENTITY((false), ((false)) && true))))), bool(bool((_GLF_IDENTITY(_GLF_IDENTITY((false), ((false)) && true), ! (! (_GLF_IDENTITY((false), ((false)) && true)))))))))) && true) || false)))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
      {
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec2(bvec2(false, false))))), false || (bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, ! (! (false))), false), bvec2(bvec2(bvec2(false, false))))))))))
      return;
     barrier();
    }
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     do
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
          break;
         if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(_GLF_IDENTITY(true, ! (! (true))), (injectionSwitch.x < injectionSwitch.y)), true && (_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(5251.2015), _GLF_FUZZED(-3.5)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))).y))))))
          {
           return;
          }
         else
          {
          }
        }
      }
     while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))));
    }
  }
 for(int _injected_loop_counter = ((_GLF_IDENTITY((1 | _GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, int(ivec3(0, 0, 0)))))), ~ (_GLF_IDENTITY(~ ((1 | 0)), (~ ((1 | 0))) - 0))) << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, clamp(_injected_loop_counter, _injected_loop_counter, _injected_loop_counter)) > _GLF_IDENTITY(_GLF_IDENTITY(0, clamp(_GLF_IDENTITY(0, (_GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(_injected_loop_counter)))) ^ int(_GLF_ZERO(0.0, injectionSwitch.x))), _GLF_IDENTITY(0, ~ (~ (0))), _GLF_IDENTITY(0, (0) / 1))), _GLF_IDENTITY(_GLF_IDENTITY((0), clamp((0), (0), (0))), (_GLF_IDENTITY((0), clamp((0), (0), (0)))) << 0) | (0)), ! _GLF_IDENTITY((! (_injected_loop_counter > _GLF_IDENTITY(0, clamp(0, 0, _GLF_IDENTITY(0, (false ? _GLF_FUZZED(_injected_loop_counter) : 0)))))), ((! (_GLF_IDENTITY(_injected_loop_counter, ~ (~ (_injected_loop_counter))) > 0))) || _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! _GLF_IDENTITY((_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), ((_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))) || false), true && (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))))); _GLF_IDENTITY(_injected_loop_counter --, 0 ^ (_GLF_IDENTITY(_injected_loop_counter --, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _injected_loop_counter -- : _GLF_FUZZED(_injected_loop_counter))))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y, injectionSwitch.y)))))), false || (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))
          barrier();
        }
       else
        {
         if(_GLF_DEAD(false))
          break;
        }
       barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false))))
        continue;
       do
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
             if(_GLF_DEAD(false))
              continue;
            }
           else
            {
             barrier();
            }
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), ! (! (_GLF_IDENTITY(false, (false) || false)))), false, true, true)), (bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), ! (! (_GLF_IDENTITY(false, (false) || false)))), false, true, true))) || false))))
            break;
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(-1.8) : _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), exp(0.0) * (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)))))) > injectionSwitch.y))))
      break;
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(3.3) : injectionSwitch.x)))))) > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), bool(bvec4(false, _GLF_IDENTITY(false, (false) && true), false, true))), (_GLF_IDENTITY(false, bool(bvec4(false, false, false, true)))) || _GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec4(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)))))))
        {
         do
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-348.771) : injectionSwitch.y))))))))
            {
            }
           else
            {
             return;
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              return;
             barrier();
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
         barrier();
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, false, false)))))
          break;
         for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
          {
           barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, true && (false))) || false)))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, false || (false)), false, false)))))
          continue;
         return;
        }
       break;
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(mat4(injectionSwitch.y, _GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(0.0, 0.0)), dot(vec2(1.0, 1.0), vec2(0.0, 0.0))), 0.0, 1.0, 1.0, cos(0.0), 1.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0, 0.0, 0.0, 0.0, sqrt(exp(0.0)), exp(0.0)))))), true && (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(mat4(injectionSwitch.y, _GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(0.0, 0.0)), dot(vec2(1.0, 1.0), vec2(0.0, 0.0))), 0.0, 1.0, 1.0, cos(0.0), 1.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), 1.0, 0.0, 0.0, 0.0, sqrt(exp(0.0)), exp(0.0))))))))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
          return;
         barrier();
         if(_GLF_DEAD(false))
          return;
        }
       for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(_GLF_IDENTITY(int(3), max(int(3), int(3))), (_GLF_IDENTITY(int(3), max(int(3), int(_GLF_IDENTITY(3, 1 * (_GLF_IDENTITY(3, (3) * 1))))))) - 0))) >> _GLF_IDENTITY(int(3), int(3))); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, 1 * (0))); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
         if(_GLF_DEAD(false))
          barrier();
        }
       barrier();
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         else
          {
           if(_GLF_DEAD(false))
            break;
          }
         continue;
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
       for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5))); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, false, true)))))
            break;
           if(_GLF_DEAD(false))
            return;
           return;
          }
        }
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = 1; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), (_GLF_WRAPPED_LOOP(_injected_loop_counter > 0)) && true)) && true); _injected_loop_counter --)
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
            continue;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(vec2(595.395, -4.4).x)), _GLF_IDENTITY(bool(false), (bool(false)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               barrier();
              }
             else
              {
              }
            }
          }
         barrier();
         if(_GLF_DEAD(false))
          break;
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, float(vec3(injectionSwitch.y, 0.0, 0.0)))) - 0.0)))))
            continue;
           barrier();
          }
         continue;
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED((-3.0 * -9.4))), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) > injectionSwitch.y))))
        continue;
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
        break;
       return;
       if(_GLF_DEAD(false))
        continue;
      }
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       for(int _injected_loop_counter = (38549 & 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6)))); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
            }
           else
            {
             barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(false))
                break;
               return;
              }
            }
          }
        }
      }
     else
      {
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     else
      {
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bvec3(false, false, false)))), false || (! (_GLF_IDENTITY(false, bool(bvec3(false, false, false))))))))))
      return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      break;
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), false, false, true)))) && true))
        barrier();
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-9.8), _GLF_FUZZED(-9.7)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))).x > injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           barrier();
           if(_GLF_DEAD(false))
            return;
          }
         else
          {
           if(_GLF_DEAD(false))
            return;
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
       do
        {
         if(_GLF_DEAD(false))
          break;
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          {
           do
            {
             if(_GLF_DEAD(false))
              break;
             barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
            }
           while(_GLF_WRAPPED_LOOP(false));
           if(_GLF_DEAD(false))
            continue;
          }
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
         for(int _injected_loop_counter = ((0 << _GLF_IDENTITY(int(0), int(0))) ^ 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > (int(_GLF_ZERO(0.0, injectionSwitch.x)) >> _GLF_IDENTITY(int(7), int(7)))); _injected_loop_counter --)
          {
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
            barrier();
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if(_GLF_DEAD(false))
      break;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bvec3(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(true, true && (true)), true)), true && (bool(bvec3(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(true, true && (true)), true))))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bvec3(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(true, true && (true)), true)), true && (bool(bvec3(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(true, true && (true)), true))))), true, false), bvec3(bvec3(bvec3(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bvec3(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(true, true && (true)), true)), true && (bool(bvec3(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(true, true && (true)), true))))), true, false))))), ! (! (bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bvec3(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(true, true && (true)), true)), true && (bool(bvec3(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(true, true && (true)), true))))), true, false), bvec3(bvec3(bvec3(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bvec3(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(true, true && (true)), true)), true && (bool(bvec3(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(true, true && (true)), true))))), true, false)))))))))))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      continue;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(44.61))), injectionSwitch.x)), injectionSwitch.x)) < injectionSwitch.y))))
        {
         for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(6), ~ (~ (int(6)))), int(6))) << _GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_IDENTITY(0, ~ (~ (_GLF_IDENTITY(0, (0) >> 0)))), (_GLF_IDENTITY(0, min(_GLF_IDENTITY(0, 0 ^ (0)), 0))) / _GLF_IDENTITY((1 | 1), max((_GLF_IDENTITY(1, (1) | 0) | 1), _GLF_IDENTITY((1 | 1), ((1 | 1)) >> 0))))), int(0))) >> _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), _GLF_IDENTITY((int(0)), clamp((int(0)), (int(0)), (int(_GLF_IDENTITY(0, ~ (~ (0))))))) | (int(0)))))); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              continue;
             barrier();
            }
           for(int _injected_loop_counter = (1 & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           if(_GLF_DEAD(false))
            break;
           if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (injectionSwitch.x > injectionSwitch.y))))
            break;
           barrier();
          }
        }
       else
        {
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     barrier();
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), ((injectionSwitch) * mat2(1.0)) - vec2(0.0, 0.0))).x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) || false), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - sqrt(0.0))))))
            {
             do
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
          }
         if(_GLF_DEAD(false))
          continue;
        }
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          break;
         break;
        }
       for(int _injected_loop_counter = ((26313 | -46667) & (0 << _GLF_IDENTITY(int(7), int(7)))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
         for(int _injected_loop_counter = _GLF_IDENTITY(int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).y)), (int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).y))) | (int(_GLF_IDENTITY(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).y), clamp(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).y), _GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).y), _GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).y)))))); _GLF_WRAPPED_LOOP(_injected_loop_counter > (2522 & 0)); _injected_loop_counter --)
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
             barrier();
            }
           barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
        }
      }
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x > injectionSwitch.y) || false)))))
        {
         do
          {
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_DEAD(false))
            continue;
           barrier();
           if(_GLF_DEAD(false))
            break;
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
        continue;
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) && true)));
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y))) || false)))
      continue;
    }
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      continue;
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) || false)))) || (false))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        continue;
       barrier();
      }
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         continue;
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   if(_GLF_DEAD(false))
    return;
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_DEAD(false))))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))))))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              break;
             barrier();
             if(_GLF_DEAD(false))
              break;
            }
          }
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, _GLF_IDENTITY((false), ! (! ((false)))) && true)))))
          continue;
         do
          {
           if(_GLF_DEAD(false))
            break;
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        }
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
    }
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
        return;
       barrier();
      }
     else
      {
      }
    }
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         barrier();
        }
      }
     else
      {
       barrier();
      }
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, bool(bvec2(false, true))))), (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    barrier();
   return;
  }
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, true && (true))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, false, true)))))
    barrier();
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  barrier();
uint subgroup_size = 16;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
    return;
   barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec4(! _GLF_IDENTITY((false), ! (! ((false)))), false, false, true)))))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0)))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       do
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            continue;
           barrier();
          }
         if(_GLF_DEAD(false))
          return;
         barrier();
         if(_GLF_DEAD(false))
          break;
        }
       while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))));
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         return;
        }
      }
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (((1 << _GLF_IDENTITY(int(0), int(_GLF_IDENTITY(0, max(_GLF_IDENTITY(0, min(0, 0)), 0))))) >> _GLF_IDENTITY(int(0), int(0))) & 1)); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
       barrier();
      }
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, ! (! (true))), (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y))))))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! _GLF_IDENTITY((! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), (_GLF_IDENTITY((! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), false || ((! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))) && true))))
        {
         barrier();
         if(_GLF_DEAD(false))
          return;
        }
       else
        {
        }
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) && true)))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         return;
        }
      }
    }
   else
    {
     do
      {
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, ! (! (false))))))));
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
        return;
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, _GLF_IDENTITY((false), ((false)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) || false)) || false), true)))))
      return;
    }
   else
    {
    }
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))))
    {
    }
   else
    {
     GLF_merged4_0_1_17_1_1_11_2_1_12_3_1_14subgroup_local_idvirtual_gidworkgroup_idworkgroup_size.x = subgroup_local_id;
    }
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y))))))
      barrier();
     return;
    }
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       return;
      }
     if(_GLF_DEAD(false))
      return;
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || false)) || false), _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, float(mat4x3(injectionSwitch.y, 0.0, 1.0, exp(0.0), 0.0, 1.0, 0.0, 0.0, _GLF_IDENTITY(0.0, max(0.0, 0.0)), 1.0, 1.0, 1.0))), injectionSwitch.y, injectionSwitch.y))), bool(bvec2(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true), false))), bool(bool(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec2(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true), false)))))))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       barrier();
      }
     else
      {
      }
    }
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || false)) || false), (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
        return;
       barrier();
      }
     return;
     if(_GLF_DEAD(false))
      return;
    }
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, 0 ^ (_injected_loop_counter)) > 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        continue;
       do
        {
         barrier();
         if(_GLF_DEAD(false))
          break;
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(false))
        break;
      }
    }
  }
 do
  {
   if(_GLF_DEAD(false))
    return;
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      break;
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), true && (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), bool(bvec2(_GLF_WRAPPED_IF_FALSE(false), true))))))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  return;
                 do
                  {
                   barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))));
                }
              }
             else
              {
              }
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               barrier();
               if(_GLF_DEAD(false))
                break;
              }
             else
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
            }
           if(_GLF_DEAD(false))
            {
             do
              {
               do
                {
                 barrier();
                }
               while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(false, true && _GLF_IDENTITY((false), ! (! ((false)))))), true && ((_GLF_IDENTITY(false, true && _GLF_IDENTITY((false), ! (! ((false)))))))), true && ((_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec2(bvec2(false, false)))))))))))));
              }
             while(_GLF_WRAPPED_LOOP(false));
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 barrier();
                }
               else
                {
                }
              }
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              continue;
             return;
            }
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           if(_GLF_DEAD(false))
            barrier();
           return;
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
              }
             else
              {
               barrier();
              }
            }
           if(_GLF_DEAD(false))
            continue;
           return;
           if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
            return;
          }
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-42.89)), bool(false))) > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                return;
               break;
              }
             if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
                barrier();
               barrier();
              }
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              break;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0)))))
              return;
             barrier();
            }
           if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, true && (true))))))))))
            {
             if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))))
              return;
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  return;
                 if(_GLF_DEAD(false))
                  return;
                 barrier();
                }
              }
             else
              {
              }
             do
              {
               if(_GLF_DEAD(false))
                {
                 do
                  {
                   barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                return;
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  return;
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                    barrier();
                   return;
                  }
                 barrier();
                }
               return;
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                return;
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               do
                {
                 barrier();
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
            }
           else
            {
             if(_GLF_DEAD(false))
              break;
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              return;
             barrier();
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
           return;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             do
              {
               barrier();
               if(_GLF_DEAD(false))
                break;
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(false || (false), bool(bvec2(_GLF_IDENTITY(false || (false), (false || (false)) || false), true)))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))))
            barrier();
           if(_GLF_DEAD(false))
            return;
          }
         barrier();
        }
       if(_GLF_DEAD(false))
        continue;
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_IDENTITY(_GLF_FUZZED((+ -6250.0911)), float(_GLF_IDENTITY(mat3(_GLF_FUZZED((+ -6250.0911)), 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0), (true ? mat3(_GLF_FUZZED((+ -6250.0911)), 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0) : _GLF_FUZZED(mat3(-4.8, 26.28, -7281.2317, -95.79, 7.2, -9.0, -4302.2936, -203.958, 6.3))))))), bool(false)))))))
      barrier();
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            continue;
           barrier();
          }
         return;
         if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), true))))))
          barrier();
        }
      }
     if(_GLF_DEAD(false))
      return;
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   barrier();
  }
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))), (_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false))))) && true))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(float(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(vec2(injectionSwitch.x, 1.0)), 1.0 * _GLF_IDENTITY((float(vec2(injectionSwitch.x, 1.0))), ((float(vec2(injectionSwitch.x, 1.0)))) * 1.0))), (true ? injectionSwitch.x : _GLF_FUZZED(_GLF_IDENTITY(asin(8.7), float(mat2x3(asin(8.7), 0.0, 0.0, 1.0, 1.0, 0.0))))))))) > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     barrier();
    }
   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))))), (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))))), false || (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)))))))))) || false))
    {
     barrier();
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
   return;
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && _GLF_IDENTITY(true, true && (true))))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, false || (false)))))))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       else
        {
        }
      }
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   barrier();
  }
 do
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    break;
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
    continue;
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(0), int(0))); _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 | 0)); _injected_loop_counter ++)
      {
       barrier();
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, ! (! (false)))))))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, float(mat2x4(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)))), 0.0, 0.0, 0.0, determinant(mat3(1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0)), 0.0, 0.0, 1.0))) < injectionSwitch.y)) && (_GLF_FALSE(_GLF_IDENTITY(false, (false) || false), (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, float(mat2x4(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], mix(float(_GLF_FUZZED(-1583.3792)), float(injectionSwitch[1]), bool(true))))).x)))), 0.0, 0.0, 0.0, determinant(mat3(1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0)), 0.0, 0.0, 1.0))) < injectionSwitch.y)) && (_GLF_FALSE(_GLF_IDENTITY(false, (false) || false), (injectionSwitch.x > injectionSwitch.y))))))))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 ^ (0 << _GLF_IDENTITY(int(4), int(4))))); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          break;
         return;
        }
      }
    }
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x > injectionSwitch.y, bool(bvec3(injectionSwitch.x > injectionSwitch.y, true, false)))), bool(_GLF_IDENTITY(bool((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x > injectionSwitch.y, bool(bvec3(injectionSwitch.x > injectionSwitch.y, true, false))))), ! (! (bool((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x > injectionSwitch.y, bool(bvec3(injectionSwitch.x > injectionSwitch.y, true, false)))))))))))))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     else
      {
      }
     return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     do
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
     barrier();
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
      barrier();
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) && true)), ! (! (_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) && true))))))
    {
     return;
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   do
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) || false)))
      {
      }
     else
      {
       return;
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
 uint num_workgroup = _GLF_IDENTITY(gl_NumWorkGroups.x, (gl_NumWorkGroups.x) | (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, _GLF_IDENTITY(uvec3(0u, 0u, 0u), (uvec3(0u, 0u, 0u)) / uvec3(1u, 1u, 1u)) ^ (_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, clamp(gl_NumWorkGroups, gl_NumWorkGroups, gl_NumWorkGroups)), ~ (~ (_GLF_IDENTITY(gl_NumWorkGroups, clamp(gl_NumWorkGroups, gl_NumWorkGroups, gl_NumWorkGroups))))), (_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, clamp(gl_NumWorkGroups, gl_NumWorkGroups, gl_NumWorkGroups)), ~ (~ (_GLF_IDENTITY(gl_NumWorkGroups, clamp(gl_NumWorkGroups, gl_NumWorkGroups, gl_NumWorkGroups)))))) * uvec3(1u, 1u, 1u))) | (gl_NumWorkGroups)), uvec3(uvec4(gl_NumWorkGroups, _GLF_IDENTITY(((_GLF_IDENTITY(_GLF_IDENTITY(1u << _GLF_IDENTITY(uint(5u), uint(5u)), min(1u << _GLF_IDENTITY(uint(5u), uint(5u)), 1u << _GLF_IDENTITY(uint(_GLF_IDENTITY(5u, (5u) / (1u & ((1u << _GLF_IDENTITY(uint(4u), uint(4u))) >> _GLF_IDENTITY(uint(4u), uint(4u)))))), uint(5u)))), (_GLF_IDENTITY(_GLF_IDENTITY(1u << _GLF_IDENTITY(uint(5u), uint(5u)), min(1u << _GLF_IDENTITY(uint(5u), uint(5u)), 1u << _GLF_IDENTITY(uint(_GLF_IDENTITY(5u, (5u) / (1u & ((1u << _GLF_IDENTITY(uint(4u), uint(4u))) >> _GLF_IDENTITY(uint(4u), uint(4u)))))), uint(5u)))), (_GLF_IDENTITY(1u << _GLF_IDENTITY(uint(5u), uint(5u)), min(1u << _GLF_IDENTITY(uint(5u), uint(5u)), 1u << _GLF_IDENTITY(uint(_GLF_IDENTITY(5u, (5u) / (1u & ((1u << _GLF_IDENTITY(uint(4u), uint(4u))) >> _GLF_IDENTITY(uint(4u), uint(4u)))))), uint(5u))))) << 0u)) | 0u)) >> _GLF_IDENTITY(uint(5u), uint(5u))), (((_GLF_IDENTITY(1u << _GLF_IDENTITY(uint(5u), uint(5u)), min(1u << _GLF_IDENTITY(uint(5u), uint(5u)), 1u << _GLF_IDENTITY(uint(5u), uint(5u))))) >> _GLF_IDENTITY(uint(5u), uint(5u)))) | (((_GLF_IDENTITY(1u << _GLF_IDENTITY(uint(5u), uint(5u)), min(1u << _GLF_IDENTITY(uint(5u), uint(5u)), 1u << _GLF_IDENTITY(uint(5u), uint(5u))))) >> _GLF_IDENTITY(uint(5u), uint(5u)))))))))), (_GLF_IDENTITY(gl_NumWorkGroups, _GLF_IDENTITY(uvec3(0u, 0u, 0u), clamp(_GLF_IDENTITY(uvec3(0u, 0u, 0u), (uvec3(0u, 0u, 0u)) / uvec3(1u, 1u, 1u)), uvec3(0u, 0u, 0u), _GLF_IDENTITY(uvec3(0u, 0u, 0u), uvec3(uvec4(_GLF_IDENTITY(uvec3(0u, 0u, 0u), uvec3(0u, 0u, 0u) | (uvec3(0u, 0u, 0u))), uint(_GLF_ZERO(0.0, injectionSwitch.x))))))) ^ (_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, (_GLF_IDENTITY(gl_NumWorkGroups, clamp(gl_NumWorkGroups, gl_NumWorkGroups, _GLF_IDENTITY(gl_NumWorkGroups, max(gl_NumWorkGroups, gl_NumWorkGroups))))) | (gl_NumWorkGroups)), uvec3(uvec4(gl_NumWorkGroups, _GLF_IDENTITY(((_GLF_IDENTITY(1u << _GLF_IDENTITY(_GLF_IDENTITY(uint(5u), uint(5u)), ~ (~ (_GLF_IDENTITY(uint(5u), uint(5u))))), min(1u << _GLF_IDENTITY(_GLF_IDENTITY(uint(5u), uint(_GLF_IDENTITY(5u, (5u) / uint(_GLF_ONE(1.0, injectionSwitch.y))))), min(_GLF_IDENTITY(_GLF_IDENTITY(uint(5u), uint(_GLF_IDENTITY(5u, (5u) / uint(_GLF_ONE(1.0, injectionSwitch.y))))), max(_GLF_IDENTITY(uint(5u), uint(_GLF_IDENTITY(5u, (5u) / uint(_GLF_ONE(1.0, injectionSwitch.y))))), _GLF_IDENTITY(uint(5u), uint(_GLF_IDENTITY(5u, (5u) / uint(_GLF_ONE(1.0, injectionSwitch.y))))))), _GLF_IDENTITY(uint(5u), uint(_GLF_IDENTITY(5u, (5u) / uint(_GLF_ONE(1.0, injectionSwitch.y))))))), 1u << _GLF_IDENTITY(uint(5u), uint(5u))))) >> _GLF_IDENTITY(uint(5u), _GLF_IDENTITY(uint(5u), ~ (~ (uint(5u)))))), (((_GLF_IDENTITY(1u << _GLF_IDENTITY(uint(5u), uint(5u)), min(1u << _GLF_IDENTITY(uint(5u), uint(5u)), 1u << _GLF_IDENTITY(uint(5u), uint(5u))))) >> _GLF_IDENTITY(uint(5u), uint(5u)))) | _GLF_IDENTITY(((_GLF_IDENTITY((_GLF_IDENTITY(1u << _GLF_IDENTITY(uint(5u), uint(5u)), min(1u << _GLF_IDENTITY(uint(5u), uint(5u)), 1u << _GLF_IDENTITY(uint(5u), uint(5u))))) >> _GLF_IDENTITY(uint(5u), uint(5u)), max((_GLF_IDENTITY(1u << _GLF_IDENTITY(uint(5u), uint(5u)), min(1u << _GLF_IDENTITY(uint(5u), uint(5u)), 1u << _GLF_IDENTITY(uint(5u), uint(5u))))) >> _GLF_IDENTITY(uint(5u), uint(5u)), (_GLF_IDENTITY(1u << _GLF_IDENTITY(uint(5u), uint(5u)), min(1u << _GLF_IDENTITY(uint(5u), uint(5u)), 1u << _GLF_IDENTITY(uint(5u), uint(5u))))) >> _GLF_IDENTITY(uint(5u), uint(5u)))))), min(((_GLF_IDENTITY((_GLF_IDENTITY(1u << _GLF_IDENTITY(uint(5u), uint(5u)), min(1u << _GLF_IDENTITY(uint(5u), uint(5u)), 1u << _GLF_IDENTITY(uint(5u), uint(5u))))) >> _GLF_IDENTITY(uint(5u), uint(5u)), max((_GLF_IDENTITY(1u << _GLF_IDENTITY(uint(5u), uint(5u)), min(1u << _GLF_IDENTITY(uint(5u), uint(5u)), 1u << _GLF_IDENTITY(uint(5u), uint(5u))))) >> _GLF_IDENTITY(uint(5u), uint(5u)), (_GLF_IDENTITY(1u << _GLF_IDENTITY(uint(5u), uint(5u)), min(1u << _GLF_IDENTITY(uint(5u), uint(5u)), 1u << _GLF_IDENTITY(uint(5u), uint(5u))))) >> _GLF_IDENTITY(uint(5u), uint(5u)))))), ((_GLF_IDENTITY((_GLF_IDENTITY(1u << _GLF_IDENTITY(uint(5u), uint(5u)), min(1u << _GLF_IDENTITY(uint(5u), uint(5u)), 1u << _GLF_IDENTITY(uint(5u), uint(5u))))) >> _GLF_IDENTITY(uint(5u), uint(5u)), max((_GLF_IDENTITY(1u << _GLF_IDENTITY(uint(5u), uint(5u)), min(1u << _GLF_IDENTITY(uint(5u), uint(5u)), 1u << _GLF_IDENTITY(uint(5u), uint(5u))))) >> _GLF_IDENTITY(uint(5u), uint(5u)), (_GLF_IDENTITY(1u << _GLF_IDENTITY(uint(5u), uint(5u)), min(1u << _GLF_IDENTITY(uint(5u), uint(5u)), 1u << _GLF_IDENTITY(uint(5u), uint(5u))))) >> _GLF_IDENTITY(uint(5u), uint(5u))))))))))))))) >> uvec3(0u, 0u, 0u)).x, _GLF_IDENTITY((gl_NumWorkGroups.x) | (gl_NumWorkGroups.x), ~ _GLF_IDENTITY((~ ((_GLF_IDENTITY(gl_NumWorkGroups.x, _GLF_IDENTITY(0u + (gl_NumWorkGroups.x), ~ (_GLF_IDENTITY(~ _GLF_IDENTITY((0u + (gl_NumWorkGroups.x)), min((0u + (gl_NumWorkGroups.x)), (0u + (gl_NumWorkGroups.x)))), max(~ (0u + (gl_NumWorkGroups.x)), ~ (0u + (gl_NumWorkGroups.x)))))))) | (gl_NumWorkGroups.x))), ((~ ((_GLF_IDENTITY(gl_NumWorkGroups.x, _GLF_IDENTITY(0u + (gl_NumWorkGroups.x), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(0u + (gl_NumWorkGroups.x), (0u + (gl_NumWorkGroups.x)) >> 0u)), max(~ (0u + (_GLF_IDENTITY(gl_NumWorkGroups, uvec3(0u, 0u, 0u) ^ (gl_NumWorkGroups)).x)), ~ (0u + (_GLF_IDENTITY(gl_NumWorkGroups, clamp(gl_NumWorkGroups, _GLF_IDENTITY(gl_NumWorkGroups, clamp(gl_NumWorkGroups, gl_NumWorkGroups, gl_NumWorkGroups)), gl_NumWorkGroups)).x)))))))) | (gl_NumWorkGroups.x)))) ^ 0u)))));
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (false)), ((! (false))) || false))))
  barrier();
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, _GLF_IDENTITY(true, ! (! (true))))))))
  return;
 for(int _injected_loop_counter = int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1]))) + vec2(0.0, 0.0)).x)); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))), bool(_GLF_IDENTITY(bool(_GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y)))), (bool(_GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))))) || _GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, (false) && true)), (! (_GLF_IDENTITY(false, (false) && true))) || false)))))))), ! (! (bool(bool(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))), bool(_GLF_IDENTITY(bool(_GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, vec2(mat3x2(injectionSwitch, 0.0, 0.0, 0.0, 1.0))), injectionSwitch, injectionSwitch)).y)))), _GLF_IDENTITY((bool(_GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))))), ! _GLF_IDENTITY((! ((bool(_GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))))))), true && ((! ((bool(_GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y)))))))))) || false))))))))); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, false, false, false)), bool(bool(bool(bvec4(false, false, false, false))))))))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
         barrier();
        }
       if(_GLF_DEAD(false))
        break;
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(-9.9) : injectionSwitch.x)))) > injectionSwitch.y))))
        continue;
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y))))
        break;
       barrier();
      }
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  return;
 uint workgroup_size = _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize, ~ (_GLF_IDENTITY(~ (gl_WorkGroupSize), (~ (gl_WorkGroupSize)) >> uvec3(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(_GLF_IDENTITY(0.0, _GLF_IDENTITY(_GLF_IDENTITY(float(float(_GLF_IDENTITY(0.0, (0.0) - 0.0))), min(float(float(_GLF_IDENTITY(0.0, (0.0) - 0.0))), float(float(_GLF_IDENTITY(_GLF_IDENTITY(0.0, (0.0) - 0.0), max(_GLF_IDENTITY(0.0, (0.0) - 0.0), _GLF_IDENTITY(0.0, (0.0) - 0.0))))))), max(_GLF_IDENTITY(float(float(_GLF_IDENTITY(0.0, (0.0) - 0.0))), min(float(float(_GLF_IDENTITY(0.0, (0.0) - 0.0))), float(float(_GLF_IDENTITY(0.0, (0.0) - 0.0))))), _GLF_IDENTITY(_GLF_IDENTITY(float(float(_GLF_IDENTITY(0.0, (0.0) - 0.0))), min(float(float(_GLF_IDENTITY(0.0, (0.0) - 0.0))), float(float(_GLF_IDENTITY(0.0, (0.0) - 0.0))))), mix(float(_GLF_IDENTITY(float(float(_GLF_IDENTITY(0.0, (0.0) - 0.0))), min(float(float(_GLF_IDENTITY(0.0, (0.0) - 0.0))), float(float(_GLF_IDENTITY(0.0, (0.0) - 0.0)))))), float(_GLF_FUZZED(-2.4)), bool(false)))))), injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))))), (_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize, ~ (_GLF_IDENTITY(~ (gl_WorkGroupSize), (_GLF_IDENTITY(~ (gl_WorkGroupSize), (~ (gl_WorkGroupSize)) | (_GLF_IDENTITY(~ (gl_WorkGroupSize), (false ? _GLF_FUZZED(uvec3(101221u, 165870u, 129890u)) : ~ (gl_WorkGroupSize)))))) >> uvec3(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(_GLF_IDENTITY(0.0, _GLF_IDENTITY(float(float(_GLF_IDENTITY(0.0, (0.0) - 0.0))), min(float(float(_GLF_IDENTITY(_GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_IDENTITY(_GLF_FUZZED(acos(-7012.5429)), mix(float(_GLF_IDENTITY(_GLF_FUZZED(acos(-7012.5429)), (true ? _GLF_FUZZED(acos(-7012.5429)) : _GLF_FUZZED(6.0)))), float(_GLF_FUZZED(-77.02)), bool(false)))))) + abs(0.0)), (0.0) - 0.0))), float(float(_GLF_IDENTITY(0.0, (0.0) - 0.0)))))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x, injectionSwitch.x)), max(_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x, injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x, injectionSwitch.x))))), _GLF_ZERO(0.0, injectionSwitch.x))))), (_GLF_IDENTITY(gl_WorkGroupSize, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) | (gl_WorkGroupSize))), (~ (gl_WorkGroupSize)) >> uvec3(_GLF_ZERO(_GLF_IDENTITY(0.0, float(_GLF_IDENTITY(mat2x4(0.0, 1.0, 0.0, 1.0, 1.0, tan(0.0), sin(0.0), 0.0), (true ? _GLF_IDENTITY(mat2x4(0.0, 1.0, 0.0, 1.0, 1.0, tan(0.0), _GLF_IDENTITY(sin(0.0), mix(float(_GLF_FUZZED(-6.7)), float(_GLF_IDENTITY(sin(0.0), mix(float(_GLF_FUZZED(-5.6)), float(sin(0.0)), bool(true)))), bool(true))), 0.0), transpose(transpose(mat2x4(0.0, 1.0, 0.0, 1.0, 1.0, tan(0.0), sin(0.0), 0.0)))) : _GLF_FUZZED(mat2x4(935.368, -474.596, 5.2, -7919.5009, 7210.0179, 777.325, 271.204, _GLF_IDENTITY(341.829, (true ? 341.829 : _GLF_FUZZED(-8.2))))))))), injectionSwitch.x), _GLF_ZERO(_GLF_IDENTITY(0.0, _GLF_IDENTITY(float(float(_GLF_IDENTITY(0.0, (0.0) - 0.0))), min(float(float(_GLF_IDENTITY(0.0, _GLF_IDENTITY((0.0), ((0.0)) * abs(1.0)) - 0.0))), float(float(_GLF_IDENTITY(0.0, (0.0) - _GLF_IDENTITY(0.0, (0.0) + abs(0.0)))))))), injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)))))) | (_GLF_IDENTITY(gl_WorkGroupSize, _GLF_IDENTITY(~ (_GLF_IDENTITY(~ (gl_WorkGroupSize), (~ (gl_WorkGroupSize)) >> uvec3(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(_GLF_IDENTITY(0.0, _GLF_IDENTITY(float(float(_GLF_IDENTITY(0.0, (0.0) - 0.0))), min(float(float(_GLF_IDENTITY(0.0, (0.0) - 0.0))), float(float(_GLF_IDENTITY(0.0, (0.0) - 0.0)))))), injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)))), _GLF_IDENTITY(uvec3(_GLF_IDENTITY(uvec3(~ (_GLF_IDENTITY(~ (gl_WorkGroupSize), (~ (gl_WorkGroupSize)) >> uvec3(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(_GLF_IDENTITY(0.0, _GLF_IDENTITY(float(float(_GLF_IDENTITY(0.0, (0.0) - 0.0))), min(float(float(_GLF_IDENTITY(0.0, (0.0) - 0.0))), float(float(_GLF_IDENTITY(0.0, (0.0) - 0.0)))))), injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))))), min(uvec3(~ (_GLF_IDENTITY(~ (gl_WorkGroupSize), (~ (gl_WorkGroupSize)) >> uvec3(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(_GLF_IDENTITY(0.0, _GLF_IDENTITY(float(float(_GLF_IDENTITY(0.0, (0.0) - 0.0))), min(float(float(_GLF_IDENTITY(0.0, (0.0) - 0.0))), float(float(_GLF_IDENTITY(0.0, (0.0) - 0.0)))))), injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))))), uvec3(~ (_GLF_IDENTITY(~ (gl_WorkGroupSize), (~ (gl_WorkGroupSize)) >> uvec3(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(_GLF_IDENTITY(0.0, _GLF_IDENTITY(float(float(_GLF_IDENTITY(0.0, (0.0) - 0.0))), min(float(float(_GLF_IDENTITY(0.0, (0.0) - 0.0))), float(float(_GLF_IDENTITY(0.0, (0.0) - 0.0)))))), injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)))))))), ~ (~ (uvec3(_GLF_IDENTITY(uvec3(~ (_GLF_IDENTITY(~ (gl_WorkGroupSize), (~ (gl_WorkGroupSize)) >> uvec3(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(_GLF_IDENTITY(0.0, _GLF_IDENTITY(float(float(_GLF_IDENTITY(0.0, (0.0) - 0.0))), min(float(float(_GLF_IDENTITY(0.0, (0.0) - 0.0))), float(float(_GLF_IDENTITY(0.0, (0.0) - 0.0)))))), injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))))), min(uvec3(~ (_GLF_IDENTITY(~ (gl_WorkGroupSize), (~ (gl_WorkGroupSize)) >> uvec3(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(_GLF_IDENTITY(0.0, _GLF_IDENTITY(float(float(_GLF_IDENTITY(0.0, (0.0) - 0.0))), min(float(float(_GLF_IDENTITY(0.0, (0.0) - 0.0))), float(float(_GLF_IDENTITY(0.0, (0.0) - 0.0)))))), injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))))), uvec3(~ (_GLF_IDENTITY(~ (gl_WorkGroupSize), (~ (gl_WorkGroupSize)) >> uvec3(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(_GLF_IDENTITY(0.0, _GLF_IDENTITY(float(float(_GLF_IDENTITY(0.0, (0.0) - 0.0))), min(float(float(_GLF_IDENTITY(0.0, (0.0) - 0.0))), float(float(_GLF_IDENTITY(0.0, (0.0) - 0.0)))))), injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)))))))))))))))) | (_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize, ~ (_GLF_IDENTITY(~ (gl_WorkGroupSize), (~ (gl_WorkGroupSize)) >> uvec3(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(_GLF_IDENTITY(0.0, _GLF_IDENTITY(float(float(_GLF_IDENTITY(_GLF_IDENTITY(0.0, float(mat2x3(0.0, 0.0, cos(0.0), 1.0, 1.0, _GLF_IDENTITY(dot(vec4(log(1.0), 1.0, 1.0, _GLF_IDENTITY(abs(1.0), min(_GLF_IDENTITY(abs(1.0), float(vec2(abs(1.0), 0.0))), abs(1.0)))), vec4(1.0, 0.0, 0.0, 0.0)), _GLF_IDENTITY(dot(vec4(log(1.0), 1.0, 1.0, abs(1.0)), vec4(1.0, 0.0, 0.0, 0.0)), max(dot(vec4(log(1.0), 1.0, 1.0, abs(1.0)), vec4(1.0, 0.0, 0.0, 0.0)), dot(vec4(log(1.0), 1.0, 1.0, abs(1.0)), vec4(1.0, 0.0, 0.0, 0.0)))))))), (0.0) - 0.0))), min(float(float(_GLF_IDENTITY(0.0, (0.0) - 0.0))), float(float(_GLF_IDENTITY(0.0, (0.0) - 0.0)))))), injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))))), _GLF_IDENTITY(uvec3(0u, 0u, 0u), max(uvec3(0u, 0u, 0u), uvec3(0u, 0u, 0u))) + (_GLF_IDENTITY(gl_WorkGroupSize, ~ (_GLF_IDENTITY(~ (gl_WorkGroupSize), (~ (gl_WorkGroupSize)) >> uvec3(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(9527.2589)), float(injectionSwitch.x), bool(true))), injectionSwitch.x))))), _GLF_ZERO(_GLF_IDENTITY(0.0, _GLF_IDENTITY(float(float(_GLF_IDENTITY(0.0, (0.0) - 0.0))), min(float(float(_GLF_IDENTITY(0.0, (0.0) - 0.0))), _GLF_IDENTITY(float(float(_GLF_IDENTITY(0.0, (0.0) - 0.0))), (_GLF_IDENTITY(float(float(_GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-883.211)), float(0.0), bool(true)))) - 0.0))), (float(float(_GLF_IDENTITY(0.0, (0.0) - 0.0)))) / 1.0)) + 0.0)))), injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))))))))), uvec3(uvec4(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize, ~ (_GLF_IDENTITY(~ (gl_WorkGroupSize), (~ _GLF_IDENTITY((gl_WorkGroupSize), min((gl_WorkGroupSize), (gl_WorkGroupSize)))) >> uvec3(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(_GLF_IDENTITY(0.0, _GLF_IDENTITY(_GLF_IDENTITY(float(float(_GLF_IDENTITY(0.0, _GLF_IDENTITY((0.0) - 0.0, max((0.0) - 0.0, (0.0) - 0.0))))), min(float(float(_GLF_IDENTITY(0.0, (0.0) - 0.0))), float(float(_GLF_IDENTITY(0.0, (0.0) - 0.0))))), (_GLF_IDENTITY(float(float(_GLF_IDENTITY(0.0, _GLF_IDENTITY((0.0) - 0.0, max((0.0) - 0.0, (0.0) - 0.0))))), min(float(float(_GLF_IDENTITY(0.0, (0.0) - 0.0))), _GLF_IDENTITY(float(float(_GLF_IDENTITY(0.0, (0.0) - 0.0))), (false ? _GLF_FUZZED(-0.4) : float(float(_GLF_IDENTITY(0.0, (0.0) - 0.0)))))))) - 0.0)), injectionSwitch.x), _GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x))))))), (_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize, _GLF_IDENTITY(_GLF_IDENTITY(~ (_GLF_IDENTITY(~ (gl_WorkGroupSize), (~ (gl_WorkGroupSize)) >> uvec3(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(_GLF_IDENTITY(0.0, _GLF_IDENTITY(float(float(_GLF_IDENTITY(0.0, (0.0) - 0.0))), min(float(float(_GLF_IDENTITY(0.0, (0.0) - 0.0))), float(float(_GLF_IDENTITY(0.0, (0.0) - 0.0)))))), injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)))), (~ (_GLF_IDENTITY(~ (gl_WorkGroupSize), (~ (gl_WorkGroupSize)) >> uvec3(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(_GLF_IDENTITY(0.0, _GLF_IDENTITY(float(float(_GLF_IDENTITY(0.0, (0.0) - 0.0))), min(float(float(_GLF_IDENTITY(0.0, (0.0) - 0.0))), float(float(_GLF_IDENTITY(_GLF_IDENTITY(0.0, (0.0) - 0.0), (false ? _GLF_FUZZED(-3661.1850) : _GLF_IDENTITY(0.0, (0.0) - 0.0)))))))), injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))))) - (uvec3(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)) << _GLF_IDENTITY(uvec3(6u), uvec3(6u)))), (~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (gl_WorkGroupSize), (~ _GLF_IDENTITY((gl_WorkGroupSize), min((gl_WorkGroupSize), _GLF_IDENTITY((gl_WorkGroupSize), ~ (_GLF_IDENTITY(~ ((gl_WorkGroupSize)), (true ? ~ ((gl_WorkGroupSize)) : _GLF_FUZZED(uvec3(139209u, 30541u, 56339u))))))))) - uvec3(0u, 0u, 0u)), _GLF_IDENTITY((~ (gl_WorkGroupSize)) >> uvec3(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), max(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))), _GLF_ZERO(_GLF_IDENTITY(0.0, _GLF_IDENTITY(float(float(_GLF_IDENTITY(0.0, (0.0) - 0.0))), min(float(float(_GLF_IDENTITY(0.0, (0.0) - 0.0))), float(float(_GLF_IDENTITY(0.0, (0.0) - 0.0)))))), injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)), _GLF_IDENTITY(min((~ (gl_WorkGroupSize)) >> uvec3(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(_GLF_IDENTITY(0.0, _GLF_IDENTITY(float(float(_GLF_IDENTITY(0.0, (0.0) - 0.0))), min(float(float(_GLF_IDENTITY(0.0, (0.0) - 0.0))), float(float(_GLF_IDENTITY(0.0, (0.0) - 0.0)))))), injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)), (~ (gl_WorkGroupSize)) >> uvec3(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(_GLF_IDENTITY(0.0, _GLF_IDENTITY(float(float(_GLF_IDENTITY(0.0, (0.0) - 0.0))), min(float(float(_GLF_IDENTITY(0.0, (0.0) - 0.0))), float(float(_GLF_IDENTITY(0.0, (0.0) - 0.0)))))), injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))), (_GLF_IDENTITY(min((~ (gl_WorkGroupSize)) >> uvec3(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(_GLF_IDENTITY(0.0, _GLF_IDENTITY(float(float(_GLF_IDENTITY(0.0, (0.0) - 0.0))), min(float(float(_GLF_IDENTITY(0.0, (0.0) - 0.0))), float(float(_GLF_IDENTITY(0.0, (0.0) - 0.0)))))), injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)), (~ (gl_WorkGroupSize)) >> uvec3(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(_GLF_IDENTITY(0.0, _GLF_IDENTITY(float(float(_GLF_IDENTITY(0.0, (0.0) - 0.0))), min(float(float(_GLF_IDENTITY(0.0, (0.0) - 0.0))), float(float(_GLF_IDENTITY(0.0, (0.0) - 0.0)))))), injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))), max(min((~ (gl_WorkGroupSize)) >> uvec3(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(_GLF_IDENTITY(0.0, _GLF_IDENTITY(float(float(_GLF_IDENTITY(0.0, (0.0) - 0.0))), min(float(float(_GLF_IDENTITY(0.0, (0.0) - 0.0))), float(float(_GLF_IDENTITY(0.0, (0.0) - 0.0)))))), injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)), (~ (gl_WorkGroupSize)) >> uvec3(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(_GLF_IDENTITY(0.0, _GLF_IDENTITY(float(float(_GLF_IDENTITY(0.0, (0.0) - 0.0))), min(float(float(_GLF_IDENTITY(0.0, (0.0) - 0.0))), float(float(_GLF_IDENTITY(0.0, (0.0) - 0.0)))))), injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))), min((~ (gl_WorkGroupSize)) >> uvec3(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(_GLF_IDENTITY(0.0, _GLF_IDENTITY(float(float(_GLF_IDENTITY(0.0, (0.0) - 0.0))), min(float(float(_GLF_IDENTITY(0.0, (0.0) - 0.0))), float(float(_GLF_IDENTITY(0.0, (0.0) - 0.0)))))), injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)), (~ (gl_WorkGroupSize)) >> uvec3(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(_GLF_IDENTITY(0.0, _GLF_IDENTITY(float(float(_GLF_IDENTITY(0.0, (0.0) - 0.0))), min(float(float(_GLF_IDENTITY(0.0, (0.0) - 0.0))), float(float(_GLF_IDENTITY(0.0, (0.0) - 0.0)))))), injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)))))) >> uvec3(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))))))) + uvec3(0u, 0u, 0u))), (_GLF_IDENTITY(gl_WorkGroupSize, ~ (_GLF_IDENTITY(~ (gl_WorkGroupSize), _GLF_IDENTITY((~ (gl_WorkGroupSize)), (_GLF_IDENTITY((~ (_GLF_IDENTITY(gl_WorkGroupSize, (false ? _GLF_FUZZED(uvec3(3790u, 144067u, 62555u)) : gl_WorkGroupSize)))), ~ (~ ((~ (gl_WorkGroupSize)))))) >> uvec3(0u, 0u, 0u)) >> _GLF_IDENTITY(uvec3(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(_GLF_IDENTITY(0.0, _GLF_IDENTITY(_GLF_IDENTITY(float(float(_GLF_IDENTITY(0.0, (0.0) - 0.0))), min(float(float(_GLF_IDENTITY(0.0, (0.0) - 0.0))), float(float(_GLF_IDENTITY(0.0, (0.0) - 0.0))))), (true ? _GLF_IDENTITY(float(float(_GLF_IDENTITY(0.0, (0.0) - 0.0))), min(float(float(_GLF_IDENTITY(0.0, (0.0) - 0.0))), float(float(_GLF_IDENTITY(0.0, (0.0) - 0.0))))) : _GLF_FUZZED(inversesqrt(96.32))))), injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)), (uvec3(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(3.1, -7.0)))), injectionSwitch)).x), _GLF_ZERO(_GLF_IDENTITY(0.0, _GLF_IDENTITY(float(float(_GLF_IDENTITY(0.0, (0.0) - 0.0))), min(float(float(_GLF_IDENTITY(0.0, (0.0) - 0.0))), float(float(_GLF_IDENTITY(0.0, (0.0) - 0.0)))))), injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))) * uvec3(1u, 1u, 1u)))))) | (_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize, ~ (_GLF_IDENTITY(~ (gl_WorkGroupSize), (~ (gl_WorkGroupSize)) >> uvec3(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(_GLF_IDENTITY(0.0, _GLF_IDENTITY(float(float(_GLF_IDENTITY(0.0, _GLF_IDENTITY((0.0) - 0.0, float(vec2((0.0) - 0.0, 0.0)))))), min(float(float(_GLF_IDENTITY(0.0, (0.0) - _GLF_IDENTITY(0.0, max(0.0, 0.0))))), float(float(_GLF_IDENTITY(0.0, (0.0) - 0.0)))))), _GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0)) / 1.0)), _GLF_ZERO(0.0, injectionSwitch.x))))), (_GLF_IDENTITY(gl_WorkGroupSize, ~ (_GLF_IDENTITY(~ (gl_WorkGroupSize), (~ (gl_WorkGroupSize)) >> uvec3(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(_GLF_IDENTITY(0.0, _GLF_IDENTITY(float(float(_GLF_IDENTITY(0.0, _GLF_IDENTITY((0.0) - 0.0, float(vec2((0.0) - 0.0, 0.0)))))), min(float(float(_GLF_IDENTITY(0.0, (0.0) - _GLF_IDENTITY(0.0, max(0.0, 0.0))))), float(float(_GLF_IDENTITY(0.0, (0.0) - 0.0)))))), _GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0)) / 1.0)), _GLF_ZERO(0.0, injectionSwitch.x)))))) | (_GLF_IDENTITY(gl_WorkGroupSize, ~ (_GLF_IDENTITY(~ (gl_WorkGroupSize), (~ (gl_WorkGroupSize)) >> uvec3(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(_GLF_IDENTITY(0.0, _GLF_IDENTITY(float(float(_GLF_IDENTITY(0.0, _GLF_IDENTITY((0.0) - 0.0, float(vec2((0.0) - 0.0, 0.0)))))), min(float(float(_GLF_IDENTITY(0.0, (0.0) - _GLF_IDENTITY(0.0, max(0.0, 0.0))))), float(float(_GLF_IDENTITY(0.0, (0.0) - 0.0)))))), _GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0)) / 1.0)), _GLF_ZERO(0.0, injectionSwitch.x)))))))))) | (_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize, ~ (_GLF_IDENTITY(~ (gl_WorkGroupSize), (~ (gl_WorkGroupSize)) >> _GLF_IDENTITY(uvec3(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(_GLF_IDENTITY(0.0, _GLF_IDENTITY(float(float(_GLF_IDENTITY(_GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, max(0.0, 0.0))) + 0.0), (0.0) - 0.0))), min(float(float(_GLF_IDENTITY(0.0, (0.0) - 0.0))), float(float(_GLF_IDENTITY(0.0, (0.0) - 0.0)))))), injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)), (uvec3(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(_GLF_IDENTITY(0.0, _GLF_IDENTITY(float(float(_GLF_IDENTITY(_GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, max(0.0, 0.0))) + 0.0), (0.0) - 0.0))), min(float(float(_GLF_IDENTITY(0.0, (0.0) - 0.0))), float(float(_GLF_IDENTITY(0.0, (0.0) - 0.0)))))), injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))) | (uvec3(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(_GLF_IDENTITY(0.0, _GLF_IDENTITY(float(float(_GLF_IDENTITY(_GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, max(0.0, 0.0))) + 0.0), (0.0) - 0.0))), min(float(float(_GLF_IDENTITY(0.0, (0.0) - 0.0))), float(float(_GLF_IDENTITY(0.0, (0.0) - 0.0)))))), injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))))))), uvec3(0u, 0u, 0u) + (_GLF_IDENTITY(gl_WorkGroupSize, ~ (_GLF_IDENTITY(~ (gl_WorkGroupSize), (~ (gl_WorkGroupSize)) >> uvec3(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(_GLF_IDENTITY(0.0, _GLF_IDENTITY(float(float(_GLF_IDENTITY(0.0, (0.0) - 0.0))), min(float(float(_GLF_IDENTITY(0.0, (0.0) - 0.0))), float(float(_GLF_IDENTITY(_GLF_IDENTITY(0.0, (0.0) - 0.0), (true ? _GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, min(0.0, _GLF_IDENTITY(0.0, float(_GLF_IDENTITY(mat4x3(0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0), (true ? mat4x3(0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0) : _GLF_FUZZED(mat4x3(-525.048, -6532.6229, 3.1, 4384.8049, -8.4, -0.6, 50.34, 122.241, -8314.6441, -84.83, 1.0, 4.8))))))))) - 0.0) : _GLF_FUZZED(3.4)))))))), injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))))))))), 1u))).x;
 GLF_merged4_0_1_17_1_1_11_2_1_12_3_1_14subgroup_local_idvirtual_gidworkgroup_idworkgroup_size.w = workgroup_size;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, vec2(mat4x2(_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)), 1.0, tan(0.0), 1.0, 0.0, determinant(mat4(0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0)), 1.0))).x > injectionSwitch.y), _GLF_IDENTITY(bool(bvec3((injectionSwitch.x > injectionSwitch.y), true, false)), (bool(bvec3((injectionSwitch.x > injectionSwitch.y), true, false))) || false)))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         barrier();
         if(_GLF_DEAD(false))
          return;
        }
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
  }
 else
  {
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, (false) || false), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat3(injectionSwitch, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, abs(0.0))), (false ? _GLF_FUZZED(vec2(-84.33, -6.3)) : vec2(mat3(injectionSwitch, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, abs(0.0)))))))).y))))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, true && (true))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         return;
        }
       if(_GLF_DEAD(false))
        return;
       return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
  }
 uint workgroup_id = _GLF_IDENTITY(gl_WorkGroupID.x, (_GLF_IDENTITY(gl_WorkGroupID.x, _GLF_IDENTITY((gl_WorkGroupID.x), max((gl_WorkGroupID.x), (gl_WorkGroupID.x))) / 1u)) * uint(_GLF_ONE(1.0, injectionSwitch.y)));
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  return;
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    break;
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     GLF_merged4_0_1_17_1_1_11_2_1_12_3_1_14subgroup_local_idvirtual_gidworkgroup_idworkgroup_size.z = workgroup_id;
    }
   else
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
      return;
    }
   if(_GLF_DEAD(false))
    break;
   if(_GLF_DEAD(false))
    barrier();
   do
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) || false))))))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         return;
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      break;
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bvec3(false, false, true)))));
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 for(int _injected_loop_counter = int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], clamp(_GLF_IDENTITY(injectionSwitch[0], (injectionSwitch[0]) - 0.0), injectionSwitch[0], injectionSwitch[0])), injectionSwitch[1])).y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec3(injectionSwitch.x > injectionSwitch.y, true, false))))))))))
      break;
     return;
    }
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(false))
  return;
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    continue;
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))) || false))))
    {
     for(int _injected_loop_counter = 1; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != (0 >> _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), 1 * _GLF_IDENTITY((int(4)), clamp((int(4)), (int(4)), _GLF_IDENTITY((int(4)), ((int(4))) >> (0 >> _GLF_IDENTITY(int(1), int(1)))))))))), (_GLF_WRAPPED_LOOP(_injected_loop_counter != (0 >> _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), 1 * _GLF_IDENTITY((int(4)), clamp((int(4)), (int(4)), _GLF_IDENTITY((int(4)), ((int(4))) >> (0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(1), (int(1)) ^ 0), int(1))))))))))) || false); _injected_loop_counter --)
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(mat2x3(injectionSwitch, 1.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0))).y))))
          barrier();
        }
      }
     barrier();
    }
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = _GLF_IDENTITY((0 << _GLF_IDENTITY(int(3), int(3))), ((0 << _GLF_IDENTITY(int(3), int(3)))) >> 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 & ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(6), int(_GLF_IDENTITY(6, max(6, 6)))), _GLF_IDENTITY(int(int(_GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), (false ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), (_GLF_IDENTITY(true, bool(bvec2(_GLF_IDENTITY(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (true)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) ? _GLF_IDENTITY(int(6), int(6)) : _GLF_FUZZED(_injected_loop_counter))))))), (_GLF_IDENTITY(int(int(_GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), (_GLF_IDENTITY(false, ! (! (false))) ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), (true ? _GLF_IDENTITY(int(6), int(6)) : _GLF_FUZZED(_injected_loop_counter))))))), clamp(_GLF_IDENTITY(int(int(_GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), (_GLF_IDENTITY(false, ! (! (false))) ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), (true ? _GLF_IDENTITY(int(6), int(6)) : _GLF_FUZZED(_injected_loop_counter))))))), min(int(int(_GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), (_GLF_IDENTITY(false, ! (! (false))) ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), (true ? _GLF_IDENTITY(int(6), int(6)) : _GLF_FUZZED(_injected_loop_counter))))))), int(int(_GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), (_GLF_IDENTITY(false, ! (! (false))) ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), (true ? _GLF_IDENTITY(int(6), int(6)) : _GLF_FUZZED(_injected_loop_counter))))))))), int(int(_GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), (_GLF_IDENTITY(false, ! (! (false))) ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), (true ? _GLF_IDENTITY(int(6), int(6)) : _GLF_FUZZED(_injected_loop_counter))))))), _GLF_IDENTITY(int(int(_GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), (_GLF_IDENTITY(false, ! (! (false))) ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), (true ? _GLF_IDENTITY(int(6), int(6)) : _GLF_FUZZED(_injected_loop_counter))))))), min(int(int(_GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), (_GLF_IDENTITY(false, ! (! (false))) ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), (true ? _GLF_IDENTITY(int(6), int(6)) : _GLF_FUZZED(_injected_loop_counter))))))), int(int(_GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), (_GLF_IDENTITY(false, ! (! (false))) ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), (true ? _GLF_IDENTITY(int(6), int(6)) : _GLF_FUZZED(_injected_loop_counter)))))))))))) >> 0))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(6), min(int(6), int(6))), int(6))))); _injected_loop_counter ++)
    {
     barrier();
    }
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint workgroup_base = _GLF_IDENTITY(GLF_merged4_0_1_17_1_1_11_2_1_12_3_1_14subgroup_local_idvirtual_gidworkgroup_idworkgroup_size.w, (GLF_merged4_0_1_17_1_1_11_2_1_12_3_1_14subgroup_local_idvirtual_gidworkgroup_idworkgroup_size.w) << 0u) * GLF_merged4_0_1_17_1_1_11_2_1_12_3_1_14subgroup_local_idvirtual_gidworkgroup_idworkgroup_size.z;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     for(int _injected_loop_counter = (0 ^ 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 << _GLF_IDENTITY(int(4), int(4)))); _injected_loop_counter --)
      {
       barrier();
      }
    }
   barrier();
  }
 uint virtual_gid = _GLF_IDENTITY(workgroup_base, (1u & 1u) * (workgroup_base)) + subgroup_id * subgroup_size + _GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_17_1_1_11_2_1_12_3_1_14subgroup_local_idvirtual_gidworkgroup_idworkgroup_size.x, (GLF_merged4_0_1_17_1_1_11_2_1_12_3_1_14subgroup_local_idvirtual_gidworkgroup_idworkgroup_size.x) | (GLF_merged4_0_1_17_1_1_11_2_1_12_3_1_14subgroup_local_idvirtual_gidworkgroup_idworkgroup_size.x)), (false ? _GLF_IDENTITY(_GLF_FUZZED(num_workgroup), clamp(_GLF_FUZZED(num_workgroup), _GLF_FUZZED(num_workgroup), _GLF_IDENTITY(_GLF_FUZZED(num_workgroup), uint(uint(_GLF_FUZZED(num_workgroup)))))) : GLF_merged4_0_1_17_1_1_11_2_1_12_3_1_14subgroup_local_idvirtual_gidworkgroup_idworkgroup_size.x));
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)))))))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec3(_GLF_DEAD(false), true, true)), false || (bool(bvec3(_GLF_DEAD(false), true, true))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))
      return;
     return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_DEAD(false))
  return;
 GLF_merged4_0_1_17_1_1_11_2_1_12_3_1_14subgroup_local_idvirtual_gidworkgroup_idworkgroup_size.y = virtual_gid;
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) || false), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0)))))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))
    return;
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     do
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          break;
         continue;
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), true && (bool(bool(false)))))), false || (! (false)))))));
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     return;
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
    }
  }
 uint next_virtual_gid = workgroup_base + _GLF_IDENTITY(subgroup_id, _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(subgroup_id, ~ _GLF_IDENTITY((~ (subgroup_id)), max(_GLF_IDENTITY((~ (subgroup_id)), min((~ (subgroup_id)), (~ (subgroup_id)))), _GLF_IDENTITY((~ (subgroup_id)), 0u ^ (_GLF_IDENTITY((~ (subgroup_id)), uint(uint((~ (subgroup_id)))))))))), 0u), uvec2(0u, 0u) ^ (uvec2(_GLF_IDENTITY(subgroup_id, ~ (~ (subgroup_id))), 0u)))), min(uint(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, ~ (~ (subgroup_id))), min(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, ~ (~ (subgroup_id))), ~ (~ (_GLF_IDENTITY(subgroup_id, ~ (~ (subgroup_id)))))), _GLF_IDENTITY(subgroup_id, ~ (~ (subgroup_id))))), 0u), uvec2(0u, 0u) ^ (uvec2(_GLF_IDENTITY(subgroup_id, ~ (~ (subgroup_id))), 0u)))), uint(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(subgroup_id, ~ (~ (subgroup_id))), 0u), uvec2(0u, 0u) ^ (uvec2(_GLF_IDENTITY(subgroup_id, ~ (~ (subgroup_id))), 0u))))))) * subgroup_size + ((GLF_merged4_0_1_17_1_1_11_2_1_12_3_1_14subgroup_local_idvirtual_gidworkgroup_idworkgroup_size.x + 1) % _GLF_IDENTITY(subgroup_size, uint(_GLF_IDENTITY(uvec2(subgroup_size, uint(_GLF_ONE(1.0, injectionSwitch.y))), uvec2(0u, _GLF_IDENTITY(0u, (0u) - (1u ^ 1u))) + (uvec2(subgroup_size, uint(_GLF_ONE(1.0, injectionSwitch.y))))))));
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 do
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 do
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        break;
       barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
        break;
      }
     if(_GLF_DEAD(false))
      barrier();
     break;
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    break;
   if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), _GLF_IDENTITY(bool(bool(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), bool(bvec3(bool(bool(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)).y, mix(float(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)).y, (_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)).y) * 1.0)), float(_GLF_FUZZED((77.47 / 8117.8040))), bool(false)))))))), _GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y)), false)))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), _GLF_IDENTITY(bool(bool(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), bool(bvec3(bool(bool(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)).y, mix(float(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)).y, (_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)).y) * 1.0)), float(_GLF_FUZZED((77.47 / 8117.8040))), bool(false)))))))), _GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y)), false))))), bool(bvec3(_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), _GLF_IDENTITY(bool(bool(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), bool(bvec3(bool(bool(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)).y, mix(float(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)).y, (_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)).y) * 1.0)), float(_GLF_FUZZED((77.47 / 8117.8040))), bool(false)))))))), _GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y)), false))))), bool(bool(! (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), _GLF_IDENTITY(bool(bool(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), bool(bvec3(bool(bool(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)).y, mix(float(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)).y, (_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)).y) * 1.0)), float(_GLF_FUZZED((77.47 / 8117.8040))), bool(false)))))))), _GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y)), false)))))))), false, false))))))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-1.7)), float(_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(max(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0), _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)))).x), float(mat3(max(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0), injectionSwitch.x), 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, abs(0.0), 1.0))))), bool(true))) > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
        barrier();
       barrier();
       if(_GLF_DEAD(false))
        return;
      }
    }
   else
    {
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, _GLF_IDENTITY(false || (false), bool(bvec4(false || (false), true, false, false))))));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     barrier();
    }
   return;
  }
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   buf[GLF_merged4_0_1_17_1_1_11_2_1_12_3_1_14subgroup_local_idvirtual_gidworkgroup_idworkgroup_size.y] = 1;
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 else
  {
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
    barrier();
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   barrier();
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     barrier();
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   atomicStore(buf[next_virtual_gid], uint(2), 4, 64, 4);
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  return;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, (false) || false)))))
    return;
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
}
