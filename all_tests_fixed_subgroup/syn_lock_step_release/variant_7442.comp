#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
  {
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, 1.0 * (injectionSwitch.y))))), bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), false))))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, false || (false))))
      {
      }
     else
      {
       return;
      }
    }
  }
uint subgroup_size = 16;
 for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) | 0))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         return;
        }
      }
     else
      {
      }
    }
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 do
  {
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(_GLF_ONE(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-2624.1619)), float(1.0), bool(true))), injectionSwitch.y)) * (injectionSwitch), max(_GLF_IDENTITY(mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch), clamp(_GLF_IDENTITY(mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch), (false ? _GLF_FUZZED(injectionSwitch) : _GLF_IDENTITY(mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch), (mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch)) + vec2(0.0, 0.0)))), mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch), mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch))), mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch)))).y, injectionSwitch.y))))))
      return;
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (false)), ((! (false))) || false)))))));
  }
 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, true && (false))));
 do
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, false || (false))))
    {
    }
   else
    {
     if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) || _GLF_IDENTITY(false, ! (! (false)))), bool(bvec4(_GLF_WRAPPED_IF_FALSE(false), false, true, _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(_GLF_IDENTITY(float(_GLF_FUZZED(8.1)), float(_GLF_IDENTITY(mat4x3(float(_GLF_FUZZED(8.1)), 1.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), 0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-488.634)), float(0.0), bool(true))), 0.0, _GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(-80.96) : 1.0)), _GLF_IDENTITY(1.0, max(1.0, 1.0)), 1.0)), 1.0, 1.0, 1.0), transpose(transpose(mat4x3(float(_GLF_FUZZED(8.1)), 1.0, round(length(normalize(vec4(1.0, _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-657.751))), 1.0, 1.0)))), 0.0, _GLF_IDENTITY(0.0, (true ? _GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(9879.0956)), bool(false))) : _GLF_FUZZED(910.983))), 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, _GLF_IDENTITY(1.0, mix(float(_GLF_IDENTITY(1.0, float(mat4x2(_GLF_IDENTITY(1.0, max(1.0, 1.0)), 1.0, 0.0, 1.0, abs(1.0), sqrt(0.0), 1.0, 0.0)))), float(_GLF_FUZZED(8.0)), bool(false))))))))), float(injectionSwitch.x), bool(true))) > injectionSwitch.y))))))
      {
      }
     else
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 | 0)); _injected_loop_counter --)
        {
         for(int _injected_loop_counter = (1 & 1); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) - 0) > 0); _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) / int(_GLF_ONE(1.0, injectionSwitch.y))), _GLF_IDENTITY(1, (1) | (1)) * (_injected_loop_counter --)), 0 ^ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) / int(_GLF_ONE(1.0, injectionSwitch.y))), 1 * (_injected_loop_counter --)), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) / int(_GLF_ONE(1.0, injectionSwitch.y))), 1 * (_injected_loop_counter --))))))))
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              {
               for(int _injected_loop_counter = int(_GLF_ZERO(0.0, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch : _GLF_FUZZED(vec2(-7.3, 5.9)))).x, float(vec2(injectionSwitch.x, 1.0))))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) | (0 << _GLF_IDENTITY(int(6), int(6)))), (_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, 0 | (_injected_loop_counter)), (_injected_loop_counter) | _GLF_IDENTITY((0 << _GLF_IDENTITY(int(6), int(6))), max((0 << _GLF_IDENTITY(int(6), int(6))), (0 << _GLF_IDENTITY(int(6), int(6))))))) + 0) != _GLF_IDENTITY(1, max(1, 1)), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) | _GLF_IDENTITY((0 << _GLF_IDENTITY(int(6), int(6))), ((0 << _GLF_IDENTITY(int(6), int(6)))) - _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), (int(_GLF_ZERO(0.0, injectionSwitch.x))) >> 0))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) | (0 << _GLF_IDENTITY(int(6), int(6))))), (~ (_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, _GLF_IDENTITY((_injected_loop_counter) >> 0, (false ? _GLF_FUZZED((vec3(430.472, -5.0, 7.7) , _injected_loop_counter)) : (_injected_loop_counter) >> 0))), (_injected_loop_counter) | (0 << _GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), max(_GLF_IDENTITY(int(6), int(6)), _GLF_IDENTITY(int(6), int(6)))))))) / _GLF_IDENTITY(1, (1) >> 0)))) != 1)))); _injected_loop_counter ++)
                {
                 return;
                }
              }
            }
          }
        }
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 uint num_workgroup = gl_NumWorkGroups.x;
 do
  {
   do
    {
     do
      {
       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))) && true))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), min((injectionSwitch) * mat2(1.0), _GLF_IDENTITY((injectionSwitch) * mat2(1.0), mix(vec2(_GLF_IDENTITY(((injectionSwitch) * mat2(1.0)), min(((injectionSwitch) * mat2(1.0)), ((injectionSwitch) * mat2(1.0))))[0], _GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(-9.5, min(-9.5, -9.5))), length(vec2(0.0, 0.0)) + (_GLF_FUZZED(-9.5)))), vec2(_GLF_FUZZED(-0.6), _GLF_IDENTITY((_GLF_IDENTITY((injectionSwitch), (false ? _GLF_FUZZED(injectionSwitch) : (injectionSwitch))) * mat2(1.0))[1], (((injectionSwitch) * mat2(1.0))[1]) * 1.0)), bvec2(false, true))))))[1])).x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-5.3), _GLF_IDENTITY((injectionSwitch), mix(vec2(_GLF_FUZZED(-998.673), _GLF_FUZZED(-0.4)), vec2(((injectionSwitch))[0], ((injectionSwitch))[1]), bvec2(true, _GLF_IDENTITY(true, (true) && true))))[_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) * 1)) | int(_GLF_ZERO(0.0, injectionSwitch.x)))]), vec2((injectionSwitch)[_GLF_IDENTITY(_GLF_IDENTITY(0, clamp(0, 0, 0)), _GLF_IDENTITY(0 ^ (0), (0 ^ (0)) >> 0))], _GLF_FUZZED(41.62)), bvec2(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (! _GLF_IDENTITY((_GLF_TRUE(true, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-72.86)), bool(false))) < injectionSwitch.y, bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-72.86)), bool(false))) < injectionSwitch.y), _GLF_IDENTITY(bool(bvec2(bool(_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-72.86)), bool(false))) < injectionSwitch.y), false)), ! (! (bool(bvec2(bool(_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-72.86)), bool(false))) < injectionSwitch.y), false))))))))))), ((_GLF_TRUE(true, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-72.86)), bool(false))) < injectionSwitch.y, bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-72.86)), bool(false))) < injectionSwitch.y), _GLF_IDENTITY(bool(bvec2(bool(_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-72.86)), bool(false))) < injectionSwitch.y), false)), ! (! (bool(bvec2(bool(_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-72.86)), bool(false))) < injectionSwitch.y), false)))))))))))) && true))), false))).y, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), min((injectionSwitch) * mat2(1.0), _GLF_IDENTITY((injectionSwitch) * mat2(1.0), mix(vec2(((injectionSwitch) * mat2(1.0))[0], _GLF_FUZZED(-9.5)), vec2(_GLF_FUZZED(-0.6), _GLF_IDENTITY(((injectionSwitch) * mat2(1.0))[1], (((injectionSwitch) * mat2(_GLF_IDENTITY(1.0, _GLF_ZERO(0.0, injectionSwitch.x) + (1.0))))[1]) * 1.0)), bvec2(_GLF_IDENTITY(false, false || (false)), true))))))[1])).x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-5.3), _GLF_IDENTITY((injectionSwitch), mix(vec2(_GLF_FUZZED(-998.673), _GLF_FUZZED(-0.4)), vec2(((injectionSwitch))[0], ((injectionSwitch))[1]), bvec2(true, _GLF_IDENTITY(true, (_GLF_IDENTITY(true, bool(bvec2(true, false)))) && true))))[_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) * 1)) | int(_GLF_ZERO(0.0, injectionSwitch.x)))]), vec2((injectionSwitch)[_GLF_IDENTITY(_GLF_IDENTITY(0, clamp(0, 0, 0)), _GLF_IDENTITY(0 ^ (0), (0 ^ (0)) >> 0))], _GLF_FUZZED(41.62)), bvec2(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! _GLF_IDENTITY((! (_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-72.86)), bool(false))) < injectionSwitch.y)))), ! (_GLF_IDENTITY(! ((! (_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-72.86)), bool(false))) < injectionSwitch.y))))), ! (! (! ((! (_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-72.86)), bool(false))) < injectionSwitch.y))))))))))), false))).y, true && (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), min((injectionSwitch) * mat2(1.0), _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch) * mat2(1.0), min(_GLF_IDENTITY((injectionSwitch) * mat2(1.0), mix(vec2(((injectionSwitch) * mat2(1.0))[0], ((injectionSwitch) * mat2(1.0))[1]), vec2(_GLF_FUZZED(-1960.4710), _GLF_FUZZED(-8.2)), bvec2(false, false))), _GLF_IDENTITY((injectionSwitch) * mat2(1.0), clamp((injectionSwitch) * mat2(1.0), _GLF_IDENTITY((injectionSwitch) * mat2(1.0), ((injectionSwitch) * mat2(1.0)) - vec2(0.0, 0.0)), (injectionSwitch) * mat2(1.0))))), _GLF_IDENTITY(mix(vec2(((injectionSwitch) * mat2(1.0))[0], _GLF_FUZZED(-9.5)), vec2(_GLF_FUZZED(-0.6), _GLF_IDENTITY(((injectionSwitch) * mat2(1.0))[1], (((_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch))) * mat2(1.0))[1]) * 1.0)), bvec2(false, true)), min(_GLF_IDENTITY(mix(vec2(((injectionSwitch) * mat2(1.0))[0], _GLF_FUZZED(-9.5)), vec2(_GLF_FUZZED(-0.6), _GLF_IDENTITY(((injectionSwitch) * mat2(1.0))[1], (((_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch))) * mat2(1.0))[1]) * 1.0)), bvec2(false, true)), mix(vec2((mix(vec2(((injectionSwitch) * mat2(1.0))[0], _GLF_FUZZED(-9.5)), vec2(_GLF_FUZZED(-0.6), _GLF_IDENTITY(((injectionSwitch) * mat2(1.0))[1], (((_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch))) * mat2(1.0))[1]) * 1.0)), bvec2(false, true)))[0], _GLF_FUZZED(-8.6)), vec2(_GLF_FUZZED(-569.348), (mix(vec2(((injectionSwitch) * mat2(1.0))[0], _GLF_FUZZED(-9.5)), vec2(_GLF_FUZZED(-0.6), _GLF_IDENTITY(((injectionSwitch) * mat2(1.0))[1], (((_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch))) * mat2(1.0))[1]) * 1.0)), bvec2(false, true)))[1]), bvec2(false, true))), mix(vec2(((injectionSwitch) * mat2(1.0))[0], _GLF_FUZZED(-9.5)), vec2(_GLF_FUZZED(-0.6), _GLF_IDENTITY(((injectionSwitch) * mat2(1.0))[1], (((_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch))) * mat2(1.0))[1]) * 1.0)), bvec2(false, true))))))))[1])).x > _GLF_IDENTITY(injectionSwitch, mix(_GLF_IDENTITY(_GLF_IDENTITY(vec2(_GLF_FUZZED(-5.3), _GLF_IDENTITY((injectionSwitch), mix(_GLF_IDENTITY(vec2(_GLF_FUZZED(-998.673), _GLF_FUZZED(_GLF_IDENTITY(-0.4, (false ? _GLF_FUZZED(7.2) : -0.4)))), (true ? vec2(_GLF_FUZZED(-998.673), _GLF_FUZZED(_GLF_IDENTITY(-0.4, (false ? _GLF_FUZZED(7.2) : -0.4)))) : _GLF_FUZZED(mod(injectionSwitch, 129.274)))), vec2(((injectionSwitch))[0], ((injectionSwitch))[1]), bvec2(true, _GLF_IDENTITY(true, (true) && true))))[_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) * 1)) | int(_GLF_ZERO(0.0, injectionSwitch.x)))]), mat2(_GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, max(1.0, 1.0)), 1.0, 1.0))) * (vec2(_GLF_FUZZED(-5.3), _GLF_IDENTITY((injectionSwitch), _GLF_IDENTITY(mix(vec2(_GLF_FUZZED(-998.673), _GLF_FUZZED(-0.4)), vec2(((injectionSwitch))[0], ((injectionSwitch))[1]), bvec2(true, _GLF_IDENTITY(true, (true) && true))), (false ? _GLF_FUZZED(vec2(-33.87, -9481.3338)) : mix(vec2(_GLF_FUZZED(-998.673), _GLF_FUZZED(-0.4)), vec2(((injectionSwitch))[0], ((injectionSwitch))[1]), bvec2(true, _GLF_IDENTITY(true, (true) && true))))))[_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) * 1)) | int(_GLF_ZERO(0.0, injectionSwitch.x)))]))), min(_GLF_IDENTITY(_GLF_IDENTITY(vec2(_GLF_FUZZED(-5.3), _GLF_IDENTITY((injectionSwitch), mix(_GLF_IDENTITY(vec2(_GLF_FUZZED(-998.673), _GLF_FUZZED(_GLF_IDENTITY(-0.4, (false ? _GLF_FUZZED(7.2) : -0.4)))), (true ? vec2(_GLF_FUZZED(-998.673), _GLF_FUZZED(_GLF_IDENTITY(-0.4, (false ? _GLF_FUZZED(7.2) : -0.4)))) : _GLF_FUZZED(mod(injectionSwitch, 129.274)))), vec2(((injectionSwitch))[0], ((injectionSwitch))[1]), bvec2(true, _GLF_IDENTITY(true, (true) && true))))[_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) * 1)) | int(_GLF_ZERO(0.0, injectionSwitch.x)))]), mat2(_GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, max(1.0, 1.0)), 1.0, 1.0))) * (vec2(_GLF_FUZZED(-5.3), _GLF_IDENTITY((injectionSwitch), _GLF_IDENTITY(mix(vec2(_GLF_FUZZED(-998.673), _GLF_FUZZED(-0.4)), vec2(((injectionSwitch))[0], ((injectionSwitch))[1]), bvec2(true, _GLF_IDENTITY(true, (true) && true))), (false ? _GLF_FUZZED(vec2(-33.87, -9481.3338)) : mix(vec2(_GLF_FUZZED(-998.673), _GLF_FUZZED(-0.4)), vec2(((injectionSwitch))[0], ((injectionSwitch))[1]), bvec2(true, _GLF_IDENTITY(true, (true) && true))))))[_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) * 1)) | int(_GLF_ZERO(0.0, injectionSwitch.x)))]))), (_GLF_IDENTITY(_GLF_IDENTITY(vec2(_GLF_FUZZED(-5.3), _GLF_IDENTITY((injectionSwitch), mix(_GLF_IDENTITY(vec2(_GLF_FUZZED(-998.673), _GLF_FUZZED(_GLF_IDENTITY(-0.4, (false ? _GLF_FUZZED(7.2) : -0.4)))), (true ? vec2(_GLF_FUZZED(-998.673), _GLF_FUZZED(_GLF_IDENTITY(-0.4, (false ? _GLF_FUZZED(7.2) : -0.4)))) : _GLF_FUZZED(mod(injectionSwitch, 129.274)))), vec2(((injectionSwitch))[0], ((injectionSwitch))[1]), bvec2(true, _GLF_IDENTITY(true, (true) && true))))[_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) * 1)) | int(_GLF_ZERO(0.0, injectionSwitch.x)))]), mat2(_GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, max(1.0, 1.0)), 1.0, 1.0))) * (vec2(_GLF_FUZZED(-5.3), _GLF_IDENTITY((injectionSwitch), _GLF_IDENTITY(mix(vec2(_GLF_FUZZED(-998.673), _GLF_FUZZED(-0.4)), vec2(((injectionSwitch))[0], ((injectionSwitch))[1]), bvec2(true, _GLF_IDENTITY(true, (true) && true))), (false ? _GLF_FUZZED(vec2(-33.87, -9481.3338)) : mix(vec2(_GLF_FUZZED(-998.673), _GLF_FUZZED(-0.4)), vec2(((injectionSwitch))[0], ((injectionSwitch))[1]), bvec2(true, _GLF_IDENTITY(true, (true) && true))))))[_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) * 1)) | int(_GLF_ZERO(0.0, injectionSwitch.x)))]))), clamp(_GLF_IDENTITY(vec2(_GLF_FUZZED(-5.3), _GLF_IDENTITY((injectionSwitch), mix(_GLF_IDENTITY(vec2(_GLF_FUZZED(-998.673), _GLF_FUZZED(_GLF_IDENTITY(-0.4, (false ? _GLF_FUZZED(7.2) : -0.4)))), (true ? vec2(_GLF_FUZZED(-998.673), _GLF_FUZZED(_GLF_IDENTITY(-0.4, (false ? _GLF_FUZZED(7.2) : -0.4)))) : _GLF_FUZZED(mod(injectionSwitch, 129.274)))), vec2(((injectionSwitch))[0], ((injectionSwitch))[1]), bvec2(true, _GLF_IDENTITY(true, (true) && true))))[_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) * 1)) | int(_GLF_ZERO(0.0, injectionSwitch.x)))]), mat2(_GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, max(1.0, 1.0)), 1.0, 1.0))) * (vec2(_GLF_FUZZED(-5.3), _GLF_IDENTITY((injectionSwitch), _GLF_IDENTITY(mix(vec2(_GLF_FUZZED(-998.673), _GLF_FUZZED(-0.4)), vec2(((injectionSwitch))[0], ((injectionSwitch))[1]), bvec2(true, _GLF_IDENTITY(true, (true) && true))), (false ? _GLF_FUZZED(vec2(-33.87, -9481.3338)) : mix(vec2(_GLF_FUZZED(-998.673), _GLF_FUZZED(-0.4)), vec2(((injectionSwitch))[0], ((injectionSwitch))[1]), bvec2(true, _GLF_IDENTITY(true, (true) && true))))))[_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) * 1)) | int(_GLF_ZERO(0.0, injectionSwitch.x)))]))), _GLF_IDENTITY(vec2(_GLF_FUZZED(-5.3), _GLF_IDENTITY((injectionSwitch), mix(_GLF_IDENTITY(vec2(_GLF_FUZZED(-998.673), _GLF_FUZZED(_GLF_IDENTITY(-0.4, (false ? _GLF_FUZZED(7.2) : -0.4)))), (true ? vec2(_GLF_FUZZED(-998.673), _GLF_FUZZED(_GLF_IDENTITY(-0.4, (false ? _GLF_FUZZED(7.2) : -0.4)))) : _GLF_FUZZED(mod(injectionSwitch, 129.274)))), vec2(((injectionSwitch))[0], ((injectionSwitch))[1]), bvec2(true, _GLF_IDENTITY(true, (true) && true))))[_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) * 1)) | int(_GLF_ZERO(0.0, injectionSwitch.x)))]), mat2(_GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, max(1.0, 1.0)), 1.0, 1.0))) * (vec2(_GLF_FUZZED(-5.3), _GLF_IDENTITY((injectionSwitch), _GLF_IDENTITY(mix(vec2(_GLF_FUZZED(-998.673), _GLF_FUZZED(-0.4)), vec2(((injectionSwitch))[0], ((injectionSwitch))[1]), bvec2(true, _GLF_IDENTITY(true, (true) && true))), (false ? _GLF_FUZZED(vec2(-33.87, -9481.3338)) : mix(vec2(_GLF_FUZZED(-998.673), _GLF_FUZZED(-0.4)), vec2(((injectionSwitch))[0], ((injectionSwitch))[1]), bvec2(true, _GLF_IDENTITY(true, (true) && true))))))[_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) * 1)) | int(_GLF_ZERO(0.0, injectionSwitch.x)))]))), _GLF_IDENTITY(vec2(_GLF_FUZZED(-5.3), _GLF_IDENTITY((injectionSwitch), mix(_GLF_IDENTITY(vec2(_GLF_FUZZED(-998.673), _GLF_FUZZED(_GLF_IDENTITY(-0.4, (false ? _GLF_FUZZED(7.2) : -0.4)))), (true ? vec2(_GLF_FUZZED(-998.673), _GLF_FUZZED(_GLF_IDENTITY(-0.4, (false ? _GLF_FUZZED(7.2) : -0.4)))) : _GLF_FUZZED(mod(injectionSwitch, 129.274)))), vec2(((injectionSwitch))[0], ((injectionSwitch))[1]), bvec2(true, _GLF_IDENTITY(true, (true) && true))))[_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) * 1)) | int(_GLF_ZERO(0.0, injectionSwitch.x)))]), mat2(_GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, max(1.0, 1.0)), 1.0, 1.0))) * (vec2(_GLF_FUZZED(-5.3), _GLF_IDENTITY((injectionSwitch), _GLF_IDENTITY(mix(vec2(_GLF_FUZZED(-998.673), _GLF_FUZZED(-0.4)), vec2(((injectionSwitch))[0], ((injectionSwitch))[1]), bvec2(true, _GLF_IDENTITY(true, (true) && true))), (false ? _GLF_FUZZED(vec2(-33.87, -9481.3338)) : mix(vec2(_GLF_FUZZED(-998.673), _GLF_FUZZED(-0.4)), vec2(((injectionSwitch))[0], ((injectionSwitch))[1]), bvec2(true, _GLF_IDENTITY(true, (true) && true))))))[_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) * 1)) | int(_GLF_ZERO(0.0, injectionSwitch.x)))])))))) - vec2(0.0, 0.0)), _GLF_IDENTITY(vec2(_GLF_FUZZED(-5.3), _GLF_IDENTITY((injectionSwitch), mix(_GLF_IDENTITY(vec2(_GLF_FUZZED(-998.673), _GLF_FUZZED(_GLF_IDENTITY(-0.4, (false ? _GLF_FUZZED(7.2) : -0.4)))), (true ? vec2(_GLF_FUZZED(-998.673), _GLF_FUZZED(_GLF_IDENTITY(-0.4, (false ? _GLF_FUZZED(7.2) : -0.4)))) : _GLF_FUZZED(mod(injectionSwitch, 129.274)))), vec2(((injectionSwitch))[0], ((injectionSwitch))[1]), bvec2(true, _GLF_IDENTITY(true, (true) && true))))[_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) * 1)) | int(_GLF_ZERO(0.0, injectionSwitch.x)))]), mat2(_GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, max(1.0, 1.0)), 1.0, 1.0))) * (vec2(_GLF_FUZZED(-5.3), _GLF_IDENTITY((injectionSwitch), _GLF_IDENTITY(mix(vec2(_GLF_FUZZED(-998.673), _GLF_FUZZED(-0.4)), vec2(((injectionSwitch))[0], ((injectionSwitch))[1]), bvec2(true, _GLF_IDENTITY(true, (true) && true))), (false ? _GLF_FUZZED(vec2(-33.87, -9481.3338)) : mix(vec2(_GLF_FUZZED(-998.673), _GLF_FUZZED(-0.4)), vec2(((injectionSwitch))[0], ((injectionSwitch))[1]), bvec2(true, _GLF_IDENTITY(true, (true) && true))))))[_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) * 1)) | int(_GLF_ZERO(0.0, injectionSwitch.x)))]))))), vec2((injectionSwitch)[_GLF_IDENTITY(_GLF_IDENTITY(0, clamp(0, 0, 0)), _GLF_IDENTITY(0 ^ (0), (0 ^ (0)) >> 0))], _GLF_FUZZED(41.62)), bvec2(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(max(injectionSwitch.y, injectionSwitch.y), clamp(_GLF_IDENTITY(max(injectionSwitch.y, injectionSwitch.y), 1.0 * (max(injectionSwitch.y, injectionSwitch.y))), max(injectionSwitch.y, injectionSwitch.y), _GLF_IDENTITY(max(injectionSwitch.y, injectionSwitch.y), _GLF_IDENTITY((false ? _GLF_FUZZED(3948.6969) : max(injectionSwitch.y, injectionSwitch.y)), clamp(_GLF_IDENTITY((false ? _GLF_FUZZED(3948.6969) : max(injectionSwitch.y, injectionSwitch.y)), float(mat2x3((false ? _GLF_FUZZED(3948.6969) : max(injectionSwitch.y, injectionSwitch.y)), 0.0, 1.0, 1.0, 1.0, 1.0))), (false ? _GLF_FUZZED(3948.6969) : max(injectionSwitch.y, injectionSwitch.y)), _GLF_IDENTITY((false ? _GLF_FUZZED(3948.6969) : max(injectionSwitch.y, injectionSwitch.y)), ((false ? _GLF_FUZZED(3948.6969) : max(injectionSwitch.y, injectionSwitch.y))) - 0.0))))))))))), ! (! (_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-72.86)), bool(false))) < injectionSwitch.y))))), false))).y))) && true)))))
          return;
        }
       else
        {
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, 0.0 + (_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0))), injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, 1.0 * (injectionSwitch.y))))))));
  }
 while(_GLF_WRAPPED_LOOP(false));
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), true && (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, true && (false))))), false || (false))))))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         do
          {
           return;
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
    }
  }
 uint workgroup_id = _GLF_IDENTITY(gl_WorkGroupID.x, 0u ^ (gl_WorkGroupID.x));
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))), true && (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))), bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), ! (! _GLF_IDENTITY((_GLF_DEAD(false)), _GLF_IDENTITY(bool(bool((_GLF_DEAD(false)))), false || (bool(bool((_GLF_DEAD(false)))))))))))), _GLF_IDENTITY(true, (true) || false), false)))), _GLF_IDENTITY(false, ! (_GLF_IDENTITY(_GLF_IDENTITY(! (false), bool(bvec4(! (false), true, true, false))), ! (! (! (false)))))) || ((_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))))))))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       return;
      }
     else
      {
      }
    }
  }
 else
  {
  }
 uint workgroup_base = workgroup_size * workgroup_id;
 uint virtual_gid = _GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_id, max(subgroup_id, _GLF_IDENTITY(subgroup_id, _GLF_IDENTITY((_GLF_IDENTITY(subgroup_id, 0u + (subgroup_id))), ((_GLF_IDENTITY(subgroup_id, 0u + (subgroup_id)))) ^ _GLF_IDENTITY(uint(_GLF_IDENTITY(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))) * 1.0)), (_GLF_IDENTITY(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))) * 1.0)), mix(float(_GLF_IDENTITY(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))) * 1.0)), max(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))) * 1.0)), _GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))) * 1.0))))), float(_GLF_FUZZED(89.52)), bool(false)))) / _GLF_ONE(1.0, injectionSwitch.y))), uint(uvec2(uint(_GLF_IDENTITY(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))) * 1.0)), (_GLF_IDENTITY(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))) * 1.0)), mix(float(_GLF_IDENTITY(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))) * 1.0)), max(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))) * 1.0)), _GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))) * 1.0))))), float(_GLF_FUZZED(89.52)), bool(false)))) / _GLF_ONE(1.0, injectionSwitch.y))), 1u)))) << 0u))) * subgroup_size, (workgroup_base + subgroup_id * subgroup_size) - 0u) + subgroup_local_id;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   do
    {
     for(int _injected_loop_counter = _GLF_IDENTITY(0, _GLF_IDENTITY((0), _GLF_IDENTITY(((_GLF_IDENTITY(0, (0) << _GLF_IDENTITY(0, (_GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) | (0))) >> 0)) - 0)))), 0 ^ (_GLF_IDENTITY((_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(0, (0) << 0), clamp(_GLF_IDENTITY(0, _GLF_IDENTITY((0) << 0, 0 | ((0) << 0))), _GLF_IDENTITY(_GLF_IDENTITY(0, (0) << 0), (_GLF_IDENTITY(0, (0) << 0)) - _GLF_IDENTITY(0, max(_GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(67959))), 0))), _GLF_IDENTITY(0, (0) << 0)))), max((_GLF_IDENTITY(0, (0) << 0)), (_GLF_IDENTITY(0, (0) << 0))))), (((_GLF_IDENTITY(0, (0) << _GLF_IDENTITY(_GLF_IDENTITY(0, clamp(0, 0, _GLF_IDENTITY(0, clamp(0, 0, 0)))), (_GLF_IDENTITY(0, clamp(0, 0, _GLF_IDENTITY(0, clamp(0, 0, 0))))) | 0))))) >> 0))) ^ 0) ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(1, min(1, 1))), (~ (_GLF_IDENTITY(1, min(1, 1)))) | 0)))); _injected_loop_counter ++)
      {
       do
        {
         if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, true && (true))))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   do
                    {
                     if(_GLF_WRAPPED_IF_TRUE(true))
                      {
                       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), ! _GLF_IDENTITY((! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), bool(bvec3(_GLF_WRAPPED_IF_TRUE(true), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), bool(bvec3(_GLF_WRAPPED_IF_TRUE(true), _GLF_IDENTITY(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), bool(bool(! (true)))))), (_GLF_IDENTITY(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), bool(bool(! (true)))))), bool(bvec4(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), bool(bool(! (true)))))), false, false, false)))) || false), _GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ((injectionSwitch.x < injectionSwitch.y)) || false))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), _GLF_IDENTITY(bool(bvec3(_GLF_WRAPPED_IF_TRUE(true), true, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).x < injectionSwitch.y)))), bool(bvec4(bool(bvec3(_GLF_WRAPPED_IF_TRUE(true), true, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).x < injectionSwitch.y)))), false, true, false))))), bool(bool(! _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), bool(bvec3(_GLF_WRAPPED_IF_TRUE(true), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), ! (! ((_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), bool(bvec3(_GLF_WRAPPED_IF_TRUE(true), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))), ((_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), bool(bvec3(_GLF_WRAPPED_IF_TRUE(true), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))) || false))))))))))), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, bool(bvec3(_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (! (injectionSwitch.x < injectionSwitch.y))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))) && (_GLF_IDENTITY(_GLF_IDENTITY((! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), bool(bvec3(_GLF_WRAPPED_IF_TRUE(true), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), bool(bvec3(_GLF_WRAPPED_IF_TRUE(true), true, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (! (injectionSwitch.x < injectionSwitch.y)))))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), bool(bvec3(_GLF_WRAPPED_IF_TRUE(true), true, _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, vec2(mat2x3(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(9160.3465)), vec2(_GLF_FUZZED(83.51), (injectionSwitch)[1]), bvec2(false, true))), 0.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0))).y)))))), bool(bool(_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), bool(bvec3(_GLF_WRAPPED_IF_TRUE(true), true, _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))) / 1.0))))))), (! (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), bool(bvec3(_GLF_WRAPPED_IF_TRUE(true), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))) && _GLF_IDENTITY(true, bool(bvec3(true, false, false)))))))))))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), bool(_GLF_IDENTITY(bvec3(_GLF_WRAPPED_IF_TRUE(true), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_WRAPPED_IF_TRUE(true), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec3(bvec4(bvec3(_GLF_WRAPPED_IF_TRUE(true), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false))), true))))), ! (! _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), bool(bvec3(_GLF_WRAPPED_IF_TRUE(true), true, _GLF_TRUE(true, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).x < injectionSwitch.y), false || ((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).x < injectionSwitch.y))))))), ! (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), bool(bvec3(_GLF_WRAPPED_IF_TRUE(true), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), bool(bvec4(_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), bool(bvec3(_GLF_WRAPPED_IF_TRUE(true), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), true && (! (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), bool(bvec3(_GLF_WRAPPED_IF_TRUE(true), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))), false, false, true))), bool(bool(! (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), bool(bvec3(_GLF_WRAPPED_IF_TRUE(true), true, _GLF_TRUE(_GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, true && (true)))), (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (injectionSwitch.x < injectionSwitch.y) || false)))))))))))))))), ((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), bool(bvec3(_GLF_WRAPPED_IF_TRUE(true), true, _GLF_TRUE(true, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).x < injectionSwitch.y), false || ((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).x < injectionSwitch.y))))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), bool(bvec3(_GLF_WRAPPED_IF_TRUE(true), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), bool(bool(! (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), bool(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_IF_TRUE(true)), true && (! (_GLF_WRAPPED_IF_TRUE(true))))))) || false), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))))))) || false)))) && true))), bool(bvec3((! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), bool(bvec3(_GLF_WRAPPED_IF_TRUE(true), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), bool(bvec3(_GLF_WRAPPED_IF_TRUE(true), true, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (! (injectionSwitch.x < injectionSwitch.y)))))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), bool(bvec3(_GLF_WRAPPED_IF_TRUE(true), true, _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, vec2(mat2x3(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(9160.3465)), vec2(_GLF_FUZZED(83.51), (injectionSwitch)[1]), bvec2(false, true))), 0.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0))).y)))))), bool(bool(_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), bool(bvec3(_GLF_WRAPPED_IF_TRUE(true), true, _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))) / 1.0))))))), (! (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), bool(bvec3(_GLF_WRAPPED_IF_TRUE(true), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))) && _GLF_IDENTITY(true, bool(bvec3(true, false, false)))))))))))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), bool(_GLF_IDENTITY(bvec3(_GLF_WRAPPED_IF_TRUE(true), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_WRAPPED_IF_TRUE(true), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec3(bvec4(bvec3(_GLF_WRAPPED_IF_TRUE(true), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false))), true))))), ! (! _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), bool(bvec3(_GLF_WRAPPED_IF_TRUE(true), true, _GLF_TRUE(true, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).x < injectionSwitch.y), false || ((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).x < injectionSwitch.y))))))), ! (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), bool(bvec3(_GLF_WRAPPED_IF_TRUE(true), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), bool(bvec4(_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), bool(bvec3(_GLF_WRAPPED_IF_TRUE(true), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), true && (! (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), bool(bvec3(_GLF_WRAPPED_IF_TRUE(true), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))), false, false, true))), bool(bool(! (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), bool(bvec3(_GLF_WRAPPED_IF_TRUE(true), true, _GLF_TRUE(_GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, true && (true)))), (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (injectionSwitch.x < injectionSwitch.y) || false)))))))))))))))), ((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), bool(bvec3(_GLF_WRAPPED_IF_TRUE(true), true, _GLF_TRUE(true, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).x < injectionSwitch.y), false || ((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).x < injectionSwitch.y))))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), bool(bvec3(_GLF_WRAPPED_IF_TRUE(true), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), bool(bool(! (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), bool(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_IF_TRUE(true)), true && (! (_GLF_WRAPPED_IF_TRUE(true))))))) || false), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))))))) || false)))) && true))), false, true))), false || ((! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), bool(bvec3(_GLF_WRAPPED_IF_TRUE(true), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), bool(bvec3(_GLF_WRAPPED_IF_TRUE(true), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), bool(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), true && (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), false || _GLF_IDENTITY((_GLF_WRAPPED_IF_TRUE(true)), (_GLF_IDENTITY((_GLF_WRAPPED_IF_TRUE(true)), false || ((_GLF_WRAPPED_IF_TRUE(true))))) || false)))), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), bool(bool(! (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), bool(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), _GLF_IDENTITY(true && _GLF_IDENTITY((_GLF_WRAPPED_IF_TRUE(true)), ! (! ((_GLF_WRAPPED_IF_TRUE(true))))), false || (true && _GLF_IDENTITY((_GLF_WRAPPED_IF_TRUE(true)), ! (! ((_GLF_WRAPPED_IF_TRUE(true)))))))), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))))))))))))))))
                        {
                         if(_GLF_WRAPPED_IF_FALSE(false))
                          {
                          }
                         else
                          {
                           return;
                          }
                        }
                       else
                        {
                        }
                      }
                     else
                      {
                      }
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                  }
                 else
                  {
                  }
                }
              }
             else
              {
              }
            }
           else
            {
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(injectionSwitch.x > injectionSwitch.y, false), bvec2(bvec3(_GLF_IDENTITY(bvec2(injectionSwitch.x > injectionSwitch.y, false), bvec2(bvec4(bvec2(injectionSwitch.x > injectionSwitch.y, false), true, true))), false)))), true && (bool(_GLF_IDENTITY(bvec2(injectionSwitch.x > injectionSwitch.y, false), bvec2(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(injectionSwitch.x > injectionSwitch.y, false), bvec2(bvec4(bvec2(injectionSwitch.x > injectionSwitch.y, false), true, true))), bvec2(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec2(injectionSwitch.x > injectionSwitch.y, false), bvec2(bvec4(bvec2(injectionSwitch.x > injectionSwitch.y, false), true, true))), false), bvec3(bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec2(injectionSwitch.x > injectionSwitch.y, false), bvec2(bvec4(bvec2(injectionSwitch.x > injectionSwitch.y, false), true, true))), false), bvec3(bvec4(bvec3(_GLF_IDENTITY(bvec2(injectionSwitch.x > injectionSwitch.y, false), bvec2(bvec4(bvec2(injectionSwitch.x > injectionSwitch.y, false), true, true))), false), false)))))))), false)))))))))));
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 uint next_virtual_gid = workgroup_base + _GLF_IDENTITY(subgroup_id * subgroup_size, _GLF_IDENTITY((subgroup_id * _GLF_IDENTITY(subgroup_size, min(subgroup_size, _GLF_IDENTITY(subgroup_size, ~ (~ (_GLF_IDENTITY(subgroup_size, 1u * (subgroup_size)))))))), _GLF_IDENTITY(uint(uvec2((subgroup_id * _GLF_IDENTITY(subgroup_size, min(subgroup_size, _GLF_IDENTITY(subgroup_size, ~ (~ (_GLF_IDENTITY(subgroup_size, 1u * (subgroup_size)))))))), (_GLF_IDENTITY((1u << _GLF_IDENTITY(uint(1u), uint(1u))), 1u * ((1u << _GLF_IDENTITY(uint(1u), uint(1u))))) >> _GLF_IDENTITY(uint(1u), uint(1u))))), max(uint(uvec2((subgroup_id * _GLF_IDENTITY(subgroup_size, min(_GLF_IDENTITY(subgroup_size, (true ? _GLF_IDENTITY(subgroup_size, (true ? subgroup_size : _GLF_FUZZED(111493u))) : _GLF_FUZZED(workgroup_base))), _GLF_IDENTITY(subgroup_size, ~ (~ (_GLF_IDENTITY(subgroup_size, 1u * (subgroup_size)))))))), ((_GLF_IDENTITY(1u << _GLF_IDENTITY(uint(1u), uint(1u)), 0u | (1u << _GLF_IDENTITY(uint(1u), uint(_GLF_IDENTITY(1u, max(_GLF_IDENTITY(1u, (1u) >> 0u), 1u))))))) >> _GLF_IDENTITY(uint(1u), uint(1u))))), uint(uvec2((subgroup_id * _GLF_IDENTITY(subgroup_size, min(subgroup_size, _GLF_IDENTITY(subgroup_size, ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, min(_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size))) / 1u), subgroup_size)), 1u * (subgroup_size)))))))), ((1u << _GLF_IDENTITY(uint(1u), uint(1u))) >> _GLF_IDENTITY(_GLF_IDENTITY(uint(1u), uint(1u)), (false ? _GLF_FUZZED(145458u) : _GLF_IDENTITY(_GLF_IDENTITY(uint(1u), uint(1u)), (_GLF_IDENTITY(uint(1u), uint(1u))) << 0u))))))))) / uint(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(_GLF_IDENTITY(float(vec4(injectionSwitch.y, 1.0, cos(0.0), 1.0)), clamp(float(vec4(injectionSwitch.y, 1.0, cos(0.0), 1.0)), float(vec4(injectionSwitch.y, 1.0, cos(0.0), 1.0)), float(vec4(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y, 1.0, cos(_GLF_IDENTITY(0.0, clamp(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), 0.0, 0.0))), 1.0)))), (false ? _GLF_FUZZED(-4816.6111) : float(vec4(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).y, 1.0, cos(_GLF_IDENTITY(0.0, float(_GLF_IDENTITY(mat2(0.0, 1.0, 0.0, 0.0), _GLF_IDENTITY(mat2(mat3x4(mat2(0.0, 1.0, 0.0, 0.0))), (true ? mat2(mat3x4(mat2(0.0, 1.0, 0.0, 0.0))) : _GLF_FUZZED(mat2(5.0, -36.60, -9847.5330, 2945.4980)))))))), 1.0)))))))) + ((subgroup_local_id + 1) % _GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((_GLF_IDENTITY(subgroup_size, max(subgroup_size, subgroup_size))), ((_GLF_IDENTITY(subgroup_size, max(subgroup_size, subgroup_size)))) * _GLF_IDENTITY(1u, (true ? 1u : _GLF_FUZZED(packUnorm2x16(vec2(-6.1, -8.6)))))) / 1u));
 buf[virtual_gid] = _GLF_IDENTITY(_GLF_IDENTITY(1, ~ (~ (_GLF_IDENTITY(1, _GLF_IDENTITY(max(1, 1), (_GLF_IDENTITY(_GLF_IDENTITY(max(1, 1), (max(1, 1)) / 1), int(ivec2(max(1, 1), 0)))) | (max(1, 1))))))), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(1, ~ (~ (_GLF_IDENTITY(1, max(1, 1))))), ~ (~ (_GLF_IDENTITY(1, ~ (~ (_GLF_IDENTITY(1, _GLF_IDENTITY(_GLF_IDENTITY(max(1, 1), min(max(1, 1), max(1, 1))), ~ (~ (_GLF_IDENTITY(max(1, 1), (max(1, 1)) | (max(1, 1)))))))))))))), max((_GLF_IDENTITY(_GLF_IDENTITY(1, ~ (~ (_GLF_IDENTITY(1, max(1, 1))))), ~ (~ (_GLF_IDENTITY(1, ~ (~ (_GLF_IDENTITY(1, _GLF_IDENTITY(_GLF_IDENTITY(max(1, 1), min(max(1, 1), max(1, 1))), ~ (~ (_GLF_IDENTITY(max(1, 1), (max(1, 1)) | (max(1, 1)))))))))))))), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(1, ~ (~ (_GLF_IDENTITY(1, max(1, 1))))), ~ (~ (_GLF_IDENTITY(1, ~ (~ (_GLF_IDENTITY(1, _GLF_IDENTITY(_GLF_IDENTITY(max(1, 1), min(max(1, 1), max(1, 1))), ~ (~ (_GLF_IDENTITY(max(1, 1), (max(1, 1)) | (max(1, 1)))))))))))))), min((_GLF_IDENTITY(_GLF_IDENTITY(1, ~ (~ (_GLF_IDENTITY(1, max(1, 1))))), ~ (~ (_GLF_IDENTITY(1, ~ (~ (_GLF_IDENTITY(1, _GLF_IDENTITY(_GLF_IDENTITY(max(1, 1), min(max(1, 1), max(1, 1))), ~ (~ (_GLF_IDENTITY(max(1, 1), (max(1, 1)) | (max(1, 1)))))))))))))), (_GLF_IDENTITY(_GLF_IDENTITY(1, ~ (~ (_GLF_IDENTITY(1, max(1, 1))))), ~ (~ (_GLF_IDENTITY(1, ~ (~ (_GLF_IDENTITY(1, _GLF_IDENTITY(_GLF_IDENTITY(max(1, 1), min(max(1, 1), max(1, 1))), ~ (~ (_GLF_IDENTITY(max(1, 1), (max(1, 1)) | (max(1, 1)))))))))))))))))) ^ 0);
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       do
        {
         do
          {
           return;
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec2(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bool((injectionSwitch.x > injectionSwitch.y)))), true))), ! (! (! _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y), _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec2((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y), false)), ! (! (bool(bvec2((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y), false))))), ! (! (bool(bvec2((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y), false)))))))))))))));
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
  }
 else
  {
  }
 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y)), _GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) || _GLF_IDENTITY(false, false || (false)))), true && _GLF_IDENTITY((bool(_GLF_IDENTITY(bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), _GLF_IDENTITY((bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), _GLF_IDENTITY(_GLF_IDENTITY(bool(bool((bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), (bool(bool((bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))) || false), false || (_GLF_IDENTITY(_GLF_IDENTITY(bool(bool((bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), (bool(bool((bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))) || false), (_GLF_IDENTITY(bool(bool(_GLF_IDENTITY((bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY((bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), bool(bool((bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), false), bvec2(bvec4(bvec2(_GLF_IDENTITY((bool((_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec4(false, false, true, false)))) && true), false, false, false))), (injectionSwitch.x > injectionSwitch.y))))), bool(bool((bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), false), true, false))))))), (bool(bool((bool((_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)))))))))) || false)) || false)))) || false))), (_GLF_IDENTITY((bool(_GLF_IDENTITY(bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), _GLF_IDENTITY((bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), _GLF_IDENTITY(_GLF_IDENTITY(bool(bool((bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), (bool(bool((bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))) || false), false || (_GLF_IDENTITY(_GLF_IDENTITY(bool(bool((bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), (bool(bool((bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))) || false), (_GLF_IDENTITY(bool(bool(_GLF_IDENTITY((bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY((bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), bool(bool((bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), false), bvec2(bvec4(bvec2(_GLF_IDENTITY((bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), bool(bool((bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), false), true, false))))))), _GLF_IDENTITY((bool(bool((bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))) || false, ((bool(bool((bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))) || false) && true))) || false)))) || false))), ! (! ((bool(_GLF_IDENTITY(bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), _GLF_IDENTITY((bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), _GLF_IDENTITY(_GLF_IDENTITY(bool(bool((bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), _GLF_IDENTITY((bool(bool((bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))) || false, ((bool(bool((bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))) || false) || false)), false || (_GLF_IDENTITY(_GLF_IDENTITY(bool(bool((bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), (bool(bool((bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))) || false), (_GLF_IDENTITY(bool(bool(_GLF_IDENTITY((bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY((bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), bool(bool((bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), false), bvec2(bvec4(bvec2(_GLF_IDENTITY((bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), bool(bool((bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), false), true, false))))))), (bool(bool((bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))) || _GLF_IDENTITY(false, (false) && true))) || false)))) || false))))))) || false))) && true)), (_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, tan(vec2(0.0, 0.0)) + (injectionSwitch)).y)), _GLF_IDENTITY(_GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) || false)), true && _GLF_IDENTITY((bool(_GLF_IDENTITY(bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), _GLF_IDENTITY((bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), _GLF_IDENTITY(_GLF_IDENTITY(bool(bool((bool((_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))))), (bool(bool((bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))) || false), false || (_GLF_IDENTITY(_GLF_IDENTITY(bool(bool((bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), (bool(bool((bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))) || false), (_GLF_IDENTITY(bool(bool(_GLF_IDENTITY((bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY((bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), bool(bool((bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), false), bvec2(bvec4(bvec2(_GLF_IDENTITY((bool((_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(vec2(_GLF_IDENTITY(injectionSwitch.y, 0.0 + (injectionSwitch.y)), sqrt(0.0))))))))), bool(bool((bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), false), true, false))))))), (bool(bool((bool((_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false)))))), (injectionSwitch.x > injectionSwitch.y)))))))) || false)) || false)))) || false))), (_GLF_IDENTITY((bool(_GLF_IDENTITY(bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), _GLF_IDENTITY((bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), _GLF_IDENTITY(_GLF_IDENTITY(bool(bool((bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), (bool(bool((bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))) || false), false || (_GLF_IDENTITY(_GLF_IDENTITY(bool(bool((bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), (bool(bool((bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))) || false), (_GLF_IDENTITY(bool(bool(_GLF_IDENTITY((bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY((bool(_GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! ((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), bool(bool((bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), false), bvec2(bvec4(bvec2(_GLF_IDENTITY((bool((_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (injectionSwitch.x > injectionSwitch.y))), bool(bool((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (injectionSwitch.x > injectionSwitch.y)))))))))), bool(bool((bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), false), true, false))))))), (bool(bool((_GLF_IDENTITY(bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (_GLF_IDENTITY(bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bool(bvec3(bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true, true)))) || false))))) || false)) || false)))) || false))), ! (! ((bool(_GLF_IDENTITY(bool((_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(injectionSwitch.x > injectionSwitch.y))))))), _GLF_IDENTITY((bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), _GLF_IDENTITY(_GLF_IDENTITY(bool(bool((bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), _GLF_IDENTITY((bool(bool((bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), ! (_GLF_IDENTITY(! ((bool(bool((bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))), bool(bvec4(! ((bool(bool((bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))), true, false, false))))) || false), false || (_GLF_IDENTITY(_GLF_IDENTITY(bool(bool((bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), (bool(bool((bool((_GLF_FALSE(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), (bool(false)) || false))), (injectionSwitch.x > injectionSwitch.y)))))))) || false), (_GLF_IDENTITY(bool(bool(_GLF_IDENTITY((bool((_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(5217.3423)), float(injectionSwitch.x), bool(true))) > injectionSwitch.y))))), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY((bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), bool(bool((bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), false), bvec2(bvec4(bvec2(_GLF_IDENTITY((bool((_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(mat4x2(injectionSwitch, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0))).y))))), bool(bool((bool((_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))).y)))))))), false), true, false))))))), (bool(bool((bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))) || false)) || false)))) || false))))))) || false))) && true, (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) || false)), true && _GLF_IDENTITY((bool(_GLF_IDENTITY(bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), _GLF_IDENTITY((bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), _GLF_IDENTITY(_GLF_IDENTITY(bool(bool((bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), (bool(bool((bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))) || false), _GLF_IDENTITY(false || (_GLF_IDENTITY(_GLF_IDENTITY(bool(bool((bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), (bool(bool((bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))) || false), (_GLF_IDENTITY(bool(bool(_GLF_IDENTITY((bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY((bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), bool(bool((bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), false), bvec2(bvec4(bvec2(_GLF_IDENTITY((bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), bool(bool((bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), false), true, false))))))), (bool(bool((bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))) || false)) || false)), true && (false || (_GLF_IDENTITY(_GLF_IDENTITY(bool(bool((bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), (bool(bool((bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))) || false), (_GLF_IDENTITY(bool(bool(_GLF_IDENTITY((bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY((bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), bool(bool((bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), false), bvec2(bvec4(bvec2(_GLF_IDENTITY((bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), bool(bool((bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), false), true, false))))))), (bool(bool((bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))) || false)) || false)))))) || false))), (_GLF_IDENTITY(_GLF_IDENTITY((bool(_GLF_IDENTITY(bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), _GLF_IDENTITY((bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), _GLF_IDENTITY(_GLF_IDENTITY(bool(bool((bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), (bool(bool((bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))) || false), false || (_GLF_IDENTITY(_GLF_IDENTITY(bool(bool((bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), (bool(bool((bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))) || false), (_GLF_IDENTITY(bool(bool(_GLF_IDENTITY((bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY((bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), bool(bool((bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), false), bvec2(bvec4(bvec2(_GLF_IDENTITY((bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), bool(bool((bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), false), true, false))))))), (bool(bool((bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))) || false)) || false)))) || false))), ! (! ((bool(_GLF_IDENTITY(bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), _GLF_IDENTITY((bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), _GLF_IDENTITY(_GLF_IDENTITY(bool(bool((bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), (bool(bool((bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))) || false), false || (_GLF_IDENTITY(_GLF_IDENTITY(bool(bool((bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), (bool(bool((bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))) || false), (_GLF_IDENTITY(bool(bool(_GLF_IDENTITY((bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY((bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), bool(bool((bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), false), bvec2(bvec4(bvec2(_GLF_IDENTITY((bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), bool(bool((bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), false), true, false))))))), (bool(bool((bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))) || false)) || false)))) || false)))))), false || (_GLF_IDENTITY((bool(_GLF_IDENTITY(bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), _GLF_IDENTITY((bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), _GLF_IDENTITY(_GLF_IDENTITY(bool(bool((bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), (_GLF_IDENTITY(bool(bool((bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), (bool(bool((bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))) && true)) || false), false || (_GLF_IDENTITY(_GLF_IDENTITY(bool(bool((bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), (bool(bool((bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))) || false), (_GLF_IDENTITY(bool(bool(_GLF_IDENTITY((bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY((bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), bool(bool((bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), false), bvec2(bvec4(bvec2(_GLF_IDENTITY((bool((_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), bool(bool((bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), false), true, false))))))), _GLF_IDENTITY((bool(bool((bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), false || ((bool(bool((bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))) || false)) || false)))) || false))), ! (! ((bool(_GLF_IDENTITY(bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), _GLF_IDENTITY((bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), _GLF_IDENTITY(_GLF_IDENTITY(bool(bool((bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), _GLF_IDENTITY((bool(bool((bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))) || false, ((bool(bool((bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))) || false) && true)), false || (_GLF_IDENTITY(_GLF_IDENTITY(bool(bool((bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), (bool(bool((bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))) || false), _GLF_IDENTITY((_GLF_IDENTITY(bool(bool(_GLF_IDENTITY((bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_IDENTITY((bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || ((bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), bool(bool((bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), false), bvec2(bvec4(bvec2(_GLF_IDENTITY((bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), bool(bool((_GLF_IDENTITY(bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true && (bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))), false), true, false))))))), (bool(bool((bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))) || false)), ((_GLF_IDENTITY(bool(bool(_GLF_IDENTITY((bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_IDENTITY((bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || ((bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), bool(bool((bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), false), bvec2(bvec4(bvec2(_GLF_IDENTITY((bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), bool(bool((_GLF_IDENTITY(bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true && (bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))), false), true, false))))))), (bool(bool((bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))) || false))) || false) || false)))) || false))))))))) || false))) && true, bool(_GLF_IDENTITY(bool(_GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) || false)), true && _GLF_IDENTITY((bool(_GLF_IDENTITY(bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), _GLF_IDENTITY((bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), _GLF_IDENTITY(_GLF_IDENTITY(bool(bool((bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), (bool(bool((bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))) || false), _GLF_IDENTITY(false || (_GLF_IDENTITY(_GLF_IDENTITY(bool(bool((bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), (bool(bool((bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))) || false), (_GLF_IDENTITY(bool(bool(_GLF_IDENTITY((bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY((bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), bool(bool((bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), false), bvec2(bvec4(bvec2(_GLF_IDENTITY((bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), bool(bool((bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), false), true, false))))))), (bool(bool((bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))) || false)) || false)), true && (false || (_GLF_IDENTITY(_GLF_IDENTITY(bool(bool((bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), (bool(bool((bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))) || false), (_GLF_IDENTITY(bool(bool(_GLF_IDENTITY((bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY((bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), bool(bool((bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), false), bvec2(bvec4(bvec2(_GLF_IDENTITY((bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), bool(bool((bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), false), true, false))))))), (bool(bool((bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))) || false)) || false)))))) || false))), (_GLF_IDENTITY(_GLF_IDENTITY((bool(_GLF_IDENTITY(bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), _GLF_IDENTITY((bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), _GLF_IDENTITY(_GLF_IDENTITY(bool(bool((bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), (bool(bool((bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))) || false), false || (_GLF_IDENTITY(_GLF_IDENTITY(bool(bool((bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), (bool(bool((bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))) || false), (_GLF_IDENTITY(bool(bool(_GLF_IDENTITY((bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY((bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), bool(bool((bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), false), bvec2(bvec4(bvec2(_GLF_IDENTITY((bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), bool(bool((bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), false), true, false))))))), (bool(bool((bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))) || false)) || false)))) || false))), ! (! ((bool(_GLF_IDENTITY(bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), _GLF_IDENTITY((bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), _GLF_IDENTITY(_GLF_IDENTITY(bool(bool((bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), (bool(bool((bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))) || false), false || (_GLF_IDENTITY(_GLF_IDENTITY(bool(bool((bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), (bool(bool((bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))) || false), (_GLF_IDENTITY(bool(bool(_GLF_IDENTITY((bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY((bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), bool(bool((bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), false), bvec2(bvec4(bvec2(_GLF_IDENTITY((bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), bool(bool((bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), false), true, false))))))), (bool(bool((bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))) || false)) || false)))) || false)))))), false || (_GLF_IDENTITY((bool(_GLF_IDENTITY(bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), _GLF_IDENTITY((bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), _GLF_IDENTITY(_GLF_IDENTITY(bool(bool((bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), (_GLF_IDENTITY(bool(bool((bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), (bool(bool((bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))) && true)) || false), false || (_GLF_IDENTITY(_GLF_IDENTITY(bool(bool((bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), (bool(bool((bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))) || false), (_GLF_IDENTITY(bool(bool(_GLF_IDENTITY((bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY((bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), bool(bool((bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), false), bvec2(bvec4(bvec2(_GLF_IDENTITY((bool((_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), bool(bool((bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), false), true, false))))))), _GLF_IDENTITY((bool(bool((bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), false || ((bool(bool((bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))) || false)) || false)))) || false))), ! (! ((bool(_GLF_IDENTITY(bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), _GLF_IDENTITY((bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), _GLF_IDENTITY(_GLF_IDENTITY(bool(bool((bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), _GLF_IDENTITY((bool(bool((bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))) || false, ((bool(bool((bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))) || false) && true)), false || (_GLF_IDENTITY(_GLF_IDENTITY(bool(bool((bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), (bool(bool((bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))) || false), _GLF_IDENTITY((_GLF_IDENTITY(bool(bool(_GLF_IDENTITY((bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_IDENTITY((bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || ((bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), bool(bool((bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), false), bvec2(bvec4(bvec2(_GLF_IDENTITY((bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), bool(bool((_GLF_IDENTITY(bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true && (bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))), false), true, false))))))), (bool(bool((bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))) || false)), ((_GLF_IDENTITY(bool(bool(_GLF_IDENTITY((bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_IDENTITY((bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || ((bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), bool(bool((bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), false), bvec2(bvec4(bvec2(_GLF_IDENTITY((bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), bool(bool((_GLF_IDENTITY(bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true && (bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))), false), true, false))))))), (bool(bool((bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))) || false))) || false) || false)))) || false))))))))) || false))) && true), (bool(_GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) || false)), true && _GLF_IDENTITY((bool(_GLF_IDENTITY(bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), _GLF_IDENTITY((bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), _GLF_IDENTITY(_GLF_IDENTITY(bool(bool((bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), (bool(bool((bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))) || false), _GLF_IDENTITY(false || (_GLF_IDENTITY(_GLF_IDENTITY(bool(bool((bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), (bool(bool((bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))) || false), (_GLF_IDENTITY(bool(bool(_GLF_IDENTITY((bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY((bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), bool(bool((bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), false), bvec2(bvec4(bvec2(_GLF_IDENTITY((bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), bool(bool((bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), false), true, false))))))), (bool(bool((bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))) || false)) || false)), true && (false || (_GLF_IDENTITY(_GLF_IDENTITY(bool(bool((bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), (bool(bool((bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))) || false), (_GLF_IDENTITY(bool(bool(_GLF_IDENTITY((bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY((bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), bool(bool((bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), false), bvec2(bvec4(bvec2(_GLF_IDENTITY((bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), bool(bool((bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), false), true, false))))))), (bool(bool((bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))) || false)) || false)))))) || false))), (_GLF_IDENTITY(_GLF_IDENTITY((bool(_GLF_IDENTITY(bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), _GLF_IDENTITY((bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), _GLF_IDENTITY(_GLF_IDENTITY(bool(bool((bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), (bool(bool((bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))) || false), false || (_GLF_IDENTITY(_GLF_IDENTITY(bool(bool((bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), (bool(bool((bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))) || false), (_GLF_IDENTITY(bool(bool(_GLF_IDENTITY((bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY((bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), bool(bool((bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), false), bvec2(bvec4(bvec2(_GLF_IDENTITY((bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), bool(bool((bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), false), true, false))))))), (bool(bool((bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))) || false)) || false)))) || false))), ! (! ((bool(_GLF_IDENTITY(bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), _GLF_IDENTITY((bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), _GLF_IDENTITY(_GLF_IDENTITY(bool(bool((bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), (bool(bool((bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))) || false), false || (_GLF_IDENTITY(_GLF_IDENTITY(bool(bool((bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), (bool(bool((bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))) || false), (_GLF_IDENTITY(bool(bool(_GLF_IDENTITY((bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY((bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), bool(bool((bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), false), bvec2(bvec4(bvec2(_GLF_IDENTITY((bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), bool(bool((bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), false), true, false))))))), (bool(bool((bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))) || false)) || false)))) || false)))))), false || (_GLF_IDENTITY((bool(_GLF_IDENTITY(bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), _GLF_IDENTITY((bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), _GLF_IDENTITY(_GLF_IDENTITY(bool(bool((bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), (_GLF_IDENTITY(bool(bool((bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), (bool(bool((bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))) && true)) || false), false || (_GLF_IDENTITY(_GLF_IDENTITY(bool(bool((bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), (bool(bool((bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))) || false), (_GLF_IDENTITY(bool(bool(_GLF_IDENTITY((bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY((bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), bool(bool((bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), false), bvec2(bvec4(bvec2(_GLF_IDENTITY((bool((_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), bool(bool((bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), false), true, false))))))), _GLF_IDENTITY((bool(bool((bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), false || ((bool(bool((bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))) || false)) || false)))) || false))), ! (! ((bool(_GLF_IDENTITY(bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), _GLF_IDENTITY((bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), _GLF_IDENTITY(_GLF_IDENTITY(bool(bool((bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), _GLF_IDENTITY((bool(bool((bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))) || false, ((bool(bool((bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))) || false) && true)), false || (_GLF_IDENTITY(_GLF_IDENTITY(bool(bool((bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), (bool(bool((bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))) || false), _GLF_IDENTITY((_GLF_IDENTITY(bool(bool(_GLF_IDENTITY((bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_IDENTITY((bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || ((bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), bool(bool((bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), false), bvec2(bvec4(bvec2(_GLF_IDENTITY((bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), bool(bool((_GLF_IDENTITY(bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true && (bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))), false), true, false))))))), (bool(bool((bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))) || false)), ((_GLF_IDENTITY(bool(bool(_GLF_IDENTITY((bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_IDENTITY((bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || ((bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), bool(bool((bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), false), bvec2(bvec4(bvec2(_GLF_IDENTITY((bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), bool(bool((_GLF_IDENTITY(bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true && (bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))), false), true, false))))))), (bool(bool((bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))) || false))) || false) || false)))) || false))))))))) || false))) && true)) || false)))) || false)))) || false))
  {
  }
 else
  {
   do
    {
     atomicStore(buf[next_virtual_gid], uint(2), 4, 64, _GLF_IDENTITY(4, (4) << 0));
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
}
