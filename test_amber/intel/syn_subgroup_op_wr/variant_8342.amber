#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_78 {
 mat3x2 _f0;
 bool _f1;
 mat2 _f2;
 bvec2 _f3;
 ivec2 _f4;
} ;

struct _GLF_struct_77 {
 mat2 _f0;
 mat3x2 _f1;
 ivec2 _f2;
 vec2 _f3;
} ;

struct _GLF_struct_76 {
 mat2x3 _f0;
 uvec4 _f1;
 mat2x3 _f2;
 uvec2 _f3;
 float _f4;
 mat3x2 _f5;
 bvec3 _f6;
} ;

struct _GLF_struct_79 {
 _GLF_struct_76 _f0;
 _GLF_struct_77 _f1;
 _GLF_struct_78 _f2;
} ;

struct _GLF_struct_74 {
 uvec4 _f0;
 float _f1;
 vec4 _f2;
 uint _f3;
 ivec2 _f4;
} ;

struct _GLF_struct_75 {
 _GLF_struct_74 _f0;
 bool _f1;
 uvec2 _f2;
} ;

struct _GLF_struct_72 {
 bvec2 _f0;
 bvec4 _f1;
 mat2x4 _f2;
 uint _f3;
 uint _f4;
 bvec2 _f5;
} ;

struct _GLF_struct_73 {
 _GLF_struct_72 _f0;
 mat3 _f1;
} ;

struct _GLF_struct_70 {
 uvec4 _f0;
 bvec4 _f1;
 mat3x4 _f2;
 bvec2 _f3;
 mat3 _f4;
} ;

struct _GLF_struct_69 {
 mat3x2 _f0;
 mat2 _f1;
 vec2 _f2;
} ;

struct _GLF_struct_68 {
 float _f0;
 vec3 _f1;
 float _f2;
 bvec3 _f3;
 int _f4;
} ;

struct _GLF_struct_71 {
 mat4 _f0;
 _GLF_struct_68 _f1;
 uvec2 _f2;
 _GLF_struct_69 _f3;
 _GLF_struct_70 _f4;
} ;

struct _GLF_struct_66 {
 bvec3 _f0;
} ;

struct _GLF_struct_65 {
 uint _f0;
} ;

struct _GLF_struct_64 {
 uvec2 _f0;
} ;

struct _GLF_struct_67 {
 _GLF_struct_64 _f0;
 _GLF_struct_65 _f1;
 _GLF_struct_66 _f2;
 mat4x3 _f3;
} ;

struct _GLF_struct_62 {
 vec4 _f0;
 mat2x3 _f1;
 bool _f2;
} ;

struct _GLF_struct_63 {
 _GLF_struct_62 _f0;
 mat4 _f1;
} ;

struct _GLF_struct_80 {
 uint workgroup_id;
 _GLF_struct_63 _f0;
 _GLF_struct_67 _f1;
 _GLF_struct_71 _f2;
 _GLF_struct_73 _f3;
 mat2x4 _f4;
 _GLF_struct_75 _f5;
 _GLF_struct_79 _f6;
} ;

struct _GLF_struct_59 {
 uvec2 _f0;
 mat2 _f1;
 uvec3 _f2;
 mat3 _f3;
 ivec3 _f4;
 mat3 _f5;
} ;

struct _GLF_struct_60 {
 mat4x3 _f0;
 vec3 _f1;
 _GLF_struct_59 _f2;
 ivec2 _f3;
} ;

struct _GLF_struct_57 {
 mat2 _f0;
 uvec4 _f1;
 mat3x4 _f2;
 vec2 _f3;
} ;

struct _GLF_struct_56 {
 uint subgroup_local_id;
 uvec3 _f0;
 mat2x3 _f1;
 float _f2;
} ;

struct _GLF_struct_55 {
 mat3 _f0;
 mat4x3 _f1;
 bvec4 _f2;
 bool _f3;
 mat2x3 _f4;
 uint _f5;
 mat4 _f6;
} ;

struct _GLF_struct_54 {
 mat4 _f0;
} ;

struct _GLF_struct_58 {
 _GLF_struct_54 _f0;
 ivec4 _f1;
 _GLF_struct_55 _f2;
 bool _f3;
 _GLF_struct_56 _f4;
 _GLF_struct_57 _f5;
} ;

struct _GLF_struct_53 {
 mat3 _f0;
} ;

struct _GLF_struct_51 {
 mat2x3 _f0;
 vec2 _f1;
 float _f2;
 bool _f3;
 vec3 _f4;
} ;

struct _GLF_struct_50 {
 bvec3 _f0;
 mat4 _f1;
} ;

struct _GLF_struct_49 {
 mat4x3 _f0;
 mat2x4 _f1;
 mat2x3 _f2;
 ivec2 _f3;
 vec2 _f4;
 bvec2 _f5;
} ;

struct _GLF_struct_48 {
 mat2x3 _f0;
 mat4x3 _f1;
 ivec4 _f2;
 mat2 _f3;
} ;

struct _GLF_struct_52 {
 mat4x2 _f0;
 _GLF_struct_48 _f1;
 uvec4 _f2;
 _GLF_struct_49 _f3;
 _GLF_struct_50 _f4;
 _GLF_struct_51 _f5;
} ;

struct _GLF_struct_61 {
 _GLF_struct_52 _f0;
 _GLF_struct_53 _f1;
 _GLF_struct_58 _f2;
 uvec4 _f3;
 bool _f4;
 bool _f5;
 _GLF_struct_60 _f6;
} ;

struct _GLF_struct_45 {
 bvec4 _f0;
 mat2x3 _f1;
 uvec3 _f2;
 mat3x4 _f3;
} ;

struct _GLF_struct_44 {
 mat3x4 _f0;
 float _f1;
} ;

struct _GLF_struct_43 {
 uvec3 _f0;
 uvec4 _f1;
} ;

struct _GLF_struct_42 {
 mat4x3 _f0;
} ;

struct _GLF_struct_41 {
 mat3x2 _f0;
 ivec4 _f1;
 vec4 _f2;
 mat3x4 _f3;
 bvec2 _f4;
 mat2 _f5;
} ;

struct _GLF_struct_46 {
 _GLF_struct_41 _f0;
 _GLF_struct_42 _f1;
 _GLF_struct_43 _f2;
 _GLF_struct_44 _f3;
 _GLF_struct_45 _f4;
} ;

struct _GLF_struct_40 {
 bvec2 _f0;
} ;

struct _GLF_struct_38 {
 vec4 _f0;
 uvec2 _f1;
 ivec3 _f2;
 bvec2 _f3;
 uvec4 _f4;
 uint _f5;
 uint _f6;
} ;

struct _GLF_struct_37 {
 mat4x3 _f0;
 vec4 _f1;
 vec3 _f2;
 mat3x4 _f3;
 vec2 _f4;
} ;

struct _GLF_struct_36 {
 vec3 _f0;
 ivec3 _f1;
 uint _f2;
 mat2 _f3;
 mat3x2 _f4;
 bvec4 _f5;
} ;

struct _GLF_struct_39 {
 _GLF_struct_36 _f0;
 _GLF_struct_37 _f1;
 _GLF_struct_38 _f2;
 uvec2 _f3;
} ;

struct _GLF_struct_34 {
 mat2 _f0;
 uvec2 _f1;
} ;

struct _GLF_struct_33 {
 bvec3 _f0;
 ivec4 _f1;
 bool _f2;
 mat4x3 _f3;
 ivec3 _f4;
 mat3x4 _f5;
} ;

struct _GLF_struct_35 {
 _GLF_struct_33 _f0;
 _GLF_struct_34 _f1;
} ;

struct _GLF_struct_47 {
 ivec2 _f0;
 uint subgroup_size;
 mat4 _f1;
 _GLF_struct_35 _f2;
 _GLF_struct_39 _f3;
 _GLF_struct_40 _f4;
 _GLF_struct_46 _f5;
} ;

struct _GLF_struct_30 {
 float _f0;
 mat2 _f1;
 mat3x4 _f2;
 mat2x4 _f3;
 uvec4 _f4;
} ;

struct _GLF_struct_31 {
 _GLF_struct_30 _f0;
 mat2 _f1;
} ;

struct _GLF_struct_28 {
 uvec2 _f0;
 mat3x4 _f1;
 int _injected_loop_counter;
 mat4x2 _f2;
 mat3 _f3;
 mat2x4 _f4;
} ;

struct _GLF_struct_29 {
 float _f0;
 _GLF_struct_28 _f1;
} ;

struct _GLF_struct_26 {
 ivec4 _f0;
 mat4x2 _f1;
 vec3 _f2;
 mat3x2 _f3;
 mat3x4 _f4;
 vec2 _f5;
 mat4x2 _f6;
} ;

struct _GLF_struct_25 {
 ivec3 _f0;
 vec4 _f1;
 mat3x4 _f2;
 bvec4 _f3;
 vec3 _f4;
 bvec4 _f5;
 mat4 _f6;
} ;

struct _GLF_struct_24 {
 float _f0;
 vec3 _f1;
 vec4 _f2;
} ;

struct _GLF_struct_27 {
 mat2 _f0;
 _GLF_struct_24 _f1;
 mat2x3 _f2;
 _GLF_struct_25 _f3;
 mat4 _f4;
 _GLF_struct_26 _f5;
} ;

struct _GLF_struct_32 {
 mat3x2 _f0;
 _GLF_struct_27 _f1;
 mat3x4 _f2;
 _GLF_struct_29 _f3;
 _GLF_struct_31 _f4;
} ;

struct _GLF_struct_21 {
 uint _f0;
 ivec3 _f1;
 uint subgroup_base;
 bvec2 _f2;
} ;

struct _GLF_struct_20 {
 mat2x4 _f0;
 mat4x3 _f1;
 ivec3 _f2;
 float _f3;
 vec3 _f4;
 ivec3 _f5;
} ;

struct _GLF_struct_19 {
 uvec4 _f0;
 float _f1;
 float _f2;
 uvec4 _f3;
 uvec2 _f4;
} ;

struct _GLF_struct_22 {
 bvec3 _f0;
 vec4 _f1;
 _GLF_struct_19 _f2;
 _GLF_struct_20 _f3;
 _GLF_struct_21 _f4;
 mat4 _f5;
 int _f6;
} ;

struct _GLF_struct_23 {
 _GLF_struct_22 _f0;
} ;

struct _GLF_struct_16 {
 ivec4 _f0;
 ivec2 _f1;
 ivec3 _f2;
 vec3 _f3;
 bvec4 _f4;
 mat4 _f5;
} ;

struct _GLF_struct_15 {
 mat3x4 _f0;
 vec3 _f1;
 bvec2 _f2;
 uint _f3;
 mat3x2 _f4;
 float _f5;
} ;

struct _GLF_struct_17 {
 mat2x4 _f0;
 mat3 _f1;
 _GLF_struct_15 _f2;
 _GLF_struct_16 _f3;
} ;

struct _GLF_struct_13 {
 mat4x3 _f0;
 mat2 _f1;
 mat3x4 _f2;
 float _f3;
} ;

struct _GLF_struct_12 {
 bvec3 _f0;
 mat2x4 _f1;
 bvec4 _f2;
 mat3x4 _f3;
 mat3x2 _f4;
} ;

struct _GLF_struct_14 {
 mat4x3 _f0;
 _GLF_struct_12 _f1;
 mat3 _f2;
 _GLF_struct_13 _f3;
 uint subgroup_id;
} ;

struct _GLF_struct_18 {
 mat4x2 _f0;
 mat3 _f1;
 uvec3 _f2;
 _GLF_struct_14 _f3;
 bvec4 _f4;
 _GLF_struct_17 _f5;
} ;

struct _GLF_struct_9 {
 mat3 _f0;
 uvec2 _f1;
 bvec3 _f2;
 mat3x4 _f3;
} ;

struct _GLF_struct_8 {
 uvec4 _f0;
 mat2 _f1;
 bool _f2;
 ivec2 _f3;
 mat4x2 _f4;
} ;

struct _GLF_struct_7 {
 mat2 _f0;
 ivec2 _f1;
} ;

struct _GLF_struct_6 {
 int _f0;
 mat2x4 _f1;
 vec2 _f2;
 mat2x3 _f3;
} ;

struct _GLF_struct_5 {
 vec2 _f0;
 uvec3 _f1;
 mat4x3 _f2;
 mat4 _f3;
 mat3x2 _f4;
 uvec4 _f5;
 ivec3 _f6;
} ;

struct _GLF_struct_10 {
 int _f0;
 _GLF_struct_5 _f1;
 _GLF_struct_6 _f2;
 _GLF_struct_7 _f3;
 uint workgroup_base;
 _GLF_struct_8 _f4;
 mat3x2 _f5;
 _GLF_struct_9 _f6;
} ;

struct _GLF_struct_11 {
 vec2 _f0;
 bool _f1;
 _GLF_struct_10 _f2;
 uint _f3;
 vec4 _f4;
 ivec4 _f5;
 mat4x3 _f6;
} ;

struct _GLF_struct_2 {
 vec4 _f0;
 bvec4 _f1;
 bool _f2;
 int _f3;
} ;

struct _GLF_struct_1 {
 mat2 _f0;
 mat2x4 _f1;
 ivec2 _f2;
 ivec3 _f3;
} ;

struct _GLF_struct_3 {
 mat3x2 _f0;
 uint _f1;
 float _f2;
 _GLF_struct_1 _f3;
 _GLF_struct_2 _f4;
 uint workgroup_size;
} ;

struct _GLF_struct_4 {
 _GLF_struct_3 _f0;
} ;

struct _GLF_struct_0 {
 uint virtual_gid;
 bvec3 _f0;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).y))))
  barrier();
 _GLF_struct_18 _GLF_struct_replacement_18 = _GLF_struct_18(mat4x2(1.0), mat3(1.0), uvec3(1u), _GLF_struct_14(mat4x3(1.0), _GLF_struct_12(bvec3(_GLF_IDENTITY(true, false || (true))), mat2x4(1.0), bvec4(true), mat3x4(1.0), mat3x2(_GLF_IDENTITY(1.0, _GLF_IDENTITY(0.0, max(0.0, 0.0)) + (1.0)))), _GLF_IDENTITY(mat3(1.0), (false ? _GLF_FUZZED(mat3(9.6, -47.31, -4.9, 85.36, -0.7, -4366.4597, 7409.2664, 69.53, 4812.4642)) : mat3(1.0))), _GLF_struct_13(mat4x3(1.0), mat2(1.0), mat3x4(1.0), 1.0), gl_SubgroupID), bvec4(true), _GLF_struct_17(mat2x4(_GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, (1.0) / 1.0), 1.0, _GLF_IDENTITY(1.0, min(1.0, 1.0))))), mat3(1.0), _GLF_struct_15(mat3x4(1.0), vec3(1.0), _GLF_IDENTITY(bvec2(_GLF_IDENTITY(true, (true) && _GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ! (! ((injectionSwitch.x < injectionSwitch.y))))) && true)))), bvec2(bvec3(bvec2(true), false))), 1u, mat3x2(1.0), 1.0), _GLF_struct_16(ivec4(1), ivec2(1), _GLF_IDENTITY(ivec3(1), (ivec3(1)) | ivec3(0, 0, 0)), vec3(1.0), bvec4(true), mat4(1.0))));
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) + vec2(0.0, 0.0), max((injectionSwitch) + vec2(0.0, 0.0), _GLF_IDENTITY((injectionSwitch) + vec2(0.0, 0.0), (_GLF_IDENTITY((injectionSwitch) + vec2(0.0, 0.0), ((injectionSwitch) + vec2(0.0, 0.0)) / vec2(1.0, 1.0))) - abs(vec2(0.0, 0.0)))))), (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) + vec2(0.0, 0.0), max((injectionSwitch) + vec2(0.0, 0.0), _GLF_IDENTITY((injectionSwitch) + vec2(0.0, 0.0), (_GLF_IDENTITY((injectionSwitch) + vec2(0.0, 0.0), ((injectionSwitch) + vec2(0.0, 0.0)) / vec2(1.0, 1.0))) - abs(vec2(0.0, 0.0))))))) * abs(vec2(1.0, 1.0))).x > _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(-0.5)), bool(false)))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       barrier();
      }
     else
      {
      }
    }
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
 do
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      barrier();
     barrier();
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 _GLF_struct_47 _GLF_struct_replacement_47 = _GLF_struct_47(ivec2(_GLF_IDENTITY(1, _GLF_IDENTITY((1), int(ivec3(_GLF_IDENTITY((1), ((1)) / 1), (0 << _GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), clamp(_GLF_IDENTITY(int(4), int(4)), _GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), (_GLF_IDENTITY(int(4), int(4))) | (_GLF_IDENTITY(int(4), int(4)))), _GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), clamp(_GLF_IDENTITY(int(4), int(4)), _GLF_IDENTITY(int(4), int(4)), _GLF_IDENTITY(int(4), int(4))))))), 1))) >> 0)), gl_SubgroupSize, mat4(1.0), _GLF_struct_35(_GLF_struct_33(bvec3(_GLF_IDENTITY(true, bool(bvec3(true, false, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])))).x < injectionSwitch.y)))))), ivec4(1), true, mat4x3(1.0), _GLF_IDENTITY(ivec3(1), (ivec3(1)) / ivec3(_GLF_IDENTITY(1, (1) / 1), _GLF_IDENTITY(1, (1) | (1)), 1)), mat3x4(1.0)), _GLF_struct_34(mat2(_GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), _GLF_IDENTITY(clamp(1.0, _GLF_IDENTITY(1.0, (1.0) / 1.0), _GLF_IDENTITY(1.0, float(mat2(1.0, 0.0, 0.0, 1.0)))), min(clamp(1.0, _GLF_IDENTITY(1.0, (1.0) / 1.0), _GLF_IDENTITY(1.0, float(mat2(1.0, 0.0, 0.0, 1.0)))), _GLF_IDENTITY(clamp(1.0, _GLF_IDENTITY(1.0, (1.0) / 1.0), _GLF_IDENTITY(1.0, float(mat2(1.0, 0.0, 0.0, 1.0)))), (clamp(1.0, _GLF_IDENTITY(1.0, (1.0) / 1.0), _GLF_IDENTITY(1.0, float(mat2(1.0, 0.0, 0.0, 1.0))))) - 0.0))))))), uvec2(1u))), _GLF_struct_39(_GLF_struct_36(vec3(1.0), ivec3(1), 1u, mat2(1.0), mat3x2(1.0), bvec4(true)), _GLF_struct_37(mat4x3(1.0), vec4(1.0), vec3(1.0), mat3x4(1.0), vec2(1.0)), _GLF_struct_38(vec4(1.0), uvec2(1u), ivec3(1), bvec2(true), uvec4(1u), 1u, 1u), uvec2(1u)), _GLF_struct_40(bvec2(true)), _GLF_struct_46(_GLF_struct_41(mat3x2(1.0), ivec4(1), vec4(1.0), mat3x4(1.0), bvec2(true), mat2(1.0)), _GLF_struct_42(mat4x3(1.0)), _GLF_struct_43(uvec3(_GLF_IDENTITY(1u, (false ? _GLF_FUZZED(182683u) : 1u))), _GLF_IDENTITY(uvec4(1u), max(uvec4(1u), uvec4(1u)))), _GLF_struct_44(mat3x4(1.0), 1.0), _GLF_struct_45(bvec4(_GLF_IDENTITY(true, ! _GLF_IDENTITY((! (_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, bool(bvec2(true, true)))))))))), true && ((! (true)))))), mat2x3(1.0), uvec3(_GLF_IDENTITY(1u, uint(_GLF_IDENTITY(uvec2(1u, 1u), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(uvec2(1u, 1u), max(uvec2(1u, 1u), uvec2(1u, 1u)))), (~ (_GLF_IDENTITY(uvec2(1u, 1u), max(uvec2(1u, 1u), uvec2(1u, 1u))))) / (uvec2(1u, 1u) | uvec2(0u, 0u)))))))), mat3x4(1.0))));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   for(int _injected_loop_counter = ((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ 0)); _injected_loop_counter --)
    {
     barrier();
    }
  }
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
  barrier();
 _GLF_struct_61 _GLF_struct_replacement_61 = _GLF_struct_61(_GLF_struct_52(mat4x2(1.0), _GLF_struct_48(mat2x3(1.0), mat4x3(1.0), ivec4(1), mat2(1.0)), uvec4(1u), _GLF_struct_49(mat4x3(1.0), mat2x4(1.0), mat2x3(1.0), ivec2(1), vec2(_GLF_IDENTITY(1.0, min(1.0, 1.0))), bvec2(true)), _GLF_struct_50(_GLF_IDENTITY(bvec3(true), bvec3(bvec3(bvec3(true)))), mat4(1.0)), _GLF_struct_51(mat2x3(1.0), vec2(1.0), 1.0, true, vec3(1.0))), _GLF_struct_53(mat3(1.0)), _GLF_struct_58(_GLF_struct_54(mat4(1.0)), ivec4(1), _GLF_struct_55(mat3(1.0), mat4x3(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0))), bvec4(true), _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), ! (! (! (true)))))), mat2x3(1.0), 1u, mat4(1.0)), true, _GLF_struct_56(gl_SubgroupInvocationID, uvec3(1u), mat2x3(1.0), 1.0), _GLF_struct_57(mat2(1.0), _GLF_IDENTITY(uvec4(1u), uvec4(0u, 0u, 0u, 0u) ^ (uvec4(1u))), mat3x4(1.0), vec2(1.0))), uvec4(1u), true, true, _GLF_struct_60(mat4x3(1.0), vec3(1.0), _GLF_struct_59(uvec2(1u), mat2(1.0), uvec3(1u), mat3(1.0), ivec3(1), mat3(1.0)), ivec2(1)));
 if(_GLF_DEAD(false))
  barrier();
 uint num_workgroup = _GLF_IDENTITY(gl_NumWorkGroups.x, 0u | (_GLF_IDENTITY(gl_NumWorkGroups.x, ~ (~ (gl_NumWorkGroups.x)))));
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, ! (! (true)))), ! (! (! (_GLF_IDENTITY(true, ! (! (true)))))))), bool(bvec4(_GLF_IDENTITY(! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, ! (! (true)))), ! (! (! (_GLF_IDENTITY(true, ! (! (true)))))))), ! (! (_GLF_IDENTITY(! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, ! (! (true)))), ! (! (! (_GLF_IDENTITY(true, ! (! (true)))))))), false || (_GLF_IDENTITY(! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), bool(bvec2(_GLF_IDENTITY(! (true), (! (true)) || false), false)))))), ! (! (! (_GLF_IDENTITY(true, ! (! (true)))))))), bool(bool(! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, ! (! (true)))), ! (! (! (_GLF_IDENTITY(true, ! (! (true)))))))))))))))), false, false, false))), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(! _GLF_IDENTITY((_GLF_IDENTITY(! (_GLF_IDENTITY(true, ! (! (true)))), ! (! (! (_GLF_IDENTITY(true, ! (! (true)))))))), ! (! ((_GLF_IDENTITY(! (_GLF_IDENTITY(true, ! (! (true)))), ! (! (! (_GLF_IDENTITY(true, ! (! (true))))))))))), bool(bvec4(_GLF_IDENTITY(! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, ! (! (true)))), ! (! (! (_GLF_IDENTITY(true, ! (! (true)))))))), ! (! (_GLF_IDENTITY(! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, ! (! (true)))), ! (! (! (_GLF_IDENTITY(true, ! (! (true)))))))), false || (_GLF_IDENTITY(! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, ! (! (true)))), ! (! (! (_GLF_IDENTITY(true, ! _GLF_IDENTITY((! (true)), bool(_GLF_IDENTITY(bool((! (true))), ! (! (bool((! (true)))))))))))))), _GLF_IDENTITY(bool(bool(! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, ! (! (true)))), ! (! (! (_GLF_IDENTITY(true, ! (! (true)))))))))), (bool(bool(! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, ! (! (true)))), ! (! (! (_GLF_IDENTITY(true, ! (! (true))))))))))) && true))))))), false, false, false))), false, true, false)), false || (bool(bvec4(_GLF_IDENTITY(! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, ! (! (true)))), ! (! (! (_GLF_IDENTITY(true, ! (! (true)))))))), bool(bvec4(_GLF_IDENTITY(! _GLF_IDENTITY((_GLF_IDENTITY(! (_GLF_IDENTITY(true, ! (! (true)))), ! _GLF_IDENTITY((! (! (_GLF_IDENTITY(true, ! (! (true)))))), ! (_GLF_IDENTITY(! ((! (! (_GLF_IDENTITY(true, ! (! (true))))))), (_GLF_IDENTITY(! ((! (! (_GLF_IDENTITY(true, ! (! (true))))))), false || (! ((! (! (_GLF_IDENTITY(true, ! (! (true)))))))))) || false))))), false || ((_GLF_IDENTITY(! (_GLF_IDENTITY(true, ! (! (true)))), ! _GLF_IDENTITY((! (! (_GLF_IDENTITY(true, ! (! (true)))))), ! (_GLF_IDENTITY(! ((! (! (_GLF_IDENTITY(true, ! (! (true))))))), (_GLF_IDENTITY(! ((! (! (_GLF_IDENTITY(true, ! (! (true))))))), false || (! ((! (! (_GLF_IDENTITY(true, ! (! (true)))))))))) || false))))))), ! (! _GLF_IDENTITY((_GLF_IDENTITY(! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, ! (! (true)))), ! (! (! (_GLF_IDENTITY(true, ! (! (true)))))))), false || (_GLF_IDENTITY(! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, ! (! (true)))), ! (! (! (_GLF_IDENTITY(true, ! (! (true)))))))), bool(bool(! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, ! (! (true)))), ! (! (! (_GLF_IDENTITY(true, ! (! (true)))))))))))))), false || ((_GLF_IDENTITY(! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, ! (! (true)))), ! (! (! (_GLF_IDENTITY(true, ! (! (true)))))))), false || (_GLF_IDENTITY(! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, ! (! (true)))), ! (! (! (_GLF_IDENTITY(true, ! (! (true)))))))), bool(bool(! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, ! (! (true)))), ! (! (! (_GLF_IDENTITY(true, ! (! (true)))))))))))))))))), false, false, false))), false, true, false))))))))
    {
     if(_GLF_DEAD(false))
      {
       do
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 << _GLF_IDENTITY(int(0), int(0)))); _injected_loop_counter --)
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           else
            {
             if(_GLF_DEAD(false))
              barrier();
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), int(int(int(_GLF_IDENTITY(5, ~ (_GLF_IDENTITY(~ (5), int(ivec2(~ (5), 0))))))))))) >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(_GLF_IDENTITY(5, max(5, 5))), max(int(5), int(5)))))); _injected_loop_counter ++)
              {
               barrier();
              }
            }
          }
        }
       while(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(false, (false) || false), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), ! (! (bool(bvec3(_GLF_IDENTITY(false, (false) || false), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))), (_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(false, (false) || false), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), ! (! (bool(bvec3(_GLF_IDENTITY(false, (false) || false), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))), ! (! (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(false, bool(bvec2(false, false))), false)), true && (bool(bvec2(_GLF_IDENTITY(false, bool(bvec2(false, false))), false)))))) && true)) || false), true, _GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ! (! (_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ! (! (_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), bool(bool((injectionSwitch.x < injectionSwitch.y))))))))))))), ! (! (bool(bvec3(_GLF_IDENTITY(false, _GLF_IDENTITY((false) || false, false || (_GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), (! ((false))) && true))) || false))), true, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, float(mat4x3(injectionSwitch.x, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), determinant(mat2(0.0, 0.0, 0.0, 0.0)), determinant(mat3(1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0)), 1.0))))) < injectionSwitch.y)))))))))))) || false), (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bool(bool(_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(false, (false) || false), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), ! (! (bool(bvec3(_GLF_IDENTITY(false, (false) || false), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))), (_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(false, (false) || false), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), ! (! (bool(bvec3(_GLF_IDENTITY(false, (false) || false), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))), ! (! (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(false, bool(bvec2(false, false))), false)), true && (bool(bvec2(_GLF_IDENTITY(false, bool(bvec2(false, false))), false)))))) && true)) || false), true, _GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ! (! (_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ! (! (_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), bool(bool((injectionSwitch.x < injectionSwitch.y))))))))))))), ! (! (bool(bvec3(_GLF_IDENTITY(false, _GLF_IDENTITY((false) || false, false || (_GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), (! ((false))) && true))) || false))), true, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, float(mat4x3(injectionSwitch.x, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), determinant(mat2(0.0, 0.0, 0.0, 0.0)), determinant(mat3(1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0)), 1.0))))) < injectionSwitch.y)))))))))))) || false), (injectionSwitch.x > injectionSwitch.y))))), false || (bool(bool(_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(false, (false) || false), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), ! (! (bool(bvec3(_GLF_IDENTITY(false, (false) || false), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))), (_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(false, (false) || false), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), ! (! (bool(bvec3(_GLF_IDENTITY(false, (false) || false), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))), ! (! (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(false, bool(bvec2(false, false))), false)), true && (bool(bvec2(_GLF_IDENTITY(false, bool(bvec2(false, false))), false)))))) && true)) || false), true, _GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ! (! (_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ! (! (_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), bool(bool((injectionSwitch.x < injectionSwitch.y))))))))))))), ! (! (bool(bvec3(_GLF_IDENTITY(false, _GLF_IDENTITY((false) || false, false || (_GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), (! ((false))) && true))) || false))), true, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, float(mat4x3(injectionSwitch.x, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), determinant(mat2(0.0, 0.0, 0.0, 0.0)), determinant(mat3(1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0)), 1.0))))) < injectionSwitch.y)))))))))))) || false), (injectionSwitch.x > injectionSwitch.y)))))))), _GLF_IDENTITY(true && (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (true && (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) && true)));
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), min(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))))); _injected_loop_counter --)
            {
             if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(false, false, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), bool(bvec2(_GLF_IDENTITY(false, bool(bvec4(false, false, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), false)))), ! (! ((_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(false, false, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), bool(bvec2(_GLF_IDENTITY(false, bool(bvec4(false, false, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), false))))))) && true), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec4(false, false, false, _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(float(73518u))), float(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))), bool(true)))), float(_GLF_FUZZED(-4.6)), bool(false))))))))) && true)), false || (bool(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec4(false, false, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) && true)))))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(false, false, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), bool(bvec2(_GLF_IDENTITY(false, bool(bvec4(false, false, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), false)))) && true), bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec4(false, false, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) && true)), false || (bool(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec4(false, false, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) && true)))), (_GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec4(false, false, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) && true)), false || (bool(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec4(false, false, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) && true)))), true && (_GLF_IDENTITY(bool(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec4(false, false, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) && true)), false || (bool(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, (false) && true), false, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) && true))))))) && true)))))), (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, float(vec3(injectionSwitch.x, 1.0, 1.0))) > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))) - log(1.0))), ! (! (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, float(vec3(injectionSwitch.x, 1.0, 1.0))) > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))) - log(1.0))), ((_GLF_IDENTITY(injectionSwitch.x, float(vec3(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0))), 1.0, 1.0))) > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))) - log(1.0)))) && true)))) && true)) && true))), (_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y, ! (! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y, ! (! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y)))))))))))) && true)) && _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-7.2) : _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0))), injectionSwitch.y)))), bool(bvec4(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, false, true))))))))
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 barrier();
                }
              }
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               barrier();
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             else
              {
              }
            }
          }
        }
      }
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), 0 + _GLF_IDENTITY((int(7)), ((int(7))) / 1)))); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), 0.0 + (_GLF_ZERO(0.0, injectionSwitch.x))))), _GLF_IDENTITY((_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x)), true && (_GLF_IDENTITY(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x)), _GLF_IDENTITY(bool(bvec4(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x)), true, _GLF_IDENTITY(true, bool(bvec3(true, true, true))), true)), bool(bvec2(bool(bvec4(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x)), true, true, _GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec2(true, true), bvec2(bvec2(bvec2(true, true))))))))))), false)))))))), ! (! (_GLF_IDENTITY((_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x)), true && (_GLF_IDENTITY(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x)), _GLF_IDENTITY(bool(bvec4(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x)), true, _GLF_IDENTITY(true, bool(bvec3(true, true, true))), true)), bool(bvec2(bool(bvec4(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x)), true, true, _GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec2(true, true), bvec2(bvec2(bvec2(true, true))))))))))), false)))))))), ((_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x)), true && (_GLF_IDENTITY(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x)), _GLF_IDENTITY(bool(bvec4(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x)), true, _GLF_IDENTITY(true, bool(bvec3(true, true, true))), true)), bool(bvec2(bool(bvec4(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x)), true, true, _GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec2(true, true), bvec2(bvec2(bvec2(true, true))))))))))), false))))))))) || false)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))); _injected_loop_counter --)
    {
     barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         barrier();
        }
      }
    }
   if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_IDENTITY(_GLF_TRUE(true, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(834.083)), float(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0)), bool(true))) < injectionSwitch.y), false || ((_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(834.083)), float(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0)), bool(true))) < injectionSwitch.y)))), ! (! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))) && true)))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, false, true)), false || (bool(bvec3(false, false, true)))))) || false)), ! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, false, true)), false || (bool(bvec3(false, false, true)))))) || false)), _GLF_IDENTITY(bool(bvec3(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, false, true)), false || (bool(bvec3(false, false, true)))))) || false)), true, true)), bool(bvec4(bool(bvec3(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, false, true)), false || (bool(bvec3(false, false, true)))))) || false)), true, true)), true, true, false))))))))
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
        }
      }
     else
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bool(injectionSwitch.x > injectionSwitch.y)), ! (! (bool(bool(injectionSwitch.x > injectionSwitch.y)))))))), bool(bvec2(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bool(injectionSwitch.x > injectionSwitch.y)), ! (! (bool(bool(injectionSwitch.x > injectionSwitch.y)))))))), true)))))
        barrier();
      }
    }
   else
    {
    }
   do
    {
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
   while(_GLF_WRAPPED_LOOP(false));
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY((0 ^ 0), ((0 ^ 0)) * 1)); _injected_loop_counter --)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     do
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(11.32)), bool(false)))))))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
           barrier();
          }
         for(int _injected_loop_counter = 1; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != (0 | 0)), ! (! (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) ^ 0) != (0 | 0))))); _GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) - 0))
          {
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), (true ? int(7) : _GLF_FUZZED(-24892))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), 1 * (int(3))))) >> _GLF_IDENTITY(int(3), int(3)))); _injected_loop_counter ++)
              {
               barrier();
              }
            }
           barrier();
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   do
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) || false)));
  }
 _GLF_struct_4 _GLF_struct_replacement_4 = _GLF_struct_4(_GLF_struct_3(mat3x2(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-78.40)))), 1u, 1.0, _GLF_struct_1(mat2(1.0), mat2x4(1.0), ivec2(1), ivec3(1)), _GLF_struct_2(vec4(1.0), bvec4(true), true, 1), gl_WorkGroupSize.x));
 _GLF_struct_80 _GLF_struct_replacement_80 = _GLF_struct_80(gl_WorkGroupID.x, _GLF_struct_63(_GLF_struct_62(vec4(_GLF_IDENTITY(_GLF_IDENTITY(1.0, 1.0 * (_GLF_IDENTITY(1.0, float(mat2x3(1.0, 0.0, 1.0, _GLF_IDENTITY(dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 1.0, 0.0, 0.0)), dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(3919.7904))), 0.0, 0.0))), abs(1.0), 0.0))))), (false ? _GLF_FUZZED(-990.466) : _GLF_IDENTITY(_GLF_IDENTITY(1.0, 1.0 * (_GLF_IDENTITY(1.0, float(mat2x3(1.0, 0.0, 1.0, _GLF_IDENTITY(dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 1.0, 0.0, 0.0)), dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(3919.7904))), 0.0, 0.0))), abs(1.0), 0.0))))), (_GLF_IDENTITY(1.0, 1.0 * (_GLF_IDENTITY(1.0, float(mat2x3(1.0, 0.0, 1.0, _GLF_IDENTITY(dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 1.0, 0.0, 0.0)), dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(3919.7904))), 0.0, 0.0))), abs(1.0), 0.0)))))) / 1.0)))), mat2x3(1.0), true), mat4(1.0)), _GLF_struct_67(_GLF_struct_64(uvec2(1u)), _GLF_struct_65(1u), _GLF_struct_66(bvec3(true)), mat4x3(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(degrees(8081.9371)))))), _GLF_struct_71(mat4(1.0), _GLF_struct_68(1.0, vec3(_GLF_IDENTITY(1.0, (1.0) - 0.0)), 1.0, bvec3(_GLF_IDENTITY(true, _GLF_IDENTITY(! (! (_GLF_IDENTITY(true, (_GLF_IDENTITY(true, false || (true))) && true))), true && (! (! (_GLF_IDENTITY(true, (_GLF_IDENTITY(true, false || (true))) && _GLF_IDENTITY(true, (true) && true)))))))), 1), uvec2(1u), _GLF_struct_69(mat3x2(1.0), mat2(1.0), vec2(1.0)), _GLF_struct_70(uvec4(1u), bvec4(true), mat3x4(1.0), _GLF_IDENTITY(bvec2(true), _GLF_IDENTITY(bvec2(bvec2(bvec2(true))), _GLF_IDENTITY(bvec2(bvec4(bvec2(bvec2(bvec2(true))), false, false)), bvec2(bvec2(_GLF_IDENTITY(bvec2(bvec4(bvec2(bvec2(bvec2(true))), false, false)), bvec2(bvec4(bvec2(bvec4(bvec2(bvec2(bvec2(true))), false, false)), true, true)))))))), mat3(1.0))), _GLF_struct_73(_GLF_struct_72(bvec2(true), bvec4(true), mat2x4(1.0), 1u, _GLF_IDENTITY(1u, 0u ^ (_GLF_IDENTITY(1u, max(1u, _GLF_IDENTITY(1u, (1u) | 0u))))), bvec2(true)), mat3(1.0)), mat2x4(1.0), _GLF_struct_75(_GLF_struct_74(uvec4(1u), 1.0, vec4(1.0), 1u, _GLF_IDENTITY(ivec2(1), (ivec2(1)) | (ivec2(1)))), true, uvec2(_GLF_IDENTITY(1u, clamp(1u, 1u, 1u)))), _GLF_struct_79(_GLF_struct_76(mat2x3(1.0), uvec4(1u), mat2x3(1.0), uvec2(1u), 1.0, mat3x2(1.0), bvec3(true)), _GLF_struct_77(mat2(_GLF_IDENTITY(1.0, max(1.0, _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-678.957)), float(1.0), bool(true)))))), mat3x2(1.0), ivec2(1), _GLF_IDENTITY(vec2(1.0), min(vec2(1.0), vec2(1.0)))), _GLF_struct_78(mat3x2(1.0), true, mat2(1.0), bvec2(true), ivec2(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, min(1, 1))) | 0)))));
 _GLF_struct_11 _GLF_struct_replacement_11 = _GLF_struct_11(vec2(1.0), _GLF_IDENTITY(true, bool(bvec4(true, true, _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false))), false))), _GLF_struct_10(1, _GLF_struct_5(vec2(1.0), uvec3(1u), mat4x3(1.0), mat4(1.0), mat3x2(_GLF_IDENTITY(1.0, (1.0) - 0.0)), uvec4(1u), ivec3(1)), _GLF_struct_6(_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, clamp(1, 1, 1)), 1, 1)), mat2x4(1.0), vec2(1.0), mat2x3(1.0)), _GLF_struct_7(mat2(1.0), _GLF_IDENTITY(ivec2(1), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(ivec2(1), (ivec2(1)) * ivec2(1, 1))), (~ (_GLF_IDENTITY(ivec2(1), (ivec2(1)) * ivec2(1, 1)))) >> ivec2(0, 0))))), _GLF_struct_replacement_4._f0.workgroup_size * _GLF_struct_replacement_80.workgroup_id, _GLF_struct_8(uvec4(_GLF_IDENTITY(1u, _GLF_IDENTITY((1u) | (1u), _GLF_IDENTITY(uint(uvec2((1u) | (1u), ((1u << _GLF_IDENTITY(uint(3u), uint(3u))) >> _GLF_IDENTITY(uint(3u), _GLF_IDENTITY(uint(3u), (uint(3u)) >> 0u))))), uint(uvec4(uint(uvec2((1u) | (1u), ((1u << _GLF_IDENTITY(uint(3u), uint(3u))) >> _GLF_IDENTITY(uint(3u), _GLF_IDENTITY(uint(3u), (uint(3u)) >> 0u))))), 1u, 1u, 1u)))))), mat2(1.0), true, ivec2(1), mat4x2(1.0)), mat3x2(1.0), _GLF_struct_9(mat3(1.0), uvec2(1u), bvec3(true), mat3x4(_GLF_IDENTITY(1.0, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-4.0) : 1.0))))), 1u, vec4(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(vec2(-8727.0383, 3895.8521).x)), float(_GLF_IDENTITY(1.0, min(1.0, 1.0))), bool(true)))), ivec4(1), mat4x3(1.0));
 _GLF_struct_23 _GLF_struct_replacement_23 = _GLF_struct_23(_GLF_struct_22(bvec3(_GLF_IDENTITY(true, ! (! (true)))), vec4(1.0), _GLF_struct_19(uvec4(1u), 1.0, 1.0, uvec4(1u), uvec2(1u)), _GLF_struct_20(mat2x4(1.0), mat4x3(1.0), ivec3(1), 1.0, vec3(1.0), ivec3(_GLF_IDENTITY(1, (1) + 0))), _GLF_struct_21(1u, ivec3(1), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_struct_replacement_18._f3.subgroup_id, _GLF_IDENTITY(min(_GLF_IDENTITY(_GLF_struct_replacement_18._f3.subgroup_id, 0u | (_GLF_IDENTITY(_GLF_struct_replacement_18._f3.subgroup_id, 0u | (_GLF_IDENTITY(_GLF_struct_replacement_18._f3.subgroup_id, (_GLF_struct_replacement_18._f3.subgroup_id) ^ 0u))))), _GLF_IDENTITY(_GLF_struct_replacement_18._f3.subgroup_id, uint(uvec3(_GLF_struct_replacement_18._f3.subgroup_id, 1u, _GLF_IDENTITY(_GLF_IDENTITY((0u >> _GLF_IDENTITY(uint(3u), uint(3u))), max(_GLF_IDENTITY((0u >> _GLF_IDENTITY(uint(3u), uint(3u))), _GLF_IDENTITY(_GLF_IDENTITY(0u, 1u * (0u)) ^ ((0u >> _GLF_IDENTITY(uint(3u), uint(3u)))), (_GLF_IDENTITY(0u, 1u * (0u)) ^ ((0u >> _GLF_IDENTITY(uint(3u), uint(3u))))) - 0u)), _GLF_IDENTITY((0u >> _GLF_IDENTITY(_GLF_IDENTITY(uint(3u), max(uint(3u), uint(3u))), uint(3u))), ((0u >> _GLF_IDENTITY(uint(3u), uint(3u)))) << 0u))), (true ? (0u >> _GLF_IDENTITY(uint(3u), uint(3u))) : _GLF_FUZZED(_GLF_IDENTITY((++ num_workgroup), ((++ num_workgroup)) - 0u)))))))), (_GLF_IDENTITY(min(_GLF_IDENTITY(_GLF_struct_replacement_18._f3.subgroup_id, 0u | (_GLF_IDENTITY(_GLF_struct_replacement_18._f3.subgroup_id, 0u | (_GLF_IDENTITY(_GLF_struct_replacement_18._f3.subgroup_id, (_GLF_struct_replacement_18._f3.subgroup_id) ^ 0u))))), _GLF_IDENTITY(_GLF_struct_replacement_18._f3.subgroup_id, uint(uvec3(_GLF_struct_replacement_18._f3.subgroup_id, 1u, _GLF_IDENTITY(_GLF_IDENTITY((0u >> _GLF_IDENTITY(uint(3u), uint(3u))), max(_GLF_IDENTITY((0u >> _GLF_IDENTITY(uint(3u), uint(3u))), _GLF_IDENTITY(_GLF_IDENTITY(0u, 1u * (0u)) ^ ((0u >> _GLF_IDENTITY(uint(3u), uint(3u)))), (_GLF_IDENTITY(0u, 1u * (0u)) ^ ((0u >> _GLF_IDENTITY(uint(3u), uint(3u))))) - 0u)), _GLF_IDENTITY((0u >> _GLF_IDENTITY(_GLF_IDENTITY(uint(3u), max(uint(3u), uint(3u))), uint(3u))), ((0u >> _GLF_IDENTITY(uint(3u), uint(3u)))) << 0u))), (true ? (0u >> _GLF_IDENTITY(uint(3u), uint(3u))) : _GLF_FUZZED(_GLF_IDENTITY((++ num_workgroup), ((++ num_workgroup)) - 0u)))))))), ~ (~ (min(_GLF_IDENTITY(_GLF_struct_replacement_18._f3.subgroup_id, 0u | (_GLF_IDENTITY(_GLF_struct_replacement_18._f3.subgroup_id, 0u | (_GLF_IDENTITY(_GLF_struct_replacement_18._f3.subgroup_id, (_GLF_struct_replacement_18._f3.subgroup_id) ^ 0u))))), _GLF_IDENTITY(_GLF_struct_replacement_18._f3.subgroup_id, uint(uvec3(_GLF_struct_replacement_18._f3.subgroup_id, _GLF_IDENTITY(1u, max(_GLF_IDENTITY(1u, (1u) >> 0u), 1u)), _GLF_IDENTITY(_GLF_IDENTITY((0u >> _GLF_IDENTITY(uint(3u), uint(3u))), max(_GLF_IDENTITY((0u >> _GLF_IDENTITY(uint(3u), uint(3u))), _GLF_IDENTITY(_GLF_IDENTITY(0u, 1u * (0u)) ^ ((0u >> _GLF_IDENTITY(_GLF_IDENTITY(uint(3u), 1u * (uint(3u))), uint(3u)))), (_GLF_IDENTITY(0u, _GLF_IDENTITY(1u * (0u), (1u * (0u)) >> 0u)) ^ ((0u >> _GLF_IDENTITY(uint(3u), uint(3u))))) - 0u)), _GLF_IDENTITY((0u >> _GLF_IDENTITY(_GLF_IDENTITY(uint(3u), max(uint(3u), uint(3u))), uint(3u))), ((0u >> _GLF_IDENTITY(uint(3u), uint(3u)))) << 0u))), (true ? (0u >> _GLF_IDENTITY(uint(3u), uint(3u))) : _GLF_FUZZED(_GLF_IDENTITY((++ num_workgroup), ((++ num_workgroup)) - 0u)))))))))))) + 0u)), min(_GLF_struct_replacement_18._f3.subgroup_id, _GLF_struct_replacement_18._f3.subgroup_id)) * _GLF_struct_replacement_47.subgroup_size, bvec2(true)), mat4(1.0), _GLF_IDENTITY(_GLF_IDENTITY(1, (1) << _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), (int(_GLF_ZERO(0.0, injectionSwitch.x))) | _GLF_IDENTITY(0, (0) + (0 >> _GLF_IDENTITY(int(0), int(0)))))), (_GLF_IDENTITY(_GLF_IDENTITY(1, (1) | (1)), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-86.14)), bool(false))) > injectionSwitch.y)) ? _GLF_FUZZED(10434) : _GLF_IDENTITY(1, _GLF_IDENTITY(min(1, 1), (min(1, 1)) >> 0))))) / 1)));
 _GLF_struct_0 _GLF_struct_replacement_0 = _GLF_struct_0(_GLF_struct_replacement_11._f2.workgroup_base + _GLF_struct_replacement_23._f0._f4.subgroup_base + _GLF_struct_replacement_61._f2._f4.subgroup_local_id, bvec3(true));
 uint next_virtual_gid = _GLF_IDENTITY(_GLF_struct_replacement_11._f2.workgroup_base + _GLF_struct_replacement_23._f0._f4.subgroup_base, uint(uvec3(_GLF_IDENTITY(_GLF_struct_replacement_11._f2.workgroup_base + _GLF_struct_replacement_23._f0._f4.subgroup_base, (_GLF_struct_replacement_11._f2.workgroup_base + _GLF_struct_replacement_23._f0._f4.subgroup_base) + 0u), 1u, 1u))) + ((_GLF_struct_replacement_61._f2._f4.subgroup_local_id + _GLF_IDENTITY(1, clamp(1, 1, 1))) % _GLF_struct_replacement_47.subgroup_size);
 uint read = _GLF_IDENTITY(0, (false ? _GLF_FUZZED(-58271) : 0));
 atomicStore(buf[next_virtual_gid], uint(1), 4, 64, 4);
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, true, true, false)), (bool(bvec4(false, true, true, false))) || _GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)))), false || ((_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))).x > injectionSwitch.y)))))), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y)), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(1568.6893, -8.3)))), max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)))).y, injectionSwitch.y))) && true)) && true)))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     do
      {
       do
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
            {
            }
           else
            {
             barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(4.2) : injectionSwitch.y))))) && true)) || false)))));
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, true && (true))))
  {
   if((_GLF_struct_replacement_61._f2._f4.subgroup_local_id % 2) == 0)
    {
     subgroupAll(false);
     read = _GLF_IDENTITY(atomicLoad(_GLF_IDENTITY(buf[_GLF_IDENTITY(_GLF_struct_replacement_0.virtual_gid, (true ? _GLF_struct_replacement_0.virtual_gid : _GLF_FUZZED(53300u)))], ~ (~ (buf[_GLF_IDENTITY(_GLF_struct_replacement_0.virtual_gid, (true ? _GLF_struct_replacement_0.virtual_gid : _GLF_FUZZED(53300u)))]))), 4, 64, 2), (atomicLoad(buf[_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_struct_replacement_0.virtual_gid, (true ? _GLF_struct_replacement_0.virtual_gid : _GLF_FUZZED(next_virtual_gid))), (_GLF_IDENTITY(_GLF_struct_replacement_0.virtual_gid, (true ? _GLF_struct_replacement_0.virtual_gid : _GLF_FUZZED(next_virtual_gid)))) - 0u), (_GLF_IDENTITY(_GLF_struct_replacement_0.virtual_gid, (true ? _GLF_struct_replacement_0.virtual_gid : _GLF_FUZZED(next_virtual_gid)))) | (_GLF_struct_replacement_0.virtual_gid))], _GLF_IDENTITY(4, min(4, 4)), 64, 2)) | (_GLF_IDENTITY(atomicLoad(buf[_GLF_IDENTITY(_GLF_struct_replacement_0.virtual_gid, clamp(_GLF_IDENTITY(_GLF_struct_replacement_0.virtual_gid, uint(uvec4(_GLF_struct_replacement_0.virtual_gid, 1u, (0u ^ 1u), 1u))), _GLF_IDENTITY(_GLF_struct_replacement_0.virtual_gid, uint(uint(_GLF_struct_replacement_0.virtual_gid))), _GLF_struct_replacement_0.virtual_gid))], 4, 64, 2), max(atomicLoad(buf[_GLF_IDENTITY(_GLF_struct_replacement_0.virtual_gid, 1u * (_GLF_struct_replacement_0.virtual_gid))], 4, 64, 2), _GLF_IDENTITY(atomicLoad(buf[_GLF_struct_replacement_0.virtual_gid], _GLF_IDENTITY(4, (4) / 1), 64, 2), clamp(atomicLoad(buf[_GLF_struct_replacement_0.virtual_gid], _GLF_IDENTITY(4, (4) / 1), 64, 2), atomicLoad(buf[_GLF_struct_replacement_0.virtual_gid], _GLF_IDENTITY(4, (4) / 1), 64, 2), atomicLoad(buf[_GLF_struct_replacement_0.virtual_gid], _GLF_IDENTITY(4, _GLF_IDENTITY((4) / 1, 0 ^ ((4) / 1))), 64, 2)))))));
    }
   else
    {
     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, false || (true))), (_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, false || (true)))) || false))
      {
       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bool(false)))))), false || (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, true && (false)), true), bvec2(bvec2(bvec2(false, true)))), bvec2(bvec3(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, true && (false)), true), bvec2(bvec2(bvec2(false, true)))), false))))), ! (! (false))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bool(false)))))), false || (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, true && (false)), true), bvec2(bvec2(bvec2(false, true)))), bvec2(bvec3(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, true && (false)), true), bvec2(bvec2(bvec2(false, true)))), false))))), ! (! (false))))), true && (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bool(false)))))), false || (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, true && (false)), true), bvec2(bvec2(bvec2(false, true)))), bvec2(bvec3(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, true && (false)), true), bvec2(bvec2(bvec2(false, true)))), false))))), ! (! (false))))))))), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(vec4(injectionSwitch, 1.0, 1.0), min(vec4(injectionSwitch, 1.0, 1.0), vec4(injectionSwitch, 1.0, 1.0))))).x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x > injectionSwitch.y)))) && true)) || false, _GLF_IDENTITY(bool(bvec2((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(_GLF_IDENTITY(vec4(injectionSwitch, 1.0, 1.0), (true ? vec4(injectionSwitch, 1.0, 1.0) : _GLF_FUZZED(vec4(-124.721, 179.852, -355.365, -805.884)))), min(vec4(injectionSwitch, _GLF_IDENTITY(1.0, abs(0.0) + (1.0)), 1.0), vec4(injectionSwitch, 1.0, 1.0))))).x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat2x3(injectionSwitch, 0.0, 1.0, 0.0, 1.0)), clamp(vec2(mat2x3(injectionSwitch, 0.0, 1.0, 0.0, 1.0)), vec2(mat2x3(injectionSwitch, 0.0, 1.0, 0.0, 1.0)), vec2(mat2x3(injectionSwitch, 0.0, 1.0, 0.0, 1.0))))).y)))) && true)) || false, true)), ! (! (bool(bvec2((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(vec4(injectionSwitch, 1.0, 1.0), min(vec4(injectionSwitch, 1.0, 1.0), vec4(injectionSwitch, 1.0, 1.0))))).x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch.y : _GLF_FUZZED(-5759.6511))))))) && true)) || false, true))))))), bool(bool(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(vec4(injectionSwitch, 1.0, 1.0), min(vec4(injectionSwitch, 1.0, 1.0), vec4(injectionSwitch, 1.0, 1.0))))).x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x > injectionSwitch.y))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(vec4(injectionSwitch, 1.0, 1.0), min(vec4(injectionSwitch, 1.0, 1.0), vec4(injectionSwitch, 1.0, 1.0))))).x > injectionSwitch.y, ! (! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(clamp(injectionSwitch, injectionSwitch, injectionSwitch), (false ? _GLF_FUZZED(injectionSwitch) : clamp(injectionSwitch, injectionSwitch, injectionSwitch)))).x, max(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(clamp(injectionSwitch, injectionSwitch, injectionSwitch), (false ? _GLF_FUZZED(injectionSwitch) : clamp(injectionSwitch, injectionSwitch, injectionSwitch)))).x, _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(clamp(injectionSwitch, injectionSwitch, injectionSwitch), (false ? _GLF_FUZZED(injectionSwitch) : clamp(injectionSwitch, injectionSwitch, injectionSwitch)))).x)) > injectionSwitch.y))), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(vec4(injectionSwitch, 1.0, 1.0), min(vec4(injectionSwitch, 1.0, 1.0), vec4(injectionSwitch, 1.0, 1.0))))).x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x > _GLF_IDENTITY(injectionSwitch.y, abs(1.0) * (injectionSwitch.y)))))) || false, true && (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(vec4(injectionSwitch, 1.0, 1.0), min(vec4(injectionSwitch, 1.0, 1.0), vec4(injectionSwitch, 1.0, 1.0))))).x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x > _GLF_IDENTITY(injectionSwitch.y, abs(1.0) * (injectionSwitch.y)))))) || false, ((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(vec4(injectionSwitch, 1.0, 1.0), min(vec4(injectionSwitch, 1.0, 1.0), vec4(injectionSwitch, 1.0, 1.0))))), (_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(vec4(injectionSwitch, 1.0, 1.0), min(vec4(injectionSwitch, 1.0, 1.0), vec4(injectionSwitch, 1.0, 1.0)))))) + log(vec2(1.0, 1.0))).x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x > _GLF_IDENTITY(injectionSwitch.y, abs(1.0) * (injectionSwitch.y)))))) || false) || false))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true)) || false))))))))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(_GLF_IDENTITY(mat3x2(injectionSwitch.y, 1.0, 1.0, 1.0, 0.0, 0.0), (mat3x2(injectionSwitch.y, 1.0, 1.0, 1.0, 0.0, 0.0)) - mat3x2(0.0, 0.0, 0.0, 0.0, 0.0, 0.0))))))))))))))), false || (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bvec2(false, false))))))) || _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-9340.6988)), float(injectionSwitch.x), bool(true))) > injectionSwitch.y))), (_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))) && true))))) && true))))))))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           barrier();
          }
        }
      }
     else
      {
      }
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, false, true), bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(false, false, true), bvec3(bvec4(bvec3(false, false, true), true)))), bvec3(bvec4(bvec3(_GLF_IDENTITY(bvec3(false, false, true), bvec3(bvec4(bvec3(false, false, true), true)))), true)))))))))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
        barrier();
       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (false)))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
         do
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec4(true, true, true, true)), bool(bvec4(bool(bvec4(true, true, true, true)), true, true, true))))))
            {
             subgroupAll(false);
            }
           else
            {
            }
           if(_GLF_DEAD(false))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
      }
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bool(bool(! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) && true)))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y))), bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY(min(injectionSwitch, injectionSwitch), mat2(1.0) * (min(injectionSwitch, injectionSwitch))), vec2(0.0, 0.0) + (_GLF_IDENTITY(min(injectionSwitch, injectionSwitch), _GLF_IDENTITY(clamp(min(injectionSwitch, injectionSwitch), min(injectionSwitch, injectionSwitch), min(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), min(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(mat2x4(injectionSwitch, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0)))) / vec2(1.0, 1.0)), _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, _GLF_IDENTITY(0.0, min(0.0, 0.0)))))))))), (clamp(_GLF_IDENTITY(min(injectionSwitch, injectionSwitch), min(_GLF_IDENTITY(min(injectionSwitch, injectionSwitch), mat2(1.0) * (min(injectionSwitch, injectionSwitch))), min(injectionSwitch, injectionSwitch))), min(injectionSwitch, injectionSwitch), min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / _GLF_IDENTITY(vec2(1.0, 1.0), _GLF_IDENTITY((vec2(1.0, 1.0)), ((vec2(1.0, _GLF_IDENTITY(1.0, float(_GLF_IDENTITY(mat3x4(1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, cos(_GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(0.0, 1.0, 1.0)), dot(vec3(1.0, 0.0, 0.0), vec3(0.0, 1.0, 1.0))))), (mat3x4(1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, cos(_GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(0.0, 1.0, 1.0)), dot(vec3(1.0, 0.0, 0.0), vec3(0.0, 1.0, 1.0)))))) - mat3x4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))))))) * mat2(1.0)) * mat2(1.0))), _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0))))))))) / abs(vec2(1.0, 1.0))))))).x > injectionSwitch.y)))))), false))))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           else
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-7.5) : injectionSwitch.x)) < injectionSwitch.y))))
              {
               barrier();
              }
             else
              {
              }
            }
           if(_GLF_DEAD(false))
            barrier();
          }
        }
       else
        {
        }
      }
     else
      {
      }
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       _GLF_IDENTITY(_GLF_IDENTITY(read = atomicLoad(buf[_GLF_struct_replacement_0.virtual_gid], 4, 64, 2), (read = atomicLoad(buf[_GLF_struct_replacement_0.virtual_gid], 4, 64, 2)) >> 0u), (read = atomicLoad(buf[_GLF_struct_replacement_0.virtual_gid], 4, 64, 2)) - uint(_GLF_ZERO(_GLF_IDENTITY(0.0, (0.0) - 0.0), injectionSwitch.x)));
      }
     else
      {
      }
    }
  }
 else
  {
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(_GLF_IDENTITY(float(mat4x2(_GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(2142.9124)), bool(false))), 0.0, 0.0, _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(1.0, 0.0)), dot(vec2(0.0, 1.0), vec2(1.0, 0.0))), 0.0, 1.0, 1.0, 0.0)), mix(float(_GLF_FUZZED(2.8)), float(float(mat4x2(_GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(2142.9124)), bool(false))), 0.0, _GLF_IDENTITY(0.0, clamp(0.0, _GLF_IDENTITY(0.0, 1.0 * (0.0)), _GLF_IDENTITY(0.0, min(0.0, 0.0)))), _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(1.0, 0.0)), _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(1.0, 0.0)), (dot(vec2(0.0, 1.0), vec2(_GLF_IDENTITY(1.0, _GLF_IDENTITY(float(_GLF_IDENTITY(mat3(1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, length(vec3(0.0, 0.0, 0.0)), exp(0.0)), mat3(mat3x4(mat3(1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, length(vec3(0.0, 0.0, 0.0)), exp(0.0)))))), min(float(_GLF_IDENTITY(mat3(1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, length(vec3(0.0, 0.0, 0.0)), exp(0.0)), mat3(mat3x4(mat3(1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, length(vec3(0.0, 0.0, 0.0)), exp(0.0)))))), float(_GLF_IDENTITY(mat3(1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, length(vec3(0.0, 0.0, 0.0)), exp(0.0)), mat3(mat3x4(mat3(1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, length(vec3(0.0, 0.0, 0.0)), exp(0.0))))))))), 0.0))) + 0.0)), 0.0, 1.0, 1.0, 0.0))), bool(true))), max(_GLF_IDENTITY(_GLF_IDENTITY(float(mat4x2(_GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(2142.9124)), bool(false))), 0.0, 0.0, _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(1.0, 0.0)), dot(vec2(0.0, 1.0), vec2(1.0, 0.0))), 0.0, 1.0, 1.0, 0.0)), mix(float(_GLF_FUZZED(2.8)), float(float(mat4x2(_GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(2142.9124)), bool(false))), 0.0, _GLF_IDENTITY(0.0, clamp(0.0, _GLF_IDENTITY(0.0, 1.0 * (0.0)), _GLF_IDENTITY(0.0, min(0.0, 0.0)))), _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(1.0, 0.0)), _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(1.0, 0.0)), (dot(vec2(0.0, 1.0), vec2(_GLF_IDENTITY(1.0, _GLF_IDENTITY(float(_GLF_IDENTITY(mat3(1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, length(vec3(0.0, 0.0, 0.0)), exp(0.0)), mat3(mat3x4(mat3(1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, length(vec3(0.0, 0.0, 0.0)), exp(0.0)))))), min(float(_GLF_IDENTITY(mat3(1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, length(vec3(0.0, 0.0, 0.0)), exp(0.0)), mat3(mat3x4(mat3(1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, length(vec3(0.0, 0.0, 0.0)), exp(0.0)))))), float(_GLF_IDENTITY(mat3(1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, length(vec3(0.0, 0.0, 0.0)), exp(0.0)), mat3(mat3x4(mat3(1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, length(vec3(0.0, 0.0, 0.0)), exp(0.0))))))))), 0.0))) + 0.0)), 0.0, 1.0, 1.0, 0.0))), bool(true))), (false ? _GLF_FUZZED(-334.611) : _GLF_IDENTITY(float(mat4x2(_GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(2142.9124)), bool(false))), 0.0, 0.0, _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(1.0, 0.0)), dot(vec2(0.0, 1.0), vec2(1.0, 0.0))), 0.0, 1.0, 1.0, 0.0)), mix(float(_GLF_FUZZED(2.8)), float(float(mat4x2(_GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(2142.9124)), bool(false))), 0.0, _GLF_IDENTITY(0.0, clamp(0.0, _GLF_IDENTITY(0.0, 1.0 * (0.0)), _GLF_IDENTITY(0.0, min(0.0, 0.0)))), _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(1.0, 0.0)), _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(1.0, 0.0)), (dot(vec2(0.0, 1.0), vec2(_GLF_IDENTITY(1.0, _GLF_IDENTITY(float(_GLF_IDENTITY(mat3(1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, length(vec3(0.0, 0.0, 0.0)), exp(0.0)), mat3(mat3x4(mat3(1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, length(vec3(0.0, 0.0, 0.0)), exp(0.0)))))), min(float(_GLF_IDENTITY(mat3(1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, length(vec3(0.0, 0.0, 0.0)), exp(0.0)), mat3(mat3x4(mat3(1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, length(vec3(0.0, 0.0, 0.0)), exp(0.0)))))), float(_GLF_IDENTITY(mat3(1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, length(vec3(0.0, 0.0, 0.0)), exp(0.0)), mat3(mat3x4(mat3(1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, length(vec3(0.0, 0.0, 0.0)), exp(0.0))))))))), 0.0))) + 0.0)), 0.0, 1.0, 1.0, 0.0))), bool(true))))), _GLF_IDENTITY(float(mat4x2(_GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(2142.9124)), bool(false))), 0.0, 0.0, _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(1.0, 0.0)), dot(vec2(0.0, 1.0), vec2(1.0, 0.0))), 0.0, 1.0, 1.0, 0.0)), mix(float(_GLF_FUZZED(2.8)), float(float(mat4x2(_GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(2142.9124)), bool(false))), 0.0, _GLF_IDENTITY(0.0, clamp(0.0, _GLF_IDENTITY(0.0, 1.0 * (0.0)), _GLF_IDENTITY(0.0, min(0.0, 0.0)))), _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(1.0, 0.0)), _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(1.0, 0.0)), (dot(vec2(0.0, 1.0), vec2(_GLF_IDENTITY(1.0, _GLF_IDENTITY(float(_GLF_IDENTITY(mat3(1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, length(vec3(0.0, 0.0, 0.0)), exp(0.0)), mat3(mat3x4(mat3(1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, length(vec3(0.0, 0.0, 0.0)), exp(0.0)))))), min(float(_GLF_IDENTITY(mat3(1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, length(vec3(0.0, 0.0, 0.0)), exp(0.0)), mat3(mat3x4(mat3(1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, length(vec3(0.0, 0.0, 0.0)), exp(0.0)))))), float(_GLF_IDENTITY(mat3(1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, length(vec3(0.0, 0.0, 0.0)), exp(0.0)), mat3(mat3x4(mat3(1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, length(vec3(0.0, 0.0, 0.0)), exp(0.0))))))))), 0.0))) + 0.0)), 0.0, 1.0, 1.0, 0.0))), bool(true))))))))))
  {
  }
 else
  {
   if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), bool(_GLF_IDENTITY(bvec2(_GLF_WRAPPED_IF_TRUE(true), true), bvec2(bvec4(bvec2(_GLF_WRAPPED_IF_TRUE(true), true), false, false))))), bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), bool(_GLF_IDENTITY(bvec2(_GLF_WRAPPED_IF_TRUE(true), true), bvec2(bvec4(bvec2(_GLF_WRAPPED_IF_TRUE(true), true), false, false))))), bool(bvec2(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), bool(_GLF_IDENTITY(bvec2(_GLF_WRAPPED_IF_TRUE(true), true), bvec2(bvec4(bvec2(_GLF_WRAPPED_IF_TRUE(true), true), false, false))))), false))), false, false, false))))
    {
     subgroupBarrier();
    }
   else
    {
    }
   for(_GLF_struct_32 _GLF_struct_replacement_32 = _GLF_struct_32(mat3x2(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, _GLF_IDENTITY(1.0, determinant(mat4(1.0, _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-941.917)), float(1.0), bool(true))), _GLF_IDENTITY(0.0, max(_GLF_IDENTITY(0.0, min(0.0, _GLF_IDENTITY(0.0, min(0.0, 0.0)))), 0.0)), _GLF_IDENTITY(0.0, clamp(0.0, 0.0, _GLF_IDENTITY(0.0, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 0.0 : _GLF_FUZZED(-128.780))))), 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0)) * (_GLF_IDENTITY(1.0, min(1.0, 1.0))))))), _GLF_struct_27(mat2(1.0), _GLF_struct_24(1.0, vec3(1.0), vec4(1.0)), mat2x3(1.0), _GLF_struct_25(_GLF_IDENTITY(ivec3(1), (ivec3(1)) + _GLF_IDENTITY(ivec3(0, 0, 0), (false ? _GLF_FUZZED((ivec3(-58200, 11858, -5344) / 75902)) : ivec3(0, 0, 0)))), vec4(1.0), mat3x4(1.0), bvec4(true), _GLF_IDENTITY(vec3(1.0), clamp(vec3(1.0), vec3(1.0), vec3(1.0))), bvec4(true), mat4(_GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat3x2(1.0, sin(0.0), _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(137.919)), float(1.0), bool(true))), 1.0, 1.0, log(1.0))), clamp(float(mat3x2(1.0, sin(0.0), 1.0, 1.0, 1.0, log(1.0))), float(mat3x2(1.0, sin(0.0), 1.0, 1.0, 1.0, log(1.0))), float(mat3x2(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), sin(0.0), 1.0, 1.0, 1.0, log(1.0)))))))), mat4(_GLF_IDENTITY(1.0, (1.0) / 1.0)), _GLF_struct_26(ivec4(1), mat4x2(1.0), vec3(1.0), mat3x2(1.0), mat3x4(1.0), _GLF_IDENTITY(vec2(1.0), max(_GLF_IDENTITY(vec2(1.0), mix(vec2(_GLF_FUZZED(-8.4), (vec2(1.0))[1]), vec2((vec2(1.0))[0], _GLF_FUZZED((229.973 + 92.44))), bvec2(true, false))), vec2(1.0))), mat4x2(1.0))), mat3x4(_GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(2.9))), _GLF_IDENTITY(1.0, (1.0) / 1.0), 1.0))), _GLF_struct_29(1.0, _GLF_struct_28(uvec2(1u), mat3x4(1.0), 0, mat4x2(1.0), _GLF_IDENTITY(mat3(1.0), (false ? _GLF_FUZZED(mat3(-81.43, -29.99, -1.2, -7739.6787, -5.5, 6.4, 87.94, -4911.9921, 8508.7721)) : mat3(1.0))), mat2x4(1.0))), _GLF_struct_31(_GLF_struct_30(1.0, mat2(1.0), mat3x4(_GLF_IDENTITY(1.0, min(1.0, 1.0))), mat2x4(1.0), uvec4(1u)), mat2(1.0))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_struct_replacement_32._f3._f1._injected_loop_counter, max(_GLF_struct_replacement_32._f3._f1._injected_loop_counter, _GLF_struct_replacement_32._f3._f1._injected_loop_counter)) < int(_GLF_ONE(1.0, injectionSwitch.y))); _GLF_struct_replacement_32._f3._f1._injected_loop_counter ++)
    {
     for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), 0 + (int(0))))); _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5)))); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bool(true)))))
          {
           barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
          }
        }
      }
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-96.76), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(830.952)), bvec2(true, _GLF_IDENTITY(false, false || (false))))).x > injectionSwitch.y))))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), bool(bvec4(! (true), true, false, false)))))))
      {
       atomicStore(checker[_GLF_IDENTITY(_GLF_IDENTITY(_GLF_struct_replacement_0.virtual_gid, (true ? _GLF_struct_replacement_0.virtual_gid : _GLF_FUZZED(_GLF_IDENTITY(next_virtual_gid, (next_virtual_gid) ^ 0u)))), _GLF_IDENTITY((_GLF_struct_replacement_0.virtual_gid), max((_GLF_struct_replacement_0.virtual_gid), (_GLF_struct_replacement_0.virtual_gid))) >> 0u)], read, 4, 64, 4);
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END
BUFFER checker DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected_checker DATA_TYPE uint32 SIZE 8388096 FILL 1

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 
  BIND BUFFER checker AS storage DESCRIPTOR_SET 0 BINDING 2 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT checker EQ_BUFFER expected_checker
