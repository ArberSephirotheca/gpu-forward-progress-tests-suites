#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_6 {
 ivec3 _f0;
 uvec2 _f1;
 float _f2;
} ;

struct _GLF_struct_5 {
 int _f0;
} ;

struct _GLF_struct_4 {
 mat2x4 _f0;
 vec2 _f1;
} ;

struct _GLF_struct_7 {
 bvec2 _f0;
 _GLF_struct_4 _f1;
 _GLF_struct_5 _f2;
 _GLF_struct_6 _f3;
 bool _f4;
} ;

struct _GLF_struct_2 {
 ivec2 _f0;
} ;

struct _GLF_struct_1 {
 bvec2 _f0;
 mat4x2 _f1;
 ivec3 _f2;
 ivec3 _f3;
} ;

struct _GLF_struct_0 {
 uvec4 _f0;
 vec4 _f1;
 mat4 _f2;
 vec4 _f3;
} ;

struct _GLF_struct_3 {
 ivec2 _f0;
 _GLF_struct_0 _f1;
 bvec3 _f2;
 _GLF_struct_1 _f3;
 ivec3 _f4;
 _GLF_struct_2 _f5;
} ;

struct _GLF_struct_8 {
 uint workgroup_size;
 mat4 _f0;
 _GLF_struct_3 _f1;
 _GLF_struct_7 _f2;
 mat3x2 _f3;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(! (! _GLF_IDENTITY((_GLF_DEAD(false)), _GLF_IDENTITY(bool(bvec4((_GLF_DEAD(false)), true, false, true)), ! (! (bool(bvec4((_GLF_DEAD(false)), true, false, true))))))), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(! (! (_GLF_DEAD(false))), ! (! (! (! (_GLF_DEAD(false)))))), false)), (bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(! (! (_GLF_DEAD(false))), _GLF_IDENTITY(! (! (! (! (_GLF_DEAD(false))))), false || (! (! (! (_GLF_IDENTITY(! (_GLF_DEAD(false)), false || (_GLF_IDENTITY(! (_GLF_DEAD(false)), bool(_GLF_IDENTITY(bool(! (_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, false, true, false)), _GLF_IDENTITY(bool(bvec2(bool(bvec4(false, false, true, false)), false)), ! (! (bool(bvec2(bool(bvec4(false, false, true, false)), false)))))))))), (bool(! (_GLF_DEAD(false)))) || false))))))))))), false), _GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec2(bvec2(_GLF_IDENTITY(! (! (_GLF_DEAD(false))), _GLF_IDENTITY(! (! (! (! (_GLF_DEAD(false))))), false || (! (! (! (_GLF_IDENTITY(! (_GLF_DEAD(false)), false || (_GLF_IDENTITY(! (_GLF_DEAD(false)), bool(_GLF_IDENTITY(bool(! (_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, false, true, false)), _GLF_IDENTITY(bool(bvec2(bool(bvec4(false, false, true, false)), false)), ! (! (bool(bvec2(bool(bvec4(false, false, true, false)), false)))))))))), (bool(! (_GLF_DEAD(false)))) || false))))))))))), false)), bvec2(_GLF_IDENTITY(bvec3(bvec2(bvec2(_GLF_IDENTITY(! (! (_GLF_DEAD(false))), _GLF_IDENTITY(! (! (! (! (_GLF_DEAD(false))))), false || (! (! (! (_GLF_IDENTITY(! (_GLF_DEAD(false)), false || (_GLF_IDENTITY(! (_GLF_DEAD(false)), bool(_GLF_IDENTITY(bool(! (_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, false, true, false)), _GLF_IDENTITY(bool(bvec2(bool(bvec4(false, false, true, false)), false)), ! (! (bool(bvec2(bool(bvec4(false, false, true, false)), false)))))))))), (bool(! (_GLF_DEAD(false)))) || false))))))))))), false)), true), bvec3(bvec3(bvec3(bvec2(bvec2(_GLF_IDENTITY(! (! (_GLF_DEAD(false))), _GLF_IDENTITY(! (! (! (! (_GLF_DEAD(false))))), false || (! (! (! (_GLF_IDENTITY(! (_GLF_DEAD(false)), false || (_GLF_IDENTITY(! (_GLF_DEAD(false)), bool(_GLF_IDENTITY(bool(! (_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, false, true, false)), _GLF_IDENTITY(bool(bvec2(bool(bvec4(false, false, true, false)), false)), ! (! (bool(bvec2(bool(bvec4(false, false, true, false)), false)))))))))), (bool(! (_GLF_DEAD(false)))) || false))))))))))), false)), true))))))), bvec2(bvec2(bvec2(_GLF_IDENTITY(bvec2(bvec2(_GLF_IDENTITY(! (! (_GLF_DEAD(false))), _GLF_IDENTITY(! (! (! (! (_GLF_DEAD(false))))), false || (! (! (! (_GLF_IDENTITY(! (_GLF_DEAD(false)), false || (_GLF_IDENTITY(! (_GLF_DEAD(false)), bool(_GLF_IDENTITY(bool(! (_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, false, true, false)), _GLF_IDENTITY(bool(bvec2(bool(bvec4(false, false, true, false)), false)), ! (! (bool(bvec2(bool(bvec4(false, false, true, false)), false)))))))))), (bool(! (_GLF_DEAD(false)))) || false))))))))))), false)), bvec2(_GLF_IDENTITY(bvec3(bvec2(bvec2(_GLF_IDENTITY(! (! (_GLF_DEAD(false))), _GLF_IDENTITY(! (! (! (! (_GLF_DEAD(false))))), false || (! (! (! (_GLF_IDENTITY(! (_GLF_DEAD(false)), false || (_GLF_IDENTITY(! (_GLF_DEAD(false)), bool(_GLF_IDENTITY(bool(! (_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, false, true, false)), _GLF_IDENTITY(bool(bvec2(bool(bvec4(false, false, true, false)), false)), ! (! (bool(bvec2(bool(bvec4(false, false, true, false)), false)))))))))), (bool(! (_GLF_DEAD(false)))) || false))))))))))), false)), true), bvec3(bvec3(bvec3(bvec2(bvec2(_GLF_IDENTITY(! (! (_GLF_DEAD(false))), _GLF_IDENTITY(! (! (! (! (_GLF_DEAD(false))))), false || (! (! (! (_GLF_IDENTITY(! (_GLF_DEAD(false)), false || (_GLF_IDENTITY(! (_GLF_DEAD(false)), bool(_GLF_IDENTITY(bool(! (_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, false, true, false)), _GLF_IDENTITY(bool(bvec2(bool(bvec4(false, false, true, false)), false)), ! (! (bool(bvec2(bool(bvec4(false, false, true, false)), false)))))))))), (bool(! (_GLF_DEAD(false)))) || false))))))))))), false)), true))))))))))))) && true)))))), (_GLF_DEAD(false)) && true))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bool(injectionSwitch.x > injectionSwitch.y)), false || (bool(_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), ! (! (bool(injectionSwitch.x > injectionSwitch.y)))))))))))) || false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, true && (false)))))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     barrier();
    }
   barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, bool(bvec3(false, true, false))))), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)))))
      barrier();
     if(_GLF_DEAD(false))
      return;
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec4(_GLF_IDENTITY(! (false), bool(bvec2(! (false), true))), false, false, false))))), bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, (false) || false)), bool(bvec4(_GLF_IDENTITY(! (false), bool(bvec2(! (false), true))), false, _GLF_IDENTITY(false, true && (false)), false))))), ! (! (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), false || (! (false)))))) || false)), bool(bvec4(_GLF_IDENTITY(! (false), bool(bvec2(! (false), true))), false, false, false)))))))), false)))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, ! _GLF_IDENTITY(_GLF_IDENTITY((! (false)), bool(bool(_GLF_IDENTITY((! (false)), bool(bvec4((! (false)), false, false, true)))))), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY((! (false)), ! (! ((! (false))))), false)), bool(bvec3(bool(bvec2(_GLF_IDENTITY((! (false)), ! (! ((! (false))))), false)), true, false))))))), _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec4(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true), true, false, _GLF_IDENTITY(false, bool(bvec3(false, true, false)))))))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY((false) || false, _GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) && true) || _GLF_IDENTITY(_GLF_IDENTITY(((false) || _GLF_IDENTITY(false, false || (false))), bool(bvec3(_GLF_IDENTITY(((false) || _GLF_IDENTITY(false, false || (false))), (((false) || _GLF_IDENTITY(false, false || (false)))) && true), false, true))), bool(bvec2(_GLF_IDENTITY(((false) || _GLF_IDENTITY(false, false || (false))), bool(bvec3(_GLF_IDENTITY(((false) || _GLF_IDENTITY(false, false || (false))), (((false) || _GLF_IDENTITY(false, false || (false)))) && true), false, true))), false))))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, _GLF_IDENTITY((false) || false, _GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) && true) || _GLF_IDENTITY(_GLF_IDENTITY(((false) || _GLF_IDENTITY(false, false || (false))), bool(bvec3(_GLF_IDENTITY(((false) || _GLF_IDENTITY(false, false || (false))), (((false) || _GLF_IDENTITY(false, false || (false)))) && true), false, true))), bool(bvec2(_GLF_IDENTITY(((false) || _GLF_IDENTITY(false, false || (false))), bool(bvec3(_GLF_IDENTITY(((false) || _GLF_IDENTITY(false, false || (false))), (((false) || _GLF_IDENTITY(false, false || (false)))) && true), false, true))), false))))), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec3(bvec3(bvec3(_GLF_IDENTITY(false, _GLF_IDENTITY((false) || false, _GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) && true) || _GLF_IDENTITY(_GLF_IDENTITY(((false) || _GLF_IDENTITY(false, false || (false))), bool(bvec3(_GLF_IDENTITY(((false) || _GLF_IDENTITY(false, false || (false))), (((false) || _GLF_IDENTITY(false, false || (false)))) && true), false, true))), bool(bvec2(_GLF_IDENTITY(((false) || _GLF_IDENTITY(false, false || (false))), bool(bvec3(_GLF_IDENTITY(((false) || _GLF_IDENTITY(false, false || (false))), (((false) || _GLF_IDENTITY(false, false || (false)))) && true), false, true))), false))))), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))), (bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, _GLF_IDENTITY((false) || false, _GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) && true) || _GLF_IDENTITY(_GLF_IDENTITY(((false) || _GLF_IDENTITY(false, false || (false))), bool(bvec3(_GLF_IDENTITY(((false) || _GLF_IDENTITY(false, false || (false))), (((false) || _GLF_IDENTITY(false, false || (false)))) && true), false, true))), bool(bvec2(_GLF_IDENTITY(((false) || _GLF_IDENTITY(false, false || (false))), bool(bvec3(_GLF_IDENTITY(((false) || _GLF_IDENTITY(false, false || (false))), (((false) || _GLF_IDENTITY(false, false || (false)))) && true), false, true))), false))))), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec3(bvec3(bvec3(_GLF_IDENTITY(false, _GLF_IDENTITY((false) || false, _GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) && true) || _GLF_IDENTITY(_GLF_IDENTITY(((false) || _GLF_IDENTITY(false, false || (false))), bool(bvec3(_GLF_IDENTITY(((false) || _GLF_IDENTITY(false, false || (false))), (((false) || _GLF_IDENTITY(false, false || (false)))) && true), false, true))), bool(bvec2(_GLF_IDENTITY(((false) || _GLF_IDENTITY(false, false || (false))), bool(bvec3(_GLF_IDENTITY(((false) || _GLF_IDENTITY(false, false || (false))), (((false) || _GLF_IDENTITY(false, false || (false)))) && true), false, true))), false))))), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))) && true))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     return;
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, 0.0 + (_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(1.1) : injectionSwitch.x)))) > injectionSwitch.y), ! (! ((_GLF_IDENTITY(injectionSwitch.x, 0.0 + (_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(1.1) : injectionSwitch.x)))) > injectionSwitch.y)))))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))), ! (! (_GLF_DEAD(false)))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bool(false))), (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x)) > injectionSwitch.y))), _GLF_IDENTITY(((injectionSwitch.x > injectionSwitch.y)), false || (((injectionSwitch.x > injectionSwitch.y)))) || false))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
        barrier();
       barrier();
      }
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))), _GLF_IDENTITY(bool(bool(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))), bool(bvec4(bool(bool(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), ! (! (_GLF_IDENTITY(false, false || (false)))))), ! (! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), ! (! (_GLF_IDENTITY(false, false || (false))))))))))))))))), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
            barrier();
           barrier();
          }
         barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       barrier();
      }
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec3(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y)), false, false)))), bool(bvec4((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec3(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y)), false, false)))), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
        barrier();
       barrier();
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec2(_GLF_DEAD(false), true)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (bool(bvec2(_GLF_DEAD(false), true))))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     return;
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, ! (! (false)))))), (_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, ! (! (false))))))) || false), (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   return;
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0)))))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, sqrt(0.0) + (injectionSwitch.y)), injectionSwitch.y))))))
        return;
       barrier();
      }
     return;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))))))))
    barrier();
   barrier();
  }
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(vec4(injectionSwitch, 1.0, 0.0))).x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(fract(-961.241)) : injectionSwitch.y))))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(6964.3589) : injectionSwitch.y))))))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, false || _GLF_IDENTITY((false), bool(bvec4((_GLF_IDENTITY(false, true && (false))), false, false, false))))), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, false || _GLF_IDENTITY((false), bool(bvec4((_GLF_IDENTITY(false, true && (false))), false, false, false))))), true && (_GLF_DEAD(_GLF_IDENTITY(false, false || _GLF_IDENTITY((false), bool(bvec4((_GLF_IDENTITY(false, true && (false))), false, false, false))))))), false), bvec2(bvec4(bvec2(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, false || _GLF_IDENTITY((false), bool(bvec4((_GLF_IDENTITY(false, true && (false))), false, false, false))))), true && (_GLF_DEAD(_GLF_IDENTITY(false, false || _GLF_IDENTITY((false), bool(bvec4((_GLF_IDENTITY(false, true && (false))), false, false, false))))))), false), false, false))))))
    barrier();
   barrier();
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec4(bvec2(false, false), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec4(bvec2(false, false), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), bvec2(bvec4(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec4(bvec2(false, false), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), false, false)))))) || false), (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec3(injectionSwitch.x > injectionSwitch.y, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))))))))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, _GLF_IDENTITY(true, (true) && true), true)))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, tan(vec2(0.0, 0.0)) + (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)))).y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(false, ! (! (false))) || (_GLF_DEAD(false))))
    barrier();
   barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y)))))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), vec2(_GLF_IDENTITY(mat4(mat2(1.0) * (injectionSwitch), round(length(normalize(vec2(1.0, 1.0)))), tan(0.0), 1.0, 1.0, 1.0, _GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(abs(0.0), 0.0)), dot(vec2(1.0, 1.0), vec2(abs(0.0), 0.0))), 0.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, _GLF_IDENTITY(dot(vec4(0.0, determinant(mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), 0.0, 1.0), vec4(0.0, 0.0, log(1.0), 1.0)), dot(vec4(0.0, determinant(mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), 0.0, 1.0), vec4(0.0, 0.0, log(1.0), 1.0))), 1.0, 1.0, 1.0), (mat4(mat2(1.0) * (injectionSwitch), round(length(normalize(vec2(1.0, 1.0)))), tan(0.0), 1.0, 1.0, 1.0, _GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(abs(0.0), 0.0)), dot(vec2(1.0, 1.0), vec2(abs(0.0), 0.0))), 0.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, _GLF_IDENTITY(dot(vec4(0.0, determinant(mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), 0.0, 1.0), vec4(0.0, 0.0, log(1.0), 1.0)), dot(vec4(0.0, determinant(mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), 0.0, 1.0), vec4(0.0, 0.0, log(1.0), 1.0))), 1.0, 1.0, 1.0)) + mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))))).y))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)), false || (_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((false) && true, _GLF_IDENTITY(bool(bvec2((false) && true, false)), bool(bvec2(bool(bvec2((false) && true, false)), true)))))))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(false))
  barrier();
 uint num_workgroup = _GLF_IDENTITY(gl_NumWorkGroups, ~ (~ (gl_NumWorkGroups))).x;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(injectionSwitch.x > injectionSwitch.y, false)))))))
  return;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, _GLF_IDENTITY(true, (_GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, true && (true))))) || false))), ! (! (bool(bvec2(false, true))))))))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, true, true, false)), (bool(bvec4(false, true, true, false))) && true))))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 _GLF_struct_8 _GLF_struct_replacement_8 = _GLF_struct_8(gl_WorkGroupSize.x, mat4(_GLF_IDENTITY(_GLF_IDENTITY(1.0, float(_GLF_IDENTITY(mat3x2(1.0, 1.0, log(1.0), 0.0, 0.0, 1.0), transpose(_GLF_IDENTITY(transpose(mat3x2(1.0, 1.0, log(1.0), 0.0, 0.0, 1.0)), (false ? _GLF_FUZZED(mat2x3(2.6, 6065.9468, -841.888, -88.25, -43.31, -727.174)) : transpose(mat3x2(1.0, 1.0, log(1.0), 0.0, 0.0, 1.0)))))))), (_GLF_IDENTITY(_GLF_IDENTITY(1.0, float(_GLF_IDENTITY(mat3x2(1.0, 1.0, log(1.0), 0.0, 0.0, 1.0), transpose(_GLF_IDENTITY(transpose(mat3x2(1.0, 1.0, log(1.0), 0.0, 0.0, 1.0)), (false ? _GLF_FUZZED(mat2x3(2.6, 6065.9468, -841.888, -88.25, _GLF_IDENTITY(-43.31, _GLF_IDENTITY(float(vec3(-43.31, 0.0, sqrt(0.0))), (_GLF_IDENTITY(true ? float(vec3(-43.31, 0.0, sqrt(0.0))) : _GLF_FUZZED(4.2), min(true ? float(vec3(-43.31, 0.0, sqrt(0.0))) : _GLF_FUZZED(4.2), true ? float(vec3(-43.31, 0.0, sqrt(0.0))) : _GLF_FUZZED(4.2)))))), -727.174)) : transpose(mat3x2(_GLF_IDENTITY(1.0, (1.0) + determinant(mat3(0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0))), 1.0, log(1.0), 0.0, 0.0, 1.0)))))))), mix(float(_GLF_FUZZED(1159.7035)), float(_GLF_IDENTITY(1.0, float(_GLF_IDENTITY(mat3x2(1.0, 1.0, _GLF_IDENTITY(log(1.0), 1.0 * (_GLF_IDENTITY(log(1.0), max(log(1.0), log(1.0))))), 0.0, 0.0, 1.0), transpose(_GLF_IDENTITY(transpose(mat3x2(_GLF_IDENTITY(1.0, (1.0) / 1.0), _GLF_IDENTITY(1.0, min(1.0, 1.0)), log(1.0), _GLF_IDENTITY(0.0, float(mat4x2(0.0, 1.0, 1.0, 0.0, 0.0, 1.0, exp(sin(0.0)), 0.0))), 0.0, 1.0)), (false ? _GLF_FUZZED(mat2x3(2.6, 6065.9468, -841.888, -88.25, -43.31, -727.174)) : transpose(mat3x2(1.0, 1.0, log(1.0), 0.0, 0.0, 1.0))))))))), bool(true)))) / 1.0)), _GLF_struct_3(ivec2(1), _GLF_struct_0(uvec4(1u), _GLF_IDENTITY(vec4(_GLF_IDENTITY(1.0, _GLF_IDENTITY(float(vec2(1.0, 1.0)), 1.0 * _GLF_IDENTITY((float(vec2(1.0, _GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, max(1.0, 1.0)), 1.0)), _GLF_IDENTITY(_GLF_IDENTITY(1.0, clamp(1.0, _GLF_IDENTITY(1.0, (1.0) / 1.0), 1.0)), (true ? _GLF_IDENTITY(_GLF_IDENTITY(1.0, clamp(1.0, _GLF_IDENTITY(1.0, (1.0) / 1.0), 1.0)), (false ? _GLF_FUZZED(7.7) : _GLF_IDENTITY(1.0, clamp(1.0, _GLF_IDENTITY(1.0, (1.0) / 1.0), 1.0)))) : _GLF_FUZZED(-76.72)))))))), mix(float(_GLF_FUZZED((-6.6 / -6.0))), float((float(vec2(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(-1.9) : _GLF_IDENTITY(1.0, mix(float(_GLF_IDENTITY(1.0, float(mat4(1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0)))), float(_GLF_FUZZED((- 0.1))), bool(false))))), _GLF_IDENTITY(1.0, _GLF_IDENTITY(min(_GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, max(1.0, 1.0)), 1.0)), _GLF_IDENTITY(1.0, clamp(1.0, _GLF_IDENTITY(1.0, (1.0) / 1.0), 1.0))), (min(_GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, max(1.0, 1.0)), _GLF_IDENTITY(1.0, (1.0) / 1.0))), _GLF_IDENTITY(1.0, clamp(1.0, _GLF_IDENTITY(1.0, (1.0) / 1.0), 1.0)))) * 1.0)))))), bool(true)))))), (false ? _GLF_FUZZED(vec4(53.84, 780.343, -86.70, 0.6)) : vec4(_GLF_IDENTITY(1.0, _GLF_IDENTITY(float(vec2(1.0, 1.0)), 1.0 * _GLF_IDENTITY((float(vec2(1.0, _GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, max(1.0, 1.0)), 1.0)), _GLF_IDENTITY(_GLF_IDENTITY(1.0, clamp(1.0, _GLF_IDENTITY(1.0, (1.0) / 1.0), 1.0)), (true ? _GLF_IDENTITY(_GLF_IDENTITY(1.0, clamp(1.0, _GLF_IDENTITY(1.0, (1.0) / 1.0), 1.0)), (false ? _GLF_FUZZED(7.7) : _GLF_IDENTITY(1.0, clamp(1.0, _GLF_IDENTITY(1.0, (1.0) / 1.0), 1.0)))) : _GLF_FUZZED(-76.72)))))))), mix(float(_GLF_FUZZED((-6.6 / -6.0))), float((float(vec2(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(-1.9) : _GLF_IDENTITY(1.0, mix(float(_GLF_IDENTITY(1.0, float(mat4(1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0)))), float(_GLF_FUZZED((- 0.1))), bool(false))))), _GLF_IDENTITY(1.0, _GLF_IDENTITY(min(_GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, max(1.0, 1.0)), 1.0)), _GLF_IDENTITY(1.0, clamp(1.0, _GLF_IDENTITY(1.0, (1.0) / 1.0), 1.0))), (min(_GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, max(1.0, 1.0)), _GLF_IDENTITY(1.0, (1.0) / 1.0))), _GLF_IDENTITY(1.0, clamp(1.0, _GLF_IDENTITY(1.0, (1.0) / 1.0), 1.0)))) * 1.0)))))), bool(true)))))))), mat4(1.0), vec4(1.0)), bvec3(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(true, true), bvec2(bvec2(_GLF_IDENTITY(bvec2(true, true), bvec2(bvec4(bvec2(true, true), false, true))))))), (bool(_GLF_IDENTITY(bvec2(true, true), _GLF_IDENTITY(bvec2(bvec2(_GLF_IDENTITY(bvec2(true, true), bvec2(bvec4(bvec2(true, true), false, true))))), bvec2(_GLF_IDENTITY(bvec2(bvec2(bvec2(_GLF_IDENTITY(bvec2(true, true), bvec2(bvec4(bvec2(true, true), false, true)))))), bvec2(bvec3(bvec2(bvec2(bvec2(_GLF_IDENTITY(bvec2(true, true), bvec2(bvec4(bvec2(true, true), false, true)))))), false)))))))) || false))), _GLF_struct_1(bvec2(true), mat4x2(1.0), ivec3(_GLF_IDENTITY(1, min(1, 1))), ivec3(1)), _GLF_IDENTITY(ivec3(1), (ivec3(1)) | (_GLF_IDENTITY(ivec3(1), (ivec3(1)) / ivec3(1, 1, 1)))), _GLF_struct_2(ivec2(1))), _GLF_struct_7(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec2(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (bool(bvec2(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) || false)), ! (_GLF_IDENTITY(! _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(true, (true) || false), true && (_GLF_IDENTITY(true, _GLF_IDENTITY(! (_GLF_IDENTITY(! (true), (! (true)) && true)), true && (! (_GLF_IDENTITY(! (true), (! (true)) && _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, (true) && true)), ! (! (! (_GLF_IDENTITY(true, (true) && true))))))))))))))), bool(bool((_GLF_IDENTITY(true, _GLF_IDENTITY(true, _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(true, ! (! (true))), ! (! (_GLF_IDENTITY(true, ! (! (true)))))))), ! (_GLF_IDENTITY(! (bool(bool(_GLF_IDENTITY(true, ! (! (true)))))), false || (! (bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(true, ! (! (true)))), true && (bool(_GLF_IDENTITY(true, ! (! (true))))))))))))) && (_GLF_IDENTITY(true, _GLF_IDENTITY(! (_GLF_IDENTITY(! (true), (! (true)) && true)), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(! (_GLF_IDENTITY(! (true), (! (true)) && true)), (! (_GLF_IDENTITY(! (true), (! (true)) && true))) || false), true), bvec2(bvec4(bvec2(_GLF_IDENTITY(! (_GLF_IDENTITY(! (true), (! (true)) && true)), (! (_GLF_IDENTITY(! (true), (! (true)) && true))) || false), true), true, false)))))))))))), bool(bool(! _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(true, (true) || false), true && (_GLF_IDENTITY(true, _GLF_IDENTITY(! (_GLF_IDENTITY(! (true), (! (true)) && true)), true && (! (_GLF_IDENTITY(! (true), (! (true)) && _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, (true) && true)), ! (! (! (_GLF_IDENTITY(true, (true) && true))))))))))))))), bool(bool((_GLF_IDENTITY(true, _GLF_IDENTITY(true, _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(true, ! (! (true))), ! (! (_GLF_IDENTITY(true, ! (! (true)))))))), ! (_GLF_IDENTITY(! (bool(bool(_GLF_IDENTITY(true, ! (! (true)))))), false || (! (bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(true, ! (! (true)))), true && (bool(_GLF_IDENTITY(true, ! (! (true))))))))))))) && (_GLF_IDENTITY(true, _GLF_IDENTITY(! (_GLF_IDENTITY(! (true), (! (true)) && true)), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(! (_GLF_IDENTITY(! (true), (! (true)) && true)), (! (_GLF_IDENTITY(! (true), (! (true)) && true))) || false), true), bvec2(bvec4(bvec2(_GLF_IDENTITY(! (_GLF_IDENTITY(! (true), (! (true)) && true)), (! (_GLF_IDENTITY(! (true), (! (true)) && true))) || false), true), true, false)))))))))))))))))), _GLF_struct_4(mat2x4(_GLF_IDENTITY(1.0, (1.0) / 1.0)), vec2(1.0)), _GLF_struct_5(1), _GLF_struct_6(ivec3(1), _GLF_IDENTITY(uvec2(1u), min(uvec2(1u), _GLF_IDENTITY(uvec2(1u), uvec2(1u, 1u) * (_GLF_IDENTITY(_GLF_IDENTITY(uvec2(1u), clamp(uvec2(1u), uvec2(1u), uvec2(1u))), (true ? uvec2(1u) : _GLF_IDENTITY(_GLF_FUZZED(uvec2(11192u, 78920u)), ~ (~ (_GLF_FUZZED(uvec2(11192u, 78920u))))))))))), _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-0.9)), _GLF_IDENTITY(float(1.0), max(_GLF_IDENTITY(float(1.0), float(mat2(float(1.0), 0.0, 0.0, 0.0))), float(1.0))), _GLF_IDENTITY(bool(true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (bool(true)))))), true), mat3x2(1.0));
 if(_GLF_DEAD(false))
  barrier();
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y))))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, false)))))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))))), bool(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 uint workgroup_base = _GLF_IDENTITY(_GLF_struct_replacement_8.workgroup_size, max(_GLF_struct_replacement_8.workgroup_size, _GLF_struct_replacement_8.workgroup_size)) * workgroup_id;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))) || false)))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, float(mat2x3(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-0.8)), float(injectionSwitch.y), bool(true))), 0.0, 1.0, 0.0, 0.0, 1.0)))))), _GLF_IDENTITY(bool(bvec2((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y, float(mat2x3(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-0.8)), float(injectionSwitch.y), bool(true))), 0.0, 1.0, _GLF_IDENTITY(0.0, clamp(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), 0.0, _GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(-8387.3334))))), 0.0, 1.0)))))), false)), bool(bvec4(bool(bvec2((injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(mat2x3(injectionSwitch.y, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0, 0.0)), mix(float(float(mat2x3(injectionSwitch.y, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0, 0.0))), float(_GLF_FUZZED(6.5)), bool(false)))), min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, float(mat2x3(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-0.8)), float(injectionSwitch.y), bool(true))), 0.0, 1.0, 0.0, 0.0, 1.0)))))), false)), false, _GLF_TRUE(true, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x < injectionSwitch.y), ((_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x < injectionSwitch.y)) && true)), false)))))))
    {
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 uint subgroup_base = subgroup_id * subgroup_size;
 if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))) || false))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(false, false || (false))))), false || (_GLF_DEAD(_GLF_IDENTITY(false, (false) || false))))) || false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   return;
  }
 if(_GLF_DEAD(false))
  barrier();
 uint virtual_gid = _GLF_IDENTITY(workgroup_base + subgroup_base, _GLF_IDENTITY(0u, (0u) >> 0u) ^ (workgroup_base + _GLF_IDENTITY(subgroup_base, (_GLF_IDENTITY(subgroup_base, 0u | (subgroup_base))) / 1u))) + subgroup_local_id;
 uint next_virtual_gid = workgroup_base + subgroup_base + ((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + _GLF_IDENTITY(1, ~ (_GLF_IDENTITY(~ (1), int(int(~ (1)))))), max(subgroup_local_id + _GLF_IDENTITY(1, ~ (_GLF_IDENTITY(~ (1), int(int(~ (1)))))), subgroup_local_id + _GLF_IDENTITY(1, _GLF_IDENTITY(~ (_GLF_IDENTITY(~ (1), int(int(~ (1))))), (~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (1), int(int(~ (1)))), (_GLF_IDENTITY(_GLF_IDENTITY(~ (1), int(int(~ (1)))), (_GLF_IDENTITY(_GLF_IDENTITY(~ (1), int(int(~ (1)))), (_GLF_IDENTITY(~ (1), int(int(~ (1))))) << 0)) / 1)) | (_GLF_IDENTITY(~ (1), int(int(~ (1)))))))) / 1)))), min(subgroup_local_id + _GLF_IDENTITY(1, ~ (_GLF_IDENTITY(~ (1), int(int(~ (1)))))), subgroup_local_id + _GLF_IDENTITY(1, ~ (_GLF_IDENTITY(~ (1), int(int(~ _GLF_IDENTITY((1), ((1)) | ((1))))))))))) % subgroup_size);
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     return;
    }
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x > injectionSwitch.y))))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec3(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, false))))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(asin(mat4x2(6001.7758, 2.9, -90.54, -71.02, -7.0, -5.6, 1.0, 1.0)[3])))).x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(464.256)), vec2(_GLF_FUZZED((true ? -5.0 : -443.344)), _GLF_IDENTITY((injectionSwitch)[1], max((injectionSwitch)[1], (injectionSwitch)[1]))), bvec2(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), mat2(1.0) * (_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(464.256)), vec2(_GLF_FUZZED((true ? -5.0 : -443.344)), _GLF_IDENTITY((injectionSwitch)[1], max((injectionSwitch)[1], (injectionSwitch)[1]))), bvec2(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))).y)), bool(bvec3(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(asin(mat4x2(6001.7758, 2.9, -90.54, -71.02, -7.0, -5.6, 1.0, 1.0)[3])))).x > _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(464.256)), vec2(_GLF_FUZZED((true ? -5.0 : -443.344)), _GLF_IDENTITY((injectionSwitch)[1], max((injectionSwitch)[1], (injectionSwitch)[1]))), bvec2(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))).y)), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(asin(mat4x2(6001.7758, 2.9, -90.54, -71.02, -7.0, -5.6, 1.0, 1.0)[3])))).x > _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(464.256)), vec2(_GLF_IDENTITY(_GLF_FUZZED((true ? -5.0 : -443.344)), max(_GLF_FUZZED((true ? -5.0 : -443.344)), _GLF_IDENTITY(_GLF_FUZZED((true ? -5.0 : -443.344)), float(mat3x2(_GLF_FUZZED((true ? -5.0 : -443.344)), 1.0, 0.0, 1.0, 1.0, 0.0))))), _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch)[1], ((injectionSwitch)[1]) * 1.0), max((injectionSwitch)[1], (injectionSwitch)[1]))), bvec2(false, _GLF_TRUE(_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, true && (true))))), (injectionSwitch.x < injectionSwitch.y))))).y))) && true), true, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x < injectionSwitch.y)))))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   return;
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(14.68) : _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)))), _GLF_IDENTITY(bool(bvec4(injectionSwitch.x > injectionSwitch.y, false, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (! (bool(bvec4(injectionSwitch.x > injectionSwitch.y, false, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))), ! (! (! _GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && ((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 uint read = _GLF_IDENTITY(0, (0) | (0));
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec2(false, false))), (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), (_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(194.995), _GLF_FUZZED(-881.637)), vec2((injectionSwitch)[_GLF_IDENTITY(0, (0) / 1)], _GLF_IDENTITY((injectionSwitch)[1], ((injectionSwitch)[1]) / 1.0)), bvec2(true, true))).x > injectionSwitch.y)))))) || false)))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  return;
 atomicStore(buf[next_virtual_gid], uint(1), 4, 64, 4);
 if(_GLF_DEAD(false))
  barrier();
 if((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) ^ 0u) % 2, ~ (~ (subgroup_local_id % 2))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_local_id % _GLF_IDENTITY(2, (2) | (2)), ~ _GLF_IDENTITY((~ (subgroup_local_id % 2)), max((~ (subgroup_local_id % 2)), _GLF_IDENTITY((~ (subgroup_local_id % 2)), ((~ (subgroup_local_id % 2))) | ((~ (subgroup_local_id % 2)))))))), (~ (_GLF_IDENTITY(subgroup_local_id % 2, ~ (~ (_GLF_IDENTITY(subgroup_local_id % 2, (subgroup_local_id % 2) | (subgroup_local_id % 2))))))) + 0u)))) == 0)
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(float(injectionSwitch.x))) > injectionSwitch.y))))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   subgroupAll(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), _GLF_IDENTITY((_GLF_IDENTITY(false, false || _GLF_IDENTITY((_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(vec4(8549.6764, 19.26, 5514.5490, -780.505).y), _GLF_FUZZED(-3.9)), vec2(_GLF_IDENTITY((injectionSwitch)[0], clamp((injectionSwitch)[0], (injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch)[0], ((injectionSwitch)[0]) / 1.0))), (injectionSwitch)[1]), bvec2(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))).x > injectionSwitch.y)))), ((_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, ! (! (false))))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) && true))), bool(bool((_GLF_IDENTITY(false, false || _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true)), ((_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, ! (! (false))))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) && true)))))) && true));
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), false || (! _GLF_IDENTITY((false), false || ((false))))))), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_IDENTITY(_GLF_FUZZED(injectionSwitch), min(_GLF_FUZZED(injectionSwitch), _GLF_FUZZED(injectionSwitch))) : injectionSwitch)).x, max(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), injectionSwitch, injectionSwitch)))).x, _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch, mix(vec2(_GLF_FUZZED((+ -66.98)), _GLF_FUZZED((-55.07 + -459.326))), vec2((false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)[0], (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)[1]), bvec2(true, true))))).x)) > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), (_GLF_IDENTITY(mat2(1.0) * (injectionSwitch), vec2(vec2(mat2(1.0) * (injectionSwitch))))) * vec2(1.0, 1.0))).x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
        barrier();
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(false))
            barrier();
           return;
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
            barrier();
          }
         barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    return;
   _GLF_IDENTITY(read = _GLF_IDENTITY(atomicLoad(buf[virtual_gid], 4, 64, 2), max(atomicLoad(_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) << 0u), _GLF_IDENTITY(4, _GLF_IDENTITY((_GLF_IDENTITY(4, (4) | 0)), max((_GLF_IDENTITY(4, (4) | 0)), (_GLF_IDENTITY(4, (4) | 0)))) | (4)), 64, 2), atomicLoad(buf[virtual_gid], 4, _GLF_IDENTITY(64, (0 >> _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), max(int(0), int(0))))) | (64)), 2))), (false ? _GLF_FUZZED(_GLF_IDENTITY(num_workgroup, (num_workgroup) - 0u)) : read = _GLF_IDENTITY(atomicLoad(buf[virtual_gid], 4, 64, 2), max(atomicLoad(buf[virtual_gid], 4, _GLF_IDENTITY(64, clamp(64, 64, 64)), 2), atomicLoad(buf[_GLF_IDENTITY(virtual_gid, min(virtual_gid, _GLF_IDENTITY(virtual_gid, (virtual_gid) - 0u)))], 4, 64, 2)))));
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   subgroupAll(false);
   read = atomicLoad(buf[virtual_gid], 4, 64, 2);
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)))).y, (injectionSwitch.y) * 1.0)))), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)))).y, (injectionSwitch.y) * 1.0)))), bool(bool(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)))).y, (injectionSwitch.y) * 1.0))))))), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)), bool(bool(_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)))).y, (injectionSwitch.y) * 1.0)))), bool(bool(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)))).y, (injectionSwitch.y) * 1.0))))))), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)), (bool(bvec4(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)))).y, (injectionSwitch.y) * 1.0)))), bool(bool(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)))).y, (injectionSwitch.y) * 1.0))))))), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))) || false))))))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
      return;
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0)))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0), _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(-9.6)), bool(false)))) * sqrt(1.0))))))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) && true))))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     return;
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + determinant(mat4(0.0, 1.0, cos(0.0), 1.0, 0.0, 0.0, sqrt(0.0), 1.0, 0.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(dot(vec4(1.0, 1.0, 0.0, 0.0), vec4(0.0, 0.0, 1.0, 1.0)), dot(vec4(1.0, 1.0, 0.0, 0.0), vec4(0.0, _GLF_IDENTITY(0.0, (0.0) / 1.0), 1.0, 1.0))), 0.0, 0.0, 0.0)))))))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(414.857)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 subgroupBarrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 atomicStore(checker[virtual_gid], read, 4, 64, 4);
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), (_GLF_IDENTITY(! (! (false)), true && (! (! (false))))) || false)), true), _GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec3(bvec2(_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), (_GLF_IDENTITY(! (! (false)), true && (! (! (false))))) || false)), true), false), bvec3(bvec3(bvec3(bvec2(_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), (_GLF_IDENTITY(! (! (false)), true && (! (! (false))))) || false)), true), false))))), bvec2(bvec4(bvec2(_GLF_IDENTITY(bvec3(bvec2(_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), (_GLF_IDENTITY(! (! (false)), true && (! (! (false))))) || false)), true), false), bvec3(bvec3(bvec3(bvec2(_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), (_GLF_IDENTITY(! (! (false)), true && (! (! (false))))) || false)), true), false))))), true, false))))))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false)), true))), (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y)), true && (_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, _GLF_TRUE(true, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), injectionSwitch, injectionSwitch)) : _GLF_FUZZED(vec2(-42.13, 749.345)))).x < injectionSwitch.y), bool(bvec3(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), injectionSwitch, injectionSwitch)), mix(vec2((_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), injectionSwitch, injectionSwitch)))[0], _GLF_FUZZED(-13.75)), vec2(_GLF_FUZZED(-4804.7755), _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), injectionSwitch, injectionSwitch)))[1], ((_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), injectionSwitch, injectionSwitch)))[1]) / 1.0)), bvec2(false, true))) : _GLF_FUZZED(vec2(-42.13, 749.345)))).x < injectionSwitch.y), ! (! ((_GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), injectionSwitch, injectionSwitch)) : _GLF_FUZZED(vec2(-42.13, 749.345)))).x < injectionSwitch.y)))), false, false)))) && (false)), true))), (injectionSwitch.x > injectionSwitch.y)))), ! (! (_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, _GLF_TRUE(true, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ((_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x < injectionSwitch.y)) && true), ! (! ((injectionSwitch.x < injectionSwitch.y))))) && (false)), true))), (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, _GLF_TRUE(true, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0)), ((injectionSwitch.x < injectionSwitch.y)) && true), false || (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0)), ((injectionSwitch.x < injectionSwitch.y)) && true), bool(bvec4(_GLF_IDENTITY((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0)), ((injectionSwitch.x < injectionSwitch.y)) && true), false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), bool(bvec4(_GLF_IDENTITY((injectionSwitch.x < _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, 0.0 + (injectionSwitch.y)), _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-7.1)), float(injectionSwitch.y), bool(true))))), (injectionSwitch.y) - 0.0)), ((injectionSwitch.x < injectionSwitch.y)) && true), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)))))) && (_GLF_IDENTITY(false, ! (! (false))))), true))), (injectionSwitch.x > injectionSwitch.y)))))))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(bool(bool(false)), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(bool(bool(false)), true && (bool(bool(false)))), true)), true && (bool(bvec2(_GLF_IDENTITY(bool(bool(false)), true && (bool(bool(false)))), true))))), false || (bool(bool(false)))))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     return;
    }
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), true && (! (false)))))))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)), bool(bvec2(_GLF_DEAD(false), true))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).x, min(injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x, injectionSwitch.x)) > _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)), injectionSwitch)).y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).x, min(injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x, injectionSwitch.x)) > _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)), injectionSwitch)).y)))))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_IDENTITY((injectionSwitch)[0], float(mat3x2((injectionSwitch)[0], 0.0, 1.0, 0.0, cos(0.0), 1.0))), (injectionSwitch)[1]), vec2(_GLF_FUZZED(8.4), _GLF_FUZZED(362.460)), bvec2(false, false))).x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), true && (bool(bool(false)))))))
      barrier();
     if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y, bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), bool(_GLF_IDENTITY(bvec2(bool(injectionSwitch.x > injectionSwitch.y), true), bvec2(bvec3(bvec2(bool(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * sqrt(vec2(1.0, 1.0))).x > injectionSwitch.y), true), false))))), (_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), bool(_GLF_IDENTITY(bvec2(bool(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat3x4(_GLF_IDENTITY(injectionSwitch, vec2(vec2(injectionSwitch))), 1.0, 0.0, 1.0, 1.0, 1.0, exp(0.0), 0.0, sin(0.0), abs(round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0))))), 0.0)), clamp(vec2(mat3x4(_GLF_IDENTITY(injectionSwitch, vec2(vec2(injectionSwitch))), 1.0, 0.0, 1.0, 1.0, 1.0, exp(0.0), 0.0, sin(0.0), abs(round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0))))), 0.0)), vec2(mat3x4(_GLF_IDENTITY(injectionSwitch, vec2(vec2(injectionSwitch))), 1.0, 0.0, 1.0, 1.0, 1.0, exp(0.0), 0.0, sin(0.0), abs(round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0))))), 0.0)), _GLF_IDENTITY(vec2(mat3x4(_GLF_IDENTITY(injectionSwitch, vec2(vec2(injectionSwitch))), 1.0, 0.0, 1.0, 1.0, 1.0, exp(0.0), 0.0, sin(0.0), abs(round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0))))), 0.0)), (true ? vec2(mat3x4(_GLF_IDENTITY(injectionSwitch, vec2(vec2(injectionSwitch))), 1.0, 0.0, 1.0, 1.0, 1.0, exp(0.0), 0.0, sin(0.0), abs(round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0))))), 0.0)) : _GLF_FUZZED(injectionSwitch)))))).x > injectionSwitch.y), true), bvec2(bvec3(bvec2(bool(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * sqrt(vec2(1.0, 1.0))).x > injectionSwitch.y), true), false)))))) || false)))))))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
          return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
       barrier();
      }
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bool(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), ! (_GLF_IDENTITY(! (bool(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), ! (! (! (bool(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))), bool(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), true && (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), (! (injectionSwitch.x > injectionSwitch.y)) || false))))))) ? _GLF_FUZZED(exp2(floor(_GLF_IDENTITY(vec2(4.2, -9148.2357), max(vec2(4.2, -9148.2357), vec2(4.2, -9148.2357)))))) : _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(-6957.8926), _GLF_FUZZED(-3.2)), bvec2(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))).y))))))))), false || (_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(length(vec4(-3.7, -1.7, 918.234, -321.312)))))), ! (! _GLF_IDENTITY((_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! _GLF_IDENTITY(((injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (((injectionSwitch.x > injectionSwitch.y))), true && (! (((injectionSwitch.x > injectionSwitch.y)))))))))), bool(bvec2((_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true), ! (! ((injectionSwitch.x > injectionSwitch.y))))), false)))))))))) || false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    return;
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END
BUFFER checker DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected_checker DATA_TYPE uint32 SIZE 8388096 FILL 1

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 
  BIND BUFFER checker AS storage DESCRIPTOR_SET 0 BINDING 2 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT checker EQ_BUFFER expected_checker
