#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_1 {
 bvec3 _f0;
 mat2 _f1;
 mat4x3 _f2;
 mat3x2 _f3;
} ;

struct _GLF_struct_0 {
 vec3 _f0;
 mat3x4 _f1;
 uvec4 _f2;
 vec3 _f3;
 mat4 _f4;
 mat4 _f5;
 uint subgroup_local_id;
 mat2x3 _f6;
} ;

struct _GLF_struct_2 {
 mat2 _f0;
 _GLF_struct_0 _f1;
 float _f2;
 _GLF_struct_1 _f3;
 vec2 _f4;
 bvec3 _f5;
 ivec2 _f6;
} ;

struct _GLF_struct_3 {
 _GLF_struct_2 _f0;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 _GLF_struct_3 _GLF_struct_replacement_3 = _GLF_struct_3(_GLF_struct_2(mat2(1.0), _GLF_struct_0(vec3(1.0), mat3x4(1.0), uvec4(1u), vec3(1.0), mat4(1.0), mat4(1.0), gl_SubgroupInvocationID, mat2x3(1.0)), 1.0, _GLF_struct_1(bvec3(true), mat2(1.0), mat4x3(1.0), mat3x2(1.0)), vec2(1.0), bvec3(true), ivec2(1)));
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = workgroup_size * workgroup_id;
 uint subgroup_base = subgroup_id * subgroup_size;
 uint virtual_gid = workgroup_base + subgroup_base + _GLF_struct_replacement_3._f0._f1.subgroup_local_id;
 uint next_virtual_gid = workgroup_base + subgroup_base + ((_GLF_struct_replacement_3._f0._f1.subgroup_local_id + 1) % subgroup_size);
 uint read = 0;
 atomicStore(buf[next_virtual_gid], uint(1), 4, 64, 4);
 if((_GLF_struct_replacement_3._f0._f1.subgroup_local_id % 2) == 0)
  {
   switch(_GLF_SWITCH((0 >> _GLF_IDENTITY(int(3), int(3)))))
    {
     case 87:
     for(     (37357 >> -72651);
 (3920 < -62841); (uvec2(57189u, 189489u) & read))
      {
       bvec4(true, false, false, true);
       (bvec3(true, true, false) == bvec3(false, false, false));
       (mat4x3(-4.0, 7.1, -76.12, 28.01, 7.2, -1.2, -30.65, 8.9, 0.4, 1.3, 4036.1903, -415.678) * mat3x4(40.51, -5451.7631, 1.1, -928.886, 16.35, -4.3, 5.6, 6.4, 6.9, 1.7, -6.4, 8875.4295));
       ivec3 _GLF_SWITCH_0_0v;
       ;
       mat3x2(330.440, 5818.3612, -4.3, -6.4, 6494.9307, -5.3);
      }
     case 0:
     case 71:
     case 45:
     case 39:
     case 33:
     case 19:
     subgroupAll(false);
     case 13:
     case 49:
     case 78:
     read = atomicLoad(buf[virtual_gid], 4, 64, 2);
     break;
     default:
     1;
    }
  }
 else
  {
   switch(_GLF_SWITCH(0))
    {
     case 61:
     for(ivec2 _GLF_SWITCH_1_0v, _GLF_SWITCH_1_1v[64]; bvec4(true, false, true, true).x; 10.67)
      {
       {
        bool _GLF_SWITCH_1_2v, _GLF_SWITCH_1_3v[50], _GLF_SWITCH_1_4v[4];
        {
         faceforward(injectionSwitch, sqrt(vec2(5687.3562, 6.2)), vec2(904.214, 3.8));
         uvec2 _GLF_SWITCH_1_5v[87], _GLF_SWITCH_1_6v, _GLF_SWITCH_1_7v;
         mat3x2 _GLF_SWITCH_1_8v[47], _GLF_SWITCH_1_9v[78];
         float _GLF_SWITCH_1_10v, _GLF_SWITCH_1_11v, _GLF_SWITCH_1_12v;
         max(uvec4(197513u, 189312u, 177309u, 51510u), workgroup_id);
         ;
         clamp(subgroup_base, subgroup_base, packHalf2x16(acosh(vec2(580.714, 63.17))));
        }
       }
       {
        mat2 _GLF_SWITCH_1_13v, _GLF_SWITCH_1_14v;
        while((uvec2(55162u, 92198u) == uvec2(63044u, 173187u)))
         {
          (uvec2(7519u, 183515u));
          mat4x3(1597.4301, -521.601, 7.0, -72.37, -5.1, -6639.1913, 1.7, -1.6, 707.308, -90.46, 1.7, -95.78);
          mat2x4 _GLF_SWITCH_1_15v[18];
          ;
          bvec3 _GLF_SWITCH_1_16v, _GLF_SWITCH_1_17v[40], _GLF_SWITCH_1_18v;
          mat3 _GLF_SWITCH_1_19v[31], _GLF_SWITCH_1_20v;
          uvec3(6552u, 63639u, 192872u);
         }
       }
       {
        (mat2(35.46, -7.0, -7136.4767, 3.2));
        if((ivec4(-44778, -44129, -57125, 89242) == ivec4(-21588, -62689, -29939, -93936)))
         {
          vec2 _GLF_SWITCH_1_21v[91], _GLF_SWITCH_1_22v, _GLF_SWITCH_1_23v;
          uint _GLF_SWITCH_1_24v[41], _GLF_SWITCH_1_25v, _GLF_SWITCH_1_26v[32];
         }
       }
       ;
       vec2 _GLF_SWITCH_1_27v, _GLF_SWITCH_1_28v, _GLF_SWITCH_1_29v;
       while(bvec4(false, false, true, true).t)
        {
         bool _GLF_SWITCH_1_30v[64], _GLF_SWITCH_1_31v, _GLF_SWITCH_1_32v;
         while(true)
          {
           bvec4 _GLF_SWITCH_1_33v;
           mat4x3(4019.1477, -69.26, -9.7, -4044.2928, 369.139, -0.0, 6377.5655, 81.43, -23.89, -6.2, -8516.8835, 3.5);
          }
         (mat4(343.088, -17.26, -11.56, 1.3, -3.3, 4.8, 237.303, 8.2, 9634.4377, -8.1, -0.4, -39.23, -1591.1999, 3.5, 440.679, -4.4) * mat3x4(8.1, 6116.5674, 5.7, -2.4, -76.23, -743.440, -9.5, 25.61, -2098.3993, 15.42, -3.8, 7.2));
         int _GLF_SWITCH_1_34v, _GLF_SWITCH_1_35v, _GLF_SWITCH_1_36v;
         (ivec4(81236, 47924, 7776, -33502) * _GLF_SWITCH_1_35v);
         mat3x2(mat2x3(475.348, 9.0, 438.801, 963.377, -3.4, 1.5));
         if(_GLF_SWITCH_1_32v)
          {
           int _GLF_SWITCH_1_37v[46], _GLF_SWITCH_1_38v, _GLF_SWITCH_1_39v;
           mat3x2(mat4x2(-0.7, -2.1, -5135.8210, 25.76, 9.7, -6.7, 9.4, 40.85));
           (ivec4(-58682, 21722, -41950, -72066) == (ivec4(8242, -21005, 31145, 39104) - _GLF_SWITCH_1_36v));
           vec2 _GLF_SWITCH_1_40v[15], _GLF_SWITCH_1_41v;
           (- tanh(vec3(-0.6, -72.23, -1.6)));
           mat4(84.28, 80.41, -6.6, -457.158, -9.5, 3.0, -8.7, -783.054, 628.771, 8.2, 3.3, 48.71, 897.659, -3.7, 898.971, -67.12);
           ;
           ivec4(-49235, 87004, -41249, 837);
           ;
          }
         else
          {
           ivec4 _GLF_SWITCH_1_42v[20], _GLF_SWITCH_1_43v;
           mat3x4 _GLF_SWITCH_1_44v[35], _GLF_SWITCH_1_45v, _GLF_SWITCH_1_46v;
           _GLF_SWITCH_1_31v;
           bvec3(bvec4(true, false, false, true));
           uint _GLF_SWITCH_1_47v[16];
          }
         uvec2 _GLF_SWITCH_1_48v, _GLF_SWITCH_1_49v[27];
        }
       mat4x3 _GLF_SWITCH_1_50v;
       uint _GLF_SWITCH_1_51v[18];
      }
     case 42:
     mat3x4 _GLF_SWITCH_1_52v, _GLF_SWITCH_1_53v;
     case 0:
     case 19:
     case 90:
     case 78:
     case 68:
     case 3:
     case 28:
     subgroupAll(false);
     case 72:
     read = atomicLoad(buf[virtual_gid], 4, 64, 2);
     break;
     default:
     1;
    }
  }
 subgroupBarrier();
 atomicStore(checker[virtual_gid], read, 4, 64, 4);
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END
BUFFER checker DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected_checker DATA_TYPE uint32 SIZE 8388096 FILL 1

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 
  BIND BUFFER checker AS storage DESCRIPTOR_SET 0 BINDING 2 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT checker EQ_BUFFER expected_checker
