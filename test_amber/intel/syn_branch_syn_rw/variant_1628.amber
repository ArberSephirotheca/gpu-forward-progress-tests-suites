#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     barrier();
    }
  }
 uint subgroup_id = gl_SubgroupID;
 do
  {
   if(_GLF_DEAD(false))
    {
     do
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), bool(bvec3(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(injectionSwitch.x > injectionSwitch.y, false))))), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y)))), false || (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y, true && (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(fma(-7.4, exp2(-9.0), 85.61)) : injectionSwitch.y)))))))))))) || false), false, false))), false, false), bvec3(bvec3(bvec3(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0), injectionSwitch.y)))), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, false))), false, false))))))))
          barrier();
        }
       do
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           else
            {
            }
           if(_GLF_DEAD(false))
            barrier();
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x > injectionSwitch.y), ((_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x > injectionSwitch.y)) && true))));
      }
     while(_GLF_WRAPPED_LOOP(false));
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         do
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), injectionSwitch)).y, min(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), injectionSwitch)).y, _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), injectionSwitch)).y))))))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
            }
           else
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), true && (! (_GLF_DEAD(false)))))))))
              {
               do
                {
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x < injectionSwitch.y), (! (injectionSwitch.x < injectionSwitch.y)) || false)))))))
                  {
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                      }
                     else
                      {
                       if(_GLF_DEAD(false))
                        barrier();
                      }
                    }
                  }
                 else
                  {
                  }
                 barrier();
                 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false)))))
                  barrier();
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), _GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))) || (_GLF_WRAPPED_IF_FALSE(false))))
              {
              }
             else
              {
               do
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, true && (false))))), ! (! (false)))))
                  barrier();
                 barrier();
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(false))
                barrier();
              }
             else
              {
              }
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, false || (injectionSwitch.x < injectionSwitch.y))))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(_GLF_IDENTITY(dot(vec3(6830.6754, -5.8, 1889.7113), vec3(-2595.2372, -93.53, -5.5)), min(dot(vec3(6830.6754, -5.8, 1889.7113), vec3(-2595.2372, -93.53, -5.5)), dot(vec3(6830.6754, -5.8, 1889.7113), vec3(-2595.2372, -93.53, -5.5))))))) > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))))))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
      }
     else
      {
      }
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (false)))))
      {
      }
     else
      {
       barrier();
      }
     if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_DEAD(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(false, bool(bool(false)))))))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
        }
       else
        {
        }
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       for(int _injected_loop_counter = _GLF_IDENTITY(0, _GLF_IDENTITY(int(ivec3(0, 1, 1)), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(int(ivec3(0, 1, 1)), int(_GLF_ZERO(0.0, injectionSwitch.x)) + _GLF_IDENTITY((int(ivec3(0, 1, 1))), 0 ^ ((int(ivec3(0, 1, 1))))))), ~ (~ (~ (_GLF_IDENTITY(int(ivec3(_GLF_IDENTITY(0, 0 ^ (0)), 1, 1)), _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), ~ (~ (int(_GLF_ZERO(0.0, injectionSwitch.x))))) + (int(ivec3(0, 1, 1))))))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), clamp(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(_GLF_IDENTITY(1.0, mix(float(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, (1.0) * 1.0)) * 1.0)), float(_GLF_FUZZED(2.8)), bool(_GLF_IDENTITY(false, (false) && true)))), injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y))))); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bvec4(false, true, false, false)))))
            {
            }
           else
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 if(_GLF_DEAD(false))
                  barrier();
                }
              }
            }
           barrier();
          }
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
          }
        }
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, false, false, false)), false || (bool(bvec4(false, false, false, false)))))));
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))), false || (_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false)))))))))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
       else
        {
        }
      }
    }
   if(_GLF_DEAD(false))
    {
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)))) > _GLF_IDENTITY(injectionSwitch.y, 0.0 + (injectionSwitch.y))))))
  barrier();
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(_GLF_IDENTITY((0 | (0 >> _GLF_IDENTITY(int(7), int(7)))), ((0 | (_GLF_IDENTITY(0, (0) | 0) >> _GLF_IDENTITY(_GLF_IDENTITY(int(7), int(7)), (true ? _GLF_IDENTITY(int(7), int(7)) : _GLF_FUZZED(_injected_loop_counter)))))) | (_GLF_IDENTITY((0 | (0 >> _GLF_IDENTITY(int(7), int(7)))), ((0 | (0 >> _GLF_IDENTITY(int(7), int(7))))) + int(_GLF_ZERO(0.0, injectionSwitch.x))))), (_GLF_IDENTITY(_GLF_IDENTITY((0 | (0 >> _GLF_IDENTITY(int(7), int(7)))), ((0 | (0 >> _GLF_IDENTITY(int(7), int(7))))) | ((0 | (0 >> _GLF_IDENTITY(int(7), int(7)))))), clamp(_GLF_IDENTITY((0 | (0 >> _GLF_IDENTITY(int(7), int(7)))), ((0 | (0 >> _GLF_IDENTITY(int(7), int(7))))) | ((0 | (0 >> _GLF_IDENTITY(int(7), int(7)))))), _GLF_IDENTITY((0 | (0 >> _GLF_IDENTITY(int(7), int(7)))), ((0 | (0 >> _GLF_IDENTITY(int(7), int(7))))) | ((0 | (0 >> _GLF_IDENTITY(int(7), int(7)))))), _GLF_IDENTITY((0 | (0 >> _GLF_IDENTITY(int(7), int(7)))), ((0 | (0 >> _GLF_IDENTITY(int(7), int(7))))) | ((_GLF_IDENTITY(0 | (0 >> _GLF_IDENTITY(int(7), int(7))), min(_GLF_IDENTITY(0 | (0 >> _GLF_IDENTITY(int(7), int(7))), max(0 | (0 >> _GLF_IDENTITY(int(7), int(7))), 0 | (0 >> _GLF_IDENTITY(int(7), int(7))))), 0 | (0 >> _GLF_IDENTITY(int(7), int(7))))))))))) >> 0)); _injected_loop_counter --)
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(_GLF_IDENTITY(vec2((injectionSwitch)[0], _GLF_FUZZED(-8740.9740)), min(vec2((injectionSwitch)[0], _GLF_FUZZED(-8740.9740)), _GLF_IDENTITY(vec2((injectionSwitch)[0], _GLF_FUZZED(-8740.9740)), mix(vec2(_GLF_FUZZED(6644.0905), _GLF_FUZZED(7.0)), vec2((vec2((injectionSwitch)[0], _GLF_FUZZED(-8740.9740)))[0], (vec2((injectionSwitch)[0], _GLF_FUZZED(-8740.9740)))[1]), bvec2(true, true))))), vec2(_GLF_IDENTITY(_GLF_FUZZED(9.3), (_GLF_IDENTITY(_GLF_FUZZED(9.3), (false ? _GLF_FUZZED(7.2) : _GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(9.3), clamp(_GLF_FUZZED(9.3), _GLF_FUZZED(9.3), _GLF_FUZZED(9.3))), min(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(9.3), clamp(_GLF_FUZZED(9.3), _GLF_FUZZED(9.3), _GLF_FUZZED(9.3))), mix(float(_GLF_IDENTITY(_GLF_FUZZED(9.3), clamp(_GLF_FUZZED(9.3), _GLF_FUZZED(9.3), _GLF_FUZZED(9.3)))), float(_GLF_FUZZED(9.8)), bool(false))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(9.3), clamp(_GLF_FUZZED(9.3), _GLF_FUZZED(9.3), _GLF_FUZZED(9.3))), _GLF_IDENTITY(float(mat3x2(_GLF_IDENTITY(_GLF_FUZZED(9.3), clamp(_GLF_FUZZED(9.3), _GLF_FUZZED(9.3), _GLF_FUZZED(9.3))), 0.0, 0.0, 0.0, 0.0, 1.0)), 1.0 * (float(mat3x2(_GLF_IDENTITY(_GLF_FUZZED(9.3), clamp(_GLF_FUZZED(9.3), _GLF_FUZZED(9.3), _GLF_FUZZED(9.3))), 0.0, 0.0, 0.0, 0.0, 1.0)))))))))) / 1.0), (injectionSwitch)[1]), bvec2(false, true))).x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0))))))))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           do
            {
             if(_GLF_DEAD(false))
              barrier();
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
              {
               if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x > injectionSwitch.y)))))))
                {
                }
               else
                {
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                  {
                   barrier();
                  }
                 else
                  {
                  }
                }
              }
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec4(false, true, true, false))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(10.88), _GLF_FUZZED(-107.552)), bvec2(false, false))).y))));
          }
         else
          {
          }
         if(_GLF_DEAD(false))
          barrier();
        }
      }
    }
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = _GLF_IDENTITY(gl_NumWorkGroups.x, _GLF_IDENTITY(uint(uvec3(gl_NumWorkGroups.x, 1u, uint(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch))) + sin(vec2(0.0, 0.0))).y)))), (uint(uvec3(_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uvec3(0u, 0u, 0u), ~ (~ (_GLF_IDENTITY(uvec3(0u, 0u, 0u), (uvec3(0u, 0u, 0u)) | (uvec3(0u, 0u, 0u)))))) ^ (gl_NumWorkGroups), min(uvec3(0u, 0u, 0u) ^ (gl_NumWorkGroups), uvec3(0u, 0u, 0u) ^ (gl_NumWorkGroups))), min(_GLF_IDENTITY(_GLF_IDENTITY(uvec3(0u, 0u, 0u) ^ (gl_NumWorkGroups), min(uvec3(0u, 0u, 0u) ^ (gl_NumWorkGroups), uvec3(0u, 0u, 0u) ^ (gl_NumWorkGroups))), min(_GLF_IDENTITY(_GLF_IDENTITY(uvec3(0u, 0u, 0u) ^ (gl_NumWorkGroups), min(uvec3(0u, 0u, 0u) ^ (gl_NumWorkGroups), uvec3(0u, 0u, 0u) ^ (gl_NumWorkGroups))), max(_GLF_IDENTITY(uvec3(0u, 0u, 0u) ^ (gl_NumWorkGroups), min(uvec3(0u, 0u, 0u) ^ (gl_NumWorkGroups), uvec3(0u, 0u, 0u) ^ (gl_NumWorkGroups))), _GLF_IDENTITY(_GLF_IDENTITY(uvec3(0u, 0u, 0u) ^ (gl_NumWorkGroups), min(uvec3(0u, 0u, 0u) ^ (gl_NumWorkGroups), uvec3(0u, 0u, 0u) ^ (gl_NumWorkGroups))), (_GLF_IDENTITY(uvec3(0u, 0u, 0u) ^ (gl_NumWorkGroups), min(uvec3(0u, 0u, 0u) ^ (gl_NumWorkGroups), uvec3(0u, 0u, 0u) ^ (gl_NumWorkGroups)))) | (_GLF_IDENTITY(uvec3(0u, 0u, 0u) ^ (gl_NumWorkGroups), min(uvec3(0u, 0u, 0u) ^ (gl_NumWorkGroups), uvec3(0u, 0u, 0u) ^ (gl_NumWorkGroups))))))), _GLF_IDENTITY(uvec3(0u, 0u, 0u) ^ (_GLF_IDENTITY(gl_NumWorkGroups, uvec3(0u, 0u, 0u) ^ (gl_NumWorkGroups))), min(uvec3(0u, 0u, 0u) ^ (gl_NumWorkGroups), uvec3(0u, 0u, 0u) ^ (gl_NumWorkGroups))))), _GLF_IDENTITY(uvec3(0u, 0u, 0u) ^ (gl_NumWorkGroups), min(_GLF_IDENTITY(uvec3(0u, 0u, 0u), max(uvec3(0u, 0u, 0u), uvec3(0u, 0u, 0u))) ^ (gl_NumWorkGroups), uvec3(0u, 0u, 0u) ^ (gl_NumWorkGroups)))))).x, (_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uvec3(0u, 0u, 0u), ~ (~ (_GLF_IDENTITY(uvec3(0u, 0u, 0u), (uvec3(0u, 0u, 0u)) | (uvec3(0u, 0u, 0u)))))) ^ (gl_NumWorkGroups), min(uvec3(0u, 0u, 0u) ^ (gl_NumWorkGroups), uvec3(0u, 0u, 0u) ^ (gl_NumWorkGroups))), min(_GLF_IDENTITY(_GLF_IDENTITY(uvec3(0u, 0u, 0u) ^ (gl_NumWorkGroups), min(uvec3(0u, 0u, 0u) ^ (gl_NumWorkGroups), uvec3(0u, 0u, 0u) ^ (gl_NumWorkGroups))), min(_GLF_IDENTITY(_GLF_IDENTITY(uvec3(0u, 0u, 0u) ^ (gl_NumWorkGroups), min(uvec3(0u, 0u, 0u) ^ (gl_NumWorkGroups), uvec3(0u, 0u, 0u) ^ (gl_NumWorkGroups))), max(_GLF_IDENTITY(uvec3(0u, 0u, 0u) ^ (gl_NumWorkGroups), min(uvec3(0u, 0u, 0u) ^ (gl_NumWorkGroups), uvec3(0u, 0u, 0u) ^ (gl_NumWorkGroups))), _GLF_IDENTITY(_GLF_IDENTITY(uvec3(0u, 0u, 0u) ^ (gl_NumWorkGroups), min(uvec3(0u, 0u, 0u) ^ (gl_NumWorkGroups), uvec3(0u, 0u, 0u) ^ (gl_NumWorkGroups))), (_GLF_IDENTITY(uvec3(0u, 0u, 0u) ^ (gl_NumWorkGroups), min(uvec3(0u, 0u, 0u) ^ (gl_NumWorkGroups), uvec3(0u, 0u, 0u) ^ (gl_NumWorkGroups)))) | (_GLF_IDENTITY(uvec3(0u, 0u, 0u) ^ (gl_NumWorkGroups), min(uvec3(0u, 0u, 0u) ^ (gl_NumWorkGroups), uvec3(0u, 0u, 0u) ^ (gl_NumWorkGroups))))))), _GLF_IDENTITY(uvec3(0u, 0u, 0u) ^ (_GLF_IDENTITY(gl_NumWorkGroups, uvec3(0u, 0u, 0u) ^ (gl_NumWorkGroups))), min(uvec3(0u, 0u, 0u) ^ (gl_NumWorkGroups), uvec3(0u, 0u, 0u) ^ (gl_NumWorkGroups))))), _GLF_IDENTITY(uvec3(0u, 0u, 0u) ^ (gl_NumWorkGroups), min(_GLF_IDENTITY(uvec3(0u, 0u, 0u), max(uvec3(0u, 0u, 0u), uvec3(0u, 0u, 0u))) ^ (gl_NumWorkGroups), uvec3(0u, 0u, 0u) ^ (gl_NumWorkGroups)))))).x, (_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uvec3(0u, 0u, 0u), ~ (~ (_GLF_IDENTITY(uvec3(0u, 0u, 0u), (uvec3(0u, 0u, 0u)) | (uvec3(0u, 0u, 0u)))))) ^ (gl_NumWorkGroups), min(uvec3(0u, 0u, 0u) ^ (gl_NumWorkGroups), uvec3(0u, 0u, 0u) ^ (gl_NumWorkGroups))), min(_GLF_IDENTITY(_GLF_IDENTITY(uvec3(0u, 0u, 0u) ^ (gl_NumWorkGroups), min(uvec3(0u, 0u, 0u) ^ (gl_NumWorkGroups), uvec3(0u, 0u, 0u) ^ (gl_NumWorkGroups))), min(_GLF_IDENTITY(_GLF_IDENTITY(uvec3(0u, 0u, 0u) ^ (gl_NumWorkGroups), min(uvec3(0u, 0u, 0u) ^ (gl_NumWorkGroups), uvec3(0u, 0u, 0u) ^ (gl_NumWorkGroups))), max(_GLF_IDENTITY(uvec3(0u, 0u, 0u) ^ (gl_NumWorkGroups), min(uvec3(0u, 0u, 0u) ^ (gl_NumWorkGroups), uvec3(0u, 0u, 0u) ^ (gl_NumWorkGroups))), _GLF_IDENTITY(_GLF_IDENTITY(uvec3(0u, 0u, 0u) ^ (gl_NumWorkGroups), min(uvec3(0u, 0u, 0u) ^ (gl_NumWorkGroups), uvec3(0u, 0u, 0u) ^ (gl_NumWorkGroups))), (_GLF_IDENTITY(uvec3(0u, 0u, 0u) ^ (gl_NumWorkGroups), min(uvec3(0u, 0u, 0u) ^ (gl_NumWorkGroups), uvec3(0u, 0u, 0u) ^ (gl_NumWorkGroups)))) | (_GLF_IDENTITY(uvec3(0u, 0u, 0u) ^ (gl_NumWorkGroups), min(uvec3(0u, 0u, 0u) ^ (gl_NumWorkGroups), uvec3(0u, 0u, 0u) ^ (gl_NumWorkGroups))))))), _GLF_IDENTITY(uvec3(0u, 0u, 0u) ^ (_GLF_IDENTITY(gl_NumWorkGroups, uvec3(0u, 0u, 0u) ^ (gl_NumWorkGroups))), min(uvec3(0u, 0u, 0u) ^ (gl_NumWorkGroups), uvec3(0u, 0u, 0u) ^ (gl_NumWorkGroups))))), _GLF_IDENTITY(uvec3(0u, 0u, 0u) ^ (gl_NumWorkGroups), min(_GLF_IDENTITY(uvec3(0u, 0u, 0u), max(uvec3(0u, 0u, 0u), uvec3(0u, 0u, 0u))) ^ (gl_NumWorkGroups), uvec3(0u, 0u, 0u) ^ (gl_NumWorkGroups)))))).x, (true ? _GLF_IDENTITY(gl_NumWorkGroups, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uvec3(0u, 0u, 0u), ~ (~ (_GLF_IDENTITY(uvec3(0u, 0u, 0u), (uvec3(0u, 0u, 0u)) | (uvec3(0u, 0u, 0u)))))) ^ (gl_NumWorkGroups), min(uvec3(0u, 0u, 0u) ^ (gl_NumWorkGroups), uvec3(0u, 0u, 0u) ^ (gl_NumWorkGroups))), min(_GLF_IDENTITY(_GLF_IDENTITY(uvec3(0u, 0u, 0u) ^ (gl_NumWorkGroups), min(uvec3(0u, 0u, 0u) ^ (gl_NumWorkGroups), uvec3(0u, 0u, 0u) ^ (gl_NumWorkGroups))), min(_GLF_IDENTITY(_GLF_IDENTITY(uvec3(0u, 0u, 0u) ^ (gl_NumWorkGroups), min(uvec3(0u, 0u, 0u) ^ (gl_NumWorkGroups), uvec3(0u, 0u, 0u) ^ (gl_NumWorkGroups))), max(_GLF_IDENTITY(uvec3(0u, 0u, 0u) ^ (gl_NumWorkGroups), min(uvec3(0u, 0u, 0u) ^ (gl_NumWorkGroups), uvec3(0u, 0u, 0u) ^ (gl_NumWorkGroups))), _GLF_IDENTITY(_GLF_IDENTITY(uvec3(0u, 0u, 0u) ^ (gl_NumWorkGroups), min(uvec3(0u, 0u, 0u) ^ (gl_NumWorkGroups), uvec3(0u, 0u, 0u) ^ (gl_NumWorkGroups))), (_GLF_IDENTITY(uvec3(0u, 0u, 0u) ^ (gl_NumWorkGroups), min(uvec3(0u, 0u, 0u) ^ (gl_NumWorkGroups), uvec3(0u, 0u, 0u) ^ (gl_NumWorkGroups)))) | (_GLF_IDENTITY(uvec3(0u, 0u, 0u) ^ (gl_NumWorkGroups), min(uvec3(0u, 0u, 0u) ^ (gl_NumWorkGroups), uvec3(0u, 0u, 0u) ^ (gl_NumWorkGroups))))))), _GLF_IDENTITY(uvec3(0u, 0u, 0u) ^ (_GLF_IDENTITY(gl_NumWorkGroups, uvec3(0u, 0u, 0u) ^ (gl_NumWorkGroups))), min(uvec3(0u, 0u, 0u) ^ (gl_NumWorkGroups), uvec3(0u, 0u, 0u) ^ (gl_NumWorkGroups))))), _GLF_IDENTITY(uvec3(0u, 0u, 0u) ^ (gl_NumWorkGroups), min(_GLF_IDENTITY(uvec3(0u, 0u, 0u), max(uvec3(0u, 0u, 0u), uvec3(0u, 0u, 0u))) ^ (gl_NumWorkGroups), uvec3(0u, 0u, 0u) ^ (gl_NumWorkGroups)))))).x : _GLF_FUZZED(subgroup_size)))) / 1u)) * 1u), _GLF_IDENTITY(_GLF_IDENTITY(1u, ~ (~ (_GLF_IDENTITY(1u, uint(uvec3(1u, 0u, 1u)))))), max(_GLF_IDENTITY(1u, ~ (~ (_GLF_IDENTITY(1u, uint(uvec3(1u, _GLF_IDENTITY(0u, max(0u, 0u)), 1u)))))), _GLF_IDENTITY(1u, ~ _GLF_IDENTITY((~ (_GLF_IDENTITY(1u, uint(uvec3(1u, 0u, _GLF_IDENTITY(1u, clamp(_GLF_IDENTITY(1u, uint(uvec3(1u, _GLF_IDENTITY(0u, 0u | (0u)), 0u))), 1u, 1u))))))), min((~ (_GLF_IDENTITY(1u, uint(uvec3(1u, 0u, _GLF_IDENTITY(1u, clamp(_GLF_IDENTITY(1u, _GLF_IDENTITY(uint(uvec3(1u, 0u, 0u)), max(uint(uvec3(1u, 0u, 0u)), uint(uvec3(1u, 0u, 0u))))), 1u, 1u))))))), (~ (_GLF_IDENTITY(1u, uint(uvec3(1u, 0u, _GLF_IDENTITY(1u, clamp(_GLF_IDENTITY(1u, uint(uvec3(1u, 0u, 0u))), 1u, 1u)))))))))))), uint(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY(vec2(mat3x4(injectionSwitch, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0)), mix(vec2((vec2(mat3x4(injectionSwitch, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0)))[0], _GLF_FUZZED(-50.98)), vec2(_GLF_FUZZED(229.012), _GLF_IDENTITY((vec2(mat3x4(injectionSwitch, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0))), ((vec2(mat3x4(injectionSwitch, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0)))) * vec2(1.0, 1.0))[1]), bvec2(false, true))), min(_GLF_IDENTITY(vec2(mat3x4(injectionSwitch, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0)), mix(vec2((vec2(mat3x4(injectionSwitch, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0)))[0], _GLF_FUZZED(-50.98)), vec2(_GLF_FUZZED(229.012), _GLF_IDENTITY((vec2(mat3x4(injectionSwitch, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0))), ((vec2(mat3x4(injectionSwitch, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0)))) * vec2(1.0, 1.0))[1]), bvec2(false, true))), _GLF_IDENTITY(vec2(mat3x4(injectionSwitch, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0)), mix(vec2((vec2(mat3x4(injectionSwitch, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0)))[0], _GLF_FUZZED(-50.98)), vec2(_GLF_FUZZED(229.012), _GLF_IDENTITY((vec2(mat3x4(injectionSwitch, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0))), ((vec2(mat3x4(injectionSwitch, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0)))) * vec2(1.0, 1.0))[1]), bvec2(false, true)))))).y))))) | _GLF_IDENTITY((uint(uvec3(gl_NumWorkGroups.x, 1u, _GLF_IDENTITY(uint(_GLF_ONE(1.0, injectionSwitch.y)), min(uint(_GLF_ONE(1.0, injectionSwitch.y)), uint(_GLF_ONE(1.0, injectionSwitch.y))))))), ((uint(uvec3(gl_NumWorkGroups.x, 1u, _GLF_IDENTITY(uint(_GLF_ONE(1.0, injectionSwitch.y)), min(uint(_GLF_ONE(1.0, injectionSwitch.y)), uint(_GLF_ONE(1.0, injectionSwitch.y)))))))) / 1u)));
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       barrier();
      }
    }
  }
 else
  {
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 else
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, false)))))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))), _GLF_IDENTITY(true, bool(bvec4(true, false, true, false))) && (_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)))), (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))) && true)))))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, min(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) | (0 >> _GLF_IDENTITY(int(2), int(2)))), _injected_loop_counter)) != 0); _injected_loop_counter --)
        {
         barrier();
        }
      }
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
      }
     else
      {
      }
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y))))
    barrier();
  }
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y)))))))
  barrier();
 for(int _injected_loop_counter = _GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, int(ivec3(0, 1, 1))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, 1 * (_GLF_IDENTITY(1, (1) + 0)))); _injected_loop_counter ++)
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, ! (! (false)))))))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(false), _GLF_IDENTITY((_GLF_IDENTITY(bool(false), bool(_GLF_IDENTITY(bvec3(bool(false), _GLF_IDENTITY(false, (false) || false), true), bvec3(bvec3(_GLF_IDENTITY(bvec3(bool(false), _GLF_IDENTITY(false, (false) || false), true), bvec3(bvec3(bvec3(bool(false), _GLF_IDENTITY(false, (false) || false), true)))))))))) && true, bool(bvec4((bool(false)) && true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))))), (bool(_GLF_IDENTITY(bool(false), (bool(false)) && _GLF_IDENTITY(true, bool(bool(true)))))) && true))))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       barrier();
      }
    }
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
      barrier();
     if(_GLF_DEAD(false))
      {
       do
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, false || (false))));
       if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, false))), (_GLF_DEAD(false)) && true), _GLF_IDENTITY(false, false || (false))))))))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(true, bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(true, _GLF_IDENTITY(true, ! (! (true))), _GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(true, ! (! (true))), true, true)), ! (! (bool(bvec3(_GLF_IDENTITY(true, ! (! (true))), true, true))))))), bvec3(bvec3(bvec3(true, true, true)))), bvec3(bvec4(bvec3(true, true, true), true))))), false || (true))))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
               if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bool(bvec3(! (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false, true))))))
                {
                }
               else
                {
                 if(_GLF_DEAD(false))
                  barrier();
                }
              }
             else
              {
               do
                {
                 if(_GLF_DEAD(false))
                  barrier();
                }
               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                  {
                   barrier();
                  }
                }
               if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(false, true, _GLF_IDENTITY(true, (true) && true), false))), bool(bvec3(false, false, _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x > injectionSwitch.y)))))))
                {
                }
               else
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                  }
                 else
                  {
                  }
                }
               if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y)), bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, _GLF_IDENTITY(true, true && (true))), bvec3(bvec4(bvec3(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(4327.7699))), injectionSwitch.y), clamp(clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(4327.7699))), injectionSwitch.y), clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(4327.7699))), injectionSwitch.y), _GLF_IDENTITY(clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(4327.7699))), injectionSwitch.y), float(vec2(clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(4327.7699))), injectionSwitch.y), 1.0))))))))) && true), false, _GLF_IDENTITY(true, true && (true))), false))), bvec3(bvec3(bvec3(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, false))), false, true))))))))
                barrier();
              }
            }
          }
         else
          {
          }
        }
       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(false, (false) || false), true, false, true)), (bool(bvec4(_GLF_IDENTITY(false, (false) || false), _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, false || (true))), bool(bvec2(! (_GLF_IDENTITY(true, false || (true))), true))))), false, true))) || false)))))))
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
         do
          {
           if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, float(mat4(injectionSwitch.y, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, determinant(mat2(0.0, 0.0, 0.0, 0.0)), 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0)))) - _GLF_IDENTITY(0.0, float(_GLF_IDENTITY(mat3(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, _GLF_IDENTITY(0.0, min(0.0, 0.0)))), 0.0, cos(0.0), 1.0, 0.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, 0.0))), 0.0, abs(1.0), 1.0), (mat3(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, _GLF_IDENTITY(0.0, min(0.0, 0.0)))), 0.0, cos(0.0), 1.0, 0.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, 0.0))), 0.0, abs(1.0), 1.0)) / mat3(1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0)))))), ! (! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, float(mat4(injectionSwitch.y, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, determinant(mat2(0.0, 0.0, 0.0, 0.0)), 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0)))) - _GLF_IDENTITY(0.0, float(_GLF_IDENTITY(mat3(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, _GLF_IDENTITY(0.0, min(0.0, 0.0)))), 0.0, cos(0.0), 1.0, 0.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, 0.0))), 0.0, abs(1.0), 1.0), (mat3(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, _GLF_IDENTITY(0.0, min(0.0, 0.0)))), 0.0, cos(0.0), 1.0, 0.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, 0.0))), 0.0, abs(1.0), 1.0)) / mat3(1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0))))))))))))
            barrier();
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(936.054)), bool(false))), injectionSwitch.y))) / 1.0))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! ((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) && true), false || (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! ((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) && true), bool(bvec2(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! ((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) && true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))), true, true), bvec3(bvec4(bvec3(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(mat2(injectionSwitch, 0.0, 1.0))))).x > injectionSwitch.y))) && true), true, true), false)))))));
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (false))))))) || false), (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), int(int(int(0)))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          barrier();
        }
      }
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
        {
         barrier();
        }
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
  }
 else
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < 1, bool(bvec3(_injected_loop_counter < 1, false, false)))); _injected_loop_counter ++)
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
      }
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(981.094)), float(injectionSwitch.y), bool(true)))))))
      {
      }
     else
      {
       barrier();
      }
    }
   else
    {
    }
  }
 uint workgroup_base = _GLF_IDENTITY(workgroup_size * workgroup_id, (workgroup_size * workgroup_id) | _GLF_IDENTITY(_GLF_IDENTITY((workgroup_size * workgroup_id), ((workgroup_size * workgroup_id)) | 0u), min(_GLF_IDENTITY((workgroup_size * workgroup_id), ((workgroup_size * workgroup_id)) | 0u), _GLF_IDENTITY(_GLF_IDENTITY((workgroup_size * workgroup_id), ((workgroup_size * workgroup_id)) | 0u), (_GLF_IDENTITY(_GLF_IDENTITY((workgroup_size * workgroup_id), 0u ^ ((workgroup_size * workgroup_id))), _GLF_IDENTITY(((workgroup_size * workgroup_id)) | 0u, (((workgroup_size * workgroup_id)) | 0u) - 0u))) | (_GLF_IDENTITY((workgroup_size * workgroup_id), _GLF_IDENTITY(((workgroup_size * workgroup_id)) | 0u, (_GLF_IDENTITY(((workgroup_size * workgroup_id)) | 0u, (((workgroup_size * workgroup_id)) | 0u) >> 0u)) / 1u)))))));
 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), ! (! (_GLF_WRAPPED_IF_TRUE(true)))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       barrier();
      }
     else
      {
      }
    }
   do
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 | 0)); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, ! (! (true)))))))
        {
         barrier();
        }
       else
        {
        }
      }
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), false || _GLF_IDENTITY((! (false)), ! _GLF_IDENTITY((! (_GLF_IDENTITY((! (false)), false || ((! (false)))))), ! (! ((! (_GLF_IDENTITY((! (false)), false || ((! (false)))))))))))))))
    barrier();
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  barrier();
 uint subgroup_base = _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id)), (_GLF_IDENTITY(subgroup_id, (true ? subgroup_id : _GLF_FUZZED(num_workgroup)))) | (subgroup_id)) * subgroup_size;
 if(_GLF_DEAD(false))
  barrier();
 uint virtual_gid = workgroup_base + subgroup_base + subgroup_local_id;
 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(true, ! (! (true))) && (false))))
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), float(mat3(_GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0, 0.0, _GLF_IDENTITY(dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0)), dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0))), _GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0, 0.0))))); _injected_loop_counter --)
    {
     barrier();
    }
  }
 uint next_virtual_gid = workgroup_base + _GLF_IDENTITY(subgroup_base, clamp(subgroup_base, subgroup_base, subgroup_base)) + (_GLF_IDENTITY((subgroup_local_id + 1), 0u | ((subgroup_local_id + _GLF_IDENTITY(1, (1) ^ 0)))) % _GLF_IDENTITY(subgroup_size, 0u | (subgroup_size)));
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      barrier();
     do
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(vec4(3.7, -5.1, 1.7, 0.7).x), (injectionSwitch)[1]), vec2(_GLF_IDENTITY((injectionSwitch)[0], max((injectionSwitch)[0], (injectionSwitch)[0])), _GLF_FUZZED(_GLF_IDENTITY(vec3(8.2, 7316.5636, 4.0).r, max(vec3(8.2, 7316.5636, 4.0).r, vec3(8.2, 7316.5636, 4.0).r)))), bvec2(true, false))).y, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(_GLF_IDENTITY(! (! (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y)), bool(bvec4(_GLF_IDENTITY(! (! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y, ! (! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y, bool(bvec2(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y, false)))))))), _GLF_IDENTITY(bool(bvec2(! (! (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0))), false)), true && (bool(bvec2(! (! (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0))), false))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))), ! (! (_GLF_IDENTITY(! (! (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y)), bool(bvec4(_GLF_IDENTITY(! (! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y, ! (! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y, bool(bvec2(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y, false)))))))), _GLF_IDENTITY(bool(bvec2(! (! (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + abs(0.0)))) > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0))), false)), true && (bool(bvec2(! (! (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0))), false))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false)))))))) || false, _GLF_IDENTITY(_GLF_IDENTITY(bool(bool((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(! (! (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y)), bool(bvec4(_GLF_IDENTITY(! (! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y, ! (! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y, bool(bvec2(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y, false)))))))), _GLF_IDENTITY(bool(bvec2(! (! (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0))), false)), true && (bool(bvec2(! (! (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0))), false))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))))) || false)), (bool(bool((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(! (! (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y)), bool(bvec4(_GLF_IDENTITY(! (! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y, ! (! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y, bool(bvec2(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y, false)))))))), _GLF_IDENTITY(bool(bvec2(! (! (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0))), false)), true && (bool(bvec2(! (! (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0))), false))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))))) || false))) || false), ! (! (_GLF_IDENTITY(bool(bool((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(! (! (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y)), bool(bvec4(_GLF_IDENTITY(! (! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y, ! (! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y, bool(bvec2(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y, false)))))))), _GLF_IDENTITY(bool(bvec2(! (! (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0))), false)), _GLF_IDENTITY(true && (bool(bvec2(! (! (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0))), false))), true && (true && (bool(bvec2(! (! (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)))).x)) > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0))), false))))))), _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true && (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)))), false))))) || false)), (bool(_GLF_IDENTITY(bool((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(! (! (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y)), bool(bvec4(_GLF_IDENTITY(! (! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y, ! (! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y, bool(bvec2(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y, false)))))))), _GLF_IDENTITY(bool(bvec2(! (! (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0))), false)), true && (bool(bvec2(! (! (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY((injectionSwitch.y) / 1.0, (true ? (injectionSwitch.y) / 1.0 : _GLF_FUZZED(-7.8)))))), false))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))))) || false), bool(bvec3(bool((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(! (! (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y)), bool(bvec4(_GLF_IDENTITY(! (! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y, ! (! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y, bool(bvec2(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y, false)))))))), _GLF_IDENTITY(bool(bvec2(! (! (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0))), false)), true && (bool(bvec2(! (! (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY((injectionSwitch.y) / 1.0, (true ? (injectionSwitch.y) / 1.0 : _GLF_FUZZED(-7.8)))))), false))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))))) || false), true, true))))) || false))))))))))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         do
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (! (injectionSwitch.x < injectionSwitch.y))))))))))
          {
           barrier();
          }
         else
          {
          }
        }
       for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 ^ 1)); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          barrier();
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 uint read = atomicLoad(_GLF_IDENTITY(buf[virtual_gid], max(buf[virtual_gid], buf[virtual_gid])), 4, 64, 2);
 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)))
  {
  }
 else
  {
   if((subgroup_local_id % 2) == 0)
    {
     atomicStore(buf[_GLF_IDENTITY(next_virtual_gid, (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(next_virtual_gid, max(next_virtual_gid, next_virtual_gid)) : _GLF_FUZZED(workgroup_size), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(next_virtual_gid, max(next_virtual_gid, next_virtual_gid)) : _GLF_FUZZED(workgroup_size)) >> 0u)))], uint(_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, _GLF_IDENTITY((1) * 1, max((1) * 1, _GLF_IDENTITY((1) * 1, 0 | (_GLF_IDENTITY((1) * 1, ~ (~ ((1) * 1))))))))) / 1), _GLF_IDENTITY(1, ~ (_GLF_IDENTITY(~ (1), min(~ (1), _GLF_IDENTITY(~ (1), 0 ^ (~ (1))))))), 1))), 4, 64, 4);
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, float(mat3x4(injectionSwitch.y, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0))), injectionSwitch.y, injectionSwitch.y)), clamp(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, float(mat3x4(injectionSwitch.y, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0))), injectionSwitch.y, injectionSwitch.y)), (false ? _GLF_FUZZED(4940.1371) : _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, float(mat3x4(injectionSwitch.y, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0))), injectionSwitch.y, injectionSwitch.y)), float(vec3(_GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, float(mat3x4(injectionSwitch.y, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0))), injectionSwitch.y, injectionSwitch.y)), 0.0, 1.0))))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, float(mat3x4(injectionSwitch.y, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0))), injectionSwitch.y, injectionSwitch.y)), 0.0 + (_GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, float(mat3x4(injectionSwitch.y, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0))), injectionSwitch.y, injectionSwitch.y)))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, float(mat3x4(injectionSwitch.y, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0))), injectionSwitch.y, injectionSwitch.y)), (true ? _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, float(mat3x4(injectionSwitch.y, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0))), injectionSwitch.y, injectionSwitch.y)) : _GLF_FUZZED(4895.4574))))) : _GLF_FUZZED(clamp(-2.7, -9.1, -78.76))))))))
      barrier();
     if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), bool(_GLF_IDENTITY(bvec3(! (true), true, false), _GLF_IDENTITY(bvec3(bvec4(bvec3(! (true), true, false), true)), bvec3(bvec3(bvec3(bvec4(bvec3(! (true), true, false), true))))))))))), true && (_GLF_IDENTITY(! (_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), bool(bvec3(! (true), true, false)))))), false || (! (_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), bool(bvec3(! (true), true, false)))))))))))), (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x < injectionSwitch.y))), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x < injectionSwitch.y), ! (! ((_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x < injectionSwitch.y))))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x < injectionSwitch.y))), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x < injectionSwitch.y))), ! (! (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x < injectionSwitch.y)))))))))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(! (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x < injectionSwitch.y)))), _GLF_IDENTITY(true, false || (true))), bvec2(bvec2(bvec2(! (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x < injectionSwitch.y)))), true))))), bool(bvec3(bool(_GLF_IDENTITY(bvec2(! (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x < injectionSwitch.y)))), true), bvec2(bvec2(bvec2(! (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x < injectionSwitch.y)))), true))))), true, true)))))))), (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, false || (true)), _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (injectionSwitch.x < injectionSwitch.y) && true)))), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (injectionSwitch.x < injectionSwitch.y) && true)))), false || ((_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y) && true, true && (_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y) && true, (_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && ((injectionSwitch.x < injectionSwitch.y))) && true) || false))))))))), false || ((_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(_GLF_IDENTITY(23.98, min(23.98, 23.98))) : _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)))), _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x < injectionSwitch.y) && true, _GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(! (false), true && (! (false))))))) || _GLF_IDENTITY(((injectionSwitch.x < injectionSwitch.y) && true), bool(bvec3((_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y) && true, ! (! (_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), bool(_GLF_IDENTITY(bvec2((injectionSwitch.x < injectionSwitch.y), true), bvec2(bvec3(bvec2((injectionSwitch.x < injectionSwitch.y), true), true))))) && true)))), false, true))))))))))) && true, bool(bvec3((_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(2134.0990), _GLF_FUZZED(-4258.8950)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))))).x < injectionSwitch.y))), true && (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (injectionSwitch.x < injectionSwitch.y) && true)))), false || ((_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y) && true, true && (_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y) && true, (_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && ((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(_GLF_ONE(1.0, injectionSwitch.y))).y))) && true) || false))))))))), false || ((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(_GLF_IDENTITY(mat3x2(injectionSwitch, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 0.0), mat3x2(mat4x2(mat3x2(injectionSwitch, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 0.0))))), max(_GLF_IDENTITY(vec2(_GLF_IDENTITY(mat3x2(injectionSwitch, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 0.0), mat3x2(mat4x2(mat3x2(injectionSwitch, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 0.0))))), mat2(1.0) * (vec2(_GLF_IDENTITY(mat3x2(injectionSwitch, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 0.0), mat3x2(mat4x2(mat3x2(injectionSwitch, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 0.0))))))), vec2(_GLF_IDENTITY(mat3x2(injectionSwitch, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 0.0), mat3x2(mat4x2(mat3x2(injectionSwitch, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 0.0)))))))).x < injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(_GLF_IDENTITY(23.98, min(23.98, 23.98))) : injectionSwitch.y)), _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y) && true, _GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(_GLF_IDENTITY(! (false), ! (! (_GLF_IDENTITY(! (false), (! (false)) || false)))), true && (! (false))))))) || _GLF_IDENTITY((_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), false || ((injectionSwitch.x < injectionSwitch.y))) && true), bool(bvec3(_GLF_IDENTITY((_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y) && true, ! (! (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (! (injectionSwitch.x < injectionSwitch.y)))), bool(_GLF_IDENTITY(bvec2((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(_GLF_ONE(1.0, injectionSwitch.y))).y), true), bvec2(bvec3(bvec2(_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ((injectionSwitch.x < injectionSwitch.y)) || false), true), true))))) && true)))), ! (! ((_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y) && true, ! (! (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (! (injectionSwitch.x < injectionSwitch.y)))), bool(_GLF_IDENTITY(bvec2((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(_GLF_ONE(1.0, injectionSwitch.y))).y), true), bvec2(bvec3(bvec2(_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ((injectionSwitch.x < injectionSwitch.y)) || false), true), true))))) && true))))))), false, true))))))))))) && true, true, true))))))) || false))
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
            {
             if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, true && (false))))), ! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, true && (false)))))), true && (! (_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, true && (false)))))))))))
              barrier();
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))
                {
                 barrier();
                }
               else
                {
                }
              }
             else
              {
              }
            }
           barrier();
          }
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, exp(vec2(0.0, 0.0)) * (injectionSwitch)).x, max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, exp(vec2(0.0, _GLF_IDENTITY(0.0, float(vec3(0.0, 0.0, 0.0))))) * (injectionSwitch)).x, _GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat4x2(1.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 1.0, 1.0, 1.0, 1.0, 0.0, 1.0)), mix(float(_GLF_FUZZED(-17.10)), float(float(mat4x2(1.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 1.0, 1.0, 1.0, 1.0, 0.0, 1.0))), bool(true)))) * (_GLF_IDENTITY(injectionSwitch, exp(vec2(0.0, 0.0)) * (injectionSwitch)).x)), _GLF_IDENTITY(injectionSwitch, exp(vec2(0.0, 0.0)) * (injectionSwitch)).x)) > injectionSwitch.y))), _GLF_IDENTITY((_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false, bool(bool(_GLF_IDENTITY((_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y)))) || false, bool(bvec4((_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false, false, true, false))))))))
        {
         if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec3(_GLF_DEAD(false), true, _GLF_IDENTITY(true, bool(bvec2(true, false))))), (bool(bvec3(_GLF_DEAD(false), true, _GLF_IDENTITY(true, bool(bvec2(true, false)))))) && true)))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             barrier();
            }
          }
         barrier();
        }
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > (0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(7), int(7)), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(int(_GLF_IDENTITY(7, (_GLF_IDENTITY(7, _GLF_IDENTITY(int(int(7)), (true ? int(int(7)) : _GLF_FUZZED(-25782))))) + 0)), int(7))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(int(7), int(7))), (true ? ~ (_GLF_IDENTITY(int(7), int(7))) : _GLF_FUZZED(_injected_loop_counter)))), (~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(int(7), int(7))), (true ? ~ (_GLF_IDENTITY(int(7), int(7))) : _GLF_FUZZED(_injected_loop_counter))))) - 0)))))), (_GLF_IDENTITY(_injected_loop_counter > (0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(7), int(_GLF_IDENTITY(7, clamp(7, 7, 7)))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(int(7), int(7))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(int(7), int(7))), (true ? ~ (_GLF_IDENTITY(int(7), int(7))) : _GLF_FUZZED(_injected_loop_counter)))), (~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(int(7), int(7))), (true ? ~ (_GLF_IDENTITY(int(7), int(7))) : _GLF_FUZZED(_injected_loop_counter))))) - 0)))))), ! (! (_injected_loop_counter > (0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(7), int(7)), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(int(7), int(7))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(int(7), int(7))), (true ? ~ (_GLF_IDENTITY(int(7), int(7))) : _GLF_FUZZED(_injected_loop_counter)))), (~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (_GLF_IDENTITY(int(7), int(7))), (true ? ~ (_GLF_IDENTITY(int(7), int(7))) : _GLF_FUZZED(_injected_loop_counter))), (false ? _GLF_FUZZED((6122 / -16677)) : _GLF_IDENTITY(_GLF_IDENTITY(~ (_GLF_IDENTITY(int(7), int(7))), (true ? ~ (_GLF_IDENTITY(int(7), int(7))) : _GLF_FUZZED(_injected_loop_counter))), (_GLF_IDENTITY(~ (_GLF_IDENTITY(int(7), int(7))), (true ? ~ (_GLF_IDENTITY(int(7), int(7))) : _GLF_FUZZED(_injected_loop_counter)))) | 0))))) - 0)))))))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))); _injected_loop_counter --)
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) | (_injected_loop_counter)) != _GLF_IDENTITY(0, ~ (~ (0)))); _GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) - 0))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               barrier();
              }
             else
              {
              }
            }
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           else
            {
            }
          }
        }
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         for(int _injected_loop_counter = 0; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), bool(bvec3(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), false, false))); _injected_loop_counter ++)
          {
           atomicStore(buf[next_virtual_gid], uint(_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, (1) | (1)), 1, 1))), 4, 64, _GLF_IDENTITY(4, 0 + _GLF_IDENTITY(_GLF_IDENTITY((4), ~ (~ ((_GLF_IDENTITY(4, max(4, 4)))))), min(_GLF_IDENTITY((4), _GLF_IDENTITY(int(_GLF_IDENTITY(ivec2((4), 0), max(ivec2((4), 0), ivec2((4), 0)))), clamp(int(_GLF_IDENTITY(ivec2((4), 0), max(ivec2((4), 0), ivec2((4), 0)))), int(_GLF_IDENTITY(ivec2((4), 0), max(ivec2((4), 0), ivec2((4), 0)))), int(_GLF_IDENTITY(ivec2((4), 0), max(ivec2((4), 0), ivec2((4), 0))))))), (4)))));
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           barrier();
          }
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
        }
       else
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, false || _GLF_IDENTITY((false), true && (_GLF_IDENTITY((false), _GLF_IDENTITY(((false)), false || (_GLF_IDENTITY(((false)), false || (((false)))))) && true))))))
          barrier();
        }
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, true, true)))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * vec2(1.0, 1.0), vec2(_GLF_IDENTITY(vec3((injectionSwitch) * vec2(1.0, 1.0), 1.0), (true ? vec3((injectionSwitch) * vec2(1.0, 1.0), 1.0) : _GLF_FUZZED(vec3(-325.227, 91.15, -1.8))))))).x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) || false))
        {
        }
       else
        {
         barrier();
        }
      }
    }
  }
 do
  {
   if(_GLF_DEAD(false))
    {
     do
      {
       do
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, vec2(mat4x3(injectionSwitch, 0.0, _GLF_IDENTITY(0.0, min(0.0, 0.0)), 1.0, sqrt(1.0), length(vec2(0.0, 0.0)), cos(0.0), 0.0, 0.0, 1.0, 0.0))).x < injectionSwitch.y))))
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))))))
                  {
                  }
                 else
                  {
                   barrier();
                  }
                }
               if(_GLF_DEAD(false))
                barrier();
              }
             else
              {
              }
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(6), int(6)), (true ? 1 << _GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), (_GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), 0 ^ (_GLF_IDENTITY(int(6), int(6))))) ^ 0) : _GLF_FUZZED((- _injected_loop_counter))))) >> _GLF_IDENTITY(int(6), int(6)))); _injected_loop_counter ++)
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))
                barrier();
              }
             barrier();
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), ! (! (! (injectionSwitch.x > injectionSwitch.y))))))))));
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           barrier();
          }
        }
      }
     else
      {
       barrier();
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 do
  {
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec3(_GLF_IDENTITY(bvec2(false, true), _GLF_IDENTITY(bvec2(bvec4(bvec2(false, true), false, _GLF_IDENTITY(false, true && (false)))), bvec2(bvec4(bvec2(bvec4(bvec2(false, true), false, _GLF_IDENTITY(false, true && (false)))), false, false)))), true)))))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec3(_GLF_IDENTITY(bvec2(false, true), _GLF_IDENTITY(bvec2(bvec4(bvec2(false, true), false, _GLF_IDENTITY(false, true && (false)))), bvec2(bvec4(bvec2(bvec4(bvec2(false, true), false, _GLF_IDENTITY(false, true && (false)))), false, false)))), true)))))), ! (! (_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false)))))), true), bvec2(bvec3(_GLF_IDENTITY(bvec2(false, true), _GLF_IDENTITY(bvec2(bvec4(bvec2(false, true), false, _GLF_IDENTITY(false, true && (false)))), bvec2(bvec4(bvec2(bvec4(bvec2(false, _GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec4(true, false, false, false)), ! (! (bool(bvec4(true, false, false, false))))))), false, _GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), true && (false)))), false, false)))), true)))))))))) || false))
    {
     if(_GLF_DEAD(false))
      barrier();
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       barrier();
      }
    }
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       barrier();
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (_GLF_IDENTITY(! (false), bool(bvec4(! (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, false, true)), bool(bvec2(bool(bvec3(false, false, true)), true))))), false, false, false)))) || false)))))
  {
   for(int _injected_loop_counter = _GLF_IDENTITY(1, (1) | (1)); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) - (0 >> _GLF_IDENTITY(int(3), int(3)))) != (0 << _GLF_IDENTITY(int(6), int(6)))); _injected_loop_counter --)
    {
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(false, (false) || false), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (! (bool(bvec3(_GLF_IDENTITY(false, (false) || _GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, ! (! (false))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)))), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true)))), (bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true))))) || false)))))
      {
      }
     else
      {
       do
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
          }
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(1, min(_GLF_IDENTITY(1, ~ (~ (1))), 1)) << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7)), ((_GLF_IDENTITY(1, min(_GLF_IDENTITY(1, ~ (~ (1))), 1)) << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))) | ((_GLF_IDENTITY(1, min(_GLF_IDENTITY(1, ~ (~ (1))), 1)) << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7)))), max((_GLF_IDENTITY(1, min(_GLF_IDENTITY(1, ~ (~ (1))), 1)) << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7)), (_GLF_IDENTITY(1, min(_GLF_IDENTITY(1, ~ (~ (1))), 1)) << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7)))))); _injected_loop_counter ++)
        {
         barrier();
        }
      }
    }
  }
 subgroupBarrier();
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3)))); _injected_loop_counter ++)
  {
   atomicStore(checker[virtual_gid], read, 4, 64, _GLF_IDENTITY(4, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((4), ((4)) | _GLF_IDENTITY(((4)), max(((4)), ((4))))), max(_GLF_IDENTITY((4), ((4)) | ((4))), _GLF_IDENTITY((4), ((4)) | ((4))))), ((4)) * 1) | 0));
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END
BUFFER checker DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected_checker DATA_TYPE uint32 SIZE 8388096 FILL 0

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 
  BIND BUFFER checker AS storage DESCRIPTOR_SET 0 BINDING 2 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT checker EQ_BUFFER expected_checker
