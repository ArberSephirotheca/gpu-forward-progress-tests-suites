#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460
struct _GLF_struct_30 {
 mat2x4 _f0;
 int _f1;
 uvec2 _f2;
} ;

struct _GLF_struct_29 {
 ivec2 _f0;
 bool _f1;
 mat4 _f2;
 mat2 _f3;
} ;

struct _GLF_struct_28 {
 mat3x4 _f0;
 mat3 _f1;
 bvec2 _f2;
 bvec2 _f3;
 float _f4;
 mat2 _f5;
 ivec4 _f6;
} ;

struct _GLF_struct_27 {
 uvec4 _f0;
} ;

struct _GLF_struct_31 {
 _GLF_struct_27 _f0;
 _GLF_struct_28 _f1;
 _GLF_struct_29 _f2;
 _GLF_struct_30 _f3;
} ;

struct _GLF_struct_25 {
 float _f0;
 bvec4 _f1;
 int _f2;
} ;

struct _GLF_struct_24 {
 int _f0;
 bvec4 _f1;
 mat4 _f2;
 mat4x2 _f3;
 uvec4 _f4;
 vec3 _f5;
 vec2 _f6;
} ;

struct _GLF_struct_26 {
 bvec2 _f0;
 bvec3 _f1;
 mat3 _f2;
 ivec3 _f3;
 _GLF_struct_24 _f4;
 mat3x2 _f5;
 _GLF_struct_25 _f6;
} ;

struct _GLF_struct_22 {
 ivec4 _f0;
} ;

struct _GLF_struct_21 {
 bvec4 _f0;
} ;

struct _GLF_struct_23 {
 _GLF_struct_21 _f0;
 bool _f1;
 _GLF_struct_22 _f2;
 mat3x4 _f3;
 uvec3 _f4;
 int _f5;
} ;

struct _GLF_struct_32 {
 _GLF_struct_23 _f0;
 uint workgroup_base;
 _GLF_struct_26 _f1;
 mat3 _f2;
 _GLF_struct_31 _f3;
} ;

struct _GLF_struct_18 {
 uvec4 _f0;
 ivec3 _f1;
 mat3 _f2;
 mat3x4 _f3;
} ;

struct _GLF_struct_17 {
 bvec3 _f0;
 bool _f1;
} ;

struct _GLF_struct_16 {
 mat3x2 _f0;
 mat3 _f1;
 uvec3 _f2;
} ;

struct _GLF_struct_19 {
 _GLF_struct_16 _f0;
 _GLF_struct_17 _f1;
 _GLF_struct_18 _f2;
} ;

struct _GLF_struct_14 {
 float _f0;
 ivec2 _f1;
 uvec2 _f2;
 bvec4 _f3;
 mat2x3 _f4;
 ivec3 _f5;
 uvec3 _f6;
} ;

struct _GLF_struct_13 {
 ivec4 _f0;
 bvec3 _f1;
 uvec2 _f2;
 float _f3;
 bvec2 _f4;
 mat3x2 _f5;
 vec4 _f6;
} ;

struct _GLF_struct_15 {
 uvec2 _f0;
 _GLF_struct_13 _f1;
 float _f2;
 _GLF_struct_14 _f3;
} ;

struct _GLF_struct_11 {
 bvec3 _f0;
 mat2 _f1;
 uvec2 _f2;
} ;

struct _GLF_struct_10 {
 uint num_workgroup;
 mat3x4 _f0;
 uint _f1;
} ;

struct _GLF_struct_9 {
 bvec4 _f0;
 mat4x2 _f1;
 bvec3 _f2;
} ;

struct _GLF_struct_12 {
 mat3 _f0;
 bvec4 _f1;
 bvec3 _f2;
 _GLF_struct_9 _f3;
 _GLF_struct_10 _f4;
 _GLF_struct_11 _f5;
 uvec2 _f6;
} ;

struct _GLF_struct_7 {
 bvec3 _f0;
} ;

struct _GLF_struct_6 {
 int _f0;
 mat2x3 _f1;
 bool _f2;
 mat2 _f3;
 mat3x2 _f4;
} ;

struct _GLF_struct_5 {
 mat4 _f0;
} ;

struct _GLF_struct_4 {
 vec3 _f0;
 mat4x2 _f1;
} ;

struct _GLF_struct_8 {
 _GLF_struct_4 _f0;
 _GLF_struct_5 _f1;
 _GLF_struct_6 _f2;
 _GLF_struct_7 _f3;
 vec2 _f4;
} ;

struct _GLF_struct_2 {
 mat4x3 _f0;
 bool _f1;
 vec3 _f2;
} ;

struct _GLF_struct_1 {
 mat4x3 _f0;
 vec2 _f1;
} ;

struct _GLF_struct_0 {
 uvec4 _f0;
 mat3x2 _f1;
 mat4 _f2;
 mat4 _f3;
 bvec4 _f4;
 int _f5;
 mat4 _f6;
} ;

struct _GLF_struct_3 {
 bvec3 _f0;
 _GLF_struct_0 _f1;
 _GLF_struct_1 _f2;
 _GLF_struct_2 _f3;
} ;

struct _GLF_struct_20 {
 _GLF_struct_3 _f0;
 _GLF_struct_8 _f1;
 _GLF_struct_12 _f2;
 ivec2 _f3;
 _GLF_struct_15 _f4;
 _GLF_struct_19 _f5;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uvec4 GLF_merged4_0_1_16_1_1_4_2_1_13_3_1_11next_virtual_gidreadsubgroup_basesubgroup_id;
 uint subgroup_id = gl_SubgroupID;
 GLF_merged4_0_1_16_1_1_4_2_1_13_3_1_11next_virtual_gidreadsubgroup_basesubgroup_id.w = subgroup_id;
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 _GLF_struct_20 _GLF_struct_replacement_20 = _GLF_struct_20(_GLF_struct_3(bvec3(true), _GLF_struct_0(uvec4(1u), mat3x2(1.0), mat4(1.0), mat4(1.0), bvec4(true), 1, mat4(1.0)), _GLF_struct_1(mat4x3(1.0), vec2(1.0)), _GLF_struct_2(mat4x3(1.0), true, vec3(1.0))), _GLF_struct_8(_GLF_struct_4(vec3(1.0), mat4x2(1.0)), _GLF_struct_5(mat4(1.0)), _GLF_struct_6(1, mat2x3(1.0), true, mat2(1.0), mat3x2(1.0)), _GLF_struct_7(bvec3(true)), vec2(1.0)), _GLF_struct_12(mat3(1.0), bvec4(true), bvec3(true), _GLF_struct_9(bvec4(true), mat4x2(1.0), bvec3(true)), _GLF_struct_10(gl_NumWorkGroups.x, mat3x4(1.0), 1u), _GLF_struct_11(bvec3(true), mat2(1.0), uvec2(1u)), uvec2(1u)), ivec2(1), _GLF_struct_15(uvec2(1u), _GLF_struct_13(ivec4(1), bvec3(true), uvec2(1u), 1.0, bvec2(true), mat3x2(1.0), vec4(1.0)), 1.0, _GLF_struct_14(1.0, ivec2(1), uvec2(1u), bvec4(true), mat2x3(1.0), ivec3(1), uvec3(1u))), _GLF_struct_19(_GLF_struct_16(mat3x2(1.0), mat3(1.0), uvec3(1u)), _GLF_struct_17(bvec3(true), true), _GLF_struct_18(uvec4(1u), ivec3(1), mat3(1.0), mat3x4(1.0))));
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = gl_WorkGroupID.x;
 _GLF_struct_32 _GLF_struct_replacement_32 = _GLF_struct_32(_GLF_struct_23(_GLF_struct_21(bvec4(true)), true, _GLF_struct_22(ivec4(1)), mat3x4(1.0), uvec3(1u), 1), workgroup_size * workgroup_id, _GLF_struct_26(bvec2(true), bvec3(true), mat3(1.0), ivec3(1), _GLF_struct_24(1, bvec4(true), mat4(1.0), mat4x2(1.0), uvec4(1u), vec3(1.0), vec2(1.0)), mat3x2(1.0), _GLF_struct_25(1.0, bvec4(true), 1)), mat3(1.0), _GLF_struct_31(_GLF_struct_27(uvec4(1u)), _GLF_struct_28(mat3x4(1.0), mat3(1.0), bvec2(true), bvec2(true), 1.0, mat2(1.0), ivec4(1)), _GLF_struct_29(ivec2(1), true, mat4(1.0), mat2(1.0)), _GLF_struct_30(mat2x4(1.0), 1, uvec2(1u))));
 uint subgroup_base = GLF_merged4_0_1_16_1_1_4_2_1_13_3_1_11next_virtual_gidreadsubgroup_basesubgroup_id.w * subgroup_size;
 GLF_merged4_0_1_16_1_1_4_2_1_13_3_1_11next_virtual_gidreadsubgroup_basesubgroup_id.z = subgroup_base;
 uint virtual_gid = _GLF_struct_replacement_32.workgroup_base + GLF_merged4_0_1_16_1_1_4_2_1_13_3_1_11next_virtual_gidreadsubgroup_basesubgroup_id.z + subgroup_local_id;
 uint next_virtual_gid = _GLF_struct_replacement_32.workgroup_base + GLF_merged4_0_1_16_1_1_4_2_1_13_3_1_11next_virtual_gidreadsubgroup_basesubgroup_id.z + ((subgroup_local_id + 1) % subgroup_size);
 GLF_merged4_0_1_16_1_1_4_2_1_13_3_1_11next_virtual_gidreadsubgroup_basesubgroup_id.x = next_virtual_gid;
 uint read = atomicLoad(buf[virtual_gid], 4, 64, 2);
 GLF_merged4_0_1_16_1_1_4_2_1_13_3_1_11next_virtual_gidreadsubgroup_basesubgroup_id.y = read;
 if((subgroup_local_id % 2) == 0)
  {
   atomicStore(buf[GLF_merged4_0_1_16_1_1_4_2_1_13_3_1_11next_virtual_gidreadsubgroup_basesubgroup_id.x], uint(1), 4, 64, 4);
  }
 else
  {
   atomicStore(buf[GLF_merged4_0_1_16_1_1_4_2_1_13_3_1_11next_virtual_gidreadsubgroup_basesubgroup_id.x], uint(1), 4, 64, 4);
  }
 subgroupBarrier();
 atomicStore(checker[virtual_gid], GLF_merged4_0_1_16_1_1_4_2_1_13_3_1_11next_virtual_gidreadsubgroup_basesubgroup_id.y, 4, 64, 4);
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END
BUFFER checker DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected_checker DATA_TYPE uint32 SIZE 8388096 FILL 0

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 
  BIND BUFFER checker AS storage DESCRIPTOR_SET 0 BINDING 2 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT checker EQ_BUFFER expected_checker
