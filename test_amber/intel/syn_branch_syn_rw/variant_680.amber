#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) && true)) && _GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), bool(bvec3((injectionSwitch.x < injectionSwitch.y), false, true)))))))), ! _GLF_IDENTITY((! (_GLF_IDENTITY(false, ! (! (false))))), ! (! ((! (_GLF_IDENTITY(false, ! (! (false)))))))))))
  barrier();
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(mat3x4(injectionSwitch.x, _GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, max(1.0, 1.0)), 1.0)), 1.0, 0.0, 0.0, 0.0, length(0.0), 1.0, _GLF_IDENTITY(dot(vec3(0.0, 1.0, length(_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(9.0)), float(0.0), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))), vec3(0.0, 1.0, 0.0)), dot(vec3(0.0, 1.0, length(0.0)), vec3(0.0, 1.0, 0.0))), 1.0, 1.0, 1.0))) > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * determinant(mat4(1.0, 0.0, determinant(mat2(0.0, 1.0, _GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0)), 0.0)), 1.0, 0.0, 1.0, 1.0, 1.0, _GLF_IDENTITY(0.0, float(vec4(_GLF_IDENTITY(0.0, (0.0) + determinant(mat2(0.0, 0.0, 0.0, 0.0))), _GLF_IDENTITY(1.0, (true ? _GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(1.2)), bool(false))) : _GLF_FUZZED(93.11))), _GLF_ZERO(0.0, injectionSwitch.x), abs(log(1.0))))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(abs(_GLF_IDENTITY(0.0, (0.0) / round(length(normalize(vec3(1.0, 1.0, 1.0)))))), (true ? abs(_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(0.5)), float(0.0), bool(true)))) : _GLF_FUZZED(_GLF_IDENTITY(-807.558, max(_GLF_IDENTITY(-807.558, (true ? -807.558 : _GLF_FUZZED(-7.8))), -807.558))))), min(_GLF_IDENTITY(abs(0.0), _GLF_IDENTITY(_GLF_IDENTITY((abs(0.0)) + _GLF_IDENTITY(0.0, max(0.0, 0.0)), clamp((abs(0.0)) + _GLF_IDENTITY(0.0, max(0.0, 0.0)), (abs(0.0)) + _GLF_IDENTITY(0.0, max(0.0, 0.0)), (abs(0.0)) + _GLF_IDENTITY(0.0, max(0.0, 0.0)))), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? (abs(0.0)) + _GLF_IDENTITY(0.0, max(0.0, 0.0)) : _GLF_FUZZED(216.774)))), abs(0.0))), clamp(_GLF_IDENTITY(abs(0.0), min(_GLF_IDENTITY(abs(0.0), (abs(0.0)) + 0.0), abs(0.0))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(abs(0.0), min(_GLF_IDENTITY(abs(0.0), (abs(_GLF_IDENTITY(0.0, clamp(_GLF_IDENTITY(0.0, float(mat4x3(_GLF_IDENTITY(_GLF_IDENTITY(0.0, min(0.0, 0.0)), max(_GLF_IDENTITY(0.0, min(0.0, 0.0)), _GLF_IDENTITY(_GLF_IDENTITY(0.0, min(0.0, 0.0)), float(mat3x2(_GLF_IDENTITY(_GLF_IDENTITY(0.0, min(0.0, 0.0)), clamp(_GLF_IDENTITY(0.0, min(0.0, _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)))), _GLF_IDENTITY(0.0, min(0.0, 0.0)), _GLF_IDENTITY(0.0, min(0.0, 0.0)))), 1.0, 0.0, 1.0, sin(0.0), 1.0))))), tan(0.0), 0.0, 0.0, sqrt(0.0), 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0))), 0.0, 0.0)))) + 0.0), _GLF_IDENTITY(abs(0.0), clamp(_GLF_IDENTITY(_GLF_IDENTITY(abs(0.0), (_GLF_IDENTITY(abs(0.0), (true ? abs(0.0) : _GLF_FUZZED(_GLF_IDENTITY(9599.9911, (false ? _GLF_FUZZED(75.93) : 9599.9911)))))) - 0.0), min(abs(0.0), abs(0.0))), _GLF_IDENTITY(abs(0.0), (abs(0.0)) / 1.0), _GLF_IDENTITY(abs(0.0), min(abs(0.0), _GLF_IDENTITY(abs(0.0), mix(float(_GLF_FUZZED(85.64)), float(abs(0.0)), bool(true))))))))), clamp(_GLF_IDENTITY(abs(0.0), min(_GLF_IDENTITY(abs(0.0), _GLF_IDENTITY(_GLF_IDENTITY((abs(0.0)), (_GLF_IDENTITY(false, (false) && true) ? _GLF_FUZZED(-652.312) : _GLF_IDENTITY((abs(0.0)), clamp((abs(0.0)), (abs(0.0)), (abs(0.0)))))) + 0.0, clamp((abs(0.0)) + 0.0, (abs(0.0)) + _GLF_IDENTITY(0.0, 0.0 + (0.0)), (abs(0.0)) + 0.0))), abs(_GLF_IDENTITY(0.0, float(_GLF_IDENTITY(vec3(0.0, 0.0, 1.0), clamp(vec3(0.0, 0.0, 1.0), _GLF_IDENTITY(vec3(0.0, 0.0, 1.0), max(vec3(0.0, 0.0, 1.0), vec3(0.0, 0.0, 1.0))), vec3(0.0, 0.0, 1.0)))))))), _GLF_IDENTITY(_GLF_IDENTITY(abs(0.0), (true ? _GLF_IDENTITY(abs(0.0), min(abs(0.0), _GLF_IDENTITY(abs(0.0), max(abs(0.0), abs(0.0))))) : _GLF_FUZZED(-3519.1686))), min(_GLF_IDENTITY(abs(_GLF_IDENTITY(0.0, float(mat2x3(0.0, 0.0, determinant(mat4(sqrt(0.0), 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0)), log(1.0), 1.0, 0.0)))), (abs(0.0)) + 0.0), abs(0.0))), _GLF_IDENTITY(abs(0.0), min(_GLF_IDENTITY(abs(0.0), _GLF_IDENTITY((abs(0.0)), 0.0 + _GLF_IDENTITY(((abs(0.0))), mix(float(_GLF_FUZZED(7.8)), float(((abs(0.0)))), bool(true)))) + 0.0), abs(0.0))))), mix(float(_GLF_IDENTITY(_GLF_FUZZED((-8.8 * 1.2)), (_GLF_IDENTITY(_GLF_FUZZED((-8.8 * 1.2)), min(_GLF_FUZZED((-8.8 * 1.2)), _GLF_FUZZED((-8.8 * 1.2))))) - length(sin(vec2(0.0, 0.0))))), float(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(abs(_GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(2005.4778) : _GLF_IDENTITY(0.0, (_GLF_IDENTITY(true ? 0.0 : _GLF_FUZZED(-0.1), _GLF_IDENTITY(float(mat3(true ? 0.0 : _GLF_FUZZED(-0.1), abs(_GLF_IDENTITY(1.0, (1.0) + determinant(mat2(0.0, 1.0, 0.0, 0.0)))), 1.0, 1.0, determinant(mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0)), 0.0, 0.0, 1.0, 1.0)), (float(mat3(_GLF_IDENTITY(true ? 0.0 : _GLF_FUZZED(-0.1), mix(float(_GLF_FUZZED((float(-79950)))), float(true ? 0.0 : _GLF_FUZZED(-0.1)), bool(_GLF_IDENTITY(true, bool(bvec4(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))), abs(1.0), 1.0, 1.0, determinant(mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, _GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, determinant(mat4(0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0)) + (0.0))) / 1.0))), 0.0, 0.0, 1.0, 1.0))) / 1.0))))))), min(_GLF_IDENTITY(abs(0.0), _GLF_IDENTITY((abs(0.0)) + 0.0, _GLF_IDENTITY(float(float((abs(0.0)) + 0.0)), float(vec4(float(float(_GLF_IDENTITY((_GLF_IDENTITY(abs(0.0), clamp(_GLF_IDENTITY(abs(0.0), (abs(0.0)) - 0.0), abs(0.0), abs(0.0)))) + 0.0, mix(float(_GLF_IDENTITY(_GLF_IDENTITY((abs(0.0)) + 0.0, mix(float((abs(0.0)) + 0.0), float(_GLF_FUZZED((vec4(144.869, 66.29, 888.976, 972.348)).w)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), (false ? _GLF_FUZZED(-2.8) : _GLF_IDENTITY((abs(0.0)) + 0.0, mix(float((abs(0.0)) + 0.0), float(_GLF_FUZZED(-698.277)), bool(false)))))), _GLF_IDENTITY(float(_GLF_FUZZED(-8.1)), _GLF_IDENTITY(0.0, clamp(0.0, _GLF_IDENTITY(0.0, clamp(_GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0, 0.0)), _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-3671.7870)), float(_GLF_IDENTITY(0.0, float(vec2(0.0, 1.0)))), bool(true))))) + (float(_GLF_FUZZED(-8.1)))), bool(false))))), 0.0, 1.0, 1.0))))), abs(0.0))), clamp(_GLF_IDENTITY(abs(0.0), _GLF_IDENTITY(min(_GLF_IDENTITY(_GLF_IDENTITY(abs(0.0), _GLF_IDENTITY(float(mat2(_GLF_IDENTITY(abs(0.0), min(abs(0.0), _GLF_IDENTITY(abs(0.0), clamp(abs(0.0), abs(0.0), abs(0.0))))), 1.0, round(length(normalize(1.0))), 0.0)), (float(mat2(_GLF_IDENTITY(abs(0.0), min(abs(0.0), _GLF_IDENTITY(abs(0.0), clamp(abs(0.0), abs(0.0), abs(0.0))))), 1.0, round(length(normalize(1.0))), 0.0))) - 0.0)), (abs(0.0)) + 0.0), abs(0.0)), float(mat3(min(_GLF_IDENTITY(_GLF_IDENTITY(abs(0.0), _GLF_IDENTITY(float(mat2(_GLF_IDENTITY(abs(0.0), min(abs(0.0), _GLF_IDENTITY(abs(0.0), clamp(abs(0.0), abs(0.0), abs(0.0))))), 1.0, round(length(normalize(1.0))), 0.0)), (float(mat2(_GLF_IDENTITY(abs(0.0), min(abs(0.0), _GLF_IDENTITY(abs(0.0), clamp(abs(0.0), abs(0.0), abs(0.0))))), 1.0, round(length(normalize(1.0))), 0.0))) - 0.0)), (abs(0.0)) + 0.0), abs(0.0)), 0.0, determinant(mat4(0.0, 0.0, 0.0, 0.0, 1.0, 0.0, abs(0.0), 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0)), length(vec3(0.0, 0.0, 0.0)), _GLF_ONE(1.0, injectionSwitch.y), 1.0, 1.0, 0.0, 1.0)))), _GLF_IDENTITY(abs(0.0), min(_GLF_IDENTITY(abs(0.0), (abs(0.0)) + 0.0), abs(0.0))), _GLF_IDENTITY(abs(0.0), min(_GLF_IDENTITY(abs(0.0), (_GLF_IDENTITY(abs(0.0), float(mat3x4(abs(0.0), 0.0, _GLF_IDENTITY(1.0, mix(_GLF_IDENTITY(float(1.0), mix(float(_GLF_FUZZED(7.2)), _GLF_IDENTITY(float(float(1.0)), float(vec2(_GLF_IDENTITY(float(float(1.0)), min(_GLF_IDENTITY(float(float(1.0)), clamp(float(float(1.0)), float(float(1.0)), float(float(1.0)))), float(float(1.0)))), abs(0.0)))), bool(true))), float(_GLF_FUZZED(-65.48)), bool(false))), exp(0.0), sqrt(0.0), 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0)))) + 0.0), abs(0.0))))), min(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(abs(0.0), min(_GLF_IDENTITY(_GLF_IDENTITY(abs(0.0), min(abs(0.0), abs(0.0))), (abs(0.0)) + 0.0), abs(0.0))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(abs(0.0), min(_GLF_IDENTITY(abs(0.0), (abs(0.0)) + 0.0), abs(0.0))), (_GLF_IDENTITY(abs(0.0), min(_GLF_IDENTITY(_GLF_IDENTITY(abs(0.0), (abs(0.0)) + 0.0), (_GLF_IDENTITY(abs(0.0), (abs(0.0)) + 0.0)) - 0.0), abs(0.0)))) - 0.0), _GLF_IDENTITY(abs(0.0), min(_GLF_IDENTITY(abs(0.0), (abs(0.0)) + 0.0), _GLF_IDENTITY(abs(0.0), clamp(_GLF_IDENTITY(_GLF_IDENTITY(abs(0.0), _GLF_IDENTITY(clamp(abs(0.0), abs(0.0), abs(0.0)), min(clamp(abs(0.0), abs(0.0), abs(0.0)), clamp(abs(0.0), abs(0.0), abs(0.0))))), (_GLF_IDENTITY(abs(0.0), _GLF_IDENTITY(clamp(abs(0.0), abs(0.0), abs(0.0)), _GLF_IDENTITY((_GLF_IDENTITY(clamp(abs(0.0), abs(0.0), abs(0.0)), clamp(clamp(abs(0.0), abs(0.0), abs(0.0)), clamp(abs(0.0), abs(0.0), abs(0.0)), clamp(abs(0.0), abs(0.0), abs(_GLF_IDENTITY(0.0, float(vec3(0.0, 1.0, 1.0)))))))), _GLF_IDENTITY(float(_GLF_IDENTITY(mat3((_GLF_IDENTITY(clamp(abs(0.0), abs(0.0), abs(0.0)), clamp(clamp(abs(0.0), abs(0.0), abs(0.0)), clamp(abs(0.0), abs(0.0), abs(0.0)), clamp(abs(0.0), abs(0.0), abs(_GLF_IDENTITY(0.0, float(vec3(0.0, 1.0, 1.0)))))))), 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, log(1.0), determinant(mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))), mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0) + (mat3((_GLF_IDENTITY(clamp(abs(0.0), abs(0.0), abs(0.0)), clamp(clamp(abs(0.0), abs(0.0), abs(0.0)), clamp(abs(0.0), abs(0.0), abs(0.0)), clamp(abs(0.0), abs(0.0), abs(_GLF_IDENTITY(0.0, float(vec3(0.0, 1.0, 1.0)))))))), 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, log(1.0), determinant(mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))))), max(float(_GLF_IDENTITY(mat3((_GLF_IDENTITY(clamp(abs(0.0), abs(0.0), abs(0.0)), clamp(clamp(abs(0.0), abs(0.0), abs(0.0)), clamp(abs(0.0), abs(0.0), abs(0.0)), clamp(abs(0.0), abs(0.0), abs(_GLF_IDENTITY(0.0, float(vec3(0.0, 1.0, 1.0)))))))), 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, log(1.0), determinant(mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))), mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0) + (mat3((_GLF_IDENTITY(clamp(abs(0.0), abs(0.0), abs(0.0)), clamp(clamp(abs(0.0), abs(0.0), abs(0.0)), clamp(abs(0.0), abs(0.0), abs(0.0)), clamp(abs(0.0), abs(0.0), abs(_GLF_IDENTITY(0.0, float(vec3(0.0, 1.0, 1.0)))))))), 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, log(1.0), determinant(mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))))), float(_GLF_IDENTITY(mat3((_GLF_IDENTITY(clamp(abs(0.0), abs(0.0), abs(0.0)), clamp(clamp(abs(0.0), abs(0.0), abs(0.0)), clamp(abs(0.0), abs(0.0), abs(0.0)), clamp(abs(0.0), abs(0.0), abs(_GLF_IDENTITY(0.0, float(vec3(0.0, 1.0, 1.0)))))))), 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, log(1.0), determinant(mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))), mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0) + (mat3((_GLF_IDENTITY(clamp(abs(0.0), abs(0.0), abs(0.0)), clamp(clamp(abs(0.0), abs(0.0), abs(0.0)), clamp(abs(0.0), abs(0.0), abs(0.0)), clamp(abs(0.0), abs(0.0), abs(_GLF_IDENTITY(0.0, float(vec3(0.0, 1.0, 1.0)))))))), 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, log(1.0), determinant(mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))))))))) - 0.0))) - determinant(mat2(0.0, 1.0, 0.0, 0.0))), abs(0.0), _GLF_IDENTITY(_GLF_IDENTITY(abs(0.0), float(mat3(_GLF_IDENTITY(abs(0.0), (false ? _GLF_FUZZED(5.8) : _GLF_IDENTITY(abs(0.0), mix(float(_GLF_FUZZED(-5556.4338)), float(abs(0.0)), bool(true))))), 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0))), clamp(abs(0.0), _GLF_IDENTITY(abs(0.0), clamp(_GLF_IDENTITY(abs(0.0), clamp(abs(0.0), _GLF_IDENTITY(abs(0.0), mix(float(_GLF_FUZZED(-36.98)), float(abs(0.0)), bool(true))), abs(0.0))), abs(0.0), abs(0.0))), _GLF_IDENTITY(abs(_GLF_IDENTITY(0.0, _GLF_IDENTITY((_GLF_IDENTITY(false ? _GLF_IDENTITY(_GLF_FUZZED(log(-5.5)), (true ? _GLF_FUZZED(log(-5.5)) : _GLF_FUZZED(inversesqrt(clamp(152.635, -84.30, -1.2))))) : 0.0, (false ? _GLF_IDENTITY(_GLF_FUZZED(log(-5.5)), (true ? _GLF_FUZZED(log(-5.5)) : _GLF_FUZZED(inversesqrt(clamp(152.635, -84.30, -1.2))))) : 0.0) - 0.0)), float(mat2x3((_GLF_IDENTITY(false ? _GLF_IDENTITY(_GLF_FUZZED(log(-5.5)), (true ? _GLF_FUZZED(log(-5.5)) : _GLF_FUZZED(inversesqrt(clamp(152.635, -84.30, -1.2))))) : 0.0, (false ? _GLF_IDENTITY(_GLF_FUZZED(log(-5.5)), (true ? _GLF_FUZZED(log(-5.5)) : _GLF_FUZZED(inversesqrt(clamp(152.635, -84.30, -1.2))))) : 0.0) - 0.0)), 1.0, determinant(mat4(1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, log(1.0), 1.0, 1.0, 0.0, 1.0)), 1.0, 1.0, 1.0))))), max(abs(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0))), _GLF_IDENTITY(abs(0.0), clamp(abs(0.0), abs(0.0), _GLF_IDENTITY(abs(0.0), (abs(0.0)) - 0.0))))))))))), _GLF_IDENTITY(abs(0.0), min(_GLF_IDENTITY(abs(0.0), _GLF_IDENTITY((abs(0.0)) + 0.0, max(_GLF_IDENTITY(_GLF_IDENTITY((abs(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED((+ -59.39))), bool(false))))), mix(float(_GLF_FUZZED(30.16)), float((abs(0.0))), bool(true))) + 0.0, (true ? (abs(0.0)) + 0.0 : _GLF_FUZZED(-882.705))), (abs(0.0)) + 0.0))), abs(0.0))))), (_GLF_IDENTITY(_GLF_IDENTITY(abs(0.0), min(_GLF_IDENTITY(abs(0.0), (abs(0.0)) + 0.0), abs(0.0))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(abs(0.0), min(_GLF_IDENTITY(abs(_GLF_IDENTITY(0.0, float(mat4x2(0.0, _GLF_IDENTITY(1.0, min(1.0, 1.0)), tan(0.0), 0.0, log(1.0), cos(0.0), 0.0, 0.0)))), (abs(0.0)) + _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-3293.8632)), float(0.0), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), abs(0.0))), _GLF_IDENTITY(float(float(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(abs(0.0), 1.0 * (_GLF_IDENTITY(abs(0.0), mix(float(_GLF_FUZZED(-9.1)), float(abs(0.0)), bool(true))))), min(_GLF_IDENTITY(abs(_GLF_IDENTITY(0.0, float(mat4x2(0.0, 1.0, tan(0.0), 0.0, log(1.0), cos(0.0), 0.0, 0.0)))), (abs(0.0)) + 0.0), abs(0.0))), float(vec3(_GLF_IDENTITY(abs(0.0), min(_GLF_IDENTITY(abs(_GLF_IDENTITY(0.0, float(mat4x2(0.0, 1.0, tan(0.0), 0.0, log(1.0), cos(0.0), 0.0, 0.0)))), (abs(0.0)) + 0.0), abs(0.0))), 1.0, 1.0))))), 0.0 + (float(float(_GLF_IDENTITY(_GLF_IDENTITY(abs(0.0), min(_GLF_IDENTITY(abs(_GLF_IDENTITY(0.0, float(mat4x2(0.0, 1.0, tan(0.0), 0.0, log(1.0), cos(0.0), 0.0, 0.0)))), (abs(0.0)) + 0.0), abs(0.0))), float(vec3(_GLF_IDENTITY(abs(0.0), min(_GLF_IDENTITY(abs(_GLF_IDENTITY(0.0, float(mat4x2(0.0, 1.0, tan(0.0), 0.0, log(1.0), cos(0.0), 0.0, 0.0)))), (abs(0.0)) + 0.0), abs(0.0))), 1.0, 1.0)))))))), _GLF_IDENTITY(abs(0.0), min(_GLF_IDENTITY(abs(0.0), (abs(0.0)) + 0.0), abs(0.0))), _GLF_IDENTITY(abs(0.0), min(_GLF_IDENTITY(abs(0.0), (abs(0.0)) + 0.0), abs(0.0)))))) - 0.0), _GLF_IDENTITY(_GLF_IDENTITY(abs(0.0), min(_GLF_IDENTITY(abs(0.0), (abs(0.0)) + 0.0), abs(0.0))), clamp(_GLF_IDENTITY(abs(0.0), min(_GLF_IDENTITY(abs(0.0), (abs(0.0)) + 0.0), _GLF_IDENTITY(abs(0.0), float(_GLF_IDENTITY(mat3(abs(0.0), 0.0, _GLF_IDENTITY(dot(vec4(1.0, 0.0, 0.0, _GLF_IDENTITY(dot(vec2(0.0, 0.0), vec2(1.0, 1.0)), dot(vec2(0.0, 0.0), vec2(1.0, 1.0)))), vec4(1.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, 1.0), vec3(0.0, 1.0, 0.0)), dot(vec3(1.0, 0.0, 1.0), vec3(0.0, 1.0, 0.0))), 0.0, 0.0)), dot(vec4(1.0, 0.0, 0.0, _GLF_IDENTITY(dot(vec2(0.0, 0.0), vec2(1.0, 1.0)), dot(vec2(0.0, 0.0), vec2(1.0, 1.0)))), vec4(1.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, 1.0), vec3(0.0, 1.0, 0.0)), dot(vec3(1.0, 0.0, 1.0), vec3(0.0, 1.0, 0.0))), 0.0, 0.0))), 0.0, 0.0, _GLF_IDENTITY(dot(vec4(0.0, 1.0, determinant(mat3(0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), 0.0), vec4(0.0, 1.0, 0.0, 0.0)), dot(vec4(0.0, 1.0, determinant(mat3(0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), 0.0), vec4(0.0, 1.0, 0.0, 0.0))), 1.0, 1.0, 1.0), transpose(transpose(mat3(abs(0.0), 0.0, _GLF_IDENTITY(dot(vec4(1.0, 0.0, 0.0, _GLF_IDENTITY(dot(vec2(0.0, 0.0), vec2(1.0, 1.0)), dot(vec2(0.0, 0.0), vec2(1.0, 1.0)))), vec4(1.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, 1.0), vec3(0.0, 1.0, 0.0)), dot(vec3(1.0, 0.0, 1.0), vec3(0.0, 1.0, 0.0))), 0.0, 0.0)), dot(vec4(_GLF_IDENTITY(1.0, float(_GLF_IDENTITY(vec4(1.0, 0.0, 1.0, round(length(normalize(1.0)))), vec4(mat3(_GLF_IDENTITY(vec4(1.0, 0.0, 1.0, round(length(normalize(1.0)))), vec4(mat2x3(vec4(1.0, 0.0, 1.0, round(length(normalize(1.0)))), 0.0, 1.0))), 0.0, 1.0, 1.0, 0.0, 0.0))))), 0.0, 0.0, _GLF_IDENTITY(dot(vec2(0.0, 0.0), _GLF_IDENTITY(vec2(1.0, 1.0), clamp(vec2(1.0, 1.0), vec2(1.0, 1.0), vec2(1.0, 1.0)))), dot(vec2(0.0, 0.0), vec2(1.0, 1.0)))), vec4(1.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, 1.0), vec3(0.0, 1.0, 0.0)), _GLF_IDENTITY(dot(vec3(1.0, 0.0, 1.0), vec3(0.0, 1.0, 0.0)), (true ? dot(vec3(1.0, 0.0, 1.0), vec3(0.0, 1.0, 0.0)) : _GLF_FUZZED(mix(-7.4, -6716.5950, true))))), 0.0, 0.0))), 0.0, 0.0, _GLF_IDENTITY(dot(vec4(0.0, 1.0, determinant(mat3(0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), 0.0), vec4(0.0, 1.0, 0.0, 0.0)), dot(vec4(0.0, 1.0, determinant(mat3(0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), 0.0), vec4(0.0, 1.0, 0.0, 0.0))), 1.0, 1.0, 1.0)))))))), _GLF_IDENTITY(abs(0.0), min(_GLF_IDENTITY(abs(0.0), (abs(0.0)) + 0.0), abs(0.0))), _GLF_IDENTITY(abs(0.0), min(_GLF_IDENTITY(abs(0.0), (abs(0.0)) + 0.0), abs(0.0)))))))), bool(true))), _GLF_IDENTITY(abs(0.0), min(_GLF_IDENTITY(abs(_GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(451.320) : 0.0))), (_GLF_IDENTITY(abs(0.0), (true ? abs(0.0) : _GLF_FUZZED(44.22)))) + 0.0), abs(0.0))))), 1.0, _GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(2.5)), bool(false))), 0.0, 0.0, 0.0, _GLF_IDENTITY(1.0, float(mat2x3(_GLF_IDENTITY(1.0, (1.0) / 1.0), _GLF_ONE(1.0, injectionSwitch.y), 1.0, 0.0, abs(tan(0.0)), 0.0))))))))))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         do
          {
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (injectionSwitch.x > injectionSwitch.y))));
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), bvec3(bvec4(bvec3(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), false))))), (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != (1 | 1), ! (! (_GLF_IDENTITY(_injected_loop_counter != (1 | 1), bool(bvec4(_injected_loop_counter != (1 | 1), false, true, true))))))); _injected_loop_counter ++)
        {
         do
          {
           if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
         barrier();
        }
      }
     else
      {
      }
    }
  }
 if(_GLF_DEAD(false))
  {
   do
    {
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 do
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     else
      {
       barrier();
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 do
  {
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec3(injectionSwitch.x > injectionSwitch.y, true, false)))))))))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / sqrt(1.0)) > injectionSwitch.y))))
  barrier();
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-7892.1560)), bool(false))) > injectionSwitch.y))))
  {
  }
 else
  {
   do
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))))
          barrier();
        }
       else
        {
        }
       barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
           barrier();
          }
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(false))
  barrier();
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_DEAD(false))
  barrier();
 do
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       barrier();
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (true))))
  {
   do
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       for(int _injected_loop_counter = _GLF_IDENTITY(1, (1) | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
        {
         barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 else
  {
  }
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))) || false))))))))
      {
       do
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (false)), false || (_GLF_IDENTITY((! (false)), false || (_GLF_IDENTITY((! (false)), false || ((! (false)))))))))), (_GLF_IDENTITY((_GLF_IDENTITY(false, ! (! (false)))), _GLF_IDENTITY(! (! ((_GLF_IDENTITY(false, ! (! (false)))))), (! (! ((_GLF_IDENTITY(false, ! (! (false))))))) && true))) || false)))))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1)))); _injected_loop_counter ++)
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           barrier();
          }
        }
      }
    }
   else
    {
    }
  }
 for(int _injected_loop_counter = int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           for(int _injected_loop_counter = ((1 ^ 0) ^ 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
            {
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_DEAD(false))
                  barrier();
                }
               else
                {
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               barrier();
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
                barrier();
               if(_GLF_DEAD(false))
                barrier();
              }
            }
           if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), bool(bvec4((false), true, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))
            barrier();
          }
         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
          barrier();
        }
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             barrier();
            }
          }
        }
       else
        {
        }
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1)))); _injected_loop_counter ++)
              {
               if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (_GLF_IDENTITY(! (false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(! (false), bool(bool(! (false))))), false || (! (_GLF_IDENTITY(! (false), bool(bool(! (false)))))))))) || _GLF_IDENTITY(false, ! (! (false)))))), (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 barrier();
                }
              }
             do
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 barrier();
                }
               else
                {
                }
              }
             while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bvec4(false, true, true, true)))));
            }
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
            {
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 ^ 0)); _injected_loop_counter ++)
              {
               barrier();
              }
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(3, int(ivec3(_GLF_IDENTITY(3, ~ (_GLF_IDENTITY(~ (3), (~ (3)) / 1))), int(_GLF_ZERO(0.0, injectionSwitch.x)), ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2))))))), int(3))) >> _GLF_IDENTITY(int(3), int(3)))); _injected_loop_counter ++)
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               barrier();
              }
            }
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
              {
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                   do
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                     if(_GLF_WRAPPED_IF_TRUE(true))
                      {
                       if(_GLF_DEAD(false))
                        {
                         if(_GLF_DEAD(false))
                          barrier();
                         barrier();
                        }
                       if(_GLF_DEAD(false))
                        barrier();
                      }
                     else
                      {
                      }
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 else
                  {
                   barrier();
                  }
                }
              }
            }
          }
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(false))
              barrier();
             return;
             if(_GLF_DEAD(false))
              barrier();
            }
           else
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                }
               else
                {
                 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                  }
                 else
                  {
                   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                    {
                     barrier();
                    }
                   else
                    {
                    }
                  }
                }
              }
            }
           if(_GLF_DEAD(false))
            barrier();
          }
         do
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                {
                 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
                  {
                  }
                 else
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(float(injectionSwitch.x))) > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0)))))
                    barrier();
                   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) || false)))
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                     barrier();
                    }
                   else
                    {
                    }
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                }
               else
                {
                 if(_GLF_DEAD(false))
                  barrier();
                }
              }
             else
              {
               if(_GLF_DEAD(false))
                {
                 for(int _injected_loop_counter = ((0 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), 0 ^ (int(_GLF_IDENTITY(3, (_GLF_IDENTITY(3, min(_GLF_IDENTITY(3, (3) | 0), 3))) << (0 >> _GLF_IDENTITY(int(8), int(8))))))))) & 66981); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (true ? int(0) : _GLF_FUZZED(77785))))) >> _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), clamp(int(0), int(0), int(0)))))); _GLF_IDENTITY(_injected_loop_counter ++, (_GLF_IDENTITY(_injected_loop_counter ++, 1 * (_injected_loop_counter ++))) << 0))
                  {
                   barrier();
                  }
                }
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) && true)));
         if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             for(int _injected_loop_counter = (0 | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
               if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false))))
                barrier();
              }
            }
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
        barrier();
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             barrier();
             if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))
              barrier();
            }
           else
            {
            }
          }
        }
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), _GLF_IDENTITY((false ? _GLF_FUZZED(-65394) : int(3)), ((false ? _GLF_FUZZED(-65394) : int(3))) | (_GLF_IDENTITY((false ? _GLF_FUZZED(-65394) : int(3)), int(ivec3((false ? _GLF_FUZZED(-65394) : int(3)), 0, (0 ^ 0))))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 | 1)); _injected_loop_counter ++)
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               barrier();
               if(_GLF_DEAD(false))
                barrier();
              }
             else
              {
              }
             if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec3(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
            }
          }
         else
          {
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               barrier();
              }
             else
              {
              }
            }
           else
            {
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
          {
           barrier();
          }
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
        barrier();
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
    }
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 uint workgroup_base = workgroup_size * workgroup_id;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, false || (true))))
    {
     barrier();
    }
   else
    {
    }
  }
 for(int _injected_loop_counter = int(_GLF_ZERO(_GLF_IDENTITY(0.0, min(0.0, 0.0)), injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < (((0 ^ 1) << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4)))); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, true && _GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), _GLF_IDENTITY((! ((false))) && true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && ((! ((false))) && true)))))), _GLF_IDENTITY(false, (false) && true), false)))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = int(_GLF_ONE(_GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(-6.3) : 1.0)), _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(4.5) : 1.0)))), injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > (-94726 & 0)); _injected_loop_counter --)
        {
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
          barrier();
         if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) || false)))
          {
          }
         else
          {
           barrier();
          }
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
        }
      }
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
  }
 uint subgroup_base = subgroup_id * subgroup_size;
 for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 uint virtual_gid = _GLF_IDENTITY(workgroup_base, (0u << _GLF_IDENTITY(uint(6u), uint(6u))) ^ (workgroup_base)) + subgroup_base + subgroup_local_id;
 uint next_virtual_gid = _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, (workgroup_base) ^ 0u) + _GLF_IDENTITY(subgroup_base, _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, (0u) ^ ((0u & 1597u) >> _GLF_IDENTITY(uint(6u), uint(6u))))) >> 0u) | (_GLF_IDENTITY(subgroup_base, (subgroup_base) | 0u))), 0u + (_GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_base, _GLF_IDENTITY(0u, (0u) >> 0u) | (_GLF_IDENTITY(subgroup_base, (subgroup_base) | 0u))), (workgroup_base + _GLF_IDENTITY(subgroup_base, _GLF_IDENTITY(0u, (0u) >> 0u) | (_GLF_IDENTITY(subgroup_base, (subgroup_base) | 0u)))) ^ 0u))) + ((subgroup_local_id + 1) % subgroup_size);
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y))) && _GLF_IDENTITY(true, bool(bvec4(_GLF_IDENTITY(true, ! (! (true))), true, true, true))))))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
      }
     else
      {
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     barrier();
    }
  }
 else
  {
  }
 uint read = atomicLoad(buf[virtual_gid], _GLF_IDENTITY(4, 0 | (_GLF_IDENTITY(4, (4) ^ 0))), 64, 2);
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, (false) || false), (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_DEAD(false)), bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_DEAD(false)))))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
          {
           barrier();
          }
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
      }
    }
  }
 else
  {
   for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x), float(mat2x3(_GLF_IDENTITY(clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x), float(mat4x2(clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x), abs(0.0), 0.0, 0.0, _GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(0.9)), bool(false))), 1.0, 0.0, 1.0))), 1.0, 0.0, 1.0, 1.0, 1.0)))))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(8.2) : _GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x), float(mat2x3(_GLF_IDENTITY(clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x), float(mat4x2(clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x), abs(0.0), 0.0, 0.0, _GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(0.9)), bool(_GLF_IDENTITY(false, ! (! (false)))))), 1.0, 0.0, 1.0))), 1.0, 0.0, 1.0, 1.0, 1.0))))))))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x), float(mat2x3(_GLF_IDENTITY(clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x), float(mat4x2(clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x), abs(0.0), 0.0, 0.0, _GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(0.9)), bool(false))), 1.0, 0.0, 1.0))), _GLF_IDENTITY(1.0, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(acos(-6354.6743)) : 1.0)), 0.0, 1.0, 1.0, 1.0))))))))))), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x), float(mat2x3(_GLF_IDENTITY(clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x), float(mat4x2(_GLF_IDENTITY(clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x), (true ? _GLF_IDENTITY(clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x), (clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) / 1.0) : _GLF_FUZZED(-5.2))), abs(0.0), 0.0, 0.0, _GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(0.9)), bool(false))), 1.0, 0.0, 1.0))), 1.0, 0.0, 1.0, 1.0, 1.0)))))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(8.2) : _GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x), float(mat2x3(_GLF_IDENTITY(clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x), float(mat4x2(clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x), abs(0.0), 0.0, 0.0, _GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(0.9)), bool(_GLF_IDENTITY(false, ! (! (false)))))), 1.0, 0.0, 1.0))), 1.0, 0.0, 1.0, 1.0, 1.0))))))))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x), float(mat2x3(_GLF_IDENTITY(clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x), _GLF_IDENTITY(float(mat4x2(clamp(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], max(injectionSwitch[1], injectionSwitch[1])))).x, injectionSwitch.x, injectionSwitch.x), abs(0.0), 0.0, 0.0, _GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(0.9)), bool(false))), 1.0, 0.0, 1.0)), (float(mat4x2(clamp(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], max(injectionSwitch[1], injectionSwitch[1])))).x, injectionSwitch.x, injectionSwitch.x), abs(0.0), 0.0, 0.0, _GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(0.9)), bool(false))), 1.0, 0.0, 1.0))) * 1.0)), _GLF_IDENTITY(1.0, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(acos(-6354.6743)) : 1.0)), 0.0, 1.0, 1.0, 1.0)))))))))))))); _GLF_IDENTITY(_injected_loop_counter --, _GLF_IDENTITY((_injected_loop_counter --), (true ? _GLF_IDENTITY((_injected_loop_counter --), ((_injected_loop_counter --)) >> 0) : _GLF_FUZZED(atomicMax(_injected_loop_counter, _injected_loop_counter)))) | 0))
    {
     if(_GLF_DEAD(false))
      barrier();
     if((subgroup_local_id % 2) == 0)
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _GLF_IDENTITY(_injected_loop_counter ++, 1 * (_injected_loop_counter ++)))
          {
           atomicStore(buf[next_virtual_gid], uint(1), 4, 64, 4);
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-6.0)), float(injectionSwitch.y), bool(_GLF_IDENTITY(true, bool(bvec3(true, false, false))))))))))
            barrier();
           if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
            barrier();
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (false)))))
              {
              }
             else
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
                  {
                   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(false, false || (false))))))
                    barrier();
                   barrier();
                  }
                }
              }
             if(_GLF_DEAD(false))
              barrier();
            }
           else
            {
            }
          }
         if(_GLF_DEAD(false))
          barrier();
        }
      }
     else
      {
       for(int _injected_loop_counter = _GLF_IDENTITY(_GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(_GLF_IDENTITY(-33750, (_GLF_IDENTITY(-33750, ~ (~ (-33750)))) ^ 0)))), (_GLF_IDENTITY(_GLF_IDENTITY(0, (_GLF_IDENTITY(true, ! (! (true))) ? 0 : _GLF_FUZZED(-33750))), int(_GLF_ZERO(_GLF_IDENTITY(0.0, max(0.0, _GLF_IDENTITY(0.0, max(0.0, 0.0)))), injectionSwitch.x)) ^ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(0, 0 + (0)), (_GLF_IDENTITY(true, ! (! (true))) ? 0 : _GLF_FUZZED(-33750))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(0, 0 + (0)), (_GLF_IDENTITY(true, ! (! (true))) ? 0 : _GLF_FUZZED(-33750))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(0, 0 + (0)), (_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, bool(bool(true)))))) ? 0 : _GLF_FUZZED(-33750))), _GLF_IDENTITY(_GLF_IDENTITY(0, 0 + (0)), (_GLF_IDENTITY(true, ! (! (true))) ? 0 : _GLF_FUZZED(-33750))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(0, 0 + (0)), 0 + (_GLF_IDENTITY(0, 0 + (0)))), (_GLF_IDENTITY(true, ! (! (true))) ? 0 : _GLF_FUZZED(-33750)))))) | (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(0, 0 + (0)), (_GLF_IDENTITY(true, ! (! (true))) ? 0 : _GLF_FUZZED(-33750))), min(_GLF_IDENTITY(_GLF_IDENTITY(0, 0 + (0)), (_GLF_IDENTITY(true, ! (! (true))) ? 0 : _GLF_FUZZED(-33750))), _GLF_IDENTITY(_GLF_IDENTITY(0, 0 + (0)), (_GLF_IDENTITY(true, ! (! (true))) ? 0 : _GLF_FUZZED(-33750)))))))))) >> (_GLF_IDENTITY(0, (false ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(0, ~ (~ (0))))) ^ 0)); _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, false || (true))))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, (true ? _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat4x3(injectionSwitch, _GLF_ONE(1.0, injectionSwitch.y), 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0), mat3(1.0) * (mat4x3(injectionSwitch, _GLF_ONE(1.0, injectionSwitch.y), 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, _GLF_IDENTITY(0.0, float(mat2x3(0.0, 0.0, sqrt(abs(1.0)), sin(0.0), 1.0, 1.0)))))))).x : _GLF_FUZZED(-97.94))) < injectionSwitch.y))))
            {
             atomicStore(buf[next_virtual_gid], uint(1), 4, _GLF_IDENTITY(_GLF_IDENTITY(64, _GLF_IDENTITY(_GLF_IDENTITY((true ? _GLF_IDENTITY(64, _GLF_IDENTITY(0, (0) | 0) + (64)) : _GLF_FUZZED(_injected_loop_counter)), max(_GLF_IDENTITY((true ? _GLF_IDENTITY(64, 0 + (64)) : _GLF_FUZZED(_injected_loop_counter)), (false ? _GLF_FUZZED(14817) : (true ? _GLF_IDENTITY(64, 0 + (64)) : _GLF_FUZZED(_injected_loop_counter)))), (true ? _GLF_IDENTITY(64, 0 + (64)) : _GLF_FUZZED(_injected_loop_counter)))), _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)) | (_GLF_IDENTITY(_GLF_IDENTITY((true ? _GLF_IDENTITY(64, 0 + (64)) : _GLF_FUZZED(_injected_loop_counter)), max(_GLF_IDENTITY((true ? _GLF_IDENTITY(64, 0 + (64)) : _GLF_FUZZED(_injected_loop_counter)), (false ? _GLF_FUZZED(14817) : (true ? _GLF_IDENTITY(64, 0 + (64)) : _GLF_FUZZED(_injected_loop_counter)))), (true ? _GLF_IDENTITY(64, 0 + (64)) : _GLF_FUZZED(_injected_loop_counter)))), max(_GLF_IDENTITY((true ? _GLF_IDENTITY(64, 0 + (64)) : _GLF_FUZZED(_injected_loop_counter)), max(_GLF_IDENTITY((true ? _GLF_IDENTITY(64, 0 + (64)) : _GLF_FUZZED(_injected_loop_counter)), (false ? _GLF_FUZZED(14817) : (true ? _GLF_IDENTITY(64, 0 + (64)) : _GLF_FUZZED(_injected_loop_counter)))), (true ? _GLF_IDENTITY(64, 0 + (64)) : _GLF_FUZZED(_injected_loop_counter)))), _GLF_IDENTITY((true ? _GLF_IDENTITY(64, 0 + (64)) : _GLF_FUZZED(_injected_loop_counter)), max(_GLF_IDENTITY((true ? _GLF_IDENTITY(64, 0 + (64)) : _GLF_FUZZED(_injected_loop_counter)), (false ? _GLF_FUZZED(14817) : (true ? _GLF_IDENTITY(64, 0 + (64)) : _GLF_FUZZED(_injected_loop_counter)))), (true ? _GLF_IDENTITY(64, 0 + (64)) : _GLF_FUZZED(_injected_loop_counter))))))), (int(_GLF_ZERO(0.0, injectionSwitch.x)) | (_GLF_IDENTITY(_GLF_IDENTITY((true ? _GLF_IDENTITY(64, 0 + _GLF_IDENTITY((64), min(_GLF_IDENTITY((64), max(_GLF_IDENTITY((64), max((64), (64))), (64))), (64)))) : _GLF_FUZZED(_injected_loop_counter)), max(_GLF_IDENTITY((true ? _GLF_IDENTITY(64, 0 + (64)) : _GLF_FUZZED(_injected_loop_counter)), (false ? _GLF_FUZZED(14817) : (_GLF_IDENTITY(true, ! (! (true))) ? _GLF_IDENTITY(64, _GLF_IDENTITY(0 + (64), (_GLF_IDENTITY(0 + (64), (0 + (64)) << 0)) ^ 0)) : _GLF_FUZZED(_injected_loop_counter)))), (true ? _GLF_IDENTITY(64, 0 + (64)) : _GLF_FUZZED(_injected_loop_counter)))), max(_GLF_IDENTITY((true ? _GLF_IDENTITY(64, 0 + (64)) : _GLF_FUZZED(_injected_loop_counter)), max(_GLF_IDENTITY((true ? _GLF_IDENTITY(64, 0 + (64)) : _GLF_FUZZED(_injected_loop_counter)), (false ? _GLF_IDENTITY(_GLF_FUZZED(14817), 0 ^ (_GLF_FUZZED(14817))) : (true ? _GLF_IDENTITY(_GLF_IDENTITY(64, 0 + (_GLF_IDENTITY(64, min(64, 64)))), min(_GLF_IDENTITY(64, 0 + (64)), _GLF_IDENTITY(64, 0 + (64)))) : _GLF_FUZZED(_injected_loop_counter)))), (true ? _GLF_IDENTITY(64, 0 + (64)) : _GLF_FUZZED(_injected_loop_counter)))), _GLF_IDENTITY((true ? _GLF_IDENTITY(64, _GLF_IDENTITY(0, 0 + (0)) + (64)) : _GLF_FUZZED(_injected_loop_counter)), max(_GLF_IDENTITY((true ? _GLF_IDENTITY(64, 0 + (64)) : _GLF_FUZZED(_injected_loop_counter)), (false ? _GLF_FUZZED(14817) : (true ? _GLF_IDENTITY(64, 0 + (64)) : _GLF_FUZZED(_injected_loop_counter)))), (true ? _GLF_IDENTITY(64, 0 + (64)) : _GLF_FUZZED(_injected_loop_counter)))))))) / 1))), clamp(64, _GLF_IDENTITY(64, (64) >> 0), _GLF_IDENTITY(_GLF_IDENTITY(64, _GLF_IDENTITY(clamp(64, 64, 64), (_GLF_IDENTITY(clamp(64, 64, 64), max(clamp(64, 64, 64), clamp(64, 64, 64)))) >> (0 ^ 0))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(64, _GLF_IDENTITY(clamp(64, 64, 64), (_GLF_IDENTITY(clamp(64, 64, 64), max(clamp(64, 64, 64), clamp(64, 64, 64)))) >> (0 ^ 0)))), (~ (_GLF_IDENTITY(64, _GLF_IDENTITY(clamp(64, 64, 64), (_GLF_IDENTITY(clamp(64, 64, 64), max(clamp(64, 64, 64), clamp(64, 64, 64)))) >> (0 ^ 0))))) - 0))))), _GLF_IDENTITY(4, (4) | 0));
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(mat3x2(injectionSwitch, 0.0, 1.0, 1.0, 0.0))).y))))
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 do
                  {
                   barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
               else
                {
                }
               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                }
               else
                {
                }
              }
            }
           else
            {
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
          }
         else
          {
          }
         do
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             do
              {
               for(int _injected_loop_counter = (1 ^ _GLF_IDENTITY(1, (1) / 1)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                {
                 barrier();
                }
               if(_GLF_DEAD(false))
                barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
             if(_GLF_DEAD(false))
              barrier();
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0)))))
          {
           for(int _injected_loop_counter = (((1 & 1) << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4))); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 << _GLF_IDENTITY(int(1), int(1)))); _injected_loop_counter --)
            {
             barrier();
             if(_GLF_DEAD(false))
              barrier();
            }
          }
        }
       if(_GLF_DEAD(false))
        barrier();
      }
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(false, ! (! (false)))))))
  {
  }
 else
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     subgroupBarrier();
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), (_GLF_IDENTITY(false, ! (! (false)))) && true))))))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, false || (false))))
        {
        }
       else
        {
         barrier();
         if(_GLF_DEAD(false))
          {
           do
            {
             barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y))))))))
              barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
      }
    }
   else
    {
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     barrier();
    }
   else
    {
    }
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! _GLF_IDENTITY((true), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((true), true && ((true)))), true && (! _GLF_IDENTITY((_GLF_IDENTITY((true), true && ((true)))), ! (! (_GLF_IDENTITY((_GLF_IDENTITY((true), true && ((true)))), (_GLF_IDENTITY((_GLF_IDENTITY((true), true && ((true)))), bool(bvec3((_GLF_IDENTITY((true), true && ((true)))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)))) || false)))))))), bool(bool(! _GLF_IDENTITY((true), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((true), true && ((true)))), true && (! _GLF_IDENTITY((_GLF_IDENTITY((true), true && ((true)))), ! (! (_GLF_IDENTITY((_GLF_IDENTITY((true), true && ((true)))), (_GLF_IDENTITY((_GLF_IDENTITY((true), true && ((true)))), bool(bvec3((_GLF_IDENTITY((true), true && ((true)))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)))) || false)))))))))))))))
  {
   do
    {
     do
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               do
                {
                 if(_GLF_DEAD(false))
                  barrier();
                }
               while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), ! (! (_GLF_WRAPPED_LOOP(false))))))));
              }
             if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) || false)))
              {
               barrier();
              }
             else
              {
              }
            }
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             do
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(mat2x4(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), 1.0, tan(0.0), 0.0, 0.0, _GLF_IDENTITY(dot(vec3(0.0, 0.0, 1.0), vec3(0.0, 0.0, 1.0)), dot(vec3(0.0, 0.0, 1.0), vec3(0.0, 0.0, 1.0))), 0.0, 0.0)), clamp(float(mat2x4(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), 1.0, tan(_GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(81.46)))), 0.0, 0.0, _GLF_IDENTITY(dot(vec3(0.0, 0.0, 1.0), vec3(0.0, 0.0, 1.0)), dot(vec3(0.0, 0.0, 1.0), vec3(0.0, 0.0, 1.0))), 0.0, 0.0)), float(mat2x4(_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).x, injectionSwitch.x)), 1.0, tan(0.0), 0.0, 0.0, _GLF_IDENTITY(dot(vec3(0.0, 0.0, 1.0), vec3(0.0, 0.0, 1.0)), dot(vec3(0.0, 0.0, 1.0), vec3(0.0, _GLF_IDENTITY(0.0, clamp(_GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, min(0.0, 0.0)), 0.0)), 0.0, _GLF_IDENTITY(0.0, 0.0 + (0.0)))), 1.0))), 0.0, 0.0)), float(mat2x4(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), 1.0, tan(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-7772.8371)), bool(false)))), 0.0, 0.0, _GLF_IDENTITY(dot(vec3(0.0, 0.0, 1.0), _GLF_IDENTITY(vec3(0.0, 0.0, 1.0), (vec3(0.0, 0.0, 1.0)) * mat3(1.0))), dot(vec3(0.0, 0.0, 1.0), vec3(0.0, 0.0, 1.0))), 0.0, 0.0))))) > injectionSwitch.y))))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_DEAD(false))
                  barrier();
                 barrier();
                 if(_GLF_DEAD(false))
                  barrier();
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, false || _GLF_IDENTITY((true), ((true)) || false))))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 barrier();
                 if(_GLF_DEAD(false))
                  barrier();
                }
               else
                {
                }
              }
            }
           else
            {
            }
           do
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (true)))))
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
                barrier();
               do
                {
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    {
                     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (false)))))
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y))))
                        barrier();
                      }
                     else
                      {
                       barrier();
                      }
                    }
                   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), ! (! (_GLF_WRAPPED_IF_FALSE(false)))))
                    {
                    }
                   else
                    {
                     barrier();
                    }
                  }
                 else
                  {
                  }
                }
               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
              }
             else
              {
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
      }
     else
      {
      }
    }
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
        {
         if(_GLF_DEAD(false))
          barrier();
         do
          {
           do
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), true && (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) && true)))))), (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), false || (_GLF_WRAPPED_IF_FALSE(false)))))) && true))
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 barrier();
                }
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 barrier();
                }
               if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false)))))))
                barrier();
               if(_GLF_DEAD(false))
                barrier();
              }
             else
              {
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 do
                  {
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), (_GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false)), (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false)), (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))), bool(bool(bool(bool(_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))), _GLF_IDENTITY(true, (true) && true) && (_GLF_IDENTITY((injectionSwitch.x < _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))), ! (! ((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)))))))))))))))) && true))))
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        barrier();
                       barrier();
                      }
                    }
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
                {
                 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                  {
                   barrier();
                  }
                }
               if(_GLF_DEAD(false))
                barrier();
               barrier();
               do
                {
                 if(_GLF_DEAD(false))
                  {
                   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                    {
                     barrier();
                    }
                  }
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                }
               else
                {
                 barrier();
                 if(_GLF_DEAD(false))
                  barrier();
                }
              }
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y))));
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true))));
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = (0 | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7)))); _injected_loop_counter ++)
          {
           barrier();
          }
        }
      }
    }
  }
 else
  {
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   do
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           barrier();
          }
        }
      }
     else
      {
      }
     for(int _injected_loop_counter = _GLF_IDENTITY(1, min(1, 1)); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 | 0)); _injected_loop_counter --)
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) + 0))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)))))
            barrier();
           do
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (! ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(injectionSwitch.x > injectionSwitch.y, false, true, false)))))), (_GLF_IDENTITY(! (! ((injectionSwitch.x > injectionSwitch.y))), (! (! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y)))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))) && true))))))));
           for(int _injected_loop_counter = (-31578 & (0 | (0 ^ 0))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
            {
             barrier();
            }
          }
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
  }
 do
  {
   atomicStore(checker[virtual_gid], _GLF_IDENTITY(_GLF_IDENTITY(read, uint(uvec3(read, _GLF_IDENTITY(1u, clamp(1u, 1u, 1u)), 0u))), min(_GLF_IDENTITY(read, uint(uvec3(read, _GLF_IDENTITY(1u, clamp(1u, 1u, 1u)), 0u))), _GLF_IDENTITY(read, uint(uvec3(read, _GLF_IDENTITY(1u, clamp(1u, 1u, 1u)), 0u))))), 4, 64, 4);
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     barrier();
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END
BUFFER checker DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected_checker DATA_TYPE uint32 SIZE 8388096 FILL 0

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 
  BIND BUFFER checker AS storage DESCRIPTOR_SET 0 BINDING 2 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT checker EQ_BUFFER expected_checker
