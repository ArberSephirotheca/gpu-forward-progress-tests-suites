#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_33 {
 vec4 _f0;
 mat4x3 _f1;
 mat4x3 _f2;
 bool _f3;
 uint _f4;
 uint _f5;
} ;

struct _GLF_struct_32 {
 mat2x4 _f0;
 ivec3 _f1;
 mat4x3 _f2;
} ;

struct _GLF_struct_34 {
 _GLF_struct_32 _f0;
 _GLF_struct_33 _f1;
 mat2x4 _f2;
 uvec2 _f3;
 bool _f4;
 bvec3 _f5;
} ;

struct _GLF_struct_30 {
 mat2 _f0;
 mat4 _f1;
 vec2 _f2;
} ;

struct _GLF_struct_29 {
 bool _f0;
 mat3 _f1;
 mat4x3 _f2;
 uvec2 _f3;
 uvec3 _f4;
 mat3x4 _f5;
 mat4x2 _f6;
} ;

struct _GLF_struct_28 {
 ivec4 _f0;
} ;

struct _GLF_struct_27 {
 vec3 _f0;
 mat4 _f1;
 mat4 _f2;
 uvec2 _f3;
 uint _f4;
} ;

struct _GLF_struct_31 {
 _GLF_struct_27 _f0;
 int _f1;
 _GLF_struct_28 _f2;
 mat2x4 _f3;
 mat2x3 _f4;
 _GLF_struct_29 _f5;
 _GLF_struct_30 _f6;
} ;

struct _GLF_struct_25 {
 ivec3 _f0;
 uvec3 _f1;
 ivec2 _f2;
} ;

struct _GLF_struct_24 {
 uint _f0;
 int _f1;
 int _f2;
 vec2 _f3;
 mat4x2 _f4;
 int _f5;
 bool _f6;
} ;

struct _GLF_struct_23 {
 uint _f0;
} ;

struct _GLF_struct_22 {
 uint _f0;
 bvec3 _f1;
} ;

struct _GLF_struct_26 {
 ivec2 _f0;
 _GLF_struct_22 _f1;
 mat4x3 _f2;
 _GLF_struct_23 _f3;
 mat3x4 _f4;
 _GLF_struct_24 _f5;
 _GLF_struct_25 _f6;
} ;

struct _GLF_struct_20 {
 mat3 _f0;
 uvec2 _f1;
 ivec2 _f2;
 mat4x2 _f3;
 uint _f4;
 uvec3 _f5;
} ;

struct _GLF_struct_21 {
 mat4x2 _f0;
 _GLF_struct_20 _f1;
 uint _f2;
} ;

struct _GLF_struct_18 {
 vec3 _f0;
 ivec2 _f1;
 bvec2 _f2;
 uint virtual_gid;
} ;

struct _GLF_struct_17 {
 bvec3 _f0;
} ;

struct _GLF_struct_19 {
 _GLF_struct_17 _f0;
 uvec2 _f1;
 _GLF_struct_18 _f2;
} ;

struct _GLF_struct_35 {
 _GLF_struct_19 _f0;
 mat3 _f1;
 _GLF_struct_21 _f2;
 _GLF_struct_26 _f3;
 _GLF_struct_31 _f4;
 _GLF_struct_34 _f5;
} ;

struct _GLF_struct_14 {
 mat4 _f0;
 bvec3 _f1;
 vec4 _f2;
 mat3x4 _f3;
 uint _f4;
 ivec2 _f5;
 float _f6;
} ;

struct _GLF_struct_13 {
 uint _f0;
 ivec4 _f1;
 uvec3 _f2;
 mat2 _f3;
 uvec3 _f4;
 vec3 _f5;
 int _f6;
} ;

struct _GLF_struct_15 {
 _GLF_struct_13 _f0;
 _GLF_struct_14 _f1;
 float _f2;
} ;

struct _GLF_struct_11 {
 mat3 _f0;
 mat2x3 _f1;
 bvec2 _f2;
 ivec3 _f3;
 uint _f4;
 mat4x3 _f5;
 ivec2 _f6;
} ;

struct _GLF_struct_12 {
 bvec3 _f0;
 _GLF_struct_11 _f1;
 ivec4 _f2;
 mat2 _f3;
} ;

struct _GLF_struct_9 {
 mat2x4 _f0;
 mat2 _f1;
 float _f2;
 mat3x2 _f3;
} ;

struct _GLF_struct_8 {
 uint _f0;
 vec2 _f1;
 ivec2 _f2;
 mat3 _f3;
 mat2x3 _f4;
 mat2x4 _f5;
 vec4 _f6;
} ;

struct _GLF_struct_7 {
 mat2x4 _f0;
 mat4 _f1;
 mat4 _f2;
 uvec2 _f3;
 vec3 _f4;
 vec2 _f5;
} ;

struct _GLF_struct_10 {
 _GLF_struct_7 _f0;
 _GLF_struct_8 _f1;
 uint _f2;
 mat3x2 _f3;
 vec2 _f4;
 bool _f5;
 _GLF_struct_9 _f6;
} ;

struct _GLF_struct_16 {
 _GLF_struct_10 _f0;
 uint _f1;
 _GLF_struct_12 _f2;
 int _f3;
 _GLF_struct_15 _f4;
 float _f5;
 uint workgroup_id;
} ;

struct _GLF_struct_4 {
 bvec2 _f0;
} ;

struct _GLF_struct_3 {
 uvec3 _f0;
 ivec4 _f1;
 mat3x4 _f2;
} ;

struct _GLF_struct_5 {
 float _f0;
 _GLF_struct_3 _f1;
 mat4x3 _f2;
 _GLF_struct_4 _f3;
} ;

struct _GLF_struct_1 {
 ivec3 _f0;
} ;

struct _GLF_struct_0 {
 ivec3 _f0;
 uint _f1;
 uvec3 _f2;
} ;

struct _GLF_struct_2 {
 mat4x2 _f0;
 vec4 _f1;
 _GLF_struct_0 _f2;
 _GLF_struct_1 _f3;
 uvec3 _f4;
 ivec4 _f5;
} ;

struct _GLF_struct_6 {
 uint subgroup_base;
 _GLF_struct_2 _f0;
 bool _f1;
 uvec3 _f2;
 bvec4 _f3;
 _GLF_struct_5 _f4;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     for(int _injected_loop_counter = (-86046 & (0 << _GLF_IDENTITY(int(3), int(3)))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
        }
       else
        {
        }
      }
    }
   do
    {
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = _GLF_IDENTITY(gl_NumWorkGroups.x, max(gl_NumWorkGroups.x, gl_NumWorkGroups.x));
 if(_GLF_DEAD(false))
  barrier();
 uint workgroup_size = gl_WorkGroupSize.x;
 _GLF_struct_16 _GLF_struct_replacement_16 = _GLF_struct_16(_GLF_struct_10(_GLF_struct_7(mat2x4(_GLF_IDENTITY(1.0, float(_GLF_IDENTITY(float(1.0), _GLF_IDENTITY(min(float(1.0), float(1.0)), (true ? min(float(1.0), float(1.0)) : _GLF_FUZZED(-5.7))))))), mat4(1.0), mat4(1.0), uvec2(1u), vec3(1.0), vec2(1.0)), _GLF_struct_8(1u, vec2(1.0), ivec2(1), mat3(1.0), mat2x3(1.0), mat2x4(1.0), vec4(1.0)), 1u, mat3x2(1.0), _GLF_IDENTITY(vec2(1.0), max(vec2(_GLF_IDENTITY(_GLF_IDENTITY(1.0, min(1.0, 1.0)), clamp(_GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, (1.0) - 0.0), _GLF_IDENTITY(1.0, min(1.0, 1.0)))), 1.0, _GLF_IDENTITY(1.0, max(1.0, 1.0))))), _GLF_IDENTITY(vec2(1.0), min(vec2(1.0), vec2(1.0))))), true, _GLF_struct_9(mat2x4(_GLF_IDENTITY(1.0, (true ? _GLF_IDENTITY(1.0, _GLF_IDENTITY((_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0))), clamp((_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0))), (_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0))), (_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0))))) * 1.0) : _GLF_FUZZED(2855.8601)))), mat2(1.0), 1.0, mat3x2(1.0))), 1u, _GLF_struct_12(bvec3(true), _GLF_struct_11(mat3(1.0), mat2x3(1.0), _GLF_IDENTITY(bvec2(true), bvec2(bvec2(bvec2(true)))), ivec3(1), _GLF_IDENTITY(1u, (1u) | (1u)), mat4x3(1.0), ivec2(1)), ivec4(1), mat2(1.0)), _GLF_IDENTITY(1, 0 ^ (1)), _GLF_struct_15(_GLF_struct_13(1u, ivec4(1), _GLF_IDENTITY(uvec3(1u), _GLF_IDENTITY(uvec3(_GLF_IDENTITY(uvec3(_GLF_IDENTITY(uvec3(1u), (_GLF_IDENTITY(uvec3(1u), uvec3(uvec3(uvec3(1u))))) - uvec3(0u, 0u, 0u))), (uvec3(_GLF_IDENTITY(uvec3(1u), (_GLF_IDENTITY(uvec3(1u), uvec3(uvec3(uvec3(1u))))) - uvec3(0u, 0u, 0u)))) | (uvec3(_GLF_IDENTITY(uvec3(1u), (_GLF_IDENTITY(uvec3(1u), uvec3(uvec3(uvec3(1u))))) - uvec3(0u, 0u, 0u)))))), max(uvec3(_GLF_IDENTITY(uvec3(_GLF_IDENTITY(uvec3(1u), (_GLF_IDENTITY(uvec3(1u), uvec3(uvec3(uvec3(1u))))) - uvec3(0u, 0u, 0u))), (uvec3(_GLF_IDENTITY(uvec3(1u), (_GLF_IDENTITY(uvec3(1u), uvec3(uvec3(uvec3(1u))))) - uvec3(0u, 0u, 0u)))) | (uvec3(_GLF_IDENTITY(uvec3(1u), (_GLF_IDENTITY(uvec3(1u), uvec3(uvec3(uvec3(1u))))) - uvec3(0u, 0u, 0u)))))), uvec3(_GLF_IDENTITY(uvec3(_GLF_IDENTITY(uvec3(1u), (_GLF_IDENTITY(uvec3(1u), uvec3(uvec3(uvec3(1u))))) - uvec3(0u, 0u, 0u))), (uvec3(_GLF_IDENTITY(uvec3(1u), (_GLF_IDENTITY(uvec3(1u), uvec3(uvec3(uvec3(1u))))) - uvec3(0u, 0u, 0u)))) | (uvec3(_GLF_IDENTITY(uvec3(1u), (_GLF_IDENTITY(uvec3(1u), uvec3(uvec3(uvec3(1u))))) - uvec3(0u, 0u, 0u))))))))), mat2(1.0), uvec3(1u), vec3(1.0), 1), _GLF_struct_14(mat4(1.0), bvec3(true), vec4(1.0), mat3x4(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0))), 1u, ivec2(1), 1.0), 1.0), 1.0, _GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID.x, clamp(gl_WorkGroupID.x, _GLF_IDENTITY(gl_WorkGroupID.x, min(gl_WorkGroupID.x, gl_WorkGroupID.x)), gl_WorkGroupID.x)), uint(uvec4(gl_WorkGroupID.x, 1u, 1u, 0u))));
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     barrier();
    }
  }
 uint workgroup_base = workgroup_size * _GLF_IDENTITY(_GLF_struct_replacement_16.workgroup_id, (_GLF_struct_replacement_16.workgroup_id) | 0u);
 _GLF_struct_6 _GLF_struct_replacement_6 = _GLF_struct_6(subgroup_id * subgroup_size, _GLF_struct_2(mat4x2(1.0), vec4(1.0), _GLF_struct_0(_GLF_IDENTITY(ivec3(1), _GLF_IDENTITY((ivec3(1)) | ivec3(0, 0, 0), ((ivec3(1)) | ivec3(0, 0, 0)) << (ivec3(0, 0, 0) | (ivec3(0, _GLF_IDENTITY(0, max(0, 0)), 0) >> _GLF_IDENTITY(ivec3(3), ivec3(3)))))), 1u, uvec3(1u)), _GLF_struct_1(ivec3(1)), uvec3(1u), ivec4(1)), true, uvec3(1u), bvec4(_GLF_IDENTITY(true, bool(bvec3(_GLF_IDENTITY(true, false || (true)), true, true)))), _GLF_struct_5(1.0, _GLF_struct_3(uvec3(1u), ivec4(1), mat3x4(1.0)), mat4x3(1.0), _GLF_struct_4(bvec2(true))));
 _GLF_struct_35 _GLF_struct_replacement_35 = _GLF_struct_35(_GLF_struct_19(_GLF_struct_17(bvec3(true)), uvec2(_GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, min(1u, 1u))) | (1u))), _GLF_struct_18(vec3(_GLF_IDENTITY(1.0, float(_GLF_IDENTITY(mat2x4(1.0, 0.0, 0.0, tan(log(1.0)), determinant(mat2(1.0, 0.0, 0.0, 1.0)), 1.0, 1.0, 0.0), (true ? _GLF_IDENTITY(mat2x4(1.0, 0.0, 0.0, tan(log(1.0)), determinant(mat2(1.0, 0.0, 0.0, 1.0)), 1.0, 1.0, 0.0), transpose(transpose(mat2x4(1.0, 0.0, 0.0, tan(log(1.0)), determinant(mat2(1.0, 0.0, 0.0, 1.0)), 1.0, 1.0, 0.0)))) : _GLF_FUZZED(mat2x4(55.47, 53.25, 72.10, -2.2, -1.9, -58.65, -1.3, -3.2))))))), ivec2(_GLF_IDENTITY(1, clamp(1, 1, _GLF_IDENTITY(1, max(_GLF_IDENTITY(1, (1) | 0), 1))))), bvec2(true), _GLF_IDENTITY(workgroup_base, _GLF_IDENTITY((workgroup_base), min(_GLF_IDENTITY((workgroup_base), ((workgroup_base)) / 1u), _GLF_IDENTITY((workgroup_base), min((workgroup_base), (workgroup_base))))) | 0u) + _GLF_struct_replacement_6.subgroup_base + _GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, max(_GLF_IDENTITY(subgroup_local_id, uint(uvec2(subgroup_local_id, 1u))), subgroup_local_id)), 0u ^ (_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | (subgroup_local_id))) >> 0u))))), _GLF_IDENTITY(mat3(_GLF_IDENTITY(1.0, (1.0) - 0.0)), mat3(1.0) * (mat3(_GLF_IDENTITY(1.0, (1.0) - 0.0)))), _GLF_struct_21(mat4x2(1.0), _GLF_struct_20(mat3(1.0), uvec2(1u), ivec2(1), mat4x2(1.0), 1u, uvec3(1u)), 1u), _GLF_struct_26(ivec2(1), _GLF_struct_22(1u, bvec3(true)), mat4x3(1.0), _GLF_struct_23(1u), mat3x4(1.0), _GLF_struct_24(1u, 1, 1, vec2(1.0), mat4x2(1.0), _GLF_IDENTITY(1, (1) >> 0), true), _GLF_struct_25(_GLF_IDENTITY(ivec3(1), clamp(ivec3(1), ivec3(1), ivec3(1))), uvec3(1u), ivec2(1))), _GLF_struct_31(_GLF_struct_27(vec3(1.0), mat4(1.0), mat4(1.0), uvec2(1u), 1u), 1, _GLF_struct_28(ivec4(1)), mat2x4(1.0), mat2x3(1.0), _GLF_struct_29(true, mat3(1.0), mat4x3(1.0), uvec2(1u), uvec3(1u), mat3x4(1.0), mat4x2(1.0)), _GLF_struct_30(mat2(1.0), mat4(1.0), vec2(1.0))), _GLF_struct_34(_GLF_struct_32(mat2x4(1.0), ivec3(1), mat4x3(1.0)), _GLF_struct_33(vec4(1.0), mat4x3(1.0), mat4x3(1.0), true, 1u, 1u), mat2x4(1.0), uvec2(1u), true, bvec3(true)));
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(false, bool(bool(false))) || (false))), false || (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(false, bool(bool(false))) || (false))), ! (! (_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(false, bool(bool(false))) || _GLF_IDENTITY((false), true && ((false)))))))))))
      {
       if(_GLF_DEAD(false))
        {
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], clamp(_GLF_IDENTITY(injectionSwitch[1], min(injectionSwitch[1], injectionSwitch[1])), injectionSwitch[1], injectionSwitch[1])))).y)), true && (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-1.2, 334.975)) : injectionSwitch)).y)), _GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || ((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) && true))))))));
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       do
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, 0.0 + (_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0)))))))
        barrier();
      }
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 uint next_virtual_gid = workgroup_base + _GLF_struct_replacement_6.subgroup_base + ((subgroup_local_id + 1) % subgroup_size);
 uint read = atomicLoad(buf[_GLF_IDENTITY(_GLF_struct_replacement_35._f0._f2.virtual_gid, clamp(_GLF_struct_replacement_35._f0._f2.virtual_gid, _GLF_IDENTITY(_GLF_struct_replacement_35._f0._f2.virtual_gid, uint(_GLF_IDENTITY(uvec3(_GLF_struct_replacement_35._f0._f2.virtual_gid, 0u, 1u), uvec3(1u, 1u, 1u) * (uvec3(_GLF_struct_replacement_35._f0._f2.virtual_gid, 0u, 1u))))), _GLF_struct_replacement_35._f0._f2.virtual_gid))], 4, 64, _GLF_IDENTITY(2, clamp(2, 2, 2)));
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      barrier();
     do
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, false || (true))))
      {
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = _GLF_IDENTITY((int(_GLF_ZERO(_GLF_IDENTITY(0.0, (0.0) / round(length(normalize(vec3(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y)))))), injectionSwitch.x)) >> _GLF_IDENTITY(int(4), int(4))), int(ivec2(_GLF_IDENTITY((int(_GLF_ZERO(_GLF_IDENTITY(0.0, (0.0) / round(length(normalize(vec3(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y)))))), injectionSwitch.x)) >> _GLF_IDENTITY(int(4), int(4))), max(_GLF_IDENTITY((int(_GLF_ZERO(_GLF_IDENTITY(0.0, (0.0) / round(length(normalize(vec3(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y)))))), injectionSwitch.x)) >> _GLF_IDENTITY(int(4), int(4))), clamp((int(_GLF_ZERO(_GLF_IDENTITY(0.0, (0.0) / round(length(normalize(vec3(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y)))))), injectionSwitch.x)) >> _GLF_IDENTITY(int(4), int(4))), (int(_GLF_ZERO(_GLF_IDENTITY(0.0, (0.0) / round(length(normalize(vec3(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y)))))), injectionSwitch.x)) >> _GLF_IDENTITY(int(4), int(4))), (int(_GLF_ZERO(_GLF_IDENTITY(0.0, (0.0) / round(length(normalize(vec3(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y)))))), injectionSwitch.x)) >> _GLF_IDENTITY(int(4), int(4))))), (int(_GLF_ZERO(_GLF_IDENTITY(0.0, (0.0) / round(length(normalize(vec3(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y)))))), injectionSwitch.x)) >> _GLF_IDENTITY(int(4), int(4))))), 1))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
          {
           barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
        }
       if((subgroup_local_id % 2) == 0)
        {
         if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), true && (_GLF_WRAPPED_IF_TRUE(true))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(float(injectionSwitch.x)), (float(float(injectionSwitch.x))) - 0.0)) > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(false, _GLF_IDENTITY(true && (_GLF_IDENTITY(false, (false) || false)), ! (! (true && (_GLF_IDENTITY(false, (false) || false)))))) ? _GLF_FUZZED(-3.0) : injectionSwitch.y))) || false)) && true)))))
            {
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
                {
                 for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 << _GLF_IDENTITY(int(2), int(_GLF_IDENTITY(2, int(int(_GLF_IDENTITY(2, (_GLF_IDENTITY(2, (2) ^ 0)) << 0)))))))); _injected_loop_counter --)
                  {
                   barrier();
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
                  barrier();
                }
              }
             barrier();
            }
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             do
              {
               if(_GLF_DEAD(false))
                barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           else
            {
            }
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         atomicStore(buf[next_virtual_gid], uint(1), 4, 64, 4);
         do
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
          {
           do
            {
             do
              {
               barrier();
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y))));
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
       else
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
          barrier();
         for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _GLF_IDENTITY(_injected_loop_counter ++, 0 ^ (_injected_loop_counter ++)))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), true && (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false), _GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false)))))))))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (! (false)))))))
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(true, (_GLF_IDENTITY(true, ! (! (true)))) || false) && (false))))
                barrier();
               barrier();
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0)))))
                barrier();
              }
             for(int _injected_loop_counter = (1 | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
              {
               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                }
               else
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_DEAD(false))
                  barrier();
                }
              }
             if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(false, true && (false)))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(false, _GLF_IDENTITY(true, bool(bvec3(true, true, false))) && (false))))))))
              {
               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (_GLF_IDENTITY(injectionSwitch, vec2(mat2x3(injectionSwitch, 0.0, 0.0, 1.0, 1.0))))).x, float(_GLF_IDENTITY(mat2(_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (_GLF_IDENTITY(injectionSwitch, vec2(mat2x3(injectionSwitch, 0.0, 0.0, 1.0, 1.0))))).x, 1.0, 1.0, 0.0), mat2(_GLF_IDENTITY(mat3x4(mat2(_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (_GLF_IDENTITY(injectionSwitch, vec2(mat2x3(injectionSwitch, 0.0, 0.0, 1.0, 1.0))))).x, 1.0, 1.0, 0.0)), transpose(transpose(mat3x4(mat2(_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (_GLF_IDENTITY(injectionSwitch, vec2(mat2x3(injectionSwitch, 0.0, 0.0, 1.0, 1.0))))).x, 1.0, 1.0, 0.0))))))))) > injectionSwitch.y))))
                {
                }
               else
                {
                 if(_GLF_DEAD(false))
                  {
                   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5)))); _injected_loop_counter ++)
                    {
                     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                      {
                       barrier();
                      }
                     else
                      {
                      }
                    }
                  }
                 if(_GLF_DEAD(false))
                  barrier();
                }
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 barrier();
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y))))))
                barrier();
              }
             barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bvec2(false, false)))))
              {
              }
             else
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 barrier();
                }
              }
            }
           for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
            {
             atomicStore(buf[next_virtual_gid], uint(1), 4, 64, 4);
            }
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false), false))), ! (! (_GLF_FALSE(_GLF_IDENTITY(false, bool(bool(false))), (_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(-861.397) : injectionSwitch.x)) > injectionSwitch.y))))))), _GLF_IDENTITY(_GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0), _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))))))) && _GLF_IDENTITY(true, false || (true)), bool(_GLF_IDENTITY(bvec2((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && _GLF_IDENTITY(true, false || (true)), true), bvec2(bvec4(bvec2((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && _GLF_IDENTITY(true, false || (true)), true), true, true))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0), _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))))))) && _GLF_IDENTITY(true, false || (true)), bool(bvec3((_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0), _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))))))) && _GLF_IDENTITY(true, false || (true)), true, false))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && _GLF_IDENTITY(true, false || (true)), true), bvec2(bvec4(bvec2((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && _GLF_IDENTITY(true, false || (true)), true), true, true)))), (bool(_GLF_IDENTITY(bvec2((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && _GLF_IDENTITY(true, false || (true)), true), bvec2(bvec4(bvec2((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && _GLF_IDENTITY(true, false || (true)), true), true, true))))) && true)), (_GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0), _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))))))) && _GLF_IDENTITY(_GLF_IDENTITY(true, (true) || false), false || (true)), bool(_GLF_IDENTITY(bvec2((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && _GLF_IDENTITY(true, false || (true)), true), bvec2(bvec4(bvec2(_GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && _GLF_IDENTITY(true, false || (true)), false || (_GLF_IDENTITY((_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-9.2)), bool(false))) > injectionSwitch.y))) && _GLF_IDENTITY(true, false || (true)), bool(bvec4((_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(279.813)), float(injectionSwitch.y), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))) && _GLF_IDENTITY(true, false || (true)), false, false, false))))), true), true, true)))))) || false)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0), _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))))))) && _GLF_IDENTITY(true, false || (true)), bool(_GLF_IDENTITY(bvec2((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && _GLF_IDENTITY(true, false || (true)), true), bvec2(bvec4(bvec2((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && _GLF_IDENTITY(true, false || (true)), true), true, true))))), (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0), _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))))))) && _GLF_IDENTITY(true, false || (true)), false || (_GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0), _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))))))) && _GLF_IDENTITY(true, false || (true)), ! (_GLF_IDENTITY(! ((_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0), _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))))))) && _GLF_IDENTITY(true, false || (true))), (! ((_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0), _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))))))) && _GLF_IDENTITY(true, false || (true)))) || false))))), bool(_GLF_IDENTITY(bvec2((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && _GLF_IDENTITY(true, false || (true)), true), _GLF_IDENTITY(bvec2(bvec4(bvec2((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && _GLF_IDENTITY(true, false || (true)), true), true, true)), bvec2(_GLF_IDENTITY(bvec2(bvec2(bvec4(bvec2((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && _GLF_IDENTITY(true, false || (true)), true), true, true))), _GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec3(bvec2(bvec2(bvec4(bvec2((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && _GLF_IDENTITY(true, false || (true)), true), true, true))), true), bvec3(bvec4(bvec3(bvec2(bvec2(bvec4(bvec2((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && _GLF_IDENTITY(true, false || (true)), true), true, true))), true), false)))), bvec2(bvec4(bvec2(_GLF_IDENTITY(bvec3(bvec2(bvec2(bvec4(bvec2((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && _GLF_IDENTITY(true, false || (true)), true), true, true))), true), bvec3(bvec4(bvec3(bvec2(bvec2(bvec4(bvec2((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && _GLF_IDENTITY(true, false || (true)), true), true, true))), true), false)))), true, true)))))))))) || false)), _GLF_IDENTITY(! (! (! (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0), _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))))))) && _GLF_IDENTITY(true, false || (true)), bool(_GLF_IDENTITY(bvec2((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && _GLF_IDENTITY(true, false || (true)), true), bvec2(bvec4(bvec2((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && _GLF_IDENTITY(true, false || (true)), true), true, true))))), (_GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0), _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))))))) && _GLF_IDENTITY(true, false || (true)), bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec2((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && _GLF_IDENTITY(true, false || _GLF_IDENTITY((true), ((true)) && true)), true), bvec2(_GLF_IDENTITY(bvec3(bvec2((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && _GLF_IDENTITY(true, false || _GLF_IDENTITY((true), ((true)) && true)), true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec3(bvec4(bvec3(bvec2((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && _GLF_IDENTITY(true, false || _GLF_IDENTITY((true), ((true)) && true)), true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true))))), bvec2(bvec4(bvec2((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && _GLF_IDENTITY(true, false || (true)), true), true, true)))))) || false)))), false || (! (! (! (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0), _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)))), (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0), _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)))), ! (! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0), _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)))))))) && true)))) && _GLF_IDENTITY(true, false || (true)), bool(_GLF_IDENTITY(bvec2((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && _GLF_IDENTITY(true, false || (true)), true), bvec2(bvec4(bvec2((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && _GLF_IDENTITY(true, false || (true)), true), true, true))))), (_GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0), _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))))))) && _GLF_IDENTITY(true, false || (true)), bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec2((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && _GLF_IDENTITY(true, false || _GLF_IDENTITY((true), ((true)) && true)), true), bvec2(_GLF_IDENTITY(bvec3(bvec2((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && _GLF_IDENTITY(true, false || _GLF_IDENTITY((true), ((true)) && true)), true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec3(bvec4(bvec3(bvec2((_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(_GLF_IDENTITY(mat4x3(injectionSwitch, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0), mat3(1.0) * (mat4x3(injectionSwitch, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0)))), clamp(vec2(_GLF_IDENTITY(mat4x3(injectionSwitch, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0), mat3(1.0) * (mat4x3(injectionSwitch, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0)))), vec2(_GLF_IDENTITY(mat4x3(injectionSwitch, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0), mat3(1.0) * (mat4x3(injectionSwitch, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0)))), vec2(_GLF_IDENTITY(mat4x3(injectionSwitch, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0), mat3(1.0) * (mat4x3(injectionSwitch, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0))))))).x, mix(float(_GLF_FUZZED(5394.1359)), float(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(_GLF_IDENTITY(mat4x3(injectionSwitch, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0), mat3(1.0) * (mat4x3(injectionSwitch, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0)))), clamp(vec2(_GLF_IDENTITY(mat4x3(injectionSwitch, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0), mat3(1.0) * (mat4x3(injectionSwitch, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0)))), vec2(_GLF_IDENTITY(mat4x3(injectionSwitch, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0), mat3(1.0) * (mat4x3(injectionSwitch, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0)))), vec2(_GLF_IDENTITY(mat4x3(injectionSwitch, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0), mat3(1.0) * (mat4x3(injectionSwitch, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0))))))).x), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) > injectionSwitch.y))) && _GLF_IDENTITY(true, false || _GLF_IDENTITY((true), ((true)) && true)), true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true))))), bvec2(bvec4(bvec2((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && _GLF_IDENTITY(true, false || (true)), true), true, true)))))) || false)))))))), (! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0), min(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0), _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0))), _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))))))) && _GLF_IDENTITY(true, false || (true)), bool(_GLF_IDENTITY(bvec2((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && _GLF_IDENTITY(true, false || (true)), true), bvec2(bvec4(bvec2((_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))) && _GLF_IDENTITY(true, false || (true)), true), true, true))))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0), _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))))))) && _GLF_IDENTITY(true, false || (true)), _GLF_IDENTITY(bool(bvec3((_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0), _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))))))) && _GLF_IDENTITY(true, false || (true)), false, false)), bool(bvec4(bool(bvec3((_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0), _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))))))) && _GLF_IDENTITY(true, false || (true)), false, false)), true, true, true)))), false || (_GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0), _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))))))) && _GLF_IDENTITY(true, false || (true)), ! (_GLF_IDENTITY(! ((_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0), _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], (injectionSwitch[1]) - 0.0))).y, injectionSwitch.y, injectionSwitch.y))))))) && _GLF_IDENTITY(true, false || (true))), (! ((_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, float(mat2x4(injectionSwitch.y, 0.0, 0.0, 0.0, 1.0, 0.0, log(1.0), 0.0))), (injectionSwitch.y) + 0.0), _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))))))) && _GLF_IDENTITY(true, false || (true)))) || false))))), bool(_GLF_IDENTITY(bvec2((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && _GLF_IDENTITY(true, false || (true)), true), _GLF_IDENTITY(bvec2(bvec4(bvec2((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && _GLF_IDENTITY(true, _GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), (bool(false)) || false))) || (true)), true), true, true)), bvec2(_GLF_IDENTITY(bvec2(bvec2(bvec4(bvec2((_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(mat2(injectionSwitch, 0.0, 1.0))))).x > injectionSwitch.y))) && _GLF_IDENTITY(true, false || (true)), true), true, true))), _GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec3(bvec2(bvec2(bvec4(bvec2((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && _GLF_IDENTITY(true, false || (true)), true), true, true))), true), bvec3(bvec4(bvec3(bvec2(bvec2(bvec4(bvec2((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && _GLF_IDENTITY(true, false || (true)), true), true, true))), true), false)))), bvec2(bvec4(bvec2(_GLF_IDENTITY(bvec3(bvec2(bvec2(bvec4(bvec2(_GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && _GLF_IDENTITY(true, false || (true)), ! (! (_GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && _GLF_IDENTITY(true, false || (true)), true && ((_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)) && _GLF_IDENTITY(true, _GLF_IDENTITY(false, bool(bool(false))) || (true))))))), true), true, _GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), (! (true)) && true))))))))), true), _GLF_IDENTITY(bvec3(bvec4(bvec3(bvec2(bvec2(bvec4(bvec2((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && _GLF_IDENTITY(true, _GLF_IDENTITY(false || (true), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(false || (true), (_GLF_IDENTITY(false || (true), ! (! (false || (true))))) && true), true, false, true)), (bool(bvec4(_GLF_IDENTITY(false || (true), (_GLF_IDENTITY(false || (true), ! (! (false || (true))))) && true), true, false, true))) && true))), true), true, true))), true), false)), bvec3(bvec3(bvec3(bvec4(bvec3(bvec2(bvec2(bvec4(bvec2((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && _GLF_IDENTITY(true, _GLF_IDENTITY(false || (true), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(false || (true), (_GLF_IDENTITY(false || (true), ! (! (false || (true))))) && true), true, false, true)), (bool(bvec4(_GLF_IDENTITY(false || (true), (_GLF_IDENTITY(false || (true), ! (! (false || (true))))) && true), true, false, true))) && true))), true), true, true))), true), false))))))), true, true)))))))))) || false)), _GLF_IDENTITY(! (! (! (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0), _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))))))) && _GLF_IDENTITY(true, false || (true)), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (_GLF_IDENTITY(! ((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), _GLF_IDENTITY(bool(bvec4(! ((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false, true, false)), true && (bool(bvec4(! ((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false, true, false))))))) && _GLF_IDENTITY(true, false || (true)), true), bvec2(bvec4(bvec2((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && _GLF_IDENTITY(true, false || (true)), true), true, true))))), (_GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0), _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))))))) && _GLF_IDENTITY(true, _GLF_IDENTITY(false || (true), (false || (true)) || false)), bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec2((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && _GLF_IDENTITY(true, false || _GLF_IDENTITY((true), ((true)) && true)), true), bvec2(_GLF_IDENTITY(bvec3(bvec2((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && _GLF_IDENTITY(true, false || _GLF_IDENTITY((true), ((true)) && true)), true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec3(bvec4(bvec3(bvec2((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && _GLF_IDENTITY(true, false || _GLF_IDENTITY((true), ((true)) && true)), true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true))))), bvec2(bvec4(bvec2((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && _GLF_IDENTITY(true, false || (true)), true), true, true)))))) || false)))), false || (! (! (! (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0), (_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0)) * 1.0), _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)))), (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0), _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)))), ! (! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0), _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y, injectionSwitch.y)))))))) && true)))) && _GLF_IDENTITY(true, false || (true)), bool(_GLF_IDENTITY(bvec2((_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y))) && _GLF_IDENTITY(true, _GLF_IDENTITY(false, bool(bvec2(false, false))) || (_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec2(true, false), bvec2(_GLF_IDENTITY(bvec3(bvec2(true, false), true), bvec3(bvec4(bvec3(bvec2(true, false), true), true))))))))), true), bvec2(bvec4(bvec2((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && _GLF_IDENTITY(true, false || (true)), true), true, true))))), (_GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0), _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)))), 0.0 + (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0), _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)))), mix(float(_GLF_FUZZED(-210.097)), float(_GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0), _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))))), bool(true)))))))) && _GLF_IDENTITY(true, false || (true)), bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec2((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && _GLF_IDENTITY(true, false || _GLF_IDENTITY((true), ((true)) && true)), true), bvec2(_GLF_IDENTITY(bvec3(bvec2((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && _GLF_IDENTITY(true, false || _GLF_IDENTITY((true), ((true)) && true)), true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec3(bvec4(bvec3(bvec2(_GLF_IDENTITY((_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(_GLF_IDENTITY(mat4x3(injectionSwitch, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0), mat3(1.0) * (mat4x3(injectionSwitch, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0)))), clamp(vec2(_GLF_IDENTITY(mat4x3(injectionSwitch, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0), mat3(1.0) * (mat4x3(injectionSwitch, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0)))), vec2(_GLF_IDENTITY(mat4x3(injectionSwitch, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0), mat3(1.0) * (mat4x3(injectionSwitch, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0)))), vec2(_GLF_IDENTITY(mat4x3(injectionSwitch, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0), mat3(1.0) * (mat4x3(injectionSwitch, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0))))))).x, mix(float(_GLF_FUZZED(5394.1359)), float(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(_GLF_IDENTITY(mat4x3(injectionSwitch, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0), mat3(1.0) * (mat4x3(injectionSwitch, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0)))), clamp(vec2(_GLF_IDENTITY(mat4x3(injectionSwitch, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0), mat3(1.0) * (mat4x3(injectionSwitch, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0)))), vec2(_GLF_IDENTITY(mat4x3(injectionSwitch, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0), mat3(1.0) * (mat4x3(injectionSwitch, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0)))), vec2(_GLF_IDENTITY(mat4x3(injectionSwitch, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0), mat3(1.0) * (mat4x3(injectionSwitch, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0))))))).x), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) > injectionSwitch.y))) && _GLF_IDENTITY(true, false || _GLF_IDENTITY((true), ((true)) && true)), ((_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(_GLF_IDENTITY(mat4x3(injectionSwitch, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0), mat3(1.0) * (mat4x3(injectionSwitch, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0)))), clamp(vec2(_GLF_IDENTITY(mat4x3(injectionSwitch, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0), mat3(1.0) * (mat4x3(injectionSwitch, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0)))), vec2(_GLF_IDENTITY(mat4x3(injectionSwitch, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0), mat3(1.0) * (mat4x3(injectionSwitch, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0)))), vec2(_GLF_IDENTITY(mat4x3(injectionSwitch, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0), mat3(1.0) * (mat4x3(injectionSwitch, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0))))))).x, mix(float(_GLF_IDENTITY(_GLF_FUZZED(5394.1359), max(_GLF_FUZZED(5394.1359), _GLF_FUZZED(5394.1359)))), _GLF_IDENTITY(float(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(_GLF_IDENTITY(mat4x3(injectionSwitch, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0), mat3(1.0) * (mat4x3(injectionSwitch, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0)))), clamp(vec2(_GLF_IDENTITY(mat4x3(injectionSwitch, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0), mat3(1.0) * (mat4x3(injectionSwitch, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0)))), _GLF_IDENTITY(vec2(_GLF_IDENTITY(mat4x3(injectionSwitch, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, _GLF_IDENTITY(0.0, clamp(0.0, _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(-6.0) : 0.0)), 0.0)), 0.0, 1.0), mat3(1.0) * (mat4x3(injectionSwitch, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0)))), vec2(1.0, 1.0) * (vec2(_GLF_IDENTITY(mat4x3(injectionSwitch, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, _GLF_IDENTITY(0.0, clamp(0.0, _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(-6.0) : 0.0)), 0.0)), 0.0, 1.0), mat3(1.0) * (mat4x3(injectionSwitch, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0)))))), vec2(_GLF_IDENTITY(mat4x3(injectionSwitch, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0), mat3(1.0) * (mat4x3(injectionSwitch, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0))))))).x), (_GLF_IDENTITY(float(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(_GLF_IDENTITY(mat4x3(injectionSwitch, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0), mat3(1.0) * (mat4x3(injectionSwitch, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0)))), clamp(vec2(_GLF_IDENTITY(mat4x3(injectionSwitch, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0), mat3(1.0) * (mat4x3(injectionSwitch, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0)))), _GLF_IDENTITY(vec2(_GLF_IDENTITY(mat4x3(injectionSwitch, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, _GLF_IDENTITY(0.0, clamp(0.0, _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(-6.0) : 0.0)), 0.0)), 0.0, 1.0), mat3(1.0) * (mat4x3(injectionSwitch, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0)))), vec2(1.0, 1.0) * (vec2(_GLF_IDENTITY(mat4x3(injectionSwitch, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, _GLF_IDENTITY(0.0, clamp(0.0, _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(-6.0) : 0.0)), 0.0)), 0.0, 1.0), mat3(1.0) * (mat4x3(injectionSwitch, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0)))))), vec2(_GLF_IDENTITY(mat4x3(injectionSwitch, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0), mat3(1.0) * (mat4x3(injectionSwitch, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0))))))).x), min(float(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(_GLF_IDENTITY(mat4x3(injectionSwitch, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0), mat3(1.0) * (mat4x3(injectionSwitch, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0)))), clamp(vec2(_GLF_IDENTITY(mat4x3(injectionSwitch, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0), mat3(1.0) * (mat4x3(injectionSwitch, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0)))), _GLF_IDENTITY(vec2(_GLF_IDENTITY(mat4x3(injectionSwitch, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, _GLF_IDENTITY(0.0, clamp(0.0, _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(-6.0) : 0.0)), 0.0)), 0.0, 1.0), mat3(1.0) * (mat4x3(injectionSwitch, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0)))), vec2(1.0, 1.0) * (vec2(_GLF_IDENTITY(mat4x3(injectionSwitch, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, _GLF_IDENTITY(0.0, clamp(0.0, _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(-6.0) : 0.0)), 0.0)), 0.0, 1.0), mat3(1.0) * (mat4x3(injectionSwitch, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0)))))), vec2(_GLF_IDENTITY(mat4x3(injectionSwitch, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0), mat3(1.0) * (mat4x3(injectionSwitch, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0))))))).x), float(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(_GLF_IDENTITY(mat4x3(injectionSwitch, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0), mat3(1.0) * (mat4x3(injectionSwitch, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0)))), clamp(vec2(_GLF_IDENTITY(mat4x3(injectionSwitch, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0), mat3(1.0) * (mat4x3(injectionSwitch, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0)))), _GLF_IDENTITY(vec2(_GLF_IDENTITY(mat4x3(injectionSwitch, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, _GLF_IDENTITY(0.0, clamp(0.0, _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(-6.0) : 0.0)), 0.0)), 0.0, 1.0), mat3(1.0) * (mat4x3(injectionSwitch, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0)))), vec2(1.0, 1.0) * (vec2(_GLF_IDENTITY(mat4x3(injectionSwitch, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, _GLF_IDENTITY(0.0, clamp(0.0, _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(-6.0) : 0.0)), 0.0)), 0.0, 1.0), mat3(1.0) * (mat4x3(injectionSwitch, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0)))))), vec2(_GLF_IDENTITY(mat4x3(injectionSwitch, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0), mat3(1.0) * (mat4x3(injectionSwitch, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0))))))).x)))) - 0.0), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) > injectionSwitch.y))) && _GLF_IDENTITY(true, false || _GLF_IDENTITY((true), ((true)) && true))) && true), true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true))))), bvec2(bvec4(bvec2((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && _GLF_IDENTITY(true, false || (true)), true), true, true)))))) || false))))))))) || false))))))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(_GLF_IDENTITY(false, true && _GLF_IDENTITY((false), ! (! (_GLF_IDENTITY((false), ((false)) && true)))))))
          barrier();
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           do
            {
             barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         else
          {
          }
         if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false)))))), false)), false || (bool(bvec2(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false)))))), false))))), (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
      }
     else
      {
      }
    }
  }
 else
  {
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   do
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 ^ 1)); _injected_loop_counter ++)
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             do
              {
               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                {
                 do
                  {
                   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec2(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true)))))))
                    barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                }
               else
                {
                }
               barrier();
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     barrier();
                    }
                   else
                    {
                    }
                  }
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   for(int _injected_loop_counter = (0 & (97413 >> _GLF_IDENTITY((37863 - 4265), ~ (~ (_GLF_IDENTITY((37863 - 4265), ~ (~ ((37863 - 4265))))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
                    {
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                      }
                     else
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        {
                         if(_GLF_WRAPPED_IF_FALSE(false))
                          {
                          }
                         else
                          {
                           do
                            {
                             if(_GLF_WRAPPED_IF_FALSE(false))
                              {
                              }
                             else
                              {
                               barrier();
                              }
                            }
                           while(_GLF_WRAPPED_LOOP(false));
                          }
                        }
                      }
                     if(_GLF_DEAD(false))
                      barrier();
                     do
                      {
                       barrier();
                      }
                     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, true && (false))));
                    }
                  }
                }
               else
                {
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           else
            {
            }
          }
        }
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   subgroupBarrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 for(int _injected_loop_counter = _GLF_IDENTITY((1 ^ ((1 << _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(5), int(5)), int(ivec3(_GLF_IDENTITY(int(5), int(5)), 1, 0))), (_GLF_IDENTITY(_GLF_IDENTITY(int(5), int(_GLF_IDENTITY(5, (_GLF_IDENTITY(_GLF_IDENTITY(false ? _GLF_FUZZED(-67914) : _GLF_IDENTITY(_GLF_IDENTITY(5, (_GLF_IDENTITY(5, 0 ^ (_GLF_IDENTITY(5, _GLF_IDENTITY(_GLF_IDENTITY(int(ivec4(5, 1, 0, 0)), int(_GLF_IDENTITY(int(int(ivec4(5, 1, 0, 0))), 0 | (int(int(ivec4(5, 1, 0, 0))))))), (int(ivec4(5, 1, 0, 0))) ^ 0))))) | (_GLF_IDENTITY(5, (5) | (_GLF_IDENTITY(5, (true ? _GLF_IDENTITY(5, (_GLF_IDENTITY(5, min(5, 5))) - 0) : _GLF_FUZZED(63121))))))), (5) | 0), min(false ? _GLF_FUZZED(-67914) : _GLF_IDENTITY(_GLF_IDENTITY(5, (_GLF_IDENTITY(5, 0 ^ (_GLF_IDENTITY(5, _GLF_IDENTITY(_GLF_IDENTITY(int(ivec4(5, 1, 0, 0)), int(_GLF_IDENTITY(int(int(ivec4(5, 1, 0, 0))), 0 | (int(int(ivec4(5, 1, 0, 0))))))), (int(ivec4(5, 1, 0, 0))) ^ 0))))) | (_GLF_IDENTITY(5, (5) | (_GLF_IDENTITY(5, (true ? _GLF_IDENTITY(5, (_GLF_IDENTITY(5, min(5, 5))) - 0) : _GLF_FUZZED(63121))))))), (5) | 0), false ? _GLF_FUZZED(-67914) : _GLF_IDENTITY(_GLF_IDENTITY(5, (_GLF_IDENTITY(5, 0 ^ (_GLF_IDENTITY(5, _GLF_IDENTITY(_GLF_IDENTITY(int(ivec4(5, 1, 0, 0)), int(_GLF_IDENTITY(int(int(ivec4(5, 1, 0, 0))), 0 | (int(int(ivec4(5, 1, 0, 0))))))), (int(ivec4(5, 1, 0, 0))) ^ 0))))) | (_GLF_IDENTITY(5, (5) | (_GLF_IDENTITY(5, (true ? _GLF_IDENTITY(5, (_GLF_IDENTITY(5, min(5, 5))) - 0) : _GLF_FUZZED(63121))))))), (5) | 0))), ~ (_GLF_IDENTITY(~ (false ? _GLF_FUZZED(-67914) : _GLF_IDENTITY(_GLF_IDENTITY(5, (_GLF_IDENTITY(5, 0 ^ (_GLF_IDENTITY(5, _GLF_IDENTITY(int(ivec4(5, 1, 0, 0)), (int(ivec4(5, 1, 0, 0))) ^ 0))))) | (_GLF_IDENTITY(5, (5) | (_GLF_IDENTITY(5, (true ? 5 : _GLF_FUZZED(63121))))))), (5) | 0)), (~ (false ? _GLF_IDENTITY(_GLF_FUZZED(-67914), clamp(_GLF_IDENTITY(_GLF_FUZZED(-67914), int(ivec3(_GLF_FUZZED(-67914), 1, 1))), _GLF_FUZZED(-67914), _GLF_FUZZED(-67914))) : _GLF_IDENTITY(_GLF_IDENTITY(5, (_GLF_IDENTITY(5, 0 ^ (_GLF_IDENTITY(5, _GLF_IDENTITY(int(ivec4(5, 1, 0, 0)), (int(ivec4(5, 1, 0, 0))) ^ 0))))) | (_GLF_IDENTITY(5, (5) | (_GLF_IDENTITY(5, (_GLF_IDENTITY(true, (_GLF_IDENTITY(true, (_GLF_IDENTITY(true, bool(bvec2(true, false)))) || false)) && true) ? 5 : _GLF_FUZZED(63121))))))), (5) | 0))) * 1))))))), (_GLF_IDENTITY(int(5), int(5))) ^ 0)) | 0)) >> _GLF_IDENTITY(int(_GLF_IDENTITY(5, max(5, 5))), int(5)))), ((1 ^ ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (_GLF_IDENTITY(int(5), max(int(5), int(5)))) | _GLF_IDENTITY(0, min(0, 0)))), (_GLF_IDENTITY(_GLF_IDENTITY(int(5), int(_GLF_IDENTITY(5, (false ? _GLF_FUZZED(-67914) : _GLF_IDENTITY(_GLF_IDENTITY(5, (_GLF_IDENTITY(5, _GLF_IDENTITY(0, (0) | 0) ^ (5))) | (_GLF_IDENTITY(5, (5) | (_GLF_IDENTITY(5, _GLF_IDENTITY((true ? 5 : _GLF_FUZZED(63121)), clamp((true ? 5 : _GLF_FUZZED(63121)), (true ? 5 : _GLF_FUZZED(63121)), (true ? 5 : _GLF_FUZZED(63121))))))))), (5) | _GLF_IDENTITY(0, _GLF_IDENTITY(0, (_GLF_IDENTITY(0, 0 ^ (0))) | 0) ^ (_GLF_IDENTITY(0, (0) >> 0)))))))), (_GLF_IDENTITY(int(_GLF_IDENTITY(5, (5) + 0)), int(5))) ^ 0)) | 0)) >> _GLF_IDENTITY(int(_GLF_IDENTITY(5, max(5, 5))), int(5))))) - 0); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))), (_injected_loop_counter != ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7)))) || false)); _GLF_IDENTITY(_injected_loop_counter ++, 0 | (_injected_loop_counter ++)))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (true)))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           do
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (false)))))
              {
              }
             else
              {
               do
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   barrier();
                  }
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   atomicStore(checker[_GLF_struct_replacement_35._f0._f2.virtual_gid], read, _GLF_IDENTITY(4, (4) | (_GLF_IDENTITY(4, 1 * (4)))), 64, 4);
                  }
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
              }
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                     barrier();
                    }
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                }
              }
             else
              {
              }
             if(_GLF_DEAD(false))
              barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, true && (false)))))))
            {
             for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 | 0)); _injected_loop_counter --)
              {
               barrier();
              }
            }
           if(_GLF_DEAD(false))
            barrier();
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (_GLF_IDENTITY(0 << _GLF_IDENTITY(int(1), int(1)), max(0 << _GLF_IDENTITY(int(1), int(1)), 0 << _GLF_IDENTITY(int(1), int(1)))))); _injected_loop_counter --)
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(31.51)), float(injectionSwitch.y), bool(true)))))))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             else
              {
              }
            }
          }
        }
      }
     else
      {
      }
    }
   else
    {
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END
BUFFER checker DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected_checker DATA_TYPE uint32 SIZE 8388096 FILL 0

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 
  BIND BUFFER checker AS storage DESCRIPTOR_SET 0 BINDING 2 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT checker EQ_BUFFER expected_checker
