#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = workgroup_size * workgroup_id;
 uint subgroup_base = subgroup_id * subgroup_size;
 uint virtual_gid = workgroup_base + subgroup_base + subgroup_local_id;
 uint next_virtual_gid = workgroup_base + subgroup_base + ((subgroup_local_id + 1) % subgroup_size);
 uint read = atomicLoad(buf[virtual_gid], 4, 64, 2);
 if((subgroup_local_id % 2) == 0)
  {
   atomicStore(buf[next_virtual_gid], uint(1), 4, 64, 4);
  }
 else
  {
   switch(_GLF_SWITCH(0))
    {
     case 68:
     for(     ivec2(-60051, 21369);
 false; radians(vec3(-5836.0840, -17.84, -4.1)))
      {
       if((-237.175 >= max(63.88, 1291.3603)))
        {
         mat3x4 _GLF_SWITCH_0_0v, _GLF_SWITCH_0_1v;
        }
       sinh(vec3(4989.2833, 174.079, -1.7));
       for(bvec3 _GLF_SWITCH_0_2v[19], _GLF_SWITCH_0_3v; false; uvec4(uvec3(196598u, 79556u, 86232u), workgroup_size))
        {
         {
          bvec2(true, true);
          ;
          bvec3(false, true, false);
          mat4x3(-757.238, -94.65, -36.16, 4.0, 7.6, -5.5, 7.2, -1.8, 95.86, -1.8, 62.83, 39.46);
          mat2 _GLF_SWITCH_0_4v[92], _GLF_SWITCH_0_5v, _GLF_SWITCH_0_6v[21];
          mat3(1.0, -3138.5912, -8.3, 7.7, 81.22, -494.774, 6.4, 3.9, -701.814);
         }
         while(((uvec3(60023u, 142169u, 60925u) ^ 110624u) == uvec3(19185u, 165577u, 197984u)))
          {
           bvec3(false, bvec2(true, true));
           int _GLF_SWITCH_0_7v[48];
           mat4 _GLF_SWITCH_0_8v;
           bool _GLF_SWITCH_0_9v, _GLF_SWITCH_0_10v, _GLF_SWITCH_0_11v;
           float _GLF_SWITCH_0_12v, _GLF_SWITCH_0_13v, _GLF_SWITCH_0_14v;
           mat4(mat3x4(vec4(9711.0853, 98.42, -1.8, 3529.8766), vec4(-7984.1721, 6.6, -251.146, 26.24), vec4(-0.0, -2293.0506, -6.0, -18.56)));
           float _GLF_SWITCH_0_15v, _GLF_SWITCH_0_16v, _GLF_SWITCH_0_17v[11];
           (virtual_gid ^ uvec2(103769u, 14828u));
          }
         mat4(-89.65, -391.561, -5564.8843, 999.564, 51.44, 4.8, -1948.6118, 93.10, -125.183, -24.61, 45.49, -947.741, -2.5, 2.3, -9797.8763, 1.7);
         while((mat4(-586.225, 900.951, -89.93, 610.360, -5430.8060, -4.6, 8.5, -4.8, 279.057, -3055.2968, -1721.6636, 165.460, 9.3, 76.87, 2.1, -978.912) != mat4(-93.46, -1459.2220, 8.0, -491.112, -9588.7681, 8465.2535, -7821.1212, -6.3, -55.82, -46.64, 58.60, -2.8, -3421.9096, -281.301, 10.56, 85.02)))
          {
           ivec2(14162, -81145);
           bvec4(true, true, true, true);
           mat2x3 _GLF_SWITCH_0_18v, _GLF_SWITCH_0_19v, _GLF_SWITCH_0_20v;
          }
         mat2x3 _GLF_SWITCH_0_21v[24], _GLF_SWITCH_0_22v;
         (mat2x4(8.7, 3587.1854, 21.71, -0.1, 156.778, -0.2, 30.47, 1785.1396));
         if(any(bvec4(true, true, true, true)))
          {
           bool _GLF_SWITCH_0_23v;
           mat4x2(mat4(2843.4999, 8.0, -7.3, 8023.2187, -3347.8594, 7.1, 7684.3839, 8847.3675, 3.5, -877.555, 9.9, 5.6, -46.58, -949.263, -60.62, -9.8));
           uvec4(76471u, 4951u, 192623u, 96589u);
           (97659 + ivec4(-9151, 45244, 42426, 75047));
           lessThanEqual(ivec3(-48624, 24410, 48987), findLSB(ivec3(72517, -97345, -16705)));
           ivec3(26417, 2550, 81938);
           floor(vec4(-41.81, 69.23, 69.51, 4.8));
           ;
           14.30;
          }
         else
          {
           bvec4 _GLF_SWITCH_0_24v[73], _GLF_SWITCH_0_25v, _GLF_SWITCH_0_26v;
          }
         do
          {
           mat4(-5.2, -21.01, -718.867, -3462.7914, 217.625, 687.758, 95.34, 1.5, 41.22, 6531.2065, 13.87, 67.31, -4.2, -2.9, -6.9, 27.69);
           mat2 _GLF_SWITCH_0_27v[61];
           ivec2(3479, -9216);
           ivec4 _GLF_SWITCH_0_28v, _GLF_SWITCH_0_29v[97], _GLF_SWITCH_0_30v;
           vec4 _GLF_SWITCH_0_31v[85], _GLF_SWITCH_0_32v, _GLF_SWITCH_0_33v;
           ;
           _GLF_SWITCH_0_30v;
           _GLF_SWITCH_0_30v;
          }
         while(any(bvec2(true, false)));
        }
      }
     case 0:
     case 26:
     atomicStore(buf[next_virtual_gid], uint(1), 4, 64, 4);
     break;
     case 64:
     mat2 _GLF_SWITCH_0_34v, _GLF_SWITCH_0_35v, _GLF_SWITCH_0_36v;
     default:
     1;
    }
  }
 subgroupBarrier();
 atomicStore(checker[virtual_gid], read, 4, 64, 4);
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END
BUFFER checker DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected_checker DATA_TYPE uint32 SIZE 8388096 FILL 0

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 
  BIND BUFFER checker AS storage DESCRIPTOR_SET 0 BINDING 2 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT checker EQ_BUFFER expected_checker
