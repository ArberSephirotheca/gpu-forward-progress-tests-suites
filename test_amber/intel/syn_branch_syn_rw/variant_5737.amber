#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(false))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   for(int _injected_loop_counter = _GLF_IDENTITY(0, clamp(0, 0, _GLF_IDENTITY(0, ~ (~ (0))))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     barrier();
    }
  }
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) && true))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y, min(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y))))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   for(int _injected_loop_counter = (0 ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), bool(bvec4(! (_GLF_DEAD(false)), true, true, false))))))
      barrier();
    }
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)), injectionSwitch)).y, max(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)), injectionSwitch)).y, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)), injectionSwitch)).y, float(mat3x4(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)), injectionSwitch)).y, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, _GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, max(0.0, 0.0))) / 1.0), 0.0, 1.0, _GLF_IDENTITY(abs(0.0), (false ? _GLF_FUZZED(1.8) : abs(0.0))), 0.0)))))))))
  {
   do
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
   barrier();
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(false))
  {
   do
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, (false) || false), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(injectionSwitch.x > injectionSwitch.y, false, false), bvec3(bvec4(bvec3(injectionSwitch.x > injectionSwitch.y, false, false), true)))), bool(bool(bool(_GLF_IDENTITY(bvec3(injectionSwitch.x > injectionSwitch.y, false, false), bvec3(bvec4(bvec3(injectionSwitch.x > injectionSwitch.y, false, false), true)))))))))), (_GLF_FALSE(_GLF_IDENTITY(false, (false) || false), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(injectionSwitch.x > injectionSwitch.y, false, false), bvec3(bvec4(bvec3(injectionSwitch.x > injectionSwitch.y, false, false), true)))), bool(bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(injectionSwitch.x > injectionSwitch.y, false, false), bvec3(bvec4(bvec3(injectionSwitch.x > injectionSwitch.y, false, false), true))), bvec3(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(injectionSwitch.x > injectionSwitch.y, false, false), bvec3(bvec4(bvec3(injectionSwitch.x > injectionSwitch.y, false, false), true))), bvec3(bvec3(_GLF_IDENTITY(bvec3(injectionSwitch.x > injectionSwitch.y, false, false), bvec3(bvec4(bvec3(injectionSwitch.x > injectionSwitch.y, false, false), true))))))))))))))))) || false)))
      barrier();
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 do
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > 0, (_injected_loop_counter > 0) && true)); _injected_loop_counter --)
        {
         barrier();
        }
      }
     else
      {
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 do
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 << _GLF_IDENTITY(int(4), int(_GLF_IDENTITY(4, ~ (~ (4))))))); _injected_loop_counter --)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(_GLF_IDENTITY(bvec3((injectionSwitch.x > injectionSwitch.y), false, false), bvec3(bvec4(_GLF_IDENTITY(bvec3((injectionSwitch.x > injectionSwitch.y), false, false), bvec3(bvec4(bvec3((injectionSwitch.x > injectionSwitch.y), false, false), true))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))))
      barrier();
     if(_GLF_DEAD(false))
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         do
          {
           if(_GLF_DEAD(false))
            {
             do
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
             barrier();
            }
           if(_GLF_DEAD(false))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))));
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), true && ((false))))) || (injectionSwitch.x > injectionSwitch.y)), false, true), bvec3(bvec3(bvec3(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)))), _GLF_IDENTITY(false, (false) || false), true))))), ! (! (bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y)), false, true), bvec3(bvec3(bvec3(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(false, false, true, false))) || (injectionSwitch.x > injectionSwitch.y), false || (_GLF_IDENTITY(false || (injectionSwitch.x > injectionSwitch.y), (false || (injectionSwitch.x > injectionSwitch.y)) || false)))), false, true)))))))))))))
            barrier();
           do
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
              barrier();
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
           barrier();
          }
         else
          {
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) || false)))
            {
             barrier();
            }
           else
            {
            }
          }
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             do
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 do
                  {
                   barrier();
                   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true))))
                    barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))), (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(tanh(floor(-986.270))) : _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y))))))) && true)));
                 if(_GLF_DEAD(false))
                  barrier();
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           else
            {
            }
          }
        }
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, false), _GLF_IDENTITY(bvec3(bvec3(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, false))), bvec3(bvec4(bvec3(bvec3(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, false))), false))))), bool(bool(bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, false)))))))))));
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = _GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) - uvec3(0u, 0u, 0u)).x;
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])) : _GLF_FUZZED(vec2(-6.2, 749.430)))).x > injectionSwitch.y))))
          barrier();
        }
      }
    }
   else
    {
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 uint workgroup_base = workgroup_size * workgroup_id;
 uint subgroup_base = subgroup_id * subgroup_size;
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     barrier();
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     barrier();
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) || false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY((injectionSwitch.y), mix(float((injectionSwitch.y)), float(_GLF_FUZZED(-670.882)), bool(false))) - 0.0), injectionSwitch.y))))))
            barrier();
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
        }
      }
    }
   else
    {
    }
  }
 uint virtual_gid = _GLF_IDENTITY(workgroup_base + subgroup_base, min(workgroup_base + subgroup_base, workgroup_base + subgroup_base)) + _GLF_IDENTITY(subgroup_local_id, 0u + (_GLF_IDENTITY(subgroup_local_id, 1u * (subgroup_local_id))));
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 uint next_virtual_gid = workgroup_base + subgroup_base + ((subgroup_local_id + 1) % subgroup_size);
 uint read = atomicLoad(_GLF_IDENTITY(buf[virtual_gid], _GLF_IDENTITY((buf[virtual_gid]), 0u | ((buf[virtual_gid]))) + 0u), 4, 64, 2);
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false || (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), false || (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))
      {
       barrier();
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   if((_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | (subgroup_local_id)))) % 2) == 0)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(float(injectionSwitch.y))), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(injectionSwitch.x > injectionSwitch.y, false)))), ! (! ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(injectionSwitch.x > injectionSwitch.y, false)))))))), true, true, false)))))) && _GLF_IDENTITY(_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bool(true), ! (! (bool(true)))))), (_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bool(true), ! (! (bool(true))))))) || false)), ! (! (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(float(injectionSwitch.y))), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec3(9.1, -6.1, 3.2).bg))).x) + sqrt(0.0)))) > injectionSwitch.y, _GLF_IDENTITY(false, (false) && true) || (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x > injectionSwitch.y))), ((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY((injectionSwitch.x) + sqrt(0.0), min((injectionSwitch.x) + sqrt(0.0), (injectionSwitch.x) + sqrt(0.0)))))) > injectionSwitch.y, _GLF_IDENTITY(false, (false) && true) || (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], clamp(injectionSwitch[1], injectionSwitch[1], injectionSwitch[1])))).x > injectionSwitch.y)))) && true) && _GLF_IDENTITY(_GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, (true) && true))), bool(_GLF_IDENTITY(bool(true), ! (! (bool(true))))))))))))))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
        }
       else
        {
        }
      }
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(_GLF_IDENTITY(vec3(injectionSwitch, 1.0), max(vec3(injectionSwitch, 1.0), vec3(injectionSwitch, 1.0)))), (_GLF_IDENTITY(vec2(_GLF_IDENTITY(vec3(injectionSwitch, 1.0), max(vec3(injectionSwitch, 1.0), vec3(injectionSwitch, 1.0)))), vec2(0.0, 0.0) + (vec2(_GLF_IDENTITY(vec3(injectionSwitch, 1.0), max(vec3(injectionSwitch, 1.0), vec3(injectionSwitch, 1.0))))))) / vec2(1.0, 1.0))).y))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! _GLF_IDENTITY((false), false || ((false))), false || (! _GLF_IDENTITY((false), false || ((false)))))))))
        {
         do
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch))[0], _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-7212.3957, -895.920)) : injectionSwitch))[1])), injectionSwitch)).x < injectionSwitch.y))))
              {
               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                {
                 for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
                  {
                   do
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                     do
                      {
                       barrier();
                       if(_GLF_DEAD(false))
                        {
                         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          {
                          }
                         else
                          {
                           barrier();
                          }
                        }
                      }
                     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, false, true)))) || false)));
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                  }
                }
               else
                {
                }
              }
             else
              {
              }
            }
           else
            {
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true && (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(mat2x3(injectionSwitch.y, 1.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(dot(vec3(0.0, 0.0, 0.0), vec3(1.0, abs(1.0), cos(0.0))), dot(vec3(0.0, 0.0, 0.0), vec3(1.0, abs(1.0), cos(0.0)))))), float(mat4x2(float(mat2x3(injectionSwitch.y, 1.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(dot(vec3(0.0, 0.0, 0.0), vec3(1.0, abs(1.0), cos(0.0))), dot(vec3(0.0, 0.0, 0.0), vec3(1.0, abs(1.0), cos(0.0)))))), 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0))))))))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
          }
        }
      }
     else
      {
      }
     do
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, false, true, true)), ! (! (bool(bvec4(false, false, true, true))))))))
          {
          }
         else
          {
           if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), false || (_GLF_WRAPPED_IF_FALSE(false))))
            {
            }
           else
            {
             do
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(false))
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   barrier();
                  }
                 else
                  {
                  }
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                }
               else
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (_GLF_IDENTITY(! (false), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(! (false), ! (_GLF_IDENTITY(! (! (false)), bool(bvec2(! (! (false)), true))))), false, true), _GLF_IDENTITY(bvec3(bvec3(bvec3(_GLF_IDENTITY(! (false), ! (_GLF_IDENTITY(! (! (false)), bool(bvec2(! (! (false)), true))))), false, true))), bvec3(bvec4(bvec3(bvec3(bvec3(_GLF_IDENTITY(! (false), ! (_GLF_IDENTITY(! (! (false)), bool(bvec2(! (! (false)), true))))), false, true))), true))))), true && (bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(! (false), ! (_GLF_IDENTITY(! (! (false)), bool(bvec2(! (! (false)), true))))), false, true), _GLF_IDENTITY(bvec3(bvec3(bvec3(_GLF_IDENTITY(! (false), ! (_GLF_IDENTITY(! (! (false)), bool(bvec2(! (! (false)), true))))), false, true))), bvec3(bvec4(bvec3(bvec3(bvec3(_GLF_IDENTITY(! (false), ! (_GLF_IDENTITY(! (! (false)), bool(bvec2(! (! (false)), true))))), false, true))), true)))))))))))))))
                  {
                   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && _GLF_IDENTITY((false), (_GLF_IDENTITY((false), ((false)) || false)) || false))))
                    barrier();
                   barrier();
                  }
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    {
                    }
                   else
                    {
                     barrier();
                    }
                  }
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))), bool(_GLF_IDENTITY(bvec2(_GLF_DEAD(false), _GLF_IDENTITY(false, ! _GLF_IDENTITY((_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bool(false)))), (! (_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, bool(bvec2(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))) && true)), ((_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bool(false)))), (! (_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, bool(bvec2(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))) && true))) || false))), bvec2(bvec2(bvec2(_GLF_DEAD(false), false))))))))))
                    barrier();
                  }
                 else
                  {
                  }
                 if(_GLF_DEAD(false))
                  barrier();
                }
              }
             else
              {
              }
             if(_GLF_DEAD(false))
              {
               do
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), (false) || false)))
                  {
                  }
                 else
                  {
                   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (true)))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (true)))))))
                    {
                     barrier();
                    }
                   else
                    {
                    }
                  }
                }
               while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), (_GLF_WRAPPED_LOOP(false)) && true)), _GLF_IDENTITY(! (! (! (_GLF_WRAPPED_LOOP(false)))), (! (_GLF_IDENTITY(! (! (_GLF_WRAPPED_LOOP(false))), true && (! _GLF_IDENTITY((! (_GLF_WRAPPED_LOOP(false))), ! (! (_GLF_IDENTITY((! (_GLF_WRAPPED_LOOP(false))), ! (! ((! (_GLF_WRAPPED_LOOP(false))))))))))))) && true))))), bool(bvec4(bool(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, true, false, true)), (_GLF_IDENTITY(bool(bvec4(false, true, false, true)), ! (! (bool(bvec4(false, true, false, true)))))) && true))), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) || false))), ! (! (! (_GLF_WRAPPED_LOOP(false)))))))), true, false, false))))));
              }
            }
          }
         if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), false))))))))))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(mat2(injectionSwitch.x, 0.0, 1.0, 1.0), mat2(1.0) * (mat2(injectionSwitch.x, 0.0, 1.0, 1.0))))), injectionSwitch.x)) < injectionSwitch.y))))
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   do
                    {
                     barrier();
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                  }
                }
               else
                {
                }
              }
             else
              {
              }
            }
          }
         else
          {
          }
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(_GLF_IDENTITY(_GLF_IDENTITY(vec2(_GLF_FUZZED(-2.0), _GLF_FUZZED(_GLF_IDENTITY(903.828, max(903.828, 903.828)))), min(vec2(_GLF_FUZZED(-2.0), _GLF_FUZZED(903.828)), vec2(_GLF_FUZZED(-2.0), _GLF_FUZZED(903.828)))), (_GLF_IDENTITY(_GLF_IDENTITY(vec2(_GLF_FUZZED(-2.0), _GLF_FUZZED(903.828)), min(vec2(_GLF_FUZZED(-2.0), _GLF_FUZZED(903.828)), vec2(_GLF_FUZZED(-2.0), _GLF_FUZZED(903.828)))), vec2(mat4x2(_GLF_IDENTITY(_GLF_IDENTITY(vec2(_GLF_FUZZED(-2.0), _GLF_FUZZED(903.828)), min(vec2(_GLF_FUZZED(-2.0), _GLF_FUZZED(903.828)), vec2(_GLF_FUZZED(-2.0), _GLF_FUZZED(903.828)))), _GLF_IDENTITY(mat2(1.0) * (_GLF_IDENTITY(vec2(_GLF_FUZZED(-2.0), _GLF_FUZZED(903.828)), min(vec2(_GLF_FUZZED(-2.0), _GLF_FUZZED(903.828)), vec2(_GLF_FUZZED(-2.0), _GLF_FUZZED(903.828))))), clamp(mat2(1.0) * (_GLF_IDENTITY(vec2(_GLF_FUZZED(-2.0), _GLF_FUZZED(903.828)), min(vec2(_GLF_FUZZED(-2.0), _GLF_FUZZED(903.828)), vec2(_GLF_FUZZED(-2.0), _GLF_FUZZED(903.828))))), mat2(1.0) * (_GLF_IDENTITY(vec2(_GLF_FUZZED(-2.0), _GLF_FUZZED(903.828)), min(vec2(_GLF_FUZZED(-2.0), _GLF_FUZZED(903.828)), vec2(_GLF_FUZZED(-2.0), _GLF_FUZZED(903.828))))), mat2(1.0) * (_GLF_IDENTITY(vec2(_GLF_FUZZED(-2.0), _GLF_FUZZED(903.828)), min(vec2(_GLF_FUZZED(-2.0), _GLF_FUZZED(903.828)), vec2(_GLF_FUZZED(-2.0), _GLF_FUZZED(903.828)))))))), 0.0, 1.0, 0.0, sin(0.0), 0.0, 1.0)))) + vec2(0.0, 0.0)), vec2(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))))[0], ((_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))))[0]) - 0.0), (injectionSwitch)[1]), bvec2(true, true))), clamp(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(_GLF_IDENTITY(-2.0, (_GLF_IDENTITY(-2.0, (true ? -2.0 : _GLF_FUZZED(30.66)))) * 1.0)), _GLF_FUZZED(903.828)), vec2(_GLF_IDENTITY((injectionSwitch), mix(vec2(_GLF_FUZZED(8.2), _GLF_FUZZED(84.26)), vec2(((injectionSwitch))[0], ((injectionSwitch))[1]), bvec2(true, true)))[0], (injectionSwitch)[1]), bvec2(true, true))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mix(_GLF_IDENTITY(vec2(_GLF_FUZZED(-2.0), _GLF_FUZZED(903.828)), (vec2(_GLF_FUZZED(-2.0), _GLF_FUZZED(903.828))) - vec2(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true)), mix(vec2(_GLF_FUZZED(vec3(3972.7215, -6.3, 81.58).r), (mix(_GLF_IDENTITY(vec2(_GLF_FUZZED(-2.0), _GLF_FUZZED(903.828)), (vec2(_GLF_FUZZED(-2.0), _GLF_FUZZED(903.828))) - vec2(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true)))[1]), vec2(_GLF_IDENTITY((mix(_GLF_IDENTITY(vec2(_GLF_FUZZED(-2.0), _GLF_FUZZED(903.828)), (vec2(_GLF_FUZZED(-2.0), _GLF_FUZZED(903.828))) - vec2(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true)))[0], ((mix(_GLF_IDENTITY(vec2(_GLF_FUZZED(-2.0), _GLF_FUZZED(903.828)), (vec2(_GLF_FUZZED(-2.0), _GLF_FUZZED(903.828))) - vec2(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true)))[0]) - 0.0), _GLF_FUZZED((-3.0 - 456.643))), bvec2(true, false)))), mix(vec2(_GLF_FUZZED(-21.16), _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-2.0), _GLF_FUZZED(903.828)), vec2(_GLF_IDENTITY((injectionSwitch), mix(vec2(((injectionSwitch))[0], ((injectionSwitch))[1]), vec2(_GLF_FUZZED(-682.234), _GLF_FUZZED(8520.4712)), bvec2(false, false)))[0], (injectionSwitch)[1]), bvec2(true, _GLF_IDENTITY(true, true && (true))))))[1], clamp((_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-2.0), _GLF_FUZZED(903.828)), vec2(_GLF_IDENTITY((injectionSwitch), mix(vec2((_GLF_IDENTITY((injectionSwitch), max((injectionSwitch), (injectionSwitch))))[0], (_GLF_IDENTITY((injectionSwitch), max((injectionSwitch), _GLF_IDENTITY((injectionSwitch), mix(vec2(_GLF_FUZZED(-3.9), _GLF_FUZZED(7500.8279)), vec2(((injectionSwitch))[0], ((injectionSwitch))[1]), bvec2(true, true))))))[_GLF_IDENTITY(1, int(ivec3(_GLF_IDENTITY(1, clamp(1, 1, 1)), 1, 0)))]), vec2(_GLF_FUZZED(-682.234), _GLF_FUZZED(8520.4712)), bvec2(false, false)))[0], (injectionSwitch)[1]), bvec2(true, _GLF_IDENTITY(true, true && _GLF_IDENTITY((true), ! (! ((true)))))))))[1], _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-2.0), _GLF_FUZZED(903.828)), vec2(_GLF_IDENTITY((injectionSwitch), mix(vec2(((injectionSwitch))[0], ((injectionSwitch))[1]), vec2(_GLF_FUZZED(-682.234), _GLF_FUZZED(8520.4712)), bvec2(false, false)))[0], (injectionSwitch)[1]), bvec2(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, (_GLF_IDENTITY(true, true && (true))) && true)) && true), _GLF_IDENTITY(true, true && (true))))))[1], float(mat3x2(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-2.0), _GLF_FUZZED(903.828)), vec2(_GLF_IDENTITY((injectionSwitch), mix(vec2(((injectionSwitch))[0], ((injectionSwitch))[1]), vec2(_GLF_FUZZED(-682.234), _GLF_FUZZED(8520.4712)), bvec2(false, false)))[0], (injectionSwitch)[1]), bvec2(true, _GLF_IDENTITY(true, true && (true)))))), vec2(1.0, 1.0) * ((_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-2.0), _GLF_FUZZED(903.828)), vec2(_GLF_IDENTITY((injectionSwitch), mix(vec2(((injectionSwitch))[0], ((injectionSwitch))[1]), vec2(_GLF_FUZZED(-682.234), _GLF_FUZZED(8520.4712)), bvec2(false, false)))[0], (injectionSwitch)[1]), bvec2(true, _GLF_IDENTITY(true, true && (true))))))))[1], 1.0, 1.0, log(1.0), 0.0, 1.0))), (_GLF_IDENTITY(injectionSwitch, mix(_GLF_IDENTITY(vec2(_GLF_FUZZED(-2.0), _GLF_FUZZED(903.828)), max(vec2(_GLF_FUZZED(-2.0), _GLF_FUZZED(903.828)), vec2(_GLF_FUZZED(-2.0), _GLF_FUZZED(903.828)))), vec2(_GLF_IDENTITY((injectionSwitch), mix(vec2(((injectionSwitch))[0], ((injectionSwitch))[1]), vec2(_GLF_FUZZED(-682.234), _GLF_FUZZED(8520.4712)), bvec2(false, false)))[0], (injectionSwitch)[1]), bvec2(true, _GLF_IDENTITY(true, true && (true))))))[1]))), vec2(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat3x4(injectionSwitch, determinant(mat4(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, log(1.0), 0.0)), 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0))), mix(vec2(_GLF_FUZZED(-2.0), _GLF_FUZZED(903.828)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))))[0], float(float((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat3x4(injectionSwitch, determinant(mat4(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, log(1.0), 0.0)), 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0))), mix(vec2(_GLF_FUZZED(-2.0), _GLF_FUZZED(903.828)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))))[0]))), _GLF_FUZZED(98.62)), bvec2(true, false))), _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mix(vec2(_GLF_FUZZED(-2.0), _GLF_FUZZED(903.828)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true)), max(mix(vec2(_GLF_FUZZED(-2.0), _GLF_FUZZED(903.828)), vec2(_GLF_IDENTITY((injectionSwitch), max(_GLF_IDENTITY((injectionSwitch), (false ? _GLF_FUZZED(vec2(48.16, 3.3)) : (injectionSwitch))), (injectionSwitch)))[0], (injectionSwitch)[1]), bvec2(true, true)), _GLF_IDENTITY(_GLF_IDENTITY(mix(vec2(_GLF_FUZZED(-2.0), _GLF_FUZZED(903.828)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true)), max(mix(vec2(_GLF_FUZZED(-2.0), _GLF_FUZZED(903.828)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true)), mix(vec2(_GLF_FUZZED(-2.0), _GLF_FUZZED(903.828)), vec2((injectionSwitch)[0], (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(8.8, 6537.1387)) : _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)))))[1]), bvec2(true, true)))), vec2(mat3(mix(vec2(_GLF_FUZZED(-2.0), _GLF_FUZZED(903.828)), vec2((injectionSwitch)[0], _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch)[1], (true ? _GLF_IDENTITY((injectionSwitch)[1], ((injectionSwitch)[1]) - 0.0) : _GLF_FUZZED(-2.3))), mix(float(_GLF_FUZZED(921.952)), float(_GLF_IDENTITY((injectionSwitch)[1], (true ? _GLF_IDENTITY((injectionSwitch)[1], ((injectionSwitch)[1]) - 0.0) : _GLF_FUZZED(-2.3)))), bool(true)))), bvec2(true, true)), 1.0, 0.0, 1.0, 0.0, 0.0, abs(0.0), 0.0)))))))).x < injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
           else
            {
             if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec2(false, false)))) && true), (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
                barrier();
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 barrier();
                }
               if(_GLF_DEAD(false))
                barrier();
              }
            }
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) && true)));
     do
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     else
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), ! (! (_GLF_WRAPPED_IF_FALSE(false)))))
              {
              }
             else
              {
               if(_GLF_DEAD(false))
                barrier();
              }
            }
           else
            {
            }
          }
         else
          {
          }
        }
       do
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
          }
         else
          {
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), true && (_GLF_WRAPPED_IF_TRUE(true))))
      {
       atomicStore(buf[next_virtual_gid], uint(1), 4, _GLF_IDENTITY(64, (0 | 0) ^ (64)), 4);
       for(int _injected_loop_counter = 0; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (_GLF_IDENTITY(int(5), _GLF_IDENTITY((int(5)), ~ (~ ((int(5))))) - 0)) >> 0))) >> _GLF_IDENTITY(int(5), int(5)))), (_GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (_GLF_IDENTITY(_GLF_IDENTITY(int(5), min(int(5), _GLF_IDENTITY(int(5), (0 | 0) | (int(5))))), _GLF_IDENTITY((int(5)), ~ (~ ((int(5))))) - 0)) >> 0))) >> _GLF_IDENTITY(int(5), int(5))))) && true); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
          {
           barrier();
          }
        }
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(_GLF_IDENTITY(0.0, _GLF_IDENTITY(max(_GLF_IDENTITY(_GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(-9657.2517) : 0.0)), clamp(0.0, _GLF_IDENTITY(0.0, mix(_GLF_IDENTITY(float(_GLF_FUZZED(1429.5001)), (float(_GLF_FUZZED(1429.5001))) + 0.0), float(_GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, max(_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(3.1)), float(0.0), bool(true))), 0.0)), 0.0))), bool(true))), 0.0)), _GLF_IDENTITY(0.0, float(mat4(0.0, _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(5.0) : _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-89.59)), float(1.0), bool(true))))), 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, sqrt(1.0), 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0)))), max(max(_GLF_IDENTITY(_GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(-9657.2517) : 0.0)), clamp(0.0, _GLF_IDENTITY(0.0, mix(_GLF_IDENTITY(float(_GLF_FUZZED(1429.5001)), (float(_GLF_FUZZED(1429.5001))) + 0.0), float(_GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, max(_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(3.1)), float(0.0), bool(true))), 0.0)), 0.0))), bool(true))), 0.0)), _GLF_IDENTITY(0.0, float(mat4(0.0, _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(5.0) : _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-89.59)), float(1.0), bool(true))))), 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, sqrt(1.0), 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0)))), max(_GLF_IDENTITY(_GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(-9657.2517) : 0.0)), clamp(0.0, _GLF_IDENTITY(0.0, mix(_GLF_IDENTITY(float(_GLF_FUZZED(1429.5001)), (float(_GLF_FUZZED(1429.5001))) + 0.0), float(_GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, max(_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(3.1)), float(0.0), bool(true))), 0.0)), 0.0))), bool(true))), 0.0)), _GLF_IDENTITY(0.0, float(mat4(0.0, _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(5.0) : _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-89.59)), float(1.0), bool(true))))), 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, sqrt(1.0), 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0))))))), _GLF_IDENTITY(0.0, _GLF_IDENTITY(float(mat4x2(_GLF_IDENTITY(0.0, max(0.0, 0.0)), 1.0, determinant(mat3(1.0, _GLF_IDENTITY(1.0, min(1.0, 1.0)), 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0)), round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0, _GLF_IDENTITY(0.0, 0.0 + (0.0)), 1.0, 1.0)), min(float(mat4x2(_GLF_IDENTITY(0.0, max(0.0, 0.0)), _GLF_IDENTITY(_GLF_IDENTITY(1.0, 1.0 * (1.0)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 1.0 : _GLF_FUZZED(30.39))), determinant(mat3(1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0)), round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0, 0.0, 1.0, 1.0)), float(mat4x2(_GLF_IDENTITY(0.0, max(0.0, 0.0)), _GLF_IDENTITY(1.0, max(1.0, 1.0)), determinant(mat3(1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0)), round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0, 0.0, 1.0, _GLF_IDENTITY(1.0, min(1.0, 1.0))))))))))), mix(vec2(_GLF_FUZZED(_GLF_IDENTITY(float(-18445), mix(float(_GLF_FUZZED(-99.94)), float(float(-18445)), bool(true)))), (injectionSwitch)[_GLF_IDENTITY(1, (1) / 1)]), vec2((injectionSwitch)[0], _GLF_FUZZED(float(true))), bvec2(true, _GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), ! (! (! (_GLF_IDENTITY(! (false), bool(bool(! (false)))))))))))).y, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) + vec2(0.0, 0.0), clamp((injectionSwitch) + vec2(0.0, 0.0), (injectionSwitch) + vec2(0.0, 0.0), (injectionSwitch) + vec2(0.0, 0.0)))))), mix(vec2(_GLF_FUZZED(_GLF_IDENTITY(_GLF_IDENTITY(float(-18445), mix(float(_GLF_FUZZED(-99.94)), float(float(-18445)), bool(true))), _GLF_IDENTITY(float(mat4x3(_GLF_IDENTITY(_GLF_IDENTITY(float(-18445), _GLF_IDENTITY(mix(float(_GLF_FUZZED(-99.94)), float(float(-18445)), bool(true)), (mix(float(_GLF_FUZZED(-99.94)), float(float(-18445)), bool(true))) / 1.0)), (_GLF_IDENTITY(float(-18445), mix(float(_GLF_FUZZED(-99.94)), float(float(-18445)), bool(_GLF_IDENTITY(true, (true) && true))))) + 0.0), 0.0, _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(829.953) : 0.0)), 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0)), 0.0 + (float(mat4x3(_GLF_IDENTITY(_GLF_IDENTITY(float(-18445), _GLF_IDENTITY(mix(float(_GLF_FUZZED(-99.94)), float(float(-18445)), bool(true)), (mix(float(_GLF_FUZZED(-99.94)), float(float(-18445)), bool(true))) / 1.0)), (_GLF_IDENTITY(float(-18445), mix(float(_GLF_FUZZED(-99.94)), float(float(-18445)), bool(_GLF_IDENTITY(true, (true) && true))))) + 0.0), 0.0, _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(829.953) : 0.0)), 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0)))))), _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch))), (true ? (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch))) : _GLF_FUZZED(mix(vec2(-6.8, -18.56), vec2(371.611, _GLF_IDENTITY(3684.6358, 0.0 + (3684.6358))), 5175.1832))))[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(float(true))), bvec2(true, false))), min(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) + vec2(0.0, 0.0), clamp((injectionSwitch) + vec2(0.0, 0.0), (injectionSwitch) + vec2(0.0, 0.0), (injectionSwitch) + vec2(0.0, 0.0)))))), mix(vec2(_GLF_FUZZED(_GLF_IDENTITY(_GLF_IDENTITY(float(-18445), mix(float(_GLF_FUZZED(-99.94)), float(float(-18445)), bool(true))), _GLF_IDENTITY(float(mat4x3(_GLF_IDENTITY(_GLF_IDENTITY(float(-18445), _GLF_IDENTITY(mix(float(_GLF_FUZZED(-99.94)), float(float(-18445)), bool(true)), (mix(float(_GLF_FUZZED(-99.94)), float(float(-18445)), bool(true))) / 1.0)), (_GLF_IDENTITY(float(-18445), mix(float(_GLF_FUZZED(-99.94)), float(float(-18445)), bool(_GLF_IDENTITY(true, (true) && true))))) + 0.0), 0.0, _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(829.953) : 0.0)), 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0)), 0.0 + (float(mat4x3(_GLF_IDENTITY(_GLF_IDENTITY(float(-18445), _GLF_IDENTITY(mix(float(_GLF_FUZZED(-99.94)), float(float(-18445)), bool(true)), (mix(float(_GLF_FUZZED(-99.94)), float(float(-18445)), bool(true))) / 1.0)), (_GLF_IDENTITY(float(-18445), mix(float(_GLF_FUZZED(-99.94)), float(float(-18445)), bool(_GLF_IDENTITY(true, (true) && true))))) + 0.0), 0.0, _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(829.953) : 0.0)), 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0)))))), _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch))), (true ? (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch))) : _GLF_FUZZED(mix(vec2(-6.8, -18.56), vec2(371.611, _GLF_IDENTITY(3684.6358, 0.0 + (3684.6358))), 5175.1832))))[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(float(true))), bvec2(true, false))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) + vec2(0.0, 0.0), clamp((injectionSwitch) + vec2(0.0, 0.0), (injectionSwitch) + vec2(0.0, 0.0), (injectionSwitch) + vec2(0.0, 0.0)))))), mix(vec2(_GLF_FUZZED(_GLF_IDENTITY(_GLF_IDENTITY(float(-18445), mix(float(_GLF_FUZZED(-99.94)), float(float(-18445)), bool(true))), _GLF_IDENTITY(float(mat4x3(_GLF_IDENTITY(_GLF_IDENTITY(float(-18445), _GLF_IDENTITY(mix(float(_GLF_FUZZED(-99.94)), float(float(-18445)), bool(true)), (mix(float(_GLF_FUZZED(-99.94)), float(float(-18445)), bool(true))) / 1.0)), (_GLF_IDENTITY(float(-18445), mix(float(_GLF_FUZZED(-99.94)), float(float(-18445)), bool(_GLF_IDENTITY(true, (true) && true))))) + 0.0), 0.0, _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(829.953) : 0.0)), 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0)), 0.0 + (float(mat4x3(_GLF_IDENTITY(_GLF_IDENTITY(float(-18445), _GLF_IDENTITY(mix(float(_GLF_FUZZED(-99.94)), float(float(-18445)), bool(true)), (mix(float(_GLF_FUZZED(-99.94)), float(float(-18445)), bool(true))) / 1.0)), (_GLF_IDENTITY(float(-18445), mix(float(_GLF_FUZZED(-99.94)), float(float(-18445)), bool(_GLF_IDENTITY(true, (true) && true))))) + 0.0), 0.0, _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(829.953) : 0.0)), 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0)))))), _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch))), (true ? (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch))) : _GLF_FUZZED(mix(vec2(-6.8, -18.56), vec2(371.611, _GLF_IDENTITY(3684.6358, 0.0 + (3684.6358))), 5175.1832))))[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(float(true))), bvec2(true, false))))).y : _GLF_FUZZED(_GLF_IDENTITY(6.1, (6.1) / abs(1.0)))))), _GLF_IDENTITY(bool(bvec3((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0)), _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(vec4(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(min(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(vec3(injectionSwitch, 1.0)), (false ? _GLF_FUZZED((injectionSwitch / 6.8)) : vec2(vec3(injectionSwitch, 1.0)))))[1])), mix(vec2(_GLF_FUZZED(-7.1), (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(vec3(injectionSwitch, 1.0)), (false ? _GLF_FUZZED((injectionSwitch / 6.8)) : vec2(vec3(injectionSwitch, 1.0)))))[1])))[1]), vec2((_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(vec3(injectionSwitch, 1.0)), (false ? _GLF_FUZZED((injectionSwitch / 6.8)) : vec2(vec3(injectionSwitch, 1.0)))))[1])))[0], _GLF_FUZZED(-820.850)), bvec2(true, false))), injectionSwitch), mix(vec2(_GLF_FUZZED((-11.79)), (min(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(vec3(injectionSwitch, 1.0)), (false ? _GLF_FUZZED((injectionSwitch / 6.8)) : vec2(vec3(injectionSwitch, 1.0)))))[1])), mix(vec2(_GLF_FUZZED(-7.1), (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(vec3(injectionSwitch, 1.0)), (false ? _GLF_FUZZED((injectionSwitch / 6.8)) : vec2(vec3(injectionSwitch, 1.0)))))[1])))[1]), vec2((_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(vec3(injectionSwitch, 1.0)), (false ? _GLF_FUZZED((injectionSwitch / 6.8)) : vec2(vec3(injectionSwitch, 1.0)))))[1])))[0], _GLF_FUZZED(-820.850)), bvec2(true, false))), injectionSwitch))[1]), vec2(_GLF_IDENTITY((min(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(vec3(injectionSwitch, 1.0)), (false ? _GLF_FUZZED((injectionSwitch / 6.8)) : vec2(vec3(injectionSwitch, 1.0)))))[1])), mix(vec2(_GLF_FUZZED(-7.1), (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(vec3(injectionSwitch, 1.0)), (false ? _GLF_FUZZED((injectionSwitch / 6.8)) : vec2(vec3(injectionSwitch, 1.0)))))[1])))[1]), vec2((_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(vec3(injectionSwitch, 1.0)), (false ? _GLF_FUZZED((injectionSwitch / 6.8)) : vec2(vec3(injectionSwitch, 1.0)))))[1])))[0], _GLF_FUZZED(-820.850)), bvec2(true, false))), injectionSwitch))[0], mix(float(_GLF_FUZZED(-1620.9171)), float((min(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(vec3(injectionSwitch, 1.0)), (false ? _GLF_FUZZED((injectionSwitch / 6.8)) : vec2(vec3(injectionSwitch, 1.0)))))[1])), mix(vec2(_GLF_FUZZED(-7.1), (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(vec3(injectionSwitch, 1.0)), (false ? _GLF_FUZZED((injectionSwitch / 6.8)) : vec2(vec3(injectionSwitch, 1.0)))))[1])))[1]), vec2((_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(vec3(injectionSwitch, 1.0)), (false ? _GLF_FUZZED((injectionSwitch / 6.8)) : vec2(vec3(injectionSwitch, 1.0)))))[1])))[0], _GLF_FUZZED(-820.850)), bvec2(true, false))), injectionSwitch))[0]), bool(true))), _GLF_FUZZED(-164.121)), bvec2(true, false)))).y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), 0.0, 1.0, 0.0))))), false)), ! (! (bool(bvec3((_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).y, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).y) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).y))))))), false))))))), bool(_GLF_IDENTITY(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), bool(bvec4(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, false, false))), (_GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (bool(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), bool(bvec4(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, false, false)))) && true))))))))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             barrier();
            }
           else
            {
            }
          }
         else
          {
          }
        }
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec2(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec2(bvec3(bvec2(true, _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), true)))))))
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
   else
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       do
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(mat4x2(injectionSwitch.y, 1.0, 0.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(dot(vec2(0.0, _GLF_IDENTITY(1.0, (1.0) + 0.0)), vec2(0.0, 1.0)), _GLF_IDENTITY(dot(vec2(_GLF_IDENTITY(0.0, mix(float(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0))), float(_GLF_FUZZED(4.2)), bool(false))), 1.0), vec2(0.0, 1.0)), min(dot(vec2(0.0, 1.0), vec2(0.0, 1.0)), dot(vec2(0.0, 1.0), vec2(0.0, 1.0))))), 0.0))), true && (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(mat4x2(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, float(mat2x3(injectionSwitch.y, 0.0, 1.0, 0.0, 1.0, 1.0))))), clamp(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, float(mat2x3(injectionSwitch.y, 0.0, 1.0, 0.0, 1.0, 1.0))))), _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, float(mat2x3(injectionSwitch.y, 0.0, 1.0, 0.0, 1.0, 1.0))))), _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, float(mat2x3(injectionSwitch.y, 0.0, 1.0, 0.0, 1.0, 1.0))))))), 1.0, 0.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, 1.0)), _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, _GLF_IDENTITY(1.0, max(1.0, 1.0)))), min(dot(vec2(0.0, 1.0), vec2(0.0, 1.0)), dot(vec2(0.0, 1.0), vec2(0.0, 1.0))))), 0.0)))))))))
          barrier();
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (_GLF_IDENTITY(! (! (false)), (! (! (false))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], min(injectionSwitch[0], injectionSwitch[0])), injectionSwitch[1])).x > injectionSwitch.y), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))), true), bvec2(bvec4(bvec2(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! _GLF_IDENTITY(((injectionSwitch.x > injectionSwitch.y)), (((injectionSwitch.x > injectionSwitch.y))) || false))), true), _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y)))), true)))), _GLF_IDENTITY(bool(bvec3(bool(bvec2(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))))), ! (! ((injectionSwitch.x > injectionSwitch.y)))), true)), _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), true && (! (true))))), true)), false || (bool(bvec3(bool(bvec2(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(true && (injectionSwitch.x > injectionSwitch.y), bool(bvec4(_GLF_IDENTITY(true && (injectionSwitch.x > injectionSwitch.y), true && (true && (injectionSwitch.x > injectionSwitch.y))), false, false, true))))))), ! (! ((injectionSwitch.x > injectionSwitch.y)))), true)), true, true)))))))))
          {
          }
         else
          {
           do
            {
             do
              {
               atomicStore(buf[next_virtual_gid], _GLF_IDENTITY(uint(1), (_GLF_IDENTITY(uint(1), uint(uint(_GLF_IDENTITY(_GLF_IDENTITY(uint(1), 0u ^ (uint(1))), min(_GLF_IDENTITY(_GLF_IDENTITY(uint(1), 0u ^ (uint(1))), (_GLF_IDENTITY(uint(1), 0u ^ (uint(1)))) | 0u), _GLF_IDENTITY(uint(1), 0u ^ (uint(1))))))))) - (0u << _GLF_IDENTITY(uint(3u), uint(3u)))), 4, 64, 4);
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
    }
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = (1 ^ _GLF_IDENTITY(_GLF_IDENTITY(1, (1) >> 0), _GLF_IDENTITY(int(_GLF_IDENTITY(ivec2(_GLF_IDENTITY(1, (1) >> 0), 0), clamp(ivec2(_GLF_IDENTITY(1, (1) >> 0), 0), ivec2(_GLF_IDENTITY(1, (1) >> 0), 0), ivec2(_GLF_IDENTITY(1, (1) >> 0), 0)))), (int(_GLF_IDENTITY(ivec2(_GLF_IDENTITY(1, (1) >> 0), 0), clamp(ivec2(_GLF_IDENTITY(1, (1) >> 0), 0), ivec2(_GLF_IDENTITY(1, (1) >> 0), 0), ivec2(_GLF_IDENTITY(1, (1) >> 0), 0))))) | (int(_GLF_IDENTITY(ivec2(_GLF_IDENTITY(1, (1) >> 0), 0), clamp(ivec2(_GLF_IDENTITY(1, (1) >> 0), 0), ivec2(_GLF_IDENTITY(1, (1) >> 0), 0), ivec2(_GLF_IDENTITY(1, (1) >> 0), 0)))))))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (false ? _GLF_FUZZED(_injected_loop_counter) : _injected_loop_counter)) != 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
        }
       else
        {
        }
      }
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 else
  {
  }
 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec3(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)), bool(bool(bool(bvec3(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))))), (_GLF_IDENTITY(_GLF_IDENTITY(bool(bvec3(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(true, (true) && true), false)), (bool(bvec2(_GLF_IDENTITY(true, (true) && true), false))) || false)))), ! (! (bool(bvec3(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(true, (true) && true), false)), (bool(bvec2(_GLF_IDENTITY(true, (true) && true), false))) || false))))))), bool(bool(bool(bvec3(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)))))) || false))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(dot(2.6, -41.92)) : _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)))) > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < (0 | 1)); _injected_loop_counter ++)
        {
         barrier();
        }
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       barrier();
      }
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)) : _GLF_FUZZED(vec2(6086.9191, 8530.9064)))).y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)).y)))))) || false)))
    {
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, true && (true))))
  {
   if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))), (_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false)))) || false))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, false || (false))) && true)))
      barrier();
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             barrier();
            }
           else
            {
            }
          }
        }
       else
        {
        }
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 else
  {
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(6.3, -61.14)) : injectionSwitch)).x > injectionSwitch.y))))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(true && (false), bool(bvec4(true && (false), true, true, false)))), (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) || false))))))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       barrier();
      }
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 subgroupBarrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, (false) && true)), (_GLF_IDENTITY(bool(_GLF_IDENTITY(false, (false) && true)), bool(bvec3(bool(_GLF_IDENTITY(false, (false) && true)), true, true)))) || false), ! (! (bool(_GLF_IDENTITY(false, (false) && true)))))))))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat3x4(injectionSwitch, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, tan(0.0), 0.0))).y, min(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - abs(0.0)), injectionSwitch.y)), bool(bvec2(injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat3x4(injectionSwitch, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, _GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, min(1.0, 1.0)), 1.0)), 1.0, tan(0.0), _GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, (0.0) - 0.0), 0.0))))).y, min(_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(-2.1)))) - abs(0.0)), _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(mat3x4(injectionSwitch.y, 1.0, _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0))))), dot(vec2(0.0, 1.0), vec2(0.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)))))), 1.0, 1.0, 0.0, log(1.0), 1.0, 0.0, 0.0, 0.0, 1.0)), max(_GLF_IDENTITY(float(mat3x4(injectionSwitch.y, 1.0, _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0))))), dot(vec2(0.0, 1.0), vec2(0.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)))))), 1.0, 1.0, 0.0, log(1.0), 1.0, 0.0, 0.0, 0.0, 1.0)), (false ? _GLF_FUZZED(2.4) : float(mat3x4(injectionSwitch.y, 1.0, _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0))))), dot(vec2(0.0, 1.0), vec2(0.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)))))), 1.0, 1.0, 0.0, log(1.0), 1.0, 0.0, 0.0, 0.0, 1.0)))), float(mat3x4(injectionSwitch.y, 1.0, _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0))))), dot(vec2(0.0, 1.0), vec2(0.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)))))), 1.0, 1.0, 0.0, log(1.0), 1.0, 0.0, 0.0, 0.0, 1.0))))))), true))))))))))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
    }
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       barrier();
      }
    }
   barrier();
  }
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
  {
   for(int _injected_loop_counter = 1; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != (((_GLF_IDENTITY(53913 & 67704, (53913 & 67704) << 0)) - -4694) & 0)), true && (_GLF_WRAPPED_LOOP(_injected_loop_counter != (((_GLF_IDENTITY(53913 & 67704, (53913 & 67704) << 0)) - _GLF_IDENTITY(-4694, (-4694) >> (0 | 0))) & 0)))); _GLF_IDENTITY(_injected_loop_counter --, (false ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(_injected_loop_counter --, 0 | (_injected_loop_counter --)))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
  }
 atomicStore(checker[virtual_gid], _GLF_IDENTITY(read, _GLF_IDENTITY((true ? read : _GLF_FUZZED(workgroup_size)), ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (_GLF_IDENTITY((_GLF_IDENTITY(true ? read : _GLF_FUZZED(workgroup_size), 0u | (true ? read : _GLF_FUZZED(workgroup_size)))), (0u >> _GLF_IDENTITY(uint(7u), uint(7u))) | ((_GLF_IDENTITY(true ? read : _GLF_FUZZED(workgroup_size), 0u | (true ? read : _GLF_IDENTITY(_GLF_FUZZED(workgroup_size), min(_GLF_IDENTITY(_GLF_FUZZED(workgroup_size), (_GLF_FUZZED(workgroup_size)) / 1u), _GLF_FUZZED(workgroup_size))))))))), _GLF_IDENTITY(max(~ ((true ? read : _GLF_FUZZED(workgroup_size))), ~ ((true ? read : _GLF_FUZZED(workgroup_size)))), 1u * (max(~ ((true ? read : _GLF_FUZZED(workgroup_size))), ~ _GLF_IDENTITY(((true ? read : _GLF_FUZZED(workgroup_size))), (false ? _GLF_FUZZED(workgroup_id) : _GLF_IDENTITY(((true ? read : _GLF_FUZZED(workgroup_size))), min(((true ? read : _GLF_FUZZED(workgroup_size))), ((true ? read : _GLF_FUZZED(workgroup_size))))))))))), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(true ? read : _GLF_FUZZED(workgroup_size), 0u | (_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec3(true, true, true), bvec3(bvec4(_GLF_IDENTITY(bvec3(true, true, true), bvec3(bvec4(bvec3(true, true, true), false))), false))))) ? read : _GLF_FUZZED(workgroup_size))), (_GLF_IDENTITY(_GLF_IDENTITY(true ? read : _GLF_FUZZED(workgroup_size), 0u | (true ? read : _GLF_FUZZED(workgroup_size))), min(_GLF_IDENTITY(true ? read : _GLF_FUZZED(workgroup_size), 0u | (true ? read : _GLF_FUZZED(workgroup_size))), _GLF_IDENTITY(true ? read : _GLF_FUZZED(workgroup_size), 0u | (true ? read : _GLF_IDENTITY(_GLF_FUZZED(workgroup_size), (_GLF_FUZZED(workgroup_size)) >> 0u)))))) | (_GLF_IDENTITY(true ? read : _GLF_FUZZED(workgroup_size), 0u | _GLF_IDENTITY((true ? _GLF_IDENTITY(read, (_GLF_IDENTITY(read, 0u | (read))) | 0u) : _GLF_FUZZED(workgroup_size)), ((true ? _GLF_IDENTITY(read, (_GLF_IDENTITY(read, 0u | (read))) | 0u) : _GLF_FUZZED(workgroup_size))) << 0u))))), (0u >> _GLF_IDENTITY(uint(7u), uint(7u))) | ((_GLF_IDENTITY(true ? read : _GLF_FUZZED(workgroup_size), 0u | (true ? read : _GLF_FUZZED(workgroup_size))))))), (_GLF_IDENTITY(~ _GLF_IDENTITY((_GLF_IDENTITY((_GLF_IDENTITY(true ? read : _GLF_FUZZED(workgroup_size), 0u | (true ? read : _GLF_FUZZED(workgroup_size)))), _GLF_IDENTITY(_GLF_IDENTITY((0u >> _GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(7u, 1u * (7u))), min(uint(7u), _GLF_IDENTITY(uint(7u), (uint(7u)) | 0u))), uint(7u))), uint(_GLF_IDENTITY(uvec4(_GLF_IDENTITY((0u >> _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uint(7u), 0u | (uint(7u))), min(uint(7u), uint(7u))), uint(7u))), 1u * (_GLF_IDENTITY((0u >> _GLF_IDENTITY(_GLF_IDENTITY(uint(7u), min(uint(7u), uint(7u))), uint(7u))), ((0u >> _GLF_IDENTITY(_GLF_IDENTITY(uint(7u), min(uint(_GLF_IDENTITY(7u, (_GLF_IDENTITY(7u, (7u) << 0u)) | (_GLF_IDENTITY(7u, (7u) - 0u)))), uint(7u))), uint(7u)))) << 0u))), 1u, 0u, 1u), min(uvec4(_GLF_IDENTITY((0u >> _GLF_IDENTITY(_GLF_IDENTITY(uint(7u), min(uint(7u), uint(7u))), uint(7u))), 1u * (_GLF_IDENTITY((0u >> _GLF_IDENTITY(_GLF_IDENTITY(uint(7u), min(uint(7u), uint(7u))), uint(7u))), ((0u >> _GLF_IDENTITY(_GLF_IDENTITY(uint(7u), min(uint(7u), uint(7u))), uint(7u)))) << 0u))), 1u, 0u, 1u), uvec4(_GLF_IDENTITY((0u >> _GLF_IDENTITY(_GLF_IDENTITY(uint(7u), min(uint(7u), uint(7u))), uint(7u))), 1u * (_GLF_IDENTITY((0u >> _GLF_IDENTITY(_GLF_IDENTITY(uint(7u), min(uint(7u), uint(7u))), uint(7u))), _GLF_IDENTITY(((0u >> _GLF_IDENTITY(_GLF_IDENTITY(uint(7u), min(uint(7u), uint(7u))), uint(7u)))) << 0u, (true ? _GLF_IDENTITY(((0u >> _GLF_IDENTITY(_GLF_IDENTITY(uint(7u), min(uint(7u), uint(7u))), uint(7u)))) << 0u, (_GLF_IDENTITY(((0u >> _GLF_IDENTITY(_GLF_IDENTITY(uint(7u), min(uint(7u), uint(7u))), uint(7u)))) << 0u, 0u ^ (((0u >> _GLF_IDENTITY(_GLF_IDENTITY(uint(7u), min(uint(7u), uint(7u))), uint(7u)))) << 0u))) / 1u) : _GLF_FUZZED(187402u)))))), 1u, 0u, 1u))))), ((_GLF_IDENTITY(0u >> _GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(7u, max(7u, 7u))), min(uint(7u), uint(7u))), uint(7u)), ~ (~ (0u >> _GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(7u, max(7u, 7u))), min(uint(7u), uint(7u))), uint(7u))))))) / 1u) | ((_GLF_IDENTITY(true ? read : _GLF_FUZZED(workgroup_size), 0u | (true ? read : _GLF_FUZZED(workgroup_size))))))), ((_GLF_IDENTITY((_GLF_IDENTITY(true ? read : _GLF_IDENTITY(_GLF_FUZZED(workgroup_size), (_GLF_FUZZED(workgroup_size)) | 0u), 0u | (true ? read : _GLF_FUZZED(workgroup_size)))), _GLF_IDENTITY((0u >> _GLF_IDENTITY(_GLF_IDENTITY(uint(7u), min(uint(7u), uint(7u))), uint(7u))), ((0u >> _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uint(7u), min(uint(7u), uint(7u))), (_GLF_IDENTITY(uint(7u), min(uint(7u), uint(7u)))) | 0u), uint(7u)))) / 1u) | ((_GLF_IDENTITY(true ? read : _GLF_FUZZED(workgroup_size), _GLF_IDENTITY(0u | (true ? read : _GLF_FUZZED(workgroup_size)), ~ (~ (0u | (true ? read : _GLF_FUZZED(workgroup_size))))))))))) * 1u), _GLF_IDENTITY(0u, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(0u, (0u) >> 0u)), 1u * (~ (_GLF_IDENTITY(0u, (0u) >> 0u)))))) | (~ _GLF_IDENTITY((_GLF_IDENTITY((_GLF_IDENTITY(true ? read : _GLF_FUZZED(workgroup_size), 0u | (true ? read : _GLF_FUZZED(workgroup_size)))), (0u >> _GLF_IDENTITY(uint(7u), uint(7u))) | ((_GLF_IDENTITY(true ? read : _GLF_FUZZED(workgroup_size), 0u | (true ? read : _GLF_FUZZED(workgroup_size))))))), uint(_GLF_IDENTITY(uvec2((_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(true ? read : _GLF_FUZZED(workgroup_size), 0u | (true ? read : _GLF_FUZZED(workgroup_size))), (true ? _GLF_IDENTITY(_GLF_IDENTITY(true ? read : _GLF_FUZZED(workgroup_size), 0u | (true ? read : _GLF_FUZZED(workgroup_size))), (_GLF_IDENTITY(true ? read : _GLF_FUZZED(workgroup_size), 0u | (true ? read : _GLF_FUZZED(workgroup_size)))) | (_GLF_IDENTITY(true ? read : _GLF_FUZZED(workgroup_size), 0u | (true ? read : _GLF_FUZZED(workgroup_size))))) : _GLF_FUZZED(subgroup_size))), uint(uint(_GLF_IDENTITY(_GLF_IDENTITY(true ? read : _GLF_FUZZED(workgroup_size), 0u | (true ? read : _GLF_FUZZED(workgroup_size))), (true ? _GLF_IDENTITY(_GLF_IDENTITY(true ? read : _GLF_FUZZED(workgroup_size), 0u | (true ? read : _GLF_FUZZED(workgroup_size))), (_GLF_IDENTITY(true ? read : _GLF_FUZZED(workgroup_size), 0u | (true ? read : _GLF_FUZZED(workgroup_size)))) | (_GLF_IDENTITY(true ? read : _GLF_FUZZED(workgroup_size), 0u | (true ? read : _GLF_FUZZED(workgroup_size))))) : _GLF_FUZZED(subgroup_size))))))), (0u >> _GLF_IDENTITY(uint(7u), uint(7u))) | ((_GLF_IDENTITY(_GLF_IDENTITY(true ? read : _GLF_FUZZED(workgroup_size), max(true ? read : _GLF_FUZZED(workgroup_size), true ? read : _GLF_FUZZED(workgroup_size))), 0u | (true ? read : _GLF_FUZZED(workgroup_size))))))), 1u), uvec2(uvec4(_GLF_IDENTITY(uvec2((_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(true ? read : _GLF_FUZZED(workgroup_size), 0u | (true ? read : _GLF_FUZZED(workgroup_size))), (true ? _GLF_IDENTITY(_GLF_IDENTITY(true ? read : _GLF_FUZZED(workgroup_size), 0u | (true ? read : _GLF_FUZZED(workgroup_size))), (_GLF_IDENTITY(true ? read : _GLF_FUZZED(workgroup_size), 0u | (true ? read : _GLF_FUZZED(workgroup_size)))) | (_GLF_IDENTITY(true ? read : _GLF_FUZZED(workgroup_size), 0u | (true ? read : _GLF_FUZZED(workgroup_size))))) : _GLF_FUZZED(subgroup_size))), uint(uint(_GLF_IDENTITY(_GLF_IDENTITY(true ? read : _GLF_FUZZED(workgroup_size), 0u | (true ? read : _GLF_FUZZED(workgroup_size))), (true ? _GLF_IDENTITY(_GLF_IDENTITY(true ? read : _GLF_FUZZED(workgroup_size), 0u | (true ? read : _GLF_FUZZED(workgroup_size))), (_GLF_IDENTITY(true ? read : _GLF_FUZZED(workgroup_size), 0u | (true ? read : _GLF_FUZZED(workgroup_size)))) | (_GLF_IDENTITY(true ? read : _GLF_FUZZED(workgroup_size), 0u | (true ? read : _GLF_FUZZED(workgroup_size))))) : _GLF_FUZZED(subgroup_size))))))), (0u >> _GLF_IDENTITY(uint(7u), uint(7u))) | ((_GLF_IDENTITY(_GLF_IDENTITY(true ? read : _GLF_FUZZED(workgroup_size), max(true ? read : _GLF_FUZZED(workgroup_size), true ? read : _GLF_FUZZED(workgroup_size))), 0u | (true ? read : _GLF_FUZZED(workgroup_size))))))), 1u), (uvec2((_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(true ? read : _GLF_FUZZED(workgroup_size), 0u | (true ? read : _GLF_FUZZED(workgroup_size))), (true ? _GLF_IDENTITY(_GLF_IDENTITY(true ? read : _GLF_FUZZED(workgroup_size), 0u | (true ? read : _GLF_FUZZED(workgroup_size))), (_GLF_IDENTITY(true ? read : _GLF_FUZZED(workgroup_size), 0u | (true ? read : _GLF_FUZZED(workgroup_size)))) | (_GLF_IDENTITY(true ? read : _GLF_FUZZED(workgroup_size), 0u | (true ? read : _GLF_FUZZED(workgroup_size))))) : _GLF_FUZZED(subgroup_size))), uint(uint(_GLF_IDENTITY(_GLF_IDENTITY(true ? read : _GLF_FUZZED(workgroup_size), 0u | (true ? read : _GLF_FUZZED(workgroup_size))), (true ? _GLF_IDENTITY(_GLF_IDENTITY(true ? read : _GLF_FUZZED(workgroup_size), 0u | (true ? read : _GLF_FUZZED(workgroup_size))), (_GLF_IDENTITY(true ? read : _GLF_FUZZED(workgroup_size), 0u | (true ? read : _GLF_FUZZED(workgroup_size)))) | (_GLF_IDENTITY(true ? read : _GLF_FUZZED(workgroup_size), 0u | (true ? read : _GLF_FUZZED(workgroup_size))))) : _GLF_FUZZED(subgroup_size))))))), (0u >> _GLF_IDENTITY(uint(7u), uint(7u))) | ((_GLF_IDENTITY(_GLF_IDENTITY(true ? read : _GLF_FUZZED(workgroup_size), max(true ? read : _GLF_FUZZED(workgroup_size), true ? read : _GLF_FUZZED(workgroup_size))), 0u | (true ? read : _GLF_FUZZED(workgroup_size))))))), 1u)) | (uvec2((_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(true ? read : _GLF_FUZZED(workgroup_size), 0u | (true ? read : _GLF_FUZZED(workgroup_size))), (true ? _GLF_IDENTITY(_GLF_IDENTITY(true ? read : _GLF_FUZZED(workgroup_size), 0u | (true ? read : _GLF_FUZZED(workgroup_size))), (_GLF_IDENTITY(true ? read : _GLF_FUZZED(workgroup_size), 0u | (true ? read : _GLF_FUZZED(workgroup_size)))) | (_GLF_IDENTITY(true ? read : _GLF_FUZZED(workgroup_size), 0u | (true ? read : _GLF_FUZZED(workgroup_size))))) : _GLF_FUZZED(subgroup_size))), uint(uint(_GLF_IDENTITY(_GLF_IDENTITY(true ? read : _GLF_FUZZED(workgroup_size), 0u | (true ? read : _GLF_FUZZED(workgroup_size))), (true ? _GLF_IDENTITY(_GLF_IDENTITY(true ? read : _GLF_FUZZED(workgroup_size), 0u | (true ? read : _GLF_FUZZED(workgroup_size))), (_GLF_IDENTITY(true ? read : _GLF_FUZZED(workgroup_size), 0u | (true ? read : _GLF_FUZZED(workgroup_size)))) | (_GLF_IDENTITY(true ? read : _GLF_FUZZED(workgroup_size), 0u | (true ? read : _GLF_FUZZED(workgroup_size))))) : _GLF_FUZZED(subgroup_size))))))), (0u >> _GLF_IDENTITY(uint(7u), uint(7u))) | ((_GLF_IDENTITY(_GLF_IDENTITY(true ? read : _GLF_FUZZED(workgroup_size), max(true ? read : _GLF_FUZZED(workgroup_size), true ? read : _GLF_FUZZED(workgroup_size))), 0u | (true ? read : _GLF_FUZZED(workgroup_size))))))), 1u))), ((1u << _GLF_IDENTITY(uint(4u), uint(4u))) >> _GLF_IDENTITY(uint(4u), uint(4u))), 1u)))))))) + (0u >> _GLF_IDENTITY(uint(7u), _GLF_IDENTITY(uint(7u), clamp(_GLF_IDENTITY(uint(_GLF_IDENTITY(7u, (7u) >> 0u)), (uint(_GLF_IDENTITY(7u, (7u) >> 0u))) << 0u), uint(7u), uint(7u)))))), max(~ ((true ? read : _GLF_FUZZED(workgroup_size))), ~ ((true ? read : _GLF_FUZZED(workgroup_size))))))))))), 4, 64, 4);
 for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(_GLF_IDENTITY(4, 0 + (_GLF_IDENTITY(4, (4) | (_GLF_IDENTITY(4, int(ivec2(4, 1)))))))), int(4))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END
BUFFER checker DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected_checker DATA_TYPE uint32 SIZE 8388096 FILL 0

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 
  BIND BUFFER checker AS storage DESCRIPTOR_SET 0 BINDING 2 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT checker EQ_BUFFER expected_checker
