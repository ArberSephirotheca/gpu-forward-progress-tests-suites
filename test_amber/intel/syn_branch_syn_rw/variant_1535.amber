#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uvec2 GLF_merged2_0_1_14_1_1_14workgroup_baseworkgroup_size;
 uvec3 GLF_merged3_0_1_13_1_1_13_2_1_11num_workgroupsubgroup_sizevirtual_gid;
 uvec3 GLF_merged3_0_1_13_1_1_13_2_1_11subgroup_basesubgroup_sizevirtual_gid;
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 GLF_merged3_0_1_13_1_1_13_2_1_11num_workgroupsubgroup_sizevirtual_gid.y = subgroup_size;
 GLF_merged3_0_1_13_1_1_13_2_1_11subgroup_basesubgroup_sizevirtual_gid.y = GLF_merged3_0_1_13_1_1_13_2_1_11num_workgroupsubgroup_sizevirtual_gid.y;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 GLF_merged3_0_1_13_1_1_13_2_1_11num_workgroupsubgroup_sizevirtual_gid.x = num_workgroup;
 uint workgroup_size = gl_WorkGroupSize.x;
 GLF_merged2_0_1_14_1_1_14workgroup_baseworkgroup_size.y = workgroup_size;
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = GLF_merged2_0_1_14_1_1_14workgroup_baseworkgroup_size.y * workgroup_id;
 GLF_merged2_0_1_14_1_1_14workgroup_baseworkgroup_size.x = workgroup_base;
 uint subgroup_base = subgroup_id * GLF_merged3_0_1_13_1_1_13_2_1_11subgroup_basesubgroup_sizevirtual_gid.y;
 GLF_merged3_0_1_13_1_1_13_2_1_11subgroup_basesubgroup_sizevirtual_gid.x = subgroup_base;
 uint virtual_gid = GLF_merged2_0_1_14_1_1_14workgroup_baseworkgroup_size.x + GLF_merged3_0_1_13_1_1_13_2_1_11subgroup_basesubgroup_sizevirtual_gid.x + subgroup_local_id;
 GLF_merged3_0_1_13_1_1_13_2_1_11num_workgroupsubgroup_sizevirtual_gid.z = virtual_gid;
 GLF_merged3_0_1_13_1_1_13_2_1_11subgroup_basesubgroup_sizevirtual_gid.z = GLF_merged3_0_1_13_1_1_13_2_1_11num_workgroupsubgroup_sizevirtual_gid.z;
 uint next_virtual_gid = GLF_merged2_0_1_14_1_1_14workgroup_baseworkgroup_size.x + GLF_merged3_0_1_13_1_1_13_2_1_11subgroup_basesubgroup_sizevirtual_gid.x + ((subgroup_local_id + 1) % GLF_merged3_0_1_13_1_1_13_2_1_11subgroup_basesubgroup_sizevirtual_gid.y);
 uint read = atomicLoad(buf[GLF_merged3_0_1_13_1_1_13_2_1_11subgroup_basesubgroup_sizevirtual_gid.z], 4, 64, 2);
 if((subgroup_local_id % 2) == 0)
  {
   switch(_GLF_SWITCH((0 << _GLF_IDENTITY(int(5), int(5)))))
    {
     case 0:
     case 99:
     case 61:
     case 52:
     case 4:
     case 87:
     atomicStore(buf[next_virtual_gid], uint(1), 4, 64, 4);
     break;
     default:
     1;
    }
  }
 else
  {
   switch(_GLF_SWITCH((0 << _GLF_IDENTITY(int(6), int(6)))))
    {
     case 48:
     if(true)
      {
       {
        mat2 _GLF_SWITCH_1_0v;
        uvec2(110853u, 27633u);
        uvec3 _GLF_SWITCH_1_1v[74];
       }
      }
     else
      {
       while(false)
        {
         if((GLF_merged3_0_1_13_1_1_13_2_1_11subgroup_basesubgroup_sizevirtual_gid.y < subgroup_id))
          {
           uvec4 _GLF_SWITCH_1_2v, _GLF_SWITCH_1_3v[39];
           mat3(-3.4, 3.4, 9.0, -8269.5062, 867.322, -5.8, 2.5, -0.8, -2120.9080);
          }
         sin(-462.762);
         ;
         bvec2 _GLF_SWITCH_1_4v, _GLF_SWITCH_1_5v;
         mat2x3((mat2x3(891.165, -246.709, -290.333, 82.39, 9.4, 97.49) , (mat3x4(-3120.8044, -2.6, -790.169, 6736.8494, 5667.5932, 9.6, 948.496, 285.482, 86.22, 72.00, 6.0, 388.440) * mat4x3(547.249, -586.412, 29.88, 26.93, 40.70, -75.77, 2135.8744, -1.8, -69.81, 18.43, 4.6, 9.7))));
         {
          mat4x2(-8.3, -792.598, -9.3, 4.2, -5.3, -5.9, -66.10, 5.2);
          mat4x2 _GLF_SWITCH_1_6v, _GLF_SWITCH_1_7v[84], _GLF_SWITCH_1_8v;
          ;
         }
        }
       mat4x3(mat3x2(36.41, 7.0, 47.45, 4.8, -724.189, 4343.2236));
      }
     case 99:
     {
      mat2x3 _GLF_SWITCH_1_9v[14];
      51563;
      mat4x3 _GLF_SWITCH_1_10v[51];
      mat3x4(-1.0, 1912.2955, 5.6, 1.3, -4.1, -9.1, 8.7, -7673.3474, -91.13, 6510.8206, 4.2, 30.43);
      mat4x2 _GLF_SWITCH_1_11v;
     }
     case 0:
     case 69:
     case 53:
     case 10:
     case 15:
     atomicStore(buf[next_virtual_gid], uint(1), 4, 64, 4);
     break;
     default:
     1;
    }
  }
 subgroupBarrier();
 atomicStore(checker[GLF_merged3_0_1_13_1_1_13_2_1_11subgroup_basesubgroup_sizevirtual_gid.z], read, 4, 64, 4);
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END
BUFFER checker DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected_checker DATA_TYPE uint32 SIZE 8388096 FILL 0

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 
  BIND BUFFER checker AS storage DESCRIPTOR_SET 0 BINDING 2 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT checker EQ_BUFFER expected_checker
