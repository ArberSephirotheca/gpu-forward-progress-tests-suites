#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_0 {
 mat2x3 _f0;
 mat2x4 _f1;
 float _f2;
 uvec3 _f3;
 mat4 _f4;
 mat3x4 _f5;
} ;

struct _GLF_struct_1 {
 _GLF_struct_0 _f0;
 float _f1;
} ;

struct _GLF_struct_2 {
 bool _f0;
 _GLF_struct_1 _f1;
 uint next_virtual_gid;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(mat2x4(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-5.7)), float(injectionSwitch.y), bool(true))), 1.0, 0.0, 1.0, 1.0, 0.0, determinant(mat3(1.0, abs(1.0), 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0)), 0.0)), max(float(mat2x4(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-5.7)), float(injectionSwitch.y), bool(true))), 1.0, 0.0, 1.0, 1.0, 0.0, determinant(mat3(1.0, abs(1.0), 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0)), 0.0)), float(mat2x4(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-5.7)), float(injectionSwitch.y), bool(true))), 1.0, 0.0, 1.0, 1.0, 0.0, determinant(_GLF_IDENTITY(mat3(1.0, abs(1.0), 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0), mat3(mat4x3(mat3(1.0, abs(1.0), 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0))))), 0.0)))))))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   barrier();
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, false)))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((false), ! (! ((false)))) || false)))
      barrier();
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
      barrier();
     barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
      barrier();
    }
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 uint workgroup_size = _GLF_IDENTITY(gl_WorkGroupSize, _GLF_IDENTITY((gl_WorkGroupSize) + uvec3(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)))), injectionSwitch)).x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)), ((gl_WorkGroupSize) + uvec3(_GLF_IDENTITY(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)))), injectionSwitch)).x), 0.0 + (_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)))), injectionSwitch)).x))), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))) * uvec3(1u, 1u, 1u))).x;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || ((injectionSwitch.x > injectionSwitch.y))))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bool(bvec4(! (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false, true, true))))))
      barrier();
     barrier();
    }
   barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), false || (_GLF_IDENTITY(false, true && (false))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint workgroup_id = _GLF_IDENTITY(gl_WorkGroupID, _GLF_IDENTITY((gl_WorkGroupID), uvec3(uvec3((gl_WorkGroupID)))) << _GLF_IDENTITY((uvec3(0u, 0u, 0u) >> _GLF_IDENTITY(uvec3(6u), uvec3(6u))), max((uvec3(0u, 0u, 0u) >> _GLF_IDENTITY(uvec3(6u), uvec3(6u))), _GLF_IDENTITY((uvec3(0u, 0u, 0u) >> _GLF_IDENTITY(uvec3(6u), uvec3(6u))), ((uvec3(0u, 0u, _GLF_IDENTITY(0u, (0u) | (uint(_GLF_ONE(1.0, injectionSwitch.y)) ^ 1u))) >> _GLF_IDENTITY(_GLF_IDENTITY(uvec3(6u), uvec3(6u)), (true ? _GLF_IDENTITY(uvec3(6u), uvec3(6u)) : _GLF_FUZZED(uvec3(91453u, 7900u, 187118u)))))) | (uvec3(0u, 0u, 0u) << _GLF_IDENTITY(uvec3(7u), uvec3(_GLF_IDENTITY(7u, (0u << _GLF_IDENTITY(uint(1u), _GLF_IDENTITY(uint(1u), (uint(1u)) << 0u))) | (_GLF_IDENTITY(7u, (7u) << 0u)))))))))).x;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 uint workgroup_base = workgroup_size * workgroup_id;
 uint subgroup_base = subgroup_id * _GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, (subgroup_size) / 1u)) >> 0u)) ^ (0u << _GLF_IDENTITY(uint(7u), uint(7u))));
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, false, true)))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && _GLF_IDENTITY(true, _GLF_IDENTITY(false, ! (! (false))) || (_GLF_IDENTITY(true, false || (true)))))))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), ! _GLF_IDENTITY((! (_GLF_DEAD(false))), bool(_GLF_IDENTITY(bvec2((! (_GLF_DEAD(false))), false), _GLF_IDENTITY(bvec2(bvec3(bvec2((! (_GLF_DEAD(false))), false), true)), bvec2(bvec2(bvec2(bvec3(bvec2((! (_GLF_DEAD(false))), false), true))))))))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false))))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && _GLF_IDENTITY(true, false || (true))))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 uint virtual_gid = workgroup_base + subgroup_base + subgroup_local_id;
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), (_GLF_IDENTITY(false, ! (! (false)))) || false)))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, ! (! (false)))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 _GLF_struct_2 _GLF_struct_replacement_2 = _GLF_struct_2(true, _GLF_struct_1(_GLF_struct_0(mat2x3(1.0), mat2x4(1.0), 1.0, uvec3(1u), mat4(1.0), mat3x4(1.0)), _GLF_IDENTITY(1.0, 0.0 + (1.0))), workgroup_base + _GLF_IDENTITY(subgroup_base, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_base, ~ (~ (subgroup_base)))), (~ (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_base, max(_GLF_IDENTITY(subgroup_base, (_GLF_IDENTITY(subgroup_base, 0u ^ (subgroup_base))) | 0u), subgroup_base)), ~ (~ (subgroup_base))))) | 0u))) + (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, uint(uint(subgroup_local_id))) + 1) % _GLF_IDENTITY(subgroup_size, (subgroup_size) - 0u), ((subgroup_local_id + 1) % _GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(_GLF_IDENTITY((subgroup_size), ((subgroup_size)) | ((_GLF_IDENTITY(subgroup_size, (true ? subgroup_size : _GLF_FUZZED(workgroup_id)))))), ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (_GLF_IDENTITY((subgroup_size), ((subgroup_size)) | 0u)), min(~ (_GLF_IDENTITY((subgroup_size), ((subgroup_size)) | 0u)), ~ (_GLF_IDENTITY((subgroup_size), ((subgroup_size)) | 0u)))), (_GLF_IDENTITY(_GLF_IDENTITY(~ (_GLF_IDENTITY((subgroup_size), ((subgroup_size)) | 0u)), min(~ (_GLF_IDENTITY((subgroup_size), ((subgroup_size)) | 0u)), ~ (_GLF_IDENTITY((subgroup_size), ((subgroup_size)) | 0u)))), min(_GLF_IDENTITY(~ (_GLF_IDENTITY((subgroup_size), ((subgroup_size)) | _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, 1u * (0u))) / 1u))), min(~ _GLF_IDENTITY((_GLF_IDENTITY((subgroup_size), ((subgroup_size)) | 0u)), min((_GLF_IDENTITY((subgroup_size), ((subgroup_size)) | 0u)), (_GLF_IDENTITY((subgroup_size), ((subgroup_size)) | 0u)))), ~ (_GLF_IDENTITY((subgroup_size), ((subgroup_size)) | 0u)))), _GLF_IDENTITY(_GLF_IDENTITY(~ (_GLF_IDENTITY((subgroup_size), ((subgroup_size)) | 0u)), clamp(~ (_GLF_IDENTITY((subgroup_size), ((subgroup_size)) | 0u)), ~ (_GLF_IDENTITY((subgroup_size), ((subgroup_size)) | 0u)), ~ (_GLF_IDENTITY((subgroup_size), ((subgroup_size)) | 0u)))), min(~ (_GLF_IDENTITY((subgroup_size), ((subgroup_size)) | 0u)), ~ (_GLF_IDENTITY((subgroup_size), ((subgroup_size)) | 0u))))))) >> 0u))) - 0u)) | ((_GLF_IDENTITY(subgroup_local_id, clamp(subgroup_local_id, subgroup_local_id, subgroup_local_id)) + 1) % _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (subgroup_size) - 0u), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (subgroup_size) - 0u), 0u + (_GLF_IDENTITY(subgroup_size, (subgroup_size) - 0u))))))))));
 if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 uint read = atomicLoad(_GLF_IDENTITY(buf[_GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, (_GLF_IDENTITY(virtual_gid, _GLF_IDENTITY((virtual_gid) | _GLF_IDENTITY(0u, min(0u, 0u)), clamp(_GLF_IDENTITY((virtual_gid) | _GLF_IDENTITY(0u, min(0u, 0u)), uint(uvec2((virtual_gid) | _GLF_IDENTITY(_GLF_IDENTITY(0u, min(0u, 0u)), 0u ^ (_GLF_IDENTITY(0u, min(0u, 0u)))), 1u))), (virtual_gid) | _GLF_IDENTITY(0u, min(0u, 0u)), (virtual_gid) | _GLF_IDENTITY(0u, min(0u, 0u)))))) / _GLF_IDENTITY(1u, max(1u, 1u))), min(_GLF_IDENTITY(virtual_gid, (_GLF_IDENTITY(virtual_gid, (virtual_gid) | _GLF_IDENTITY(_GLF_IDENTITY(0u, min(0u, 0u)), (_GLF_IDENTITY(0u, min(0u, 0u))) | (_GLF_IDENTITY(_GLF_IDENTITY(0u, min(0u, 0u)), clamp(_GLF_IDENTITY(0u, min(0u, 0u)), _GLF_IDENTITY(0u, min(0u, 0u)), _GLF_IDENTITY(0u, min(0u, 0u)))))))) / _GLF_IDENTITY(1u, (1u) | (_GLF_IDENTITY(1u, _GLF_IDENTITY((1u) / 1u, (false ? _GLF_FUZZED(workgroup_base) : (1u) / 1u)))))), _GLF_IDENTITY(virtual_gid, (_GLF_IDENTITY(virtual_gid, (virtual_gid) | _GLF_IDENTITY(0u, min(0u, 0u)))) / 1u)))], _GLF_IDENTITY(min(_GLF_IDENTITY(buf[_GLF_IDENTITY(virtual_gid, (_GLF_IDENTITY(virtual_gid, (virtual_gid) | _GLF_IDENTITY(_GLF_IDENTITY(0u, ~ (~ (0u))), min(0u, 0u)))) / 1u)], _GLF_IDENTITY(uint(uvec4(buf[_GLF_IDENTITY(virtual_gid, (_GLF_IDENTITY(virtual_gid, _GLF_IDENTITY((virtual_gid) | _GLF_IDENTITY(0u, min(0u, 0u)), (false ? _GLF_FUZZED(min(num_workgroup, packUnorm4x8(vec4(-322.845, _GLF_IDENTITY(-171.788, _GLF_IDENTITY((-171.788) - 0.0, float(mat3x2((-171.788) - 0.0, 1.0, 0.0, 0.0, 1.0, 0.0)))), -9287.4742, -44.90)))) : (virtual_gid) | _GLF_IDENTITY(0u, min(_GLF_IDENTITY(0u, (0u) << 0u), 0u)))))) / 1u)], 0u, 0u, 1u)), max(uint(uvec4(_GLF_IDENTITY(buf[_GLF_IDENTITY(virtual_gid, (_GLF_IDENTITY(virtual_gid, (virtual_gid) | _GLF_IDENTITY(0u, min(0u, 0u)))) / 1u)], 0u | (_GLF_IDENTITY(buf[_GLF_IDENTITY(virtual_gid, (_GLF_IDENTITY(virtual_gid, (virtual_gid) | _GLF_IDENTITY(0u, min(0u, 0u)))) / 1u)], 0u | (_GLF_IDENTITY(buf[_GLF_IDENTITY(virtual_gid, (_GLF_IDENTITY(virtual_gid, (virtual_gid) | _GLF_IDENTITY(0u, min(0u, 0u)))) / 1u)], (true ? buf[_GLF_IDENTITY(virtual_gid, (_GLF_IDENTITY(virtual_gid, (virtual_gid) | _GLF_IDENTITY(0u, min(0u, 0u)))) / 1u)] : _GLF_FUZZED(workgroup_size))))))), 0u, 0u, 1u)), uint(uvec4(buf[_GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? virtual_gid : _GLF_FUZZED(workgroup_id))), (_GLF_IDENTITY(virtual_gid, _GLF_IDENTITY((virtual_gid), (true ? (virtual_gid) : _GLF_FUZZED(atomicMin(subgroup_id, atomicMax(subgroup_base, subgroup_base))))) | _GLF_IDENTITY(0u, min(0u, 0u)))) / 1u)], 0u, 0u, 1u))))), _GLF_IDENTITY(buf[_GLF_IDENTITY(virtual_gid, (_GLF_IDENTITY(virtual_gid, (virtual_gid) | _GLF_IDENTITY(0u, _GLF_IDENTITY(min(0u, 0u), uint(uvec2(_GLF_IDENTITY(min(0u, 0u), (_GLF_IDENTITY(min(0u, 0u), (false ? _GLF_FUZZED(workgroup_base) : min(0u, 0u)))) >> 0u), 1u)))))) / 1u)], (buf[_GLF_IDENTITY(virtual_gid, _GLF_IDENTITY((_GLF_IDENTITY(virtual_gid, (virtual_gid) | _GLF_IDENTITY(0u, min(0u, 0u)))), (_GLF_IDENTITY((_GLF_IDENTITY(virtual_gid, (virtual_gid) | _GLF_IDENTITY(0u, min(0u, 0u)))), min((_GLF_IDENTITY(virtual_gid, (virtual_gid) | _GLF_IDENTITY(0u, min(0u, 0u)))), (_GLF_IDENTITY(virtual_gid, (virtual_gid) | _GLF_IDENTITY(0u, min(0u, 0u))))))) ^ 0u) / 1u)]) ^ 0u)), uint(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (min(_GLF_IDENTITY(buf[_GLF_IDENTITY(virtual_gid, (_GLF_IDENTITY(virtual_gid, (virtual_gid) | _GLF_IDENTITY(_GLF_IDENTITY(0u, ~ (~ _GLF_IDENTITY(_GLF_IDENTITY((0u), ~ (~ ((0u)))), (_GLF_IDENTITY(_GLF_IDENTITY((0u), ((0u)) * (1u & 1u)), (_GLF_IDENTITY((0u), ((0u)) * (1u & 1u))) ^ (0u << _GLF_IDENTITY(uint(3u), uint(3u))))) ^ 0u))), min(0u, 0u)))) / 1u)], _GLF_IDENTITY(uint(uvec4(buf[_GLF_IDENTITY(virtual_gid, (_GLF_IDENTITY(virtual_gid, (virtual_gid) | _GLF_IDENTITY(0u, min(0u, _GLF_IDENTITY(0u, clamp(_GLF_IDENTITY(0u, uint(uvec3(0u, _GLF_IDENTITY(1u, (true ? _GLF_IDENTITY(1u, min(1u, _GLF_IDENTITY(1u, max(1u, 1u)))) : _GLF_FUZZED(subgroup_id))), 0u))), _GLF_IDENTITY(0u, uint(uint(0u))), 0u)))))) / 1u)], 0u, 0u, 1u)), max(uint(uvec4(buf[_GLF_IDENTITY(virtual_gid, (_GLF_IDENTITY(virtual_gid, (_GLF_IDENTITY(virtual_gid, (_GLF_IDENTITY(virtual_gid, (virtual_gid) - 0u)) ^ 0u)) | _GLF_IDENTITY(0u, _GLF_IDENTITY(min(0u, 0u), _GLF_IDENTITY((min(0u, 0u)), min((min(0u, 0u)), (min(0u, 0u)))) | (min(0u, 0u)))))) / 1u)], _GLF_IDENTITY(0u, (0u) / uint(_GLF_ONE(1.0, injectionSwitch.y))), 0u, 1u)), uint(uvec4(buf[_GLF_IDENTITY(virtual_gid, (_GLF_IDENTITY(virtual_gid, (virtual_gid) | _GLF_IDENTITY(0u, min(0u, 0u)))) / 1u)], 0u, 0u, 1u))))), _GLF_IDENTITY(buf[_GLF_IDENTITY(virtual_gid, (_GLF_IDENTITY(virtual_gid, (virtual_gid) | _GLF_IDENTITY(0u, _GLF_IDENTITY(min(0u, 0u), (true ? min(0u, 0u) : _GLF_FUZZED(atomicOr(subgroup_base, workgroup_base))))))) / 1u)], (buf[_GLF_IDENTITY(virtual_gid, _GLF_IDENTITY((_GLF_IDENTITY(virtual_gid, (virtual_gid) | _GLF_IDENTITY(0u, _GLF_IDENTITY(min(0u, 0u), (min(0u, 0u)) + 0u)))) / 1u, ((_GLF_IDENTITY(virtual_gid, (virtual_gid) | _GLF_IDENTITY(0u, _GLF_IDENTITY(min(0u, 0u), (min(0u, 0u)) + 0u)))) / 1u) | ((_GLF_IDENTITY(virtual_gid, (virtual_gid) | _GLF_IDENTITY(0u, _GLF_IDENTITY(min(0u, 0u), (min(0u, 0u)) + 0u)))) / 1u)))]) ^ 0u))))), 4, 64, 2);
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)))
  barrier();
 if(_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id % 2) == _GLF_IDENTITY(0, clamp(0, 0, 0)), ! _GLF_IDENTITY((! ((_GLF_IDENTITY(subgroup_local_id % 2, (_GLF_IDENTITY(subgroup_local_id % 2, (_GLF_IDENTITY(subgroup_local_id % 2, (subgroup_local_id % 2) >> 0u)) * uint(_GLF_ONE(1.0, injectionSwitch.y)))) << 0u)) == 0)), _GLF_IDENTITY(_GLF_IDENTITY(false || ((! ((subgroup_local_id % _GLF_IDENTITY(2, max(2, 2))) == 0))), (_GLF_IDENTITY(false || ((! ((_GLF_IDENTITY(subgroup_local_id, clamp(subgroup_local_id, subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) << uint(_GLF_ZERO(0.0, injectionSwitch.x))))) % 2) == 0))), bool(bool(false || ((! ((subgroup_local_id % _GLF_IDENTITY(2, (_GLF_IDENTITY(2, ~ (~ (_GLF_IDENTITY(2, max(2, 2)))))) | (2))) == 0))))))) || _GLF_IDENTITY(false, (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, ! (! (false))), false), bvec2(_GLF_IDENTITY(bvec3(bvec2(_GLF_IDENTITY(false, ! (! (false))), false), false), bvec3(bvec4(bvec3(bvec2(_GLF_IDENTITY(false, ! (! (false))), false), false), false)))))), ! (! (bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, ! (! (false))), false), bvec2(bvec3(bvec2(_GLF_IDENTITY(false, ! (! (false))), false), false))))))))) || false)), bool(bvec3(_GLF_IDENTITY(false || ((! ((subgroup_local_id % _GLF_IDENTITY(2, max(2, 2))) == 0))), (_GLF_IDENTITY(false || ((! ((subgroup_local_id % 2) == 0))), bool(bool(false || ((! _GLF_IDENTITY((_GLF_IDENTITY((subgroup_local_id % 2) == 0, bool(bvec3((subgroup_local_id % 2) == 0, true, true)))), ! (! ((_GLF_IDENTITY((subgroup_local_id % 2) == 0, bool(bvec3((subgroup_local_id % 2) == 0, true, true))))))))))))) || false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, float(mat4x2(injectionSwitch.y, 1.0, 1.0, 1.0, exp(0.0), 1.0, 0.0, 1.0)))))))))), _GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || false)) && true) || (_GLF_IDENTITY((subgroup_local_id % 2) == 0, ! _GLF_IDENTITY((! ((subgroup_local_id % 2) == 0)), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true) || ((! ((subgroup_local_id % _GLF_IDENTITY(2, max(2, 2))) == 0))), (_GLF_IDENTITY(false || ((! ((subgroup_local_id % 2) == 0))), bool(bool(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (_GLF_IDENTITY(! (! (false)), true && (! (! (false)))))))) || ((! _GLF_IDENTITY(((subgroup_local_id % 2) == 0), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (((subgroup_local_id % 2) == 0))))))))) || _GLF_IDENTITY(false, (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, ! (! (false))), false), bvec2(bvec3(bvec2(_GLF_IDENTITY(false, ! (! (false))), false), false)))), ! (_GLF_IDENTITY(! (bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, ! (! (false))), false), bvec2(bvec3(bvec2(_GLF_IDENTITY(false, ! (! (false))), false), false))))), true && (! (bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, ! (! (false))), false), bvec2(bvec3(bvec2(_GLF_IDENTITY(false, ! (! (false))), false), false))))))))))) || false)), bool(bvec3(_GLF_IDENTITY(false || ((! ((subgroup_local_id % _GLF_IDENTITY(2, max(2, 2))) == 0))), (_GLF_IDENTITY(false || ((! ((subgroup_local_id % 2) == 0))), bool(bool(false || ((! (_GLF_IDENTITY((subgroup_local_id % 2) == 0, bool(bvec3((subgroup_local_id % 2) == 0, true, true)))))))))) || false), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(_GLF_ONE(1.0, injectionSwitch.y))).x > injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     barrier();
    }
   atomicStore(buf[_GLF_struct_replacement_2.next_virtual_gid], _GLF_IDENTITY(uint(1), _GLF_IDENTITY((uint(1)), clamp((uint(1)), (uint(1)), (uint(1)))) / 1u), _GLF_IDENTITY(4, (true ? 4 : _GLF_FUZZED(63172))), 64, _GLF_IDENTITY(4, clamp(_GLF_IDENTITY(4, (4) >> 0), 4, 4)));
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_DEAD(false), false, false)))), false || (bool(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_DEAD(false), false, false)))))))))
      barrier();
     barrier();
    }
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y, (injectionSwitch.y) + 0.0), injectionSwitch.y))))))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(mat2(injectionSwitch.x, 0.0, cos(0.0), 0.0)), clamp(float(mat2(injectionSwitch.x, 0.0, cos(0.0), 0.0)), float(mat2(injectionSwitch.x, 0.0, cos(0.0), 0.0)), _GLF_IDENTITY(float(mat2(injectionSwitch.x, 0.0, cos(0.0), 0.0)), 0.0 + (float(mat2(injectionSwitch.x, 0.0, cos(0.0), 0.0))))))) > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   atomicStore(buf[_GLF_struct_replacement_2.next_virtual_gid], uint(_GLF_IDENTITY(_GLF_IDENTITY(1, min(_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, (1) | (1)), 1, 1)), 1)), 1 * _GLF_IDENTITY((1), _GLF_IDENTITY(int(ivec2((1), (_GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(38430))) ^ _GLF_IDENTITY(1, (1) << 0)))), (int(ivec2((1), (1 ^ 1)))) << 0)))), _GLF_IDENTITY(4, 0 + (4)), 64, 4);
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat3x2(injectionSwitch, _GLF_IDENTITY(1.0, max(1.0, 1.0)), 0.0, 0.0, 0.0)), (false ? _GLF_FUZZED(acos(injectionSwitch)) : vec2(mat3x2(injectionSwitch, 1.0, 0.0, 0.0, 0.0))))).x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false), ! (! (_GLF_DEAD(false)))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(6048.3315), _GLF_FUZZED(642.466)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))), injectionSwitch)).y))))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(false || (false), (false || (false)) || false))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bool(! (false))))))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 subgroupBarrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), true && (_GLF_IDENTITY(false, _GLF_IDENTITY((false) && true, bool(bvec2((false) && true, false)))))))))), ! (! (bool(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, (false) && true))))))))))) || false)))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, mat2(_GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, min(1.0, 1.0)), _GLF_IDENTITY(1.0, max(1.0, 1.0)), 1.0))) * (injectionSwitch)) : _GLF_IDENTITY(_GLF_FUZZED(vec2(2.3, -6011.6848)), (_GLF_IDENTITY(_GLF_FUZZED(vec2(2.3, -6011.6848)), _GLF_IDENTITY(vec2(vec2(_GLF_FUZZED(vec2(2.3, -6011.6848)))), mix(vec2(_GLF_FUZZED(966.261), _GLF_FUZZED(-1583.1871)), vec2((vec2(vec2(_GLF_FUZZED(vec2(2.3, -6011.6848)))))[0], (vec2(vec2(_GLF_FUZZED(vec2(2.3, -6011.6848)))))[1]), bvec2(true, true))))) - vec2(0.0, 0.0)))))).x > _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0), injectionSwitch.y))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
      barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(_GLF_IDENTITY(vec2(_GLF_FUZZED(-9.4), _GLF_FUZZED(-24.91)), mat2(1.0) * (vec2(_GLF_FUZZED(-9.4), _GLF_FUZZED(-24.91)))), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))).y), ! (! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-9.4), _GLF_FUZZED(-24.91)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))).y)))), (_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-9.4), _GLF_FUZZED(-24.91)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))).y, min(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-9.4), _GLF_FUZZED(-24.91)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))).y, _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-9.4), _GLF_FUZZED(-24.91)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))).y))), ! (! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-9.4), _GLF_FUZZED(-24.91)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))).y)))), bool(bool(_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-9.4), _GLF_FUZZED(-24.91)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))).y), ! (! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-9.4), _GLF_FUZZED(-24.91)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), _GLF_IDENTITY(bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true), bvec2(bvec3(_GLF_IDENTITY(bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true), bvec2(bvec4(bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true), true, true))), true))))).y)))))))) && true)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-9.4), _GLF_FUZZED(-24.91)), vec2((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch), (false ? _GLF_FUZZED(injectionSwitch) : (injectionSwitch)))[1]), bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))).y), ! (! _GLF_IDENTITY(((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-9.4), _GLF_FUZZED(-24.91)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))).y)), ! (! (_GLF_IDENTITY(((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-9.4), _GLF_FUZZED(-24.91)), vec2(_GLF_IDENTITY((injectionSwitch), ((injectionSwitch)) + vec2(0.0, 0.0))[0], (injectionSwitch)[1]), bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))).y)), ! (! (((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-9.4), _GLF_FUZZED(-24.91)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))).y))))))))))), false || _GLF_IDENTITY((_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-9.4), _GLF_FUZZED(-24.91)), vec2((_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), ((injectionSwitch) * mat2(1.0)) * vec2(1.0, 1.0))))[0], (injectionSwitch)[1]), bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))).y, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-9.4), _GLF_FUZZED(-24.91)), vec2(_GLF_IDENTITY((injectionSwitch), (true ? _GLF_IDENTITY((injectionSwitch), ((injectionSwitch)) * mat2(1.0)) : _GLF_FUZZED(refract(injectionSwitch, vec2(-3.6, -1116.2738), -8962.1473))))[0], (injectionSwitch)[1]), bvec2(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), vec2(1.0, 1.0) * ((injectionSwitch) * mat2(1.0)))).y)), true))).y) || false)), ! (! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(_GLF_IDENTITY(-9.4, (_GLF_IDENTITY(-9.4, max(-9.4, _GLF_IDENTITY(-9.4, (false ? _GLF_FUZZED(-903.480) : -9.4))))) / 1.0)), _GLF_FUZZED(-24.91)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))).y)))))), ! (! ((_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-9.4), _GLF_FUZZED(-24.91)), vec2((_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), ((injectionSwitch) * mat2(1.0)) * vec2(1.0, 1.0))))[0], (injectionSwitch)[1]), bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))).y, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-9.4), _GLF_FUZZED(-24.91)), vec2(_GLF_IDENTITY((injectionSwitch), (true ? _GLF_IDENTITY((injectionSwitch), ((injectionSwitch)) * mat2(1.0)) : _GLF_FUZZED(refract(injectionSwitch, vec2(-3.6, -1116.2738), -8962.1473))))[0], (injectionSwitch)[1]), bvec2(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), vec2(1.0, 1.0) * ((injectionSwitch) * mat2(1.0)))).y)), true))).y) || false)), ! (! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(_GLF_IDENTITY(-9.4, (_GLF_IDENTITY(-9.4, max(-9.4, _GLF_IDENTITY(-9.4, (false ? _GLF_FUZZED(-903.480) : -9.4))))) / 1.0)), _GLF_FUZZED(-24.91)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))).y)))))))))))))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 atomicStore(checker[virtual_gid], read, _GLF_IDENTITY(4, (4) - 0), 64, _GLF_IDENTITY(4, (_GLF_IDENTITY(4, (4) + 0)) | (4)));
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec2(false, true))), (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, bool(bvec2(false, true))), true))), (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true)))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), bool(bvec4(_GLF_IDENTITY(! (_GLF_DEAD(false)), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(! (_GLF_DEAD(false)), _GLF_IDENTITY(bool(bool(! (_GLF_DEAD(false)))), true && (bool(bool(! (_GLF_DEAD(false))))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false), bvec3(bvec3(bvec3(_GLF_IDENTITY(! (_GLF_DEAD(false)), _GLF_IDENTITY(bool(bool(! (_GLF_DEAD(false)))), true && (bool(bool(! (_GLF_DEAD(false))))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))))), bool(bvec3(bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_DEAD(false)), (_GLF_IDENTITY(! (_GLF_DEAD(false)), (! (_GLF_DEAD(false))) && true)) && true), _GLF_IDENTITY(bool(bool(! (_GLF_DEAD(false)))), true && (bool(bool(! (_GLF_DEAD(false))))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(false, (false) && true)), bvec3(bvec3(bvec3(_GLF_IDENTITY(! (_GLF_DEAD(false)), _GLF_IDENTITY(bool(bool(! (_GLF_DEAD(false)))), true && (bool(bool(! (_GLF_DEAD(false))))))), _GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (injectionSwitch.x > injectionSwitch.y)), false))))), false, true)))), true, true, true))))))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
          barrier();
         barrier();
        }
       barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(true && (false), _GLF_IDENTITY((true && (false)) && true, ! (! (_GLF_IDENTITY((true && (false)) && true, bool(bvec2(_GLF_IDENTITY((true && (false)) && true, ((true && (false)) && true) && true), true))))))))))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
           barrier();
          }
         barrier();
        }
       barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), _GLF_IDENTITY((_GLF_IDENTITY(false, true && (false))), true && ((_GLF_IDENTITY(false, true && (false))))) || false)))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         barrier();
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END
BUFFER checker DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected_checker DATA_TYPE uint32 SIZE 8388096 FILL 0

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 
  BIND BUFFER checker AS storage DESCRIPTOR_SET 0 BINDING 2 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT checker EQ_BUFFER expected_checker
