#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_3 {
 uint _f0;
 vec4 _f1;
 vec4 _f2;
} ;

struct _GLF_struct_2 {
 mat2x4 _f0;
 vec3 _f1;
 mat4x2 _f2;
 bvec4 _f3;
 mat2x3 _f4;
 mat3x4 _f5;
 vec3 _f6;
} ;

struct _GLF_struct_1 {
 vec4 _f0;
 ivec4 _f1;
 mat2 _f2;
 ivec2 _f3;
 uvec3 _f4;
 mat3x4 _f5;
} ;

struct _GLF_struct_4 {
 bvec4 _f0;
 mat4 _f1;
 _GLF_struct_1 _f2;
 bool _f3;
 _GLF_struct_2 _f4;
 mat4x2 _f5;
 _GLF_struct_3 _f6;
} ;

struct _GLF_struct_0 {
 mat3x2 _f0;
} ;

struct _GLF_struct_5 {
 _GLF_struct_0 _f0;
 int _f1;
 _GLF_struct_4 _f2;
 vec3 _f3;
 ivec4 _f4;
 uint workgroup_base;
 vec3 _f5;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 do
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))), bool(bool(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))), false || (_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false))))))))))
      return;
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(false, (false) || false), true, false, false)), false || (bool(bvec4(_GLF_IDENTITY(false, (false) || false), true, false, false)))))), (_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false))))) && true))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     return;
    }
  }
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (0 ^ 1)); _injected_loop_counter ++)
    {
     for(int _injected_loop_counter = ((0 ^ 0) | int(_GLF_ONE(_GLF_IDENTITY(1.0, min(1.0, 1.0)), _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), clamp((injectionSwitch) * mat2(1.0), _GLF_IDENTITY((injectionSwitch) * mat2(1.0), max((injectionSwitch) * mat2(1.0), (injectionSwitch) * mat2(1.0))), (injectionSwitch) * mat2(1.0)))).y))); _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(0, (0 >> _GLF_IDENTITY(int(_GLF_IDENTITY(5, min(5, 5))), int(5))) + (_GLF_IDENTITY(0, (0) >> 0)))); _injected_loop_counter --)
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, true, false)))))
        return;
       return;
      }
    }
  }
 uint num_workgroup = _GLF_IDENTITY(gl_NumWorkGroups, (_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, uvec3(_GLF_IDENTITY(0u, (0u) >> 0u), 0u, 0u) ^ (gl_NumWorkGroups)), (_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, uvec3(0u, 0u, 0u) ^ (gl_NumWorkGroups)), (_GLF_IDENTITY(gl_NumWorkGroups, _GLF_IDENTITY(uvec3(0u, 0u, 0u), (_GLF_IDENTITY(uvec3(0u, 0u, 0u), uvec3(0u, 0u, 0u) ^ (_GLF_IDENTITY(uvec3(0u, 0u, 0u), (uvec3(0u, 0u, 0u)) >> uvec3(0u, 0u, 0u))))) | (_GLF_IDENTITY(uvec3(0u, 0u, 0u), min(uvec3(0u, 0u, 0u), uvec3(0u, 0u, 0u))))) ^ _GLF_IDENTITY((gl_NumWorkGroups), _GLF_IDENTITY(((gl_NumWorkGroups)), (((gl_NumWorkGroups))) ^ uvec3(0u, 0u, 0u)) / uvec3(1u, 1u, _GLF_IDENTITY(1u, (1u) * 1u))))) ^ uvec3(0u, 0u, 0u))) >> uvec3(0u, 0u, 0u))) * uvec3(1u, 1u, 1u)).x;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), bool(bvec2(bool(bool(false)), false))))))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))), true, false)))))
      return;
    }
   return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if(_GLF_DEAD(false))
  return;
 uint workgroup_size = _GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) + uvec3(0u, 0u, 0u)).x;
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, false || (injectionSwitch.x < injectionSwitch.y))))))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
     return;
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
  }
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(injectionSwitch.x > injectionSwitch.y, false), bvec2(_GLF_IDENTITY(bvec3(bvec2(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y, false), true), bvec3(bvec4(bvec3(bvec2(injectionSwitch.x > injectionSwitch.y, false), true), true)))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (bool(_GLF_IDENTITY(bvec2(injectionSwitch.x > injectionSwitch.y, false), bvec2(_GLF_IDENTITY(bvec3(bvec2(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y, false), true), bvec3(bvec4(bvec3(bvec2(injectionSwitch.x > injectionSwitch.y, false), true), true)))))))), (_GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(injectionSwitch.x > injectionSwitch.y, false), bvec2(_GLF_IDENTITY(bvec3(bvec2(injectionSwitch.x > injectionSwitch.y, false), true), bvec3(bvec4(bvec3(bvec2(injectionSwitch.x > injectionSwitch.y, false), true), true)))))), bool(bvec2(bool(_GLF_IDENTITY(bvec2(injectionSwitch.x > injectionSwitch.y, false), bvec2(_GLF_IDENTITY(bvec3(bvec2(injectionSwitch.x > injectionSwitch.y, false), true), bvec3(bvec4(bvec3(bvec2(injectionSwitch.x > injectionSwitch.y, false), true), true)))))), true))), (_GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(injectionSwitch.x > injectionSwitch.y, false), bvec2(_GLF_IDENTITY(bvec3(bvec2(injectionSwitch.x > injectionSwitch.y, false), true), bvec3(bvec4(bvec3(bvec2(injectionSwitch.x > injectionSwitch.y, false), true), true)))))), bool(bvec2(bool(_GLF_IDENTITY(bvec2(injectionSwitch.x > injectionSwitch.y, false), bvec2(_GLF_IDENTITY(bvec3(bvec2(injectionSwitch.x > injectionSwitch.y, false), true), bvec3(bvec4(bvec3(bvec2(injectionSwitch.x > injectionSwitch.y, false), true), true)))))), true))), ! (! (_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(injectionSwitch.x > injectionSwitch.y, false), bvec2(_GLF_IDENTITY(bvec3(bvec2(injectionSwitch.x > injectionSwitch.y, false), true), bvec3(bvec4(bvec3(bvec2(injectionSwitch.x > injectionSwitch.y, false), true), true)))))), bool(bvec2(bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y, false), bvec2(_GLF_IDENTITY(bvec3(bvec2(_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, float(vec4(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0), 1.0, 1.0, 1.0))))) > injectionSwitch.y, false), true), bvec3(bvec4(bvec3(bvec2(injectionSwitch.x > injectionSwitch.y, false), true), true)))))), true))))))) && true)) && true))), _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false))))) || (_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, float(mat2x3(injectionSwitch.y, 1.0, 1.0, 1.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y)))), mix(float(injectionSwitch.y), float(_GLF_FUZZED(7.1)), bool(false)))), bool(bvec3((injectionSwitch.x > injectionSwitch.y), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) < injectionSwitch.y)), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, vec2(mat4x2(injectionSwitch, determinant(mat3(1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0)), 0.0, 0.0, 1.0, 1.0, 0.0))).x < injectionSwitch.y)))))))), false || (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y))))))
  {
   for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < (((0 >> _GLF_IDENTITY(int(0), int(0))) << _GLF_IDENTITY(int(4), int(4))) ^ 1)); _injected_loop_counter ++)
    {
     return;
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, true && (true))))
  {
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
  }
 _GLF_struct_5 _GLF_struct_replacement_5 = _GLF_struct_5(_GLF_struct_0(mat3x2(1.0)), 1, _GLF_struct_4(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(true, ! (! (true))), (_GLF_IDENTITY(true, ! (! (true)))) && true)), mat4(1.0), _GLF_struct_1(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(vec4(1.0), vec4(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y)) * (_GLF_IDENTITY(vec4(1.0), mix(vec4((vec4(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, _GLF_IDENTITY(1.0, min(1.0, 1.0))))))[0], (_GLF_IDENTITY(vec4(1.0), mix(vec4(_GLF_FUZZED(3.6), _GLF_FUZZED(-7.2), (vec4(1.0))[2], (vec4(1.0))[3]), vec4((vec4(1.0))[0], (vec4(1.0))[1], _GLF_FUZZED(vec2(8.1, 9.3).x), _GLF_FUZZED(6.5)), bvec4(true, true, false, false))))[1], _GLF_FUZZED(224.354), _GLF_FUZZED(9.1)), vec4(_GLF_FUZZED(-3.0), _GLF_FUZZED(-7.6), (_GLF_IDENTITY(vec4(1.0), (vec4(1.0)) * mat4(1.0)))[2], (vec4(1.0))[3]), bvec4(false, false, true, true))))), max(vec4(1.0), vec4(1.0))), mix(vec4(_GLF_FUZZED(-5.6), _GLF_FUZZED(35.36), (_GLF_IDENTITY(_GLF_IDENTITY(vec4(1.0), vec4(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y)) * (_GLF_IDENTITY(vec4(1.0), mix(vec4((vec4(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, _GLF_IDENTITY(1.0, min(1.0, 1.0))))))[0], (_GLF_IDENTITY(vec4(1.0), mix(vec4(_GLF_FUZZED(3.6), _GLF_FUZZED(-7.2), (vec4(1.0))[2], (vec4(1.0))[3]), vec4((vec4(1.0))[0], (vec4(1.0))[1], _GLF_FUZZED(vec2(8.1, 9.3).x), _GLF_FUZZED(6.5)), bvec4(true, true, false, false))))[1], _GLF_FUZZED(224.354), _GLF_FUZZED(9.1)), vec4(_GLF_FUZZED(-3.0), _GLF_FUZZED(-7.6), (_GLF_IDENTITY(vec4(1.0), (vec4(1.0)) * mat4(1.0)))[2], (vec4(1.0))[3]), bvec4(false, false, true, true))))), max(vec4(1.0), vec4(1.0))))[2], (_GLF_IDENTITY(_GLF_IDENTITY(vec4(1.0), vec4(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y)) * (_GLF_IDENTITY(vec4(1.0), mix(vec4((vec4(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, _GLF_IDENTITY(1.0, min(1.0, 1.0))))))[0], (_GLF_IDENTITY(vec4(1.0), mix(vec4(_GLF_FUZZED(3.6), _GLF_FUZZED(-7.2), (vec4(1.0))[2], (vec4(1.0))[3]), vec4((vec4(1.0))[0], (vec4(1.0))[1], _GLF_FUZZED(vec2(8.1, 9.3).x), _GLF_FUZZED(6.5)), bvec4(true, true, false, false))))[1], _GLF_FUZZED(224.354), _GLF_FUZZED(9.1)), vec4(_GLF_FUZZED(-3.0), _GLF_FUZZED(-7.6), (_GLF_IDENTITY(vec4(1.0), (vec4(1.0)) * mat4(1.0)))[2], (vec4(1.0))[3]), bvec4(false, false, true, true))))), max(vec4(1.0), vec4(1.0))))[3]), vec4((_GLF_IDENTITY(_GLF_IDENTITY(vec4(1.0), vec4(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y)) * (_GLF_IDENTITY(vec4(1.0), mix(vec4((vec4(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, _GLF_IDENTITY(1.0, min(1.0, 1.0))))))[0], (_GLF_IDENTITY(vec4(1.0), mix(vec4(_GLF_FUZZED(3.6), _GLF_FUZZED(-7.2), (vec4(1.0))[2], (vec4(1.0))[3]), vec4((vec4(1.0))[0], (vec4(1.0))[1], _GLF_FUZZED(vec2(8.1, 9.3).x), _GLF_FUZZED(6.5)), bvec4(true, true, false, false))))[1], _GLF_FUZZED(224.354), _GLF_FUZZED(9.1)), vec4(_GLF_FUZZED(-3.0), _GLF_FUZZED(-7.6), (_GLF_IDENTITY(vec4(1.0), (vec4(1.0)) * mat4(1.0)))[2], (vec4(1.0))[3]), bvec4(false, false, true, true))))), max(vec4(1.0), vec4(1.0))))[0], (_GLF_IDENTITY(_GLF_IDENTITY(vec4(1.0), vec4(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y)) * (_GLF_IDENTITY(vec4(1.0), mix(vec4((vec4(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, _GLF_IDENTITY(1.0, min(1.0, 1.0))))))[0], (_GLF_IDENTITY(vec4(1.0), mix(vec4(_GLF_FUZZED(3.6), _GLF_FUZZED(-7.2), (vec4(1.0))[2], (vec4(1.0))[3]), vec4((vec4(1.0))[0], (vec4(1.0))[1], _GLF_FUZZED(vec2(8.1, 9.3).x), _GLF_FUZZED(6.5)), bvec4(true, true, false, false))))[1], _GLF_FUZZED(224.354), _GLF_FUZZED(9.1)), vec4(_GLF_FUZZED(-3.0), _GLF_FUZZED(-7.6), (_GLF_IDENTITY(vec4(1.0), (vec4(1.0)) * mat4(1.0)))[2], (vec4(1.0))[3]), bvec4(false, false, true, true))))), max(vec4(1.0), vec4(1.0))))[1], _GLF_FUZZED(float(9428)), _GLF_FUZZED(5253.4401)), bvec4(true, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))), _GLF_IDENTITY(ivec4(_GLF_IDENTITY(1, 0 + _GLF_IDENTITY((1), min((1), (1))))), _GLF_IDENTITY(max(ivec4(_GLF_IDENTITY(1, 1 * (_GLF_IDENTITY(1, int(_GLF_ZERO(0.0, injectionSwitch.x)) | (1))))), _GLF_IDENTITY(ivec4(1), (true ? _GLF_IDENTITY(ivec4(1), (_GLF_IDENTITY(ivec4(1), ~ (~ (ivec4(1))))) * ivec4(1, 1, 1, 1)) : _GLF_FUZZED(ivec4(13906, 48469, _GLF_IDENTITY(-4732, (-4732) | 0), -33587))))), (max(ivec4(_GLF_IDENTITY(1, 1 * (_GLF_IDENTITY(1, int(_GLF_ZERO(0.0, injectionSwitch.x)) | (1))))), _GLF_IDENTITY(ivec4(1), (true ? _GLF_IDENTITY(ivec4(1), (_GLF_IDENTITY(ivec4(1), ~ (~ (ivec4(1))))) * ivec4(1, 1, 1, 1)) : _GLF_FUZZED(ivec4(13906, 48469, _GLF_IDENTITY(-4732, (-4732) | 0), -33587)))))) | (max(ivec4(_GLF_IDENTITY(1, 1 * (_GLF_IDENTITY(1, int(_GLF_ZERO(0.0, injectionSwitch.x)) | (1))))), _GLF_IDENTITY(ivec4(1), (true ? _GLF_IDENTITY(ivec4(1), (_GLF_IDENTITY(ivec4(1), ~ (~ (ivec4(1))))) * ivec4(1, 1, 1, 1)) : _GLF_FUZZED(ivec4(13906, 48469, _GLF_IDENTITY(-4732, (-4732) | 0), -33587)))))))), _GLF_IDENTITY(mat2(1.0), mat2(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)) + (mat2(1.0))), ivec2(_GLF_IDENTITY(1, _GLF_IDENTITY(0, _GLF_IDENTITY(1, (0 >> _GLF_IDENTITY(int(8), int(8))) | (1)) * (0)) ^ (_GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY(clamp(1, 1, 1), (clamp(1, 1, 1)) | (clamp(_GLF_IDENTITY(1, ~ (~ (1))), _GLF_IDENTITY(1, int(ivec2(1, 1))), 1)))), (_GLF_IDENTITY(1, _GLF_IDENTITY(clamp(1, 1, 1), (clamp(_GLF_IDENTITY(1, (1) >> 0), 1, 1)) | (clamp(_GLF_IDENTITY(1, ~ (~ (1))), _GLF_IDENTITY(1, (1) ^ 0), 1))))) - 0)))), _GLF_IDENTITY(uvec3(_GLF_IDENTITY(_GLF_IDENTITY(1u, min(1u, _GLF_IDENTITY(1u, (1u) | 0u))), ~ _GLF_IDENTITY((~ _GLF_IDENTITY((1u), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY((1u), ((1u)) >> 0u), ((1u)) >> 0u)), max((_GLF_IDENTITY(_GLF_IDENTITY((1u), ((1u)) >> 0u), ((1u)) >> 0u)), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY((1u), ((1u)) >> 0u), ((1u)) >> 0u)), ((_GLF_IDENTITY(_GLF_IDENTITY((1u), ((1u)) >> 0u), ((1u)) >> 0u))) / 1u))) / 1u)), ((~ _GLF_IDENTITY((1u), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY((1u), ((1u)) >> _GLF_IDENTITY(0u, (0u) ^ 0u)), ((1u)) >> 0u)), max((_GLF_IDENTITY(_GLF_IDENTITY((1u), ((1u)) >> 0u), ((1u)) >> 0u)), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY((1u), ((1u)) >> 0u), ((1u)) >> 0u)), ((_GLF_IDENTITY(_GLF_IDENTITY((1u), (_GLF_IDENTITY((_GLF_IDENTITY(1u, clamp(1u, _GLF_IDENTITY(1u, (1u) >> 0u), 1u))), 0u ^ ((_GLF_IDENTITY(1u, clamp(1u, _GLF_IDENTITY(1u, (1u) >> 0u), 1u)))))) >> 0u), ((1u)) >> 0u))) / 1u))) / 1u))) - 0u))), uvec3(_GLF_IDENTITY(uvec3(_GLF_IDENTITY(_GLF_IDENTITY(uvec3(_GLF_IDENTITY(1u, ~ (~ _GLF_IDENTITY((1u), ((1u)) ^ 0u)))), (uvec3(_GLF_IDENTITY(1u, ~ (~ _GLF_IDENTITY((1u), ((1u)) ^ 0u))))) | (_GLF_IDENTITY(uvec3(_GLF_IDENTITY(1u, ~ (~ _GLF_IDENTITY((1u), ((1u)) ^ 0u)))), uvec3(uvec4(_GLF_IDENTITY(uvec3(_GLF_IDENTITY(1u, ~ (~ _GLF_IDENTITY((1u), ((1u)) ^ 0u)))), uvec3(uvec4(uvec3(_GLF_IDENTITY(1u, ~ (~ _GLF_IDENTITY((1u), ((1u)) ^ 0u)))), 1u))), 1u))))), min(_GLF_IDENTITY(_GLF_IDENTITY(uvec3(_GLF_IDENTITY(1u, ~ (~ (1u)))), (uvec3(_GLF_IDENTITY(1u, ~ (~ (_GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, 0u ^ (1u))) | 0u)))))) | (uvec3(_GLF_IDENTITY(1u, ~ (~ (1u)))))), clamp(_GLF_IDENTITY(uvec3(_GLF_IDENTITY(1u, ~ (~ (1u)))), _GLF_IDENTITY((uvec3(_GLF_IDENTITY(1u, ~ (~ (1u))))), clamp((uvec3(_GLF_IDENTITY(1u, ~ (~ (1u))))), (uvec3(_GLF_IDENTITY(1u, ~ (~ (1u))))), _GLF_IDENTITY((uvec3(_GLF_IDENTITY(1u, ~ (~ (1u))))), uvec3(uvec3((uvec3(_GLF_IDENTITY(1u, ~ (~ (1u)))))))))) | (uvec3(_GLF_IDENTITY(1u, ~ (~ (1u)))))), _GLF_IDENTITY(_GLF_IDENTITY(uvec3(_GLF_IDENTITY(1u, ~ (~ (1u)))), (uvec3(_GLF_IDENTITY(1u, ~ (~ (1u))))) | (uvec3(_GLF_IDENTITY(1u, ~ (~ (1u)))))), clamp(_GLF_IDENTITY(uvec3(_GLF_IDENTITY(1u, ~ _GLF_IDENTITY((~ (1u)), min(_GLF_IDENTITY((~ (1u)), ~ (~ ((~ (1u))))), (~ (1u)))))), (uvec3(_GLF_IDENTITY(1u, ~ (~ (1u))))) | (uvec3(_GLF_IDENTITY(1u, ~ (~ (1u)))))), _GLF_IDENTITY(_GLF_IDENTITY(uvec3(_GLF_IDENTITY(_GLF_IDENTITY(1u, (1u) / 1u), ~ (~ (1u)))), (uvec3(_GLF_IDENTITY(1u, ~ _GLF_IDENTITY((~ (1u)), min((~ (1u)), (~ (1u))))))) | (uvec3(_GLF_IDENTITY(1u, ~ _GLF_IDENTITY((_GLF_IDENTITY(~ (1u), (~ (1u)) | (~ (1u)))), ((_GLF_IDENTITY(~ (1u), (~ (1u)) | (~ (1u))))) - 0u))))), (_GLF_IDENTITY(uvec3(_GLF_IDENTITY(1u, ~ (~ (1u)))), (uvec3(_GLF_IDENTITY(1u, ~ (~ (1u))))) | (uvec3(_GLF_IDENTITY(1u, ~ (~ (1u))))))) | (_GLF_IDENTITY(uvec3(_GLF_IDENTITY(_GLF_IDENTITY(1u, clamp(1u, 1u, 1u)), ~ (~ (1u)))), (uvec3(_GLF_IDENTITY(1u, ~ _GLF_IDENTITY((~ (1u)), max((~ (1u)), (~ (1u))))))) | _GLF_IDENTITY((uvec3(_GLF_IDENTITY(1u, ~ (~ (1u))))), (_GLF_IDENTITY((uvec3(_GLF_IDENTITY(1u, ~ (~ (1u))))), ((uvec3(_GLF_IDENTITY(1u, ~ (~ (1u)))))) << uvec3(0u, 0u, 0u))) << uvec3(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)))))), _GLF_IDENTITY(uvec3(_GLF_IDENTITY(_GLF_IDENTITY(1u, uint(uvec2(_GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, (true ? 1u : _GLF_FUZZED(subgroup_local_id)))) ^ 0u), 0u))), ~ (~ (1u)))), (uvec3(_GLF_IDENTITY(1u, ~ (~ (1u))))) | (uvec3(_GLF_IDENTITY(_GLF_IDENTITY(1u, clamp(1u, 1u, _GLF_IDENTITY(1u, 0u ^ (1u)))), ~ (~ (1u)))))))), _GLF_IDENTITY(uvec3(_GLF_IDENTITY(1u, ~ (~ (1u)))), (uvec3(_GLF_IDENTITY(1u, ~ (~ (1u))))) | (uvec3(_GLF_IDENTITY(1u, ~ (~ (_GLF_IDENTITY(1u, (1u) | 0u))))))))), uvec3(_GLF_IDENTITY(1u, ~ (~ (_GLF_IDENTITY(1u, min(1u, 1u))))))))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(uvec3(_GLF_IDENTITY(uvec3(_GLF_IDENTITY(1u, ~ (~ _GLF_IDENTITY((_GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, (1u) / 1u)) ^ (0u | 0u))), 0u ^ _GLF_IDENTITY(((1u)), (_GLF_IDENTITY(((1u)), ~ (~ (((1u)))))) - 0u))))), min(_GLF_IDENTITY(uvec3(_GLF_IDENTITY(1u, ~ (_GLF_IDENTITY(~ (1u), max(~ (1u), ~ (1u)))))), (uvec3(_GLF_IDENTITY(1u, ~ _GLF_IDENTITY((~ (1u)), uint(_GLF_IDENTITY(uvec4((~ (1u)), _GLF_IDENTITY(1u, (1u) | (1u)), (1u | 1u), 1u), (_GLF_IDENTITY(false ? _GLF_FUZZED(uvec4(125291u, 105246u, 105481u, 123480u)) : uvec4((~ (1u)), 1u, (1u | 1u), 1u), (_GLF_IDENTITY(_GLF_IDENTITY(false ? _GLF_FUZZED(uvec4(125291u, 105246u, 105481u, 123480u)) : uvec4((~ (1u)), 1u, (1u | 1u), 1u), (false ? _GLF_FUZZED(uvec4(125291u, 105246u, 105481u, 123480u)) : uvec4((~ (1u)), 1u, (1u | 1u), 1u)) / uvec4(1u, 1u, 1u, 1u)), max(_GLF_IDENTITY(false ? _GLF_FUZZED(uvec4(125291u, 105246u, 105481u, 123480u)) : uvec4((~ (1u)), 1u, (1u | 1u), 1u), min(false ? _GLF_FUZZED(uvec4(125291u, 105246u, 105481u, 123480u)) : uvec4((~ (1u)), 1u, (1u | 1u), 1u), false ? _GLF_FUZZED(uvec4(125291u, 105246u, 105481u, 123480u)) : uvec4((~ (1u)), 1u, (1u | 1u), 1u))), _GLF_IDENTITY(false ? _GLF_FUZZED(uvec4(125291u, 105246u, 105481u, 123480u)) : uvec4(_GLF_IDENTITY((~ (1u)), ((~ (1u))) | (_GLF_IDENTITY((~ (1u)), ((~ (1u))) | 0u))), 1u, (1u | 1u), 1u), (false ? _GLF_FUZZED(uvec4(125291u, 105246u, 105481u, 123480u)) : uvec4((~ (1u)), 1u, (1u | 1u), 1u)) - uvec4(0u, 0u, 0u, 0u))))) >> uvec4(0u, _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, min(0u, _GLF_IDENTITY(0u, max(0u, 0u))))) | (0u)), 0u, 0u))))))))) | (uvec3(_GLF_IDENTITY(1u, ~ (~ (1u)))))), uvec3(_GLF_IDENTITY(1u, ~ (~ (1u))))))), (_GLF_IDENTITY(_GLF_IDENTITY(uvec3(_GLF_IDENTITY(uvec3(_GLF_IDENTITY(1u, ~ (~ (1u)))), min(_GLF_IDENTITY(uvec3(_GLF_IDENTITY(1u, ~ (~ (1u)))), (uvec3(_GLF_IDENTITY(1u, ~ (~ (1u))))) | (uvec3(_GLF_IDENTITY(1u, ~ (~ (1u)))))), uvec3(_GLF_IDENTITY(1u, ~ (_GLF_IDENTITY(~ (1u), uint(uvec4(~ (1u), 0u, 0u, 0u))))))))), (uvec3(_GLF_IDENTITY(uvec3(_GLF_IDENTITY(1u, ~ (~ (1u)))), min(_GLF_IDENTITY(uvec3(_GLF_IDENTITY(1u, ~ (~ (1u)))), _GLF_IDENTITY((uvec3(_GLF_IDENTITY(1u, ~ _GLF_IDENTITY((~ (1u)), (true ? _GLF_IDENTITY((~ (1u)), min((~ (1u)), (~ (1u)))) : _GLF_FUZZED(subgroup_local_id)))))), clamp((uvec3(_GLF_IDENTITY(1u, ~ _GLF_IDENTITY((~ (1u)), (true ? _GLF_IDENTITY((~ (1u)), min((~ (1u)), (~ (1u)))) : _GLF_FUZZED(subgroup_local_id)))))), (uvec3(_GLF_IDENTITY(1u, ~ _GLF_IDENTITY((~ (1u)), (true ? _GLF_IDENTITY((~ (1u)), min((~ (1u)), (~ (1u)))) : _GLF_FUZZED(subgroup_local_id)))))), (uvec3(_GLF_IDENTITY(1u, ~ _GLF_IDENTITY((~ (1u)), (true ? _GLF_IDENTITY((~ (1u)), min((~ (1u)), (~ (1u)))) : _GLF_FUZZED(subgroup_local_id)))))))) | _GLF_IDENTITY((uvec3(_GLF_IDENTITY(_GLF_IDENTITY(1u, ~ (~ (1u))), 1u * (_GLF_IDENTITY(_GLF_IDENTITY(1u, ~ (~ (1u))), (_GLF_IDENTITY(1u, ~ (~ (1u)))) | (_GLF_IDENTITY(1u, ~ (~ (1u))))))))), uvec3(uvec4(_GLF_IDENTITY((uvec3(_GLF_IDENTITY(_GLF_IDENTITY(1u, ~ (~ (1u))), 1u * (_GLF_IDENTITY(_GLF_IDENTITY(1u, ~ (~ (1u))), (_GLF_IDENTITY(1u, ~ (~ (1u)))) | (_GLF_IDENTITY(1u, ~ (~ (1u))))))))), (true ? _GLF_IDENTITY((uvec3(_GLF_IDENTITY(_GLF_IDENTITY(1u, ~ (~ (1u))), 1u * (_GLF_IDENTITY(_GLF_IDENTITY(1u, ~ (~ (1u))), (_GLF_IDENTITY(1u, ~ (~ (1u)))) | (_GLF_IDENTITY(1u, ~ (~ (1u))))))))), clamp((uvec3(_GLF_IDENTITY(_GLF_IDENTITY(1u, ~ (~ (1u))), 1u * (_GLF_IDENTITY(_GLF_IDENTITY(1u, ~ (~ (1u))), (_GLF_IDENTITY(1u, ~ (~ (1u)))) | (_GLF_IDENTITY(1u, ~ (~ (1u))))))))), (uvec3(_GLF_IDENTITY(_GLF_IDENTITY(1u, ~ (~ (1u))), 1u * (_GLF_IDENTITY(_GLF_IDENTITY(1u, ~ (~ (1u))), (_GLF_IDENTITY(1u, ~ (~ (1u)))) | (_GLF_IDENTITY(1u, ~ (~ (1u))))))))), (uvec3(_GLF_IDENTITY(_GLF_IDENTITY(1u, ~ (~ (1u))), 1u * (_GLF_IDENTITY(_GLF_IDENTITY(1u, ~ (~ (1u))), (_GLF_IDENTITY(1u, ~ (~ (1u)))) | (_GLF_IDENTITY(1u, ~ (~ (1u))))))))))) : _GLF_FUZZED((uvec3(137827u, 38362u, 142671u) & workgroup_size)))), 0u)))), uvec3(_GLF_IDENTITY(1u, ~ (~ (1u)))))))) << uvec3(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(_GLF_IDENTITY(0.0, min(0.0, 0.0)), injectionSwitch.x))), ~ (_GLF_IDENTITY(~ (uvec3(_GLF_IDENTITY(uvec3(_GLF_IDENTITY(1u, ~ (~ (1u)))), min(_GLF_IDENTITY(uvec3(_GLF_IDENTITY(1u, ~ (~ _GLF_IDENTITY((1u), (true ? (1u) : _GLF_FUZZED(subgroup_size)))))), (uvec3(_GLF_IDENTITY(1u, ~ _GLF_IDENTITY((~ (1u)), ((_GLF_IDENTITY(~ (1u), (false ? _GLF_FUZZED(subgroup_local_id) : ~ (1u))))) + 0u)))) | (uvec3(_GLF_IDENTITY(1u, ~ _GLF_IDENTITY((_GLF_IDENTITY(~ (1u), ~ (~ (~ (1u))))), max((~ (1u)), _GLF_IDENTITY((~ (1u)), clamp((~ (1u)), (~ (1u)), _GLF_IDENTITY((~ (1u)), ((~ (1u))) >> 0u))))))))), uvec3(_GLF_IDENTITY(1u, ~ (~ (1u)))))))), max(~ (uvec3(_GLF_IDENTITY(uvec3(_GLF_IDENTITY(1u, ~ (~ (1u)))), min(_GLF_IDENTITY(uvec3(_GLF_IDENTITY(1u, ~ (~ (1u)))), (uvec3(_GLF_IDENTITY(_GLF_IDENTITY(1u, ~ (~ (1u))), _GLF_IDENTITY(uint(uvec4(_GLF_IDENTITY(_GLF_IDENTITY(1u, ~ (~ (1u))), (_GLF_IDENTITY(1u, ~ (~ (1u)))) | 0u), 0u, 0u, 0u)), max(uint(uvec4(_GLF_IDENTITY(1u, ~ (~ (1u))), 0u, 0u, 0u)), uint(uvec4(_GLF_IDENTITY(1u, ~ (~ (1u))), 0u, 0u, _GLF_IDENTITY(0u, _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec2(0u, 1u), (true ? uvec2(0u, 1u) : _GLF_FUZZED(uvec2(164164u, 66875u))))), clamp(uint(_GLF_IDENTITY(uvec2(0u, 1u), (true ? uvec2(0u, 1u) : _GLF_FUZZED(uvec2(164164u, 66875u))))), uint(_GLF_IDENTITY(uvec2(0u, 1u), (true ? uvec2(0u, 1u) : _GLF_FUZZED(uvec2(164164u, 66875u))))), uint(_GLF_IDENTITY(uvec2(0u, 1u), (true ? uvec2(0u, 1u) : _GLF_FUZZED(uvec2(164164u, 66875u))))))))))))))) | (uvec3(_GLF_IDENTITY(1u, ~ (~ (1u)))))), uvec3(_GLF_IDENTITY(1u, ~ (~ (1u)))))))), ~ (uvec3(_GLF_IDENTITY(uvec3(_GLF_IDENTITY(1u, ~ (~ (1u)))), min(_GLF_IDENTITY(uvec3(_GLF_IDENTITY(1u, ~ (~ (1u)))), (uvec3(_GLF_IDENTITY(_GLF_IDENTITY(1u, ~ (~ (1u))), 1u * (_GLF_IDENTITY(1u, ~ (~ (1u))))))) | (uvec3(_GLF_IDENTITY(1u, ~ _GLF_IDENTITY((~ (1u)), (_GLF_IDENTITY((~ (1u)), 0u ^ ((~ (1u))))) << 0u))))), _GLF_IDENTITY(uvec3(_GLF_IDENTITY(1u, ~ (~ (1u)))), clamp(uvec3(_GLF_IDENTITY(1u, ~ (~ (1u)))), uvec3(_GLF_IDENTITY(1u, ~ (~ (1u)))), uvec3(_GLF_IDENTITY(1u, ~ (~ (1u))))))))))))))) - uvec3(0u, 0u, _GLF_IDENTITY(0u, clamp(0u, 0u, 0u))))), min(~ (_GLF_IDENTITY(_GLF_IDENTITY(uvec3(_GLF_IDENTITY(uvec3(_GLF_IDENTITY(_GLF_IDENTITY(1u, (false ? _GLF_FUZZED(subgroup_size) : 1u)), ~ (~ (1u)))), min(_GLF_IDENTITY(uvec3(_GLF_IDENTITY(1u, ~ (_GLF_IDENTITY(~ (1u), 0u ^ (_GLF_IDENTITY(~ (1u), (~ (1u)) | 0u)))))), (uvec3(_GLF_IDENTITY(1u, ~ (~ (1u))))) | (uvec3(_GLF_IDENTITY(_GLF_IDENTITY(1u, ~ (~ (1u))), clamp(_GLF_IDENTITY(1u, ~ (~ (1u))), _GLF_IDENTITY(1u, ~ (~ (1u))), _GLF_IDENTITY(1u, ~ (~ (1u)))))))), uvec3(_GLF_IDENTITY(1u, ~ (~ _GLF_IDENTITY((1u), ((1u)) - 0u))))))), clamp(uvec3(_GLF_IDENTITY(uvec3(_GLF_IDENTITY(_GLF_IDENTITY(1u, (false ? _GLF_FUZZED(subgroup_size) : 1u)), ~ (_GLF_IDENTITY(~ (1u), ~ (~ (_GLF_IDENTITY(~ (1u), (~ (1u)) / 1u))))))), min(_GLF_IDENTITY(uvec3(_GLF_IDENTITY(1u, ~ (~ (1u)))), (uvec3(_GLF_IDENTITY(1u, ~ (~ (1u))))) | (uvec3(_GLF_IDENTITY(1u, ~ (~ (1u)))))), uvec3(_GLF_IDENTITY(1u, ~ (~ _GLF_IDENTITY((1u), ((1u)) - 0u))))))), _GLF_IDENTITY(uvec3(_GLF_IDENTITY(uvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1u, ~ (_GLF_IDENTITY(~ (1u), 1u * (~ (1u))))), (false ? _GLF_IDENTITY(_GLF_FUZZED(subgroup_size), (true ? _GLF_FUZZED(subgroup_size) : _GLF_FUZZED(workgroup_size))) : 1u)), ~ (~ (1u)))), min(_GLF_IDENTITY(uvec3(_GLF_IDENTITY(1u, ~ (~ (1u)))), (uvec3(_GLF_IDENTITY(1u, ~ (~ (1u))))) | (uvec3(_GLF_IDENTITY(1u, ~ (~ (1u)))))), uvec3(_GLF_IDENTITY(1u, ~ (~ _GLF_IDENTITY((1u), ((1u)) - 0u))))))), ~ (~ (uvec3(_GLF_IDENTITY(uvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1u, min(_GLF_IDENTITY(1u, min(1u, 1u)), 1u)), (false ? _GLF_FUZZED(subgroup_size) : 1u)), ~ (~ (1u)))), min(_GLF_IDENTITY(_GLF_IDENTITY(uvec3(_GLF_IDENTITY(1u, ~ (~ (1u)))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(uvec3(100402u, 150688u, 43953u)) : uvec3(_GLF_IDENTITY(1u, ~ (~ (1u)))))), (uvec3(_GLF_IDENTITY(1u, ~ (~ (_GLF_IDENTITY(1u, min(_GLF_IDENTITY(1u, max(_GLF_IDENTITY(1u, max(1u, 1u)), 1u)), 1u))))))) | (uvec3(_GLF_IDENTITY(1u, ~ (~ (1u)))))), uvec3(_GLF_IDENTITY(1u, ~ (~ _GLF_IDENTITY((1u), ((1u)) - 0u)))))))))), uvec3(_GLF_IDENTITY(uvec3(_GLF_IDENTITY(_GLF_IDENTITY(1u, (false ? _GLF_FUZZED(subgroup_size) : 1u)), ~ (~ (1u)))), min(_GLF_IDENTITY(_GLF_IDENTITY(uvec3(_GLF_IDENTITY(1u, ~ (~ (1u)))), (uvec3(_GLF_IDENTITY(1u, ~ (~ (1u))))) | (uvec3(_GLF_IDENTITY(1u, ~ (~ (1u)))))), (_GLF_IDENTITY(uvec3(_GLF_IDENTITY(1u, ~ (~ (1u)))), (uvec3(_GLF_IDENTITY(1u, ~ (~ (1u))))) | (uvec3(_GLF_IDENTITY(1u, ~ (~ (1u))))))) ^ uvec3(0u, 0u, 0u)), uvec3(_GLF_IDENTITY(1u, ~ (~ _GLF_IDENTITY((_GLF_IDENTITY(1u, min(1u, _GLF_IDENTITY(1u, uint(uint(1u)))))), ((1u)) - 0u))))))))), _GLF_IDENTITY((_GLF_IDENTITY(uvec3(_GLF_IDENTITY(uvec3(_GLF_IDENTITY(1u, ~ (~ (_GLF_IDENTITY(1u, (1u) | (1u)))))), _GLF_IDENTITY(min(_GLF_IDENTITY(uvec3(_GLF_IDENTITY(1u, _GLF_IDENTITY(~ (~ (1u)), 0u ^ (_GLF_IDENTITY(~ (~ (1u)), (~ (~ _GLF_IDENTITY((1u), max((1u), (1u))))) | (~ (~ (1u)))))))), (uvec3(_GLF_IDENTITY(1u, ~ (~ (1u))))) | (uvec3(_GLF_IDENTITY(1u, ~ (~ (1u)))))), uvec3(_GLF_IDENTITY(1u, ~ (~ (1u))))), uvec3(0u, 0u, 0u) ^ (min(_GLF_IDENTITY(uvec3(_GLF_IDENTITY(1u, _GLF_IDENTITY(~ (~ (1u)), 0u ^ (_GLF_IDENTITY(~ (~ (1u)), (~ (~ _GLF_IDENTITY((1u), max((1u), (1u))))) | (~ (~ (1u)))))))), (uvec3(_GLF_IDENTITY(1u, ~ (~ (1u))))) | (uvec3(_GLF_IDENTITY(1u, ~ (~ (1u)))))), uvec3(_GLF_IDENTITY(1u, ~ (~ (1u))))))))), min(uvec3(_GLF_IDENTITY(uvec3(_GLF_IDENTITY(1u, ~ (~ (_GLF_IDENTITY(1u, (1u) | (1u)))))), _GLF_IDENTITY(min(_GLF_IDENTITY(uvec3(_GLF_IDENTITY(1u, _GLF_IDENTITY(~ (~ (1u)), 0u ^ (_GLF_IDENTITY(~ (~ (1u)), (~ (~ _GLF_IDENTITY((1u), max((1u), (1u))))) | (~ (~ (1u)))))))), (uvec3(_GLF_IDENTITY(1u, ~ (~ (1u))))) | (uvec3(_GLF_IDENTITY(1u, ~ (~ (1u)))))), uvec3(_GLF_IDENTITY(1u, ~ (~ (1u))))), uvec3(0u, 0u, 0u) ^ (min(_GLF_IDENTITY(uvec3(_GLF_IDENTITY(1u, _GLF_IDENTITY(~ (~ (1u)), 0u ^ (_GLF_IDENTITY(~ (~ (1u)), (~ (~ _GLF_IDENTITY((1u), max((1u), (1u))))) | (~ (~ (1u)))))))), (uvec3(_GLF_IDENTITY(1u, ~ (~ (1u))))) | (uvec3(_GLF_IDENTITY(1u, ~ (~ (1u)))))), uvec3(_GLF_IDENTITY(1u, ~ (~ (1u))))))))), uvec3(_GLF_IDENTITY(uvec3(_GLF_IDENTITY(1u, ~ (~ (_GLF_IDENTITY(1u, (1u) | (1u)))))), _GLF_IDENTITY(min(_GLF_IDENTITY(uvec3(_GLF_IDENTITY(1u, _GLF_IDENTITY(~ (~ (1u)), 0u ^ (_GLF_IDENTITY(~ (~ (1u)), (~ (~ _GLF_IDENTITY((1u), max((1u), (1u))))) | (~ (~ (1u)))))))), (uvec3(_GLF_IDENTITY(1u, ~ (~ (1u))))) | (uvec3(_GLF_IDENTITY(1u, ~ (~ (1u)))))), uvec3(_GLF_IDENTITY(1u, ~ (~ (1u))))), uvec3(0u, 0u, 0u) ^ (min(_GLF_IDENTITY(uvec3(_GLF_IDENTITY(1u, _GLF_IDENTITY(~ (~ (1u)), 0u ^ (_GLF_IDENTITY(~ (~ (1u)), (~ (~ _GLF_IDENTITY((1u), max((1u), (1u))))) | (~ (~ (1u)))))))), (uvec3(_GLF_IDENTITY(1u, ~ (~ (1u))))) | (uvec3(_GLF_IDENTITY(1u, ~ (~ (1u)))))), uvec3(_GLF_IDENTITY(1u, ~ (~ (1u)))))))))))), max((_GLF_IDENTITY(uvec3(_GLF_IDENTITY(uvec3(_GLF_IDENTITY(1u, ~ (~ (_GLF_IDENTITY(1u, (1u) | (1u)))))), _GLF_IDENTITY(min(_GLF_IDENTITY(uvec3(_GLF_IDENTITY(1u, _GLF_IDENTITY(~ (~ (1u)), 0u ^ (_GLF_IDENTITY(~ (~ (1u)), (~ (~ _GLF_IDENTITY((1u), max((1u), (1u))))) | (~ (~ (1u)))))))), (uvec3(_GLF_IDENTITY(1u, ~ (~ (1u))))) | (uvec3(_GLF_IDENTITY(1u, ~ (~ (1u)))))), uvec3(_GLF_IDENTITY(1u, ~ (~ (1u))))), uvec3(0u, 0u, 0u) ^ (min(_GLF_IDENTITY(uvec3(_GLF_IDENTITY(1u, _GLF_IDENTITY(~ (~ (1u)), 0u ^ (_GLF_IDENTITY(~ (~ (1u)), (~ (~ _GLF_IDENTITY((1u), max((1u), (1u))))) | (~ (~ (1u)))))))), (uvec3(_GLF_IDENTITY(1u, ~ (~ (1u))))) | (uvec3(_GLF_IDENTITY(1u, ~ (~ (1u)))))), uvec3(_GLF_IDENTITY(1u, ~ (~ (1u))))))))), min(uvec3(_GLF_IDENTITY(uvec3(_GLF_IDENTITY(1u, ~ (~ (_GLF_IDENTITY(1u, (1u) | (1u)))))), _GLF_IDENTITY(min(_GLF_IDENTITY(uvec3(_GLF_IDENTITY(1u, _GLF_IDENTITY(~ (~ (1u)), 0u ^ (_GLF_IDENTITY(~ (~ (1u)), (~ (~ _GLF_IDENTITY((1u), max((1u), (1u))))) | (~ (~ (1u)))))))), (uvec3(_GLF_IDENTITY(1u, ~ (~ (1u))))) | (uvec3(_GLF_IDENTITY(1u, ~ (~ (1u)))))), uvec3(_GLF_IDENTITY(1u, ~ (~ (1u))))), uvec3(0u, 0u, 0u) ^ (min(_GLF_IDENTITY(uvec3(_GLF_IDENTITY(1u, _GLF_IDENTITY(~ (~ (1u)), 0u ^ (_GLF_IDENTITY(~ (~ (1u)), (~ (~ _GLF_IDENTITY((1u), max((1u), (1u))))) | (~ (~ (1u)))))))), (uvec3(_GLF_IDENTITY(1u, ~ (~ (1u))))) | (uvec3(_GLF_IDENTITY(1u, ~ (~ (1u)))))), uvec3(_GLF_IDENTITY(1u, ~ (~ (1u))))))))), uvec3(_GLF_IDENTITY(uvec3(_GLF_IDENTITY(1u, ~ (~ (_GLF_IDENTITY(1u, (1u) | (1u)))))), _GLF_IDENTITY(min(_GLF_IDENTITY(uvec3(_GLF_IDENTITY(1u, _GLF_IDENTITY(~ (~ (1u)), 0u ^ (_GLF_IDENTITY(~ (~ (1u)), (~ (~ _GLF_IDENTITY((1u), max((1u), (1u))))) | (~ (~ (1u)))))))), (uvec3(_GLF_IDENTITY(1u, ~ (~ (1u))))) | (uvec3(_GLF_IDENTITY(1u, ~ (~ (1u)))))), uvec3(_GLF_IDENTITY(1u, ~ (~ (1u))))), uvec3(0u, 0u, 0u) ^ (min(_GLF_IDENTITY(uvec3(_GLF_IDENTITY(1u, _GLF_IDENTITY(~ (~ (1u)), 0u ^ (_GLF_IDENTITY(~ (~ (1u)), (~ (~ _GLF_IDENTITY((1u), max((1u), (1u))))) | (~ (~ (1u)))))))), (uvec3(_GLF_IDENTITY(1u, ~ (~ (1u))))) | (uvec3(_GLF_IDENTITY(1u, ~ (~ (1u)))))), uvec3(_GLF_IDENTITY(1u, ~ (~ (1u)))))))))))), (_GLF_IDENTITY(uvec3(_GLF_IDENTITY(uvec3(_GLF_IDENTITY(1u, ~ (~ (_GLF_IDENTITY(1u, (1u) | (1u)))))), _GLF_IDENTITY(min(_GLF_IDENTITY(uvec3(_GLF_IDENTITY(1u, _GLF_IDENTITY(~ (~ (1u)), 0u ^ (_GLF_IDENTITY(~ (~ (1u)), (~ (~ _GLF_IDENTITY((1u), max((1u), (1u))))) | (~ (~ (1u)))))))), (uvec3(_GLF_IDENTITY(1u, ~ (~ (1u))))) | (uvec3(_GLF_IDENTITY(1u, ~ (~ (1u)))))), uvec3(_GLF_IDENTITY(1u, ~ (~ (1u))))), uvec3(0u, 0u, 0u) ^ (min(_GLF_IDENTITY(uvec3(_GLF_IDENTITY(1u, _GLF_IDENTITY(~ (~ (1u)), 0u ^ (_GLF_IDENTITY(~ (~ (1u)), (~ (~ _GLF_IDENTITY((1u), max((1u), (1u))))) | (~ (~ (1u)))))))), (uvec3(_GLF_IDENTITY(1u, ~ (~ (1u))))) | (uvec3(_GLF_IDENTITY(1u, ~ (~ (1u)))))), uvec3(_GLF_IDENTITY(1u, ~ (~ (1u))))))))), min(uvec3(_GLF_IDENTITY(uvec3(_GLF_IDENTITY(1u, ~ (~ (_GLF_IDENTITY(1u, (1u) | (1u)))))), _GLF_IDENTITY(min(_GLF_IDENTITY(uvec3(_GLF_IDENTITY(1u, _GLF_IDENTITY(~ (~ (1u)), 0u ^ (_GLF_IDENTITY(~ (~ (1u)), (~ (~ _GLF_IDENTITY((1u), max((1u), (1u))))) | (~ (~ (1u)))))))), (uvec3(_GLF_IDENTITY(1u, ~ (~ (1u))))) | (uvec3(_GLF_IDENTITY(1u, ~ (~ (1u)))))), uvec3(_GLF_IDENTITY(1u, ~ (~ (1u))))), uvec3(0u, 0u, 0u) ^ (min(_GLF_IDENTITY(uvec3(_GLF_IDENTITY(1u, _GLF_IDENTITY(~ (~ (1u)), 0u ^ (_GLF_IDENTITY(~ (~ (1u)), (~ (~ _GLF_IDENTITY((1u), max((1u), (1u))))) | (~ (~ (1u)))))))), (uvec3(_GLF_IDENTITY(1u, ~ (~ (1u))))) | (uvec3(_GLF_IDENTITY(1u, ~ (~ (1u)))))), uvec3(_GLF_IDENTITY(1u, ~ (~ (1u))))))))), uvec3(_GLF_IDENTITY(uvec3(_GLF_IDENTITY(1u, ~ (~ (_GLF_IDENTITY(1u, (1u) | (1u)))))), _GLF_IDENTITY(min(_GLF_IDENTITY(uvec3(_GLF_IDENTITY(1u, _GLF_IDENTITY(~ (~ (1u)), 0u ^ (_GLF_IDENTITY(~ (~ (1u)), (~ (~ _GLF_IDENTITY((1u), max((1u), (1u))))) | (~ (~ (1u)))))))), (uvec3(_GLF_IDENTITY(1u, ~ (~ (1u))))) | (uvec3(_GLF_IDENTITY(1u, ~ (~ (1u)))))), uvec3(_GLF_IDENTITY(1u, ~ (~ (1u))))), uvec3(0u, 0u, 0u) ^ (min(_GLF_IDENTITY(uvec3(_GLF_IDENTITY(1u, _GLF_IDENTITY(~ (~ (1u)), 0u ^ (_GLF_IDENTITY(~ (~ (1u)), (~ (~ _GLF_IDENTITY((1u), max((1u), (1u))))) | (~ (~ (1u)))))))), (uvec3(_GLF_IDENTITY(1u, ~ (~ (1u))))) | (uvec3(_GLF_IDENTITY(1u, ~ (~ (1u)))))), uvec3(_GLF_IDENTITY(1u, ~ (~ (1u)))))))))))))) - uvec3(0u, 0u, 0u))), ~ (_GLF_IDENTITY(uvec3(_GLF_IDENTITY(uvec3(_GLF_IDENTITY(_GLF_IDENTITY(1u, ~ (~ (1u))), max(_GLF_IDENTITY(1u, ~ (~ (1u))), _GLF_IDENTITY(_GLF_IDENTITY(1u, ~ (~ (1u))), min(_GLF_IDENTITY(1u, ~ (~ (1u))), _GLF_IDENTITY(1u, ~ (~ (1u)))))))), _GLF_IDENTITY(min(_GLF_IDENTITY(_GLF_IDENTITY(uvec3(_GLF_IDENTITY(1u, ~ (~ (1u)))), (uvec3(_GLF_IDENTITY(1u, ~ (~ (1u))))) | (uvec3(_GLF_IDENTITY(1u, ~ (~ (1u)))))), (_GLF_IDENTITY(uvec3(_GLF_IDENTITY(_GLF_IDENTITY(1u, ~ (~ (1u))), (0u | 0u) | (_GLF_IDENTITY(1u, ~ (~ (1u)))))), (uvec3(_GLF_IDENTITY(_GLF_IDENTITY(1u, 0u | (1u)), ~ (~ (1u))))) | (uvec3(_GLF_IDENTITY(1u, ~ (~ (1u))))))) | uvec3(0u, 0u, 0u)), uvec3(_GLF_IDENTITY(1u, ~ (~ (1u))))), max(_GLF_IDENTITY(min(_GLF_IDENTITY(_GLF_IDENTITY(uvec3(_GLF_IDENTITY(1u, ~ (~ (1u)))), (uvec3(_GLF_IDENTITY(1u, ~ (~ (1u))))) | (uvec3(_GLF_IDENTITY(_GLF_IDENTITY(1u, ~ (~ (1u))), (_GLF_IDENTITY(_GLF_IDENTITY(1u, ~ (~ (1u))), 0u | (_GLF_IDENTITY(1u, ~ (~ (1u)))))) ^ (0u & 23674u))))), (_GLF_IDENTITY(uvec3(_GLF_IDENTITY(_GLF_IDENTITY(1u, (false ? _GLF_FUZZED(subgroup_local_id) : 1u)), ~ (~ (1u)))), (uvec3(_GLF_IDENTITY(1u, ~ (~ (1u))))) | (uvec3(_GLF_IDENTITY(1u, ~ (~ (1u))))))) | uvec3(0u, 0u, 0u)), uvec3(_GLF_IDENTITY(1u, ~ (~ _GLF_IDENTITY((1u), clamp((1u), (1u), (1u))))))), (min(_GLF_IDENTITY(_GLF_IDENTITY(uvec3(_GLF_IDENTITY(1u, ~ (~ (1u)))), (uvec3(_GLF_IDENTITY(1u, ~ (~ (1u))))) | (uvec3(_GLF_IDENTITY(1u, ~ (~ (1u)))))), (_GLF_IDENTITY(uvec3(_GLF_IDENTITY(1u, ~ (~ (1u)))), (uvec3(_GLF_IDENTITY(1u, ~ (~ (1u))))) | (uvec3(_GLF_IDENTITY(1u, ~ (~ (1u))))))) | uvec3(0u, 0u, 0u)), uvec3(_GLF_IDENTITY(1u, ~ (~ (1u)))))) << uvec3(0u, 0u, 0u)), min(_GLF_IDENTITY(_GLF_IDENTITY(uvec3(_GLF_IDENTITY(1u, ~ (~ (1u)))), (uvec3(_GLF_IDENTITY(1u, ~ (~ (_GLF_IDENTITY(1u, 0u ^ (_GLF_IDENTITY(1u, uint(uvec4(1u, ((1u << _GLF_IDENTITY(uint(1u), uint(1u))) >> _GLF_IDENTITY(uint(1u), uint(1u))), 0u, 1u)))))))))) | (uvec3(_GLF_IDENTITY(1u, ~ (~ (1u)))))), (_GLF_IDENTITY(uvec3(_GLF_IDENTITY(1u, ~ (~ (1u)))), (uvec3(_GLF_IDENTITY(1u, ~ (~ (_GLF_IDENTITY(1u, ~ (_GLF_IDENTITY(~ (1u), 0u ^ (~ (1u)))))))))) | (uvec3(_GLF_IDENTITY(1u, ~ (~ (1u))))))) | uvec3(0u, 0u, 0u)), uvec3(_GLF_IDENTITY(_GLF_IDENTITY(1u, ~ (~ (1u))), max(_GLF_IDENTITY(1u, ~ (~ (1u))), _GLF_IDENTITY(1u, ~ (~ (1u))))))))))), (uvec3(_GLF_IDENTITY(uvec3(_GLF_IDENTITY(_GLF_IDENTITY(1u, _GLF_IDENTITY(~ (~ (1u)), ~ (~ (~ (~ (1u)))))), ((0u << _GLF_IDENTITY(uint(6u), uint(6u))) >> _GLF_IDENTITY(uint(2u), uint(2u))) ^ (_GLF_IDENTITY(1u, _GLF_IDENTITY(~ (~ (1u)), ~ (~ (~ (~ (1u))))))))), _GLF_IDENTITY(min(_GLF_IDENTITY(uvec3(_GLF_IDENTITY(1u, ~ (~ (1u)))), (uvec3(_GLF_IDENTITY(1u, ~ (~ (1u))))) | (_GLF_IDENTITY(uvec3(_GLF_IDENTITY(1u, ~ (~ (1u)))), (uvec3(_GLF_IDENTITY(1u, ~ (~ (1u))))) / uvec3(1u, 1u, 1u)))), uvec3(_GLF_IDENTITY(1u, ~ (~ (1u))))), (min(_GLF_IDENTITY(uvec3(_GLF_IDENTITY(_GLF_IDENTITY(1u, ~ (~ (1u))), (_GLF_IDENTITY(1u, ~ (~ (1u)))) | 0u)), (uvec3(_GLF_IDENTITY(1u, ~ (~ (1u))))) | (_GLF_IDENTITY(uvec3(_GLF_IDENTITY(1u, ~ (~ (1u)))), (uvec3(_GLF_IDENTITY(1u, ~ (~ (1u))))) / uvec3(1u, 1u, 1u)))), uvec3(_GLF_IDENTITY(1u, ~ _GLF_IDENTITY((~ (1u)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(num_workgroup) : (~ (1u)))))))) - uvec3(0u, 0u, 0u))))) - uvec3(0u, 0u, 0u))))))))), mat3x4(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, _GLF_IDENTITY(1.0, float(mat3x2(1.0, 1.0, 1.0, 0.0, 0.0, 1.0))))))), _GLF_IDENTITY(_GLF_IDENTITY(true, ! (! (true))), (_GLF_IDENTITY(true, ! _GLF_IDENTITY((! (true)), (_GLF_IDENTITY((! (true)), true && ((! (true))))) && true))) || false), _GLF_struct_2(mat2x4(_GLF_IDENTITY(1.0, _GLF_IDENTITY(0.0 + (1.0), clamp(0.0 + (1.0), 0.0 + (1.0), 0.0 + (1.0))))), _GLF_IDENTITY(vec3(_GLF_IDENTITY(_GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), 1.0)), mix(float(_GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-808.883)), bool(false))), 1.0, 1.0)), 1.0))), float(_GLF_FUZZED((- -0.5))), bool(false)))), (vec3(_GLF_IDENTITY(_GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), 1.0)), mix(float(_GLF_IDENTITY(1.0, max(_GLF_IDENTITY(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), clamp(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)))), 1.0))), float(_GLF_FUZZED((- -0.5))), bool(false))))) + vec3(0.0, 0.0, 0.0)), mat4x2(1.0), bvec4(true), mat2x3(_GLF_IDENTITY(1.0, min(1.0, 1.0))), mat3x4(1.0), vec3(1.0)), mat4x2(1.0), _GLF_struct_3(_GLF_IDENTITY(1u, (1u) ^ 0u), vec4(1.0), vec4(1.0))), vec3(_GLF_IDENTITY(1.0, _GLF_IDENTITY((_GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, min(1.0, 1.0)), 1.0))), mix(float(_GLF_FUZZED(-2.2)), float((_GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, min(1.0, 1.0)), 1.0)))), bool(true))) * 1.0)), ivec4(1), _GLF_IDENTITY(workgroup_size * workgroup_id, (_GLF_IDENTITY(workgroup_size * workgroup_id, uint(_GLF_IDENTITY(uvec3(workgroup_size * _GLF_IDENTITY(workgroup_id, (false ? _GLF_FUZZED((++ num_workgroup)) : workgroup_id)), 0u, 0u), (uvec3(workgroup_size * _GLF_IDENTITY(workgroup_id, (false ? _GLF_FUZZED((++ num_workgroup)) : workgroup_id)), 0u, 0u)) - uvec3(0u, 0u, 0u))))) | 0u), vec3(_GLF_IDENTITY(1.0, abs(1.0) * (1.0))));
 if(_GLF_DEAD(false))
  return;
 do
  {
   if(_GLF_DEAD(false))
    return;
  }
 while(_GLF_WRAPPED_LOOP(false));
 uint subgroup_base = _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (_GLF_IDENTITY(subgroup_id, (_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY((subgroup_id), uint(_GLF_IDENTITY(uvec4((subgroup_id), 0u, 0u, ((1u << _GLF_IDENTITY(uint(6u), uint(6u))) >> _GLF_IDENTITY(uint(6u), uint(6u)))), uvec4(0u, 0u, 0u, 0u) + (uvec4((subgroup_id), 0u, 0u, ((1u << _GLF_IDENTITY(uint(6u), uint(6u))) >> _GLF_IDENTITY(uint(6u), uint(6u)))))))) / 1u)) / 1u)) | (_GLF_IDENTITY(subgroup_id, min(subgroup_id, _GLF_IDENTITY(subgroup_id, (subgroup_id) / 1u))))), min(subgroup_id, subgroup_id)), min(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (_GLF_IDENTITY(subgroup_id, (_GLF_IDENTITY(subgroup_id, (subgroup_id) / 1u)) / 1u)) | (_GLF_IDENTITY(subgroup_id, min(subgroup_id, _GLF_IDENTITY(subgroup_id, (subgroup_id) / 1u))))), min(subgroup_id, subgroup_id)), _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY((_GLF_IDENTITY(subgroup_id, (subgroup_id) / 1u)), 1u * ((_GLF_IDENTITY(subgroup_id, (subgroup_id) / 1u)))) / 1u)) | (_GLF_IDENTITY(subgroup_id, min(subgroup_id, _GLF_IDENTITY(subgroup_id, (subgroup_id) / 1u))))), min(subgroup_id, subgroup_id)))) * _GLF_IDENTITY(subgroup_size, (true ? subgroup_size : _GLF_FUZZED((_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size)))))), max(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY((_GLF_IDENTITY(subgroup_id, (subgroup_id) / 1u)) | (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id)), _GLF_IDENTITY(uint(uint(_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id)))), (uint(uint(_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id))))) ^ 0u))), max((_GLF_IDENTITY(subgroup_id, (subgroup_id) / 1u)) | (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id)), _GLF_IDENTITY(uint(uint(_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id)))), (uint(uint(_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id))))) ^ 0u))), _GLF_IDENTITY((_GLF_IDENTITY(subgroup_id, (subgroup_id) / 1u)) | (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id)), _GLF_IDENTITY(uint(uint(_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id)))), (uint(uint(_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id))))) ^ 0u))), max((_GLF_IDENTITY(subgroup_id, (subgroup_id) / 1u)) | (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id)), _GLF_IDENTITY(uint(uint(_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id)))), (uint(uint(_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id))))) ^ 0u))), (_GLF_IDENTITY(subgroup_id, (subgroup_id) / 1u)) | (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id)), _GLF_IDENTITY(uint(uint(_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id)))), (uint(uint(_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id))))) ^ 0u)))))))), min(subgroup_id, subgroup_id)) * _GLF_IDENTITY(subgroup_size, (true ? subgroup_size : _GLF_FUZZED((subgroup_size)))), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (_GLF_IDENTITY(subgroup_id, (subgroup_id) / 1u)) | (_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id)))), min(subgroup_id, subgroup_id)) * _GLF_IDENTITY(subgroup_size, (true ? subgroup_size : _GLF_FUZZED((subgroup_size))))))), _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (subgroup_id) / 1u), uint(uint(_GLF_IDENTITY(subgroup_id, (subgroup_id) / 1u))))) | (_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id)))), min(_GLF_IDENTITY(subgroup_id, min(subgroup_id, _GLF_IDENTITY(subgroup_id, _GLF_IDENTITY(0u, clamp(_GLF_IDENTITY(0u, min(0u, 0u)), 0u, 0u)) + (subgroup_id)))), subgroup_id)) * _GLF_IDENTITY(subgroup_size, (true ? subgroup_size : _GLF_FUZZED((subgroup_size))))));
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x)) > injectionSwitch.y))))
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 << _GLF_IDENTITY(_GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (_GLF_IDENTITY(int(5), clamp(int(5), int(_GLF_IDENTITY(5, max(5, 5))), int(_GLF_IDENTITY(5, max(5, _GLF_IDENTITY(5, (_GLF_IDENTITY(5, 0 + (5))) | 0))))))) | (int(5)))), min(_GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), _GLF_IDENTITY((_GLF_IDENTITY(int(5), clamp(int(5), int(5), int(_GLF_IDENTITY(5, max(5, _GLF_IDENTITY(5, (_GLF_IDENTITY(5, 0 + _GLF_IDENTITY((5), max(_GLF_IDENTITY((5), ((5)) << 0), (5))))) | 0))))))), min((_GLF_IDENTITY(int(5), clamp(int(5), int(5), int(_GLF_IDENTITY(5, max(5, _GLF_IDENTITY(5, (_GLF_IDENTITY(5, 0 + _GLF_IDENTITY((5), max(_GLF_IDENTITY((5), ((5)) << 0), (5))))) | 0))))))), (_GLF_IDENTITY(int(5), clamp(int(5), int(5), int(_GLF_IDENTITY(5, max(5, _GLF_IDENTITY(5, (_GLF_IDENTITY(5, 0 + _GLF_IDENTITY((5), max(_GLF_IDENTITY((5), ((5)) << 0), (5))))) | 0))))))))) | (int(5)))), _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (_GLF_IDENTITY(int(5), clamp(int(5), int(5), int(_GLF_IDENTITY(5, max(5, _GLF_IDENTITY(5, (_GLF_IDENTITY(5, 0 + (5))) | 0))))))) | (int(5)))))))); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))).x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
       if(_GLF_DEAD(false))
        return;
       return;
      }
    }
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 uint virtual_gid = _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_struct_replacement_5.workgroup_base, ~ (~ (_GLF_struct_replacement_5.workgroup_base))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(clamp(_GLF_struct_replacement_5.workgroup_base, _GLF_struct_replacement_5.workgroup_base, _GLF_struct_replacement_5.workgroup_base), clamp(clamp(_GLF_struct_replacement_5.workgroup_base, _GLF_struct_replacement_5.workgroup_base, _GLF_struct_replacement_5.workgroup_base), _GLF_IDENTITY(clamp(_GLF_IDENTITY(_GLF_struct_replacement_5.workgroup_base, max(_GLF_struct_replacement_5.workgroup_base, _GLF_struct_replacement_5.workgroup_base)), _GLF_struct_replacement_5.workgroup_base, _GLF_struct_replacement_5.workgroup_base), clamp(clamp(_GLF_struct_replacement_5.workgroup_base, _GLF_struct_replacement_5.workgroup_base, _GLF_struct_replacement_5.workgroup_base), clamp(_GLF_struct_replacement_5.workgroup_base, _GLF_struct_replacement_5.workgroup_base, _GLF_struct_replacement_5.workgroup_base), _GLF_IDENTITY(clamp(_GLF_struct_replacement_5.workgroup_base, _GLF_struct_replacement_5.workgroup_base, _GLF_struct_replacement_5.workgroup_base), 0u ^ (_GLF_IDENTITY(clamp(_GLF_struct_replacement_5.workgroup_base, _GLF_struct_replacement_5.workgroup_base, _GLF_struct_replacement_5.workgroup_base), uint(uvec4(_GLF_IDENTITY(clamp(_GLF_struct_replacement_5.workgroup_base, _GLF_struct_replacement_5.workgroup_base, _GLF_struct_replacement_5.workgroup_base), ~ (~ (clamp(_GLF_struct_replacement_5.workgroup_base, _GLF_struct_replacement_5.workgroup_base, _GLF_struct_replacement_5.workgroup_base)))), 0u, 1u, 1u))))))), clamp(_GLF_struct_replacement_5.workgroup_base, _GLF_struct_replacement_5.workgroup_base, _GLF_struct_replacement_5.workgroup_base))), (_GLF_IDENTITY(clamp(_GLF_struct_replacement_5.workgroup_base, _GLF_struct_replacement_5.workgroup_base, _GLF_struct_replacement_5.workgroup_base), _GLF_IDENTITY(clamp(clamp(_GLF_struct_replacement_5.workgroup_base, _GLF_struct_replacement_5.workgroup_base, _GLF_struct_replacement_5.workgroup_base), _GLF_IDENTITY(clamp(_GLF_struct_replacement_5.workgroup_base, _GLF_struct_replacement_5.workgroup_base, _GLF_struct_replacement_5.workgroup_base), clamp(clamp(_GLF_struct_replacement_5.workgroup_base, _GLF_struct_replacement_5.workgroup_base, _GLF_struct_replacement_5.workgroup_base), clamp(_GLF_struct_replacement_5.workgroup_base, _GLF_struct_replacement_5.workgroup_base, _GLF_struct_replacement_5.workgroup_base), clamp(_GLF_struct_replacement_5.workgroup_base, _GLF_struct_replacement_5.workgroup_base, _GLF_struct_replacement_5.workgroup_base))), clamp(_GLF_struct_replacement_5.workgroup_base, _GLF_struct_replacement_5.workgroup_base, _GLF_struct_replacement_5.workgroup_base)), (clamp(clamp(_GLF_struct_replacement_5.workgroup_base, _GLF_struct_replacement_5.workgroup_base, _GLF_struct_replacement_5.workgroup_base), _GLF_IDENTITY(clamp(_GLF_struct_replacement_5.workgroup_base, _GLF_struct_replacement_5.workgroup_base, _GLF_struct_replacement_5.workgroup_base), clamp(clamp(_GLF_struct_replacement_5.workgroup_base, _GLF_struct_replacement_5.workgroup_base, _GLF_struct_replacement_5.workgroup_base), clamp(_GLF_struct_replacement_5.workgroup_base, _GLF_struct_replacement_5.workgroup_base, _GLF_struct_replacement_5.workgroup_base), clamp(_GLF_struct_replacement_5.workgroup_base, _GLF_struct_replacement_5.workgroup_base, _GLF_struct_replacement_5.workgroup_base))), clamp(_GLF_struct_replacement_5.workgroup_base, _GLF_struct_replacement_5.workgroup_base, _GLF_struct_replacement_5.workgroup_base))) << uint(_GLF_ZERO(0.0, injectionSwitch.x))))) >> 0u), uint(uvec4(_GLF_IDENTITY(_GLF_IDENTITY(clamp(_GLF_struct_replacement_5.workgroup_base, _GLF_struct_replacement_5.workgroup_base, _GLF_struct_replacement_5.workgroup_base), clamp(clamp(_GLF_struct_replacement_5.workgroup_base, _GLF_struct_replacement_5.workgroup_base, _GLF_struct_replacement_5.workgroup_base), _GLF_IDENTITY(clamp(_GLF_IDENTITY(_GLF_struct_replacement_5.workgroup_base, max(_GLF_struct_replacement_5.workgroup_base, _GLF_struct_replacement_5.workgroup_base)), _GLF_struct_replacement_5.workgroup_base, _GLF_struct_replacement_5.workgroup_base), clamp(clamp(_GLF_struct_replacement_5.workgroup_base, _GLF_struct_replacement_5.workgroup_base, _GLF_struct_replacement_5.workgroup_base), clamp(_GLF_struct_replacement_5.workgroup_base, _GLF_struct_replacement_5.workgroup_base, _GLF_struct_replacement_5.workgroup_base), clamp(_GLF_struct_replacement_5.workgroup_base, _GLF_struct_replacement_5.workgroup_base, _GLF_struct_replacement_5.workgroup_base))), clamp(_GLF_struct_replacement_5.workgroup_base, _GLF_struct_replacement_5.workgroup_base, _GLF_struct_replacement_5.workgroup_base))), (_GLF_IDENTITY(clamp(_GLF_struct_replacement_5.workgroup_base, _GLF_struct_replacement_5.workgroup_base, _GLF_struct_replacement_5.workgroup_base), clamp(clamp(_GLF_struct_replacement_5.workgroup_base, _GLF_struct_replacement_5.workgroup_base, _GLF_struct_replacement_5.workgroup_base), _GLF_IDENTITY(clamp(_GLF_struct_replacement_5.workgroup_base, _GLF_struct_replacement_5.workgroup_base, _GLF_struct_replacement_5.workgroup_base), clamp(clamp(_GLF_struct_replacement_5.workgroup_base, _GLF_struct_replacement_5.workgroup_base, _GLF_struct_replacement_5.workgroup_base), clamp(_GLF_struct_replacement_5.workgroup_base, _GLF_struct_replacement_5.workgroup_base, _GLF_struct_replacement_5.workgroup_base), clamp(_GLF_struct_replacement_5.workgroup_base, _GLF_struct_replacement_5.workgroup_base, _GLF_struct_replacement_5.workgroup_base))), clamp(_GLF_struct_replacement_5.workgroup_base, _GLF_struct_replacement_5.workgroup_base, _GLF_struct_replacement_5.workgroup_base)))) >> 0u), 1u, 0u, 1u)))), max(_GLF_IDENTITY(_GLF_struct_replacement_5.workgroup_base, _GLF_IDENTITY(clamp(_GLF_IDENTITY(_GLF_struct_replacement_5.workgroup_base, _GLF_IDENTITY((_GLF_struct_replacement_5.workgroup_base), ((_GLF_struct_replacement_5.workgroup_base)) / 1u) | (_GLF_struct_replacement_5.workgroup_base)), _GLF_struct_replacement_5.workgroup_base, _GLF_struct_replacement_5.workgroup_base), clamp(clamp(_GLF_struct_replacement_5.workgroup_base, _GLF_struct_replacement_5.workgroup_base, _GLF_struct_replacement_5.workgroup_base), _GLF_IDENTITY(clamp(_GLF_struct_replacement_5.workgroup_base, _GLF_struct_replacement_5.workgroup_base, _GLF_struct_replacement_5.workgroup_base), clamp(clamp(_GLF_IDENTITY(_GLF_struct_replacement_5.workgroup_base, clamp(_GLF_struct_replacement_5.workgroup_base, _GLF_struct_replacement_5.workgroup_base, _GLF_IDENTITY(_GLF_struct_replacement_5.workgroup_base, (true ? _GLF_IDENTITY(_GLF_struct_replacement_5.workgroup_base, (_GLF_struct_replacement_5.workgroup_base) + 0u) : _GLF_FUZZED(subgroup_local_id))))), _GLF_struct_replacement_5.workgroup_base, _GLF_struct_replacement_5.workgroup_base), clamp(_GLF_struct_replacement_5.workgroup_base, _GLF_struct_replacement_5.workgroup_base, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_struct_replacement_5.workgroup_base, (_GLF_struct_replacement_5.workgroup_base) >> 0u), (_GLF_IDENTITY(_GLF_struct_replacement_5.workgroup_base, (_GLF_struct_replacement_5.workgroup_base) >> 0u)) - (uint(_GLF_ZERO(0.0, injectionSwitch.x)) | 0u))), clamp(_GLF_struct_replacement_5.workgroup_base, _GLF_struct_replacement_5.workgroup_base, _GLF_struct_replacement_5.workgroup_base))), clamp(_GLF_struct_replacement_5.workgroup_base, _GLF_struct_replacement_5.workgroup_base, _GLF_struct_replacement_5.workgroup_base)))), _GLF_IDENTITY(_GLF_struct_replacement_5.workgroup_base, _GLF_IDENTITY(clamp(_GLF_struct_replacement_5.workgroup_base, _GLF_struct_replacement_5.workgroup_base, _GLF_struct_replacement_5.workgroup_base), clamp(clamp(_GLF_struct_replacement_5.workgroup_base, _GLF_IDENTITY(_GLF_struct_replacement_5.workgroup_base, (false ? _GLF_FUZZED(subgroup_id) : _GLF_IDENTITY(_GLF_struct_replacement_5.workgroup_base, (_GLF_struct_replacement_5.workgroup_base) - 0u))), _GLF_struct_replacement_5.workgroup_base), _GLF_IDENTITY(_GLF_IDENTITY(clamp(_GLF_struct_replacement_5.workgroup_base, _GLF_struct_replacement_5.workgroup_base, _GLF_struct_replacement_5.workgroup_base), clamp(clamp(_GLF_struct_replacement_5.workgroup_base, _GLF_struct_replacement_5.workgroup_base, _GLF_struct_replacement_5.workgroup_base), clamp(_GLF_struct_replacement_5.workgroup_base, _GLF_struct_replacement_5.workgroup_base, _GLF_struct_replacement_5.workgroup_base), clamp(_GLF_struct_replacement_5.workgroup_base, _GLF_struct_replacement_5.workgroup_base, _GLF_struct_replacement_5.workgroup_base))), clamp(clamp(_GLF_struct_replacement_5.workgroup_base, _GLF_struct_replacement_5.workgroup_base, _GLF_struct_replacement_5.workgroup_base), clamp(_GLF_struct_replacement_5.workgroup_base, _GLF_struct_replacement_5.workgroup_base, _GLF_struct_replacement_5.workgroup_base), clamp(_GLF_struct_replacement_5.workgroup_base, _GLF_struct_replacement_5.workgroup_base, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_struct_replacement_5.workgroup_base, (_GLF_struct_replacement_5.workgroup_base) | (_GLF_struct_replacement_5.workgroup_base)), _GLF_IDENTITY(min(_GLF_IDENTITY(_GLF_struct_replacement_5.workgroup_base, (_GLF_struct_replacement_5.workgroup_base) << (0u >> _GLF_IDENTITY(uint(6u), uint(6u)))), _GLF_struct_replacement_5.workgroup_base), (min(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_struct_replacement_5.workgroup_base, (_GLF_struct_replacement_5.workgroup_base) << (0u >> _GLF_IDENTITY(uint(6u), uint(6u)))), (false ? _GLF_FUZZED(workgroup_id) : _GLF_IDENTITY(_GLF_struct_replacement_5.workgroup_base, (_GLF_struct_replacement_5.workgroup_base) << (0u >> _GLF_IDENTITY(uint(6u), uint(_GLF_IDENTITY(6u, (0u & 63585u) + (6u)))))))), _GLF_struct_replacement_5.workgroup_base)) ^ (0u << _GLF_IDENTITY(uint(_GLF_IDENTITY(8u, (true ? _GLF_IDENTITY(8u, ~ (~ (8u))) : _GLF_FUZZED(subgroup_id)))), _GLF_IDENTITY(uint(8u), (uint(8u)) * 1u)))))))), clamp(_GLF_struct_replacement_5.workgroup_base, _GLF_struct_replacement_5.workgroup_base, _GLF_struct_replacement_5.workgroup_base)))))) + subgroup_base + subgroup_local_id;
 uint next_virtual_gid = _GLF_struct_replacement_5.workgroup_base + subgroup_base + ((subgroup_local_id + 1) % subgroup_size);
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))))
  return;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         return;
         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, false)))))
          return;
        }
       else
        {
        }
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 else
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) && true)))
    return;
  }
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)))
  return;
 uint read = 0;
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) || false)))))
  return;
 if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
  {
   if(_GLF_DEAD(false))
    return;
   do
    {
     for(int _injected_loop_counter = (1 ^ 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(3, clamp(3, 3, 3))), int(3))), max((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(3), int(3)), int(ivec2(_GLF_IDENTITY(int(3), int(3)), 0)))), _GLF_IDENTITY((_GLF_IDENTITY(1, (1) << 0) << _GLF_IDENTITY(int(3), int(3))), (true ? _GLF_IDENTITY((1 << _GLF_IDENTITY(int(3), int(3))), ((1 << _GLF_IDENTITY(int(3), int(3)))) << 0) : _GLF_FUZZED(_injected_loop_counter))))) >> _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), ~ (_GLF_IDENTITY(~ (int(3)), (~ (int(3))) << 0)))))); _injected_loop_counter ++)
      {
       for(int _injected_loop_counter = _GLF_IDENTITY(0, (0) ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
        {
         return;
        }
      }
     if(_GLF_DEAD(false))
      return;
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, _GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false)), true)), (bool(bvec3(false, false, true))) || _GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec4(false, _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(vec2(_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(6.9))), 1.0), (vec2(_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(6.9))), 1.0)) - vec2(0.0, 0.0)))) > injectionSwitch.y)), _GLF_IDENTITY(false, false || (false)), false)))) || _GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), ! (_GLF_IDENTITY(! (false), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(! (false), false), bvec2(bvec4(bvec2(! (false), false), false, false)))), true && (bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(! (false), false), bvec2(bvec2(_GLF_IDENTITY(bvec2(! (false), false), _GLF_IDENTITY(bvec2(bvec2(_GLF_IDENTITY(bvec2(! (false), false), bvec2(bvec3(bvec2(! (false), false), true))))), bvec2(bvec3(bvec2(bvec2(_GLF_IDENTITY(bvec2(! (false), false), bvec2(bvec3(bvec2(! (false), false), true))))), true))))))), bvec2(bvec4(bvec2(_GLF_IDENTITY(! (false), ! (_GLF_IDENTITY(! (! (false)), ! (_GLF_IDENTITY(! (! (! (false))), bool(bvec4(! (! (! (false))), true, true, false))))))), _GLF_IDENTITY(false, false || (false))), false, false))))))))))))));
   do
    {
     if(_GLF_DEAD(false))
      break;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           return;
          }
         else
          {
          }
        }
       return;
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 | 0)); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
    }
   if(_GLF_DEAD(false))
    return;
  }
 atomicStore(buf[next_virtual_gid], _GLF_IDENTITY(uint(_GLF_IDENTITY(1, (1) | (1))), (uint(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, max(1, _GLF_IDENTITY(1, _GLF_IDENTITY((1) | 0, (_GLF_IDENTITY((1) | 0, 0 ^ ((1) | 0))) / 1))))) << 0))) | (uint(1))), _GLF_IDENTITY(4, (4) >> 0), _GLF_IDENTITY(64, min(64, 64)), 4);
 if((subgroup_local_id % 2) == _GLF_IDENTITY(0, (0) << 0))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           return;
          }
         if(_GLF_DEAD(false))
          return;
        }
       if(_GLF_DEAD(false))
        return;
       return;
      }
    }
   read = atomicLoad(buf[virtual_gid], 4, 64, 2);
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, determinant(mat3(1.0, 0.0, abs(0.0), 1.0, abs(1.0), 0.0, 0.0, 0.0, 1.0)) * (injectionSwitch.y)))), _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)).y)))))))
      return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), ! _GLF_IDENTITY((! (_GLF_DEAD(false))), bool(bvec2((! (_GLF_DEAD(false))), _GLF_IDENTITY(true, (true) && true)))))) && true))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(5), int(5)), clamp(_GLF_IDENTITY(_GLF_IDENTITY(int(5), int(5)), 0 ^ (_GLF_IDENTITY(int(5), int(5)))), _GLF_IDENTITY(int(5), int(5)), _GLF_IDENTITY(_GLF_IDENTITY(int(5), int(5)), min(_GLF_IDENTITY(int(5), int(5)), _GLF_IDENTITY(int(5), int(5))))))) >> _GLF_IDENTITY(int(5), int(5))); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 ^ 0)); _injected_loop_counter --)
          {
           if(_GLF_DEAD(false))
            continue;
           return;
          }
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         if(_GLF_DEAD(false))
          return;
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), false || ((false))))))))))
        return;
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, bool(bool(false))), (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / _GLF_IDENTITY(_GLF_IDENTITY(abs(1.0), float(vec2(abs(1.0), 1.0))), _GLF_IDENTITY((true ? _GLF_IDENTITY(abs(1.0), float(vec2(abs(1.0), 1.0))) : _GLF_FUZZED(9.0)), ((true ? _GLF_IDENTITY(abs(1.0), float(vec2(abs(1.0), 1.0))) : _GLF_FUZZED(9.0))) - 0.0))) > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-498.730), (injectionSwitch)[1]), vec2(_GLF_IDENTITY((injectionSwitch)[0], ((injectionSwitch)[0]) - 0.0), _GLF_FUZZED(440.406)), bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))))), injectionSwitch)).y, float(mat3x4(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y, 0.0, 1.0, 1.0, 0.0, sqrt(0.0), 1.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), sin(0.0), 1.0, 0.0)))))))
          {
           do
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              break;
             do
              {
               return;
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         if(_GLF_DEAD(false))
          return;
        }
       if(_GLF_DEAD(false))
        return;
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, _GLF_IDENTITY(max(_injected_loop_counter, _injected_loop_counter), min(max(_injected_loop_counter, _injected_loop_counter), max(_injected_loop_counter, _injected_loop_counter)))) > (0 & (-86900 << 69327))); _GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) << _GLF_IDENTITY(0, clamp(0, 0, 0))))
        {
         return;
        }
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(injectionSwitch.x > injectionSwitch.y, false))))))))))
        return;
       if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(! _GLF_IDENTITY((! (false)), false || (_GLF_IDENTITY((! (false)), ! (! (_GLF_IDENTITY((! (false)), true && ((! (false))))))))), _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, 0.0 + (_GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(-7.4)), bool(false))))))) && (! (! (false)))))))
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))))
          return;
         return;
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         if(_GLF_DEAD(false))
          return;
         return;
        }
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            return;
          }
         return;
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           return;
          }
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
        return;
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)).x > injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           return;
          }
         else
          {
          }
        }
       return;
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          break;
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) | 0))
          {
           do
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
             if(_GLF_DEAD(false))
              break;
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
      }
    }
   do
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), (_GLF_IDENTITY(false, true && (false))) && true), true, false)))))), false, true)))))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         continue;
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         return;
        }
       else
        {
        }
      }
     if(_GLF_DEAD(false))
      break;
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, bool(bool(false))), false))))), ! (_GLF_IDENTITY(! (false), _GLF_IDENTITY(bool(bvec2(! (false), false)), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x < injectionSwitch.y)))))))) && (bool(bvec2(! (false), false)))))))))
      continue;
     do
      {
       for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          return;
        }
       read = _GLF_IDENTITY(atomicLoad(_GLF_IDENTITY(buf[virtual_gid], (_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) - 0u)) | (buf[virtual_gid])), 4, 64, 2), (atomicLoad(buf[virtual_gid], 4, 64, _GLF_IDENTITY(2, (2) / _GLF_IDENTITY((_GLF_IDENTITY((1 << _GLF_IDENTITY(int(2), int(2))), ~ (_GLF_IDENTITY(~ ((1 << _GLF_IDENTITY(int(2), int(2)))), (~ ((1 << _GLF_IDENTITY(int(2), int(2))))) * 1))) >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(2), min(int(2), _GLF_IDENTITY(int(2), (int(2)) ^ 0))), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(int(2), min(int(2), _GLF_IDENTITY(int(2), (int(2)) ^ 0))), (_GLF_IDENTITY(int(2), min(int(2), _GLF_IDENTITY(int(2), (int(2)) ^ 0)))) | (_GLF_IDENTITY(int(2), min(int(2), _GLF_IDENTITY(int(2), (int(2)) ^ 0)))))))), 1 * (_GLF_IDENTITY(int(2), clamp(int(2), int(2), int(2))))))), ~ (~ ((_GLF_IDENTITY((1 << _GLF_IDENTITY(int(2), int(2))), ~ (_GLF_IDENTITY(~ ((1 << _GLF_IDENTITY(int(2), int(2)))), (~ ((1 << _GLF_IDENTITY(int(2), int(2))))) * 1))) >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(2), min(int(2), _GLF_IDENTITY(int(2), (int(2)) ^ 0))), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(int(2), min(int(2), _GLF_IDENTITY(int(2), (int(2)) ^ 0))), (_GLF_IDENTITY(int(2), min(int(2), _GLF_IDENTITY(int(2), (int(2)) ^ 0)))) | (_GLF_IDENTITY(int(2), min(int(2), _GLF_IDENTITY(int(2), (int(2)) ^ 0)))))))), 1 * (_GLF_IDENTITY(int(2), clamp(int(2), int(2), int(2))))))))))))) ^ 0u);
      }
     while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y, min(injectionSwitch.y, injectionSwitch.y))))), (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), ! (! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))))))) && true));
     if(_GLF_DEAD(false))
      break;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, true && (injectionSwitch.x < injectionSwitch.y)))), false)))))
        continue;
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y)), (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y))) && true)))
        break;
       continue;
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              return;
             return;
            }
           if(_GLF_DEAD(false))
            return;
          }
        }
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), false || (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), false || (! (injectionSwitch.x > injectionSwitch.y)))))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec4(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)))).x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(7.3)), vec2(_GLF_FUZZED(0.3), (injectionSwitch)[1]), bvec2(false, true))), _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))).y, true, false, true))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), false || (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), false || (! (injectionSwitch.x > injectionSwitch.y)))))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec4(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)))).x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(7.3)), vec2(_GLF_FUZZED(0.3), (injectionSwitch)[1]), bvec2(false, true))), _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))).y, true, false, true))))), false || (_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), false || (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), false || (! (injectionSwitch.x > injectionSwitch.y)))))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec4(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)))).x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(7.3)), vec2(_GLF_FUZZED(0.3), (injectionSwitch)[1]), bvec2(false, true))), _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))).y, true, false, true)))))))), bool(_GLF_IDENTITY(bvec3(! (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), false || (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), false || (! (injectionSwitch.x > injectionSwitch.y)))))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec4(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)))).x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(7.3)), vec2(_GLF_FUZZED(0.3), (injectionSwitch)[1]), bvec2(false, true))), _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))).y, true, false, true))))), false || (_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), false || (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), false || (! (injectionSwitch.x > injectionSwitch.y)))))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec4(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)))).x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(7.3)), vec2(_GLF_FUZZED(0.3), (injectionSwitch)[1]), bvec2(false, true))), _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))).y, true, false, true)))))))), false, false), bvec3(bvec4(bvec3(! (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), false || (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), false || (! (injectionSwitch.x > injectionSwitch.y)))))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec4(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)))).x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(7.3)), vec2(_GLF_FUZZED(0.3), (injectionSwitch)[1]), bvec2(false, true))), _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))).y, true, false, true))))), false || (_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), false || (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), false || (! (injectionSwitch.x > injectionSwitch.y)))))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec4(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)))).x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(7.3)), vec2(_GLF_FUZZED(0.3), (injectionSwitch)[1]), bvec2(false, true))), _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))).y, true, false, true)))))))), false, false), true)))))))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       do
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               return;
              }
            }
           else
            {
            }
           if(_GLF_DEAD(false))
            return;
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true))));
       break;
      }
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), _GLF_IDENTITY(false, false || (false)) || (_GLF_IDENTITY(false, ! (! (false)))))))
      {
       if(_GLF_DEAD(false))
        break;
       break;
      }
     if(_GLF_DEAD(false))
      break;
     if(_GLF_DEAD(false))
      continue;
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     do
      {
       return;
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(false))
        continue;
      }
     while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), false || (_GLF_WRAPPED_LOOP(false)))))));
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! _GLF_IDENTITY((_GLF_IDENTITY(! (false), ! (! (! (false))))), ((_GLF_IDENTITY(! (false), ! (! (! (false)))))) || false))))))
        return;
      }
    }
   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), bool(bool(_GLF_WRAPPED_IF_FALSE(false)))))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), ! _GLF_IDENTITY((_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))) && true))), bool(bool(_GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))), ! (! (_GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))), false || (bool(bool(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))))))))))))), bool(bool(! (_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))), _GLF_IDENTITY(bool(bool(bool(bool(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY((_GLF_DEAD(false)) && true, _GLF_IDENTITY(bool(bvec3((_GLF_DEAD(false)) && true, true, true)), ! (! (bool(bvec3((_GLF_DEAD(false)) && true, true, true))))))))))), _GLF_IDENTITY(bool(bvec4(bool(bool(bool(bool(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY((_GLF_DEAD(false)) && true, _GLF_IDENTITY(bool(bvec3((_GLF_DEAD(false)) && true, true, true)), ! (! (bool(bvec3((_GLF_DEAD(false)) && true, true, true))))))))))), true, true, true)), ! (! (_GLF_IDENTITY(bool(bvec4(bool(bool(bool(bool(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY((_GLF_DEAD(false)) && true, _GLF_IDENTITY(bool(bvec3((_GLF_DEAD(false)) && true, true, true)), _GLF_IDENTITY(! (! (bool(bvec3((_GLF_DEAD(false)) && true, true, true)))), false || (_GLF_IDENTITY(! (! (bool(bvec3((_GLF_DEAD(false)) && true, true, true)))), false || (! (! (bool(bvec3((_GLF_DEAD(false)) && true, true, true))))))))))))))), true, true, true)), ! (! (bool(bvec4(_GLF_IDENTITY(bool(bool(bool(bool(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))) && true, _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY((_GLF_DEAD(false)) && true, false || ((_GLF_DEAD(false)) && true)), true, true)), ! _GLF_IDENTITY((! (bool(_GLF_IDENTITY(bvec3((_GLF_DEAD(false)) && true, true, true), bvec3(bvec4(bvec3((_GLF_DEAD(false)) && true, true, true), false)))))), true && ((! (bool(_GLF_IDENTITY(bvec3((_GLF_DEAD(false)) && true, true, true), bvec3(bvec4(bvec3((_GLF_DEAD(false)) && true, true, true), false))))))))))))))), ! (! (bool(bool(bool(bool(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))) && true, _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY((_GLF_DEAD(false)) && true, false || ((_GLF_DEAD(false)) && true)), true, true)), ! _GLF_IDENTITY((! (bool(_GLF_IDENTITY(bvec3((_GLF_DEAD(false)) && true, true, true), bvec3(bvec4(bvec3((_GLF_DEAD(false)) && true, true, true), false)))))), true && ((! (bool(_GLF_IDENTITY(bvec3((_GLF_DEAD(false)) && true, true, true), bvec3(bvec4(bvec3((_GLF_DEAD(false)) && true, true, true), false)))))))))))))))))), true, true, true)))))))))))))))), ((_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))), bool(_GLF_IDENTITY(bool(bool(bool(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY((_GLF_DEAD(false)), ! (! ((_GLF_DEAD(false))))) && true)))), true && (bool(bool(bool(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY((_GLF_DEAD(false)), ! (! ((_GLF_DEAD(false))))) && true)))))))))), bool(bool(! (_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))), _GLF_IDENTITY(bool(bool(bool(bool(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY((_GLF_DEAD(false)) && true, _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY((_GLF_DEAD(false)), (_GLF_IDENTITY((_GLF_DEAD(false)), bool(_GLF_IDENTITY(bool((_GLF_DEAD(false))), bool(bool(bool((_GLF_DEAD(false))))))))) && true) && true, true, true)), ! (! (bool(bvec3((_GLF_DEAD(false)) && true, true, true))))))))))), _GLF_IDENTITY(bool(bvec4(bool(bool(bool(bool(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY((_GLF_DEAD(false)) && true, _GLF_IDENTITY(bool(bvec3((_GLF_DEAD(false)) && true, true, true)), _GLF_IDENTITY(! (! (bool(bvec3((_GLF_DEAD(false)) && true, true, true)))), ! (_GLF_IDENTITY(! (! (! (bool(bvec3((_GLF_DEAD(false)) && true, true, true))))), false || (! (! (! (bool(bvec3((_GLF_DEAD(false)) && true, true, true)))))))))))))))), true, true, true)), ! (! (_GLF_IDENTITY(bool(bvec4(bool(bool(bool(bool(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY((_GLF_DEAD(false)) && true, _GLF_IDENTITY(bool(bvec3((_GLF_DEAD(false)) && true, true, true)), ! (! (bool(bvec3((_GLF_DEAD(false)) && true, true, true))))))))))), true, true, true)), ! (_GLF_IDENTITY(! (bool(bvec4(bool(bool(bool(bool(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY((_GLF_DEAD(false)) && true, _GLF_IDENTITY(bool(bvec3((_GLF_DEAD(false)) && true, true, true)), ! (! (bool(bvec3((_GLF_DEAD(false)) && true, true, true))))))))))), true, true, true))), (_GLF_IDENTITY(! (bool(bvec4(bool(bool(bool(bool(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY((_GLF_DEAD(false)) && true, _GLF_IDENTITY(bool(bvec3((_GLF_DEAD(false)) && true, true, true)), ! (! (bool(bvec3((_GLF_DEAD(false)) && true, true, true))))))))))), true, true, true))), ! (! (! (bool(bvec4(bool(bool(bool(bool(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY((_GLF_DEAD(false)) && true, _GLF_IDENTITY(bool(bvec3((_GLF_DEAD(false)) && true, true, true)), ! (! (bool(bvec3((_GLF_DEAD(false)) && true, true, true))))))))))), true, true, true))))))) || false))))))))))))))) && true)), true && (_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, false)))))))
        return;
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), (_GLF_IDENTITY(! (true), ! (! (! (true))))) && true))), (_GLF_IDENTITY(injectionSwitch, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(sign(injectionSwitch)) : _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)))).x < injectionSwitch.y))))
      {
       return;
      }
     else
      {
      }
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
    }
   return;
  }
 for(int _injected_loop_counter = (0 & -3116); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
  {
   subgroupBarrier();
  }
 if(_GLF_DEAD(false))
  return;
 do
  {
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, false, true)))), bool(bvec2(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, false, true)))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
    {
     for(int _injected_loop_counter = _GLF_IDENTITY(0, (0) << (0 & 11487)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(_GLF_IDENTITY(bvec2((_GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(mat3(injectionSwitch.x, 0.0, 1.0, 1.0, 1.0, log(1.0), 1.0, 0.0, 0.0), transpose(transpose(mat3(injectionSwitch.x, 0.0, 1.0, 1.0, 1.0, log(1.0), 1.0, 0.0, 0.0)))))) > injectionSwitch.y), true), _GLF_IDENTITY(_GLF_IDENTITY(bvec2(bvec3(bvec2((injectionSwitch.x > injectionSwitch.y), true), false)), bvec2(bvec4(bvec2(bvec3(bvec2((injectionSwitch.x > injectionSwitch.y), true), false)), false, true))), bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec2(bvec3(bvec2((injectionSwitch.x > injectionSwitch.y), true), false)), bvec2(bvec4(bvec2(bvec3(bvec2((injectionSwitch.x > injectionSwitch.y), true), false)), false, true)))), bvec2(bvec2(bvec2(_GLF_IDENTITY(bvec2(bvec3(bvec2((injectionSwitch.x > injectionSwitch.y), true), false)), bvec2(bvec4(bvec2(bvec3(bvec2((injectionSwitch.x > injectionSwitch.y), true), false)), false, true)))))))))))))))
        return;
      }
     return;
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 atomicStore(checker[virtual_gid], _GLF_IDENTITY(read, (read) ^ 0u), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(4, ~ (~ (4))), (4) + 0), max(_GLF_IDENTITY(4, max(4, 4)), 4)), _GLF_IDENTITY(64, int(ivec3(_GLF_IDENTITY(64, ~ (~ (64))), _GLF_IDENTITY(1, int(_GLF_IDENTITY(ivec2(1, 0), ivec2(0, 0) ^ (ivec2(1, 0))))), 1))), _GLF_IDENTITY(_GLF_IDENTITY(4, ~ (~ _GLF_IDENTITY((4), max((4), (4))))), max(_GLF_IDENTITY(4, ~ (~ _GLF_IDENTITY((4), max((4), (4))))), _GLF_IDENTITY(4, ~ (~ _GLF_IDENTITY((4), max((4), (4))))))));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))))), false || (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) || false)))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false)) || false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   do
    {
     if(_GLF_DEAD(false))
      break;
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
      return;
     return;
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).y)), true, false)), (_GLF_IDENTITY(bool(bvec4(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false)), bool(bvec4(bool(bvec4(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false)), true, true, false)))) && true)), (injectionSwitch.x > injectionSwitch.y))))
      break;
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], min(injectionSwitch[1], injectionSwitch[1])))).x > injectionSwitch.y), bool(bool((_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], min(injectionSwitch[1], injectionSwitch[1])))).x > injectionSwitch.y)))))))
      break;
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, (false) || false), _GLF_IDENTITY(false, bool(bvec4(false, false, true, true))), true, true))), true && (false))));
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END
BUFFER checker DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected_checker DATA_TYPE uint32 SIZE 8388096 FILL 1

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 
  BIND BUFFER checker AS storage DESCRIPTOR_SET 0 BINDING 2 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT checker EQ_BUFFER expected_checker
