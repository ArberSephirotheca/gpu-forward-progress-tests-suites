#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uvec3 GLF_merged3_0_1_4_1_1_14_2_1_12readworkgroup_baseworkgroup_id;
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
  return;
 uvec2 GLF_merged2_0_1_16_1_1_17next_virtual_gidsubgroup_local_id;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    return;
   barrier();
  }
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bool(false)))), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bool(false))))), false || (! (_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bool(false))))))))))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, true)), bool(bvec3(bool(bvec2(false, true)), false, false))))))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).x > injectionSwitch.y))))
    return;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), true && (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), true && (_GLF_WRAPPED_IF_FALSE(false))))))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(true, (true) || _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (true)), (injectionSwitch.x < injectionSwitch.y))))
        {
         return;
        }
       else
        {
        }
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      return;
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)))
      return;
     return;
     if(_GLF_IDENTITY(_GLF_DEAD(false), true && _GLF_IDENTITY((_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, false, true))))), bool(bvec2(_GLF_IDENTITY((_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, false, true))))), false || ((_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, false, true))))))), true)))))
      return;
    }
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, true && (injectionSwitch.x < injectionSwitch.y))))))
    {
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
    }
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     barrier();
    }
  }
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y))))))
  return;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(false))
  return;
 for(int _injected_loop_counter = _GLF_IDENTITY((0 << _GLF_IDENTITY(int(_GLF_IDENTITY(2, (2) - (0 & -45020))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(2), (int(2)) << 0), int(ivec2(_GLF_IDENTITY(_GLF_IDENTITY(int(2), (int(2)) | (int(2))), _GLF_IDENTITY(int(_GLF_IDENTITY(ivec2(int(2), (1 | 1)), ivec2(ivec2(ivec2(int(2), (1 | 1)))))), (true ? int(_GLF_IDENTITY(ivec2(int(2), (1 | 1)), ivec2(ivec2(ivec2(int(_GLF_IDENTITY(2, max(2, 2))), (_GLF_IDENTITY(1 | 1, (1 | 1) | (1 | 1)))))))) : _GLF_FUZZED(-81419)))), 0))), 0 + (_GLF_IDENTITY(_GLF_IDENTITY(int(2), int(ivec2(_GLF_IDENTITY(int(2), _GLF_IDENTITY((int(2)) / 1, 0 ^ _GLF_IDENTITY((_GLF_IDENTITY((int(2)) / 1, ((int(2)) / 1) << 0)), (true ? (_GLF_IDENTITY((int(2)) / 1, ((int(2)) / 1) << 0)) : _GLF_FUZZED(-81691))))), 0))), _GLF_IDENTITY((0 >> _GLF_IDENTITY(int(2), int(2))) + (_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(ivec2(int(2), 0)), 1 * (int(ivec2(int(2), 0)))))), 1 * (_GLF_IDENTITY(_GLF_IDENTITY((0 >> _GLF_IDENTITY(int(2), int(2))) + (_GLF_IDENTITY(int(2), int(ivec2(int(2), 0)))), _GLF_IDENTITY(~ (~ ((0 >> _GLF_IDENTITY(int(2), int(2))) + (_GLF_IDENTITY(int(2), int(ivec2(int(2), 0)))))), clamp(~ (~ ((0 >> _GLF_IDENTITY(int(2), int(2))) + (_GLF_IDENTITY(int(2), int(ivec2(int(2), 0)))))), ~ (~ ((0 >> _GLF_IDENTITY(int(2), int(2))) + (_GLF_IDENTITY(int(2), int(ivec2(int(2), 0)))))), ~ (~ ((0 >> _GLF_IDENTITY(int(2), int(2))) + (_GLF_IDENTITY(int(2), int(ivec2(int(2), 0))))))))), ~ (~ (_GLF_IDENTITY((0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(2), int(2)), min(_GLF_IDENTITY(int(2), int(2)), _GLF_IDENTITY(_GLF_IDENTITY(int(2), int(2)), (_GLF_IDENTITY(int(2), int(2))) << 0)))) + (_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(ivec2(int(2), 0)), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(int(ivec2(int(2), 0)), _GLF_IDENTITY((int(_GLF_IDENTITY(ivec2(int(2), 0), min(ivec2(int(2), 0), ivec2(int(2), 0))))), ((int(_GLF_IDENTITY(ivec2(int(2), 0), min(ivec2(int(2), 0), ivec2(int(2), 0)))))) - 0) | (int(ivec2(_GLF_IDENTITY(int(2), max(int(2), int(2))), 0))))), (69120 & 0) + (~ (_GLF_IDENTITY(int(ivec2(int(2), 0)), (int(ivec2(int(2), 0))) | (int(ivec2(int(2), 0))))))))))), ~ _GLF_IDENTITY((~ ((0 >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), ~ (~ (int(2)))))) + (_GLF_IDENTITY(int(2), int(ivec2(int(2), 0)))))), (true ? (~ ((0 >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), ~ (~ (int(2)))))) + (_GLF_IDENTITY(int(2), int(ivec2(int(2), 0)))))) : _GLF_FUZZED(13456)))))))))))))), ((0 << _GLF_IDENTITY(int(_GLF_IDENTITY(2, (2) - (0 & -45020))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(2), (int(2)) << 0), int(ivec2(_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(_GLF_IDENTITY(ivec2(int(2), (1 | 1)), ivec2(ivec2(ivec2(int(2), (1 | 1)))))), (true ? int(_GLF_IDENTITY(ivec2(int(2), (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(1987) : _GLF_IDENTITY(1, (false ? _GLF_FUZZED(16480) : 1)))) | 1)), ivec2(ivec2(ivec2(int(_GLF_IDENTITY(_GLF_IDENTITY(2, max(2, 2)), (_GLF_IDENTITY(2, max(2, 2))) | 0)), (1 | 1)))))) : _GLF_FUZZED(-81419)))), 0))), 0 + (_GLF_IDENTITY(_GLF_IDENTITY(int(2), int(ivec2(_GLF_IDENTITY(int(2), _GLF_IDENTITY(_GLF_IDENTITY((int(2)) / 1, 0 ^ (_GLF_IDENTITY((int(2)) / 1, ((int(2)) / 1) << 0))), (_GLF_IDENTITY(_GLF_IDENTITY((int(2)) / 1, 0 ^ (_GLF_IDENTITY((int(2)) / 1, ((int(2)) / 1) << 0))), (false ? _GLF_FUZZED((-32686 & -8656)) : _GLF_IDENTITY((int(2)) / 1, 0 ^ (_GLF_IDENTITY((int(2)) / 1, ((int(2)) / 1) << 0)))))) ^ 0)), 0))), _GLF_IDENTITY((0 >> _GLF_IDENTITY(int(2), int(2))) + (_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(ivec2(_GLF_IDENTITY(int(2), (int(2)) >> 0), 0)), 1 * (int(ivec2(int(2), 0)))))), 1 * (_GLF_IDENTITY(_GLF_IDENTITY((0 >> _GLF_IDENTITY(int(2), int(2))) + (_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(ivec2(int(2), 0)), (_GLF_IDENTITY(int(ivec2(int(2), 0)), clamp(int(ivec2(int(2), 0)), int(ivec2(int(2), 0)), int(ivec2(int(2), 0))))) | (int(ivec2(int(2), 0)))))), ~ (~ ((0 >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (false ? _GLF_FUZZED(bitCount(-82007)) : int(2))))) + (_GLF_IDENTITY(int(_GLF_IDENTITY(2, (2) ^ (0 >> _GLF_IDENTITY(int(2), int(2))))), int(ivec2(int(2), 0))))))), ~ (~ (_GLF_IDENTITY((_GLF_IDENTITY(0 >> _GLF_IDENTITY(int(2), int(2)), (_GLF_IDENTITY(0 >> _GLF_IDENTITY(int(2), int(2)), (0 >> _GLF_IDENTITY(int(2), int(2))) << 0)) * _GLF_IDENTITY(1, clamp(1, 1, 1)))) + (_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(ivec2(int(2), 0)), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(int(ivec2(int(2), _GLF_IDENTITY(0, (false ? _GLF_FUZZED(-2692) : 0)))), _GLF_IDENTITY((int(ivec2(int(2), 0))) | (int(ivec2(int(2), 0))), max((int(ivec2(int(2), 0))) | (int(ivec2(int(2), 0))), (int(ivec2(int(2), 0))) | (int(ivec2(int(2), 0))))))), (69120 & 0) + (~ (_GLF_IDENTITY(int(ivec2(int(2), 0)), (int(ivec2(int(2), 0))) | (int(ivec2(int(2), 0))))))))))), ~ (~ ((0 >> _GLF_IDENTITY(int(_GLF_IDENTITY(2, (2) * ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), (int(7)) << 0))))), int(2))) + (_GLF_IDENTITY(int(2), int(ivec2(int(2), 0)))))))))))))))))) | ((0 << _GLF_IDENTITY(int(_GLF_IDENTITY(2, (2) - (0 & -45020))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(2), (int(2)) << 0), int(_GLF_IDENTITY(ivec2(_GLF_IDENTITY(int(_GLF_IDENTITY(2, min(2, 2))), _GLF_IDENTITY(int(_GLF_IDENTITY(ivec2(int(2), (_GLF_IDENTITY(1 | 1, (1 | 1) >> 0))), ivec2(ivec2(ivec2(int(2), (1 | 1)))))), (_GLF_IDENTITY(true ? _GLF_IDENTITY(int(_GLF_IDENTITY(ivec2(int(2), (1 | 1)), ivec2(ivec2(_GLF_IDENTITY(ivec2(int(_GLF_IDENTITY(2, max(2, 2))), (1 | 1)), max(_GLF_IDENTITY(ivec2(int(_GLF_IDENTITY(2, max(2, 2))), (1 | 1)), clamp(ivec2(int(_GLF_IDENTITY(2, max(2, 2))), (1 | 1)), _GLF_IDENTITY(ivec2(int(_GLF_IDENTITY(2, max(2, 2))), (1 | 1)), ivec2(0, 0) | (ivec2(int(_GLF_IDENTITY(2, max(2, 2))), (1 | 1)))), ivec2(int(_GLF_IDENTITY(2, max(2, 2))), (1 | 1)))), _GLF_IDENTITY(ivec2(int(_GLF_IDENTITY(2, max(2, 2))), (1 | 1)), (ivec2(int(_GLF_IDENTITY(2, max(2, 2))), (1 | 1))) * ivec2(1, 1)))))))), (int(_GLF_IDENTITY(ivec2(int(2), (1 | 1)), ivec2(ivec2(_GLF_IDENTITY(ivec2(int(_GLF_IDENTITY(2, max(2, 2))), (1 | 1)), max(_GLF_IDENTITY(ivec2(int(_GLF_IDENTITY(2, max(2, 2))), (1 | 1)), clamp(ivec2(int(_GLF_IDENTITY(2, max(2, 2))), (1 | 1)), _GLF_IDENTITY(ivec2(int(_GLF_IDENTITY(2, max(2, 2))), (1 | 1)), ivec2(0, 0) | (ivec2(int(_GLF_IDENTITY(2, max(2, 2))), (1 | 1)))), ivec2(int(_GLF_IDENTITY(2, max(2, 2))), (1 | 1)))), _GLF_IDENTITY(ivec2(int(_GLF_IDENTITY(2, max(2, 2))), (1 | 1)), (ivec2(int(_GLF_IDENTITY(2, max(2, 2))), (1 | 1))) * ivec2(1, 1))))))))) | (_GLF_IDENTITY(int(_GLF_IDENTITY(ivec2(int(2), (1 | 1)), ivec2(ivec2(_GLF_IDENTITY(ivec2(int(_GLF_IDENTITY(2, max(2, 2))), (1 | 1)), max(_GLF_IDENTITY(ivec2(int(_GLF_IDENTITY(2, max(2, 2))), (1 | 1)), clamp(ivec2(int(_GLF_IDENTITY(2, max(2, 2))), (1 | 1)), _GLF_IDENTITY(ivec2(int(_GLF_IDENTITY(2, max(2, 2))), (1 | 1)), ivec2(0, 0) | (ivec2(int(_GLF_IDENTITY(2, max(2, 2))), (1 | 1)))), ivec2(int(_GLF_IDENTITY(2, max(2, 2))), (1 | 1)))), _GLF_IDENTITY(ivec2(int(_GLF_IDENTITY(2, max(2, 2))), (1 | 1)), (ivec2(int(_GLF_IDENTITY(2, max(2, 2))), (1 | 1))) * ivec2(1, 1)))))))), int(int(int(_GLF_IDENTITY(ivec2(int(2), (1 | 1)), ivec2(ivec2(_GLF_IDENTITY(ivec2(int(_GLF_IDENTITY(2, max(2, 2))), (1 | 1)), max(_GLF_IDENTITY(ivec2(int(_GLF_IDENTITY(2, max(2, 2))), (1 | 1)), clamp(ivec2(int(_GLF_IDENTITY(2, max(2, 2))), (1 | 1)), _GLF_IDENTITY(ivec2(int(_GLF_IDENTITY(2, max(2, 2))), (1 | 1)), ivec2(0, 0) | (ivec2(int(_GLF_IDENTITY(2, max(2, 2))), (1 | 1)))), ivec2(int(_GLF_IDENTITY(2, max(2, 2))), (1 | 1)))), _GLF_IDENTITY(ivec2(int(_GLF_IDENTITY(2, max(2, 2))), (1 | 1)), (ivec2(int(_GLF_IDENTITY(2, max(2, 2))), (1 | 1))) * ivec2(1, 1))))))))))))) : _GLF_FUZZED(-81419), (true ? _GLF_IDENTITY(int(_GLF_IDENTITY(ivec2(int(2), (1 | 1)), ivec2(ivec2(_GLF_IDENTITY(ivec2(int(_GLF_IDENTITY(2, max(2, 2))), (1 | 1)), max(_GLF_IDENTITY(ivec2(int(_GLF_IDENTITY(2, max(2, 2))), (1 | 1)), clamp(ivec2(int(_GLF_IDENTITY(2, max(2, 2))), (1 | 1)), _GLF_IDENTITY(ivec2(int(_GLF_IDENTITY(2, max(2, 2))), (1 | 1)), ivec2(0, 0) | (ivec2(int(_GLF_IDENTITY(2, max(2, 2))), (1 | 1)))), ivec2(int(_GLF_IDENTITY(2, max(2, 2))), (1 | 1)))), _GLF_IDENTITY(ivec2(int(_GLF_IDENTITY(2, max(2, 2))), (1 | 1)), (ivec2(int(_GLF_IDENTITY(2, max(2, 2))), (1 | 1))) * ivec2(1, 1)))))))), (int(_GLF_IDENTITY(ivec2(int(2), (1 | 1)), ivec2(ivec2(_GLF_IDENTITY(ivec2(int(_GLF_IDENTITY(2, max(2, 2))), (1 | 1)), max(_GLF_IDENTITY(ivec2(int(_GLF_IDENTITY(2, max(2, 2))), (1 | 1)), clamp(ivec2(int(_GLF_IDENTITY(2, max(2, 2))), (1 | 1)), _GLF_IDENTITY(ivec2(int(_GLF_IDENTITY(2, max(2, 2))), (1 | 1)), ivec2(0, 0) | (ivec2(int(_GLF_IDENTITY(2, max(2, 2))), (1 | 1)))), ivec2(int(_GLF_IDENTITY(2, max(2, 2))), (1 | 1)))), _GLF_IDENTITY(ivec2(int(_GLF_IDENTITY(2, max(2, 2))), (1 | 1)), (ivec2(int(_GLF_IDENTITY(2, max(2, 2))), (1 | 1))) * ivec2(1, 1))))))))) | (_GLF_IDENTITY(int(_GLF_IDENTITY(ivec2(int(2), (1 | 1)), ivec2(ivec2(_GLF_IDENTITY(ivec2(int(_GLF_IDENTITY(2, max(2, 2))), (1 | 1)), max(_GLF_IDENTITY(ivec2(int(_GLF_IDENTITY(2, max(2, 2))), (1 | 1)), clamp(ivec2(int(_GLF_IDENTITY(2, max(2, 2))), (1 | 1)), _GLF_IDENTITY(ivec2(int(_GLF_IDENTITY(2, max(2, 2))), (1 | 1)), ivec2(0, 0) | (ivec2(int(_GLF_IDENTITY(2, max(2, 2))), (1 | 1)))), ivec2(int(_GLF_IDENTITY(2, max(2, 2))), (1 | 1)))), _GLF_IDENTITY(ivec2(int(_GLF_IDENTITY(2, max(2, 2))), (1 | 1)), (ivec2(int(_GLF_IDENTITY(2, max(2, 2))), (1 | 1))) * ivec2(1, 1)))))))), int(int(int(_GLF_IDENTITY(ivec2(int(2), (1 | 1)), ivec2(ivec2(_GLF_IDENTITY(ivec2(int(_GLF_IDENTITY(2, max(2, 2))), (1 | 1)), max(_GLF_IDENTITY(ivec2(int(_GLF_IDENTITY(2, max(2, 2))), (1 | 1)), clamp(ivec2(int(_GLF_IDENTITY(2, max(2, 2))), (1 | 1)), _GLF_IDENTITY(ivec2(int(_GLF_IDENTITY(2, max(2, 2))), (1 | 1)), ivec2(0, 0) | (ivec2(int(_GLF_IDENTITY(2, max(2, 2))), (1 | 1)))), ivec2(int(_GLF_IDENTITY(2, max(2, 2))), (1 | 1)))), _GLF_IDENTITY(ivec2(int(_GLF_IDENTITY(2, max(2, 2))), (1 | 1)), (ivec2(int(_GLF_IDENTITY(2, max(2, 2))), (1 | 1))) * ivec2(1, 1))))))))))))) : _GLF_FUZZED(-81419)) / 1)))), 0), ivec2(ivec3(ivec2(_GLF_IDENTITY(int(_GLF_IDENTITY(2, min(2, 2))), _GLF_IDENTITY(int(_GLF_IDENTITY(ivec2(int(2), (_GLF_IDENTITY(1 | 1, (1 | 1) >> 0))), ivec2(ivec2(ivec2(int(2), (1 | 1)))))), (_GLF_IDENTITY(true ? _GLF_IDENTITY(int(_GLF_IDENTITY(ivec2(int(2), (1 | 1)), ivec2(ivec2(_GLF_IDENTITY(ivec2(int(_GLF_IDENTITY(2, max(2, 2))), (1 | 1)), max(_GLF_IDENTITY(ivec2(int(_GLF_IDENTITY(2, max(2, 2))), (1 | 1)), clamp(ivec2(int(_GLF_IDENTITY(2, max(2, 2))), (1 | 1)), _GLF_IDENTITY(ivec2(int(_GLF_IDENTITY(2, max(2, 2))), (1 | 1)), ivec2(0, 0) | (ivec2(int(_GLF_IDENTITY(2, max(2, 2))), (1 | 1)))), ivec2(int(_GLF_IDENTITY(2, max(2, 2))), (1 | 1)))), _GLF_IDENTITY(ivec2(int(_GLF_IDENTITY(2, max(2, 2))), (1 | 1)), (ivec2(int(_GLF_IDENTITY(2, max(2, 2))), (1 | 1))) * ivec2(1, 1)))))))), (int(_GLF_IDENTITY(ivec2(int(2), (1 | 1)), ivec2(ivec2(_GLF_IDENTITY(ivec2(int(_GLF_IDENTITY(2, max(2, 2))), (1 | 1)), max(_GLF_IDENTITY(ivec2(int(_GLF_IDENTITY(2, max(2, 2))), (1 | 1)), clamp(ivec2(int(_GLF_IDENTITY(2, max(2, 2))), (1 | 1)), _GLF_IDENTITY(ivec2(int(_GLF_IDENTITY(2, max(2, 2))), (1 | 1)), ivec2(0, 0) | (ivec2(int(_GLF_IDENTITY(2, max(2, 2))), (1 | 1)))), ivec2(int(_GLF_IDENTITY(2, max(2, 2))), (1 | 1)))), _GLF_IDENTITY(ivec2(int(_GLF_IDENTITY(2, max(2, 2))), (1 | 1)), (ivec2(int(_GLF_IDENTITY(2, max(2, 2))), (1 | 1))) * ivec2(1, 1))))))))) | (_GLF_IDENTITY(int(_GLF_IDENTITY(ivec2(int(2), (1 | 1)), ivec2(ivec2(_GLF_IDENTITY(ivec2(int(_GLF_IDENTITY(2, max(2, 2))), (1 | 1)), max(_GLF_IDENTITY(ivec2(int(_GLF_IDENTITY(2, max(2, 2))), (1 | 1)), clamp(ivec2(int(_GLF_IDENTITY(2, max(2, 2))), (1 | 1)), _GLF_IDENTITY(ivec2(int(_GLF_IDENTITY(2, max(2, 2))), (1 | 1)), ivec2(0, 0) | (ivec2(int(_GLF_IDENTITY(2, max(2, 2))), (1 | 1)))), ivec2(int(_GLF_IDENTITY(2, max(2, 2))), (1 | 1)))), _GLF_IDENTITY(ivec2(int(_GLF_IDENTITY(2, max(2, 2))), (1 | 1)), (ivec2(int(_GLF_IDENTITY(2, max(2, 2))), (1 | 1))) * ivec2(1, 1)))))))), int(int(int(_GLF_IDENTITY(ivec2(int(2), (1 | 1)), ivec2(ivec2(_GLF_IDENTITY(ivec2(int(_GLF_IDENTITY(2, max(2, 2))), (1 | 1)), max(_GLF_IDENTITY(ivec2(int(_GLF_IDENTITY(2, max(2, 2))), (1 | 1)), clamp(ivec2(int(_GLF_IDENTITY(2, max(2, 2))), (1 | 1)), _GLF_IDENTITY(ivec2(int(_GLF_IDENTITY(2, max(2, 2))), (1 | 1)), ivec2(0, 0) | (ivec2(int(_GLF_IDENTITY(2, max(2, 2))), (1 | 1)))), ivec2(int(_GLF_IDENTITY(2, max(2, 2))), (1 | 1)))), _GLF_IDENTITY(ivec2(int(_GLF_IDENTITY(2, max(2, 2))), (1 | 1)), (ivec2(int(_GLF_IDENTITY(2, max(2, 2))), (1 | 1))) * ivec2(1, 1))))))))))))) : _GLF_FUZZED(-81419), (true ? _GLF_IDENTITY(int(_GLF_IDENTITY(ivec2(int(2), (1 | 1)), ivec2(ivec2(_GLF_IDENTITY(ivec2(int(_GLF_IDENTITY(2, max(2, 2))), (1 | 1)), max(_GLF_IDENTITY(ivec2(int(_GLF_IDENTITY(2, max(2, 2))), (1 | 1)), clamp(ivec2(int(_GLF_IDENTITY(2, max(2, 2))), (1 | 1)), _GLF_IDENTITY(ivec2(int(_GLF_IDENTITY(2, max(2, 2))), (1 | 1)), ivec2(0, 0) | (ivec2(int(_GLF_IDENTITY(2, max(2, 2))), (1 | 1)))), ivec2(int(_GLF_IDENTITY(2, max(2, 2))), (1 | 1)))), _GLF_IDENTITY(ivec2(int(_GLF_IDENTITY(2, max(2, 2))), (1 | 1)), (ivec2(int(_GLF_IDENTITY(2, max(2, 2))), (1 | 1))) * ivec2(1, 1)))))))), (int(_GLF_IDENTITY(ivec2(int(2), (1 | 1)), ivec2(ivec2(_GLF_IDENTITY(ivec2(int(_GLF_IDENTITY(2, max(2, 2))), (1 | 1)), max(_GLF_IDENTITY(ivec2(int(_GLF_IDENTITY(2, max(2, 2))), (1 | 1)), clamp(ivec2(int(_GLF_IDENTITY(2, max(2, 2))), (1 | 1)), _GLF_IDENTITY(ivec2(int(_GLF_IDENTITY(2, max(2, 2))), (1 | 1)), ivec2(0, 0) | (ivec2(int(_GLF_IDENTITY(2, max(2, 2))), (1 | 1)))), ivec2(int(_GLF_IDENTITY(2, max(2, 2))), (1 | 1)))), _GLF_IDENTITY(ivec2(int(_GLF_IDENTITY(2, max(2, 2))), (1 | 1)), (ivec2(int(_GLF_IDENTITY(2, max(2, 2))), (1 | 1))) * ivec2(1, 1))))))))) | (_GLF_IDENTITY(int(_GLF_IDENTITY(ivec2(int(2), (1 | 1)), ivec2(ivec2(_GLF_IDENTITY(ivec2(int(_GLF_IDENTITY(2, max(2, 2))), (1 | 1)), max(_GLF_IDENTITY(ivec2(int(_GLF_IDENTITY(2, max(2, 2))), (1 | 1)), clamp(ivec2(int(_GLF_IDENTITY(2, max(2, 2))), (1 | 1)), _GLF_IDENTITY(ivec2(int(_GLF_IDENTITY(2, max(2, 2))), (1 | 1)), ivec2(0, 0) | (ivec2(int(_GLF_IDENTITY(2, max(2, 2))), (1 | 1)))), ivec2(int(_GLF_IDENTITY(2, max(2, 2))), (1 | 1)))), _GLF_IDENTITY(ivec2(int(_GLF_IDENTITY(2, max(2, 2))), (1 | 1)), (ivec2(int(_GLF_IDENTITY(2, max(2, 2))), (1 | 1))) * ivec2(1, 1)))))))), int(int(int(_GLF_IDENTITY(ivec2(int(2), (1 | 1)), ivec2(ivec2(_GLF_IDENTITY(ivec2(int(_GLF_IDENTITY(2, max(2, 2))), (1 | 1)), max(_GLF_IDENTITY(ivec2(int(_GLF_IDENTITY(2, max(2, 2))), (1 | 1)), clamp(ivec2(int(_GLF_IDENTITY(2, max(2, 2))), (1 | 1)), _GLF_IDENTITY(ivec2(int(_GLF_IDENTITY(2, max(2, 2))), (1 | 1)), ivec2(0, 0) | (ivec2(int(_GLF_IDENTITY(2, max(2, 2))), (1 | 1)))), ivec2(int(_GLF_IDENTITY(2, max(2, 2))), (1 | 1)))), _GLF_IDENTITY(ivec2(int(_GLF_IDENTITY(2, max(2, 2))), (1 | 1)), (ivec2(int(_GLF_IDENTITY(2, max(2, 2))), (1 | 1))) * ivec2(1, 1))))))))))))) : _GLF_FUZZED(-81419)) / 1)))), 0), 1))))), _GLF_IDENTITY(0, max(0, 0)) + (_GLF_IDENTITY(_GLF_IDENTITY(int(2), int(_GLF_IDENTITY(ivec2(_GLF_IDENTITY(int(2), _GLF_IDENTITY((int(2)) / 1, 0 ^ (_GLF_IDENTITY((int(2)) / 1, ((int(2)) / 1) << 0)))), 0), (ivec2(_GLF_IDENTITY(int(2), _GLF_IDENTITY((int(2)) / 1, 0 ^ (_GLF_IDENTITY((int(2)) / 1, ((int(2)) / 1) << 0)))), 0)) + ivec2(0, 0)))), _GLF_IDENTITY((_GLF_IDENTITY(0, clamp(0, 0, 0)) >> _GLF_IDENTITY(int(2), int(2))) + (_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(ivec2(int(2), 0)), 1 * (int(ivec2(int(2), 0)))))), _GLF_IDENTITY(1, ~ (~ (1))) * (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((0 >> _GLF_IDENTITY(int(2), int(2))) + (_GLF_IDENTITY(int(2), int(ivec2(int(2), 0)))), ((1 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(6)) / 1))) >> _GLF_IDENTITY(int(6), int(6))) * ((0 >> _GLF_IDENTITY(int(2), int(2))) + (_GLF_IDENTITY(int(2), int(ivec2(int(2), 0)))))), ~ (~ ((0 >> _GLF_IDENTITY(int(2), int(2))) + (_GLF_IDENTITY(int(2), int(ivec2(int(2), 0))))))), ~ (~ (_GLF_IDENTITY((0 >> _GLF_IDENTITY(int(2), int(2))) + (_GLF_IDENTITY(int(_GLF_IDENTITY(2, (_GLF_IDENTITY(2, min(_GLF_IDENTITY(2, (2) | (2)), _GLF_IDENTITY(2, min(2, 2))))) << 0)), _GLF_IDENTITY(int(ivec2(int(2), 0)), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(int(ivec2(int(2), 0)), (int(ivec2(int(2), 0))) | (int(ivec2(int(2), 0))))), (_GLF_IDENTITY(69120 & 0, 0 + (_GLF_IDENTITY(69120 & 0, 1 * (69120 & 0))))) + (~ (_GLF_IDENTITY(int(ivec2(int(2), 0)), (int(ivec2(int(2), 0))) | (int(ivec2(int(2), 0))))))))))), ~ (~ ((0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(2), int(2)), (_GLF_IDENTITY(int(2), int(2))) >> 0)) + (_GLF_IDENTITY(int(2), int(ivec2(int(2), 0))))))))))))))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, (false) || false)), bool(bool(! _GLF_IDENTITY((_GLF_IDENTITY(false, (false) || false)), ((_GLF_IDENTITY(false, (false) || false))) && true))))))))
      continue;
     if(_GLF_DEAD(false))
      break;
     barrier();
    }
   GLF_merged2_0_1_16_1_1_17next_virtual_gidsubgroup_local_id.y = _GLF_IDENTITY(subgroup_local_id, clamp(_GLF_IDENTITY(subgroup_local_id, clamp(subgroup_local_id, subgroup_local_id, subgroup_local_id)), _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) << (0u & 91454u)), _GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, min(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | (subgroup_local_id)), subgroup_local_id)), min(_GLF_IDENTITY(subgroup_local_id, ~ (_GLF_IDENTITY(~ (subgroup_local_id), max(~ (subgroup_local_id), ~ (subgroup_local_id))))), _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) >> 0u)))));
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), (false) || false)))
    break;
   if(_GLF_DEAD(false))
    break;
  }
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec3(bvec2(false, true), true))))), (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))), true && (_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), (! (! (false))) || false))))))
    return;
  }
 do
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, _GLF_IDENTITY(true, (_GLF_IDENTITY(true, ! (! (true)))) && true), true)))))
    break;
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        continue;
       barrier();
      }
    }
   else
    {
    }
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(false, bool(bvec2(false, true))))), (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      break;
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(clamp(-54.54, -3.4, 3.7)) : _GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)))), injectionSwitch.x)), injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), false || (! (! (false)))))), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))), ! (! (_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), (_GLF_IDENTITY(! (! (false)), (! (! (false))) || false)) && true)))))))), bool(bvec4(bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))), bool(_GLF_IDENTITY(bvec3(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))), true, true), _GLF_IDENTITY(bvec3(bvec3(bvec3(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))), true, true))), bvec3(bvec4(bvec3(bvec3(bvec3(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))), true, true))), false)))))), ! (! (_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false))))))))), true, false, _GLF_IDENTITY(false, (false) && true))))))
      continue;
     barrier();
    }
   do
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
   if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))))
      return;
     barrier();
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 uint num_workgroup = _GLF_IDENTITY(gl_NumWorkGroups.x, 0u | (_GLF_IDENTITY(gl_NumWorkGroups.x, _GLF_IDENTITY((_GLF_IDENTITY(gl_NumWorkGroups, max(gl_NumWorkGroups, _GLF_IDENTITY(gl_NumWorkGroups, (true ? gl_NumWorkGroups : _GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(uvec3(92581u, 91011u, 35871u), (uvec3(92581u, 91011u, 35871u)) / uvec3(1u, 1u, 1u))), uvec3(0u, 0u, 0u) | (_GLF_FUZZED(uvec3(92581u, 91011u, 35871u)))))))).x), _GLF_IDENTITY(0u, ~ (~ (0u))) | (_GLF_IDENTITY((_GLF_IDENTITY(gl_NumWorkGroups, max(gl_NumWorkGroups, _GLF_IDENTITY(gl_NumWorkGroups, (true ? gl_NumWorkGroups : _GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(uvec3(92581u, 91011u, 35871u), (uvec3(92581u, 91011u, 35871u)) / uvec3(1u, 1u, 1u))), uvec3(0u, 0u, 0u) | (_GLF_FUZZED(uvec3(92581u, 91011u, 35871u)))))))).x), ~ (~ ((_GLF_IDENTITY(gl_NumWorkGroups, max(gl_NumWorkGroups, _GLF_IDENTITY(gl_NumWorkGroups, (true ? gl_NumWorkGroups : _GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(uvec3(92581u, 91011u, 35871u), (uvec3(92581u, 91011u, 35871u)) / uvec3(1u, 1u, 1u))), uvec3(0u, 0u, 0u) | (_GLF_FUZZED(uvec3(92581u, 91011u, 35871u)))))))).x)))))) | 0u)));
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) && true)))
    barrier();
   return;
  }
 uint workgroup_size = _GLF_IDENTITY(gl_WorkGroupSize.x, (_GLF_IDENTITY(gl_WorkGroupSize.x, (gl_WorkGroupSize.x) - 0u)) | 0u);
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(vec3(injectionSwitch, determinant(mat3(1.0, _GLF_IDENTITY(dot(vec4(1.0, 1.0, 1.0, _GLF_IDENTITY(1.0, clamp(1.0, _GLF_IDENTITY(1.0, max(1.0, 1.0)), _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0))))), vec4(0.0, 0.0, 0.0, 0.0)), dot(vec4(_GLF_IDENTITY(1.0, (1.0) - 0.0), 1.0, 1.0, 1.0), vec4(0.0, 0.0, 0.0, 0.0))), 1.0, _GLF_IDENTITY(0.0, (0.0) + 0.0), abs(1.0), 1.0, 0.0, 0.0, round(length(normalize(vec2(1.0, 1.0))))))))).x > injectionSwitch.y))))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))) || false))))) && true))
      barrier();
     return;
    }
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     barrier();
    }
   else
    {
    }
  }
 uint workgroup_id = gl_WorkGroupID.x;
 GLF_merged3_0_1_4_1_1_14_2_1_12readworkgroup_baseworkgroup_id.z = _GLF_IDENTITY(workgroup_id, (workgroup_id) | (workgroup_id));
 do
  {
   if(_GLF_DEAD(false))
    break;
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((false) && true, false || ((false) && true)))))
    barrier();
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = (0 | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
      {
       barrier();
      }
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
      break;
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     continue;
    }
   if(_GLF_DEAD(false))
    break;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    continue;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      break;
     if(_GLF_DEAD(false))
      {
       do
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
               if(_GLF_DEAD(false))
                return;
              }
             else
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
                return;
              }
             if(_GLF_DEAD(false))
              return;
             barrier();
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
       if(_GLF_DEAD(false))
        continue;
      }
     break;
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y)))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! _GLF_IDENTITY((false), bool(bvec4((false), true, false, true)))) && true)))))
      return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(-64.06))) > injectionSwitch.y))))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     else
      {
      }
     return;
     do
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))))
        return;
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))));
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(-833.062, 442.314)))).x > injectionSwitch.y))))
    return;
  }
 if(_GLF_DEAD(false))
  return;
 for(int _injected_loop_counter = 1; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0), (_GLF_WRAPPED_LOOP(_injected_loop_counter != 0)) && true))), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), _GLF_IDENTITY(bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0), (_GLF_WRAPPED_LOOP(_injected_loop_counter != 0)) && true))), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec3(bvec3(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0), (_GLF_WRAPPED_LOOP(_injected_loop_counter != 0)) && true))), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), true)), bvec3(bvec4(bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0), (_GLF_WRAPPED_LOOP(_injected_loop_counter != 0)) && true))), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec3(bvec3(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0), (_GLF_WRAPPED_LOOP(_injected_loop_counter != 0)) && true))), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), true)), true)))))); _injected_loop_counter --)
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y))) || false)))
    barrier();
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 << _GLF_IDENTITY(int(5), int(5)))); _injected_loop_counter --)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), ! (! (bool(injectionSwitch.x > injectionSwitch.y))))))) || false, ! (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(injectionSwitch.x > injectionSwitch.y)))) || false, (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(injectionSwitch.x > injectionSwitch.y)))) || false, true && ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(injectionSwitch.x > injectionSwitch.y)))) || false))) && true)), ! (! (! (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(injectionSwitch.x > injectionSwitch.y)))) || false, (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(injectionSwitch.x > injectionSwitch.y)))) || false, true && ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, 1.0 * (_GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(-996.711)), bool(false))), injectionSwitch.y, injectionSwitch.y)))))))) || false))) && true))))), false || (_GLF_IDENTITY(! (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(injectionSwitch.x > injectionSwitch.y)))) || false, (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), bool(bool(injectionSwitch.x > injectionSwitch.y)))) || false, true && ((_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).y, bool(bool(injectionSwitch.x > injectionSwitch.y)))) || false))) && true)), ! (! (! (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(injectionSwitch.x > injectionSwitch.y)))) || false, (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(injectionSwitch.x > injectionSwitch.y)))) || false, true && ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, 1.0 * (_GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(-996.711)), bool(false))), injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(97.78) : _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0))))))))))) || false))) && true))))))))))))))
    return;
  }
 uint workgroup_base = _GLF_IDENTITY(workgroup_size, (workgroup_size) * 1u) * _GLF_IDENTITY(_GLF_IDENTITY(GLF_merged3_0_1_4_1_1_14_2_1_12readworkgroup_baseworkgroup_id.z, (GLF_merged3_0_1_4_1_1_14_2_1_12readworkgroup_baseworkgroup_id.z) | (GLF_merged3_0_1_4_1_1_14_2_1_12readworkgroup_baseworkgroup_id.z)), _GLF_IDENTITY(0u, max(0u, 0u)) | (_GLF_IDENTITY(GLF_merged3_0_1_4_1_1_14_2_1_12readworkgroup_baseworkgroup_id.z, (GLF_merged3_0_1_4_1_1_14_2_1_12readworkgroup_baseworkgroup_id.z) | (GLF_merged3_0_1_4_1_1_14_2_1_12readworkgroup_baseworkgroup_id.z))));
 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_WRAPPED_IF_FALSE(false))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(true, ! (! (true))), (_GLF_IDENTITY(_GLF_IDENTITY(true, ! (! (true))), ! (! (_GLF_IDENTITY(true, ! (! (true))))))) || false)))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        return;
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
     barrier();
     do
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), bool(bvec2(_GLF_WRAPPED_LOOP(false), false))));
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, true, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bool(bvec2(bool(bvec4(false, true, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false))))))
    return;
   return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
  barrier();
 for(int _injected_loop_counter = (-31546 & 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
  {
   GLF_merged3_0_1_4_1_1_14_2_1_12readworkgroup_baseworkgroup_id.y = workgroup_base;
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(false, false, _GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, true && (false)), false)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), _GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(false, false, _GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, true && (false)), false)))) || _GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true)) && true)))), bvec3(bvec4(bvec3(false, false, _GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, true && (false)), false)))) || _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0) > injectionSwitch.y)))), true)))), bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec3(false, false, _GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, true && (false)), false)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bvec3(bvec4(bvec3(false, false, _GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, true && (false)), false)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true)))))))), bvec3(bvec4(bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(false, false, _GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, true && (false)), false)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, true && (false)), false)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec2(false, true)))) || _GLF_IDENTITY(false, (false) || false)), (_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, true && (false)), false)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))), bvec3(bvec4(bvec3(false, false, _GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, true && (false)), false)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true)))), bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec3(false, false, _GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, true && (false)), false)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bvec3(bvec4(bvec3(false, false, _GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, true && (false)), false)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true)))))))), true)))), bvec3(bvec4(_GLF_IDENTITY(bvec3(false, false, false), bvec3(bvec4(_GLF_IDENTITY(bvec3(false, false, false), _GLF_IDENTITY(bvec3(bvec3(bvec3(false, false, false))), bvec3(bvec3(bvec3(bvec3(bvec3(false, false, false))))))), true))), true)))), true && (_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, ! (! (false))), false, _GLF_IDENTITY(false, (_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) || false), bool(bvec2(_GLF_IDENTITY(false, true && (false)), false)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), _GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(false, false, _GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, _GLF_IDENTITY(true && (false), (_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec4(true, false, true, true)), (bool(bvec4(true, false, true, true))) || false)) && (false)) || false)), _GLF_IDENTITY(false, ! (! (false))))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bvec3(bvec4(bvec3(false, false, _GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false)), true && (false)), false)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true)))), bvec3(bvec3(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(false, false, _GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), (_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, true && (false)), false)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bvec3(bvec4(bvec3(false, false, _GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), (_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, true && (false)), false)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false))), bvec3(bvec4(bvec3(false, false, _GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, true && (false)), false)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true)))))))), bvec3(bvec4(bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(false, false, _GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, true && (false)), false)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bvec3(bvec3(bvec3(false, false, _GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, true && (false)), false)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), bvec3(bvec4(bvec3(false, false, _GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, true && (false)), false)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true)))), bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec3(false, false, _GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), (_GLF_IDENTITY(false, true && (false))) || false))))))), false)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bvec3(bvec4(bvec3(false, false, _GLF_IDENTITY(false, (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(false, true && (false)), false)), bool(bvec2(_GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(false, true && (false)), false)), true && (bool(bvec2(_GLF_IDENTITY(false, true && (false)), false)))), false))))) || _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch)).y)))), true)))))))), true)))), bvec3(bvec4(bvec3(false, false, false), true)))), _GLF_IDENTITY(bool(bvec3(bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(false, false, _GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, true && (false)), false)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), _GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(false, false, _GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, true && (false)), false)))) || _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), injectionSwitch)))).x > injectionSwitch.y)))), bvec3(bvec4(bvec3(false, false, _GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, true && (false)), false)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true)))), bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec3(false, false, _GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, _GLF_IDENTITY(true && (false), bool(bvec3(true && (false), true, false)))), false)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), _GLF_IDENTITY(bvec3(bvec4(_GLF_IDENTITY(bvec3(false, false, _GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, true && (false)), false)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), _GLF_IDENTITY(bvec3(bvec4(_GLF_IDENTITY(bvec3(false, false, _GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, true && (false)), false)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bvec3(bvec4(bvec3(false, false, _GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, true && (false)), false)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false))), _GLF_IDENTITY(false, bool(bvec3(false, false, true))))), bvec3(bvec4(bvec3(bvec4(_GLF_IDENTITY(bvec3(false, false, _GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, true && (false)), false)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bvec3(bvec4(bvec3(false, false, _GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, true && (false)), false)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false))), _GLF_IDENTITY(false, bool(bvec3(false, false, true))))), false)))), true)), _GLF_IDENTITY(bvec3(bvec4(bvec3(bvec4(_GLF_IDENTITY(bvec3(false, false, _GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, true && (false)), false)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), _GLF_IDENTITY(bvec3(bvec4(_GLF_IDENTITY(bvec3(false, false, _GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, true && (false)), false)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bvec3(bvec4(bvec3(false, false, _GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, true && (false)), false)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false))), _GLF_IDENTITY(false, bool(bvec3(false, false, true))))), bvec3(bvec4(bvec3(bvec4(_GLF_IDENTITY(bvec3(false, false, _GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, true && (false)), false)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bvec3(bvec4(bvec3(false, false, _GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, true && (false)), false)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false))), _GLF_IDENTITY(false, bool(bvec3(false, false, true))))), false)))), true)), true)), bvec3(bvec4(bvec3(bvec4(bvec3(bvec4(_GLF_IDENTITY(bvec3(false, false, _GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, true && (false)), false)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), _GLF_IDENTITY(bvec3(bvec4(_GLF_IDENTITY(bvec3(false, false, _GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, true && (false)), false)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bvec3(bvec4(bvec3(false, false, _GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, true && (false)), false)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false))), _GLF_IDENTITY(false, bool(bvec3(false, false, true))))), bvec3(bvec4(bvec3(bvec4(_GLF_IDENTITY(bvec3(false, false, _GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, true && (false)), false)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bvec3(bvec4(bvec3(false, false, _GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, true && (false)), false)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false))), _GLF_IDENTITY(false, bool(bvec3(false, false, true))))), false)))), true)), true)), true)))))))))), bvec3(bvec4(bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(false, false, _GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, _GLF_IDENTITY(true && (false), ! (! (_GLF_IDENTITY(true && (false), ! (! (true && (false)))))))), false)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bvec3(bvec4(bvec3(false, false, _GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, true && (false)), false)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true)))), bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec3(false, false, _GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, true && (false)), false)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bvec3(bvec4(bvec3(false, false, _GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, true && (false)), false)))) || _GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(mat3x2(_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(float(injectionSwitch.x)), min(float(float(injectionSwitch.x)), float(float(injectionSwitch.x))))), 1.0, 1.0, cos(0.0), log(1.0), 0.0)), float(float(_GLF_IDENTITY(float(mat3x2(_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(float(injectionSwitch.x)), min(float(float(injectionSwitch.x)), float(float(injectionSwitch.x))))), 1.0, 1.0, cos(0.0), log(1.0), 0.0)), max(float(mat3x2(_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(float(injectionSwitch.x)), min(float(float(injectionSwitch.x)), float(float(injectionSwitch.x))))), 1.0, 1.0, cos(0.0), log(1.0), 0.0)), float(mat3x2(_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(float(injectionSwitch.x)), min(float(float(injectionSwitch.x)), float(float(injectionSwitch.x))))), 1.0, 1.0, cos(0.0), log(1.0), 0.0)))))))) > injectionSwitch.y), ((_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(mat3x2(_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(float(injectionSwitch.x)), min(float(float(injectionSwitch.x)), float(float(injectionSwitch.x))))), 1.0, 1.0, cos(0.0), log(1.0), 0.0)), float(float(_GLF_IDENTITY(float(mat3x2(_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(float(injectionSwitch.x)), min(float(float(injectionSwitch.x)), float(float(injectionSwitch.x))))), 1.0, 1.0, cos(0.0), log(1.0), 0.0)), max(float(mat3x2(_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(float(injectionSwitch.x)), min(float(float(injectionSwitch.x)), float(float(injectionSwitch.x))))), 1.0, 1.0, cos(0.0), log(1.0), 0.0)), float(mat3x2(_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(float(injectionSwitch.x)), min(float(float(injectionSwitch.x)), float(float(injectionSwitch.x))))), 1.0, 1.0, cos(0.0), log(1.0), 0.0)))))))) > injectionSwitch.y)) && true)))), true)))))))), true)))), bvec3(bvec4(bvec3(false, false, false), true)))), true, true)), true && (bool(bvec3(bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(false, false, _GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, true && (false)), false)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), _GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(false, false, _GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, true && (false)), false)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bvec3(bvec4(bvec3(false, false, _GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, true && (false)), false)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true)))), bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec3(false, false, _GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, true && (false)), false)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bvec3(bvec4(bvec3(false, false, _GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, true && (false)), false)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true))))))), bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(false, false, _GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, true && (false)), false)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bvec3(bvec4(bvec3(false, false, _GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, true && (false)), false)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true)))), bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec3(false, false, _GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, true && (false)), false)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bvec3(bvec4(bvec3(false, false, _GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, true && (false)), false)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true))))))), false)))), bvec3(bvec4(bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(false, false, _GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, true && (false)), false)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bvec3(bvec4(bvec3(false, false, _GLF_IDENTITY(false, (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(false, true && (false)), false)), ! (! (_GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(false, true && (false)), false)), bool(bvec4(bool(bvec2(_GLF_IDENTITY(false, true && (false)), false)), true, false, false)))))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true)))), bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec3(false, false, _GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, true && (false)), false)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bvec3(bvec4(bvec3(false, false, _GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, true && (false)), false)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true)))))))), true)))), bvec3(bvec4(bvec3(false, false, false), true)))), true, true))))))))))
  barrier();
 uint subgroup_base = subgroup_id * subgroup_size;
 if(_GLF_DEAD(false))
  barrier();
 uint virtual_gid = GLF_merged3_0_1_4_1_1_14_2_1_12readworkgroup_baseworkgroup_id.y + subgroup_base + GLF_merged2_0_1_16_1_1_17next_virtual_gidsubgroup_local_id.y;
 uint next_virtual_gid = _GLF_IDENTITY(GLF_merged3_0_1_4_1_1_14_2_1_12readworkgroup_baseworkgroup_id.y + subgroup_base, max(GLF_merged3_0_1_4_1_1_14_2_1_12readworkgroup_baseworkgroup_id.y + subgroup_base, _GLF_IDENTITY(GLF_merged3_0_1_4_1_1_14_2_1_12readworkgroup_baseworkgroup_id.y + subgroup_base, (_GLF_IDENTITY(GLF_merged3_0_1_4_1_1_14_2_1_12readworkgroup_baseworkgroup_id.y, (GLF_merged3_0_1_4_1_1_14_2_1_12readworkgroup_baseworkgroup_id.y) - 0u) + _GLF_IDENTITY(subgroup_base, uint(_GLF_ZERO(0.0, injectionSwitch.x)) | (subgroup_base))) / 1u))) + (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(GLF_merged2_0_1_16_1_1_17next_virtual_gidsubgroup_local_id.y, (GLF_merged2_0_1_16_1_1_17next_virtual_gidsubgroup_local_id.y) * 1u) + 1) % _GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size)), max(_GLF_IDENTITY((GLF_merged2_0_1_16_1_1_17next_virtual_gidsubgroup_local_id.y + 1) % subgroup_size, min(_GLF_IDENTITY(_GLF_IDENTITY((GLF_merged2_0_1_16_1_1_17next_virtual_gidsubgroup_local_id.y + 1) % subgroup_size, _GLF_IDENTITY((_GLF_IDENTITY((GLF_merged2_0_1_16_1_1_17next_virtual_gidsubgroup_local_id.y + 1) % subgroup_size, ((GLF_merged2_0_1_16_1_1_17next_virtual_gidsubgroup_local_id.y + 1) % subgroup_size) ^ 0u)) - 0u, min((_GLF_IDENTITY((GLF_merged2_0_1_16_1_1_17next_virtual_gidsubgroup_local_id.y + 1) % subgroup_size, ((GLF_merged2_0_1_16_1_1_17next_virtual_gidsubgroup_local_id.y + 1) % subgroup_size) ^ 0u)) - 0u, _GLF_IDENTITY((_GLF_IDENTITY((GLF_merged2_0_1_16_1_1_17next_virtual_gidsubgroup_local_id.y + 1) % subgroup_size, ((GLF_merged2_0_1_16_1_1_17next_virtual_gidsubgroup_local_id.y + 1) % subgroup_size) ^ 0u)) - 0u, ((_GLF_IDENTITY((GLF_merged2_0_1_16_1_1_17next_virtual_gidsubgroup_local_id.y + 1) % subgroup_size, ((GLF_merged2_0_1_16_1_1_17next_virtual_gidsubgroup_local_id.y + 1) % subgroup_size) ^ 0u)) - 0u) | (_GLF_IDENTITY((_GLF_IDENTITY((GLF_merged2_0_1_16_1_1_17next_virtual_gidsubgroup_local_id.y + 1) % subgroup_size, ((GLF_merged2_0_1_16_1_1_17next_virtual_gidsubgroup_local_id.y + 1) % subgroup_size) ^ 0u)) - 0u, uint(uint((_GLF_IDENTITY((GLF_merged2_0_1_16_1_1_17next_virtual_gidsubgroup_local_id.y + 1) % subgroup_size, ((GLF_merged2_0_1_16_1_1_17next_virtual_gidsubgroup_local_id.y + 1) % subgroup_size) ^ 0u)) - 0u)))))))), min((GLF_merged2_0_1_16_1_1_17next_virtual_gidsubgroup_local_id.y + 1) % subgroup_size, (GLF_merged2_0_1_16_1_1_17next_virtual_gidsubgroup_local_id.y + 1) % subgroup_size)), _GLF_IDENTITY((GLF_merged2_0_1_16_1_1_17next_virtual_gidsubgroup_local_id.y + 1), 0u + (_GLF_IDENTITY((GLF_merged2_0_1_16_1_1_17next_virtual_gidsubgroup_local_id.y + 1), max((GLF_merged2_0_1_16_1_1_17next_virtual_gidsubgroup_local_id.y + 1), (GLF_merged2_0_1_16_1_1_17next_virtual_gidsubgroup_local_id.y + 1))))) % subgroup_size)), (GLF_merged2_0_1_16_1_1_17next_virtual_gidsubgroup_local_id.y + 1) % _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, min(subgroup_size, _GLF_IDENTITY(subgroup_size, max(subgroup_size, subgroup_size)))), min(_GLF_IDENTITY(subgroup_size, max(subgroup_size, subgroup_size)), subgroup_size)))), min(_GLF_IDENTITY((_GLF_IDENTITY(GLF_merged2_0_1_16_1_1_17next_virtual_gidsubgroup_local_id.y, (_GLF_IDENTITY(GLF_merged2_0_1_16_1_1_17next_virtual_gidsubgroup_local_id.y, ~ (~ (GLF_merged2_0_1_16_1_1_17next_virtual_gidsubgroup_local_id.y)))) * 1u) + 1) % subgroup_size, max(_GLF_IDENTITY((GLF_merged2_0_1_16_1_1_17next_virtual_gidsubgroup_local_id.y + 1) % subgroup_size, min(_GLF_IDENTITY((GLF_merged2_0_1_16_1_1_17next_virtual_gidsubgroup_local_id.y + 1) % _GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, (subgroup_size) >> 0u)) >> 0u), min((GLF_merged2_0_1_16_1_1_17next_virtual_gidsubgroup_local_id.y + 1) % subgroup_size, (GLF_merged2_0_1_16_1_1_17next_virtual_gidsubgroup_local_id.y + 1) % subgroup_size)), (GLF_merged2_0_1_16_1_1_17next_virtual_gidsubgroup_local_id.y + 1) % subgroup_size)), (GLF_merged2_0_1_16_1_1_17next_virtual_gidsubgroup_local_id.y + 1) % _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, min(_GLF_IDENTITY(subgroup_size, max(subgroup_size, subgroup_size)), subgroup_size)), (true ? _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, min(_GLF_IDENTITY(subgroup_size, max(subgroup_size, subgroup_size)), subgroup_size)), min(_GLF_IDENTITY(subgroup_size, min(_GLF_IDENTITY(subgroup_size, max(subgroup_size, subgroup_size)), subgroup_size)), _GLF_IDENTITY(subgroup_size, min(_GLF_IDENTITY(subgroup_size, max(subgroup_size, subgroup_size)), subgroup_size)))) : _GLF_FUZZED(subgroup_id))))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(GLF_merged2_0_1_16_1_1_17next_virtual_gidsubgroup_local_id.y, (GLF_merged2_0_1_16_1_1_17next_virtual_gidsubgroup_local_id.y) * 1u) + 1) % subgroup_size, max(_GLF_IDENTITY((GLF_merged2_0_1_16_1_1_17next_virtual_gidsubgroup_local_id.y + 1) % subgroup_size, min(_GLF_IDENTITY((GLF_merged2_0_1_16_1_1_17next_virtual_gidsubgroup_local_id.y + 1) % subgroup_size, min(_GLF_IDENTITY((GLF_merged2_0_1_16_1_1_17next_virtual_gidsubgroup_local_id.y + 1), ((GLF_merged2_0_1_16_1_1_17next_virtual_gidsubgroup_local_id.y + 1)) + 0u) % subgroup_size, (GLF_merged2_0_1_16_1_1_17next_virtual_gidsubgroup_local_id.y + 1) % subgroup_size)), (_GLF_IDENTITY(GLF_merged2_0_1_16_1_1_17next_virtual_gidsubgroup_local_id.y, (false ? _GLF_FUZZED(packUnorm2x16(injectionSwitch)) : GLF_merged2_0_1_16_1_1_17next_virtual_gidsubgroup_local_id.y)) + 1) % subgroup_size)), (GLF_merged2_0_1_16_1_1_17next_virtual_gidsubgroup_local_id.y + 1) % _GLF_IDENTITY(subgroup_size, min(_GLF_IDENTITY(subgroup_size, max(subgroup_size, subgroup_size)), subgroup_size)))), ~ (~ (_GLF_IDENTITY((_GLF_IDENTITY(GLF_merged2_0_1_16_1_1_17next_virtual_gidsubgroup_local_id.y, (GLF_merged2_0_1_16_1_1_17next_virtual_gidsubgroup_local_id.y) * 1u) + 1) % subgroup_size, max(_GLF_IDENTITY((GLF_merged2_0_1_16_1_1_17next_virtual_gidsubgroup_local_id.y + 1) % subgroup_size, min(_GLF_IDENTITY(_GLF_IDENTITY((GLF_merged2_0_1_16_1_1_17next_virtual_gidsubgroup_local_id.y + 1), 0u | ((GLF_merged2_0_1_16_1_1_17next_virtual_gidsubgroup_local_id.y + 1))) % subgroup_size, min((GLF_merged2_0_1_16_1_1_17next_virtual_gidsubgroup_local_id.y + 1) % subgroup_size, (GLF_merged2_0_1_16_1_1_17next_virtual_gidsubgroup_local_id.y + 1) % subgroup_size)), (GLF_merged2_0_1_16_1_1_17next_virtual_gidsubgroup_local_id.y + 1) % subgroup_size)), (GLF_merged2_0_1_16_1_1_17next_virtual_gidsubgroup_local_id.y + 1) % _GLF_IDENTITY(subgroup_size, min(_GLF_IDENTITY(subgroup_size, max(subgroup_size, subgroup_size)), subgroup_size))))))), max(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(GLF_merged2_0_1_16_1_1_17next_virtual_gidsubgroup_local_id.y, (GLF_merged2_0_1_16_1_1_17next_virtual_gidsubgroup_local_id.y) * 1u) + 1) % subgroup_size, max(_GLF_IDENTITY((GLF_merged2_0_1_16_1_1_17next_virtual_gidsubgroup_local_id.y + 1) % subgroup_size, min(_GLF_IDENTITY((GLF_merged2_0_1_16_1_1_17next_virtual_gidsubgroup_local_id.y + 1) % subgroup_size, min(_GLF_IDENTITY((GLF_merged2_0_1_16_1_1_17next_virtual_gidsubgroup_local_id.y + 1), ((GLF_merged2_0_1_16_1_1_17next_virtual_gidsubgroup_local_id.y + 1)) + 0u) % subgroup_size, (GLF_merged2_0_1_16_1_1_17next_virtual_gidsubgroup_local_id.y + 1) % subgroup_size)), (_GLF_IDENTITY(GLF_merged2_0_1_16_1_1_17next_virtual_gidsubgroup_local_id.y, (false ? _GLF_FUZZED(packUnorm2x16(injectionSwitch)) : GLF_merged2_0_1_16_1_1_17next_virtual_gidsubgroup_local_id.y)) + 1) % subgroup_size)), (GLF_merged2_0_1_16_1_1_17next_virtual_gidsubgroup_local_id.y + 1) % _GLF_IDENTITY(subgroup_size, min(_GLF_IDENTITY(subgroup_size, max(subgroup_size, subgroup_size)), subgroup_size)))), ~ (~ (_GLF_IDENTITY((_GLF_IDENTITY(GLF_merged2_0_1_16_1_1_17next_virtual_gidsubgroup_local_id.y, (GLF_merged2_0_1_16_1_1_17next_virtual_gidsubgroup_local_id.y) * 1u) + 1) % subgroup_size, max(_GLF_IDENTITY((GLF_merged2_0_1_16_1_1_17next_virtual_gidsubgroup_local_id.y + 1) % subgroup_size, min(_GLF_IDENTITY(_GLF_IDENTITY((GLF_merged2_0_1_16_1_1_17next_virtual_gidsubgroup_local_id.y + 1), 0u | ((GLF_merged2_0_1_16_1_1_17next_virtual_gidsubgroup_local_id.y + 1))) % subgroup_size, min((GLF_merged2_0_1_16_1_1_17next_virtual_gidsubgroup_local_id.y + 1) % subgroup_size, (GLF_merged2_0_1_16_1_1_17next_virtual_gidsubgroup_local_id.y + 1) % subgroup_size)), (GLF_merged2_0_1_16_1_1_17next_virtual_gidsubgroup_local_id.y + 1) % subgroup_size)), (GLF_merged2_0_1_16_1_1_17next_virtual_gidsubgroup_local_id.y + 1) % _GLF_IDENTITY(subgroup_size, min(_GLF_IDENTITY(subgroup_size, max(subgroup_size, subgroup_size)), subgroup_size))))))), _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(GLF_merged2_0_1_16_1_1_17next_virtual_gidsubgroup_local_id.y, (GLF_merged2_0_1_16_1_1_17next_virtual_gidsubgroup_local_id.y) * 1u) + 1) % subgroup_size, max(_GLF_IDENTITY((GLF_merged2_0_1_16_1_1_17next_virtual_gidsubgroup_local_id.y + 1) % subgroup_size, min(_GLF_IDENTITY((GLF_merged2_0_1_16_1_1_17next_virtual_gidsubgroup_local_id.y + 1) % subgroup_size, min(_GLF_IDENTITY((GLF_merged2_0_1_16_1_1_17next_virtual_gidsubgroup_local_id.y + 1), ((GLF_merged2_0_1_16_1_1_17next_virtual_gidsubgroup_local_id.y + 1)) + 0u) % subgroup_size, (GLF_merged2_0_1_16_1_1_17next_virtual_gidsubgroup_local_id.y + 1) % subgroup_size)), (_GLF_IDENTITY(GLF_merged2_0_1_16_1_1_17next_virtual_gidsubgroup_local_id.y, (false ? _GLF_FUZZED(packUnorm2x16(injectionSwitch)) : GLF_merged2_0_1_16_1_1_17next_virtual_gidsubgroup_local_id.y)) + 1) % subgroup_size)), (GLF_merged2_0_1_16_1_1_17next_virtual_gidsubgroup_local_id.y + 1) % _GLF_IDENTITY(subgroup_size, min(_GLF_IDENTITY(subgroup_size, max(subgroup_size, subgroup_size)), subgroup_size)))), ~ (~ (_GLF_IDENTITY((_GLF_IDENTITY(GLF_merged2_0_1_16_1_1_17next_virtual_gidsubgroup_local_id.y, (GLF_merged2_0_1_16_1_1_17next_virtual_gidsubgroup_local_id.y) * 1u) + 1) % subgroup_size, max(_GLF_IDENTITY((GLF_merged2_0_1_16_1_1_17next_virtual_gidsubgroup_local_id.y + 1) % subgroup_size, min(_GLF_IDENTITY(_GLF_IDENTITY((GLF_merged2_0_1_16_1_1_17next_virtual_gidsubgroup_local_id.y + 1), 0u | ((GLF_merged2_0_1_16_1_1_17next_virtual_gidsubgroup_local_id.y + 1))) % subgroup_size, min((GLF_merged2_0_1_16_1_1_17next_virtual_gidsubgroup_local_id.y + 1) % subgroup_size, (GLF_merged2_0_1_16_1_1_17next_virtual_gidsubgroup_local_id.y + 1) % subgroup_size)), (GLF_merged2_0_1_16_1_1_17next_virtual_gidsubgroup_local_id.y + 1) % subgroup_size)), (GLF_merged2_0_1_16_1_1_17next_virtual_gidsubgroup_local_id.y + 1) % _GLF_IDENTITY(subgroup_size, min(_GLF_IDENTITY(subgroup_size, max(subgroup_size, subgroup_size)), subgroup_size))))))))))));
 if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))
        return;
       barrier();
      }
     barrier();
    }
   return;
  }
 if(_GLF_DEAD(false))
  barrier();
 GLF_merged2_0_1_16_1_1_17next_virtual_gidsubgroup_local_id.x = _GLF_IDENTITY(next_virtual_gid, uint(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (next_virtual_gid));
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * exp(vec2(0.0, 0.0))).x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * sqrt(vec2(1.0, 1.0))).y))))
  {
   do
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       barrier();
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(mat4(injectionSwitch, 0.0, tan(0.0), 0.0, exp(0.0), 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, 1.0)), dot(vec2(0.0, 1.0), vec2(0.0, 1.0))), 0.0, 0.0))).y))))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         barrier();
        }
      }
    }
  }
 uint read = 0;
 if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))) && true))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, vec2(mat3(injectionSwitch, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0))), injectionSwitch)), (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-9.2), _GLF_FUZZED(-839.341)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true)))) * exp(vec2(0.0, 0.0))) : _GLF_FUZZED(smoothstep(6.5, -64.34, vec2(-9.2, -2910.2963))))).x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(false))
        return;
      }
     else
      {
       barrier();
       if(_GLF_DEAD(false))
        return;
      }
    }
   barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) && true))
    return;
  }
 if(_GLF_DEAD(false))
  return;
 GLF_merged3_0_1_4_1_1_14_2_1_12readworkgroup_baseworkgroup_id.x = read;
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, true && (false)))))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     barrier();
    }
   barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       barrier();
      }
     else
      {
      }
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(1, (1) * _GLF_IDENTITY(((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(4, max(4, 4))), int(4))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(4), (int(4)) ^ 0), int(4))), max(_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(4, max(4, 4))), int(4))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(4), (int(4)) ^ 0), int(4))), clamp(((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(4, max(4, 4))), int(4))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(4), (int(4)) ^ 0), int(4))), ((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(4, max(4, 4))), int(4))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(4), (int(4)) ^ 0), int(4))), ((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(4, max(4, 4))), int(4))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(4), (int(4)) ^ 0), int(4))))), _GLF_IDENTITY(((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(4, max(4, 4))), int(4))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(4), (int(4)) ^ 0), int(4))), ~ (~ (((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(4, max(4, 4))), int(4))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(4), (int(4)) ^ 0), int(4)))))))))), ~ (~ (_GLF_IDENTITY(int(1), (int(1)) | 0)))), max(_GLF_IDENTITY(int(1), ~ (~ (_GLF_IDENTITY(int(1), (_GLF_IDENTITY(int(1), clamp(int(1), int(1), int(1)))) | 0)))), _GLF_IDENTITY(int(1), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(int(1), (int(1)) | 0)), 0 | (~ (_GLF_IDENTITY(int(1), (int(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, min(1, 1))) / 1))) | 0)))))))), int(1))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
  {
   atomicStore(buf[GLF_merged2_0_1_16_1_1_17next_virtual_gidsubgroup_local_id.x], uint(_GLF_IDENTITY(1, (1) | (1))), 4, 64, 4);
   if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_GLF_DEAD(false), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec3(bvec4(bvec3(_GLF_DEAD(false), _GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false)))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true)))), true && (bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false), false, _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / exp(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(3.8)), bool(false)))))))), bvec3(bvec4(bvec3(_GLF_DEAD(false), _GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bvec4(false, true, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_TRUE(_GLF_IDENTITY(true, (true) || false), (injectionSwitch.x < injectionSwitch.y))) && true)), true))))))))
    barrier();
   if(_GLF_DEAD(false))
    continue;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      continue;
     break;
    }
   if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      continue;
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-77.98)), float(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x))), bool(true))) > injectionSwitch.y), (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-77.98)), float(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), min(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x))))), bool(true))) > injectionSwitch.y), ((_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-77.98)), float(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), min(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x))))), bool(true))) > injectionSwitch.y)) && true), bool(bvec3(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-77.98)), float(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), max(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x))))) - 0.0), _GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x))))), bool(true))) > injectionSwitch.y), bool(bool(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-77.98)), float(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), max(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x))))) - 0.0), _GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x))))), bool(true))) > injectionSwitch.y), ((_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-77.98)), float(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), max(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x))))) - 0.0), _GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x))))), bool(true))) > injectionSwitch.y)) && true)))), false, true)))) && true))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y))))
        {
         if(_GLF_DEAD(false))
          break;
         barrier();
        }
       barrier();
      }
     barrier();
    }
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], float(mat4(_GLF_IDENTITY(injectionSwitch[1], (false ? _GLF_FUZZED(-5.8) : injectionSwitch[1])), 1.0, sqrt(0.0), 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, abs(0.0), 0.0))))).x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))) * 1.0))), true && _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0)), max(max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0)), _GLF_IDENTITY(max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0)), 1.0 * (max(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0), _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0)))))))), ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0)), max(max(injectionSwitch.y, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0), (_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0)) / exp(0.0))), max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0))))))) || false))))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), true && (! (false))))))), (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  return;
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec2(bvec2(bvec2(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), bvec2(bvec4(_GLF_IDENTITY(bvec2(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec2(bvec2(bvec2(true, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (! (injectionSwitch.x < injectionSwitch.y))))))))))), true, false))))), (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y))))))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, bool(bool(false))), (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)).x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, ! (! (false))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)))))
      return;
    }
   else
    {
     if((_GLF_IDENTITY(GLF_merged2_0_1_16_1_1_17next_virtual_gidsubgroup_local_id.y % _GLF_IDENTITY(2, max(_GLF_IDENTITY(2, ~ (_GLF_IDENTITY(~ _GLF_IDENTITY(_GLF_IDENTITY((2), ~ (~ ((2)))), _GLF_IDENTITY((true ? (2) : _GLF_FUZZED(57151)), clamp((true ? (2) : _GLF_FUZZED(57151)), (true ? (2) : _GLF_FUZZED(57151)), _GLF_IDENTITY((true ? (2) : _GLF_FUZZED(57151)), ~ (_GLF_IDENTITY(~ ((true ? (2) : _GLF_FUZZED(57151))), (true ? ~ ((true ? (2) : _GLF_FUZZED(57151))) : _GLF_FUZZED(-50629)))))))), (~ (2)) | 0))), 2)), uint(_GLF_IDENTITY(uvec3(GLF_merged2_0_1_16_1_1_17next_virtual_gidsubgroup_local_id.y % _GLF_IDENTITY(2, max(_GLF_IDENTITY(2, ~ (_GLF_IDENTITY(~ (2), (~ (2)) | 0))), 2)), 1u, 1u), (_GLF_IDENTITY(uvec3(GLF_merged2_0_1_16_1_1_17next_virtual_gidsubgroup_local_id.y % _GLF_IDENTITY(2, max(_GLF_IDENTITY(2, ~ (_GLF_IDENTITY(~ (2), (~ (2)) | 0))), 2)), 1u, 1u), min(uvec3(GLF_merged2_0_1_16_1_1_17next_virtual_gidsubgroup_local_id.y % _GLF_IDENTITY(2, max(_GLF_IDENTITY(2, ~ (_GLF_IDENTITY(~ (2), (~ (2)) | 0))), 2)), 1u, 1u), uvec3(GLF_merged2_0_1_16_1_1_17next_virtual_gidsubgroup_local_id.y % _GLF_IDENTITY(2, max(_GLF_IDENTITY(2, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(2, clamp(2, 2, 2))), (~ (2)) | 0))), 2)), 1u, 1u)))) >> uvec3(0u, 0u, 0u))))) == 0)
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         else
          {
          }
        }
       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), ! (! (_GLF_WRAPPED_IF_TRUE(true)))))
        {
         for(int _injected_loop_counter = (0 ^ 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           do
            {
             if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), _GLF_IDENTITY(true, bool(bvec3(true, false, false))), _GLF_IDENTITY(true, (_GLF_IDENTITY(true, true && (true))) && true), true))))
              {
               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                {
                 return;
                }
               else
                {
                }
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
       else
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            return;
          }
         if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), bool(_GLF_IDENTITY(bool(_GLF_WRAPPED_IF_FALSE(false)), bool(bool(bool(_GLF_WRAPPED_IF_FALSE(false))))))))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            return;
           return;
          }
        }
       GLF_merged3_0_1_4_1_1_14_2_1_12readworkgroup_baseworkgroup_id.x = atomicLoad(buf[virtual_gid], 4, 64, 2);
       do
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
          }
        }
       while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), ! (! (_GLF_WRAPPED_LOOP(false)))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), ! (! (_GLF_WRAPPED_LOOP(false))))))) || false));
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))))))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         barrier();
        }
       do
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
         do
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              {
               do
                {
                 return;
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0) > injectionSwitch.y))));
       do
        {
         if(_GLF_DEAD(false))
          return;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        return;
       for(int _injected_loop_counter = (((_GLF_IDENTITY(1 ^ 0, (_GLF_IDENTITY(1 ^ 0, (1 ^ 0) >> 0)) >> 0)) << _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(3, ~ (_GLF_IDENTITY(~ (3), _GLF_IDENTITY(clamp(~ (3), ~ (3), ~ (3)), max(clamp(~ (3), ~ (3), ~ (3)), clamp(~ (3), ~ (3), ~ (3)))))))), int(3)), _GLF_IDENTITY((_GLF_IDENTITY(int(3), int(3))), ((_GLF_IDENTITY(int(3), int(3)))) ^ 0) / 1)) >> _GLF_IDENTITY(_GLF_IDENTITY(int(3), int(3)), min(_GLF_IDENTITY(int(3), int(3)), _GLF_IDENTITY(_GLF_IDENTITY(int(3), int(3)), clamp(_GLF_IDENTITY(int(3), int(3)), _GLF_IDENTITY(int(3), int(3)), _GLF_IDENTITY(int(3), int(3))))))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > (0 >> _GLF_IDENTITY(int(_GLF_IDENTITY(0, min(0, 0))), int(0))), true && (_injected_loop_counter > (0 >> _GLF_IDENTITY(int(0), int(0)))))); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          continue;
         do
          {
           _GLF_IDENTITY(GLF_merged3_0_1_4_1_1_14_2_1_12readworkgroup_baseworkgroup_id.x = atomicLoad(buf[virtual_gid], 4, 64, 2), ~ (~ (_GLF_IDENTITY(GLF_merged3_0_1_4_1_1_14_2_1_12readworkgroup_baseworkgroup_id.x = atomicLoad(buf[virtual_gid], 4, 64, 2), 0u ^ (GLF_merged3_0_1_4_1_1_14_2_1_12readworkgroup_baseworkgroup_id.x = atomicLoad(buf[virtual_gid], 4, 64, 2))))));
           if(_GLF_DEAD(false))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, true && (false)), true), _GLF_IDENTITY(bvec2(bvec3(bvec2(_GLF_IDENTITY(false, true && (false)), true), false)), bvec2(bvec2(bvec2(bvec3(bvec2(_GLF_IDENTITY(false, true && (false)), true), false))))))))));
        }
       if(_GLF_DEAD(false))
        return;
      }
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)), bool(bvec2(! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)), true)))))))
      return;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      return;
    }
  }
 else
  {
   for(int _injected_loop_counter = (1 ^ 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       barrier();
      }
     barrier();
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
  }
 subgroupBarrier();
 atomicStore(checker[virtual_gid], GLF_merged3_0_1_4_1_1_14_2_1_12readworkgroup_baseworkgroup_id.x, _GLF_IDENTITY(_GLF_IDENTITY(4, (true ? _GLF_IDENTITY(4, clamp(4, 4, 4)) : _GLF_FUZZED(-64298))), (4) ^ (-57355 & 0)), 64, 4);
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(8205.0500) : injectionSwitch.x)) > injectionSwitch.y)), ! (! _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)), (bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))) || false)), false || (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))))) && true)), ((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false, false, false))), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) || false)))))
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 >> _GLF_IDENTITY(int(3), int(3)))); _injected_loop_counter --)
      {
       barrier();
      }
    }
   return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, vec2(mat2(injectionSwitch, 0.0, 0.0))).x > injectionSwitch.y), ((_GLF_IDENTITY(injectionSwitch, vec2(mat2(injectionSwitch, 0.0, 0.0))).x > injectionSwitch.y)) || false))))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         return;
        }
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) < injectionSwitch.y))))
      {
       barrier();
      }
     else
      {
       if(_GLF_DEAD(false))
        return;
      }
    }
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) > _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y, injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) > _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y, injectionSwitch.y)), true && (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) > _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y, injectionSwitch.y))))), (! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) > _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y, injectionSwitch.y)), true && (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) > _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(injectionSwitch[0], injectionSwitch[1]), min(vec2(injectionSwitch[0], injectionSwitch[1]), _GLF_IDENTITY(vec2(injectionSwitch[0], injectionSwitch[1]), mix(vec2((vec2(injectionSwitch[0], injectionSwitch[1]))[0], _GLF_FUZZED(5376.2614)), vec2(_GLF_FUZZED(-4.7), (vec2(injectionSwitch[0], injectionSwitch[1]))[1]), bvec2(false, true)))))).y, injectionSwitch.y)))))) && true)))))))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, false)))))
  barrier();
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   do
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
        continue;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              break;
             continue;
            }
           barrier();
          }
        }
       return;
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        return;
      }
     else
      {
       if(_GLF_DEAD(false))
        return;
      }
     barrier();
    }
   return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)))).x > injectionSwitch.y))))
    return;
   return;
  }
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY((0 | _GLF_IDENTITY(1, min(1, 1))), (_GLF_IDENTITY((0 | _GLF_IDENTITY(1, min(1, 1))), ((0 | _GLF_IDENTITY(1, min(1, 1)))) >> 0)) | 0)); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec3(_GLF_IDENTITY(! (false), false || (! (false))), true, true))))), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x > _GLF_IDENTITY(injectionSwitch, mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch)).y, ! (! (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch)), mat2(1.0) * (_GLF_IDENTITY(injectionSwitch, mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch)))).y)))))))
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
          {
           return;
          }
        }
       if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false)))))
        {
         if(_GLF_DEAD(false))
          continue;
         barrier();
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
            {
             return;
            }
          }
         if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), ! (! (_GLF_WRAPPED_IF_TRUE(true))))) || false))
          {
           barrier();
          }
         else
          {
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), vec2(1.0, 1.0) * (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])))).y, ! (_GLF_IDENTITY(! (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), (true ? _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), min(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])))) : _GLF_FUZZED((injectionSwitch / vec2(-49.02, 5.9))))).y), false || (! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[_GLF_IDENTITY(1, clamp(1, 1, 1))])).y)))))))))
        {
         do
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), bool(bvec2(_GLF_WRAPPED_LOOP(false), true))));
         return;
         if(_GLF_DEAD(false))
          continue;
        }
      }
     else
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         barrier();
        }
      }
     if(_GLF_DEAD(false))
      break;
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x)))), (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x))))) * exp(0.0))) - 0.0), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x, min(injectionSwitch.x, injectionSwitch.x)), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x)))) > injectionSwitch.y, false || _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, mix(_GLF_IDENTITY(vec2(_GLF_IDENTITY((injectionSwitch), mat2(1.0) * ((injectionSwitch)))[0], (injectionSwitch)[1]), (vec2(_GLF_IDENTITY((injectionSwitch), mat2(1.0) * ((injectionSwitch)))[0], (injectionSwitch)[1])) / vec2(1.0, 1.0)), vec2(_GLF_FUZZED((_GLF_IDENTITY(6.6 - -92.23, max(6.6 - -92.23, 6.6 - -92.23)))), _GLF_FUZZED(-7173.2381)), bvec2(false, _GLF_IDENTITY(false, (false) && true))))) + vec2(0.0, 0.0)).x, injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch, vec2(mat3x2(injectionSwitch, _GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-392.176)), bool(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))))))), tan(_GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(reflect(5.5, -961.429))))), 0.0, 0.0))).x, injectionSwitch.x)))) > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), min((injectionSwitch) * mat2(_GLF_IDENTITY(1.0, max(1.0, 1.0))), (injectionSwitch) * mat2(_GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat2x3(1.0, 1.0, 0.0, exp(0.0), 1.0, 1.0)), mix(float(float(mat2x3(1.0, 1.0, 0.0, exp(0.0), 1.0, 1.0))), float(_GLF_FUZZED(752.065)), bool(false)))))))).y), _GLF_IDENTITY(bool(bvec3((_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED((_GLF_IDENTITY(6.6 - -92.23, max(6.6 - -92.23, 6.6 - -92.23)))), _GLF_FUZZED(-7173.2381)), bvec2(false, false)))) + vec2(0.0, 0.0)).x, injectionSwitch.x)), 1.0 * (_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_IDENTITY((injectionSwitch), clamp((injectionSwitch), (injectionSwitch), (injectionSwitch)))[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED((_GLF_IDENTITY(6.6 - -92.23, max(6.6 - -92.23, 6.6 - -92.23)))), _GLF_FUZZED(-7173.2381)), bvec2(false, false)))) + _GLF_IDENTITY(vec2(0.0, 0.0), (vec2(0.0, 0.0)) * mat2(_GLF_ONE(1.0, injectionSwitch.y)))).x, injectionSwitch.x)))), _GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch, vec2(mat3x2(injectionSwitch, _GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-392.176)), bool(_GLF_FALSE(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, (false) && true))), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))))))), tan(0.0), 0.0, 0.0))).x, injectionSwitch.x)))) > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch) * mat2(1.0), mat2(1.0) * ((injectionSwitch) * mat2(1.0))), min((injectionSwitch) * mat2(1.0), (injectionSwitch) * mat2(1.0)))).y), false, false)), bool(bvec3(bool(bvec3((_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED((_GLF_IDENTITY(6.6 - -92.23, max(6.6 - -92.23, 6.6 - -92.23)))), _GLF_FUZZED(-7173.2381)), bvec2(false, false)))) + vec2(0.0, 0.0)).x, injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch, vec2(mat3x2(injectionSwitch, _GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-392.176)), bool(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))))))), tan(0.0), 0.0, 0.0))).x, injectionSwitch.x)))) > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), min((injectionSwitch) * mat2(1.0), (injectionSwitch) * mat2(1.0)))).y), false, false)), _GLF_IDENTITY(false, (false) || false), true)))))))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         barrier();
        }
       if(_GLF_DEAD(false))
        return;
       return;
      }
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(-6.7))) > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       barrier();
      }
     return;
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + 0.0) > injectionSwitch.y))))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true))))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (injectionSwitch.x < injectionSwitch.y) || false), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (injectionSwitch.x < injectionSwitch.y) || false), true && (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (injectionSwitch.x < injectionSwitch.y) || false))))))))))
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false)))))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))) || false)))
        return;
      }
     if(_GLF_DEAD(false))
      return;
    }
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
  barrier();
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = (int(_GLF_ZERO(0.0, injectionSwitch.x)) & 48788); _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(_GLF_IDENTITY(1, (false ? _GLF_FUZZED(findLSB(-92350)) : 1)), min(1, 1))); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
    return;
   return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(injectionSwitch.x > injectionSwitch.y)))))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_IF_TRUE(true)), false || (_GLF_IDENTITY(! (_GLF_WRAPPED_IF_TRUE(true)), true && (! (_GLF_WRAPPED_IF_TRUE(true)))))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      return;
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 & 1)); _injected_loop_counter ++)
      {
       barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
        return;
      }
    }
   else
    {
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)))
    return;
   barrier();
  }
 if(_GLF_DEAD(false))
  return;
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END
BUFFER checker DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected_checker DATA_TYPE uint32 SIZE 8388096 FILL 1

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 
  BIND BUFFER checker AS storage DESCRIPTOR_SET 0 BINDING 2 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT checker EQ_BUFFER expected_checker
