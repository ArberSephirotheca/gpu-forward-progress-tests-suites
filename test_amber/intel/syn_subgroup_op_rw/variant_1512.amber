#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y))))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)))), injectionSwitch, injectionSwitch)).y), ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)))), injectionSwitch, injectionSwitch)).y)) || false))))
    return;
  }
 else
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     for(int _injected_loop_counter = (0 | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 & 1)); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        return;
      }
    }
   else
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true && (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x))) - _GLF_IDENTITY(dot(vec3(1.0, determinant(mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(62.80)), float(_GLF_IDENTITY(0.0, min(0.0, 0.0))), bool(true))), 0.0)), 0.0), vec3(0.0, _GLF_IDENTITY(1.0, 1.0 * (1.0)), exp(0.0))), dot(vec3(1.0, determinant(mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0)), 0.0), vec3(0.0, 1.0, exp(0.0))))) > injectionSwitch.y)), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true), _GLF_IDENTITY(bvec2(bvec2(bvec2(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (injectionSwitch.x > injectionSwitch.y)))), false || (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true))))) && true)))), _GLF_IDENTITY(_GLF_IDENTITY(true, (true) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), _GLF_IDENTITY(false, bool(bvec4(false, true, false, false))) || (_GLF_IDENTITY(true, (true) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))), _GLF_IDENTITY(bvec2(bvec2(bvec2(bvec2(bvec2(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, bool(_GLF_IDENTITY(bvec3(injectionSwitch.x < injectionSwitch.y, true, false), bvec3(bvec3(bvec3(injectionSwitch.x < injectionSwitch.y, true, false)))))))) ? injectionSwitch.x : _GLF_FUZZED(4.9))) > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(7.0), _GLF_FUZZED((58.15 / float(50853)))), vec2((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch)[1], clamp((injectionSwitch)[1], (injectionSwitch)[1], (injectionSwitch)[1]))), bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))).y)), false || (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))), false || ((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).x > injectionSwitch.y)))))), true))))), bvec2(bvec2(bvec2(bvec2(bvec2(_GLF_IDENTITY(bvec2(bvec2(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x < injectionSwitch.y, true, false), bvec3(bvec3(bvec3(injectionSwitch.x < injectionSwitch.y, true, false)))))))) ? injectionSwitch.x : _GLF_FUZZED(4.9))) > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(7.0), _GLF_FUZZED((58.15 / float(_GLF_IDENTITY(50853, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED((-70344 << -97902)) : 50853)))))), vec2((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch)[1], clamp((injectionSwitch)[1], (_GLF_IDENTITY(injectionSwitch, vec2(vec4(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), determinant(mat3(0.0, 1.0, 0.0, 0.0, 0.0, sqrt(0.0), 0.0, 0.0, 0.0)), 1.0))))[1], (injectionSwitch)[1]))), bvec2(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)))) < injectionSwitch.y)), true))).y)), false || (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(false, (false) || false) || ((injectionSwitch.x > injectionSwitch.y)))))), true)), bvec2(bvec4(bvec2(bvec2(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x < injectionSwitch.y, true, false), bvec3(bvec3(bvec3(injectionSwitch.x < injectionSwitch.y, true, false)))))))) ? injectionSwitch.x : _GLF_FUZZED(4.9))) > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(7.0), _GLF_FUZZED((58.15 / float(_GLF_IDENTITY(50853, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED((-70344 << -97902)) : 50853)))))), vec2((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch)[1], clamp((injectionSwitch)[1], (_GLF_IDENTITY(injectionSwitch, vec2(vec4(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), determinant(mat3(0.0, 1.0, 0.0, 0.0, 0.0, sqrt(0.0), 0.0, 0.0, 0.0)), 1.0))))[1], (injectionSwitch)[1]))), bvec2(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)))) < injectionSwitch.y)), true))).y)), false || (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(false, (false) || false) || ((injectionSwitch.x > injectionSwitch.y)))))), true)), false, true)))))))))))), ! (! (bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec2(bvec2(false, true)))))), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(-888.634, 7.3))))))) - vec2(0.0, 0.0)), max(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(-888.634, 7.3))))))) - vec2(0.0, 0.0)), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(-888.634, 7.3))))))) - vec2(0.0, 0.0)), mix(vec2((_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(-888.634, 7.3))))))) - vec2(0.0, 0.0)))[0], (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(-888.634, 7.3))))))) - vec2(0.0, 0.0)))[1]), vec2(_GLF_FUZZED(-42.71), _GLF_FUZZED(8387.4152)), bvec2(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))).y)))), false || (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - _GLF_ZERO(0.0, injectionSwitch.x)) > injectionSwitch.y)))), true), _GLF_IDENTITY(bvec2(bvec2(bvec2(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)))), false || (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(_GLF_IDENTITY(vec2(injectionSwitch), min(vec2(injectionSwitch), _GLF_IDENTITY(vec2(injectionSwitch), vec2(mat3x2(vec2(injectionSwitch), 0.0, 1.0, 0.0, 0.0)))))), vec2(mat3x4(_GLF_IDENTITY(vec2(_GLF_IDENTITY(vec2(injectionSwitch), min(vec2(injectionSwitch), _GLF_IDENTITY(vec2(injectionSwitch), vec2(mat3x2(vec2(injectionSwitch), 0.0, 1.0, 0.0, 0.0)))))), mat2(1.0) * (vec2(_GLF_IDENTITY(vec2(injectionSwitch), min(vec2(injectionSwitch), _GLF_IDENTITY(vec2(injectionSwitch), vec2(mat3x2(vec2(injectionSwitch), 0.0, 1.0, _GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, 0.0 + (0.0)), 0.0)), 0.0)))))))), 1.0, 1.0, sqrt(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, (true ? _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)) : _GLF_FUZZED(5.3))), injectionSwitch.y)))), 0.0, 0.0, 1.0, determinant(mat2(_GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(1.0, 0.0)), dot(vec2(0.0, 1.0), vec2(1.0, 0.0))), 0.0, 0.0, _GLF_IDENTITY(dot(vec2(1.0, _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(-3.6) : 0.0))), vec2(0.0, 1.0)), dot(vec2(1.0, 0.0), vec2(0.0, 1.0))))), 1.0, round(length(normalize(1.0))), 1.0)))).y)))), true))), bvec2(bvec2(bvec2(_GLF_IDENTITY(bvec2(bvec2(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, true, false, false)), false || (bool(bvec4(false, true, false, _GLF_IDENTITY(false, (false) || false)))))), (injectionSwitch.x > injectionSwitch.y)))), true)), bvec2(bvec4(_GLF_IDENTITY(bvec2(bvec2(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y))), _GLF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(true, bool(bvec4(true, false, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), false || (_GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(true, bool(bvec4(true, false, _GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, false || (true))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), (bool(bvec2(_GLF_IDENTITY(true, bool(bvec4(true, false, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) && true)))), (_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-60.55)), float(injectionSwitch.x), bool(true))), injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(-1543.0894) : injectionSwitch.x)))))) < _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * abs(vec2(1.0, 1.0))).y, clamp(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * abs(vec2(1.0, 1.0))).y, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * abs(vec2(1.0, 1.0))).y, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * abs(vec2(1.0, 1.0))).y, mix(float(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * abs(vec2(1.0, 1.0))).y), float(_GLF_FUZZED(-7.7)), bool(false)))))))), bvec2(bvec3(bvec2(_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(mat3x2(injectionSwitch.y, 1.0, 0.0, 0.0, abs(1.0), log(1.0))), max(float(mat3x2(injectionSwitch.y, 1.0, 0.0, 0.0, abs(1.0), log(1.0))), float(mat3x2(injectionSwitch.y, 1.0, 0.0, 0.0, abs(1.0), log(1.0)))))), injectionSwitch.y, injectionSwitch.y))), false || ((_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x > injectionSwitch.y))), _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(min(vec2(-72.24, -2.1), injectionSwitch)) : injectionSwitch)).y))), true)))))), false || (_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), (_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), true && (_GLF_IDENTITY(false, true && (false))))) || false)))), _GLF_IDENTITY(bool(bvec4(false, true, false, false)), false || _GLF_IDENTITY((bool(bvec4(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bool(false))), bool(bvec2(_GLF_IDENTITY(false, bool(bool(false))), true))), false)), (bool(bvec2(_GLF_IDENTITY(false, bool(bool(false))), false))) && true)), true, true, false)), bool(bvec4(bool(bvec4(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(false, bool(bool(false))), false)), (bool(bvec2(_GLF_IDENTITY(false, bool(bool(false))), false))) && true)), true, true, false)), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)))), true, false, false))), true && ((bool(bvec4(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(false, bool(bool(false))), false)), (bool(bvec2(_GLF_IDENTITY(false, bool(bool(false))), false))) && true)), true, true, false)), bool(bvec4(bool(bvec4(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(false, bool(bool(false))), false)), _GLF_IDENTITY((bool(bvec2(_GLF_IDENTITY(false, bool(bool(false))), false))) && true, true && ((bool(bvec2(_GLF_IDENTITY(false, bool(bool(false))), false))) && true)))), true, true, false)), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)))), true, false, false))))))), (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), (_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), true && (_GLF_IDENTITY(false, true && (false))))) || false)))), _GLF_IDENTITY(bool(bvec4(false, true, false, false)), false || _GLF_IDENTITY((bool(bvec4(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bool(false))), bool(bvec2(_GLF_IDENTITY(false, bool(bool(false))), true))), false)), (bool(bvec2(_GLF_IDENTITY(false, bool(bool(false))), false))) && true)), true, true, false)), bool(bvec4(bool(bvec4(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(false, bool(bool(false))), false)), (bool(bvec2(_GLF_IDENTITY(false, bool(bool(false))), false))) && true)), true, _GLF_IDENTITY(true, bool(bvec4(true, false, true, _GLF_IDENTITY(true, ! (! (true)))))), false)), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)))), true, false, false))), _GLF_IDENTITY(true && ((bool(bvec4(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(false, bool(bool(false))), false)), (bool(bvec2(_GLF_IDENTITY(false, bool(bool(false))), false))) && true)), true, true, false)), bool(bvec4(bool(bvec4(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(false, bool(bool(false))), false)), _GLF_IDENTITY((bool(bvec2(_GLF_IDENTITY(false, bool(bool(false))), false))) && true, true && ((bool(bvec2(_GLF_IDENTITY(false, bool(bool(false))), false))) && true)))), true, true, false)), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)))), true, false, false)))), (true && ((bool(bvec4(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(false, bool(bool(false))), false)), (bool(bvec2(_GLF_IDENTITY(false, bool(bool(false))), false))) && true)), true, true, false)), bool(bvec4(bool(bvec4(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(false, bool(bool(false))), false)), _GLF_IDENTITY((bool(bvec2(_GLF_IDENTITY(false, bool(bool(false))), false))) && true, true && (_GLF_IDENTITY((bool(bvec2(_GLF_IDENTITY(false, bool(bool(false))), false))) && true, (_GLF_IDENTITY((bool(bvec2(_GLF_IDENTITY(false, bool(bool(false))), false))) && true, false || ((bool(bvec2(_GLF_IDENTITY(false, bool(bool(false))), false))) && true))) || false))))), true, true, false)), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)))), true, false, false))))) && true)))), (injectionSwitch.x > injectionSwitch.y))))))), _GLF_IDENTITY(true, _GLF_IDENTITY(! (! (true)), true && (! (! (true))))))), _GLF_IDENTITY(bvec2(bvec4(_GLF_IDENTITY(bvec2(bvec2(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y))), _GLF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(true, bool(bvec4(true, false, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), false || (_GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(true, bool(bvec4(true, false, _GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, false || (true))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), (bool(bvec2(_GLF_IDENTITY(true, bool(bvec4(true, false, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) && true)))), (_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-60.55)), float(injectionSwitch.x), bool(true))), injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(-1543.0894) : injectionSwitch.x)))))) < _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * abs(vec2(1.0, 1.0))).y, clamp(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * abs(vec2(1.0, 1.0))).y, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * abs(vec2(1.0, 1.0))).y, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * abs(vec2(1.0, 1.0))).y, mix(float(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * abs(vec2(1.0, 1.0))).y), float(_GLF_FUZZED(-7.7)), bool(false)))))))), bvec2(bvec3(bvec2(_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(mat3x2(injectionSwitch.y, 1.0, 0.0, 0.0, abs(1.0), log(1.0))), max(float(mat3x2(injectionSwitch.y, 1.0, 0.0, 0.0, abs(1.0), log(1.0))), float(mat3x2(injectionSwitch.y, 1.0, 0.0, 0.0, abs(1.0), log(1.0)))))), injectionSwitch.y, injectionSwitch.y))), false || ((_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x > injectionSwitch.y))), _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(min(vec2(-72.24, -2.1), injectionSwitch)) : injectionSwitch)).y))), true)))))), false || (_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), (_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), true && (_GLF_IDENTITY(false, true && (false))))) || false)))), _GLF_IDENTITY(bool(bvec4(false, true, false, false)), false || _GLF_IDENTITY((bool(bvec4(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bool(false))), bool(bvec2(_GLF_IDENTITY(false, bool(bool(false))), true))), false)), (bool(bvec2(_GLF_IDENTITY(false, bool(bool(false))), false))) && true)), true, true, false)), bool(bvec4(bool(bvec4(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(false, bool(bool(false))), false)), (bool(bvec2(_GLF_IDENTITY(false, bool(bool(false))), false))) && true)), true, true, false)), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)))), true, false, false))), true && ((bool(bvec4(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(false, bool(bool(false))), false)), (bool(bvec2(_GLF_IDENTITY(false, bool(bool(false))), false))) && true)), true, true, false)), bool(bvec4(bool(bvec4(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(false, bool(bool(false))), false)), _GLF_IDENTITY((bool(bvec2(_GLF_IDENTITY(false, bool(bool(false))), false))) && true, true && ((bool(bvec2(_GLF_IDENTITY(false, bool(bool(false))), false))) && true)))), true, true, false)), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)))), true, false, false))))))), (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), (_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), true && (_GLF_IDENTITY(false, true && (false))))) || false)))), _GLF_IDENTITY(bool(bvec4(false, true, false, false)), false || _GLF_IDENTITY((bool(bvec4(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bool(false))), bool(bvec2(_GLF_IDENTITY(false, bool(bool(false))), true))), false)), (bool(bvec2(_GLF_IDENTITY(false, bool(bool(false))), false))) && true)), true, true, false)), bool(bvec4(bool(bvec4(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(false, bool(bool(false))), false)), (bool(bvec2(_GLF_IDENTITY(false, bool(bool(false))), false))) && true)), true, _GLF_IDENTITY(true, bool(bvec4(true, false, true, _GLF_IDENTITY(true, ! (! (true)))))), false)), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)))), true, false, false))), _GLF_IDENTITY(true && ((bool(bvec4(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(false, bool(bool(false))), false)), (bool(bvec2(_GLF_IDENTITY(false, bool(bool(false))), false))) && true)), true, true, false)), bool(bvec4(bool(bvec4(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(false, bool(bool(false))), false)), _GLF_IDENTITY((bool(bvec2(_GLF_IDENTITY(false, bool(bool(false))), false))) && true, true && ((bool(bvec2(_GLF_IDENTITY(false, bool(bool(false))), false))) && true)))), true, true, false)), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)))), true, false, false)))), (true && ((bool(bvec4(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(false, bool(bool(false))), false)), (bool(bvec2(_GLF_IDENTITY(false, bool(bool(false))), false))) && true)), true, true, false)), bool(bvec4(bool(bvec4(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(false, bool(bool(false))), false)), _GLF_IDENTITY((bool(bvec2(_GLF_IDENTITY(false, bool(bool(false))), false))) && true, true && (_GLF_IDENTITY((bool(bvec2(_GLF_IDENTITY(false, bool(bool(false))), false))) && true, (_GLF_IDENTITY((bool(bvec2(_GLF_IDENTITY(false, bool(bool(false))), false))) && true, false || ((bool(bvec2(_GLF_IDENTITY(false, bool(bool(false))), false))) && true))) || false))))), true, true, false)), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)))), true, false, false))))) && true)))), (injectionSwitch.x > injectionSwitch.y))))))), _GLF_IDENTITY(true, _GLF_IDENTITY(! (! (true)), true && (! (! (true))))))), bvec2(bvec2(bvec2(bvec2(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y))), _GLF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(true, bool(bvec4(true, false, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), false || (_GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(true, bool(bvec4(true, false, _GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, false || (true))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), (bool(bvec2(_GLF_IDENTITY(true, bool(bvec4(true, false, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) && true)))), (_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-60.55)), float(injectionSwitch.x), bool(true))), injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(-1543.0894) : injectionSwitch.x)))))) < _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * abs(vec2(1.0, 1.0))).y, clamp(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * abs(vec2(1.0, 1.0))).y, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * abs(vec2(1.0, 1.0))).y, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * abs(vec2(1.0, 1.0))).y, mix(float(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * abs(vec2(1.0, 1.0))).y), float(_GLF_FUZZED(-7.7)), bool(false)))))))), bvec2(bvec3(bvec2(_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(mat3x2(injectionSwitch.y, 1.0, 0.0, 0.0, abs(1.0), log(1.0))), max(float(mat3x2(injectionSwitch.y, 1.0, 0.0, 0.0, abs(1.0), log(1.0))), float(mat3x2(injectionSwitch.y, 1.0, 0.0, 0.0, abs(1.0), log(1.0)))))), injectionSwitch.y, injectionSwitch.y))), false || ((_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x > injectionSwitch.y))), _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(min(vec2(-72.24, -2.1), injectionSwitch)) : injectionSwitch)).y))), true)))))), false || (_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), (_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), true && (_GLF_IDENTITY(false, true && (false))))) || false)))), _GLF_IDENTITY(bool(bvec4(false, true, false, false)), false || _GLF_IDENTITY((bool(bvec4(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bool(false))), bool(bvec2(_GLF_IDENTITY(false, bool(bool(false))), true))), false)), (bool(bvec2(_GLF_IDENTITY(false, bool(bool(false))), false))) && true)), true, true, false)), bool(bvec4(bool(bvec4(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(false, bool(bool(false))), false)), (bool(bvec2(_GLF_IDENTITY(false, bool(bool(false))), false))) && true)), true, true, false)), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)))), true, false, false))), true && ((bool(bvec4(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(false, bool(bool(false))), false)), (bool(bvec2(_GLF_IDENTITY(false, bool(bool(false))), false))) && true)), true, true, false)), bool(bvec4(bool(bvec4(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(false, bool(bool(false))), false)), _GLF_IDENTITY((bool(bvec2(_GLF_IDENTITY(false, bool(bool(false))), false))) && true, true && ((bool(bvec2(_GLF_IDENTITY(false, bool(bool(false))), false))) && true)))), true, true, false)), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)))), true, false, false))))))), (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), (_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), true && (_GLF_IDENTITY(false, true && (false))))) || false)))), _GLF_IDENTITY(bool(bvec4(false, true, false, false)), false || _GLF_IDENTITY((bool(bvec4(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bool(false))), bool(bvec2(_GLF_IDENTITY(false, bool(bool(false))), true))), false)), (bool(bvec2(_GLF_IDENTITY(false, bool(bool(false))), false))) && true)), true, true, false)), bool(bvec4(bool(bvec4(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(false, bool(bool(false))), false)), (bool(bvec2(_GLF_IDENTITY(false, bool(bool(false))), false))) && true)), true, _GLF_IDENTITY(true, bool(bvec4(true, false, true, _GLF_IDENTITY(true, ! (! (true)))))), false)), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)))), true, false, false))), _GLF_IDENTITY(true && ((bool(bvec4(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(false, bool(bool(false))), false)), (bool(bvec2(_GLF_IDENTITY(false, bool(bool(false))), false))) && true)), true, true, false)), bool(bvec4(bool(bvec4(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(false, bool(bool(false))), false)), _GLF_IDENTITY((bool(bvec2(_GLF_IDENTITY(false, bool(bool(false))), false))) && true, true && ((bool(bvec2(_GLF_IDENTITY(false, bool(bool(false))), false))) && true)))), true, true, false)), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)))), true, false, false)))), (true && ((bool(bvec4(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(false, bool(bool(false))), false)), (bool(bvec2(_GLF_IDENTITY(false, bool(bool(false))), false))) && true)), true, true, false)), bool(bvec4(bool(bvec4(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(false, bool(bool(false))), false)), _GLF_IDENTITY((bool(bvec2(_GLF_IDENTITY(false, bool(bool(false))), false))) && true, true && (_GLF_IDENTITY((bool(bvec2(_GLF_IDENTITY(false, bool(bool(false))), false))) && true, (_GLF_IDENTITY((bool(bvec2(_GLF_IDENTITY(false, bool(bool(false))), false))) && true, false || ((bool(bvec2(_GLF_IDENTITY(false, bool(bool(false))), false))) && true))) || false))))), true, true, false)), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)))), true, false, false))))) && true)))), (injectionSwitch.x > injectionSwitch.y))))))), _GLF_IDENTITY(true, _GLF_IDENTITY(! (! (true)), true && (! (! (true)))))))))), true, true)), bvec2(bvec4(bvec2(bvec4(_GLF_IDENTITY(bvec2(bvec2(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y))), _GLF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(true, bool(bvec4(true, false, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), false || (_GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(true, bool(bvec4(true, false, _GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, false || (true))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), (bool(bvec2(_GLF_IDENTITY(true, bool(bvec4(true, false, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) && true)))), (_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-60.55)), float(injectionSwitch.x), bool(true))), injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(-1543.0894) : injectionSwitch.x)))))) < _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * abs(vec2(1.0, 1.0))).y, clamp(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * abs(vec2(1.0, 1.0))).y, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * abs(vec2(1.0, 1.0))).y, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * abs(vec2(1.0, 1.0))).y, mix(float(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * abs(vec2(1.0, 1.0))).y), float(_GLF_FUZZED(-7.7)), bool(false)))))))), bvec2(bvec3(bvec2(_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(mat3x2(injectionSwitch.y, 1.0, 0.0, 0.0, abs(1.0), log(1.0))), max(float(mat3x2(injectionSwitch.y, 1.0, 0.0, 0.0, abs(1.0), log(1.0))), float(mat3x2(injectionSwitch.y, 1.0, 0.0, 0.0, abs(1.0), log(1.0)))))), injectionSwitch.y, injectionSwitch.y))), false || ((_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x > injectionSwitch.y))), _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(min(vec2(-72.24, -2.1), injectionSwitch)) : injectionSwitch)).y))), true)))))), false || (_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), (_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), true && (_GLF_IDENTITY(false, true && (false))))) || false)))), _GLF_IDENTITY(bool(bvec4(false, true, false, false)), false || _GLF_IDENTITY((bool(bvec4(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bool(false))), bool(bvec2(_GLF_IDENTITY(false, bool(bool(false))), true))), false)), (bool(bvec2(_GLF_IDENTITY(false, bool(bool(false))), false))) && true)), true, true, false)), bool(bvec4(bool(bvec4(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(false, bool(bool(false))), false)), (bool(bvec2(_GLF_IDENTITY(false, bool(bool(false))), false))) && true)), true, true, false)), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)))), true, false, false))), true && ((bool(bvec4(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(false, bool(bool(false))), false)), (bool(bvec2(_GLF_IDENTITY(false, bool(bool(false))), false))) && true)), true, true, false)), bool(bvec4(bool(bvec4(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(false, bool(bool(false))), false)), _GLF_IDENTITY((bool(bvec2(_GLF_IDENTITY(false, bool(bool(false))), false))) && true, true && ((bool(bvec2(_GLF_IDENTITY(false, bool(bool(false))), false))) && true)))), true, true, false)), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)))), true, false, false))))))), (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), (_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), true && (_GLF_IDENTITY(false, true && (false))))) || false)))), _GLF_IDENTITY(bool(bvec4(false, true, false, false)), false || _GLF_IDENTITY((bool(bvec4(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bool(false))), bool(bvec2(_GLF_IDENTITY(false, bool(bool(false))), true))), false)), (bool(bvec2(_GLF_IDENTITY(false, bool(bool(false))), false))) && true)), true, true, false)), bool(bvec4(bool(bvec4(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(false, bool(bool(false))), false)), (bool(bvec2(_GLF_IDENTITY(false, bool(bool(false))), false))) && true)), true, _GLF_IDENTITY(true, bool(bvec4(true, false, true, _GLF_IDENTITY(true, ! (! (true)))))), false)), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)))), true, false, false))), _GLF_IDENTITY(true && ((bool(bvec4(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(false, bool(bool(false))), false)), (bool(bvec2(_GLF_IDENTITY(false, bool(bool(false))), false))) && true)), true, true, false)), bool(bvec4(bool(bvec4(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(false, bool(bool(false))), false)), _GLF_IDENTITY((bool(bvec2(_GLF_IDENTITY(false, bool(bool(false))), false))) && true, true && ((bool(bvec2(_GLF_IDENTITY(false, bool(bool(false))), false))) && true)))), true, true, false)), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)))), true, false, false)))), (true && ((bool(bvec4(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(false, bool(bool(false))), false)), (bool(bvec2(_GLF_IDENTITY(false, bool(bool(false))), false))) && true)), true, true, false)), bool(bvec4(bool(bvec4(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(false, bool(bool(false))), false)), _GLF_IDENTITY((bool(bvec2(_GLF_IDENTITY(false, bool(bool(false))), false))) && true, true && (_GLF_IDENTITY((bool(bvec2(_GLF_IDENTITY(false, bool(bool(false))), false))) && true, (_GLF_IDENTITY((bool(bvec2(_GLF_IDENTITY(false, bool(bool(false))), false))) && true, false || ((bool(bvec2(_GLF_IDENTITY(false, bool(bool(false))), false))) && true))) || false))))), true, true, false)), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)))), true, false, false))))) && true)))), (injectionSwitch.x > injectionSwitch.y))))))), _GLF_IDENTITY(true, _GLF_IDENTITY(! (! (true)), true && (! (! (true))))))), bvec2(bvec2(bvec2(bvec2(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y))), _GLF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(true, bool(bvec4(true, false, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), false || (_GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(true, bool(bvec4(true, false, _GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, false || (true))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), (bool(bvec2(_GLF_IDENTITY(true, bool(bvec4(true, false, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) && true)))), (_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-60.55)), float(injectionSwitch.x), bool(true))), injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(-1543.0894) : injectionSwitch.x)))))) < _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * abs(vec2(1.0, 1.0))).y, clamp(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * abs(vec2(1.0, 1.0))).y, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * abs(vec2(1.0, 1.0))).y, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * abs(vec2(1.0, 1.0))).y, mix(float(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * abs(vec2(1.0, 1.0))).y), float(_GLF_FUZZED(-7.7)), bool(false)))))))), bvec2(bvec3(bvec2(_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(mat3x2(injectionSwitch.y, 1.0, 0.0, 0.0, abs(1.0), log(1.0))), max(float(mat3x2(injectionSwitch.y, 1.0, 0.0, 0.0, abs(1.0), log(1.0))), float(mat3x2(injectionSwitch.y, 1.0, 0.0, 0.0, abs(1.0), log(1.0)))))), injectionSwitch.y, injectionSwitch.y))), false || ((_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x > injectionSwitch.y))), _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(min(vec2(-72.24, -2.1), injectionSwitch)) : injectionSwitch)).y))), true)))))), false || (_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), (_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), true && (_GLF_IDENTITY(false, true && (false))))) || false)))), _GLF_IDENTITY(bool(bvec4(false, true, false, false)), false || _GLF_IDENTITY((bool(bvec4(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bool(false))), bool(bvec2(_GLF_IDENTITY(false, bool(bool(false))), true))), false)), (bool(bvec2(_GLF_IDENTITY(false, bool(bool(false))), false))) && true)), true, true, false)), bool(bvec4(bool(bvec4(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(false, bool(bool(false))), false)), (bool(bvec2(_GLF_IDENTITY(false, bool(bool(false))), false))) && true)), true, true, false)), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)))), true, false, false))), true && ((bool(bvec4(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(false, bool(bool(false))), false)), (bool(bvec2(_GLF_IDENTITY(false, bool(bool(false))), false))) && true)), true, true, false)), bool(bvec4(bool(bvec4(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(false, bool(bool(false))), false)), _GLF_IDENTITY((bool(bvec2(_GLF_IDENTITY(false, bool(bool(false))), false))) && true, true && ((bool(bvec2(_GLF_IDENTITY(false, bool(bool(false))), false))) && true)))), true, true, false)), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)))), true, false, false))))))), (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), (_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), true && (_GLF_IDENTITY(false, true && (false))))) || false)))), _GLF_IDENTITY(bool(bvec4(false, true, false, false)), false || _GLF_IDENTITY((bool(bvec4(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bool(false))), bool(bvec2(_GLF_IDENTITY(false, bool(bool(false))), true))), false)), (bool(bvec2(_GLF_IDENTITY(false, bool(bool(false))), false))) && true)), true, true, false)), bool(bvec4(bool(bvec4(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(false, bool(bool(false))), false)), (bool(bvec2(_GLF_IDENTITY(false, bool(bool(false))), false))) && true)), true, _GLF_IDENTITY(true, bool(bvec4(true, false, true, _GLF_IDENTITY(true, ! (! (true)))))), false)), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)))), true, false, false))), _GLF_IDENTITY(true && ((bool(bvec4(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(false, bool(bool(false))), false)), (bool(bvec2(_GLF_IDENTITY(false, bool(bool(false))), false))) && true)), true, true, false)), bool(bvec4(bool(bvec4(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(false, bool(bool(false))), false)), _GLF_IDENTITY((bool(bvec2(_GLF_IDENTITY(false, bool(bool(false))), false))) && true, true && ((bool(bvec2(_GLF_IDENTITY(false, bool(bool(false))), false))) && true)))), true, true, false)), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)))), true, false, false)))), (true && ((bool(bvec4(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(false, bool(bool(false))), false)), (bool(bvec2(_GLF_IDENTITY(false, bool(bool(false))), false))) && true)), true, true, false)), bool(bvec4(bool(bvec4(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(false, bool(bool(false))), false)), _GLF_IDENTITY((bool(bvec2(_GLF_IDENTITY(false, bool(bool(false))), false))) && true, true && (_GLF_IDENTITY((bool(bvec2(_GLF_IDENTITY(false, bool(bool(false))), false))) && true, (_GLF_IDENTITY((bool(bvec2(_GLF_IDENTITY(false, bool(bool(false))), false))) && true, false || ((bool(bvec2(_GLF_IDENTITY(false, bool(bool(false))), false))) && true))) || false))))), true, true, false)), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)))), true, false, false))))) && true)))), (injectionSwitch.x > injectionSwitch.y))))))), _GLF_IDENTITY(true, _GLF_IDENTITY(! (! (true)), true && (! (! (true)))))))))), true, true)), false, false)))), true, false)))))))))))))))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            return;
           return;
          }
         do
          {
           return;
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(false))
          return;
        }
      }
     else
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y)))), bool(_GLF_IDENTITY(bvec3(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y)))), true, false), _GLF_IDENTITY(bvec3(bvec4(bvec3(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y)))), true, false), false)), bvec3(bvec4(bvec3(bvec4(bvec3(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y)))), true, false), false)), false))))))))
        return;
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec2(false, true))), (_GLF_IDENTITY(false, bool(bvec2(false, true)))) || false)))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          return;
        }
       return;
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(1.0, _GLF_IDENTITY(1.0, (1.0) - 0.0)) * (_GLF_IDENTITY(injectionSwitch, mat2(1.0) * _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0))), min((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0))), (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)))))))), vec2(_GLF_ONE(_GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, (1.0) / 1.0), 1.0)), 1.0, 1.0)), injectionSwitch.y), _GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, float(mat2x4(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0)), float(_GLF_FUZZED(float(186501u))), bool(false))), sin(_GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(length(vec4(-46.24, _GLF_IDENTITY(5411.0695, (_GLF_IDENTITY(5411.0695, max(5411.0695, 5411.0695))) - _GLF_IDENTITY(dot(vec4(1.0, 0.0, 0.0, 1.0), vec4(0.0, 1.0, 1.0, log(1.0))), dot(vec4(1.0, 0.0, 0.0, 1.0), vec4(0.0, 1.0, 1.0, log(1.0))))), -884.378, -646.541)))))), 1.0, _GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, max(0.0, 0.0))) / 1.0), 1.0, 0.0, 0.0, 1.0))))) * (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[_GLF_IDENTITY(1, clamp(1, 1, 1))])))))).x > injectionSwitch.y))))
    {
     for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(4), int(4))); _GLF_WRAPPED_LOOP(_injected_loop_counter < ((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), 1 * (int(5)))))); _GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) << 0))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
        continue;
       return;
      }
    }
  }
 uint subgroup_id = gl_SubgroupID;
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + 0.0), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + 0.0), (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY((injectionSwitch.x), max((injectionSwitch.x), (injectionSwitch.x))) + _GLF_IDENTITY(0.0, clamp(0.0, 0.0, _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)))))) / 1.0)) / 1.0) > injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     return;
     if(_GLF_DEAD(false))
      {
       do
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             return;
            }
           else
            {
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
       do
        {
         return;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec3(injectionSwitch.x > injectionSwitch.y, false, true)))))))
      return;
    }
   else
    {
    }
  }
 for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2))); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, (0) | (0))); _injected_loop_counter --)
  {
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      continue;
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))))
        {
         do
          {
           return;
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   do
    {
     return;
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = _GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize.x, 1u * (gl_WorkGroupSize.x)), uint(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uvec3(_GLF_IDENTITY(gl_WorkGroupSize, uvec3(gl_WorkGroupSize[0], gl_WorkGroupSize[1], gl_WorkGroupSize[2])).x, 0u, 1u), (uvec3(_GLF_IDENTITY(gl_WorkGroupSize, uvec3(gl_WorkGroupSize[0], gl_WorkGroupSize[1], gl_WorkGroupSize[2])).x, 0u, 1u)) >> uvec3(0u, 0u, 0u)), (uvec3(gl_WorkGroupSize.x, 0u, 1u)) << uvec3(_GLF_IDENTITY(0u, (0u) / 1u), 0u, 0u)), (uvec3(gl_WorkGroupSize.x, 0u, _GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, min(1u, 1u))) | (1u)))) * ((uvec3(1u, 1u, 1u) << _GLF_IDENTITY(uvec3(7u), uvec3(7u))) >> _GLF_IDENTITY(uvec3(7u), uvec3(7u))))));
 uint workgroup_id = _GLF_IDENTITY(gl_WorkGroupID, max(_GLF_IDENTITY(gl_WorkGroupID, min(gl_WorkGroupID, _GLF_IDENTITY(gl_WorkGroupID, uvec3(gl_WorkGroupID[0], gl_WorkGroupID[1], gl_WorkGroupID[2])))), _GLF_IDENTITY(gl_WorkGroupID, (false ? _GLF_FUZZED(uvec3(87205u, 175916u, 192128u)) : gl_WorkGroupID)))).x;
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0)), false || (_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0)), ! (! ((injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(false, true && (false)) ? _GLF_FUZZED(94.75) : injectionSwitch.y)), (injectionSwitch.y) - 0.0))))))))))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
        return;
      }
     else
      {
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
        return;
       for(int _injected_loop_counter = (1 | 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
        {
         return;
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         return;
        }
       else
        {
        }
      }
     return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 uint workgroup_base = workgroup_size * _GLF_IDENTITY(workgroup_id, clamp(workgroup_id, workgroup_id, workgroup_id));
 uint subgroup_base = _GLF_IDENTITY(subgroup_id * _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, 0u + (subgroup_size)), (_GLF_IDENTITY(subgroup_size, 0u + (subgroup_size))) | 0u), _GLF_IDENTITY(0u + (_GLF_IDENTITY(subgroup_id * _GLF_IDENTITY(subgroup_size, 0u + (subgroup_size)), (subgroup_id * _GLF_IDENTITY(subgroup_size, 0u + (subgroup_size))) | (subgroup_id * _GLF_IDENTITY(subgroup_size, 0u + (subgroup_size))))), ~ (~ (0u + (_GLF_IDENTITY(subgroup_id * _GLF_IDENTITY(subgroup_size, 0u + _GLF_IDENTITY((subgroup_size), (_GLF_IDENTITY((subgroup_size), ((subgroup_size)) >> 0u)) >> 0u)), (subgroup_id * _GLF_IDENTITY(subgroup_size, 0u + (subgroup_size))) | (subgroup_id * _GLF_IDENTITY(subgroup_size, 0u + (subgroup_size)))))))));
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y, _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(6.3)), bool(false)))) * 1.0), injectionSwitch.y))))) * determinant(mat2(1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0)))))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, false, false)))))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_DEAD(false))
    return;
   do
    {
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)), ! (! (_GLF_DEAD(_GLF_IDENTITY(false, (false) && true))))))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             return;
            }
          }
        }
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != 0, (_injected_loop_counter != 0) && _GLF_IDENTITY(true, true && (true)))); _injected_loop_counter --)
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 >> _GLF_IDENTITY(int(5), int(5)))); _injected_loop_counter --)
            {
             return;
            }
          }
         else
          {
          }
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) && true)));
  }
 else
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       do
        {
         return;
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, false || (false))));
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
        return;
       if(_GLF_DEAD(false))
        return;
      }
     do
      {
       do
        {
         if(_GLF_DEAD(false))
          break;
         if(_GLF_DEAD(false))
          return;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(mat4x3(injectionSwitch, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0)))) / vec2(1.0, 1.0))) + vec2(0.0, 0.0)).y), ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(mat4x3(injectionSwitch, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0)))) / vec2(1.0, 1.0))) + vec2(0.0, 0.0)).y)) && true)), ! _GLF_IDENTITY((! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bool(bvec4((! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false, false, true))))));
    }
   else
    {
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       return;
      }
     else
      {
      }
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
   for(int _injected_loop_counter = _GLF_IDENTITY(((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))), (_GLF_IDENTITY(((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))), (((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7)))) | (((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7)))))) / 1); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter > 0, bool(bvec3(_injected_loop_counter > 0, false, true))), bool(bvec4(_GLF_IDENTITY(_injected_loop_counter > 0, bool(bvec3(_injected_loop_counter > 0, false, true))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true)))); _injected_loop_counter --)
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > 0, true && (_GLF_IDENTITY(_injected_loop_counter > 0, bool(bvec2(_GLF_IDENTITY(_injected_loop_counter > 0, true && (_injected_loop_counter > 0)), true)))))); _injected_loop_counter --)
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, false, false)))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
           continue;
          }
        }
       else
        {
         do
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              return;
             return;
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))))));
        }
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))))))), (! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y)))))))) || false))))))
          return;
        }
      }
    }
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, false || (false))))
      {
      }
     else
      {
       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y, bool(bvec2(injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y, true)))), bool(_GLF_IDENTITY(bvec3((_GLF_IDENTITY(injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y, bool(bvec2(injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y, true)))), true, true), _GLF_IDENTITY(bvec3(bvec4(bvec3((_GLF_IDENTITY(injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y, bool(bvec2(injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y, true)))), true, true), false)), bvec3(bvec3(bvec3(bvec4(bvec3((_GLF_IDENTITY(injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y, bool(bvec2(injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y, true)))), true, true), false)))))))))), true && (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y, bool(bvec2(injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y, true)))), bool(_GLF_IDENTITY(bvec3((_GLF_IDENTITY(injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y, bool(bvec2(injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y, true)))), true, true), _GLF_IDENTITY(bvec3(bvec4(bvec3((_GLF_IDENTITY(injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y, bool(bvec2(injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y, true)))), true, true), false)), bvec3(bvec3(bvec3(bvec4(bvec3((_GLF_IDENTITY(injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y, bool(bvec2(injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y, true)))), true, true), false)))))))))))))
        {
         return;
        }
       else
        {
         if(_GLF_DEAD(false))
          return;
        }
      }
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || _GLF_IDENTITY(false, (false) || false))))
      return;
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
  }
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 & (63800 | (73630 + 72831)))); _injected_loop_counter --)
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, false)))))
      continue;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
        break;
       return;
      }
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       return;
      }
     else
      {
      }
    }
  }
 uint virtual_gid = workgroup_base + subgroup_base + subgroup_local_id;
 uint next_virtual_gid = workgroup_base + subgroup_base + ((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) >> (0u | 0u)), (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) >> (0u | 0u))) >> 0u) + 1) % subgroup_size);
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     do
      {
       return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           return;
          }
        }
       for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          break;
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(8233.3366), _GLF_FUZZED(6.1)), bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))).x < _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0), injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(7875.9310) : _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), (_GLF_IDENTITY((injectionSwitch) * mat2(1.0), ((injectionSwitch) * mat2(1.0)) * mat2(1.0))) / vec2(1.0, 1.0))).y))))))))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 << _GLF_IDENTITY(int(3), int(3)))); _injected_loop_counter --)
              {
               return;
               if(_GLF_DEAD(false))
                continue;
              }
            }
           else
            {
            }
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), injectionSwitch)).x < injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              continue;
             if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
              return;
            }
           else
            {
            }
           if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
            {
             if(_GLF_DEAD(false))
              continue;
             return;
            }
          }
         else
          {
           for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 >> _GLF_IDENTITY(int(1), int(1)))); _injected_loop_counter --)
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                return;
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                continue;
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 return;
                }
               else
                {
                }
              }
            }
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(4.2)), bool(false))) > injectionSwitch.y))))
          continue;
        }
      }
     else
      {
      }
    }
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  return;
 uint read = atomicLoad(buf[_GLF_IDENTITY(virtual_gid, (virtual_gid) >> _GLF_IDENTITY(0u, clamp(0u, 0u, 0u)))], 4, 64, 2);
 if((subgroup_local_id % 2) == 0)
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), (false ? _GLF_FUZZED(-234.260) : _GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), (_GLF_ONE(1.0, injectionSwitch.y)) / 1.0))))); _injected_loop_counter ++)
    {
     for(int _injected_loop_counter = _GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), (int(_GLF_ONE(1.0, injectionSwitch.y))) >> 0); _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bool(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            continue;
           subgroupAll(false);
          }
        }
       if(_GLF_DEAD(false))
        break;
      }
    }
   atomicStore(buf[_GLF_IDENTITY(next_virtual_gid, 0u ^ (next_virtual_gid))], _GLF_IDENTITY(uint(1), _GLF_IDENTITY(clamp(_GLF_IDENTITY(uint(1), max(uint(1), uint(_GLF_IDENTITY(1, int(ivec4(1, 0, 0, 0)))))), _GLF_IDENTITY(uint(1), min(_GLF_IDENTITY(uint(1), clamp(uint(1), uint(1), uint(1))), _GLF_IDENTITY(uint(1), (uint(1)) | (_GLF_IDENTITY(uint(1), 0u | (uint(1))))))), uint(1)), clamp(clamp(_GLF_IDENTITY(uint(1), max(uint(1), uint(1))), uint(1), uint(1)), _GLF_IDENTITY(clamp(_GLF_IDENTITY(uint(1), max(uint(1), _GLF_IDENTITY(uint(1), (_GLF_IDENTITY(uint(1), (uint(1)) << (0u << _GLF_IDENTITY(uint(1u), uint(1u))))) | (0u >> _GLF_IDENTITY(uint(8u), uint(8u)))))), uint(1), _GLF_IDENTITY(uint(1), _GLF_IDENTITY(clamp(uint(1), uint(1), uint(1)), min(clamp(uint(1), uint(1), uint(1)), clamp(uint(1), uint(1), uint(1)))))), (_GLF_IDENTITY(clamp(_GLF_IDENTITY(uint(1), max(_GLF_IDENTITY(uint(_GLF_IDENTITY(1, ~ (_GLF_IDENTITY(~ (1), (~ (1)) | (~ (1)))))), (uint(_GLF_IDENTITY(1, ~ (_GLF_IDENTITY(~ (1), (~ (1)) | (~ (1))))))) * 1u), uint(1))), uint(1), uint(1)), (true ? _GLF_IDENTITY(clamp(_GLF_IDENTITY(uint(_GLF_IDENTITY(1, _GLF_IDENTITY((1), max((1), _GLF_IDENTITY((1), min((1), _GLF_IDENTITY((1), ((1)) | 0))))) ^ (-14580 & 0))), max(uint(1), uint(1))), uint(1), uint(1)), (false ? _GLF_FUZZED(next_virtual_gid) : clamp(_GLF_IDENTITY(uint(_GLF_IDENTITY(1, (1) ^ (-14580 & 0))), max(uint(1), _GLF_IDENTITY(uint(1), (true ? uint(1) : _GLF_FUZZED(subgroup_local_id))))), uint(1), uint(1)))) : _GLF_IDENTITY(_GLF_FUZZED(workgroup_base), ~ (~ (_GLF_IDENTITY(_GLF_FUZZED(workgroup_base), min(_GLF_FUZZED(workgroup_base), _GLF_FUZZED(workgroup_base))))))))) | (_GLF_IDENTITY(clamp(_GLF_IDENTITY(_GLF_IDENTITY(uint(1), (uint(1)) | (uint(1))), max(uint(1), uint(1))), uint(_GLF_IDENTITY(1, max(_GLF_IDENTITY(_GLF_IDENTITY(1, int(ivec3(1, int(_GLF_ZERO(0.0, injectionSwitch.x)), 1))), min(1, 1)), _GLF_IDENTITY(1, (_GLF_IDENTITY(1, clamp(1, 1, 1))) + 0)))), uint(1)), _GLF_IDENTITY(clamp(clamp(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uint(1), max(uint(1), uint(1))), max(uint(_GLF_IDENTITY(1, _GLF_IDENTITY((1), ((1)) - 0) | 0)), uint(1))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(num_workgroup) : _GLF_IDENTITY(_GLF_IDENTITY(uint(1), max(uint(1), uint(1))), max(_GLF_IDENTITY(uint(_GLF_IDENTITY(1, (1) | 0)), clamp(uint(_GLF_IDENTITY(1, (1) | 0)), uint(_GLF_IDENTITY(1, (1) | 0)), uint(_GLF_IDENTITY(1, (1) | 0)))), uint(1))))), uint(1), uint(_GLF_IDENTITY(1, ~ (~ (1))))), clamp(_GLF_IDENTITY(uint(1), _GLF_IDENTITY(max(uint(1), uint(1)), (1u | 1u) * (max(uint(1), uint(1))))), uint(1), uint(1)), clamp(_GLF_IDENTITY(uint(1), max(uint(1), uint(1))), uint(1), uint(1))), (clamp(clamp(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uint(1), max(uint(1), uint(1))), max(uint(1), uint(1))), (true ? _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uint(1), max(uint(1), uint(1))), max(uint(1), uint(1))), (_GLF_IDENTITY(_GLF_IDENTITY(uint(1), max(uint(1), uint(1))), max(uint(1), uint(_GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(-11571))))))) | (_GLF_IDENTITY(_GLF_IDENTITY(uint(1), max(uint(1), uint(_GLF_IDENTITY(1, max(1, 1))))), max(uint(1), uint(1))))) : _GLF_FUZZED(uvec4(29430u, 104478u, 90017u, 187206u).s))), uint(1), uint(1)), clamp(_GLF_IDENTITY(_GLF_IDENTITY(uint(1), (uint(1)) | (uint(1))), max(uint(1), uint(1))), uint(1), _GLF_IDENTITY(uint(1), (uint(1)) / (1u ^ 0u))), clamp(_GLF_IDENTITY(uint(1), max(uint(1), uint(1))), uint(1), uint(1)))) | uint(_GLF_ZERO(0.0, injectionSwitch.x)))))), clamp(_GLF_IDENTITY(uint(1), max(uint(1), uint(1))), uint(1), uint(1))))), 4, 64, 4);
  }
 else
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, bool(bvec2(_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, bool(bool(injectionSwitch.x < injectionSwitch.y))), true)))))))
      {
       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), false || (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), false || (_GLF_WRAPPED_IF_TRUE(true))), (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), false || (_GLF_WRAPPED_IF_TRUE(true)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
        {
         subgroupAll(false);
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(false))
            return;
          }
         if(_GLF_DEAD(false))
          return;
        }
       else
        {
        }
      }
     else
      {
      }
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        return;
      }
     else
      {
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       return;
      }
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         return;
        }
       else
        {
        }
      }
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (true)))))
      {
       if(_GLF_DEAD(false))
        return;
      }
     else
      {
      }
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       do
        {
         return;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
   atomicStore(buf[next_virtual_gid], uint(1), 4, 64, _GLF_IDENTITY(_GLF_IDENTITY(4, _GLF_IDENTITY(_GLF_IDENTITY((4), ((4)) | (_GLF_IDENTITY((4), 1 * ((4))))), ((4)) | (_GLF_IDENTITY((4), ((4)) * 1))) << 0), max(_GLF_IDENTITY(_GLF_IDENTITY(4, _GLF_IDENTITY((4), ((4)) | (_GLF_IDENTITY((4), ((4)) * 1))) << 0), min(_GLF_IDENTITY(4, _GLF_IDENTITY((4), ((4)) | (_GLF_IDENTITY(_GLF_IDENTITY((4), ((4)) * 1), 0 | (_GLF_IDENTITY((4), ((4)) * 1))))) << 0), _GLF_IDENTITY(4, _GLF_IDENTITY(_GLF_IDENTITY((4), (false ? _GLF_FUZZED(-95813) : _GLF_IDENTITY((4), ((4)) << 0))), ((4)) | (_GLF_IDENTITY((4), ((4)) * 1))) << 0))), _GLF_IDENTITY(4, _GLF_IDENTITY((4), ((4)) | (_GLF_IDENTITY((4), ((4)) * 1))) << 0))));
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false || (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) && true)))))), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false || (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) && true)))))), false, true, true)), false || (bool(bvec4(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false || (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) && true)))))), false, true, true)))))))
  {
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (_GLF_IDENTITY(0 ^ 0, (_GLF_IDENTITY(0 ^ 0, clamp(0 ^ 0, 0 ^ 0, _GLF_IDENTITY(0 ^ 0, min(0 ^ 0, 0 ^ 0))))) - 0))); _injected_loop_counter --)
      {
       return;
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        return;
      }
     else
      {
      }
     return;
    }
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch))) + vec2(0.0, 0.0)), injectionSwitch, injectionSwitch)).x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true))), bool(bvec4(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-0.2)), float(injectionSwitch.y), bool(true))), (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-416.766, 7.0)) : injectionSwitch)).x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-0.2)), float(injectionSwitch.y), _GLF_IDENTITY(_GLF_IDENTITY(bool(true), (bool(true)) && true), _GLF_IDENTITY(false, (false) && true) || (bool(true)))))) || false))), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)) || false), _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(mat2x4(injectionSwitch.y, 0.0, 1.0, sin(0.0), sqrt(1.0), 0.0, 1.0, 0.0))))), false, false)))))
    {
     if(_GLF_DEAD(false))
      {
       do
        {
         return;
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (false)), ! (! (_GLF_IDENTITY((! (false)), false || ((! (false))))))))));
      }
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, clamp(_injected_loop_counter, _GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) - 0), min(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, (true ? _injected_loop_counter : _GLF_FUZZED(_injected_loop_counter))), (_injected_loop_counter) - 0), _GLF_IDENTITY(_injected_loop_counter, (_GLF_IDENTITY(_injected_loop_counter, _GLF_IDENTITY(int(ivec2(_injected_loop_counter, (0 << _GLF_IDENTITY(int(6), int(6))))), ~ (~ (int(ivec2(_injected_loop_counter, (0 << _GLF_IDENTITY(int(6), int(6)))))))))) - 0))), _injected_loop_counter)) != 1); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          break;
         if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY((true) || false, ((true) || false) && true))))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bvec4(injectionSwitch.x > injectionSwitch.y, true, false, true)), (bool(bvec4(injectionSwitch.x > injectionSwitch.y, true, false, true))) || false)))))), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(false || (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bvec4(injectionSwitch.x > injectionSwitch.y, true, false, true)), (bool(bvec4(injectionSwitch.x > injectionSwitch.y, true, false, true))) || false))), false || (_GLF_IDENTITY(false || (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bvec4(injectionSwitch.x > injectionSwitch.y, true, false, true)), (bool(bvec4(injectionSwitch.x > injectionSwitch.y, true, false, true))) || false))), bool(bvec4(false || (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bvec4(injectionSwitch.x > injectionSwitch.y, true, false, true)), (bool(bvec4(injectionSwitch.x > injectionSwitch.y, true, false, true))) || false))), true, true, true))))))))) || false)))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                return;
               continue;
              }
             for(int _injected_loop_counter = _GLF_IDENTITY(1, ~ (~ (_GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(_injected_loop_counter)))))); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 & 46470)); _injected_loop_counter --)
              {
               return;
              }
             if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(false, false || (false)) || (false))))
              break;
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 | 1)); _injected_loop_counter ++)
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     return;
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      return;
                    }
                   else
                    {
                    }
                  }
                }
              }
             if(_GLF_DEAD(false))
              break;
            }
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_DEAD(false))
            continue;
          }
         else
          {
          }
        }
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           return;
          }
        }
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, abs(vec2(0.0, 0.0)) + (injectionSwitch)).x > injectionSwitch.y))))
              return;
            }
           else
            {
             if(_GLF_DEAD(false))
              return;
             return;
             do
              {
               if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), bool(bvec4(! (_GLF_DEAD(false)), true, true, false))))))
                return;
              }
             while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bvec3(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)))));
            }
          }
        }
       if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), true, true, _GLF_IDENTITY(true, ! (! (true)))))))
        return;
      }
     else
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             do
              {
               return;
              }
             while(_GLF_WRAPPED_LOOP(false));
             if(_GLF_DEAD(false))
              return;
            }
          }
        }
       else
        {
        }
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
      return;
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(false))
        return;
      }
     else
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           return;
          }
         else
          {
          }
         if(_GLF_DEAD(false))
          return;
        }
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        return;
      }
    }
  }
 else
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
    }
  }
 do
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_IDENTITY(_GLF_FUZZED(vec2(-820.129, 50.82)), min(_GLF_FUZZED(vec2(-820.129, 50.82)), _GLF_IDENTITY(_GLF_FUZZED(vec2(-820.129, 50.82)), mix(vec2(_GLF_FUZZED(7902.4030), _GLF_FUZZED(-2.4)), vec2((_GLF_FUZZED(vec2(-820.129, 50.82)))[0], (_GLF_FUZZED(vec2(-820.129, 50.82)))[1]), bvec2(true, true))))))) : _GLF_FUZZED(vec2(586.436, 5.8))))) + vec2(0.0, 0.0)).y, (false ? _GLF_FUZZED(-1.7) : _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_IDENTITY(_GLF_FUZZED(vec2(-820.129, 50.82)), min(_GLF_FUZZED(vec2(-820.129, 50.82)), _GLF_IDENTITY(_GLF_FUZZED(vec2(-820.129, 50.82)), mix(vec2(_GLF_FUZZED(7902.4030), _GLF_FUZZED(-2.4)), vec2((_GLF_FUZZED(vec2(-820.129, 50.82)))[0], (_GLF_FUZZED(vec2(-820.129, 50.82)))[1]), bvec2(true, true))))))) : _GLF_FUZZED(vec2(586.436, 5.8))))) + vec2(0.0, 0.0)).y)))), _GLF_FALSE(_GLF_IDENTITY(false, (false) || false), (injectionSwitch.x > injectionSwitch.y)))))))
      return;
     return;
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
  }
 do
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      return;
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 do
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), ! (! (bool(bool(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))))))
      return;
    }
   if(_GLF_DEAD(false))
    break;
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 subgroupBarrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
  return;
 atomicStore(buf[virtual_gid], _GLF_IDENTITY(read, ~ (~ (read))), 4, 64, 4);
 if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), bool(bvec4(! (_GLF_DEAD(false)), true, true, false))))))
  return;
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END
BUFFER checker DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected_checker DATA_TYPE uint32 SIZE 8388096 FILL 0

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 
  BIND BUFFER checker AS storage DESCRIPTOR_SET 0 BINDING 2 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT checker EQ_BUFFER expected_checker
