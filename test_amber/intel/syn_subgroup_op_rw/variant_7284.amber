#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_11 {
 mat4 _f0;
 ivec3 _f1;
 mat2x4 _f2;
 uvec2 _f3;
 ivec2 _f4;
} ;

struct _GLF_struct_10 {
 float _f0;
 vec2 _f1;
 uint subgroup_id;
 vec2 _f2;
 mat3x2 _f3;
 float _f4;
 mat3x2 _f5;
 mat4 _f6;
} ;

struct _GLF_struct_12 {
 _GLF_struct_10 _f0;
 bool _f1;
 uvec2 _f2;
 _GLF_struct_11 _f3;
} ;

struct _GLF_struct_8 {
 mat4x2 _f0;
} ;

struct _GLF_struct_7 {
 ivec3 _f0;
 vec4 _f1;
 mat2x4 _f2;
 uvec3 _f3;
} ;

struct _GLF_struct_9 {
 _GLF_struct_7 _f0;
 _GLF_struct_8 _f1;
 ivec2 _f2;
 ivec3 _f3;
 mat4x2 _f4;
 vec3 _f5;
} ;

struct _GLF_struct_5 {
 mat4x2 _f0;
 mat4x3 _f1;
 ivec3 _f2;
 vec4 _f3;
} ;

struct _GLF_struct_4 {
 float _f0;
 uint _f1;
 uvec2 _f2;
 int _f3;
} ;

struct _GLF_struct_3 {
 vec3 _f0;
 ivec2 _f1;
 mat3 _f2;
 bool _f3;
 bool _f4;
} ;

struct _GLF_struct_2 {
 mat2 _f0;
 mat4 _f1;
 int _f2;
 mat2 _f3;
 bvec2 _f4;
} ;

struct _GLF_struct_6 {
 _GLF_struct_2 _f0;
 _GLF_struct_3 _f1;
 _GLF_struct_4 _f2;
 _GLF_struct_5 _f3;
 bvec4 _f4;
 vec3 _f5;
} ;

struct _GLF_struct_13 {
 bvec3 _f0;
 bvec3 _f1;
 _GLF_struct_6 _f2;
 _GLF_struct_9 _f3;
 _GLF_struct_12 _f4;
 bvec2 _f5;
} ;

struct _GLF_struct_1 {
 ivec2 _f0;
 uint subgroup_size;
 int _f1;
 bool _f2;
} ;

struct _GLF_struct_0 {
 uvec4 _f0;
 uint subgroup_local_id;
 mat2x4 _f1;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_GLF_FALSE(_GLF_IDENTITY(false, (false) || false), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / abs(1.0))) && true), bool(bvec4(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / abs(1.0))) && true), false, true, true))))), true, true), bvec3(bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), ! (! (bool(bool(false))))))) || false), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / abs(1.0))) && true))), ! (! (_GLF_FALSE(_GLF_IDENTITY(false, (false) || false), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y, injectionSwitch.y)), (_GLF_IDENTITY(injectionSwitch.y, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch.y : _GLF_FUZZED(-6.5)))) / abs(1.0))) && true)))))), true, true), bvec3(bvec3(bvec3(_GLF_FALSE(_GLF_IDENTITY(false, (false) || false), (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / abs(1.0))) && true))), true, true)))))))), (bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true))) && true))))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       barrier();
      }
    }
   else
    {
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
     barrier();
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))
      barrier();
     barrier();
    }
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)))), false || ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y))) || false))))))), false || (_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)))), false || ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y))) || false))))))), (_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)))), false || ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y))) || false)))))))) || false))), ! (! (_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).x, (_GLF_IDENTITY(true ? injectionSwitch.x : _GLF_FUZZED(-2.8), 0.0 + (_GLF_IDENTITY(true ? _GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(3.4)), bool(false))), _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0))) : _GLF_FUZZED(-2.8), (true ? _GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(3.4)), bool(false))), _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0))) : _GLF_FUZZED(-2.8)) - sin(0.0)))))) > injectionSwitch.y)))))), bool(bvec3(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(7115.7994)), float(injectionSwitch.x), bool(true))) > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(_GLF_IDENTITY(-537.165, min(-537.165, -537.165)))))).y, mix(float(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(-537.165)))).y), float(_GLF_FUZZED(3.4)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))), true, true))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(injectionSwitch.x > injectionSwitch.y, false)))))))
      barrier();
    }
   else
    {
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 _GLF_struct_13 _GLF_struct_replacement_13 = _GLF_struct_13(bvec3(_GLF_IDENTITY(true, (true) || _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true))))), bvec3(true), _GLF_struct_6(_GLF_struct_2(mat2(_GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-7518.3267)), bool(false)))))), mat4(1.0), _GLF_IDENTITY(1, _GLF_IDENTITY((1) | (_GLF_IDENTITY(_GLF_IDENTITY(1, (1) << 0), (_GLF_IDENTITY(1, (1) << 0)) >> 0)), (0 ^ 0) | (_GLF_IDENTITY((1) | (_GLF_IDENTITY(_GLF_IDENTITY(1, (1) << 0), (_GLF_IDENTITY(1, (1) << 0)) >> 0)), clamp((1) | (_GLF_IDENTITY(_GLF_IDENTITY(1, (1) << 0), (_GLF_IDENTITY(1, (1) << 0)) >> 0)), (1) | (_GLF_IDENTITY(_GLF_IDENTITY(1, (1) << 0), (_GLF_IDENTITY(1, (1) << 0)) >> 0)), (1) | (_GLF_IDENTITY(_GLF_IDENTITY(1, (1) << 0), (_GLF_IDENTITY(1, (1) << 0)) >> 0))))))), mat2(1.0), _GLF_IDENTITY(bvec2(true), bvec2(bvec2(bvec2(true))))), _GLF_struct_3(_GLF_IDENTITY(vec3(1.0), min(_GLF_IDENTITY(vec3(_GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-5.6))), (false ? _GLF_FUZZED(94.51) : 1.0))))), (false ? _GLF_FUZZED(vec3(771.503, 5924.6147, -1.8)) : vec3(_GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-5.6))), (false ? _GLF_FUZZED(94.51) : 1.0))))))), vec3(1.0))), ivec2(1), mat3(1.0), true, true), _GLF_struct_4(1.0, _GLF_IDENTITY(1u, (false ? _GLF_FUZZED(120880u) : 1u)), uvec2(1u), 1), _GLF_struct_5(mat4x2(1.0), mat4x3(1.0), ivec3(1), vec4(1.0)), bvec4(true), vec3(1.0)), _GLF_struct_9(_GLF_struct_7(_GLF_IDENTITY(_GLF_IDENTITY(ivec3(1), min(ivec3(1), ivec3(1))), ~ (~ _GLF_IDENTITY((ivec3(1)), _GLF_IDENTITY(ivec3(0, 0, _GLF_IDENTITY(0, 0 ^ (0))) | (_GLF_IDENTITY((ivec3(1)), (_GLF_IDENTITY((ivec3(1)), max((ivec3(1)), (ivec3(1))))) + ivec3(0, 0, 0))), (ivec3(1, 1, 1) ^ _GLF_IDENTITY(ivec3(1, 1, 1), (ivec3(1, 1, 1)) | ivec3(0, 0, 0))) ^ (ivec3(0, 0, _GLF_IDENTITY(0, 0 ^ (0))) | (_GLF_IDENTITY((ivec3(1)), (_GLF_IDENTITY((ivec3(1)), max((ivec3(1)), (ivec3(1))))) + ivec3(0, 0, 0)))))))), vec4(1.0), mat2x4(1.0), uvec3(1u)), _GLF_struct_8(mat4x2(1.0)), _GLF_IDENTITY(ivec2(1), (ivec2(1)) >> ivec2(0, 0)), ivec3(1), mat4x2(1.0), vec3(1.0)), _GLF_struct_12(_GLF_struct_10(1.0, vec2(_GLF_IDENTITY(1.0, _GLF_IDENTITY(clamp(_GLF_IDENTITY(1.0, (_GLF_FALSE(_GLF_IDENTITY(false, bool(bool(false))), (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-6.2) : _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(1.9)), float(1.0), bool(true))))), 1.0, 1.0), _GLF_IDENTITY(min(clamp(_GLF_IDENTITY(1.0, (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + 0.0))) > injectionSwitch.y)) ? _GLF_FUZZED(-6.2) : 1.0)), _GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat3x2(1.0, _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-6359.2186)), float(1.0), bool(true))), 0.0, 1.0, 1.0, 1.0)), mix(float(_GLF_FUZZED(29.17)), float(float(mat3x2(1.0, 1.0, _GLF_IDENTITY(0.0, _GLF_IDENTITY(float(_GLF_IDENTITY(mat4x3(0.0, 0.0, 0.0, determinant(mat3(0.0, 0.0, 0.0, sqrt(0.0), 0.0, 0.0, 1.0, 0.0, 0.0)), 1.0, 1.0, 0.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(0.0, 1.0, 1.0)), _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(0.0, 1.0, 1.0)), min(dot(vec3(1.0, 0.0, 0.0), vec3(0.0, 1.0, 1.0)), _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(0.0, 1.0, 1.0)), clamp(dot(vec3(1.0, 0.0, 0.0), vec3(0.0, 1.0, 1.0)), dot(vec3(1.0, 0.0, 0.0), vec3(0.0, 1.0, 1.0)), dot(vec3(1.0, 0.0, 0.0), vec3(0.0, 1.0, 1.0))))))), 1.0, 1.0, 0.0, 1.0), (true ? mat4x3(_GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(tanh(4838.6191)) : 0.0)), 0.0, 0.0, determinant(mat3(0.0, 0.0, 0.0, sqrt(0.0), 0.0, 0.0, 1.0, 0.0, 0.0)), 1.0, 1.0, 0.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(0.0, 1.0, 1.0)), _GLF_IDENTITY(dot(vec3(1.0, _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(99.63) : 0.0)), 0.0), vec3(0.0, 1.0, 1.0)), min(dot(vec3(1.0, 0.0, 0.0), vec3(0.0, 1.0, 1.0)), dot(vec3(1.0, 0.0, 0.0), vec3(0.0, 1.0, 1.0))))), 1.0, 1.0, 0.0, 1.0) : _GLF_FUZZED(mat4x3(-5070.3291, -9.0, -22.58, 9.9, 4.2, 3.5, 516.511, -3.3, 591.528, 2.8, 2608.5788, -51.50))))), min(float(_GLF_IDENTITY(mat4x3(0.0, 0.0, 0.0, determinant(mat3(0.0, 0.0, 0.0, sqrt(0.0), 0.0, 0.0, 1.0, 0.0, 0.0)), 1.0, 1.0, 0.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(0.0, 1.0, 1.0)), _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(0.0, 1.0, 1.0)), min(dot(vec3(1.0, 0.0, 0.0), vec3(0.0, 1.0, 1.0)), _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(0.0, 1.0, 1.0)), clamp(dot(vec3(1.0, 0.0, 0.0), vec3(0.0, 1.0, 1.0)), dot(vec3(1.0, 0.0, 0.0), vec3(0.0, 1.0, 1.0)), dot(vec3(1.0, 0.0, 0.0), vec3(0.0, 1.0, 1.0))))))), 1.0, 1.0, 0.0, 1.0), (true ? mat4x3(_GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(tanh(4838.6191)) : 0.0)), 0.0, 0.0, determinant(mat3(0.0, 0.0, 0.0, sqrt(0.0), 0.0, 0.0, 1.0, 0.0, 0.0)), 1.0, 1.0, 0.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(0.0, 1.0, 1.0)), _GLF_IDENTITY(dot(vec3(1.0, _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(99.63) : 0.0)), 0.0), vec3(0.0, 1.0, 1.0)), min(dot(vec3(1.0, 0.0, 0.0), vec3(0.0, 1.0, 1.0)), dot(vec3(1.0, 0.0, 0.0), vec3(0.0, 1.0, 1.0))))), 1.0, 1.0, 0.0, 1.0) : _GLF_FUZZED(mat4x3(-5070.3291, -9.0, -22.58, 9.9, 4.2, 3.5, 516.511, -3.3, 591.528, 2.8, 2608.5788, -51.50))))), float(_GLF_IDENTITY(mat4x3(0.0, 0.0, 0.0, determinant(mat3(0.0, 0.0, 0.0, sqrt(0.0), 0.0, 0.0, 1.0, 0.0, 0.0)), 1.0, 1.0, 0.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(0.0, 1.0, 1.0)), _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(0.0, 1.0, 1.0)), min(dot(vec3(1.0, 0.0, 0.0), vec3(0.0, 1.0, 1.0)), _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(0.0, 1.0, 1.0)), clamp(dot(vec3(1.0, 0.0, 0.0), vec3(0.0, 1.0, 1.0)), dot(vec3(1.0, 0.0, 0.0), vec3(0.0, 1.0, 1.0)), dot(vec3(1.0, 0.0, 0.0), vec3(0.0, 1.0, 1.0))))))), 1.0, 1.0, 0.0, 1.0), (true ? mat4x3(_GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(tanh(4838.6191)) : 0.0)), 0.0, 0.0, determinant(mat3(0.0, 0.0, 0.0, sqrt(0.0), 0.0, 0.0, 1.0, 0.0, 0.0)), 1.0, 1.0, 0.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(0.0, 1.0, 1.0)), _GLF_IDENTITY(dot(vec3(1.0, _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(99.63) : 0.0)), 0.0), vec3(0.0, 1.0, 1.0)), min(dot(vec3(1.0, 0.0, 0.0), vec3(0.0, 1.0, 1.0)), dot(vec3(1.0, 0.0, 0.0), vec3(0.0, 1.0, 1.0))))), 1.0, 1.0, 0.0, 1.0) : _GLF_FUZZED(mat4x3(-5070.3291, -9.0, -22.58, 9.9, 4.2, 3.5, 516.511, -3.3, 591.528, 2.8, 2608.5788, -51.50)))))))), 1.0, 1.0, 1.0))), bool(true)))), 1.0)), 1.0), clamp(_GLF_IDENTITY(1.0, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-6.2) : 1.0)), 1.0, 1.0)), (_GLF_IDENTITY(min(clamp(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, max(1.0, 1.0)), 1.0)), _GLF_IDENTITY(1.0, float(mat3(1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0))))), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))))) ? _GLF_FUZZED(-6.2) : 1.0)), max(_GLF_IDENTITY(_GLF_IDENTITY(1.0, max(1.0, _GLF_IDENTITY(1.0, float(mat3(1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0))))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-6.2) : 1.0)), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1.0, max(1.0, _GLF_IDENTITY(1.0, float(mat3(1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0))))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-6.2) : 1.0)), max(_GLF_IDENTITY(_GLF_IDENTITY(1.0, max(1.0, _GLF_IDENTITY(1.0, float(mat3(1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0))))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-6.2) : 1.0)), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1.0, max(1.0, _GLF_IDENTITY(1.0, float(mat3(1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0))))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-6.2) : 1.0)), min(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1.0, max(1.0, _GLF_IDENTITY(1.0, float(mat3(1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0))))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-6.2) : 1.0)), (_GLF_IDENTITY(_GLF_IDENTITY(1.0, max(1.0, _GLF_IDENTITY(_GLF_IDENTITY(1.0, float(mat3(1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0))), (true ? _GLF_IDENTITY(_GLF_IDENTITY(1.0, float(mat3(1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0))), float(mat4x2(_GLF_IDENTITY(1.0, float(mat3(1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0))), 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0, cos(0.0), 1.0))) : _GLF_FUZZED(2618.0303))))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(_GLF_IDENTITY(-6.2, float(mat3(-6.2, 1.0, 1.0, abs(1.0), 1.0, 1.0, 1.0, 0.0, 1.0)))) : 1.0))) - 0.0), _GLF_IDENTITY(_GLF_IDENTITY(1.0, max(1.0, _GLF_IDENTITY(1.0, float(mat3(1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0))))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-6.2) : 1.0)))))))), _GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat3x2(1.0, 1.0, 0.0, 1.0, 1.0, 1.0)), mix(float(_GLF_FUZZED(_GLF_IDENTITY(29.17, clamp(29.17, _GLF_IDENTITY(29.17, mix(float(_GLF_FUZZED(-2348.7920)), float(29.17), bool(true))), 29.17)))), float(float(mat3x2(1.0, 1.0, 0.0, 1.0, 1.0, 1.0))), bool(true)))), 1.0)), 1.0), clamp(_GLF_IDENTITY(1.0, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-6.2) : 1.0)), 1.0, 1.0)), (false ? _GLF_FUZZED(-2.0) : min(_GLF_IDENTITY(clamp(_GLF_IDENTITY(1.0, _GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-6.2) : 1.0), (true ? (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-6.2) : 1.0) : _GLF_FUZZED(-60.16)))), _GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat3x2(1.0, 1.0, 0.0, 1.0, 1.0, 1.0)), mix(float(_GLF_FUZZED(29.17)), float(float(mat3x2(1.0, 1.0, 0.0, 1.0, 1.0, 1.0))), bool(true)))), _GLF_IDENTITY(1.0, (1.0) / determinant(mat3(1.0, 0.0, 0.0, 0.0, abs(1.0), 0.0, 0.0, log(1.0), 1.0))))), 1.0), min(clamp(_GLF_IDENTITY(1.0, _GLF_IDENTITY((_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true))) ? _GLF_FUZZED(-6.2) : 1.0), (true ? (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-6.2) : 1.0) : _GLF_FUZZED(-60.16)))), _GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat3x2(1.0, 1.0, 0.0, 1.0, 1.0, _GLF_IDENTITY(1.0, clamp(1.0, _GLF_IDENTITY(1.0, max(1.0, 1.0)), 1.0)))), mix(float(_GLF_FUZZED(29.17)), float(float(mat3x2(1.0, 1.0, 0.0, 1.0, 1.0, 1.0))), bool(true)))), _GLF_IDENTITY(1.0, (1.0) / determinant(mat3(1.0, 0.0, 0.0, 0.0, abs(1.0), 0.0, 0.0, log(1.0), 1.0))))), 1.0), clamp(_GLF_IDENTITY(1.0, _GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-6.2) : 1.0), (true ? (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-6.2) : 1.0) : _GLF_FUZZED(-60.16)))), _GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat3x2(1.0, 1.0, 0.0, 1.0, 1.0, 1.0)), mix(float(_GLF_FUZZED(29.17)), float(float(mat3x2(1.0, 1.0, 0.0, 1.0, 1.0, 1.0))), bool(true)))), _GLF_IDENTITY(1.0, (1.0) / determinant(mat3(1.0, _GLF_IDENTITY(0.0, min(0.0, 0.0)), 0.0, 0.0, abs(1.0), 0.0, 0.0, log(1.0), 1.0))))), 1.0))), _GLF_IDENTITY(clamp(_GLF_IDENTITY(1.0, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-6.2) : 1.0)), 1.0, 1.0), float(mat3x2(clamp(_GLF_IDENTITY(1.0, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-6.2) : 1.0)), 1.0, 1.0), 1.0, 1.0, 0.0, abs(0.0), 0.0))))))) * 1.0)))), gl_SubgroupID, vec2(1.0), mat3x2(1.0), 1.0, mat3x2(_GLF_IDENTITY(1.0, exp(0.0) * (1.0))), mat4(1.0)), true, uvec2(1u), _GLF_struct_11(mat4(1.0), ivec3(1), mat2x4(1.0), _GLF_IDENTITY(uvec2(1u), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uvec2(1u), (uvec2(1u)) << uvec2(0u, 0u)), (true ? uvec2(1u) : _GLF_FUZZED(uvec2(179178u, _GLF_IDENTITY(80271u, (80271u) >> 0u))))), min(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uvec2(1u), (uvec2(1u)) << uvec2(0u, _GLF_IDENTITY(0u, clamp(_GLF_IDENTITY(0u, (0u) | 0u), 0u, _GLF_IDENTITY(0u, (0u) >> 0u))))), (true ? uvec2(1u) : _GLF_FUZZED(_GLF_IDENTITY(uvec2(179178u, 80271u), (uvec2(179178u, 80271u)) << uvec2(0u, 0u))))), uvec2(_GLF_IDENTITY(0u, clamp(0u, 0u, 0u)), 0u) + (_GLF_IDENTITY(_GLF_IDENTITY(uvec2(1u), (uvec2(_GLF_IDENTITY(1u, 1u * (1u)))) << uvec2(0u, 0u)), (true ? uvec2(1u) : _GLF_FUZZED(uvec2(179178u, 80271u)))))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uvec2(1u), (uvec2(1u)) << uvec2(0u, 0u)), (true ? uvec2(1u) : _GLF_FUZZED(_GLF_IDENTITY(uvec2(179178u, 80271u), (uvec2(179178u, 80271u)) - uvec2(0u, 0u))))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uvec2(1u), (uvec2(1u)) << uvec2(0u, 0u)), (true ? uvec2(1u) : _GLF_FUZZED(uvec2(179178u, 80271u)))), (_GLF_IDENTITY(_GLF_IDENTITY(uvec2(1u), (uvec2(1u)) << uvec2(0u, 0u)), (true ? uvec2(1u) : _GLF_FUZZED(uvec2(179178u, 80271u))))) | (_GLF_IDENTITY(_GLF_IDENTITY(uvec2(1u), _GLF_IDENTITY((uvec2(1u)), uvec2(0u, 0u) | ((uvec2(1u)))) << uvec2(0u, 0u)), (true ? uvec2(1u) : _GLF_FUZZED(uvec2(179178u, 80271u))))))) / uvec2(_GLF_IDENTITY(1u, (1u) >> 0u), 1u))))) / _GLF_IDENTITY(uvec2(1u, 1u), min(uvec2(1u, 1u), _GLF_IDENTITY(uvec2(1u, 1u), uvec2(0u, 0u) + (uvec2(1u, 1u)))))), ivec2(1))), bvec2(true));
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   else
    {
    }
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
    }
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 _GLF_struct_1 _GLF_struct_replacement_1 = _GLF_struct_1(_GLF_IDENTITY(ivec2(1), _GLF_IDENTITY((ivec2(1)), ivec2(_GLF_ZERO(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(7.5)), bool(false))), injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)) | ((ivec2(1)))) >> ivec2(0, _GLF_IDENTITY(0, (0) ^ _GLF_IDENTITY(0, (0) - 0)))), gl_SubgroupSize, 1, true);
 _GLF_struct_0 _GLF_struct_replacement_0 = _GLF_struct_0(_GLF_IDENTITY(uvec4(_GLF_IDENTITY(1u, ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (1u), (_GLF_IDENTITY(_GLF_IDENTITY(~ (1u), (~ (1u)) / ((1u << _GLF_IDENTITY(uint(7u), uint(7u))) >> _GLF_IDENTITY(uint(7u), uint(7u)))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(~ (1u), (~ (1u)) / ((1u << _GLF_IDENTITY(uint(7u), uint(7u))) >> _GLF_IDENTITY(uint(7u), uint(7u))))), (~ (_GLF_IDENTITY(~ (1u), (~ (1u)) / ((1u << _GLF_IDENTITY(_GLF_IDENTITY(uint(7u), max(uint(7u), uint(7u))), uint(7u))) >> _GLF_IDENTITY(uint(7u), _GLF_IDENTITY(uint(7u), (true ? uint(7u) : _GLF_FUZZED(packUnorm4x8(vec4(327.632, -4.0, 7.7, -21.16)))))))))) - 0u)))) | (~ (1u))), (~ (1u)) | (~ (1u)))))), (_GLF_IDENTITY(uvec4(_GLF_IDENTITY(1u, ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (1u), (_GLF_IDENTITY(~ (1u), (~ (1u)) / ((1u << _GLF_IDENTITY(uint(7u), uint(7u))) >> _GLF_IDENTITY(uint(7u), uint(7u))))) | (~ (_GLF_IDENTITY(1u, min(1u, 1u))))), (~ (1u)) | (~ _GLF_IDENTITY((1u), ((1u)) | ((1u)))))))), (_GLF_IDENTITY(uvec4(_GLF_IDENTITY(1u, ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (1u), (_GLF_IDENTITY(~ (1u), (~ (1u)) / ((1u << _GLF_IDENTITY(_GLF_IDENTITY(uint(7u), uint(7u)), min(_GLF_IDENTITY(_GLF_IDENTITY(uint(7u), max(uint(7u), _GLF_IDENTITY(uint(7u), (uint(7u)) - 0u))), uint(7u)), _GLF_IDENTITY(_GLF_IDENTITY(uint(7u), uint(7u)), uint(uint(_GLF_IDENTITY(uint(_GLF_IDENTITY(7u, (7u) << 0u)), uint(7u)))))))) >> _GLF_IDENTITY(uint(7u), uint(7u))))) | (~ (1u))), (~ (1u)) | (~ (1u)))))), (uvec4(_GLF_IDENTITY(1u, ~ _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(~ (1u), _GLF_IDENTITY((_GLF_IDENTITY(~ (1u), (~ (1u)) / ((1u << _GLF_IDENTITY(uint(7u), uint(7u))) >> _GLF_IDENTITY(uint(7u), uint(7u))))) | (~ (1u)), (0u << _GLF_IDENTITY(uint(1u), uint(1u))) | ((_GLF_IDENTITY(~ (1u), (~ (1u)) / ((1u << _GLF_IDENTITY(uint(7u), uint(7u))) >> _GLF_IDENTITY(uint(7u), uint(7u))))) | (~ (1u))))), (~ (1u)) | (~ (1u)))), (0u >> _GLF_IDENTITY(uint(8u), uint(8u))) | ((_GLF_IDENTITY(_GLF_IDENTITY(~ (1u), _GLF_IDENTITY((_GLF_IDENTITY(~ (1u), (~ (1u)) / ((1u << _GLF_IDENTITY(uint(7u), uint(7u))) >> _GLF_IDENTITY(uint(7u), uint(7u))))) | (~ (1u)), (0u << _GLF_IDENTITY(uint(1u), uint(1u))) | ((_GLF_IDENTITY(~ (1u), (~ (1u)) / (_GLF_IDENTITY((1u << _GLF_IDENTITY(uint(7u), uint(7u))), clamp(_GLF_IDENTITY((1u << _GLF_IDENTITY(uint(7u), uint(7u))), 0u ^ ((1u << _GLF_IDENTITY(uint(7u), uint(7u))))), (1u << _GLF_IDENTITY(uint(7u), uint(7u))), _GLF_IDENTITY((1u << _GLF_IDENTITY(uint(7u), uint(7u))), clamp((1u << _GLF_IDENTITY(uint(7u), uint(7u))), (1u << _GLF_IDENTITY(uint(7u), uint(7u))), (1u << _GLF_IDENTITY(uint(7u), uint(7u))))))) >> _GLF_IDENTITY(uint(7u), uint(7u))))) | (~ (1u))))), (~ (1u)) | (~ (1u))))))))) << uvec4(0u, 0u, 0u, 0u))) | (uvec4(170168u, 179377u, 82685u, 95911u) & uvec4(0u, 0u, 0u, 0u)))) ^ uvec4(0u, 0u, 0u, 0u)), gl_SubgroupInvocationID, mat2x4(_GLF_IDENTITY(_GLF_IDENTITY(1.0, min(1.0, 1.0)), (_GLF_IDENTITY(1.0, _GLF_IDENTITY(min(1.0, 1.0), min(min(1.0, 1.0), min(1.0, 1.0))))) * 1.0)));
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint num_workgroup = _GLF_IDENTITY(gl_NumWorkGroups.x, max(_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups.x, max(gl_NumWorkGroups.x, gl_NumWorkGroups.x)), (gl_NumWorkGroups.x) >> _GLF_IDENTITY(0u, _GLF_IDENTITY((0u), ((0u)) ^ 0u) | (_GLF_IDENTITY(0u, 0u + (0u))))), gl_NumWorkGroups.x));
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bool(bvec4(! (_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))))), _GLF_IDENTITY(false, ! (! (false))), true, false))))))
  barrier();
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)), injectionSwitch, _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)))).x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)), injectionSwitch, _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)))).x > injectionSwitch.y)))) && true))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 for(int _injected_loop_counter = 1; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0), bool(_GLF_IDENTITY(bvec2(_GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, (0) ^ 0)), false), bvec2(bvec2(bvec2(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) ^ int(_GLF_ZERO(0.0, injectionSwitch.x))) != 0), false)))))); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
  barrier();
 uint workgroup_base = _GLF_IDENTITY(workgroup_size * workgroup_id, uint(uvec3(_GLF_IDENTITY(workgroup_size, (workgroup_size) | 0u) * workgroup_id, 0u, 0u)));
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, false, false)))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       barrier();
      }
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 for(int _injected_loop_counter = _GLF_IDENTITY(1, _GLF_IDENTITY((_GLF_IDENTITY(1, 0 ^ (1))) >> 0, 1 * ((_GLF_IDENTITY(1, 0 ^ (1))) >> 0))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != 0, _GLF_IDENTITY(true, ! (! (true))) && (_GLF_IDENTITY(_injected_loop_counter != 0, (_injected_loop_counter != 0) || false)))); _injected_loop_counter --)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), injectionSwitch)).y, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), injectionSwitch)).y, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0))[1])), injectionSwitch)).y) || _GLF_IDENTITY(false, true && (false)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           barrier();
          }
        }
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), ! (_GLF_IDENTITY(! (false), ! (! _GLF_IDENTITY((! _GLF_IDENTITY((false), bool(bool((false))))), true && ((! _GLF_IDENTITY((false), bool(bool((false)))))))))))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 uint subgroup_base = _GLF_IDENTITY(_GLF_struct_replacement_13._f4._f0.subgroup_id, (172938u & 0u) + (_GLF_IDENTITY(_GLF_struct_replacement_13._f4._f0.subgroup_id, min(_GLF_struct_replacement_13._f4._f0.subgroup_id, _GLF_struct_replacement_13._f4._f0.subgroup_id)))) * _GLF_struct_replacement_1.subgroup_size;
 do
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0))), max((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0))), (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) - vec2(0.0, 0.0), ((injectionSwitch) - vec2(0.0, 0.0)) * mat2(1.0)))))) - vec2(0.0, 0.0)).x > injectionSwitch.y)), true && (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0))), max((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0))), (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) - vec2(0.0, 0.0), ((injectionSwitch) - vec2(0.0, 0.0)) * mat2(1.0)))))) - vec2(0.0, 0.0)).x > injectionSwitch.y))))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))))))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           barrier();
          }
         else
          {
          }
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           barrier();
          }
        }
       barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint virtual_gid = workgroup_base + _GLF_IDENTITY(subgroup_base, (true ? subgroup_base : _GLF_FUZZED(workgroup_base))) + _GLF_struct_replacement_0.subgroup_local_id;
 do
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(false, false || (false)), true, true, _GLF_IDENTITY(false, (false) && true))), bool(bool(bool(bvec4(_GLF_IDENTITY(false, false || (false)), true, true, false))))))))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(false));
 uint next_virtual_gid = _GLF_IDENTITY(workgroup_base + subgroup_base, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(workgroup_id) : _GLF_IDENTITY(workgroup_base + subgroup_base, 1u * (workgroup_base + subgroup_base)))) + ((_GLF_IDENTITY(_GLF_struct_replacement_0.subgroup_local_id, (_GLF_IDENTITY(_GLF_struct_replacement_0.subgroup_local_id, (_GLF_struct_replacement_0.subgroup_local_id) * 1u)) | (_GLF_IDENTITY(_GLF_struct_replacement_0.subgroup_local_id, 0u + (_GLF_IDENTITY(_GLF_struct_replacement_0.subgroup_local_id, max(_GLF_struct_replacement_0.subgroup_local_id, _GLF_struct_replacement_0.subgroup_local_id)))))) + 1) % _GLF_struct_replacement_1.subgroup_size);
 uint read = _GLF_IDENTITY(atomicLoad(buf[virtual_gid], 4, 64, 2), _GLF_IDENTITY(uint(uvec3(_GLF_IDENTITY(_GLF_IDENTITY(atomicLoad(buf[virtual_gid], 4, 64, 2), (atomicLoad(buf[virtual_gid], 4, 64, 2)) | (atomicLoad(buf[virtual_gid], 4, 64, 2))), (_GLF_IDENTITY(_GLF_IDENTITY(atomicLoad(buf[_GLF_IDENTITY(virtual_gid, clamp(virtual_gid, virtual_gid, _GLF_IDENTITY(virtual_gid, min(virtual_gid, virtual_gid))))], 4, 64, 2), (atomicLoad(buf[_GLF_IDENTITY(virtual_gid, min(virtual_gid, _GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, uint(uvec2(virtual_gid, 1u))), (_GLF_IDENTITY(virtual_gid, uint(uvec2(virtual_gid, 1u)))) | (_GLF_IDENTITY(virtual_gid, uint(uvec2(virtual_gid, 1u)))))))], 4, _GLF_IDENTITY(64, (_GLF_IDENTITY(64, min(64, 64))) ^ 0), 2)) | (atomicLoad(buf[virtual_gid], 4, 64, 2))), ~ _GLF_IDENTITY((_GLF_IDENTITY(~ (_GLF_IDENTITY(atomicLoad(buf[virtual_gid], _GLF_IDENTITY(4, (4) / 1), 64, 2), (atomicLoad(buf[virtual_gid], 4, 64, 2)) | (atomicLoad(buf[virtual_gid], 4, 64, 2)))), ~ (~ (~ (_GLF_IDENTITY(atomicLoad(buf[virtual_gid], 4, 64, 2), (atomicLoad(buf[virtual_gid], 4, 64, 2)) | (_GLF_IDENTITY(atomicLoad(buf[virtual_gid], 4, 64, 2), uint(uvec4(atomicLoad(buf[virtual_gid], 4, 64, 2), 0u, _GLF_IDENTITY(0u, (0u) << 0u), 1u)))))))))), ((_GLF_IDENTITY(~ (_GLF_IDENTITY(atomicLoad(buf[virtual_gid], _GLF_IDENTITY(4, (4) / 1), 64, 2), (atomicLoad(buf[virtual_gid], 4, 64, 2)) | (atomicLoad(buf[virtual_gid], 4, 64, 2)))), ~ (~ (~ (_GLF_IDENTITY(atomicLoad(buf[virtual_gid], 4, 64, 2), (atomicLoad(buf[virtual_gid], 4, 64, 2)) | (_GLF_IDENTITY(atomicLoad(buf[virtual_gid], 4, 64, 2), uint(uvec4(atomicLoad(buf[virtual_gid], 4, 64, 2), 0u, _GLF_IDENTITY(0u, (0u) << 0u), 1u))))))))))) - 0u))) >> 0u), _GLF_IDENTITY((_GLF_IDENTITY(165400u, (165400u) ^ 0u) & 0u), ((165400u & 0u)) ^ _GLF_IDENTITY(0u, ~ (~ (0u)))), 0u)), (uint(uvec3(_GLF_IDENTITY(_GLF_IDENTITY(atomicLoad(buf[virtual_gid], 4, 64, _GLF_IDENTITY(2, (2) | (_GLF_IDENTITY(2, _GLF_IDENTITY(0, (0) * 1) | (_GLF_IDENTITY(2, int(ivec4(2, 1, 1, 0)))))))), (atomicLoad(buf[virtual_gid], 4, 64, 2)) | (atomicLoad(buf[_GLF_IDENTITY(virtual_gid, min(virtual_gid, virtual_gid))], 4, 64, 2))), (_GLF_IDENTITY(atomicLoad(buf[virtual_gid], 4, 64, _GLF_IDENTITY(_GLF_IDENTITY(2, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(2, ~ (~ (2))) : _GLF_FUZZED(33605))), (2) | (_GLF_IDENTITY(2, 0 | (_GLF_IDENTITY(2, int(ivec4(2, 1, 1, 0)))))))), _GLF_IDENTITY((atomicLoad(buf[virtual_gid], 4, 64, 2)), 0u ^ ((atomicLoad(buf[virtual_gid], 4, 64, 2)))) | (atomicLoad(buf[virtual_gid], 4, 64, 2)))) + 0u), (165400u & 0u), 0u))) ^ 0u));
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false)))) && true)), bool(bvec3(! (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false)))) && true)), false, false))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-5.3, -1927.0106)) : injectionSwitch)).y))))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, float(mat4x2(injectionSwitch.x, 1.0, 0.0, 0.0, sin(0.0), 0.0, 0.0, 1.0))) > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))))))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (1 ^ 1) | (_injected_loop_counter)) != (-66837 & 0)); _injected_loop_counter --)
        {
         barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec4(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true), true, true, true))))
        barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bool(bvec2(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true)), (bool(bvec2(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(mat3(injectionSwitch.x, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0))) > injectionSwitch.y))), true))) || false)))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x > injectionSwitch.y)))) || false))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
           barrier();
           if(_GLF_DEAD(false))
            barrier();
           do
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
           if(_GLF_DEAD(false))
            barrier();
          }
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
          }
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, _GLF_IDENTITY(true, (true) || false), true)))))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), true && (bool(bool(false)))))))
          barrier();
         barrier();
        }
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       else
        {
        }
      }
    }
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > ((0 ^ 0) | 0)); _injected_loop_counter --)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       for(int _injected_loop_counter = _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), (int(_GLF_ZERO(0.0, injectionSwitch.x))) ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       barrier();
      }
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       barrier();
      }
     else
      {
      }
    }
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))), (_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(true && (false), (true && (false)) && true)))) && true))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), ! (! (_GLF_IDENTITY(false, (false) || false))))))
    {
     do
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) && true)) && true)))
        barrier();
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false))))))))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false)))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       barrier();
      }
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 if(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_struct_replacement_0.subgroup_local_id, min(_GLF_struct_replacement_0.subgroup_local_id, _GLF_IDENTITY(_GLF_struct_replacement_0.subgroup_local_id, min(_GLF_struct_replacement_0.subgroup_local_id, _GLF_struct_replacement_0.subgroup_local_id)))) % 2) == _GLF_IDENTITY(0, min(0, 0)), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_struct_replacement_0.subgroup_local_id % 2), (_GLF_IDENTITY((_GLF_struct_replacement_0.subgroup_local_id % 2), max((_GLF_struct_replacement_0.subgroup_local_id % 2), (_GLF_IDENTITY(_GLF_struct_replacement_0.subgroup_local_id, (_GLF_struct_replacement_0.subgroup_local_id) | (_GLF_struct_replacement_0.subgroup_local_id)) % 2)))) | (_GLF_IDENTITY((_GLF_struct_replacement_0.subgroup_local_id % 2), 0u ^ ((_GLF_struct_replacement_0.subgroup_local_id % 2))))) == 0, (_GLF_IDENTITY((_GLF_struct_replacement_0.subgroup_local_id % 2), (_GLF_IDENTITY((_GLF_struct_replacement_0.subgroup_local_id % 2), max((_GLF_struct_replacement_0.subgroup_local_id % 2), (_GLF_IDENTITY(_GLF_struct_replacement_0.subgroup_local_id, (_GLF_struct_replacement_0.subgroup_local_id) | (_GLF_struct_replacement_0.subgroup_local_id)) % 2)))) | (_GLF_IDENTITY((_GLF_struct_replacement_0.subgroup_local_id % 2), 0u ^ ((_GLF_struct_replacement_0.subgroup_local_id % 2))))) == 0) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec2(bvec2(_GLF_IDENTITY((_GLF_struct_replacement_0.subgroup_local_id % 2), (_GLF_IDENTITY((_GLF_struct_replacement_0.subgroup_local_id % 2), max((_GLF_struct_replacement_0.subgroup_local_id % 2), (_GLF_IDENTITY(_GLF_struct_replacement_0.subgroup_local_id, _GLF_IDENTITY((_GLF_struct_replacement_0.subgroup_local_id), ((_GLF_struct_replacement_0.subgroup_local_id)) | (_GLF_IDENTITY((_GLF_struct_replacement_0.subgroup_local_id), max((_GLF_struct_replacement_0.subgroup_local_id), (_GLF_struct_replacement_0.subgroup_local_id))))) | (_GLF_struct_replacement_0.subgroup_local_id)) % 2)))) | (_GLF_IDENTITY((_GLF_struct_replacement_0.subgroup_local_id % 2), 0u ^ ((_GLF_struct_replacement_0.subgroup_local_id % 2))))) == 0, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bvec2(bvec4(bvec2(bvec2(_GLF_IDENTITY((_GLF_struct_replacement_0.subgroup_local_id % 2), (_GLF_IDENTITY((_GLF_struct_replacement_0.subgroup_local_id % 2), max((_GLF_struct_replacement_0.subgroup_local_id % 2), (_GLF_IDENTITY(_GLF_struct_replacement_0.subgroup_local_id, (_GLF_struct_replacement_0.subgroup_local_id) | (_GLF_struct_replacement_0.subgroup_local_id)) % 2)))) | (_GLF_IDENTITY((_GLF_struct_replacement_0.subgroup_local_id % 2), 0u ^ ((_GLF_struct_replacement_0.subgroup_local_id % 2))))) == 0, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true, false)))), bvec2(bvec4(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec2(bvec2(_GLF_IDENTITY((_GLF_struct_replacement_0.subgroup_local_id % 2), (_GLF_IDENTITY((_GLF_struct_replacement_0.subgroup_local_id % 2), max((_GLF_struct_replacement_0.subgroup_local_id % 2), (_GLF_IDENTITY(_GLF_struct_replacement_0.subgroup_local_id, (_GLF_struct_replacement_0.subgroup_local_id) | (_GLF_struct_replacement_0.subgroup_local_id)) % 2)))) | (_GLF_IDENTITY((_GLF_struct_replacement_0.subgroup_local_id % 2), _GLF_IDENTITY(0u, (0u) << 0u) ^ ((_GLF_struct_replacement_0.subgroup_local_id % 2))))) == 0, _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(intBitsToFloat(ivec2(96559, -94171))))).y)))), bvec2(bvec4(bvec2(bvec2(_GLF_IDENTITY((_GLF_struct_replacement_0.subgroup_local_id % 2), (_GLF_IDENTITY((_GLF_struct_replacement_0.subgroup_local_id % 2), max((_GLF_struct_replacement_0.subgroup_local_id % 2), (_GLF_IDENTITY(_GLF_struct_replacement_0.subgroup_local_id, (_GLF_struct_replacement_0.subgroup_local_id) | (_GLF_struct_replacement_0.subgroup_local_id)) % 2)))) | (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_struct_replacement_0.subgroup_local_id, (_GLF_IDENTITY(_GLF_struct_replacement_0.subgroup_local_id, ~ (~ (_GLF_struct_replacement_0.subgroup_local_id)))) - 0u) % 2), 0u ^ ((_GLF_struct_replacement_0.subgroup_local_id % 2))))) == 0, _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(mat4x3(injectionSwitch.y, 1.0, _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), 1.0, 0.0, exp(0.0), 0.0, 0.0, 0.0, 0.0, 1.0, 0.0))))))), true, false)))), bvec2(bvec2(bvec2(_GLF_IDENTITY(bvec2(bvec2(_GLF_IDENTITY((_GLF_struct_replacement_0.subgroup_local_id % 2), (_GLF_IDENTITY((_GLF_struct_replacement_0.subgroup_local_id % 2), max((_GLF_struct_replacement_0.subgroup_local_id % 2), (_GLF_IDENTITY(_GLF_struct_replacement_0.subgroup_local_id, (_GLF_struct_replacement_0.subgroup_local_id) | (_GLF_struct_replacement_0.subgroup_local_id)) % 2)))) | (_GLF_IDENTITY((_GLF_struct_replacement_0.subgroup_local_id % 2), 0u ^ ((_GLF_struct_replacement_0.subgroup_local_id % 2))))) == 0, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bvec2(bvec4(bvec2(bvec2(_GLF_IDENTITY((_GLF_struct_replacement_0.subgroup_local_id % 2), (_GLF_IDENTITY((_GLF_struct_replacement_0.subgroup_local_id % 2), max((_GLF_struct_replacement_0.subgroup_local_id % 2), (_GLF_IDENTITY(_GLF_struct_replacement_0.subgroup_local_id, (_GLF_struct_replacement_0.subgroup_local_id) | (_GLF_struct_replacement_0.subgroup_local_id)) % 2)))) | (_GLF_IDENTITY((_GLF_struct_replacement_0.subgroup_local_id % 2), 0u ^ ((_GLF_struct_replacement_0.subgroup_local_id % 2))))) == 0, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), _GLF_IDENTITY(true, bool(bvec3(true, true, true))), false))))))), true, false)))))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   subgroupAll(false);
   atomicStore(buf[next_virtual_gid], uint(1), _GLF_IDENTITY(4, int(_GLF_IDENTITY(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(4, ~ (~ (4))), (_GLF_IDENTITY(_GLF_IDENTITY(4, ~ (~ (4))), (_GLF_IDENTITY(4, ~ (~ (4)))) - 0)) + 0), 1, 0), (ivec3(_GLF_IDENTITY(4, ~ (~ (4))), 1, 0)) | (_GLF_IDENTITY(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(4, ~ (~ (4))), _GLF_IDENTITY(int(_GLF_IDENTITY(int(_GLF_IDENTITY(4, ~ (~ (4)))), (int(_GLF_IDENTITY(4, ~ (~ (4))))) >> 0)), (int(_GLF_IDENTITY(int(_GLF_IDENTITY(4, ~ (~ (4)))), (int(_GLF_IDENTITY(4, ~ (~ (4))))) >> 0))) | (int(_GLF_IDENTITY(int(_GLF_IDENTITY(4, ~ (~ (4)))), (int(_GLF_IDENTITY(4, ~ (~ (4))))) >> 0))))), 1, 0), _GLF_IDENTITY((ivec3(_GLF_IDENTITY(_GLF_IDENTITY(4, ~ (~ (4))), (0 << _GLF_IDENTITY(int(5), int(5))) ^ (_GLF_IDENTITY(_GLF_IDENTITY(4, ~ (~ (4))), (_GLF_IDENTITY(4, ~ (~ (4)))) - 0))), 1, 0)), (_GLF_IDENTITY((ivec3(_GLF_IDENTITY(_GLF_IDENTITY(4, ~ (~ (4))), (0 << _GLF_IDENTITY(int(5), int(5))) ^ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(4, ~ (~ (4))), (_GLF_IDENTITY(4, ~ (~ (4)))) - _GLF_IDENTITY(0, ~ (~ (0)))), (true ? _GLF_IDENTITY(_GLF_IDENTITY(4, ~ (~ _GLF_IDENTITY((4), (_GLF_IDENTITY((4), 0 + (_GLF_IDENTITY((4), clamp((4), (_GLF_IDENTITY(4, (4) | 0)), (4)))))) | ((4))))), (_GLF_IDENTITY(4, ~ (~ (4)))) - 0) : _GLF_FUZZED(31052))))), 1, 0)), ((ivec3(_GLF_IDENTITY(_GLF_IDENTITY(4, ~ (~ (4))), _GLF_IDENTITY((0 << _GLF_IDENTITY(int(5), int(5))) ^ (_GLF_IDENTITY(_GLF_IDENTITY(4, ~ (~ (4))), (_GLF_IDENTITY(_GLF_IDENTITY(4, ~ (~ (4))), max(_GLF_IDENTITY(4, ~ (~ (4))), _GLF_IDENTITY(4, ~ (~ (4)))))) - 0)), 1 * (_GLF_IDENTITY((0 << _GLF_IDENTITY(int(5), int(5))) ^ (_GLF_IDENTITY(_GLF_IDENTITY(4, ~ (~ (4))), (_GLF_IDENTITY(_GLF_IDENTITY(4, ~ (~ (4))), max(_GLF_IDENTITY(4, ~ (~ (4))), _GLF_IDENTITY(4, ~ (~ (4)))))) - 0)), max((0 << _GLF_IDENTITY(int(5), int(5))) ^ (_GLF_IDENTITY(_GLF_IDENTITY(4, ~ (~ (4))), (_GLF_IDENTITY(_GLF_IDENTITY(4, ~ (~ (4))), max(_GLF_IDENTITY(4, ~ (~ (4))), _GLF_IDENTITY(4, ~ (~ (4)))))) - 0)), _GLF_IDENTITY((0 << _GLF_IDENTITY(int(5), int(5))) ^ (_GLF_IDENTITY(_GLF_IDENTITY(4, ~ (~ (4))), (_GLF_IDENTITY(_GLF_IDENTITY(4, ~ (~ (4))), max(_GLF_IDENTITY(4, ~ (~ (4))), _GLF_IDENTITY(4, ~ (~ (4)))))) - 0)), ((0 << _GLF_IDENTITY(int(5), int(5))) ^ (_GLF_IDENTITY(_GLF_IDENTITY(4, ~ (~ (4))), (_GLF_IDENTITY(_GLF_IDENTITY(4, ~ (~ (4))), max(_GLF_IDENTITY(4, ~ (~ (4))), _GLF_IDENTITY(4, ~ (~ (4)))))) - 0))) << 0)))))), 1, 0))) >> (ivec3(0, 0, _GLF_IDENTITY(0, (0) | _GLF_IDENTITY((0), ((0)) | ((0))))) >> _GLF_IDENTITY(ivec3(8), ivec3(8))))) ^ ivec3(0, 0, 0)) >> ivec3(_GLF_IDENTITY(0, min(_GLF_IDENTITY(0, (0) | 0), 0)), 0, 0)))))), 64, 4);
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           barrier();
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
         barrier();
        }
      }
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
  }
 else
  {
   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), (_GLF_WRAPPED_IF_TRUE(true)) && true))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(false))
        {
         do
          {
           barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(mat3x4(injectionSwitch.y, round(length(normalize(vec2(1.0, 1.0)))), 1.0, 1.0, 0.0, 1.0, 0.0, abs(1.0), 1.0, 0.0, 0.0, 1.0)))))))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)))))
        barrier();
       if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
        {
         do
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             do
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               barrier();
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             barrier();
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), (_GLF_WRAPPED_LOOP(false)) || false));
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
          }
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec2(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), ! (! (_GLF_IDENTITY(false, bool(bvec2(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, true && (true))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
              barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             barrier();
            }
           else
            {
            }
           if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
            barrier();
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y))))
          barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         for(int _injected_loop_counter = (((1 ^ 0) << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), clamp(int(5), int(5), int(5))))) >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), 0 ^ (_GLF_IDENTITY(int(5), int(ivec4(int(5), 1, 1, 0))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, bool(bvec4(injectionSwitch.x < injectionSwitch.y, false, true, false)))))))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, false, true)))))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 do
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   barrier();
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
               if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
                barrier();
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_DEAD(false))))
              barrier();
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 barrier();
                }
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
            }
           else
            {
            }
          }
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         barrier();
        }
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))))
              {
              }
             else
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, true && (true))))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   barrier();
                  }
                 if(_GLF_DEAD(false))
                  barrier();
                }
               else
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(bool(bool(_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, false || _GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), bool(_GLF_IDENTITY(bvec3(! ((false)), false, true), bvec3(bvec3(bvec3(! ((false)), false, true))))))))), _GLF_IDENTITY(_GLF_IDENTITY(true, ! (! (true))), false || (true))))))), bool(bvec3(bool(bool(_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, false || (false)), _GLF_IDENTITY(_GLF_IDENTITY(true, ! (! (true))), false || (true))))))), false, true))), _GLF_IDENTITY((bool(bool(_GLF_IDENTITY(false, bool(bvec2(false, true)))))) && true, _GLF_IDENTITY(bool(bvec3((bool(bool(_GLF_IDENTITY(false, bool(bvec2(false, true)))))) && true, false, false)), (bool(bvec3((bool(bool(_GLF_IDENTITY(false, bool(bvec2(false, true)))))) && true, false, false))) || false))))))
                  barrier();
                }
              }
             else
              {
              }
            }
           else
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
              barrier();
             do
              {
               do
                {
                 if(_GLF_DEAD(false))
                  barrier();
                }
               while(_GLF_WRAPPED_LOOP(false));
               if(_GLF_DEAD(false))
                barrier();
              }
             while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bvec3(false, true, true)))));
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
            }
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       for(int _injected_loop_counter = (1 | 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((0 | 0) >> _GLF_IDENTITY(int(8), int(8)))); _injected_loop_counter --)
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
        }
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
       subgroupAll(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, false || (false))) || false));
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, true)), (_GLF_IDENTITY(bool(bvec2(false, true)), bool(bvec2(_GLF_IDENTITY(bool(bvec2(false, true)), ! (! (bool(bvec2(false, true))))), false)))) && true))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
              barrier();
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               barrier();
              }
             else
              {
               if(_GLF_DEAD(false))
                barrier();
              }
            }
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(true && (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (! (true && (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))
            barrier();
           if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), bool(bvec3(_GLF_WRAPPED_IF_FALSE(false), false, true))))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_DEAD(false))
              {
               for(int _injected_loop_counter = (1 | 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   barrier();
                  }
                }
               barrier();
              }
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
              }
             else
              {
               barrier();
              }
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             for(int _injected_loop_counter = (((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))) ^ 1); _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3)))); _injected_loop_counter ++)
              {
               barrier();
               if(_GLF_DEAD(false))
                barrier();
              }
            }
          }
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            {
             do
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * _GLF_IDENTITY(determinant(mat4(1.0, 1.0, 1.0, 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0)), float(_GLF_IDENTITY(vec4(determinant(mat4(1.0, 1.0, 1.0, 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0)), 1.0, 0.0, 1.0), min(vec4(determinant(mat4(1.0, 1.0, 1.0, 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0)), 1.0, 0.0, 1.0), vec4(determinant(mat4(1.0, 1.0, 1.0, 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0)), 1.0, 0.0, 1.0))))))))))))
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
                  barrier();
                 barrier();
                }
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, bool(bool(false))))), false, false, true)))) || false), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))))));
             barrier();
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
             if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
              barrier();
             if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))
              {
               do
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                   if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), true && (! (_GLF_DEAD(false)))))))), (bool(bool(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), true && (! (_GLF_DEAD(false))))))))) || false)))
                    barrier();
                  }
                 else
                  {
                   barrier();
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                     barrier();
                    }
                  }
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))
              barrier();
            }
           if(_GLF_DEAD(false))
            barrier();
          }
         for(int _injected_loop_counter = _GLF_IDENTITY(1, clamp(1, 1, 1)); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) * 1) > _GLF_IDENTITY(0, int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ _GLF_IDENTITY(_GLF_IDENTITY((0), 0 | ((0))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(_GLF_IDENTITY((0), clamp((0), (0), _GLF_IDENTITY((0), min(_GLF_IDENTITY((0), (false ? _GLF_FUZZED(_injected_loop_counter) : (0))), (0))))), ((0)) | (_GLF_IDENTITY((0), clamp((0), _GLF_IDENTITY((0), ((0)) >> 0), (0))))))))); _injected_loop_counter --)
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
             barrier();
            }
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
             if(_GLF_DEAD(false))
              barrier();
             for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (_GLF_IDENTITY(int(4), int(ivec4(int(4), 1, 0, 1)))) / 1))) >> _GLF_IDENTITY(int(4), int(4))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 barrier();
                }
               if(_GLF_DEAD(false))
                barrier();
              }
             if(_GLF_DEAD(false))
              barrier();
            }
           else
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
              }
             else
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                barrier();
              }
            }
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(injectionSwitch.x > injectionSwitch.y, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), true && (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))
          barrier();
         if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), bool(bvec4(bool(false), true, false, false))))), (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3((injectionSwitch.x > injectionSwitch.y), true, false), bvec3(bvec3(bvec3((injectionSwitch.x > injectionSwitch.y), true, false))))), false || (bool(_GLF_IDENTITY(bvec3((injectionSwitch.x > injectionSwitch.y), true, false), bvec3(bvec3(bvec3((injectionSwitch.x > injectionSwitch.y), true, false)))))))))))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, false, true)))))
        barrier();
       if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))), (_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false))))) && true))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         for(int _injected_loop_counter = ((int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0), _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0))))) << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), max(int(7), int(7))))); _GLF_WRAPPED_LOOP(_injected_loop_counter > (1 ^ 1)); _injected_loop_counter --)
          {
           barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
        }
      }
    }
   else
    {
    }
   if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true)), ! (! (bool(bvec3(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y)), false, true))))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   atomicStore(buf[next_virtual_gid], uint(1), 4, 64, 4);
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), bool(bool(! (injectionSwitch.x > injectionSwitch.y))))))))))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         barrier();
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
        }
      }
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
    barrier();
   barrier();
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
   do
    {
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))), false || (_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))), true)), (bool(bvec2(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))), true))) && true)))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     do
      {
       do
        {
         if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           else
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             do
              {
               for(int _injected_loop_counter = (0 | int(_GLF_ONE(1.0, injectionSwitch.y))); _GLF_WRAPPED_LOOP(_injected_loop_counter > (1 ^ (1 | 1))); _injected_loop_counter --)
                {
                 barrier();
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             do
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 barrier();
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 barrier();
                }
               if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bool(true)))))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 barrier();
                }
               else
                {
                 if(_GLF_DEAD(false))
                  barrier();
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
           barrier();
           for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (_GLF_IDENTITY(-81928, clamp(_GLF_IDENTITY(-81928, _GLF_IDENTITY(int(int(-81928)), (int(int(-81928))) - 0)), -81928, _GLF_IDENTITY(-81928, max(-81928, -81928)))) & 0)); _injected_loop_counter --)
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
          }
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, false)), ! (! (_GLF_IDENTITY(bool(bvec2(false, false)), ! (_GLF_IDENTITY(! (bool(bvec2(false, false))), ! (! (! (bool(bvec2(false, false))))))))))))))
              {
               for(int _injected_loop_counter = (1 ^ (0 ^ 0)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                {
                 barrier();
                }
              }
            }
           else
            {
             if(_GLF_DEAD(false))
              barrier();
             for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), _GLF_IDENTITY(clamp(_GLF_IDENTITY(_GLF_IDENTITY(int(0), (_GLF_IDENTITY(int(0), max(_GLF_IDENTITY(int(0), clamp(int(0), int(0), int(0))), int(0)))) | (_GLF_IDENTITY(int(0), (int(0)) | (int(0))))), ~ (~ (int(0)))), _GLF_IDENTITY(int(0), (int(0)) / 1), _GLF_IDENTITY(int(0), (int(_GLF_IDENTITY(0, (0) / 1))) - 0)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? clamp(_GLF_IDENTITY(int(0), ~ (~ (int(0)))), _GLF_IDENTITY(int(0), (int(0)) / 1), _GLF_IDENTITY(int(0), (int(0)) - 0)) : _GLF_FUZZED((~ 92657))))))) >> _GLF_IDENTITY(int(0), int(0)))); _injected_loop_counter ++)
              {
               if(_GLF_DEAD(false))
                barrier();
               for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), 0 ^ (int(7))))) >> _GLF_IDENTITY(int(7), int(7))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 & 26655)); _injected_loop_counter --)
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, true && (false))))))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   barrier();
                  }
                 if(_GLF_DEAD(false))
                  barrier();
                }
               if(_GLF_DEAD(false))
                barrier();
              }
             if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, true, false, false)), ! (! (bool(bvec4(false, true, false, false))))))))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
            }
          }
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
       for(int _injected_loop_counter = (_GLF_IDENTITY(0, _GLF_IDENTITY(0, min(_GLF_IDENTITY(0, (0) | (1 ^ 1)), 0)) | (0)) << _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), int(_GLF_IDENTITY(_GLF_IDENTITY(ivec2(_GLF_IDENTITY(int(7), ~ (~ (int(7)))), int(_GLF_IDENTITY(_GLF_ONE(1.0, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-706.100, -7508.9394)) : injectionSwitch)).y, min(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0), (true ? _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY((injectionSwitch.y), (true ? _GLF_IDENTITY((injectionSwitch.y), min((injectionSwitch.y), (injectionSwitch.y))) : _GLF_FUZZED(-788.091))) * 1.0) : _GLF_FUZZED(-9.5))))), injectionSwitch.y))), (_GLF_ONE(1.0, injectionSwitch.y)) - 0.0))), max(ivec2(_GLF_IDENTITY(int(7), ~ (~ (int(7)))), int(_GLF_ONE(1.0, injectionSwitch.y))), ivec2(_GLF_IDENTITY(int(7), ~ (~ (int(_GLF_IDENTITY(7, max(_GLF_IDENTITY(7, (7) - (0 | 0)), _GLF_IDENTITY(7, clamp(7, 7, 7)))))))), int(_GLF_ONE(1.0, injectionSwitch.y))))), (_GLF_IDENTITY(ivec2(_GLF_IDENTITY(int(7), ~ (~ _GLF_IDENTITY((int(7)), 0 | ((int(7)))))), int(_GLF_ONE(1.0, injectionSwitch.y))), max(_GLF_IDENTITY(ivec2(_GLF_IDENTITY(_GLF_IDENTITY(int(7), ~ (~ (_GLF_IDENTITY(int(7), (int(7)) | (_GLF_IDENTITY(int(7), (int(7)) | (int(7)))))))), max(_GLF_IDENTITY(int(7), ~ (~ (_GLF_IDENTITY(int(7), (int(7)) | (_GLF_IDENTITY(int(7), (int(7)) | (int(7)))))))), _GLF_IDENTITY(int(7), ~ (~ (_GLF_IDENTITY(int(7), (int(7)) | (_GLF_IDENTITY(int(7), (int(7)) | (int(7)))))))))), int(_GLF_ONE(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(987.367) : 1.0, min(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(987.367) : 1.0, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(987.367) : 1.0)))), injectionSwitch.y))), (_GLF_IDENTITY(ivec2(_GLF_IDENTITY(int(7), ~ (~ (_GLF_IDENTITY(int(7), (int(7)) | (_GLF_IDENTITY(int(7), (int(7)) | (int(7)))))))), int(_GLF_ONE(_GLF_IDENTITY(1.0, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(987.367) : 1.0)), injectionSwitch.y))), (ivec2(_GLF_IDENTITY(int(7), ~ (~ (_GLF_IDENTITY(int(7), (int(7)) | (_GLF_IDENTITY(int(7), (int(7)) | (int(7)))))))), int(_GLF_ONE(_GLF_IDENTITY(1.0, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(987.367) : 1.0)), injectionSwitch.y)))) >> ivec2(0, 0))) ^ ivec2(0, 0)), ivec2(_GLF_IDENTITY(int(7), ~ (~ (_GLF_IDENTITY(int(7), (_GLF_IDENTITY(int(7), (int(7)) >> 0)) | (int(7)))))), int(_GLF_ONE(1.0, injectionSwitch.y)))))) << ivec2(_GLF_IDENTITY(0, int(int(0))), 0)))))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(1.0 * (injectionSwitch.x), mix(float(_GLF_FUZZED(-1.0)), float(1.0 * (injectionSwitch.x)), bool(_GLF_IDENTITY(true, (true) || false))))), injectionSwitch.x)) > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))))))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : _GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch))))[0], _GLF_IDENTITY(injectionSwitch, vec2(mat2x4(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), injectionSwitch)), 0.0, 1.0, 1.0, 1.0, 0.0, _GLF_IDENTITY(tan(0.0), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? tan(0.0) : _GLF_FUZZED(-28.10))))))[1])).x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             barrier();
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
              {
               if(_GLF_DEAD(false))
                barrier();
              }
            }
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           else
            {
             barrier();
            }
          }
         else
          {
          }
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     else
      {
       subgroupBarrier();
      }
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       else
        {
        }
       barrier();
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), min(mat2(1.0) * (injectionSwitch), mat2(1.0) * (injectionSwitch)))).y), ! (! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), min(mat2(1.0) * (injectionSwitch), mat2(1.0) * (injectionSwitch)))).y)))))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    barrier();
   barrier();
  }
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), mix(float(_GLF_FUZZED((true ? -475.698 : -33.21))), float(_GLF_ZERO(0.0, injectionSwitch.x)), bool(true))))); _injected_loop_counter --)
  {
   atomicStore(buf[virtual_gid], read, 4, 64, 4);
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), false, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))).y))))
        barrier();
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     barrier();
    }
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END
BUFFER checker DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected_checker DATA_TYPE uint32 SIZE 8388096 FILL 0

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 
  BIND BUFFER checker AS storage DESCRIPTOR_SET 0 BINDING 2 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT checker EQ_BUFFER expected_checker
