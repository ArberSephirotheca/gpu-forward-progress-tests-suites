#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) && _GLF_IDENTITY(true, bool(bvec2(true, true)))), (injectionSwitch.x > injectionSwitch.y))))), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! _GLF_IDENTITY(_GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && ((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), false || (_GLF_IDENTITY((_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(mat2x3(injectionSwitch, 1.0, 0.0, 1.0, 1.0))).x > injectionSwitch.y))), ((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false)))))) && true)))
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
   do
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(false))
  barrier();
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec3(false, false, true))), bool(bvec4(false, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))), (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(4.3))) > injectionSwitch.y)), true)))))), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec3(false, false, true))), bool(bvec4(false, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))), (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(4.3))) > injectionSwitch.y)), true)))))), true, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (_GLF_IDENTITY(! (bool(bvec4(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec3(false, false, true))), bool(bvec4(false, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))), (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(4.3))) > injectionSwitch.y)), true)))))), true, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), false || (! (bool(bvec4(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec3(false, false, true))), bool(bvec4(false, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))), (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(4.3))) > injectionSwitch.y)), true)))))), true, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))))
    {
     for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != (((0 >> _GLF_IDENTITY(int(1), int(1))) << _GLF_IDENTITY(int(4), int(4))) ^ _GLF_IDENTITY(0, (0) | (0)))); _injected_loop_counter --)
      {
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
    }
  }
 else
  {
  }
 uint workgroup_size = _GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) | (_GLF_IDENTITY(gl_WorkGroupSize, uvec3(1u, 1u, 1u) * (gl_WorkGroupSize)))).x;
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = workgroup_size * workgroup_id;
 do
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y))), false || ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y))))), ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y)))) && true))))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(7), max(_GLF_IDENTITY(int(7), (int(7)) | 0), int(7))), int(7))) >> _GLF_IDENTITY(int(7), int(7))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _GLF_IDENTITY(_injected_loop_counter --, ~ (_GLF_IDENTITY(~ (_injected_loop_counter --), (~ (_injected_loop_counter --)) / 1))))
          {
           barrier();
          }
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
      }
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) && true)) && true)));
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(true, ! (! (true))), bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(true, ! (! (true))), (_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec3(true, false, true)), ! (! (_GLF_IDENTITY(bool(bvec3(true, false, true)), bool(bvec2(bool(bvec3(true, false, true)), true))))))))))) && _GLF_IDENTITY(true, ! (! (true)))), true, true, false)))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(1, int(int(1)))); _injected_loop_counter ++)
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             barrier();
            }
           else
            {
            }
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY((-4819 & 0), 1 * ((-4819 & 0)))); _injected_loop_counter --)
              {
               barrier();
              }
             if(_GLF_DEAD(false))
              barrier();
            }
          }
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             barrier();
            }
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
      }
    }
   else
    {
    }
  }
 else
  {
  }
 uint subgroup_base = _GLF_IDENTITY(subgroup_id, (_GLF_IDENTITY(subgroup_id, (subgroup_id) >> 0u)) >> _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, (0u) ^ 0u)) / 1u)) * subgroup_size;
 uint virtual_gid = workgroup_base + _GLF_IDENTITY(subgroup_base, _GLF_IDENTITY(clamp(subgroup_base, _GLF_IDENTITY(subgroup_base, (false ? _GLF_FUZZED(_GLF_IDENTITY(_GLF_IDENTITY(77330u, (77330u) | (_GLF_IDENTITY(77330u, 0u ^ (_GLF_IDENTITY(77330u, ~ (~ (77330u))))))), (77330u) >> 0u)) : subgroup_base)), _GLF_IDENTITY(_GLF_IDENTITY(subgroup_base, uint(uvec2(subgroup_base, 0u))), _GLF_IDENTITY(_GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (subgroup_base), (false ? _GLF_FUZZED(subgroup_size) : ~ (subgroup_base))), (~ (subgroup_base)) / 1u)), (~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (subgroup_base), (false ? _GLF_FUZZED(subgroup_size) : ~ (subgroup_base))), (~ (subgroup_base)) / 1u))) | (~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (subgroup_base), (false ? _GLF_FUZZED(subgroup_size) : ~ (subgroup_base))), (~ (subgroup_base)) / 1u)))), max(_GLF_IDENTITY(_GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (subgroup_base), (false ? _GLF_FUZZED(subgroup_size) : ~ (subgroup_base))), (~ (_GLF_IDENTITY(subgroup_base, (subgroup_base) + uint(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x))))))) / 1u)), (_GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (subgroup_base), (false ? _GLF_FUZZED(subgroup_size) : ~ (subgroup_base))), (~ (subgroup_base)) / 1u)), min(_GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(~ (subgroup_base), (_GLF_IDENTITY(~ (subgroup_base), min(~ (subgroup_base), _GLF_IDENTITY(~ (subgroup_base), (~ (subgroup_base)) | (~ (subgroup_base)))))) | (_GLF_IDENTITY(~ (subgroup_base), (_GLF_IDENTITY(~ (subgroup_base), 0u ^ (~ (subgroup_base)))) | 0u))), (false ? _GLF_FUZZED(subgroup_size) : ~ _GLF_IDENTITY((subgroup_base), 0u + ((subgroup_base))))), (~ (subgroup_base)) / _GLF_IDENTITY(1u, uint(uvec4(1u, 1u, uint(_GLF_ONE(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(-477.383) : 1.0)), injectionSwitch.y)), 1u))))), 1u * (~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (subgroup_base), (false ? _GLF_FUZZED(subgroup_size) : ~ (subgroup_base))), (~ (subgroup_base)) / 1u)))), _GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (subgroup_base), (false ? _GLF_FUZZED(subgroup_size) : ~ (subgroup_base))), _GLF_IDENTITY((~ (subgroup_base)), 1u * ((~ (subgroup_base)))) / 1u)), (false ? _GLF_FUZZED(subgroup_size) : ~ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(~ (subgroup_base), (false ? _GLF_FUZZED(subgroup_size) : ~ (subgroup_base))), max(_GLF_IDENTITY(~ (subgroup_base), (false ? _GLF_FUZZED(subgroup_size) : ~ (subgroup_base))), _GLF_IDENTITY(~ (subgroup_base), (false ? _GLF_FUZZED(subgroup_size) : ~ (subgroup_base))))), (~ (subgroup_base)) / 1u))))))) + 0u), max(~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_base, (0u << _GLF_IDENTITY(uint(3u), uint(3u))) + (subgroup_base))), (false ? _GLF_FUZZED(subgroup_size) : ~ (subgroup_base))), (~ (subgroup_base)) / 1u)), _GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (subgroup_base), (false ? _GLF_FUZZED(subgroup_size) : ~ _GLF_IDENTITY((subgroup_base), ((subgroup_base)) | ((subgroup_base))))), (~ (subgroup_base)) / 1u)), ~ (~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (subgroup_base), (false ? _GLF_FUZZED(subgroup_size) : ~ (_GLF_IDENTITY(subgroup_base, (_GLF_IDENTITY(subgroup_base, _GLF_IDENTITY(uint(uvec3(subgroup_base, 0u, 0u)), clamp(uint(uvec3(subgroup_base, 0u, 0u)), uint(uvec3(subgroup_base, 0u, 0u)), uint(uvec3(subgroup_base, 0u, 0u)))))) | (subgroup_base))))), (~ (subgroup_base)) / 1u))))))), ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (subgroup_base), (false ? _GLF_FUZZED(subgroup_size) : ~ _GLF_IDENTITY((subgroup_base), 0u + ((subgroup_base))))), _GLF_IDENTITY((~ (subgroup_base)), max((~ (subgroup_base)), (~ (subgroup_base)))) / 1u)))))), (false ? _GLF_FUZZED(workgroup_id) : clamp(subgroup_base, _GLF_IDENTITY(subgroup_base, (false ? _GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(_GLF_IDENTITY(77330u, (77330u) | (_GLF_IDENTITY(77330u, 0u ^ (_GLF_IDENTITY(77330u, ~ (~ (77330u))))))), (77330u) >> 0u)), uint(_GLF_IDENTITY(uvec3(_GLF_FUZZED(_GLF_IDENTITY(_GLF_IDENTITY(77330u, (77330u) | (_GLF_IDENTITY(77330u, 0u ^ (_GLF_IDENTITY(77330u, ~ (~ (77330u))))))), (77330u) >> 0u)), 0u, 0u), (uvec3(_GLF_FUZZED(_GLF_IDENTITY(_GLF_IDENTITY(77330u, (77330u) | (_GLF_IDENTITY(77330u, 0u ^ (_GLF_IDENTITY(77330u, ~ (~ (77330u))))))), (77330u) >> 0u)), 0u, 0u)) - uvec3(0u, 0u, 0u)))) : subgroup_base)), _GLF_IDENTITY(_GLF_IDENTITY(subgroup_base, uint(uvec2(subgroup_base, 0u))), _GLF_IDENTITY(_GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (subgroup_base), _GLF_IDENTITY((false ? _GLF_FUZZED(subgroup_size) : ~ (subgroup_base)), ((false ? _GLF_FUZZED(subgroup_size) : ~ (subgroup_base))) / 1u)), (~ (subgroup_base)) / 1u)), (~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (subgroup_base), (_GLF_IDENTITY(false, (false) && true) ? _GLF_FUZZED(subgroup_size) : ~ (subgroup_base))), (~ (subgroup_base)) / 1u))) | (~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (subgroup_base), (false ? _GLF_FUZZED(subgroup_size) : ~ (subgroup_base))), (~ _GLF_IDENTITY((subgroup_base), ~ (~ ((subgroup_base))))) / 1u)))), max(_GLF_IDENTITY(_GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (subgroup_base), (false ? _GLF_FUZZED(subgroup_size) : ~ (subgroup_base))), (~ (_GLF_IDENTITY(subgroup_base, (subgroup_base) + uint(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x))))))) / 1u)), (_GLF_IDENTITY(_GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (subgroup_base), (false ? _GLF_FUZZED(subgroup_size) : ~ (subgroup_base))), (~ (subgroup_base)) / 1u)), min(_GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(~ (subgroup_base), (_GLF_IDENTITY(~ (subgroup_base), min(~ (subgroup_base), _GLF_IDENTITY(~ (subgroup_base), (~ (subgroup_base)) | (~ (subgroup_base)))))) | (_GLF_IDENTITY(~ (subgroup_base), (_GLF_IDENTITY(~ (subgroup_base), 0u ^ (~ (subgroup_base)))) | 0u))), (false ? _GLF_FUZZED(subgroup_size) : ~ _GLF_IDENTITY((subgroup_base), 0u + ((subgroup_base))))), (~ (subgroup_base)) / _GLF_IDENTITY(1u, uint(uvec4(1u, 1u, uint(_GLF_ONE(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(-477.383) : 1.0)), injectionSwitch.y)), 1u))))), 1u * (~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (subgroup_base), (false ? _GLF_FUZZED(subgroup_size) : ~ (subgroup_base))), (~ (subgroup_base)) / 1u)))), _GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (subgroup_base), (false ? _GLF_FUZZED(subgroup_size) : ~ (subgroup_base))), _GLF_IDENTITY((~ (subgroup_base)), 1u * ((~ (subgroup_base)))) / 1u)), (false ? _GLF_FUZZED(subgroup_size) : ~ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(~ (subgroup_base), (false ? _GLF_FUZZED(subgroup_size) : ~ (subgroup_base))), max(_GLF_IDENTITY(~ (subgroup_base), (false ? _GLF_FUZZED(subgroup_size) : ~ (subgroup_base))), _GLF_IDENTITY(~ (subgroup_base), (false ? _GLF_FUZZED(subgroup_size) : ~ (subgroup_base))))), (~ (subgroup_base)) / 1u)))))), (_GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (subgroup_base), (false ? _GLF_FUZZED(subgroup_size) : ~ (subgroup_base))), (~ (subgroup_base)) / 1u)), min(_GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(~ (subgroup_base), (_GLF_IDENTITY(~ (subgroup_base), min(~ (subgroup_base), _GLF_IDENTITY(~ (subgroup_base), (~ (subgroup_base)) | (~ (subgroup_base)))))) | (_GLF_IDENTITY(~ (subgroup_base), (_GLF_IDENTITY(~ (subgroup_base), 0u ^ (~ (subgroup_base)))) | 0u))), (false ? _GLF_FUZZED(subgroup_size) : ~ _GLF_IDENTITY((subgroup_base), 0u + ((subgroup_base))))), (~ (subgroup_base)) / _GLF_IDENTITY(1u, uint(uvec4(1u, 1u, uint(_GLF_ONE(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(-477.383) : 1.0)), injectionSwitch.y)), 1u))))), 1u * (~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (subgroup_base), (false ? _GLF_FUZZED(subgroup_size) : ~ (subgroup_base))), (~ (subgroup_base)) / 1u)))), _GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (subgroup_base), (false ? _GLF_FUZZED(subgroup_size) : ~ (subgroup_base))), _GLF_IDENTITY((~ (subgroup_base)), 1u * ((~ (subgroup_base)))) / 1u)), (false ? _GLF_FUZZED(subgroup_size) : ~ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(~ (subgroup_base), (false ? _GLF_FUZZED(subgroup_size) : ~ (subgroup_base))), max(_GLF_IDENTITY(~ (subgroup_base), (false ? _GLF_FUZZED(subgroup_size) : ~ (subgroup_base))), _GLF_IDENTITY(~ (subgroup_base), (false ? _GLF_FUZZED(subgroup_size) : ~ (subgroup_base))))), (~ (subgroup_base)) / 1u))))))) ^ 0u)) + 0u), max(~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_base, (0u << _GLF_IDENTITY(uint(3u), uint(3u))) + (subgroup_base))), (false ? _GLF_FUZZED(subgroup_size) : ~ (subgroup_base))), (~ (subgroup_base)) / 1u)), _GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (subgroup_base), (false ? _GLF_FUZZED(subgroup_size) : ~ _GLF_IDENTITY((subgroup_base), ((subgroup_base)) | ((subgroup_base))))), (~ (subgroup_base)) / 1u)), ~ (~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (subgroup_base), (false ? _GLF_FUZZED(subgroup_size) : ~ (_GLF_IDENTITY(subgroup_base, (_GLF_IDENTITY(subgroup_base, _GLF_IDENTITY(uint(uvec3(subgroup_base, 0u, 0u)), clamp(uint(uvec3(subgroup_base, 0u, 0u)), uint(uvec3(subgroup_base, _GLF_IDENTITY(0u, (0u) | (_GLF_IDENTITY(0u, (0u) * 1u))), 0u)), uint(uvec3(subgroup_base, 0u, 0u)))))) | (subgroup_base))))), (~ (_GLF_IDENTITY(subgroup_base, ~ (~ (subgroup_base))))) / 1u))))))), ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (subgroup_base), (false ? _GLF_FUZZED(subgroup_size) : ~ _GLF_IDENTITY((subgroup_base), 0u + ((subgroup_base))))), _GLF_IDENTITY((~ (subgroup_base)), max((~ (subgroup_base)), (~ (subgroup_base)))) / 1u))))))))) + subgroup_local_id;
 if(_GLF_DEAD(false))
  {
   do
    {
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, true && (true))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0)))))
        {
         for(int _injected_loop_counter = (1 & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           if(_GLF_DEAD(false))
            barrier();
           for(int _injected_loop_counter = (0 << _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(1, (1) ^ 0)), clamp(int(1), int(1), int(1))), int(1))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 | int(_GLF_ONE(1.0, injectionSwitch.y)))); _GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) / (1 ^ 0)))
            {
             if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), _GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(! (false)), (bool(! (_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, (false) || false), true, true, false)))))) && true)), false || (bool(_GLF_IDENTITY(bool(! (false)), (bool(! (false))) && true)))), false || (_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(! (false)), (bool(! (_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, (false) || false), true, true, false)))))) && true)), false || (bool(_GLF_IDENTITY(bool(! (false)), (bool(! (false))) && true)))))))))), true && (_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, (false) && true)), _GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(! (false)), (bool(! (_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, (false) || false), true, true, false)))))) && true)), false || (bool(_GLF_IDENTITY(bool(! (false)), (bool(! (false))) && true)))), false || (_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(! (false)), (bool(! (_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, (false) || false), true, true, false)))))) && true)), false || (bool(_GLF_IDENTITY(bool(! (false)), (bool(! (false))) && true)))))))))))))
              {
               if(_GLF_DEAD(false))
                barrier();
               do
                {
                 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch)).x > injectionSwitch.y)), bool(bool(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y)))))), (_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch)).x > injectionSwitch.y)), bool(bool(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))))) && true))
                  {
                   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (2778 & 0)); _injected_loop_counter --)
                    {
                     barrier();
                    }
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                }
               while(_GLF_WRAPPED_LOOP(false));
               for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(7), _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(7, _GLF_IDENTITY(~ (~ (7)), ~ (~ (~ (~ (7))))))), (int(_GLF_IDENTITY(7, _GLF_IDENTITY(~ (~ (7)), ~ (~ (~ (~ (7)))))))) | 0), (true ? _GLF_IDENTITY(int(_GLF_IDENTITY(7, ~ (~ (7)))), _GLF_IDENTITY((int(_GLF_IDENTITY(7, ~ (~ (7))))), ((int(_GLF_IDENTITY(7, ~ (~ (7)))))) | (0 << _GLF_IDENTITY(int(5), int(5)))) ^ _GLF_IDENTITY(0, max(0, 0))) : _GLF_FUZZED(_injected_loop_counter))))) >> _GLF_IDENTITY(int(7), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(7), (int(7)) | 0), clamp(_GLF_IDENTITY(_GLF_IDENTITY(int(7), _GLF_IDENTITY((int(7)), (_GLF_IDENTITY((int(7)), clamp((int(7)), (int(7)), (int(7))))) | ((int(7)))) | 0), (_GLF_IDENTITY(_GLF_IDENTITY(int(7), (int(_GLF_IDENTITY(7, 0 + (7)))) | 0), ~ (~ _GLF_IDENTITY((_GLF_IDENTITY(int(7), (int(7)) | 0)), ~ (~ ((_GLF_IDENTITY(int(7), (int(7)) | 0)))))))) / 1), _GLF_IDENTITY(int(7), (int(7)) | 0), _GLF_IDENTITY(int(7), (int(7)) | 0))), 0 | (_GLF_IDENTITY(_GLF_IDENTITY(int(7), (int(7)) | 0), clamp(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(7), (int(7)) >> 0), _GLF_IDENTITY((int(7)), _GLF_IDENTITY(int(ivec4((int(7)), 1, int(_GLF_ZERO(0.0, injectionSwitch.x)), (1 ^ ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2)))))), (false ? _GLF_FUZZED(_injected_loop_counter) : int(ivec4((int(7)), 1, int(_GLF_ZERO(0.0, injectionSwitch.x)), (1 ^ ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2))))))))) | 0), (_GLF_IDENTITY(_GLF_IDENTITY(int(7), (int(7)) | 0), ~ (~ (_GLF_IDENTITY(int(7), (int(7)) | 0))))) / 1), _GLF_IDENTITY(_GLF_IDENTITY(int(7), (int(7)) | 0), clamp(_GLF_IDENTITY(int(7), (int(7)) | 0), _GLF_IDENTITY(_GLF_IDENTITY(int(7), (int(7)) | 0), max(_GLF_IDENTITY(int(7), (int(7)) | 0), _GLF_IDENTITY(int(7), (int(7)) | 0))), _GLF_IDENTITY(int(7), (int(7)) | 0))), _GLF_IDENTITY(int(7), _GLF_IDENTITY((int(7)), (0 ^ 0) ^ (_GLF_IDENTITY((int(7)), _GLF_IDENTITY(int(_GLF_IDENTITY(ivec4(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(int(7), (_GLF_IDENTITY(int(7), (int(7)) ^ 0)) << (0 >> _GLF_IDENTITY(int(7), int(7))))), _GLF_IDENTITY(min((int(7)), (int(7))), 0 ^ (min((int(7)), (int(7)))))), min(_GLF_IDENTITY((_GLF_IDENTITY(int(7), (_GLF_IDENTITY(int(7), (int(7)) ^ 0)) << (0 >> _GLF_IDENTITY(int(7), int(7))))), _GLF_IDENTITY(min((int(7)), (int(7))), 0 ^ (min((int(7)), (int(7)))))), _GLF_IDENTITY((_GLF_IDENTITY(int(7), (_GLF_IDENTITY(int(7), (int(7)) ^ 0)) << (0 >> _GLF_IDENTITY(int(7), int(7))))), _GLF_IDENTITY(min((int(7)), (int(7))), 0 ^ (min((int(7)), (int(7)))))))), 0, 0, 0), _GLF_IDENTITY((false ? _GLF_FUZZED(ivec4(97660, -91661, 3954, -33621)) : ivec4(_GLF_IDENTITY((int(7)), min((_GLF_IDENTITY(int(7), clamp(_GLF_IDENTITY(int(7), (int(7)) >> 0), int(7), int(7)))), (int(7)))), 0, 0, 0)), min((false ? _GLF_FUZZED(ivec4(97660, -91661, 3954, -33621)) : ivec4(_GLF_IDENTITY((int(7)), min((_GLF_IDENTITY(int(7), clamp(_GLF_IDENTITY(int(7), (int(7)) >> 0), int(7), int(7)))), (int(7)))), 0, 0, 0)), (false ? _GLF_FUZZED(ivec4(97660, -91661, 3954, -33621)) : ivec4(_GLF_IDENTITY((int(7)), min((_GLF_IDENTITY(int(7), clamp(_GLF_IDENTITY(int(7), (int(7)) >> 0), int(7), int(7)))), (int(7)))), 0, 0, 0)))))), max(_GLF_IDENTITY(int(_GLF_IDENTITY(ivec4(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(int(7), (_GLF_IDENTITY(int(7), (int(7)) ^ 0)) << (0 >> _GLF_IDENTITY(int(7), int(7))))), _GLF_IDENTITY(min((int(7)), (int(7))), 0 ^ (min((int(7)), (int(7)))))), min(_GLF_IDENTITY((_GLF_IDENTITY(int(7), (_GLF_IDENTITY(int(7), (int(7)) ^ 0)) << (0 >> _GLF_IDENTITY(int(7), int(7))))), _GLF_IDENTITY(min((int(7)), (int(7))), 0 ^ (min((int(7)), (int(7)))))), _GLF_IDENTITY((_GLF_IDENTITY(int(7), (_GLF_IDENTITY(int(7), (int(7)) ^ 0)) << (0 >> _GLF_IDENTITY(int(7), int(7))))), _GLF_IDENTITY(min((int(7)), (int(7))), 0 ^ (min((int(7)), (int(7)))))))), 0, 0, 0), _GLF_IDENTITY((false ? _GLF_FUZZED(ivec4(97660, -91661, 3954, -33621)) : ivec4(_GLF_IDENTITY((int(7)), min((_GLF_IDENTITY(int(7), clamp(_GLF_IDENTITY(int(7), (int(7)) >> 0), int(7), int(7)))), (int(7)))), 0, 0, 0)), min((false ? _GLF_FUZZED(ivec4(97660, -91661, 3954, -33621)) : ivec4(_GLF_IDENTITY((int(7)), min((_GLF_IDENTITY(int(7), clamp(_GLF_IDENTITY(int(7), (int(7)) >> 0), int(7), int(7)))), (int(7)))), 0, 0, 0)), (false ? _GLF_FUZZED(ivec4(97660, -91661, 3954, -33621)) : ivec4(_GLF_IDENTITY((int(7)), min((_GLF_IDENTITY(int(7), clamp(_GLF_IDENTITY(int(7), (int(7)) >> 0), int(7), int(7)))), (int(7)))), 0, 0, 0)))))), (int(_GLF_IDENTITY(ivec4(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(int(7), (_GLF_IDENTITY(int(7), (int(7)) ^ 0)) << (0 >> _GLF_IDENTITY(int(7), int(7))))), _GLF_IDENTITY(min((int(7)), (int(7))), 0 ^ (min((int(7)), (int(7)))))), min(_GLF_IDENTITY((_GLF_IDENTITY(int(7), (_GLF_IDENTITY(int(7), (int(7)) ^ 0)) << (0 >> _GLF_IDENTITY(int(7), int(7))))), _GLF_IDENTITY(min((int(7)), (int(7))), 0 ^ (min((int(7)), (int(7)))))), _GLF_IDENTITY((_GLF_IDENTITY(int(7), (_GLF_IDENTITY(int(7), (int(7)) ^ 0)) << (0 >> _GLF_IDENTITY(int(7), int(7))))), _GLF_IDENTITY(min((int(7)), (int(7))), 0 ^ (min((int(7)), (int(7)))))))), 0, 0, 0), _GLF_IDENTITY((false ? _GLF_FUZZED(ivec4(97660, -91661, 3954, -33621)) : ivec4(_GLF_IDENTITY((int(7)), min((_GLF_IDENTITY(int(7), clamp(_GLF_IDENTITY(int(7), (int(7)) >> 0), int(7), int(7)))), (int(7)))), 0, 0, 0)), min((false ? _GLF_FUZZED(ivec4(97660, -91661, 3954, -33621)) : ivec4(_GLF_IDENTITY((int(7)), min((_GLF_IDENTITY(int(7), clamp(_GLF_IDENTITY(int(7), (int(7)) >> 0), int(7), int(7)))), (int(7)))), 0, 0, 0)), (false ? _GLF_FUZZED(ivec4(97660, -91661, 3954, -33621)) : ivec4(_GLF_IDENTITY((int(7)), min((_GLF_IDENTITY(int(7), clamp(_GLF_IDENTITY(int(7), (int(7)) >> 0), int(7), int(7)))), (int(7)))), 0, 0, 0))))))) - 0), int(_GLF_IDENTITY(ivec4(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(int(7), (_GLF_IDENTITY(int(7), (int(7)) ^ 0)) << (0 >> _GLF_IDENTITY(int(7), int(7))))), _GLF_IDENTITY(min((int(7)), (int(7))), 0 ^ (min((int(7)), (int(7)))))), min(_GLF_IDENTITY((_GLF_IDENTITY(int(7), (_GLF_IDENTITY(int(7), (int(7)) ^ 0)) << (0 >> _GLF_IDENTITY(int(7), int(7))))), _GLF_IDENTITY(min((int(7)), (int(7))), 0 ^ (min((int(7)), (int(7)))))), _GLF_IDENTITY((_GLF_IDENTITY(int(7), (_GLF_IDENTITY(int(7), (int(7)) ^ 0)) << (0 >> _GLF_IDENTITY(int(7), int(7))))), _GLF_IDENTITY(min((int(7)), (int(7))), 0 ^ (min((int(7)), (int(7)))))))), 0, 0, 0), _GLF_IDENTITY((false ? _GLF_FUZZED(ivec4(97660, -91661, 3954, -33621)) : ivec4(_GLF_IDENTITY((int(7)), min((_GLF_IDENTITY(int(7), clamp(_GLF_IDENTITY(int(7), (int(7)) >> 0), int(7), int(7)))), (int(7)))), 0, 0, 0)), min((false ? _GLF_FUZZED(ivec4(97660, -91661, 3954, -33621)) : ivec4(_GLF_IDENTITY((int(7)), min((_GLF_IDENTITY(int(7), clamp(_GLF_IDENTITY(int(7), (int(7)) >> 0), int(7), int(7)))), (int(7)))), 0, 0, 0)), (false ? _GLF_FUZZED(ivec4(97660, -91661, 3954, -33621)) : ivec4(_GLF_IDENTITY((int(7)), min((_GLF_IDENTITY(int(7), clamp(_GLF_IDENTITY(int(7), (int(7)) >> 0), int(7), int(7)))), (int(7)))), 0, 0, 0))))))))))) | 0))))))); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != (0 << _GLF_IDENTITY(int(8), _GLF_IDENTITY(int(8), (int(8)) ^ 0)))), true && (_GLF_WRAPPED_LOOP(_injected_loop_counter != (0 << _GLF_IDENTITY(int(8), int(8)))))); _GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) / 1), (_GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) / 1)) ^ 0))
                {
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                  {
                   barrier();
                  }
                 else
                  {
                  }
                }
               if(_GLF_DEAD(false))
                {
                 do
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                     do
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(bvec2((injectionSwitch.x > injectionSwitch.y), true)), bool(bvec2(bool(bvec2((injectionSwitch.x > injectionSwitch.y), true)), false))))) || false))))
                        {
                         if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bvec3(true, false, false)))))
                          {
                           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                            barrier();
                           if(_GLF_DEAD(false))
                            {
                             if(_GLF_WRAPPED_IF_TRUE(true))
                              {
                               barrier();
                              }
                             else
                              {
                              }
                            }
                           if(_GLF_DEAD(false))
                            barrier();
                           do
                            {
                             barrier();
                            }
                           while(_GLF_WRAPPED_LOOP(false));
                          }
                         else
                          {
                           if(_GLF_DEAD(false))
                            barrier();
                          }
                        }
                      }
                     while(_GLF_WRAPPED_LOOP(false));
                     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)), ! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)), bool(_GLF_IDENTITY(bvec3(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)), true, true), bvec3(bvec3(bvec3(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)), true, true))))))))))
                      barrier();
                     barrier();
                    }
                   else
                    {
                    }
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 & 1)); _injected_loop_counter ++)
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    {
                     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, ! (! (true)))) || false), _GLF_IDENTITY(false, bool(bvec3(false, false, true))) || (true))))
                      {
                       barrier();
                       if(_GLF_DEAD(false))
                        barrier();
                      }
                     else
                      {
                       if(_GLF_WRAPPED_IF_FALSE(false))
                        {
                        }
                       else
                        {
                         if(_GLF_DEAD(false))
                          barrier();
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          barrier();
                        }
                      }
                    }
                  }
                }
              }
            }
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, true && (true)))))), (_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! _GLF_IDENTITY((! (_GLF_IDENTITY(true, true && (true)))), false || ((! (_GLF_IDENTITY(true, true && (true))))))))) || false))
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(true, ! (! (true)))))))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    {
                     if(_GLF_WRAPPED_IF_TRUE(true))
                      {
                       barrier();
                      }
                     else
                      {
                      }
                    }
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    {
                     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))) && true))
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        barrier();
                       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false))))
                        barrier();
                      }
                     else
                      {
                       if(_GLF_WRAPPED_IF_FALSE(false))
                        {
                        }
                       else
                        {
                         barrier();
                        }
                      }
                    }
                  }
                 else
                  {
                  }
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   do
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                  }
                 else
                  {
                  }
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   do
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_WRAPPED_IF_TRUE(true))
                        {
                         barrier();
                        }
                       else
                        {
                        }
                       if(_GLF_DEAD(false))
                        barrier();
                      }
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                    {
                     do
                      {
                       if(_GLF_WRAPPED_IF_TRUE(true))
                        {
                         barrier();
                        }
                       else
                        {
                        }
                      }
                     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      {
                       if(_GLF_WRAPPED_IF_TRUE(true))
                        {
                         barrier();
                        }
                       else
                        {
                        }
                      }
                    }
                  }
                 else
                  {
                  }
                }
              }
             else
              {
              }
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) && true)))
                  {
                  }
                 else
                  {
                   barrier();
                  }
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if(_GLF_DEAD(false))
                barrier();
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           if(_GLF_DEAD(false))
            barrier();
          }
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
            }
           barrier();
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).x, float(mat3(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).x, 0.0, determinant(mat3(1.0, 0.0, 0.0, 0.0, cos(0.0), 1.0, 0.0, 0.0, 1.0)), 0.0, 0.0, 0.0, determinant(mat2(1.0, 0.0, 0.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))))), 1.0, round(length(normalize(vec3(1.0, 1.0, 1.0))))))) > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
           barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
        }
      }
     for(int _injected_loop_counter = (_GLF_IDENTITY((0 << _GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_IDENTITY(3, (3) | (3)), ~ (~ (3)))), int(3))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(6)) | _GLF_IDENTITY((int(6)), ((int(6))) << 0))), int(_GLF_IDENTITY(ivec2(_GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(6)) | _GLF_IDENTITY((int(6)), ((int(6))) << 0))), 1), (ivec2(_GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(6)) | _GLF_IDENTITY((int(6)), ((int(6))) << 0))), 1)) + ivec2(0, 0)))), int(int((0 << _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(3, ~ (~ (3)))), min(_GLF_IDENTITY(int(_GLF_IDENTITY(3, ~ (~ (3)))), ~ (~ (int(_GLF_IDENTITY(_GLF_IDENTITY(3, clamp(_GLF_IDENTITY(3, (true ? 3 : _GLF_FUZZED(-73626))), 3, 3)), ~ (~ (3))))))), int(_GLF_IDENTITY(3, ~ (~ (3)))))), int(3))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(6, (6) << 0)), (int(6)) >> (0 << _GLF_IDENTITY(int(1), int(_GLF_IDENTITY(1, min(1, 1)))))), _GLF_IDENTITY(int(6), (int(6)) | _GLF_IDENTITY((int(6)), _GLF_IDENTITY(((int(6))), (((int(6)))) << 0) << 0))))))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != _GLF_IDENTITY(((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4))), (((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4)))) << 0), _GLF_IDENTITY((_GLF_IDENTITY(_injected_loop_counter, _GLF_IDENTITY(0, (0) * ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2)))) + (_GLF_IDENTITY(_injected_loop_counter, (true ? _injected_loop_counter : _GLF_FUZZED(_injected_loop_counter))))) != (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(4, ~ (~ _GLF_IDENTITY((4), ((4)) >> 0)))), int(4))), max(_GLF_IDENTITY((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(4, ~ (~ _GLF_IDENTITY((4), ((4)) >> 0)))), int(4))), (true ? (1 << _GLF_IDENTITY(int(_GLF_IDENTITY(4, ~ _GLF_IDENTITY((~ _GLF_IDENTITY((4), ((4)) >> 0)), max((~ _GLF_IDENTITY((4), ((4)) >> 0)), _GLF_IDENTITY((~ _GLF_IDENTITY((4), ((4)) >> 0)), max((~ _GLF_IDENTITY((4), ((4)) >> 0)), _GLF_IDENTITY((~ _GLF_IDENTITY((4), ((4)) >> 0)), 0 | ((~ _GLF_IDENTITY((4), ((4)) >> 0)))))))))), int(4))) : _GLF_FUZZED(_injected_loop_counter))), (1 << _GLF_IDENTITY(int(_GLF_IDENTITY(4, ~ (~ _GLF_IDENTITY((4), ((4)) >> 0)))), int(4))))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(4, (4) + 0)), int(4)))), ((_GLF_IDENTITY(_injected_loop_counter, 0 + (_GLF_IDENTITY(_injected_loop_counter, (true ? _injected_loop_counter : _GLF_FUZZED(_injected_loop_counter))))) != ((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(4, ~ (~ _GLF_IDENTITY((4), ((4)) >> 0)))), int(4))) >> _GLF_IDENTITY(int(4), int(4))))) || false) || false)); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, max(_injected_loop_counter, _injected_loop_counter)) != 1); _injected_loop_counter ++)
          {
           for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), min(int(4), int(4)))))), true && (_GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), min(int(4), int(4)))))))); _injected_loop_counter ++)
            {
             do
              {
               barrier();
               if(_GLF_DEAD(false))
                barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
          }
        }
       for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), 1 * (int(3))))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(3, (3) - 0)), int(3))); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0), (_GLF_WRAPPED_LOOP(_injected_loop_counter != 0)) && true); _injected_loop_counter --)
        {
         do
          {
           do
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
               if(_GLF_DEAD(false))
                barrier();
              }
             else
              {
               do
                {
                 barrier();
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                       if(_GLF_DEAD(false))
                        barrier();
                      }
                     else
                      {
                       if(_GLF_DEAD(false))
                        barrier();
                       barrier();
                      }
                    }
                   else
                    {
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                       if(_GLF_DEAD(false))
                        barrier();
                      }
                     else
                      {
                       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                        {
                         if(_GLF_DEAD(false))
                          barrier();
                        }
                      }
                    }
                  }
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, true && (true))))
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 else
                  {
                  }
                 if(_GLF_DEAD(false))
                  barrier();
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        }
       do
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))));
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
    }
  }
 else
  {
  }
 uint next_virtual_gid = workgroup_base + subgroup_base + ((subgroup_local_id + 1) % subgroup_size);
 uint read = atomicLoad(buf[_GLF_IDENTITY(virtual_gid, (virtual_gid) ^ 0u)], 4, 64, 2);
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) + 0))
      {
       do
        {
         for(int _injected_loop_counter = _GLF_IDENTITY(0, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-37624) : 0)); _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 | 1)); _GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter ++, 1 * (_GLF_IDENTITY(_injected_loop_counter ++, 0 | (_GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) >> 0))))), (_injected_loop_counter ++) >> 0))
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
            }
           else
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                    {
                     barrier();
                    }
                   else
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                  }
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 else
                  {
                  }
                }
              }
             else
              {
               if(_GLF_DEAD(false))
                barrier();
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2)))); _injected_loop_counter ++)
                {
                 if(_GLF_DEAD(false))
                  {
                   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))) << _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), int(ivec3(int(2), 1, 1))))) >> _GLF_IDENTITY(int(2), int(2)))); _injected_loop_counter ++)
                    {
                     barrier();
                    }
                  }
                }
              }
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
               else
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                  }
                 else
                  {
                   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(((-2164.1582) / 59.96))), float(0.0), bool(true))), injectionSwitch.x))); _injected_loop_counter --)
                    {
                     if(_GLF_WRAPPED_IF_TRUE(true))
                      {
                       do
                        {
                         if(_GLF_WRAPPED_IF_FALSE(false))
                          {
                          }
                         else
                          {
                           do
                            {
                             if((_GLF_IDENTITY(subgroup_local_id % 2, _GLF_IDENTITY(_GLF_IDENTITY(max(_GLF_IDENTITY(subgroup_local_id % 2, 0u ^ (subgroup_local_id % 2)), _GLF_IDENTITY(subgroup_local_id % 2, 0u + (subgroup_local_id % 2))), (max(_GLF_IDENTITY(subgroup_local_id % 2, 0u ^ (subgroup_local_id % 2)), _GLF_IDENTITY(subgroup_local_id % 2, 0u + (subgroup_local_id % 2)))) >> 0u), (_GLF_IDENTITY(max(_GLF_IDENTITY(subgroup_local_id % 2, 0u ^ (subgroup_local_id % 2)), _GLF_IDENTITY(subgroup_local_id % 2, 0u + (subgroup_local_id % 2))), (max(_GLF_IDENTITY(subgroup_local_id % 2, 0u ^ (subgroup_local_id % 2)), _GLF_IDENTITY(subgroup_local_id % 2, 0u + (subgroup_local_id % _GLF_IDENTITY(2, clamp(2, _GLF_IDENTITY(2, clamp(_GLF_IDENTITY(2, min(2, 2)), 2, 2)), 2)))))) >> 0u)) | (_GLF_IDENTITY(max(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) - 0u)) / 1u)) << 0u) % 2, 0u ^ (subgroup_local_id % 2)), _GLF_IDENTITY(subgroup_local_id % 2, 0u + (subgroup_local_id % 2))), (max(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id % 2, 0u ^ (subgroup_local_id % 2)), clamp(_GLF_IDENTITY(subgroup_local_id % 2, 0u ^ (subgroup_local_id % 2)), _GLF_IDENTITY(subgroup_local_id % 2, 0u ^ (subgroup_local_id % 2)), _GLF_IDENTITY(subgroup_local_id % 2, 0u ^ (subgroup_local_id % 2)))), _GLF_IDENTITY(subgroup_local_id % 2, 0u + (subgroup_local_id % 2)))) >> 0u))))) == 0)
                              {
                               if(_GLF_WRAPPED_IF_TRUE(true))
                                {
                                 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                                  {
                                   if(_GLF_DEAD(false))
                                    {
                                     if(_GLF_WRAPPED_IF_FALSE(false))
                                      {
                                      }
                                     else
                                      {
                                       if(_GLF_DEAD(false))
                                        barrier();
                                       barrier();
                                       if(_GLF_DEAD(false))
                                        barrier();
                                      }
                                    }
                                   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
                                    barrier();
                                  }
                                }
                               else
                                {
                                }
                               if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), false || (_GLF_WRAPPED_IF_FALSE(false))))
                                {
                                 if(_GLF_DEAD(false))
                                  barrier();
                                 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bvec4(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(mat3x4(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0), 0.0, 1.0, tan(0.0), 0.0, 1.0, 0.0, tan(0.0), determinant(mat2(sqrt(1.0), 0.0, 1.0, 1.0)), 0.0, 0.0, 1.0))) > injectionSwitch.y)), true, true, false)), bool(bvec4(bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true, false)), false, true, false)))), bool(bvec4(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || _GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec3((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, true))))))), false, true, false)))))
                                  {
                                   if(_GLF_DEAD(false))
                                    {
                                     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, (1) / 1)); _injected_loop_counter ++)
                                      {
                                       barrier();
                                      }
                                     if(_GLF_DEAD(false))
                                      {
                                       if(_GLF_DEAD(false))
                                        barrier();
                                       barrier();
                                      }
                                    }
                                   for(int _injected_loop_counter = (_GLF_IDENTITY(0 & 23404, (0 & 23404) | 0)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                                    {
                                     barrier();
                                    }
                                   if(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, (false) || false)))))
                                    {
                                     if(_GLF_WRAPPED_IF_TRUE(true))
                                      {
                                       barrier();
                                      }
                                     else
                                      {
                                      }
                                    }
                                  }
                                }
                               else
                                {
                                 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                  {
                                   if(_GLF_DEAD(false))
                                    barrier();
                                  }
                                 else
                                  {
                                   if(_GLF_DEAD(false))
                                    barrier();
                                   for(int _injected_loop_counter = 0; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < 1), _GLF_IDENTITY(bool(bvec3(_GLF_WRAPPED_LOOP(_injected_loop_counter < 1), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (bool(bvec3(_GLF_WRAPPED_LOOP(_injected_loop_counter < 1), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))); _injected_loop_counter ++)
                                    {
                                     if(_GLF_DEAD(false))
                                      barrier();
                                     subgroupAll(false);
                                    }
                                  }
                                }
                               for(int _injected_loop_counter = _GLF_IDENTITY(0, int(ivec3(0, 0, 0))); _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY((0 ^ 1), _GLF_IDENTITY(int(ivec3((0 ^ 1), 0, 1)), ~ (~ (int(ivec3((0 ^ 1), 0, 1))))))); _injected_loop_counter ++)
                                {
                                 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(! (_GLF_IDENTITY(! (false), _GLF_IDENTITY(! (_GLF_IDENTITY(! (! (false)), (! (! (false))) || false)), true && (! (_GLF_IDENTITY(! (! (false)), (! (! (false))) || false)))))), ! (! (! (_GLF_IDENTITY(! (false), ! (_GLF_IDENTITY(! (! _GLF_IDENTITY((false), ((false)) && true)), (! (! (false))) || false))))))))))
                                  {
                                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                    {
                                     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, max(_injected_loop_counter, _injected_loop_counter)) > 0); _injected_loop_counter --)
                                      {
                                       if(_GLF_WRAPPED_IF_FALSE(false))
                                        {
                                        }
                                       else
                                        {
                                         barrier();
                                        }
                                      }
                                    }
                                   if(_GLF_DEAD(false))
                                    {
                                     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (false)))))
                                      {
                                      }
                                     else
                                      {
                                       barrier();
                                      }
                                    }
                                   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                                    {
                                     barrier();
                                    }
                                   else
                                    {
                                    }
                                  }
                                 if(_GLF_DEAD(false))
                                  barrier();
                                }
                               if(_GLF_WRAPPED_IF_FALSE(false))
                                {
                                }
                               else
                                {
                                 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), clamp(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))))); _injected_loop_counter --)
                                  {
                                   do
                                    {
                                     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                                      {
                                       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
                                        {
                                         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, false)))))
                                          {
                                           if(_GLF_DEAD(false))
                                            barrier();
                                           do
                                            {
                                             barrier();
                                            }
                                           while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), bool(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), (_GLF_WRAPPED_LOOP(false)) || false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))));
                                          }
                                         do
                                          {
                                           if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bvec2(false, false)))))
                                            {
                                             if(_GLF_DEAD(false))
                                              barrier();
                                            }
                                           else
                                            {
                                             barrier();
                                             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                              barrier();
                                            }
                                           if(_GLF_DEAD(false))
                                            barrier();
                                           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                                            {
                                             if(_GLF_DEAD(false))
                                              barrier();
                                             if(_GLF_DEAD(false))
                                              barrier();
                                             if(_GLF_DEAD(false))
                                              {
                                               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                                                {
                                                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                                  barrier();
                                                }
                                               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                                barrier();
                                               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                                {
                                                 if(_GLF_DEAD(false))
                                                  {
                                                   do
                                                    {
                                                     barrier();
                                                    }
                                                   while(_GLF_WRAPPED_LOOP(false));
                                                  }
                                                }
                                               else
                                                {
                                                 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                                  {
                                                  }
                                                 else
                                                  {
                                                   if(_GLF_DEAD(false))
                                                    barrier();
                                                   barrier();
                                                  }
                                                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                                  {
                                                   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                                                    {
                                                     barrier();
                                                    }
                                                  }
                                                 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(3052.3474)), vec2(_GLF_FUZZED(5.7), (injectionSwitch)[1]), bvec2(false, true))).x > injectionSwitch.y))))))))))
                                                  barrier();
                                                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                                  {
                                                   do
                                                    {
                                                     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, false || (true))))))
                                                      {
                                                       for(int _injected_loop_counter = int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5)))); _injected_loop_counter ++)
                                                        {
                                                         barrier();
                                                        }
                                                      }
                                                     else
                                                      {
                                                      }
                                                    }
                                                   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, false || (false))));
                                                  }
                                                }
                                              }
                                            }
                                          }
                                         while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(-677.904) : injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(4.9) : injectionSwitch.x)), injectionSwitch.x)) > injectionSwitch.y))), ! (! (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))));
                                         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
                                          barrier();
                                         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                                          {
                                           if(_GLF_DEAD(false))
                                            barrier();
                                           barrier();
                                          }
                                         do
                                          {
                                           do
                                            {
                                             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                              barrier();
                                             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                              {
                                              }
                                             else
                                              {
                                               if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, false)))))
                                                {
                                                 do
                                                  {
                                                   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                                                    {
                                                     barrier();
                                                    }
                                                  }
                                                 while(_GLF_WRAPPED_LOOP(false));
                                                }
                                              }
                                             if(_GLF_DEAD(false))
                                              barrier();
                                            }
                                           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                                          }
                                         while(_GLF_WRAPPED_LOOP(false));
                                        }
                                      }
                                     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false))))))))), (injectionSwitch.x > injectionSwitch.y))))
                                      {
                                       if(_GLF_DEAD(false))
                                        barrier();
                                       barrier();
                                      }
                                    }
                                   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y))))));
                                  }
                                }
                               if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))))
                                {
                                 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(false, false || (false)) || (false))))
                                  {
                                   if(_GLF_DEAD(false))
                                    barrier();
                                  }
                                 else
                                  {
                                   barrier();
                                  }
                                 if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
                                  {
                                   for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 ^ 1)); _injected_loop_counter --)
                                    {
                                     if(_GLF_WRAPPED_IF_TRUE(true))
                                      {
                                       if(_GLF_WRAPPED_IF_FALSE(false))
                                        {
                                        }
                                       else
                                        {
                                         barrier();
                                        }
                                      }
                                     else
                                      {
                                      }
                                    }
                                  }
                                }
                               if(_GLF_WRAPPED_IF_TRUE(true))
                                {
                                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                                  {
                                   if(_GLF_DEAD(false))
                                    barrier();
                                   if(_GLF_WRAPPED_IF_FALSE(false))
                                    {
                                    }
                                   else
                                    {
                                     do
                                      {
                                       do
                                        {
                                         if(_GLF_WRAPPED_IF_TRUE(true))
                                          {
                                           atomicStore(buf[next_virtual_gid], uint(1), 4, 64, _GLF_IDENTITY(4, ~ (~ (_GLF_IDENTITY(4, 0 + (4))))));
                                          }
                                         else
                                          {
                                           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - abs(0.0)) > injectionSwitch.y))))
                                            barrier();
                                          }
                                        }
                                       while(_GLF_WRAPPED_LOOP(false));
                                       if(_GLF_WRAPPED_IF_FALSE(false))
                                        {
                                        }
                                       else
                                        {
                                         if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
                                          {
                                           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                            barrier();
                                           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                                            {
                                             barrier();
                                             if(_GLF_DEAD(false))
                                              barrier();
                                            }
                                           else
                                            {
                                            }
                                          }
                                        }
                                      }
                                     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                                    }
                                   if(_GLF_WRAPPED_IF_FALSE(false))
                                    {
                                    }
                                   else
                                    {
                                     do
                                      {
                                       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                                        {
                                         if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
                                          {
                                           do
                                            {
                                             if(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, bool(bool(false)))))))
                                              {
                                               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                                                {
                                                 barrier();
                                                }
                                               else
                                                {
                                                }
                                              }
                                            }
                                           while(_GLF_WRAPPED_LOOP(false));
                                           if(_GLF_WRAPPED_IF_TRUE(true))
                                            {
                                             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                              barrier();
                                             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                              {
                                              }
                                             else
                                              {
                                               if(_GLF_WRAPPED_IF_FALSE(false))
                                                {
                                                }
                                               else
                                                {
                                                 barrier();
                                                }
                                               if(_GLF_DEAD(false))
                                                barrier();
                                              }
                                            }
                                           else
                                            {
                                            }
                                          }
                                        }
                                       for(int _injected_loop_counter = (-35257 & 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(1, min(1, 1))); _injected_loop_counter ++)
                                        {
                                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                          barrier();
                                        }
                                       if(_GLF_DEAD(false))
                                        barrier();
                                      }
                                     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)))), injectionSwitch)).y))));
                                     if(_GLF_WRAPPED_IF_FALSE(false))
                                      {
                                       do
                                        {
                                         if(_GLF_DEAD(false))
                                          barrier();
                                        }
                                       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                                      }
                                     else
                                      {
                                       if(_GLF_DEAD(false))
                                        barrier();
                                       if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, (false) || false)))))
                                        {
                                         do
                                          {
                                           barrier();
                                          }
                                         while(_GLF_WRAPPED_LOOP(false));
                                        }
                                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                        barrier();
                                      }
                                     do
                                      {
                                       if(_GLF_DEAD(false))
                                        {
                                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                          {
                                           if(_GLF_DEAD(false))
                                            {
                                             if(_GLF_DEAD(false))
                                              barrier();
                                             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                              barrier();
                                             barrier();
                                            }
                                           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (_GLF_IDENTITY(0 | (62687 & 0), ~ (~ (0 | (62687 & 0)))))); _injected_loop_counter --)
                                            {
                                             if(_GLF_DEAD(false))
                                              {
                                               if(_GLF_DEAD(false))
                                                barrier();
                                               barrier();
                                              }
                                             barrier();
                                            }
                                          }
                                         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > (0 | 0), (_injected_loop_counter > (0 | 0)) || false)); _injected_loop_counter --)
                                          {
                                           if(_GLF_DEAD(false))
                                            {
                                             if(_GLF_DEAD(false))
                                              {
                                               if(_GLF_DEAD(false))
                                                barrier();
                                               barrier();
                                              }
                                             if(_GLF_DEAD(false))
                                              barrier();
                                             if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))))))))
                                              {
                                               if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true))))
                                                barrier();
                                              }
                                             else
                                              {
                                               if(_GLF_WRAPPED_IF_FALSE(false))
                                                {
                                                }
                                               else
                                                {
                                                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                                  barrier();
                                                 barrier();
                                                }
                                              }
                                            }
                                           do
                                            {
                                             if(_GLF_DEAD(false))
                                              barrier();
                                             if(_GLF_DEAD(false))
                                              barrier();
                                             barrier();
                                             if(_GLF_DEAD(false))
                                              {
                                               if(_GLF_DEAD(false))
                                                {
                                                 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                                  {
                                                  }
                                                 else
                                                  {
                                                   barrier();
                                                  }
                                                }
                                               barrier();
                                              }
                                            }
                                           while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))));
                                          }
                                        }
                                      }
                                     while(_GLF_WRAPPED_LOOP(false));
                                    }
                                  }
                                }
                               else
                                {
                                }
                              }
                             else
                              {
                               if(_GLF_DEAD(false))
                                barrier();
                               if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) && true)))
                                {
                                }
                               else
                                {
                                 if(_GLF_WRAPPED_IF_TRUE(true))
                                  {
                                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                    barrier();
                                   if(_GLF_DEAD(false))
                                    barrier();
                                   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))))
                                    barrier();
                                   do
                                    {
                                     do
                                      {
                                       if(_GLF_WRAPPED_IF_FALSE(false))
                                        {
                                        }
                                       else
                                        {
                                         if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), bool(bvec4(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true))), (injectionSwitch.x > injectionSwitch.y))))
                                          {
                                           if(_GLF_DEAD(false))
                                            barrier();
                                           barrier();
                                           if(_GLF_DEAD(false))
                                            barrier();
                                          }
                                         if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), true && (! (_GLF_DEAD(false)))))))
                                          barrier();
                                         if(_GLF_DEAD(false))
                                          {
                                           for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 & 1)); _injected_loop_counter ++)
                                            {
                                             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                              barrier();
                                            }
                                           barrier();
                                          }
                                         if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(true && (false), true && (true && (_GLF_IDENTITY(false, true && (false))))))))
                                          barrier();
                                         subgroupAll(false);
                                         if(_GLF_DEAD(false))
                                          {
                                           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), bool(bool(! (injectionSwitch.x > injectionSwitch.y))))))))))
                                            barrier();
                                           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                            {
                                             do
                                              {
                                               if(_GLF_DEAD(false))
                                                {
                                                 if(_GLF_WRAPPED_IF_TRUE(true))
                                                  {
                                                   barrier();
                                                  }
                                                 else
                                                  {
                                                  }
                                                }
                                              }
                                             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                                             barrier();
                                            }
                                           barrier();
                                          }
                                        }
                                      }
                                     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                                    }
                                   while(_GLF_WRAPPED_LOOP(false));
                                   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                                    {
                                     if(_GLF_DEAD(false))
                                      {
                                       do
                                        {
                                         barrier();
                                        }
                                       while(_GLF_WRAPPED_LOOP(false));
                                      }
                                    }
                                   else
                                    {
                                    }
                                  }
                                 else
                                  {
                                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                    {
                                     if(_GLF_DEAD(false))
                                      barrier();
                                     barrier();
                                    }
                                   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
                                    barrier();
                                   do
                                    {
                                     if(_GLF_DEAD(false))
                                      {
                                       if(_GLF_WRAPPED_IF_TRUE(true))
                                        {
                                         if(_GLF_DEAD(false))
                                          {
                                           if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec4(true, true, false, true)), (bool(bvec4(true, true, false, true))) && true))))
                                            {
                                             barrier();
                                            }
                                           else
                                            {
                                            }
                                          }
                                         barrier();
                                        }
                                       else
                                        {
                                        }
                                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                        barrier();
                                      }
                                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                      barrier();
                                    }
                                   while(_GLF_WRAPPED_LOOP(false));
                                   if(_GLF_WRAPPED_IF_FALSE(false))
                                    {
                                    }
                                   else
                                    {
                                     if(_GLF_DEAD(false))
                                      barrier();
                                    }
                                  }
                                }
                               do
                                {
                                 if(_GLF_WRAPPED_IF_FALSE(false))
                                  {
                                  }
                                 else
                                  {
                                   for(int _injected_loop_counter = _GLF_IDENTITY((1 ^ 0), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(14715) : (1 ^ 0))); _GLF_WRAPPED_LOOP(_injected_loop_counter > (1 ^ 1)); _injected_loop_counter --)
                                    {
                                     if(_GLF_DEAD(false))
                                      barrier();
                                     if(_GLF_DEAD(false))
                                      barrier();
                                    }
                                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                    barrier();
                                  }
                                }
                               while(_GLF_WRAPPED_LOOP(false));
                               if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
                                {
                                 if(_GLF_DEAD(false))
                                  barrier();
                                 barrier();
                                }
                               if(_GLF_WRAPPED_IF_FALSE(false))
                                {
                                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                  barrier();
                                 if(_GLF_DEAD(false))
                                  barrier();
                                }
                               else
                                {
                                 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > ((0 | 0) << _GLF_IDENTITY(int(_GLF_IDENTITY(5, min(5, 5))), int(5)))); _injected_loop_counter --)
                                  {
                                   if(_GLF_DEAD(false))
                                    {
                                     for(int _injected_loop_counter = int(_GLF_ZERO(_GLF_IDENTITY(0.0, min(0.0, 0.0)), injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                                      {
                                       do
                                        {
                                         if(_GLF_DEAD(false))
                                          barrier();
                                         if(_GLF_DEAD(false))
                                          barrier();
                                        }
                                       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                                       if(_GLF_DEAD(false))
                                        barrier();
                                       barrier();
                                      }
                                    }
                                  }
                                }
                               if(_GLF_DEAD(false))
                                barrier();
                               do
                                {
                                 if(_GLF_DEAD(false))
                                  barrier();
                                 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                  {
                                  }
                                 else
                                  {
                                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                    {
                                     if(_GLF_WRAPPED_IF_FALSE(false))
                                      {
                                      }
                                     else
                                      {
                                       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 | 0)); _injected_loop_counter --)
                                        {
                                         barrier();
                                        }
                                      }
                                    }
                                  }
                                }
                               while(_GLF_WRAPPED_LOOP(false));
                               if(_GLF_WRAPPED_IF_TRUE(true))
                                {
                                 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec4(false, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, ! (! (false)))))))))), (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY((injectionSwitch.x), float(vec2((injectionSwitch.x), abs(0.0)))) / 1.0) > injectionSwitch.y))))
                                  barrier();
                                }
                               else
                                {
                                }
                               do
                                {
                                 for(int _injected_loop_counter = int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED((-4369.4266)), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(2.8)), bvec2(true, false))).y)); _GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), bool(_GLF_IDENTITY(bvec2(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), false), bvec2(bvec2(_GLF_IDENTITY(bvec2(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), false), _GLF_IDENTITY(bvec2(bvec2(bvec2(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > 0, ! (! (_injected_loop_counter > 0)))), false))), bvec2(bvec4(bvec2(bvec2(bvec2(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), false))), true, false)))))))))) || false), bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), bool(_GLF_IDENTITY(bvec2(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), false), bvec2(bvec2(_GLF_IDENTITY(bvec2(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), false), _GLF_IDENTITY(bvec2(bvec2(bvec2(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), false))), bvec2(bvec4(bvec2(bvec2(bvec2(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), false))), true, false))))))))), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), bool(_GLF_IDENTITY(bvec2(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), false), bvec2(bvec2(_GLF_IDENTITY(bvec2(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), false), _GLF_IDENTITY(bvec2(bvec2(bvec2(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), false))), bvec2(bvec4(bvec2(bvec2(bvec2(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), false))), true, false))))))))), false, true), bvec3(bvec3(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), bool(_GLF_IDENTITY(bvec2(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), false), bvec2(bvec2(_GLF_IDENTITY(bvec2(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), false), _GLF_IDENTITY(bvec2(bvec2(bvec2(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), false))), bvec2(bvec4(bvec2(bvec2(bvec2(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), false))), true, false))))))))), false, true))))))) || false), _GLF_IDENTITY(true, (true) || false) && (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > 0, (_injected_loop_counter > 0) && true)), (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), bool(_GLF_IDENTITY(bvec2(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), false), bvec2(bvec2(_GLF_IDENTITY(bvec2(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), _GLF_IDENTITY(false, bool(bvec4(false, true, true, true)))), _GLF_IDENTITY(bvec2(bvec2(bvec2(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), false))), bvec2(bvec4(bvec2(bvec2(bvec2(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), false))), true, false)))))))))) || false))), true, false))); _GLF_IDENTITY(_injected_loop_counter --, _GLF_IDENTITY((_GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) / 1)), (_GLF_IDENTITY((_GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) / 1)), ((_GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) / 1))) << 0)) | int(_GLF_ZERO(0.0, injectionSwitch.x))) - 0))
                                  {
                                   if(_GLF_WRAPPED_IF_TRUE(true))
                                    {
                                     if(_GLF_WRAPPED_IF_FALSE(false))
                                      {
                                      }
                                     else
                                      {
                                       do
                                        {
                                         for(int _injected_loop_counter = (_GLF_IDENTITY(0 >> _GLF_IDENTITY(int(4), int(4)), _GLF_IDENTITY((0 >> _GLF_IDENTITY(int(4), int(4))) | (0 >> _GLF_IDENTITY(int(4), int(4))), ((0 >> _GLF_IDENTITY(int(4), int(4))) | (0 >> _GLF_IDENTITY(int(4), int(4)))) / (_GLF_IDENTITY(1 ^ 0, clamp(1 ^ 0, _GLF_IDENTITY(1 ^ 0, max(1 ^ 0, 1 ^ 0)), 1 ^ 0)))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), clamp(_GLF_IDENTITY(int(3), clamp(int(3), _GLF_IDENTITY(int(3), (false ? _GLF_FUZZED((_injected_loop_counter ++)) : int(3))), int(3))), _GLF_IDENTITY(int(3), (int(3)) ^ 0), int(3)))))); _injected_loop_counter ++)
                                          {
                                           if(_GLF_DEAD(false))
                                            {
                                             if(_GLF_DEAD(false))
                                              barrier();
                                             if(_GLF_WRAPPED_IF_FALSE(false))
                                              {
                                              }
                                             else
                                              {
                                               barrier();
                                              }
                                            }
                                           if(_GLF_WRAPPED_IF_FALSE(false))
                                            {
                                            }
                                           else
                                            {
                                             for(int _injected_loop_counter = _GLF_IDENTITY((1 ^ 0), int(ivec2((1 ^ 0), 0))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                                              {
                                               for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(int(3), (_GLF_IDENTITY(int(3), (int(3)) | 0)) << (0 >> _GLF_IDENTITY(int(1), int(1)))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                                                {
                                                 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                                                  {
                                                   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                                                    {
                                                     do
                                                      {
                                                       if(_GLF_DEAD(false))
                                                        barrier();
                                                       if(_GLF_DEAD(false))
                                                        barrier();
                                                      }
                                                     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                                                    }
                                                  }
                                                 else
                                                  {
                                                  }
                                                 for(int _injected_loop_counter = _GLF_IDENTITY(0, _GLF_IDENTITY((_GLF_IDENTITY(0, 0 + (_GLF_IDENTITY(_GLF_IDENTITY(0, (0) << int(_GLF_ZERO(0.0, injectionSwitch.x))), (0) | (0))))), 0 ^ (_GLF_IDENTITY((_GLF_IDENTITY(0, min(0, 0))), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY((0), max((0), (0))) : _GLF_FUZZED(atomicAnd(_injected_loop_counter, _injected_loop_counter)))))) * 1); _GLF_WRAPPED_LOOP(_injected_loop_counter < (_GLF_IDENTITY(0, int(ivec2(0, 1))) ^ 1)); _GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) | 0))
                                                  {
                                                   atomicStore(buf[next_virtual_gid], uint(1), 4, 64, 4);
                                                  }
                                                 if(_GLF_DEAD(false))
                                                  barrier();
                                                }
                                              }
                                            }
                                          }
                                        }
                                       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))));
                                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                        barrier();
                                      }
                                    }
                                   else
                                    {
                                    }
                                   if(_GLF_DEAD(false))
                                    {
                                     if(_GLF_WRAPPED_IF_FALSE(false))
                                      {
                                      }
                                     else
                                      {
                                       barrier();
                                      }
                                    }
                                  }
                                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                  barrier();
                                 if(_GLF_DEAD(false))
                                  barrier();
                                }
                               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, length(vec2(0.0, 0.0)) + (_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0)))))));
                              }
                            }
                           while(_GLF_WRAPPED_LOOP(false));
                          }
                        }
                       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                       do
                        {
                         if(_GLF_DEAD(false))
                          barrier();
                         if(_GLF_DEAD(false))
                          barrier();
                         if(_GLF_DEAD(false))
                          barrier();
                        }
                       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(mat4x2(injectionSwitch.x, 0.0, 1.0, _GLF_IDENTITY(dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 1.0, 0.0, 0.0)), dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 1.0, 0.0, 0.0))), 1.0, cos(0.0), 0.0, 0.0))) > injectionSwitch.y))))
                        barrier();
                       if(_GLF_DEAD(false))
                        barrier();
                       if(_GLF_DEAD(false))
                        {
                         if(_GLF_DEAD(false))
                          barrier();
                         if(_GLF_DEAD(false))
                          {
                           if(_GLF_DEAD(false))
                            barrier();
                           barrier();
                          }
                         do
                          {
                           barrier();
                          }
                         while(_GLF_WRAPPED_LOOP(false));
                        }
                      }
                     else
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        {
                         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (injectionSwitch.x > injectionSwitch.y))))
                          {
                          }
                         else
                          {
                           barrier();
                          }
                        }
                      }
                    }
                  }
                }
              }
             else
              {
              }
            }
          }
         if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(false))
        barrier();
      }
    }
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(mat2x4(injectionSwitch.x, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0))) > injectionSwitch.y))))
  {
  }
 else
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, bool(bvec4(true, true, true, true))), (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
   else
    {
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))), (_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false))))) || false))
      barrier();
     barrier();
    }
  }
 subgroupBarrier();
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         do
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))))))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
             for(int _injected_loop_counter = (1 & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 << _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (int(2)) | (_GLF_IDENTITY(int(2), int(ivec2(int(2), 0)))))))); _injected_loop_counter --)
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
                barrier();
              }
             barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 ^ int(_GLF_ONE(1.0, injectionSwitch.y)))); _injected_loop_counter ++)
            {
             do
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     barrier();
                     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
                      barrier();
                    }
                  }
                }
               else
                {
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
             if(_GLF_DEAD(false))
              barrier();
            }
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             do
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   barrier();
                  }
                 else
                  {
                  }
                }
               if(_GLF_DEAD(false))
                {
                 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                  }
                 else
                  {
                   barrier();
                  }
                }
               if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), (_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true), (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(mat3(injectionSwitch, _GLF_ONE(1.0, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0), clamp(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0), _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0), (true ? _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0) : _GLF_FUZZED((true ? 6.2 : -2271.5515))))))), 0.0, 1.0, cos(0.0), _GLF_IDENTITY(_GLF_IDENTITY(1.0, max(1.0, 1.0)), clamp(1.0, _GLF_IDENTITY(1.0, 0.0 + (1.0)), 1.0)), sqrt(1.0), sqrt(1.0)))).y, ! (! _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), true && (! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).y)))), ! (! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(true && (! ((injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bool(bvec4(true && (! ((injectionSwitch.x > injectionSwitch.y))), true, false, true)), ! (! (_GLF_IDENTITY(bool(bvec4(true && (! ((injectionSwitch.x > injectionSwitch.y))), true, false, true)), bool(bvec4(bool(bvec4(true && (! ((injectionSwitch.x > injectionSwitch.y))), true, false, true)), _GLF_IDENTITY(true, false || (true)), false, false)))))))))))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(! (_GLF_IDENTITY(_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), true && (! ((injectionSwitch.x > injectionSwitch.y)))), ! (! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(true && (! ((injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bool(bvec4(true && (! ((injectionSwitch.x > injectionSwitch.y))), true, false, true)), ! (! (_GLF_IDENTITY(bool(bvec4(true && (! ((injectionSwitch.x > injectionSwitch.y))), true, false, true)), bool(bvec4(bool(bvec4(true && (! ((injectionSwitch.x > injectionSwitch.y))), true, false, true)), true, false, false)))))))))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true), bvec3(bvec3(bvec3(! (_GLF_IDENTITY(_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), true && (! ((injectionSwitch.x > injectionSwitch.y)))), ! (! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(true && (! ((injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bool(bvec4(true && (! ((injectionSwitch.x > injectionSwitch.y))), true, false, true)), ! (! (_GLF_IDENTITY(bool(bvec4(true && (! ((injectionSwitch.x > injectionSwitch.y))), true, false, true)), bool(bvec4(bool(bvec4(true && (! ((injectionSwitch.x > injectionSwitch.y))), true, false, true)), true, false, false)))))))))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))))), (bool(_GLF_IDENTITY(bvec3(! (_GLF_IDENTITY(_GLF_IDENTITY(! ((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).x > _GLF_IDENTITY(injectionSwitch, vec2(mat2(injectionSwitch, 1.0, 1.0))).y)), true && (! ((injectionSwitch.x > injectionSwitch.y)))), ! (! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(true && (! ((injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bool(bvec4(true && (! ((injectionSwitch.x > injectionSwitch.y))), true, false, true)), ! (! (_GLF_IDENTITY(bool(bvec4(true && (! ((injectionSwitch.x > injectionSwitch.y))), true, false, true)), _GLF_IDENTITY(bool(bvec4(bool(bvec4(true && (! ((injectionSwitch.x > injectionSwitch.y))), true, false, true)), true, false, false)), ! (! (bool(bvec4(bool(bvec4(true && (! ((injectionSwitch.x > injectionSwitch.y))), true, false, true)), true, false, false))))))))))))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true), bvec3(bvec3(bvec3(! (_GLF_IDENTITY(_GLF_IDENTITY(! ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bvec3(injectionSwitch.x > injectionSwitch.y, true, false)), bool(bvec4(bool(bvec3(injectionSwitch.x > injectionSwitch.y, true, false)), false, true, false)))))), true && (! ((injectionSwitch.x > injectionSwitch.y)))), ! (! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(true && (! ((injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bool(bvec4(true && (! ((injectionSwitch.x > injectionSwitch.y))), true, false, true)), ! (! (_GLF_IDENTITY(bool(bvec4(true && (! ((injectionSwitch.x > injectionSwitch.y))), true, false, true)), bool(bvec4(bool(bvec4(true && (! ((injectionSwitch.x > injectionSwitch.y))), true, false, true)), true, false, false)))))))))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)))))) && true))))))))))))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 for(int _injected_loop_counter = _GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, ~ (~ (0))))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                  {
                   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, (false) || false))), ! (! _GLF_IDENTITY((false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || ((false)))))))
                    {
                     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, ! (! (false))), true), bvec2(bvec2(bvec2(_GLF_IDENTITY(false, ! (! (false))), true))))))))
                      {
                       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) < _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y)), false || (_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x < injectionSwitch.y), (! (injectionSwitch.x < injectionSwitch.y)) || false)))))))))
                        {
                         if(_GLF_DEAD(false))
                          {
                           do
                            {
                             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (! (injectionSwitch.x < injectionSwitch.y)))), ! (! ((_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (! (injectionSwitch.x < injectionSwitch.y))))))))))
                              {
                               do
                                {
                                 barrier();
                                }
                               while(_GLF_WRAPPED_LOOP(false));
                              }
                             else
                              {
                              }
                            }
                           while(_GLF_WRAPPED_LOOP(false));
                          }
                         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                          {
                           if(_GLF_DEAD(false))
                            barrier();
                          }
                        }
                       else
                        {
                        }
                       barrier();
                      }
                     if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
                      barrier();
                     if(_GLF_DEAD(false))
                      barrier();
                     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-536.486), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(9014.1625)), bvec2(true, false))).y))))
                      {
                      }
                     else
                      {
                       barrier();
                      }
                    }
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                  }
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 do
                  {
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(8), int(8))); _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
                      {
                       if(_GLF_WRAPPED_IF_TRUE(true))
                        {
                         if(_GLF_WRAPPED_IF_FALSE(false))
                          {
                          }
                         else
                          {
                           if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                            {
                             if(_GLF_WRAPPED_IF_FALSE(false))
                              {
                               if(_GLF_DEAD(false))
                                barrier();
                              }
                             else
                              {
                               if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
                                {
                                 if(_GLF_DEAD(false))
                                  barrier();
                                 barrier();
                                }
                               if(_GLF_DEAD(false))
                                barrier();
                              }
                             barrier();
                            }
                           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                            barrier();
                           for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4))); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0), false || (_GLF_WRAPPED_LOOP(_injected_loop_counter != 0))); _injected_loop_counter --)
                            {
                             do
                              {
                               for(int _injected_loop_counter = (_GLF_IDENTITY(0, (0) << (_GLF_IDENTITY(0, (0) ^ 0) | int(_GLF_ZERO(0.0, injectionSwitch.x)))) << _GLF_IDENTITY(int(0), int(0))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                                {
                                 do
                                  {
                                   if(_GLF_DEAD(false))
                                    barrier();
                                   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, true, true)))))
                                    barrier();
                                  }
                                 while(_GLF_WRAPPED_LOOP(false));
                                }
                               if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false))))
                                barrier();
                               if(_GLF_DEAD(false))
                                barrier();
                              }
                             while(_GLF_WRAPPED_LOOP(false));
                            }
                           if(_GLF_WRAPPED_IF_TRUE(true))
                            {
                             if(_GLF_DEAD(false))
                              barrier();
                             barrier();
                            }
                           else
                            {
                            }
                          }
                        }
                       else
                        {
                        }
                      }
                    }
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)))).y, min(_GLF_IDENTITY(injectionSwitch.y, float(mat2x4(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0))), injectionSwitch.y)), _GLF_IDENTITY(float(mat4x3(_GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, float(mat2x4(injectionSwitch.y, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0))), injectionSwitch.y)), 0.0, 1.0, 0.0, 1.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), log(_GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, mix(float(_GLF_IDENTITY(1.0, _GLF_IDENTITY(float(_GLF_IDENTITY(mat4x2(1.0, abs(1.0), 1.0, 1.0, 0.0, 0.0, 0.0, 0.0), mat4x2(mat4x3(_GLF_IDENTITY(mat4x2(1.0, abs(1.0), 1.0, 1.0, 0.0, 0.0, 0.0, 0.0), (false ? _GLF_FUZZED(mat4x2(27.24, 22.62, 3.9, 8415.9758, 85.33, -2812.6007, 8.6, -92.00)) : mat4x2(1.0, abs(1.0), 1.0, 1.0, 0.0, 0.0, 0.0, 0.0))))))), mix(float(_GLF_FUZZED(5137.0166)), float(float(_GLF_IDENTITY(mat4x2(1.0, abs(1.0), 1.0, 1.0, 0.0, 0.0, 0.0, 0.0), mat4x2(mat4x3(_GLF_IDENTITY(mat4x2(1.0, abs(1.0), 1.0, 1.0, 0.0, 0.0, 0.0, 0.0), (false ? _GLF_FUZZED(mat4x2(27.24, 22.62, 3.9, 8415.9758, 85.33, -2812.6007, 8.6, -92.00)) : mat4x2(1.0, abs(1.0), 1.0, 1.0, 0.0, 0.0, 0.0, 0.0)))))))), bool(true))))), float(_GLF_FUZZED((-47.75 * -6.6))), bool(false))), 1.0))), 1.0, 0.0, 0.0, 1.0)), (true ? float(mat4x3(_GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, float(mat2x4(injectionSwitch.y, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, _GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(3.9)), bool(false)))))), injectionSwitch.y)), 0.0, 1.0, 0.0, 1.0, 1.0, _GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), _GLF_IDENTITY(float(mat2x3(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), min(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y))), 0.0, determinant(mat2(0.0, 0.0, _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(fract(3649.9551)) : 0.0)), sin(0.0))), 1.0, 1.0, determinant(mat3(1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0)))), (false ? _GLF_FUZZED(-6197.9113) : float(mat2x3(_GLF_IDENTITY(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))), min(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y))), 0.0, determinant(mat2(0.0, 0.0, 0.0, sin(0.0))), 1.0, 1.0, determinant(mat3(1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0))))))), log(1.0), 1.0, 0.0, 0.0, 1.0)) : _GLF_FUZZED(5.7))))))));
            }
           if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
            barrier();
           for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
            {
             if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), _GLF_IDENTITY(true && (! (false)), true && (true && (! (false)))))))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(! (_GLF_IDENTITY(! (false), true && (! (false)))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (! (_GLF_IDENTITY(! (false), true && (! (false)))))))), bool(bool(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, ! (! (false)))), _GLF_IDENTITY(true, bool(bvec2(true, true))) && (! (false)))))))))) || false))
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                 if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
                  barrier();
                }
               else
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(false))
                      {
                       do
                        {
                         barrier();
                        }
                       while(_GLF_WRAPPED_LOOP(false));
                      }
                     barrier();
                    }
                  }
                 else
                  {
                  }
                }
               barrier();
              }
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), clamp(_GLF_IDENTITY((injectionSwitch) * mat2(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(-68.53) : _GLF_IDENTITY(1.0, (1.0) / 1.0)))), mix(vec2(_GLF_FUZZED(331.562), _GLF_IDENTITY(((injectionSwitch) * mat2(1.0))[_GLF_IDENTITY(1, (_GLF_IDENTITY(1, _GLF_IDENTITY(~ (_GLF_IDENTITY(~ (1), clamp(~ (1), ~ (1), ~ _GLF_IDENTITY((1), max((_GLF_IDENTITY(1, max(1, _GLF_IDENTITY(1, clamp(1, 1, 1))))), (1)))))), ~ (_GLF_IDENTITY(~ (~ (_GLF_IDENTITY(~ (1), clamp(~ (1), ~ (1), ~ (_GLF_IDENTITY(1, int(ivec3(1, (0 >> _GLF_IDENTITY(int(0), int(0))), 0)))))))), (~ (~ (_GLF_IDENTITY(~ (1), clamp(~ (1), ~ _GLF_IDENTITY((1), clamp(_GLF_IDENTITY((1), max((1), (1))), (1), (1))), _GLF_IDENTITY(~ (1), (~ (1)) >> 0)))))) / 1))))) | (_GLF_IDENTITY(1, 0 ^ _GLF_IDENTITY((_GLF_IDENTITY(1, min(1, _GLF_IDENTITY(1, (false ? _GLF_FUZZED(19657) : 1))))), clamp((_GLF_IDENTITY(1, min(1, _GLF_IDENTITY(1, (false ? _GLF_FUZZED(19657) : 1))))), (_GLF_IDENTITY(1, min(1, _GLF_IDENTITY(1, (false ? _GLF_FUZZED(19657) : 1))))), _GLF_IDENTITY((_GLF_IDENTITY(1, _GLF_IDENTITY(min(1, _GLF_IDENTITY(1, (false ? _GLF_FUZZED(19657) : 1))), int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (min(1, _GLF_IDENTITY(1, (false ? _GLF_FUZZED(19657) : 1))))))), ~ (~ ((_GLF_IDENTITY(1, min(1, _GLF_IDENTITY(1, (false ? _GLF_FUZZED(19657) : 1)))))))))))))], ((_GLF_IDENTITY((injectionSwitch) * mat2(1.0), (false ? _GLF_FUZZED(injectionSwitch) : (injectionSwitch) * mat2(1.0))))[_GLF_IDENTITY(1, (_GLF_IDENTITY(1, ~ (_GLF_IDENTITY(~ (1), clamp(~ (1), ~ (1), ~ (1)))))) | (_GLF_IDENTITY(1, _GLF_IDENTITY(0 ^ (1), ~ (~ (_GLF_IDENTITY(0 ^ (1), (true ? 0 ^ (1) : _GLF_FUZZED(_injected_loop_counter)))))))))]) / 1.0)), vec2((_GLF_IDENTITY((injectionSwitch), (true ? (injectionSwitch) : _GLF_FUZZED(exp(mat2(1.1, 784.842, 0.8, 4.6)[0])))) * mat2(1.0))[0], _GLF_FUZZED(7723.0811)), bvec2(true, false))), (injectionSwitch) * _GLF_IDENTITY(mat2(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0))), (mat2(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)))) / mat2(1.0, 1.0, 1.0, 1.0)), (injectionSwitch) * mat2(1.0)))).x, (injectionSwitch.x) * 1.0) > _GLF_IDENTITY(injectionSwitch.y, (true ? _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)) : _GLF_FUZZED(distance((mat2x4(761.263, -1.7, -4.0, -33.77, -4333.4758, 9286.3277, -2.2, _GLF_IDENTITY(9.1, float(mat2(_GLF_IDENTITY(9.1, min(9.1, 9.1)), 0.0, 1.0, 0.0)))) * _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * _GLF_IDENTITY(mat2(1.0), (false ? _GLF_FUZZED(mat2(-539.829, -1.2, 798.295, 45.63)) : mat2(1.0))))), vec4(_GLF_IDENTITY(-5.0, (-5.0) + 0.0), -6716.0935, 3940.8241, -25.70)))))))));
        }
       if(_GLF_DEAD(false))
        {
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(false || (injectionSwitch.x > injectionSwitch.y), true && (false || (injectionSwitch.x > injectionSwitch.y))))))));
        }
      }
     else
      {
       for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter > 0)))); _injected_loop_counter --)
        {
         if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec4((injectionSwitch.x > injectionSwitch.y), false, true, true)))) && true))))
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
              barrier();
            }
           else
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (false)))))
              {
              }
             else
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
        }
      }
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-1.2)), float(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))), bool(true))) > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-1.2)), float(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), min(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))))) / 1.0)), bool(true))) > injectionSwitch.y)))), false || ((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-1.2)), float(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))), bool(true))) > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-1.2)), float(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), min(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))))) / 1.0)), bool(true))) > injectionSwitch.y)))))))))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           if(_GLF_DEAD(false))
            {
             do
              {
               do
                {
                 barrier();
                }
               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
          }
        }
      }
     else
      {
      }
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
  }
 else
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
      {
       atomicStore(buf[virtual_gid], read, 4, 64, 4);
      }
    }
   do
    {
     if(_GLF_DEAD(false))
      barrier();
     do
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
         else
          {
          }
        }
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(false))
        {
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
     else
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(bvec3((injectionSwitch.x > injectionSwitch.y), false, false)), bool(bvec2(bool(bvec3((injectionSwitch.x > injectionSwitch.y), false, false)), false)))))))
          {
          }
         else
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || false)) && true)))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           else
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, ! _GLF_IDENTITY(_GLF_IDENTITY((! (_GLF_IDENTITY(false, true && (false)))), bool(bvec3((! (_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), bool(bool(_GLF_IDENTITY(false, true && (false))))))), false, _GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)) : _GLF_FUZZED(vec2(7360.3350, -8171.6804)))), _GLF_IDENTITY(clamp(injectionSwitch, injectionSwitch, injectionSwitch), clamp(clamp(injectionSwitch, injectionSwitch, injectionSwitch), clamp(injectionSwitch, injectionSwitch, injectionSwitch), _GLF_IDENTITY(clamp(injectionSwitch, injectionSwitch, injectionSwitch), min(clamp(injectionSwitch, injectionSwitch, injectionSwitch), clamp(injectionSwitch, injectionSwitch, injectionSwitch)))))).x > injectionSwitch.y), false || ((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)) : _GLF_FUZZED(vec2(_GLF_IDENTITY(7360.3350, (7360.3350) - 0.0), -8171.6804)))), clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))))), ! (! (_GLF_IDENTITY((! (_GLF_IDENTITY(false, true && (false)))), bool(bvec3((! (_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), bool(bool(_GLF_IDENTITY(false, true && (false))))))), false, _GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)) : _GLF_FUZZED(vec2(7360.3350, -8171.6804)))), _GLF_IDENTITY(clamp(injectionSwitch, injectionSwitch, injectionSwitch), clamp(clamp(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), injectionSwitch, injectionSwitch), clamp(injectionSwitch, injectionSwitch, injectionSwitch), _GLF_IDENTITY(clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat4(injectionSwitch, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, determinant(mat2(1.0, 0.0, 0.0, abs(1.0))), 0.0, 0.0, sqrt(1.0))), (vec2(mat4(injectionSwitch, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, determinant(mat2(1.0, 0.0, 0.0, abs(1.0))), 0.0, 0.0, sqrt(1.0)))) - vec2(0.0, 0.0))), injectionSwitch), min(clamp(injectionSwitch, injectionSwitch, injectionSwitch), clamp(injectionSwitch, injectionSwitch, injectionSwitch)))))).x > injectionSwitch.y), false || ((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)) : _GLF_FUZZED(vec2(_GLF_IDENTITY(7360.3350, (7360.3350) - 0.0), -8171.6804)))), clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x, clamp(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)) : _GLF_FUZZED(vec2(_GLF_IDENTITY(7360.3350, (7360.3350) - 0.0), -8171.6804)))), clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)) : _GLF_FUZZED(vec2(_GLF_IDENTITY(7360.3350, (7360.3350) - 0.0), -8171.6804)))), clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)) : _GLF_FUZZED(vec2(_GLF_IDENTITY(7360.3350, (7360.3350) - 0.0), -8171.6804)))), clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x)) > injectionSwitch.y)))))))))))))
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), 0 ^ (int(2))))) >> _GLF_IDENTITY(int(2), int(2))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 << _GLF_IDENTITY(int(0), int(0)))); _injected_loop_counter --)
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                      {
                       barrier();
                      }
                     else
                      {
                       if(_GLF_DEAD(false))
                        barrier();
                      }
                    }
                   barrier();
                  }
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, true && (false)))))))
                {
                 do
                  {
                   barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                }
               barrier();
              }
            }
          }
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), false))))
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x)), (_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))) && true)); _injected_loop_counter --)
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       do
        {
         if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), (_GLF_WRAPPED_IF_TRUE(true)) && true))
          {
           if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
           for(int _injected_loop_counter = _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), min(_GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), (false ? _GLF_FUZZED(-4857) : int(_GLF_ZERO(0.0, injectionSwitch.x)))), int(_GLF_ZERO(0.0, injectionSwitch.x)))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 barrier();
                }
               barrier();
              }
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true && (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(bvec3(_GLF_TRUE(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, (true) && true)) || false), (injectionSwitch.x < injectionSwitch.y)), false, false))))), true), bvec3(bvec3(bvec3(false, _GLF_TRUE(_GLF_IDENTITY(true, false || (true)), (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-2.2)), float(injectionSwitch.x), bool(true))), injectionSwitch.x)))) < _GLF_IDENTITY(injectionSwitch.y, float(_GLF_IDENTITY(mat4(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-53.10)), float(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))), bool(true))), 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, cos(0.0), _GLF_IDENTITY(dot(vec3(0.0, 1.0, 1.0), vec3(1.0, 0.0, 0.0)), dot(vec3(0.0, 1.0, 1.0), vec3(1.0, 0.0, 0.0))), 1.0, length(vec2(0.0, 0.0)), 0.0, 1.0, 0.0), (mat4(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-53.10)), float(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))), bool(true))), 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, cos(0.0), _GLF_IDENTITY(dot(vec3(0.0, 1.0, 1.0), vec3(1.0, 0.0, 0.0)), dot(vec3(0.0, 1.0, 1.0), vec3(1.0, 0.0, 0.0))), 1.0, length(vec2(0.0, 0.0)), 0.0, 1.0, 0.0)) - mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))))), true))))))))
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, true, false)))))
                barrier();
               barrier();
              }
             if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
              {
               do
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 for(int _injected_loop_counter = _GLF_IDENTITY(0, int(_GLF_IDENTITY(ivec3(0, 0, 1), (ivec3(0, 0, 1)) >> ivec3(0, 0, 0)))); _GLF_WRAPPED_LOOP(_injected_loop_counter < (0 | 1)); _injected_loop_counter ++)
                  {
                   for(int _injected_loop_counter = _GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(_injected_loop_counter))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                    {
                     barrier();
                    }
                  }
                }
               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
              }
            }
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false))))))
            barrier();
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, true, false)), true && (bool(bvec3(false, true, false)))))))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), ! (! ((injectionSwitch.x > injectionSwitch.y))))), false || (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))) && true))))), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))), false || (_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).y, mix(float(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).y), float(_GLF_FUZZED(vec2(5.2, -973.280).y)), bool(false))), true && (injectionSwitch.x > injectionSwitch.y))) && true))))))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END
BUFFER checker DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected_checker DATA_TYPE uint32 SIZE 8388096 FILL 0

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 
  BIND BUFFER checker AS storage DESCRIPTOR_SET 0 BINDING 2 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT checker EQ_BUFFER expected_checker
