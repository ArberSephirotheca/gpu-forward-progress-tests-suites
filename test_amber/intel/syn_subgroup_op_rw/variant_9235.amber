#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uvec4 GLF_merged3_0_2_53_2_1_12_3_1_14GLF_merged2_0_1_17_1_1_11subgroup_local_idvirtual_gidworkgroup_idworkgroup_size;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(false, false || (false)), _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED((-7.1 / -7874.7569)), _GLF_FUZZED(2479.8590)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))), injectionSwitch)).y)), false, true)), ! (! (bool(bvec4(_GLF_IDENTITY(false, false || (false)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true))))))))
    barrier();
   barrier();
  }
 uvec2 GLF_merged2_0_1_17_1_1_11subgroup_local_idvirtual_gid;
 if(_GLF_DEAD(false))
  barrier();
 for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
  {
   do
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) || false)))
      {
       for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _GLF_IDENTITY(_injected_loop_counter ++, (_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter ++, (_GLF_IDENTITY(_injected_loop_counter ++, 0 | (_injected_loop_counter ++))) ^ 0), 0 + (_GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) * 1)))) >> 0))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           GLF_merged3_0_2_53_2_1_12_3_1_14GLF_merged2_0_1_17_1_1_11subgroup_local_idvirtual_gidworkgroup_idworkgroup_size.xy = GLF_merged2_0_1_17_1_1_11subgroup_local_idvirtual_gid;
          }
         if(_GLF_DEAD(false))
          barrier();
        }
      }
     else
      {
      }
    }
   while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), true && _GLF_IDENTITY((_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), false || _GLF_IDENTITY((_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), bool(bool(_GLF_WRAPPED_LOOP(false))))), false || ((_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), bool(bool(_GLF_WRAPPED_LOOP(false))))))))), false || (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), false || (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), bool(bool(_GLF_WRAPPED_LOOP(false))))))), bool(bvec3((_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), false || (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), bool(bool(_GLF_WRAPPED_LOOP(false))))))), false, true)))))));
  }
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      barrier();
     for(int _injected_loop_counter = (0 << _GLF_IDENTITY(_GLF_IDENTITY(int(7), clamp(int(7), int(7), _GLF_IDENTITY(int(7), max(int(7), _GLF_IDENTITY(int(7), clamp(int(7), int(7), int(7))))))), int(7))); _GLF_WRAPPED_LOOP(_injected_loop_counter < (0 ^ 1)); _injected_loop_counter ++)
      {
       barrier();
      }
    }
   else
    {
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, false)), ! (! (bool(bvec2(false, false))))))))
    barrier();
   barrier();
  }
 do
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(false))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! _GLF_IDENTITY((! (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, true)))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || ((injectionSwitch.x > injectionSwitch.y))))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false)) || false))), bool(_GLF_IDENTITY(bool((! (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, true)))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || ((injectionSwitch.x > injectionSwitch.y))))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false)) || false)))), ! (! (_GLF_IDENTITY(bool((! (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, true)))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || ((injectionSwitch.x > injectionSwitch.y))))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false)) || false)))), false || (bool((! (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, true)))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || ((injectionSwitch.x > injectionSwitch.y))))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false)) || false)))))))))))))
    barrier();
   barrier();
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 do
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     _GLF_IDENTITY(GLF_merged3_0_2_53_2_1_12_3_1_14GLF_merged2_0_1_17_1_1_11subgroup_local_idvirtual_gidworkgroup_idworkgroup_size.xy.x = subgroup_local_id, (_GLF_IDENTITY(GLF_merged3_0_2_53_2_1_12_3_1_14GLF_merged2_0_1_17_1_1_11subgroup_local_idvirtual_gidworkgroup_idworkgroup_size.xy.x = subgroup_local_id, (false ? _GLF_FUZZED(subgroup_size) : _GLF_IDENTITY(GLF_merged3_0_2_53_2_1_12_3_1_14GLF_merged2_0_1_17_1_1_11subgroup_local_idvirtual_gidworkgroup_idworkgroup_size.xy.x = subgroup_local_id, (GLF_merged3_0_2_53_2_1_12_3_1_14GLF_merged2_0_1_17_1_1_11subgroup_local_idvirtual_gidworkgroup_idworkgroup_size.xy.x = subgroup_local_id) | 0u)))) - 0u);
    }
   else
    {
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false, true)))), ! (! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false, true)))))))))) && true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)))));
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 do
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     do
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   else
    {
    }
  }
 while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), _GLF_IDENTITY(bool(bvec2(_GLF_WRAPPED_LOOP(false), true)), ! (! (bool(bvec2(_GLF_WRAPPED_LOOP(false), true)))))));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, bool(bool(false))), false))), (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = gl_WorkGroupSize.x;
 GLF_merged3_0_2_53_2_1_12_3_1_14GLF_merged2_0_1_17_1_1_11subgroup_local_idvirtual_gidworkgroup_idworkgroup_size.w = workgroup_size;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, false || (false))))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_DEAD(false))
  barrier();
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 GLF_merged3_0_2_53_2_1_12_3_1_14GLF_merged2_0_1_17_1_1_11subgroup_local_idvirtual_gidworkgroup_idworkgroup_size.z = workgroup_id;
 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(true && _GLF_IDENTITY((_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bvec2(false, false))))))), (_GLF_IDENTITY((false), ((false)) && true)) && true), (true && _GLF_IDENTITY((false), (_GLF_IDENTITY((false), ((_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), false || (! (false))))))), ! (_GLF_IDENTITY(! (bool(bool(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), false || (! (false)))))))), bool(bvec2(! (bool(bool(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), false || (! (false)))))))), true)))))))) && true)) && true)) || false))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(false, bool(bvec3(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))) ? _GLF_FUZZED(-2.0) : injectionSwitch.y)))), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(_GLF_ONE(1.0, injectionSwitch.y)), mix(vec2(((injectionSwitch) * mat2(_GLF_ONE(1.0, injectionSwitch.y)))[0], ((injectionSwitch) * mat2(_GLF_ONE(1.0, injectionSwitch.y)))[1]), vec2(_GLF_FUZZED(-853.154), _GLF_FUZZED(-3.1)), bvec2(false, false)))).x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(false, bool(bvec3(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))) ? _GLF_FUZZED(-2.0) : _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(_GLF_IDENTITY(mat2(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), 0.0, 1.0), (mat2(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), 0.0, 1.0)) * mat2(1.0))), vec2(vec2(vec2(_GLF_IDENTITY(mat2(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), 0.0, 1.0), (mat2(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), 0.0, 1.0)) * mat2(1.0))))))).y))))) && true)))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), vec2(mat4x2(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), 1.0, 0.0, sin(0.0), _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), 1.0 * (dot(vec2(1.0, 0.0), vec2(1.0, 0.0))))), 0.0, 0.0))), (false ? _GLF_FUZZED(cos(reflect(injectionSwitch, injectionSwitch))) : injectionSwitch)).x > _GLF_IDENTITY(injectionSwitch, vec2(vec3(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), injectionSwitch)), (_GLF_IDENTITY(false ? _GLF_FUZZED(vec2(28.66, 7.3)) : _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), injectionSwitch)), vec2(_GLF_IDENTITY(mat3x4(_GLF_IDENTITY(false ? _GLF_FUZZED(vec2(28.66, 7.3)) : _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), injectionSwitch)), min(false ? _GLF_FUZZED(vec2(28.66, 7.3)) : _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), injectionSwitch)), false ? _GLF_FUZZED(vec2(28.66, 7.3)) : _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), injectionSwitch)))), sin(0.0), 0.0, determinant(mat3(0.0, 0.0, 0.0, sin(0.0), 0.0, 0.0, sqrt(0.0), 0.0, 0.0)), 0.0, 1.0, 1.0, 0.0, cos(0.0), 0.0, determinant(mat3(1.0, 0.0, 0.0, 0.0, exp(0.0), 0.0, 1.0, 0.0, 1.0))), transpose(transpose(mat3x4(_GLF_IDENTITY(false ? _GLF_FUZZED(vec2(28.66, 7.3)) : _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), injectionSwitch)), min(false ? _GLF_FUZZED(vec2(28.66, 7.3)) : _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), injectionSwitch)), false ? _GLF_FUZZED(vec2(28.66, 7.3)) : _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), injectionSwitch)))), sin(0.0), 0.0, determinant(mat3(0.0, 0.0, 0.0, sin(0.0), 0.0, 0.0, sqrt(0.0), 0.0, 0.0)), 0.0, 1.0, 1.0, 0.0, cos(0.0), 0.0, determinant(mat3(1.0, 0.0, 0.0, 0.0, exp(0.0), 0.0, 1.0, 0.0, 1.0)))))))))), 1.0))).y))))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ((injectionSwitch.x < injectionSwitch.y)) || false))))
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
      }
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       barrier();
      }
     else
      {
      }
    }
  }
 uint workgroup_base = GLF_merged3_0_2_53_2_1_12_3_1_14GLF_merged2_0_1_17_1_1_11subgroup_local_idvirtual_gidworkgroup_idworkgroup_size.w * GLF_merged3_0_2_53_2_1_12_3_1_14GLF_merged2_0_1_17_1_1_11subgroup_local_idvirtual_gidworkgroup_idworkgroup_size.z;
 if(_GLF_DEAD(false))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
    barrier();
   barrier();
  }
 uint subgroup_base = subgroup_id * subgroup_size;
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), (bool(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! _GLF_IDENTITY((! (_GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x)) > injectionSwitch.y)), ! (! (_GLF_IDENTITY((! (_GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x)) > injectionSwitch.y)), ((! (_GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x)) > injectionSwitch.y))) && true))))))) && true)), (bool(_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), (bool(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! _GLF_IDENTITY((! (_GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x)) > injectionSwitch.y)), ! (! (_GLF_IDENTITY((! (_GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x)) > injectionSwitch.y)), ((! (_GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x)) > injectionSwitch.y))) && true))))))) && true))) && true), bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), (bool(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! _GLF_IDENTITY((! (_GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x)) > injectionSwitch.y)), ! (! (_GLF_IDENTITY((! (_GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x)) > injectionSwitch.y)), ((! (_GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x)) > injectionSwitch.y))) && true))))))) && true)), (bool(_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), (bool(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! _GLF_IDENTITY((! (_GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x)) > injectionSwitch.y)), ! (! (_GLF_IDENTITY((! (_GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x)) > injectionSwitch.y)), ((! (_GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x)) > injectionSwitch.y))) && true))))))) && true))) && true), bool(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), (bool(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! _GLF_IDENTITY((! (_GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x)) > injectionSwitch.y)), ! (! (_GLF_IDENTITY((! (_GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x)) > injectionSwitch.y)), ((! (_GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x)) > injectionSwitch.y))) && true))))))) && true)), (bool(_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), (bool(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! _GLF_IDENTITY((! (_GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x)) > injectionSwitch.y)), ! (! (_GLF_IDENTITY((! (_GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x)) > injectionSwitch.y)), ((! (_GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x)) > injectionSwitch.y))) && true))))))) && true))) && true)))), false, false))))))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint virtual_gid = _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + subgroup_base + _GLF_IDENTITY(GLF_merged3_0_2_53_2_1_12_3_1_14GLF_merged2_0_1_17_1_1_11subgroup_local_idvirtual_gidworkgroup_idworkgroup_size.xy.x, uint(uvec3(_GLF_IDENTITY(GLF_merged3_0_2_53_2_1_12_3_1_14GLF_merged2_0_1_17_1_1_11subgroup_local_idvirtual_gidworkgroup_idworkgroup_size.xy.x, (false ? _GLF_FUZZED(38671u) : GLF_merged3_0_2_53_2_1_12_3_1_14GLF_merged2_0_1_17_1_1_11subgroup_local_idvirtual_gidworkgroup_idworkgroup_size.xy.x)), 0u, 1u))), (false ? _GLF_FUZZED(_GLF_IDENTITY((num_workgroup + 184946u), 1u * ((num_workgroup + 184946u)))) : workgroup_base + subgroup_base + GLF_merged3_0_2_53_2_1_12_3_1_14GLF_merged2_0_1_17_1_1_11subgroup_local_idvirtual_gidworkgroup_idworkgroup_size.xy.x)), max(_GLF_IDENTITY(workgroup_base + subgroup_base + _GLF_IDENTITY(GLF_merged3_0_2_53_2_1_12_3_1_14GLF_merged2_0_1_17_1_1_11subgroup_local_idvirtual_gidworkgroup_idworkgroup_size.xy.x, uint(uvec3(_GLF_IDENTITY(GLF_merged3_0_2_53_2_1_12_3_1_14GLF_merged2_0_1_17_1_1_11subgroup_local_idvirtual_gidworkgroup_idworkgroup_size.xy.x, (false ? _GLF_FUZZED(38671u) : GLF_merged3_0_2_53_2_1_12_3_1_14GLF_merged2_0_1_17_1_1_11subgroup_local_idvirtual_gidworkgroup_idworkgroup_size.xy.x)), 0u, 1u))), (false ? _GLF_FUZZED(_GLF_IDENTITY((num_workgroup + 184946u), 1u * ((num_workgroup + 184946u)))) : workgroup_base + subgroup_base + GLF_merged3_0_2_53_2_1_12_3_1_14GLF_merged2_0_1_17_1_1_11subgroup_local_idvirtual_gidworkgroup_idworkgroup_size.xy.x)), _GLF_IDENTITY(workgroup_base + subgroup_base + _GLF_IDENTITY(GLF_merged3_0_2_53_2_1_12_3_1_14GLF_merged2_0_1_17_1_1_11subgroup_local_idvirtual_gidworkgroup_idworkgroup_size.xy.x, uint(uvec3(_GLF_IDENTITY(GLF_merged3_0_2_53_2_1_12_3_1_14GLF_merged2_0_1_17_1_1_11subgroup_local_idvirtual_gidworkgroup_idworkgroup_size.xy.x, (false ? _GLF_FUZZED(38671u) : GLF_merged3_0_2_53_2_1_12_3_1_14GLF_merged2_0_1_17_1_1_11subgroup_local_idvirtual_gidworkgroup_idworkgroup_size.xy.x)), 0u, 1u))), (false ? _GLF_FUZZED(_GLF_IDENTITY((num_workgroup + 184946u), 1u * ((num_workgroup + 184946u)))) : workgroup_base + subgroup_base + GLF_merged3_0_2_53_2_1_12_3_1_14GLF_merged2_0_1_17_1_1_11subgroup_local_idvirtual_gidworkgroup_idworkgroup_size.xy.x))));
 do
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bool(true)))))
    {
     for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), 0 ^ (int(7))))); _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           do
            {
             barrier();
            }
           while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), bool(bvec4(_GLF_WRAPPED_LOOP(false), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))));
          }
         else
          {
          }
        }
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         barrier();
        }
      }
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(true, false || (true)), (_GLF_IDENTITY(true, false || (true))) && true)))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)))))
            barrier();
          }
         else
          {
           barrier();
          }
        }
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec2(! (false), false))))), (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(_GLF_IDENTITY(bvec2((injectionSwitch.x > injectionSwitch.y), true), bvec2(bvec4(bvec2((injectionSwitch.x > injectionSwitch.y), true), false, false)))))))))))
        barrier();
      }
     else
      {
      }
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   GLF_merged3_0_2_53_2_1_12_3_1_14GLF_merged2_0_1_17_1_1_11subgroup_local_idvirtual_gidworkgroup_idworkgroup_size.xy.y = virtual_gid;
  }
 else
  {
  }
 uint next_virtual_gid = workgroup_base + subgroup_base + ((GLF_merged3_0_2_53_2_1_12_3_1_14GLF_merged2_0_1_17_1_1_11subgroup_local_idvirtual_gidworkgroup_idworkgroup_size.xy.x + 1) % subgroup_size);
 uint read = atomicLoad(buf[_GLF_IDENTITY(GLF_merged3_0_2_53_2_1_12_3_1_14GLF_merged2_0_1_17_1_1_11subgroup_local_idvirtual_gidworkgroup_idworkgroup_size.xy.y, clamp(GLF_merged3_0_2_53_2_1_12_3_1_14GLF_merged2_0_1_17_1_1_11subgroup_local_idvirtual_gidworkgroup_idworkgroup_size.xy.y, _GLF_IDENTITY(GLF_merged3_0_2_53_2_1_12_3_1_14GLF_merged2_0_1_17_1_1_11subgroup_local_idvirtual_gidworkgroup_idworkgroup_size.xy.y, (true ? GLF_merged3_0_2_53_2_1_12_3_1_14GLF_merged2_0_1_17_1_1_11subgroup_local_idvirtual_gidworkgroup_idworkgroup_size.xy.y : _GLF_FUZZED(num_workgroup))), GLF_merged3_0_2_53_2_1_12_3_1_14GLF_merged2_0_1_17_1_1_11subgroup_local_idvirtual_gidworkgroup_idworkgroup_size.xy.y))], 4, _GLF_IDENTITY(64, (64) - 0), 2);
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   do
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = 0; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(6)) >> 0))) >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), 1 * (int(6)))))), (_GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(_GLF_IDENTITY(int(6), (int(6)) >> 0), int(_GLF_IDENTITY(int(_GLF_IDENTITY(int(6), (int(6)) >> 0)), (int(_GLF_IDENTITY(int(6), (int(6)) >> 0))) / 1))))) >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), 1 * (int(6))))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))); _injected_loop_counter ++)
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
              }
             else
              {
               barrier();
              }
            }
          }
         barrier();
        }
      }
     else
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           for(int _injected_loop_counter = (1 | 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
            {
             barrier();
            }
           if(_GLF_DEAD(false))
            barrier();
          }
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(false))
        {
         do
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec3(! (false), false, true)))))))))
            barrier();
           barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, true && (false))));
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, true && _GLF_IDENTITY((_GLF_IDENTITY(false, ! (! (false)))), ! (_GLF_IDENTITY(! ((_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false)))))))), bool(bool(! ((_GLF_IDENTITY(false, ! (! (false)))))))))))));
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * exp(vec2(0.0, 0.0))), injectionSwitch)).x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if((_GLF_IDENTITY(GLF_merged3_0_2_53_2_1_12_3_1_14GLF_merged2_0_1_17_1_1_11subgroup_local_idvirtual_gidworkgroup_idworkgroup_size.xy.x % _GLF_IDENTITY(2, (2) ^ 0), (_GLF_IDENTITY(GLF_merged3_0_2_53_2_1_12_3_1_14GLF_merged2_0_1_17_1_1_11subgroup_local_idvirtual_gidworkgroup_idworkgroup_size.xy, clamp(GLF_merged3_0_2_53_2_1_12_3_1_14GLF_merged2_0_1_17_1_1_11subgroup_local_idvirtual_gidworkgroup_idworkgroup_size.xy, GLF_merged3_0_2_53_2_1_12_3_1_14GLF_merged2_0_1_17_1_1_11subgroup_local_idvirtual_gidworkgroup_idworkgroup_size.xy, GLF_merged3_0_2_53_2_1_12_3_1_14GLF_merged2_0_1_17_1_1_11subgroup_local_idvirtual_gidworkgroup_idworkgroup_size.xy)).x % 2) | (_GLF_IDENTITY(GLF_merged3_0_2_53_2_1_12_3_1_14GLF_merged2_0_1_17_1_1_11subgroup_local_idvirtual_gidworkgroup_idworkgroup_size.xy.x % 2, (0u ^ 0u) + (GLF_merged3_0_2_53_2_1_12_3_1_14GLF_merged2_0_1_17_1_1_11subgroup_local_idvirtual_gidworkgroup_idworkgroup_size.xy.x % 2))))) == 0)
  {
   do
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     subgroupAll(false);
     if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
         barrier();
        }
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)), bool(bvec2(bool(bvec2(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false)))) || false))), true)), true))))));
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec3(false, false, false)))) || false)))
      {
      }
     else
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, (true) || false), _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), _GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec3((injectionSwitch.x < injectionSwitch.y), false, true), _GLF_IDENTITY(bvec3(bvec4(bvec3((injectionSwitch.x < injectionSwitch.y), false, _GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, (true) && true))))), false)), bvec3(bvec3(bvec3(bvec4(bvec3((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(false, (false) && true) ? _GLF_FUZZED(vec2(97.61, 9.7)) : injectionSwitch)).y), false, true), false)))))), bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(bvec3((injectionSwitch.x < injectionSwitch.y), false, true), _GLF_IDENTITY(bvec3(bvec4(bvec3((injectionSwitch.x < injectionSwitch.y), false, true), false)), bvec3(bvec3(bvec3(bvec4(bvec3((injectionSwitch.x < injectionSwitch.y), false, true), false)))))), bvec3(bvec4(_GLF_IDENTITY(bvec3((injectionSwitch.x < injectionSwitch.y), false, true), _GLF_IDENTITY(bvec3(bvec4(bvec3((injectionSwitch.x < injectionSwitch.y), false, true), false)), bvec3(bvec3(bvec3(bvec4(bvec3((injectionSwitch.x < injectionSwitch.y), false, true), false)))))), true)))), bvec3(bvec3(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(bvec3((_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! _GLF_IDENTITY((! (injectionSwitch.x < injectionSwitch.y)), ! (! (_GLF_IDENTITY((! (injectionSwitch.x < injectionSwitch.y)), false || (_GLF_IDENTITY((! (injectionSwitch.x < injectionSwitch.y)), true && ((! (injectionSwitch.x < injectionSwitch.y))))))))))), false, true), _GLF_IDENTITY(bvec3(bvec4(bvec3((injectionSwitch.x < injectionSwitch.y), false, true), false)), bvec3(bvec3(bvec3(bvec4(bvec3((injectionSwitch.x < injectionSwitch.y), false, true), false)))))), bvec3(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ((injectionSwitch.x < injectionSwitch.y)) && _GLF_IDENTITY(true, ! (! (true)))), false, true), _GLF_IDENTITY(bvec3(bvec4(bvec3((injectionSwitch.x < injectionSwitch.y), false, true), false)), bvec3(bvec3(bvec3(bvec4(bvec3((injectionSwitch.x < injectionSwitch.y), false, true), false)))))), bvec3(bvec4(_GLF_IDENTITY(bvec3((injectionSwitch.x < injectionSwitch.y), false, true), _GLF_IDENTITY(bvec3(bvec4(bvec3((injectionSwitch.x < injectionSwitch.y), false, true), false)), bvec3(bvec3(bvec3(bvec4(bvec3((_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) < injectionSwitch.y), false, true), false)))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), true)))))))))), (bool(bvec3((_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY(vec2(_GLF_IDENTITY(mat2(injectionSwitch, determinant(mat4(1.0, determinant(mat4(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0)), 0.0, 0.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, log(1.0), 1.0)), 0.0), mat2(mat4x2(_GLF_IDENTITY(mat2(injectionSwitch, determinant(mat4(1.0, determinant(mat4(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), 0.0, 0.0, _GLF_IDENTITY(0.0, (0.0) + 0.0), 1.0, 0.0, 0.0, 0.0, 0.0)), 0.0, 0.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 1.0, 0.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(87.49)), bool(false))), 1.0)), 0.0, 0.0, 0.0, log(1.0), 1.0)), 0.0), mat2(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)) + (mat2(injectionSwitch, determinant(mat4(1.0, determinant(mat4(0.0, _GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0, 1.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), 0.0, 0.0, _GLF_IDENTITY(0.0, (0.0) + 0.0), 1.0, 0.0, 0.0, 0.0, 0.0)), 0.0, 0.0, _GLF_IDENTITY(length(vec4(0.0, 0.0, 0.0, 0.0)), float(mat3x4(_GLF_IDENTITY(length(vec4(0.0, 0.0, 0.0, 0.0)), min(length(vec4(0.0, 0.0, 0.0, 0.0)), length(vec4(0.0, 0.0, 0.0, 0.0)))), 0.0, 1.0, abs(1.0), _GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0, 1.0, 1.0, sin(0.0), 0.0, 0.0))), 1.0, 0.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(1.0, max(1.0, 1.0)), 0.0, 0.0, 0.0, log(1.0), 1.0)), 0.0))))))), _GLF_IDENTITY(clamp(vec2(_GLF_IDENTITY(mat2(injectionSwitch, determinant(mat4(1.0, determinant(mat4(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-7.0)), bool(false))), 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0, 0.0, 0.0)), 0.0, 0.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, log(1.0), 1.0)), 0.0), mat2(mat4x2(mat2(injectionSwitch, determinant(mat4(1.0, determinant(mat4(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, float(_GLF_IDENTITY(mat4x2(0.0, 1.0, 0.0, 1.0, 0.0, 0.0, determinant(mat2(0.0, 0.0, 0.0, 0.0)), _GLF_IDENTITY(1.0, min(1.0, 1.0))), transpose(transpose(_GLF_IDENTITY(mat4x2(0.0, 1.0, 0.0, 1.0, 0.0, _GLF_IDENTITY(0.0, min(0.0, 0.0)), determinant(mat2(0.0, 0.0, 0.0, 0.0)), 1.0), (mat4x2(0.0, _GLF_IDENTITY(1.0, (1.0) * 1.0), 0.0, 1.0, 0.0, 0.0, determinant(mat2(0.0, 0.0, 0.0, 0.0)), 1.0)) * mat4(1.0))))))), _GLF_IDENTITY(1.0, 1.0 * (1.0)), 0.0, 0.0, 0.0, 0.0)), 0.0, _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(6.2) : 0.0)), length(vec4(0.0, 0.0, 0.0, 0.0)), 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(determinant(mat2(mat3x2(9.5, 4.7, -5.1, 72.86, 1806.4879, 9.6)))) : 0.0)), log(1.0), 1.0)), 0.0))))), _GLF_IDENTITY(vec2(_GLF_IDENTITY(mat2(injectionSwitch, determinant(mat4(1.0, determinant(mat4(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(8846.8737)), bool(false))), 0.0, 0.0, _GLF_IDENTITY(1.0, min(1.0, 1.0)), 0.0, 0.0, _GLF_IDENTITY(0.0, (0.0) / 1.0), 0.0)), 0.0, 0.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, log(1.0), 1.0)), 0.0), mat2(mat4x2(mat2(injectionSwitch, determinant(mat4(1.0, determinant(mat4(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0)), 0.0, 0.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 1.0, 0.0, _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-12.13)), float(0.0), bool(true))), _GLF_IDENTITY(_GLF_IDENTITY(0.0, mix(float(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-330.408)), bool(false)))), float(_GLF_FUZZED(124.760)), bool(false))), max(_GLF_IDENTITY(0.0, mix(float(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-330.408)), bool(false)))), float(_GLF_FUZZED(124.760)), bool(false))), _GLF_IDENTITY(_GLF_IDENTITY(0.0, mix(float(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-330.408)), bool(false)))), float(_GLF_FUZZED(124.760)), bool(false))), min(_GLF_IDENTITY(0.0, mix(float(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-330.408)), bool(false)))), float(_GLF_FUZZED(124.760)), bool(false))), _GLF_IDENTITY(0.0, mix(float(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-330.408)), bool(false)))), float(_GLF_FUZZED(124.760)), bool(false))))))), 1.0, 1.0, 0.0, 0.0, 0.0, log(1.0), _GLF_IDENTITY(1.0, min(1.0, 1.0)))), 0.0))))), (vec2(_GLF_IDENTITY(mat2(injectionSwitch, determinant(mat4(1.0, determinant(mat4(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0)), 0.0, 0.0, length(vec4(0.0, 0.0, _GLF_IDENTITY(0.0, (0.0) + 0.0), _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(refract(step(7205.4349, -6920.6382), 13.76, -463.567)) : _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(-4.1) : 0.0)))))), 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, log(_GLF_IDENTITY(1.0, float(mat3(1.0, 1.0, 1.0, 0.0, _GLF_IDENTITY(1.0, float(float(1.0))), 1.0, 1.0, 1.0, round(length(normalize(1.0))))))), 1.0)), 0.0), mat2(mat4x2(mat2(injectionSwitch, determinant(mat4(1.0, determinant(mat4(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0)), 0.0, 0.0, length(vec4(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), 0.0, 0.0, 0.0)), 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, log(1.0), 1.0)), 0.0)))))) * mat2(1.0)), vec2(_GLF_IDENTITY(mat2(injectionSwitch, determinant(mat4(1.0, _GLF_IDENTITY(determinant(mat4(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0)), (_GLF_IDENTITY(determinant(mat4(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0)), (_GLF_IDENTITY(determinant(mat4(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0)), min(determinant(mat4(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0)), determinant(mat4(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, _GLF_IDENTITY(0.0, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(1.3) : 0.0)), 0.0, 0.0))))) / 1.0)) / 1.0), 0.0, 0.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 1.0, 0.0, _GLF_IDENTITY(0.0, (0.0) * 1.0), 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, log(1.0), 1.0)), 0.0), mat2(mat4x2(mat2(injectionSwitch, determinant(mat4(1.0, determinant(mat4(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(0.0, (0.0) * 1.0), 0.0, 0.0, 0.0)), 0.0, 0.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, log(1.0), 1.0)), 0.0)))))), max(clamp(vec2(_GLF_IDENTITY(mat2(injectionSwitch, determinant(mat4(1.0, determinant(mat4(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-7.0)), bool(false))), 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0, 0.0, 0.0)), 0.0, 0.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, log(1.0), 1.0)), 0.0), mat2(mat4x2(mat2(injectionSwitch, determinant(mat4(1.0, determinant(mat4(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, float(_GLF_IDENTITY(mat4x2(0.0, 1.0, 0.0, 1.0, 0.0, 0.0, determinant(mat2(0.0, 0.0, 0.0, 0.0)), _GLF_IDENTITY(1.0, min(1.0, 1.0))), transpose(transpose(_GLF_IDENTITY(mat4x2(0.0, 1.0, 0.0, 1.0, 0.0, _GLF_IDENTITY(0.0, min(0.0, 0.0)), determinant(mat2(0.0, 0.0, 0.0, 0.0)), 1.0), (mat4x2(0.0, _GLF_IDENTITY(1.0, (1.0) * 1.0), 0.0, 1.0, 0.0, 0.0, determinant(mat2(0.0, 0.0, 0.0, 0.0)), 1.0)) * mat4(1.0))))))), _GLF_IDENTITY(1.0, 1.0 * (1.0)), 0.0, 0.0, 0.0, 0.0)), 0.0, _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(6.2) : 0.0)), length(vec4(0.0, 0.0, 0.0, 0.0)), 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(determinant(mat2(mat3x2(9.5, 4.7, -5.1, 72.86, 1806.4879, 9.6)))) : 0.0)), log(1.0), 1.0)), 0.0))))), _GLF_IDENTITY(vec2(_GLF_IDENTITY(mat2(injectionSwitch, determinant(mat4(1.0, determinant(mat4(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(8846.8737)), bool(false))), 0.0, 0.0, _GLF_IDENTITY(1.0, min(1.0, 1.0)), 0.0, 0.0, _GLF_IDENTITY(0.0, (0.0) / 1.0), 0.0)), 0.0, 0.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, log(1.0), 1.0)), 0.0), mat2(mat4x2(mat2(injectionSwitch, determinant(mat4(1.0, determinant(mat4(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0)), 0.0, 0.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 1.0, 0.0, _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-12.13)), float(0.0), bool(true))), _GLF_IDENTITY(_GLF_IDENTITY(0.0, mix(float(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-330.408)), bool(false)))), float(_GLF_FUZZED(124.760)), bool(false))), max(_GLF_IDENTITY(0.0, mix(float(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-330.408)), bool(false)))), float(_GLF_FUZZED(124.760)), bool(false))), _GLF_IDENTITY(_GLF_IDENTITY(0.0, mix(float(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-330.408)), bool(false)))), float(_GLF_FUZZED(124.760)), bool(false))), min(_GLF_IDENTITY(0.0, mix(float(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-330.408)), bool(false)))), float(_GLF_FUZZED(124.760)), bool(false))), _GLF_IDENTITY(0.0, mix(float(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-330.408)), bool(false)))), float(_GLF_FUZZED(124.760)), bool(false))))))), 1.0, 1.0, 0.0, 0.0, 0.0, log(1.0), _GLF_IDENTITY(1.0, min(1.0, 1.0)))), 0.0))))), (vec2(_GLF_IDENTITY(mat2(injectionSwitch, determinant(mat4(1.0, determinant(mat4(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0)), 0.0, 0.0, length(vec4(0.0, 0.0, _GLF_IDENTITY(0.0, (0.0) + 0.0), _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(refract(step(7205.4349, -6920.6382), 13.76, -463.567)) : _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(-4.1) : 0.0)))))), 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, log(_GLF_IDENTITY(1.0, float(mat3(1.0, 1.0, 1.0, 0.0, _GLF_IDENTITY(1.0, float(float(1.0))), 1.0, 1.0, 1.0, round(length(normalize(1.0))))))), 1.0)), 0.0), mat2(mat4x2(mat2(injectionSwitch, determinant(mat4(1.0, determinant(mat4(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0)), 0.0, 0.0, length(vec4(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), 0.0, 0.0, 0.0)), 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, log(1.0), 1.0)), 0.0)))))) * mat2(1.0)), vec2(_GLF_IDENTITY(mat2(injectionSwitch, determinant(mat4(1.0, _GLF_IDENTITY(determinant(mat4(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0)), (_GLF_IDENTITY(determinant(mat4(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0)), (_GLF_IDENTITY(determinant(mat4(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0)), min(determinant(mat4(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0)), determinant(mat4(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, _GLF_IDENTITY(0.0, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(1.3) : 0.0)), 0.0, 0.0))))) / 1.0)) / 1.0), 0.0, 0.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 1.0, 0.0, _GLF_IDENTITY(0.0, (0.0) * 1.0), 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, log(1.0), 1.0)), 0.0), mat2(mat4x2(mat2(injectionSwitch, determinant(mat4(1.0, determinant(mat4(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(0.0, (0.0) * 1.0), 0.0, 0.0, 0.0)), 0.0, 0.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, log(1.0), 1.0)), 0.0)))))), clamp(vec2(_GLF_IDENTITY(mat2(injectionSwitch, determinant(mat4(1.0, determinant(mat4(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-7.0)), bool(false))), 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0, 0.0, 0.0)), 0.0, 0.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, log(1.0), 1.0)), 0.0), mat2(mat4x2(mat2(injectionSwitch, determinant(mat4(1.0, determinant(mat4(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, float(_GLF_IDENTITY(mat4x2(0.0, 1.0, 0.0, 1.0, 0.0, 0.0, determinant(mat2(0.0, 0.0, 0.0, 0.0)), _GLF_IDENTITY(1.0, min(1.0, 1.0))), transpose(transpose(_GLF_IDENTITY(mat4x2(0.0, 1.0, 0.0, 1.0, 0.0, _GLF_IDENTITY(0.0, min(0.0, 0.0)), determinant(mat2(0.0, 0.0, 0.0, 0.0)), 1.0), (mat4x2(0.0, _GLF_IDENTITY(1.0, (1.0) * 1.0), 0.0, 1.0, 0.0, 0.0, determinant(mat2(0.0, 0.0, 0.0, 0.0)), 1.0)) * mat4(1.0))))))), _GLF_IDENTITY(1.0, 1.0 * (1.0)), 0.0, 0.0, 0.0, 0.0)), 0.0, _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(6.2) : 0.0)), length(vec4(0.0, 0.0, 0.0, 0.0)), 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(determinant(mat2(mat3x2(9.5, 4.7, -5.1, 72.86, 1806.4879, 9.6)))) : 0.0)), log(1.0), 1.0)), 0.0))))), _GLF_IDENTITY(vec2(_GLF_IDENTITY(mat2(injectionSwitch, determinant(mat4(1.0, determinant(mat4(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(8846.8737)), bool(false))), 0.0, 0.0, _GLF_IDENTITY(1.0, min(1.0, 1.0)), 0.0, 0.0, _GLF_IDENTITY(0.0, (0.0) / 1.0), 0.0)), 0.0, 0.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, log(1.0), 1.0)), 0.0), mat2(mat4x2(mat2(injectionSwitch, determinant(mat4(1.0, determinant(mat4(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0)), 0.0, 0.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 1.0, 0.0, _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-12.13)), float(0.0), bool(true))), _GLF_IDENTITY(_GLF_IDENTITY(0.0, mix(float(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-330.408)), bool(false)))), float(_GLF_FUZZED(124.760)), bool(false))), max(_GLF_IDENTITY(0.0, mix(float(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-330.408)), bool(false)))), float(_GLF_FUZZED(124.760)), bool(false))), _GLF_IDENTITY(_GLF_IDENTITY(0.0, mix(float(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-330.408)), bool(false)))), float(_GLF_FUZZED(124.760)), bool(false))), min(_GLF_IDENTITY(0.0, mix(float(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-330.408)), bool(false)))), float(_GLF_FUZZED(124.760)), bool(false))), _GLF_IDENTITY(0.0, mix(float(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-330.408)), bool(false)))), float(_GLF_FUZZED(124.760)), bool(false))))))), 1.0, 1.0, 0.0, 0.0, 0.0, log(1.0), _GLF_IDENTITY(1.0, min(1.0, 1.0)))), 0.0))))), (vec2(_GLF_IDENTITY(mat2(injectionSwitch, determinant(mat4(1.0, determinant(mat4(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0)), 0.0, 0.0, length(vec4(0.0, 0.0, _GLF_IDENTITY(0.0, (0.0) + 0.0), _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(refract(step(7205.4349, -6920.6382), 13.76, -463.567)) : _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(-4.1) : 0.0)))))), 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, log(_GLF_IDENTITY(1.0, float(mat3(1.0, 1.0, 1.0, 0.0, _GLF_IDENTITY(1.0, float(float(1.0))), 1.0, 1.0, 1.0, round(length(normalize(1.0))))))), 1.0)), 0.0), mat2(mat4x2(mat2(injectionSwitch, determinant(mat4(1.0, determinant(mat4(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0)), 0.0, 0.0, length(vec4(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), 0.0, 0.0, 0.0)), 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, log(1.0), 1.0)), 0.0)))))) * mat2(1.0)), vec2(_GLF_IDENTITY(mat2(injectionSwitch, determinant(mat4(1.0, _GLF_IDENTITY(determinant(mat4(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0)), (_GLF_IDENTITY(determinant(mat4(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0)), (_GLF_IDENTITY(determinant(mat4(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0)), min(determinant(mat4(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0)), determinant(mat4(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, _GLF_IDENTITY(0.0, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(1.3) : 0.0)), 0.0, 0.0))))) / 1.0)) / 1.0), 0.0, 0.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 1.0, 0.0, _GLF_IDENTITY(0.0, (0.0) * 1.0), 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, log(1.0), 1.0)), 0.0), mat2(mat4x2(mat2(injectionSwitch, determinant(mat4(1.0, determinant(mat4(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(0.0, (0.0) * 1.0), 0.0, 0.0, 0.0)), 0.0, 0.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, log(1.0), 1.0)), 0.0))))))))), vec2(mat2x4(_GLF_IDENTITY(vec2(_GLF_IDENTITY(mat2(injectionSwitch, determinant(mat4(1.0, determinant(mat4(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0)), _GLF_IDENTITY(0.0, (0.0) + 0.0), 0.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, log(1.0), 1.0)), 0.0), mat2(mat4x2(_GLF_IDENTITY(mat2(injectionSwitch, determinant(mat4(1.0, determinant(mat4(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), 0.0, 0.0, _GLF_IDENTITY(0.0, (0.0) + 0.0), 1.0, 0.0, 0.0, 0.0, 0.0)), 0.0, 0.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 1.0, 0.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(1.0, max(1.0, 1.0)), 0.0, 0.0, 0.0, log(1.0), 1.0)), 0.0), mat2(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(_GLF_IDENTITY(0.0, min(0.0, 0.0)), injectionSwitch.x)) + (_GLF_IDENTITY(mat2(injectionSwitch, _GLF_IDENTITY(determinant(mat4(1.0, determinant(mat4(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), max(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)))), 0.0, 0.0, _GLF_IDENTITY(0.0, (0.0) + 0.0), 1.0, 0.0, 0.0, 0.0, 0.0)), 0.0, 0.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 1.0, _GLF_IDENTITY(0.0, (0.0) - 0.0), 0.0, 0.0, 1.0, _GLF_IDENTITY(1.0, _GLF_IDENTITY(max(1.0, 1.0), min(max(1.0, 1.0), max(1.0, 1.0)))), 0.0, 0.0, 0.0, log(1.0), 1.0)), mix(float(_GLF_FUZZED(3918.3521)), float(_GLF_IDENTITY(determinant(mat4(1.0, determinant(mat4(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), max(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)))), 0.0, 0.0, _GLF_IDENTITY(0.0, (0.0) + 0.0), 1.0, 0.0, 0.0, 0.0, 0.0)), 0.0, 0.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 1.0, _GLF_IDENTITY(0.0, (0.0) - 0.0), 0.0, 0.0, 1.0, _GLF_IDENTITY(1.0, _GLF_IDENTITY(max(1.0, 1.0), min(max(1.0, 1.0), max(1.0, 1.0)))), 0.0, 0.0, 0.0, log(1.0), 1.0)), 1.0 * (determinant(mat4(1.0, determinant(mat4(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), max(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)))), 0.0, 0.0, _GLF_IDENTITY(0.0, (0.0) + 0.0), 1.0, 0.0, 0.0, 0.0, 0.0)), 0.0, 0.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 1.0, _GLF_IDENTITY(0.0, (0.0) - 0.0), 0.0, 0.0, 1.0, _GLF_IDENTITY(1.0, _GLF_IDENTITY(max(1.0, 1.0), min(max(1.0, 1.0), max(1.0, 1.0)))), 0.0, 0.0, 0.0, log(1.0), 1.0))))), bool(true))), 0.0), (true ? mat2(injectionSwitch, determinant(mat4(1.0, determinant(mat4(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), max(_GLF_IDENTITY(0.0, clamp(_GLF_IDENTITY(0.0, float(mat2(_GLF_IDENTITY(0.0, float(float(0.0))), 1.0, 1.0, 1.0))), 0.0, 0.0)), _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)))), 0.0, 0.0, _GLF_IDENTITY(0.0, (0.0) + 0.0), 1.0, 0.0, 0.0, 0.0, 0.0)), 0.0, 0.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 1.0, _GLF_IDENTITY(0.0, (0.0) - 0.0), 0.0, 0.0, 1.0, _GLF_IDENTITY(1.0, _GLF_IDENTITY(max(1.0, 1.0), min(max(1.0, 1.0), max(1.0, 1.0)))), 0.0, 0.0, 0.0, log(1.0), 1.0)), 0.0) : _GLF_FUZZED(mat2(-7.5, 7.0, -9869.7154, -30.11)))))))))), clamp(vec2(_GLF_IDENTITY(mat2(injectionSwitch, determinant(mat4(1.0, determinant(mat4(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-7.0)), bool(false))), 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0, 0.0, 0.0)), _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(2.6)), float(0.0), bool(true))), 0.0, length(_GLF_IDENTITY(vec4(0.0, 0.0, 0.0, 0.0), vec4(mat2x4(vec4(0.0, 0.0, 0.0, 0.0), determinant(mat2(tan(0.0), 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x))), 1.0, 1.0, 1.0)))), 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, log(1.0), 1.0)), 0.0), mat2(mat4x2(mat2(injectionSwitch, determinant(mat4(1.0, determinant(mat4(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, float(_GLF_IDENTITY(mat4x2(0.0, _GLF_IDENTITY(1.0, float(mat2x3(1.0, 1.0, 1.0, 1.0, 0.0, 0.0))), 0.0, 1.0, 0.0, 0.0, determinant(mat2(0.0, 0.0, 0.0, 0.0)), _GLF_IDENTITY(1.0, min(1.0, 1.0))), transpose(transpose(_GLF_IDENTITY(mat4x2(0.0, 1.0, 0.0, 1.0, 0.0, 0.0, determinant(mat2(0.0, 0.0, 0.0, 0.0)), 1.0), (mat4x2(0.0, 1.0, 0.0, 1.0, 0.0, 0.0, determinant(mat2(0.0, 0.0, 0.0, 0.0)), 1.0)) * mat4(1.0))))))), _GLF_IDENTITY(1.0, 1.0 * (1.0)), 0.0, 0.0, 0.0, 0.0)), 0.0, _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(6.2) : 0.0)), length(vec4(0.0, 0.0, 0.0, 0.0)), 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(determinant(mat2(mat3x2(9.5, 4.7, -5.1, 72.86, 1806.4879, 9.6)))) : 0.0)), log(1.0), 1.0)), 0.0))))), _GLF_IDENTITY(vec2(_GLF_IDENTITY(mat2(injectionSwitch, determinant(mat4(1.0, determinant(_GLF_IDENTITY(mat4(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(8846.8737)), bool(false))), 0.0, 0.0, _GLF_IDENTITY(1.0, min(1.0, 1.0)), 0.0, 0.0, 0.0, 0.0), transpose(transpose(mat4(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(8846.8737)), bool(false))), 0.0, 0.0, _GLF_IDENTITY(1.0, min(1.0, 1.0)), 0.0, 0.0, 0.0, 0.0))))), 0.0, 0.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, log(1.0), 1.0)), 0.0), mat2(mat4x2(mat2(injectionSwitch, determinant(mat4(1.0, determinant(mat4(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0)), 0.0, 0.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 1.0, 0.0, _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-12.13)), float(0.0), bool(true))), _GLF_IDENTITY(0.0, _GLF_IDENTITY(mix(float(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-330.408)), bool(false)))), float(_GLF_FUZZED(124.760)), bool(false)), min(mix(float(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-330.408)), bool(false)))), float(_GLF_FUZZED(124.760)), bool(false)), _GLF_IDENTITY(mix(float(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-330.408)), bool(false)))), float(_GLF_FUZZED(124.760)), bool(false)), max(mix(float(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-330.408)), bool(false)))), float(_GLF_FUZZED(124.760)), bool(false)), mix(float(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-330.408)), bool(false)))), float(_GLF_FUZZED(124.760)), bool(false))))))), 1.0, _GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat3x2(1.0, 1.0, 0.0, 1.0, 0.0, exp(0.0))), clamp(float(mat3x2(1.0, 1.0, 0.0, 1.0, 0.0, exp(0.0))), float(mat3x2(1.0, 1.0, 0.0, 1.0, 0.0, exp(0.0))), float(mat3x2(1.0, 1.0, 0.0, 1.0, 0.0, exp(0.0)))))), 0.0, 0.0, 0.0, log(1.0), _GLF_IDENTITY(1.0, min(1.0, 1.0)))), 0.0))))), (vec2(_GLF_IDENTITY(mat2(injectionSwitch, determinant(mat4(1.0, determinant(mat4(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, max(_GLF_IDENTITY(0.0, (true ? _GLF_IDENTITY(0.0, clamp(0.0, _GLF_IDENTITY(0.0, max(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), 0.0)), 0.0)) : _GLF_FUZZED(-399.089))), 0.0)))), 0.0, 0.0, length(vec4(0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, _GLF_IDENTITY((false ? _GLF_FUZZED(refract(step(7205.4349, -6920.6382), 13.76, -463.567)) : _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(-4.1) : 0.0))), 1.0 * (_GLF_IDENTITY(_GLF_IDENTITY((false ? _GLF_FUZZED(refract(step(7205.4349, -6920.6382), 13.76, -463.567)) : _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(-4.1) : 0.0))), mix(float(_GLF_IDENTITY((false ? _GLF_FUZZED(refract(step(7205.4349, -6920.6382), 13.76, -463.567)) : _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(-4.1) : 0.0))), float(mat3x4((false ? _GLF_FUZZED(refract(step(7205.4349, -6920.6382), 13.76, -463.567)) : _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(-4.1) : 0.0))), 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0)))), float(_GLF_FUZZED(-555.147)), bool(false))), (_GLF_IDENTITY(_GLF_IDENTITY((false ? _GLF_FUZZED(refract(step(7205.4349, -6920.6382), 13.76, -463.567)) : _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(-4.1) : 0.0))), mix(float(_GLF_IDENTITY((false ? _GLF_FUZZED(refract(step(7205.4349, -6920.6382), 13.76, -463.567)) : _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(-4.1) : 0.0))), float(mat3x4((false ? _GLF_FUZZED(refract(step(7205.4349, -6920.6382), 13.76, -463.567)) : _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(-4.1) : 0.0))), 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0)))), float(_GLF_FUZZED(-555.147)), bool(false))), min(_GLF_IDENTITY((false ? _GLF_FUZZED(refract(step(7205.4349, -6920.6382), 13.76, -463.567)) : _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(-4.1) : 0.0))), mix(float(_GLF_IDENTITY((false ? _GLF_FUZZED(refract(step(7205.4349, -6920.6382), 13.76, -463.567)) : _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(-4.1) : 0.0))), float(mat3x4((false ? _GLF_FUZZED(refract(step(7205.4349, -6920.6382), 13.76, -463.567)) : _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(-4.1) : 0.0))), 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0)))), float(_GLF_FUZZED(-555.147)), bool(false))), _GLF_IDENTITY((false ? _GLF_FUZZED(refract(step(7205.4349, -6920.6382), 13.76, -463.567)) : _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(-4.1) : 0.0))), mix(float(_GLF_IDENTITY((false ? _GLF_FUZZED(refract(step(7205.4349, -6920.6382), 13.76, -463.567)) : _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(-4.1) : 0.0))), float(mat3x4((false ? _GLF_FUZZED(refract(step(7205.4349, -6920.6382), 13.76, -463.567)) : _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(-4.1) : 0.0))), 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0)))), float(_GLF_FUZZED(-555.147)), bool(false)))))) / _GLF_ONE(1.0, injectionSwitch.y))))))), 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, log(_GLF_IDENTITY(1.0, float(mat3(1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, _GLF_IDENTITY(round(length(normalize(1.0))), max(round(length(normalize(1.0))), round(length(normalize(1.0))))))))), 1.0)), 0.0), mat2(mat4x2(mat2(injectionSwitch, determinant(mat4(1.0, determinant(mat4(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0)), 0.0, 0.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, log(1.0), 1.0)), 0.0)))))) * mat2(1.0)), vec2(_GLF_IDENTITY(mat2(injectionSwitch, determinant(mat4(1.0, _GLF_IDENTITY(determinant(mat4(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0)), (_GLF_IDENTITY(determinant(mat4(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0)), (_GLF_IDENTITY(determinant(mat4(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0)), min(determinant(mat4(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, float(mat4x3(_GLF_IDENTITY(0.0, min(0.0, 0.0)), 0.0, abs(1.0), 1.0, exp(0.0), 0.0, 1.0, tan(0.0), 0.0, 1.0, abs(1.0), sqrt(abs(1.0))))), 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0)), determinant(mat4(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, _GLF_IDENTITY(0.0, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_IDENTITY(_GLF_FUZZED(1.3), min(_GLF_IDENTITY(_GLF_FUZZED(1.3), mix(float(_GLF_FUZZED(1.3)), float(_GLF_FUZZED(vec4(-4.9, -1855.3467, 4.4, 8.0).a)), bool(false))), _GLF_FUZZED(1.3))) : 0.0)), 0.0, 0.0))))) / 1.0)) / 1.0), 0.0, 0.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, log(1.0), 1.0)), 0.0), mat2(mat4x2(mat2(injectionSwitch, determinant(mat4(1.0, determinant(mat4(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0)), 0.0, 0.0, length(vec4(0.0, _GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(9.8))), 0.0, 0.0)), 1.0, 0.0, 0.0, _GLF_IDENTITY(0.0, (0.0) * 1.0), 1.0, 1.0, _GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0, 0.0, log(1.0), 1.0)), 0.0))))))), 0.0, 0.0, cos(0.0), 1.0, 1.0, 0.0)))).x < _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)), injectionSwitch)).y), false, true))) && true)))))
        {
         for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(3), int(3))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
          {
           if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), bool(_GLF_IDENTITY(bvec3(_GLF_WRAPPED_IF_FALSE(false), false, false), bvec3(bvec4(bvec3(_GLF_WRAPPED_IF_FALSE(false), false, false), false))))), (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), bool(_GLF_IDENTITY(bvec3(_GLF_WRAPPED_IF_FALSE(false), false, false), bvec3(bvec4(bvec3(_GLF_WRAPPED_IF_FALSE(false), _GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false)), false), false)))))) || false))
            {
             do
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
                barrier();
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0)) / sqrt(abs(1.0))) > injectionSwitch.y))));
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               do
                {
                 if(_GLF_DEAD(false))
                  barrier();
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             else
              {
              }
            }
           else
            {
             do
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                }
               else
                {
                 if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
                  barrier();
                }
               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                }
               else
                {
                 for(int _injected_loop_counter = (0 | 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
                  {
                   for(int _injected_loop_counter = int(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), mix(float(_GLF_ONE(1.0, injectionSwitch.y)), float(_GLF_FUZZED(1.9)), bool(false)))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > 0, bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(_injected_loop_counter > 0, false), bvec2(_GLF_IDENTITY(bvec3(bvec2(_injected_loop_counter > 0, false), true), bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec2(_GLF_IDENTITY(_injected_loop_counter > 0, bool(bvec2(_injected_loop_counter > 0, false))), false), true), _GLF_IDENTITY(_GLF_IDENTITY(bvec3(bvec4(bvec3(bvec2(_GLF_IDENTITY(_injected_loop_counter > 0, bool(_GLF_IDENTITY(bvec2(_injected_loop_counter > 0, false), _GLF_IDENTITY(bvec2(bvec2(bvec2(_injected_loop_counter > 0, false))), bvec2(bvec4(bvec2(bvec2(bvec2(_injected_loop_counter > 0, false))), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), false), true), true)), bvec3(bvec3(bvec3(bvec4(bvec3(bvec2(_GLF_IDENTITY(_injected_loop_counter > 0, bool(_GLF_IDENTITY(bvec2(_injected_loop_counter > 0, false), _GLF_IDENTITY(bvec2(bvec2(bvec2(_injected_loop_counter > 0, false))), bvec2(bvec4(bvec2(bvec2(bvec2(_injected_loop_counter > 0, false))), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), false), true), true))))), bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec4(bvec3(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter > 0, (_injected_loop_counter > 0) || false), bool(bvec2(_injected_loop_counter > 0, false))), false), true), true)), bvec3(bvec3(bvec3(bvec4(bvec3(bvec2(_GLF_IDENTITY(_injected_loop_counter > 0, bool(bvec2(_injected_loop_counter > 0, false))), false), true), true)))))))))))))), bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec2(_injected_loop_counter > 0, false), bvec2(_GLF_IDENTITY(bvec3(bvec2(_injected_loop_counter > 0, false), true), bvec3(bvec3(bvec3(bvec2(_injected_loop_counter > 0, false), true))))))), bvec2(bvec3(bvec2(_GLF_IDENTITY(bvec2(_injected_loop_counter > _GLF_IDENTITY(0, (_GLF_IDENTITY(0, 0 ^ (0))) ^ 0), false), bvec2(_GLF_IDENTITY(bvec3(bvec2(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) - 0) > 0, false), true), bvec3(bvec3(bvec3(bvec2(_injected_loop_counter > 0, false), true))))))), false)))))))); _injected_loop_counter --)
                    {
                     for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2))); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), 0 + (int(3)))))); _injected_loop_counter --)
                      {
                       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                        {
                         if(_GLF_DEAD(false))
                          {
                           do
                            {
                             barrier();
                            }
                           while(_GLF_WRAPPED_LOOP(false));
                          }
                         if(_GLF_DEAD(false))
                          barrier();
                        }
                       else
                        {
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          barrier();
                        }
                      }
                     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y))))
                      {
                      }
                     else
                      {
                       atomicStore(buf[next_virtual_gid], uint(1), 4, 64, 4);
                      }
                    }
                  }
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                  }
                 else
                  {
                   barrier();
                  }
                }
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(mat4x2(injectionSwitch.x, 0.0, 1.0, 1.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 1.0, 1.0, 0.0))) > injectionSwitch.y))));
            }
          }
        }
       else
        {
        }
      }
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec3(bvec2(false, false), false)))))))
    {
    }
   else
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
    }
  }
 else
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bool(true)), bool(bvec3(bool(bool(true)), false, true))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
         barrier();
        }
      }
    }
   else
    {
    }
   subgroupAll(false);
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))) || false), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), (true ? _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), max(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)))) : _GLF_FUZZED(-831.197))), _GLF_IDENTITY(min(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), clamp(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), mix(float(_GLF_FUZZED(0.1)), float(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x))), bool(true))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x))) - 0.0), _GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x))))), (min(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), clamp(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), mix(float(_GLF_FUZZED(0.1)), float(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(20.25)), vec2(_GLF_FUZZED(5.9), (injectionSwitch)[1]), bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))).x))), bool(true))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x))) - 0.0), _GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)))))))) / 1.0)) > injectionSwitch.y)), (bool(bool(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))) && true))), false || ((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(float(injectionSwitch.y)), clamp(_GLF_IDENTITY(float(float(injectionSwitch.y)), (float(float(injectionSwitch.y))) / 1.0), float(float(injectionSwitch.y)), float(float(injectionSwitch.y))))), clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))) || false), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y)), (bool(bool(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))) && true))))), ((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y, _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y)), (bool(bool(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))) && true)))) || false))))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       do
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
     do
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         do
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))), (_GLF_DEAD(_GLF_IDENTITY(false, false || (false)))) && true))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (false))))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
           if(_GLF_DEAD(false))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
         barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(8.9)), float(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x))), bool(true))), _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x)) > injectionSwitch.y))))
            barrier();
           barrier();
          }
        }
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))));
        }
       else
        {
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * _GLF_IDENTITY(1.0, 0.0 + (1.0))))) && (false))));
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         barrier();
        }
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(5), ~ (~ (_GLF_IDENTITY(int(5), (int(5)) | (int(5)))))), int(5)))); _injected_loop_counter --)
      {
       barrier();
      }
    }
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, ~ (~ (_injected_loop_counter))) < 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch : _GLF_FUZZED(vec2(-81.00, -87.24)))).x > injectionSwitch.y))))
      {
       do
        {
         do
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       else
        {
         barrier();
        }
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) && _GLF_IDENTITY(true, true && (true)))))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   atomicStore(buf[next_virtual_gid], uint(1), 4, 64, 4);
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 subgroupBarrier();
 atomicStore(buf[GLF_merged3_0_2_53_2_1_12_3_1_14GLF_merged2_0_1_17_1_1_11subgroup_local_idvirtual_gidworkgroup_idworkgroup_size.xy.y], read, 4, _GLF_IDENTITY(64, (64) + 0), 4);
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END
BUFFER checker DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected_checker DATA_TYPE uint32 SIZE 8388096 FILL 0

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 
  BIND BUFFER checker AS storage DESCRIPTOR_SET 0 BINDING 2 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT checker EQ_BUFFER expected_checker
