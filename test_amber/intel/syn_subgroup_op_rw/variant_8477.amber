#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_214 {
 uvec3 _f0;
 mat3x2 _f1;
 ivec2 _f2;
} ;

struct _GLF_struct_213 {
 int _f0;
 int _f1;
} ;

struct _GLF_struct_212 {
 int _f0;
 uvec3 _f1;
 ivec2 _f2;
 mat3x2 _f3;
 bvec2 _f4;
 uvec3 _f5;
} ;

struct _GLF_struct_211 {
 uvec3 _f0;
 ivec3 _f1;
} ;

struct _GLF_struct_210 {
 uvec2 _f0;
 bvec4 _f1;
 uvec2 _f2;
 uvec2 _f3;
 mat3x4 _f4;
} ;

struct _GLF_struct_215 {
 _GLF_struct_210 _f0;
 _GLF_struct_211 _f1;
 _GLF_struct_212 _f2;
 _GLF_struct_213 _f3;
 uvec4 _f4;
 uvec4 _f5;
 _GLF_struct_214 _f6;
} ;

struct _GLF_struct_208 {
 mat4x2 _f0;
 vec3 _f1;
} ;

struct _GLF_struct_207 {
 bvec3 _f0;
 vec3 _f1;
 mat4x3 _f2;
 uvec4 _f3;
 vec4 _f4;
 bvec3 _f5;
 bool _f6;
} ;

struct _GLF_struct_209 {
 _GLF_struct_207 _f0;
 uvec2 _f1;
 ivec3 _f2;
 mat3 _f3;
 _GLF_struct_208 _f4;
 ivec3 _f5;
 bvec3 _f6;
} ;

struct _GLF_struct_205 {
 ivec2 _f0;
 mat2 _f1;
 uvec2 _f2;
 ivec4 _f3;
 bvec4 _f4;
 bool _f5;
 mat4x2 _f6;
} ;

struct _GLF_struct_204 {
 mat2 _f0;
 ivec2 _f1;
 mat2 _f2;
 mat2x3 _f3;
 uint _f4;
 uint _f5;
 mat3x4 _f6;
} ;

struct _GLF_struct_206 {
 mat3x2 _f0;
 _GLF_struct_204 _f1;
 mat4 _f2;
 _GLF_struct_205 _f3;
} ;

struct _GLF_struct_202 {
 int _f0;
 uvec2 _f1;
 mat4x3 _f2;
 mat4x2 _f3;
 uvec4 _f4;
 uvec3 _f5;
} ;

struct _GLF_struct_203 {
 _GLF_struct_202 _f0;
 uvec3 _f1;
 mat2x3 _f2;
} ;

struct _GLF_struct_216 {
 mat2 _f0;
 _GLF_struct_203 _f1;
 ivec2 _f2;
 int _injected_loop_counter;
 _GLF_struct_206 _f3;
 _GLF_struct_209 _f4;
 _GLF_struct_215 _f5;
} ;

struct _GLF_struct_199 {
 ivec3 _f0;
 bvec4 _f1;
 mat2x3 _f2;
 bool _f3;
} ;

struct _GLF_struct_200 {
 uint _f0;
 _GLF_struct_199 _f1;
} ;

struct _GLF_struct_197 {
 int _injected_loop_counter;
 vec4 _f0;
} ;

struct _GLF_struct_198 {
 mat4 _f0;
 _GLF_struct_197 _f1;
 float _f2;
} ;

struct _GLF_struct_201 {
 mat3 _f0;
 bvec3 _f1;
 _GLF_struct_198 _f2;
 bvec4 _f3;
 bvec2 _f4;
 ivec4 _f5;
 _GLF_struct_200 _f6;
} ;

struct _GLF_struct_196 {
 bvec2 _f0;
 int _injected_loop_counter;
 mat3x2 _f1;
} ;

struct _GLF_struct_193 {
 ivec2 _f0;
 mat4x3 _f1;
 bvec4 _f2;
 uvec3 _f3;
 mat4 _f4;
 ivec3 _f5;
} ;

struct _GLF_struct_192 {
 float _f0;
 vec4 _f1;
 mat3x4 _f2;
 vec3 _f3;
 ivec3 _f4;
 uint _f5;
} ;

struct _GLF_struct_191 {
 mat3x4 _f0;
 mat3 _f1;
 mat4x2 _f2;
 ivec3 _f3;
 uvec4 _f4;
} ;

struct _GLF_struct_194 {
 mat3x2 _f0;
 _GLF_struct_191 _f1;
 bvec4 _f2;
 _GLF_struct_192 _f3;
 uvec4 _f4;
 _GLF_struct_193 _f5;
 uvec4 _f6;
} ;

struct _GLF_struct_189 {
 mat4 _f0;
 vec2 _f1;
 mat4x2 _f2;
 vec2 _f3;
 mat4x2 _f4;
} ;

struct _GLF_struct_190 {
 _GLF_struct_189 _f0;
} ;

struct _GLF_struct_188 {
 int _injected_loop_counter;
 mat4x3 _f0;
} ;

struct _GLF_struct_186 {
 vec3 _f0;
 mat4 _f1;
 bvec4 _f2;
} ;

struct _GLF_struct_187 {
 mat2x3 _f0;
 mat2x4 _f1;
 _GLF_struct_186 _f2;
 vec2 _f3;
} ;

struct _GLF_struct_184 {
 vec3 _f0;
 uint _f1;
 uvec2 _f2;
 mat3 _f3;
 uvec2 _f4;
} ;

struct _GLF_struct_183 {
 mat2x4 _f0;
} ;

struct _GLF_struct_185 {
 _GLF_struct_183 _f0;
 vec2 _f1;
 vec3 _f2;
 bvec4 _f3;
 _GLF_struct_184 _f4;
} ;

struct _GLF_struct_195 {
 ivec3 _f0;
 _GLF_struct_185 _f1;
 _GLF_struct_187 _f2;
 ivec2 _f3;
 _GLF_struct_188 _f4;
 _GLF_struct_190 _f5;
 _GLF_struct_194 _f6;
} ;

struct _GLF_struct_180 {
 ivec3 _f0;
 bvec3 _f1;
 bvec4 _f2;
} ;

struct _GLF_struct_181 {
 vec2 _f0;
 _GLF_struct_180 _f1;
} ;

struct _GLF_struct_178 {
 mat3x2 _f0;
 uvec3 _f1;
 mat3x4 _f2;
 uvec2 _f3;
 bvec4 _f4;
} ;

struct _GLF_struct_177 {
 bool _f0;
 ivec3 _f1;
 uvec4 _f2;
 mat2x3 _f3;
 mat4x3 _f4;
 vec2 _f5;
 bvec3 _f6;
} ;

struct _GLF_struct_176 {
 ivec3 _f0;
 uint _f1;
 mat2x4 _f2;
 mat4x2 _f3;
 ivec3 _f4;
 mat2 _f5;
 vec3 _f6;
} ;

struct _GLF_struct_179 {
 _GLF_struct_176 _f0;
 uvec2 _f1;
 mat4x3 _f2;
 _GLF_struct_177 _f3;
 vec4 _f4;
 _GLF_struct_178 _f5;
} ;

struct _GLF_struct_174 {
 int _injected_loop_counter;
 uvec2 _f0;
 vec4 _f1;
 uvec2 _f2;
 bool _f3;
} ;

struct _GLF_struct_175 {
 _GLF_struct_174 _f0;
 int _f1;
} ;

struct _GLF_struct_182 {
 mat4x2 _f0;
 _GLF_struct_175 _f1;
 _GLF_struct_179 _f2;
 _GLF_struct_181 _f3;
} ;

struct _GLF_struct_171 {
 mat4x2 _f0;
 mat2 _f1;
 vec2 _f2;
 int _injected_loop_counter;
 vec2 _f3;
 bvec3 _f4;
} ;

struct _GLF_struct_172 {
 _GLF_struct_171 _f0;
} ;

struct _GLF_struct_169 {
 bvec2 _f0;
 ivec2 _f1;
 bvec3 _f2;
 mat3x2 _f3;
 bvec3 _f4;
 mat2x4 _f5;
 bvec4 _f6;
} ;

struct _GLF_struct_170 {
 _GLF_struct_169 _f0;
} ;

struct _GLF_struct_173 {
 bvec4 _f0;
 _GLF_struct_170 _f1;
 _GLF_struct_172 _f2;
} ;

struct _GLF_struct_166 {
 float _f0;
 ivec2 _f1;
 vec4 _f2;
 uint _f3;
 vec3 _f4;
 uvec4 _f5;
} ;

struct _GLF_struct_167 {
 mat3x2 _f0;
 _GLF_struct_166 _f1;
 int _injected_loop_counter;
} ;

struct _GLF_struct_164 {
 mat3 _f0;
} ;

struct _GLF_struct_165 {
 _GLF_struct_164 _f0;
} ;

struct _GLF_struct_163 {
 uint _f0;
 bvec4 _f1;
 float _f2;
} ;

struct _GLF_struct_168 {
 _GLF_struct_163 _f0;
 _GLF_struct_165 _f1;
 bvec4 _f2;
 _GLF_struct_167 _f3;
 mat4x3 _f4;
 uvec4 _f5;
} ;

struct _GLF_struct_160 {
 mat2x3 _f0;
} ;

struct _GLF_struct_161 {
 _GLF_struct_160 _f0;
 mat4x2 _f1;
 vec2 _f2;
 mat2x3 _f3;
} ;

struct _GLF_struct_158 {
 ivec4 _f0;
 uint _f1;
} ;

struct _GLF_struct_157 {
 ivec4 _f0;
 mat4x3 _f1;
 mat3x4 _f2;
 bvec4 _f3;
 bvec3 _f4;
} ;

struct _GLF_struct_159 {
 vec2 _f0;
 _GLF_struct_157 _f1;
 _GLF_struct_158 _f2;
 mat4x2 _f3;
} ;

struct _GLF_struct_155 {
 mat3 _f0;
} ;

struct _GLF_struct_154 {
 ivec3 _f0;
} ;

struct _GLF_struct_153 {
 uvec3 _f0;
 vec2 _f1;
 ivec4 _f2;
 mat2 _f3;
 bvec2 _f4;
} ;

struct _GLF_struct_152 {
 uint _f0;
 ivec4 _f1;
 mat2 _f2;
 bvec3 _f3;
 int _f4;
 ivec3 _f5;
 mat2 _f6;
} ;

struct _GLF_struct_156 {
 _GLF_struct_152 _f0;
 _GLF_struct_153 _f1;
 _GLF_struct_154 _f2;
 _GLF_struct_155 _f3;
 int _injected_loop_counter;
 ivec3 _f4;
} ;

struct _GLF_struct_162 {
 mat4 _f0;
 uvec4 _f1;
 _GLF_struct_156 _f2;
 _GLF_struct_159 _f3;
 _GLF_struct_161 _f4;
} ;

struct _GLF_struct_150 {
 ivec3 _f0;
 bool _f1;
 ivec2 _f2;
} ;

struct _GLF_struct_151 {
 _GLF_struct_150 _f0;
 int _injected_loop_counter;
} ;

struct _GLF_struct_147 {
 uvec3 _f0;
 mat2x3 _f1;
} ;

struct _GLF_struct_146 {
 ivec3 _f0;
 mat4x2 _f1;
 mat3x4 _f2;
} ;

struct _GLF_struct_145 {
 vec4 _f0;
 mat2x3 _f1;
 vec4 _f2;
} ;

struct _GLF_struct_148 {
 int _f0;
 vec3 _f1;
 _GLF_struct_145 _f2;
 _GLF_struct_146 _f3;
 ivec3 _f4;
 uvec3 _f5;
 _GLF_struct_147 _f6;
} ;

struct _GLF_struct_143 {
 mat2x3 _f0;
 bvec2 _f1;
 bvec2 _f2;
 mat3 _f3;
 int _injected_loop_counter;
 bvec4 _f4;
} ;

struct _GLF_struct_142 {
 bvec4 _f0;
 mat4x3 _f1;
 mat3 _f2;
 mat2x3 _f3;
 bvec2 _f4;
} ;

struct _GLF_struct_141 {
 vec3 _f0;
 vec3 _f1;
 mat3x4 _f2;
} ;

struct _GLF_struct_144 {
 _GLF_struct_141 _f0;
 mat4x2 _f1;
 int _f2;
 _GLF_struct_142 _f3;
 ivec3 _f4;
 _GLF_struct_143 _f5;
} ;

struct _GLF_struct_149 {
 _GLF_struct_144 _f0;
 bvec2 _f1;
 mat2x3 _f2;
 _GLF_struct_148 _f3;
} ;

struct _GLF_struct_138 {
 bool _f0;
 uint _f1;
 vec4 _f2;
 bvec3 _f3;
 ivec2 _f4;
 uvec4 _f5;
 mat2 _f6;
} ;

struct _GLF_struct_139 {
 vec2 _f0;
 _GLF_struct_138 _f1;
 mat2x3 _f2;
} ;

struct _GLF_struct_136 {
 vec3 _f0;
 mat2x3 _f1;
 bvec3 _f2;
 uvec4 _f3;
 vec2 _f4;
 bvec2 _f5;
} ;

struct _GLF_struct_137 {
 mat2 _f0;
 _GLF_struct_136 _f1;
} ;

struct _GLF_struct_134 {
 mat2x3 _f0;
 mat4x2 _f1;
 ivec2 _f2;
 vec3 _f3;
} ;

struct _GLF_struct_133 {
 bvec4 _f0;
 mat3x4 _f1;
 uvec2 _f2;
 vec3 _f3;
 bvec3 _f4;
 float _f5;
 mat3 _f6;
} ;

struct _GLF_struct_132 {
 mat4 _f0;
 uvec2 _f1;
 ivec2 _f2;
 uint _f3;
 uvec2 _f4;
 uvec2 _f5;
} ;

struct _GLF_struct_135 {
 ivec4 _f0;
 _GLF_struct_132 _f1;
 mat3 _f2;
 _GLF_struct_133 _f3;
 vec4 _f4;
 _GLF_struct_134 _f5;
} ;

struct _GLF_struct_131 {
 bool _f0;
 mat4x2 _f1;
 ivec4 _f2;
 bvec3 _f3;
} ;

struct _GLF_struct_129 {
 mat4x2 _f0;
 ivec2 _f1;
 mat4x3 _f2;
} ;

struct _GLF_struct_128 {
 uvec2 _f0;
 uint _f1;
 mat4 _f2;
 mat4x3 _f3;
 ivec4 _f4;
} ;

struct _GLF_struct_130 {
 ivec2 _f0;
 ivec3 _f1;
 mat2x4 _f2;
 _GLF_struct_128 _f3;
 mat4 _f4;
 mat3 _f5;
 _GLF_struct_129 _f6;
} ;

struct _GLF_struct_140 {
 _GLF_struct_130 _f0;
 _GLF_struct_131 _f1;
 mat3 _f2;
 _GLF_struct_135 _f3;
 _GLF_struct_137 _f4;
 int _injected_loop_counter;
 _GLF_struct_139 _f5;
 mat2x3 _f6;
} ;

struct _GLF_struct_125 {
 uvec2 _f0;
 bvec3 _f1;
 float _f2;
 uvec4 _f3;
 mat3x2 _f4;
} ;

struct _GLF_struct_124 {
 bool _f0;
 mat3x4 _f1;
 bvec3 _f2;
} ;

struct _GLF_struct_126 {
 _GLF_struct_124 _f0;
 vec2 _f1;
 _GLF_struct_125 _f2;
} ;

struct _GLF_struct_123 {
 mat4x3 _f0;
 uint num_workgroup;
 mat3x4 _f1;
 mat2 _f2;
 bool _f3;
} ;

struct _GLF_struct_121 {
 mat2 _f0;
} ;

struct _GLF_struct_120 {
 bvec4 _f0;
 vec2 _f1;
 vec2 _f2;
} ;

struct _GLF_struct_119 {
 mat2x3 _f0;
 ivec2 _f1;
 ivec2 _f2;
 uvec2 _f3;
 vec2 _f4;
} ;

struct _GLF_struct_122 {
 _GLF_struct_119 _f0;
 _GLF_struct_120 _f1;
 _GLF_struct_121 _f2;
 mat2x4 _f3;
} ;

struct _GLF_struct_127 {
 uvec3 _f0;
 _GLF_struct_122 _f1;
 _GLF_struct_123 _f2;
 mat2x4 _f3;
 bvec2 _f4;
 uvec2 _f5;
 _GLF_struct_126 _f6;
} ;

struct _GLF_struct_117 {
 bvec3 _f0;
 mat3 _f1;
} ;

struct _GLF_struct_115 {
 mat3x4 _f0;
 mat2x3 _f1;
} ;

struct _GLF_struct_116 {
 _GLF_struct_115 _f0;
 uint _f1;
 int _injected_loop_counter;
} ;

struct _GLF_struct_113 {
 mat4x3 _f0;
} ;

struct _GLF_struct_114 {
 mat3 _f0;
 bvec2 _f1;
 _GLF_struct_113 _f2;
} ;

struct _GLF_struct_118 {
 vec4 _f0;
 _GLF_struct_114 _f1;
 int _f2;
 _GLF_struct_116 _f3;
 _GLF_struct_117 _f4;
 mat2 _f5;
} ;

struct _GLF_struct_110 {
 uvec3 _f0;
 bvec2 _f1;
 mat4 _f2;
 uvec2 _f3;
 vec3 _f4;
 bool _f5;
} ;

struct _GLF_struct_109 {
 mat2x3 _f0;
 mat2x3 _f1;
 uint _f2;
 float _f3;
 mat2x4 _f4;
 bvec2 _f5;
} ;

struct _GLF_struct_111 {
 _GLF_struct_109 _f0;
 _GLF_struct_110 _f1;
 bool _f2;
} ;

struct _GLF_struct_107 {
 vec4 _f0;
 int _f1;
 int _f2;
 bool _f3;
} ;

struct _GLF_struct_108 {
 uvec4 _f0;
 vec4 _f1;
 _GLF_struct_107 _f2;
 bvec3 _f3;
 uint _f4;
 vec3 _f5;
} ;

struct _GLF_struct_105 {
 bvec2 _f0;
} ;

struct _GLF_struct_104 {
 mat4x2 _f0;
 vec2 _f1;
 mat3x2 _f2;
 ivec2 _f3;
 bvec2 _f4;
} ;

struct _GLF_struct_103 {
 uvec2 _f0;
 int _f1;
 ivec4 _f2;
 mat4x2 _f3;
 bvec4 _f4;
 mat2x3 _f5;
 mat3 _f6;
} ;

struct _GLF_struct_102 {
 bvec3 _f0;
 mat2x4 _f1;
 ivec3 _f2;
 mat2x4 _f3;
 vec2 _f4;
 uint _f5;
 mat2x3 _f6;
} ;

struct _GLF_struct_101 {
 vec2 _f0;
 uvec4 _f1;
 float _f2;
} ;

struct _GLF_struct_106 {
 _GLF_struct_101 _f0;
 _GLF_struct_102 _f1;
 mat4 _f2;
 _GLF_struct_103 _f3;
 _GLF_struct_104 _f4;
 _GLF_struct_105 _f5;
 ivec2 _f6;
} ;

struct _GLF_struct_112 {
 _GLF_struct_106 _f0;
 int _injected_loop_counter;
 mat3x2 _f1;
 _GLF_struct_108 _f2;
 uvec4 _f3;
 _GLF_struct_111 _f4;
} ;

struct _GLF_struct_98 {
 mat3x4 _f0;
 mat4 _f1;
 vec4 _f2;
} ;

struct _GLF_struct_97 {
 ivec4 _f0;
 bvec4 _f1;
 bvec4 _f2;
} ;

struct _GLF_struct_99 {
 _GLF_struct_97 _f0;
 _GLF_struct_98 _f1;
 int _injected_loop_counter;
} ;

struct _GLF_struct_100 {
 _GLF_struct_99 _f0;
} ;

struct _GLF_struct_94 {
 mat3x2 _f0;
} ;

struct _GLF_struct_93 {
 mat4 _f0;
 bvec3 _f1;
 mat4x2 _f2;
 mat4x2 _f3;
} ;

struct _GLF_struct_92 {
 int _f0;
} ;

struct _GLF_struct_95 {
 float _f0;
 bool _f1;
 bvec2 _f2;
 _GLF_struct_92 _f3;
 _GLF_struct_93 _f4;
 _GLF_struct_94 _f5;
 mat4 _f6;
} ;

struct _GLF_struct_90 {
 mat3x2 _f0;
 ivec3 _f1;
 vec2 _f2;
 mat3 _f3;
 int _f4;
 uvec3 _f5;
} ;

struct _GLF_struct_91 {
 ivec4 _f0;
 _GLF_struct_90 _f1;
} ;

struct _GLF_struct_88 {
 ivec4 _f0;
 vec3 _f1;
 float _f2;
 bool _f3;
 uint _f4;
} ;

struct _GLF_struct_87 {
 mat3x2 _f0;
 ivec2 _f1;
 uvec2 _f2;
 bvec2 _f3;
} ;

struct _GLF_struct_86 {
 uvec3 _f0;
 mat3 _f1;
 float _f2;
 bvec3 _f3;
 uvec4 _f4;
} ;

struct _GLF_struct_85 {
 uvec2 _f0;
} ;

struct _GLF_struct_89 {
 _GLF_struct_85 _f0;
 _GLF_struct_86 _f1;
 _GLF_struct_87 _f2;
 _GLF_struct_88 _f3;
 vec2 _f4;
} ;

struct _GLF_struct_96 {
 _GLF_struct_89 _f0;
 int _injected_loop_counter;
 _GLF_struct_91 _f1;
 _GLF_struct_95 _f2;
 mat2 _f3;
} ;

struct _GLF_struct_82 {
 ivec2 _f0;
 ivec4 _f1;
 bvec3 _f2;
 mat2x4 _f3;
 uvec2 _f4;
 bool _f5;
 uint _f6;
} ;

struct _GLF_struct_81 {
 mat3x2 _f0;
 mat2 _f1;
 ivec2 _f2;
 vec4 _f3;
 int _f4;
 vec2 _f5;
 mat2x3 _f6;
} ;

struct _GLF_struct_83 {
 _GLF_struct_81 _f0;
 _GLF_struct_82 _f1;
 ivec3 _f2;
} ;

struct _GLF_struct_80 {
 ivec3 _f0;
 mat4x3 _f1;
} ;

struct _GLF_struct_78 {
 ivec3 _f0;
 float _f1;
 vec3 _f2;
 mat4x3 _f3;
} ;

struct _GLF_struct_77 {
 uvec3 _f0;
 ivec2 _f1;
 uvec2 _f2;
 mat2x3 _f3;
} ;

struct _GLF_struct_79 {
 _GLF_struct_77 _f0;
 uvec4 _f1;
 mat3x4 _f2;
 uvec4 _f3;
 mat2 _f4;
 _GLF_struct_78 _f5;
} ;

struct _GLF_struct_84 {
 _GLF_struct_79 _f0;
 _GLF_struct_80 _f1;
 _GLF_struct_83 _f2;
 int _injected_loop_counter;
 uvec4 _f3;
} ;

struct _GLF_struct_74 {
 bvec3 _f0;
 uint _f1;
 mat2 _f2;
} ;

struct _GLF_struct_73 {
 float _f0;
 mat4x2 _f1;
 mat3x2 _f2;
 ivec2 _f3;
} ;

struct _GLF_struct_72 {
 mat3 _f0;
 ivec3 _f1;
} ;

struct _GLF_struct_75 {
 mat3x4 _f0;
 _GLF_struct_72 _f1;
 _GLF_struct_73 _f2;
 _GLF_struct_74 _f3;
 mat4x3 _f4;
} ;

struct _GLF_struct_71 {
 uint _f0;
} ;

struct _GLF_struct_76 {
 _GLF_struct_71 _f0;
 ivec2 _f1;
 int _injected_loop_counter;
 _GLF_struct_75 _f2;
 mat2x3 _f3;
 bvec3 _f4;
} ;

struct _GLF_struct_68 {
 mat4x2 _f0;
 float _f1;
 bvec4 _f2;
 uvec4 _f3;
 vec4 _f4;
 mat2x3 _f5;
} ;

struct _GLF_struct_69 {
 int _injected_loop_counter;
 _GLF_struct_68 _f0;
} ;

struct _GLF_struct_70 {
 ivec4 _f0;
 vec4 _f1;
 bvec3 _f2;
 ivec4 _f3;
 _GLF_struct_69 _f4;
} ;

struct _GLF_struct_66 {
 mat4x3 _f0;
} ;

struct _GLF_struct_64 {
 vec3 _f0;
 int _f1;
 mat3x2 _f2;
 mat3x2 _f3;
} ;

struct _GLF_struct_63 {
 mat3x4 _f0;
} ;

struct _GLF_struct_65 {
 _GLF_struct_63 _f0;
 _GLF_struct_64 _f1;
 uint _f2;
 vec2 _f3;
 mat2x3 _f4;
} ;

struct _GLF_struct_61 {
 vec3 _f0;
 int _f1;
 uvec4 _f2;
 mat3 _f3;
 uvec3 _f4;
 uvec4 _f5;
 uvec4 _f6;
} ;

struct _GLF_struct_60 {
 mat2x4 _f0;
 mat2x4 _f1;
 bvec2 _f2;
 vec2 _f3;
 mat3x4 _f4;
} ;

struct _GLF_struct_59 {
 mat4x3 _f0;
} ;

struct _GLF_struct_62 {
 _GLF_struct_59 _f0;
 int _injected_loop_counter;
 _GLF_struct_60 _f1;
 _GLF_struct_61 _f2;
} ;

struct _GLF_struct_57 {
 uint _f0;
 ivec4 _f1;
 float _f2;
 mat4 _f3;
 ivec4 _f4;
 uvec4 _f5;
 bvec3 _f6;
} ;

struct _GLF_struct_56 {
 ivec4 _f0;
} ;

struct _GLF_struct_58 {
 mat4x2 _f0;
 _GLF_struct_56 _f1;
 int _f2;
 _GLF_struct_57 _f3;
} ;

struct _GLF_struct_67 {
 _GLF_struct_58 _f0;
 _GLF_struct_62 _f1;
 uvec3 _f2;
 _GLF_struct_65 _f3;
 float _f4;
 _GLF_struct_66 _f5;
} ;

struct _GLF_struct_53 {
 mat2 _f0;
 mat4 _f1;
 mat4x3 _f2;
} ;

struct _GLF_struct_52 {
 mat2 _f0;
 uvec4 _f1;
 mat3x2 _f2;
 uvec4 _f3;
} ;

struct _GLF_struct_54 {
 ivec4 _f0;
 mat2 _f1;
 _GLF_struct_52 _f2;
 _GLF_struct_53 _f3;
 float _f4;
} ;

struct _GLF_struct_50 {
 ivec2 _f0;
 ivec2 _f1;
} ;

struct _GLF_struct_51 {
 mat3x4 _f0;
 _GLF_struct_50 _f1;
 vec4 _f2;
} ;

struct _GLF_struct_48 {
 mat2 _f0;
 mat4x3 _f1;
 bvec2 _f2;
} ;

struct _GLF_struct_49 {
 _GLF_struct_48 _f0;
} ;

struct _GLF_struct_47 {
 ivec4 _f0;
} ;

struct _GLF_struct_55 {
 _GLF_struct_47 _f0;
 vec2 _f1;
 bvec2 _f2;
 _GLF_struct_49 _f3;
 int _injected_loop_counter;
 _GLF_struct_51 _f4;
 _GLF_struct_54 _f5;
} ;

struct _GLF_struct_44 {
 uvec4 _f0;
 float _f1;
 mat3 _f2;
} ;

struct _GLF_struct_45 {
 vec4 _f0;
 _GLF_struct_44 _f1;
 mat3x2 _f2;
 mat4 _f3;
 uint read;
 ivec4 _f4;
} ;

struct _GLF_struct_46 {
 ivec2 _f0;
 ivec2 _f1;
 _GLF_struct_45 _f2;
} ;

struct _GLF_struct_43 {
 ivec4 _f0;
 int _injected_loop_counter;
} ;

struct _GLF_struct_42 {
 bvec2 _f0;
 uint workgroup_size;
} ;

struct _GLF_struct_39 {
 mat4 _f0;
 uvec3 _f1;
 float _f2;
} ;

struct _GLF_struct_38 {
 int _f0;
 mat3x4 _f1;
 mat4x3 _f2;
 mat3 _f3;
 mat4x3 _f4;
 ivec2 _f5;
} ;

struct _GLF_struct_37 {
 vec3 _f0;
 vec3 _f1;
 uint _f2;
 vec3 _f3;
 mat4x2 _f4;
 ivec2 _f5;
} ;

struct _GLF_struct_36 {
 vec4 _f0;
 bvec4 _f1;
 mat3x4 _f2;
} ;

struct _GLF_struct_35 {
 vec3 _f0;
 vec3 _f1;
 vec2 _f2;
} ;

struct _GLF_struct_34 {
 mat4x3 _f0;
 float _f1;
 uvec4 _f2;
} ;

struct _GLF_struct_40 {
 _GLF_struct_34 _f0;
 _GLF_struct_35 _f1;
 mat2x4 _f2;
 _GLF_struct_36 _f3;
 _GLF_struct_37 _f4;
 _GLF_struct_38 _f5;
 _GLF_struct_39 _f6;
} ;

struct _GLF_struct_41 {
 mat4x3 _f0;
 uint subgroup_id;
 ivec3 _f1;
 mat4x3 _f2;
 _GLF_struct_40 _f3;
} ;

struct _GLF_struct_31 {
 uint _f0;
 mat2 _f1;
 float _f2;
 ivec4 _f3;
 mat3x4 _f4;
 mat3x2 _f5;
} ;

struct _GLF_struct_30 {
 vec4 _f0;
 vec4 _f1;
 mat2x3 _f2;
} ;

struct _GLF_struct_29 {
 bool _f0;
 mat3x4 _f1;
 bvec3 _f2;
 bvec3 _f3;
 mat3 _f4;
 mat2x3 _f5;
} ;

struct _GLF_struct_28 {
 mat2 _f0;
 ivec2 _f1;
 ivec3 _f2;
 ivec4 _f3;
} ;

struct _GLF_struct_27 {
 mat2x3 _f0;
 mat4x3 _f1;
 ivec3 _f2;
 mat2x3 _f3;
} ;

struct _GLF_struct_32 {
 _GLF_struct_27 _f0;
 _GLF_struct_28 _f1;
 _GLF_struct_29 _f2;
 _GLF_struct_30 _f3;
 _GLF_struct_31 _f4;
} ;

struct _GLF_struct_25 {
 mat4 _f0;
 ivec2 _f1;
 bvec3 _f2;
 mat4x2 _f3;
 bvec4 _f4;
 mat4 _f5;
 ivec4 _f6;
} ;

struct _GLF_struct_24 {
 bvec3 _f0;
} ;

struct _GLF_struct_23 {
 uvec4 _f0;
 mat3x4 _f1;
 bvec4 _f2;
 bvec4 _f3;
 uvec4 _f4;
} ;

struct _GLF_struct_22 {
 uvec4 _f0;
 ivec4 _f1;
 mat2x3 _f2;
 mat3x2 _f3;
} ;

struct _GLF_struct_21 {
 bvec2 _f0;
 mat3 _f1;
 ivec2 _f2;
 uvec4 _f3;
 uvec3 _f4;
 ivec2 _f5;
} ;

struct _GLF_struct_26 {
 _GLF_struct_21 _f0;
 _GLF_struct_22 _f1;
 _GLF_struct_23 _f2;
 _GLF_struct_24 _f3;
 _GLF_struct_25 _f4;
 vec3 _f5;
} ;

struct _GLF_struct_19 {
 uvec2 _f0;
 vec2 _f1;
 mat2 _f2;
 uint _f3;
 uvec4 _f4;
 mat4x2 _f5;
 ivec3 _f6;
} ;

struct _GLF_struct_18 {
 ivec3 _f0;
 int _f1;
} ;

struct _GLF_struct_17 {
 vec3 _f0;
 bvec4 _f1;
 vec4 _f2;
 mat2x3 _f3;
 mat3x2 _f4;
 bvec3 _f5;
 mat3x4 _f6;
} ;

struct _GLF_struct_20 {
 uint workgroup_base;
 _GLF_struct_17 _f0;
 uvec3 _f1;
 uvec4 _f2;
 int _f3;
 int _f4;
 _GLF_struct_18 _f5;
 _GLF_struct_19 _f6;
} ;

struct _GLF_struct_33 {
 _GLF_struct_20 _f0;
 _GLF_struct_26 _f1;
 float _f2;
 _GLF_struct_32 _f3;
} ;

struct _GLF_struct_14 {
 mat2 _f0;
 bvec2 _f1;
 mat4x3 _f2;
 ivec4 _f3;
 uvec4 _f4;
 mat2 _f5;
} ;

struct _GLF_struct_13 {
 mat4 _f0;
} ;

struct _GLF_struct_15 {
 _GLF_struct_13 _f0;
 vec3 _f1;
 _GLF_struct_14 _f2;
} ;

struct _GLF_struct_11 {
 mat2 _f0;
 float _f1;
 ivec3 _f2;
 ivec2 _f3;
} ;

struct _GLF_struct_12 {
 vec2 _f0;
 _GLF_struct_11 _f1;
 vec4 _f2;
} ;

struct _GLF_struct_9 {
 vec3 _f0;
 mat4 _f1;
 vec2 _f2;
 float _f3;
 mat2 _f4;
 ivec4 _f5;
} ;

struct _GLF_struct_8 {
 float _f0;
 float _f1;
 mat4x3 _f2;
 mat2x4 _f3;
} ;

struct _GLF_struct_7 {
 ivec4 _f0;
 ivec3 _f1;
 mat3 _f2;
 mat4 _f3;
} ;

struct _GLF_struct_6 {
 vec4 _f0;
 bvec3 _f1;
 bvec2 _f2;
 int _f3;
} ;

struct _GLF_struct_5 {
 mat4x2 _f0;
 uvec2 _f1;
} ;

struct _GLF_struct_10 {
 int _injected_loop_counter;
 _GLF_struct_5 _f0;
 _GLF_struct_6 _f1;
 _GLF_struct_7 _f2;
 bool _f3;
 _GLF_struct_8 _f4;
 _GLF_struct_9 _f5;
} ;

struct _GLF_struct_16 {
 _GLF_struct_10 _f0;
 bvec3 _f1;
 _GLF_struct_12 _f2;
 ivec2 _f3;
 _GLF_struct_15 _f4;
} ;

struct _GLF_struct_4 {
 uint subgroup_local_id;
 mat3x2 _f0;
 uvec2 _f1;
} ;

struct _GLF_struct_1 {
 int _f0;
 uvec4 _f1;
 vec3 _f2;
 mat2 _f3;
 mat2x4 _f4;
} ;

struct _GLF_struct_2 {
 _GLF_struct_1 _f0;
 uint _f1;
 uint virtual_gid;
} ;

struct _GLF_struct_3 {
 vec3 _f0;
 _GLF_struct_2 _f1;
} ;

struct _GLF_struct_0 {
 uint next_virtual_gid;
 vec2 _f0;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(false))
  {
   do
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ 0)); _injected_loop_counter --)
          {
           return;
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_DEAD(false))
          return;
        }
       else
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
          {
           do
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              continue;
             return;
            }
          }
        }
       if(_GLF_DEAD(false))
        return;
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       return;
      }
     else
      {
      }
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        return;
      }
     else
      {
      }
    }
   return;
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     return;
    }
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 | (0 | 1))); _injected_loop_counter ++)
    {
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
            return;
          }
         else
          {
          }
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           for(_GLF_struct_16 _GLF_struct_replacement_16 = _GLF_struct_16(_GLF_struct_10(0, _GLF_struct_5(mat4x2(1.0), uvec2(1u)), _GLF_struct_6(vec4(1.0), bvec3(true), bvec2(true), 1), _GLF_struct_7(ivec4(1), ivec3(1), mat3(1.0), mat4(1.0)), true, _GLF_struct_8(1.0, 1.0, mat4x3(1.0), mat2x4(1.0)), _GLF_struct_9(vec3(1.0), mat4(1.0), vec2(1.0), 1.0, mat2(1.0), ivec4(1))), bvec3(true), _GLF_struct_12(vec2(1.0), _GLF_struct_11(mat2(1.0), 1.0, ivec3(1), ivec2(1)), vec4(1.0)), ivec2(1), _GLF_struct_15(_GLF_struct_13(mat4(1.0)), vec3(1.0), _GLF_struct_14(mat2(1.0), bvec2(true), mat4x3(1.0), ivec4(1), uvec4(1u), mat2(1.0)))); _GLF_WRAPPED_LOOP(_GLF_struct_replacement_16._f0._injected_loop_counter != 1); _GLF_struct_replacement_16._f0._injected_loop_counter ++)
            {
             if(_GLF_DEAD(false))
              break;
             if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), false || (bool(false)))))))
              {
               if(_GLF_DEAD(false))
                continue;
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                break;
               break;
              }
             do
              {
               if(_GLF_DEAD(false))
                continue;
               if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
                continue;
               if(_GLF_DEAD(false))
                continue;
               do
                {
                 return;
                }
               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
              }
             while(_GLF_WRAPPED_LOOP(false));
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
             if(_GLF_DEAD(false))
              break;
            }
          }
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_DEAD(false))
          break;
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              continue;
             continue;
            }
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              continue;
             for(_GLF_struct_118 _GLF_struct_replacement_118 = _GLF_struct_118(vec4(1.0), _GLF_struct_114(mat3(1.0), bvec2(true), _GLF_struct_113(mat4x3(1.0))), 1, _GLF_struct_116(_GLF_struct_115(mat3x4(1.0), mat2x3(1.0)), 1u, ((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), ~ (~ (int(4))))))), _GLF_struct_117(bvec3(true), mat3(1.0)), mat2(1.0)); _GLF_WRAPPED_LOOP(_GLF_struct_replacement_118._f3._injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _GLF_struct_replacement_118._f3._injected_loop_counter --)
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 do
                  {
                   return;
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  break;
                }
              }
            }
           do
            {
             if(_GLF_DEAD(false))
              break;
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    break;
                   continue;
                  }
                 return;
                }
               return;
              }
             else
              {
              }
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                {
                 do
                  {
                   return;
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    break;
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                }
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  continue;
                 break;
                }
               return;
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                return;
              }
             if(_GLF_DEAD(false))
              break;
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
          }
        }
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          break;
         break;
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
     if(_GLF_DEAD(false))
      break;
    }
  }
 else
  {
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       return;
      }
     if(_GLF_DEAD(false))
      return;
    }
  }
 else
  {
  }
 do
  {
   if(_GLF_DEAD(false))
    continue;
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      {
       do
        {
         do
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || false)) || false)))
              continue;
             return;
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(false))
          break;
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
     if(_GLF_DEAD(false))
      break;
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        return;
       continue;
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) || false)))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     else
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           do
            {
             return;
            }
           while(_GLF_WRAPPED_LOOP(false));
           if(_GLF_DEAD(false))
            return;
          }
        }
       else
        {
        }
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         return;
        }
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             return;
            }
          }
         if(_GLF_DEAD(false))
          return;
         return;
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        return;
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             return;
            }
           else
            {
            }
          }
        }
       else
        {
        }
      }
    }
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     do
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              continue;
             continue;
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              break;
             break;
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              continue;
             continue;
            }
           do
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               do
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    break;
                   if(_GLF_DEAD(false))
                    return;
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    break;
                   continue;
                   if(_GLF_DEAD(false))
                    return;
                  }
                 if(_GLF_DEAD(false))
                  return;
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   return;
                  }
                }
               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                continue;
              }
             else
              {
              }
             if(_GLF_DEAD(false))
              break;
            }
           while(_GLF_WRAPPED_LOOP(false));
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
            break;
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     return;
    }
   for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      break;
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       return;
      }
     else
      {
      }
    }
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, bool(bvec2(false, true))), true, true, false)))))
    return;
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
  }
 _GLF_struct_41 _GLF_struct_replacement_41 = _GLF_struct_41(mat4x3(1.0), gl_SubgroupID, ivec3(1), mat4x3(1.0), _GLF_struct_40(_GLF_struct_34(mat4x3(1.0), 1.0, uvec4(1u)), _GLF_struct_35(vec3(1.0), vec3(1.0), vec2(1.0)), mat2x4(1.0), _GLF_struct_36(vec4(1.0), bvec4(true), mat3x4(1.0)), _GLF_struct_37(vec3(1.0), vec3(1.0), 1u, vec3(1.0), mat4x2(1.0), ivec2(1)), _GLF_struct_38(1, mat3x4(1.0), mat4x3(1.0), mat3(1.0), mat4x3(1.0), ivec2(1)), _GLF_struct_39(mat4(1.0), uvec3(1u), 1.0)));
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 _GLF_struct_4 _GLF_struct_replacement_4 = _GLF_struct_4(gl_SubgroupInvocationID, mat3x2(1.0), uvec2(1u));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 _GLF_struct_127 _GLF_struct_replacement_127 = _GLF_struct_127(uvec3(1u), _GLF_struct_122(_GLF_struct_119(mat2x3(1.0), ivec2(1), ivec2(1), uvec2(1u), vec2(1.0)), _GLF_struct_120(bvec4(true), vec2(1.0), vec2(1.0)), _GLF_struct_121(mat2(1.0)), mat2x4(1.0)), _GLF_struct_123(mat4x3(1.0), gl_NumWorkGroups.x, mat3x4(1.0), mat2(1.0), true), mat2x4(1.0), bvec2(true), uvec2(1u), _GLF_struct_126(_GLF_struct_124(true, mat3x4(1.0), bvec3(true)), vec2(1.0), _GLF_struct_125(uvec2(1u), bvec3(true), 1.0, uvec4(1u), mat3x2(1.0))));
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(0, ~ (~ (_GLF_IDENTITY(0, ~ (~ (0))))))); _injected_loop_counter --)
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          return;
         return;
        }
       if(_GLF_DEAD(false))
        {
         for(_GLF_struct_96 _GLF_struct_replacement_96 = _GLF_struct_96(_GLF_struct_89(_GLF_struct_85(uvec2(1u)), _GLF_struct_86(uvec3(1u), mat3(1.0), 1.0, bvec3(true), uvec4(1u)), _GLF_struct_87(mat3x2(1.0), ivec2(1), uvec2(1u), bvec2(true)), _GLF_struct_88(ivec4(1), vec3(1.0), 1.0, true, 1u), vec2(1.0)), 0, _GLF_struct_91(ivec4(1), _GLF_struct_90(mat3x2(1.0), ivec3(1), vec2(1.0), mat3(1.0), 1, uvec3(1u))), _GLF_struct_95(1.0, true, bvec2(true), _GLF_struct_92(1), _GLF_struct_93(mat4(1.0), bvec3(true), mat4x2(1.0), mat4x2(1.0)), _GLF_struct_94(mat3x2(1.0)), mat4(1.0)), mat2(1.0)); _GLF_WRAPPED_LOOP(_GLF_struct_replacement_96._injected_loop_counter != ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3)))); _GLF_struct_replacement_96._injected_loop_counter ++)
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
              }
             else
              {
               if(_GLF_DEAD(false))
                {
                 for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2))); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 | 0)); _injected_loop_counter --)
                  {
                   if(_GLF_DEAD(false))
                    return;
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    continue;
                  }
                 for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), 0 | (int(4))))) >> _GLF_IDENTITY(int(4), int(4))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                  {
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                      }
                     else
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        return;
                      }
                     if(_GLF_WRAPPED_IF_TRUE(true))
                      {
                       if(_GLF_WRAPPED_IF_TRUE(true))
                        {
                         if(_GLF_DEAD(false))
                          break;
                         if(_GLF_DEAD(false))
                          return;
                         return;
                         if(_GLF_DEAD(false))
                          continue;
                        }
                       else
                        {
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          continue;
                         if(_GLF_DEAD(false))
                          return;
                        }
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        continue;
                      }
                     else
                      {
                      }
                    }
                   else
                    {
                    }
                  }
                 if(_GLF_DEAD(false))
                  break;
                }
              }
             if(_GLF_DEAD(false))
              continue;
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
              {
               return;
              }
            }
           else
            {
            }
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
      }
     else
      {
      }
    }
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        return;
      }
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   if(_GLF_DEAD(false))
    return;
  }
 do
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       for(_GLF_struct_182 _GLF_struct_replacement_182 = _GLF_struct_182(mat4x2(1.0), _GLF_struct_175(_GLF_struct_174((0 ^ 1), uvec2(1u), vec4(1.0), uvec2(1u), true), 1), _GLF_struct_179(_GLF_struct_176(ivec3(1), 1u, mat2x4(1.0), mat4x2(1.0), ivec3(1), mat2(1.0), vec3(1.0)), uvec2(1u), mat4x3(1.0), _GLF_struct_177(true, ivec3(1), uvec4(1u), mat2x3(1.0), mat4x3(1.0), vec2(1.0), bvec3(true)), vec4(1.0), _GLF_struct_178(mat3x2(1.0), uvec3(1u), mat3x4(1.0), uvec2(1u), bvec4(true))), _GLF_struct_181(vec2(1.0), _GLF_struct_180(ivec3(1), bvec3(true), bvec4(true)))); _GLF_WRAPPED_LOOP(_GLF_struct_replacement_182._f1._f0._injected_loop_counter > (0 << _GLF_IDENTITY(int(2), int(2)))); _GLF_struct_replacement_182._f1._f0._injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             return;
            }
           else
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
              continue;
            }
          }
        }
      }
     return;
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  return;
 do
  {
   do
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                continue;
               if(_GLF_DEAD(false))
                return;
               continue;
              }
             return;
            }
          }
         else
          {
           if(_GLF_DEAD(false))
            continue;
          }
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          continue;
         return;
        }
      }
     if(_GLF_DEAD(false))
      break;
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 while(_GLF_WRAPPED_LOOP(false));
 _GLF_struct_42 _GLF_struct_replacement_42 = _GLF_struct_42(bvec2(true), gl_WorkGroupSize.x);
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       do
        {
         for(_GLF_struct_100 _GLF_struct_replacement_100 = _GLF_struct_100(_GLF_struct_99(_GLF_struct_97(ivec4(1), bvec4(true), bvec4(true)), _GLF_struct_98(mat3x4(1.0), mat4(1.0), vec4(1.0)), 1)); _GLF_WRAPPED_LOOP(_GLF_struct_replacement_100._f0._injected_loop_counter != 0); _GLF_struct_replacement_100._f0._injected_loop_counter --)
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             return;
            }
           else
            {
            }
           if(_GLF_DEAD(false))
            break;
          }
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          return;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
    }
  }
 for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
      }
     else
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
         return;
        }
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
         do
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               if(_GLF_DEAD(false))
                return;
              }
             else
              {
              }
             return;
            }
           if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
            break;
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          continue;
         return;
        }
       else
        {
        }
      }
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     do
      {
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
          continue;
         return;
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     return;
    }
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 & int(_GLF_ONE(1.0, injectionSwitch.y)))); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      return;
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_DEAD(false))
  return;
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     return;
    }
   if(_GLF_DEAD(false))
    return;
  }
 _GLF_struct_33 _GLF_struct_replacement_33 = _GLF_struct_33(_GLF_struct_20(_GLF_struct_replacement_42.workgroup_size * workgroup_id, _GLF_struct_17(vec3(1.0), bvec4(true), vec4(1.0), mat2x3(1.0), mat3x2(1.0), bvec3(true), mat3x4(1.0)), uvec3(1u), uvec4(1u), 1, 1, _GLF_struct_18(ivec3(1), 1), _GLF_struct_19(uvec2(1u), vec2(1.0), mat2(1.0), 1u, uvec4(1u), mat4x2(1.0), ivec3(1))), _GLF_struct_26(_GLF_struct_21(bvec2(true), mat3(1.0), ivec2(1), uvec4(1u), uvec3(1u), ivec2(1)), _GLF_struct_22(uvec4(1u), ivec4(1), mat2x3(1.0), mat3x2(1.0)), _GLF_struct_23(uvec4(1u), mat3x4(1.0), bvec4(true), bvec4(true), uvec4(1u)), _GLF_struct_24(bvec3(true)), _GLF_struct_25(mat4(1.0), ivec2(1), bvec3(true), mat4x2(1.0), bvec4(true), mat4(1.0), ivec4(1)), vec3(1.0)), 1.0, _GLF_struct_32(_GLF_struct_27(mat2x3(1.0), mat4x3(1.0), ivec3(1), mat2x3(1.0)), _GLF_struct_28(mat2(1.0), ivec2(1), ivec3(1), ivec4(1)), _GLF_struct_29(true, mat3x4(1.0), bvec3(true), bvec3(true), mat3(1.0), mat2x3(1.0)), _GLF_struct_30(vec4(1.0), vec4(1.0), mat2x3(1.0)), _GLF_struct_31(1u, mat2(1.0), 1.0, ivec4(1), mat3x4(1.0), mat3x2(1.0))));
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), bool(bool(bool(bool(false))))))))
    {
    }
   else
    {
     return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
    return;
   if(_GLF_DEAD(false))
    return;
   for(_GLF_struct_140 _GLF_struct_replacement_140 = _GLF_struct_140(_GLF_struct_130(ivec2(1), ivec3(1), mat2x4(1.0), _GLF_struct_128(uvec2(1u), 1u, mat4(1.0), mat4x3(1.0), ivec4(1)), mat4(1.0), mat3(1.0), _GLF_struct_129(mat4x2(1.0), ivec2(1), mat4x3(1.0))), _GLF_struct_131(true, mat4x2(1.0), ivec4(1), bvec3(true)), mat3(1.0), _GLF_struct_135(ivec4(1), _GLF_struct_132(mat4(1.0), uvec2(1u), ivec2(1), 1u, uvec2(1u), uvec2(1u)), mat3(1.0), _GLF_struct_133(bvec4(true), mat3x4(1.0), uvec2(1u), vec3(1.0), bvec3(true), 1.0, mat3(1.0)), vec4(1.0), _GLF_struct_134(mat2x3(1.0), mat4x2(1.0), ivec2(1), vec3(1.0))), _GLF_struct_137(mat2(1.0), _GLF_struct_136(vec3(1.0), mat2x3(1.0), bvec3(true), uvec4(1u), vec2(1.0), bvec2(true))), 1, _GLF_struct_139(vec2(1.0), _GLF_struct_138(true, 1u, vec4(1.0), bvec3(true), ivec2(1), uvec4(1u), mat2(1.0)), mat2x3(1.0)), mat2x3(1.0)); _GLF_WRAPPED_LOOP(_GLF_struct_replacement_140._injected_loop_counter > 0); _GLF_struct_replacement_140._injected_loop_counter --)
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         continue;
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
      }
     else
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           do
            {
             if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
              continue;
             if(_GLF_DEAD(false))
              break;
             return;
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, true)), (bool(bvec2(false, true))) && true))))
          return;
        }
       else
        {
        }
      }
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 uint subgroup_base = _GLF_struct_replacement_41.subgroup_id * subgroup_size;
 if(_GLF_DEAD(false))
  return;
 _GLF_struct_3 _GLF_struct_replacement_3 = _GLF_struct_3(vec3(1.0), _GLF_struct_2(_GLF_struct_1(1, uvec4(1u), vec3(1.0), mat2(1.0), mat2x4(1.0)), 1u, _GLF_struct_replacement_33._f0.workgroup_base + subgroup_base + _GLF_struct_replacement_4.subgroup_local_id));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, false || (false))))
    {
    }
   else
    {
     return;
    }
  }
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          return;
         return;
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   else
    {
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          break;
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          continue;
         do
          {
           do
            {
             return;
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       for(_GLF_struct_43 _GLF_struct_replacement_43 = _GLF_struct_43(ivec4(1), 0); _GLF_WRAPPED_LOOP(_GLF_struct_replacement_43._injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _GLF_struct_replacement_43._injected_loop_counter ++)
        {
         for(int _injected_loop_counter = _GLF_IDENTITY(0, int(int(0))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             return;
            }
           else
            {
            }
          }
        }
      }
    }
   do
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) && true))))))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      continue;
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(false))
    return;
   do
    {
     if(_GLF_DEAD(false))
      return;
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
 _GLF_struct_0 _GLF_struct_replacement_0 = _GLF_struct_0(_GLF_struct_replacement_33._f0.workgroup_base + subgroup_base + ((_GLF_struct_replacement_4.subgroup_local_id + 1) % subgroup_size), vec2(1.0));
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec4(bvec2(false, false), true, false)))))))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           return;
          }
        }
      }
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
    }
   for(_GLF_struct_76 _GLF_struct_replacement_76 = _GLF_struct_76(_GLF_struct_71(1u), ivec2(1), 0, _GLF_struct_75(mat3x4(1.0), _GLF_struct_72(mat3(1.0), ivec3(1)), _GLF_struct_73(1.0, mat4x2(1.0), mat3x2(1.0), ivec2(1)), _GLF_struct_74(bvec3(true), 1u, mat2(1.0)), mat4x3(1.0)), mat2x3(1.0), bvec3(true)); _GLF_WRAPPED_LOOP(_GLF_struct_replacement_76._injected_loop_counter != 1); _GLF_struct_replacement_76._injected_loop_counter ++)
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
         break;
        }
       return;
      }
     else
      {
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        return;
       break;
      }
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 _GLF_struct_46 _GLF_struct_replacement_46 = _GLF_struct_46(ivec2(1), ivec2(1), _GLF_struct_45(vec4(1.0), _GLF_struct_44(uvec4(1u), 1.0, mat3(1.0)), mat3x2(1.0), mat4(1.0), atomicLoad(buf[_GLF_struct_replacement_3._f1.virtual_gid], 4, 64, 2), ivec4(1)));
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(0, 0 | (0))); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
          {
           do
            {
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 & 1)); _injected_loop_counter ++)
              {
               return;
               if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
                return;
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  return;
                 return;
                }
              }
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
          }
        }
       else
        {
        }
      }
    }
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 do
  {
   if(_GLF_DEAD(false))
    {
     do
      {
       if(_GLF_DEAD(false))
        break;
       return;
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 do
  {
   if(_GLF_DEAD(false))
    break;
   if(_GLF_DEAD(false))
    break;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      break;
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        return;
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          continue;
         return;
        }
       return;
       if(_GLF_DEAD(false))
        continue;
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       continue;
      }
     return;
    }
   do
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          return;
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 >> _GLF_IDENTITY(int(3), int(3)))); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             do
              {
               return;
               if(_GLF_DEAD(false))
                continue;
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           else
            {
             if(_GLF_DEAD(false))
              break;
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
              return;
             break;
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               return;
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                continue;
              }
             if(_GLF_DEAD(false))
              continue;
            }
          }
        }
       if(_GLF_DEAD(false))
        return;
      }
     else
      {
       if(_GLF_DEAD(false))
        return;
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           return;
          }
        }
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         do
          {
           if((_GLF_struct_replacement_4.subgroup_local_id % 2) == 0)
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                return;
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  break;
                }
               else
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  continue;
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   return;
                  }
                }
              }
             if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
              {
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                {
                 return;
                }
              }
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
              {
               if(_GLF_DEAD(false))
                break;
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  return;
                 break;
                }
               if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                continue;
               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                {
                 for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
                  {
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(false))
                      return;
                     if(_GLF_DEAD(false))
                      return;
                     break;
                    }
                   if(_GLF_DEAD(false))
                    continue;
                   for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                    {
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                      }
                     else
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        return;
                      }
                     if(_GLF_DEAD(false))
                      continue;
                    }
                  }
                 subgroupAll(false);
                }
               else
                {
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                break;
              }
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                {
                 return;
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  continue;
                }
               else
                {
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                break;
               if(_GLF_DEAD(false))
                continue;
               if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
                break;
              }
             if(_GLF_DEAD(false))
              break;
             if(_GLF_DEAD(false))
              break;
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 if(_GLF_DEAD(false))
                  continue;
                 do
                  {
                   do
                    {
                     for(int _injected_loop_counter = (1 | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                      {
                       if(_GLF_WRAPPED_IF_TRUE(true))
                        {
                         for(_GLF_struct_195 _GLF_struct_replacement_195 = _GLF_struct_195(ivec3(1), _GLF_struct_185(_GLF_struct_183(mat2x4(1.0)), vec2(1.0), vec3(1.0), bvec4(true), _GLF_struct_184(vec3(1.0), 1u, uvec2(1u), mat3(1.0), uvec2(1u))), _GLF_struct_187(mat2x3(1.0), mat2x4(1.0), _GLF_struct_186(vec3(1.0), mat4(1.0), bvec4(true)), vec2(1.0)), ivec2(1), _GLF_struct_188(((1 << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (true ? int(0) : _GLF_FUZZED(-13799))))) >> _GLF_IDENTITY(int(0), int(0))), mat4x3(1.0)), _GLF_struct_190(_GLF_struct_189(mat4(1.0), vec2(1.0), mat4x2(1.0), vec2(1.0), mat4x2(1.0))), _GLF_struct_194(mat3x2(1.0), _GLF_struct_191(mat3x4(1.0), mat3(1.0), mat4x2(1.0), ivec3(1), uvec4(1u)), bvec4(true), _GLF_struct_192(1.0, vec4(1.0), mat3x4(1.0), vec3(1.0), ivec3(1), 1u), uvec4(1u), _GLF_struct_193(ivec2(1), mat4x3(1.0), bvec4(true), uvec3(1u), mat4(1.0), ivec3(1)), uvec4(1u))); _GLF_WRAPPED_LOOP(_GLF_struct_replacement_195._f4._injected_loop_counter > (0 & -72045)); _GLF_struct_replacement_195._f4._injected_loop_counter --)
                          {
                           do
                            {
                             atomicStore(buf[_GLF_struct_replacement_0.next_virtual_gid], uint(1), 4, 64, 4);
                            }
                           while(_GLF_WRAPPED_LOOP(false));
                           if(_GLF_DEAD(false))
                            break;
                           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                            break;
                           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                            {
                             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                              {
                               for(_GLF_struct_149 _GLF_struct_replacement_149 = _GLF_struct_149(_GLF_struct_144(_GLF_struct_141(vec3(1.0), vec3(1.0), mat3x4(1.0)), mat4x2(1.0), 1, _GLF_struct_142(bvec4(true), mat4x3(1.0), mat3(1.0), mat2x3(1.0), bvec2(true)), ivec3(1), _GLF_struct_143(mat2x3(1.0), bvec2(true), bvec2(true), mat3(1.0), int(_GLF_ONE(1.0, injectionSwitch.y)), bvec4(true))), bvec2(true), mat2x3(1.0), _GLF_struct_148(1, vec3(1.0), _GLF_struct_145(vec4(1.0), mat2x3(1.0), vec4(1.0)), _GLF_struct_146(ivec3(1), mat4x2(1.0), mat3x4(1.0)), ivec3(1), uvec3(1u), _GLF_struct_147(uvec3(1u), mat2x3(1.0)))); _GLF_WRAPPED_LOOP(_GLF_struct_replacement_149._f0._f5._injected_loop_counter > 0); _GLF_struct_replacement_149._f0._f5._injected_loop_counter --)
                                {
                                 if(_GLF_DEAD(false))
                                  break;
                                 if(_GLF_DEAD(false))
                                  {
                                   if(_GLF_WRAPPED_IF_TRUE(true))
                                    {
                                     return;
                                    }
                                   else
                                    {
                                    }
                                  }
                                 if(_GLF_DEAD(false))
                                  {
                                   if(_GLF_DEAD(false))
                                    break;
                                   if(_GLF_DEAD(false))
                                    break;
                                   continue;
                                  }
                                 if(_GLF_DEAD(false))
                                  break;
                                }
                              }
                             else
                              {
                              }
                            }
                           else
                            {
                            }
                           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                            break;
                           if(_GLF_DEAD(false))
                            {
                             if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, false, true)))))
                              {
                               if(_GLF_DEAD(false))
                                continue;
                               break;
                               if(_GLF_DEAD(false))
                                continue;
                              }
                             if(_GLF_DEAD(false))
                              continue;
                             break;
                            }
                           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                            break;
                          }
                        }
                       else
                        {
                        }
                       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)), ! (! (bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))))))))
                        return;
                      }
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                   if(_GLF_DEAD(false))
                    continue;
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
              }
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               if(_GLF_DEAD(false))
                return;
               do
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    continue;
                   return;
                  }
                 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                  {
                   do
                    {
                     if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, true && (false))) && true)))
                      return;
                    }
                   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                   return;
                  }
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    return;
                  }
                 else
                  {
                   if(_GLF_DEAD(false))
                    break;
                  }
                }
               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
              }
             else
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                break;
              }
             if(_GLF_DEAD(false))
              return;
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 | 0)); _injected_loop_counter --)
              {
               if(_GLF_DEAD(false))
                continue;
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    return;
                   if(_GLF_DEAD(false))
                    break;
                   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                    {
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_DEAD(false))
                        continue;
                       continue;
                      }
                     do
                      {
                       if(_GLF_WRAPPED_IF_FALSE(false))
                        {
                        }
                       else
                        {
                         do
                          {
                           if(_GLF_WRAPPED_IF_TRUE(true))
                            {
                             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
                              {
                               if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
                                continue;
                               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                {
                                 if(_GLF_DEAD(false))
                                  break;
                                 if(_GLF_DEAD(false))
                                  continue;
                                 break;
                                }
                               for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2))); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
                                {
                                 if(_GLF_DEAD(false))
                                  continue;
                                 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                                  {
                                   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                    {
                                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                      break;
                                    }
                                   else
                                    {
                                     return;
                                    }
                                   if(_GLF_DEAD(false))
                                    continue;
                                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                    return;
                                  }
                                }
                              }
                            }
                           else
                            {
                            }
                           if(_GLF_DEAD(false))
                            continue;
                           if(_GLF_DEAD(false))
                            continue;
                          }
                         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                        }
                       if(_GLF_DEAD(false))
                        continue;
                       if(_GLF_DEAD(false))
                        return;
                      }
                     while(_GLF_WRAPPED_LOOP(false));
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      break;
                    }
                   if(_GLF_DEAD(false))
                    return;
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(false))
                      continue;
                     for(_GLF_struct_196 _GLF_struct_replacement_196 = _GLF_struct_196(bvec2(true), int(_GLF_ONE(1.0, injectionSwitch.y)), mat3x2(1.0)); _GLF_WRAPPED_LOOP(_GLF_struct_replacement_196._injected_loop_counter != 0); _GLF_struct_replacement_196._injected_loop_counter --)
                      {
                       return;
                      }
                    }
                  }
                }
               else
                {
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                continue;
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              break;
             if(_GLF_DEAD(false))
              return;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                }
               else
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                  {
                   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                    {
                     return;
                    }
                   else
                    {
                     if(_GLF_DEAD(false))
                      continue;
                    }
                  }
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  continue;
                }
               if(_GLF_DEAD(false))
                return;
               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                {
                 if(_GLF_DEAD(false))
                  break;
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  return;
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(false))
                    break;
                   return;
                  }
                 return;
                 if(_GLF_DEAD(false))
                  continue;
                }
               else
                {
                }
              }
            }
           else
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                continue;
               return;
              }
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               subgroupAll(false);
              }
             else
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                 if(_GLF_DEAD(false))
                  continue;
                }
               else
                {
                 do
                  {
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(false))
                      return;
                     if(_GLF_DEAD(false))
                      return;
                     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                      {
                       return;
                      }
                    }
                   if(_GLF_DEAD(false))
                    break;
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                 if(_GLF_DEAD(false))
                  continue;
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                return;
               if(_GLF_DEAD(false))
                {
                 do
                  {
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(6)) | (int(6))))) >> _GLF_IDENTITY(int(6), int(6))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                      {
                       return;
                      }
                    }
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                 if(_GLF_DEAD(false))
                  break;
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  return;
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  break;
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(false))
                    continue;
                   for(_GLF_struct_201 _GLF_struct_replacement_201 = _GLF_struct_201(mat3(1.0), bvec3(true), _GLF_struct_198(mat4(1.0), _GLF_struct_197(int(_GLF_ONE(1.0, injectionSwitch.y)), vec4(1.0)), 1.0), bvec4(true), bvec2(true), ivec4(1), _GLF_struct_200(1u, _GLF_struct_199(ivec3(1), bvec4(true), mat2x3(1.0), true))); _GLF_WRAPPED_LOOP(_GLF_struct_replacement_201._f2._f1._injected_loop_counter > 0); _GLF_struct_replacement_201._f2._f1._injected_loop_counter --)
                    {
                     return;
                    }
                  }
                }
              }
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                return;
              }
             else
              {
              }
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                break;
               do
                {
                 return;
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  continue;
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             if(_GLF_DEAD(false))
              continue;
             if(_GLF_DEAD(false))
              continue;
             for(_GLF_struct_151 _GLF_struct_replacement_151 = _GLF_struct_151(_GLF_struct_150(ivec3(1), true, ivec2(1)), 1); _GLF_WRAPPED_LOOP(_GLF_struct_replacement_151._injected_loop_counter > (0 >> _GLF_IDENTITY(int(5), int(5)))); _GLF_struct_replacement_151._injected_loop_counter --)
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 if(_GLF_DEAD(false))
                  return;
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   if(_GLF_DEAD(false))
                    break;
                   atomicStore(buf[_GLF_struct_replacement_0.next_virtual_gid], uint(1), 4, 64, 4);
                  }
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  return;
                }
               if(_GLF_DEAD(false))
                continue;
              }
             if(_GLF_DEAD(false))
              {
               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 ^ 0)); _injected_loop_counter --)
                {
                 do
                  {
                   if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
                    continue;
                   if(_GLF_DEAD(false))
                    return;
                   if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
                    return;
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    {
                     if(_GLF_DEAD(false))
                      continue;
                     return;
                    }
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      {
                      }
                     else
                      {
                       return;
                      }
                     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false))))))))
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        continue;
                       break;
                      }
                    }
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                     if(_GLF_DEAD(false))
                      return;
                    }
                   else
                    {
                     return;
                     if(_GLF_DEAD(false))
                      continue;
                     if(_GLF_DEAD(false))
                      return;
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      break;
                    }
                  }
                 else
                  {
                   if(_GLF_DEAD(false))
                    continue;
                  }
                }
               if(_GLF_DEAD(false))
                continue;
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                break;
              }
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       else
        {
        }
      }
     else
      {
      }
    }
   else
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               return;
              }
             else
              {
              }
            }
           return;
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(false))
            return;
          }
        }
      }
     if(_GLF_DEAD(false))
      return;
    }
  }
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (int(_GLF_ONE(1.0, injectionSwitch.y)) ^ 0)); _injected_loop_counter ++)
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
          {
           do
            {
             return;
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
       else
        {
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
        return;
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      break;
    }
  }
 for(int _injected_loop_counter = ((1 | 0) & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
        }
       else
        {
         return;
        }
      }
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      break;
    }
  }
 do
  {
   for(_GLF_struct_162 _GLF_struct_replacement_162 = _GLF_struct_162(mat4(1.0), uvec4(1u), _GLF_struct_156(_GLF_struct_152(1u, ivec4(1), mat2(1.0), bvec3(true), 1, ivec3(1), mat2(1.0)), _GLF_struct_153(uvec3(1u), vec2(1.0), ivec4(1), mat2(1.0), bvec2(true)), _GLF_struct_154(ivec3(1)), _GLF_struct_155(mat3(1.0)), 1, ivec3(1)), _GLF_struct_159(vec2(1.0), _GLF_struct_157(ivec4(1), mat4x3(1.0), mat3x4(1.0), bvec4(true), bvec3(true)), _GLF_struct_158(ivec4(1), 1u), mat4x2(1.0)), _GLF_struct_161(_GLF_struct_160(mat2x3(1.0)), mat4x2(1.0), vec2(1.0), mat2x3(1.0))); _GLF_WRAPPED_LOOP(_GLF_struct_replacement_162._f2._injected_loop_counter != 0); _GLF_struct_replacement_162._f2._injected_loop_counter --)
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        {
         do
          {
           if(_GLF_DEAD(false))
            break;
           return;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            break;
           continue;
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            continue;
           continue;
          }
        }
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              break;
            }
           else
            {
             if(_GLF_DEAD(false))
              return;
            }
          }
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               return;
              }
             else
              {
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 & -58461)); _injected_loop_counter --)
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(false))
                    break;
                   do
                    {
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                      }
                     else
                      {
                       return;
                      }
                    }
                   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false))));
                  }
                }
               break;
              }
            }
          }
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_DEAD(false))
          break;
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              break;
             continue;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              continue;
            }
           return;
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         if(_GLF_DEAD(false))
          return;
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          break;
         break;
        }
       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (false)))))
        {
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_DEAD(false))
          break;
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
           break;
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         for(_GLF_struct_67 _GLF_struct_replacement_67 = _GLF_struct_67(_GLF_struct_58(mat4x2(1.0), _GLF_struct_56(ivec4(1)), 1, _GLF_struct_57(1u, ivec4(1), 1.0, mat4(1.0), ivec4(1), uvec4(1u), bvec3(true))), _GLF_struct_62(_GLF_struct_59(mat4x3(1.0)), 1, _GLF_struct_60(mat2x4(1.0), mat2x4(1.0), bvec2(true), vec2(1.0), mat3x4(1.0)), _GLF_struct_61(vec3(1.0), 1, uvec4(1u), mat3(1.0), uvec3(1u), uvec4(1u), uvec4(1u))), uvec3(1u), _GLF_struct_65(_GLF_struct_63(mat3x4(1.0)), _GLF_struct_64(vec3(1.0), 1, mat3x2(1.0), mat3x2(1.0)), 1u, vec2(1.0), mat2x3(1.0)), 1.0, _GLF_struct_66(mat4x3(1.0))); _GLF_WRAPPED_LOOP(_GLF_struct_replacement_67._f1._injected_loop_counter != 0); _GLF_struct_replacement_67._f1._injected_loop_counter --)
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                break;
              }
             else
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  continue;
                 continue;
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                continue;
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  return;
                 if(_GLF_DEAD(false))
                  return;
                 if(_GLF_DEAD(false))
                  continue;
                 continue;
                 if(_GLF_DEAD(false))
                  continue;
                }
               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 | 0)); _injected_loop_counter --)
                {
                 if(_GLF_DEAD(false))
                  continue;
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                      {
                       do
                        {
                         return;
                        }
                       while(_GLF_WRAPPED_LOOP(false));
                      }
                    }
                   else
                    {
                    }
                  }
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                   if(_GLF_DEAD(false))
                    return;
                   break;
                  }
                }
               if(_GLF_DEAD(false))
                continue;
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  continue;
                 continue;
                 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))
                  break;
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                continue;
              }
             if(_GLF_DEAD(false))
              break;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(false))
                continue;
               if(_GLF_DEAD(false))
                return;
               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                }
               else
                {
                 if(_GLF_DEAD(false))
                  break;
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   if(_GLF_DEAD(false))
                    return;
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    break;
                   return;
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    return;
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    return;
                  }
                 else
                  {
                  }
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(false))
                    break;
                   continue;
                  }
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                continue;
              }
             do
              {
               if(_GLF_DEAD(false))
                return;
               if(_GLF_DEAD(false))
                break;
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              return;
             if(_GLF_DEAD(false))
              return;
             return;
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              break;
             break;
            }
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(false))
            return;
           return;
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              return;
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               return;
               if(_GLF_DEAD(false))
                continue;
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  continue;
                 if(_GLF_DEAD(false))
                  break;
                 continue;
                }
              }
             else
              {
               if(_GLF_DEAD(false))
                break;
              }
            }
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            break;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(false))
                return;
              }
             else
              {
               return;
              }
            }
          }
        }
       else
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), (false ? _GLF_FUZZED(-91722) : int(_GLF_ZERO(0.0, injectionSwitch.x))))); _injected_loop_counter --)
          {
           for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) || false)))
                {
                }
               else
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     if(_GLF_DEAD(false))
                      break;
                     for(_GLF_struct_55 _GLF_struct_replacement_55 = _GLF_struct_55(_GLF_struct_47(ivec4(1)), vec2(1.0), bvec2(true), _GLF_struct_49(_GLF_struct_48(mat2(1.0), mat4x3(1.0), bvec2(true))), (0 | 0), _GLF_struct_51(mat3x4(1.0), _GLF_struct_50(ivec2(1), ivec2(1)), vec4(1.0)), _GLF_struct_54(ivec4(1), mat2(1.0), _GLF_struct_52(mat2(1.0), uvec4(1u), mat3x2(1.0), uvec4(1u)), _GLF_struct_53(mat2(1.0), mat4(1.0), mat4x3(1.0)), 1.0)); _GLF_WRAPPED_LOOP(_GLF_struct_replacement_55._injected_loop_counter < 1); _GLF_struct_replacement_55._injected_loop_counter ++)
                      {
                       if(_GLF_DEAD(false))
                        {
                         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                          continue;
                         break;
                        }
                       for(int _injected_loop_counter = (0 | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(1, int(int(1)))); _injected_loop_counter ++)
                        {
                         if(_GLF_DEAD(false))
                          return;
                         if(_GLF_DEAD(false))
                          break;
                         if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(true, bool(bvec4(true, false, true, true))), (_GLF_IDENTITY(true, bool(bvec4(true, false, true, true)))) || false)))
                          {
                           if(_GLF_WRAPPED_IF_FALSE(false))
                            {
                            }
                           else
                            {
                             if(_GLF_WRAPPED_IF_FALSE(false))
                              {
                              }
                             else
                              {
                               if(_GLF_DEAD(false))
                                break;
                               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                                {
                                 if(_GLF_WRAPPED_IF_FALSE(false))
                                  {
                                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                    {
                                     if(_GLF_DEAD(false))
                                      {
                                       if(_GLF_DEAD(false))
                                        return;
                                       if(_GLF_DEAD(false))
                                        return;
                                       continue;
                                       if(_GLF_DEAD(false))
                                        return;
                                      }
                                     return;
                                     if(_GLF_DEAD(false))
                                      continue;
                                    }
                                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                    continue;
                                  }
                                 else
                                  {
                                   for(_GLF_struct_168 _GLF_struct_replacement_168 = _GLF_struct_168(_GLF_struct_163(1u, bvec4(true), 1.0), _GLF_struct_165(_GLF_struct_164(mat3(1.0))), bvec4(true), _GLF_struct_167(mat3x2(1.0), _GLF_struct_166(1.0, ivec2(1), vec4(1.0), 1u, vec3(1.0), uvec4(1u)), int(_GLF_ZERO(0.0, injectionSwitch.x))), mat4x3(1.0), uvec4(1u)); _GLF_WRAPPED_LOOP(_GLF_struct_replacement_168._f3._injected_loop_counter < 1); _GLF_struct_replacement_168._f3._injected_loop_counter ++)
                                    {
                                     do
                                      {
                                       if(_GLF_DEAD(false))
                                        break;
                                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                        {
                                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                          return;
                                         if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, false || (true))))
                                          {
                                           if(_GLF_WRAPPED_IF_TRUE(true))
                                            {
                                             do
                                              {
                                               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                                continue;
                                               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                                {
                                                }
                                               else
                                                {
                                                 if(_GLF_DEAD(false))
                                                  break;
                                                 return;
                                                }
                                              }
                                             while(_GLF_WRAPPED_LOOP(false));
                                             if(_GLF_DEAD(false))
                                              return;
                                            }
                                           else
                                            {
                                            }
                                           if(_GLF_WRAPPED_IF_FALSE(false))
                                            {
                                            }
                                           else
                                            {
                                             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                                              {
                                               for(int _injected_loop_counter = (-61970 & 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                                                {
                                                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                                  return;
                                                }
                                               if(_GLF_DEAD(false))
                                                break;
                                              }
                                             else
                                              {
                                              }
                                             if(_GLF_DEAD(false))
                                              return;
                                             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                              continue;
                                             if(_GLF_DEAD(false))
                                              {
                                               do
                                                {
                                                 if(_GLF_DEAD(false))
                                                  return;
                                                 return;
                                                }
                                               while(_GLF_WRAPPED_LOOP(false));
                                              }
                                            }
                                           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                            return;
                                          }
                                         else
                                          {
                                          }
                                         if(_GLF_DEAD(false))
                                          return;
                                        }
                                      }
                                     while(_GLF_WRAPPED_LOOP(false));
                                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                      break;
                                    }
                                  }
                                }
                              }
                             if(_GLF_DEAD(false))
                              return;
                             if(_GLF_DEAD(false))
                              break;
                            }
                          }
                         else
                          {
                          }
                        }
                       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        {
                         if(_GLF_DEAD(false))
                          {
                           if(_GLF_DEAD(false))
                            continue;
                           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                            {
                             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                              continue;
                             if(_GLF_DEAD(false))
                              continue;
                             break;
                            }
                           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                            {
                             if(_GLF_DEAD(false))
                              {
                               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                continue;
                               break;
                              }
                             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                              {
                              }
                             else
                              {
                               return;
                              }
                            }
                          }
                         if(_GLF_DEAD(false))
                          continue;
                         if(_GLF_DEAD(false))
                          break;
                        }
                       else
                        {
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          return;
                         if(_GLF_WRAPPED_IF_FALSE(false))
                          {
                           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                            {
                             if(_GLF_DEAD(false))
                              break;
                             if(_GLF_DEAD(false))
                              {
                               if(_GLF_DEAD(false))
                                return;
                               if(_GLF_WRAPPED_IF_FALSE(false))
                                {
                                }
                               else
                                {
                                 return;
                                }
                              }
                            }
                           if(_GLF_DEAD(false))
                            {
                             if(_GLF_DEAD(false))
                              return;
                             return;
                            }
                          }
                         else
                          {
                           return;
                           if(_GLF_DEAD(false))
                            {
                             if(_GLF_WRAPPED_IF_TRUE(true))
                              {
                               return;
                              }
                             else
                              {
                              }
                            }
                          }
                        }
                       if(_GLF_DEAD(false))
                        {
                         if(_GLF_DEAD(false))
                          continue;
                         if(_GLF_DEAD(false))
                          return;
                         continue;
                        }
                       if(_GLF_DEAD(false))
                        continue;
                       if(_GLF_DEAD(false))
                        {
                         if(_GLF_DEAD(false))
                          break;
                         break;
                         if(_GLF_DEAD(false))
                          {
                           if(_GLF_DEAD(false))
                            return;
                           continue;
                          }
                        }
                      }
                    }
                   else
                    {
                     if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
                      continue;
                    }
                   if(_GLF_DEAD(false))
                    break;
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     if(_GLF_DEAD(false))
                      continue;
                     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) && true)))
                      {
                       do
                        {
                         if(_GLF_DEAD(false))
                          return;
                         if(_GLF_DEAD(false))
                          return;
                        }
                       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                      }
                     else
                      {
                       if(_GLF_DEAD(false))
                        return;
                      }
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      {
                       if(_GLF_DEAD(false))
                        return;
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        {
                         if(_GLF_DEAD(false))
                          {
                           if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                            break;
                           break;
                          }
                         continue;
                        }
                       return;
                      }
                    }
                  }
                }
              }
             else
              {
              }
            }
          }
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           subgroupBarrier();
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              {
               do
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     if(_GLF_DEAD(false))
                      break;
                     return;
                    }
                   else
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      continue;
                     if(_GLF_DEAD(false))
                      continue;
                    }
                  }
                 if(_GLF_DEAD(false))
                  return;
                }
               while(_GLF_WRAPPED_LOOP(false));
               return;
              }
            }
           if(_GLF_DEAD(false))
            break;
          }
         else
          {
           do
            {
             if(_GLF_DEAD(false))
              return;
             if(_GLF_DEAD(false))
              return;
            }
           while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))));
          }
         if(_GLF_DEAD(false))
          break;
         do
          {
           for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               for(_GLF_struct_70 _GLF_struct_replacement_70 = _GLF_struct_70(ivec4(1), vec4(1.0), bvec3(true), ivec4(1), _GLF_struct_69(int(_GLF_ZERO(0.0, injectionSwitch.x)), _GLF_struct_68(mat4x2(1.0), 1.0, bvec4(true), uvec4(1u), vec4(1.0), mat2x3(1.0)))); _GLF_WRAPPED_LOOP(_GLF_struct_replacement_70._f4._injected_loop_counter < 1); _GLF_struct_replacement_70._f4._injected_loop_counter ++)
                {
                 if(_GLF_DEAD(false))
                  continue;
                 do
                  {
                   if(_GLF_DEAD(false))
                    break;
                   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    {
                    }
                   else
                    {
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_WRAPPED_IF_TRUE(true))
                        {
                         if(_GLF_DEAD(false))
                          return;
                         if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec2(false, true)))) && true)))
                          return;
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          break;
                        }
                       else
                        {
                         if(_GLF_DEAD(false))
                          break;
                        }
                       return;
                      }
                     if(_GLF_DEAD(false))
                      continue;
                    }
                   if(_GLF_DEAD(false))
                    continue;
                   if(_GLF_DEAD(false))
                    break;
                   if(_GLF_DEAD(false))
                    break;
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                }
              }
             else
              {
              }
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
         do
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false))))))))
              break;
             continue;
            }
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
             if(_GLF_DEAD(false))
              return;
            }
           else
            {
             for(_GLF_struct_112 _GLF_struct_replacement_112 = _GLF_struct_112(_GLF_struct_106(_GLF_struct_101(vec2(1.0), uvec4(1u), 1.0), _GLF_struct_102(bvec3(true), mat2x4(1.0), ivec3(1), mat2x4(1.0), vec2(1.0), 1u, mat2x3(1.0)), mat4(1.0), _GLF_struct_103(uvec2(1u), 1, ivec4(1), mat4x2(1.0), bvec4(true), mat2x3(1.0), mat3(1.0)), _GLF_struct_104(mat4x2(1.0), vec2(1.0), mat3x2(1.0), ivec2(1), bvec2(true)), _GLF_struct_105(bvec2(true)), ivec2(1)), (0 | 0), mat3x2(1.0), _GLF_struct_108(uvec4(1u), vec4(1.0), _GLF_struct_107(vec4(1.0), 1, 1, true), bvec3(true), 1u, vec3(1.0)), uvec4(1u), _GLF_struct_111(_GLF_struct_109(mat2x3(1.0), mat2x3(1.0), 1u, 1.0, mat2x4(1.0), bvec2(true)), _GLF_struct_110(uvec3(1u), bvec2(true), mat4(1.0), uvec2(1u), vec3(1.0), true), true)); _GLF_WRAPPED_LOOP(_GLF_struct_replacement_112._injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _GLF_struct_replacement_112._injected_loop_counter ++)
              {
               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                }
               else
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                   if(_GLF_DEAD(false))
                    continue;
                  }
                 else
                  {
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     for(_GLF_struct_84 _GLF_struct_replacement_84 = _GLF_struct_84(_GLF_struct_79(_GLF_struct_77(uvec3(1u), ivec2(1), uvec2(1u), mat2x3(1.0)), uvec4(1u), mat3x4(1.0), uvec4(1u), mat2(1.0), _GLF_struct_78(ivec3(1), 1.0, vec3(1.0), mat4x3(1.0))), _GLF_struct_80(ivec3(1), mat4x3(1.0)), _GLF_struct_83(_GLF_struct_81(mat3x2(1.0), mat2(1.0), ivec2(1), vec4(1.0), 1, vec2(1.0), mat2x3(1.0)), _GLF_struct_82(ivec2(1), ivec4(1), bvec3(true), mat2x4(1.0), uvec2(1u), true, 1u), ivec3(1)), 0, uvec4(1u)); _GLF_WRAPPED_LOOP(_GLF_struct_replacement_84._injected_loop_counter != (1 & (1 | 1))); _GLF_struct_replacement_84._injected_loop_counter ++)
                      {
                       if(_GLF_DEAD(false))
                        {
                         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                          {
                           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                            return;
                           return;
                          }
                         else
                          {
                          }
                        }
                       if(_GLF_DEAD(false))
                        {
                         if(_GLF_DEAD(false))
                          break;
                         if(_GLF_DEAD(false))
                          return;
                         if(_GLF_DEAD(false))
                          {
                           if(_GLF_DEAD(false))
                            break;
                           if(_GLF_DEAD(false))
                            return;
                           if(_GLF_DEAD(false))
                            return;
                           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                            {
                             return;
                            }
                           else
                            {
                             if(_GLF_DEAD(false))
                              return;
                            }
                           if(_GLF_DEAD(false))
                            continue;
                           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                            return;
                           if(_GLF_DEAD(false))
                            return;
                          }
                         if(_GLF_WRAPPED_IF_FALSE(false))
                          {
                          }
                         else
                          {
                           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                            {
                             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                              {
                               if(_GLF_DEAD(false))
                                return;
                               break;
                              }
                            }
                           else
                            {
                             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                              break;
                             return;
                             if(_GLF_DEAD(false))
                              {
                               if(_GLF_DEAD(false))
                                break;
                               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                break;
                               if(_GLF_DEAD(false))
                                continue;
                               break;
                              }
                            }
                           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                            {
                             if(_GLF_DEAD(false))
                              continue;
                             continue;
                            }
                          }
                         if(_GLF_DEAD(false))
                          continue;
                         if(_GLF_DEAD(false))
                          {
                           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 >> _GLF_IDENTITY(int(1), int(1)))); _injected_loop_counter --)
                            {
                             return;
                            }
                          }
                         if(_GLF_DEAD(false))
                          return;
                        }
                      }
                    }
                   else
                    {
                    }
                  }
                }
               if(_GLF_DEAD(false))
                return;
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              break;
            }
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  continue;
                 do
                  {
                   return;
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                 if(_GLF_DEAD(false))
                  return;
                 do
                  {
                   for(_GLF_struct_173 _GLF_struct_replacement_173 = _GLF_struct_173(bvec4(true), _GLF_struct_170(_GLF_struct_169(bvec2(true), ivec2(1), bvec3(true), mat3x2(1.0), bvec3(true), mat2x4(1.0), bvec4(true))), _GLF_struct_172(_GLF_struct_171(mat4x2(1.0), mat2(1.0), vec2(1.0), 0, vec2(1.0), bvec3(true)))); _GLF_WRAPPED_LOOP(_GLF_struct_replacement_173._f2._f0._injected_loop_counter != ((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4)))); _GLF_struct_replacement_173._f2._f0._injected_loop_counter ++)
                    {
                     if(_GLF_DEAD(false))
                      continue;
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_DEAD(false))
                        return;
                       do
                        {
                         return;
                        }
                       while(_GLF_WRAPPED_LOOP(false));
                       if(_GLF_DEAD(false))
                        break;
                      }
                    }
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                 if(_GLF_DEAD(false))
                  break;
                }
               else
                {
                 if(_GLF_DEAD(false))
                  break;
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_DEAD(false))
                  break;
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                   if(_GLF_DEAD(false))
                    return;
                   break;
                  }
                 continue;
                }
              }
             else
              {
              }
            }
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              break;
             return;
            }
           continue;
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
          }
        }
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    {
     do
      {
       return;
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     return;
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false || (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     atomicStore(buf[_GLF_struct_replacement_3._f1.virtual_gid], _GLF_struct_replacement_46._f2.read, 4, 64, 4);
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       do
        {
         return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     if(_GLF_DEAD(false))
      {
       for(_GLF_struct_216 _GLF_struct_replacement_216 = _GLF_struct_216(mat2(1.0), _GLF_struct_203(_GLF_struct_202(1, uvec2(1u), mat4x3(1.0), mat4x2(1.0), uvec4(1u), uvec3(1u)), uvec3(1u), mat2x3(1.0)), ivec2(1), ((1 << _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), (int(7)) >> 0))) >> _GLF_IDENTITY(int(7), int(7))), _GLF_struct_206(mat3x2(1.0), _GLF_struct_204(mat2(1.0), ivec2(1), mat2(1.0), mat2x3(1.0), 1u, 1u, mat3x4(1.0)), mat4(1.0), _GLF_struct_205(ivec2(1), mat2(1.0), uvec2(1u), ivec4(1), bvec4(true), true, mat4x2(1.0))), _GLF_struct_209(_GLF_struct_207(bvec3(true), vec3(1.0), mat4x3(1.0), uvec4(1u), vec4(1.0), bvec3(true), true), uvec2(1u), ivec3(1), mat3(1.0), _GLF_struct_208(mat4x2(1.0), vec3(1.0)), ivec3(1), bvec3(true)), _GLF_struct_215(_GLF_struct_210(uvec2(1u), bvec4(true), uvec2(1u), uvec2(1u), mat3x4(1.0)), _GLF_struct_211(uvec3(1u), ivec3(1)), _GLF_struct_212(1, uvec3(1u), ivec2(1), mat3x2(1.0), bvec2(true), uvec3(1u)), _GLF_struct_213(1, 1), uvec4(1u), uvec4(1u), _GLF_struct_214(uvec3(1u), mat3x2(1.0), ivec2(1)))); _GLF_WRAPPED_LOOP(_GLF_struct_replacement_216._injected_loop_counter > (0 >> _GLF_IDENTITY(int(2), int(2)))); _GLF_struct_replacement_216._injected_loop_counter --)
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
          {
           if(_GLF_DEAD(false))
            break;
           if(_GLF_DEAD(false))
            break;
           break;
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              return;
             return;
            }
          }
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              break;
             return;
            }
           return;
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
           if(_GLF_DEAD(false))
            continue;
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
         if(_GLF_DEAD(false))
          return;
        }
      }
    }
   else
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
              }
             else
              {
               for(int _injected_loop_counter = ((0 & 8831) >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (int(2)) | (0 | 0)))); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
                {
                 if(_GLF_DEAD(false))
                  {
                   for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(5), int(5))); _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(1, min(1, 1))); _injected_loop_counter ++)
                    {
                     return;
                     if(_GLF_DEAD(false))
                      break;
                    }
                   if(_GLF_DEAD(false))
                    return;
                  }
                }
              }
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
              {
               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                }
               else
                {
                 return;
                }
              }
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                return;
               return;
              }
            }
           return;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               return;
              }
            }
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(false))
            return;
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                {
                 return;
                }
               else
                {
                }
               if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, false || (false))))))
                return;
              }
            }
           else
            {
            }
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
          }
         do
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              continue;
             return;
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
     else
      {
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           if(_GLF_DEAD(false))
            break;
           return;
          }
        }
      }
     else
      {
       return;
      }
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 else
  {
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END
BUFFER checker DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected_checker DATA_TYPE uint32 SIZE 8388096 FILL 0

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 
  BIND BUFFER checker AS storage DESCRIPTOR_SET 0 BINDING 2 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT checker EQ_BUFFER expected_checker
