#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_36 {
 ivec4 _f0;
 uint _f1;
 vec3 _f2;
 mat2 _f3;
 mat3x2 _f4;
 mat2x3 _f5;
} ;

struct _GLF_struct_35 {
 int _f0;
 uint _f1;
 uint _f2;
 vec2 _f3;
 ivec4 _f4;
} ;

struct _GLF_struct_34 {
 uvec3 _f0;
 mat3x2 _f1;
 float _f2;
 mat2x3 _f3;
} ;

struct _GLF_struct_33 {
 mat3x2 _f0;
} ;

struct _GLF_struct_37 {
 mat4x2 _f0;
 _GLF_struct_33 _f1;
 bvec3 _f2;
 _GLF_struct_34 _f3;
 _GLF_struct_35 _f4;
 _GLF_struct_36 _f5;
} ;

struct _GLF_struct_31 {
 bvec4 _f0;
 mat4 _f1;
} ;

struct _GLF_struct_30 {
 ivec4 _f0;
 vec2 _f1;
 ivec3 _f2;
 mat3 _f3;
} ;

struct _GLF_struct_32 {
 _GLF_struct_30 _f0;
 _GLF_struct_31 _f1;
} ;

struct _GLF_struct_28 {
 mat2 _f0;
 mat2x3 _f1;
 mat3 _f2;
 mat4 _f3;
 float _f4;
 bvec3 _f5;
} ;

struct _GLF_struct_27 {
 mat2x3 _f0;
 uint _f1;
 mat2x4 _f2;
 uvec3 _f3;
 mat3 _f4;
 mat2x3 _f5;
 mat4 _f6;
} ;

struct _GLF_struct_29 {
 uint _f0;
 uvec2 _f1;
 bvec3 _f2;
 mat3x4 _f3;
 ivec4 _f4;
 _GLF_struct_27 _f5;
 _GLF_struct_28 _f6;
} ;

struct _GLF_struct_25 {
 mat2x3 _f0;
 ivec4 _f1;
 bool _f2;
 ivec4 _f3;
 uint _f4;
 uvec3 _f5;
} ;

struct _GLF_struct_26 {
 _GLF_struct_25 _f0;
} ;

struct _GLF_struct_38 {
 bvec2 _f0;
 _GLF_struct_26 _f1;
 _GLF_struct_29 _f2;
 vec3 _f3;
 _GLF_struct_32 _f4;
 _GLF_struct_37 _f5;
 bool _f6;
 uint workgroup_base;
} ;

struct _GLF_struct_22 {
 float _f0;
 vec4 _f1;
 bool _f2;
 uvec2 _f3;
} ;

struct _GLF_struct_21 {
 vec2 _f0;
 mat2 _f1;
 mat2x3 _f2;
 uvec2 _f3;
 bvec3 _f4;
 uvec2 _f5;
} ;

struct _GLF_struct_20 {
 bvec3 _f0;
 mat3x4 _f1;
 int _f2;
} ;

struct _GLF_struct_23 {
 _GLF_struct_20 _f0;
 _GLF_struct_21 _f1;
 _GLF_struct_22 _f2;
} ;

struct _GLF_struct_19 {
 uvec3 _f0;
} ;

struct _GLF_struct_17 {
 uvec2 _f0;
 bool _f1;
} ;

struct _GLF_struct_16 {
 ivec4 _f0;
 bvec3 _f1;
 mat3x4 _f2;
 uvec3 _f3;
} ;

struct _GLF_struct_15 {
 mat4 _f0;
 uvec3 _f1;
 vec2 _f2;
 vec4 _f3;
 bvec4 _f4;
 int _f5;
 mat2 _f6;
} ;

struct _GLF_struct_14 {
 mat4 _f0;
 mat4x3 _f1;
 bvec4 _f2;
 mat2x4 _f3;
 ivec4 _f4;
 bvec3 _f5;
} ;

struct _GLF_struct_18 {
 _GLF_struct_14 _f0;
 _GLF_struct_15 _f1;
 float _f2;
 bvec2 _f3;
 int _f4;
 _GLF_struct_16 _f5;
 _GLF_struct_17 _f6;
} ;

struct _GLF_struct_24 {
 bvec3 _f0;
 _GLF_struct_18 _f1;
 mat3x4 _f2;
 float _f3;
 _GLF_struct_19 _f4;
 uint workgroup_id;
 _GLF_struct_23 _f5;
 uvec4 _f6;
} ;

struct _GLF_struct_11 {
 mat3 _f0;
 uvec2 _f1;
 int _f2;
 vec4 _f3;
 mat3x4 _f4;
} ;

struct _GLF_struct_12 {
 mat2 _f0;
 mat3 _f1;
 _GLF_struct_11 _f2;
 uvec2 _f3;
 uint subgroup_local_id;
} ;

struct _GLF_struct_13 {
 mat4x2 _f0;
 _GLF_struct_12 _f1;
} ;

struct _GLF_struct_8 {
 mat3x2 _f0;
 mat4x3 _f1;
 mat3 _f2;
 mat2x3 _f3;
 bvec2 _f4;
} ;

struct _GLF_struct_7 {
 uvec3 _f0;
 mat3 _f1;
} ;

struct _GLF_struct_9 {
 _GLF_struct_7 _f0;
 _GLF_struct_8 _f1;
 mat2x3 _f2;
 mat2x3 _f3;
} ;

struct _GLF_struct_5 {
 ivec4 _f0;
 uint _f1;
 uvec4 _f2;
 bvec3 _f3;
 mat3 _f4;
} ;

struct _GLF_struct_4 {
 mat2x3 _f0;
} ;

struct _GLF_struct_3 {
 bool _f0;
 bvec3 _f1;
} ;

struct _GLF_struct_2 {
 vec3 _f0;
 uvec3 _f1;
} ;

struct _GLF_struct_1 {
 mat2x3 _f0;
 mat2x4 _f1;
 vec4 _f2;
 vec2 _f3;
 vec2 _f4;
 mat4 _f5;
 bvec2 _f6;
} ;

struct _GLF_struct_0 {
 mat2 _f0;
 ivec3 _f1;
 vec3 _f2;
 ivec2 _f3;
 mat4x3 _f4;
} ;

struct _GLF_struct_6 {
 _GLF_struct_0 _f0;
 _GLF_struct_1 _f1;
 _GLF_struct_2 _f2;
 _GLF_struct_3 _f3;
 _GLF_struct_4 _f4;
 _GLF_struct_5 _f5;
} ;

struct _GLF_struct_10 {
 _GLF_struct_6 _f0;
 mat3x2 _f1;
 uint virtual_gid;
 ivec2 _f2;
 vec2 _f3;
 _GLF_struct_9 _f4;
 uvec4 _f5;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(false))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(injectionSwitch.x > injectionSwitch.y, true)))))), bool(bvec4(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(injectionSwitch.x > injectionSwitch.y, true)))))), false, false, true))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(injectionSwitch.y)))), float(_GLF_FUZZED(-3237.3803)), bool(false))) > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).x > injectionSwitch.y, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y) && true)))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), true && (! (false)))))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0), _GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)))) > injectionSwitch.y))))
    barrier();
   return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec2(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false))))))
    barrier();
   barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, _GLF_IDENTITY(false || (false), (_GLF_IDENTITY(false || (false), ! (! (false || (false))))) && true)), true)))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch), ((injectionSwitch)) * mat2(1.0)) / vec2(1.0, 1.0)).x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1]))[1])), vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], _GLF_IDENTITY(max(injectionSwitch[_GLF_IDENTITY(1, 0 | (1))], injectionSwitch[1]), min(max(injectionSwitch[1], injectionSwitch[1]), _GLF_IDENTITY(max(injectionSwitch[1], injectionSwitch[1]), float(mat2x4(max(injectionSwitch[1], injectionSwitch[1]), 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0)))))))).y, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-9.7)), float(1.0), bool(_GLF_IDENTITY(true, bool(bool(true)))))))).x, _GLF_IDENTITY(float(mat4x3(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / _GLF_IDENTITY(vec2(1.0, 1.0), (vec2(1.0, 1.0)) * mat2(1.0))).x, abs(0.0), determinant(mat4(1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, length(vec3(0.0, 0.0, 0.0)), abs(0.0), 1.0, 0.0, 0.0, 0.0, 0.0, 1.0)), 0.0, length(_GLF_IDENTITY(0.0, tan(0.0) + (0.0))), 1.0, 1.0, 1.0, 1.0, length(vec3(0.0, _GLF_IDENTITY(0.0, clamp(0.0, _GLF_IDENTITY(_GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(16.41))), (_GLF_IDENTITY(_GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(16.41))), float(vec2(_GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(16.41))), 1.0)))) * 1.0), _GLF_IDENTITY(_GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, min(0.0, 0.0))) / 1.0), min(_GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, min(0.0, 0.0))) / 1.0), _GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, min(0.0, 0.0))) / 1.0))))), 0.0)), 1.0, 0.0)), mix(float(float(mat4x3(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).x, abs(0.0), determinant(mat4(1.0, _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(min(13.53, 4.5)) : 0.0)), 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, length(vec3(0.0, 0.0, 0.0)), abs(0.0), 1.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, float(_GLF_IDENTITY(vec4(0.0, 1.0, 1.0, 0.0), (vec4(0.0, 1.0, 1.0, 0.0)) * mat4(1.0)))), 1.0)), 0.0, length(0.0), 1.0, 1.0, 1.0, 1.0, length(vec3(0.0, 0.0, 0.0)), 1.0, 0.0))), float(_GLF_FUZZED(-4243.5261)), bool(false)))) > injectionSwitch.y) || false)))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(injectionSwitch.x > injectionSwitch.y, true))), false)))))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
    barrier();
   return;
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   return;
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(707.775)), float(injectionSwitch.x), bool(true))), _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)))) > injectionSwitch.y), false || ((_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(707.775)), float(injectionSwitch.x), bool(true))), _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)))) > injectionSwitch.y))))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, _GLF_IDENTITY(false, bool(bvec2(false, true))), true)))))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   return;
   if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))) || false))))
    barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, ! (! (false))), false, false)))))))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true))))))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        return;
       return;
      }
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / sqrt(vec2(1.0, 1.0))).y))))
      barrier();
    }
   if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), false, false, true))), (_GLF_DEAD(false)) || false))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
  return;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, 0.0 + (injectionSwitch.y))))))
  return;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  return;
 _GLF_struct_13 _GLF_struct_replacement_13 = _GLF_struct_13(mat4x2(_GLF_IDENTITY(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(round(16.96)))), float(float(1.0)))), _GLF_struct_12(mat2(1.0), mat3(1.0), _GLF_struct_11(mat3(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-273.146)), float(1.0), bool(true)))) + _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(1.0, 0.0)), dot(vec2(0.0, 1.0), vec2(1.0, 0.0))))), uvec2(_GLF_IDENTITY(1u, clamp(1u, 1u, 1u))), 1, _GLF_IDENTITY(_GLF_IDENTITY(vec4(_GLF_IDENTITY(1.0, float(_GLF_IDENTITY(vec3(1.0, 0.0, 0.0), (vec3(1.0, 0.0, 0.0)) * mat3(1.0))))), min(vec4(1.0), _GLF_IDENTITY(vec4(1.0), (vec4(1.0)) / vec4(1.0, 1.0, 1.0, 1.0)))), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(vec4(1.0), min(vec4(1.0), _GLF_IDENTITY(vec4(1.0), (vec4(1.0)) / vec4(1.0, 1.0, 1.0, 1.0)))), max(_GLF_IDENTITY(vec4(1.0), min(_GLF_IDENTITY(vec4(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(7.8)), bool(false)))) / _GLF_ONE(1.0, injectionSwitch.y))), clamp(vec4(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(7.8)), bool(false)))) / _GLF_ONE(1.0, injectionSwitch.y))), vec4(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(7.8)), bool(false)))) / _GLF_ONE(1.0, injectionSwitch.y))), _GLF_IDENTITY(vec4(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(7.8)), bool(false)))) / _GLF_ONE(1.0, injectionSwitch.y))), min(vec4(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(7.8)), bool(false)))) / _GLF_ONE(1.0, injectionSwitch.y))), vec4(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(7.8)), bool(false)))) / _GLF_ONE(1.0, injectionSwitch.y))))))), _GLF_IDENTITY(vec4(1.0), (vec4(1.0)) / _GLF_IDENTITY(vec4(_GLF_IDENTITY(1.0, min(1.0, 1.0)), 1.0, 1.0, 1.0), max(vec4(_GLF_IDENTITY(1.0, min(1.0, 1.0)), 1.0, 1.0, 1.0), vec4(_GLF_IDENTITY(_GLF_IDENTITY(1.0, min(1.0, 1.0)), mix(float(_GLF_FUZZED(664.039)), float(_GLF_IDENTITY(1.0, min(1.0, 1.0))), bool(true))), 1.0, 1.0, 1.0)))))), _GLF_IDENTITY(vec4(1.0), min(vec4(1.0), _GLF_IDENTITY(_GLF_IDENTITY(vec4(1.0), (vec4(1.0)) / vec4(1.0, 1.0, 1.0, 1.0)), vec4(mat2x3(_GLF_IDENTITY(_GLF_IDENTITY(vec4(1.0), (vec4(1.0)) / vec4(1.0, 1.0, 1.0, 1.0)), mat4(1.0) * (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(vec4(1.0), (true ? vec4(1.0) : _GLF_FUZZED(vec4(-147.219, 5677.5204, 557.329, 414.835)))), clamp(_GLF_IDENTITY(vec4(1.0), min(_GLF_IDENTITY(vec4(1.0), (vec4(1.0)) / vec4(1.0, 1.0, _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(vec3(53.75, -3.7, 0.6).z)), float(1.0), bool(true))), 1.0)), vec4(1.0))), vec4(1.0), vec4(1.0))), (vec4(1.0)) / vec4(1.0, 1.0, 1.0, 1.0)))), determinant(_GLF_IDENTITY(mat3(0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, abs(0.0)), mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0) + (mat3(0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, abs(0.0))))), 1.0)))))))), max((_GLF_IDENTITY(_GLF_IDENTITY(vec4(1.0), _GLF_IDENTITY(min(vec4(1.0), _GLF_IDENTITY(vec4(1.0), (vec4(1.0)) / vec4(1.0, 1.0, 1.0, 1.0))), clamp(min(vec4(1.0), _GLF_IDENTITY(vec4(1.0), (vec4(1.0)) / vec4(1.0, 1.0, 1.0, 1.0))), min(vec4(1.0), _GLF_IDENTITY(vec4(1.0), (vec4(1.0)) / vec4(1.0, 1.0, 1.0, 1.0))), min(vec4(1.0), _GLF_IDENTITY(vec4(1.0), (vec4(1.0)) / vec4(1.0, 1.0, 1.0, 1.0)))))), max(_GLF_IDENTITY(vec4(_GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), 1.0))), min(vec4(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(7.8)), bool(false)))) / _GLF_ONE(1.0, injectionSwitch.y))), _GLF_IDENTITY(vec4(1.0), (vec4(1.0)) / _GLF_IDENTITY(vec4(_GLF_IDENTITY(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(79.73) : 1.0)), min(1.0, 1.0)), 1.0, 1.0, 1.0), max(vec4(_GLF_IDENTITY(_GLF_IDENTITY(1.0, min(1.0, 1.0)), (false ? _GLF_FUZZED(7543.7378) : _GLF_IDENTITY(1.0, min(1.0, 1.0)))), 1.0, 1.0, 1.0), vec4(_GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-0.4)))) - _GLF_IDENTITY(dot(vec3(1.0, 1.0, 1.0), vec3(0.0, 0.0, 0.0)), dot(vec3(1.0, 1.0, 1.0), vec3(0.0, 0.0, 0.0)))))), 1.0, 1.0, 1.0)))))), _GLF_IDENTITY(vec4(1.0), min(vec4(1.0), _GLF_IDENTITY(_GLF_IDENTITY(vec4(1.0), (vec4(1.0)) / vec4(1.0, 1.0, 1.0, 1.0)), vec4(mat2x3(_GLF_IDENTITY(_GLF_IDENTITY(vec4(1.0), _GLF_IDENTITY((vec4(1.0)), _GLF_IDENTITY(((vec4(1.0))) * mat4(1.0), vec4(mat3x4(((vec4(1.0))) * mat4(1.0), 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0)))) / vec4(1.0, 1.0, 1.0, 1.0)), mat4(1.0) * (_GLF_IDENTITY(vec4(1.0), (vec4(1.0)) / vec4(1.0, 1.0, 1.0, 1.0)))), determinant(mat3(0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, abs(0.0))), 1.0)))))))), (_GLF_IDENTITY(_GLF_IDENTITY(vec4(1.0), min(vec4(1.0), _GLF_IDENTITY(vec4(1.0), (vec4(1.0)) / vec4(1.0, 1.0, 1.0, 1.0)))), max(_GLF_IDENTITY(vec4(1.0), min(vec4(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(_GLF_IDENTITY(1.0, float(mat2(_GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(1.2)), float(1.0), bool(true))), 1.0, 1.0)), abs(0.0), 1.0, 0.0))), mix(float(1.0), float(_GLF_FUZZED(7.8)), bool(false)))) / _GLF_ONE(1.0, injectionSwitch.y))), _GLF_IDENTITY(vec4(1.0), (vec4(_GLF_IDENTITY(1.0, min(1.0, 1.0)))) / _GLF_IDENTITY(_GLF_IDENTITY(vec4(_GLF_IDENTITY(1.0, min(1.0, 1.0)), 1.0, 1.0, 1.0), vec4(mat4x2(vec4(_GLF_IDENTITY(1.0, min(1.0, 1.0)), 1.0, 1.0, 1.0), 0.0, 0.0, log(1.0), 1.0))), max(vec4(_GLF_IDENTITY(1.0, min(1.0, 1.0)), 1.0, 1.0, 1.0), vec4(_GLF_IDENTITY(1.0, min(1.0, 1.0)), 1.0, 1.0, 1.0)))))), _GLF_IDENTITY(vec4(1.0), min(vec4(1.0), _GLF_IDENTITY(_GLF_IDENTITY(vec4(1.0), (vec4(1.0)) / vec4(1.0, 1.0, 1.0, _GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, float(mat2(_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(6442.0723)), bool(false))), 0.0, 0.0, 0.0)))) / 1.0))), vec4(mat2x3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(vec4(1.0), mat4(1.0) * (vec4(1.0))), (vec4(1.0)) / vec4(1.0, 1.0, 1.0, 1.0)), mat4(1.0) * (_GLF_IDENTITY(vec4(1.0), (vec4(1.0)) / vec4(1.0, 1.0, 1.0, 1.0)))), determinant(mat3(0.0, 0.0, _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-595.877)), float(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(-2.3) : 1.0))), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), 0.0, 0.0, 0.0, 0.0, 0.0, abs(0.0))), 1.0)))))))))) - vec4(0.0, 0.0, 0.0, 0.0)), mat3x4(1.0)), uvec2(1u), gl_SubgroupInvocationID));
 if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), true, true, true))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(injectionSwitch.x > injectionSwitch.y, true)))))))
    barrier();
   return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(mat4(injectionSwitch.y, 0.0, 0.0, 1.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0))), 0.0, abs(cos(0.0)), 0.0, 0.0, 0.0, 1.0, determinant(mat4(1.0, 1.0, 0.0, 0.0, 0.0, 1.0, determinant(mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0)), 1.0, 0.0, 0.0, 1.0, exp(0.0), 0.0, 0.0, 0.0, 1.0)), 0.0, 0.0, 0.0, 0.0)))))))
  barrier();
 uint num_workgroup = _GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups.x, min(gl_NumWorkGroups.x, _GLF_IDENTITY(gl_NumWorkGroups.x, (gl_NumWorkGroups.x) | (_GLF_IDENTITY(gl_NumWorkGroups.x, (true ? gl_NumWorkGroups.x : _GLF_FUZZED(subgroup_id))))))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(gl_NumWorkGroups.x, ~ (_GLF_IDENTITY(~ (gl_NumWorkGroups.x), (~ (gl_NumWorkGroups.x)) ^ 0u)))), (_GLF_IDENTITY(~ (_GLF_IDENTITY(gl_NumWorkGroups.x, ~ (~ (_GLF_IDENTITY(gl_NumWorkGroups.x, ~ (~ (_GLF_IDENTITY(gl_NumWorkGroups.x, (gl_NumWorkGroups.x) / 1u)))))))), _GLF_IDENTITY(uint(uvec2(~ (_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, ~ (_GLF_IDENTITY(~ (gl_NumWorkGroups), uvec3(0u, 0u, 0u) ^ (~ (gl_NumWorkGroups))))).x, ~ _GLF_IDENTITY((~ (gl_NumWorkGroups.x)), (true ? (~ (gl_NumWorkGroups.x)) : _GLF_FUZZED(subgroup_size))))), uint(_GLF_ONE(1.0, injectionSwitch.y)))), ~ (~ (uint(uvec2(~ (_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, ~ (_GLF_IDENTITY(~ (gl_NumWorkGroups), uvec3(0u, 0u, 0u) ^ (~ (gl_NumWorkGroups))))).x, ~ _GLF_IDENTITY((~ (gl_NumWorkGroups.x)), (true ? (~ (_GLF_IDENTITY(gl_NumWorkGroups, max(_GLF_IDENTITY(gl_NumWorkGroups, max(gl_NumWorkGroups, gl_NumWorkGroups)), _GLF_IDENTITY(gl_NumWorkGroups, uvec3(_GLF_IDENTITY(uvec3(gl_NumWorkGroups), min(uvec3(gl_NumWorkGroups), uvec3(gl_NumWorkGroups))))))).x)) : _GLF_FUZZED(subgroup_size))))), uint(_GLF_ONE(1.0, injectionSwitch.y))))))))) * 1u)));
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 uint workgroup_size = _GLF_IDENTITY(gl_WorkGroupSize, (_GLF_IDENTITY(gl_WorkGroupSize, (_GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) | uvec3(0u, 0u, 0u))) | (gl_WorkGroupSize))) >> uvec3(_GLF_IDENTITY(0u, 0u | (0u)), 0u, 0u)).x;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(! (! (false)), bool(bool(! (! (false))))), bool(bvec4(! (! (false)), true, false, true))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))), ((_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x > injectionSwitch.y)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))
      barrier();
     return;
    }
   barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(_GLF_IDENTITY(bvec3(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), mat2(1.0) * ((injectionSwitch) * mat2(1.0)))).y)), true, false), bvec3(_GLF_IDENTITY(bvec3(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false)), bvec3(bvec4(bvec3(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false)), true)))))))))
  barrier();
 _GLF_struct_24 _GLF_struct_replacement_24 = _GLF_struct_24(bvec3(true), _GLF_struct_18(_GLF_struct_14(mat4(1.0), mat4x3(1.0), bvec4(true), mat2x4(1.0), ivec4(1), bvec3(_GLF_IDENTITY(true, bool(bvec3(true, false, false))))), _GLF_struct_15(mat4(1.0), _GLF_IDENTITY(_GLF_IDENTITY(uvec3(1u), (uvec3(1u)) | (uvec3(1u))), (_GLF_IDENTITY(uvec3(1u), (uvec3(1u)) | _GLF_IDENTITY((uvec3(1u)), ~ (~ (_GLF_IDENTITY((uvec3(1u)), clamp((uvec3(1u)), (uvec3(1u)), (uvec3(1u))))))))) * ((uvec3(1u, _GLF_IDENTITY(1u, ~ (~ (1u))), 1u) << _GLF_IDENTITY(uvec3(5u), uvec3(5u))) >> _GLF_IDENTITY(uvec3(5u), uvec3(5u)))), vec2(1.0), vec4(1.0), bvec4(true), 1, mat2(_GLF_IDENTITY(1.0, float(mat2x4(_GLF_IDENTITY(_GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, min(1.0, 1.0)), _GLF_IDENTITY(1.0, min(1.0, 1.0)))), (_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(mix(1089.1395, -3.1, 8.9)) : _GLF_IDENTITY(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), max(1.0, 1.0))))) + 0.0), 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, sin(0.0)))))), _GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-5.6)), bool(false))), bvec2(true), 1, _GLF_struct_16(ivec4(1), bvec3(true), mat3x4(_GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), 1.0))), _GLF_IDENTITY(uvec3(_GLF_IDENTITY(1u, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 1u : _GLF_FUZZED(bitfieldInsert(subgroup_size, num_workgroup, -51141, -19653))))), _GLF_IDENTITY(~ (~ (uvec3(1u))), uvec3(_GLF_IDENTITY(uvec3(~ (~ (uvec3(1u)))), clamp(uvec3(~ (~ (uvec3(1u)))), uvec3(~ (~ (uvec3(1u)))), uvec3(~ (~ (uvec3(1u)))))))))), _GLF_struct_17(uvec2(1u), true)), mat3x4(1.0), 1.0, _GLF_struct_19(uvec3(1u)), _GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID.x, min(gl_WorkGroupID.x, _GLF_IDENTITY(gl_WorkGroupID.x, (gl_WorkGroupID.x) | (gl_WorkGroupID.x)))), (gl_WorkGroupID.x) / _GLF_IDENTITY(1u, (1u) | (1u))), _GLF_struct_23(_GLF_struct_20(bvec3(_GLF_IDENTITY(true, (true) && true)), mat3x4(1.0), 1), _GLF_struct_21(vec2(1.0), mat2(1.0), mat2x3(1.0), uvec2(1u), bvec3(true), uvec2(1u)), _GLF_struct_22(1.0, vec4(_GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(1.0, max(1.0, 1.0))))), true, uvec2(1u))), uvec4(1u));
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 _GLF_struct_38 _GLF_struct_replacement_38 = _GLF_struct_38(bvec2(_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(true, (true) || false), false), bvec2(bvec3(bvec2(_GLF_IDENTITY(true, (true) || false), false), false)))))) && true), (_GLF_IDENTITY(true, _GLF_IDENTITY((_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(true, (true) || false), false), bvec2(bvec3(bvec2(_GLF_IDENTITY(true, _GLF_IDENTITY((true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY((true), ! (! ((true)))))) || false), false), false)))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || ((_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(true, (true) || false), false), bvec2(bvec3(bvec2(_GLF_IDENTITY(true, _GLF_IDENTITY((true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY((true), ! (! ((true)))))) || false), false), false)))))))) && true)) && true))))), _GLF_struct_26(_GLF_struct_25(mat2x3(1.0), ivec4(1), true, ivec4(1), 1u, uvec3(1u))), _GLF_struct_29(_GLF_IDENTITY(1u, max(_GLF_IDENTITY(1u, _GLF_IDENTITY(max(1u, 1u), min(max(1u, 1u), max(1u, 1u)))), 1u)), uvec2(1u), bvec3(_GLF_IDENTITY(true, bool(bvec4(true, false, false, false)))), mat3x4(1.0), ivec4(1), _GLF_struct_27(mat2x3(1.0), 1u, mat2x4(1.0), uvec3(1u), mat3(1.0), mat2x3(1.0), mat4(1.0)), _GLF_struct_28(mat2(1.0), mat2x3(_GLF_IDENTITY(1.0, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-10.41) : 1.0))), mat3(1.0), mat4(1.0), 1.0, bvec3(true))), vec3(_GLF_IDENTITY(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(dot(_GLF_IDENTITY(length(vec4(45.76, -814.244, 1.4, 9424.6432)), (false ? _GLF_FUZZED(6305.7511) : length(vec4(45.76, -814.244, 1.4, 9424.6432)))), _GLF_IDENTITY(-136.655, clamp(_GLF_IDENTITY(-136.655, 0.0 + (-136.655)), -136.655, -136.655)))) : 1.0)), (_GLF_IDENTITY(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(dot(_GLF_IDENTITY(length(vec4(45.76, -814.244, 1.4, 9424.6432)), (false ? _GLF_FUZZED(6305.7511) : length(vec4(45.76, -814.244, 1.4, 9424.6432)))), _GLF_IDENTITY(-136.655, clamp(_GLF_IDENTITY(-136.655, 0.0 + (-136.655)), -136.655, -136.655)))) : 1.0)), max(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(dot(_GLF_IDENTITY(length(vec4(45.76, -814.244, 1.4, 9424.6432)), (false ? _GLF_FUZZED(6305.7511) : length(vec4(45.76, -814.244, 1.4, 9424.6432)))), _GLF_IDENTITY(-136.655, clamp(_GLF_IDENTITY(-136.655, 0.0 + (-136.655)), -136.655, -136.655)))) : 1.0)), _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(dot(_GLF_IDENTITY(length(vec4(45.76, -814.244, 1.4, 9424.6432)), (false ? _GLF_FUZZED(6305.7511) : length(vec4(45.76, -814.244, 1.4, 9424.6432)))), _GLF_IDENTITY(-136.655, clamp(_GLF_IDENTITY(-136.655, 0.0 + (-136.655)), -136.655, -136.655)))) : 1.0))))) / determinant(mat2(1.0, 0.0, 0.0, 1.0)))), _GLF_struct_32(_GLF_struct_30(ivec4(1), _GLF_IDENTITY(vec2(1.0), vec2(1.0, 1.0) * (vec2(1.0))), ivec3(1), mat3(1.0)), _GLF_struct_31(bvec4(true), mat4(1.0))), _GLF_struct_37(mat4x2(1.0), _GLF_struct_33(mat3x2(_GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), 1.0)))), bvec3(true), _GLF_struct_34(_GLF_IDENTITY(uvec3(1u), ~ (~ (_GLF_IDENTITY(uvec3(1u), (uvec3(1u)) << uvec3(0u, 0u, 0u))))), mat3x2(1.0), 1.0, mat2x3(1.0)), _GLF_struct_35(_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, min(1, 1))) >> 0), 1, 1)), 1u, 1u, vec2(1.0), ivec4(1)), _GLF_struct_36(ivec4(1), 1u, _GLF_IDENTITY(vec3(1.0), mat3(1.0) * _GLF_IDENTITY((vec3(_GLF_IDENTITY(1.0, max(1.0, _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)))))), ((vec3(1.0))) - _GLF_IDENTITY(abs(tan(vec3(0.0, 0.0, 0.0))), _GLF_IDENTITY(vec3(vec4(abs(tan(vec3(0.0, 0.0, 0.0))), 1.0)), max(vec3(vec4(abs(tan(vec3(0.0, 0.0, 0.0))), 1.0)), vec3(vec4(abs(tan(vec3(0.0, 0.0, 0.0))), 1.0))))))), mat2(1.0), mat3x2(1.0), mat2x3(1.0))), _GLF_IDENTITY(true, bool(bvec2(true, _GLF_IDENTITY(false, ! (! (false)))))), workgroup_size * _GLF_struct_replacement_24.workgroup_id);
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  return;
 uint subgroup_base = _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id)) * _GLF_IDENTITY(subgroup_size, (subgroup_size) + (1u ^ 1u)), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id * subgroup_size, (_GLF_IDENTITY(subgroup_id * subgroup_size, 0u | (_GLF_IDENTITY(subgroup_id * subgroup_size, 0u + (subgroup_id * subgroup_size))))) >> 0u), _GLF_IDENTITY((_GLF_IDENTITY(subgroup_id, max(subgroup_id, subgroup_id)) * subgroup_size), ((_GLF_IDENTITY(subgroup_id, max(_GLF_IDENTITY(subgroup_id, 0u ^ (_GLF_IDENTITY(subgroup_id, (subgroup_id) | 0u))), subgroup_id)) * subgroup_size)) | (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY(max(subgroup_id, subgroup_id), (max(subgroup_id, subgroup_id)) | (max(subgroup_id, subgroup_id)))) * subgroup_size), max((_GLF_IDENTITY(subgroup_id, max(subgroup_id, subgroup_id)) * subgroup_size), (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, max(subgroup_id, subgroup_id)), clamp(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, max(subgroup_id, subgroup_id)), (_GLF_IDENTITY(subgroup_id, max(subgroup_id, subgroup_id))) | (_GLF_IDENTITY(subgroup_id, max(subgroup_id, subgroup_id)))), _GLF_IDENTITY(subgroup_id, max(subgroup_id, subgroup_id)), _GLF_IDENTITY(subgroup_id, max(subgroup_id, subgroup_id)))) * subgroup_size))))) | _GLF_IDENTITY((subgroup_id * subgroup_size), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((subgroup_id * subgroup_size), (false ? _GLF_FUZZED(subgroup_id) : (subgroup_id * subgroup_size))), _GLF_IDENTITY(uint(uvec2(_GLF_IDENTITY(_GLF_IDENTITY((subgroup_id * subgroup_size), (false ? _GLF_FUZZED(subgroup_id) : (subgroup_id * subgroup_size))), (true ? _GLF_IDENTITY(_GLF_IDENTITY((subgroup_id * subgroup_size), (false ? _GLF_FUZZED(subgroup_id) : (subgroup_id * subgroup_size))), (true ? _GLF_IDENTITY((subgroup_id * subgroup_size), (false ? _GLF_FUZZED(subgroup_id) : (subgroup_id * subgroup_size))) : _GLF_FUZZED(123629u))) : _GLF_FUZZED(subgroup_size))), uint(_GLF_ONE(1.0, injectionSwitch.y)))), (uint(uvec2(_GLF_IDENTITY(_GLF_IDENTITY((subgroup_id * subgroup_size), (false ? _GLF_FUZZED(subgroup_id) : (subgroup_id * subgroup_size))), (true ? _GLF_IDENTITY(_GLF_IDENTITY((subgroup_id * subgroup_size), (false ? _GLF_FUZZED(subgroup_id) : (subgroup_id * subgroup_size))), (true ? _GLF_IDENTITY((subgroup_id * subgroup_size), (false ? _GLF_FUZZED(subgroup_id) : (subgroup_id * subgroup_size))) : _GLF_FUZZED(123629u))) : _GLF_FUZZED(subgroup_size))), uint(_GLF_ONE(1.0, injectionSwitch.y))))) << 0u)), clamp(_GLF_IDENTITY((subgroup_id * subgroup_size), (false ? _GLF_FUZZED(subgroup_id) : (_GLF_IDENTITY(subgroup_id, (subgroup_id) | (_GLF_IDENTITY(subgroup_id, 0u + (subgroup_id)))) * subgroup_size))), _GLF_IDENTITY((subgroup_id * subgroup_size), (false ? _GLF_FUZZED(subgroup_id) : (subgroup_id * subgroup_size))), _GLF_IDENTITY((subgroup_id * subgroup_size), (false ? _GLF_FUZZED(subgroup_id) : (subgroup_id * subgroup_size)))))) - (0u ^ 0u)))), max((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id * subgroup_size, (_GLF_IDENTITY(subgroup_id * subgroup_size, 0u | (_GLF_IDENTITY(subgroup_id * subgroup_size, 0u + (subgroup_id * subgroup_size))))) >> 0u), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, max(subgroup_id, subgroup_id)), (false ? _GLF_FUZZED(workgroup_size) : _GLF_IDENTITY(subgroup_id, max(subgroup_id, subgroup_id)))) * subgroup_size), ((_GLF_IDENTITY(subgroup_id, max(subgroup_id, subgroup_id)) * subgroup_size)) | (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_id, max(subgroup_id, subgroup_id)) * subgroup_size), max((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, max(subgroup_id, subgroup_id)) * subgroup_size, (_GLF_IDENTITY(subgroup_id, max(subgroup_id, subgroup_id)) * subgroup_size) | (_GLF_IDENTITY(subgroup_id, max(subgroup_id, subgroup_id)) * subgroup_size))), (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, max(subgroup_id, subgroup_id)) * subgroup_size, 1u * (_GLF_IDENTITY(subgroup_id, max(subgroup_id, subgroup_id)) * subgroup_size))))))) | _GLF_IDENTITY((subgroup_id * subgroup_size), (_GLF_IDENTITY(_GLF_IDENTITY((subgroup_id * subgroup_size), (false ? _GLF_FUZZED(subgroup_id) : (subgroup_id * subgroup_size))), clamp(_GLF_IDENTITY((subgroup_id * subgroup_size), (false ? _GLF_FUZZED(subgroup_id) : (subgroup_id * subgroup_size))), _GLF_IDENTITY((subgroup_id * subgroup_size), (false ? _GLF_FUZZED(subgroup_id) : (subgroup_id * subgroup_size))), _GLF_IDENTITY((subgroup_id * subgroup_size), (false ? _GLF_FUZZED(subgroup_id) : (subgroup_id * subgroup_size)))))) - (0u ^ 0u)))), (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id * subgroup_size, (_GLF_IDENTITY(subgroup_id * subgroup_size, 0u | (_GLF_IDENTITY(subgroup_id * _GLF_IDENTITY(subgroup_size, max(subgroup_size, subgroup_size)), 0u + (subgroup_id * subgroup_size))))) >> 0u), _GLF_IDENTITY((_GLF_IDENTITY(subgroup_id, max(subgroup_id, subgroup_id)) * subgroup_size), ((_GLF_IDENTITY(subgroup_id, max(subgroup_id, subgroup_id)) * subgroup_size)) | (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_id, max(subgroup_id, subgroup_id)) * subgroup_size), max((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, max(subgroup_id, subgroup_id)), (_GLF_IDENTITY(subgroup_id, max(subgroup_id, subgroup_id))) | 0u) * subgroup_size), (_GLF_IDENTITY(subgroup_id, max(subgroup_id, subgroup_id)) * subgroup_size))))) | _GLF_IDENTITY((subgroup_id * subgroup_size), (_GLF_IDENTITY(_GLF_IDENTITY((subgroup_id * subgroup_size), (false ? _GLF_FUZZED(subgroup_id) : (subgroup_id * subgroup_size))), clamp(_GLF_IDENTITY((subgroup_id * subgroup_size), (false ? _GLF_FUZZED(subgroup_id) : (subgroup_id * subgroup_size))), _GLF_IDENTITY((subgroup_id * subgroup_size), (false ? _GLF_FUZZED(subgroup_id) : (subgroup_id * subgroup_size))), _GLF_IDENTITY((subgroup_id * subgroup_size), (false ? _GLF_FUZZED(subgroup_id) : (subgroup_id * subgroup_size)))))) - (0u ^ 0u)))))) | 0u);
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(float(injectionSwitch.y))))), ! (! (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(_GLF_IDENTITY(float(injectionSwitch.y), float(mat4x2(float(injectionSwitch.y), abs(0.0), _GLF_IDENTITY(dot(vec2(0.0, cos(0.0)), vec2(1.0, 0.0)), dot(vec2(0.0, cos(0.0)), vec2(1.0, 0.0))), 0.0, 1.0, 0.0, 0.0, determinant(mat2(0.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x)))))))))))))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec2(bvec2(false, true))))))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (_GLF_IDENTITY(! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (! (! (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec2((injectionSwitch.x > injectionSwitch.y), true))))))) && true)))))))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      {
       if(_GLF_DEAD(false))
        barrier();
       return;
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     return;
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec2(_GLF_DEAD(false), false)), bool(bool(bool(bvec2(_GLF_DEAD(false), false))))))), ! (! (! (_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec2(_GLF_DEAD(false), false)), bool(bool(bool(bvec2(_GLF_DEAD(false), false)))))))))))))
      return;
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - log(vec2(1.0, 1.0))).x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), bool(bvec3(_GLF_IDENTITY(false, (false) && true), false, true)))))
      {
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(vec3(injectionSwitch, 1.0)))) + vec2(0.0, 0.0))) - sqrt(vec2(0.0, 0.0))).y, _GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(-1045.6179)))))))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), false || (! (false)))))))
        barrier();
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         barrier();
        }
       barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         barrier();
        }
      }
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(true, true && (true)) && (false), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(true, true && (true)), false || (_GLF_IDENTITY(_GLF_IDENTITY(true, true && (true)), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(true, true && (true)), ! (! (_GLF_IDENTITY(true, true && (true)))))))))) && (false)))))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, float(float(_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(2.0) : injectionSwitch.x))))) > injectionSwitch.y, ! (! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, float(float(_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(2.0) : injectionSwitch.x))))) > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x, float(float(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(-6963.8574) : injectionSwitch.x)), (false ? _GLF_FUZZED(2.0) : injectionSwitch.x))))) > injectionSwitch.y)))))))), false || _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false), false || (_GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false))), bool(bvec4(_GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ((_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (injectionSwitch.x > injectionSwitch.y)))) || false), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))))))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
      {
       if(_GLF_DEAD(false))
        barrier();
       return;
       if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         return;
         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, ! (! (false))), false, true), bvec3(bvec3(bvec3(_GLF_IDENTITY(false, ! (! (false))), false, true)))), bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, ! (! (false))), false, true), bvec3(bvec3(bvec3(_GLF_IDENTITY(false, ! (! (false))), false, true))))), bvec3(bvec4(bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, ! (! (false))), false, true), bvec3(bvec3(bvec3(_GLF_IDENTITY(false, ! (! (false))), false, true))))), false)))))))))
          barrier();
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         barrier();
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)), ! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true))), true && (! (_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))) && true))))))))
    barrier();
   if(_GLF_DEAD(false))
    return;
   barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), bool(bvec2((false), true)))))))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
      return;
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     return;
    }
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && _GLF_IDENTITY(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (true)))))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false))) && true), _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(_GLF_IDENTITY(bvec3((injectionSwitch.x > injectionSwitch.y), true, true), bvec3(bvec4(bvec3((injectionSwitch.x > injectionSwitch.y), true, true), true))))))), _GLF_IDENTITY(bool(bool(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) && true)) && true), _GLF_FALSE(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, true && (false))), (bool(_GLF_IDENTITY(false, true && (false)))) || false))), (injectionSwitch.x > injectionSwitch.y)) || (false))) && true), (injectionSwitch.x > injectionSwitch.y))))), false || (bool(bool(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false))) && true), (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false))) && _GLF_IDENTITY(true, false || (true))), (injectionSwitch.x > injectionSwitch.y)))) && true)))))))
    return;
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   return;
  }
 _GLF_struct_10 _GLF_struct_replacement_10 = _GLF_struct_10(_GLF_struct_6(_GLF_struct_0(mat2(1.0), ivec3(1), vec3(_GLF_IDENTITY(1.0, min(1.0, 1.0))), _GLF_IDENTITY(_GLF_IDENTITY(ivec2(1), (_GLF_IDENTITY(ivec2(1), (ivec2(1)) | (_GLF_IDENTITY(ivec2(1), (ivec2(1)) | (ivec2(1)))))) >> ivec2(0, 0)), min(_GLF_IDENTITY(ivec2(1), (_GLF_IDENTITY(ivec2(1), (ivec2(1)) | (_GLF_IDENTITY(ivec2(1), (ivec2(1)) | (ivec2(1)))))) >> ivec2(0, 0)), _GLF_IDENTITY(ivec2(1), (_GLF_IDENTITY(ivec2(1), (ivec2(1)) | (_GLF_IDENTITY(ivec2(1), (ivec2(1)) | (ivec2(1)))))) >> ivec2(0, 0)))), mat4x3(1.0)), _GLF_struct_1(mat2x3(1.0), mat2x4(1.0), vec4(1.0), vec2(_GLF_IDENTITY(1.0, (_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec4(false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))), (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(592.900) : _GLF_IDENTITY(_GLF_IDENTITY(1.0, float(mat4(1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0))), (_GLF_IDENTITY(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), float(mat4(1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0)))) * 1.0)))), vec2(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(intBitsToFloat(61630)) : _GLF_IDENTITY(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), float(_GLF_IDENTITY(vec2(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), 0.0), (false ? _GLF_FUZZED(vec2(6.7, -6.5)) : vec2(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), 0.0)))))))), mat4(_GLF_IDENTITY(1.0, max(1.0, 1.0))), _GLF_IDENTITY(bvec2(true), bvec2(bvec3(_GLF_IDENTITY(bvec2(true), _GLF_IDENTITY(bvec2(bvec4(_GLF_IDENTITY(bvec2(true), bvec2(bvec3(bvec2(true), true))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)), bvec2(bvec2(bvec2(bvec4(_GLF_IDENTITY(bvec2(true), bvec2(bvec3(bvec2(true), true))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)))))), true)))), _GLF_struct_2(_GLF_IDENTITY(vec3(_GLF_IDENTITY(_GLF_IDENTITY(1.0, (1.0) - _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(0.0, round(length(normalize(1.0))))), dot(vec2(1.0, 0.0), vec2(0.0, round(length(normalize(1.0))))))), clamp(1.0, 1.0, 1.0))), mat3(1.0) * (vec3(_GLF_IDENTITY(1.0, _GLF_IDENTITY(clamp(1.0, 1.0, 1.0), min(clamp(1.0, 1.0, 1.0), clamp(1.0, 1.0, 1.0))))))), uvec3(_GLF_IDENTITY(1u, (1u) | (1u)))), _GLF_struct_3(true, bvec3(true)), _GLF_struct_4(mat2x3(1.0)), _GLF_struct_5(ivec4(1), 1u, _GLF_IDENTITY(uvec4(1u), ~ (~ (uvec4(1u)))), _GLF_IDENTITY(bvec3(true), bvec3(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(true), _GLF_IDENTITY(bvec3(bvec4(bvec3(true), false)), bvec3(bvec3(bvec3(bvec4(bvec3(true), false)))))), bvec3(bvec4(_GLF_IDENTITY(bvec3(true), _GLF_IDENTITY(bvec3(bvec4(bvec3(true), false)), bvec3(bvec3(bvec3(bvec4(bvec3(true), false)))))), false)))))), mat3(1.0))), mat3x2(_GLF_IDENTITY(1.0, (1.0) + 0.0)), _GLF_struct_replacement_38.workgroup_base + subgroup_base + _GLF_struct_replacement_13._f1.subgroup_local_id, ivec2(_GLF_IDENTITY(1, (1) | 0)), _GLF_IDENTITY(vec2(1.0), vec2(mat3x4(_GLF_IDENTITY(vec2(1.0), (true ? vec2(1.0) : _GLF_FUZZED(cosh(injectionSwitch)))), 1.0, 0.0, _GLF_IDENTITY(0.0, clamp(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), 0.0, _GLF_IDENTITY(0.0, min(0.0, 0.0)))), _GLF_IDENTITY(0.0, 0.0 + (_GLF_IDENTITY(0.0, min(0.0, 0.0)))), 0.0, 1.0, log(1.0), 0.0, 0.0, _GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])))).x)))), _GLF_struct_9(_GLF_struct_7(uvec3(1u), _GLF_IDENTITY(mat3(_GLF_IDENTITY(1.0, 1.0 * (_GLF_IDENTITY(1.0, clamp(1.0, _GLF_IDENTITY(1.0, max(1.0, _GLF_IDENTITY(1.0, 1.0 * (1.0)))), _GLF_IDENTITY(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, min(1.0, 1.0))) - 0.0), clamp(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, min(1.0, 1.0))) - 0.0), _GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, _GLF_IDENTITY(min(1.0, 1.0), 0.0 + (_GLF_IDENTITY(min(1.0, 1.0), mix(float(_GLF_FUZZED(600.969)), float(min(1.0, 1.0)), bool(true))))))) - 0.0), _GLF_IDENTITY(1.0, (_GLF_IDENTITY(_GLF_IDENTITY(1.0, min(1.0, 1.0)), 1.0 * (_GLF_IDENTITY(1.0, min(1.0, 1.0))))) - 0.0)))))))), (_GLF_IDENTITY(mat3(_GLF_IDENTITY(1.0, 1.0 * (_GLF_IDENTITY(1.0, clamp(1.0, _GLF_IDENTITY(1.0, max(1.0, _GLF_IDENTITY(1.0, 1.0 * (1.0)))), _GLF_IDENTITY(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, min(1.0, 1.0))) - 0.0), clamp(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, min(1.0, 1.0))) - 0.0), _GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, _GLF_IDENTITY(min(1.0, 1.0), 0.0 + (_GLF_IDENTITY(min(1.0, 1.0), mix(float(_GLF_FUZZED(600.969)), float(min(1.0, 1.0)), bool(true))))))) - 0.0), _GLF_IDENTITY(1.0, (_GLF_IDENTITY(_GLF_IDENTITY(1.0, min(1.0, 1.0)), 1.0 * (_GLF_IDENTITY(1.0, min(1.0, 1.0))))) - 0.0)))))))), (mat3(_GLF_IDENTITY(1.0, 1.0 * (_GLF_IDENTITY(1.0, clamp(1.0, _GLF_IDENTITY(1.0, max(1.0, _GLF_IDENTITY(1.0, 1.0 * (1.0)))), _GLF_IDENTITY(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, min(1.0, 1.0))) - 0.0), clamp(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, min(1.0, 1.0))) - 0.0), _GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, _GLF_IDENTITY(min(1.0, 1.0), 0.0 + (_GLF_IDENTITY(min(1.0, 1.0), mix(float(_GLF_FUZZED(600.969)), float(min(1.0, 1.0)), bool(true))))))) - 0.0), _GLF_IDENTITY(1.0, (_GLF_IDENTITY(_GLF_IDENTITY(1.0, min(1.0, 1.0)), 1.0 * (_GLF_IDENTITY(1.0, min(1.0, 1.0))))) - 0.0))))))))) / mat3(1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0))) + mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))), _GLF_struct_8(mat3x2(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, _GLF_IDENTITY(1.0, clamp(1.0, 1.0, _GLF_IDENTITY(1.0, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 1.0 : _GLF_FUZZED(-2.3)))))))), mat4x3(1.0), mat3(1.0), mat2x3(1.0), _GLF_IDENTITY(bvec2(true), _GLF_IDENTITY(bvec2(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(true), bvec2(bvec3(bvec2(true), false))), bvec2(bvec4(_GLF_IDENTITY(bvec2(true), bvec2(bvec3(bvec2(true), false))), true, false))), bvec2(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(true), bvec2(bvec3(bvec2(true), false))), bvec2(bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(true, true && (true))), bvec2(bvec3(_GLF_IDENTITY(bvec2(true), bvec2(bvec2(bvec2(true)))), false)))))), false), bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(true), bvec2(bvec3(bvec2(true), false))), bvec2(bvec2(_GLF_IDENTITY(bvec2(true), bvec2(bvec3(bvec2(true), false)))))), false), _GLF_IDENTITY(bvec3(bvec4(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(true), bvec2(bvec3(bvec2(true), false))), bvec2(bvec2(_GLF_IDENTITY(bvec2(true), _GLF_IDENTITY(bvec2(bvec3(bvec2(true), false)), bvec2(bvec3(bvec2(bvec3(bvec2(true), false)), true))))))), false), true)), bvec3(bvec3(bvec3(bvec4(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(true), bvec2(bvec3(bvec2(true), false))), bvec2(bvec2(_GLF_IDENTITY(bvec2(true), bvec2(bvec3(bvec2(true), false)))))), false), true)))))), true))))))), bvec2(bvec4(bvec2(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(true), bvec2(bvec3(bvec2(true), false))), _GLF_IDENTITY(bvec2(bvec3(_GLF_IDENTITY(bvec2(true), _GLF_IDENTITY(bvec2(bvec3(bvec2(true), false)), bvec2(bvec3(bvec2(bvec3(bvec2(true), false)), false)))), true)), bvec2(bvec3(_GLF_IDENTITY(bvec2(bvec3(_GLF_IDENTITY(bvec2(true), _GLF_IDENTITY(bvec2(bvec3(bvec2(true), false)), bvec2(bvec3(bvec2(bvec3(bvec2(true), false)), false)))), true)), bvec2(bvec2(bvec2(bvec3(_GLF_IDENTITY(bvec2(true), bvec2(bvec3(bvec2(_GLF_IDENTITY(true, _GLF_IDENTITY((_GLF_IDENTITY(true, (true) || false)), true && ((_GLF_IDENTITY(true, (true) || false)))) || false)), false))), _GLF_IDENTITY(_GLF_IDENTITY(true, true && (true)), false || (true))))))), true)))))), false, true))))), mat2x3(1.0), mat2x3(1.0)), uvec4(_GLF_IDENTITY(1u, (1u) ^ 0u)));
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, true && (false)))))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec3(! (false), true, true))))), (injectionSwitch.x > injectionSwitch.y))))
    return;
   barrier();
  }
 uint next_virtual_gid = _GLF_struct_replacement_38.workgroup_base + subgroup_base + ((_GLF_struct_replacement_13._f1.subgroup_local_id + 1) % subgroup_size);
 if(_GLF_DEAD(false))
  return;
 atomicStore(buf[_GLF_struct_replacement_10.virtual_gid], uint(1), _GLF_IDENTITY(_GLF_IDENTITY(4, (4) << 0), clamp(4, 4, _GLF_IDENTITY(4, min(4, 4)))), 64, 4);
 if(_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(_GLF_DEAD(false), true, true), bvec3(bvec4(bvec3(_GLF_DEAD(false), true, true), false))), _GLF_IDENTITY(bvec3(bvec3(bvec3(_GLF_DEAD(false), true, true))), bvec3(bvec3(bvec3(bvec3(bvec3(_GLF_DEAD(false), true, true))))))), bvec3(bvec4(bvec3(_GLF_DEAD(false), true, true), false))))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(true, bool(bvec4(true, true, true, false))) ? _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)) : _GLF_FUZZED(atan(-7.3, 9.7))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false)), ! (! (! (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))), ((injectionSwitch.x > injectionSwitch.y)) || false))))))))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false)), _GLF_IDENTITY(! (! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false)))), ! (! (! (! _GLF_IDENTITY((! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(injectionSwitch.x > injectionSwitch.y, true, false, false)))) || false))) || false))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && ((! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(injectionSwitch.x > injectionSwitch.y, true, false, false)))) || false))) || false)))))))))))))), (_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || _GLF_IDENTITY(false, false || (false)))), ! (! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((_GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x)) > injectionSwitch.y)) || false)))))))))) || false)) || false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : _GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)))))))).x > _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(9.0)), bool(false)))))))
      return;
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
    barrier();
   if(_GLF_DEAD(false))
    return;
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec4(! (false), true, false, true)))))))
    {
     if(_GLF_DEAD(false))
      return;
     return;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), true && (bool(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))))
    barrier();
   return;
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     barrier();
    }
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 atomicStore(buf[next_virtual_gid], uint(2), 4, 64, 4);
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
  {
   if(_GLF_DEAD(false))
    return;
   barrier();
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
