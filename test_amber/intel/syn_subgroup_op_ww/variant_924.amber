#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(30.85)), float(injectionSwitch.y), bool(true))), injectionSwitch.y, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)))), float(_GLF_IDENTITY(mat4(injectionSwitch.y, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0), (true ? _GLF_IDENTITY(mat4(injectionSwitch.y, _GLF_IDENTITY(_GLF_IDENTITY(0.0, clamp(_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(4.5)), float(_GLF_IDENTITY(0.0, (0.0) - 0.0)), bool(true))), 0.0, _GLF_IDENTITY(0.0, 0.0 + (0.0)))), (_GLF_IDENTITY(0.0, clamp(0.0, 0.0, _GLF_IDENTITY(0.0, 0.0 + (0.0))))) / 1.0), 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, _GLF_IDENTITY(1.0, (1.0) - 0.0), 0.0, 0.0, 0.0, 1.0, 0.0, 0.0), (mat4(injectionSwitch.y, _GLF_IDENTITY(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, _GLF_IDENTITY(0.0, 0.0 + (0.0)))), (_GLF_IDENTITY(0.0, clamp(0.0, 0.0, _GLF_IDENTITY(0.0, 0.0 + (0.0))))) / 1.0), 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, _GLF_IDENTITY(1.0, (1.0) - 0.0), 0.0, 0.0, _GLF_IDENTITY(0.0, min(0.0, 0.0)), 1.0, 0.0, 0.0)) * mat4(1.0)) : _GLF_FUZZED(mat4(_GLF_IDENTITY(-9.4, (_GLF_IDENTITY(-9.4, (-9.4) * 1.0)) * _GLF_ONE(1.0, injectionSwitch.y)), 87.70, _GLF_IDENTITY(-11.51, (_GLF_IDENTITY(-11.51, (-11.51) - 0.0)) / 1.0), 777.917, -9.3, -1.6, 8982.8036, 42.80, 7.1, -6.6, -978.719, 841.704, -3379.4382, 1463.9392, 1863.9950, -0.6)))))))))) && true))))))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       barrier();
       do
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
      }
    }
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_IDENTITY(_GLF_FUZZED(-4740.9634), mix(float(_GLF_FUZZED(_GLF_IDENTITY((0.1 / -75.77), max(_GLF_IDENTITY((0.1 / -75.77), float(vec3((0.1 / -75.77), 0.0, 0.0))), _GLF_IDENTITY((0.1 / -75.77), max((0.1 / -75.77), (0.1 / -75.77))))))), float(_GLF_IDENTITY(_GLF_FUZZED(-4740.9634), float(mat4x3(_GLF_FUZZED(-4740.9634), 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0)))), bool(true)))), bool(false))), _GLF_IDENTITY(injectionSwitch.x, float(mat2x4(injectionSwitch.x, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0))), injectionSwitch.x)), float(mat4x2(injectionSwitch.x, _GLF_IDENTITY(0.0, float(mat4(_GLF_IDENTITY(0.0, clamp(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-583.962)), bool(false))), 0.0, 0.0)), 0.0, 1.0, 0.0, determinant(mat2(1.0, 0.0, 0.0, _GLF_IDENTITY(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, clamp(1.0, _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(26.50)), float(1.0), bool(true))), 1.0))) / 1.0), mix(float(_GLF_FUZZED(-9.5)), float(1.0), bool(true))))), 0.0, _GLF_IDENTITY(sqrt(determinant(_GLF_IDENTITY(mat3(1.0, _GLF_IDENTITY(1.0, min(1.0, 1.0)), 0.0, 0.0, 1.0, _GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(95.03))), 0.0, 0.0, 1.0), (_GLF_IDENTITY(mat3(1.0, _GLF_IDENTITY(1.0, _GLF_IDENTITY(min(1.0, 1.0), min(min(1.0, 1.0), min(1.0, 1.0)))), 0.0, 0.0, 1.0, _GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(95.03))), 0.0, 0.0, _GLF_IDENTITY(1.0, mix(float(_GLF_IDENTITY(_GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, 1.0 * (1.0)), 1.0, 1.0)), mix(float(_GLF_FUZZED(0.6)), float(1.0), bool(true)))), float(_GLF_FUZZED(_GLF_IDENTITY(-14.58, min(_GLF_IDENTITY(-14.58, 0.0 + (-14.58)), -14.58)))), bool(false)))), (mat3(1.0, _GLF_IDENTITY(1.0, min(1.0, 1.0)), 0.0, 0.0, 1.0, _GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(95.03))), 0.0, 0.0, 1.0)) / mat3(1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0))) / mat3(1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0)))), (sqrt(determinant(mat3(1.0, 1.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(0.0, (_GLF_IDENTITY(true ? 0.0 : _GLF_FUZZED(95.03), min(true ? 0.0 : _GLF_FUZZED(95.03), _GLF_IDENTITY(true ? 0.0 : _GLF_FUZZED(95.03), float(vec2(true ? 0.0 : _GLF_FUZZED(95.03), _GLF_IDENTITY(1.0, float(_GLF_IDENTITY(mat4(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-227.700)), float(1.0), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), 0.0, 1.0, 0.0, sqrt(sqrt(1.0)), 0.0, _GLF_IDENTITY(abs(1.0), (abs(1.0)) * 1.0), length(vec2(0.0, 0.0)), 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0), transpose(transpose(mat4(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-227.700)), float(1.0), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), 0.0, 1.0, 0.0, sqrt(sqrt(1.0)), 0.0, _GLF_IDENTITY(abs(1.0), (abs(1.0)) * 1.0), length(vec2(0.0, 0.0)), 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0))))))))))))), 0.0, 0.0, 1.0)))) * 1.0), 0.0, sin(0.0), 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0))), round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), 0.0, 1.0, 1.0, 0.0, 0.0))) > injectionSwitch.y))))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), ! (! (_GLF_IDENTITY((false), bool(bvec3((false), true, _GLF_TRUE(_GLF_IDENTITY(true, bool(bvec4(true, false, false, true))), (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0) < injectionSwitch.y))))))))))))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         do
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             barrier();
             if(_GLF_DEAD(false))
              barrier();
            }
           else
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
          barrier();
        }
      }
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       barrier();
      }
     else
      {
      }
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (false))))))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    barrier();
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(false))
  barrier();
 do
  {
   do
    {
     do
      {
       for(int _injected_loop_counter = (_GLF_IDENTITY(0 | 0, (false ? _GLF_FUZZED(-71988) : 0 | 0))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != ((_GLF_IDENTITY(1, max(_GLF_IDENTITY(1, (false ? _GLF_FUZZED(_injected_loop_counter) : 1)), 1)) << _GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_IDENTITY(0, (0) << (0 << _GLF_IDENTITY(int(0), int(0)))), max(_GLF_IDENTITY(_GLF_IDENTITY(0, (0) << (0 << _GLF_IDENTITY(int(0), int(0)))), (_GLF_IDENTITY(0, (0) << (0 << _GLF_IDENTITY(int(0), int(0))))) + 0), _GLF_IDENTITY(_GLF_IDENTITY(0, (0) << (0 << _GLF_IDENTITY(int(0), int(0)))), (_GLF_IDENTITY(0, (0) << (0 << _GLF_IDENTITY(int(0), int(0))))) << 0)))), int(0))) >> _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (_GLF_IDENTITY(int(0), (int(0)) / 1)) << 0))), false || (_injected_loop_counter != ((_GLF_IDENTITY(1, max(_GLF_IDENTITY(1, (false ? _GLF_FUZZED(_injected_loop_counter) : 1)), 1)) << _GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_IDENTITY(0, (0) << (0 << _GLF_IDENTITY(int(0), int(0)))), max(_GLF_IDENTITY(_GLF_IDENTITY(0, (0) << (0 << _GLF_IDENTITY(int(0), int(0)))), (_GLF_IDENTITY(0, (0) << (0 << _GLF_IDENTITY(int(0), int(0))))) + 0), _GLF_IDENTITY(_GLF_IDENTITY(0, (0) << (0 << _GLF_IDENTITY(int(0), int(0)))), (_GLF_IDENTITY(0, (0) << (0 << _GLF_IDENTITY(int(0), int(0))))) << 0)))), int(0))) >> _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (_GLF_IDENTITY(int(0), (int(0)) / 1)) << 0)))))); _GLF_IDENTITY(_injected_loop_counter ++, (_GLF_IDENTITY(false ? _GLF_FUZZED(62078) : _injected_loop_counter ++, _GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)) * (_GLF_IDENTITY(false ? _GLF_FUZZED(62078) : _injected_loop_counter ++, ~ (~ (false ? _GLF_FUZZED(62078) : _injected_loop_counter ++)))), (_GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), 0 | (int(_GLF_ONE(1.0, injectionSwitch.y)))) * (_GLF_IDENTITY(false ? _GLF_FUZZED(62078) : _injected_loop_counter ++, ~ (~ (false ? _GLF_FUZZED(62078) : _injected_loop_counter ++))))) - (0 ^ 0))))))
        {
         do
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(true, (true) && true), ! _GLF_IDENTITY((! (true)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || ((! (true)))))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           else
            {
            }
          }
         else
          {
          }
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bvec3(false, true, false)))));
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))));
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bool(false)))));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
      barrier();
    }
   else
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
   do
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).y))), bool(bvec2(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bool(bvec4(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false, true, false))), false))))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       else
        {
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
     do
      {
       do
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             barrier();
            }
           if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true && (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(bvec3(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true && (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), false, true)))))))
            {
             barrier();
            }
           else
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   do
                    {
                     barrier();
                     if(_GLF_DEAD(false))
                      barrier();
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 else
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   barrier();
                  }
                }
              }
             if(_GLF_DEAD(false))
              {
               do
                {
                 barrier();
                }
               while(_GLF_WRAPPED_LOOP(false));
               if(_GLF_DEAD(false))
                barrier();
              }
            }
           if(_GLF_DEAD(false))
            barrier();
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, false || (false))));
       if(_GLF_DEAD(false))
        barrier();
       do
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, false || (false)))))))
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           else
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
             do
              {
               barrier();
              }
             while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec2(bvec3(bvec2(false, _GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch))) - vec2(0.0, 0.0)))).y), ! (_GLF_IDENTITY(! ((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch))) - vec2(0.0, 0.0)))).y)), ! (! (! ((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch))) - vec2(0.0, 0.0)))).y))))))))), false)))), ! (_GLF_IDENTITY(! (bool(_GLF_IDENTITY(bvec2(false, _GLF_TRUE(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), ! (! (! (true)))))), (injectionSwitch.x < injectionSwitch.y))), bvec2(bvec3(bvec2(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false))))), true && (! (bool(_GLF_IDENTITY(bvec2(false, _GLF_TRUE(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), ! (! (! _GLF_IDENTITY((true), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY((true), bool(bool((true))))), false || (bool(_GLF_IDENTITY((true), bool(bool((true)))))))))))))), (injectionSwitch.x < injectionSwitch.y))), bvec2(bvec3(bvec2(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false))))))))))));
             if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, _GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (injectionSwitch.x > injectionSwitch.y)) || (false)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))), (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + 0.0)) - 0.0) > injectionSwitch.y))));
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, false || (false))));
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
  }
 uint num_workgroup = gl_NumWorkGroups.x;
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(2009)))); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    barrier();
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(9.1), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(6.4)), bvec2(_GLF_IDENTITY(_GLF_IDENTITY(true, ! (! (true))), ! _GLF_IDENTITY((! (true)), ((! (true))) || false)), false))) : _GLF_IDENTITY(_GLF_FUZZED(degrees(vec2(5096.2339, -4178.3489))), max(_GLF_FUZZED(degrees(vec2(5096.2339, -4178.3489))), _GLF_FUZZED(degrees(vec2(5096.2339, -4178.3489))))))).y))))
    {
     do
      {
       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bool(false)))), ! _GLF_IDENTITY((! (_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bool(false)))))), true && ((! (_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bool(false))))))))))
        {
         if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), (_GLF_WRAPPED_IF_TRUE(true)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 >> _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (int(0)) | (int(0)))))); _injected_loop_counter --)
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
              barrier();
            }
          }
         else
          {
          }
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 else
  {
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     do
      {
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY((0 >> _GLF_IDENTITY(int(8), int(8))), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? (0 >> _GLF_IDENTITY(int(8), int(8))) : _GLF_FUZZED(-22486)))); _injected_loop_counter --)
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(_GLF_IDENTITY(0, ~ (~ (0))), (false ? _GLF_IDENTITY(_GLF_FUZZED(-63709), clamp(_GLF_FUZZED(-63709), _GLF_FUZZED(-63709), _GLF_FUZZED(-63709))) : 0))); _injected_loop_counter --)
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
            {
             barrier();
             if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), true && (! (_GLF_DEAD(false)))))))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
            }
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       do
        {
         do
          {
           barrier();
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(false))
              {
               do
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 barrier();
                }
               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
              }
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false || (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), false, false, _GLF_IDENTITY(true, ! (! (true))))), _GLF_IDENTITY((bool(bvec4(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false || (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), false, false, true))) && true, bool(bvec4(_GLF_IDENTITY((bool(bvec4(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false || (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), false, false, true))) && true, ((bool(bvec4(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false || (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), false, false, true))) && true) && true), true, false, true))))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           do
            {
             barrier();
             if(_GLF_DEAD(false))
              barrier();
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, false, true)))))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
        barrier();
       do
        {
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = ((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(_GLF_IDENTITY(bvec3(injectionSwitch.x > injectionSwitch.y, true, true), bvec3(bvec3(bvec3(injectionSwitch.x > injectionSwitch.y, true, true))))))) || false)))))
              {
              }
             else
              {
               barrier();
              }
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     else
      {
      }
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 uint workgroup_size = _GLF_IDENTITY(gl_WorkGroupSize.x, _GLF_IDENTITY((gl_WorkGroupSize.x) | (gl_WorkGroupSize.x), _GLF_IDENTITY(((gl_WorkGroupSize.x) | (gl_WorkGroupSize.x)), max(((gl_WorkGroupSize.x) | (gl_WorkGroupSize.x)), ((gl_WorkGroupSize.x) | (gl_WorkGroupSize.x)))) | ((gl_WorkGroupSize.x) | (_GLF_IDENTITY(gl_WorkGroupSize.x, ~ (~ (gl_WorkGroupSize.x)))))));
 for(int _injected_loop_counter = (1 ^ (_GLF_IDENTITY(0, (0) ^ 0) << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (int(0)) | (int(0)))))); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), true && (_GLF_WRAPPED_LOOP(_injected_loop_counter > 0))); _injected_loop_counter --)
  {
   for(int _injected_loop_counter = (0 ^ _GLF_IDENTITY(1, (1) ^ 0)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     for(int _injected_loop_counter = _GLF_IDENTITY(0, (_GLF_IDENTITY(0, 0 + (0))) - 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     do
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 do
  {
   if(_GLF_DEAD(false))
    barrier();
   do
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(5), int(5))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(false, _GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, ! (! (true))))) && (false)), true, false, false)), ! (! (bool(bvec4(_GLF_IDENTITY(false, true && (false)), true, false, false))))))))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               barrier();
               if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
                barrier();
              }
             else
              {
               if(_GLF_DEAD(false))
                barrier();
              }
            }
           barrier();
          }
        }
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
     do
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         else
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(true, (true) || false), bool(bvec4(_GLF_IDENTITY(true, (true) || false), _GLF_IDENTITY(true, ! (! (true))), false, false)))))
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), _GLF_IDENTITY((! (false)) && true, false || ((! (false)) && true)))))))
              {
              }
             else
              {
               for(int _injected_loop_counter = _GLF_IDENTITY((_GLF_IDENTITY(0, (0) ^ 0) & 68526), clamp(_GLF_IDENTITY((_GLF_IDENTITY(0, (0) ^ 0) & 68526), ((_GLF_IDENTITY(0, (0) ^ 0) & 68526)) / 1), (_GLF_IDENTITY(0, (0) ^ 0) & 68526), _GLF_IDENTITY((_GLF_IDENTITY(0, (0) ^ 0) & 68526), ((_GLF_IDENTITY(0, (0) ^ 0) & 68526)) | ((_GLF_IDENTITY(0, (0) ^ 0) & 68526))))); _GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(faceforward(306.685, 8.7, -8.4)) : injectionSwitch.y)))) && (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), bool(bvec4(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), true && (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != 1, true && (_injected_loop_counter != 1))))), false, true, true))))), bool(_GLF_IDENTITY(bvec2(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), true), bvec2(bvec4(bvec2(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), true), false, false))))); _injected_loop_counter ++)
                {
                 for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 do
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch), min(_GLF_IDENTITY((injectionSwitch), min(_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch), min((injectionSwitch), (injectionSwitch))), mix(vec2(((injectionSwitch))[0], ((injectionSwitch))[1]), vec2(_GLF_FUZZED(-48.58), _GLF_FUZZED(5242.6657)), bvec2(false, false))), (injectionSwitch))), (injectionSwitch))), min(_GLF_IDENTITY((injectionSwitch), min(_GLF_IDENTITY((injectionSwitch), min(_GLF_IDENTITY((injectionSwitch), mix(vec2((_GLF_IDENTITY((injectionSwitch), clamp((injectionSwitch), (injectionSwitch), (injectionSwitch))))[0], (_GLF_IDENTITY((injectionSwitch), _GLF_IDENTITY(vec2(mat2x4(_GLF_IDENTITY((injectionSwitch), (_GLF_IDENTITY((injectionSwitch), mix(vec2(((injectionSwitch))[0], ((injectionSwitch))[1]), vec2(_GLF_FUZZED(-74.71), _GLF_FUZZED(9945.1284)), bvec2(false, false)))) / vec2(1.0, 1.0)), 1.0, 1.0, 0.0, 0.0, 1.0, 1.0)), max(vec2(mat2x4(_GLF_IDENTITY((injectionSwitch), (_GLF_IDENTITY((injectionSwitch), mix(vec2(((injectionSwitch))[0], ((injectionSwitch))[1]), vec2(_GLF_FUZZED(-74.71), _GLF_FUZZED(9945.1284)), bvec2(false, false)))) / vec2(1.0, 1.0)), 1.0, 1.0, 0.0, 0.0, 1.0, 1.0)), vec2(mat2x4(_GLF_IDENTITY((injectionSwitch), (_GLF_IDENTITY((injectionSwitch), mix(vec2(((injectionSwitch))[0], ((injectionSwitch))[1]), vec2(_GLF_FUZZED(-74.71), _GLF_FUZZED(9945.1284)), bvec2(false, false)))) / vec2(1.0, 1.0)), 1.0, 1.0, 0.0, 0.0, 1.0, 1.0))))))[1]), vec2(_GLF_FUZZED(-48.58), _GLF_FUZZED(_GLF_IDENTITY(5242.6657, float(vec4(_GLF_IDENTITY(5242.6657, min(5242.6657, 5242.6657)), abs(abs(1.0)), 1.0, 0.0))))), _GLF_IDENTITY(bvec2(false, false), _GLF_IDENTITY(bvec2(bvec4(bvec2(false, false), false, false)), bvec2(bvec3(bvec2(bvec4(bvec2(false, false), false, false)), true)))))), (injectionSwitch))), (injectionSwitch))), _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch), min(_GLF_IDENTITY((injectionSwitch), min(_GLF_IDENTITY((injectionSwitch), mix(vec2(((injectionSwitch))[0], ((injectionSwitch))[1]), vec2(_GLF_FUZZED(-48.58), _GLF_FUZZED(5242.6657)), bvec2(false, false))), (injectionSwitch))), (injectionSwitch))), (_GLF_IDENTITY((injectionSwitch), min(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * exp(vec2(0.0, 0.0)))), min(_GLF_IDENTITY((injectionSwitch), mix(vec2(((injectionSwitch))[0], ((injectionSwitch))[1]), vec2(_GLF_FUZZED(-48.58), _GLF_FUZZED(5242.6657)), bvec2(false, false))), (injectionSwitch))), (injectionSwitch)))) + abs(vec2(0.0, 0.0))))) * vec2(1.0, 1.0)).x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(6.9), _GLF_FUZZED(0.6)), vec2((injectionSwitch)[_GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, int(int(0)))))], (injectionSwitch)[1]), bvec2(_GLF_IDENTITY(true, ! (! (true))), true))).y))))
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      {
                       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        {
                        }
                       else
                        {
                         if(_GLF_DEAD(false))
                          barrier();
                        }
                       barrier();
                      }
                     barrier();
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
              }
             if(_GLF_DEAD(false))
              barrier();
            }
           else
            {
            }
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (true)))))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
           if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, (false) || false)))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).x > injectionSwitch.y))))
              barrier();
             barrier();
            }
          }
         else
          {
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) && _GLF_IDENTITY(_GLF_IDENTITY(true, false || (true)), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(true, false || (true)), _GLF_IDENTITY(true, bool(bool(true)))), bvec2(bvec4(bvec2(_GLF_IDENTITY(true, false || (true)), _GLF_IDENTITY(true, bool(bool(true)))), false, true))))))))) && true)));
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   do
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 >> _GLF_IDENTITY(int(5), int(5)))); _injected_loop_counter --)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))))))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
         barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
      }
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) || false)))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch))) / vec2(1.0, 1.0)).y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y))))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint workgroup_id = gl_WorkGroupID.x;
 do
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
    }
  }
 while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), bool(bvec4(_GLF_WRAPPED_LOOP(false), true, true, true))));
 uint workgroup_base = workgroup_size * workgroup_id;
 uint subgroup_base = _GLF_IDENTITY(subgroup_id * subgroup_size, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id * subgroup_size, clamp(subgroup_id * subgroup_size, subgroup_id * subgroup_size, subgroup_id * subgroup_size)), uint(uvec4(subgroup_id * subgroup_size, ((_GLF_IDENTITY(_GLF_IDENTITY(1u, max(1u, 1u)), ~ (_GLF_IDENTITY(~ (1u), (true ? ~ (1u) : _GLF_FUZZED(workgroup_base))))) << _GLF_IDENTITY(uint(2u), uint(2u))) >> _GLF_IDENTITY(uint(2u), _GLF_IDENTITY(uint(2u), (uint(2u)) | uint(_GLF_ZERO(0.0, injectionSwitch.x))))), 1u, 0u))), min(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id * subgroup_size, clamp(subgroup_id * subgroup_size, subgroup_id * subgroup_size, subgroup_id * subgroup_size)), uint(uvec4(subgroup_id * subgroup_size, ((_GLF_IDENTITY(_GLF_IDENTITY(1u, max(1u, 1u)), ~ (_GLF_IDENTITY(~ (1u), (true ? ~ (1u) : _GLF_FUZZED(workgroup_base))))) << _GLF_IDENTITY(uint(2u), uint(2u))) >> _GLF_IDENTITY(uint(2u), uint(2u))), 1u, 0u))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id * subgroup_size, clamp(subgroup_id * subgroup_size, subgroup_id * subgroup_size, subgroup_id * subgroup_size)), _GLF_IDENTITY(uint(uvec4(_GLF_IDENTITY(subgroup_id * subgroup_size, max(subgroup_id * subgroup_size, subgroup_id * subgroup_size)), ((_GLF_IDENTITY(_GLF_IDENTITY(1u, max(1u, 1u)), ~ (_GLF_IDENTITY(~ (1u), (true ? ~ (1u) : _GLF_FUZZED(workgroup_base))))) << _GLF_IDENTITY(uint(2u), uint(2u))) >> _GLF_IDENTITY(uint(2u), uint(2u))), 1u, 0u)), _GLF_IDENTITY(uint(_GLF_IDENTITY(uint(uint(uvec4(_GLF_IDENTITY(subgroup_id * subgroup_size, max(subgroup_id * subgroup_size, subgroup_id * subgroup_size)), ((_GLF_IDENTITY(_GLF_IDENTITY(1u, max(1u, 1u)), ~ (_GLF_IDENTITY(~ (1u), (true ? ~ (1u) : _GLF_FUZZED(workgroup_base))))) << _GLF_IDENTITY(uint(2u), uint(2u))) >> _GLF_IDENTITY(uint(2u), uint(2u))), 1u, 0u))), (uint(uint(uvec4(_GLF_IDENTITY(subgroup_id * subgroup_size, max(subgroup_id * subgroup_size, subgroup_id * subgroup_size)), ((_GLF_IDENTITY(_GLF_IDENTITY(1u, max(1u, 1u)), ~ (_GLF_IDENTITY(~ (1u), (true ? ~ (1u) : _GLF_FUZZED(workgroup_base))))) << _GLF_IDENTITY(uint(2u), uint(2u))) >> _GLF_IDENTITY(uint(2u), uint(2u))), 1u, 0u)))) ^ 0u)), uint(uvec2(uint(_GLF_IDENTITY(uint(uint(uvec4(_GLF_IDENTITY(subgroup_id * subgroup_size, max(subgroup_id * subgroup_size, subgroup_id * subgroup_size)), ((_GLF_IDENTITY(_GLF_IDENTITY(1u, max(1u, 1u)), ~ (_GLF_IDENTITY(~ (1u), (true ? ~ (1u) : _GLF_FUZZED(workgroup_base))))) << _GLF_IDENTITY(uint(2u), uint(2u))) >> _GLF_IDENTITY(uint(2u), uint(2u))), 1u, 0u))), (uint(uint(uvec4(_GLF_IDENTITY(subgroup_id * subgroup_size, max(subgroup_id * subgroup_size, subgroup_id * subgroup_size)), ((_GLF_IDENTITY(_GLF_IDENTITY(1u, max(1u, 1u)), ~ (_GLF_IDENTITY(~ (1u), (true ? ~ (1u) : _GLF_FUZZED(workgroup_base))))) << _GLF_IDENTITY(uint(2u), uint(2u))) >> _GLF_IDENTITY(uint(2u), uint(2u))), 1u, 0u)))) ^ 0u)), uint(_GLF_ZERO(0.0, injectionSwitch.x))))))), _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id * subgroup_size, clamp(subgroup_id * subgroup_size, subgroup_id * subgroup_size, _GLF_IDENTITY(subgroup_id * subgroup_size, (0u ^ 0u) ^ (subgroup_id * subgroup_size)))), uint(uvec4(subgroup_id * subgroup_size, ((_GLF_IDENTITY(_GLF_IDENTITY(1u, max(1u, 1u)), ~ (_GLF_IDENTITY(~ (1u), (true ? ~ (1u) : _GLF_FUZZED(workgroup_base))))) << _GLF_IDENTITY(uint(2u), uint(2u))) >> _GLF_IDENTITY(uint(2u), uint(2u))), 1u, 0u))), _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id * subgroup_size, clamp(subgroup_id * subgroup_size, subgroup_id * subgroup_size, subgroup_id * subgroup_size)), uint(uvec4(subgroup_id * subgroup_size, ((_GLF_IDENTITY(_GLF_IDENTITY(1u, max(1u, 1u)), ~ (_GLF_IDENTITY(~ (1u), (true ? ~ (1u) : _GLF_FUZZED(workgroup_base))))) << _GLF_IDENTITY(uint(2u), uint(2u))) >> _GLF_IDENTITY(uint(2u), _GLF_IDENTITY(uint(2u), 0u ^ (_GLF_IDENTITY(uint(2u), (uint(2u)) | (_GLF_IDENTITY(uint(2u), ~ (~ (uint(2u)))))))))), 1u, 0u))))), _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id * subgroup_size, clamp(subgroup_id * subgroup_size, subgroup_id * subgroup_size, _GLF_IDENTITY(subgroup_id, (subgroup_id) / 1u) * subgroup_size)), uint(uvec4(subgroup_id * subgroup_size, ((_GLF_IDENTITY(_GLF_IDENTITY(1u, max(1u, 1u)), ~ (_GLF_IDENTITY(~ (1u), (true ? ~ (1u) : _GLF_FUZZED(workgroup_base))))) << _GLF_IDENTITY(uint(2u), uint(2u))) >> _GLF_IDENTITY(uint(2u), uint(2u))), 1u, 0u)))))) | (_GLF_IDENTITY(subgroup_id, (true ? subgroup_id : _GLF_FUZZED(atomicOr(subgroup_local_id, subgroup_id)))) * subgroup_size));
 uint virtual_gid = _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_base, max(subgroup_base, subgroup_base)) + _GLF_IDENTITY(subgroup_local_id, (true ? subgroup_local_id : _GLF_FUZZED(170596u))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + subgroup_base, (_GLF_IDENTITY(workgroup_base + subgroup_base, 0u ^ (workgroup_base + subgroup_base))) - 0u) + subgroup_local_id, (_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (! (false))))) ? _GLF_IDENTITY(_GLF_FUZZED(68320u), clamp(_GLF_FUZZED(68320u), _GLF_IDENTITY(_GLF_FUZZED(68320u), min(_GLF_FUZZED(68320u), _GLF_FUZZED(68320u))), _GLF_IDENTITY(_GLF_FUZZED(68320u), 0u ^ (_GLF_FUZZED(68320u))))) : workgroup_base + subgroup_base + subgroup_local_id))), (~ (_GLF_IDENTITY(workgroup_base + subgroup_base + subgroup_local_id, (false ? _GLF_FUZZED(_GLF_IDENTITY(68320u, (68320u) | (68320u))) : workgroup_base + _GLF_IDENTITY(subgroup_base, (_GLF_IDENTITY(subgroup_base, _GLF_IDENTITY((_GLF_IDENTITY(subgroup_base, max(subgroup_base, subgroup_base))), (0u >> _GLF_IDENTITY(uint(5u), uint(5u))) ^ (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_base, max(subgroup_base, subgroup_base))), ((_GLF_IDENTITY(subgroup_base, max(subgroup_base, subgroup_base)))) | ((_GLF_IDENTITY(subgroup_base, max(subgroup_base, subgroup_base))))))) * 1u)) - uint(_GLF_ZERO(0.0, injectionSwitch.x))) + subgroup_local_id)))) | (~ (_GLF_IDENTITY(workgroup_base + subgroup_base + subgroup_local_id, (false ? _GLF_FUZZED(68320u) : _GLF_IDENTITY(workgroup_base, _GLF_IDENTITY(1u, min(1u, 1u)) * (workgroup_base)) + subgroup_base + subgroup_local_id))))))), (_GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_base, max(subgroup_base, subgroup_base)) + subgroup_local_id, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(workgroup_base + subgroup_base + subgroup_local_id, (_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (! (false))))) ? _GLF_FUZZED(68320u) : workgroup_base + subgroup_base + subgroup_local_id))), (~ (_GLF_IDENTITY(workgroup_base + subgroup_base + subgroup_local_id, (false ? _GLF_FUZZED(_GLF_IDENTITY(68320u, _GLF_IDENTITY((68320u) | (68320u), ~ (~ ((68320u) | (68320u)))))) : workgroup_base + _GLF_IDENTITY(_GLF_IDENTITY(subgroup_base, (subgroup_base) | (subgroup_base)), (_GLF_IDENTITY(subgroup_base, (_GLF_IDENTITY(subgroup_base, max(subgroup_base, subgroup_base))) * 1u)) - uint(_GLF_ZERO(0.0, injectionSwitch.x))) + subgroup_local_id)))) | (~ (_GLF_IDENTITY(workgroup_base + subgroup_base + subgroup_local_id, (false ? _GLF_FUZZED(68320u) : workgroup_base + subgroup_base + subgroup_local_id)))))))) >> 0u);
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y))))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y))))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, ! (! (false)))), (_GLF_IDENTITY(! (_GLF_IDENTITY(false, ! (! (false)))), false || (! (_GLF_IDENTITY(false, ! (! (false))))))) || false)))), bool(bvec2((_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, ! (! (false)))), (_GLF_IDENTITY(! (_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (false)), ! (! ((! (false))))))), false || (! (_GLF_IDENTITY(false, ! (! (false))))))) || false)))), true))))), ! (! (_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, ! (! (false)))), (_GLF_IDENTITY(! (_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), ! (! (! (! (false))))))), false || (! (_GLF_IDENTITY(false, ! (! (false))))))) || false)))), bool(bvec2((_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, ! (! (false)))), (_GLF_IDENTITY(! (_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (false)), ! (! ((! (false))))))), false || (! (_GLF_IDENTITY(false, ! (! (false))))))) || false)))), true)))))))), (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x < injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > (1 ^ 1)); _injected_loop_counter --)
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), ! (! (false)))))
            barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     else
      {
      }
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((false) && true, ! (_GLF_IDENTITY(! ((false) && true), ! (! (! ((false) && true)))))))))
    barrier();
   do
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
      barrier();
     do
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y))))))), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y)))))))))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y))))))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y))))))), true && (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y))))))))))))) || false)))
        barrier();
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
          {
           barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, (false) && true), false, false, false)))))
          {
           for(int _injected_loop_counter = _GLF_IDENTITY(1, int(ivec4(1, 0, 0, 0))); _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
            {
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 >> _GLF_IDENTITY(int(4), int(4)))); _injected_loop_counter --)
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                  }
                 else
                  {
                   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true && (false))))
                    barrier();
                  }
                }
               else
                {
                 barrier();
                }
              }
            }
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
          barrier();
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))));
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   for(int _injected_loop_counter = (1 & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(_GLF_IDENTITY(0, _GLF_IDENTITY(int(int(0)), (_GLF_IDENTITY(int(int(0)), (_GLF_IDENTITY(int(int(0)), max(int(int(0)), int(int(0))))) >> 0)) | (int(int(0))))), min(0, 0))); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 else
  {
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   do
    {
     for(int _injected_loop_counter = 1; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0), bool(_GLF_IDENTITY(bool(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0)), bool(bool(bool(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0))))))); _injected_loop_counter --)
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             barrier();
            }
           else
            {
            }
          }
        }
       else
        {
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 for(int _injected_loop_counter = (_GLF_IDENTITY(0, (true ? _GLF_IDENTITY(0, (0) / 1) : _GLF_FUZZED(14685))) << _GLF_IDENTITY(int(2), int(2))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 & 1)); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), ! (! (false))), (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, false || (false))))), _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), ! (! (_GLF_IDENTITY(false, ! (! (false))))))), bool(bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), ! (! (_GLF_IDENTITY(false, ! (! (false))))))), false))))) && _GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(true, (true) || false), true, true), bvec3(bvec4(bvec3(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, (true) && true)) || false), true, true), false)))))), ! _GLF_IDENTITY((! (_GLF_IDENTITY(false, ! (! (false))))), true && (_GLF_IDENTITY((! (_GLF_IDENTITY(false, ! (! (false))))), bool(bvec3((! (_GLF_IDENTITY(false, ! (! (false))))), true, false))))))))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
      }
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     for(int _injected_loop_counter = (_GLF_IDENTITY(0, max(0, 0)) ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _GLF_IDENTITY(_injected_loop_counter ++, (_GLF_IDENTITY(_injected_loop_counter ++, 0 ^ (_GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) / 1)))) << 0))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 | 1)); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             barrier();
            }
          }
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
    }
   if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false || (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))
      {
       barrier();
      }
     else
      {
      }
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 uint next_virtual_gid = workgroup_base + _GLF_IDENTITY(subgroup_base, (subgroup_base) | (subgroup_base)) + _GLF_IDENTITY(((subgroup_local_id + _GLF_IDENTITY(1, (1) | 0)) % subgroup_size), ~ (_GLF_IDENTITY(~ (((subgroup_local_id + _GLF_IDENTITY(_GLF_IDENTITY(1, (1) - 0), (1) | 0)) % _GLF_IDENTITY(subgroup_size, (true ? _GLF_IDENTITY(subgroup_size, (true ? subgroup_size : _GLF_FUZZED(num_workgroup))) : _GLF_FUZZED(workgroup_id))))), clamp(~ (((subgroup_local_id + _GLF_IDENTITY(1, (1) | _GLF_IDENTITY(0, ~ (~ (0))))) % subgroup_size)), _GLF_IDENTITY(~ ((_GLF_IDENTITY((subgroup_local_id + _GLF_IDENTITY(1, (1) | 0)) % subgroup_size, clamp((subgroup_local_id + _GLF_IDENTITY(1, (1) | 0)) % subgroup_size, (subgroup_local_id + _GLF_IDENTITY(1, (1) | 0)) % subgroup_size, (subgroup_local_id + _GLF_IDENTITY(1, (1) | 0)) % subgroup_size)))), (_GLF_IDENTITY(~ (((subgroup_local_id + _GLF_IDENTITY(1, (1) | 0)) % subgroup_size)), (~ (((subgroup_local_id + _GLF_IDENTITY(1, (1) | 0)) % subgroup_size))) | (~ (((subgroup_local_id + _GLF_IDENTITY(_GLF_IDENTITY(1, (1) | 0), 0 + (_GLF_IDENTITY(1, (1) | 0)))) % subgroup_size))))) | (~ (((subgroup_local_id + _GLF_IDENTITY(1, (1) | 0)) % subgroup_size)))), ~ (((subgroup_local_id + _GLF_IDENTITY(_GLF_IDENTITY(1, (1) | 0), int(ivec2(_GLF_IDENTITY(1, (1) | 0), 1)))) % subgroup_size))))));
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = ((0 & 66062) | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY((1 & 1), clamp(_GLF_IDENTITY(_GLF_IDENTITY((1 & 1), int(int((1 & 1)))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY((1 & 1), int(int((1 & 1))))), max(_GLF_IDENTITY(~ (_GLF_IDENTITY((1 & 1), int(int((1 & 1))))), 0 ^ (~ (_GLF_IDENTITY((1 & 1), int(int((1 & 1))))))), ~ (_GLF_IDENTITY((1 & 1), int(int((1 & 1))))))))), (1 & 1), (1 & 1)))); _injected_loop_counter ++)
    {
     barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 atomicStore(buf[virtual_gid], uint(1), 4, _GLF_IDENTITY(64, (_GLF_IDENTITY(64, ~ (~ (64)))) ^ 0), 4);
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch))) * mat2(1.0)).x > injectionSwitch.y))))
  {
  }
 else
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if((subgroup_local_id % 2) == _GLF_IDENTITY(_GLF_IDENTITY(0, (_GLF_IDENTITY(_GLF_IDENTITY(0, 0 + (0)), (false ? _GLF_FUZZED(_GLF_IDENTITY(-93255, (-93255) >> _GLF_IDENTITY(0, (0) ^ 0))) : _GLF_IDENTITY(0, (false ? _GLF_FUZZED(_injected_loop_counter) : 0))))) ^ 0), clamp(_GLF_IDENTITY(0, (_GLF_IDENTITY(_GLF_IDENTITY(0, 0 + (0)), (false ? _GLF_FUZZED(_GLF_IDENTITY(-93255, (-93255) >> _GLF_IDENTITY(0, (0) ^ 0))) : _GLF_IDENTITY(0, (false ? _GLF_FUZZED(_injected_loop_counter) : 0))))) ^ 0), _GLF_IDENTITY(_GLF_IDENTITY(0, (_GLF_IDENTITY(_GLF_IDENTITY(0, 0 + (0)), (false ? _GLF_FUZZED(_GLF_IDENTITY(-93255, (-93255) >> _GLF_IDENTITY(0, (0) ^ 0))) : _GLF_IDENTITY(0, (false ? _GLF_FUZZED(_injected_loop_counter) : 0))))) ^ 0), (_GLF_IDENTITY(_GLF_IDENTITY(0, (_GLF_IDENTITY(_GLF_IDENTITY(0, 0 + (0)), (false ? _GLF_FUZZED(_GLF_IDENTITY(-93255, (-93255) >> _GLF_IDENTITY(0, (0) ^ 0))) : _GLF_IDENTITY(0, (false ? _GLF_FUZZED(_injected_loop_counter) : 0))))) ^ 0), clamp(_GLF_IDENTITY(0, (_GLF_IDENTITY(_GLF_IDENTITY(0, 0 + (0)), (false ? _GLF_FUZZED(_GLF_IDENTITY(-93255, (-93255) >> _GLF_IDENTITY(0, _GLF_IDENTITY((0) ^ 0, (0 ^ 0) ^ ((0) ^ 0))))) : _GLF_IDENTITY(0, (false ? _GLF_FUZZED(_injected_loop_counter) : 0))))) ^ 0), _GLF_IDENTITY(0, (_GLF_IDENTITY(_GLF_IDENTITY(0, 0 + (0)), (false ? _GLF_FUZZED(_GLF_IDENTITY(-93255, (-93255) >> _GLF_IDENTITY(0, (0) ^ 0))) : _GLF_IDENTITY(0, (false ? _GLF_FUZZED(_injected_loop_counter) : 0))))) ^ 0), _GLF_IDENTITY(0, (_GLF_IDENTITY(_GLF_IDENTITY(0, 0 + (0)), (false ? _GLF_FUZZED(_GLF_IDENTITY(-93255, (-93255) >> _GLF_IDENTITY(0, (0) ^ 0))) : _GLF_IDENTITY(0, (false ? _GLF_FUZZED(_injected_loop_counter) : 0))))) ^ 0)))) / 1), _GLF_IDENTITY(0, (_GLF_IDENTITY(_GLF_IDENTITY(0, 0 + (0)), (false ? _GLF_FUZZED(_GLF_IDENTITY(-93255, (-93255) >> _GLF_IDENTITY(0, (0) ^ 0))) : _GLF_IDENTITY(0, (false ? _GLF_FUZZED(_injected_loop_counter) : 0))))) ^ 0))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         do
          {
           if(_GLF_DEAD(false))
            {
             do
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 barrier();
                }
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     barrier();
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                   else
                    {
                    }
                  }
                 else
                  {
                  }
                }
               else
                {
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
         do
          {
           for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               barrier();
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))))))
              {
               for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) * 1) != 0); _GLF_IDENTITY(_injected_loop_counter --, (_GLF_IDENTITY(_injected_loop_counter --, 0 | (_injected_loop_counter --))) - 0))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(87.97) : injectionSwitch.x)), injectionSwitch.x)), injectionSwitch.x)), (_GLF_IDENTITY(false, false || (false)) ? _GLF_FUZZED(-8761.3069) : _GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(87.97) : injectionSwitch.x)), injectionSwitch.x)), injectionSwitch.x)))) < injectionSwitch.y))))
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   if(_GLF_DEAD(false))
                    barrier();
                   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != 1, ! (! (_GLF_IDENTITY(_injected_loop_counter != 1, bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter != _GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(max(_injected_loop_counter, 80673)))), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(_injected_loop_counter != _GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(max(_injected_loop_counter, 80673)))), false || (_injected_loop_counter != _GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(max(_injected_loop_counter, 80673)))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)), ! (! (_GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(_injected_loop_counter != _GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(max(_injected_loop_counter, 80673)))), false || (_injected_loop_counter != _GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(max(_injected_loop_counter, 80673)))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)), false || (bool(bvec3(_GLF_IDENTITY(_injected_loop_counter != _GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(max(_injected_loop_counter, 80673)))), false || (_injected_loop_counter != _GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(max(_injected_loop_counter, 80673)))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)))))))), ! (! (_injected_loop_counter != 1))), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))); _injected_loop_counter ++)
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                    }
                  }
                 else
                  {
                  }
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, true && (true))))
                  {
                   do
                    {
                     if(_GLF_WRAPPED_IF_TRUE(true))
                      {
                       if(_GLF_DEAD(false))
                        barrier();
                       if(_GLF_WRAPPED_IF_FALSE(false))
                        {
                        }
                       else
                        {
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          {
                           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                            barrier();
                           barrier();
                          }
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          barrier();
                         barrier();
                        }
                      }
                     else
                      {
                      }
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                  }
                 else
                  {
                  }
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     barrier();
                    }
                   else
                    {
                    }
                  }
                }
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(false, ! (! (false))) || (false))))
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   do
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                     barrier();
                    }
                   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                  }
                 do
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)))))
                    barrier();
                   barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (injectionSwitch.x > injectionSwitch.y))));
                }
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(false))
                barrier();
              }
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(false))
          barrier();
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            barrier();
           for(int _injected_loop_counter = ((0 >> _GLF_IDENTITY(int(2), int(2))) | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4)))); _injected_loop_counter ++)
            {
             for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(false))
                barrier();
              }
            }
           if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
            barrier();
          }
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           subgroupAll(true);
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(mat2x3(injectionSwitch.y, abs(log(1.0)), 0.0, 1.0, 0.0, 0.0)))))))
            barrier();
           if(_GLF_DEAD(false))
            {
             do
              {
               barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
             if(_GLF_DEAD(false))
              barrier();
            }
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(-8.4), _GLF_FUZZED((- -2.9))), bvec2(false, false))).y))))
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 else
                  {
                   barrier();
                  }
                }
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), clamp(_GLF_IDENTITY(int(6), (true ? int(6) : _GLF_FUZZED(_injected_loop_counter))), int(6), int(6))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                  {
                   do
                    {
                     do
                      {
                       if(_GLF_DEAD(false))
                        barrier();
                      }
                     while(_GLF_WRAPPED_LOOP(false));
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                   if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
                    barrier();
                  }
                }
               else
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
              }
             else
              {
              }
            }
           if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(_GLF_IDENTITY(true, bool(bvec4(true, false, false, true))) && (_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (injectionSwitch.x > injectionSwitch.y)))), (true && (_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (injectionSwitch.x > injectionSwitch.y))))) || _GLF_IDENTITY(false, bool(bvec3(false, false, true))))))
            barrier();
          }
         else
          {
          }
         atomicStore(buf[_GLF_IDENTITY(next_virtual_gid, _GLF_IDENTITY(_GLF_IDENTITY(0u, ~ (~ (0u))), (_GLF_IDENTITY(0u, (0u) << 0u)) >> uint(_GLF_ZERO(0.0, injectionSwitch.x))) ^ (next_virtual_gid))], uint(_GLF_IDENTITY(2, (2) << 0)), 4, 64, 4);
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             do
              {
               for(int _injected_loop_counter = (0 & (42994 % 5274)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 barrier();
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) > injectionSwitch.y))))
                  barrier();
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 barrier();
                }
              }
             else
              {
              }
             if(_GLF_DEAD(false))
              {
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, max(_injected_loop_counter, _GLF_IDENTITY(_injected_loop_counter, 0 ^ (_injected_loop_counter)))) < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
                {
                 barrier();
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
              }
            }
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           else
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               barrier();
              }
            }
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         for(int _injected_loop_counter = ((1 | 1) ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 | int(_GLF_ZERO(0.0, injectionSwitch.x)))); _injected_loop_counter --)
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
             subgroupAll(false);
            }
           else
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
               if(_GLF_DEAD(false))
                barrier();
              }
            }
          }
         do
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(_injected_loop_counter)))); _GLF_IDENTITY(_injected_loop_counter ++, 0 ^ (_GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) - 0))))
            {
             if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), true && (_GLF_WRAPPED_IF_FALSE(false))))
              {
              }
             else
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_DEAD(false), false, true))))
                {
                 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec4(false, false, false, true))), (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (_GLF_IDENTITY(int(6), 0 ^ (int(6)))) / 1))) >> _GLF_IDENTITY(int(6), int(6))); _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
                  {
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (_GLF_IDENTITY(false, (false) || false))), false || ((! (_GLF_IDENTITY(false, (false) || false))))))), (_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (_GLF_IDENTITY(false, (false) || false))), false || ((! (_GLF_IDENTITY(false, (false) || false)))))), bool(bool(_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (_GLF_IDENTITY(false, (false) || false))), false || ((! (_GLF_IDENTITY(false, (false) || false))))))))))) || false))
                      {
                       if(_GLF_DEAD(false))
                        barrier();
                       if(_GLF_WRAPPED_IF_TRUE(true))
                        {
                         if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bvec2(true, false)))))
                          {
                           if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(_GLF_DEAD(false), false, false), bvec3(bvec3(bvec3(_GLF_DEAD(false), false, false)))), bvec3(bvec3(_GLF_IDENTITY(bvec3(_GLF_DEAD(false), false, false), _GLF_IDENTITY(bvec3(bvec3(bvec3(_GLF_DEAD(false), _GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, true, false, _GLF_IDENTITY(true, (true) && true))), bool(bool(bool(bvec4(false, true, false, _GLF_IDENTITY(true, (true) && true))))))), false))), bvec3(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(bvec3(bvec3(_GLF_DEAD(false), _GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, true, false, _GLF_IDENTITY(true, (true) && true))), bool(bool(bool(bvec4(false, true, false, _GLF_IDENTITY(true, (true) && true))))))), false))), bvec3(bvec4(bvec3(bvec3(bvec3(_GLF_DEAD(false), _GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, true, false, _GLF_IDENTITY(true, (true) && true))), bool(bool(bool(bvec4(false, true, false, _GLF_IDENTITY(true, (true) && true))))))), false))), false))), bvec3(bvec4(bvec3(bvec3(bvec3(_GLF_DEAD(false), _GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, true, false, _GLF_IDENTITY(true, (true) && true))), bool(bool(bool(bvec4(false, true, false, _GLF_IDENTITY(true, (true) && true))))))), false))), false))))))))))), ! (! (bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(_GLF_DEAD(false), false, false), bvec3(bvec3(_GLF_IDENTITY(bvec3(_GLF_DEAD(false), false, false), bvec3(bvec3(_GLF_IDENTITY(bvec3(_GLF_DEAD(false), false, false), bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(_GLF_DEAD(false), false, false), bvec3(bvec4(bvec3(_GLF_DEAD(false), _GLF_IDENTITY(false, false || (false)), false), false)))), bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec3(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, true)), true && (_GLF_IDENTITY(bool(bvec2(false, true)), ! (! (bool(bvec2(false, true))))))))), false, false), bvec3(bvec4(bvec3(_GLF_DEAD(false), false, false), _GLF_IDENTITY(false, false || (false))))))))))))))))), bvec3(bvec3(_GLF_IDENTITY(bvec3(_GLF_DEAD(false), false, false), bvec3(bvec3(bvec3(_GLF_DEAD(false), false, false))))))))))), false || (_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(_GLF_DEAD(false), false, _GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false))), bvec3(bvec3(bvec3(_GLF_DEAD(false), false, false)))), bvec3(bvec3(_GLF_IDENTITY(bvec3(_GLF_DEAD(false), false, false), _GLF_IDENTITY(bvec3(bvec3(bvec3(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), false || (_GLF_IDENTITY(false, false || (false)))), false, false)), ! (_GLF_IDENTITY(! (bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), false || (_GLF_IDENTITY(false, false || (false)))), false, false))), bool(bvec2(! (bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), false || (_GLF_IDENTITY(false, false || (false)))), false, false))), true))))))), false, false))), _GLF_IDENTITY(bvec3(bvec3(bvec3(bvec3(bvec3(_GLF_DEAD(false), false, false))))), bvec3(bvec4(bvec3(bvec3(bvec3(bvec3(bvec3(_GLF_DEAD(false), false, false))))), false))))))))), ! (! (bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), false, false, true))), false, false), _GLF_IDENTITY(bvec3(bvec3(_GLF_IDENTITY(bvec3(_GLF_DEAD(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), _GLF_IDENTITY(false, ! (! (false))), false), bvec3(bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true), false, false), bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false)))), false, false), bvec3(bvec4(bvec3(_GLF_DEAD(false), false, false), _GLF_IDENTITY(false, bool(bool(false))))))), bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec3(_GLF_DEAD(false), false, false), bvec3(bvec4(bvec3(_GLF_DEAD(false), false, false), false)))))))))))))), bvec3(bvec4(bvec3(bvec3(_GLF_IDENTITY(bvec3(_GLF_DEAD(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), _GLF_IDENTITY(false, ! (! (false))), false), bvec3(bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true), false, false), bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false)))), false, false), bvec3(bvec4(bvec3(_GLF_DEAD(false), false, false), _GLF_IDENTITY(false, bool(bool(false))))))), bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec3(_GLF_DEAD(false), false, false), bvec3(bvec4(bvec3(_GLF_DEAD(false), false, false), false)))))))))))))), false)))), bvec3(bvec3(_GLF_IDENTITY(bvec3(_GLF_DEAD(false), false, false), bvec3(bvec3(bvec3(_GLF_DEAD(false), false, false)))))))))))))))
                            {
                             if(_GLF_DEAD(false))
                              {
                               if(_GLF_DEAD(false))
                                barrier();
                               barrier();
                              }
                             if(_GLF_DEAD(false))
                              barrier();
                             if(_GLF_DEAD(false))
                              barrier();
                             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                              {
                              }
                             else
                              {
                               barrier();
                              }
                             if(_GLF_DEAD(false))
                              barrier();
                            }
                          }
                         else
                          {
                           if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), ! (! (_GLF_WRAPPED_IF_FALSE(false)))))
                            {
                            }
                           else
                            {
                             if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + 0.0)) / 1.0) > injectionSwitch.y))))
                              {
                               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                barrier();
                               do
                                {
                                 barrier();
                                }
                               while(_GLF_WRAPPED_LOOP(false));
                              }
                             if(_GLF_DEAD(false))
                              barrier();
                            }
                          }
                        }
                       else
                        {
                        }
                      }
                     else
                      {
                       if(_GLF_WRAPPED_IF_FALSE(false))
                        {
                        }
                       else
                        {
                         for(int _injected_loop_counter = (61511 & 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                          {
                           do
                            {
                             if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY((false), (_GLF_IDENTITY((false), true && (_GLF_IDENTITY(_GLF_IDENTITY((false), ((false)) && true), false || (_GLF_IDENTITY((false), ((false)) && true)))))) && true) && true), _GLF_IDENTITY(true, (true) && true) && (false))))
                              {
                              }
                             else
                              {
                               barrier();
                               if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), false || (_GLF_IDENTITY(! (false), false || (! (false)))))))))
                                {
                                 if(_GLF_WRAPPED_IF_FALSE(false))
                                  {
                                  }
                                 else
                                  {
                                   if(_GLF_DEAD(false))
                                    {
                                     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false))
                                      {
                                       if(_GLF_DEAD(false))
                                        barrier();
                                       barrier();
                                      }
                                     barrier();
                                    }
                                   barrier();
                                   if(_GLF_DEAD(false))
                                    barrier();
                                  }
                                 if(_GLF_DEAD(false))
                                  barrier();
                                }
                              }
                            }
                           while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bvec3(false, true, false)))));
                          }
                        }
                       if(_GLF_DEAD(false))
                        {
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          barrier();
                         barrier();
                        }
                      }
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                    }
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                  }
                 if(_GLF_DEAD(false))
                  barrier();
                 do
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).x > injectionSwitch.y))))
                    barrier();
                   if(_GLF_DEAD(false))
                    barrier();
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ! _GLF_IDENTITY((! ((injectionSwitch.x < injectionSwitch.y))), false || ((! ((injectionSwitch.x < injectionSwitch.y)))))))))
                      {
                       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-1.3)), float(injectionSwitch.y), bool(true)))))))
                        {
                         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                          {
                           if(_GLF_DEAD(false))
                            barrier();
                           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                            barrier();
                          }
                         else
                          {
                          }
                        }
                       else
                        {
                        }
                       do
                        {
                         if(_GLF_WRAPPED_IF_TRUE(true))
                          {
                           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(false, bool(bvec4(false, true, false, false))), false, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), bool(bvec4(bool(bvec4(_GLF_IDENTITY(false, bool(bvec4(false, true, false, false))), false, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), true, false, false)))), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(false, ! (! (false))), true)), bool(bvec3(bool(bvec2(_GLF_IDENTITY(false, ! (! (false))), true)), true, true))))))
                            {
                             if(_GLF_DEAD(false))
                              barrier();
                             barrier();
                            }
                           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (int(0)) / 1)))); _injected_loop_counter --)
                            {
                             if(_GLF_DEAD(false))
                              {
                               if(_GLF_WRAPPED_IF_FALSE(false))
                                {
                                }
                               else
                                {
                                 barrier();
                                }
                              }
                             if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), injectionSwitch)), injectionSwitch)).x > injectionSwitch.y))))
                              barrier();
                            }
                           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                            barrier();
                           barrier();
                           if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), true && (! (false))))), false))), false)))))
                            barrier();
                           if(_GLF_DEAD(false))
                            {
                             if(_GLF_DEAD(false))
                              barrier();
                             do
                              {
                               if(_GLF_DEAD(false))
                                barrier();
                               barrier();
                               if(_GLF_DEAD(false))
                                barrier();
                               if(_GLF_DEAD(false))
                                barrier();
                               if(_GLF_DEAD(false))
                                {
                                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(0.5)))))))))
                                  barrier();
                                 barrier();
                                }
                              }
                             while(_GLF_WRAPPED_LOOP(false));
                            }
                           if(_GLF_WRAPPED_IF_FALSE(false))
                            {
                            }
                           else
                            {
                             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                              barrier();
                             if(_GLF_DEAD(false))
                              {
                               if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)))))
                                {
                                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                  barrier();
                                 barrier();
                                }
                               if(_GLF_WRAPPED_IF_FALSE(false))
                                {
                                }
                               else
                                {
                                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                                  {
                                   for(int _injected_loop_counter = ((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (int(0)) >> (48068 & 0)))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                                    {
                                     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))
                                      barrier();
                                     if(_GLF_DEAD(false))
                                      barrier();
                                    }
                                   barrier();
                                  }
                                }
                              }
                            }
                          }
                         else
                          {
                          }
                        }
                       while(_GLF_WRAPPED_LOOP(false));
                      }
                     else
                      {
                       if(_GLF_DEAD(false))
                        barrier();
                      }
                    }
                   if(_GLF_DEAD(false))
                    barrier();
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                       if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))))))
                        barrier();
                      }
                     else
                      {
                       if(_GLF_WRAPPED_IF_FALSE(false))
                        {
                         if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
                          barrier();
                        }
                       else
                        {
                         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false, false))), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! _GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (_GLF_IDENTITY(! ((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (! (! ((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))))) || false)))
                          {
                           if(_GLF_WRAPPED_IF_FALSE(false))
                            {
                            }
                           else
                            {
                             if(_GLF_WRAPPED_IF_TRUE(true))
                              {
                               barrier();
                              }
                             else
                              {
                               if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, true, true)))))
                                barrier();
                              }
                            }
                          }
                         if(_GLF_WRAPPED_IF_FALSE(false))
                          {
                          }
                         else
                          {
                           if(_GLF_DEAD(false))
                            {
                             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                              barrier();
                             barrier();
                            }
                          }
                        }
                      }
                     if(_GLF_WRAPPED_IF_TRUE(true))
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(_GLF_IDENTITY(0.0, (0.0) + 0.0), 0.0)).y))))
                        {
                         if(_GLF_WRAPPED_IF_TRUE(true))
                          {
                           if(_GLF_WRAPPED_IF_TRUE(true))
                            {
                             do
                              {
                               if(_GLF_DEAD(false))
                                barrier();
                               barrier();
                               if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false))))))))
                                barrier();
                              }
                             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, true && (false))) || false), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))))));
                            }
                           else
                            {
                            }
                          }
                         else
                          {
                          }
                         if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bool(false)))) && true)))
                          barrier();
                         if(_GLF_DEAD(false))
                          barrier();
                        }
                       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
                        barrier();
                      }
                     else
                      {
                      }
                     if(_GLF_DEAD(false))
                      barrier();
                     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                      {
                       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))), true && (_GLF_DEAD(false))))
                        {
                         if(_GLF_DEAD(false))
                          barrier();
                         do
                          {
                           barrier();
                          }
                         while(_GLF_WRAPPED_LOOP(false));
                        }
                      }
                     else
                      {
                      }
                     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                      {
                       if(_GLF_DEAD(false))
                        {
                         if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) || false), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) || false)))))
                          {
                          }
                         else
                          {
                           barrier();
                           if(_GLF_DEAD(false))
                            barrier();
                          }
                        }
                      }
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_WRAPPED_IF_TRUE(true))
                        {
                         barrier();
                        }
                       else
                        {
                        }
                      }
                     if(_GLF_WRAPPED_IF_TRUE(true))
                      {
                       if(_GLF_WRAPPED_IF_TRUE(true))
                        {
                         if(_GLF_DEAD(false))
                          {
                           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(float(injectionSwitch.y)), _GLF_ONE(1.0, injectionSwitch.y) * (float(float(injectionSwitch.y)))))))))
                            barrier();
                           if(_GLF_WRAPPED_IF_FALSE(false))
                            {
                            }
                           else
                            {
                             if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) && true)))
                              barrier();
                             if(_GLF_DEAD(false))
                              barrier();
                             barrier();
                            }
                          }
                         if(_GLF_WRAPPED_IF_FALSE(false))
                          {
                           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                            barrier();
                          }
                         else
                          {
                           barrier();
                          }
                        }
                       else
                        {
                        }
                      }
                     else
                      {
                      }
                     if(_GLF_DEAD(false))
                      barrier();
                     if(_GLF_DEAD(false))
                      barrier();
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
                        {
                         if(_GLF_DEAD(false))
                          barrier();
                         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          {
                          }
                         else
                          {
                           barrier();
                          }
                        }
                       if(_GLF_DEAD(false))
                        barrier();
                       if(_GLF_DEAD(false))
                        barrier();
                       barrier();
                      }
                     if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
                      barrier();
                    }
                  }
                 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
                  barrier();
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bool(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false)))))), bool(bvec4(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))))
                barrier();
              }
             if(_GLF_DEAD(false))
              {
               do
                {
                 barrier();
                }
               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
              }
             if(_GLF_DEAD(false))
              barrier();
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > 0, bool(bvec3(_GLF_IDENTITY(_injected_loop_counter > 0, bool(bvec3(_injected_loop_counter > 0, false, true))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))); _GLF_IDENTITY(_injected_loop_counter --, ~ (~ (_injected_loop_counter --))))
          {
           do
            {
             if(_GLF_DEAD(false))
              barrier();
             for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(_GLF_IDENTITY(6, (6) ^ 0)), int(6))); _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), clamp(int(_GLF_ONE(1.0, injectionSwitch.y)), int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, float(vec2(injectionSwitch.y, 1.0))))), int(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), 0.0 + (_GLF_ONE(1.0, injectionSwitch.y)))))), min(_GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), clamp(int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y)), int(_GLF_ONE(1.0, injectionSwitch.y)), int(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), 0.0 + (_GLF_ONE(1.0, injectionSwitch.y)))))), _GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), clamp(int(_GLF_ONE(1.0, injectionSwitch.y)), int(_GLF_ONE(1.0, injectionSwitch.y)), int(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), 0.0 + (_GLF_ONE(1.0, injectionSwitch.y))), float(mat4x2(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), 0.0 + (_GLF_ONE(1.0, injectionSwitch.y))), _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), cos(0.0), 0.0, 1.0, 0.0, 0.0, 0.0))))))))); _injected_loop_counter ++)
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(false))
                barrier();
               do
                {
                 do
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_TRUE(true, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ! (! ((injectionSwitch.x < injectionSwitch.y)))), bool(bvec4((_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, false || (_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(1.0) : injectionSwitch.x)), injectionSwitch.x)) < injectionSwitch.y)))))), true, _GLF_IDENTITY(true, bool(_GLF_IDENTITY(bool(true), (bool(true)) && true))), true)))) && (_GLF_DEAD(false))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).y)) && (_GLF_DEAD(false)), true && (_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).y)) && (_GLF_DEAD(false))))), (_GLF_IDENTITY(_GLF_DEAD(false), _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(ceil(-9.9)) : injectionSwitch.y)), clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat4(_GLF_IDENTITY(injectionSwitch, vec2(mat3x4(injectionSwitch, 1.0, 1.0, 1.0, 0.0, _GLF_IDENTITY(1.0, (1.0) / 1.0), 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, _GLF_IDENTITY(abs(0.0), (false ? _GLF_FUZZED(70.20) : _GLF_IDENTITY(abs(0.0), (false ? _GLF_FUZZED(length(vec3(2238.1773, 962.321, 6.0))) : _GLF_IDENTITY(abs(0.0), float(float(abs(0.0)))))))), 1.0))), 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, _GLF_IDENTITY(sqrt(1.0), clamp(sqrt(1.0), _GLF_IDENTITY(sqrt(1.0), (true ? sqrt(1.0) : _GLF_FUZZED(-5223.2974))), sqrt(1.0))), 0.0), (_GLF_IDENTITY(mat4(_GLF_IDENTITY(injectionSwitch, vec2(mat3x4(injectionSwitch, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, abs(0.0), 1.0))), _GLF_IDENTITY(0.0, min(0.0, 0.0)), 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, sqrt(1.0), 0.0), (mat4(_GLF_IDENTITY(injectionSwitch, vec2(mat3x4(injectionSwitch, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, abs(0.0), 1.0))), 0.0, _GLF_IDENTITY(1.0, max(1.0, 1.0)), 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, sqrt(1.0), 0.0)) + mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))) + mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, (0.0) / 1.0), 0.0)), 0.0)), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))).y, injectionSwitch.y)))) && (_GLF_DEAD(false)))) && true)))))
                    {
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_DEAD(false))
                        {
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          barrier();
                         barrier();
                        }
                       barrier();
                      }
                     for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
                      {
                       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), (bool(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))) && true), bool(bvec2(bool(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! _GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(3.6) : injectionSwitch.y))))))), ! (! ((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))))), true))), (_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), injectionSwitch)).x, injectionSwitch.x, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x)), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x)), max(_GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x))))) / 1.0))) > injectionSwitch.y))))))), bool(bvec2(bool(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-378.098, -42.68)) : injectionSwitch)).y))), ! (! (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec2(false, true)))) || false), (injectionSwitch.x > injectionSwitch.y))))))), true)))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))
                        {
                         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                          {
                           do
                            {
                             if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false)))), _GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec3(! (false), false, false))))) || (_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(vec4(4.4, -2.6, 748.775, -4.4).x)), vec2(_GLF_FUZZED(713.645), (injectionSwitch)[1]), bvec2(false, true))).x > _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), injectionSwitch, _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(5.3)), vec2(_GLF_FUZZED(6746.0324), (injectionSwitch)[1]), bvec2(false, true))))).y), bool(bvec3((_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(vec4(4.4, -2.6, 748.775, -4.4).x)), vec2(_GLF_FUZZED(713.645), (injectionSwitch)[1]), bvec2(false, true))).x > _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), injectionSwitch, _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(5.3)), vec2(_GLF_FUZZED(6746.0324), (injectionSwitch)[1]), bvec2(false, true))))).y), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))))))))
                              {
                               if(_GLF_DEAD(false))
                                barrier();
                               if(_GLF_WRAPPED_IF_FALSE(false))
                                {
                                 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec4(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), false, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
                                  {
                                   if(_GLF_DEAD(false))
                                    barrier();
                                   barrier();
                                  }
                                 if(_GLF_WRAPPED_IF_FALSE(false))
                                  {
                                  }
                                 else
                                  {
                                   do
                                    {
                                     if(_GLF_DEAD(false))
                                      {
                                       if(_GLF_DEAD(false))
                                        barrier();
                                       barrier();
                                      }
                                    }
                                   while(_GLF_WRAPPED_LOOP(false));
                                  }
                                }
                               else
                                {
                                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                  barrier();
                                 for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4))); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))), bool(bvec3(_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))); _injected_loop_counter --)
                                  {
                                   barrier();
                                  }
                                }
                               if(_GLF_DEAD(false))
                                barrier();
                              }
                            }
                           while(_GLF_WRAPPED_LOOP(false));
                          }
                         else
                          {
                          }
                        }
                       else
                        {
                         if(_GLF_DEAD(false))
                          barrier();
                         if(_GLF_DEAD(false))
                          {
                           do
                            {
                             if(_GLF_DEAD(false))
                              barrier();
                             if(_GLF_DEAD(false))
                              barrier();
                             if(_GLF_DEAD(false))
                              barrier();
                             barrier();
                             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                              barrier();
                             if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
                              barrier();
                             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                              barrier();
                            }
                           while(_GLF_WRAPPED_LOOP(false));
                          }
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          barrier();
                         for(int _injected_loop_counter = _GLF_IDENTITY(_GLF_IDENTITY((0 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), 0 | _GLF_IDENTITY((int(4)), ((int(4))) | 0)))), ((0 << _GLF_IDENTITY(int(4), int(4)))) - 0), clamp(_GLF_IDENTITY((0 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), 0 | _GLF_IDENTITY((int(4)), ((int(4))) | 0)))), ((0 << _GLF_IDENTITY(int(4), int(4)))) - 0), _GLF_IDENTITY(_GLF_IDENTITY((0 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), 0 | _GLF_IDENTITY((int(4)), ((int(4))) | 0)))), ((0 << _GLF_IDENTITY(int(4), int(4)))) - 0), int(ivec4(_GLF_IDENTITY((0 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), 0 | _GLF_IDENTITY((int(4)), ((int(4))) | 0)))), ((0 << _GLF_IDENTITY(int(4), int(_GLF_IDENTITY(4, (4) | (_GLF_IDENTITY(4, (false ? _GLF_FUZZED(_injected_loop_counter) : 4)))))))) - 0), 0, 1, 1))), _GLF_IDENTITY((0 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), 0 | _GLF_IDENTITY((int(4)), ((int(4))) | 0)))), ((0 << _GLF_IDENTITY(int(4), int(4)))) - 0))); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, 0 | (1))), true && (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, 0 | (1))), (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, 0 | (1))), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, 0 | (1))))))) || false), _GLF_IDENTITY(bool(bvec2(_GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, _GLF_IDENTITY(0 | (1), (false ? _GLF_FUZZED(_injected_loop_counter) : 0 | (1))))), false)), bool(bvec4(bool(bvec2(_GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, 0 | (1))), false)), true, _GLF_IDENTITY(false, ! (! (false))), false)))))); _injected_loop_counter ++)
                          {
                           if(_GLF_WRAPPED_IF_FALSE(false))
                            {
                             if(_GLF_DEAD(false))
                              barrier();
                            }
                           else
                            {
                             if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) && true)))
                              {
                              }
                             else
                              {
                               if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (false)))))
                                {
                                }
                               else
                                {
                                 if(_GLF_DEAD(false))
                                  barrier();
                                 if(_GLF_DEAD(false))
                                  barrier();
                                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                  barrier();
                                }
                              }
                             if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, bool(bvec4(false, false, true, false)))))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, bool(bvec4(false, false, true, false)))))), (_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, bool(bvec4(false, false, true, false))))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))
                              {
                               do
                                {
                                 if(_GLF_DEAD(false))
                                  barrier();
                                }
                               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).y))));
                               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                barrier();
                              }
                             else
                              {
                               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                                {
                                 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                  {
                                  }
                                 else
                                  {
                                   for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                                    {
                                     barrier();
                                    }
                                  }
                                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                  barrier();
                                 if(_GLF_WRAPPED_IF_TRUE(true))
                                  {
                                   if(_GLF_DEAD(false))
                                    {
                                     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
                                      barrier();
                                     barrier();
                                    }
                                  }
                                 else
                                  {
                                  }
                                }
                               else
                                {
                                 if(_GLF_DEAD(false))
                                  barrier();
                                 if(_GLF_WRAPPED_IF_FALSE(false))
                                  {
                                  }
                                 else
                                  {
                                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                    barrier();
                                  }
                                }
                              }
                            }
                           if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
                            barrier();
                          }
                         if(_GLF_DEAD(false))
                          barrier();
                         if(_GLF_WRAPPED_IF_FALSE(false))
                          {
                          }
                         else
                          {
                           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                            barrier();
                           if(_GLF_DEAD(false))
                            barrier();
                          }
                         if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || false)) && true)))
                          barrier();
                         if(_GLF_DEAD(false))
                          barrier();
                        }
                      }
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                      }
                     else
                      {
                       for(int _injected_loop_counter = 1; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x)), false || (_GLF_IDENTITY(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x)), false || (_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))))))), (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x)), false || (_GLF_IDENTITY(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x)), false || _GLF_IDENTITY((_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))), bool(bvec4(_GLF_IDENTITY((_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))), bool(bvec2((_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))), true))), false, false, _GLF_IDENTITY(true, (true) || false))))))))) && true); _injected_loop_counter --)
                        {
                         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                          {
                           if(_GLF_DEAD(false))
                            barrier();
                           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                            barrier();
                           if(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, bool(bvec4(false, _GLF_IDENTITY(true, false || (true)), true, true)))))))
                            {
                             if(_GLF_DEAD(false))
                              {
                               if(_GLF_DEAD(false))
                                barrier();
                               if(_GLF_DEAD(false))
                                barrier();
                               barrier();
                              }
                             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                              {
                               if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, _GLF_IDENTITY(bool(bvec4(injectionSwitch.x < injectionSwitch.y, false, false, true)), ! (! (bool(bvec4(injectionSwitch.x < injectionSwitch.y, false, false, true)))))))), bool(bvec2(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, _GLF_IDENTITY(bool(bvec4(injectionSwitch.x < injectionSwitch.y, false, false, true)), ! (! (bool(bvec4(injectionSwitch.x < injectionSwitch.y, false, false, true)))))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
                                {
                                 barrier();
                                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                  barrier();
                                }
                               else
                                {
                                }
                               if(_GLF_DEAD(false))
                                barrier();
                               if(_GLF_DEAD(false))
                                barrier();
                              }
                             else
                              {
                              }
                             if(_GLF_DEAD(false))
                              barrier();
                            }
                          }
                         else
                          {
                          }
                        }
                      }
                    }
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
               if(_GLF_DEAD(false))
                barrier();
              }
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec3(false, false, false))), (injectionSwitch.x > injectionSwitch.y))));
           if(_GLF_DEAD(false))
            barrier();
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             else
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 atomicStore(buf[_GLF_IDENTITY(next_virtual_gid, _GLF_IDENTITY(_GLF_IDENTITY((next_virtual_gid), (_GLF_IDENTITY((next_virtual_gid), 1u * ((next_virtual_gid)))) - 0u) | 0u, 1u * (_GLF_IDENTITY((next_virtual_gid) | 0u, clamp((_GLF_IDENTITY(next_virtual_gid, uint(uvec4(next_virtual_gid, (1u ^ 1u), 0u, ((1u << _GLF_IDENTITY(uint(4u), uint(4u))) >> _GLF_IDENTITY(uint(4u), uint(4u))))))) | 0u, (next_virtual_gid) | 0u, _GLF_IDENTITY((next_virtual_gid), uint(uint((next_virtual_gid)))) | 0u)))))], uint(2), 4, 64, 4);
                }
               if(_GLF_DEAD(false))
                barrier();
              }
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY((injectionSwitch.y) / 1.0, max(_GLF_IDENTITY((injectionSwitch.y) / 1.0, min((injectionSwitch.y) / 1.0, (injectionSwitch.y) / 1.0)), (injectionSwitch.y) / 1.0)))))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
             do
              {
               barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
          }
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, false)))), bool(bvec4(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, false), _GLF_IDENTITY(bvec2(bvec4(bvec2(false, false), false, false)), bvec2(_GLF_IDENTITY(bvec3(bvec2(bvec4(bvec2(false, false), false, false)), false), bvec3(bvec3(bvec3(bvec2(bvec4(bvec2(false, false), false, false)), false)))))))))), (_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, false))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-1876.4001) : _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, 1.0 * (injectionSwitch.y)), max(_GLF_IDENTITY(injectionSwitch.y, 1.0 * (injectionSwitch.y)), _GLF_IDENTITY(injectionSwitch.y, 1.0 * (injectionSwitch.y))))))))))
              {
              }
             else
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
               if(_GLF_DEAD(false))
                barrier();
              }
             if(_GLF_DEAD(false))
              {
               do
                {
                 barrier();
                }
               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
              }
            }
          }
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! _GLF_IDENTITY((_GLF_IDENTITY(! (_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(-2136.5874)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), ! (! (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(392.837)), float(injectionSwitch.x), bool(true))), injectionSwitch.x)) > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y))))))), true && (! (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-4.8), _GLF_FUZZED(8.4)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))).x > injectionSwitch.y), ! (! (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), (_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(vec2(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch))), (vec2(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)))) / abs(vec2(1.0, 1.0))))).x > injectionSwitch.y) || false)), false || ((injectionSwitch.x > injectionSwitch.y)))))))))), false || ((_GLF_IDENTITY(! (_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(-2136.5874)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), ! (! (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(392.837)), float(injectionSwitch.x), bool(true))), injectionSwitch.x)) > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y))))))), true && (! (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-4.8), _GLF_FUZZED(8.4)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))).x > injectionSwitch.y), ! (! (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), (_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(vec2(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch))), (vec2(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)))) / abs(vec2(1.0, 1.0))))).x > injectionSwitch.y) || false)), false || ((injectionSwitch.x > injectionSwitch.y)))))))))))))))))), (_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y), ! (! ((injectionSwitch.x > injectionSwitch.y))))))) && true))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
           if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
            {
             do
              {
               barrier();
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 barrier();
                }
              }
             while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bvec2(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))));
             if(_GLF_DEAD(false))
              barrier();
            }
           barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         do
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               barrier();
              }
             barrier();
             if(_GLF_DEAD(false))
              barrier();
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false))))
          barrier();
        }
       else
        {
        }
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       barrier();
      }
    }
   else
    {
    }
  }
 if(_GLF_DEAD(false))
  {
   do
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
        }
       else
        {
        }
      }
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(false))
    {
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), true, true, false))))
  {
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(_GLF_IDENTITY(6, min(6, 6))), min(_GLF_IDENTITY(int(6), clamp(int(6), _GLF_IDENTITY(int(6), int(ivec4(int(6), 1, 0, 0))), int(6))), int(6))))) >> _GLF_IDENTITY(int(6), int(6)))); _injected_loop_counter ++)
      {
       barrier();
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), (_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bvec2(_GLF_IDENTITY(true, bool(bvec4(true, false, true, false))), false))))) && true))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           for(int _injected_loop_counter = (1 & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
               if(_GLF_DEAD(false))
                barrier();
              }
             else
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 do
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   if(_GLF_DEAD(false))
                    barrier();
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(! (false), false || (! (false))), false), _GLF_IDENTITY(bvec2(bvec3(bvec2(_GLF_IDENTITY(! (false), false || (! (false))), false), false)), bvec2(bvec4(bvec2(bvec3(bvec2(_GLF_IDENTITY(! (false), false || (! (false))), false), false)), true, true))))))))));
                 if(_GLF_DEAD(false))
                  barrier();
                }
              }
             if(_GLF_DEAD(false))
              barrier();
            }
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, false)))))
              barrier();
            }
           else
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-1.2), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-1.0)), bvec2(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))).y))))
              barrier();
            }
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
          }
        }
       else
        {
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), false || (_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) || false)))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), injectionSwitch)).y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(6), int(6))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
  }
 do
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
