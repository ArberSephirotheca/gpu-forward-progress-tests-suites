#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ! (! ((injectionSwitch.x < injectionSwitch.y))))), false || (_GLF_TRUE(true, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, _GLF_IDENTITY(bool(bvec2(injectionSwitch.x < injectionSwitch.y, false)), bool(_GLF_IDENTITY(bvec3(bool(bvec2(injectionSwitch.x < injectionSwitch.y, false)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec3(bvec4(bvec3(bool(bvec2(injectionSwitch.x < injectionSwitch.y, false)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true))))))), ! (! ((injectionSwitch.x < injectionSwitch.y)))))))))
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 ^ 0)); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y)))), _GLF_IDENTITY(false || (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(injectionSwitch.x > injectionSwitch.y, false)))))), (_GLF_IDENTITY(false || _GLF_IDENTITY(_GLF_IDENTITY((_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).x > injectionSwitch.y, bool(bvec2(injectionSwitch.x > injectionSwitch.y, false)))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || ((_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).x > injectionSwitch.y, bool(bvec2(injectionSwitch.x > injectionSwitch.y, false)))))))), ((_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).x > injectionSwitch.y, bool(bvec2(injectionSwitch.x > injectionSwitch.y, false))))))) || false), (_GLF_IDENTITY(false || _GLF_IDENTITY(_GLF_IDENTITY((_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).x > injectionSwitch.y, bool(bvec2(injectionSwitch.x > injectionSwitch.y, false)))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || ((_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).x > injectionSwitch.y, bool(bvec2(injectionSwitch.x > injectionSwitch.y, false)))))))), ((_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).x > injectionSwitch.y, bool(bvec2(injectionSwitch.x > injectionSwitch.y, false))))))) || false), ! (! (false || _GLF_IDENTITY(_GLF_IDENTITY((_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).x > injectionSwitch.y, bool(bvec2(injectionSwitch.x > injectionSwitch.y, false)))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || ((_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).x > injectionSwitch.y, bool(bvec2(injectionSwitch.x > injectionSwitch.y, false)))))))), ((_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).x > _GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(-5.5))), bool(bvec2(injectionSwitch.x > injectionSwitch.y, false))))))) || false))))) || false)) || false))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = (1 ^ 1); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, _GLF_IDENTITY(max(_injected_loop_counter, _GLF_IDENTITY(_injected_loop_counter, clamp(_injected_loop_counter, _injected_loop_counter, _injected_loop_counter))), 0 ^ (_GLF_IDENTITY(_GLF_IDENTITY(max(_injected_loop_counter, _GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, clamp(_injected_loop_counter, _injected_loop_counter, _injected_loop_counter)), (_GLF_IDENTITY(_injected_loop_counter, clamp(_injected_loop_counter, _injected_loop_counter, _injected_loop_counter))) / 1)), max(max(_injected_loop_counter, _GLF_IDENTITY(_injected_loop_counter, clamp(_injected_loop_counter, _injected_loop_counter, _injected_loop_counter))), max(_injected_loop_counter, _GLF_IDENTITY(_injected_loop_counter, clamp(_injected_loop_counter, _injected_loop_counter, _injected_loop_counter))))), min(_GLF_IDENTITY(max(_injected_loop_counter, _GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, clamp(_injected_loop_counter, _injected_loop_counter, _injected_loop_counter)), (_GLF_IDENTITY(_injected_loop_counter, clamp(_injected_loop_counter, _injected_loop_counter, _injected_loop_counter))) / 1)), max(max(_injected_loop_counter, _GLF_IDENTITY(_injected_loop_counter, clamp(_injected_loop_counter, _injected_loop_counter, _injected_loop_counter))), max(_injected_loop_counter, _GLF_IDENTITY(_injected_loop_counter, clamp(_injected_loop_counter, _injected_loop_counter, _injected_loop_counter))))), _GLF_IDENTITY(max(_injected_loop_counter, _GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, clamp(_injected_loop_counter, _injected_loop_counter, _injected_loop_counter)), (_GLF_IDENTITY(_injected_loop_counter, clamp(_injected_loop_counter, _injected_loop_counter, _injected_loop_counter))) / 1)), max(max(_injected_loop_counter, _GLF_IDENTITY(_injected_loop_counter, clamp(_injected_loop_counter, _injected_loop_counter, _injected_loop_counter))), max(_injected_loop_counter, _GLF_IDENTITY(_injected_loop_counter, clamp(_injected_loop_counter, _injected_loop_counter, _injected_loop_counter)))))))))) != (1 & 1)); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + 0.0) > injectionSwitch.y), ((_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + 0.0) > injectionSwitch.y)) || false))))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, true, false)))))
          barrier();
        }
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          {
           do
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], (_GLF_IDENTITY(true ? injectionSwitch[1] : _GLF_FUZZED(577.984), min(true ? injectionSwitch[1] : _GLF_FUZZED(577.984), true ? injectionSwitch[1] : _GLF_FUZZED(577.984))))))), vec2(mat2x3(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], (_GLF_IDENTITY(true ? injectionSwitch[1] : _GLF_FUZZED(577.984), min(true ? injectionSwitch[1] : _GLF_FUZZED(577.984), true ? injectionSwitch[1] : _GLF_FUZZED(577.984))))))), 0.0, 0.0, 0.0, 1.0))).y))))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               barrier();
              }
             if(_GLF_DEAD(false))
              barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
           for(int _injected_loop_counter = (1 ^ 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) - 0))
            {
             barrier();
             if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, false, false)))))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
            }
          }
        }
       else
        {
        }
      }
     else
      {
       for(int _injected_loop_counter = (_GLF_IDENTITY(0, int(ivec2(0, 0))) << _GLF_IDENTITY(int(8), int(8))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec2((injectionSwitch.x > injectionSwitch.y), true))))))))
          {
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
          }
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) && true)))))
          barrier();
        }
       do
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bvec3(false, true, false)))));
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    {
     do
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, bool(bool(true)))) || false)))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             barrier();
            }
           else
            {
            }
          }
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
        }
      }
     while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bool(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))));
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       barrier();
      }
     else
      {
      }
    }
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 do
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
  barrier();
 uint workgroup_id = _GLF_IDENTITY(gl_WorkGroupID, (_GLF_IDENTITY(gl_WorkGroupID, (_GLF_IDENTITY(gl_WorkGroupID, (gl_WorkGroupID) | uvec3(0u, 0u, 0u))) | uvec3(0u, 0u, 0u))) ^ uvec3(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), mix(float(_GLF_ZERO(0.0, injectionSwitch.x)), float(_GLF_FUZZED(25.79)), bool(false))), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))).x;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 << _GLF_IDENTITY(int(6), int(6)))); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
  }
 uint workgroup_base = workgroup_size * workgroup_id;
 if(_GLF_DEAD(false))
  barrier();
 uint subgroup_base = _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (subgroup_id) << (1u ^ _GLF_IDENTITY(1u, (1u) | (_GLF_IDENTITY(1u, (1u) * 1u))))) * subgroup_size, (_GLF_IDENTITY(subgroup_id, (subgroup_id) << (1u ^ _GLF_IDENTITY(1u, (1u) | (_GLF_IDENTITY(1u, (1u) * 1u))))) * subgroup_size) | uint(_GLF_ZERO(0.0, injectionSwitch.x))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (subgroup_id) << (1u ^ 1u)), (_GLF_IDENTITY(subgroup_id, (subgroup_id) << (1u ^ 1u))) | 0u) * subgroup_size, _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (subgroup_id) << (1u ^ 1u)) * _GLF_IDENTITY(subgroup_size, (subgroup_size) ^ 0u), clamp(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, clamp(subgroup_id, subgroup_id, subgroup_id)), (subgroup_id) << (1u ^ 1u)) * subgroup_size, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (subgroup_id) >> 0u), (subgroup_id) << (1u ^ _GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, (1u) | 0u)) - 0u))) * _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, _GLF_IDENTITY(subgroup_size, (0u >> _GLF_IDENTITY(uint(8u), uint(8u))) | (_GLF_IDENTITY(subgroup_size, (subgroup_size) - 0u))), subgroup_size)), (_GLF_IDENTITY(subgroup_size, ~ _GLF_IDENTITY((~ (subgroup_size)), ((~ (subgroup_size))) | ((~ (subgroup_size)))))) | (_GLF_IDENTITY(subgroup_size, ~ (~ (subgroup_size))))), ~ (~ (_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY(_GLF_IDENTITY((subgroup_id) << (1u ^ 1u), (false ? _GLF_FUZZED(subgroup_size) : (subgroup_id) << (1u ^ 1u))), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY((subgroup_id) << (1u ^ 1u), ~ (~ (_GLF_IDENTITY((subgroup_id) << (1u ^ 1u), ~ (~ ((subgroup_id) << (1u ^ _GLF_IDENTITY(1u, clamp(1u, 1u, 1u))))))))), _GLF_IDENTITY((false ? _GLF_FUZZED(subgroup_size) : _GLF_IDENTITY((subgroup_id) << (1u ^ 1u), min(_GLF_IDENTITY((subgroup_id) << (1u ^ 1u), (_GLF_IDENTITY((subgroup_id) << (1u ^ 1u), uint(uvec2((subgroup_id) << (1u ^ 1u), 0u)))) | 0u), (subgroup_id) << (1u ^ 1u)))), _GLF_IDENTITY(((false ? _GLF_FUZZED(subgroup_size) : (subgroup_id) << (1u ^ 1u))) | ((false ? _GLF_FUZZED(subgroup_size) : (subgroup_id) << (1u ^ 1u))), (((_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, (false) || false))) ? _GLF_FUZZED(subgroup_size) : (subgroup_id) << (1u ^ 1u))) | ((false ? _GLF_FUZZED(subgroup_size) : _GLF_IDENTITY((subgroup_id), (_GLF_IDENTITY((subgroup_id), (false ? _GLF_FUZZED(subgroup_size) : (subgroup_id)))) * 1u) << (1u ^ 1u)))) << 0u))))))) * subgroup_size))), _GLF_IDENTITY(subgroup_id, (subgroup_id) << _GLF_IDENTITY((1u ^ 1u), _GLF_IDENTITY(uint(uvec2((1u ^ 1u), 0u)), (uint(uvec2((1u ^ 1u), 0u))) - 0u))) * subgroup_size)), _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (subgroup_id) ^ 0u), (subgroup_id) << (_GLF_IDENTITY(1u ^ 1u, (1u ^ 1u) | (1u ^ 1u)))) * subgroup_size));
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && _GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && ((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))))
  barrier();
 uint virtual_gid = workgroup_base + subgroup_base + subgroup_local_id;
 if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 uint next_virtual_gid = workgroup_base + subgroup_base + ((_GLF_IDENTITY(subgroup_local_id + 1, clamp(subgroup_local_id + 1, _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) >> _GLF_IDENTITY((uint(_GLF_ZERO(0.0, injectionSwitch.x)) >> _GLF_IDENTITY(_GLF_IDENTITY(uint(4u), uint(4u)), (true ? _GLF_IDENTITY(uint(4u), uint(4u)) : _GLF_FUZZED(subgroup_size)))), ((uint(_GLF_ZERO(0.0, injectionSwitch.x)) >> _GLF_IDENTITY(_GLF_IDENTITY(uint(4u), uint(4u)), max(_GLF_IDENTITY(uint(4u), uint(4u)), _GLF_IDENTITY(uint(4u), uint(4u)))))) | (0u >> _GLF_IDENTITY(uint(4u), uint(4u))))) + 1, subgroup_local_id + 1))) % subgroup_size);
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   do
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), ! (! (bool(bool(false))))))));
  }
 atomicStore(buf[virtual_gid], uint(1), _GLF_IDENTITY(4, (4) >> 0), 64, 4);
 if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(_GLF_IDENTITY(false, (false) || false))) || false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   do
    {
     do
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], mix(float(_GLF_FUZZED(_GLF_IDENTITY(-6413.4861, max(-6413.4861, -6413.4861)))), float(injectionSwitch[1]), bool(true))))).y))));
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))));
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))))))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
        barrier();
       barrier();
      }
    }
  }
 for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4))); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 | 0)); _injected_loop_counter --)
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_DEAD(false)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_DEAD(false))) && true), _GLF_IDENTITY(false, (false) || false) || (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(_GLF_IDENTITY(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec3(bvec4(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), true))))) || (_GLF_DEAD(false)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true) || (_GLF_DEAD(false)))))))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             barrier();
            }
          }
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) || false)))
        {
        }
       else
        {
         for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(1), int(1))); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1)))); _injected_loop_counter ++)
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bool(! (_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, false || (false)), true)))))))))))
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           else
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
        }
      }
    }
   else
    {
    }
  }
 do
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y, true && (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0), injectionSwitch.y)))), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))))), ! (_GLF_IDENTITY(! (bool(bool(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))), true && (! (bool(bool(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))))))))) || false), ! (! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(618.005) : injectionSwitch.y)), clamp(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(618.005) : injectionSwitch.y)), min(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(618.005) : injectionSwitch.y)), mix(float(_GLF_FUZZED(6115.6676)), float(_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(618.005) : injectionSwitch.y))), bool(true))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_IDENTITY((injectionSwitch)[0], min((injectionSwitch)[0], (injectionSwitch)[0])), _GLF_FUZZED(((30.71 * 2.0) * -7180.3186))), vec2(_GLF_FUZZED(-9.5), (injectionSwitch)[1]), bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))).y, (false ? _GLF_FUZZED(618.005) : injectionSwitch.y)))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(618.005) : injectionSwitch.y)), (true ? _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(618.005) : injectionSwitch.y)) : _GLF_FUZZED(5.7))), _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(618.005) : injectionSwitch.y)))), injectionSwitch.y))))))), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y, true && (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0), injectionSwitch.y)))), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))))), ! (_GLF_IDENTITY(! (bool(bool(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))), true && (! (bool(bool(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))))))))) || false), ! (! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(618.005) : injectionSwitch.y)), clamp(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(618.005) : injectionSwitch.y)), min(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(618.005) : injectionSwitch.y)), mix(float(_GLF_FUZZED(6115.6676)), float(_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(618.005) : injectionSwitch.y))), bool(true))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_IDENTITY((injectionSwitch)[0], min((injectionSwitch)[0], (injectionSwitch)[0])), _GLF_FUZZED(((30.71 * 2.0) * -7180.3186))), vec2(_GLF_FUZZED(-9.5), (injectionSwitch)[1]), bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))).y, (false ? _GLF_FUZZED(618.005) : injectionSwitch.y)))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(618.005) : injectionSwitch.y)), (true ? _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(618.005) : injectionSwitch.y)) : _GLF_FUZZED(5.7))), _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(618.005) : injectionSwitch.y)))), injectionSwitch.y))))))), (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y, true && (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0), injectionSwitch.y)))), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))))), ! (_GLF_IDENTITY(! (bool(bool(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))), true && (! (bool(bool(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))))))))) || false), ! (! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(618.005) : injectionSwitch.y)), clamp(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(618.005) : injectionSwitch.y)), min(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(618.005) : injectionSwitch.y)), mix(float(_GLF_FUZZED(6115.6676)), float(_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(618.005) : injectionSwitch.y))), bool(true))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch), _GLF_IDENTITY(vec2(mat3((injectionSwitch), 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0)), min(vec2(mat3((injectionSwitch), 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0)), _GLF_IDENTITY(vec2(mat3((injectionSwitch), 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0)), (vec2(mat3((injectionSwitch), 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0))) / vec2(1.0, 1.0)))))[0], min((injectionSwitch)[0], (injectionSwitch)[0])), _GLF_FUZZED((_GLF_IDENTITY((30.71 * 2.0), (_GLF_IDENTITY((30.71 * 2.0), mix(float(_GLF_FUZZED(81.65)), float(_GLF_IDENTITY((30.71 * 2.0), 1.0 * ((30.71 * 2.0)))), bool(true)))) / exp(0.0)) * -7180.3186))), vec2(_GLF_FUZZED(-9.5), (injectionSwitch)[1]), bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))).y, (false ? _GLF_FUZZED(618.005) : injectionSwitch.y)))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(618.005) : injectionSwitch.y)), (true ? _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(618.005) : injectionSwitch.y)) : _GLF_FUZZED(5.7))), _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(618.005) : injectionSwitch.y)))), injectionSwitch.y)))))))) || false)) && true))), bool(_GLF_IDENTITY(bvec2(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), (true ? mat2(1.0) * (injectionSwitch) : _GLF_FUZZED(vec2(9564.1110, 912.147))))).x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * _GLF_IDENTITY(vec2(1.0, 1.0), mix(vec2((vec2(1.0, 1.0))[0], (vec2(1.0, 1.0))[1]), vec2(_GLF_FUZZED(8041.4574), _GLF_FUZZED(-1236.4607)), bvec2(false, false)))))).y))))), false), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(bvec3(bvec2(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), true && (! (! (false))))), bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), bool(bvec2(_GLF_IDENTITY(false, ! (! (false))), true))), true))), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat3(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)), 0.0, 0.0, 0.0, round(length(normalize(vec2(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, float(_GLF_IDENTITY(mat4x2(_GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(-5961.0796)), bool(false))), 1.0, determinant(mat4(exp(0.0), 0.0, 0.0, 0.0, 0.0, 1.0, determinant(mat3(0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0)), 0.0, 0.0, determinant(mat4(0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), 1.0, 1.0, 0.0, 0.0, 0.0, 1.0)), 0.0, 0.0, 0.0, 0.0, 1.0), (mat4x2(_GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(-5961.0796)), bool(false))), 1.0, determinant(mat4(exp(0.0), 0.0, 0.0, 0.0, 0.0, 1.0, determinant(mat3(0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0)), 0.0, 0.0, determinant(mat4(0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), 1.0, 1.0, 0.0, 0.0, 0.0, 1.0)), 0.0, 0.0, 0.0, 0.0, 1.0)) * mat4(1.0))))), _GLF_ONE(1.0, injectionSwitch.y))))), 0.0, 1.0, abs(0.0)), (true ? mat3(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(_GLF_IDENTITY(0.0, min(0.0, 0.0)), 0.0)), 0.0, 0.0, 0.0, round(length(normalize(vec2(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y))))), 0.0, 1.0, abs(0.0)) : _GLF_FUZZED(mat3(-59.91, -50.33, -0.3, -8949.0205, 3.6, 21.33, -8.5, 1.3, 7.5)))))).y))))), false), true)), bvec2(bvec4(bvec2(bvec3(bvec2(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), bool(bool(! (! (false)))))), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-7.5, 101.173)) : injectionSwitch)).x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))))), _GLF_IDENTITY(false, ! (! (false)))), true)), false, false))), bvec2(bvec2(_GLF_IDENTITY(bvec2(bvec3(bvec2(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), (! (! (false))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), bool(bvec2(_GLF_IDENTITY(false, ! (! (false))), true))), true))), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(vec3(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * cos(vec2(0.0, 0.0))), 0.0))).x > injectionSwitch.y, ! _GLF_IDENTITY((! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat3(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)), max(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)), _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)))), 0.0, 0.0, 0.0, round(length(normalize(vec2(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y))))), 0.0, 1.0, abs(0.0)), (true ? mat3(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)), 0.0, 0.0, 0.0, round(length(normalize(vec2(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y))))), 0.0, 1.0, abs(0.0)) : _GLF_FUZZED(mat3(_GLF_IDENTITY(-59.91, mix(float(_GLF_FUZZED(1826.3853)), float(_GLF_IDENTITY(-59.91, max(-59.91, _GLF_IDENTITY(-59.91, (false ? _GLF_FUZZED(4131.3698) : -59.91))))), bool(true))), -50.33, -0.3, -8949.0205, 3.6, 21.33, -8.5, 1.3, 7.5)))))).y)), false || ((! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat3(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)), max(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)), _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)))), 0.0, 0.0, 0.0, round(length(normalize(vec2(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y))))), 0.0, 1.0, abs(0.0)), (true ? mat3(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)), 0.0, 0.0, 0.0, round(length(normalize(vec2(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y))))), 0.0, 1.0, abs(0.0)) : _GLF_FUZZED(mat3(_GLF_IDENTITY(-59.91, mix(float(_GLF_FUZZED(1826.3853)), float(_GLF_IDENTITY(-59.91, max(-59.91, _GLF_IDENTITY(-59.91, (false ? _GLF_FUZZED(4131.3698) : -59.91))))), bool(true))), -50.33, -0.3, -8949.0205, 3.6, 21.33, -8.5, 1.3, 7.5)))))).y))))))), false), true)), bvec2(bvec4(bvec2(bvec3(bvec2(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), bool(bool(! (! (false)))))), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))))), _GLF_IDENTITY(false, ! (! (false)))), true)), false, false)))))), bvec2(bvec2(bvec2(bvec3(bvec2(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(false, ! (! (false))))), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x > injectionSwitch.y, _GLF_IDENTITY(! (! (injectionSwitch.x > injectionSwitch.y)), false || (! _GLF_IDENTITY((! (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY((! (injectionSwitch.x > injectionSwitch.y)), ! (! ((! (injectionSwitch.x > injectionSwitch.y))))))))))))), false), true))))))))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     for(int _injected_loop_counter = (_GLF_IDENTITY((0 << _GLF_IDENTITY(_GLF_IDENTITY(int(4), 0 + (_GLF_IDENTITY(int(4), (int(4)) >> 0))), int(4))), 0 | ((0 << _GLF_IDENTITY(_GLF_IDENTITY(int(4), 0 + (_GLF_IDENTITY(int(4), (int(4)) >> 0))), int(4))))) << _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (true ? int(2) : _GLF_FUZZED(14932))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   else
    {
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 do
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   do
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) || false)))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, false, false)))))
            barrier();
           barrier();
           if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
            barrier();
          }
        }
      }
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
            barrier();
           barrier();
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), (! (injectionSwitch.x > injectionSwitch.y)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))
          barrier();
         if((subgroup_local_id % 2) == 0)
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           else
            {
            }
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              barrier();
             for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(4), (int(4)) << 0), int(4)), ((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(4), (int(4)) << 0), int(4))) / 1))); _injected_loop_counter ++)
              {
               subgroupAll(true);
              }
            }
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                }
               else
                {
                 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   barrier();
                  }
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if(_GLF_DEAD(false))
                barrier();
              }
            }
           else
            {
            }
           do
            {
             if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec4((_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch))) / vec2(1.0, 1.0)).x > injectionSwitch.y), false, false, true))))))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
              {
               do
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 atomicStore(buf[next_virtual_gid], _GLF_IDENTITY(_GLF_IDENTITY(uint(2), _GLF_IDENTITY(_GLF_IDENTITY(clamp(_GLF_IDENTITY(uint(2), 0u | (_GLF_IDENTITY(uint(2), 1u * (uint(2))))), _GLF_IDENTITY(uint(2), ~ (~ (uint(2)))), uint(2)), uint(uvec4(_GLF_IDENTITY(clamp(_GLF_IDENTITY(_GLF_IDENTITY(uint(2), 0u | _GLF_IDENTITY((_GLF_IDENTITY(uint(2), 1u * (uint(2)))), (_GLF_IDENTITY((_GLF_IDENTITY(uint(2), 1u * (uint(2)))), ~ (~ ((_GLF_IDENTITY(uint(2), 1u * (uint(2)))))))) + (0u << _GLF_IDENTITY(uint(3u), uint(3u))))), (_GLF_IDENTITY(uint(2), 0u | _GLF_IDENTITY((_GLF_IDENTITY(uint(2), 1u * (uint(_GLF_IDENTITY(2, min(2, 2)))))), (_GLF_IDENTITY((_GLF_IDENTITY(uint(2), 1u * (uint(2)))), ~ (~ ((_GLF_IDENTITY(uint(2), 1u * (uint(2)))))))) + (0u << _GLF_IDENTITY(uint(3u), uint(3u)))))) / 1u), _GLF_IDENTITY(uint(2), ~ (~ (uint(2)))), uint(2)), uint(_GLF_IDENTITY(uvec4(clamp(_GLF_IDENTITY(uint(2), 0u | _GLF_IDENTITY((_GLF_IDENTITY(uint(2), 1u * (uint(2)))), (_GLF_IDENTITY((_GLF_IDENTITY(uint(2), 1u * (uint(2)))), ~ (~ ((_GLF_IDENTITY(uint(_GLF_IDENTITY(2, int(ivec4(2, 1, 1, 0)))), 1u * (uint(2)))))))) + (0u << _GLF_IDENTITY(uint(3u), uint(3u))))), _GLF_IDENTITY(uint(2), ~ (~ (uint(2)))), uint(2)), ((1u << _GLF_IDENTITY(uint(3u), uint(3u))) >> _GLF_IDENTITY(uint(3u), uint(3u))), 0u, 1u), (uvec4(clamp(_GLF_IDENTITY(uint(2), 0u | _GLF_IDENTITY((_GLF_IDENTITY(uint(2), 1u * (uint(2)))), (_GLF_IDENTITY((_GLF_IDENTITY(uint(2), 1u * (uint(2)))), ~ (~ ((_GLF_IDENTITY(uint(2), 1u * (uint(2)))))))) + (0u << _GLF_IDENTITY(uint(3u), uint(3u))))), _GLF_IDENTITY(uint(2), ~ (~ _GLF_IDENTITY((uint(2)), ((uint(2))) | ((uint(2)))))), uint(2)), ((1u << _GLF_IDENTITY(uint(3u), _GLF_IDENTITY(uint(3u), (0u << _GLF_IDENTITY(uint(7u), _GLF_IDENTITY(uint(7u), (uint(7u)) >> 0u))) + (uint(3u))))) >> _GLF_IDENTITY(uint(3u), uint(3u))), 0u, 1u)) * uvec4(1u, 1u, 1u, 1u)))), 1u, 0u, 0u))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(clamp(_GLF_IDENTITY(uint(2), 0u | (_GLF_IDENTITY(uint(2), 1u * (uint(2))))), _GLF_IDENTITY(uint(2), ~ (~ (uint(2)))), uint(2)), uint(uvec4(_GLF_IDENTITY(clamp(_GLF_IDENTITY(uint(2), 0u | _GLF_IDENTITY((_GLF_IDENTITY(uint(2), _GLF_IDENTITY(1u, 0u + (1u)) * (uint(2)))), (_GLF_IDENTITY((_GLF_IDENTITY(uint(2), 1u * (uint(2)))), ~ (~ ((_GLF_IDENTITY(uint(2), 1u * (uint(2)))))))) + (0u << _GLF_IDENTITY(uint(3u), uint(3u))))), _GLF_IDENTITY(uint(2), ~ (~ (uint(2)))), uint(2)), uint(_GLF_IDENTITY(uvec4(clamp(_GLF_IDENTITY(uint(2), 0u | _GLF_IDENTITY((_GLF_IDENTITY(uint(2), 1u * (uint(2)))), (_GLF_IDENTITY((_GLF_IDENTITY(uint(_GLF_IDENTITY(2, (2) | (_GLF_IDENTITY(2, min(_GLF_IDENTITY(2, ~ (~ (2))), 2))))), _GLF_IDENTITY(1u * (uint(2)), uint(uvec4(_GLF_IDENTITY(1u * (uint(2)), uint(uvec3(1u * (uint(2)), 1u, (0u & 167413u)))), 1u, 1u, 1u))))), _GLF_IDENTITY(~ (~ ((_GLF_IDENTITY(uint(2), 1u * (uint(2)))))), clamp(~ (~ ((_GLF_IDENTITY(uint(2), 1u * (uint(2)))))), ~ (~ ((_GLF_IDENTITY(uint(2), 1u * (uint(2)))))), ~ (~ ((_GLF_IDENTITY(uint(2), 1u * (uint(2)))))))))) + (0u << _GLF_IDENTITY(uint(3u), uint(3u))))), _GLF_IDENTITY(uint(2), ~ (~ (uint(2)))), uint(2)), ((_GLF_IDENTITY(1u, (1u) | (1u)) << _GLF_IDENTITY(uint(3u), uint(3u))) >> _GLF_IDENTITY(uint(3u), uint(3u))), 0u, 1u), (uvec4(clamp(_GLF_IDENTITY(uint(2), 0u | _GLF_IDENTITY((_GLF_IDENTITY(uint(2), 1u * (uint(2)))), (_GLF_IDENTITY((_GLF_IDENTITY(uint(2), 1u * (uint(2)))), ~ (~ ((_GLF_IDENTITY(uint(2), 1u * (uint(2)))))))) + (0u << _GLF_IDENTITY(uint(3u), uint(3u))))), _GLF_IDENTITY(uint(2), ~ (~ (uint(2)))), uint(2)), ((1u << _GLF_IDENTITY(uint(3u), uint(3u))) >> _GLF_IDENTITY(uint(3u), uint(3u))), 0u, 1u)) * uvec4(1u, 1u, 1u, 1u)))), 1u, 0u, 0u)))), max(~ (_GLF_IDENTITY(clamp(_GLF_IDENTITY(uint(2), 0u | (_GLF_IDENTITY(uint(2), _GLF_IDENTITY(1u, (false ? _GLF_FUZZED(virtual_gid) : 1u)) * (uint(2))))), _GLF_IDENTITY(uint(2), ~ (~ (uint(2)))), uint(2)), uint(uvec4(_GLF_IDENTITY(clamp(_GLF_IDENTITY(uint(2), 0u | _GLF_IDENTITY((_GLF_IDENTITY(uint(_GLF_IDENTITY(2, (_GLF_IDENTITY(2, 1 * (_GLF_IDENTITY(2, (2) | 0)))) << 0)), 1u * (uint(2)))), (_GLF_IDENTITY((_GLF_IDENTITY(uint(2), 1u * (uint(2)))), ~ (~ ((_GLF_IDENTITY(uint(2), 1u * (_GLF_IDENTITY(uint(2), (0u << _GLF_IDENTITY(uint(0u), uint(0u))) | (_GLF_IDENTITY(uint(2), (uint(2)) / 1u)))))))))) + (0u << _GLF_IDENTITY(uint(3u), uint(_GLF_IDENTITY(3u, min(_GLF_IDENTITY(3u, (3u) | (3u)), 3u))))))), _GLF_IDENTITY(uint(2), ~ (~ (uint(2)))), uint(2)), uint(_GLF_IDENTITY(uvec4(clamp(_GLF_IDENTITY(uint(2), 0u | _GLF_IDENTITY((_GLF_IDENTITY(uint(2), 1u * (uint(2)))), (_GLF_IDENTITY((_GLF_IDENTITY(uint(2), 1u * (uint(2)))), ~ (~ ((_GLF_IDENTITY(uint(2), 1u * (uint(2)))))))) + (0u << _GLF_IDENTITY(uint(3u), uint(3u))))), _GLF_IDENTITY(uint(2), ~ (~ (uint(2)))), uint(2)), ((1u << _GLF_IDENTITY(uint(3u), uint(3u))) >> _GLF_IDENTITY(_GLF_IDENTITY(uint(3u), uint(3u)), clamp(_GLF_IDENTITY(uint(3u), uint(3u)), _GLF_IDENTITY(uint(3u), uint(3u)), _GLF_IDENTITY(uint(3u), uint(3u))))), 0u, 1u), (uvec4(clamp(_GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(2, (2) >> 0)), ~ (~ (_GLF_IDENTITY(uint(_GLF_IDENTITY(2, (2) >> 0)), (uint(_GLF_IDENTITY(2, (2) >> 0))) * 1u)))), 0u | _GLF_IDENTITY((_GLF_IDENTITY(uint(2), 1u * (uint(2)))), (_GLF_IDENTITY((_GLF_IDENTITY(uint(2), 1u * (uint(2)))), ~ (~ ((_GLF_IDENTITY(uint(2), 1u * (uint(2)))))))) + (0u << _GLF_IDENTITY(uint(3u), uint(3u))))), _GLF_IDENTITY(uint(2), ~ (~ (uint(2)))), uint(2)), ((1u << _GLF_IDENTITY(uint(3u), uint(3u))) >> _GLF_IDENTITY(uint(3u), uint(3u))), 0u, 1u)) * uvec4(1u, 1u, 1u, 1u)))), 1u, 0u, 0u)))), ~ (_GLF_IDENTITY(clamp(_GLF_IDENTITY(uint(2), 0u | (_GLF_IDENTITY(uint(2), 1u * (uint(2))))), _GLF_IDENTITY(uint(2), ~ (~ (uint(2)))), uint(2)), uint(uvec4(_GLF_IDENTITY(clamp(_GLF_IDENTITY(uint(2), 0u | _GLF_IDENTITY((_GLF_IDENTITY(uint(2), 1u * (uint(2)))), (_GLF_IDENTITY((_GLF_IDENTITY(uint(2), 1u * (uint(2)))), ~ (~ ((_GLF_IDENTITY(uint(2), 1u * (uint(2)))))))) + (0u << _GLF_IDENTITY(uint(3u), uint(3u))))), _GLF_IDENTITY(uint(2), ~ (~ (uint(2)))), uint(2)), uint(_GLF_IDENTITY(uvec4(clamp(_GLF_IDENTITY(uint(2), 0u | _GLF_IDENTITY((_GLF_IDENTITY(uint(2), 1u * (uint(2)))), (_GLF_IDENTITY((_GLF_IDENTITY(uint(2), 1u * (uint(2)))), ~ (~ ((_GLF_IDENTITY(_GLF_IDENTITY(uint(2), 1u * (uint(2))), uint(uvec4(_GLF_IDENTITY(uint(2), 1u * (uint(2))), 0u, 0u, 1u)))))))) + (0u << _GLF_IDENTITY(uint(3u), uint(_GLF_IDENTITY(3u, ~ (~ (3u)))))))), _GLF_IDENTITY(uint(2), ~ (~ (uint(2)))), uint(2)), ((1u << _GLF_IDENTITY(uint(3u), uint(3u))) >> _GLF_IDENTITY(uint(3u), uint(3u))), 0u, 1u), (uvec4(clamp(_GLF_IDENTITY(uint(2), 0u | _GLF_IDENTITY((_GLF_IDENTITY(uint(2), 1u * (uint(2)))), _GLF_IDENTITY((_GLF_IDENTITY((_GLF_IDENTITY(uint(2), 1u * (uint(2)))), ~ (~ ((_GLF_IDENTITY(uint(2), 1u * (uint(2)))))))) + (0u << _GLF_IDENTITY(uint(3u), uint(3u))), clamp((_GLF_IDENTITY((_GLF_IDENTITY(uint(2), 1u * (uint(2)))), ~ (~ ((_GLF_IDENTITY(uint(2), 1u * (uint(2)))))))) + (0u << _GLF_IDENTITY(uint(3u), uint(3u))), _GLF_IDENTITY((_GLF_IDENTITY((_GLF_IDENTITY(uint(2), 1u * (uint(2)))), ~ (~ ((_GLF_IDENTITY(uint(2), 1u * (uint(2)))))))) + (0u << _GLF_IDENTITY(uint(3u), uint(3u))), 0u + ((_GLF_IDENTITY((_GLF_IDENTITY(uint(2), 1u * (uint(2)))), ~ (~ ((_GLF_IDENTITY(uint(2), 1u * (uint(2)))))))) + (0u << _GLF_IDENTITY(uint(3u), uint(3u))))), _GLF_IDENTITY((_GLF_IDENTITY((_GLF_IDENTITY(uint(2), 1u * (uint(2)))), ~ (~ ((_GLF_IDENTITY(uint(2), 1u * (uint(2)))))))) + (0u << _GLF_IDENTITY(uint(3u), uint(3u))), ((_GLF_IDENTITY((_GLF_IDENTITY(uint(2), 1u * (uint(2)))), ~ (~ ((_GLF_IDENTITY(uint(2), 1u * (uint(2)))))))) + (0u << _GLF_IDENTITY(uint(3u), uint(3u)))) - 0u))))), _GLF_IDENTITY(uint(2), ~ _GLF_IDENTITY((~ (uint(2))), clamp((~ (uint(2))), (~ (uint(2))), (~ (uint(2)))))), uint(2)), ((1u << _GLF_IDENTITY(uint(3u), uint(_GLF_IDENTITY(3u, min(3u, 3u))))) >> _GLF_IDENTITY(uint(3u), uint(3u))), 0u, 1u)) * uvec4(1u, 1u, 1u, 1u)))), 1u, 0u, 0u))))))))), (_GLF_IDENTITY(uint(2), _GLF_IDENTITY(clamp(_GLF_IDENTITY(uint(2), 0u | _GLF_IDENTITY((_GLF_IDENTITY(uint(2), 1u * (uint(2)))), ((_GLF_IDENTITY(uint(2), 1u * (uint(2))))) | 0u)), _GLF_IDENTITY(_GLF_IDENTITY(uint(2), _GLF_IDENTITY(~ (~ _GLF_IDENTITY((_GLF_IDENTITY(uint(2), (true ? uint(2) : _GLF_FUZZED(88880u)))), clamp((_GLF_IDENTITY(uint(2), (true ? uint(2) : _GLF_FUZZED(88880u)))), (_GLF_IDENTITY(uint(2), (true ? uint(2) : _GLF_FUZZED(88880u)))), (_GLF_IDENTITY(uint(2), (true ? uint(2) : _GLF_FUZZED(88880u))))))), (_GLF_IDENTITY(~ (~ _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(uint(2), (true ? uint(2) : _GLF_FUZZED(88880u))), (_GLF_IDENTITY(uint(2), (true ? uint(2) : _GLF_FUZZED(88880u)))) ^ 0u)), clamp((_GLF_IDENTITY(uint(2), (true ? uint(2) : _GLF_FUZZED(88880u)))), (_GLF_IDENTITY(uint(2), (true ? uint(2) : _GLF_FUZZED(88880u)))), (_GLF_IDENTITY(uint(2), (true ? uint(2) : _GLF_FUZZED(88880u))))))), (_GLF_IDENTITY(~ (~ _GLF_IDENTITY((_GLF_IDENTITY(uint(2), (true ? uint(2) : _GLF_FUZZED(88880u)))), clamp((_GLF_IDENTITY(uint(2), (true ? uint(2) : _GLF_FUZZED(88880u)))), (_GLF_IDENTITY(uint(2), (true ? uint(2) : _GLF_FUZZED(88880u)))), (_GLF_IDENTITY(uint(2), (true ? uint(2) : _GLF_FUZZED(88880u))))))), ~ (~ (~ (~ _GLF_IDENTITY((_GLF_IDENTITY(uint(2), (true ? uint(2) : _GLF_FUZZED(88880u)))), clamp((_GLF_IDENTITY(uint(2), (true ? uint(2) : _GLF_FUZZED(88880u)))), (_GLF_IDENTITY(uint(2), (true ? uint(2) : _GLF_FUZZED(88880u)))), (_GLF_IDENTITY(uint(2), (true ? uint(2) : _GLF_FUZZED(88880u))))))))))) | 0u)) / uint(_GLF_ONE(1.0, injectionSwitch.y)))), (_GLF_IDENTITY(uint(2), _GLF_IDENTITY(~ (~ _GLF_IDENTITY((_GLF_IDENTITY(uint(2), (true ? uint(2) : _GLF_FUZZED(88880u)))), clamp((_GLF_IDENTITY(uint(2), (true ? uint(2) : _GLF_FUZZED(88880u)))), (_GLF_IDENTITY(uint(2), (true ? uint(2) : _GLF_FUZZED(88880u)))), (_GLF_IDENTITY(uint(2), (true ? uint(2) : _GLF_FUZZED(88880u))))))), (_GLF_IDENTITY(~ (~ _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(uint(2), (true ? uint(2) : _GLF_FUZZED(88880u))), (_GLF_IDENTITY(uint(2), _GLF_IDENTITY((true ? uint(2) : _GLF_FUZZED(88880u)), ~ (~ ((true ? uint(2) : _GLF_FUZZED(88880u))))))) ^ 0u)), clamp((_GLF_IDENTITY(uint(2), (true ? uint(2) : _GLF_FUZZED(88880u)))), (_GLF_IDENTITY(uint(2), (true ? uint(2) : _GLF_FUZZED(88880u)))), (_GLF_IDENTITY(uint(2), (true ? uint(2) : _GLF_FUZZED(88880u))))))), _GLF_IDENTITY((_GLF_IDENTITY(~ (~ _GLF_IDENTITY((_GLF_IDENTITY(uint(2), (true ? uint(2) : _GLF_FUZZED(88880u)))), clamp((_GLF_IDENTITY(uint(2), (true ? uint(2) : _GLF_FUZZED(88880u)))), (_GLF_IDENTITY(uint(2), (true ? uint(2) : _GLF_FUZZED(88880u)))), (_GLF_IDENTITY(uint(2), (true ? uint(2) : _GLF_FUZZED(88880u))))))), ~ (~ (~ (~ _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(uint(2), 0u ^ (uint(2))), (true ? uint(2) : _GLF_FUZZED(88880u)))), clamp((_GLF_IDENTITY(uint(2), (true ? uint(2) : _GLF_FUZZED(88880u)))), _GLF_IDENTITY((_GLF_IDENTITY(uint(2), (true ? uint(2) : _GLF_FUZZED(_GLF_IDENTITY(88880u, (88880u) / uint(_GLF_ONE(1.0, injectionSwitch.y))))))), max(_GLF_IDENTITY((_GLF_IDENTITY(uint(2), (true ? uint(2) : _GLF_FUZZED(_GLF_IDENTITY(88880u, (88880u) / uint(_GLF_ONE(1.0, injectionSwitch.y))))))), ((_GLF_IDENTITY(uint(2), (true ? uint(2) : _GLF_FUZZED(_GLF_IDENTITY(88880u, (88880u) / uint(_GLF_ONE(1.0, injectionSwitch.y)))))))) - 0u), (_GLF_IDENTITY(uint(2), (true ? uint(2) : _GLF_FUZZED(_GLF_IDENTITY(88880u, (88880u) / uint(_GLF_ONE(1.0, injectionSwitch.y))))))))), (_GLF_IDENTITY(uint(2), (true ? uint(2) : _GLF_FUZZED(88880u))))))))))), min((_GLF_IDENTITY(~ (~ _GLF_IDENTITY((_GLF_IDENTITY(uint(2), (true ? uint(2) : _GLF_FUZZED(88880u)))), clamp((_GLF_IDENTITY(uint(2), (true ? uint(2) : _GLF_FUZZED(88880u)))), (_GLF_IDENTITY(uint(2), (true ? uint(2) : _GLF_FUZZED(88880u)))), (_GLF_IDENTITY(uint(2), (true ? uint(2) : _GLF_FUZZED(88880u))))))), ~ (~ (~ (~ _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(uint(2), 0u ^ (uint(2))), (true ? uint(2) : _GLF_FUZZED(88880u)))), clamp((_GLF_IDENTITY(uint(2), (true ? uint(2) : _GLF_FUZZED(88880u)))), _GLF_IDENTITY((_GLF_IDENTITY(uint(2), (true ? uint(2) : _GLF_FUZZED(_GLF_IDENTITY(88880u, (88880u) / uint(_GLF_ONE(1.0, injectionSwitch.y))))))), max(_GLF_IDENTITY((_GLF_IDENTITY(uint(2), (true ? uint(2) : _GLF_FUZZED(_GLF_IDENTITY(88880u, (88880u) / uint(_GLF_ONE(1.0, injectionSwitch.y))))))), ((_GLF_IDENTITY(uint(2), (true ? uint(2) : _GLF_FUZZED(_GLF_IDENTITY(88880u, (88880u) / uint(_GLF_ONE(1.0, injectionSwitch.y)))))))) - 0u), (_GLF_IDENTITY(uint(2), (true ? uint(2) : _GLF_FUZZED(_GLF_IDENTITY(88880u, (88880u) / uint(_GLF_ONE(1.0, injectionSwitch.y))))))))), (_GLF_IDENTITY(uint(2), (true ? uint(2) : _GLF_FUZZED(88880u))))))))))), (_GLF_IDENTITY(~ (~ _GLF_IDENTITY((_GLF_IDENTITY(uint(2), (true ? uint(2) : _GLF_FUZZED(88880u)))), clamp((_GLF_IDENTITY(uint(2), (true ? uint(2) : _GLF_FUZZED(88880u)))), (_GLF_IDENTITY(uint(2), (true ? uint(2) : _GLF_FUZZED(88880u)))), (_GLF_IDENTITY(uint(2), (true ? uint(2) : _GLF_FUZZED(88880u))))))), ~ (~ (~ (~ _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(uint(2), 0u ^ (uint(2))), (true ? uint(2) : _GLF_FUZZED(88880u)))), clamp((_GLF_IDENTITY(uint(2), (true ? uint(2) : _GLF_FUZZED(88880u)))), _GLF_IDENTITY((_GLF_IDENTITY(uint(2), (true ? uint(2) : _GLF_FUZZED(_GLF_IDENTITY(88880u, (88880u) / uint(_GLF_ONE(1.0, injectionSwitch.y))))))), max(_GLF_IDENTITY((_GLF_IDENTITY(uint(2), (true ? uint(2) : _GLF_FUZZED(_GLF_IDENTITY(88880u, (88880u) / uint(_GLF_ONE(1.0, injectionSwitch.y))))))), ((_GLF_IDENTITY(uint(2), (true ? uint(2) : _GLF_FUZZED(_GLF_IDENTITY(88880u, (88880u) / uint(_GLF_ONE(1.0, injectionSwitch.y)))))))) - 0u), (_GLF_IDENTITY(uint(2), (true ? uint(2) : _GLF_FUZZED(_GLF_IDENTITY(88880u, (88880u) / uint(_GLF_ONE(1.0, injectionSwitch.y))))))))), (_GLF_IDENTITY(uint(2), (true ? uint(2) : _GLF_FUZZED(88880u))))))))))))) | 0u)) / uint(_GLF_ONE(1.0, injectionSwitch.y))))) / ((1u << _GLF_IDENTITY(uint(2u), uint(2u))) >> _GLF_IDENTITY(uint(2u), _GLF_IDENTITY(uint(2u), uint(uint(uint(2u))))))), uint(2)), _GLF_IDENTITY(uint(uvec4(clamp(_GLF_IDENTITY(uint(2), 0u | (_GLF_IDENTITY(uint(2), 1u * (uint(2))))), _GLF_IDENTITY(uint(_GLF_IDENTITY(2, clamp(2, 2, 2))), ~ (~ _GLF_IDENTITY((uint(2)), 0u | (_GLF_IDENTITY((uint(2)), ((uint(2))) >> 0u))))), uint(2)), 1u, 0u, _GLF_IDENTITY(0u, (0u) + 0u))), uint(uvec3(uint(uvec4(clamp(_GLF_IDENTITY(uint(2), 0u | (_GLF_IDENTITY(uint(2), 1u * (uint(2))))), _GLF_IDENTITY(uint(_GLF_IDENTITY(2, clamp(_GLF_IDENTITY(2, (false ? _GLF_FUZZED(-45827) : 2)), 2, 2))), ~ (~ (uint(_GLF_IDENTITY(2, max(2, 2)))))), uint(_GLF_IDENTITY(2, 0 + (2)))), 1u, 0u, 0u)), 0u, 0u)))))) | (_GLF_IDENTITY(0u << _GLF_IDENTITY(uint(2u), uint(2u)), (0u << _GLF_IDENTITY(uint(2u), uint(2u))) - 0u))), _GLF_IDENTITY(4, _GLF_IDENTITY(int(ivec2(_GLF_IDENTITY(4, _GLF_IDENTITY(~ (~ (4)), (_GLF_IDENTITY(~ (~ (4)), ~ (_GLF_IDENTITY(~ (~ (~ (4))), min(~ (~ (~ (4))), ~ (~ (~ (4)))))))) / 1)), 1)), (int(ivec2(_GLF_IDENTITY(4, ~ _GLF_IDENTITY((~ (4)), ((~ (4))) / 1)), 1))) * _GLF_IDENTITY(1, 0 ^ (1)))), 64, 4);
                }
               while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bvec3(false, true, false)))));
              }
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               if(_GLF_DEAD(false))
                barrier();
              }
             else
              {
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_DEAD(false))
              {
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(1, clamp(1, 1, 1))); _injected_loop_counter ++)
                {
                 barrier();
                }
              }
            }
          }
         else
          {
           do
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
            }
           while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))));
           if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(_GLF_IDENTITY(false, (false) || false))) || _GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(false, _GLF_IDENTITY(false, true && (false))), bvec2(bvec2(bvec2(false, _GLF_IDENTITY(false, true && (false))))))), ! (! (bool(_GLF_IDENTITY(bvec2(false, _GLF_IDENTITY(false, true && (false))), bvec2(bvec2(bvec2(false, _GLF_IDENTITY(false, true && (false)))))))))))))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           do
            {
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _GLF_IDENTITY(_injected_loop_counter --, 1 * (_GLF_IDENTITY(_injected_loop_counter --, (false ? _GLF_FUZZED(_GLF_IDENTITY(_injected_loop_counter, (_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) + 0)) ^ _GLF_IDENTITY(0, (0) / 1))) : _GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) | 0))))))
              {
               if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (false)))))
                {
                }
               else
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   do
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        barrier();
                       for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(3), int(3))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 & 1)); _injected_loop_counter ++)
                        {
                         barrier();
                        }
                      }
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), true && (bool(false)))))))
                    {
                     do
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        {
                         if(_GLF_DEAD(false))
                          barrier();
                         for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), int(ivec3(int(5), 1, (0 | 0)))))) >> _GLF_IDENTITY(int(5), int(5))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                          {
                           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                            barrier();
                           barrier();
                          }
                        }
                      }
                     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                     if(_GLF_DEAD(false))
                      barrier();
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                      }
                     else
                      {
                       if(_GLF_DEAD(false))
                        barrier();
                      }
                     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        {
                         if(_GLF_DEAD(false))
                          {
                           if(_GLF_DEAD(false))
                            barrier();
                           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                            {
                             barrier();
                            }
                           else
                            {
                             if(_GLF_DEAD(false))
                              barrier();
                             if(_GLF_DEAD(false))
                              barrier();
                            }
                          }
                         if(_GLF_DEAD(false))
                          barrier();
                         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, ! (! (false))))))))
                          {
                           if(_GLF_DEAD(false))
                            barrier();
                           barrier();
                          }
                         if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (false)))))
                          {
                          }
                         else
                          {
                           if(_GLF_DEAD(false))
                            barrier();
                           barrier();
                          }
                        }
                      }
                     else
                      {
                      }
                     if(_GLF_DEAD(false))
                      barrier();
                     barrier();
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_DEAD(false))
                        barrier();
                       barrier();
                       if(_GLF_DEAD(false))
                        barrier();
                      }
                    }
                   if(_GLF_DEAD(false))
                    barrier();
                   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, false)))))
                    {
                     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 >> _GLF_IDENTITY(int(8), int(8)))); _injected_loop_counter --)
                      {
                       if(_GLF_DEAD(false))
                        {
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          barrier();
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          barrier();
                         barrier();
                        }
                      }
                     barrier();
                    }
                   do
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).x > injectionSwitch.y))))
                      {
                       if(_GLF_DEAD(false))
                        {
                         if(_GLF_WRAPPED_IF_TRUE(true))
                          {
                           if(_GLF_DEAD(false))
                            {
                             if(_GLF_DEAD(false))
                              barrier();
                             barrier();
                            }
                          }
                         else
                          {
                          }
                         barrier();
                        }
                       barrier();
                      }
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                  }
                 else
                  {
                   if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, false || (false))) && true)))
                    barrier();
                  }
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 else
                  {
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(true, (true) || false) && (_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), false))))))
                      {
                       if(_GLF_DEAD(false))
                        barrier();
                       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), (_GLF_WRAPPED_IF_TRUE(true)) && true)) && true))
                        {
                         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                          {
                           barrier();
                          }
                        }
                       else
                        {
                        }
                      }
                    }
                   else
                    {
                    }
                  }
                 subgroupAll(false);
                 if(_GLF_DEAD(false))
                  barrier();
                }
              }
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
           atomicStore(buf[_GLF_IDENTITY(next_virtual_gid, min(_GLF_IDENTITY(next_virtual_gid, min(next_virtual_gid, next_virtual_gid)), _GLF_IDENTITY(next_virtual_gid, max(next_virtual_gid, _GLF_IDENTITY(next_virtual_gid, (next_virtual_gid) / 1u)))))], uint(2), 4, 64, 4);
          }
        }
       else
        {
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     do
      {
       for(int _injected_loop_counter = (1 | 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
        {
         if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false))))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 if(_GLF_DEAD(false))
  barrier();
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 >> _GLF_IDENTITY(int(3), int(3)))); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    barrier();
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
