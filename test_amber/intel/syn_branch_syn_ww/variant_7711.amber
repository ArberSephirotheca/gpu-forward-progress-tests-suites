#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(log2(-0.4)) : injectionSwitch.y))))))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       barrier();
      }
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) || false), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + 0.0) > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) || false))))))
      barrier();
    }
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
  {
   do
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       barrier();
      }
    }
   while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0))) - log(vec2(1.0, 1.0))).y, mix(float(_GLF_FUZZED(-9.3)), float(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0))) - log(vec2(1.0, 1.0))).y, clamp(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0))) - log(vec2(1.0, 1.0))).y, _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0))) - log(vec2(1.0, 1.0))).y, _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0))) - log(vec2(1.0, 1.0))).y))), bool(true)))))), true && _GLF_IDENTITY((_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0))) - log(vec2(1.0, _GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-8.8)), bool(false)))))).y, (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0))) - log(vec2(1.0, _GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-8.8)), bool(false)))))).y) - determinant(mat2(0.0, 1.0, 0.0, 0.0))))))), ((_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0))) - log(vec2(1.0, _GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-8.8)), bool(false)))))).y))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))));
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false)), true, true), bvec3(bvec3(bvec3(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false)), true, true))))))))), false || (_GLF_IDENTITY(false, ! (! (false)))))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
    barrier();
  }
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), (int(_GLF_ZERO(0.0, injectionSwitch.x))) << 0)); _injected_loop_counter --)
  {
   do
    {
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         barrier();
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
    barrier();
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, true && (false))), bool(bvec3(! (_GLF_IDENTITY(false, true && (false))), false, false)))))), _GLF_IDENTITY(bool(bvec3(_GLF_DEAD(false), _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0))), _GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec3(true, false, true)), ! (_GLF_IDENTITY(! (bool(bvec3(true, false, true))), false || (! (bool(bvec3(true, false, true)))))))))), (bool(bvec3(_GLF_DEAD(false), _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0))), _GLF_IDENTITY(true, bool(bvec3(true, false, true)))))) && true)))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
  }
 uint num_workgroup = _GLF_IDENTITY(gl_NumWorkGroups.x, (_GLF_TRUE(_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, (true) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(gl_NumWorkGroups.x, ~ (~ (gl_NumWorkGroups.x))) : _GLF_FUZZED(usubBorrow(subgroup_id, 63649u, subgroup_id))));
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           barrier();
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, false || (false))))), (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             barrier();
            }
          }
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            {
             do
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], max(injectionSwitch[1], injectionSwitch[1])))).x > injectionSwitch.y))))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                   do
                    {
                     barrier();
                    }
                   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, (false) || false), (injectionSwitch.x > injectionSwitch.y))));
                  }
                 barrier();
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
             barrier();
            }
          }
        }
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = _GLF_IDENTITY(workgroup_size * workgroup_id, min(workgroup_size * workgroup_id, workgroup_size * workgroup_id));
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat4(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), 1.0, determinant(mat3(1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0)), 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, exp(0.0), 0.0, 1.0, 1.0), (true ? mat4(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), 1.0, determinant(mat3(1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0)), 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, exp(0.0), 0.0, _GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-85.97)))) + 0.0), 1.0) : _GLF_FUZZED(mat4(-7.4, 843.293, -5.5, _GLF_IDENTITY(9.2, (false ? _GLF_FUZZED((- 31.66)) : 9.2)), 898.665, -9217.1143, -2.1, -6.2, -794.946, 63.61, 3649.5683, 34.09, -981.386, 4279.0313, 399.661, -7237.1730)))))).y))))
  barrier();
 do
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, false || _GLF_IDENTITY(_GLF_IDENTITY((false), bool(bool(_GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), false || (! ((false))))))))), bool(bvec3((false), true, false))))));
 do
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     do
      {
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
          {
           barrier();
          }
        }
       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) || false)))
        {
        }
       else
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     for(int _injected_loop_counter = ((1 ^ (1 ^ 0)) << _GLF_IDENTITY(int(0), int(0))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   else
    {
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).y))));
 uint subgroup_base = subgroup_id * subgroup_size;
 uint virtual_gid = workgroup_base + subgroup_base + subgroup_local_id;
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ! (! ((injectionSwitch.x < injectionSwitch.y)))))), ! (! (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))
  {
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), min(_GLF_IDENTITY(int(2), int(ivec3(int(2), 1, 1))), int(2))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5)))); _injected_loop_counter ++)
      {
       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), ! (! (_GLF_WRAPPED_IF_FALSE(false))))))))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).x > injectionSwitch.y))))
          barrier();
        }
      }
    }
  }
 else
  {
  }
 uint next_virtual_gid = workgroup_base + subgroup_base + ((subgroup_local_id + 1) % subgroup_size);
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       for(int _injected_loop_counter = _GLF_IDENTITY(1, ~ (~ (1))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           for(int _injected_loop_counter = (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(2, (1 ^ 1) ^ (2))), _GLF_IDENTITY(int(2), (int(_GLF_IDENTITY(2, _GLF_IDENTITY(int(_GLF_IDENTITY(ivec4(_GLF_IDENTITY(2, (2) ^ (0 ^ 0)), 0, 0, 0), ~ (~ (ivec4(_GLF_IDENTITY(2, (2) ^ (0 ^ 0)), 0, 0, 0))))), 0 ^ (int(_GLF_IDENTITY(ivec4(_GLF_IDENTITY(2, (2) ^ (0 ^ 0)), 0, 0, 0), ~ (~ (ivec4(_GLF_IDENTITY(2, (2) ^ (0 ^ 0)), 0, 0, 0)))))))))) | (int(2))))), min(_GLF_IDENTITY((1 << _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (int(2)) | (int(2))))), int(ivec2((1 << _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (int(2)) | (int(2))))), 1))), (1 << _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(_GLF_IDENTITY(2, (_GLF_IDENTITY(2, (2) + 0)) << 0)), (int(2)) | (int(2))))))) >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), int(ivec3(int(2), 0, 0))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(((5726.5829 + 95.12) - -70.62))), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) < _GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)).y))))
              {
               if(_GLF_DEAD(false))
                barrier();
              }
             else
              {
              }
            }
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
          }
         if(_GLF_DEAD(false))
          barrier();
        }
      }
     else
      {
      }
     do
      {
       do
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(3), int(_GLF_IDENTITY(3, (3) | 0)))) >> _GLF_IDENTITY(int(3), int(3)))); _injected_loop_counter ++)
          {
           for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(6), int(6))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) | 0))
            {
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, (0) | (0))); _injected_loop_counter --)
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 do
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   barrier();
                   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
                    {
                     do
                      {
                       barrier();
                      }
                     while(_GLF_WRAPPED_LOOP(false));
                    }
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
               if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), true && (_GLF_WRAPPED_IF_FALSE(false))))
                {
                }
               else
                {
                 do
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
               if(_GLF_DEAD(false))
                {
                 for(int _injected_loop_counter = ((1 & _GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) | (1))) - 0)) ^ 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, ~ (~ (1)))); _injected_loop_counter ++)
                  {
                   if(_GLF_DEAD(false))
                    {
                     for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                      {
                       if(_GLF_DEAD(false))
                        barrier();
                      }
                     if(_GLF_DEAD(false))
                      barrier();
                     barrier();
                    }
                  }
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                  {
                   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                    {
                     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                      {
                       barrier();
                      }
                     else
                      {
                      }
                    }
                  }
                 else
                  {
                  }
                }
               if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(false), (bool(false)) || false), bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(bool(false), (bool(false)) || false), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(bool(false), (bool(false)) || false), bool(bvec4(_GLF_IDENTITY(bool(false), (bool(false)) || false), true, true, true)))))), _GLF_IDENTITY(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), _GLF_IDENTITY(bool(bool((injectionSwitch.x < injectionSwitch.y))), ! (! (bool(bool((injectionSwitch.x < injectionSwitch.y)))))))), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), _GLF_IDENTITY(bool(bool((injectionSwitch.x < injectionSwitch.y))), ! (! (bool(bool((injectionSwitch.x < injectionSwitch.y)))))))), bool(bvec2(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), _GLF_IDENTITY(bool(bool((injectionSwitch.x < injectionSwitch.y))), ! (! (bool(bool((injectionSwitch.x < injectionSwitch.y)))))))), false))), true, false, true)), bool(bool(_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), _GLF_IDENTITY(bool(bool((injectionSwitch.x < injectionSwitch.y))), ! (! (bool(bool((injectionSwitch.x < injectionSwitch.y)))))))), bool(bvec2(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), _GLF_IDENTITY(bool(bool((injectionSwitch.x < injectionSwitch.y))), ! (! (bool(bool((injectionSwitch.x < injectionSwitch.y)))))))), false))), true, false, true)), ! (! (bool(bvec4(_GLF_IDENTITY(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), _GLF_IDENTITY(bool(bool((injectionSwitch.x < injectionSwitch.y))), ! (! (bool(bool((injectionSwitch.x < injectionSwitch.y)))))))), bool(bvec2(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), _GLF_IDENTITY(bool(bool((injectionSwitch.x < injectionSwitch.y))), ! (! (bool(bool((injectionSwitch.x < injectionSwitch.y)))))))), false))), true, false, true))))))))), _GLF_IDENTITY(true, (true) || false))))), bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(bool(_GLF_IDENTITY(bool(false), (bool(false)) || false))), (_GLF_IDENTITY(bool(bool(_GLF_IDENTITY(bool(false), (bool(false)) || false))), (bool(bool(_GLF_IDENTITY(bool(false), (bool(false)) || false)))) || false)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec3(bool(bool(_GLF_IDENTITY(bool(false), (bool(false)) || _GLF_IDENTITY(false, ! (! (false)))))), _GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, _GLF_IDENTITY((false) || _GLF_IDENTITY(false, (false) && true), (_GLF_IDENTITY((false) || false, _GLF_IDENTITY((_GLF_IDENTITY((false) || false, ! _GLF_IDENTITY((! ((false) || _GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (_GLF_IDENTITY(! (! (false)), (! (! (false))) || false))))))), false || ((! ((false) || _GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (_GLF_IDENTITY(! (! (false)), (! (! (false))) || false))))))))))), ! (! ((_GLF_IDENTITY((false) || false, ! (! ((false) || _GLF_IDENTITY(false, ! (! (false)))))))))) && true)) && _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(-999.047)), vec2(_GLF_FUZZED(float(true)), _GLF_IDENTITY((injectionSwitch)[1], min(_GLF_IDENTITY((injectionSwitch)[1], clamp((injectionSwitch)[1], (injectionSwitch)[1], (injectionSwitch)[1])), (injectionSwitch)[1]))), bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))).y)))))), true)))))), (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (bool(false)))))) || false), (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (bool(false)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (bool(false))))))))) || false)) && true))))) && _GLF_TRUE(true, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x)), (true ? injectionSwitch.x : _GLF_FUZZED(-9576.8088))) < injectionSwitch.y))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(asin(injectionSwitch)) : injectionSwitch)).y))))
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                  barrier();
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   barrier();
                   if(_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false)))), true), _GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec3(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false)))), true), false), bvec3(bvec3(bvec3(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false)))), true), false))))), bvec2(bvec4(bvec2(_GLF_IDENTITY(bvec3(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false)))), true), false), bvec3(bvec3(bvec3(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false)))), true), false))))), true, false)))))))
                    barrier();
                   for(int _injected_loop_counter = (0 ^ _GLF_IDENTITY(0, _GLF_IDENTITY((_GLF_IDENTITY(0, clamp(0, 0, 0))), ((_GLF_IDENTITY(0, clamp(0, 0, 0)))) ^ (70130 & 0)) | (0))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                    {
                     do
                      {
                       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), ! (! ((false))))))))
                        barrier();
                       if(_GLF_DEAD(false))
                        {
                         do
                          {
                           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 | 0)); _injected_loop_counter ++)
                            {
                             barrier();
                            }
                          }
                         while(_GLF_WRAPPED_LOOP(false));
                         if(_GLF_DEAD(false))
                          barrier();
                        }
                      }
                     while(_GLF_WRAPPED_LOOP(false));
                    }
                   if(_GLF_DEAD(false))
                    barrier();
                   do
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                  }
                 else
                  {
                  }
                }
              }
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           barrier();
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), bool(bvec3(_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), bool(bool((injectionSwitch.x < injectionSwitch.y)))), true, true))))))
        {
         barrier();
        }
       else
        {
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], clamp(injectionSwitch[1], injectionSwitch[1], injectionSwitch[1])))).y, float(mat3x2(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), 1.0, 1.0, 1.0, 1.0, 1.0)))))))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             barrier();
            }
           else
            {
            }
          }
         else
          {
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
        {
         do
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), true && (_GLF_IDENTITY(false, ! (! (false)))))))
              barrier();
             barrier();
            }
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), (! ((injectionSwitch.x > injectionSwitch.y))) && true))))))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, false || (false))))
        {
        }
       else
        {
         barrier();
        }
      }
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       do
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                }
               else
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
                  barrier();
                 barrier();
                }
              }
             else
              {
              }
            }
          }
         else
          {
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
     else
      {
      }
    }
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       barrier();
      }
     else
      {
      }
    }
  }
 for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > (1 ^ 1)); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       barrier();
      }
     else
      {
      }
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (false))))))))
  {
  }
 else
  {
   do
    {
     atomicStore(buf[_GLF_IDENTITY(virtual_gid, (virtual_gid) + 0u)], uint(1), _GLF_IDENTITY(4, int(_GLF_ONE(1.0, injectionSwitch.y)) * (4)), 64, 4);
    }
   while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), _GLF_IDENTITY(true && (_GLF_WRAPPED_LOOP(false)), (_GLF_IDENTITY(true && (_GLF_WRAPPED_LOOP(false)), ! (! (_GLF_IDENTITY(true && (_GLF_WRAPPED_LOOP(false)), false || (true && (_GLF_WRAPPED_LOOP(false)))))))) && true)));
  }
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != 0, _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter != 0, true && _GLF_IDENTITY((_GLF_IDENTITY(_injected_loop_counter != 0, bool(bvec2(_injected_loop_counter != 0, false)))), bool(_GLF_IDENTITY(bvec3((_GLF_IDENTITY(_injected_loop_counter != 0, bool(bvec2(_injected_loop_counter != 0, false)))), true, false), bvec3(bvec3(bvec3((_GLF_IDENTITY(_injected_loop_counter != 0, bool(bvec2(_injected_loop_counter != 0, false)))), true, false))))))), false || (_GLF_IDENTITY(_injected_loop_counter != 0, ! (! (_injected_loop_counter != 0))))), true)), false || (_GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(_injected_loop_counter != 0, false || (_GLF_IDENTITY(_injected_loop_counter != 0, ! (! (_injected_loop_counter != 0))))), true)), ! (! (bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) - (0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(0), int(0)), ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (_GLF_IDENTITY(int(0), int(0))), min(~ (_GLF_IDENTITY(int(0), int(0))), _GLF_IDENTITY(~ _GLF_IDENTITY((_GLF_IDENTITY(int(0), int(0))), ((_GLF_IDENTITY(int(0), int(0)))) / 1), 1 * (_GLF_IDENTITY(~ _GLF_IDENTITY((_GLF_IDENTITY(int(0), int(0))), ((_GLF_IDENTITY(int(0), int(0)))) | 0), (~ (_GLF_IDENTITY(int(0), int(0)))) / 1))))), (_GLF_IDENTITY(~ (_GLF_IDENTITY(int(0), int(0))), (~ (_GLF_IDENTITY(int(0), int(0)))) >> _GLF_IDENTITY(0, (0) >> (0 | 0)))) + 0))))) != 0, false || (_GLF_IDENTITY(_injected_loop_counter != 0, ! (! (_GLF_IDENTITY(_injected_loop_counter != 0, _GLF_IDENTITY(bool(bvec2(_injected_loop_counter != 0, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (bool(bvec2(_injected_loop_counter != 0, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) && true))))))), true), _GLF_IDENTITY(bvec2(bvec4(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) - (0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(0), int(0)), ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (_GLF_IDENTITY(int(0), int(0))), min(~ (_GLF_IDENTITY(int(0), int(0))), _GLF_IDENTITY(~ (_GLF_IDENTITY(int(0), int(0))), _GLF_IDENTITY(1, max(1, 1)) * (_GLF_IDENTITY(~ (_GLF_IDENTITY(int(0), int(0))), (~ (_GLF_IDENTITY(int(0), int(0)))) / 1))))), (_GLF_IDENTITY(~ (_GLF_IDENTITY(int(0), int(0))), (~ (_GLF_IDENTITY(int(0), int(0)))) >> 0)) + 0))))) != 0, false || (_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter != 0, ! (! (_GLF_IDENTITY(_injected_loop_counter != 0, _GLF_IDENTITY(bool(bvec2(_injected_loop_counter != 0, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (bool(bvec2(_injected_loop_counter != 0, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) && true))))), ! (! (_GLF_IDENTITY(_injected_loop_counter != 0, ! (! (_GLF_IDENTITY(_injected_loop_counter != 0, _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec2(_injected_loop_counter != 0, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (bool(bvec2(_injected_loop_counter != 0, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) && true), bool(bvec3(_GLF_IDENTITY(bool(bvec2(_injected_loop_counter != 0, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (bool(bvec2(_injected_loop_counter != 0, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) && true), false, true)))))))))))), true), false, _GLF_IDENTITY(false, false || (false)))), bvec2(bvec2(bvec2(bvec4(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) - (0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(0), int(0)), ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (_GLF_IDENTITY(int(0), int(0))), min(~ (_GLF_IDENTITY(int(0), int(0))), _GLF_IDENTITY(~ (_GLF_IDENTITY(int(0), int(0))), 1 * (_GLF_IDENTITY(~ (_GLF_IDENTITY(int(0), int(0))), (~ (_GLF_IDENTITY(int(0), int(0)))) / 1))))), (_GLF_IDENTITY(~ (_GLF_IDENTITY(int(0), int(0))), (~ (_GLF_IDENTITY(int(0), int(0)))) >> 0)) + 0))))) != 0, false || (_GLF_IDENTITY(_injected_loop_counter != 0, ! (! (_GLF_IDENTITY(_injected_loop_counter != 0, _GLF_IDENTITY(bool(bvec2(_injected_loop_counter != 0, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (bool(bvec2(_injected_loop_counter != 0, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) && true))))))), true), false, _GLF_IDENTITY(false, false || (false)))))))))))))))); _injected_loop_counter --)
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))), _GLF_IDENTITY(false, ! (! (false))))), ! (! (bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))), false))))))))))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           barrier();
          }
         else
          {
          }
        }
       else
        {
        }
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, true, true), bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(false, true, true), bvec3(bvec4(bvec3(false, true, true), true)))), bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec3(false, true, true), bvec3(bvec4(bvec3(false, true, true), true))))))))))), true, false, true))), (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(false))
                {
                 for(int _injected_loop_counter = _GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(_injected_loop_counter))); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, (1) | 0)); _injected_loop_counter ++)
                  {
                   barrier();
                  }
                }
               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                {
                 do
                  {
                   barrier();
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false))))))), ((_GLF_IDENTITY(false, true && (false)))) || false)))));
                }
               else
                {
                }
              }
             else
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             if(_GLF_DEAD(false))
              barrier();
            }
          }
        }
      }
     do
      {
       do
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           do
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), _GLF_IDENTITY(min(int(_GLF_IDENTITY(7, (7) << (-63156 & 0))), int(7)), _GLF_IDENTITY(int(int(min(int(7), int(7)))), int(ivec2(_GLF_IDENTITY(int(int(min(int(7), int(7)))), ~ (~ (int(int(min(int(7), int(7))))))), 1))))))) >> _GLF_IDENTITY(int(7), int(7))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                    {
                     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                      {
                       barrier();
                      }
                    }
                  }
                 do
                  {
                   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                    {
                     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, sqrt(vec2(1.0, _GLF_IDENTITY(1.0, min(1.0, 1.0)))) * (injectionSwitch)).x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(_GLF_IDENTITY(true, false || (true)), false || (_GLF_IDENTITY(_GLF_IDENTITY(true, false || (true)), ! (! (_GLF_IDENTITY(true, false || (true))))))) ? injectionSwitch.y : _GLF_FUZZED(6771.4652))))), false || (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, sqrt(vec2(1.0, _GLF_IDENTITY(1.0, min(1.0, 1.0)))) * (injectionSwitch)).x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(_GLF_IDENTITY(true, false || (true)), false || (_GLF_IDENTITY(_GLF_IDENTITY(true, false || (true)), ! (! (_GLF_IDENTITY(true, false || (true))))))) ? injectionSwitch.y : _GLF_FUZZED(6771.4652))))), true && (_GLF_IDENTITY(injectionSwitch, sqrt(vec2(1.0, _GLF_IDENTITY(1.0, min(1.0, 1.0)))) * (injectionSwitch)).x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(_GLF_IDENTITY(true, false || (true)), false || (_GLF_IDENTITY(_GLF_IDENTITY(true, false || (true)), ! (! (_GLF_IDENTITY(true, false || (true))))))) ? injectionSwitch.y : _GLF_FUZZED(6771.4652))))), mix(float(_GLF_FUZZED(-2.2)), float(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(_GLF_IDENTITY(true, false || (true)), false || (_GLF_IDENTITY(_GLF_IDENTITY(true, false || (true)), ! (! (_GLF_IDENTITY(true, false || (true))))))) ? injectionSwitch.y : _GLF_FUZZED(6771.4652)))))), bool(true))))))))), _GLF_IDENTITY(false || _GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec4((_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y)))) || false))), true, true, true))), bool(_GLF_IDENTITY(bvec2(false || _GLF_IDENTITY((_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).x > injectionSwitch.y))), true && ((_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).x > injectionSwitch.y))))), true), bvec2(_GLF_IDENTITY(bvec3(bvec2(false || (_GLF_FALSE(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), _GLF_IDENTITY(bool(bool(! (false))), ! (! (_GLF_IDENTITY(bool(bool(! (false))), (_GLF_IDENTITY(bool(bool(! (false))), false || (bool(bool(! (false)))))) || false))))))))), (injectionSwitch.x > injectionSwitch.y))), true), true), bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec2(false || (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))), true), _GLF_IDENTITY(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (true)))), bvec3(bvec3(bvec3(bvec3(bvec2(false || (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! _GLF_IDENTITY((! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(-222.975))))), ((! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(-222.975)))))) || false))))), true), _GLF_IDENTITY(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (true))))))))))))))))
                      {
                       if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), true, false, false))), ! (_GLF_IDENTITY(! _GLF_IDENTITY((_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), true, false, false)))), false || ((_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), true, false, false)))))), ! (! (! (_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), true, false, false)))))))))))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), true, false, false))), ! (_GLF_IDENTITY(! _GLF_IDENTITY((_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), true, false, false)))), false || ((_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), true, false, false)))))), ! (! (! (_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), _GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(true, bool(bvec4(true, false, true, true))), true, true, true)), true && (bool(bvec4(_GLF_IDENTITY(true, bool(bvec4(true, false, true, true))), true, true, true)))))))), false, false)))))))))))), bool(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), true, false, false))), ! (_GLF_IDENTITY(! _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), true, false, false)))), false || ((_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), true, false, false)))))), bool(bvec4(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), true, false, false)))), false || ((_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), true, false, false)))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, false))), ! (! (! (_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), true, false, false)))))))))))), false, false)))) || false))
                        barrier();
                       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) - 0) != int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, ! (! (true)))))) ? injectionSwitch.x : _GLF_FUZZED(4.6)))))); _injected_loop_counter --)
                        {
                         if(_GLF_WRAPPED_IF_TRUE(true))
                          {
                           if(_GLF_WRAPPED_IF_TRUE(true))
                            {
                             if(_GLF_DEAD(false))
                              {
                               if(_GLF_DEAD(false))
                                barrier();
                               barrier();
                              }
                             barrier();
                             if(_GLF_DEAD(false))
                              {
                               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                                {
                                 barrier();
                                }
                              }
                            }
                           else
                            {
                            }
                           if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
                            barrier();
                          }
                         else
                          {
                          }
                         if(_GLF_DEAD(false))
                          barrier();
                        }
                       if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), true && (! (true))))) && (_GLF_DEAD(false))))))
                        {
                         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(injectionSwitch.x > injectionSwitch.y, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), bvec3(bvec3(bvec3(injectionSwitch.x > injectionSwitch.y, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))))), ! (! (bool(_GLF_IDENTITY(bvec3(injectionSwitch.x > injectionSwitch.y, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), bvec3(bvec3(bvec3(injectionSwitch.x > injectionSwitch.y, _GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true), ! (! (injectionSwitch.x > injectionSwitch.y))))), true)))))))))))))
                          {
                          }
                         else
                          {
                           do
                            {
                             if(_GLF_DEAD(false))
                              barrier();
                             barrier();
                            }
                           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(_GLF_IDENTITY(bvec2(injectionSwitch.x > injectionSwitch.y, true), bvec2(bvec3(_GLF_IDENTITY(bvec2(injectionSwitch.x > injectionSwitch.y, true), bvec2(bvec3(bvec2(injectionSwitch.x > injectionSwitch.y, true), false))), false)))))))));
                          }
                        }
                       if(_GLF_DEAD(false))
                        {
                         do
                          {
                           barrier();
                          }
                         while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) || false));
                        }
                       if(_GLF_DEAD(false))
                        barrier();
                      }
                    }
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
               else
                {
                 if(_GLF_DEAD(false))
                  barrier();
                }
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_DEAD(false))
                  {
                   for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0)))); _injected_loop_counter --)
                    {
                     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), (_GLF_IDENTITY(false, false || (false))) && true)))
                      {
                      }
                     else
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-0.5)), float(injectionSwitch.x), bool(true))) > injectionSwitch.y))))
                        {
                         if(_GLF_WRAPPED_IF_TRUE(true))
                          {
                           barrier();
                          }
                         else
                          {
                          }
                         if(_GLF_DEAD(false))
                          {
                           do
                            {
                             if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, false || (false))))
                              {
                              }
                             else
                              {
                               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                {
                                 if(_GLF_WRAPPED_IF_TRUE(true))
                                  {
                                   barrier();
                                  }
                                 else
                                  {
                                  }
                                }
                              }
                             if(_GLF_DEAD(false))
                              barrier();
                             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 << _GLF_IDENTITY(int(4), int(4)))); _injected_loop_counter --)
                              {
                               barrier();
                              }
                            }
                           while(_GLF_WRAPPED_LOOP(false));
                           if(_GLF_DEAD(false))
                            barrier();
                           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                            {
                             if(_GLF_DEAD(false))
                              {
                               if(_GLF_WRAPPED_IF_FALSE(false))
                                {
                                }
                               else
                                {
                                 barrier();
                                }
                              }
                            }
                           else
                            {
                            }
                          }
                         if(_GLF_DEAD(false))
                          {
                           if(_GLF_WRAPPED_IF_TRUE(true))
                            {
                             barrier();
                            }
                           else
                            {
                            }
                          }
                        }
                      }
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        barrier();
                       barrier();
                      }
                     if(_GLF_DEAD(false))
                      barrier();
                     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 & 1)); _injected_loop_counter ++)
                      {
                       barrier();
                      }
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                   do
                    {
                     barrier();
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                  }
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                  {
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                     barrier();
                    }
                  }
                 else
                  {
                  }
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) && true)))
                  {
                   if((subgroup_local_id % 2) == 0)
                    {
                     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(_GLF_IDENTITY(1.0, _GLF_IDENTITY((1.0), _GLF_IDENTITY(_GLF_IDENTITY(min(_GLF_IDENTITY((1.0), mix(float(_GLF_FUZZED(6539.7510)), float(_GLF_IDENTITY((1.0), _GLF_IDENTITY(max((1.0), (1.0)), (_GLF_IDENTITY(max((1.0), (1.0)), clamp(max((1.0), (1.0)), max((1.0), (1.0)), max((1.0), (1.0))))) - 0.0))), _GLF_IDENTITY(bool(true), ! (! (bool(true)))))), (1.0)), (_GLF_IDENTITY(min(_GLF_IDENTITY(_GLF_IDENTITY((1.0), mix(float(_GLF_FUZZED(6539.7510)), float(_GLF_IDENTITY((1.0), _GLF_IDENTITY(max((1.0), (1.0)), (_GLF_IDENTITY(max((1.0), (1.0)), clamp(max((1.0), (1.0)), max((1.0), (1.0)), _GLF_IDENTITY(max((1.0), (1.0)), (true ? max((1.0), (1.0)) : _GLF_FUZZED(1286.2113)))))) - determinant(mat2(tan(0.0), 0.0, 1.0, 0.0))))), _GLF_IDENTITY(bool(true), ! (! (bool(true)))))), _GLF_IDENTITY(min(_GLF_IDENTITY((1.0), mix(float(_GLF_FUZZED(6539.7510)), float(_GLF_IDENTITY((1.0), max((1.0), (1.0)))), _GLF_IDENTITY(bool(true), ! (! (bool(true)))))), _GLF_IDENTITY((1.0), mix(float(_GLF_FUZZED(6539.7510)), float(_GLF_IDENTITY((1.0), max((1.0), (1.0)))), _GLF_IDENTITY(bool(true), ! (_GLF_IDENTITY(! (bool(true)), bool(bvec4(! (bool(true)), true, true, false)))))))), 0.0 + (min(_GLF_IDENTITY((1.0), mix(float(_GLF_FUZZED(6539.7510)), float(_GLF_IDENTITY((1.0), max((1.0), (1.0)))), _GLF_IDENTITY(bool(true), ! (! (bool(true)))))), _GLF_IDENTITY((1.0), mix(float(_GLF_FUZZED(6539.7510)), float(_GLF_IDENTITY((1.0), max((1.0), (1.0)))), _GLF_IDENTITY(bool(true), ! (_GLF_IDENTITY(! (bool(true)), bool(bvec4(! (bool(true)), true, true, false))))))))))), (1.0)), max(min(_GLF_IDENTITY((1.0), mix(float(_GLF_FUZZED(6539.7510)), float(_GLF_IDENTITY((1.0), max((1.0), (1.0)))), _GLF_IDENTITY(bool(true), ! (! (_GLF_IDENTITY(bool(_GLF_IDENTITY(true, bool(bvec2(true, true)))), (bool(_GLF_IDENTITY(true, bool(bvec2(true, true))))) && true)))))), (1.0)), min(_GLF_IDENTITY((1.0), mix(float(_GLF_FUZZED(6539.7510)), _GLF_IDENTITY(float(_GLF_IDENTITY((1.0), max((1.0), (1.0)))), 0.0 + (float(_GLF_IDENTITY((1.0), max((1.0), (1.0)))))), _GLF_IDENTITY(bool(true), _GLF_IDENTITY(! (! (bool(true))), bool(bvec2(! (! (bool(true))), false)))))), (1.0))))) - 0.0), (_GLF_IDENTITY(min(_GLF_IDENTITY((1.0), mix(float(_GLF_FUZZED(6539.7510)), float(_GLF_IDENTITY((1.0), _GLF_IDENTITY(max((1.0), (1.0)), (_GLF_IDENTITY(max((1.0), (1.0)), clamp(max((1.0), (1.0)), max((1.0), (1.0)), max((1.0), (1.0))))) - 0.0))), _GLF_IDENTITY(bool(true), ! (! (bool(true)))))), (1.0)), (_GLF_IDENTITY(min(_GLF_IDENTITY(_GLF_IDENTITY((1.0), mix(float(_GLF_FUZZED(6539.7510)), float(_GLF_IDENTITY((1.0), _GLF_IDENTITY(max((1.0), (1.0)), (_GLF_IDENTITY(max((1.0), (1.0)), clamp(max((1.0), (1.0)), max((1.0), (1.0)), _GLF_IDENTITY(max((1.0), (1.0)), (true ? max((1.0), (1.0)) : _GLF_FUZZED(1286.2113)))))) - determinant(mat2(tan(0.0), 0.0, 1.0, 0.0))))), _GLF_IDENTITY(bool(true), ! (! (bool(true)))))), _GLF_IDENTITY(min(_GLF_IDENTITY((_GLF_IDENTITY(1.0, (1.0) - 0.0)), mix(float(_GLF_FUZZED(6539.7510)), float(_GLF_IDENTITY((1.0), max((1.0), (1.0)))), _GLF_IDENTITY(bool(true), ! (! (bool(true)))))), _GLF_IDENTITY((1.0), mix(float(_GLF_FUZZED(6539.7510)), float(_GLF_IDENTITY(_GLF_IDENTITY((1.0), float(_GLF_IDENTITY(mat3x4((1.0), 0.0, length(vec3(0.0, 0.0, 0.0)), _GLF_ONE(1.0, injectionSwitch.y), abs(1.0), 0.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(0.0, 1.0, 1.0)), _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(0.0, 1.0, 1.0)), min(dot(vec3(1.0, 0.0, 0.0), vec3(0.0, 1.0, 1.0)), dot(vec3(1.0, 0.0, 0.0), vec3(0.0, 1.0, 1.0))))), 1.0, 1.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, log(1.0))), dot(vec2(1.0, 0.0), vec2(1.0, log(1.0)))), 1.0, 1.0), _GLF_IDENTITY(mat4(1.0) * (mat3x4((1.0), 0.0, length(vec3(0.0, 0.0, 0.0)), _GLF_ONE(1.0, injectionSwitch.y), abs(1.0), 0.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(0.0, 1.0, 1.0)), _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(0.0, 1.0, 1.0)), min(dot(vec3(1.0, 0.0, 0.0), vec3(0.0, 1.0, 1.0)), dot(vec3(1.0, 0.0, 0.0), vec3(0.0, 1.0, 1.0))))), 1.0, 1.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, log(1.0))), dot(vec2(1.0, 0.0), vec2(1.0, log(1.0)))), 1.0, 1.0)), mat3x4(mat3x4(mat4(1.0) * (mat3x4((1.0), 0.0, length(vec3(0.0, 0.0, 0.0)), _GLF_ONE(1.0, injectionSwitch.y), abs(1.0), 0.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(0.0, 1.0, 1.0)), _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(0.0, 1.0, 1.0)), min(dot(vec3(1.0, 0.0, 0.0), vec3(0.0, 1.0, 1.0)), dot(vec3(1.0, 0.0, 0.0), vec3(0.0, 1.0, 1.0))))), 1.0, 1.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, log(1.0))), dot(vec2(1.0, 0.0), vec2(1.0, log(1.0)))), 1.0, 1.0)))))))), max((1.0), (1.0)))), _GLF_IDENTITY(bool(true), ! (_GLF_IDENTITY(! (bool(true)), bool(bvec4(! (bool(true)), true, true, false)))))))), 0.0 + (min(_GLF_IDENTITY((1.0), mix(_GLF_IDENTITY(float(_GLF_IDENTITY(_GLF_FUZZED(6539.7510), clamp(_GLF_FUZZED(6539.7510), _GLF_FUZZED(6539.7510), _GLF_FUZZED(6539.7510)))), float(float(float(_GLF_IDENTITY(_GLF_FUZZED(6539.7510), clamp(_GLF_FUZZED(6539.7510), _GLF_FUZZED(6539.7510), _GLF_FUZZED(6539.7510))))))), float(_GLF_IDENTITY((1.0), max((1.0), (1.0)))), _GLF_IDENTITY(bool(true), ! (! (bool(true)))))), _GLF_IDENTITY((1.0), mix(float(_GLF_FUZZED(6539.7510)), float(_GLF_IDENTITY((1.0), max((1.0), (1.0)))), _GLF_IDENTITY(bool(true), ! (_GLF_IDENTITY(! (bool(true)), bool(bvec4(! (bool(true)), true, true, false))))))))))), (1.0)), max(min(_GLF_IDENTITY((1.0), mix(float(_GLF_FUZZED(6539.7510)), float(_GLF_IDENTITY((1.0), max((1.0), (1.0)))), _GLF_IDENTITY(_GLF_IDENTITY(bool(true), ! (! (_GLF_IDENTITY(bool(_GLF_IDENTITY(true, bool(bvec2(true, true)))), (bool(_GLF_IDENTITY(true, bool(bvec2(true, true))))) && true)))), bool(bool(_GLF_IDENTITY(bool(true), ! (! (_GLF_IDENTITY(bool(_GLF_IDENTITY(true, bool(bvec2(true, true)))), (bool(_GLF_IDENTITY(true, bool(bvec2(true, true))))) && true))))))))), (1.0)), min(_GLF_IDENTITY((1.0), mix(float(_GLF_FUZZED(6539.7510)), _GLF_IDENTITY(float(_GLF_IDENTITY((1.0), max((1.0), (1.0)))), 0.0 + (float(_GLF_IDENTITY((1.0), max((1.0), (1.0)))))), _GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_IDENTITY(true, (true) && true)), (bool(_GLF_IDENTITY(true, (true) && true))) || false), _GLF_IDENTITY(! (! (bool(true))), bool(bvec2(! (! (bool(true))), false)))))), (1.0))))) - 0.0)) - sin(0.0))) - determinant(_GLF_IDENTITY(mat2(0.0, _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), 0.0, tan(0.0)), _GLF_IDENTITY((mat2(0.0, 1.0, _GLF_IDENTITY(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), _GLF_IDENTITY(float(mat4(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), 0.0, 1.0, 0.0, 1.0, abs(0.0), 0.0, 0.0, 1.0, 0.0, sqrt(log(1.0)), 1.0, 0.0, 0.0, 1.0, abs(1.0))), float(vec3(float(mat4(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), 0.0, 1.0, 0.0, 1.0, abs(0.0), 0.0, 0.0, 1.0, 0.0, sqrt(log(1.0)), 1.0, 0.0, 0.0, 1.0, abs(1.0))), 0.0, 1.0)))), tan(0.0))), _GLF_IDENTITY(mat2(mat3x2(_GLF_IDENTITY((mat2(0.0, 1.0, 0.0, tan(0.0))), ((mat2(0.0, 1.0, 0.0, tan(0.0)))) - mat2(0.0, 0.0, 0.0, 0.0)))), mat2(mat3x2(mat2(mat3x2(_GLF_IDENTITY(_GLF_IDENTITY((mat2(0.0, 1.0, 0.0, tan(0.0))), ((mat2(0.0, 1.0, 0.0, tan(0.0)))) - mat2(0.0, 0.0, 0.0, 0.0)), ((_GLF_IDENTITY(mat2(0.0, 1.0, 0.0, tan(0.0)), (mat2(0.0, 1.0, 0.0, tan(0.0))) / mat2(1.0, 1.0, 1.0, 1.0)))) - mat2(0.0, 0.0, 0.0, 0.0)))))))) / mat2(1.0, 1.0, 1.0, 1.0)))), injectionSwitch.y))); _injected_loop_counter ++)
                      {
                       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                        {
                         do
                          {
                           do
                            {
                             if(_GLF_WRAPPED_IF_TRUE(true))
                              {
                               if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, vec2(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)).x)) + (injectionSwitch)).x < injectionSwitch.y), bool(bvec2((_GLF_IDENTITY(injectionSwitch, vec2(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)) + (injectionSwitch)).x < injectionSwitch.y), false))))), bool(bvec4(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true, true, true))))
                                {
                                 atomicStore(buf[next_virtual_gid], _GLF_IDENTITY(uint(2), min(uint(2), uint(2))), _GLF_IDENTITY(4, min(_GLF_IDENTITY(4, ~ (~ (4))), _GLF_IDENTITY(_GLF_IDENTITY(4, (4) - int(_GLF_ZERO(0.0, injectionSwitch.x))), (_GLF_IDENTITY(_GLF_IDENTITY(4, (4) - int(_GLF_ZERO(0.0, injectionSwitch.x))), (_GLF_IDENTITY(4, (4) - int(_GLF_ZERO(0.0, injectionSwitch.x)))) | 0)) | (_GLF_IDENTITY(4, (4) - int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x))))))), 64, 4);
                                 if(_GLF_DEAD(false))
                                  barrier();
                                 if(_GLF_DEAD(false))
                                  barrier();
                                 if(_GLF_DEAD(false))
                                  {
                                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                    barrier();
                                   barrier();
                                  }
                                }
                               else
                                {
                                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y))))
                                  {
                                   if(_GLF_WRAPPED_IF_FALSE(false))
                                    {
                                    }
                                   else
                                    {
                                     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 | (0 << _GLF_IDENTITY(int(6), int(6))))); _injected_loop_counter ++)
                                      {
                                       barrier();
                                      }
                                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                      barrier();
                                    }
                                  }
                                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                  {
                                   for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), (int(7)) ^ 0)), (_GLF_IDENTITY(int(7), _GLF_IDENTITY(_GLF_IDENTITY(int(7), (int(7)) ^ 0), (_GLF_IDENTITY(_GLF_IDENTITY(int(7), (int(7)) ^ 0), (_GLF_IDENTITY(_GLF_IDENTITY(int(7), (int(7)) ^ 0), (_GLF_IDENTITY(int(7), (int(7)) ^ 0)) ^ 0)) | (_GLF_IDENTITY(_GLF_IDENTITY(int(7), (int(7)) ^ 0), (_GLF_IDENTITY(int(7), (int(7)) ^ 0)) | (_GLF_IDENTITY(int(7), (int(7)) ^ 0)))))) | 0))) | (_GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), (int(7)) ^ 0))))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(7), max(int(7), int(7))), int(7))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, clamp(_injected_loop_counter, _injected_loop_counter, _injected_loop_counter)) != _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), (int(_GLF_ZERO(0.0, injectionSwitch.x))) - 0)); _injected_loop_counter --)
                                    {
                                     barrier();
                                    }
                                  }
                                }
                              }
                             else
                              {
                               if(_GLF_DEAD(false))
                                barrier();
                               if(_GLF_DEAD(false))
                                barrier();
                               for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(_GLF_IDENTITY(1, (1) << (0 | 0))), (true ? int(_GLF_IDENTITY(1, (1) << (0 | 0))) : _GLF_FUZZED(_injected_loop_counter))))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                                {
                                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                  barrier();
                                 if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false))))))))))))) && true))
                                  barrier();
                                }
                               for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(_GLF_IDENTITY(8, min(8, _GLF_IDENTITY(8, clamp(8, 8, 8))))), _GLF_IDENTITY(int(8), (int(8)) ^ 0))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (_GLF_IDENTITY(_GLF_IDENTITY((1 << _GLF_IDENTITY(int(3), int(3))), ((1 << _GLF_IDENTITY(int(3), int(3)))) << 0) >> _GLF_IDENTITY(int(3), int(3)), (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(3), int(3))), ((1 << _GLF_IDENTITY(int(3), int(3)))) << 0) >> _GLF_IDENTITY(int(3), int(3))) + 0))); _injected_loop_counter ++)
                                {
                                 if(_GLF_DEAD(false))
                                  barrier();
                                }
                              }
                             if(_GLF_DEAD(false))
                              {
                               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < ((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2)))); _injected_loop_counter ++)
                                {
                                 if(_GLF_DEAD(false))
                                  barrier();
                                 barrier();
                                }
                              }
                            }
                           while(_GLF_WRAPPED_LOOP(false));
                          }
                         while(_GLF_WRAPPED_LOOP(false));
                        }
                      }
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], min(_GLF_IDENTITY(injectionSwitch[0], clamp(injectionSwitch[0], injectionSwitch[0], injectionSwitch[0])), _GLF_IDENTITY(injectionSwitch[0], max(injectionSwitch[0], injectionSwitch[_GLF_IDENTITY(0, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(_injected_loop_counter) : 0))])))), injectionSwitch[1])), injectionSwitch)).y))))
                      {
                       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(false, ! (! (false))) || (false))))
                        {
                         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                          {
                           if(_GLF_DEAD(false))
                            {
                             if(_GLF_WRAPPED_IF_TRUE(true))
                              {
                               barrier();
                              }
                             else
                              {
                              }
                            }
                          }
                         else
                          {
                           for(int _injected_loop_counter = int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])))).y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                            {
                             for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), (int(7)) + 0))); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, (1) / 1)); _injected_loop_counter ++)
                              {
                               for(int _injected_loop_counter = (0 | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                                {
                                 if(_GLF_DEAD(false))
                                  {
                                   if(_GLF_DEAD(false))
                                    barrier();
                                   barrier();
                                  }
                                }
                              }
                            }
                          }
                        }
                       else
                        {
                         if(_GLF_DEAD(false))
                          barrier();
                         do
                          {
                           if(_GLF_DEAD(false))
                            barrier();
                          }
                         while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) && true)));
                         if(_GLF_DEAD(false))
                          barrier();
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          barrier();
                         barrier();
                        }
                      }
                    }
                   else
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      {
                       if(_GLF_WRAPPED_IF_TRUE(true))
                        {
                         barrier();
                        }
                       else
                        {
                        }
                      }
                     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), ! (! (_GLF_IDENTITY(false, ! (! (false))))))))
                      {
                       if(_GLF_DEAD(false))
                        barrier();
                       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(false || (false), false || (_GLF_IDENTITY(false || (false), ! (! (_GLF_IDENTITY(false || (false), false || (false || (false)))))))))))
                        {
                        }
                       else
                        {
                         barrier();
                        }
                       if(_GLF_DEAD(false))
                        {
                         do
                          {
                           barrier();
                          }
                         while(_GLF_WRAPPED_LOOP(false));
                        }
                      }
                     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(max(injectionSwitch, injectionSwitch), (max(injectionSwitch, injectionSwitch)) + vec2(0.0, 0.0))).y)), bool(bvec4(_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (injectionSwitch.x > injectionSwitch.y)), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (injectionSwitch.x < injectionSwitch.y) || false))), false, _GLF_IDENTITY(_GLF_TRUE(true, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, false || (injectionSwitch.x < injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) < injectionSwitch.y)))), false || (_GLF_IDENTITY(! (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) < injectionSwitch.y)))), bool(bvec4(! (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) < injectionSwitch.y)))), true, false, true))))))))), _GLF_IDENTITY(! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_TRUE(true, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, false || (injectionSwitch.x < injectionSwitch.y)), ! (! (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) < injectionSwitch.y)))))))), ! (! (_GLF_TRUE(true, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, false || (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) < injectionSwitch.y)), ! (! (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(-7.4, 89.98)))).x, injectionSwitch.x)) < injectionSwitch.y)))))))))))), ! (! (! (_GLF_IDENTITY(_GLF_TRUE(true, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, _GLF_IDENTITY(false || (injectionSwitch.x < injectionSwitch.y), (false || (injectionSwitch.x < injectionSwitch.y)) || false)), ! (! (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, _GLF_IDENTITY(! (! (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) < injectionSwitch.y)), false || (! (! (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) < injectionSwitch.y)))))))))), ! (! (_GLF_TRUE(true, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, false || (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) < injectionSwitch.y)), ! (! (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(-7.4, 89.98)))).x, injectionSwitch.x)) < injectionSwitch.y)))))))))))))))), (! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_TRUE(true, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, false || (_GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(mat3x2(injectionSwitch.x, _GLF_ONE(1.0, injectionSwitch.y), 1.0, 1.0, log(1.0), sqrt(1.0)), transpose(transpose(mat3x2(injectionSwitch.x, _GLF_ONE(1.0, injectionSwitch.y), 1.0, 1.0, log(1.0), sqrt(1.0))))))) < injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) < injectionSwitch.y))), (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) < injectionSwitch.y)))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))), ! (! (_GLF_TRUE(true, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, false || (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) < injectionSwitch.y)), ! (! (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(-7.4, 89.98)))).x, injectionSwitch.x)) < injectionSwitch.y)))))))))))), ! (! (! (_GLF_IDENTITY(_GLF_TRUE(true, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, _GLF_IDENTITY(false || (injectionSwitch.x < injectionSwitch.y), (false || (injectionSwitch.x < injectionSwitch.y)) || false)), ! (! (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, _GLF_IDENTITY(! _GLF_IDENTITY((! _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) < injectionSwitch.y), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) < injectionSwitch.y), false || ((_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) < injectionSwitch.y)))), (bool(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) < injectionSwitch.y), false || ((_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) < injectionSwitch.y))))) || false)), bool(bvec2(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) < injectionSwitch.y), false || ((_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) < injectionSwitch.y)))), (bool(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) < injectionSwitch.y), false || ((_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) < injectionSwitch.y))))) || false)), true))))), ! (! (_GLF_IDENTITY((! _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) < injectionSwitch.y), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) < injectionSwitch.y), false || ((_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) < injectionSwitch.y)))), (bool(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) < injectionSwitch.y), false || ((_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) < injectionSwitch.y))))) || false)), bool(bvec2(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) < injectionSwitch.y), false || ((_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) < injectionSwitch.y)))), (bool(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) < injectionSwitch.y), false || ((_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) < injectionSwitch.y))))) || false)), true))))), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY((! _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) < injectionSwitch.y), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) < injectionSwitch.y), false || ((_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) < injectionSwitch.y)))), (bool(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) < injectionSwitch.y), false || ((_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) < injectionSwitch.y))))) || false)), bool(bvec2(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) < injectionSwitch.y), false || ((_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) < injectionSwitch.y)))), (bool(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) < injectionSwitch.y), false || ((_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) < injectionSwitch.y))))) || false)), true))))), bool(bvec3((! _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) < injectionSwitch.y), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) < injectionSwitch.y), false || ((_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) < injectionSwitch.y)))), (bool(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) < injectionSwitch.y), false || ((_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) < injectionSwitch.y))))) || false)), bool(bvec2(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) < injectionSwitch.y), false || ((_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) < injectionSwitch.y)))), (bool(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) < injectionSwitch.y), false || ((_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) < injectionSwitch.y))))) || false)), true))))), true, true))), true)), ! (! (bool(bvec2(_GLF_IDENTITY((! _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) < injectionSwitch.y), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) < injectionSwitch.y), false || ((_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) < injectionSwitch.y)))), (bool(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) < injectionSwitch.y), false || ((_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) < injectionSwitch.y))))) || false)), bool(bvec2(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) < injectionSwitch.y), false || ((_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) < injectionSwitch.y)))), (bool(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) < injectionSwitch.y), false || ((_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) < injectionSwitch.y))))) || false)), true))))), bool(bvec3((! _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) < injectionSwitch.y), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) < injectionSwitch.y), false || ((_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) < injectionSwitch.y)))), (bool(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) < injectionSwitch.y), false || ((_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) < injectionSwitch.y))))) || false)), bool(bvec2(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) < injectionSwitch.y), false || ((_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) < injectionSwitch.y)))), (bool(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) < injectionSwitch.y), false || ((_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) < injectionSwitch.y))))) || false)), true))))), true, true))), true))))))))), false || (! (! (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) < injectionSwitch.y)))))))))), _GLF_IDENTITY(! (! (_GLF_TRUE(true, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, false || (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) < injectionSwitch.y)), ! (! (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(-7.4, 89.98)))).x, injectionSwitch.x)) < injectionSwitch.y)))))))))), _GLF_IDENTITY(bool(bvec3(! (! (_GLF_TRUE(true, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, false || (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) < injectionSwitch.y)), ! (! (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(-7.4, 89.98)))).x, injectionSwitch.x)) < injectionSwitch.y)))))))))), false, true)), ! (_GLF_IDENTITY(! (bool(bvec3(! (! (_GLF_TRUE(true, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, false || (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) < injectionSwitch.y)), ! (! (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(-7.4, 89.98)))).x, injectionSwitch.x)) < injectionSwitch.y)))))))))), false, true))), true && (! (bool(bvec3(! (! (_GLF_TRUE(true, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, false || (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) < injectionSwitch.y)), ! (! (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(-7.4, 89.98)))).x, injectionSwitch.x)) < injectionSwitch.y)))))))))), false, true))))))))))))))) || false)))))))
                      {
                       if(_GLF_DEAD(false))
                        {
                         for(int _injected_loop_counter = _GLF_IDENTITY((0 >> _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), (int(_GLF_IDENTITY(3, ~ (~ (3))))) | (_GLF_IDENTITY(int(3), clamp(int(3), int(3), int(3))))))), (false ? _GLF_FUZZED(_injected_loop_counter) : (0 >> _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), (int(_GLF_IDENTITY(3, ~ (~ (3))))) | (_GLF_IDENTITY(int(3), clamp(int(3), int(3), int(3))))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                          {
                           barrier();
                          }
                        }
                       if(_GLF_WRAPPED_IF_FALSE(false))
                        {
                        }
                       else
                        {
                         barrier();
                        }
                      }
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_DEAD(false))
                        barrier();
                       barrier();
                      }
                     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                      {
                       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (true)))))
                        {
                         if(_GLF_DEAD(false))
                          barrier();
                        }
                       else
                        {
                        }
                       atomicStore(buf[next_virtual_gid], uint(_GLF_IDENTITY(2, (true ? _GLF_IDENTITY(2, (_GLF_IDENTITY(false ? _GLF_FUZZED(5341) : 2, min(false ? _GLF_FUZZED(5341) : 2, _GLF_IDENTITY(false ? _GLF_FUZZED(5341) : 2, ~ (~ (false ? _GLF_FUZZED(5341) : 2))))))) : _GLF_FUZZED(70887)))), _GLF_IDENTITY(4, max(_GLF_IDENTITY(4, ~ (~ (4))), 4)), 64, 4);
                      }
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_DEAD(false))
                        {
                         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_GLF_IDENTITY(_injected_loop_counter, (false ? _GLF_FUZZED(8018) : _injected_loop_counter))) | 0) < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
                          {
                           barrier();
                          }
                        }
                       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                        {
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          barrier();
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat2(injectionSwitch, 1.0, abs(0.0)), _GLF_IDENTITY(mat2(mat2(_GLF_IDENTITY(mat2(injectionSwitch, 1.0, abs(0.0)), (true ? mat2(injectionSwitch, 1.0, abs(0.0)) : _GLF_FUZZED(_GLF_IDENTITY(mat2(5.1, -345.642, 3283.9104, 274.828), mat2(mat3(_GLF_IDENTITY(mat2(5.1, -345.642, 3283.9104, 274.828), (true ? _GLF_IDENTITY(_GLF_IDENTITY(mat2(5.1, -345.642, 3283.9104, 274.828), mat2(_GLF_IDENTITY(mat3(mat2(5.1, -345.642, 3283.9104, 274.828)), (mat3(mat2(5.1, -345.642, 3283.9104, 274.828))) + mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))), mat2(mat3x4(mat2(5.1, -345.642, 3283.9104, 274.828)))) : _GLF_FUZZED(mat2(4.8, 1.7, 8909.4960, -38.10)))))))))))), (false ? _GLF_FUZZED(mat2(-948.575, -98.28, 0.7, 9.9)) : _GLF_IDENTITY(mat2(mat2(_GLF_IDENTITY(mat2(injectionSwitch, 1.0, abs(0.0)), (true ? mat2(injectionSwitch, 1.0, abs(0.0)) : _GLF_FUZZED(_GLF_IDENTITY(mat2(5.1, -345.642, 3283.9104, 274.828), mat2(mat3(_GLF_IDENTITY(mat2(5.1, -345.642, 3283.9104, 274.828), (true ? _GLF_IDENTITY(_GLF_IDENTITY(mat2(5.1, -345.642, 3283.9104, 274.828), mat2(_GLF_IDENTITY(_GLF_IDENTITY(mat3(mat2(5.1, -345.642, 3283.9104, 274.828)), (mat3(mat2(5.1, -345.642, 3283.9104, 274.828))) + mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), mat3(mat3(_GLF_IDENTITY(mat3(mat2(5.1, -345.642, 3283.9104, 274.828)), (mat3(mat2(5.1, -345.642, 3283.9104, 274.828))) + mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))))))), mat2(mat3x4(mat2(5.1, -345.642, 3283.9104, 274.828)))) : _GLF_FUZZED(mat2(4.8, 1.7, 8909.4960, -38.10)))))))))))), mat2(mat4(mat2(mat2(_GLF_IDENTITY(mat2(injectionSwitch, 1.0, abs(0.0)), (true ? mat2(injectionSwitch, 1.0, abs(0.0)) : _GLF_FUZZED(_GLF_IDENTITY(mat2(5.1, -345.642, 3283.9104, 274.828), mat2(mat3(_GLF_IDENTITY(mat2(5.1, -345.642, 3283.9104, 274.828), (true ? _GLF_IDENTITY(_GLF_IDENTITY(mat2(5.1, -345.642, 3283.9104, 274.828), mat2(_GLF_IDENTITY(mat3(mat2(5.1, -345.642, 3283.9104, 274.828)), (mat3(mat2(5.1, -345.642, 3283.9104, 274.828))) + mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))), mat2(mat3x4(mat2(5.1, -345.642, 3283.9104, 274.828)))) : _GLF_FUZZED(mat2(4.8, 1.7, 8909.4960, -38.10)))))))))))))))))))), mix(vec2(_GLF_FUZZED(880.698), _GLF_FUZZED((-1986.6450))), vec2(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat2(injectionSwitch, 1.0, _GLF_IDENTITY(abs(0.0), clamp(abs(0.0), abs(0.0), abs(_GLF_IDENTITY(0.0, min(0.0, 0.0)))))), mat2(mat2(_GLF_IDENTITY(mat2(injectionSwitch, 1.0, abs(0.0)), (true ? _GLF_IDENTITY(mat2(injectionSwitch, 1.0, abs(0.0)), (_GLF_IDENTITY(true, _GLF_IDENTITY(! (_GLF_IDENTITY(! (true), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(! (true)), bool(_GLF_IDENTITY(bvec3(bool(! (true)), false, false), bvec3(bvec4(bvec3(bool(! (true)), false, false), false)))))), (bool(_GLF_IDENTITY(bool(! (true)), bool(_GLF_IDENTITY(bvec3(bool(! (true)), false, false), bvec3(bvec4(bvec3(bool(! (true)), false, false), false))))))) || false))), (! (_GLF_IDENTITY(! (true), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(! (true)), bool(_GLF_IDENTITY(bvec3(bool(! (true)), false, false), bvec3(bvec4(bvec3(bool(! (true)), false, false), false)))))), (bool(_GLF_IDENTITY(bool(! (true)), bool(_GLF_IDENTITY(bvec3(bool(! (true)), false, false), bvec3(bvec4(bvec3(bool(! (true)), false, false), false))))))) || false)))) || false)) ? _GLF_IDENTITY(mat2(injectionSwitch, 1.0, abs(0.0)), (true ? mat2(injectionSwitch, 1.0, abs(0.0)) : _GLF_FUZZED(((+ mat2(8.1, 4550.4736, 842.355, -912.494)) / 827.548)))) : _GLF_FUZZED(mat2(-8341.1964, _GLF_IDENTITY(3302.6587, 0.0 + (3302.6587)), _GLF_IDENTITY(20.20, (20.20) - 0.0), -527.404)))) : _GLF_FUZZED(mat2(5.1, -345.642, 3283.9104, 274.828)))))))))), mat2(1.0) * ((_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat2(injectionSwitch, 1.0, _GLF_IDENTITY(abs(0.0), clamp(abs(0.0), abs(0.0), abs(_GLF_IDENTITY(0.0, min(0.0, 0.0)))))), mat2(mat2(_GLF_IDENTITY(mat2(injectionSwitch, 1.0, abs(0.0)), (true ? _GLF_IDENTITY(mat2(injectionSwitch, 1.0, abs(0.0)), (_GLF_IDENTITY(true, _GLF_IDENTITY(! (_GLF_IDENTITY(! (true), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(! (true)), bool(_GLF_IDENTITY(bvec3(bool(! (true)), false, false), bvec3(bvec4(bvec3(bool(! (true)), false, false), false)))))), (bool(_GLF_IDENTITY(bool(! (true)), bool(_GLF_IDENTITY(bvec3(bool(! (true)), false, false), bvec3(bvec4(bvec3(bool(! (true)), false, false), false))))))) || false))), (! (_GLF_IDENTITY(! (true), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(! (true)), bool(_GLF_IDENTITY(bvec3(bool(! (true)), false, false), bvec3(bvec4(bvec3(bool(! (true)), false, false), false)))))), (bool(_GLF_IDENTITY(bool(! (true)), bool(_GLF_IDENTITY(bvec3(bool(! (true)), false, false), bvec3(bvec4(bvec3(bool(! (true)), false, false), false))))))) || false)))) || false)) ? _GLF_IDENTITY(mat2(injectionSwitch, 1.0, abs(0.0)), (true ? mat2(injectionSwitch, 1.0, abs(0.0)) : _GLF_FUZZED(((+ mat2(8.1, 4550.4736, 842.355, -912.494)) / 827.548)))) : _GLF_FUZZED(mat2(-8341.1964, _GLF_IDENTITY(3302.6587, 0.0 + (3302.6587)), _GLF_IDENTITY(20.20, (20.20) - 0.0), -527.404)))) : _GLF_FUZZED(mat2(5.1, -345.642, 3283.9104, 274.828))))))))))))[0], _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat2(injectionSwitch, 1.0, abs(0.0)), mat2(mat2(_GLF_IDENTITY(mat2(injectionSwitch, 1.0, abs(0.0)), (true ? mat2(injectionSwitch, 1.0, abs(0.0)) : _GLF_IDENTITY(_GLF_FUZZED(mat2(5.1, -345.642, 3283.9104, 274.828)), (_GLF_IDENTITY(_GLF_FUZZED(mat2(_GLF_IDENTITY(5.1, max(5.1, 5.1)), -345.642, 3283.9104, 274.828)), transpose(transpose(_GLF_FUZZED(mat2(5.1, -345.642, 3283.9104, 274.828)))))) + mat2(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(_GLF_IDENTITY(1.1, clamp(_GLF_IDENTITY(1.1, (_GLF_IDENTITY(1.1, min(1.1, 1.1))) * determinant(mat4(1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0))), 1.1, 1.1))), _GLF_FUZZED(-8.6)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))) : _GLF_FUZZED(injectionSwitch))), injectionSwitch)).x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)))))))))))[1], max(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat2(injectionSwitch, 1.0, abs(0.0)), mat2(mat2(_GLF_IDENTITY(mat2(injectionSwitch, 1.0, abs(0.0)), (true ? mat2(injectionSwitch, 1.0, abs(0.0)) : _GLF_IDENTITY(_GLF_FUZZED(mat2(5.1, -345.642, 3283.9104, 274.828)), (_GLF_IDENTITY(_GLF_FUZZED(mat2(5.1, -345.642, 3283.9104, 274.828)), transpose(_GLF_IDENTITY(transpose(_GLF_FUZZED(mat2(5.1, -345.642, 3283.9104, 274.828))), (_GLF_IDENTITY(transpose(_GLF_FUZZED(mat2(5.1, -345.642, 3283.9104, 274.828))), mat2(1.0) * (transpose(_GLF_FUZZED(mat2(5.1, -345.642, 3283.9104, 274.828)))))) / mat2(1.0, 1.0, 1.0, 1.0))))) + mat2(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)), _GLF_IDENTITY(injectionSwitch, vec2(vec3(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(432.923), _GLF_FUZZED(2172.9586)), bvec2(false, false))), 1.0))))).x), _GLF_ZERO(0.0, injectionSwitch.x)))))))))))[1], (_GLF_IDENTITY(true ? (_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat2(injectionSwitch, 1.0, abs(0.0)), mat2(mat2(_GLF_IDENTITY(mat2(injectionSwitch, 1.0, _GLF_IDENTITY(abs(0.0), (false ? _GLF_FUZZED(5348.1161) : abs(0.0)))), (true ? mat2(injectionSwitch, 1.0, abs(0.0)) : _GLF_IDENTITY(_GLF_FUZZED(mat2(5.1, -345.642, 3283.9104, 274.828)), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_FUZZED(mat2(5.1, -345.642, 3283.9104, 274.828)), transpose(transpose(_GLF_FUZZED(mat2(5.1, -345.642, 3283.9104, 274.828)))))) + mat2(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)), ((_GLF_IDENTITY(_GLF_FUZZED(mat2(5.1, -345.642, 3283.9104, 274.828)), transpose(transpose(_GLF_FUZZED(mat2(5.1, -345.642, 3283.9104, 274.828)))))) + mat2(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))) + mat2(0.0, 0.0, 0.0, 0.0)))))))))))[_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, 0 | (1)), 1, 1))] : _GLF_FUZZED(3557.0850), mix(float(_GLF_FUZZED(2078.4296)), float(_GLF_IDENTITY(true ? (_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat2(injectionSwitch, 1.0, abs(0.0)), mat2(_GLF_IDENTITY(mat2(_GLF_IDENTITY(mat2(injectionSwitch, 1.0, _GLF_IDENTITY(abs(0.0), (false ? _GLF_FUZZED(5348.1161) : abs(0.0)))), (true ? mat2(injectionSwitch, _GLF_IDENTITY(1.0, _GLF_IDENTITY(float(_GLF_IDENTITY(mat2(1.0, 0.0, 0.0, 0.0), (true ? mat2(1.0, 0.0, 0.0, 0.0) : _GLF_FUZZED(mat2(-1.6, -2.8, -41.97, 554.917))))), min(float(_GLF_IDENTITY(mat2(1.0, 0.0, 0.0, 0.0), (true ? mat2(1.0, 0.0, 0.0, 0.0) : _GLF_FUZZED(mat2(-1.6, -2.8, -41.97, 554.917))))), float(_GLF_IDENTITY(mat2(1.0, 0.0, 0.0, 0.0), (true ? mat2(1.0, 0.0, 0.0, 0.0) : _GLF_FUZZED(mat2(-1.6, -2.8, -41.97, 554.917)))))))), abs(0.0)) : _GLF_IDENTITY(_GLF_FUZZED(mat2(5.1, -345.642, 3283.9104, 274.828)), (_GLF_IDENTITY(_GLF_FUZZED(mat2(5.1, -345.642, 3283.9104, 274.828)), transpose(transpose(_GLF_FUZZED(mat2(5.1, -345.642, 3283.9104, 274.828)))))) + mat2(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), clamp(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))), _GLF_ZERO(0.0, injectionSwitch.x)))))), transpose(transpose(mat2(_GLF_IDENTITY(mat2(injectionSwitch, 1.0, _GLF_IDENTITY(abs(0.0), (false ? _GLF_FUZZED(5348.1161) : abs(0.0)))), (true ? mat2(injectionSwitch, _GLF_IDENTITY(1.0, _GLF_IDENTITY(float(_GLF_IDENTITY(mat2(1.0, 0.0, 0.0, 0.0), (true ? mat2(1.0, 0.0, 0.0, 0.0) : _GLF_FUZZED(mat2(-1.6, -2.8, -41.97, 554.917))))), min(float(_GLF_IDENTITY(mat2(1.0, 0.0, 0.0, 0.0), (true ? mat2(1.0, 0.0, 0.0, 0.0) : _GLF_FUZZED(mat2(-1.6, -2.8, -41.97, 554.917))))), float(_GLF_IDENTITY(mat2(1.0, 0.0, 0.0, 0.0), (true ? mat2(1.0, 0.0, 0.0, 0.0) : _GLF_FUZZED(mat2(-1.6, -2.8, -41.97, 554.917)))))))), abs(0.0)) : _GLF_IDENTITY(_GLF_FUZZED(mat2(5.1, -345.642, 3283.9104, 274.828)), (_GLF_IDENTITY(_GLF_FUZZED(mat2(5.1, -345.642, 3283.9104, 274.828)), transpose(transpose(_GLF_FUZZED(mat2(5.1, -345.642, 3283.9104, 274.828)))))) + mat2(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), clamp(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))), _GLF_ZERO(0.0, injectionSwitch.x))))))))))))))[_GLF_IDENTITY(1, clamp(1, 1, 1))] : _GLF_FUZZED(3557.0850), clamp(true ? (_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat2(injectionSwitch, 1.0, abs(0.0)), mat2(mat2(_GLF_IDENTITY(mat2(injectionSwitch, 1.0, _GLF_IDENTITY(abs(0.0), (false ? _GLF_FUZZED(5348.1161) : abs(0.0)))), (true ? mat2(injectionSwitch, 1.0, abs(0.0)) : _GLF_IDENTITY(_GLF_FUZZED(mat2(5.1, -345.642, 3283.9104, 274.828)), (_GLF_IDENTITY(_GLF_FUZZED(mat2(5.1, -345.642, 3283.9104, 274.828)), transpose(transpose(_GLF_FUZZED(mat2(5.1, -345.642, 3283.9104, 274.828)))))) + mat2(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)))))))))))[_GLF_IDENTITY(1, clamp(1, 1, 1))] : _GLF_FUZZED(3557.0850), true ? (_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat2(injectionSwitch, 1.0, abs(0.0)), mat2(mat2(_GLF_IDENTITY(mat2(injectionSwitch, 1.0, _GLF_IDENTITY(abs(0.0), (false ? _GLF_FUZZED(5348.1161) : abs(0.0)))), (true ? mat2(injectionSwitch, 1.0, abs(0.0)) : _GLF_IDENTITY(_GLF_FUZZED(mat2(5.1, -345.642, 3283.9104, 274.828)), (_GLF_IDENTITY(_GLF_FUZZED(mat2(5.1, -345.642, 3283.9104, 274.828)), transpose(transpose(_GLF_FUZZED(mat2(5.1, -345.642, 3283.9104, 274.828)))))) + mat2(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)))))))))))[_GLF_IDENTITY(1, clamp(1, 1, 1))] : _GLF_FUZZED(3557.0850), true ? (_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat2(injectionSwitch, 1.0, abs(0.0)), mat2(mat2(_GLF_IDENTITY(mat2(injectionSwitch, 1.0, _GLF_IDENTITY(abs(0.0), (false ? _GLF_FUZZED(5348.1161) : abs(0.0)))), (true ? mat2(injectionSwitch, 1.0, abs(0.0)) : _GLF_IDENTITY(_GLF_FUZZED(mat2(5.1, -345.642, 3283.9104, 274.828)), (_GLF_IDENTITY(_GLF_FUZZED(mat2(5.1, -345.642, 3283.9104, 274.828)), transpose(transpose(_GLF_FUZZED(mat2(5.1, -345.642, 3283.9104, 274.828)))))) + mat2(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)))))))))))[_GLF_IDENTITY(1, clamp(1, 1, 1))] : _GLF_FUZZED(3557.0850)))), bool(true))))), (_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat2(injectionSwitch, 1.0, abs(0.0)), mat2(mat2(_GLF_IDENTITY(mat2(injectionSwitch, 1.0, abs(0.0)), (true ? mat2(injectionSwitch, 1.0, abs(0.0)) : _GLF_IDENTITY(_GLF_FUZZED(mat2(5.1, -345.642, 3283.9104, 274.828)), (_GLF_IDENTITY(_GLF_FUZZED(mat2(5.1, -345.642, 3283.9104, _GLF_IDENTITY(274.828, max(274.828, 274.828)))), transpose(transpose(_GLF_FUZZED(mat2(_GLF_IDENTITY(5.1, (false ? _GLF_FUZZED(-5.1) : 5.1)), -345.642, 3283.9104, 274.828)))))) + mat2(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)))))))))))[1]))), bvec2(true, true))).y, mix(float(_GLF_FUZZED(-1596.9131)), float(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat2(injectionSwitch, 1.0, abs(0.0)), _GLF_IDENTITY(mat2(mat2(_GLF_IDENTITY(mat2(injectionSwitch, 1.0, abs(0.0)), (true ? mat2(injectionSwitch, 1.0, abs(0.0)) : _GLF_FUZZED(_GLF_IDENTITY(mat2(5.1, -345.642, 3283.9104, 274.828), mat2(mat3(_GLF_IDENTITY(mat2(5.1, -345.642, 3283.9104, 274.828), (true ? _GLF_IDENTITY(_GLF_IDENTITY(mat2(5.1, -345.642, 3283.9104, 274.828), mat2(_GLF_IDENTITY(mat3(mat2(5.1, -345.642, 3283.9104, 274.828)), (mat3(mat2(5.1, -345.642, 3283.9104, 274.828))) + mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))), mat2(mat3x4(mat2(5.1, -345.642, 3283.9104, 274.828)))) : _GLF_FUZZED(mat2(4.8, 1.7, 8909.4960, -38.10)))))))))))), (false ? _GLF_FUZZED(mat2(-948.575, -98.28, 0.7, 9.9)) : _GLF_IDENTITY(mat2(mat2(_GLF_IDENTITY(mat2(injectionSwitch, 1.0, abs(0.0)), (true ? mat2(injectionSwitch, 1.0, abs(0.0)) : _GLF_FUZZED(_GLF_IDENTITY(mat2(5.1, -345.642, 3283.9104, 274.828), mat2(mat3(_GLF_IDENTITY(mat2(5.1, -345.642, 3283.9104, 274.828), (true ? _GLF_IDENTITY(_GLF_IDENTITY(mat2(5.1, -345.642, 3283.9104, 274.828), mat2(_GLF_IDENTITY(_GLF_IDENTITY(mat3(mat2(5.1, -345.642, 3283.9104, 274.828)), (mat3(mat2(5.1, -345.642, 3283.9104, 274.828))) + mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), mat3(mat3(_GLF_IDENTITY(mat3(mat2(5.1, -345.642, 3283.9104, 274.828)), (mat3(mat2(5.1, -345.642, 3283.9104, 274.828))) + mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))))))), mat2(mat3x4(mat2(5.1, -345.642, 3283.9104, 274.828)))) : _GLF_FUZZED(mat2(4.8, 1.7, 8909.4960, -38.10)))))))))))), mat2(mat4(mat2(mat2(_GLF_IDENTITY(mat2(injectionSwitch, 1.0, abs(0.0)), (true ? mat2(injectionSwitch, 1.0, abs(0.0)) : _GLF_FUZZED(_GLF_IDENTITY(mat2(5.1, -345.642, 3283.9104, 274.828), mat2(mat3(_GLF_IDENTITY(mat2(5.1, -345.642, 3283.9104, 274.828), (true ? _GLF_IDENTITY(_GLF_IDENTITY(mat2(5.1, -345.642, 3283.9104, 274.828), mat2(_GLF_IDENTITY(mat3(mat2(5.1, -345.642, 3283.9104, 274.828)), (mat3(mat2(5.1, -345.642, 3283.9104, 274.828))) + mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))), mat2(mat3x4(mat2(5.1, -345.642, 3283.9104, 274.828)))) : _GLF_FUZZED(mat2(4.8, 1.7, 8909.4960, -38.10)))))))))))))))))))), mix(vec2(_GLF_FUZZED(880.698), _GLF_FUZZED((-1986.6450))), vec2(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat2(injectionSwitch, 1.0, _GLF_IDENTITY(abs(0.0), clamp(abs(0.0), abs(0.0), abs(_GLF_IDENTITY(0.0, min(0.0, 0.0)))))), mat2(mat2(_GLF_IDENTITY(mat2(injectionSwitch, 1.0, abs(0.0)), (true ? _GLF_IDENTITY(mat2(injectionSwitch, 1.0, abs(0.0)), (_GLF_IDENTITY(true, _GLF_IDENTITY(! (_GLF_IDENTITY(! (true), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(! (true)), bool(_GLF_IDENTITY(bvec3(bool(! (true)), false, false), bvec3(bvec4(bvec3(bool(! (true)), false, false), false)))))), (bool(_GLF_IDENTITY(bool(! (true)), bool(_GLF_IDENTITY(bvec3(bool(! (true)), false, false), bvec3(bvec4(bvec3(bool(! (true)), false, false), false))))))) || false))), (! (_GLF_IDENTITY(! (true), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(! (true)), bool(_GLF_IDENTITY(bvec3(bool(! (true)), false, false), bvec3(bvec4(bvec3(bool(! (true)), false, false), false)))))), (bool(_GLF_IDENTITY(bool(! (true)), bool(_GLF_IDENTITY(bvec3(bool(! (true)), false, false), bvec3(bvec4(bvec3(bool(! (true)), false, false), false))))))) || false)))) || false)) ? _GLF_IDENTITY(mat2(injectionSwitch, 1.0, abs(0.0)), (true ? mat2(injectionSwitch, 1.0, abs(0.0)) : _GLF_FUZZED(((+ mat2(8.1, 4550.4736, 842.355, -912.494)) / 827.548)))) : _GLF_FUZZED(mat2(-8341.1964, _GLF_IDENTITY(3302.6587, 0.0 + (3302.6587)), _GLF_IDENTITY(20.20, (20.20) - 0.0), -527.404)))) : _GLF_FUZZED(mat2(5.1, -345.642, 3283.9104, 274.828)))))))))), mat2(1.0) * ((_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat2(injectionSwitch, 1.0, _GLF_IDENTITY(abs(0.0), clamp(abs(0.0), abs(0.0), abs(_GLF_IDENTITY(0.0, min(0.0, 0.0)))))), mat2(mat2(_GLF_IDENTITY(mat2(injectionSwitch, 1.0, abs(0.0)), (true ? _GLF_IDENTITY(mat2(injectionSwitch, 1.0, abs(0.0)), (_GLF_IDENTITY(true, _GLF_IDENTITY(! (_GLF_IDENTITY(! (true), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(! (true)), bool(_GLF_IDENTITY(bvec3(bool(! (true)), false, false), bvec3(bvec4(bvec3(bool(! (true)), false, false), false)))))), (bool(_GLF_IDENTITY(bool(! (true)), bool(_GLF_IDENTITY(bvec3(bool(! (true)), false, false), bvec3(bvec4(bvec3(bool(! (true)), false, false), false))))))) || false))), (! (_GLF_IDENTITY(! (true), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(! (true)), bool(_GLF_IDENTITY(bvec3(bool(! (true)), false, false), bvec3(bvec4(bvec3(bool(! (true)), false, false), false)))))), (bool(_GLF_IDENTITY(bool(! (true)), bool(_GLF_IDENTITY(bvec3(bool(! (true)), false, false), bvec3(bvec4(bvec3(bool(! (true)), false, false), false))))))) || false)))) || false)) ? _GLF_IDENTITY(mat2(injectionSwitch, 1.0, abs(0.0)), (true ? mat2(injectionSwitch, 1.0, abs(0.0)) : _GLF_FUZZED(((+ mat2(8.1, 4550.4736, 842.355, -912.494)) / 827.548)))) : _GLF_FUZZED(mat2(-8341.1964, _GLF_IDENTITY(3302.6587, 0.0 + (3302.6587)), _GLF_IDENTITY(20.20, (20.20) - 0.0), -527.404)))) : _GLF_FUZZED(mat2(5.1, -345.642, 3283.9104, 274.828))))))))))))[0], _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat2(injectionSwitch, 1.0, abs(0.0)), mat2(mat2(_GLF_IDENTITY(mat2(injectionSwitch, 1.0, abs(0.0)), (true ? mat2(injectionSwitch, 1.0, abs(0.0)) : _GLF_IDENTITY(_GLF_FUZZED(mat2(5.1, -345.642, 3283.9104, 274.828)), (_GLF_IDENTITY(_GLF_FUZZED(mat2(_GLF_IDENTITY(5.1, max(5.1, 5.1)), -345.642, 3283.9104, 274.828)), transpose(transpose(_GLF_FUZZED(mat2(5.1, -345.642, 3283.9104, 274.828)))))) + mat2(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(_GLF_IDENTITY(1.1, clamp(_GLF_IDENTITY(1.1, (_GLF_IDENTITY(1.1, min(1.1, 1.1))) * determinant(mat4(1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0))), 1.1, 1.1))), _GLF_FUZZED(-8.6)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))) : _GLF_FUZZED(injectionSwitch))), injectionSwitch)).x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)))))))))))[1], max(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat2(injectionSwitch, 1.0, abs(0.0)), mat2(mat2(_GLF_IDENTITY(mat2(injectionSwitch, 1.0, abs(0.0)), (true ? mat2(injectionSwitch, 1.0, abs(0.0)) : _GLF_IDENTITY(_GLF_FUZZED(mat2(5.1, -345.642, 3283.9104, 274.828)), (_GLF_IDENTITY(_GLF_FUZZED(mat2(5.1, -345.642, 3283.9104, 274.828)), transpose(_GLF_IDENTITY(transpose(_GLF_FUZZED(mat2(5.1, -345.642, 3283.9104, 274.828))), (_GLF_IDENTITY(transpose(_GLF_FUZZED(mat2(5.1, -345.642, 3283.9104, 274.828))), mat2(1.0) * (transpose(_GLF_FUZZED(mat2(5.1, -345.642, 3283.9104, 274.828)))))) / mat2(1.0, 1.0, 1.0, 1.0))))) + mat2(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)), _GLF_IDENTITY(injectionSwitch, vec2(vec3(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(432.923), _GLF_FUZZED(2172.9586)), bvec2(false, false))), 1.0))))).x), _GLF_ZERO(0.0, injectionSwitch.x)))))))))))[1], (_GLF_IDENTITY(true ? (_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat2(injectionSwitch, 1.0, abs(0.0)), mat2(mat2(_GLF_IDENTITY(mat2(injectionSwitch, 1.0, _GLF_IDENTITY(abs(0.0), (false ? _GLF_FUZZED(5348.1161) : abs(0.0)))), (true ? mat2(injectionSwitch, 1.0, abs(0.0)) : _GLF_IDENTITY(_GLF_FUZZED(mat2(5.1, -345.642, 3283.9104, 274.828)), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_FUZZED(mat2(5.1, -345.642, 3283.9104, 274.828)), transpose(transpose(_GLF_FUZZED(mat2(5.1, -345.642, 3283.9104, 274.828)))))) + mat2(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)), ((_GLF_IDENTITY(_GLF_FUZZED(mat2(5.1, -345.642, 3283.9104, 274.828)), transpose(transpose(_GLF_FUZZED(mat2(5.1, -345.642, 3283.9104, 274.828)))))) + mat2(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))) + mat2(0.0, 0.0, 0.0, 0.0)))))))))))[_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, 0 | (1)), 1, 1))] : _GLF_FUZZED(3557.0850), mix(float(_GLF_FUZZED(2078.4296)), float(_GLF_IDENTITY(true ? (_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat2(injectionSwitch, 1.0, abs(0.0)), mat2(_GLF_IDENTITY(mat2(_GLF_IDENTITY(mat2(injectionSwitch, 1.0, _GLF_IDENTITY(abs(0.0), (false ? _GLF_FUZZED(5348.1161) : abs(0.0)))), (true ? mat2(injectionSwitch, _GLF_IDENTITY(1.0, _GLF_IDENTITY(float(_GLF_IDENTITY(mat2(1.0, 0.0, 0.0, 0.0), (true ? mat2(1.0, 0.0, 0.0, 0.0) : _GLF_FUZZED(mat2(-1.6, -2.8, -41.97, 554.917))))), min(float(_GLF_IDENTITY(mat2(1.0, 0.0, 0.0, 0.0), (true ? mat2(1.0, 0.0, 0.0, 0.0) : _GLF_FUZZED(mat2(-1.6, -2.8, -41.97, 554.917))))), float(_GLF_IDENTITY(mat2(1.0, 0.0, 0.0, 0.0), (true ? mat2(1.0, 0.0, 0.0, 0.0) : _GLF_FUZZED(mat2(-1.6, -2.8, -41.97, 554.917)))))))), abs(0.0)) : _GLF_IDENTITY(_GLF_FUZZED(mat2(5.1, -345.642, 3283.9104, 274.828)), (_GLF_IDENTITY(_GLF_FUZZED(mat2(5.1, -345.642, 3283.9104, 274.828)), transpose(transpose(_GLF_FUZZED(mat2(5.1, -345.642, 3283.9104, 274.828)))))) + mat2(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), clamp(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))), _GLF_ZERO(0.0, injectionSwitch.x)))))), transpose(transpose(mat2(_GLF_IDENTITY(mat2(injectionSwitch, 1.0, _GLF_IDENTITY(abs(0.0), (false ? _GLF_FUZZED(5348.1161) : abs(0.0)))), (true ? mat2(injectionSwitch, _GLF_IDENTITY(1.0, _GLF_IDENTITY(float(_GLF_IDENTITY(mat2(1.0, 0.0, 0.0, 0.0), (true ? mat2(1.0, 0.0, 0.0, 0.0) : _GLF_FUZZED(mat2(-1.6, -2.8, -41.97, 554.917))))), min(float(_GLF_IDENTITY(mat2(1.0, 0.0, 0.0, 0.0), (true ? mat2(1.0, 0.0, 0.0, 0.0) : _GLF_FUZZED(mat2(-1.6, -2.8, -41.97, 554.917))))), float(_GLF_IDENTITY(mat2(1.0, 0.0, 0.0, 0.0), (true ? mat2(1.0, 0.0, 0.0, 0.0) : _GLF_FUZZED(mat2(-1.6, -2.8, -41.97, 554.917)))))))), abs(0.0)) : _GLF_IDENTITY(_GLF_FUZZED(mat2(5.1, -345.642, 3283.9104, 274.828)), (_GLF_IDENTITY(_GLF_FUZZED(mat2(5.1, -345.642, 3283.9104, 274.828)), transpose(transpose(_GLF_FUZZED(mat2(5.1, -345.642, 3283.9104, 274.828)))))) + mat2(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), clamp(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))), _GLF_ZERO(0.0, injectionSwitch.x))))))))))))))[_GLF_IDENTITY(1, clamp(1, 1, 1))] : _GLF_FUZZED(3557.0850), clamp(true ? (_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat2(injectionSwitch, 1.0, abs(0.0)), mat2(mat2(_GLF_IDENTITY(mat2(injectionSwitch, 1.0, _GLF_IDENTITY(abs(0.0), (false ? _GLF_FUZZED(5348.1161) : abs(0.0)))), (true ? mat2(injectionSwitch, 1.0, abs(0.0)) : _GLF_IDENTITY(_GLF_FUZZED(mat2(5.1, -345.642, 3283.9104, 274.828)), (_GLF_IDENTITY(_GLF_FUZZED(mat2(5.1, -345.642, 3283.9104, 274.828)), transpose(transpose(_GLF_FUZZED(mat2(5.1, -345.642, 3283.9104, 274.828)))))) + mat2(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)))))))))))[_GLF_IDENTITY(1, clamp(1, 1, 1))] : _GLF_FUZZED(3557.0850), true ? (_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat2(injectionSwitch, 1.0, abs(0.0)), mat2(mat2(_GLF_IDENTITY(mat2(injectionSwitch, 1.0, _GLF_IDENTITY(abs(0.0), (false ? _GLF_FUZZED(5348.1161) : abs(0.0)))), (true ? mat2(injectionSwitch, 1.0, abs(0.0)) : _GLF_IDENTITY(_GLF_FUZZED(mat2(5.1, -345.642, 3283.9104, 274.828)), (_GLF_IDENTITY(_GLF_FUZZED(mat2(5.1, -345.642, 3283.9104, 274.828)), transpose(transpose(_GLF_FUZZED(mat2(5.1, -345.642, 3283.9104, 274.828)))))) + mat2(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)))))))))))[_GLF_IDENTITY(1, clamp(1, 1, 1))] : _GLF_FUZZED(3557.0850), true ? (_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat2(injectionSwitch, 1.0, abs(0.0)), mat2(mat2(_GLF_IDENTITY(mat2(injectionSwitch, 1.0, _GLF_IDENTITY(abs(0.0), (false ? _GLF_FUZZED(5348.1161) : abs(0.0)))), (true ? mat2(injectionSwitch, 1.0, abs(0.0)) : _GLF_IDENTITY(_GLF_FUZZED(mat2(5.1, -345.642, 3283.9104, 274.828)), (_GLF_IDENTITY(_GLF_FUZZED(mat2(5.1, -345.642, 3283.9104, 274.828)), transpose(transpose(_GLF_FUZZED(mat2(5.1, -345.642, 3283.9104, 274.828)))))) + mat2(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)))))))))))[_GLF_IDENTITY(1, clamp(1, 1, 1))] : _GLF_FUZZED(3557.0850)))), bool(true))))), (_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat2(injectionSwitch, 1.0, abs(0.0)), mat2(mat2(_GLF_IDENTITY(mat2(injectionSwitch, 1.0, abs(0.0)), (true ? mat2(injectionSwitch, 1.0, abs(0.0)) : _GLF_IDENTITY(_GLF_FUZZED(mat2(5.1, -345.642, 3283.9104, 274.828)), (_GLF_IDENTITY(_GLF_FUZZED(mat2(5.1, -345.642, 3283.9104, _GLF_IDENTITY(274.828, max(274.828, 274.828)))), transpose(transpose(_GLF_FUZZED(mat2(_GLF_IDENTITY(5.1, (false ? _GLF_FUZZED(-5.1) : 5.1)), -345.642, 3283.9104, 274.828)))))) + mat2(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)))))))))))[1]))), bvec2(true, true))).y), bool(true)))))))
                          {
                           if(_GLF_DEAD(false))
                            barrier();
                           if(_GLF_DEAD(false))
                            barrier();
                           if(_GLF_DEAD(false))
                            barrier();
                           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x)) > injectionSwitch.y))))
                            barrier();
                           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_ONE(1.0, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y, (injectionSwitch.y) + 0.0)), (true ? _GLF_ONE(1.0, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch))[1])).y, (injectionSwitch.y) + 0.0)) : _GLF_FUZZED(-7.0)))), 1 * (_GLF_IDENTITY(int(_GLF_ONE(1.0, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), _GLF_IDENTITY(mat2(1.0), transpose(_GLF_IDENTITY(transpose(_GLF_IDENTITY(mat2(1.0), mat2(0.0, 0.0, 0.0, 0.0) + (mat2(1.0)))), mat2(mat4x3(transpose(_GLF_IDENTITY(mat2(1.0), mat2(0.0, 0.0, 0.0, 0.0) + (mat2(1.0))))))))) * (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)))) : _GLF_FUZZED(injectionSwitch))).y, (injectionSwitch.y) + 0.0))), min(int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0))), _GLF_IDENTITY(int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0))), min(int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0))), int(_GLF_ONE(_GLF_IDENTITY(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-163.652)), float(1.0), bool(true))), (1.0) / 1.0), _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y) + _GLF_IDENTITY(0.0, (0.0) - 0.0))))))))))); _GLF_IDENTITY(_injected_loop_counter ++, ~ (~ (_injected_loop_counter ++))))
                            {
                             barrier();
                             if(_GLF_DEAD(false))
                              barrier();
                             if(_GLF_WRAPPED_IF_TRUE(true))
                              {
                               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                {
                                }
                               else
                                {
                                 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0) < injectionSwitch.y))))
                                  {
                                   if(_GLF_DEAD(false))
                                    {
                                     if(_GLF_WRAPPED_IF_TRUE(true))
                                      {
                                       do
                                        {
                                         if(_GLF_WRAPPED_IF_TRUE(true))
                                          {
                                           for(int _injected_loop_counter = ((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(1), int(1)), max(1 << _GLF_IDENTITY(int(1), int(1)), 1 << _GLF_IDENTITY(int(1), int(1))))) >> _GLF_IDENTITY(int(1), int(1))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 ^ 1)); _injected_loop_counter --)
                                            {
                                             if(_GLF_WRAPPED_IF_FALSE(false))
                                              {
                                              }
                                             else
                                              {
                                               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                                barrier();
                                               do
                                                {
                                                 if(_GLF_DEAD(false))
                                                  barrier();
                                                }
                                               while(_GLF_WRAPPED_LOOP(false));
                                              }
                                             if(_GLF_DEAD(false))
                                              barrier();
                                             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                              barrier();
                                             if(_GLF_WRAPPED_IF_TRUE(true))
                                              {
                                               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                                barrier();
                                              }
                                             else
                                              {
                                              }
                                            }
                                          }
                                         else
                                          {
                                           if(_GLF_DEAD(false))
                                            barrier();
                                          }
                                        }
                                       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, vec2(mat3x2(injectionSwitch, 1.0, 1.0, 1.0, 0.0))), injectionSwitch)).y))));
                                      }
                                     else
                                      {
                                      }
                                     if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) && true)))
                                      barrier();
                                     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false))))
                                      barrier();
                                     if(_GLF_WRAPPED_IF_FALSE(false))
                                      {
                                      }
                                     else
                                      {
                                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                        barrier();
                                       barrier();
                                      }
                                    }
                                   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec3(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec3(bvec2(false, false), false))), false)))))))
                                    {
                                     if(_GLF_DEAD(false))
                                      {
                                       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                        {
                                        }
                                       else
                                        {
                                         barrier();
                                        }
                                      }
                                     if(_GLF_WRAPPED_IF_TRUE(true))
                                      {
                                       barrier();
                                      }
                                     else
                                      {
                                      }
                                     if(_GLF_DEAD(false))
                                      {
                                       if(_GLF_WRAPPED_IF_TRUE(true))
                                        {
                                         barrier();
                                        }
                                       else
                                        {
                                        }
                                      }
                                    }
                                  }
                                 else
                                  {
                                  }
                                }
                              }
                             else
                              {
                              }
                            }
                           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                            barrier();
                           do
                            {
                             if(_GLF_DEAD(false))
                              barrier();
                            }
                           while(_GLF_WRAPPED_LOOP(false));
                           do
                            {
                             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                              barrier();
                             if(_GLF_DEAD(false))
                              {
                               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                barrier();
                               if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bvec3(true, false, true)))))
                                {
                                 if(_GLF_WRAPPED_IF_FALSE(false))
                                  {
                                   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)))))))))
                                    barrier();
                                  }
                                 else
                                  {
                                   barrier();
                                  }
                                }
                               else
                                {
                                }
                              }
                            }
                           while(_GLF_WRAPPED_LOOP(false));
                           if(_GLF_WRAPPED_IF_TRUE(true))
                            {
                             for(int _injected_loop_counter = _GLF_IDENTITY(0, (false ? _GLF_FUZZED(_injected_loop_counter) : 0)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                              {
                               if(_GLF_WRAPPED_IF_TRUE(true))
                                {
                                 if(_GLF_DEAD(false))
                                  barrier();
                                }
                               else
                                {
                                }
                              }
                            }
                           else
                            {
                            }
                          }
                        }
                       barrier();
                       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)), false || (bool(bvec3(false, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(true, (true) && true) ? injectionSwitch.x : _GLF_IDENTITY(_GLF_FUZZED(-7.2), mix(float(_GLF_IDENTITY(_GLF_FUZZED(-7.2), (_GLF_FUZZED(-7.2)) - 0.0)), float(_GLF_FUZZED(-6909.6733)), bool(false))))) < _GLF_IDENTITY(injectionSwitch.y, float(_GLF_IDENTITY(mat2x4(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), _GLF_IDENTITY(dot(vec2(0.0, 0.0), vec2(1.0, 1.0)), _GLF_IDENTITY(_GLF_IDENTITY(dot(vec2(0.0, 0.0), vec2(1.0, 1.0)), clamp(dot(vec2(0.0, 0.0), vec2(1.0, 1.0)), dot(vec2(0.0, 0.0), vec2(1.0, 1.0)), dot(vec2(0.0, 0.0), vec2(1.0, 1.0)))), mix(float(dot(vec2(0.0, 0.0), vec2(1.0, 1.0))), float(_GLF_FUZZED(32.57)), bool(false)))), 1.0, 0.0, abs(1.0), 0.0, sin(0.0), 1.0), (mat2x4(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch))) + vec2(0.0, 0.0)).y, min(injectionSwitch.y, injectionSwitch.y)), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch))) + vec2(0.0, 0.0)).y, min(injectionSwitch.y, injectionSwitch.y)), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch))) + vec2(0.0, 0.0)).y, min(_GLF_IDENTITY(injectionSwitch.y, 1.0 * (_GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(1.0))))), injectionSwitch.y))) * 1.0)) - log(1.0)), _GLF_IDENTITY(dot(vec2(0.0, 0.0), vec2(1.0, 1.0)), _GLF_IDENTITY(dot(vec2(0.0, 0.0), vec2(1.0, 1.0)), mix(float(dot(vec2(0.0, 0.0), vec2(1.0, 1.0))), float(_GLF_FUZZED(32.57)), bool(false)))), 1.0, 0.0, abs(1.0), 0.0, sin(0.0), 1.0)) - mat2x4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))))), true))))), (_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec3(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)), false || (bool(bvec3(false, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY((true ? injectionSwitch.x : _GLF_FUZZED(-7.2)), mix(float(_GLF_FUZZED((- 5045.7651))), float((true ? injectionSwitch.x : _GLF_FUZZED(-7.2))), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))) < injectionSwitch.y)), true)))), bool(bvec3(_GLF_IDENTITY(bool(bvec3(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)), false || (bool(bvec3(false, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(-7.2))) < injectionSwitch.y)), true)))), false, true))))) && true)))
                        {
                         if(_GLF_DEAD(false))
                          barrier();
                         barrier();
                        }
                      }
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                  }
                 else
                  {
                  }
                 if(_GLF_DEAD(false))
                  barrier();
                 for(int _injected_loop_counter = (1 | int(_GLF_ZERO(0.0, injectionSwitch.x))); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 ^ 0)); _injected_loop_counter --)
                  {
                   for(int _injected_loop_counter = ((0 >> _GLF_IDENTITY(int(8), _GLF_IDENTITY(int(8), max(int(8), int(8))))) << _GLF_IDENTITY(int(3), int(3))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                    }
                  }
                 if(_GLF_DEAD(false))
                  barrier();
                }
               else
                {
                }
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y)))))))))))
                    barrier();
                   if(_GLF_DEAD(false))
                    barrier();
                   barrier();
                  }
                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
                  {
                   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    {
                    }
                   else
                    {
                     if(_GLF_WRAPPED_IF_TRUE(true))
                      {
                       do
                        {
                         barrier();
                        }
                       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                      }
                     else
                      {
                       if(_GLF_DEAD(false))
                        barrier();
                      }
                    }
                  }
                }
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_DEAD(false))
                  barrier();
                 barrier();
                }
              }
             else
              {
              }
             if(_GLF_DEAD(false))
              {
               if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) && true))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                }
               else
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))))
                    barrier();
                   if(_GLF_DEAD(false))
                    barrier();
                   barrier();
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-5738.0349)), float(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0)), bool(true)))))))
                {
                 for(int _injected_loop_counter = (_GLF_IDENTITY(0 >> _GLF_IDENTITY(int(6), int(6)), (_GLF_IDENTITY(0 >> _GLF_IDENTITY(int(6), int(6)), (_GLF_IDENTITY(0 >> _GLF_IDENTITY(int(6), int(6)), (0 >> _GLF_IDENTITY(int(6), int(6))) >> 0)) | (0 | 0))) | 0)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                  {
                   barrier();
                  }
                }
              }
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(_GLF_IDENTITY(mat4x3(injectionSwitch.x, _GLF_IDENTITY(0.0, (0.0) / 1.0), _GLF_ONE(1.0, injectionSwitch.y), 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0), (mat4x3(injectionSwitch.x, 0.0, _GLF_IDENTITY(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).y), max(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y))), 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0)) * mat4(1.0))), clamp(float(_GLF_IDENTITY(mat4x3(injectionSwitch.x, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0), (mat4x3(injectionSwitch.x, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0)) * mat4(1.0))), float(_GLF_IDENTITY(mat4x3(injectionSwitch.x, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0), (mat4x3(injectionSwitch.x, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0)) * mat4(_GLF_IDENTITY(1.0, sqrt(1.0) * (1.0))))), float(_GLF_IDENTITY(mat4x3(injectionSwitch.x, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0), (mat4x3(injectionSwitch.x, 0.0, _GLF_ONE(_GLF_IDENTITY(1.0, float(_GLF_IDENTITY(mat4x2(_GLF_IDENTITY(1.0, max(1.0, 1.0)), abs(0.0), _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0, length(vec3(0.0, 0.0, 0.0)), 0.0, 0.0), mat4x2(mat4x3(mat4x2(_GLF_IDENTITY(1.0, max(1.0, 1.0)), abs(0.0), _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0, length(vec3(0.0, 0.0, 0.0)), 0.0, 0.0)))))), injectionSwitch.y), 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0)) * mat4(_GLF_IDENTITY(1.0, (1.0) - length(0.0)))))))) > injectionSwitch.y))));
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(false), ! (! _GLF_IDENTITY((_GLF_DEAD(false)), false || ((_GLF_DEAD(false))))))), ! (! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))), (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))), false || (_GLF_IDENTITY(_GLF_DEAD(false), ! (! _GLF_IDENTITY((_GLF_DEAD(false)), ((_GLF_DEAD(false))) || false))))))) && true)))))))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       do
        {
         do
          {
           if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))
            barrier();
          }
         else
          {
           if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false))
            {
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(mat2x3(injectionSwitch.x, 1.0, 1.0, sin(sin(0.0)), 1.0, 1.0), transpose(transpose(_GLF_IDENTITY(mat2x3(injectionSwitch.x, 1.0, 1.0, sin(sin(0.0)), 1.0, 1.0), mat2x3(mat3(mat2x3(injectionSwitch.x, 1.0, 1.0, sin(sin(0.0)), 1.0, 1.0)))))))))))); _injected_loop_counter --)
              {
               if(_GLF_DEAD(false))
                barrier();
              }
             barrier();
            }
          }
         if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
          }
         if(_GLF_DEAD(false))
          barrier();
         do
          {
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, true && _GLF_IDENTITY((false), ((false)) || false)), bool(bvec2(false, true)))))
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 barrier();
                }
               else
                {
                }
              }
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                {
                 do
                  {
                   barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
               else
                {
                }
              }
             if(_GLF_DEAD(false))
              barrier();
            }
           if(_GLF_DEAD(false))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     else
      {
      }
    }
  }
 else
  {
  }
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   do
    {
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) || false), (injectionSwitch.x > injectionSwitch.y))))
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
          {
           barrier();
          }
        }
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         barrier();
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 while(_GLF_WRAPPED_LOOP(false));
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
