#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_1 {
 vec2 _f0;
 mat4x2 _f1;
 uint virtual_gid;
 float _f2;
 bool _f3;
 vec2 _f4;
} ;

struct _GLF_struct_0 {
 bvec4 _f0;
 bool _f1;
 uint workgroup_size;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uvec2 GLF_merged2_0_1_11_1_1_13subgroup_idsubgroup_size;
 uvec4 GLF_merged3_0_2_50_2_1_16_3_1_13GLF_merged2_0_1_13_1_1_12subgroup_baseworkgroup_idnext_virtual_gidsubgroup_base;
 uvec2 GLF_merged2_0_1_13_1_1_12subgroup_baseworkgroup_id;
 GLF_merged3_0_2_50_2_1_16_3_1_13GLF_merged2_0_1_13_1_1_12subgroup_baseworkgroup_idnext_virtual_gidsubgroup_base.xy = GLF_merged2_0_1_13_1_1_12subgroup_baseworkgroup_id;
 uint subgroup_id = gl_SubgroupID;
 GLF_merged2_0_1_11_1_1_13subgroup_idsubgroup_size.x = subgroup_id;
 uint subgroup_size = gl_SubgroupSize;
 GLF_merged2_0_1_11_1_1_13subgroup_idsubgroup_size.y = subgroup_size;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 _GLF_struct_0 _GLF_struct_replacement_0 = _GLF_struct_0(bvec4(true), true, gl_WorkGroupSize.x);
 uint workgroup_id = gl_WorkGroupID.x;
 GLF_merged3_0_2_50_2_1_16_3_1_13GLF_merged2_0_1_13_1_1_12subgroup_baseworkgroup_idnext_virtual_gidsubgroup_base.xy.y = workgroup_id;
 uint workgroup_base = _GLF_struct_replacement_0.workgroup_size * GLF_merged3_0_2_50_2_1_16_3_1_13GLF_merged2_0_1_13_1_1_12subgroup_baseworkgroup_idnext_virtual_gidsubgroup_base.xy.y;
 uint subgroup_base = GLF_merged2_0_1_11_1_1_13subgroup_idsubgroup_size.x * GLF_merged2_0_1_11_1_1_13subgroup_idsubgroup_size.y;
 GLF_merged3_0_2_50_2_1_16_3_1_13GLF_merged2_0_1_13_1_1_12subgroup_baseworkgroup_idnext_virtual_gidsubgroup_base.w = subgroup_base;
 GLF_merged3_0_2_50_2_1_16_3_1_13GLF_merged2_0_1_13_1_1_12subgroup_baseworkgroup_idnext_virtual_gidsubgroup_base.xy.x = GLF_merged3_0_2_50_2_1_16_3_1_13GLF_merged2_0_1_13_1_1_12subgroup_baseworkgroup_idnext_virtual_gidsubgroup_base.w;
 _GLF_struct_1 _GLF_struct_replacement_1 = _GLF_struct_1(vec2(1.0), mat4x2(1.0), workgroup_base + GLF_merged3_0_2_50_2_1_16_3_1_13GLF_merged2_0_1_13_1_1_12subgroup_baseworkgroup_idnext_virtual_gidsubgroup_base.xy.x + subgroup_local_id, 1.0, true, vec2(1.0));
 if(_GLF_DEAD(false))
  barrier();
 uint next_virtual_gid = workgroup_base + GLF_merged3_0_2_50_2_1_16_3_1_13GLF_merged2_0_1_13_1_1_12subgroup_baseworkgroup_idnext_virtual_gidsubgroup_base.xy.x + ((subgroup_local_id + 1) % GLF_merged2_0_1_11_1_1_13subgroup_idsubgroup_size.y);
 GLF_merged3_0_2_50_2_1_16_3_1_13GLF_merged2_0_1_13_1_1_12subgroup_baseworkgroup_idnext_virtual_gidsubgroup_base.z = next_virtual_gid;
 atomicStore(buf[_GLF_struct_replacement_1.virtual_gid], uint(1), 4, 64, 4);
 if((subgroup_local_id % 2) == 0)
  {
   atomicStore(buf[GLF_merged3_0_2_50_2_1_16_3_1_13GLF_merged2_0_1_13_1_1_12subgroup_baseworkgroup_idnext_virtual_gidsubgroup_base.z], uint(2), 4, 64, 4);
  }
 else
  {
   atomicStore(buf[GLF_merged3_0_2_50_2_1_16_3_1_13GLF_merged2_0_1_13_1_1_12subgroup_baseworkgroup_idnext_virtual_gidsubgroup_base.z], uint(2), 4, 64, 4);
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
