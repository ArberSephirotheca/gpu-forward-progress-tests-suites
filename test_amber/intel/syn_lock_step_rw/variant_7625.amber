#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_38 {
 mat4x3 _f0;
 uint read;
} ;

struct _GLF_struct_39 {
 ivec4 _f0;
 _GLF_struct_38 _f1;
 uvec2 _f2;
} ;

struct _GLF_struct_40 {
 mat4x2 _f0;
 _GLF_struct_39 _f1;
 mat3x2 _f2;
 mat2x3 _f3;
} ;

struct _GLF_struct_35 {
 bvec4 _f0;
 mat2x4 _f1;
 mat2x3 _f2;
 vec3 _f3;
 bvec2 _f4;
 ivec4 _f5;
 mat4 _f6;
} ;

struct _GLF_struct_34 {
 mat2 _f0;
 vec2 _f1;
 bvec2 _f2;
} ;

struct _GLF_struct_33 {
 uvec3 _f0;
} ;

struct _GLF_struct_32 {
 uint _f0;
 int _f1;
} ;

struct _GLF_struct_36 {
 _GLF_struct_32 _f0;
 _GLF_struct_33 _f1;
 _GLF_struct_34 _f2;
 mat3x2 _f3;
 int _f4;
 mat3x4 _f5;
 _GLF_struct_35 _f6;
} ;

struct _GLF_struct_30 {
 uvec3 _f0;
 uvec3 _f1;
 mat3 _f2;
} ;

struct _GLF_struct_31 {
 _GLF_struct_30 _f0;
} ;

struct _GLF_struct_28 {
 mat4 _f0;
 mat4x2 _f1;
 ivec3 _f2;
 uvec3 _f3;
 vec4 _f4;
} ;

struct _GLF_struct_27 {
 mat3 _f0;
 ivec2 _f1;
} ;

struct _GLF_struct_29 {
 ivec3 _f0;
 _GLF_struct_27 _f1;
 _GLF_struct_28 _f2;
} ;

struct _GLF_struct_37 {
 _GLF_struct_29 _f0;
 _GLF_struct_31 _f1;
 _GLF_struct_36 _f2;
 ivec3 _f3;
 uvec3 GLF_merged3_0_1_4_1_1_13_2_1_12readsubgroup_sizeworkgroup_id;
} ;

struct _GLF_struct_26 {
 uint subgroup_base;
 vec3 _f0;
 uvec4 _f1;
 mat2x3 _f2;
 int _f3;
 bvec3 _f4;
} ;

struct _GLF_struct_23 {
 float _f0;
 mat3x4 _f1;
 mat2 _f2;
 mat4 _f3;
 uvec2 _f4;
} ;

struct _GLF_struct_24 {
 mat3 _f0;
 _GLF_struct_23 _f1;
} ;

struct _GLF_struct_21 {
 uvec2 _f0;
 mat3x2 _f1;
} ;

struct _GLF_struct_22 {
 mat2x4 _f0;
 _GLF_struct_21 _f1;
 ivec3 _f2;
 mat4 _f3;
} ;

struct _GLF_struct_19 {
 uint subgroup_size;
 bvec2 _f0;
 uvec3 _f1;
 mat3 _f2;
} ;

struct _GLF_struct_20 {
 _GLF_struct_19 _f0;
} ;

struct _GLF_struct_25 {
 _GLF_struct_20 _f0;
 _GLF_struct_22 _f1;
 _GLF_struct_24 _f2;
} ;

struct _GLF_struct_17 {
 mat2x4 _f0;
 uint workgroup_size;
} ;

struct _GLF_struct_18 {
 vec4 _f0;
 bvec3 _f1;
 bvec3 _f2;
 _GLF_struct_17 _f3;
} ;

struct _GLF_struct_14 {
 mat4 _f0;
 int _f1;
 uvec4 _f2;
 uint _f3;
} ;

struct _GLF_struct_13 {
 vec3 _f0;
 bvec2 _f1;
} ;

struct _GLF_struct_12 {
 ivec3 _f0;
 bvec3 _f1;
 ivec3 _f2;
 bool _f3;
} ;

struct _GLF_struct_11 {
 bool _f0;
 mat2 _f1;
 mat3x4 _f2;
 mat3x2 _f3;
 mat4 _f4;
 uvec2 _f5;
} ;

struct _GLF_struct_15 {
 _GLF_struct_11 _f0;
 _GLF_struct_12 _f1;
 _GLF_struct_13 _f2;
 _GLF_struct_14 _f3;
} ;

struct _GLF_struct_9 {
 uvec4 _f0;
 uvec4 _f1;
 mat2 _f2;
 ivec2 _f3;
 int _f4;
 ivec4 _f5;
} ;

struct _GLF_struct_8 {
 mat3x4 _f0;
} ;

struct _GLF_struct_7 {
 mat4x2 _f0;
 mat4 _f1;
 mat3 _f2;
 vec2 _f3;
 ivec3 _f4;
} ;

struct _GLF_struct_6 {
 mat3x4 _f0;
 ivec2 _f1;
 mat2x3 _f2;
 mat2x4 _f3;
 uint _f4;
 mat4x3 _f5;
 int _f6;
} ;

struct _GLF_struct_10 {
 vec2 _f0;
 uint subgroup_local_id;
 _GLF_struct_6 _f1;
 _GLF_struct_7 _f2;
 bool _f3;
 ivec2 _f4;
 _GLF_struct_8 _f5;
 _GLF_struct_9 _f6;
} ;

struct _GLF_struct_16 {
 vec4 _f0;
 _GLF_struct_10 _f1;
 _GLF_struct_15 _f2;
 ivec4 _f3;
 mat2x3 _f4;
} ;

struct _GLF_struct_3 {
 mat4 _f0;
 mat4 _f1;
 mat2x3 _f2;
 vec2 _f3;
 int _f4;
} ;

struct _GLF_struct_4 {
 bvec3 _f0;
 mat2 _f1;
 _GLF_struct_3 _f2;
 vec2 _f3;
} ;

struct _GLF_struct_1 {
 uvec4 _f0;
 ivec2 _f1;
 vec4 _f2;
} ;

struct _GLF_struct_0 {
 mat3x4 _f0;
 mat2x3 _f1;
} ;

struct _GLF_struct_2 {
 _GLF_struct_0 _f0;
 _GLF_struct_1 _f1;
} ;

struct _GLF_struct_5 {
 _GLF_struct_2 _f0;
 _GLF_struct_4 _f1;
 uint workgroup_id;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
      {
       return;
      }
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y))))
        return;
      }
     else
      {
      }
    }
   else
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           return;
          }
        }
      }
     else
      {
      }
     if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
      {
       do
        {
         for(int _injected_loop_counter = ((((1 << _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), ~ (~ (int(2)))))) >> _GLF_IDENTITY(int(2), int(2))) << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), 0 ^ (int(0))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
          {
           return;
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     else
      {
      }
    }
   for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(4), int(4))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))), bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), true))), false), bvec2(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), true))), false), bvec2(bvec2(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), true))), false)))), false), bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), true))), false), bvec2(bvec2(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), true))), false)))), false)))))), bvec2(bvec4(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), true))), false), false, true))))))
      return;
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = ((((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5))) << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), min(int(0), int(0))))) >> _GLF_IDENTITY(int(0), int(0))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           do
            {
             return;
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
          }
        }
      }
     for(int _injected_loop_counter = (0 ^ 0); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter < int(_GLF_ONE(_GLF_IDENTITY(1.0, max(1.0, 1.0)), injectionSwitch.y)), true && (_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) >> 0) < int(_GLF_ONE(1.0, injectionSwitch.y)))), (_GLF_IDENTITY(_injected_loop_counter < int(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), min(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y)))), true && (_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))))) || false)); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               return;
              }
             else
              {
              }
            }
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
          continue;
         continue;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          continue;
         for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), (_GLF_IDENTITY(int(7), ~ (~ (int(7))))) - 0)))); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            continue;
           for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), 0 | (int(3))))) >> _GLF_IDENTITY(int(3), int(3)))); _injected_loop_counter ++)
            {
             return;
            }
          }
        }
       return;
      }
    }
   if(_GLF_DEAD(false))
    return;
  }
 uvec3 GLF_merged3_0_1_13_1_1_13_2_1_11subgroup_basesubgroup_sizevirtual_gid;
 uvec4 GLF_merged2_0_3_72_3_1_16GLF_merged3_0_1_13_1_1_13_2_1_14num_workgroupsubgroup_baseworkgroup_sizenext_virtual_gid;
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 ^ 0)); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
  }
 do
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         return;
        }
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat4x3(injectionSwitch, cos(0.0), 1.0, _GLF_ZERO(0.0, injectionSwitch.x), abs(0.0), 0.0, _GLF_IDENTITY(0.0, (true ? _GLF_IDENTITY(0.0, 1.0 * (0.0)) : _GLF_FUZZED(-4.0))), 1.0, 1.0, 1.0, _GLF_IDENTITY(0.0, 1.0 * (0.0))))), min(_GLF_IDENTITY(injectionSwitch, vec2(mat4x3(injectionSwitch, cos(0.0), 1.0, _GLF_ZERO(0.0, injectionSwitch.x), abs(0.0), 0.0, _GLF_IDENTITY(0.0, (true ? _GLF_IDENTITY(0.0, 1.0 * (0.0)) : _GLF_FUZZED(-4.0))), 1.0, 1.0, 1.0, 0.0))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat4x3(injectionSwitch, cos(0.0), 1.0, _GLF_ZERO(0.0, injectionSwitch.x), abs(0.0), 0.0, _GLF_IDENTITY(0.0, (true ? _GLF_IDENTITY(0.0, 1.0 * (0.0)) : _GLF_FUZZED(-4.0))), 1.0, 1.0, 1.0, 0.0))), max(_GLF_IDENTITY(injectionSwitch, vec2(mat4x3(injectionSwitch, cos(0.0), 1.0, _GLF_ZERO(0.0, injectionSwitch.x), abs(0.0), 0.0, _GLF_IDENTITY(0.0, (true ? _GLF_IDENTITY(0.0, 1.0 * (0.0)) : _GLF_FUZZED(-4.0))), 1.0, _GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat3x2(1.0, 1.0, 1.0, 0.0, 0.0, 0.0)), mix(float(_GLF_FUZZED(-3.3)), float(float(mat3x2(1.0, 1.0, 1.0, 0.0, 0.0, 0.0))), bool(true)))), 1.0, 0.0))), _GLF_IDENTITY(injectionSwitch, vec2(mat4x3(injectionSwitch, cos(0.0), 1.0, _GLF_ZERO(0.0, injectionSwitch.x), abs(0.0), 0.0, _GLF_IDENTITY(0.0, (true ? _GLF_IDENTITY(0.0, 1.0 * (0.0)) : _GLF_FUZZED(-4.0))), 1.0, 1.0, 1.0, 0.0))))))).x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mix(vec2(_GLF_FUZZED(8656.5381), _GLF_FUZZED(4818.1623)), vec2((_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(-44.96)), vec2(_GLF_FUZZED(-187.045), (injectionSwitch)[1]), bvec2(false, true))))))[0], _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch), min(_GLF_IDENTITY((injectionSwitch), (false ? _GLF_FUZZED(vec2(-4.9, 2236.1653)) : (injectionSwitch))), (injectionSwitch)))[1], min(_GLF_IDENTITY((injectionSwitch)[1], _GLF_IDENTITY(((injectionSwitch)[1]) / 1.0, float(mat4(((injectionSwitch)[1]) / 1.0, 1.0, 1.0, 0.0, sin(0.0), 0.0, 0.0, cos(0.0), 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0)))), (injectionSwitch)[1]))), bvec2(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(bvec4(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true && (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), false, true, true))), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, false || (injectionSwitch.x < injectionSwitch.y)))))), min(mix(vec2(_GLF_FUZZED(8656.5381), _GLF_FUZZED(4818.1623)), vec2((_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(-44.96)), vec2(_GLF_FUZZED(-187.045), (injectionSwitch)[1]), bvec2(false, true))))))[0], _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch), min(_GLF_IDENTITY((injectionSwitch), (false ? _GLF_FUZZED(vec2(-4.9, 2236.1653)) : (injectionSwitch))), (injectionSwitch)))[1], min(_GLF_IDENTITY((injectionSwitch)[1], _GLF_IDENTITY(((injectionSwitch)[1]) / 1.0, float(mat4(((injectionSwitch)[1]) / 1.0, 1.0, 1.0, 0.0, sin(0.0), 0.0, 0.0, cos(0.0), 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0)))), (injectionSwitch)[1]))), bvec2(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(bvec4(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true && (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), false, true, true))), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, false || (injectionSwitch.x < injectionSwitch.y)))))), mix(vec2(_GLF_FUZZED(8656.5381), _GLF_FUZZED(4818.1623)), vec2((_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(-44.96)), vec2(_GLF_FUZZED(-187.045), (injectionSwitch)[1]), bvec2(false, true))))))[0], _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch), min(_GLF_IDENTITY((injectionSwitch), (false ? _GLF_FUZZED(vec2(-4.9, 2236.1653)) : (injectionSwitch))), (injectionSwitch)))[1], min(_GLF_IDENTITY((injectionSwitch)[1], _GLF_IDENTITY(((injectionSwitch)[1]) / 1.0, float(mat4(((injectionSwitch)[1]) / 1.0, 1.0, 1.0, 0.0, sin(0.0), 0.0, 0.0, cos(0.0), 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0)))), (injectionSwitch)[1]))), bvec2(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(bvec4(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true && (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), false, true, true))), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, false || (injectionSwitch.x < injectionSwitch.y))))))))), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), mix(vec2(_GLF_FUZZED(8656.5381), _GLF_FUZZED(_GLF_IDENTITY(4818.1623, 1.0 * (4818.1623)))), vec2((injectionSwitch)[0], _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch)[1], min((injectionSwitch)[1], (injectionSwitch)[1])), min(_GLF_IDENTITY((injectionSwitch)[1], ((injectionSwitch)[1]) / 1.0), (injectionSwitch)[1]))), bvec2(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat3(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), 0.0, 1.0, 1.0, tan(_GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(1.0, 0.0)), dot(vec2(0.0, 1.0), vec2(1.0, 0.0)))), 0.0, 0.0, _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(1.0, 0.0)), dot(vec2(0.0, 1.0), vec2(1.0, 0.0)))), (mat3(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), 0.0, 1.0, 1.0, tan(_GLF_IDENTITY(dot(vec2(0.0, 1.0), _GLF_IDENTITY(vec2(1.0, _GLF_IDENTITY(0.0, (0.0) / _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, 0.0))))), (vec2(1.0, _GLF_IDENTITY(0.0, (0.0) / _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, 0.0)))))) + vec2(0.0, 0.0))), dot(vec2(0.0, 1.0), vec2(1.0, 0.0)))), 0.0, 0.0, _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(1.0, 0.0)), dot(vec2(0.0, 1.0), vec2(1.0, 0.0))))) + mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))).x < injectionSwitch.y)), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, bool(bvec4(injectionSwitch.x < injectionSwitch.y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, false))))))))) / exp(vec2(0.0, 0.0))).y))))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       return;
      }
    }
  }
 else
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        return;
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
      }
     else
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              return;
             return;
            }
           do
            {
             if(_GLF_DEAD(false))
              {
               do
                {
                 return;
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
           return;
           do
            {
             for(int _injected_loop_counter = (int(_GLF_ZERO(0.0, injectionSwitch.x)) << _GLF_IDENTITY(int(5), int(5))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  break;
                 return;
                }
              }
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
          }
        }
      }
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    return;
   for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > 0, true && (_GLF_IDENTITY(_injected_loop_counter > 0, (_injected_loop_counter > 0) && true)))); _injected_loop_counter --)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      break;
     if(_GLF_DEAD(false))
      {
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)).y))))))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           do
            {
             return;
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         else
          {
          }
        }
       return;
      }
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, 0.0 + (injectionSwitch.y))), false || ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, 0.0 + (injectionSwitch.y))))))))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec4(_GLF_DEAD(false), true, _GLF_IDENTITY(true, true && (true)), true)), false || _GLF_IDENTITY((bool(bvec4(_GLF_DEAD(false), true, true, true))), bool(bvec2((bool(bvec4(_GLF_DEAD(false), true, true, true))), true)))))) || false))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
        {
         return;
        }
      }
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (true ? _injected_loop_counter : _GLF_FUZZED((_injected_loop_counter --)))) != 0); _injected_loop_counter --)
      {
       return;
      }
    }
  }
 uvec3 GLF_merged3_0_1_11_1_1_17_2_1_11subgroup_idsubgroup_local_idvirtual_gid;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bvec2(true, true)))))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 else
  {
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bvec4(false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)))))
  {
  }
 else
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
    {
     do
      {
       return;
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, false || (false))));
    }
  }
 _GLF_struct_37 _GLF_struct_replacement_37;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   do
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         do
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
          }
         while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bvec2(false, false)))));
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           return;
          }
         else
          {
          }
        }
       else
        {
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 else
  {
   do
    {
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(_GLF_IDENTITY(mat3x2(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(3456.9696)), vec2(_GLF_FUZZED(-37.58), (injectionSwitch)[1]), bvec2(false, true))), injectionSwitch)), 0.0, 1.0, 1.0, 1.0), _GLF_IDENTITY((mat3x2(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(3456.9696)), vec2(_GLF_FUZZED(-37.58), (injectionSwitch)[1]), bvec2(false, true))), injectionSwitch)), 0.0, 1.0, 1.0, 1.0)) * mat3(_GLF_ONE(1.0, injectionSwitch.y)), (true ? (mat3x2(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(3456.9696)), vec2(_GLF_FUZZED(-37.58), (injectionSwitch)[1]), bvec2(false, true))), injectionSwitch)), 0.0, 1.0, 1.0, 1.0)) * mat3(_GLF_ONE(1.0, injectionSwitch.y)) : _GLF_FUZZED(mat3x2(48.15, 2.2, -164.581, 2.4, -6219.0801, 0.9)))))), (vec2(_GLF_IDENTITY(mat3x2(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(3456.9696)), vec2(_GLF_FUZZED(-37.58), (injectionSwitch)[1]), bvec2(false, true))), injectionSwitch)), 0.0, 1.0, 1.0, 1.0), _GLF_IDENTITY((mat3x2(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(3456.9696)), vec2(_GLF_FUZZED(-37.58), (injectionSwitch)[1]), bvec2(false, true))), injectionSwitch)), 0.0, 1.0, 1.0, 1.0)) * mat3(_GLF_ONE(1.0, injectionSwitch.y)), (true ? (mat3x2(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(3456.9696)), vec2(_GLF_FUZZED(-37.58), (injectionSwitch)[1]), bvec2(false, true))), injectionSwitch)), 0.0, 1.0, 1.0, 1.0)) * mat3(_GLF_ONE(1.0, injectionSwitch.y)) : _GLF_FUZZED(mat3x2(48.15, 2.2, -164.581, 2.4, -6219.0801, 0.9))))))) + vec2(0.0, 0.0))).y)))) || false))))
      return;
    }
   while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false)), bool(bvec3(bool(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false)), true, true))))));
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) && true))))), _GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), true && (! (false))))) || (false))))
      {
      }
     else
      {
       for(int _injected_loop_counter = (0 | int(_GLF_ZERO(0.0, injectionSwitch.x))); _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(1, max(1, 1))); _injected_loop_counter ++)
        {
         return;
        }
      }
    }
   return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     for(int _injected_loop_counter = _GLF_IDENTITY(1, int(ivec4(1, (0 >> _GLF_IDENTITY(int(6), int(6))), 1, (1 ^ 1)))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        break;
       return;
      }
    }
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, true, true)))))
  return;
 uvec3 GLF_merged3_0_1_13_1_1_13_2_1_14num_workgroupsubgroup_baseworkgroup_size;
 do
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
     do
      {
       return;
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
        return;
      }
    }
   else
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       GLF_merged2_0_3_72_3_1_16GLF_merged3_0_1_13_1_1_13_2_1_14num_workgroupsubgroup_baseworkgroup_sizenext_virtual_gid.xyz = GLF_merged3_0_1_13_1_1_13_2_1_14num_workgroupsubgroup_baseworkgroup_size;
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      return;
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               return;
              }
            }
          }
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       do
        {
         return;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 >> _GLF_IDENTITY(int(5), int(5)))); _injected_loop_counter --)
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 >> _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (int(4)) - 0)))); _injected_loop_counter --)
          {
           return;
          }
         if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, ! (! (false))))), _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, false, false)))))
            break;
           continue;
          }
        }
      }
    }
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
  }
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(false))
  return;
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 while(_GLF_WRAPPED_LOOP(false));
 for(int _injected_loop_counter = _GLF_IDENTITY(((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(5, _GLF_IDENTITY((5) + 0, max(_GLF_IDENTITY((5) + 0, ((5) + 0) | 0), (5) + 0)))), _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(5, max(5, 5))), (true ? _GLF_IDENTITY(int(5), min(_GLF_IDENTITY(int(5), (int(5)) | 0), int(5))) : _GLF_FUZZED(29763))), clamp(_GLF_IDENTITY(int(_GLF_IDENTITY(5, min(_GLF_IDENTITY(5, (5) / 1), 5))), (int(5)) | (int(5))), int(5), int(5))))), min(((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(5, _GLF_IDENTITY((5) + 0, max(_GLF_IDENTITY((5) + 0, ((5) + 0) | 0), (5) + 0)))), _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(5, max(5, 5))), (true ? _GLF_IDENTITY(int(5), min(_GLF_IDENTITY(int(5), (int(5)) | 0), int(5))) : _GLF_FUZZED(29763))), clamp(_GLF_IDENTITY(int(_GLF_IDENTITY(5, min(_GLF_IDENTITY(5, (5) / 1), 5))), (int(5)) | (int(5))), int(5), int(5))))), ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(5, _GLF_IDENTITY((5) + 0, max(_GLF_IDENTITY((5) + 0, ((5) + 0) | 0), (5) + 0)))), _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(5, max(5, 5))), (true ? _GLF_IDENTITY(int(5), min(_GLF_IDENTITY(int(5), (int(5)) | 0), int(5))) : _GLF_FUZZED(29763))), clamp(_GLF_IDENTITY(int(_GLF_IDENTITY(5, min(_GLF_IDENTITY(5, (5) / 1), 5))), (int(5)) | (int(5))), int(5), int(5))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY((_GLF_IDENTITY((-55992 * _GLF_IDENTITY(54059, int(ivec3(54059, 1, 0)))) & (_GLF_IDENTITY(_GLF_IDENTITY(0, ~ (~ (0))), (_GLF_IDENTITY(0, ~ (~ (0)))) | 0) | 0), (_GLF_IDENTITY((-55992 * _GLF_IDENTITY(54059, int(ivec3(54059, 1, 0)))) & (_GLF_IDENTITY(_GLF_IDENTITY(0, ~ (~ (0))), (_GLF_IDENTITY(0, ~ (~ _GLF_IDENTITY((0), ((0)) * 1)))) | _GLF_IDENTITY(0, max(0, 0))) | 0), ((-55992 * _GLF_IDENTITY(54059, int(ivec3(54059, 1, 0)))) & (_GLF_IDENTITY(_GLF_IDENTITY(0, ~ (~ (0))), (_GLF_IDENTITY(0, ~ (~ (0)))) | 0) | 0)) >> 0)) | ((-55992 * _GLF_IDENTITY(54059, int(ivec3(54059, 1, 0)))) & (_GLF_IDENTITY(_GLF_IDENTITY(0, ~ (~ (0))), (_GLF_IDENTITY(0, ~ (~ (0)))) | 0) | 0)))), 0 | _GLF_IDENTITY((((-55992 * 54059) & (0 | 0))), ((((-55992 * 54059) & (0 | 0)))) | (_GLF_IDENTITY(_GLF_IDENTITY((((-55992 * 54059) & (0 | 0))), ((((-55992 * 54059) & (0 | 0)))) | 0), (_GLF_IDENTITY((((-55992 * 54059) & (0 | 0))), ((((-55992 * 54059) & (0 | 0)))) | 0)) ^ 0))))); _injected_loop_counter --)
  {
   do
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > _GLF_IDENTITY(0, (0) ^ 0), _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-870.695), _GLF_FUZZED(vec3(-779.456, 9.5, -421.375).t)), vec2((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch)[1], ((injectionSwitch)[1]) / 1.0)), bvec2(true, true))) : _GLF_FUZZED(mix((vec2(62.66, -27.78) * mat2(7.2, 28.28, 143.777, 294.841)), smoothstep(5995.6273, 941.243, vec2(5883.0273, 531.810)), vec2(-800.106, -8.6))))).y)) && (_injected_loop_counter > 0))); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        continue;
       do
        {
         do
          {
           GLF_merged3_0_1_11_1_1_17_2_1_11subgroup_idsubgroup_local_idvirtual_gid.x = subgroup_id;
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
       for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         do
          {
           if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true), false, true, false)), bool(bvec4(bool(bvec4(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true), false, true, false)), false, false, false)))))
            {
             if(_GLF_DEAD(false))
              {
               do
                {
                 for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(1, _GLF_IDENTITY(int(int(_GLF_IDENTITY(1, (1) << 0))), (int(int(_GLF_IDENTITY(1, (1) << 0)))) + 0))); _injected_loop_counter ++)
                  {
                   return;
                  }
                }
               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
              }
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 & 1)); _injected_loop_counter ++)
              {
               return;
              }
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       if(_GLF_DEAD(false))
        break;
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y)), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(vec4(6338.0104, 9.0, -4373.3683, -1.3).s)), bool(false))), injectionSwitch.x)) > injectionSwitch.y))) || false)));
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
    }
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))), (_GLF_DEAD(false)) || false))
    return;
  }
 if(_GLF_DEAD(false))
  return;
 _GLF_struct_25 _GLF_struct_replacement_25 = _GLF_struct_25(_GLF_struct_20(_GLF_struct_19(gl_SubgroupSize, bvec2(true), uvec3(1u), mat3(1.0))), _GLF_struct_22(mat2x4(1.0), _GLF_struct_21(_GLF_IDENTITY(uvec2(1u), clamp(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(_GLF_IDENTITY(1u, clamp(1u, 1u, 1u)), (_GLF_IDENTITY(1u, clamp(1u, 1u, 1u))) ^ 0u)), uvec2(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(vec4(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), 1.0, 0.0))))).x), _GLF_ZERO(_GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, (0.0) / 1.0), 0.0)), injectionSwitch.x)) ^ (uvec2(1u))), uvec2(1u), uvec2(_GLF_IDENTITY(_GLF_IDENTITY(1u, (true ? _GLF_IDENTITY(1u, (1u) | (_GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, (1u) + (154002u & 0u))) | (1u)))) : _GLF_FUZZED(atomicLoad(87907u, 75498, 19909, -80842)))), (1u) | 0u)))), mat3x2(1.0)), ivec3(_GLF_IDENTITY(1, (1) / 1)), mat4(1.0)), _GLF_struct_24(_GLF_IDENTITY(mat3(1.0), (true ? _GLF_IDENTITY(mat3(_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(39.30)), bool(false)))), transpose(transpose(mat3(1.0)))) : _GLF_FUZZED(mat3(8.3, 3.0, 5.0, -804.988, -616.619, -68.50, _GLF_IDENTITY(-95.65, mix(float(_GLF_FUZZED(-4.8)), float(-95.65), bool(true))), -539.361, -8.5)))), _GLF_struct_23(1.0, mat3x4(1.0), mat2(1.0), mat4(_GLF_IDENTITY(1.0, max(1.0, 1.0))), _GLF_IDENTITY(uvec2(1u), (_GLF_IDENTITY(uvec2(1u), (_GLF_IDENTITY(uvec2(_GLF_IDENTITY(1u, _GLF_IDENTITY(0u + (1u), (0u + (_GLF_IDENTITY(1u, (1u) | 0u))) >> 0u))), (uvec2(_GLF_IDENTITY(1u, 0u + (1u)))) ^ uvec2(0u, 0u))) | uvec2(0u, 0u))) | (_GLF_IDENTITY(uvec2(1u), (uvec2(1u)) | (uvec2(1u))))))));
 GLF_merged3_0_1_13_1_1_13_2_1_11subgroup_basesubgroup_sizevirtual_gid.y = _GLF_struct_replacement_25._f0._f0.subgroup_size;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   do
    {
     do
      {
       do
        {
         return;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false), (_GLF_DEAD(false)) || false))), (bool(bool(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false)))) || false)))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    return;
   _GLF_struct_replacement_37.GLF_merged3_0_1_4_1_1_13_2_1_12readsubgroup_sizeworkgroup_id.y = GLF_merged3_0_1_13_1_1_13_2_1_11subgroup_basesubgroup_sizevirtual_gid.y;
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     do
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
         return;
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(_GLF_IDENTITY(bvec2((injectionSwitch.x > injectionSwitch.y), true), bvec2(bvec2(bvec2((injectionSwitch.x > injectionSwitch.y), true)))))))))));
    }
   else
    {
    }
  }
 else
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))
    return;
  }
 _GLF_struct_16 _GLF_struct_replacement_16 = _GLF_struct_16(vec4(1.0), _GLF_struct_10(vec2(_GLF_IDENTITY(1.0, (1.0) - 0.0)), gl_SubgroupInvocationID, _GLF_struct_6(mat3x4(1.0), _GLF_IDENTITY(ivec2(1), ivec2(_GLF_IDENTITY(_GLF_IDENTITY(ivec3(ivec2(1), 1), min(ivec3(ivec2(1), 1), ivec3(_GLF_IDENTITY(ivec2(1), clamp(ivec2(1), ivec2(1), _GLF_IDENTITY(ivec2(1), _GLF_IDENTITY((_GLF_IDENTITY(ivec2(1), (ivec2(1)) << ivec2(0, 0))), ivec2(0, 0) + ((_GLF_IDENTITY(ivec2(1), (ivec2(1)) << ivec2(0, 0))))) >> (ivec2(0, 0) << _GLF_IDENTITY(ivec2(7), ivec2(7)))))), 1))), (true ? _GLF_IDENTITY(ivec3(ivec2(1), 1), min(ivec3(ivec2(1), 1), _GLF_IDENTITY(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(ivec2(1), clamp(ivec2(1), ivec2(1), _GLF_IDENTITY(ivec2(1), (ivec2(1)) >> (ivec2(0, 0) << _GLF_IDENTITY(ivec2(7), _GLF_IDENTITY(ivec2(7), (ivec2(7)) << ivec2(0, 0))))))), ivec2(_GLF_IDENTITY(ivec3(_GLF_IDENTITY(ivec2(1), clamp(ivec2(1), ivec2(1), _GLF_IDENTITY(ivec2(1), (ivec2(1)) >> (ivec2(0, 0) << _GLF_IDENTITY(ivec2(7), ivec2(_GLF_IDENTITY(7, min(7, 7)))))))), 0), (ivec3(_GLF_IDENTITY(ivec2(1), clamp(ivec2(1), ivec2(1), _GLF_IDENTITY(ivec2(1), (ivec2(1)) >> _GLF_IDENTITY((ivec2(_GLF_IDENTITY(0, clamp(0, 0, 0)), 0) << _GLF_IDENTITY(ivec2(_GLF_IDENTITY(7, (7) + int(_GLF_ZERO(0.0, injectionSwitch.x)))), ivec2(7))), ((ivec2(_GLF_IDENTITY(0, clamp(0, 0, 0)), 0) << _GLF_IDENTITY(ivec2(_GLF_IDENTITY(7, (7) + int(_GLF_ZERO(0.0, injectionSwitch.x)))), ivec2(7)))) - ivec2(0, 0))))), 0)) | _GLF_IDENTITY((ivec3(_GLF_IDENTITY(ivec2(1), clamp(ivec2(1), ivec2(1), _GLF_IDENTITY(ivec2(1), (ivec2(1)) >> (ivec2(0, 0) << _GLF_IDENTITY(ivec2(7), ivec2(7)))))), 0)), clamp((ivec3(_GLF_IDENTITY(ivec2(1), clamp(ivec2(1), ivec2(1), _GLF_IDENTITY(ivec2(1), (ivec2(1)) >> (ivec2(0, 0) << _GLF_IDENTITY(ivec2(7), ivec2(7)))))), 0)), (ivec3(_GLF_IDENTITY(ivec2(1), clamp(ivec2(1), ivec2(1), _GLF_IDENTITY(ivec2(1), (ivec2(1)) >> (ivec2(0, 0) << _GLF_IDENTITY(ivec2(7), ivec2(7)))))), 0)), (ivec3(_GLF_IDENTITY(ivec2(1), clamp(ivec2(1), ivec2(1), _GLF_IDENTITY(ivec2(1), (ivec2(1)) >> (ivec2(0, 0) << _GLF_IDENTITY(ivec2(7), ivec2(7)))))), 0))))))), 1), clamp(_GLF_IDENTITY(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(ivec2(1), clamp(ivec2(1), ivec2(1), _GLF_IDENTITY(ivec2(1), (ivec2(1)) >> (ivec2(0, 0) << _GLF_IDENTITY(ivec2(_GLF_IDENTITY(7, ~ (_GLF_IDENTITY(~ (7), 0 | (~ (7)))))), ivec2(7)))))), ivec2(_GLF_IDENTITY(ivec3(_GLF_IDENTITY(ivec2(1), clamp(ivec2(1), ivec2(1), _GLF_IDENTITY(ivec2(1), (ivec2(1)) >> (ivec2(0, 0) << _GLF_IDENTITY(ivec2(7), ivec2(7)))))), 0), (ivec3(_GLF_IDENTITY(ivec2(1), clamp(ivec2(1), ivec2(1), _GLF_IDENTITY(ivec2(1), (ivec2(1)) >> (_GLF_IDENTITY(ivec2(0, 0) << _GLF_IDENTITY(ivec2(7), ivec2(7)), (ivec2(0, 0) << _GLF_IDENTITY(ivec2(7), ivec2(7))) ^ ivec2(0, 0)))))), 0)) | (ivec3(_GLF_IDENTITY(ivec2(1), clamp(ivec2(1), ivec2(1), _GLF_IDENTITY(ivec2(1), _GLF_IDENTITY((ivec2(1)) >> (ivec2(0, 0) << _GLF_IDENTITY(ivec2(7), ivec2(7))), ivec2(ivec4((ivec2(1)) >> (ivec2(0, 0) << _GLF_IDENTITY(ivec2(7), ivec2(7))), 0, 0)))))), _GLF_IDENTITY(0, int(int(0)))))))), 1), (ivec3(_GLF_IDENTITY(_GLF_IDENTITY(ivec2(1), clamp(ivec2(1), ivec2(1), _GLF_IDENTITY(ivec2(1), (ivec2(1)) >> (ivec2(0, 0) << _GLF_IDENTITY(ivec2(7), ivec2(7)))))), ivec2(_GLF_IDENTITY(ivec3(_GLF_IDENTITY(ivec2(_GLF_IDENTITY(1, min(_GLF_IDENTITY(1, (1) << 0), 1))), clamp(ivec2(1), ivec2(1), _GLF_IDENTITY(ivec2(1), (ivec2(1)) >> (ivec2(0, 0) << _GLF_IDENTITY(ivec2(7), ivec2(7)))))), 0), (ivec3(_GLF_IDENTITY(ivec2(1), clamp(ivec2(1), ivec2(1), _GLF_IDENTITY(ivec2(1), _GLF_IDENTITY((ivec2(1)) >> (ivec2(0, 0) << _GLF_IDENTITY(ivec2(7), ivec2(7))), ivec2(0, 0) | (_GLF_IDENTITY((ivec2(1)) >> (ivec2(0, 0) << _GLF_IDENTITY(ivec2(7), ivec2(7))), ~ (~ ((ivec2(1)) >> (ivec2(0, 0) << _GLF_IDENTITY(ivec2(7), ivec2(7))))))))))), 0)) | (ivec3(_GLF_IDENTITY(ivec2(1), _GLF_IDENTITY(clamp(ivec2(1), ivec2(1), _GLF_IDENTITY(ivec2(1), (ivec2(1)) >> (ivec2(0, 0) << _GLF_IDENTITY(ivec2(7), ivec2(7))))), ivec2(0, 0) ^ (clamp(ivec2(1), ivec2(1), _GLF_IDENTITY(ivec2(1), (ivec2(1)) >> (ivec2(0, 0) << _GLF_IDENTITY(ivec2(7), ivec2(7)))))))), 0))))), 1)) | (_GLF_IDENTITY(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(ivec2(1), clamp(ivec2(1), ivec2(1), _GLF_IDENTITY(ivec2(1), (ivec2(1)) >> (ivec2(0, 0) << _GLF_IDENTITY(ivec2(7), ivec2(7)))))), ivec2(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)) + (_GLF_IDENTITY(_GLF_IDENTITY(ivec2(1), clamp(ivec2(1), ivec2(1), _GLF_IDENTITY(ivec2(1), (ivec2(1)) >> (ivec2(0, 0) << _GLF_IDENTITY(ivec2(7), ivec2(7)))))), (_GLF_IDENTITY(ivec2(1), clamp(ivec2(1), ivec2(1), _GLF_IDENTITY(ivec2(1), (ivec2(1)) >> (ivec2(0, 0) << _GLF_IDENTITY(ivec2(7), ivec2(7))))))) | (_GLF_IDENTITY(ivec2(1), clamp(ivec2(1), ivec2(1), _GLF_IDENTITY(ivec2(1), (ivec2(1)) >> (ivec2(0, 0) << _GLF_IDENTITY(ivec2(7), ivec2(7)))))))))), ivec2(_GLF_IDENTITY(ivec3(_GLF_IDENTITY(ivec2(1), clamp(ivec2(1), ivec2(1), _GLF_IDENTITY(ivec2(1), (ivec2(1)) >> (ivec2(0, 0) << _GLF_IDENTITY(ivec2(7), ivec2(7)))))), 0), (ivec3(_GLF_IDENTITY(ivec2(1), clamp(ivec2(1), ivec2(1), _GLF_IDENTITY(ivec2(1), (ivec2(1)) >> (ivec2(0, 0) << _GLF_IDENTITY(ivec2(7), ivec2(7)))))), 0)) | (ivec3(_GLF_IDENTITY(ivec2(1), clamp(ivec2(1), ivec2(1), _GLF_IDENTITY(ivec2(1), (ivec2(1)) >> (ivec2(0, 0) << _GLF_IDENTITY(ivec2(7), ivec2(7)))))), 0))))), 1), ivec3(ivec4(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(ivec2(1), clamp(ivec2(1), ivec2(1), _GLF_IDENTITY(ivec2(1), (ivec2(1)) >> (ivec2(0, 0) << _GLF_IDENTITY(ivec2(7), ivec2(7)))))), ivec2(_GLF_IDENTITY(ivec3(_GLF_IDENTITY(ivec2(1), clamp(ivec2(1), ivec2(1), _GLF_IDENTITY(ivec2(1), _GLF_IDENTITY((ivec2(1)) >> (ivec2(0, 0) << _GLF_IDENTITY(ivec2(7), ivec2(7))), max((ivec2(1)) >> (ivec2(0, 0) << _GLF_IDENTITY(ivec2(7), ivec2(7))), (ivec2(1)) >> (ivec2(0, 0) << _GLF_IDENTITY(ivec2(7), ivec2(7)))))))), 0), (ivec3(_GLF_IDENTITY(ivec2(1), clamp(ivec2(1), ivec2(1), _GLF_IDENTITY(ivec2(1), (ivec2(1)) >> (ivec2(0, 0) << _GLF_IDENTITY(ivec2(7), ivec2(7)))))), 0)) | (_GLF_IDENTITY(ivec3(_GLF_IDENTITY(ivec2(1), clamp(ivec2(1), ivec2(1), _GLF_IDENTITY(ivec2(1), (ivec2(1)) >> (ivec2(0, 0) << _GLF_IDENTITY(ivec2(7), ivec2(7)))))), 0), ~ (~ (ivec3(_GLF_IDENTITY(ivec2(1), clamp(ivec2(1), ivec2(1), _GLF_IDENTITY(ivec2(1), (ivec2(1)) >> (ivec2(0, 0) << _GLF_IDENTITY(ivec2(7), ivec2(7)))))), 0)))))))), 1), 0))))), ivec3(_GLF_IDENTITY(_GLF_IDENTITY(ivec2(1), _GLF_IDENTITY(clamp(ivec2(1), ivec2(1), _GLF_IDENTITY(ivec2(1), (ivec2(1)) >> (ivec2(0, 0) << _GLF_IDENTITY(ivec2(7), ivec2(7))))), clamp(_GLF_IDENTITY(clamp(ivec2(1), ivec2(1), _GLF_IDENTITY(ivec2(1), (ivec2(1)) >> (ivec2(0, 0) << _GLF_IDENTITY(ivec2(7), ivec2(7))))), (_GLF_IDENTITY(clamp(ivec2(1), ivec2(1), _GLF_IDENTITY(ivec2(1), (ivec2(1)) >> (ivec2(0, 0) << _GLF_IDENTITY(ivec2(7), ivec2(7))))), ivec2(0, 0) | (clamp(ivec2(1), ivec2(1), _GLF_IDENTITY(ivec2(1), (ivec2(1)) >> (ivec2(0, 0) << _GLF_IDENTITY(ivec2(7), ivec2(7)))))))) * ivec2(1, 1)), clamp(ivec2(1), ivec2(1), _GLF_IDENTITY(ivec2(1), (ivec2(1)) >> (ivec2(0, 0) << _GLF_IDENTITY(ivec2(7), ivec2(7))))), clamp(ivec2(1), ivec2(1), _GLF_IDENTITY(ivec2(1), (ivec2(1)) >> (ivec2(0, 0) << _GLF_IDENTITY(ivec2(7), ivec2(7)))))))), ivec2(_GLF_IDENTITY(ivec3(_GLF_IDENTITY(ivec2(1), clamp(ivec2(1), ivec2(1), _GLF_IDENTITY(ivec2(1), (ivec2(1)) >> (ivec2(0, 0) << _GLF_IDENTITY(ivec2(7), ivec2(7)))))), 0), (ivec3(_GLF_IDENTITY(ivec2(1), clamp(ivec2(1), ivec2(1), _GLF_IDENTITY(ivec2(1), (ivec2(1)) >> (ivec2(0, 0) << _GLF_IDENTITY(_GLF_IDENTITY(ivec2(7), (ivec2(7)) >> ivec2(0, 0)), ivec2(7)))))), 0)) | (ivec3(_GLF_IDENTITY(ivec2(1), clamp(ivec2(1), ivec2(1), _GLF_IDENTITY(ivec2(1), (ivec2(1)) >> (ivec2(0, 0) << _GLF_IDENTITY(ivec2(7), ivec2(7)))))), 0))))), 1), ivec3(_GLF_IDENTITY(_GLF_IDENTITY(ivec2(1), clamp(ivec2(1), ivec2(1), _GLF_IDENTITY(ivec2(1), (ivec2(1)) >> (ivec2(0, 0) << _GLF_IDENTITY(ivec2(7), ivec2(7)))))), ivec2(_GLF_IDENTITY(ivec3(_GLF_IDENTITY(ivec2(1), clamp(ivec2(1), ivec2(1), _GLF_IDENTITY(ivec2(1), (ivec2(1)) >> (ivec2(0, 0) << _GLF_IDENTITY(ivec2(7), ivec2(7)))))), 0), (ivec3(_GLF_IDENTITY(ivec2(1), clamp(ivec2(1), ivec2(1), _GLF_IDENTITY(ivec2(1), (ivec2(_GLF_IDENTITY(1, (1) + int(_GLF_ZERO(0.0, injectionSwitch.x))))) >> (ivec2(0, 0) << _GLF_IDENTITY(ivec2(7), ivec2(7)))))), 0)) | (ivec3(_GLF_IDENTITY(ivec2(1), clamp(ivec2(1), ivec2(1), _GLF_IDENTITY(ivec2(1), (_GLF_IDENTITY(ivec2(1), (ivec2(1)) >> ((ivec2(-32350, 70903) & ivec2(0, 0)) >> _GLF_IDENTITY(ivec2(6), ivec2(6))))) >> (ivec2(0, 0) << _GLF_IDENTITY(ivec2(7), ivec2(7)))))), 0))))), _GLF_IDENTITY(1, (1) / 1)))))) : _GLF_FUZZED(ivec3(-79227, 43889, 17707)))))), mat2x3(1.0), mat2x4(1.0), 1u, mat4x3(1.0), 1), _GLF_struct_7(mat4x2(1.0), mat4(1.0), mat3(1.0), _GLF_IDENTITY(vec2(1.0), mix(vec2(_GLF_FUZZED(float(false)), (vec2(1.0))[1]), vec2(_GLF_IDENTITY((vec2(1.0))[0], ((vec2(1.0))[0]) / 1.0), _GLF_FUZZED(float(11875))), bvec2(true, false))), ivec3(_GLF_IDENTITY(1, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(1, (1) / 1)), (~ (1)) | _GLF_IDENTITY((~ (1)), ~ (_GLF_IDENTITY(~ ((~ (1))), min(_GLF_IDENTITY(~ ((~ (1))), clamp(~ ((~ (1))), ~ ((~ (1))), ~ ((~ (1))))), ~ ((~ (1)))))))))))), true, ivec2(1), _GLF_struct_8(mat3x4(1.0)), _GLF_struct_9(uvec4(1u), uvec4(1u), mat2(1.0), ivec2(_GLF_IDENTITY(1, (1) | 0)), 1, ivec4(1))), _GLF_struct_15(_GLF_struct_11(true, mat2(1.0), mat3x4(1.0), mat3x2(1.0), mat4(1.0), uvec2(1u)), _GLF_struct_12(ivec3(_GLF_IDENTITY(1, (1) ^ 0)), bvec3(true), ivec3(1), true), _GLF_struct_13(vec3(1.0), bvec2(true)), _GLF_struct_14(mat4(1.0), 1, uvec4(1u), 1u)), ivec4(1), mat2x3(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(_GLF_IDENTITY(5769.1023, (_GLF_IDENTITY(5769.1023, float(mat2x3(_GLF_IDENTITY(5769.1023, float(mat4x3(5769.1023, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0))), 0.0, 1.0, 1.0, 0.0, 1.0)))) / 1.0))))));
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
  }
 for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(1, max(1, 1))); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    continue;
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      break;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        break;
       continue;
      }
     if(_GLF_DEAD(false))
      continue;
     GLF_merged3_0_1_11_1_1_17_2_1_11subgroup_idsubgroup_local_idvirtual_gid.y = _GLF_struct_replacement_16._f1.subgroup_local_id;
    }
   while(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_GLF_WRAPPED_LOOP(false), false), bvec2(bvec3(bvec2(_GLF_WRAPPED_LOOP(false), false), true)))), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_GLF_WRAPPED_LOOP(false), false), bvec2(bvec3(bvec2(_GLF_WRAPPED_LOOP(false), false), true)))), (bool(_GLF_IDENTITY(bvec2(_GLF_WRAPPED_LOOP(false), false), bvec2(bvec3(bvec2(_GLF_WRAPPED_LOOP(false), false), true))))) && true), false, false, true)), false || (bool(bvec4(_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_GLF_WRAPPED_LOOP(false), false), bvec2(bvec3(bvec2(_GLF_WRAPPED_LOOP(false), false), true)))), (bool(_GLF_IDENTITY(bvec2(_GLF_WRAPPED_LOOP(false), false), bvec2(bvec3(bvec2(_GLF_WRAPPED_LOOP(false), false), true))))) && true), false, false, true)))))), ! (! (_GLF_WRAPPED_LOOP(false)))));
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         return;
        }
       else
        {
        }
      }
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       do
        {
         return;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
  }
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       return;
      }
    }
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   do
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         do
          {
           if(_GLF_DEAD(false))
            break;
           if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
            return;
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       else
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           for(int _injected_loop_counter = int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / sqrt(1.0)))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _GLF_IDENTITY(_injected_loop_counter --, ~ (~ (_injected_loop_counter --))))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), bool(bvec2(! (true), false)))))))
                {
                 do
                  {
                   if(_GLF_DEAD(false))
                    continue;
                   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) || false)))
                    {
                     if(_GLF_WRAPPED_IF_TRUE(true))
                      {
                       if(_GLF_WRAPPED_IF_FALSE(false))
                        {
                        }
                       else
                        {
                         if(_GLF_DEAD(false))
                          return;
                        }
                      }
                     else
                      {
                      }
                    }
                   else
                    {
                     if(_GLF_WRAPPED_IF_TRUE(true))
                      {
                       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        {
                        }
                       else
                        {
                         if(_GLF_WRAPPED_IF_TRUE(true))
                          {
                           GLF_merged2_0_3_72_3_1_16GLF_merged3_0_1_13_1_1_13_2_1_14num_workgroupsubgroup_baseworkgroup_sizenext_virtual_gid.xyz.x = _GLF_IDENTITY(num_workgroup, (_GLF_IDENTITY(num_workgroup, 0u | (num_workgroup))) | 0u);
                          }
                         else
                          {
                          }
                        }
                      }
                     else
                      {
                      }
                    }
                  }
                 while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).y))), (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).y)))) || false));
                }
               else
                {
                }
              }
             else
              {
              }
            }
          }
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           do
            {
             return;
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
      }
     else
      {
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 _GLF_struct_18 _GLF_struct_replacement_18 = _GLF_struct_18(vec4(_GLF_IDENTITY(1.0, clamp(1.0, _GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, (1.0) + 0.0), 1.0)), 1.0))), bvec3(true), bvec3(true), _GLF_struct_17(mat2x4(1.0), gl_WorkGroupSize.x));
 do
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  return;
 for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
  {
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, vec2(mat4x3(_GLF_IDENTITY(injectionSwitch, vec2(vec2(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch))))), 0.0, 1.0, 1.0, 0.0, 0.0, sin(log(1.0)), 1.0, 0.0, log(sqrt(1.0)), _GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, 0.0 + (_GLF_IDENTITY(1.0, (1.0) / 1.0))), 1.0, 1.0))))).y))))
  {
   GLF_merged2_0_3_72_3_1_16GLF_merged3_0_1_13_1_1_13_2_1_14num_workgroupsubgroup_baseworkgroup_sizenext_virtual_gid.xyz.z = _GLF_struct_replacement_18._f3.workgroup_size;
   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), bool(bvec4(_GLF_WRAPPED_IF_TRUE(true), false, false, true))))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(bvec3(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, (false) || false)), ! (! (_GLF_IDENTITY(bool(_GLF_IDENTITY(false, (false) || false)), false || (bool(_GLF_IDENTITY(false, (false) || false)))))))))), _GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(max(injectionSwitch.x, injectionSwitch.x), clamp(max(injectionSwitch.x, injectionSwitch.x), max(injectionSwitch.x, injectionSwitch.x), max(injectionSwitch.x, injectionSwitch.x)))) > injectionSwitch.y, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(max(injectionSwitch.x, injectionSwitch.x), clamp(max(injectionSwitch.x, injectionSwitch.x), max(injectionSwitch.x, injectionSwitch.x), max(injectionSwitch.x, injectionSwitch.x)))) > injectionSwitch.y), (! (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(max(injectionSwitch.x, injectionSwitch.x), clamp(max(injectionSwitch.x, injectionSwitch.x), max(injectionSwitch.x, injectionSwitch.x), max(injectionSwitch.x, injectionSwitch.x)))) > injectionSwitch.y)) || false))))), true), _GLF_IDENTITY(bvec3(bvec3(_GLF_IDENTITY(bvec3(_GLF_DEAD(false), _GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false), false || (injectionSwitch.x > injectionSwitch.y)))), true), bvec3(_GLF_IDENTITY(bvec3(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), false))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)), _GLF_IDENTITY(bvec3(bvec4(bvec3(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), false))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)), true)), bvec3(bvec4(bvec3(bvec4(bvec3(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), false))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)), true)), false)))))))), bvec3(bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec3(_GLF_DEAD(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), bvec3(bvec3(bvec3(_GLF_DEAD(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))))))))))))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
        {
         return;
        }
      }
    }
   else
    {
    }
  }
 else
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, true && (false))))
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 >> _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), ~ (~ (int(0))))))); _injected_loop_counter --)
          {
           for(int _injected_loop_counter = (0 | int(_GLF_ZERO(_GLF_IDENTITY(0.0, float(mat2(_GLF_IDENTITY(0.0, (0.0) - 0.0), 0.0, 1.0, 0.0))), injectionSwitch.x))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))
              {
               if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) && true)))
                {
                 return;
                }
               else
                {
                }
              }
            }
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             return;
            }
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       else
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
                return;
               do
                {
                 do
                  {
                   return;
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
            }
           else
            {
            }
          }
         if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false))))
          return;
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))))
              return;
            }
           if(_GLF_DEAD(false))
            return;
          }
        }
      }
    }
  }
 _GLF_struct_5 _GLF_struct_replacement_5 = _GLF_struct_5(_GLF_struct_2(_GLF_struct_0(mat3x4(1.0), mat2x3(1.0)), _GLF_struct_1(uvec4(1u), ivec2(1), vec4(_GLF_IDENTITY(1.0, max(1.0, _GLF_IDENTITY(1.0, _GLF_IDENTITY(min(_GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, (1.0) + 0.0), _GLF_IDENTITY(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), mix(float(1.0), float(_GLF_FUZZED(-6989.7779)), bool(false))), 1.0)), _GLF_IDENTITY(_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(float(8810u))), bool(false))), mix(float(_GLF_IDENTITY(_GLF_FUZZED((4800.7648 * -0.1)), max(_GLF_FUZZED((4800.7648 * -0.1)), _GLF_FUZZED((4800.7648 * -0.1))))), _GLF_IDENTITY(float(1.0), float(mat4x3(float(1.0), tan(0.0), 0.0, 1.0, sqrt(1.0), abs(1.0), 1.0, abs(sqrt(0.0)), 0.0, 0.0, 1.0, 1.0))), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), (_GLF_IDENTITY(_GLF_TRUE(_GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, (_GLF_IDENTITY(true, true && (true))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), (injectionSwitch.x < injectionSwitch.y)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) && true) ? min(1.0, 1.0) : _GLF_FUZZED((+ 877.754)))))))))), _GLF_struct_4(bvec3(true), mat2(1.0), _GLF_struct_3(mat4(_GLF_IDENTITY(1.0, _GLF_IDENTITY((1.0) / 1.0, _GLF_IDENTITY(mix(float(_GLF_FUZZED(-5.2)), float(_GLF_IDENTITY((_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-0.2)), bool(false)))), clamp(_GLF_IDENTITY((_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-0.2)), bool(false)))), 0.0 + (_GLF_IDENTITY((_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-0.2)), bool(false)))), ((_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-0.2)), bool(false))))) / 1.0))), (_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-0.2)), bool(false)))), (_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-0.2)), bool(false)))))) / 1.0), bool(true)), (false ? _GLF_FUZZED(28.96) : mix(float(_GLF_FUZZED(-5.2)), float((1.0) / 1.0), bool(true))))))), mat4(1.0), mat2x3(1.0), vec2(1.0), 1), vec2(1.0)), gl_WorkGroupID.x);
 do
  {
   do
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      return;
     do
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 << _GLF_IDENTITY(int(2), int(2)))); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          return;
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
       return;
      }
     if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false), (_GLF_DEAD(false)) || false))
      continue;
     _GLF_struct_replacement_37.GLF_merged3_0_1_4_1_1_13_2_1_12readsubgroup_sizeworkgroup_id.z = _GLF_struct_replacement_5.workgroup_id;
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 uint workgroup_base = GLF_merged2_0_3_72_3_1_16GLF_merged3_0_1_13_1_1_13_2_1_14num_workgroupsubgroup_baseworkgroup_sizenext_virtual_gid.xyz.z * _GLF_struct_replacement_37.GLF_merged3_0_1_4_1_1_13_2_1_12readsubgroup_sizeworkgroup_id.z;
 if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
  return;
 _GLF_struct_26 _GLF_struct_replacement_26 = _GLF_struct_26(GLF_merged3_0_1_11_1_1_17_2_1_11subgroup_idsubgroup_local_idvirtual_gid.x * _GLF_IDENTITY(_GLF_struct_replacement_37.GLF_merged3_0_1_4_1_1_13_2_1_12readsubgroup_sizeworkgroup_id.y, (_GLF_struct_replacement_37.GLF_merged3_0_1_4_1_1_13_2_1_12readsubgroup_sizeworkgroup_id.y) | (_GLF_IDENTITY(_GLF_struct_replacement_37.GLF_merged3_0_1_4_1_1_13_2_1_12readsubgroup_sizeworkgroup_id.y, uint(uvec2(_GLF_IDENTITY(_GLF_struct_replacement_37.GLF_merged3_0_1_4_1_1_13_2_1_12readsubgroup_sizeworkgroup_id.y, (_GLF_struct_replacement_37.GLF_merged3_0_1_4_1_1_13_2_1_12readsubgroup_sizeworkgroup_id.y) * 1u), (((1u & 1u) << _GLF_IDENTITY(uint(4u), _GLF_IDENTITY(uint(4u), (uint(4u)) >> 0u))) >> _GLF_IDENTITY(uint(4u), uint(4u)))))))), vec3(1.0), uvec4(_GLF_IDENTITY(1u, clamp(_GLF_IDENTITY(1u, 1u * (_GLF_IDENTITY(1u, _GLF_IDENTITY((1u) >> 0u, (true ? (1u) >> 0u : _GLF_FUZZED(workgroup_base)))))), 1u, _GLF_IDENTITY(1u, ~ (~ (_GLF_IDENTITY(1u, 0u ^ (_GLF_IDENTITY(1u, (false ? _GLF_FUZZED(num_workgroup) : 1u)))))))))), mat2x3(1.0), 1, bvec3(true));
 do
  {
   GLF_merged3_0_1_13_1_1_13_2_1_11subgroup_basesubgroup_sizevirtual_gid.x = _GLF_IDENTITY(_GLF_struct_replacement_26.subgroup_base, uint(_GLF_IDENTITY(uint(_GLF_IDENTITY(_GLF_struct_replacement_26.subgroup_base, ~ (_GLF_IDENTITY(~ (_GLF_struct_replacement_26.subgroup_base), (false ? _GLF_FUZZED(66843u) : ~ (_GLF_struct_replacement_26.subgroup_base)))))), 0u | (uint(_GLF_IDENTITY(_GLF_struct_replacement_26.subgroup_base, ~ (_GLF_IDENTITY(~ (_GLF_struct_replacement_26.subgroup_base), (false ? _GLF_IDENTITY(_GLF_FUZZED(66843u), (_GLF_IDENTITY(_GLF_FUZZED(66843u), clamp(_GLF_FUZZED(66843u), _GLF_FUZZED(66843u), _GLF_FUZZED(66843u)))) | (_GLF_FUZZED(66843u))) : ~ (_GLF_struct_replacement_26.subgroup_base))))))))));
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, true && (false))) || false), (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), false || (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y))))))))
    continue;
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
  }
 GLF_merged2_0_3_72_3_1_16GLF_merged3_0_1_13_1_1_13_2_1_14num_workgroupsubgroup_baseworkgroup_sizenext_virtual_gid.xyz.y = _GLF_IDENTITY(GLF_merged3_0_1_13_1_1_13_2_1_11subgroup_basesubgroup_sizevirtual_gid, min(GLF_merged3_0_1_13_1_1_13_2_1_11subgroup_basesubgroup_sizevirtual_gid, _GLF_IDENTITY(GLF_merged3_0_1_13_1_1_13_2_1_11subgroup_basesubgroup_sizevirtual_gid, _GLF_IDENTITY((_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_13_2_1_11subgroup_basesubgroup_sizevirtual_gid, (GLF_merged3_0_1_13_1_1_13_2_1_11subgroup_basesubgroup_sizevirtual_gid) | uvec3(0u, 0u, 0u))) + uvec3(0u, 0u, 0u), ((_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_13_2_1_11subgroup_basesubgroup_sizevirtual_gid, (GLF_merged3_0_1_13_1_1_13_2_1_11subgroup_basesubgroup_sizevirtual_gid) | uvec3(0u, 0u, 0u))) + uvec3(0u, 0u, 0u)) >> uvec3(0u, 0u, 0u))))).x;
 uint virtual_gid = _GLF_IDENTITY(workgroup_base + GLF_merged2_0_3_72_3_1_16GLF_merged3_0_1_13_1_1_13_2_1_14num_workgroupsubgroup_baseworkgroup_sizenext_virtual_gid.xyz.y, clamp(workgroup_base + GLF_merged2_0_3_72_3_1_16GLF_merged3_0_1_13_1_1_13_2_1_14num_workgroupsubgroup_baseworkgroup_sizenext_virtual_gid.xyz.y, _GLF_IDENTITY(workgroup_base + GLF_merged2_0_3_72_3_1_16GLF_merged3_0_1_13_1_1_13_2_1_14num_workgroupsubgroup_baseworkgroup_sizenext_virtual_gid.xyz.y, max(workgroup_base + _GLF_IDENTITY(GLF_merged2_0_3_72_3_1_16GLF_merged3_0_1_13_1_1_13_2_1_14num_workgroupsubgroup_baseworkgroup_sizenext_virtual_gid, min(GLF_merged2_0_3_72_3_1_16GLF_merged3_0_1_13_1_1_13_2_1_14num_workgroupsubgroup_baseworkgroup_sizenext_virtual_gid, GLF_merged2_0_3_72_3_1_16GLF_merged3_0_1_13_1_1_13_2_1_14num_workgroupsubgroup_baseworkgroup_sizenext_virtual_gid)).xyz.y, _GLF_IDENTITY(workgroup_base + GLF_merged2_0_3_72_3_1_16GLF_merged3_0_1_13_1_1_13_2_1_14num_workgroupsubgroup_baseworkgroup_sizenext_virtual_gid.xyz.y, _GLF_IDENTITY(1u, (1u) / uint(_GLF_ONE(1.0, injectionSwitch.y))) * (workgroup_base + GLF_merged2_0_3_72_3_1_16GLF_merged3_0_1_13_1_1_13_2_1_14num_workgroupsubgroup_baseworkgroup_sizenext_virtual_gid.xyz.y)))), workgroup_base + GLF_merged2_0_3_72_3_1_16GLF_merged3_0_1_13_1_1_13_2_1_14num_workgroupsubgroup_baseworkgroup_sizenext_virtual_gid.xyz.y)) + GLF_merged3_0_1_11_1_1_17_2_1_11subgroup_idsubgroup_local_idvirtual_gid.y;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false), false), bvec2(bvec2(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false), false))))), true && (bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false), false), bvec2(bvec2(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false), false)))))))))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               return;
              }
            }
           return;
          }
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             return;
            }
           else
            {
            }
          }
        }
       GLF_merged3_0_1_13_1_1_13_2_1_11subgroup_basesubgroup_sizevirtual_gid.z = virtual_gid;
      }
    }
   else
    {
    }
   for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > ((0 ^ _GLF_IDENTITY(0, 0 ^ (0))) >> _GLF_IDENTITY(int(2), int(2)))); _GLF_IDENTITY(_injected_loop_counter --, _GLF_IDENTITY(1, (1) ^ 0) * (_injected_loop_counter --)))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
      {
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), (int(1)) << 0))); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
          {
           return;
          }
        }
       return;
      }
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     if(_GLF_DEAD(false))
      return;
    }
  }
 else
  {
  }
 GLF_merged3_0_1_11_1_1_17_2_1_11subgroup_idsubgroup_local_idvirtual_gid.z = GLF_merged3_0_1_13_1_1_13_2_1_11subgroup_basesubgroup_sizevirtual_gid.z;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, false)))))))
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      break;
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 << _GLF_IDENTITY(int(7), int(7)))); _injected_loop_counter --)
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         for(int _injected_loop_counter = _GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) / 1)) >> 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
             if(_GLF_DEAD(false))
              break;
            }
           else
            {
             return;
            }
           if(_GLF_DEAD(false))
            continue;
          }
        }
      }
    }
  }
 uint next_virtual_gid = workgroup_base + _GLF_IDENTITY(GLF_merged2_0_3_72_3_1_16GLF_merged3_0_1_13_1_1_13_2_1_14num_workgroupsubgroup_baseworkgroup_sizenext_virtual_gid, ~ (~ _GLF_IDENTITY((GLF_merged2_0_3_72_3_1_16GLF_merged3_0_1_13_1_1_13_2_1_14num_workgroupsubgroup_baseworkgroup_sizenext_virtual_gid), uvec4(0u, 0u, _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, 0u + (0u))) >> 0u), 0u) | (_GLF_IDENTITY(_GLF_IDENTITY((GLF_merged2_0_3_72_3_1_16GLF_merged3_0_1_13_1_1_13_2_1_14num_workgroupsubgroup_baseworkgroup_sizenext_virtual_gid), max((GLF_merged2_0_3_72_3_1_16GLF_merged3_0_1_13_1_1_13_2_1_14num_workgroupsubgroup_baseworkgroup_sizenext_virtual_gid), (GLF_merged2_0_3_72_3_1_16GLF_merged3_0_1_13_1_1_13_2_1_14num_workgroupsubgroup_baseworkgroup_sizenext_virtual_gid))), clamp((GLF_merged2_0_3_72_3_1_16GLF_merged3_0_1_13_1_1_13_2_1_14num_workgroupsubgroup_baseworkgroup_sizenext_virtual_gid), (GLF_merged2_0_3_72_3_1_16GLF_merged3_0_1_13_1_1_13_2_1_14num_workgroupsubgroup_baseworkgroup_sizenext_virtual_gid), (GLF_merged2_0_3_72_3_1_16GLF_merged3_0_1_13_1_1_13_2_1_14num_workgroupsubgroup_baseworkgroup_sizenext_virtual_gid))))))).xyz.y + (_GLF_IDENTITY((GLF_merged3_0_1_11_1_1_17_2_1_11subgroup_idsubgroup_local_idvirtual_gid.y + 1), ((GLF_merged3_0_1_11_1_1_17_2_1_11subgroup_idsubgroup_local_idvirtual_gid.y + 1)) * 1u) % _GLF_struct_replacement_37.GLF_merged3_0_1_4_1_1_13_2_1_12readsubgroup_sizeworkgroup_id.y);
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (_GLF_IDENTITY(int(2), (int(2)) / 1)) ^ 0))) >> _GLF_IDENTITY(int(2), int(2))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     return;
    }
  }
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     return;
    }
  }
 do
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     do
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), min(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y))), (_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), min(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y)))) / 1.0))); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(-0.1)), vec2(_GLF_FUZZED(-17.87), (injectionSwitch)[1]), bvec2(false, true))), mix(vec2((_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(-0.1)), vec2(_GLF_FUZZED(-17.87), (injectionSwitch)[1]), bvec2(false, true))))[0], _GLF_FUZZED(25.09)), vec2(_GLF_FUZZED(-845.236), (_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(-0.1)), vec2(_GLF_FUZZED(-17.87), (injectionSwitch)[1]), bvec2(false, true))))[1]), bvec2(false, true))), injectionSwitch, injectionSwitch)).y))))
              return;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              continue;
            }
          }
         else
          {
          }
         GLF_merged2_0_3_72_3_1_16GLF_merged3_0_1_13_1_1_13_2_1_14num_workgroupsubgroup_baseworkgroup_sizenext_virtual_gid.w = next_virtual_gid;
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), (_GLF_IDENTITY(false, ! (! (false)))) && true), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y)))))))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
            {
             return;
            }
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).x > injectionSwitch.y))))
        continue;
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y))))))), true && (_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-1979.6347)), float(injectionSwitch.y), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), (injectionSwitch.x > injectionSwitch.y) || _GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y)) && (false)))))))));
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 _GLF_struct_40 _GLF_struct_replacement_40 = _GLF_struct_40(mat4x2(1.0), _GLF_struct_39(ivec4(1), _GLF_struct_38(mat4x3(1.0), atomicLoad(_GLF_IDENTITY(buf[GLF_merged3_0_1_11_1_1_17_2_1_11subgroup_idsubgroup_local_idvirtual_gid.z], max(buf[GLF_merged3_0_1_11_1_1_17_2_1_11subgroup_idsubgroup_local_idvirtual_gid.z], buf[GLF_merged3_0_1_11_1_1_17_2_1_11subgroup_idsubgroup_local_idvirtual_gid.z])), 4, 64, 2)), uvec2(1u)), mat3x2(1.0), mat2x3(1.0));
 if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     return;
     if(_GLF_DEAD(false))
      return;
    }
  }
 do
  {
   _GLF_struct_replacement_37.GLF_merged3_0_1_4_1_1_13_2_1_12readsubgroup_sizeworkgroup_id.x = _GLF_struct_replacement_40._f1._f1.read;
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bool(false)))))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(6446.0023), _GLF_FUZZED(84.26)), bvec2(false, false))), _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - _GLF_IDENTITY(vec2(0.0, 0.0), mix(vec2((vec2(0.0, 0.0))[0], _GLF_FUZZED(1.7)), vec2(_GLF_FUZZED(38.46), _GLF_IDENTITY((vec2(0.0, 0.0))[1], (true ? (vec2(0.0, 0.0))[1] : _GLF_FUZZED(sinh(2.1))))), bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), _GLF_IDENTITY((injectionSwitch) * mat2(1.0), mix(vec2(_GLF_FUZZED(8.5), ((injectionSwitch) * mat2(1.0))[1]), vec2(((injectionSwitch) * mat2(1.0))[0], _GLF_FUZZED(9678.8219)), bvec2(true, false)))))).x > injectionSwitch.y))))
  {
   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), bool(bvec3(_GLF_WRAPPED_IF_TRUE(true), false, true))))
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _injected_loop_counter : _GLF_FUZZED(_injected_loop_counter))) > 0); _injected_loop_counter --)
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))
        return;
      }
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))))))
      return;
    }
   return;
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 << _GLF_IDENTITY(int(7), int(7)))); _injected_loop_counter --)
    {
     do
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          return;
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) && true)))
          {
          }
         else
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * exp(vec2(0.0, 0.0))).y)), bool(bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))
            {
             return;
            }
           else
            {
            }
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            return;
          }
         else
          {
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
        }
       else
        {
        }
       continue;
      }
    }
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).y)), (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y)), bool(bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y)))), _GLF_IDENTITY((_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec3(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(true, (true) || false) && (injectionSwitch.x > injectionSwitch.y)), true, false)))))), bool(bvec3((_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat4x3(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), 1.0, 0.0, sqrt(sqrt(0.0)), 1.0, abs(1.0), sqrt(0.0), 0.0, 0.0, 1.0, 0.0), mat4x3(mat4x3(mat4x3(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), 1.0, 0.0, sqrt(sqrt(0.0)), 1.0, abs(1.0), sqrt(0.0), 0.0, 0.0, 1.0, 0.0)))))).y))), false, true))) && true))))) && true)))
  {
   do
    {
     return;
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-5511.7975, -62.75)) : injectionSwitch)).y, float(mat3x2(injectionSwitch.y, 1.0, 0.0, 1.0, 0.0, 1.0))))), ! (! (_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))).y))))))))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((0 >> _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), (int(7)) ^ 0))) | int(_GLF_ZERO(0.0, injectionSwitch.x)))); _GLF_IDENTITY(_injected_loop_counter --, (_GLF_IDENTITY(_injected_loop_counter --, 0 + (_injected_loop_counter --))) - (0 >> _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (false ? _GLF_FUZZED(_injected_loop_counter) : int(0)))))))
    {
     do
      {
       do
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           atomicStore(buf[GLF_merged2_0_3_72_3_1_16GLF_merged3_0_1_13_1_1_13_2_1_14num_workgroupsubgroup_baseworkgroup_sizenext_virtual_gid.w], uint(_GLF_IDENTITY(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, 0 + (1))) >> 0), 0 ^ (_GLF_IDENTITY(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, 0 + (1))) >> 0), clamp(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, 0 + (1))) >> 0), _GLF_IDENTITY(1, (_GLF_IDENTITY(1, 0 + (1))) >> 0), _GLF_IDENTITY(1, (_GLF_IDENTITY(1, 0 + (1))) >> 0)))))), 4, 64, 4);
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        return;
      }
     else
      {
      }
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_DEAD(false))
          return;
        }
       else
        {
         for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(0), int(0))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
          {
           return;
          }
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          return;
        }
      }
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           do
            {
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, _GLF_IDENTITY(min(_injected_loop_counter, _injected_loop_counter), (false ? _GLF_FUZZED(_injected_loop_counter) : min(_GLF_IDENTITY(_injected_loop_counter, max(_injected_loop_counter, _injected_loop_counter)), _injected_loop_counter)))) != 1); _injected_loop_counter ++)
              {
               if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, false || (true))))))
                {
                 return;
                }
               else
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  break;
                }
              }
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)))
            return;
          }
        }
      }
     else
      {
      }
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       return;
      }
    }
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         return;
        }
      }
     return;
     do
      {
       if(_GLF_DEAD(false))
        return;
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        return;
      }
     else
      {
      }
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         return;
        }
      }
    }
   return;
  }
 do
  {
   if(_GLF_DEAD(false))
    continue;
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter > 0, _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(abs(vec2(0.0, 0.0)), (abs(vec2(0.0, 0.0))) / vec2(1.0, 1.0)) + (injectionSwitch)), injectionSwitch)).x > injectionSwitch.y)) || (_injected_loop_counter > 0)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_injected_loop_counter > 0, ! (! (_injected_loop_counter > 0)))), ! (_GLF_IDENTITY(! (! (_GLF_IDENTITY(_injected_loop_counter > 0, ! (! (_injected_loop_counter > 0))))), true && (! (! (_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter > 0, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_injected_loop_counter > 0)), ! (! (_GLF_IDENTITY(_injected_loop_counter, (_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) | (_injected_loop_counter))) + 0) > 0)))))))))))); _injected_loop_counter --)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec4((injectionSwitch.x > injectionSwitch.y), false, false, false))), bool(bvec2(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec4((injectionSwitch.x > injectionSwitch.y), false, false, false))), true))))))
        return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         break;
        }
       if(_GLF_DEAD(false))
        return;
       do
        {
         return;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      continue;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
       break;
      }
     if(_GLF_DEAD(false))
      break;
     do
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (false ? _GLF_FUZZED(12570) : _injected_loop_counter)) > 0); _injected_loop_counter --)
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
           if(_GLF_DEAD(false))
            continue;
          }
         else
          {
           for(int _injected_loop_counter = (1 | 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
            {
             do
              {
               subgroupBarrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(6548.3048), _GLF_IDENTITY((injectionSwitch)[1], 1.0 * ((injectionSwitch)[1]))), vec2((injectionSwitch)[0], _GLF_FUZZED(9982.1703)), bvec2(true, false))).y))))
            continue;
          }
         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, (false) || false))))))
          continue;
        }
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)))))) || false))
        continue;
      }
     while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0), (injectionSwitch.y) / 1.0), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0), _GLF_IDENTITY((false ? _GLF_FUZZED(-1400.1922) : _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0), 1.0 * (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - tan(vec2(0.0, 0.0))).x, (injectionSwitch.x) / 1.0)))), clamp((false ? _GLF_FUZZED(-1400.1922) : _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0), 1.0 * (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - tan(vec2(0.0, 0.0))).x, (injectionSwitch.x) / 1.0)))), (false ? _GLF_FUZZED(-1400.1922) : _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0), 1.0 * (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - tan(vec2(0.0, 0.0))).x, (injectionSwitch.x) / 1.0)))), _GLF_IDENTITY((false ? _GLF_FUZZED(-1400.1922) : _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0), 1.0 * (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - tan(vec2(0.0, 0.0))).x, (injectionSwitch.x) / 1.0)))), 0.0 + ((false ? _GLF_FUZZED(-1400.1922) : _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0), 1.0 * (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - tan(vec2(0.0, 0.0))).x, (injectionSwitch.x) / 1.0))))))))), injectionSwitch.x)) > injectionSwitch.y, _GLF_IDENTITY(false, bool(bvec3(false, true, true))), _GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, (true) || false)) || false), false)), bool(bvec2(bool(bvec2(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, (true) || false)) || false), false)), true)))))), bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(min(injectionSwitch, injectionSwitch), min(min(injectionSwitch, injectionSwitch), min(injectionSwitch, injectionSwitch)))))), injectionSwitch)), mat2(1.0) * (_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(min(injectionSwitch, injectionSwitch), min(min(injectionSwitch, injectionSwitch), min(injectionSwitch, injectionSwitch)))))), injectionSwitch)))).x > injectionSwitch.y, _GLF_IDENTITY(false, bool(bvec3(false, true, true))), true)), (bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(min(injectionSwitch, injectionSwitch), min(min(injectionSwitch, injectionSwitch), min(injectionSwitch, injectionSwitch)))))), injectionSwitch)), mat2(1.0) * (_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(min(injectionSwitch, injectionSwitch), min(min(injectionSwitch, injectionSwitch), min(injectionSwitch, injectionSwitch)))))), injectionSwitch)))).x > injectionSwitch.y, _GLF_IDENTITY(false, bool(bvec3(false, true, true))), true))) && true), bool(bvec4(bool(bvec3(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, true, true)), ! (! (bool(bvec3(false, true, true)))))), true)), _GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, bool(bvec4(true, _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), bool(bool(! (true)))))), false, false)))))), false, true))), true), bvec2(bvec4(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(min(injectionSwitch, injectionSwitch), min(min(injectionSwitch, injectionSwitch), min(injectionSwitch, injectionSwitch)))))), injectionSwitch)), mat2(1.0) * (_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(min(injectionSwitch, injectionSwitch), min(min(injectionSwitch, injectionSwitch), min(injectionSwitch, injectionSwitch)))))), injectionSwitch)))).x > injectionSwitch.y, _GLF_IDENTITY(false, bool(bvec3(false, true, true))), true)), (bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(min(injectionSwitch, injectionSwitch), min(min(injectionSwitch, injectionSwitch), min(injectionSwitch, injectionSwitch)))))), injectionSwitch)), mat2(1.0) * (_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(min(injectionSwitch, injectionSwitch), min(min(injectionSwitch, injectionSwitch), min(injectionSwitch, injectionSwitch)))))), injectionSwitch)))).x > injectionSwitch.y, _GLF_IDENTITY(false, bool(bvec3(false, true, true))), true))) && true), bool(bvec4(bool(bvec3(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, true, true)), ! (! (bool(bvec3(false, true, true)))))), true)), _GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, bool(bvec4(true, _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), bool(bool(! (true)))))), false, false)))))), false, true))), true), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), bvec2(bvec4(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bvec3(bvec4(bvec3(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false)), bvec3(bvec4(bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((_GLF_IDENTITY(injectionSwitch.x, cos(0.0) * (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0))) > injectionSwitch.y)) && true), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec3(bvec3(bvec3(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((_GLF_IDENTITY(injectionSwitch.x, cos(0.0) * (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0))) > injectionSwitch.y)) && true), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), false)), false))))))), _GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, true, true), bvec3(bvec4(bvec3(false, true, true), false))))), _GLF_IDENTITY(true, _GLF_IDENTITY(bool(bool(true)), (bool(bool(true))) && true)))), bool(bvec4(bool(bvec3(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y))), _GLF_IDENTITY(false, bool(bvec3(false, true, true))), true)), true, false, true))), true), bvec2(bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bool(bvec3(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec3(false, true, true))), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, bool(bvec3(false, true, true))), false), bvec2(bvec3(bvec2(_GLF_IDENTITY(false, bool(bvec3(false, true, true))), false), false))))), _GLF_IDENTITY(true, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(bool(bool(true)), (bool(bool(true))) && true), (_GLF_IDENTITY(bool(bool(true)), (bool(bool(true))) && true)) && true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(_GLF_IDENTITY(bool(bool(true)), (bool(bool(true))) && true), (_GLF_IDENTITY(_GLF_IDENTITY(bool(bool(true)), (bool(bool(true))) && true), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(bool(bool(true)), (bool(bool(true))) && true), bool(bvec4(_GLF_IDENTITY(bool(bool(true)), (bool(bool(true))) && true), true, true, false))))))) && true)))))), bool(bvec4(bool(bvec3(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0) > _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0), injectionSwitch.y)), _GLF_IDENTITY(false, bool(bvec3(false, _GLF_IDENTITY(true, (_GLF_IDENTITY(true, bool(bvec2(true, true)))) || false), true))), true)), true, false, true))), true), bvec2(bvec3(bvec2(_GLF_IDENTITY(bool(bvec3(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(false, bool(bvec3(false, true, true))), _GLF_IDENTITY(true, _GLF_IDENTITY(bool(bool(true)), _GLF_IDENTITY((bool(bool(true))) && true, ((bool(bool(true))) && true) || false))))), bool(bvec4(bool(bvec3(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(false, bool(bvec3(false, true, true))), true)), true, false, true))), true), true)))))), false, true))))))))), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bool(_GLF_IDENTITY(bvec3(! (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y)), true && (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, float(mat4x3(injectionSwitch.y, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, log(1.0), 0.0, 1.0, 1.0))), injectionSwitch.y)), clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), _GLF_IDENTITY(injectionSwitch.y, float(mat2x3(_GLF_IDENTITY(injectionSwitch, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)).y, abs(1.0), 0.0, 1.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 1.0))))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, float(mat4x3(injectionSwitch.y, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, log(1.0), 0.0, 1.0, 1.0))), injectionSwitch.y)), clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), _GLF_IDENTITY(injectionSwitch.y, float(mat2x3(_GLF_IDENTITY(injectionSwitch, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)).y, abs(1.0), 0.0, 1.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 1.0)))))) && true))), true && (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, float(mat2x3(injectionSwitch.y, abs(1.0), 0.0, 1.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 1.0))), min(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, float(mat2x3(injectionSwitch.y, abs(1.0), 0.0, 1.0, length(_GLF_IDENTITY(vec4(0.0, 0.0, _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), 0.0), (vec4(0.0, 0.0, _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), 0.0)) * mat4(1.0))), 1.0))), float(_GLF_IDENTITY(mat4(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).y, float(mat2x3(injectionSwitch.y, abs(_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(9092.9348)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), 0.0, 1.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 1.0))), 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, sqrt(0.0), length(0.0), 0.0, 0.0, cos(0.0), 1.0, 0.0, sin(0.0)), _GLF_IDENTITY(mat4(1.0), (mat4(1.0)) * mat4(1.0)) * (mat4(_GLF_IDENTITY(injectionSwitch.y, float(mat2x3(injectionSwitch.y, abs(1.0), 0.0, 1.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 1.0))), 1.0, 1.0, 0.0, _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(length(vec4(602.967, 469.689, 15.25, -70.02))))), 0.0, 0.0, 1.0, sqrt(0.0), length(0.0), 0.0, 0.0, cos(0.0), 1.0, 0.0, sin(0.0)))))), _GLF_IDENTITY(injectionSwitch.y, float(mat2x3(injectionSwitch.y, abs(1.0), 0.0, 1.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 1.0))))))), (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat3x2(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-20.74, 356.870)) : injectionSwitch)), _GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0, abs(_GLF_IDENTITY(0.0, (0.0) / _GLF_ONE(1.0, injectionSwitch.y)))))).y, max(_GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y), (_GLF_IDENTITY(clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y), float(mat2x4(_GLF_IDENTITY(clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y), (clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)) + 0.0), 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0)))) + 0.0)), _GLF_IDENTITY(injectionSwitch.y, float(mat2x3(injectionSwitch.y, abs(1.0), 0.0, 1.0, length(vec4(0.0, 0.0, _GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED((false ? 7.6 : 1.8))), bool(false))), 0.0)), 1.0)))))) || false))))))), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))))))), true && (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) / vec2(1.0, 1.0), min(_GLF_IDENTITY((injectionSwitch) / vec2(1.0, 1.0), clamp((injectionSwitch) / vec2(1.0, 1.0), (injectionSwitch) / vec2(1.0, 1.0), _GLF_IDENTITY((injectionSwitch) / vec2(1.0, 1.0), clamp((injectionSwitch) / vec2(1.0, 1.0), (injectionSwitch) / vec2(1.0, 1.0), (injectionSwitch) / vec2(1.0, 1.0))))), (injectionSwitch) / vec2(1.0, 1.0)))).y, injectionSwitch.y)), _GLF_IDENTITY(injectionSwitch.y, float(mat2x3(injectionSwitch.y, abs(1.0), 0.0, 1.0, length(vec4(0.0, 0.0, 0.0, 0.0)), _GLF_IDENTITY(1.0, min(1.0, 1.0))))))))), _GLF_IDENTITY(true, (true) || false) && (_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), _GLF_IDENTITY(injectionSwitch.y, float(mat2x3(injectionSwitch.y, abs(_GLF_IDENTITY(1.0, clamp(1.0, _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(9.6))), 1.0))), 0.0, _GLF_IDENTITY(_GLF_IDENTITY(1.0, (true ? _GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, max(1.0, 1.0))) - 0.0) : _GLF_FUZZED(962.389))), min(_GLF_IDENTITY(1.0, (true ? _GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, max(1.0, 1.0))) - 0.0) : _GLF_FUZZED(962.389))), _GLF_IDENTITY(1.0, (true ? _GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, max(1.0, 1.0))) - 0.0) : _GLF_FUZZED(962.389))))), length(vec4(0.0, 0.0, 0.0, 0.0)), 1.0))))), ! (_GLF_IDENTITY(! (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, float(mat4x3(injectionSwitch.y, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0, 1.0, determinant(mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, sin(0.0), sin(0.0), 0.0, 0.0, 0.0, length(vec4(0.0, 0.0, 0.0, 0.0))))))), max(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), _GLF_IDENTITY(injectionSwitch.y, float(mat2x3(injectionSwitch.y, abs(1.0), 0.0, 1.0, length(_GLF_IDENTITY(vec4(0.0, 0.0, 0.0, 0.0), (vec4(0.0, 0.0, 0.0, 0.0)) / vec4(1.0, 1.0, 1.0, 1.0))), 1.0)))))), (! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y, injectionSwitch.y)), _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(mat2x3(injectionSwitch.y, abs(1.0), 0.0, 1.0, length(vec4(0.0, _GLF_IDENTITY(0.0, mix(_GLF_IDENTITY(float(_GLF_FUZZED(float(false))), mix(float(float(_GLF_FUZZED(float(false)))), float(_GLF_FUZZED(float(-23781))), bool(false))), float(0.0), bool(true))), 0.0, 0.0)), 1.0)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(step(38.06, 7358.8916)) : float(mat2x3(injectionSwitch.y, abs(1.0), 0.0, 1.0, length(vec4(0.0, _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(float(false))), float(_GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(6335.0817) : 0.0))), bool(true))), 0.0, 0.0)), 1.0))))))))) && _GLF_TRUE(_GLF_IDENTITY(true, (true) || false), (injectionSwitch.x < injectionSwitch.y))))), (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat3x2(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-20.74, 356.870)) : injectionSwitch)), _GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0, abs(0.0)))).y, max(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).y)), _GLF_IDENTITY(injectionSwitch.y, float(mat2x3(injectionSwitch.y, abs(1.0), 0.0, _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-6411.0389)), float(1.0), bool(true))), length(vec4(0.0, 0.0, 0.0, 0.0)), _GLF_IDENTITY(1.0, max(1.0, 1.0)))))))) || false)))))))))))), true, false), _GLF_IDENTITY(bvec3(bvec4(bvec3(_GLF_IDENTITY(! _GLF_IDENTITY((_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).x > injectionSwitch.y)))), false || ((_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), (! (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) && true), true, false), true)), bvec3(bvec4(bvec3(bvec4(_GLF_IDENTITY(bvec3(! (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(vec3(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), 0.0))).y, min(_GLF_IDENTITY(injectionSwitch, vec2(vec3(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), 0.0))).y, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(vec3(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), 0.0))).y, clamp(_GLF_IDENTITY(injectionSwitch, vec2(vec3(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), 0.0))).y, _GLF_IDENTITY(injectionSwitch, vec2(vec3(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), 0.0))).y, _GLF_IDENTITY(injectionSwitch, vec2(vec3(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), 0.0))).y)))), false || (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), vec2(vec3(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), 0.0))).y, min(_GLF_IDENTITY(injectionSwitch, vec2(vec3(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), 0.0))).y, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(vec3(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), 0.0))).y, clamp(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(vec3(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), 0.0))).y, clamp(_GLF_IDENTITY(injectionSwitch, vec2(vec3(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), 0.0))).y, _GLF_IDENTITY(injectionSwitch, vec2(vec3(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), 0.0))).y, _GLF_IDENTITY(injectionSwitch, vec2(vec3(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), 0.0))).y)), _GLF_IDENTITY(injectionSwitch, vec2(vec3(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), 0.0))).y, _GLF_IDENTITY(injectionSwitch, vec2(vec3(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), 0.0))).y)))))))))), true, _GLF_IDENTITY(false, (_GLF_IDENTITY(false, false || (false))) && true)), bvec3(bvec4(bvec3(! (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1]))), mix(vec2(_GLF_FUZZED(294.920), ((_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1]))))[1]), vec2(((_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1]))))[0], _GLF_FUZZED((7.1 * -1046.6908))), bvec2(true, false)))).x > _GLF_IDENTITY(injectionSwitch, vec2(vec3(injectionSwitch, 0.0))).y)))), true, false), false))), true)), _GLF_IDENTITY(false, bool(bvec4(false, true, false, true))))))))))));
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 do
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), (int(1)) ^ 0)))); _injected_loop_counter --)
    {
     for(int _injected_loop_counter = _GLF_IDENTITY(1, int(ivec2(1, 0))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       atomicStore(checker[_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged3_0_1_11_1_1_17_2_1_11subgroup_idsubgroup_local_idvirtual_gid, (GLF_merged3_0_1_11_1_1_17_2_1_11subgroup_idsubgroup_local_idvirtual_gid) + uvec3(0u, 0u, 0u)), (false ? _GLF_FUZZED(GLF_merged3_0_1_13_1_1_13_2_1_14num_workgroupsubgroup_baseworkgroup_size) : _GLF_IDENTITY(_GLF_IDENTITY(GLF_merged3_0_1_11_1_1_17_2_1_11subgroup_idsubgroup_local_idvirtual_gid, (GLF_merged3_0_1_11_1_1_17_2_1_11subgroup_idsubgroup_local_idvirtual_gid) + uvec3(0u, 0u, 0u)), min(_GLF_IDENTITY(GLF_merged3_0_1_11_1_1_17_2_1_11subgroup_idsubgroup_local_idvirtual_gid, (GLF_merged3_0_1_11_1_1_17_2_1_11subgroup_idsubgroup_local_idvirtual_gid) + uvec3(0u, 0u, 0u)), _GLF_IDENTITY(_GLF_IDENTITY(GLF_merged3_0_1_11_1_1_17_2_1_11subgroup_idsubgroup_local_idvirtual_gid, (GLF_merged3_0_1_11_1_1_17_2_1_11subgroup_idsubgroup_local_idvirtual_gid) + uvec3(0u, 0u, 0u)), (_GLF_IDENTITY(GLF_merged3_0_1_11_1_1_17_2_1_11subgroup_idsubgroup_local_idvirtual_gid, (GLF_merged3_0_1_11_1_1_17_2_1_11subgroup_idsubgroup_local_idvirtual_gid) + uvec3(0u, 0u, 0u))) << uvec3(0u, 0u, 0u)))))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged3_0_1_11_1_1_17_2_1_11subgroup_idsubgroup_local_idvirtual_gid, (GLF_merged3_0_1_11_1_1_17_2_1_11subgroup_idsubgroup_local_idvirtual_gid) + uvec3(0u, 0u, 0u)), min(_GLF_IDENTITY(GLF_merged3_0_1_11_1_1_17_2_1_11subgroup_idsubgroup_local_idvirtual_gid, (GLF_merged3_0_1_11_1_1_17_2_1_11subgroup_idsubgroup_local_idvirtual_gid) + _GLF_IDENTITY(uvec3(0u, 0u, 0u), (_GLF_IDENTITY(uvec3(0u, 0u, 0u), (_GLF_IDENTITY(uvec3(0u, 0u, 0u), ~ (~ (uvec3(0u, 0u, 0u))))) - uvec3(0u, 0u, 0u))) ^ uvec3(0u, 0u, 0u))), _GLF_IDENTITY(_GLF_IDENTITY(GLF_merged3_0_1_11_1_1_17_2_1_11subgroup_idsubgroup_local_idvirtual_gid, (GLF_merged3_0_1_11_1_1_17_2_1_11subgroup_idsubgroup_local_idvirtual_gid) / uvec3(1u, 1u, 1u)), (GLF_merged3_0_1_11_1_1_17_2_1_11subgroup_idsubgroup_local_idvirtual_gid) + uvec3(0u, 0u, 0u)))), _GLF_IDENTITY(_GLF_IDENTITY(GLF_merged3_0_1_11_1_1_17_2_1_11subgroup_idsubgroup_local_idvirtual_gid, (GLF_merged3_0_1_11_1_1_17_2_1_11subgroup_idsubgroup_local_idvirtual_gid) + uvec3(0u, 0u, 0u)), (_GLF_IDENTITY(GLF_merged3_0_1_11_1_1_17_2_1_11subgroup_idsubgroup_local_idvirtual_gid, (GLF_merged3_0_1_11_1_1_17_2_1_11subgroup_idsubgroup_local_idvirtual_gid) + uvec3(0u, 0u, 0u))) | (_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged3_0_1_11_1_1_17_2_1_11subgroup_idsubgroup_local_idvirtual_gid, (GLF_merged3_0_1_11_1_1_17_2_1_11subgroup_idsubgroup_local_idvirtual_gid) + uvec3(0u, 0u, 0u)), uvec3(uvec3(_GLF_IDENTITY(GLF_merged3_0_1_11_1_1_17_2_1_11subgroup_idsubgroup_local_idvirtual_gid, (GLF_merged3_0_1_11_1_1_17_2_1_11subgroup_idsubgroup_local_idvirtual_gid) + uvec3(0u, 0u, 0u))))))), _GLF_IDENTITY(_GLF_IDENTITY(GLF_merged3_0_1_11_1_1_17_2_1_11subgroup_idsubgroup_local_idvirtual_gid, (GLF_merged3_0_1_11_1_1_17_2_1_11subgroup_idsubgroup_local_idvirtual_gid) + _GLF_IDENTITY(uvec3(0u, 0u, 0u), uvec3(0u, 0u, 0u) + (_GLF_IDENTITY(uvec3(0u, 0u, 0u), max(uvec3(0u, 0u, 0u), uvec3(0u, 0u, 0u)))))), clamp(_GLF_IDENTITY(GLF_merged3_0_1_11_1_1_17_2_1_11subgroup_idsubgroup_local_idvirtual_gid, (GLF_merged3_0_1_11_1_1_17_2_1_11subgroup_idsubgroup_local_idvirtual_gid) + uvec3(0u, 0u, _GLF_IDENTITY(0u, (0u) << 0u))), _GLF_IDENTITY(GLF_merged3_0_1_11_1_1_17_2_1_11subgroup_idsubgroup_local_idvirtual_gid, (GLF_merged3_0_1_11_1_1_17_2_1_11subgroup_idsubgroup_local_idvirtual_gid) + uvec3(0u, 0u, 0u)), _GLF_IDENTITY(GLF_merged3_0_1_11_1_1_17_2_1_11subgroup_idsubgroup_local_idvirtual_gid, (GLF_merged3_0_1_11_1_1_17_2_1_11subgroup_idsubgroup_local_idvirtual_gid) + uvec3(0u, 0u, 0u)))))).z], _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_struct_replacement_37.GLF_merged3_0_1_4_1_1_13_2_1_12readsubgroup_sizeworkgroup_id, ~ _GLF_IDENTITY((_GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_struct_replacement_37.GLF_merged3_0_1_4_1_1_13_2_1_12readsubgroup_sizeworkgroup_id, (_GLF_IDENTITY(_GLF_struct_replacement_37.GLF_merged3_0_1_4_1_1_13_2_1_12readsubgroup_sizeworkgroup_id, (_GLF_struct_replacement_37.GLF_merged3_0_1_4_1_1_13_2_1_12readsubgroup_sizeworkgroup_id) - uvec3(0u, 0u, 0u))) | (_GLF_IDENTITY(_GLF_struct_replacement_37.GLF_merged3_0_1_4_1_1_13_2_1_12readsubgroup_sizeworkgroup_id, uvec3(0u, 0u, 0u) ^ (_GLF_struct_replacement_37.GLF_merged3_0_1_4_1_1_13_2_1_12readsubgroup_sizeworkgroup_id))))), min(~ (_GLF_struct_replacement_37.GLF_merged3_0_1_4_1_1_13_2_1_12readsubgroup_sizeworkgroup_id), ~ (_GLF_struct_replacement_37.GLF_merged3_0_1_4_1_1_13_2_1_12readsubgroup_sizeworkgroup_id)))), uvec3(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)) | (_GLF_IDENTITY((_GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_struct_replacement_37.GLF_merged3_0_1_4_1_1_13_2_1_12readsubgroup_sizeworkgroup_id, (_GLF_IDENTITY(_GLF_struct_replacement_37.GLF_merged3_0_1_4_1_1_13_2_1_12readsubgroup_sizeworkgroup_id, (_GLF_struct_replacement_37.GLF_merged3_0_1_4_1_1_13_2_1_12readsubgroup_sizeworkgroup_id) - uvec3(0u, 0u, 0u))) | (_GLF_IDENTITY(_GLF_struct_replacement_37.GLF_merged3_0_1_4_1_1_13_2_1_12readsubgroup_sizeworkgroup_id, uvec3(0u, 0u, 0u) ^ (_GLF_struct_replacement_37.GLF_merged3_0_1_4_1_1_13_2_1_12readsubgroup_sizeworkgroup_id))))), min(~ (_GLF_struct_replacement_37.GLF_merged3_0_1_4_1_1_13_2_1_12readsubgroup_sizeworkgroup_id), ~ (_GLF_struct_replacement_37.GLF_merged3_0_1_4_1_1_13_2_1_12readsubgroup_sizeworkgroup_id)))), min((_GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_struct_replacement_37.GLF_merged3_0_1_4_1_1_13_2_1_12readsubgroup_sizeworkgroup_id, (_GLF_IDENTITY(_GLF_struct_replacement_37.GLF_merged3_0_1_4_1_1_13_2_1_12readsubgroup_sizeworkgroup_id, (_GLF_struct_replacement_37.GLF_merged3_0_1_4_1_1_13_2_1_12readsubgroup_sizeworkgroup_id) - uvec3(0u, 0u, 0u))) | (_GLF_IDENTITY(_GLF_struct_replacement_37.GLF_merged3_0_1_4_1_1_13_2_1_12readsubgroup_sizeworkgroup_id, uvec3(0u, 0u, 0u) ^ (_GLF_struct_replacement_37.GLF_merged3_0_1_4_1_1_13_2_1_12readsubgroup_sizeworkgroup_id))))), min(~ (_GLF_struct_replacement_37.GLF_merged3_0_1_4_1_1_13_2_1_12readsubgroup_sizeworkgroup_id), ~ (_GLF_struct_replacement_37.GLF_merged3_0_1_4_1_1_13_2_1_12readsubgroup_sizeworkgroup_id)))), (_GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_struct_replacement_37.GLF_merged3_0_1_4_1_1_13_2_1_12readsubgroup_sizeworkgroup_id, (_GLF_IDENTITY(_GLF_struct_replacement_37.GLF_merged3_0_1_4_1_1_13_2_1_12readsubgroup_sizeworkgroup_id, (_GLF_struct_replacement_37.GLF_merged3_0_1_4_1_1_13_2_1_12readsubgroup_sizeworkgroup_id) - uvec3(0u, 0u, 0u))) | (_GLF_IDENTITY(_GLF_struct_replacement_37.GLF_merged3_0_1_4_1_1_13_2_1_12readsubgroup_sizeworkgroup_id, uvec3(0u, 0u, 0u) ^ (_GLF_struct_replacement_37.GLF_merged3_0_1_4_1_1_13_2_1_12readsubgroup_sizeworkgroup_id))))), min(~ (_GLF_struct_replacement_37.GLF_merged3_0_1_4_1_1_13_2_1_12readsubgroup_sizeworkgroup_id), ~ (_GLF_struct_replacement_37.GLF_merged3_0_1_4_1_1_13_2_1_12readsubgroup_sizeworkgroup_id))))))))), (_GLF_IDENTITY(_GLF_struct_replacement_37.GLF_merged3_0_1_4_1_1_13_2_1_12readsubgroup_sizeworkgroup_id, ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_struct_replacement_37.GLF_merged3_0_1_4_1_1_13_2_1_12readsubgroup_sizeworkgroup_id, (_GLF_struct_replacement_37.GLF_merged3_0_1_4_1_1_13_2_1_12readsubgroup_sizeworkgroup_id) | (_GLF_IDENTITY(_GLF_struct_replacement_37.GLF_merged3_0_1_4_1_1_13_2_1_12readsubgroup_sizeworkgroup_id, uvec3(0u, 0u, 0u) ^ (_GLF_struct_replacement_37.GLF_merged3_0_1_4_1_1_13_2_1_12readsubgroup_sizeworkgroup_id)))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_struct_replacement_37.GLF_merged3_0_1_4_1_1_13_2_1_12readsubgroup_sizeworkgroup_id, (_GLF_struct_replacement_37.GLF_merged3_0_1_4_1_1_13_2_1_12readsubgroup_sizeworkgroup_id) | (_GLF_IDENTITY(_GLF_struct_replacement_37.GLF_merged3_0_1_4_1_1_13_2_1_12readsubgroup_sizeworkgroup_id, uvec3(0u, 0u, 0u) ^ (_GLF_struct_replacement_37.GLF_merged3_0_1_4_1_1_13_2_1_12readsubgroup_sizeworkgroup_id)))), uvec3(0u, 0u, 0u) | (_GLF_IDENTITY(_GLF_struct_replacement_37.GLF_merged3_0_1_4_1_1_13_2_1_12readsubgroup_sizeworkgroup_id, (_GLF_struct_replacement_37.GLF_merged3_0_1_4_1_1_13_2_1_12readsubgroup_sizeworkgroup_id) | (_GLF_IDENTITY(_GLF_struct_replacement_37.GLF_merged3_0_1_4_1_1_13_2_1_12readsubgroup_sizeworkgroup_id, uvec3(0u, 0u, 0u) ^ (_GLF_struct_replacement_37.GLF_merged3_0_1_4_1_1_13_2_1_12readsubgroup_sizeworkgroup_id))))))) ^ uvec3(0u, 0u, 0u))), min(~ (_GLF_struct_replacement_37.GLF_merged3_0_1_4_1_1_13_2_1_12readsubgroup_sizeworkgroup_id), ~ (_GLF_struct_replacement_37.GLF_merged3_0_1_4_1_1_13_2_1_12readsubgroup_sizeworkgroup_id))), (false ? _GLF_FUZZED(GLF_merged3_0_1_13_1_1_13_2_1_14num_workgroupsubgroup_baseworkgroup_size) : _GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_struct_replacement_37.GLF_merged3_0_1_4_1_1_13_2_1_12readsubgroup_sizeworkgroup_id, (_GLF_struct_replacement_37.GLF_merged3_0_1_4_1_1_13_2_1_12readsubgroup_sizeworkgroup_id) | _GLF_IDENTITY((_GLF_IDENTITY(_GLF_struct_replacement_37.GLF_merged3_0_1_4_1_1_13_2_1_12readsubgroup_sizeworkgroup_id, uvec3(0u, 0u, 0u) ^ (_GLF_struct_replacement_37.GLF_merged3_0_1_4_1_1_13_2_1_12readsubgroup_sizeworkgroup_id))), min((_GLF_IDENTITY(_GLF_struct_replacement_37.GLF_merged3_0_1_4_1_1_13_2_1_12readsubgroup_sizeworkgroup_id, uvec3(0u, 0u, 0u) ^ (_GLF_struct_replacement_37.GLF_merged3_0_1_4_1_1_13_2_1_12readsubgroup_sizeworkgroup_id))), (_GLF_IDENTITY(_GLF_struct_replacement_37.GLF_merged3_0_1_4_1_1_13_2_1_12readsubgroup_sizeworkgroup_id, uvec3(0u, 0u, 0u) ^ (_GLF_struct_replacement_37.GLF_merged3_0_1_4_1_1_13_2_1_12readsubgroup_sizeworkgroup_id)))))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_struct_replacement_37.GLF_merged3_0_1_4_1_1_13_2_1_12readsubgroup_sizeworkgroup_id, (_GLF_struct_replacement_37.GLF_merged3_0_1_4_1_1_13_2_1_12readsubgroup_sizeworkgroup_id) | (_GLF_IDENTITY(_GLF_struct_replacement_37.GLF_merged3_0_1_4_1_1_13_2_1_12readsubgroup_sizeworkgroup_id, uvec3(0u, 0u, 0u) ^ (_GLF_struct_replacement_37.GLF_merged3_0_1_4_1_1_13_2_1_12readsubgroup_sizeworkgroup_id)))), uvec3(0u, 0u, 0u) | (_GLF_IDENTITY(_GLF_struct_replacement_37.GLF_merged3_0_1_4_1_1_13_2_1_12readsubgroup_sizeworkgroup_id, (_GLF_struct_replacement_37.GLF_merged3_0_1_4_1_1_13_2_1_12readsubgroup_sizeworkgroup_id) | (_GLF_IDENTITY(_GLF_struct_replacement_37.GLF_merged3_0_1_4_1_1_13_2_1_12readsubgroup_sizeworkgroup_id, uvec3(0u, 0u, _GLF_IDENTITY(0u, (0u) >> uint(_GLF_ZERO(0.0, injectionSwitch.x)))) ^ (_GLF_struct_replacement_37.GLF_merged3_0_1_4_1_1_13_2_1_12readsubgroup_sizeworkgroup_id))))))) ^ uvec3(0u, 0u, 0u))), min(~ (_GLF_struct_replacement_37.GLF_merged3_0_1_4_1_1_13_2_1_12readsubgroup_sizeworkgroup_id), _GLF_IDENTITY(~ (_GLF_struct_replacement_37.GLF_merged3_0_1_4_1_1_13_2_1_12readsubgroup_sizeworkgroup_id), (~ (_GLF_struct_replacement_37.GLF_merged3_0_1_4_1_1_13_2_1_12readsubgroup_sizeworkgroup_id)) * uvec3(1u, 1u, 1u))))))))) | uvec3(0u, 0u, 0u)).x, 0u | (_GLF_struct_replacement_37.GLF_merged3_0_1_4_1_1_13_2_1_12readsubgroup_sizeworkgroup_id.x)), 4, 64, 4);
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END
BUFFER checker DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected_checker DATA_TYPE uint32 SIZE 8388096 FILL 0

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 
  BIND BUFFER checker AS storage DESCRIPTOR_SET 0 BINDING 2 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT checker EQ_BUFFER expected_checker
