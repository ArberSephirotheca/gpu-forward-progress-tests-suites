#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))))
  barrier();
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) && true))), bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec4(bvec2(false, false), false, true))), _GLF_IDENTITY(bvec2(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec4(bvec2(false, false), false, true))), bvec2(bvec3(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec4(bvec2(false, false), false, true))), false))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), bvec2(bvec3(bvec2(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec4(bvec2(false, false), false, true))), bvec2(bvec3(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec4(bvec2(false, false), false, true))), false))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), false)))))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec4(bvec2(false, false), _GLF_IDENTITY(false, ! (! (false))), true))))))))))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(float((bvec3(true, false, false) != bvec3(false, false, true))))), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       barrier();
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 uint num_workgroup = _GLF_IDENTITY(gl_NumWorkGroups, _GLF_IDENTITY((uvec3(0u, 0u, 0u) << _GLF_IDENTITY(uvec3(3u), uvec3(3u))), uvec3(uvec4((uvec3(0u, 0u, 0u) << _GLF_IDENTITY(uvec3(_GLF_IDENTITY(3u, (3u) - 0u)), _GLF_IDENTITY(uvec3(3u), ~ (~ (uvec3(3u)))))), 1u))) + (_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) - uvec3(0u, 0u, 0u)))).x;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (false)), ! (! ((! (false))))))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(4), int(4))); _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      continue;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
      barrier();
    }
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        return;
       barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      break;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, false)), (bool(bvec2(false, false))) && true))))
      {
       if(_GLF_DEAD(false))
        break;
       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), _GLF_IDENTITY(_GLF_IDENTITY(true && (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), ! (! (_GLF_WRAPPED_IF_FALSE(false))))), ! (! (true && (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), ! _GLF_IDENTITY((! (_GLF_WRAPPED_IF_FALSE(false))), true && ((! (_GLF_WRAPPED_IF_FALSE(false)))))))))), _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(true && (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), ! (! _GLF_IDENTITY((_GLF_WRAPPED_IF_FALSE(false)), bool(_GLF_IDENTITY(bvec3((_GLF_WRAPPED_IF_FALSE(false)), _GLF_TRUE(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, false || (true))) || false), (injectionSwitch.x < injectionSwitch.y)), false), bvec3(bvec3(bvec3((_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))))))))), false || (true && (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), ! _GLF_IDENTITY((! (_GLF_WRAPPED_IF_FALSE(false))), ! (! (_GLF_IDENTITY((! (_GLF_WRAPPED_IF_FALSE(false))), ((! (_GLF_WRAPPED_IF_FALSE(false)))) || false))))), bool(bvec4(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), ! _GLF_IDENTITY((! (_GLF_WRAPPED_IF_FALSE(false))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((! (_GLF_WRAPPED_IF_FALSE(false))), ((! (_GLF_WRAPPED_IF_FALSE(false)))) || false)), bool(_GLF_IDENTITY(bvec3(! (_GLF_IDENTITY((! (_GLF_WRAPPED_IF_FALSE(false))), ((! (_GLF_WRAPPED_IF_FALSE(false)))) || false)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false), bvec3(bvec4(bvec3(! (_GLF_IDENTITY((! (_GLF_WRAPPED_IF_FALSE(false))), ((! (_GLF_WRAPPED_IF_FALSE(false)))) || false)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false), false)))))))), true, false, false)))))), true)), true && (bool(bvec2(_GLF_IDENTITY(true && _GLF_IDENTITY((_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), ! (! (_GLF_WRAPPED_IF_FALSE(false))))), ((_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), ! (! (_GLF_WRAPPED_IF_FALSE(false)))))) || false), _GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), true && (! (false))))) || (true && (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), ! _GLF_IDENTITY((! (_GLF_WRAPPED_IF_FALSE(false))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((! (_GLF_WRAPPED_IF_FALSE(false))), true && ((! (_GLF_WRAPPED_IF_FALSE(false))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY((! (_GLF_WRAPPED_IF_FALSE(false))), true && ((! (_GLF_WRAPPED_IF_FALSE(false))))), bool(bvec3(_GLF_IDENTITY((! (_GLF_WRAPPED_IF_FALSE(false))), true && ((! (_GLF_WRAPPED_IF_FALSE(false))))), true, true)))), true && (! (_GLF_IDENTITY(_GLF_IDENTITY((! (_GLF_WRAPPED_IF_FALSE(false))), true && ((! (_GLF_WRAPPED_IF_FALSE(false))))), bool(bvec3(_GLF_IDENTITY((! (_GLF_WRAPPED_IF_FALSE(false))), true && ((! (_GLF_WRAPPED_IF_FALSE(false))))), true, true)))))))), (_GLF_IDENTITY((! (_GLF_WRAPPED_IF_FALSE(false))), bool(bvec3(_GLF_IDENTITY((! _GLF_IDENTITY((_GLF_WRAPPED_IF_FALSE(false)), ! (_GLF_IDENTITY(! ((_GLF_WRAPPED_IF_FALSE(false))), ! (! (_GLF_IDENTITY(! ((_GLF_WRAPPED_IF_FALSE(false))), bool(bool(! ((_GLF_WRAPPED_IF_FALSE(false)))))))))))), _GLF_IDENTITY(false, bool(bvec2(false, false))) || ((! (_GLF_WRAPPED_IF_FALSE(false))))), _GLF_IDENTITY(true, (_GLF_IDENTITY(true, true && (true))) || false), true)))) || false)))))))), true)))), false || (_GLF_IDENTITY(bool(bvec2(true && (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), ! (! (_GLF_WRAPPED_IF_FALSE(false)))), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), ! _GLF_IDENTITY((! (_GLF_WRAPPED_IF_FALSE(false))), false || ((! (_GLF_WRAPPED_IF_FALSE(false)))))))))), true)), ! (! (bool(bvec2(_GLF_IDENTITY(true && (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), ! (! (_GLF_WRAPPED_IF_FALSE(false))))), _GLF_IDENTITY(true, false || (true)) && (true && (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), ! (! (_GLF_WRAPPED_IF_FALSE(false))))))), _GLF_IDENTITY(true, bool(bvec4(true, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))))))))))))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || _GLF_IDENTITY(false, ! (! (false))))))
          {
           do
            {
             if(_GLF_DEAD(false))
              break;
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
          }
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           barrier();
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            continue;
          }
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY((_GLF_DEAD(false)), ! (! ((_GLF_DEAD(false))))) || false))
          break;
         if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))) || false)), true && (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))) || false)), bool(_GLF_IDENTITY(bvec3((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))) || false)), false, false), bvec3(bvec4(bvec3((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))) || false)), false, false), true))))))))))
          break;
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           continue;
          }
         barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) && _GLF_IDENTITY(true, (true) && true))));
  }
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)).x > injectionSwitch.y))) || _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)))))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, false)), _GLF_IDENTITY((_GLF_IDENTITY(bool(bvec4(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, false)), ! (! (_GLF_IDENTITY(bool(bvec4(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, false)), (bool(bvec4(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, false))) || false))))) && true, bool(bvec4((_GLF_IDENTITY(bool(bvec4(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, false)), ! (! (_GLF_IDENTITY(bool(bvec4(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, false)), (bool(bvec4(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, false))) || false))))) && true, true, false, true))))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, 1.0 * (_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(_GLF_IDENTITY(true ? _GLF_IDENTITY(injectionSwitch.y, 0.0 + (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), float(mat2x3(injectionSwitch.y, 1.0, sqrt(1.0), 0.0, 0.0, 1.0))))) : _GLF_FUZZED(-2293.5461), (true ? _GLF_IDENTITY(injectionSwitch.y, 0.0 + (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), float(mat2x3(injectionSwitch.y, 1.0, sqrt(1.0), 0.0, 0.0, 1.0))))) : _GLF_FUZZED(-2293.5461)) + 0.0), max(true ? _GLF_IDENTITY(injectionSwitch.y, 0.0 + (_GLF_IDENTITY(injectionSwitch.y, float(mat2x3(injectionSwitch.y, 1.0, sqrt(_GLF_IDENTITY(1.0, max(1.0, _GLF_IDENTITY(1.0, min(1.0, 1.0))))), 0.0, 0.0, 1.0))))) : _GLF_FUZZED(-2293.5461), true ? _GLF_IDENTITY(injectionSwitch.y, 0.0 + (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch))) - tan(vec2(0.0, 0.0))).y, float(mat2x3(injectionSwitch.y, 1.0, sqrt(1.0), 0.0, 0.0, 1.0))))) : _GLF_FUZZED(-2293.5461))))))))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y)))))))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, false || (true))))
      {
       barrier();
      }
     else
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           barrier();
          }
         else
          {
          }
        }
      }
    }
   return;
  }
 uint workgroup_id = _GLF_IDENTITY(gl_WorkGroupID.x, (gl_WorkGroupID.x) << (uint(_GLF_ZERO(0.0, injectionSwitch.x)) >> _GLF_IDENTITY(uint(1u), uint(1u))));
 uint workgroup_base = workgroup_size * _GLF_IDENTITY(workgroup_id, max(workgroup_id, workgroup_id));
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
  }
 uint subgroup_base = subgroup_id * subgroup_size;
 if(_GLF_DEAD(false))
  return;
 for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         return;
        }
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
  }
 else
  {
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! _GLF_IDENTITY((_GLF_IDENTITY(false, ! (! (false)))), true && (_GLF_IDENTITY((_GLF_IDENTITY(false, ! (! (false)))), bool(bvec4((_GLF_IDENTITY(false, ! (! (false)))), true, true, false))))), ! (! _GLF_IDENTITY((_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, false || (false)))))) && true)) || false)) || false)), (! (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false)))))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), _GLF_IDENTITY(bool(bvec4(! (false), false, false, true)), bool(bvec4(bool(bvec4(! (false), false, false, true)), false, true, true)))))), ! (! (false))), (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, false || (false)))))) && true)) || false)) || false))) || false)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && ((! (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, false || (false)))))))) && true)) || false)) || false)))))))))))
  barrier();
 uint virtual_gid = _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_base, clamp(subgroup_base, subgroup_base, _GLF_IDENTITY(subgroup_base, clamp(subgroup_base, subgroup_base, subgroup_base)))), min(workgroup_base + subgroup_base, workgroup_base + _GLF_IDENTITY(subgroup_base, (subgroup_base) - 0u))), _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(workgroup_base + subgroup_base, (false ? _GLF_FUZZED(num_workgroup) : workgroup_base + subgroup_base))) - _GLF_IDENTITY(0u, min(_GLF_IDENTITY(0u, _GLF_IDENTITY((0u), min((0u), _GLF_IDENTITY((0u), ((0u)) / 1u))) | (0u)), 0u)), ((workgroup_base + subgroup_base) - _GLF_IDENTITY(0u, min(0u, 0u))) | 0u), (_GLF_IDENTITY((_GLF_IDENTITY(workgroup_base + subgroup_base, (false ? _GLF_FUZZED(num_workgroup) : workgroup_base + subgroup_base))) - _GLF_IDENTITY(0u, min(_GLF_IDENTITY(0u, _GLF_IDENTITY((0u), min((0u), _GLF_IDENTITY((0u), ((0u)) / 1u))) | (0u)), 0u)), ((workgroup_base + subgroup_base) - _GLF_IDENTITY(0u, min(0u, 0u))) | 0u)) | 0u)) + subgroup_local_id;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint next_virtual_gid = _GLF_IDENTITY(workgroup_base + subgroup_base + _GLF_IDENTITY(((subgroup_local_id + 1) % _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, ~ _GLF_IDENTITY((_GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, ~ (_GLF_IDENTITY(~ (subgroup_size), uint(uvec3(~ (subgroup_size), 1u, 1u))))), (_GLF_IDENTITY(subgroup_size, ~ (_GLF_IDENTITY(~ (subgroup_size), uint(uvec3(~ (subgroup_size), 1u, 1u)))))) | 0u)), _GLF_IDENTITY((~ (subgroup_size)), max((~ (subgroup_size)), (~ (subgroup_size)))) / 1u)), clamp((_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(~ (_GLF_IDENTITY(~ (subgroup_size), uint(uvec3(~ (subgroup_size), 1u, 1u)))), ~ (~ (~ (_GLF_IDENTITY(~ (subgroup_size), uint(uvec3(~ (subgroup_size), 1u, 1u))))))))), _GLF_IDENTITY((~ (subgroup_size)), max((~ (subgroup_size)), (~ (subgroup_size)))) / 1u)), _GLF_IDENTITY((_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_size, ~ (_GLF_IDENTITY(~ (subgroup_size), uint(uvec3(~ (subgroup_size), 1u, 1u)))))), _GLF_IDENTITY((~ (subgroup_size)), max((_GLF_IDENTITY(~ (subgroup_size), (true ? ~ (subgroup_size) : _GLF_FUZZED(atomicCompSwap(subgroup_size, subgroup_id, workgroup_id))))), (~ (subgroup_size)))) / 1u)), ((_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_size, ~ (_GLF_IDENTITY(~ (subgroup_size), uint(uvec3(~ (subgroup_size), 1u, _GLF_IDENTITY(1u, (1u) - 0u))))))), _GLF_IDENTITY((_GLF_IDENTITY(~ (subgroup_size), (~ (subgroup_size)) | (_GLF_IDENTITY(~ (subgroup_size), clamp(_GLF_IDENTITY(~ (subgroup_size), uint(uvec4(~ (subgroup_size), 0u, 0u, 1u))), ~ (subgroup_size), ~ (subgroup_size)))))), max((~ (subgroup_size)), (~ (subgroup_size)))) / 1u))) - 0u), (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_size, ~ (_GLF_IDENTITY(~ (subgroup_size), uint(uvec3(~ (subgroup_size), 1u, 1u)))))), _GLF_IDENTITY((~ (subgroup_size)), max((~ (subgroup_size)), (~ (subgroup_size)))) / 1u))))), _GLF_IDENTITY(_GLF_IDENTITY(uint(uvec2(_GLF_IDENTITY(subgroup_size, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_size, ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (subgroup_size), uint(uvec3(~ (subgroup_size), 1u, 1u))), (_GLF_IDENTITY(~ (subgroup_size), uint(uvec3(~ (subgroup_size), 1u, 1u)))) | (_GLF_IDENTITY(~ (subgroup_size), uint(uvec3(~ (subgroup_size), 1u, 1u)))))))), (~ (subgroup_size)) / 1u))), _GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec4(_GLF_IDENTITY(1u, (false ? _GLF_FUZZED(workgroup_base) : 1u)), 0u, 1u, (0u | 1u)), max(uvec4(_GLF_IDENTITY(1u, (false ? _GLF_FUZZED(workgroup_base) : 1u)), 0u, 1u, (0u | 1u)), uvec4(_GLF_IDENTITY(1u, (false ? _GLF_FUZZED(workgroup_base) : 1u)), 0u, 1u, (0u | 1u))))), (uint(_GLF_IDENTITY(uvec4(_GLF_IDENTITY(1u, (false ? _GLF_FUZZED(workgroup_base) : 1u)), 0u, 1u, (0u | 1u)), max(uvec4(_GLF_IDENTITY(1u, (false ? _GLF_FUZZED(workgroup_base) : 1u)), 0u, 1u, (0u | 1u)), uvec4(_GLF_IDENTITY(1u, (false ? _GLF_FUZZED(workgroup_base) : 1u)), 0u, 1u, (0u | 1u)))))) << 0u))) ^ 0u))), (false ? _GLF_FUZZED(workgroup_id) : uint(uvec2(_GLF_IDENTITY(subgroup_size, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_size, ~ (_GLF_IDENTITY(~ (subgroup_size), uint(uvec3(~ (subgroup_size), 1u, 1u)))))), (~ (subgroup_size)) / 1u))), 1u)))), uint(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(_GLF_IDENTITY(uint(uvec2(_GLF_IDENTITY(subgroup_size, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_size, ~ (_GLF_IDENTITY(~ (subgroup_size), uint(uvec3(~ (subgroup_size), 1u, 1u)))))), (~ (subgroup_size)) / 1u))), 1u)), (false ? _GLF_FUZZED(workgroup_id) : uint(uvec2(_GLF_IDENTITY(subgroup_size, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_size, ~ (_GLF_IDENTITY(~ (subgroup_size), uint(uvec3(~ (subgroup_size), 1u, 1u)))))), (~ (subgroup_size)) / 1u))), 1u)))), (false ? _GLF_FUZZED(virtual_gid) : _GLF_IDENTITY(uint(uvec2(_GLF_IDENTITY(subgroup_size, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_size, ~ (_GLF_IDENTITY(~ (subgroup_size), uint(uvec3(~ _GLF_IDENTITY((subgroup_size), (false ? _GLF_FUZZED(subgroup_size) : _GLF_IDENTITY((subgroup_size), ((subgroup_size)) / 1u))), 1u, 1u)))))), (~ (subgroup_size)) / 1u))), _GLF_IDENTITY(1u, (true ? 1u : _GLF_FUZZED(workgroup_size))))), (false ? _GLF_FUZZED(workgroup_id) : uint(uvec2(_GLF_IDENTITY(subgroup_size, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(~ (_GLF_IDENTITY(~ (subgroup_size), uint(uvec3(~ (subgroup_size), 1u, 1u)))), _GLF_IDENTITY(uint(uvec3(_GLF_IDENTITY(~ (_GLF_IDENTITY(~ (subgroup_size), uint(uvec3(~ (subgroup_size), 1u, 1u)))), (~ (_GLF_IDENTITY(~ (subgroup_size), uint(uvec3(~ (subgroup_size), 1u, 1u))))) - 0u), 0u, 0u)), (uint(uvec3(_GLF_IDENTITY(~ (_GLF_IDENTITY(~ (subgroup_size), uint(uvec3(~ (subgroup_size), 1u, 1u)))), (~ (_GLF_IDENTITY(~ (subgroup_size), uint(uvec3(~ (subgroup_size), 1u, 1u))))) - 0u), 0u, 0u))) >> 0u)))), (~ (subgroup_size)) / 1u))), 1u)))))), 1u), max(uvec2(_GLF_IDENTITY(_GLF_IDENTITY(uint(uvec2(_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_size, ~ (_GLF_IDENTITY(~ (subgroup_size), uint(uvec3(~ (subgroup_size), 1u, 1u)))))), (~ (subgroup_size)) / 1u)), 0u ^ (~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_size, ~ (_GLF_IDENTITY(~ (subgroup_size), uint(uvec3(~ (subgroup_size), 1u, 1u)))))), (~ (subgroup_size)) / 1u))))), 1u)), (false ? _GLF_FUZZED(workgroup_id) : uint(uvec2(_GLF_IDENTITY(subgroup_size, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_size, ~ (_GLF_IDENTITY(~ (subgroup_size), uint(_GLF_IDENTITY(uvec3(~ (subgroup_size), 1u, 1u), (uvec3(~ (subgroup_size), 1u, 1u)) << uvec3(0u, 0u, 0u))))))), (~ (subgroup_size)) / 1u))), 1u)))), (false ? _GLF_FUZZED(_GLF_IDENTITY(virtual_gid, (virtual_gid) - 0u)) : _GLF_IDENTITY(uint(uvec2(_GLF_IDENTITY(subgroup_size, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_size, ~ (_GLF_IDENTITY(~ (subgroup_size), uint(uvec3(~ (subgroup_size), 1u, 1u)))))), (~ (subgroup_size)) / 1u))), 1u)), (false ? _GLF_FUZZED(workgroup_id) : uint(uvec2(_GLF_IDENTITY(subgroup_size, ~ _GLF_IDENTITY((_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_size, ~ (_GLF_IDENTITY(~ (subgroup_size), uint(uvec3(~ (subgroup_size), 1u, 1u)))))), (~ (subgroup_size)) / 1u)), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY((_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_size, ~ (_GLF_IDENTITY(~ (subgroup_size), uint(uvec3(~ (subgroup_size), 1u, 1u)))))), (~ (subgroup_size)) / 1u)), (_GLF_IDENTITY((_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_size, ~ (_GLF_IDENTITY(~ (subgroup_size), uint(uvec3(~ (subgroup_size), 1u, 1u)))))), (~ (subgroup_size)) / 1u)), max((_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_size, ~ (_GLF_IDENTITY(~ (subgroup_size), uint(uvec3(~ (subgroup_size), 1u, 1u)))))), (~ (subgroup_size)) / 1u)), (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_size, ~ (_GLF_IDENTITY(~ (subgroup_size), uint(uvec3(~ (subgroup_size), 1u, 1u)))))), (~ (subgroup_size)) / 1u))))) + 0u)), (~ (_GLF_IDENTITY((_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_size, ~ (_GLF_IDENTITY(~ (subgroup_size), uint(uvec3(~ (subgroup_size), 1u, 1u)))))), (~ (subgroup_size)) / 1u)), (_GLF_IDENTITY((_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_size, ~ (_GLF_IDENTITY(~ (subgroup_size), uint(uvec3(~ (subgroup_size), 1u, 1u)))))), (~ (subgroup_size)) / 1u)), max((_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_size, ~ (_GLF_IDENTITY(~ (subgroup_size), uint(uvec3(~ (subgroup_size), 1u, 1u)))))), (~ (subgroup_size)) / 1u)), (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_size, ~ (_GLF_IDENTITY(~ (subgroup_size), uint(uvec3(~ (subgroup_size), 1u, 1u)))))), (~ (subgroup_size)) / 1u))))) + 0u))) << 0u)))), 1u)))))), 1u), _GLF_IDENTITY(uvec2(_GLF_IDENTITY(_GLF_IDENTITY(uint(uvec2(_GLF_IDENTITY(subgroup_size, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_size, ~ (_GLF_IDENTITY(~ (subgroup_size), uint(uvec3(~ (subgroup_size), 1u, 1u)))))), (~ (subgroup_size)) / 1u))), 1u)), (false ? _GLF_FUZZED(_GLF_IDENTITY(workgroup_id, 0u + (_GLF_IDENTITY(workgroup_id, 0u | (workgroup_id))))) : uint(uvec2(_GLF_IDENTITY(subgroup_size, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_size, ~ (_GLF_IDENTITY(~ (subgroup_size), uint(uvec3(~ (subgroup_size), 1u, 1u)))))), (~ (subgroup_size)) / 1u))), 1u)))), (false ? _GLF_FUZZED(virtual_gid) : _GLF_IDENTITY(uint(uvec2(_GLF_IDENTITY(subgroup_size, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_size, ~ (_GLF_IDENTITY(~ (subgroup_size), uint(_GLF_IDENTITY(uvec3(~ (subgroup_size), 1u, 1u), max(_GLF_IDENTITY(uvec3(~ (subgroup_size), 1u, 1u), min(uvec3(~ (subgroup_size), 1u, 1u), uvec3(~ (subgroup_size), 1u, 1u))), _GLF_IDENTITY(uvec3(~ (subgroup_size), 1u, 1u), uvec3(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y)) * (uvec3(~ (subgroup_size), 1u, 1u)))))))))), (~ (subgroup_size)) / 1u))), 1u)), (false ? _GLF_FUZZED(workgroup_id) : uint(uvec2(_GLF_IDENTITY(subgroup_size, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_size, ~ (_GLF_IDENTITY(~ (subgroup_size), uint(uvec3(~ (subgroup_size), 1u, 1u)))))), (~ (subgroup_size)) / 1u))), 1u)))))), 1u), (uvec2(_GLF_IDENTITY(_GLF_IDENTITY(uint(uvec2(_GLF_IDENTITY(subgroup_size, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_size, ~ (_GLF_IDENTITY(~ (subgroup_size), uint(uvec3(~ (subgroup_size), 1u, 1u)))))), (~ (subgroup_size)) / 1u))), 1u)), (false ? _GLF_FUZZED(_GLF_IDENTITY(workgroup_id, (workgroup_id) | (177788u & 0u))) : uint(uvec2(_GLF_IDENTITY(subgroup_size, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_size, ~ (_GLF_IDENTITY(~ (subgroup_size), uint(uvec3(~ (subgroup_size), 1u, 1u)))))), (~ (subgroup_size)) / 1u))), 1u)))), (false ? _GLF_FUZZED(virtual_gid) : _GLF_IDENTITY(uint(uvec2(_GLF_IDENTITY(subgroup_size, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_size, ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (subgroup_size), uint(uvec3(~ (subgroup_size), 1u, 1u))), max(_GLF_IDENTITY(~ (subgroup_size), uint(uvec3(~ (subgroup_size), 1u, 1u))), _GLF_IDENTITY(~ (subgroup_size), uint(uvec3(~ (subgroup_size), 1u, 1u)))))))), (~ (subgroup_size)) / _GLF_IDENTITY(1u, clamp(1u, 1u, 1u))))), 1u)), (_GLF_IDENTITY(false ? _GLF_FUZZED(workgroup_id) : uint(uvec2(_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_size, ~ (_GLF_IDENTITY(~ (subgroup_size), uint(uvec3(~ (subgroup_size), 1u, 1u)))))), (~ (subgroup_size)) / 1u)), clamp(~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_size, ~ (_GLF_IDENTITY(~ (subgroup_size), uint(uvec3(~ (subgroup_size), 1u, 1u)))))), (~ (subgroup_size)) / 1u)), _GLF_IDENTITY(~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_size, ~ (_GLF_IDENTITY(~ (subgroup_size), uint(uvec3(~ (subgroup_size), 1u, 1u)))))), (~ (subgroup_size)) / 1u)), (_GLF_IDENTITY(~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_size, ~ (_GLF_IDENTITY(~ (subgroup_size), uint(uvec3(~ (subgroup_size), 1u, 1u)))))), (~ (subgroup_size)) / 1u)), (~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_size, ~ (_GLF_IDENTITY(~ (subgroup_size), uint(uvec3(~ (subgroup_size), 1u, 1u)))))), (~ (subgroup_size)) / 1u))) - 0u)) << 0u), _GLF_IDENTITY(~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_size, ~ (_GLF_IDENTITY(~ (subgroup_size), uint(uvec3(~ (subgroup_size), 1u, 1u)))))), (~ (subgroup_size)) / 1u)), (~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_size, ~ (_GLF_IDENTITY(~ (subgroup_size), uint(uvec3(~ (subgroup_size), 1u, 1u)))))), (~ (subgroup_size)) / 1u))) << 0u)))), 1u)), min(_GLF_IDENTITY(false ? _GLF_FUZZED(workgroup_id) : uint(uvec2(_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_size, ~ (_GLF_IDENTITY(~ (subgroup_size), uint(uvec3(~ (subgroup_size), 1u, 1u)))))), (~ (subgroup_size)) / 1u)), clamp(~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_size, ~ (_GLF_IDENTITY(~ (subgroup_size), uint(uvec3(~ (subgroup_size), 1u, 1u)))))), (~ (subgroup_size)) / 1u)), _GLF_IDENTITY(~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_size, ~ (_GLF_IDENTITY(~ (subgroup_size), uint(uvec3(~ (subgroup_size), 1u, 1u)))))), (~ (subgroup_size)) / 1u)), (_GLF_IDENTITY(~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_size, ~ (_GLF_IDENTITY(~ (subgroup_size), uint(uvec3(~ (subgroup_size), 1u, 1u)))))), (~ (subgroup_size)) / 1u)), (~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_size, ~ (_GLF_IDENTITY(~ (subgroup_size), uint(uvec3(~ (subgroup_size), 1u, 1u)))))), (~ (subgroup_size)) / 1u))) - 0u)) << 0u), _GLF_IDENTITY(~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_size, ~ (_GLF_IDENTITY(~ (subgroup_size), uint(uvec3(~ (subgroup_size), 1u, 1u)))))), (~ (subgroup_size)) / 1u)), (~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_size, ~ (_GLF_IDENTITY(~ (subgroup_size), uint(uvec3(~ (subgroup_size), 1u, 1u)))))), (~ (subgroup_size)) / 1u))) << 0u)))), 1u)), (false ? _GLF_FUZZED(workgroup_id) : uint(uvec2(_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_size, ~ (_GLF_IDENTITY(~ (subgroup_size), uint(uvec3(~ (subgroup_size), 1u, 1u)))))), (~ (subgroup_size)) / 1u)), clamp(~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_size, ~ (_GLF_IDENTITY(~ (subgroup_size), uint(uvec3(~ (subgroup_size), 1u, 1u)))))), (~ (subgroup_size)) / 1u)), _GLF_IDENTITY(~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_size, ~ (_GLF_IDENTITY(~ (subgroup_size), uint(uvec3(~ (subgroup_size), 1u, 1u)))))), (~ (subgroup_size)) / 1u)), (_GLF_IDENTITY(~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_size, ~ (_GLF_IDENTITY(~ (subgroup_size), uint(uvec3(~ (subgroup_size), 1u, 1u)))))), (~ (subgroup_size)) / 1u)), (~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_size, ~ (_GLF_IDENTITY(~ (subgroup_size), uint(uvec3(~ (subgroup_size), 1u, 1u)))))), (~ (subgroup_size)) / 1u))) - 0u)) << 0u), _GLF_IDENTITY(~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_size, ~ (_GLF_IDENTITY(~ (subgroup_size), uint(uvec3(~ (subgroup_size), 1u, 1u)))))), (~ (subgroup_size)) / 1u)), (~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_size, ~ (_GLF_IDENTITY(~ (subgroup_size), uint(uvec3(~ (subgroup_size), 1u, 1u)))))), (~ (subgroup_size)) / 1u))) << 0u)))), 1u))) | (false ? _GLF_FUZZED(workgroup_id) : uint(uvec2(_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_size, ~ (_GLF_IDENTITY(~ (subgroup_size), uint(uvec3(~ (subgroup_size), 1u, 1u)))))), (~ (subgroup_size)) / 1u)), clamp(~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_size, ~ (_GLF_IDENTITY(~ (subgroup_size), uint(uvec3(~ (subgroup_size), 1u, 1u)))))), (~ (subgroup_size)) / 1u)), _GLF_IDENTITY(~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_size, ~ (_GLF_IDENTITY(~ (subgroup_size), uint(uvec3(~ (subgroup_size), 1u, 1u)))))), (~ (subgroup_size)) / 1u)), (_GLF_IDENTITY(~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_size, ~ (_GLF_IDENTITY(~ (subgroup_size), uint(uvec3(~ (subgroup_size), 1u, 1u)))))), (~ (subgroup_size)) / 1u)), (~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_size, ~ (_GLF_IDENTITY(~ (subgroup_size), uint(uvec3(~ (subgroup_size), 1u, 1u)))))), (~ (subgroup_size)) / 1u))) - 0u)) << 0u), _GLF_IDENTITY(~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_size, ~ (_GLF_IDENTITY(~ (subgroup_size), uint(uvec3(~ (subgroup_size), 1u, 1u)))))), (~ (subgroup_size)) / 1u)), (~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_size, ~ (_GLF_IDENTITY(~ (subgroup_size), uint(uvec3(~ (subgroup_size), 1u, 1u)))))), (~ (subgroup_size)) / 1u))) << 0u)))), 1u)))), false ? _GLF_FUZZED(workgroup_id) : uint(uvec2(_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_size, ~ (_GLF_IDENTITY(~ (subgroup_size), uint(uvec3(~ (subgroup_size), 1u, 1u)))))), (~ (subgroup_size)) / 1u)), clamp(~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_size, ~ (_GLF_IDENTITY(~ (subgroup_size), uint(uvec3(~ (subgroup_size), 1u, 1u)))))), (~ (subgroup_size)) / 1u)), _GLF_IDENTITY(~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_size, ~ (_GLF_IDENTITY(~ (subgroup_size), uint(uvec3(~ (subgroup_size), 1u, 1u)))))), (~ (subgroup_size)) / 1u)), (_GLF_IDENTITY(~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_size, ~ (_GLF_IDENTITY(~ (subgroup_size), uint(uvec3(~ (subgroup_size), 1u, 1u)))))), (~ (subgroup_size)) / 1u)), (~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_size, ~ (_GLF_IDENTITY(~ (subgroup_size), uint(uvec3(~ (subgroup_size), 1u, 1u)))))), (~ (subgroup_size)) / 1u))) - 0u)) << 0u), _GLF_IDENTITY(~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_size, ~ (_GLF_IDENTITY(~ (subgroup_size), uint(uvec3(~ (subgroup_size), 1u, 1u)))))), (~ (subgroup_size)) / 1u)), (~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_size, ~ (_GLF_IDENTITY(~ (subgroup_size), uint(uvec3(~ (subgroup_size), 1u, 1u)))))), (~ (subgroup_size)) / 1u))) << 0u)))), 1u)))))))), 1u)) << uvec2(0u, 0u)))))))), (true ? ((subgroup_local_id + 1) % _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, ~ (~ (_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, uint(uvec3(subgroup_size, 1u, 0u)))) - 0u)))), clamp(subgroup_size, subgroup_size, subgroup_size)), ~ _GLF_IDENTITY((_GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, 0u ^ (_GLF_IDENTITY(subgroup_size, ((1u << _GLF_IDENTITY(uint(5u), uint(5u))) >> _GLF_IDENTITY(uint(5u), uint(5u))) * (subgroup_size)))), ~ (_GLF_IDENTITY(~ (subgroup_size), uint(uvec3(~ (subgroup_size), 1u, 1u)))))), (~ (subgroup_size)) / _GLF_IDENTITY(1u, _GLF_IDENTITY((1u), 0u ^ (_GLF_IDENTITY((1u), max((1u), (1u))))) >> 0u))), uint(uint(_GLF_IDENTITY((_GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, ~ (_GLF_IDENTITY(~ (subgroup_size), uint(uvec3(~ (subgroup_size), 1u, 1u))))), uint(uvec4(_GLF_IDENTITY(subgroup_size, ~ (_GLF_IDENTITY(~ (subgroup_size), uint(uvec3(~ (subgroup_size), 1u, 1u))))), uint(_GLF_ONE(1.0, injectionSwitch.y)), 0u, 1u)))), _GLF_IDENTITY((~ (_GLF_IDENTITY(subgroup_size, ~ (_GLF_IDENTITY(~ (subgroup_size), (~ (subgroup_size)) << 0u))))), (true ? (~ (_GLF_IDENTITY(subgroup_size, ~ (_GLF_IDENTITY(~ (subgroup_size), (~ (subgroup_size)) << 0u))))) : _GLF_FUZZED(workgroup_base))) / 1u)), ((_GLF_IDENTITY(~ _GLF_IDENTITY((_GLF_IDENTITY(subgroup_size, ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (subgroup_size), uint(uvec3(~ (_GLF_IDENTITY(subgroup_size, (subgroup_size) - 0u)), 1u, 1u))), max(_GLF_IDENTITY(~ (subgroup_size), uint(uvec3(~ (subgroup_size), _GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, 0u ^ (1u))) * 1u), 1u))), _GLF_IDENTITY(~ (subgroup_size), uint(uvec3(~ (subgroup_size), 1u, 1u)))))))), (true ? _GLF_IDENTITY((_GLF_IDENTITY(subgroup_size, ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (subgroup_size), uint(uvec3(~ (_GLF_IDENTITY(subgroup_size, (subgroup_size) - 0u)), 1u, 1u))), max(_GLF_IDENTITY(~ (subgroup_size), uint(uvec3(~ (subgroup_size), _GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, 0u ^ (1u))) * 1u), 1u))), _GLF_IDENTITY(~ (subgroup_size), uint(uvec3(~ (subgroup_size), 1u, 1u)))))))), clamp(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_size, ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (subgroup_size), uint(uvec3(~ (_GLF_IDENTITY(subgroup_size, (subgroup_size) - 0u)), 1u, 1u))), max(_GLF_IDENTITY(~ (subgroup_size), uint(uvec3(~ (subgroup_size), _GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, 0u ^ (1u))) * 1u), 1u))), _GLF_IDENTITY(~ (subgroup_size), uint(uvec3(~ (subgroup_size), 1u, 1u)))))))), (true ? (_GLF_IDENTITY(subgroup_size, ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (subgroup_size), uint(uvec3(~ (_GLF_IDENTITY(subgroup_size, (subgroup_size) - 0u)), 1u, 1u))), max(_GLF_IDENTITY(~ (subgroup_size), uint(uvec3(~ (subgroup_size), _GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, 0u ^ (1u))) * 1u), 1u))), _GLF_IDENTITY(~ (subgroup_size), uint(uvec3(~ (subgroup_size), 1u, 1u)))))))) : _GLF_FUZZED(subgroup_base))), (_GLF_IDENTITY(subgroup_size, ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (subgroup_size), uint(uvec3(~ (_GLF_IDENTITY(subgroup_size, (subgroup_size) - 0u)), 1u, 1u))), max(_GLF_IDENTITY(~ (subgroup_size), uint(uvec3(~ (subgroup_size), _GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, 0u ^ (1u))) * 1u), 1u))), _GLF_IDENTITY(~ (subgroup_size), uint(uvec3(~ (subgroup_size), 1u, 1u)))))))), (_GLF_IDENTITY(subgroup_size, ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (subgroup_size), uint(uvec3(~ (_GLF_IDENTITY(subgroup_size, (subgroup_size) - 0u)), 1u, 1u))), max(_GLF_IDENTITY(~ (subgroup_size), uint(uvec3(~ (subgroup_size), _GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, 0u ^ (1u))) * 1u), 1u))), _GLF_IDENTITY(~ (subgroup_size), uint(uvec3(~ (subgroup_size), 1u, 1u)))))))))) : _GLF_FUZZED(subgroup_base))), _GLF_IDENTITY((~ (subgroup_size)), ((~ (subgroup_size))) + uint(_GLF_ZERO(0.0, injectionSwitch.x))) / 1u))) >> 0u)))))) : _GLF_IDENTITY(_GLF_FUZZED(workgroup_base), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_FUZZED(workgroup_base), (_GLF_FUZZED(workgroup_base)) >> uint(_GLF_ZERO(0.0, injectionSwitch.x)))), (~ (_GLF_IDENTITY(_GLF_FUZZED(workgroup_base), (_GLF_FUZZED(workgroup_base)) >> uint(_GLF_ZERO(0.0, injectionSwitch.x))))) / 1u))))), 0u | (workgroup_base + subgroup_base + _GLF_IDENTITY((_GLF_IDENTITY((subgroup_local_id + 1) % _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_size, ~ (_GLF_IDENTITY(~ (subgroup_size), uint(uvec3(~ (subgroup_size), 1u, 1u)))))), (~ (subgroup_size)) / 1u))), _GLF_IDENTITY(uint(uvec2(_GLF_IDENTITY(subgroup_size, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(~ (_GLF_IDENTITY(~ (subgroup_size), uint(uvec3(~ (subgroup_size), 1u, 1u)))), (~ (_GLF_IDENTITY(~ (subgroup_size), uint(uvec3(~ (subgroup_size), 1u, 1u))))) ^ 0u))), (~ (subgroup_size)) / 1u))), 1u)), (false ? _GLF_FUZZED(workgroup_id) : uint(uvec2(_GLF_IDENTITY(subgroup_size, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_size, ~ (_GLF_IDENTITY(~ (subgroup_size), uint(uvec3(~ (subgroup_size), 1u, 1u)))))), (~ (subgroup_size)) / 1u))), 1u))))), (false ? _GLF_FUZZED(subgroup_local_id) : (subgroup_local_id + 1) % _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, min(_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(0u | (subgroup_size), uint(uvec4(0u | (subgroup_size), 0u, 0u, uint(_GLF_ONE(1.0, injectionSwitch.y)))))), subgroup_size)), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size))) - 0u)), uint(uvec3(~ (subgroup_size), _GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, (1u) << 0u)) << 0u), 1u)))))), (~ (subgroup_size)) / 1u))), _GLF_IDENTITY(_GLF_IDENTITY(uint(uvec2(_GLF_IDENTITY(subgroup_size, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_size, ~ (_GLF_IDENTITY(~ (subgroup_size), uint(uvec3(~ (subgroup_size), 1u, 1u)))))), (~ (subgroup_size)) / 1u))), 1u)), (false ? _GLF_FUZZED(_GLF_IDENTITY(workgroup_id, uint(uint(workgroup_id)))) : uint(uvec2(_GLF_IDENTITY(subgroup_size, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_size, ~ (_GLF_IDENTITY(~ (subgroup_size), uint(uvec3(~ (subgroup_size), 1u, 1u)))))), (~ (subgroup_size)) / 1u))), 1u)))), _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec4(_GLF_IDENTITY(uint(uvec2(_GLF_IDENTITY(subgroup_size, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_size, ~ (_GLF_IDENTITY(~ (subgroup_size), uint(uvec3(~ (subgroup_size), 1u, 1u)))))), (~ (subgroup_size)) / 1u))), 1u)), (false ? _GLF_FUZZED(_GLF_IDENTITY(workgroup_id, uint(uint(workgroup_id)))) : uint(uvec2(_GLF_IDENTITY(subgroup_size, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_size, ~ (_GLF_IDENTITY(~ (subgroup_size), uint(uvec3(~ (subgroup_size), 1u, 1u)))))), (~ (subgroup_size)) / 1u))), 1u)))), 0u, 1u, 1u), clamp(uvec4(_GLF_IDENTITY(uint(uvec2(_GLF_IDENTITY(subgroup_size, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_size, ~ (_GLF_IDENTITY(~ (subgroup_size), uint(uvec3(~ (subgroup_size), 1u, 1u)))))), (~ (subgroup_size)) / 1u))), 1u)), (false ? _GLF_FUZZED(_GLF_IDENTITY(workgroup_id, uint(uint(workgroup_id)))) : uint(uvec2(_GLF_IDENTITY(subgroup_size, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_size, ~ (_GLF_IDENTITY(~ (subgroup_size), uint(uvec3(~ (subgroup_size), 1u, 1u)))))), (~ (subgroup_size)) / 1u))), 1u)))), 0u, 1u, 1u), uvec4(_GLF_IDENTITY(uint(uvec2(_GLF_IDENTITY(subgroup_size, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_size, ~ (_GLF_IDENTITY(~ (subgroup_size), uint(uvec3(~ (subgroup_size), 1u, 1u)))))), (~ (subgroup_size)) / 1u))), 1u)), (false ? _GLF_FUZZED(_GLF_IDENTITY(workgroup_id, uint(uint(workgroup_id)))) : uint(uvec2(_GLF_IDENTITY(subgroup_size, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_size, ~ (_GLF_IDENTITY(~ (subgroup_size), uint(uvec3(~ (subgroup_size), 1u, 1u)))))), (~ (subgroup_size)) / 1u))), 1u)))), 0u, 1u, 1u), uvec4(_GLF_IDENTITY(uint(uvec2(_GLF_IDENTITY(subgroup_size, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_size, ~ (_GLF_IDENTITY(~ (subgroup_size), uint(uvec3(~ (subgroup_size), 1u, 1u)))))), (~ (subgroup_size)) / 1u))), 1u)), (false ? _GLF_FUZZED(_GLF_IDENTITY(workgroup_id, uint(uint(workgroup_id)))) : uint(uvec2(_GLF_IDENTITY(subgroup_size, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_size, ~ (_GLF_IDENTITY(~ (subgroup_size), uint(uvec3(~ (subgroup_size), 1u, 1u)))))), (~ (subgroup_size)) / 1u))), 1u)))), 0u, 1u, 1u)))), (uint(_GLF_IDENTITY(uvec4(_GLF_IDENTITY(uint(uvec2(_GLF_IDENTITY(subgroup_size, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_size, ~ (_GLF_IDENTITY(~ (subgroup_size), uint(uvec3(~ (subgroup_size), 1u, 1u)))))), (~ (subgroup_size)) / 1u))), 1u)), (false ? _GLF_FUZZED(_GLF_IDENTITY(workgroup_id, uint(uint(workgroup_id)))) : uint(uvec2(_GLF_IDENTITY(subgroup_size, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_size, ~ (_GLF_IDENTITY(~ (subgroup_size), uint(uvec3(~ (subgroup_size), 1u, 1u)))))), (~ (subgroup_size)) / 1u))), 1u)))), 0u, 1u, 1u), clamp(uvec4(_GLF_IDENTITY(uint(uvec2(_GLF_IDENTITY(subgroup_size, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_size, ~ (_GLF_IDENTITY(~ (subgroup_size), uint(uvec3(~ (subgroup_size), 1u, 1u)))))), (~ (subgroup_size)) / 1u))), 1u)), (false ? _GLF_FUZZED(_GLF_IDENTITY(workgroup_id, uint(uint(workgroup_id)))) : uint(uvec2(_GLF_IDENTITY(subgroup_size, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_size, ~ (_GLF_IDENTITY(~ (subgroup_size), uint(uvec3(~ (subgroup_size), 1u, 1u)))))), (~ (subgroup_size)) / 1u))), 1u)))), 0u, 1u, 1u), uvec4(_GLF_IDENTITY(uint(uvec2(_GLF_IDENTITY(subgroup_size, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_size, ~ (_GLF_IDENTITY(~ (subgroup_size), uint(uvec3(~ (subgroup_size), 1u, 1u)))))), (~ (subgroup_size)) / 1u))), 1u)), (false ? _GLF_FUZZED(_GLF_IDENTITY(workgroup_id, uint(uint(workgroup_id)))) : uint(uvec2(_GLF_IDENTITY(subgroup_size, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_size, ~ (_GLF_IDENTITY(~ (subgroup_size), uint(uvec3(~ (subgroup_size), 1u, 1u)))))), (~ (subgroup_size)) / 1u))), 1u)))), 0u, 1u, 1u), uvec4(_GLF_IDENTITY(uint(uvec2(_GLF_IDENTITY(subgroup_size, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_size, ~ (_GLF_IDENTITY(~ (subgroup_size), uint(uvec3(~ (subgroup_size), 1u, 1u)))))), (~ (subgroup_size)) / 1u))), 1u)), (false ? _GLF_FUZZED(_GLF_IDENTITY(workgroup_id, uint(uint(workgroup_id)))) : uint(uvec2(_GLF_IDENTITY(subgroup_size, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_size, ~ (_GLF_IDENTITY(~ (subgroup_size), uint(uvec3(~ (subgroup_size), 1u, 1u)))))), (~ (subgroup_size)) / 1u))), 1u)))), 0u, 1u, 1u))))) | (uint(_GLF_IDENTITY(uvec4(_GLF_IDENTITY(uint(uvec2(_GLF_IDENTITY(subgroup_size, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_size, ~ (_GLF_IDENTITY(~ (subgroup_size), uint(uvec3(~ (subgroup_size), 1u, 1u)))))), (~ (subgroup_size)) / 1u))), 1u)), (false ? _GLF_FUZZED(_GLF_IDENTITY(workgroup_id, uint(uint(workgroup_id)))) : uint(uvec2(_GLF_IDENTITY(subgroup_size, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_size, ~ (_GLF_IDENTITY(~ (subgroup_size), uint(uvec3(~ (subgroup_size), 1u, 1u)))))), (~ (subgroup_size)) / 1u))), 1u)))), 0u, 1u, 1u), clamp(uvec4(_GLF_IDENTITY(uint(uvec2(_GLF_IDENTITY(subgroup_size, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_size, ~ (_GLF_IDENTITY(~ (subgroup_size), uint(uvec3(~ (subgroup_size), 1u, 1u)))))), (~ (subgroup_size)) / 1u))), 1u)), (false ? _GLF_FUZZED(_GLF_IDENTITY(workgroup_id, uint(uint(workgroup_id)))) : uint(uvec2(_GLF_IDENTITY(subgroup_size, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_size, ~ (_GLF_IDENTITY(~ (subgroup_size), uint(uvec3(~ (subgroup_size), 1u, 1u)))))), (~ (subgroup_size)) / 1u))), 1u)))), 0u, 1u, 1u), uvec4(_GLF_IDENTITY(uint(uvec2(_GLF_IDENTITY(subgroup_size, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_size, ~ (_GLF_IDENTITY(~ (subgroup_size), uint(uvec3(~ (subgroup_size), 1u, 1u)))))), (~ (subgroup_size)) / 1u))), 1u)), (false ? _GLF_FUZZED(_GLF_IDENTITY(workgroup_id, uint(uint(workgroup_id)))) : uint(uvec2(_GLF_IDENTITY(subgroup_size, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_size, ~ (_GLF_IDENTITY(~ (subgroup_size), uint(uvec3(~ (subgroup_size), 1u, 1u)))))), (~ (subgroup_size)) / 1u))), 1u)))), 0u, 1u, 1u), uvec4(_GLF_IDENTITY(uint(uvec2(_GLF_IDENTITY(subgroup_size, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_size, ~ (_GLF_IDENTITY(~ (subgroup_size), uint(uvec3(~ (subgroup_size), 1u, 1u)))))), (~ (subgroup_size)) / 1u))), 1u)), (false ? _GLF_FUZZED(_GLF_IDENTITY(workgroup_id, uint(uint(workgroup_id)))) : uint(uvec2(_GLF_IDENTITY(subgroup_size, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_size, ~ (_GLF_IDENTITY(~ (subgroup_size), uint(uvec3(~ (subgroup_size), 1u, 1u)))))), (~ (subgroup_size)) / 1u))), 1u)))), 0u, 1u, 1u))))))))))), (true ? ((subgroup_local_id + 1) % _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size)), ~ _GLF_IDENTITY((_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_size, ~ (_GLF_IDENTITY(~ (subgroup_size), uint(uvec3(~ (subgroup_size), 1u, 1u)))))), (~ (subgroup_size)) / 1u)), uint(uint(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (subgroup_size) / 1u), ~ (_GLF_IDENTITY(~ (subgroup_size), uint(uvec3(~ (subgroup_size), 1u, 1u)))))), (~ (subgroup_size)) / 1u)), ((_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_size, ~ (_GLF_IDENTITY(~ (subgroup_size), uint(uvec3(~ (subgroup_size), _GLF_IDENTITY(1u, uint(uvec2(_GLF_IDENTITY(1u, uint(uvec3(_GLF_IDENTITY(1u, (1u) - 0u), 1u, 0u))), 1u))), 1u)))))), (~ (subgroup_size)) / 1u))) >> 0u), (false ? _GLF_FUZZED(virtual_gid) : _GLF_IDENTITY((_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_size, ~ (_GLF_IDENTITY(~ (subgroup_size), uint(uvec3(~ (subgroup_size), 1u, 1u)))))), (~ (subgroup_size)) / 1u)), ((_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_size, ~ (_GLF_IDENTITY(~ (subgroup_size), _GLF_IDENTITY(uint(uvec3(~ (_GLF_IDENTITY(subgroup_size, (subgroup_size) | (_GLF_IDENTITY(subgroup_size, (subgroup_size) * 1u)))), 1u, 1u)), 0u | (_GLF_IDENTITY(uint(uvec3(~ (subgroup_size), 1u, 1u)), max(_GLF_IDENTITY(uint(uvec3(~ _GLF_IDENTITY((subgroup_size), (_GLF_IDENTITY((subgroup_size), ((subgroup_size)) ^ 0u)) / 1u), 1u, 1u)), (uint(uvec3(~ _GLF_IDENTITY((subgroup_size), (_GLF_IDENTITY((subgroup_size), ((subgroup_size)) ^ 0u)) / 1u), 1u, 1u))) ^ 0u), uint(uvec3(~ (subgroup_size), 1u, 1u)))))))))), (~ (subgroup_size)) / 1u))) >> 0u)))))))) : _GLF_FUZZED(workgroup_base)))));
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (_GLF_IDENTITY(false, (false) || false))), ! (! ((! (_GLF_IDENTITY(false, (false) || false)))))))))
  barrier();
 do
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint read = atomicLoad(buf[virtual_gid], 4, 64, 2);
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   barrier();
   if(_GLF_DEAD(false))
    return;
  }
 atomicStore(buf[next_virtual_gid], uint(_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, max(1, 1)), 1, 1))), 4, 64, 4);
 do
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))), _GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(((injectionSwitch.x > injectionSwitch.y)) && true, true && (_GLF_IDENTITY(((injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (((injectionSwitch.x > injectionSwitch.y))), false || (! (((injectionSwitch.x > injectionSwitch.y))))))) && true)))) || (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)) && true), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y, (injectionSwitch.x > injectionSwitch.y) && true)) && true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, 1.0 * (_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))))) && true)) && true, ! (_GLF_IDENTITY(! (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x, min(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x)) > injectionSwitch.y) && true)) && true, bool(bvec3((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)) && true, _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), (! (true)) && true))), true)))), (! (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(injectionSwitch.x > injectionSwitch.y, false))))))) && true)) && true, bool(bvec3((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), (! (injectionSwitch.x > injectionSwitch.y)) || false))), (injectionSwitch.x > injectionSwitch.y) && true)) && true, true, true))))) || false)))))))))))))))))), _GLF_IDENTITY(false, bool(bvec3(false, true, true))) || ((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(-449.399), _GLF_FUZZED(6.0)), bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))).y, ! (! (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(_GLF_IDENTITY((- -9.4), ((- -9.4)) / 1.0)), _GLF_FUZZED(4.3)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, _GLF_IDENTITY(true, ! (! (true)))))).y, clamp(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED((- -9.4)), _GLF_FUZZED(4.3)), vec2(_GLF_IDENTITY((injectionSwitch)[0], (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY((injectionSwitch)[0], min(_GLF_IDENTITY((injectionSwitch)[0], (false ? _GLF_FUZZED(6.0) : (injectionSwitch)[0])), (injectionSwitch)[0])) : _GLF_FUZZED(-4210.6425))), (injectionSwitch)[1]), bvec2(true, true))).y, _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED((- -9.4)), _GLF_FUZZED(4.3)), vec2((injectionSwitch)[0], (_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), max(injectionSwitch, injectionSwitch)), injectionSwitch)))[1]), bvec2(true, true))).y, _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED((- -9.4)), _GLF_FUZZED(4.3)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))).y)), ! (! (injectionSwitch.x > injectionSwitch.y)))))), (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(-449.399), _GLF_FUZZED(6.0)), bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))).y, ! (! (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(_GLF_IDENTITY(vec2(_GLF_FUZZED(_GLF_IDENTITY((- -9.4), (_GLF_IDENTITY((- -9.4), (_GLF_IDENTITY((- -9.4), clamp((- -9.4), (- -9.4), (- -9.4)))) / determinant(mat2(1.0, 0.0, 1.0, 1.0)))) / 1.0)), _GLF_FUZZED(4.3)), (vec2(_GLF_FUZZED(_GLF_IDENTITY((- -9.4), (_GLF_IDENTITY((- -9.4), (_GLF_IDENTITY((- -9.4), clamp((- -9.4), (- -9.4), (- -9.4)))) / determinant(mat2(1.0, 0.0, 1.0, 1.0)))) / 1.0)), _GLF_FUZZED(4.3))) / vec2(1.0, 1.0)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, _GLF_IDENTITY(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, bool(bvec3(true, false, false)))), false || (_GLF_IDENTITY(! (_GLF_IDENTITY(true, bool(bvec3(true, false, false)))), (! (_GLF_IDENTITY(true, bool(bvec3(true, false, false))))) || false))))), ! (! (true)))))).y, clamp(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED((- -9.4)), _GLF_FUZZED(_GLF_IDENTITY(4.3, mix(float(4.3), float(_GLF_FUZZED(float(-60748))), bool(false))))), vec2(_GLF_IDENTITY((injectionSwitch)[0], (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY((injectionSwitch)[0], min(_GLF_IDENTITY((injectionSwitch)[0], (false ? _GLF_FUZZED(6.0) : (injectionSwitch)[0])), (injectionSwitch)[0])) : _GLF_FUZZED(-4210.6425))), (injectionSwitch)[1]), bvec2(_GLF_IDENTITY(true, false || (true)), _GLF_IDENTITY(true, ! (! (true)))))).y, max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED((- -9.4)), _GLF_FUZZED(_GLF_IDENTITY(4.3, mix(float(4.3), float(_GLF_FUZZED(float(-60748))), bool(false))))), vec2(_GLF_IDENTITY((injectionSwitch)[0], (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY((injectionSwitch)[0], min(_GLF_IDENTITY((injectionSwitch)[0], (false ? _GLF_FUZZED(6.0) : (injectionSwitch)[0])), (injectionSwitch)[0])) : _GLF_FUZZED(-4210.6425))), (injectionSwitch)[1]), bvec2(_GLF_IDENTITY(true, false || (true)), _GLF_IDENTITY(true, ! (! (true)))))).y, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED((- -9.4)), _GLF_FUZZED(_GLF_IDENTITY(4.3, mix(float(4.3), float(_GLF_FUZZED(float(-60748))), bool(false))))), vec2(_GLF_IDENTITY((injectionSwitch)[0], (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY((injectionSwitch)[0], min(_GLF_IDENTITY((injectionSwitch)[0], (false ? _GLF_FUZZED(6.0) : (injectionSwitch)[0])), (injectionSwitch)[0])) : _GLF_FUZZED(-4210.6425))), (injectionSwitch)[1]), bvec2(_GLF_IDENTITY(true, false || (true)), _GLF_IDENTITY(true, ! (! (true)))))).y) + log(1.0)), _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED((- -9.4)), _GLF_FUZZED(_GLF_IDENTITY(4.3, mix(float(4.3), float(_GLF_FUZZED(float(-60748))), bool(false))))), vec2(_GLF_IDENTITY((injectionSwitch)[0], (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY((injectionSwitch)[0], min(_GLF_IDENTITY((injectionSwitch)[0], (false ? _GLF_FUZZED(6.0) : (injectionSwitch)[0])), (injectionSwitch)[0])) : _GLF_FUZZED(-4210.6425))), (injectionSwitch)[1]), bvec2(_GLF_IDENTITY(true, false || (true)), _GLF_IDENTITY(true, ! (! (true)))))).y)), _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED((- -9.4)), _GLF_FUZZED(4.3)), _GLF_IDENTITY(vec2((injectionSwitch)[0], (_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), max(injectionSwitch, injectionSwitch)), injectionSwitch)))[1]), (_GLF_IDENTITY(vec2((injectionSwitch)[0], (_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), max(injectionSwitch, injectionSwitch)), injectionSwitch)))[1]), vec2(1.0, 1.0) * (vec2((injectionSwitch)[0], (_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), max(injectionSwitch, injectionSwitch)), injectionSwitch)))[1])))) / vec2(1.0, 1.0)), bvec2(true, true))).y, _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED((- _GLF_IDENTITY(-9.4, (_GLF_IDENTITY(-9.4, 0.0 + (-9.4))) - 0.0))), _GLF_FUZZED(4.3)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))).y)), ! (! (injectionSwitch.x > injectionSwitch.y))))))) || false)))))))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       barrier();
      }
     else
      {
      }
    }
   else
    {
    }
  }
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(bool(bool(false)), false || (bool(bool(false))))), ! (! (! (_GLF_IDENTITY(bool(bool(false)), false || (bool(bool(false)))))))))))))))))
  {
   if(_GLF_DEAD(false))
    return;
   return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     do
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, false, true)))))
        break;
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           barrier();
          }
         else
          {
          }
        }
       return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         return;
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-167.621)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) > injectionSwitch.y))));
    }
   if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_DEAD(false), true, false))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    continue;
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   subgroupBarrier();
  }
 else
  {
  }
 atomicStore(checker[_GLF_IDENTITY(virtual_gid, 0u | (virtual_gid))], read, 4, 64, 4);
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  {
   do
    {
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END
BUFFER checker DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected_checker DATA_TYPE uint32 SIZE 8388096 FILL 0

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 
  BIND BUFFER checker AS storage DESCRIPTOR_SET 0 BINDING 2 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT checker EQ_BUFFER expected_checker
