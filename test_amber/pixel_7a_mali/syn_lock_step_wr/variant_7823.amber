#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_10 {
 vec3 _f0;
 vec2 _f1;
 bvec3 _f2;
} ;

struct _GLF_struct_8 {
 uint subgroup_size;
 mat4x2 _f0;
 mat3x4 _f1;
 vec4 _f2;
 vec3 _f3;
 mat2x3 _f4;
 int _f5;
 uvec4 _f6;
} ;

struct _GLF_struct_9 {
 uvec4 _f0;
 _GLF_struct_8 _f1;
} ;

struct _GLF_struct_11 {
 _GLF_struct_9 _f0;
 _GLF_struct_10 _f1;
 mat2x3 _f2;
} ;

struct _GLF_struct_5 {
 uvec3 _f0;
 vec3 _f1;
 vec2 _f2;
 uvec2 _f3;
 mat3x4 _f4;
 bvec3 _f5;
} ;

struct _GLF_struct_4 {
 vec2 _f0;
 bvec4 _f1;
 float _f2;
 bvec2 _f3;
 mat4x2 _f4;
 mat2 _f5;
 mat2x4 _f6;
} ;

struct _GLF_struct_3 {
 vec2 _f0;
 vec4 _f1;
 uvec3 _f2;
 mat4 _f3;
 mat2 _f4;
 bvec4 _f5;
} ;

struct _GLF_struct_2 {
 uint subgroup_id;
 mat3 _f0;
 uint _f1;
 uvec3 _f2;
 mat3x4 _f3;
} ;

struct _GLF_struct_6 {
 _GLF_struct_2 _f0;
 _GLF_struct_3 _f1;
 _GLF_struct_4 _f2;
 ivec3 _f3;
 mat2x3 _f4;
 _GLF_struct_5 _f5;
 uint _f6;
} ;

struct _GLF_struct_1 {
 uvec2 _f0;
 vec4 _f1;
 mat2x4 _f2;
 ivec2 _f3;
 ivec2 _f4;
} ;

struct _GLF_struct_7 {
 _GLF_struct_1 _f0;
 _GLF_struct_6 _f1;
} ;

struct _GLF_struct_0 {
 uint workgroup_id;
 vec4 _f0;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(false))
  return;
 _GLF_struct_7 _GLF_struct_replacement_7 = _GLF_struct_7(_GLF_struct_1(uvec2(1u), vec4(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0))), mat2x4(1.0), ivec2(_GLF_IDENTITY(1, _GLF_IDENTITY(int(_GLF_IDENTITY(ivec3(1, 0, 1), ivec3(ivec4(ivec3(1, 0, 1), 0)))), _GLF_IDENTITY((int(ivec3(1, _GLF_IDENTITY(0, (0) << 0), 1))), ((int(ivec3(1, _GLF_IDENTITY(_GLF_IDENTITY(0, (0) << 0), 1 * (_GLF_IDENTITY(0, (0) << 0))), 1)))) << 0) >> 0))), _GLF_IDENTITY(ivec2(1), max(_GLF_IDENTITY(ivec2(1), clamp(ivec2(1), ivec2(1), ivec2(1))), _GLF_IDENTITY(ivec2(1), clamp(ivec2(1), ivec2(1), ivec2(1)))))), _GLF_struct_6(_GLF_struct_2(gl_SubgroupID, mat3(1.0), 1u, uvec3(1u), mat3x4(1.0)), _GLF_struct_3(vec2(_GLF_IDENTITY(1.0, _GLF_IDENTITY(float(_GLF_IDENTITY(mat2x3(1.0, determinant(mat4(0.0, 0.0, tan(0.0), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), _GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, min(1.0, 1.0))) - 0.0), 1.0, 0.0, 1.0), mat2x3(mat4x3(mat2x3(1.0, determinant(_GLF_IDENTITY(mat4(0.0, 0.0, tan(0.0), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0), (mat4(0.0, 0.0, tan(0.0), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)) * mat4(_GLF_ONE(1.0, injectionSwitch.y)))), 1.0, 1.0, 0.0, 1.0))))), (false ? _GLF_FUZZED(8337.1535) : _GLF_IDENTITY(float(_GLF_IDENTITY(mat2x3(1.0, determinant(mat4(0.0, 0.0, tan(0.0), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), _GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, min(1.0, 1.0))) - 0.0), 1.0, 0.0, 1.0), mat2x3(mat4x3(mat2x3(1.0, determinant(_GLF_IDENTITY(mat4(0.0, 0.0, tan(0.0), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0), (mat4(0.0, 0.0, tan(0.0), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)) * mat4(_GLF_ONE(1.0, injectionSwitch.y)))), 1.0, 1.0, 0.0, 1.0))))), float(mat4x3(float(_GLF_IDENTITY(mat2x3(1.0, determinant(mat4(0.0, 0.0, tan(0.0), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), _GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, min(1.0, 1.0))) - 0.0), 1.0, 0.0, 1.0), mat2x3(mat4x3(mat2x3(1.0, determinant(_GLF_IDENTITY(mat4(0.0, 0.0, tan(0.0), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0), (mat4(0.0, 0.0, tan(0.0), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)) * mat4(_GLF_ONE(1.0, injectionSwitch.y)))), 1.0, 1.0, 0.0, 1.0))))), sqrt(0.0), 1.0, exp(0.0), 1.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), 0.0, 0.0, 1.0, log(1.0), 0.0, length(vec3(0.0, 0.0, 0.0))))))))), _GLF_IDENTITY(vec4(1.0), min(vec4(1.0), vec4(1.0))), uvec3(_GLF_IDENTITY(1u, (1u) ^ _GLF_IDENTITY(0u, ~ (_GLF_IDENTITY(~ (0u), 0u ^ (~ (0u))))))), _GLF_IDENTITY(_GLF_IDENTITY(mat4(1.0), transpose(transpose(mat4(1.0)))), _GLF_IDENTITY(transpose(transpose(_GLF_IDENTITY(mat4(_GLF_IDENTITY(1.0, float(mat4(_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-1583.9951)), bool(false))), round(length(normalize(1.0))), 0.0, 1.0, 0.0, 0.0, round(length(normalize(vec2(1.0, 1.0)))), exp(0.0), 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0)))), transpose(transpose(_GLF_IDENTITY(mat4(1.0), transpose(transpose(mat4(1.0))))))))), mat4(1.0) * (transpose(transpose(_GLF_IDENTITY(mat4(1.0), transpose(transpose(mat4(1.0))))))))), mat2(1.0), bvec4(true)), _GLF_struct_4(_GLF_IDENTITY(vec2(1.0), clamp(vec2(1.0), vec2(1.0), _GLF_IDENTITY(vec2(1.0), mix(vec2((vec2(1.0))[0], _GLF_FUZZED(592.938)), vec2(_GLF_FUZZED(1.3), (vec2(1.0))[1]), bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))))), bvec4(_GLF_IDENTITY(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (true))), _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-31.10)), float(1.0), bool(true))), bvec2(true), mat4x2(1.0), mat2(1.0), mat2x4(1.0)), ivec3(1), mat2x3(1.0), _GLF_struct_5(uvec3(_GLF_IDENTITY(_GLF_IDENTITY(1u, (_GLF_IDENTITY(_GLF_IDENTITY(1u, (1u) - 0u), min(1u, 1u))) / 1u), (_GLF_IDENTITY(1u, (_GLF_IDENTITY(_GLF_IDENTITY(1u, (1u) - 0u), min(1u, 1u))) / 1u)) >> 0u)), vec3(1.0), vec2(1.0), uvec2(1u), mat3x4(1.0), _GLF_IDENTITY(bvec3(true), bvec3(bvec4(bvec3(true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), 1u));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bvec4(false, true, true, false)))))))))))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
      barrier();
     return;
    }
   if(_GLF_DEAD(false))
    {
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), false || (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true)))))))))))))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     else
      {
       return;
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       return;
      }
    }
   barrier();
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         barrier();
         if(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, (false) && true)))))
          barrier();
        }
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))))))
      barrier();
     return;
    }
   return;
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(mat3(injectionSwitch, abs(0.0), length(vec3(0.0, 0.0, 0.0)), sqrt(1.0), 0.0, 0.0, 1.0, 0.0))).x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     return;
    }
   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
    barrier();
   return;
  }
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  return;
 _GLF_struct_11 _GLF_struct_replacement_11 = _GLF_struct_11(_GLF_struct_9(uvec4(_GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, (1u) ^ 0u)) << 0u)), _GLF_struct_8(gl_SubgroupSize, mat4x2(1.0), mat3x4(1.0), vec4(1.0), vec3(1.0), mat2x3(1.0), 1, uvec4(_GLF_IDENTITY(1u, (1u) - 0u)))), _GLF_struct_10(vec3(1.0), vec2(1.0), _GLF_IDENTITY(bvec3(true), bvec3(bvec4(bvec3(true), _GLF_IDENTITY(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(true, false || (true)))))))), mat2x3(1.0));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), ((false)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))
      barrier();
     barrier();
    }
   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), false || (_GLF_WRAPPED_IF_TRUE(true))))
    {
     return;
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (injectionSwitch.x < injectionSwitch.y) || false)))))
        {
         barrier();
        }
       else
        {
        }
      }
    }
  }
 for(int _injected_loop_counter = int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(max(injectionSwitch, injectionSwitch), (true ? max(injectionSwitch, injectionSwitch) : _GLF_FUZZED(_GLF_IDENTITY(vec2(-616.316, -93.20), vec2(_GLF_IDENTITY(mat3x2(vec2(-616.316, -93.20), 0.0, 0.0, 0.0, 1.0), transpose(transpose(mat3x2(vec2(-616.316, -93.20), 0.0, 0.0, 0.0, 1.0)))))))))).x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(2), int(2)), (_GLF_IDENTITY(_GLF_IDENTITY(int(2), int(2)), (1 ^ 0) * (_GLF_IDENTITY(int(2), int(2))))) ^ (0 >> _GLF_IDENTITY(int(5), int(5))))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), ~ (~ (_GLF_IDENTITY(int(2), min(int(2), int(2))))))), (_GLF_IDENTITY(false, ! (! (false))) ? _GLF_FUZZED(19517) : _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), ~ (~ (_GLF_IDENTITY(int(2), min(int(2), int(2))))))))))); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       break;
      }
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), ! (! (bool(false))))))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    return;
   for(int _injected_loop_counter = (_GLF_IDENTITY(-93255, (true ? -93255 : _GLF_FUZZED(-16260))) & 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(4, (4) | (4))), int(4)))); _injected_loop_counter ++)
    {
     barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])))).y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false))))))
      barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    barrier();
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  return;
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_DEAD(false))
  return;
 uint workgroup_size = _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize, _GLF_IDENTITY(uvec3(0u, 0u, 0u) | (gl_WorkGroupSize), (false ? _GLF_FUZZED(uvec3(107561u, 196296u, 68197u)) : _GLF_IDENTITY(uvec3(0u, 0u, 0u) | (_GLF_IDENTITY(gl_WorkGroupSize, clamp(_GLF_IDENTITY(gl_WorkGroupSize, uvec3(gl_WorkGroupSize[0], gl_WorkGroupSize[1], gl_WorkGroupSize[2])), _GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) ^ uvec3(0u, 0u, 0u)), gl_WorkGroupSize))), ~ (~ (uvec3(0u, 0u, 0u) | _GLF_IDENTITY((gl_WorkGroupSize), uvec3(uvec3((gl_WorkGroupSize)))))))))).x, _GLF_IDENTITY((_GLF_IDENTITY(gl_WorkGroupSize, _GLF_IDENTITY(uvec3(0u, 0u, 0u) | (gl_WorkGroupSize), (false ? _GLF_FUZZED(uvec3(107561u, 196296u, 68197u)) : _GLF_IDENTITY(uvec3(0u, 0u, 0u) | (gl_WorkGroupSize), ~ (~ (uvec3(0u, 0u, 0u) | (gl_WorkGroupSize))))))).x), min((_GLF_IDENTITY(gl_WorkGroupSize, _GLF_IDENTITY(uvec3(0u, 0u, 0u) | (gl_WorkGroupSize), (false ? _GLF_FUZZED(uvec3(107561u, 196296u, 68197u)) : _GLF_IDENTITY(uvec3(0u, 0u, 0u) | (gl_WorkGroupSize), ~ (~ (uvec3(0u, 0u, 0u) | (gl_WorkGroupSize))))))).x), _GLF_IDENTITY((_GLF_IDENTITY(gl_WorkGroupSize, _GLF_IDENTITY(uvec3(0u, 0u, 0u) | (gl_WorkGroupSize), (false ? _GLF_FUZZED(uvec3(107561u, 196296u, 68197u)) : _GLF_IDENTITY(uvec3(0u, 0u, 0u) | (gl_WorkGroupSize), ~ (~ (uvec3(0u, 0u, 0u) | (gl_WorkGroupSize))))))).x), max((_GLF_IDENTITY(gl_WorkGroupSize, _GLF_IDENTITY(uvec3(0u, 0u, 0u) | (gl_WorkGroupSize), (false ? _GLF_FUZZED(uvec3(107561u, 196296u, 68197u)) : _GLF_IDENTITY(uvec3(0u, 0u, 0u) | (gl_WorkGroupSize), ~ (~ (uvec3(0u, 0u, 0u) | (gl_WorkGroupSize))))))).x), (_GLF_IDENTITY(gl_WorkGroupSize, _GLF_IDENTITY(uvec3(0u, 0u, 0u) | (gl_WorkGroupSize), (false ? _GLF_FUZZED(uvec3(107561u, 196296u, 68197u)) : _GLF_IDENTITY(uvec3(0u, 0u, 0u) | (gl_WorkGroupSize), ~ (~ (uvec3(0u, 0u, 0u) | (gl_WorkGroupSize))))))).x))))) >> 0u), _GLF_IDENTITY((true ? _GLF_IDENTITY(gl_WorkGroupSize, uvec3(0u, 0u, 0u) | (gl_WorkGroupSize)).x : _GLF_IDENTITY(_GLF_FUZZED(subgroup_local_id), (_GLF_FUZZED(subgroup_local_id)) ^ 0u)), uint(uvec2((true ? _GLF_IDENTITY(gl_WorkGroupSize, uvec3(_GLF_IDENTITY(0u, (0u) | 0u), 0u, 0u) | (gl_WorkGroupSize)).x : _GLF_FUZZED(subgroup_local_id)), 1u))));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false)))))))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, false, false)))))
  return;
 _GLF_struct_0 _GLF_struct_replacement_0 = _GLF_struct_0(gl_WorkGroupID.x, _GLF_IDENTITY(vec4(1.0), (_GLF_IDENTITY(vec4(_GLF_IDENTITY(1.0, _GLF_IDENTITY(float(_GLF_IDENTITY(mat4x2(1.0, 1.0, 0.0, 0.0, 0.0, 1.0, length(0.0), _GLF_ZERO(0.0, injectionSwitch.x)), mat2(1.0) * (mat4x2(1.0, 1.0, 0.0, 0.0, 0.0, 1.0, length(0.0), _GLF_ZERO(0.0, injectionSwitch.x))))), (false ? _GLF_FUZZED(-7.2) : float(_GLF_IDENTITY(mat4x2(1.0, 1.0, 0.0, 0.0, 0.0, 1.0, length(0.0), _GLF_ZERO(0.0, injectionSwitch.x)), mat2(1.0) * (mat4x2(1.0, 1.0, 0.0, 0.0, 0.0, 1.0, length(0.0), _GLF_ZERO(0.0, injectionSwitch.x))))))))), mix(vec4(_GLF_FUZZED((+ 3.6)), _GLF_FUZZED(-99.42), _GLF_FUZZED(-3.5), (vec4(1.0))[_GLF_IDENTITY(3, (3) - (0 & -34754))]), _GLF_IDENTITY(vec4((_GLF_IDENTITY(vec4(1.0), (vec4(1.0)) / vec4(1.0, 1.0, 1.0, 1.0)))[0], (vec4(1.0))[1], (vec4(1.0))[2], _GLF_FUZZED(1.9)), vec4(mat2x4(_GLF_IDENTITY(vec4((_GLF_IDENTITY(vec4(1.0), _GLF_IDENTITY(_GLF_IDENTITY((vec4(1.0)) / vec4(1.0, 1.0, 1.0, 1.0), ((vec4(1.0)) / vec4(1.0, 1.0, 1.0, 1.0)) + vec4(0.0, 0.0, 0.0, 0.0)), clamp(_GLF_IDENTITY((vec4(1.0)) / vec4(1.0, 1.0, 1.0, 1.0), ((vec4(1.0)) / vec4(1.0, 1.0, 1.0, 1.0)) + vec4(0.0, 0.0, 0.0, 0.0)), _GLF_IDENTITY(_GLF_IDENTITY((vec4(1.0)) / vec4(1.0, 1.0, 1.0, 1.0), ((vec4(1.0)) / vec4(1.0, 1.0, 1.0, 1.0)) + vec4(0.0, 0.0, 0.0, 0.0)), (_GLF_IDENTITY((vec4(1.0)) / vec4(1.0, 1.0, 1.0, 1.0), ((vec4(1.0)) / vec4(1.0, 1.0, 1.0, 1.0)) + vec4(0.0, 0.0, 0.0, 0.0))) * vec4(1.0, 1.0, 1.0, 1.0)), _GLF_IDENTITY((vec4(1.0)) / vec4(1.0, 1.0, 1.0, 1.0), ((vec4(1.0)) / vec4(1.0, 1.0, 1.0, 1.0)) + vec4(0.0, 0.0, 0.0, 0.0))))))[0], _GLF_IDENTITY((vec4(1.0))[_GLF_IDENTITY(1, (1) | (1))], clamp((vec4(1.0))[_GLF_IDENTITY(1, (1) | (1))], (vec4(1.0))[_GLF_IDENTITY(1, (1) | (1))], _GLF_IDENTITY((vec4(1.0))[_GLF_IDENTITY(1, (1) | (1))], (true ? (vec4(1.0))[_GLF_IDENTITY(1, (1) | (1))] : _GLF_FUZZED(1112.8581))))), (vec4(1.0))[2], _GLF_FUZZED(1.9)), mix(vec4((vec4((_GLF_IDENTITY(vec4(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-3475.6251)), float(1.0), bool(true)))), (vec4(1.0)) / vec4(1.0, 1.0, 1.0, 1.0)))[0], _GLF_IDENTITY((vec4(1.0)), (true ? (vec4(1.0)) : _GLF_FUZZED(vec4(4.2, 675.200, 5.7, 13.66))))[1], (vec4(1.0))[2], _GLF_FUZZED(1.9)))[0], _GLF_FUZZED(-2020.5219), _GLF_IDENTITY(_GLF_IDENTITY((vec4((_GLF_IDENTITY(vec4(1.0), (vec4(1.0)) / vec4(1.0, 1.0, 1.0, 1.0)))[0], (vec4(_GLF_IDENTITY(1.0, float(_GLF_IDENTITY(vec3(1.0, 1.0, log(1.0)), clamp(_GLF_IDENTITY(vec3(1.0, 1.0, log(1.0)), clamp(vec3(1.0, 1.0, log(1.0)), vec3(1.0, 1.0, log(1.0)), vec3(1.0, 1.0, log(1.0)))), vec3(1.0, 1.0, log(1.0)), vec3(1.0, 1.0, log(1.0))))))))[_GLF_IDENTITY(1, (1) | int(_GLF_ZERO(0.0, injectionSwitch.x)))], (vec4(1.0))[2], _GLF_FUZZED(1.9)))[2], min((vec4((_GLF_IDENTITY(vec4(1.0), (vec4(1.0)) / vec4(1.0, 1.0, 1.0, 1.0)))[0], (vec4(_GLF_IDENTITY(1.0, float(_GLF_IDENTITY(vec3(1.0, 1.0, log(1.0)), clamp(_GLF_IDENTITY(vec3(1.0, 1.0, log(1.0)), clamp(vec3(1.0, 1.0, log(1.0)), vec3(1.0, 1.0, log(1.0)), vec3(1.0, 1.0, log(1.0)))), vec3(1.0, 1.0, log(1.0)), vec3(1.0, 1.0, log(1.0))))))))[_GLF_IDENTITY(1, (1) | int(_GLF_ZERO(0.0, injectionSwitch.x)))], (vec4(1.0))[2], _GLF_FUZZED(1.9)))[2], (vec4((_GLF_IDENTITY(vec4(1.0), (vec4(1.0)) / vec4(1.0, 1.0, 1.0, 1.0)))[0], (vec4(_GLF_IDENTITY(1.0, float(_GLF_IDENTITY(vec3(1.0, 1.0, log(1.0)), clamp(_GLF_IDENTITY(vec3(1.0, 1.0, log(1.0)), clamp(vec3(1.0, 1.0, log(1.0)), vec3(1.0, 1.0, log(1.0)), vec3(1.0, 1.0, log(1.0)))), vec3(1.0, 1.0, log(1.0)), vec3(1.0, 1.0, log(1.0))))))))[_GLF_IDENTITY(1, (1) | int(_GLF_ZERO(0.0, injectionSwitch.x)))], (vec4(1.0))[2], _GLF_FUZZED(1.9)))[2])), clamp(_GLF_IDENTITY(_GLF_IDENTITY((vec4((_GLF_IDENTITY(vec4(1.0), (vec4(1.0)) / vec4(1.0, 1.0, 1.0, 1.0)))[0], (vec4(_GLF_IDENTITY(1.0, float(_GLF_IDENTITY(vec3(1.0, 1.0, log(1.0)), clamp(_GLF_IDENTITY(vec3(1.0, 1.0, log(1.0)), clamp(vec3(1.0, 1.0, log(1.0)), vec3(1.0, 1.0, log(1.0)), vec3(1.0, 1.0, log(1.0)))), vec3(1.0, 1.0, log(1.0)), vec3(1.0, 1.0, log(1.0))))))))[_GLF_IDENTITY(1, (1) | int(_GLF_ZERO(0.0, injectionSwitch.x)))], (vec4(1.0))[2], _GLF_FUZZED(1.9)))[2], min((vec4((_GLF_IDENTITY(vec4(1.0), (vec4(1.0)) / vec4(1.0, 1.0, 1.0, 1.0)))[0], (vec4(_GLF_IDENTITY(1.0, float(_GLF_IDENTITY(vec3(1.0, 1.0, log(1.0)), clamp(_GLF_IDENTITY(vec3(1.0, 1.0, log(1.0)), clamp(vec3(1.0, 1.0, log(1.0)), vec3(1.0, 1.0, log(1.0)), vec3(1.0, 1.0, log(1.0)))), vec3(1.0, 1.0, log(1.0)), vec3(1.0, 1.0, log(1.0))))))))[_GLF_IDENTITY(1, (1) | int(_GLF_ZERO(0.0, injectionSwitch.x)))], (vec4(1.0))[2], _GLF_FUZZED(1.9)))[2], (vec4((_GLF_IDENTITY(vec4(1.0), (vec4(1.0)) / vec4(1.0, 1.0, 1.0, 1.0)))[0], (vec4(_GLF_IDENTITY(1.0, float(_GLF_IDENTITY(vec3(1.0, 1.0, log(1.0)), clamp(_GLF_IDENTITY(vec3(1.0, 1.0, log(1.0)), clamp(vec3(1.0, 1.0, log(1.0)), vec3(1.0, 1.0, log(1.0)), vec3(1.0, 1.0, log(1.0)))), vec3(1.0, 1.0, log(1.0)), vec3(1.0, 1.0, log(1.0))))))))[_GLF_IDENTITY(1, (1) | int(_GLF_ZERO(0.0, injectionSwitch.x)))], (vec4(1.0))[2], _GLF_FUZZED(1.9)))[2])), mix(float(_GLF_IDENTITY((vec4((_GLF_IDENTITY(vec4(1.0), (vec4(1.0)) / vec4(1.0, 1.0, 1.0, 1.0)))[0], (vec4(_GLF_IDENTITY(1.0, float(_GLF_IDENTITY(vec3(1.0, 1.0, log(1.0)), clamp(_GLF_IDENTITY(vec3(1.0, 1.0, log(1.0)), clamp(vec3(1.0, 1.0, log(1.0)), vec3(1.0, 1.0, log(1.0)), vec3(1.0, 1.0, log(1.0)))), vec3(1.0, 1.0, log(1.0)), vec3(1.0, 1.0, log(1.0))))))))[_GLF_IDENTITY(1, (1) | int(_GLF_ZERO(0.0, injectionSwitch.x)))], (vec4(1.0))[2], _GLF_FUZZED(1.9)))[2], min((vec4((_GLF_IDENTITY(vec4(1.0), (vec4(1.0)) / vec4(1.0, 1.0, 1.0, 1.0)))[0], (vec4(_GLF_IDENTITY(1.0, float(_GLF_IDENTITY(vec3(1.0, 1.0, log(1.0)), clamp(_GLF_IDENTITY(vec3(1.0, 1.0, log(1.0)), clamp(vec3(1.0, 1.0, log(1.0)), vec3(1.0, 1.0, log(1.0)), vec3(1.0, 1.0, log(1.0)))), vec3(1.0, 1.0, log(1.0)), vec3(1.0, 1.0, log(1.0))))))))[_GLF_IDENTITY(1, (1) | int(_GLF_ZERO(0.0, injectionSwitch.x)))], (vec4(1.0))[2], _GLF_FUZZED(1.9)))[2], (vec4((_GLF_IDENTITY(vec4(1.0), (vec4(1.0)) / vec4(1.0, 1.0, 1.0, 1.0)))[0], (vec4(_GLF_IDENTITY(1.0, float(_GLF_IDENTITY(vec3(1.0, 1.0, log(1.0)), clamp(_GLF_IDENTITY(vec3(1.0, 1.0, log(1.0)), clamp(vec3(1.0, 1.0, log(1.0)), vec3(1.0, 1.0, log(1.0)), vec3(1.0, 1.0, log(1.0)))), vec3(1.0, 1.0, log(1.0)), vec3(1.0, 1.0, log(1.0))))))))[_GLF_IDENTITY(1, (1) | int(_GLF_ZERO(0.0, injectionSwitch.x)))], (vec4(1.0))[2], _GLF_FUZZED(1.9)))[2]))), float(_GLF_FUZZED(-9.7)), bool(false))), _GLF_IDENTITY((vec4((_GLF_IDENTITY(vec4(1.0), (vec4(1.0)) / vec4(1.0, 1.0, 1.0, 1.0)))[0], (vec4(_GLF_IDENTITY(1.0, float(_GLF_IDENTITY(vec3(1.0, 1.0, log(1.0)), clamp(_GLF_IDENTITY(vec3(1.0, 1.0, log(1.0)), clamp(vec3(1.0, 1.0, log(1.0)), vec3(1.0, 1.0, log(1.0)), vec3(1.0, 1.0, log(1.0)))), vec3(1.0, 1.0, log(1.0)), vec3(1.0, 1.0, log(1.0))))))))[_GLF_IDENTITY(1, (1) | int(_GLF_ZERO(0.0, injectionSwitch.x)))], (vec4(1.0))[2], _GLF_FUZZED(1.9)))[2], min((vec4((_GLF_IDENTITY(vec4(1.0), (vec4(1.0)) / vec4(1.0, 1.0, 1.0, 1.0)))[0], (vec4(_GLF_IDENTITY(1.0, float(_GLF_IDENTITY(vec3(1.0, 1.0, log(1.0)), clamp(_GLF_IDENTITY(vec3(1.0, 1.0, log(1.0)), clamp(vec3(1.0, 1.0, log(1.0)), vec3(1.0, 1.0, log(1.0)), vec3(1.0, 1.0, log(1.0)))), vec3(1.0, 1.0, log(1.0)), vec3(1.0, 1.0, log(1.0))))))))[_GLF_IDENTITY(1, (1) | int(_GLF_ZERO(0.0, injectionSwitch.x)))], (vec4(1.0))[2], _GLF_FUZZED(1.9)))[2], (vec4((_GLF_IDENTITY(vec4(1.0), (vec4(1.0)) / vec4(1.0, 1.0, 1.0, 1.0)))[0], (vec4(_GLF_IDENTITY(1.0, float(_GLF_IDENTITY(vec3(1.0, 1.0, log(1.0)), clamp(_GLF_IDENTITY(vec3(1.0, 1.0, log(1.0)), clamp(vec3(1.0, 1.0, log(1.0)), vec3(1.0, 1.0, log(1.0)), vec3(1.0, 1.0, log(1.0)))), vec3(1.0, 1.0, log(1.0)), vec3(1.0, 1.0, log(1.0))))))))[_GLF_IDENTITY(1, (1) | int(_GLF_ZERO(0.0, injectionSwitch.x)))], (vec4(1.0))[2], _GLF_FUZZED(1.9)))[2])), _GLF_IDENTITY((vec4((_GLF_IDENTITY(vec4(1.0), (vec4(1.0)) / vec4(1.0, 1.0, 1.0, 1.0)))[0], (vec4(_GLF_IDENTITY(1.0, float(_GLF_IDENTITY(vec3(1.0, 1.0, log(1.0)), clamp(_GLF_IDENTITY(vec3(1.0, 1.0, log(1.0)), clamp(vec3(1.0, 1.0, log(1.0)), vec3(1.0, 1.0, log(1.0)), vec3(1.0, 1.0, log(1.0)))), vec3(1.0, 1.0, log(1.0)), vec3(1.0, 1.0, log(1.0))))))))[_GLF_IDENTITY(1, (1) | int(_GLF_ZERO(0.0, injectionSwitch.x)))], (vec4(1.0))[2], _GLF_FUZZED(1.9)))[2], min((vec4((_GLF_IDENTITY(vec4(1.0), (vec4(1.0)) / vec4(1.0, 1.0, 1.0, 1.0)))[0], (vec4(_GLF_IDENTITY(1.0, float(_GLF_IDENTITY(vec3(1.0, 1.0, log(1.0)), clamp(_GLF_IDENTITY(vec3(1.0, 1.0, log(1.0)), clamp(vec3(1.0, 1.0, log(1.0)), vec3(1.0, 1.0, log(1.0)), vec3(1.0, 1.0, log(1.0)))), vec3(1.0, 1.0, log(1.0)), vec3(1.0, 1.0, log(1.0))))))))[_GLF_IDENTITY(1, (1) | int(_GLF_ZERO(0.0, injectionSwitch.x)))], (vec4(1.0))[2], _GLF_FUZZED(1.9)))[2], (vec4((_GLF_IDENTITY(vec4(1.0), (vec4(1.0)) / vec4(1.0, 1.0, 1.0, 1.0)))[0], (vec4(_GLF_IDENTITY(1.0, float(_GLF_IDENTITY(vec3(1.0, 1.0, log(1.0)), clamp(_GLF_IDENTITY(vec3(1.0, 1.0, log(1.0)), clamp(vec3(1.0, 1.0, log(1.0)), vec3(1.0, 1.0, log(1.0)), vec3(1.0, 1.0, log(1.0)))), vec3(1.0, 1.0, log(1.0)), vec3(1.0, 1.0, log(1.0))))))))[_GLF_IDENTITY(1, (1) | int(_GLF_ZERO(0.0, injectionSwitch.x)))], (vec4(1.0))[2], _GLF_FUZZED(1.9)))[2])))), (vec4((_GLF_IDENTITY(vec4(1.0), _GLF_IDENTITY((_GLF_IDENTITY(vec4(1.0), (_GLF_IDENTITY(vec4(1.0), (vec4(1.0)) - vec4(0.0, 0.0, 0.0, 0.0))) + sin(abs(vec4(0.0, 0.0, 0.0, 0.0))))) / vec4(1.0, 1.0, _GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, (1.0) - 0.0), 1.0)), 1.0), (true ? (vec4(1.0)) / vec4(1.0, 1.0, 1.0, 1.0) : _GLF_FUZZED(vec4(-561.693, 9.7, 1.6, 25.57))))))[0], (vec4(1.0))[1], (vec4(1.0))[2], _GLF_FUZZED(1.9)))[3]), vec4(_GLF_FUZZED(-8847.0368), (vec4(_GLF_IDENTITY((_GLF_IDENTITY(vec4(1.0), (vec4(1.0)) / vec4(1.0, 1.0, _GLF_IDENTITY(1.0, (1.0) + 0.0), 1.0)))[0], min(_GLF_IDENTITY((_GLF_IDENTITY(vec4(1.0), (vec4(1.0)) / vec4(1.0, 1.0, _GLF_IDENTITY(1.0, (1.0) + 0.0), 1.0)))[0], max((_GLF_IDENTITY(vec4(1.0), (vec4(1.0)) / vec4(1.0, 1.0, _GLF_IDENTITY(1.0, (1.0) + 0.0), 1.0)))[0], (_GLF_IDENTITY(vec4(1.0), (vec4(1.0)) / vec4(1.0, 1.0, _GLF_IDENTITY(1.0, (1.0) + 0.0), 1.0)))[_GLF_IDENTITY(0, int(ivec4(0, 1, 0, 1)))])), _GLF_IDENTITY((_GLF_IDENTITY(vec4(1.0), (vec4(1.0)) / vec4(1.0, 1.0, _GLF_IDENTITY(1.0, (1.0) + 0.0), 1.0)))[0], min((_GLF_IDENTITY(vec4(1.0), (vec4(1.0)) / vec4(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(uintBitsToFloat(uvec4(107038u, 103349u, 85048u, 78298u))[1]))), 1.0, _GLF_IDENTITY(1.0, (1.0) + 0.0), 1.0)))[0], (_GLF_IDENTITY(vec4(1.0), (vec4(1.0)) / vec4(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, 1.0 * (1.0))) - 0.0), 1.0, _GLF_IDENTITY(1.0, (1.0) + 0.0), 1.0)))[0])))), (vec4(1.0))[1], _GLF_IDENTITY((vec4(1.0)), max((vec4(_GLF_IDENTITY(1.0, _GLF_IDENTITY(float(vec3(1.0, 0.0, 0.0)), clamp(float(vec3(1.0, 0.0, 0.0)), float(vec3(1.0, 0.0, 0.0)), float(vec3(1.0, 0.0, 0.0))))))), (vec4(1.0))))[2], _GLF_FUZZED(1.9)))[_GLF_IDENTITY(1, (1) << 0)], _GLF_FUZZED(1.3), _GLF_FUZZED(387.430)), bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false, false))), 0.0, 0.0, sqrt(1.0), 0.0))), bvec4(true, true, true, false)))) - vec4(0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, float(mat4x2(0.0, 0.0, 0.0, 0.0, 1.0, sin(0.0), 1.0, 0.0))), 0.0)))));
 if(_GLF_DEAD(false))
  barrier();
 uint workgroup_base = workgroup_size * _GLF_struct_replacement_0.workgroup_id;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, false)))))
    barrier();
   return;
  }
 uint subgroup_base = _GLF_IDENTITY(_GLF_struct_replacement_7._f1._f0.subgroup_id, (_GLF_IDENTITY(_GLF_struct_replacement_7._f1._f0.subgroup_id, uint(uvec4(_GLF_struct_replacement_7._f1._f0.subgroup_id, 0u, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u)))) - _GLF_IDENTITY(0u, (_GLF_IDENTITY(_GLF_IDENTITY(0u, (0u) >> (0u >> _GLF_IDENTITY(uint(6u), uint(6u)))), 0u + (_GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, (0u) ^ 0u)) >> (_GLF_IDENTITY(0u, (0u) | (0u & 9352u)) >> _GLF_IDENTITY(uint(6u), uint(6u))))))) + 0u)) * _GLF_IDENTITY(_GLF_IDENTITY(_GLF_struct_replacement_11._f0._f1.subgroup_size, (false ? _GLF_FUZZED(workgroup_size) : _GLF_struct_replacement_11._f0._f1.subgroup_size)), 1u * (_GLF_IDENTITY(_GLF_struct_replacement_11._f0._f1.subgroup_size, (false ? _GLF_FUZZED(workgroup_size) : _GLF_struct_replacement_11._f0._f1.subgroup_size))));
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
      }
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   return;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec4(_GLF_DEAD(false), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)), true && (bool(bvec4(_GLF_DEAD(false), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))))))
  {
   do
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, true, true)))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(8713.7933)), bool(false))))) > injectionSwitch.y))))
      return;
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec2(bvec3(bvec2(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true))))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y)), true && _GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bool(bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), bool(bvec3(bool(bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))));
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint virtual_gid = workgroup_base + subgroup_base + subgroup_local_id;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(mat3(injectionSwitch.y, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, cos(0.0), 1.0)))))))))
      return;
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     barrier();
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y))))))
  return;
 uint next_virtual_gid = _GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_base, uint(_GLF_IDENTITY(uvec4(subgroup_base, 0u, 0u, 1u), clamp(uvec4(subgroup_base, 0u, 0u, 1u), uvec4(subgroup_base, 0u, 0u, 1u), uvec4(subgroup_base, 0u, 0u, 1u))))), uint(uvec3(workgroup_base + _GLF_IDENTITY(subgroup_base, uint(uvec4(subgroup_base, 0u, 0u, 1u))), 1u, 0u))) + ((subgroup_local_id + 1) % _GLF_struct_replacement_11._f0._f1.subgroup_size);
 atomicStore(buf[next_virtual_gid], uint(1), 4, 64, 4);
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)), false || (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)), (_GLF_DEAD(_GLF_IDENTITY(false, (false) && true))) && true))))
    barrier();
   return;
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
  {
   if(_GLF_DEAD(false))
    barrier();
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
        barrier();
       continue;
      }
     return;
    }
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
  return;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint read = atomicLoad(buf[_GLF_IDENTITY(virtual_gid, _GLF_IDENTITY(min(virtual_gid, virtual_gid), min(min(virtual_gid, virtual_gid), min(virtual_gid, virtual_gid))))], _GLF_IDENTITY(4, max(4, 4)), 64, 2);
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (false)))))
  {
  }
 else
  {
   subgroupBarrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || _GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bvec3(false, false, true)))))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
        {
         for(int _injected_loop_counter = (0 ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(1, (1) | (1))); _injected_loop_counter ++)
          {
           barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(false))
        return;
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
        {
         if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_IF_FALSE(false)), (! (_GLF_WRAPPED_IF_FALSE(false))) || false))))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 return;
                }
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(false))
                {
                 if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))
                  barrier();
                 if(_GLF_DEAD(false))
                  barrier();
                 barrier();
                }
               barrier();
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             do
              {
               if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(4.1, uintBitsToFloat(virtual_gid))))).y)))) && true))
                barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
             barrier();
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, bool(bvec3(false, true, true)))))))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                return;
               return;
              }
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(false))
                barrier();
               return;
              }
            }
           if(_GLF_DEAD(false))
            return;
           if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false)))))), ! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(false, false || (false)) || (false)))), false || (_GLF_IDENTITY(! (_GLF_DEAD(false)), (! (_GLF_DEAD(false))) || false))))))
            barrier();
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))
                return;
              }
             else
              {
              }
             return;
            }
          }
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, true && _GLF_IDENTITY((false), ((false)) || false))))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))))
        barrier();
       if(_GLF_DEAD(false))
        return;
      }
     else
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
        barrier();
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 ^ 1)); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
          return;
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, true && _GLF_IDENTITY((_GLF_IDENTITY(false, true && (false))), ! (_GLF_IDENTITY(! ((_GLF_IDENTITY(false, true && (false)))), bool(bool(! ((_GLF_IDENTITY(false, true && (false))))))))))), true && (_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, true && (false))))))))
        barrier();
       do
        {
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, 0 | (_injected_loop_counter)) < 1); _injected_loop_counter ++)
            {
             if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(456.106, -7002.5336)) : injectionSwitch)).x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true))))), (_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(456.106, -7002.5336)) : _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])))).x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)))))) && true))
              {
               if(_GLF_DEAD(false))
                continue;
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
            }
           return;
           if(_GLF_DEAD(false))
            barrier();
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, true, true, true)), (bool(bvec4(false, true, true, true))) || false)), true, false, false)))));
       if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))), false))))
        {
         if(_GLF_DEAD(false))
          barrier();
         return;
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       do
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             return;
            }
           else
            {
             if(_GLF_DEAD(false))
              barrier();
            }
          }
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_IDENTITY(false, true && _GLF_IDENTITY((false), false || ((false))))))
          barrier();
         barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(_GLF_ONE(1.0, injectionSwitch.y))).x > injectionSwitch.y)))))), ! (! (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))));
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true))
        {
         if(_GLF_DEAD(false))
          barrier();
         return;
        }
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(mix(float(injectionSwitch.x), float(_GLF_FUZZED(1.1)), bool(false)), (mix(float(injectionSwitch.x), float(_GLF_FUZZED(1.1)), bool(false))) * _GLF_ONE(1.0, injectionSwitch.y))) > injectionSwitch.y))))
      barrier();
     for(int _injected_loop_counter = 0; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))), (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y)), ! (_GLF_IDENTITY(! (_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))), bool(_GLF_IDENTITY(bool(! (_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y)))), bool(bvec2(bool(! (_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y)))), false))))))))) && true); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
        {
         if(_GLF_DEAD(false))
          barrier();
         continue;
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(mat3(injectionSwitch.y, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, abs(0.0), _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(_GLF_ONE(1.0, injectionSwitch.y), 0.0)), dot(vec2(0.0, 1.0), vec2(_GLF_ONE(1.0, injectionSwitch.y), 0.0))))), max(float(mat3(injectionSwitch.y, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, abs(0.0), _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(_GLF_ONE(1.0, injectionSwitch.y), 0.0)), dot(vec2(0.0, 1.0), vec2(_GLF_ONE(1.0, injectionSwitch.y), 0.0))))), float(mat3(injectionSwitch.y, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, abs(0.0), _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(_GLF_ONE(1.0, injectionSwitch.y), 0.0)), dot(vec2(0.0, 1.0), vec2(_GLF_ONE(1.0, injectionSwitch.y), 0.0))))))))))))
          continue;
         barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       return;
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(injectionSwitch.x > injectionSwitch.y, false))), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(injectionSwitch.x > injectionSwitch.y, false))), false || (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(injectionSwitch.x > injectionSwitch.y, false))))), true, true, false)), true && (bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(injectionSwitch.x > injectionSwitch.y, false))), false || (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(injectionSwitch.x > injectionSwitch.y, false))))), true, true, false)))))))), ! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).y, bool(bvec2(injectionSwitch.x > injectionSwitch.y, false))))))), false || (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(injectionSwitch.x > injectionSwitch.y, false))))))), false || (! (_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(_GLF_IDENTITY(bvec2(injectionSwitch.x > injectionSwitch.y, false), bvec2(bvec2(bvec2(_GLF_IDENTITY(injectionSwitch, log(vec2(1.0, 1.0)) + (injectionSwitch)).x > injectionSwitch.y, false))))))), (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(_GLF_IDENTITY(bvec2(injectionSwitch.x > injectionSwitch.y, false), bvec2(bvec2(bvec2(_GLF_IDENTITY(injectionSwitch, log(vec2(1.0, 1.0)) + (injectionSwitch)).x > injectionSwitch.y, false))))))), true && ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(_GLF_IDENTITY(bvec2(injectionSwitch.x > injectionSwitch.y, false), bvec2(bvec2(bvec2(_GLF_IDENTITY(injectionSwitch, log(vec2(1.0, 1.0)) + (injectionSwitch)).x > injectionSwitch.y, false)))))))))) || false)))))))))))
        {
         if(_GLF_DEAD(false))
          barrier();
         return;
        }
       if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! _GLF_IDENTITY((_GLF_DEAD(false)), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY((_GLF_DEAD(false)), (_GLF_IDENTITY((_GLF_DEAD(false)), ! (! ((_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false)))), bool(bool(! (_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false)))))))))))))) || false), _GLF_IDENTITY(true, ! (! (true))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), _GLF_IDENTITY(bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)), (bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), _GLF_IDENTITY(bvec3(bvec3(bvec3(_GLF_IDENTITY((_GLF_DEAD(false)), (_GLF_IDENTITY((_GLF_DEAD(false)), ! (! ((_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false)))), bool(bool(! (_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false)))))))))))))) || false), _GLF_IDENTITY(true, ! (! (true))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), _GLF_IDENTITY(bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)), (bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))), bvec3(bvec3(bvec3(bvec3(bvec3(_GLF_IDENTITY((_GLF_DEAD(false)), (_GLF_IDENTITY((_GLF_DEAD(false)), ! (! ((_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false)))), bool(bool(! (_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false)))))))))))))) || false), _GLF_IDENTITY(true, ! (! (true))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), _GLF_IDENTITY(bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)), (bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))))))))))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) || _GLF_FALSE(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) || false)))), (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)))) > injectionSwitch.y)))))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             barrier();
            }
           barrier();
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
              return;
             break;
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED((-3.2 - -5.3))), float(injectionSwitch.x), bool(true))) > injectionSwitch.y))))
              barrier();
             barrier();
            }
          }
         else
          {
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           continue;
          }
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
          barrier();
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))))
          barrier();
         break;
        }
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, true)), (_GLF_IDENTITY(bool(bvec2(false, true)), (bool(bvec2(false, true))) && true)) && true)), (injectionSwitch.x > injectionSwitch.y))))))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         break;
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, true && (false)), false, true), bvec3(bvec3(bvec3(_GLF_IDENTITY(false, true && (false)), false, true))))))))
            barrier();
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             barrier();
            }
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(false))
          break;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         break;
        }
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(! (! (false)), false || (! (! (false))))))))), (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(false || (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), ! (! (false)))), ! (_GLF_IDENTITY(! (false || (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), ! (! (false))))), bool(bvec3(! (false || (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), ! (! (false))))), false, true)))))), (injectionSwitch.x > injectionSwitch.y))))))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           return;
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(atan(injectionSwitch, vec2(-8019.9765, -375.774))) : _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])))).x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               barrier();
              }
             continue;
            }
           barrier();
          }
         continue;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
      }
     if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(false || (_GLF_DEAD(false)), bool(_GLF_IDENTITY(bvec3(false || (_GLF_DEAD(false)), false, true), bvec3(bvec4(bvec3(false || (_GLF_DEAD(false)), false, true), true))))))))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])))).x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
        }
       else
        {
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
        barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - tan(0.0)) > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
  }
 else
  {
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       do
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
          barrier();
         return;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
      barrier();
     do
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
           return;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, true, false, false)), bool(bool(bool(bvec4(false, true, false, false))))))))
            return;
          }
         if(_GLF_DEAD(false))
          return;
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   else
    {
    }
   atomicStore(checker[virtual_gid], _GLF_IDENTITY(read, (_GLF_IDENTITY(read, min(read, read))) - uint(_GLF_ZERO(0.0, injectionSwitch.x))), 4, _GLF_IDENTITY(_GLF_IDENTITY(64, int(_GLF_IDENTITY(ivec2(64, 1), (false ? _GLF_FUZZED(ivec2(31078, -5525)) : ivec2(64, 1))))), (_GLF_IDENTITY(64, int(_GLF_IDENTITY(ivec2(64, 1), (false ? _GLF_FUZZED(ivec2(31078, -5525)) : ivec2(64, 1)))))) >> (0 | 0)), 4);
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(9126.0265))), injectionSwitch.x)), injectionSwitch.x)) > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true)) && true))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, (false) && true), true, false)))), ! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, (false) && true), true, false))))), bool(bvec3(_GLF_IDENTITY(! (_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, (false) && true), true, false))))), bool(bvec2(! (_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, _GLF_IDENTITY((false) && true, true && ((false) && true))), true, false))))), true))), true, false))))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    return;
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, false || (false)))))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y))))), true)))))))
      {
      }
     else
      {
       return;
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)), false || ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)))))))
    barrier();
   return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))).x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, ! (! (false))), true, true), bvec3(bvec4(bvec3(false, true, true), true)))))))
  return;
 if(_GLF_DEAD(false))
  return;
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END
BUFFER checker DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected_checker DATA_TYPE uint32 SIZE 8388096 FILL 1

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 
  BIND BUFFER checker AS storage DESCRIPTOR_SET 0 BINDING 2 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT checker EQ_BUFFER expected_checker
