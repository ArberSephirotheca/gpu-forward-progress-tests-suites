#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y))))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))), (_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false)))) && true))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec4(! (false), _GLF_IDENTITY(true, (_GLF_IDENTITY(true, (true) && true)) && true), _GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, true && (false)), false, true, false))), false)))))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), false || (bool(bool(false))))), true && (false))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), false || (false))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(false, bool(bool(false))), true, false)), true && (_GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(false, bool(bool(false))), _GLF_IDENTITY(true, true && (true)), false)), false || (bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), ! _GLF_IDENTITY((! (bool(bool(false)))), ! (! ((! (bool(bool(false))))))))), _GLF_IDENTITY(false, true && (false)) || (_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), ! _GLF_IDENTITY((! (bool(bool(false)))), ! (! ((! (bool(bool(false))))))))), ! (! (_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(bool(bool(false)), false || (bool(bool(false)))), ! (! (bool(bool(false))))))))))), true, false))))))), _GLF_IDENTITY(_GLF_IDENTITY(bool(bool(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(false, bool(bool(false))), true, false)), true && (_GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bool(false))), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bool(false))), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(false, bool(bool(false))), false)), ! (! (bool(bvec2(_GLF_IDENTITY(false, bool(bool(false))), false)))))), true)), false || (bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bool(false))), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(false, bool(bool(false))), false)), ! (! (bool(bvec2(_GLF_IDENTITY(false, bool(bool(false))), false)))))), true))))), true, false)), false || (bool(bvec3(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), ! (! (bool(bool(false)))))), true, false))))))))), ! (! (bool(bool(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(false, bool(bool(false))), true, false)), true && (_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, bool(bool(false))), true, false), bvec3(bvec4(bvec3(_GLF_IDENTITY(false, bool(bool(false))), true, false), true)))), false || (bool(bvec3(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), ! (! (bool(bool(false)))))), true, false)))))))))))), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(bool(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(false, bool(bool(false))), true, false)), true && (_GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(false, bool(bool(false))), true, false)), false || (bool(bvec3(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), ! (! (bool(bool(false)))))), true, false))))))))), ! (! (bool(bool(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(false, bool(bool(false))), true, false)), true && (_GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(false, bool(bool(false))), true, false)), false || (bool(bvec3(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), ! (! (bool(bool(false)))))), true, false)))))))))))), ! (! (_GLF_IDENTITY(bool(bool(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(false, bool(bool(false))), true, false)), true && (_GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(false, bool(bool(false))), true, false)), false || (bool(bvec3(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), ! (! (_GLF_IDENTITY(bool(bool(false)), bool(_GLF_IDENTITY(bool(bool(bool(false))), (bool(bool(bool(false)))) && true))))))), true, false))))))))), ! (! _GLF_IDENTITY((bool(bool(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(false, bool(bool(false))), true, false)), _GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, true && (true))))) && (_GLF_IDENTITY(_GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(false, bool(bool(false))), true, false)), bool(_GLF_IDENTITY(bool(bool(bvec3(_GLF_IDENTITY(false, bool(bool(false))), true, false))), ! (! (bool(bool(bvec3(_GLF_IDENTITY(false, bool(bool(false))), true, false)))))))), false || (bool(bvec3(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), ! (! (bool(bool(false)))))), true, false)))))))))), bool(bool(_GLF_IDENTITY((bool(bool(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(false, bool(bool(false))), true, false)), _GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, true && (true))))) && (_GLF_IDENTITY(_GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(false, bool(bool(false))), true, false)), bool(_GLF_IDENTITY(bool(bool(bvec3(_GLF_IDENTITY(false, bool(bool(false))), true, false))), ! (! (bool(bool(bvec3(_GLF_IDENTITY(false, bool(bool(false))), true, false)))))))), false || (bool(bvec3(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), ! (! (bool(bool(false)))))), true, false)))))))))), (_GLF_IDENTITY((bool(bool(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(false, bool(bool(false))), true, false)), _GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, true && (true))))) && (_GLF_IDENTITY(_GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(false, bool(bool(false))), true, false)), bool(_GLF_IDENTITY(bool(bool(bvec3(_GLF_IDENTITY(false, bool(bool(false))), true, false))), ! (! (bool(bool(bvec3(_GLF_IDENTITY(false, bool(bool(false))), true, false)))))))), false || (bool(bvec3(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), ! (! (bool(bool(false)))))), true, false)))))))))), ((bool(bool(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(false, bool(bool(false))), true, false)), _GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, true && (true))))) && (_GLF_IDENTITY(_GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(false, bool(bool(false))), true, false)), bool(_GLF_IDENTITY(bool(bool(bvec3(_GLF_IDENTITY(false, bool(bool(false))), true, false))), ! (! (bool(bool(bvec3(_GLF_IDENTITY(false, bool(bool(false))), true, false)))))))), false || (bool(bvec3(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), ! (! (bool(bool(false)))))), true, false))))))))))) && true)) || false)))))))))), ! (! (bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(bool(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(false, bool(bool(false))), true, false)), true && (_GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(false, bool(bool(false))), true, false)), false || (bool(bvec3(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), ! (! (bool(bool(false)))))), true, false))))))))), ! (! (bool(bool(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(false, bool(bool(false))), true, false)), ! (! (bool(bvec3(_GLF_IDENTITY(false, bool(bool(false))), true, false))))), true && (_GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(false, bool(bool(false))), true, false)), false || (bool(bvec3(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), ! (! (bool(bool(false)))))), true, false)))))))))))), ! (! (_GLF_IDENTITY(bool(bool(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(false, bool(bool(false))), true, false)), true && (_GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(false, bool(bool(false))), true, false)), false || (bool(bvec3(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), ! (! (bool(bool(false)))))), true, false))))))))), ! (! (bool(bool(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(false, bool(bool(false))), true, false)), true && (_GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(false, bool(bool(false))), true, false)), false || (bool(bvec3(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), ! _GLF_IDENTITY((! (bool(bool(false)))), false || ((! (bool(bool(false)))))))), true, false))))))))))))))))))))))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec3((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, _GLF_IDENTITY(false || (false), true && (_GLF_IDENTITY(false || (false), bool(bvec3(_GLF_IDENTITY(false || (false), true && (_GLF_IDENTITY(false || (false), true && (false || (false))))), false, true))))))) && true))), false))))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bool((injectionSwitch.x > injectionSwitch.y)))))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))))
  barrier();
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), false || (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(vec2(9436.0382, 5.1)) : injectionSwitch)).y, injectionSwitch.y))))))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint num_workgroup = _GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) << uvec3(0u, 0u, 0u)).x;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(-1.2))), injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0))), injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec2(! (false), false)))))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y))))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), ! (! (bool(bool(false))))))) || false)))
        barrier();
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
  }
 uint workgroup_base = workgroup_size * _GLF_IDENTITY(workgroup_id, _GLF_IDENTITY((workgroup_id) * 1u, ((_GLF_IDENTITY(workgroup_id, (_GLF_IDENTITY(workgroup_id, (workgroup_id) / 1u)) >> 0u)) * 1u) / ((1u << _GLF_IDENTITY(uint(7u), _GLF_IDENTITY(uint(7u), _GLF_IDENTITY(min(uint(7u), uint(7u)), (_GLF_IDENTITY(min(uint(7u), uint(7u)), (min(uint(7u), uint(7u))) + 0u)) << 0u)))) >> _GLF_IDENTITY(uint(7u), uint(7u)))));
 uint subgroup_base = subgroup_id * _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (0u >> _GLF_IDENTITY(uint(2u), uint(2u))) | (subgroup_size)), (_GLF_IDENTITY(true ? _GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, max(subgroup_size, _GLF_IDENTITY(subgroup_size, (subgroup_size) + 0u))), _GLF_IDENTITY(~ (~ (_GLF_IDENTITY(subgroup_size, max(subgroup_size, _GLF_IDENTITY(subgroup_size, (subgroup_size) + 0u))))), clamp(~ (~ (_GLF_IDENTITY(subgroup_size, max(subgroup_size, _GLF_IDENTITY(subgroup_size, (subgroup_size) + 0u))))), ~ (~ (_GLF_IDENTITY(subgroup_size, max(subgroup_size, _GLF_IDENTITY(subgroup_size, (subgroup_size) + 0u))))), ~ (~ (_GLF_IDENTITY(subgroup_size, max(subgroup_size, _GLF_IDENTITY(subgroup_size, (subgroup_size) + 0u))))))))) - uint(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x)))), uint(_GLF_IDENTITY(uvec2(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, max(subgroup_size, _GLF_IDENTITY(subgroup_size, (subgroup_size) + 0u))), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, (subgroup_size) ^ (0u >> _GLF_IDENTITY(uint(5u), uint(5u))))) / 1u), _GLF_IDENTITY(max(subgroup_size, _GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((subgroup_size), ~ (~ ((subgroup_size)))) + 0u)), ~ (~ (max(subgroup_size, _GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((subgroup_size), ~ (~ ((subgroup_size)))) + 0u)))))))))), ((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, max(subgroup_size, _GLF_IDENTITY(subgroup_size, (subgroup_size) + 0u))), ~ (~ (_GLF_IDENTITY(subgroup_size, max(subgroup_size, _GLF_IDENTITY(subgroup_size, (subgroup_size) + 0u)))))))) - 0u) - uint(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(-76.59) : injectionSwitch.x)))), 1u), clamp(uvec2((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, max(subgroup_size, _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (subgroup_size) + 0u), max(_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((subgroup_size), ((subgroup_size)) - 0u) + 0u), _GLF_IDENTITY(subgroup_size, (subgroup_size) + 0u))))), ~ (~ _GLF_IDENTITY((_GLF_IDENTITY(subgroup_size, max(subgroup_size, _GLF_IDENTITY(subgroup_size, (subgroup_size) + 0u)))), (true ? (_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(max(subgroup_size, _GLF_IDENTITY(subgroup_size, (subgroup_size) + 0u)), clamp(_GLF_IDENTITY(max(subgroup_size, _GLF_IDENTITY(subgroup_size, (subgroup_size) + 0u)), max(max(subgroup_size, _GLF_IDENTITY(subgroup_size, (subgroup_size) + 0u)), max(subgroup_size, _GLF_IDENTITY(subgroup_size, (subgroup_size) + 0u)))), max(subgroup_size, _GLF_IDENTITY(subgroup_size, (subgroup_size) + 0u)), _GLF_IDENTITY(max(subgroup_size, _GLF_IDENTITY(subgroup_size, (subgroup_size) + 0u)), (max(subgroup_size, _GLF_IDENTITY(subgroup_size, (subgroup_size) + 0u))) << 0u))))) : _GLF_FUZZED(subgroup_size)))))) - uint(_GLF_ZERO(0.0, injectionSwitch.x)), 1u), uvec2((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, max(subgroup_size, _GLF_IDENTITY(subgroup_size, (subgroup_size) + 0u))), ~ (~ (_GLF_IDENTITY(subgroup_size, max(subgroup_size, _GLF_IDENTITY(subgroup_size, (subgroup_size) + 0u))))))) - uint(_GLF_ZERO(0.0, injectionSwitch.x)), _GLF_IDENTITY(1u, max(1u, 1u))), uvec2(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, max(subgroup_size, _GLF_IDENTITY(subgroup_size, (subgroup_size) + 0u))), ~ (~ (_GLF_IDENTITY(subgroup_size, max(subgroup_size, _GLF_IDENTITY(subgroup_size, (subgroup_size) + 0u)))))), 0u + (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, max(subgroup_size, _GLF_IDENTITY(subgroup_size, (subgroup_size) + 0u))), ~ (~ (_GLF_IDENTITY(subgroup_size, max(subgroup_size, _GLF_IDENTITY(subgroup_size, (subgroup_size) + 0u))))))))), ((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, max(subgroup_size, _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, uint(_GLF_ZERO(0.0, injectionSwitch.x)) | (_GLF_IDENTITY(subgroup_size, (true ? subgroup_size : _GLF_FUZZED(workgroup_id))))), (subgroup_size) + 0u))), ~ (~ (_GLF_IDENTITY(subgroup_size, max(subgroup_size, _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (subgroup_size) + 0u), 1u * _GLF_IDENTITY((_GLF_IDENTITY(subgroup_size, (subgroup_size) + 0u)), min((_GLF_IDENTITY(subgroup_size, (subgroup_size) + 0u)), (_GLF_IDENTITY(subgroup_size, (subgroup_size) + 0u)))))))))))) | ((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, max(subgroup_size, _GLF_IDENTITY(subgroup_size, (subgroup_size) + 0u))), ~ (~ (_GLF_IDENTITY(subgroup_size, max(subgroup_size, _GLF_IDENTITY(subgroup_size, (subgroup_size) + 0u))))))))) - uint(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(tanh(8.9)))))), 1u)))))) : _GLF_FUZZED(_GLF_IDENTITY(73764u, uint(_GLF_IDENTITY(uvec3(73764u, 1u, 1u), _GLF_IDENTITY(_GLF_IDENTITY(uvec3(uvec4(uvec3(73764u, 1u, 1u), 0u)), (uvec3(uvec4(uvec3(73764u, 1u, 1u), 0u))) * uvec3(1u, 1u, 1u)), (_GLF_IDENTITY(uvec3(_GLF_IDENTITY(uvec4(uvec3(73764u, 1u, 1u), 0u), (uvec4(uvec3(_GLF_IDENTITY(_GLF_IDENTITY(73764u, (73764u) | (_GLF_IDENTITY(73764u, min(73764u, _GLF_IDENTITY(73764u, (73764u) | 0u))))), ~ (~ (73764u))), _GLF_IDENTITY(1u, max(1u, 1u)), _GLF_IDENTITY(_GLF_IDENTITY(1u, min(1u, 1u)), (_GLF_IDENTITY(1u, min(1u, 1u))) << 0u)), _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, (0u) - 0u)) | 0u))) | (uvec4(uvec3(73764u, 1u, 1u), 0u)))), _GLF_IDENTITY((uvec3(_GLF_IDENTITY(uvec4(uvec3(73764u, 1u, 1u), 0u), max(uvec4(uvec3(73764u, 1u, 1u), 0u), uvec4(uvec3(73764u, 1u, 1u), 0u))))), _GLF_IDENTITY(max((uvec3(uvec4(uvec3(73764u, 1u, 1u), 0u))), _GLF_IDENTITY((uvec3(uvec4(uvec3(73764u, 1u, 1u), 0u))), ~ (~ ((uvec3(uvec4(uvec3(73764u, 1u, 1u), 0u))))))), uvec3(uvec3(max((uvec3(_GLF_IDENTITY(uvec4(uvec3(73764u, 1u, 1u), 0u), min(uvec4(uvec3(73764u, 1u, 1u), 0u), _GLF_IDENTITY(uvec4(uvec3(73764u, 1u, 1u), 0u), ~ (~ (uvec4(uvec3(73764u, 1u, 1u), 0u)))))))), _GLF_IDENTITY((uvec3(uvec4(uvec3(73764u, 1u, 1u), 0u))), ~ (~ ((uvec3(uvec4(uvec3(73764u, 1u, 1u), _GLF_IDENTITY(0u, uint(_GLF_IDENTITY(uvec4(0u, 0u, 1u, 0u), ~ (~ (uvec4(_GLF_IDENTITY(0u, ~ (~ (0u))), 0u, 1u, 0u))))))))))))))))) * uvec3(1u, 1u, 1u))) | (_GLF_IDENTITY(_GLF_IDENTITY(uvec3(uvec4(uvec3(_GLF_IDENTITY(_GLF_IDENTITY(73764u, _GLF_IDENTITY(uint(uvec3(_GLF_IDENTITY(73764u, min(73764u, 73764u)), 1u, _GLF_IDENTITY(uint(_GLF_ZERO(0.0, injectionSwitch.x)), min(uint(_GLF_ZERO(0.0, injectionSwitch.x)), uint(_GLF_ZERO(0.0, injectionSwitch.x)))))), ~ (~ (uint(uvec3(_GLF_IDENTITY(73764u, min(73764u, 73764u)), 1u, _GLF_IDENTITY(uint(_GLF_ZERO(0.0, injectionSwitch.x)), min(uint(_GLF_ZERO(0.0, injectionSwitch.x)), uint(_GLF_ZERO(0.0, injectionSwitch.x)))))))))), max(_GLF_IDENTITY(_GLF_IDENTITY(73764u, uint(uvec3(_GLF_IDENTITY(_GLF_IDENTITY(73764u, min(73764u, 73764u)), max(_GLF_IDENTITY(_GLF_IDENTITY(73764u, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(mix(subgroup_id, workgroup_size, false)) : _GLF_IDENTITY(73764u, (73764u) ^ 0u))), min(73764u, 73764u)), _GLF_IDENTITY(73764u, min(73764u, 73764u)))), 1u, uint(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), (false ? _GLF_FUZZED(801.212) : _GLF_ZERO(0.0, injectionSwitch.x))))))), (true ? _GLF_IDENTITY(_GLF_IDENTITY(73764u, uint(uvec3(_GLF_IDENTITY(73764u, min(73764u, 73764u)), 1u, _GLF_IDENTITY(uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u | (_GLF_IDENTITY(uint(_GLF_ZERO(0.0, injectionSwitch.x)), uint(uvec2(uint(_GLF_ZERO(0.0, injectionSwitch.x)), 1u)))))))), uint(uvec2(_GLF_IDENTITY(73764u, uint(uvec3(_GLF_IDENTITY(73764u, _GLF_IDENTITY(min(73764u, 73764u), (min(73764u, 73764u)) / 1u)), _GLF_IDENTITY(1u, (1u) >> 0u), uint(_GLF_ZERO(0.0, injectionSwitch.x))))), 0u))) : _GLF_FUZZED(num_workgroup))), _GLF_IDENTITY(73764u, uint(uvec3(_GLF_IDENTITY(73764u, min(73764u, 73764u)), 1u, uint(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(_GLF_IDENTITY(-6203.5045, mix(float(_GLF_FUZZED(-6.5)), float(_GLF_IDENTITY(-6203.5045, mix(float(-6203.5045), float(_GLF_FUZZED(float(-77529))), bool(false)))), bool(true)))), _GLF_FUZZED(9.1)), vec2(_GLF_IDENTITY((injectionSwitch)[0], float(mat3(_GLF_IDENTITY((injectionSwitch)[0], mix(float(_GLF_FUZZED(-470.727)), float((injectionSwitch)[0]), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, log(1.0), 1.0))), (injectionSwitch)[_GLF_IDENTITY(1, (1) << 0)]), bvec2(true, true))).x))))))), _GLF_IDENTITY(1u, clamp(_GLF_IDENTITY(1u, max(_GLF_IDENTITY(1u, uint(uvec3(1u, 0u, _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, (0u) | (0u))) / 1u)))), 1u)), 1u, 1u)), 1u), 0u)), (_GLF_IDENTITY(uvec3(uvec4(uvec3(_GLF_IDENTITY(73764u, uint(uvec3(_GLF_IDENTITY(73764u, min(73764u, 73764u)), 1u, uint(_GLF_ZERO(0.0, injectionSwitch.x))))), 1u, 1u), 0u)), uvec3(uvec3(_GLF_IDENTITY(uvec3(uvec4(uvec3(_GLF_IDENTITY(73764u, _GLF_IDENTITY(uint(uvec3(_GLF_IDENTITY(73764u, min(73764u, 73764u)), 1u, uint(_GLF_ZERO(0.0, injectionSwitch.x)))), max(uint(uvec3(_GLF_IDENTITY(73764u, min(73764u, 73764u)), 1u, uint(_GLF_ZERO(0.0, injectionSwitch.x)))), _GLF_IDENTITY(uint(uvec3(_GLF_IDENTITY(73764u, min(73764u, 73764u)), 1u, uint(_GLF_ZERO(0.0, injectionSwitch.x)))), min(uint(uvec3(_GLF_IDENTITY(73764u, min(73764u, 73764u)), 1u, uint(_GLF_ZERO(0.0, injectionSwitch.x)))), _GLF_IDENTITY(uint(uvec3(_GLF_IDENTITY(73764u, min(73764u, 73764u)), 1u, uint(_GLF_ZERO(0.0, injectionSwitch.x)))), (uint(uvec3(_GLF_IDENTITY(73764u, min(73764u, 73764u)), 1u, uint(_GLF_ZERO(0.0, injectionSwitch.x))))) + 0u)))))), 1u, 1u), 0u)), min(uvec3(uvec4(uvec3(_GLF_IDENTITY(73764u, uint(uvec3(_GLF_IDENTITY(73764u, min(73764u, 73764u)), 1u, uint(_GLF_ZERO(0.0, injectionSwitch.x))))), 1u, 1u), 0u)), uvec3(uvec4(uvec3(_GLF_IDENTITY(73764u, uint(uvec3(_GLF_IDENTITY(73764u, min(73764u, 73764u)), 1u, uint(_GLF_ZERO(0.0, injectionSwitch.x))))), 1u, 1u), _GLF_IDENTITY(0u, max(0u, 0u)))))))))) / ((uvec3(1u, _GLF_IDENTITY(1u, (1u) >> (0u >> _GLF_IDENTITY(uint(5u), uint(5u)))), 1u) << _GLF_IDENTITY(uvec3(5u), uvec3(5u))) >> _GLF_IDENTITY(uvec3(5u), uvec3(5u)))), (uvec3(uvec4(uvec3(73764u, 1u, _GLF_IDENTITY(1u, (1u) << 0u)), _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, (0u) | (0u))) | (_GLF_IDENTITY(0u, min(0u, 0u))))))) * uvec3(1u, 1u, 1u)))))))), uint(_GLF_ONE(1.0, injectionSwitch.y)) * (true ? _GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, max(subgroup_size, _GLF_IDENTITY(subgroup_size, (subgroup_size) + 0u))), _GLF_IDENTITY(~ (~ (_GLF_IDENTITY(subgroup_size, max(subgroup_size, _GLF_IDENTITY(subgroup_size, (subgroup_size) + 0u))))), clamp(~ (~ (_GLF_IDENTITY(subgroup_size, max(subgroup_size, _GLF_IDENTITY(subgroup_size, (subgroup_size) + 0u))))), ~ (~ (_GLF_IDENTITY(subgroup_size, max(subgroup_size, _GLF_IDENTITY(subgroup_size, (subgroup_size) + 0u))))), ~ (~ (_GLF_IDENTITY(subgroup_size, max(subgroup_size, _GLF_IDENTITY(subgroup_size, (subgroup_size) + 0u))))))))) - uint(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x)))), uint(_GLF_IDENTITY(uvec2(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, max(subgroup_size, _GLF_IDENTITY(subgroup_size, (subgroup_size) + 0u))), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, (subgroup_size) ^ (0u >> _GLF_IDENTITY(uint(5u), uint(5u))))) / 1u), _GLF_IDENTITY(max(subgroup_size, _GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((subgroup_size), ~ (~ ((subgroup_size)))) + 0u)), ~ (~ (max(subgroup_size, _GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((subgroup_size), ~ (~ ((subgroup_size)))) + 0u)))))))))), ((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, max(subgroup_size, _GLF_IDENTITY(subgroup_size, (subgroup_size) + 0u))), ~ (~ (_GLF_IDENTITY(subgroup_size, max(subgroup_size, _GLF_IDENTITY(subgroup_size, (subgroup_size) + 0u)))))))) - 0u) - uint(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(-76.59) : injectionSwitch.x)))), 1u), clamp(uvec2((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, max(subgroup_size, _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (subgroup_size) + 0u), max(_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((subgroup_size), ((subgroup_size)) - 0u) + 0u), _GLF_IDENTITY(subgroup_size, (subgroup_size) + 0u))))), ~ (~ _GLF_IDENTITY((_GLF_IDENTITY(subgroup_size, max(subgroup_size, _GLF_IDENTITY(subgroup_size, (subgroup_size) + 0u)))), (true ? (_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(max(subgroup_size, _GLF_IDENTITY(subgroup_size, (subgroup_size) + 0u)), clamp(_GLF_IDENTITY(max(subgroup_size, _GLF_IDENTITY(subgroup_size, (subgroup_size) + 0u)), max(max(subgroup_size, _GLF_IDENTITY(subgroup_size, (subgroup_size) + 0u)), max(subgroup_size, _GLF_IDENTITY(subgroup_size, (subgroup_size) + 0u)))), max(subgroup_size, _GLF_IDENTITY(subgroup_size, (subgroup_size) + 0u)), _GLF_IDENTITY(max(subgroup_size, _GLF_IDENTITY(subgroup_size, (subgroup_size) + 0u)), (max(subgroup_size, _GLF_IDENTITY(subgroup_size, (subgroup_size) + 0u))) << 0u))))) : _GLF_FUZZED(subgroup_size)))))) - uint(_GLF_ZERO(0.0, injectionSwitch.x)), 1u), uvec2((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, max(subgroup_size, _GLF_IDENTITY(subgroup_size, (subgroup_size) + 0u))), ~ (~ (_GLF_IDENTITY(subgroup_size, max(subgroup_size, _GLF_IDENTITY(subgroup_size, (subgroup_size) + 0u))))))) - uint(_GLF_ZERO(0.0, injectionSwitch.x)), _GLF_IDENTITY(1u, max(1u, 1u))), uvec2(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, max(subgroup_size, _GLF_IDENTITY(subgroup_size, (subgroup_size) + 0u))), ~ (~ (_GLF_IDENTITY(subgroup_size, max(subgroup_size, _GLF_IDENTITY(subgroup_size, (subgroup_size) + 0u)))))), 0u + (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, max(subgroup_size, _GLF_IDENTITY(subgroup_size, (subgroup_size) + 0u))), ~ (~ (_GLF_IDENTITY(subgroup_size, max(subgroup_size, _GLF_IDENTITY(subgroup_size, (subgroup_size) + 0u))))))))), ((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, max(subgroup_size, _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, uint(_GLF_ZERO(0.0, injectionSwitch.x)) | (_GLF_IDENTITY(subgroup_size, (true ? subgroup_size : _GLF_FUZZED(workgroup_id))))), (subgroup_size) + 0u))), ~ (~ (_GLF_IDENTITY(subgroup_size, max(subgroup_size, _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (subgroup_size) + 0u), 1u * _GLF_IDENTITY((_GLF_IDENTITY(subgroup_size, (subgroup_size) + 0u)), min((_GLF_IDENTITY(subgroup_size, (subgroup_size) + 0u)), (_GLF_IDENTITY(subgroup_size, (subgroup_size) + 0u)))))))))))) | ((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, max(subgroup_size, _GLF_IDENTITY(subgroup_size, (subgroup_size) + 0u))), ~ (~ (_GLF_IDENTITY(subgroup_size, max(subgroup_size, _GLF_IDENTITY(subgroup_size, (subgroup_size) + 0u))))))))) - uint(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(tanh(8.9)))))), 1u)))))) : _GLF_FUZZED(_GLF_IDENTITY(73764u, uint(_GLF_IDENTITY(uvec3(73764u, 1u, 1u), _GLF_IDENTITY(_GLF_IDENTITY(uvec3(uvec4(uvec3(73764u, 1u, 1u), 0u)), (uvec3(uvec4(uvec3(73764u, 1u, 1u), 0u))) * uvec3(1u, 1u, 1u)), (_GLF_IDENTITY(uvec3(_GLF_IDENTITY(uvec4(uvec3(73764u, 1u, 1u), 0u), (uvec4(uvec3(_GLF_IDENTITY(_GLF_IDENTITY(73764u, (73764u) | (_GLF_IDENTITY(73764u, min(73764u, _GLF_IDENTITY(73764u, (73764u) | 0u))))), ~ (~ (73764u))), _GLF_IDENTITY(1u, max(1u, 1u)), _GLF_IDENTITY(_GLF_IDENTITY(1u, min(1u, 1u)), (_GLF_IDENTITY(1u, min(1u, 1u))) << 0u)), _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, (0u) - 0u)) | 0u))) | (uvec4(uvec3(73764u, 1u, 1u), 0u)))), _GLF_IDENTITY((uvec3(_GLF_IDENTITY(uvec4(uvec3(73764u, 1u, 1u), 0u), max(uvec4(uvec3(73764u, 1u, 1u), 0u), uvec4(uvec3(73764u, 1u, 1u), 0u))))), _GLF_IDENTITY(max((uvec3(uvec4(uvec3(73764u, 1u, 1u), 0u))), _GLF_IDENTITY((uvec3(uvec4(uvec3(73764u, 1u, 1u), 0u))), ~ (~ ((uvec3(uvec4(uvec3(73764u, 1u, 1u), 0u))))))), uvec3(uvec3(max((uvec3(_GLF_IDENTITY(uvec4(uvec3(73764u, 1u, 1u), 0u), min(uvec4(uvec3(73764u, 1u, 1u), 0u), _GLF_IDENTITY(uvec4(uvec3(73764u, 1u, 1u), 0u), ~ (~ (uvec4(uvec3(73764u, 1u, 1u), 0u)))))))), _GLF_IDENTITY((uvec3(uvec4(uvec3(73764u, 1u, 1u), 0u))), ~ (~ ((uvec3(uvec4(uvec3(73764u, 1u, 1u), _GLF_IDENTITY(0u, uint(_GLF_IDENTITY(uvec4(0u, 0u, 1u, 0u), ~ (~ (uvec4(_GLF_IDENTITY(0u, ~ (~ (0u))), 0u, 1u, 0u))))))))))))))))) * uvec3(1u, 1u, 1u))) | (_GLF_IDENTITY(_GLF_IDENTITY(uvec3(uvec4(uvec3(_GLF_IDENTITY(_GLF_IDENTITY(73764u, _GLF_IDENTITY(uint(uvec3(_GLF_IDENTITY(73764u, min(73764u, 73764u)), 1u, _GLF_IDENTITY(uint(_GLF_ZERO(0.0, injectionSwitch.x)), min(uint(_GLF_ZERO(0.0, injectionSwitch.x)), uint(_GLF_ZERO(0.0, injectionSwitch.x)))))), ~ (~ (uint(uvec3(_GLF_IDENTITY(73764u, min(73764u, 73764u)), 1u, _GLF_IDENTITY(uint(_GLF_ZERO(0.0, injectionSwitch.x)), min(uint(_GLF_ZERO(0.0, injectionSwitch.x)), uint(_GLF_ZERO(0.0, injectionSwitch.x)))))))))), max(_GLF_IDENTITY(_GLF_IDENTITY(73764u, uint(uvec3(_GLF_IDENTITY(_GLF_IDENTITY(73764u, min(73764u, 73764u)), max(_GLF_IDENTITY(_GLF_IDENTITY(73764u, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(mix(subgroup_id, workgroup_size, false)) : _GLF_IDENTITY(73764u, (73764u) ^ 0u))), min(73764u, 73764u)), _GLF_IDENTITY(73764u, min(73764u, 73764u)))), 1u, uint(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), (false ? _GLF_FUZZED(801.212) : _GLF_ZERO(0.0, injectionSwitch.x))))))), (true ? _GLF_IDENTITY(_GLF_IDENTITY(73764u, uint(uvec3(_GLF_IDENTITY(73764u, min(73764u, 73764u)), 1u, _GLF_IDENTITY(uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u | (_GLF_IDENTITY(uint(_GLF_ZERO(0.0, injectionSwitch.x)), uint(uvec2(uint(_GLF_ZERO(0.0, injectionSwitch.x)), 1u)))))))), uint(uvec2(_GLF_IDENTITY(73764u, uint(uvec3(_GLF_IDENTITY(73764u, _GLF_IDENTITY(min(73764u, 73764u), (min(73764u, 73764u)) / 1u)), _GLF_IDENTITY(1u, (1u) >> 0u), uint(_GLF_ZERO(0.0, injectionSwitch.x))))), 0u))) : _GLF_FUZZED(num_workgroup))), _GLF_IDENTITY(73764u, uint(uvec3(_GLF_IDENTITY(73764u, min(73764u, 73764u)), 1u, uint(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(_GLF_IDENTITY(-6203.5045, mix(float(_GLF_FUZZED(-6.5)), float(_GLF_IDENTITY(-6203.5045, mix(float(-6203.5045), float(_GLF_FUZZED(float(-77529))), bool(false)))), bool(true)))), _GLF_FUZZED(9.1)), vec2(_GLF_IDENTITY((injectionSwitch)[0], float(mat3(_GLF_IDENTITY((injectionSwitch)[0], mix(float(_GLF_FUZZED(-470.727)), float((injectionSwitch)[0]), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, log(1.0), 1.0))), (injectionSwitch)[_GLF_IDENTITY(1, (1) << 0)]), bvec2(true, true))).x))))))), _GLF_IDENTITY(1u, clamp(_GLF_IDENTITY(1u, max(_GLF_IDENTITY(1u, uint(uvec3(1u, 0u, _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, (0u) | (0u))) / 1u)))), 1u)), 1u, 1u)), 1u), 0u)), (_GLF_IDENTITY(uvec3(uvec4(uvec3(_GLF_IDENTITY(73764u, uint(uvec3(_GLF_IDENTITY(73764u, min(73764u, 73764u)), 1u, uint(_GLF_ZERO(0.0, injectionSwitch.x))))), 1u, 1u), 0u)), uvec3(uvec3(_GLF_IDENTITY(uvec3(uvec4(uvec3(_GLF_IDENTITY(73764u, _GLF_IDENTITY(uint(uvec3(_GLF_IDENTITY(73764u, min(73764u, 73764u)), 1u, uint(_GLF_ZERO(0.0, injectionSwitch.x)))), max(uint(uvec3(_GLF_IDENTITY(73764u, min(73764u, 73764u)), 1u, uint(_GLF_ZERO(0.0, injectionSwitch.x)))), _GLF_IDENTITY(uint(uvec3(_GLF_IDENTITY(73764u, min(73764u, 73764u)), 1u, uint(_GLF_ZERO(0.0, injectionSwitch.x)))), min(uint(uvec3(_GLF_IDENTITY(73764u, min(73764u, 73764u)), 1u, uint(_GLF_ZERO(0.0, injectionSwitch.x)))), _GLF_IDENTITY(uint(uvec3(_GLF_IDENTITY(73764u, min(73764u, 73764u)), 1u, uint(_GLF_ZERO(0.0, injectionSwitch.x)))), (uint(uvec3(_GLF_IDENTITY(73764u, min(73764u, 73764u)), 1u, uint(_GLF_ZERO(0.0, injectionSwitch.x))))) + 0u)))))), 1u, 1u), 0u)), min(uvec3(uvec4(uvec3(_GLF_IDENTITY(73764u, uint(uvec3(_GLF_IDENTITY(73764u, min(73764u, 73764u)), 1u, uint(_GLF_ZERO(0.0, injectionSwitch.x))))), 1u, 1u), 0u)), uvec3(uvec4(uvec3(_GLF_IDENTITY(73764u, uint(uvec3(_GLF_IDENTITY(73764u, min(73764u, 73764u)), 1u, uint(_GLF_ZERO(0.0, injectionSwitch.x))))), 1u, 1u), _GLF_IDENTITY(0u, max(0u, 0u)))))))))) / ((uvec3(1u, _GLF_IDENTITY(1u, (1u) >> (0u >> _GLF_IDENTITY(uint(5u), uint(5u)))), 1u) << _GLF_IDENTITY(uvec3(5u), uvec3(5u))) >> _GLF_IDENTITY(uvec3(5u), uvec3(5u)))), (uvec3(uvec4(uvec3(73764u, 1u, _GLF_IDENTITY(1u, (1u) << 0u)), _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, (0u) | (0u))) | (_GLF_IDENTITY(0u, min(0u, 0u))))))) * uvec3(1u, 1u, 1u))))))))))));
 uint virtual_gid = workgroup_base + subgroup_base + _GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(_GLF_IDENTITY(true, bool(bool(true))), ! (! (_GLF_IDENTITY(true, bool(bvec2(_GLF_IDENTITY(true, bool(bvec3(true, true, false))), false)))))) ? subgroup_local_id : _GLF_FUZZED(_GLF_IDENTITY(num_workgroup, (false ? _GLF_FUZZED(subgroup_id) : _GLF_IDENTITY(num_workgroup, clamp(num_workgroup, num_workgroup, num_workgroup)))))));
 if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(_GLF_IDENTITY((_GLF_DEAD(false)), ! (! ((_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))))), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY((_GLF_DEAD(false)), ! (! ((_GLF_DEAD(false))))), true, false, true)), _GLF_IDENTITY((bool(bvec4(_GLF_IDENTITY((_GLF_DEAD(false)), ! (! ((_GLF_DEAD(false))))), true, false, true))), bool(bvec2((bool(bvec4(_GLF_IDENTITY((_GLF_DEAD(false)), ! (! ((_GLF_DEAD(false))))), true, false, true))), false))) && true)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bool(false))), (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bool(false))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(_GLF_IDENTITY((507.815 * 2.5), _GLF_IDENTITY(1.0 * ((507.815 * 2.5)), (_GLF_IDENTITY(1.0 * ((507.815 * 2.5)), float(mat4x2(_GLF_IDENTITY(1.0 * ((507.815 * 2.5)), max(1.0 * ((507.815 * 2.5)), 1.0 * ((507.815 * 2.5)))), 0.0, 1.0, determinant(mat2(0.0, 0.0, 1.0, 0.0)), 1.0, 0.0, 1.0, 1.0)))) / _GLF_IDENTITY(dot(vec3(1.0, 0.0, abs(0.0)), vec3(1.0, 0.0, 0.0)), dot(vec3(1.0, 0.0, abs(0.0)), vec3(1.0, 0.0, 0.0))))))), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))) && true))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       barrier();
       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, false)), (bool(bvec2(false, false))) || false)), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))))))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(_GLF_IDENTITY(float(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))), max(float(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))), _GLF_IDENTITY(float(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))), clamp(float(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))), float(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))), float(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))))))), float(_GLF_FUZZED((11.19 * 1.8))), bool(false))) > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0)))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, (false) || false))), (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(vec2(injectionSwitch), mix(vec2((vec2(injectionSwitch))[0], _GLF_FUZZED((- 2.9))), vec2(_GLF_FUZZED(-59.99), _GLF_IDENTITY((vec2(injectionSwitch))[1], (_GLF_IDENTITY((vec2(injectionSwitch))[1], ((vec2(injectionSwitch))[1]) - 0.0)) / 1.0)), bvec2(false, true))))).y))))
  barrier();
 uint next_virtual_gid = _GLF_IDENTITY(workgroup_base, max(_GLF_IDENTITY(workgroup_base, _GLF_IDENTITY((workgroup_base) - 0u, ((workgroup_base) - 0u) - 0u)), workgroup_base)) + subgroup_base + ((subgroup_local_id + 1) % subgroup_size);
 if(_GLF_DEAD(false))
  barrier();
 atomicStore(buf[next_virtual_gid], uint(1), 4, 64, _GLF_IDENTITY(4, 0 | (4)));
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-5326.0527)), _GLF_IDENTITY(bool(false), false || (_GLF_IDENTITY(bool(false), false || (bool(false))))))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), (true ? _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), min(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)))) : _GLF_FUZZED(-2307.5564))))))) > injectionSwitch.y, ! _GLF_IDENTITY((! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)).x, min(_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-5326.0527)), bool(false))), _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)))))) > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(_GLF_IDENTITY(-5326.0527, (false ? _GLF_FUZZED(determinant(mat2(6140.8594, -5.5, 8.9, 7.7))) : -5326.0527)))), bool(false))), _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)))))) > injectionSwitch.y))))), ((! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)).x, min(_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-5326.0527)), bool(false))), _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)))))) > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(_GLF_IDENTITY(-5326.0527, (false ? _GLF_FUZZED(determinant(mat2(6140.8594, -5.5, 8.9, 7.7))) : -5326.0527)))), bool(false))), _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)))))) > injectionSwitch.y)))))) && true))))), bool(bvec4(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-5326.0527)), _GLF_IDENTITY(bool(false), false || (_GLF_IDENTITY(bool(false), false || (bool(false))))))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), (true ? _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), min(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)))) : _GLF_FUZZED(-2307.5564))))))) > injectionSwitch.y, ! _GLF_IDENTITY((! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)).x, min(_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-5326.0527)), bool(false))), _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)))))) > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(_GLF_IDENTITY(-5326.0527, (false ? _GLF_FUZZED(determinant(mat2(6140.8594, -5.5, 8.9, 7.7))) : -5326.0527)))), bool(false))), _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)))))) > injectionSwitch.y))))), ((! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)).x, min(_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-5326.0527)), bool(false))), _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)))))) > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(_GLF_IDENTITY(-5326.0527, (false ? _GLF_FUZZED(determinant(mat2(6140.8594, -5.5, 8.9, 7.7))) : -5326.0527)))), bool(false))), _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)))))) > injectionSwitch.y)))))) && true))))), false, true, false))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)), ! (! (_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(vec4(2.7, -1996.8229, 7.4, 1.7).b)), float(injectionSwitch.y), bool(true)))) / _GLF_ONE(1.0, injectionSwitch.y))), _GLF_IDENTITY(bool(bvec4((injectionSwitch.x > injectionSwitch.y), true, true, true)), _GLF_IDENTITY(! (! (_GLF_IDENTITY(bool(bvec4((injectionSwitch.x > injectionSwitch.y), true, true, true)), ! (! (bool(bvec4((injectionSwitch.x > injectionSwitch.y), true, true, true))))))), true && (_GLF_IDENTITY(! (! (_GLF_IDENTITY(bool(bvec4((injectionSwitch.x > injectionSwitch.y), true, true, true)), ! (_GLF_IDENTITY(! (bool(bvec4((injectionSwitch.x > injectionSwitch.y), true, true, true))), true && (_GLF_IDENTITY(! (bool(bvec4((injectionSwitch.x > injectionSwitch.y), true, true, true))), (_GLF_IDENTITY(! (bool(bvec4((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bvec3(injectionSwitch.x > injectionSwitch.y, false, true)), (bool(bvec3(injectionSwitch.x > injectionSwitch.y, false, true))) || false))), true, true, true))), ! (! (! (bool(bvec4((injectionSwitch.x > injectionSwitch.y), true, true, true))))))) && true))))))), false || (! (! (_GLF_IDENTITY(_GLF_IDENTITY(bool(bvec4((injectionSwitch.x > injectionSwitch.y), true, true, true)), ! (! (bool(bvec4((injectionSwitch.x > injectionSwitch.y), true, true, true))))), ! (! (bool(bvec4((injectionSwitch.x > injectionSwitch.y), true, _GLF_IDENTITY(true, (_GLF_IDENTITY(true, false || (true))) || false), true))))))))))))))) && true))))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, bool(bvec4(false, false, true, true)))))))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y))))
        barrier();
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))
    barrier();
  }
 uint read = atomicLoad(buf[virtual_gid], 4, 64, _GLF_IDENTITY(2, min(2, 2)));
 if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(! (! (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))))))), bool(bvec4(! (! (_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(! (! (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (! (! (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, false, false)))))))))))))), false, false, false)))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
  barrier();
 subgroupBarrier();
 atomicStore(checker[virtual_gid], read, 4, 64, 4);
 if(_GLF_DEAD(false))
  {
   if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, (false) && true)))), ! (! (_GLF_DEAD(false))))) || false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), true && (! (_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), (_GLF_IDENTITY(false, ! (! (false)))) || false))))))))))) || false)), false || (! (_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_DEAD(false), ! _GLF_IDENTITY((_GLF_IDENTITY(! (_GLF_DEAD(false)), (! (_GLF_DEAD(false))) || false)), false || ((! (_GLF_DEAD(false))))))) || false, bool(bvec3((_GLF_IDENTITY(_GLF_DEAD(false), ! _GLF_IDENTITY((! (_GLF_DEAD(false))), false || ((! (_GLF_DEAD(false))))))) || false, true, true))))))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), (! (_GLF_DEAD(false))) || false))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_DEAD(false), false, false))))
  barrier();
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END
BUFFER checker DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected_checker DATA_TYPE uint32 SIZE 8388096 FILL 1

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 
  BIND BUFFER checker AS storage DESCRIPTOR_SET 0 BINDING 2 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT checker EQ_BUFFER expected_checker
