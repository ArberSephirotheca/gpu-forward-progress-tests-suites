#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_4 {
 bvec3 _f0;
} ;

struct _GLF_struct_3 {
 ivec4 _f0;
 bool _f1;
} ;

struct _GLF_struct_5 {
 _GLF_struct_3 _f0;
 _GLF_struct_4 _f1;
 uvec3 _f2;
} ;

struct _GLF_struct_1 {
 vec4 _f0;
 uvec3 _f1;
} ;

struct _GLF_struct_0 {
 mat2x4 _f0;
 mat3x2 _f1;
} ;

struct _GLF_struct_2 {
 _GLF_struct_0 _f0;
 bool _f1;
 _GLF_struct_1 _f2;
} ;

struct _GLF_struct_6 {
 uint workgroup_base;
 mat4x2 _f0;
 mat2x4 _f1;
 _GLF_struct_2 _f2;
 _GLF_struct_5 _f3;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uvec4 GLF_merged4_0_1_13_1_1_11_2_1_14_3_1_14num_workgroupsubgroup_idworkgroup_baseworkgroup_size;
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(false))
  return;
 GLF_merged4_0_1_13_1_1_11_2_1_14_3_1_14num_workgroupsubgroup_idworkgroup_baseworkgroup_size.y = subgroup_id;
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_DEAD(false))
  return;
 GLF_merged4_0_1_13_1_1_11_2_1_14_3_1_14num_workgroupsubgroup_idworkgroup_baseworkgroup_size.x = num_workgroup;
 uint workgroup_size = gl_WorkGroupSize.x;
 GLF_merged4_0_1_13_1_1_11_2_1_14_3_1_14num_workgroupsubgroup_idworkgroup_baseworkgroup_size.w = workgroup_size;
 uint workgroup_id = gl_WorkGroupID.x;
 _GLF_struct_6 _GLF_struct_replacement_6 = _GLF_struct_6(GLF_merged4_0_1_13_1_1_11_2_1_14_3_1_14num_workgroupsubgroup_idworkgroup_baseworkgroup_size.w * workgroup_id, mat4x2(1.0), mat2x4(1.0), _GLF_struct_2(_GLF_struct_0(mat2x4(1.0), mat3x2(1.0)), true, _GLF_struct_1(vec4(1.0), uvec3(1u))), _GLF_struct_5(_GLF_struct_3(ivec4(1), true), _GLF_struct_4(bvec3(true)), uvec3(1u)));
 GLF_merged4_0_1_13_1_1_11_2_1_14_3_1_14num_workgroupsubgroup_idworkgroup_baseworkgroup_size.z = _GLF_struct_replacement_6.workgroup_base;
 uint subgroup_base = GLF_merged4_0_1_13_1_1_11_2_1_14_3_1_14num_workgroupsubgroup_idworkgroup_baseworkgroup_size.y * subgroup_size;
 uint virtual_gid = GLF_merged4_0_1_13_1_1_11_2_1_14_3_1_14num_workgroupsubgroup_idworkgroup_baseworkgroup_size.z + subgroup_base + subgroup_local_id;
 uint next_virtual_gid = GLF_merged4_0_1_13_1_1_11_2_1_14_3_1_14num_workgroupsubgroup_idworkgroup_baseworkgroup_size.z + subgroup_base + ((subgroup_local_id + 1) % subgroup_size);
 atomicStore(buf[virtual_gid], uint(1), 4, 64, 4);
 atomicStore(buf[next_virtual_gid], uint(2), 4, 64, 4);
 if(_GLF_DEAD(false))
  return;
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
