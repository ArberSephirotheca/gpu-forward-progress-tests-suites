#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_3 {
 mat4 _f0;
 uvec2 _f1;
} ;

struct _GLF_struct_4 {
 vec3 _f0;
 ivec2 _f1;
 vec2 _f2;
 _GLF_struct_3 _f3;
 mat2x4 _f4;
 bvec3 _f5;
 ivec2 _f6;
} ;

struct _GLF_struct_1 {
 uvec4 _f0;
 ivec3 _f1;
 mat4x3 _f2;
 ivec2 _f3;
 ivec4 _f4;
} ;

struct _GLF_struct_0 {
 vec2 _f0;
 mat4x3 _f1;
 bvec3 _f2;
 bvec3 _f3;
 uvec3 _f4;
 mat4 _f5;
 mat2x3 _f6;
} ;

struct _GLF_struct_2 {
 mat2 _f0;
 _GLF_struct_0 _f1;
 _GLF_struct_1 _f2;
 uint subgroup_local_id;
} ;

struct _GLF_struct_5 {
 mat3x2 _f0;
 _GLF_struct_2 _f1;
 mat3 _f2;
 _GLF_struct_4 _f3;
 mat4x2 _f4;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 _GLF_struct_5 _GLF_struct_replacement_5 = _GLF_struct_5(mat3x2(1.0), _GLF_struct_2(mat2(1.0), _GLF_struct_0(vec2(1.0), mat4x3(1.0), bvec3(true), bvec3(true), uvec3(1u), mat4(1.0), mat2x3(1.0)), _GLF_struct_1(uvec4(1u), ivec3(1), mat4x3(1.0), ivec2(1), ivec4(1)), gl_SubgroupInvocationID), mat3(1.0), _GLF_struct_4(vec3(1.0), ivec2(1), vec2(1.0), _GLF_struct_3(mat4(1.0), uvec2(1u)), mat2x4(1.0), bvec3(true), ivec2(1)), mat4x2(1.0));
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       barrier();
      }
    }
  }
 uint workgroup_base = workgroup_size * workgroup_id;
 uint subgroup_base = subgroup_id * subgroup_size;
 uint virtual_gid = workgroup_base + subgroup_base + _GLF_struct_replacement_5._f1.subgroup_local_id;
 uint next_virtual_gid = workgroup_base + subgroup_base + ((_GLF_struct_replacement_5._f1.subgroup_local_id + 1) % subgroup_size);
 do
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       atomicStore(buf[virtual_gid], uint(1), 4, 64, 4);
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 if((_GLF_struct_replacement_5._f1.subgroup_local_id % 2) == 0)
  {
   subgroupAll(true);
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (0 ^ 1)); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         atomicStore(buf[next_virtual_gid], uint(2), 4, 64, 4);
        }
       else
        {
        }
      }
    }
  }
 else
  {
   subgroupAll(false);
   atomicStore(buf[next_virtual_gid], uint(2), 4, 64, 4);
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
