#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     return;
    }
  }
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(mat3(injectionSwitch.y, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 0.0, log(1.0), exp(0.0), 0.0, 1.0, 1.0)), min(float(mat3(injectionSwitch.y, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 0.0, log(1.0), exp(0.0), 0.0, 1.0, 1.0)), float(mat3(injectionSwitch.y, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 0.0, log(1.0), exp(0.0), 0.0, 1.0, 1.0))))), false || (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, float(mat3(injectionSwitch.y, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 0.0, log(1.0), exp(0.0), 0.0, _GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), _GLF_IDENTITY(1.0, sqrt(0.0) + (1.0)))), 1.0)))))))))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(injectionSwitch.x > injectionSwitch.y, true))))), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(injectionSwitch.x > injectionSwitch.y, true))))), ! (! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(injectionSwitch.x > injectionSwitch.y, true)))))))))))))
      return;
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(8.2)), float(_GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x))), bool(true))) > injectionSwitch.y))), false || (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false))))
      return;
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 & 1)); _injected_loop_counter ++)
      {
       return;
      }
    }
   do
    {
     if(_GLF_DEAD(false))
      return;
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(false))
    return;
   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), _GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(_GLF_WRAPPED_IF_FALSE(false), false), bvec2(bvec3(bvec2(_GLF_WRAPPED_IF_FALSE(false), false), false))), bvec2(bvec3(_GLF_IDENTITY(bvec2(_GLF_WRAPPED_IF_FALSE(false), false), bvec2(bvec3(bvec2(_GLF_WRAPPED_IF_FALSE(false), false), false))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), ! (! (_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_GLF_WRAPPED_IF_FALSE(false), false), bvec2(bvec3(bvec2(_GLF_WRAPPED_IF_FALSE(false), false), false)))), ! (! (bool(_GLF_IDENTITY(bvec2(_GLF_WRAPPED_IF_FALSE(false), false), bvec2(bvec3(bvec2(_GLF_WRAPPED_IF_FALSE(false), false), false))))))))))))
    {
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
     return;
    }
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
    return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     return;
    }
   else
    {
    }
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(bool(bool(false)), bool(bvec4(bool(bool(false)), true, true, true))), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(bool(false)), bool(bvec4(bool(bool(false)), true, true, true)))), (bool(_GLF_IDENTITY(bool(bool(false)), bool(bvec4(bool(bool(false)), true, true, true))))) && true))))))
  {
   do
    {
     return;
    }
   while(_GLF_WRAPPED_LOOP(false));
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(_GLF_IDENTITY(mat3x4(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), 1.0, abs(1.0), length(0.0), 0.0, abs(_GLF_ZERO(0.0, injectionSwitch.x)), 1.0, 1.0, 0.0, 1.0, sin(0.0), 1.0), transpose(transpose(mat3x4(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), 1.0, abs(1.0), length(0.0), 0.0, abs(_GLF_ZERO(0.0, injectionSwitch.x)), 1.0, 1.0, 0.0, 1.0, sin(0.0), 1.0))))), min(float(_GLF_IDENTITY(mat3x4(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), 1.0, abs(1.0), length(0.0), 0.0, abs(_GLF_ZERO(0.0, injectionSwitch.x)), 1.0, 1.0, 0.0, 1.0, sin(0.0), 1.0), transpose(transpose(mat3x4(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), 1.0, abs(1.0), length(0.0), 0.0, abs(_GLF_ZERO(0.0, injectionSwitch.x)), 1.0, 1.0, 0.0, 1.0, sin(0.0), 1.0))))), float(_GLF_IDENTITY(mat3x4(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), 1.0, abs(1.0), length(0.0), 0.0, abs(_GLF_ZERO(0.0, injectionSwitch.x)), 1.0, 1.0, 0.0, 1.0, sin(0.0), 1.0), transpose(transpose(mat3x4(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), 1.0, abs(1.0), length(0.0), 0.0, abs(_GLF_ZERO(0.0, injectionSwitch.x)), 1.0, 1.0, 0.0, 1.0, sin(0.0), 1.0))))))))))); _injected_loop_counter --)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
  }
 if(_GLF_DEAD(false))
  return;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 for(int _injected_loop_counter = (1 & (1 & int(_GLF_ONE(1.0, injectionSwitch.y)))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 >> _GLF_IDENTITY(int(5), int(5)))); _injected_loop_counter --)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), mix(vec2(_GLF_FUZZED(947.810), _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch), max((injectionSwitch), (injectionSwitch)))[1], min((injectionSwitch)[1], (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)))[1]))), vec2((injectionSwitch)[0], _GLF_FUZZED(-135.339)), bvec2(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(false ? _GLF_FUZZED(-64.25) : _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-1.8) : injectionSwitch.y)), (false ? _GLF_FUZZED(-64.25) : _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-1.8) : injectionSwitch.y))) / 1.0))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat2x3(injectionSwitch, round(length(normalize(1.0))), _GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0)), max(vec2(mat2x3(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)), round(length(normalize(1.0))), _GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), max(_GLF_ONE(1.0, injectionSwitch.y), _GLF_IDENTITY(_GLF_ONE(_GLF_IDENTITY(1.0, (1.0) * 1.0), injectionSwitch.y), max(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y))))), 0.0, 1.0)), vec2(mat2x3(injectionSwitch, round(length(normalize(1.0))), _GLF_ONE(1.0, injectionSwitch.y), _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), 1.0)))))) * vec2(1.0, 1.0), min((_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat2x3(injectionSwitch, round(length(normalize(1.0))), _GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0)), max(vec2(mat2x3(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)), round(length(normalize(1.0))), _GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), max(_GLF_ONE(1.0, injectionSwitch.y), _GLF_IDENTITY(_GLF_ONE(_GLF_IDENTITY(1.0, (1.0) * 1.0), injectionSwitch.y), max(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y))))), 0.0, 1.0)), vec2(mat2x3(injectionSwitch, round(length(normalize(1.0))), _GLF_ONE(1.0, injectionSwitch.y), _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), 1.0)))))) * vec2(1.0, 1.0), _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat2x3(injectionSwitch, round(length(normalize(1.0))), _GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), (_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), float(vec2(_GLF_ONE(1.0, injectionSwitch.y), 0.0)))) / 1.0), 0.0, 1.0)), max(vec2(mat2x3(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)), round(length(normalize(1.0))), _GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), max(_GLF_ONE(1.0, injectionSwitch.y), _GLF_IDENTITY(_GLF_ONE(_GLF_IDENTITY(1.0, (1.0) * 1.0), injectionSwitch.y), max(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y))))), 0.0, 1.0)), vec2(mat2x3(injectionSwitch, round(length(normalize(1.0))), _GLF_ONE(1.0, injectionSwitch.y), _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), 1.0)))))) * vec2(1.0, 1.0), clamp((_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat2x3(injectionSwitch, round(length(normalize(1.0))), _GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0)), max(vec2(mat2x3(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)), round(length(normalize(1.0))), _GLF_IDENTITY(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) + abs(vec2(0.0, 0.0))).y), max(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), (_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), float(mat4x3(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), (false ? _GLF_FUZZED(781.093) : _GLF_ONE(1.0, injectionSwitch.y))), determinant(mat4(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0)), 0.0, 0.0, 1.0, _GLF_IDENTITY(dot(vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, 0.0)), dot(vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, 0.0))), 0.0, 0.0, 0.0, 1.0, 0.0, 0.0)))) / 1.0), _GLF_IDENTITY(_GLF_ONE(_GLF_IDENTITY(1.0, (1.0) * 1.0), _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-3.7) : _GLF_IDENTITY(injectionSwitch.y, float(mat4(injectionSwitch.y, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0)))))))), max(_GLF_ONE(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(3922.4529) : 1.0)), injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y))))), 0.0, 1.0)), vec2(mat2x3(injectionSwitch, round(length(normalize(1.0))), _GLF_ONE(1.0, injectionSwitch.y), _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), 1.0)))))) * vec2(1.0, 1.0), (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat2x3(injectionSwitch, round(length(normalize(1.0))), _GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0)), max(vec2(mat2x3(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)), round(length(normalize(1.0))), _GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), max(_GLF_ONE(1.0, injectionSwitch.y), _GLF_IDENTITY(_GLF_ONE(_GLF_IDENTITY(1.0, (1.0) * 1.0), injectionSwitch.y), max(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(vec2(injectionSwitch)), vec2(mat3x4(vec2(vec2(injectionSwitch)), 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0)))).y))))), 0.0, 1.0)), vec2(mat2x3(injectionSwitch, round(length(normalize(1.0))), _GLF_ONE(1.0, injectionSwitch.y), _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), 1.0)))))) * vec2(1.0, 1.0), (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat2x3(injectionSwitch, round(length(normalize(1.0))), _GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0)), max(vec2(mat2x3(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)), round(length(normalize(1.0))), _GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), max(_GLF_ONE(1.0, injectionSwitch.y), _GLF_IDENTITY(_GLF_ONE(_GLF_IDENTITY(1.0, (1.0) * 1.0), injectionSwitch.y), max(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y))))), 0.0, 1.0)), vec2(mat2x3(injectionSwitch, round(length(normalize(1.0))), _GLF_ONE(1.0, injectionSwitch.y), _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), 1.0)))))) * vec2(1.0, 1.0))))))) / vec2(1.0, 1.0)), injectionSwitch)).x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      continue;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          break;
         break;
        }
       break;
       if(_GLF_DEAD(false))
        continue;
      }
     if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(! (! (_GLF_DEAD(false))), ! (! (_GLF_IDENTITY(! (! (_GLF_DEAD(false))), bool(bvec4(! (! (_GLF_DEAD(false))), true, true, false))))))))
      break;
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))))
      continue;
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_DEAD(false))
          break;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             do
              {
               do
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(injectionSwitch.x > injectionSwitch.y, false, true, true)))) || false)))))
                    continue;
                   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    {
                    }
                   else
                    {
                     for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(2), int(2))); _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 & ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3))))); _injected_loop_counter ++)
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        return;
                       do
                        {
                         for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (true ? int(0) : _GLF_FUZZED(_injected_loop_counter))))) >> _GLF_IDENTITY(int(0), int(0))); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), clamp(int(0), int(0), int(0)))))); _injected_loop_counter --)
                          {
                           return;
                          }
                        }
                       while(_GLF_WRAPPED_LOOP(false));
                       if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
                        break;
                      }
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        {
                        }
                       else
                        {
                         return;
                        }
                      }
                    }
                  }
                 return;
                }
               while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat2(injectionSwitch, 1.0, 0.0)), (vec2(mat2(injectionSwitch, 1.0, 0.0))) / abs(vec2(1.0, 1.0)))).x > injectionSwitch.y)))) || false));
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
          }
        }
       else
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              continue;
             continue;
            }
           if(_GLF_DEAD(false))
            continue;
           return;
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 return;
                }
              }
             return;
            }
           break;
          }
         if(_GLF_DEAD(false))
          return;
        }
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(false))
        break;
      }
     else
      {
       for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), min(int(0), int(0))))) >> _GLF_IDENTITY(int(0), int(0))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
        {
         if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(false, bool(bvec2(false, true))), _GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec3(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))), (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec3(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))), (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec3(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))), (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec3(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))), (injectionSwitch.x > injectionSwitch.y))))) && true)))))), _GLF_IDENTITY(_GLF_IDENTITY(false || (bool(bvec2(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, true)), ! (! (_GLF_IDENTITY(bool(bvec2(false, true)), bool(bool(bool(bvec2(false, true))))))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), (_GLF_IDENTITY(false || (bool(bvec2(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, true)), ! (! (_GLF_IDENTITY(bool(bvec2(false, true)), bool(bool(bool(bvec2(false, true))))))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), (false || (bool(bvec2(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, true)), ! (! (_GLF_IDENTITY(bool(bvec2(false, true)), bool(bool(bool(bvec2(false, true))))))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) && true)) && true), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(false || (bool(bvec2(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, true)), ! (! (_GLF_IDENTITY(bool(bvec2(false, true)), bool(bool(bool(bvec2(false, true))))))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), (_GLF_IDENTITY(false || (bool(bvec2(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, true)), ! (! (_GLF_IDENTITY(bool(bvec2(false, true)), bool(bool(bool(bvec2(false, true))))))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), (false || (bool(bvec2(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, true)), ! (! (_GLF_IDENTITY(bool(bvec2(false, true)), bool(bool(bool(bvec2(false, true))))))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) && true)) && true)), false || (bool(_GLF_IDENTITY(false || (bool(bvec2(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, true)), ! (! (_GLF_IDENTITY(bool(bvec2(false, true)), bool(bool(bool(bvec2(false, true))))))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), (_GLF_IDENTITY(false || (bool(bvec2(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, true)), ! (! (_GLF_IDENTITY(bool(bvec2(false, true)), bool(bool(bool(bvec2(false, true))))))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), (false || (bool(bvec2(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, true)), ! (! (_GLF_IDENTITY(bool(bvec2(false, true)), bool(bool(bool(bvec2(false, true))))))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) && true)) && true)))))))), (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       if(_GLF_DEAD(false))
        break;
      }
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        break;
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         do
          {
           return;
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       else
        {
        }
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    continue;
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(mat3x2(injectionSwitch.x, 1.0, 1.0, 1.0, 0.0, 1.0), _GLF_IDENTITY(mat2(1.0) * (mat3x2(injectionSwitch.x, 1.0, 1.0, 1.0, 0.0, 1.0)), (false ? _GLF_FUZZED(mat3x2(9.4, 6.3, 5223.5714, -609.441, 549.670, 4.3)) : mat2(1.0) * (mat3x2(injectionSwitch.x, 1.0, 1.0, 1.0, 0.0, 1.0))))))) > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), ((injectionSwitch) * mat2(1.0)) + vec2(0.0, 0.0))).x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       return;
      }
    }
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
        {
         if(_GLF_DEAD(false))
          return;
         continue;
        }
       continue;
      }
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > ((11035 & _GLF_IDENTITY(0, clamp(0, 0, _GLF_IDENTITY(0, ~ (~ (0)))))) << _GLF_IDENTITY(int(4), int(4)))); _injected_loop_counter --)
        {
         return;
        }
      }
     else
      {
      }
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0))) > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[_GLF_IDENTITY(1, min(1, 1))], max(injectionSwitch[1], injectionSwitch[1])))), injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(float(false))), vec2(_GLF_FUZZED(-9.0), (injectionSwitch)[1]), bvec2(false, true)))[0], _GLF_IDENTITY(injectionSwitch[1], float(mat2x4(injectionSwitch[1], 0.0, _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(-62.74) : 1.0)), sin(0.0), 0.0, 1.0, 0.0, 0.0))))))).y))) || false)) && true)))
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     return;
    }
   return;
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   else
    {
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   do
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], mix(float(_GLF_FUZZED(1.5)), float(injectionSwitch[0]), bool(true))), _GLF_IDENTITY(injectionSwitch[_GLF_IDENTITY(1, clamp(1, 1, 1))], _GLF_IDENTITY(float(_GLF_IDENTITY(mat4x2(injectionSwitch[_GLF_IDENTITY(1, clamp(1, 1, 1))], 1.0, 0.0, abs(1.0), 0.0, 0.0, 1.0, 0.0), mat4x2(mat4x2(mat4x2(injectionSwitch[_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, clamp(1, _GLF_IDENTITY(1, int(ivec2(1, 0))), _GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(1, min(1, 1)))))), 1, 1))], 1.0, 0.0, abs(1.0), 0.0, 0.0, 1.0, 0.0))))), (float(_GLF_IDENTITY(mat4x2(injectionSwitch[_GLF_IDENTITY(1, clamp(1, 1, 1))], 1.0, 0.0, abs(_GLF_IDENTITY(1.0, max(1.0, 1.0))), 0.0, 0.0, 1.0, 0.0), mat4x2(mat4x2(mat4x2(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch))[_GLF_IDENTITY(1, clamp(1, 1, 1))], 1.0, 0.0, abs(1.0), 0.0, 0.0, 1.0, 0.0)))))) / 1.0)))).y)), (_GLF_IDENTITY(int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], mix(float(_GLF_FUZZED(1.5)), float(injectionSwitch[0]), bool(true))), _GLF_IDENTITY(injectionSwitch[_GLF_IDENTITY(1, clamp(1, 1, 1))], _GLF_IDENTITY(float(_GLF_IDENTITY(mat4x2(injectionSwitch[_GLF_IDENTITY(1, clamp(1, 1, 1))], 1.0, 0.0, abs(1.0), 0.0, 0.0, 1.0, 0.0), mat4x2(mat4x2(mat4x2(injectionSwitch[_GLF_IDENTITY(1, clamp(1, 1, 1))], 1.0, 0.0, abs(1.0), 0.0, 0.0, 1.0, 0.0))))), (float(_GLF_IDENTITY(mat4x2(injectionSwitch[_GLF_IDENTITY(1, clamp(1, 1, 1))], 1.0, 0.0, abs(_GLF_IDENTITY(1.0, max(1.0, 1.0))), 0.0, 0.0, 1.0, 0.0), mat4x2(mat4x2(mat4x2(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch))[_GLF_IDENTITY(1, clamp(1, 1, 1))], 1.0, 0.0, abs(1.0), 0.0, 0.0, 1.0, 0.0)))))) / 1.0)))).y)), (false ? _GLF_FUZZED(_injected_loop_counter) : int(_GLF_ONE(1.0, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), vec2(_GLF_IDENTITY(injectionSwitch[0], mix(float(_GLF_FUZZED(1.5)), float(injectionSwitch[0]), bool(true))), _GLF_IDENTITY(injectionSwitch[_GLF_IDENTITY(1, clamp(1, 1, 1))], _GLF_IDENTITY(float(_GLF_IDENTITY(mat4x2(injectionSwitch[_GLF_IDENTITY(1, clamp(1, 1, 1))], 1.0, 0.0, abs(1.0), 0.0, 0.0, 1.0, 0.0), mat4x2(mat4x2(mat4x2(injectionSwitch[_GLF_IDENTITY(1, clamp(1, 1, 1))], 1.0, 0.0, abs(1.0), 0.0, 0.0, 1.0, 0.0))))), (float(_GLF_IDENTITY(mat4x2(injectionSwitch[_GLF_IDENTITY(1, clamp(1, 1, 1))], 1.0, 0.0, abs(_GLF_IDENTITY(1.0, max(1.0, 1.0))), 0.0, 0.0, 1.0, 0.0), mat4x2(mat4x2(mat4x2(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch))[_GLF_IDENTITY(1, clamp(1, 1, 1))], 1.0, 0.0, abs(1.0), 0.0, 0.0, 1.0, 0.0)))))) / 1.0)))).y))))) | (int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], mix(float(_GLF_FUZZED(1.5)), float(injectionSwitch[0]), bool(true))), _GLF_IDENTITY(injectionSwitch[_GLF_IDENTITY(1, clamp(1, 1, 1))], _GLF_IDENTITY(_GLF_IDENTITY(float(_GLF_IDENTITY(mat4x2(injectionSwitch[_GLF_IDENTITY(1, clamp(1, 1, 1))], 1.0, 0.0, abs(1.0), 0.0, 0.0, 1.0, 0.0), mat4x2(mat4x2(mat4x2(injectionSwitch[_GLF_IDENTITY(1, clamp(1, 1, 1))], 1.0, 0.0, abs(1.0), 0.0, 0.0, 1.0, 0.0))))), (float(_GLF_IDENTITY(mat4x2(injectionSwitch[_GLF_IDENTITY(1, clamp(1, 1, 1))], 1.0, 0.0, abs(_GLF_IDENTITY(1.0, max(1.0, 1.0))), 0.0, 0.0, 1.0, 0.0), mat4x2(mat4x2(mat4x2(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch))[_GLF_IDENTITY(1, clamp(1, 1, 1))], 1.0, 0.0, abs(1.0), 0.0, 0.0, 1.0, 0.0)))))) / 1.0), max(_GLF_IDENTITY(float(_GLF_IDENTITY(mat4x2(injectionSwitch[_GLF_IDENTITY(1, clamp(1, 1, 1))], 1.0, 0.0, abs(1.0), 0.0, 0.0, 1.0, 0.0), mat4x2(mat4x2(mat4x2(injectionSwitch[_GLF_IDENTITY(1, clamp(1, 1, 1))], 1.0, 0.0, abs(1.0), 0.0, 0.0, 1.0, 0.0))))), (float(_GLF_IDENTITY(mat4x2(injectionSwitch[_GLF_IDENTITY(1, clamp(1, 1, 1))], 1.0, 0.0, abs(_GLF_IDENTITY(1.0, max(1.0, 1.0))), 0.0, 0.0, 1.0, 0.0), mat4x2(mat4x2(mat4x2(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch))[_GLF_IDENTITY(1, clamp(1, 1, 1))], 1.0, 0.0, abs(1.0), 0.0, 0.0, 1.0, 0.0)))))) / 1.0), _GLF_IDENTITY(float(_GLF_IDENTITY(mat4x2(injectionSwitch[_GLF_IDENTITY(1, clamp(1, 1, 1))], 1.0, 0.0, abs(1.0), 0.0, 0.0, 1.0, 0.0), mat4x2(mat4x2(mat4x2(injectionSwitch[_GLF_IDENTITY(1, clamp(1, 1, 1))], 1.0, 0.0, abs(1.0), 0.0, 0.0, 1.0, 0.0))))), (float(_GLF_IDENTITY(mat4x2(injectionSwitch[_GLF_IDENTITY(1, clamp(1, 1, 1))], 1.0, 0.0, abs(_GLF_IDENTITY(1.0, max(1.0, 1.0))), 0.0, 0.0, 1.0, 0.0), mat4x2(mat4x2(mat4x2(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch))[_GLF_IDENTITY(1, clamp(1, 1, 1))], 1.0, 0.0, abs(1.0), 0.0, 0.0, 1.0, 0.0)))))) / 1.0)))))).y))))); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y))))))
        break;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec3(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y)))) || false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))
          return;
         if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_DEAD(false), true, false))))
          return;
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
           continue;
          }
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, ! (! (false)))), (! (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false)))))))) || false))), (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y, mix(float(_GLF_FUZZED(float(94741u))), float(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y, clamp(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y, mix(float(_GLF_FUZZED(-305.620)), float(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y), bool(true))), _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y))), bool(true)))))))
          break;
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              break;
             return;
            }
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(false))
            continue;
           continue;
          }
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             return;
            }
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
           continue;
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, false), bvec3(bvec3(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, false))))), true && (bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, false)))))))))
            break;
          }
        }
       else
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec2(false, false)))) && true)))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))))
            return;
           return;
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)), bool(bool(_GLF_DEAD(false)))))
      break;
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), bool(bvec3(false, false, true))), (injectionSwitch.x > injectionSwitch.y))));
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bool(injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(bool(bool(injectionSwitch.x > injectionSwitch.y)), true), bvec2(bvec3(bvec2(bool(bool(injectionSwitch.x > injectionSwitch.y)), true), true)))), (bool(_GLF_IDENTITY(bvec2(bool(bool(injectionSwitch.x > injectionSwitch.y)), true), bvec2(bvec3(bvec2(bool(bool(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-2.5), _GLF_FUZZED(3.2)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))) - vec2(0.0, 0.0)).x > injectionSwitch.y)), true), true))))) || false)))))))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     do
      {
       if(_GLF_DEAD(false))
        return;
      }
     while(_GLF_WRAPPED_LOOP(false));
     do
      {
       return;
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(false))
      return;
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bool(true)))))
      {
       if(_GLF_DEAD(false))
        return;
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      return;
    }
  }
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY((false), false || (_GLF_IDENTITY((false), ((false)) || false))) || false), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, _GLF_IDENTITY((false) || false, ((false) || false) || false)), false, false), bvec3(bvec3(bvec3(_GLF_IDENTITY(false, (false) || _GLF_IDENTITY(false, false || (false))), false, false))))), (bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, (false) || false), false, false), bvec3(bvec3(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec2(false, true))), (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec2(false, true))), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(false, bool(bvec2(false, true))), false, false, false)), (bool(bvec4(_GLF_IDENTITY(false, bool(bvec2(false, true))), false, false, false))) || false))) || false), (false) || false), false, false)))))) || false))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       return;
      }
    }
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bvec4(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec3(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)), (bool(bvec3(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))) && true)), false, true, true)))))
    {
     return;
    }
   else
    {
    }
  }
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       return;
      }
     else
      {
      }
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         return;
        }
      }
     return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         do
          {
           return;
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
     return;
    }
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bvec4(false, true, false, false)))), false || (! (_GLF_IDENTITY(false, bool(bvec4(false, true, false, false))))))))))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   else
    {
    }
   return;
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         return;
        }
      }
    }
   else
    {
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       return;
      }
     if(_GLF_DEAD(false))
      return;
    }
   return;
   if(_GLF_DEAD(false))
    return;
  }
 for(int _injected_loop_counter = (0 ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    return;
  }
 for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, max(0, 0))); _injected_loop_counter --)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec3((injectionSwitch.x > injectionSwitch.y), true, true))))))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(false), bool(bvec3(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (false))))))), _GLF_IDENTITY((bool(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (false)))))))) && true, ! (! ((bool(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (false)))))))) && true)))), true, false))), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(bool(false), bool(bvec3(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (false))))))), (bool(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (false)))))))) && true), true, false))), false || (_GLF_IDENTITY(bool(false), bool(bvec3(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (false))))))), (bool(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (false)))))))) && true), true, false))))), false, _GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bool(! (false)))))), (injectionSwitch.x > injectionSwitch.y)), true)), (bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(bool(false), bool(bvec3(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (false))))))), (bool(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || ((false)))))))))) && true), true, false))), false || (_GLF_IDENTITY(bool(false), bool(bvec3(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (false))))))), (bool(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (false)))))))) && true), _GLF_IDENTITY(true, _GLF_IDENTITY(false, ! (! (false))) || (true)), false))))), false, _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + log(1.0)))), true))) || false))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))
      continue;
     do
      {
       return;
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
  }
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = workgroup_size * workgroup_id;
 uint subgroup_base = subgroup_id * _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, uint(uvec3(subgroup_size, uint(_GLF_ONE(1.0, injectionSwitch.y)), 1u))), (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, clamp(_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, max(subgroup_size, subgroup_size))) | (subgroup_size)), subgroup_size, subgroup_size)), uint(uvec3(subgroup_size, uint(_GLF_ONE(1.0, injectionSwitch.y)), 1u)))) >> 0u);
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) + tan(vec2(0.0, 0.0))).y)))))))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  {
   do
    {
     return;
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 do
  {
   if(_GLF_DEAD(false))
    continue;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x)) > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         return;
        }
      }
     else
      {
       return;
      }
     if(_GLF_DEAD(false))
      break;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    continue;
  }
 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), (_GLF_IDENTITY(false, ! (! (false)))) || false)));
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
  }
 else
  {
  }
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(true, (true) && true) && ((injectionSwitch.x > injectionSwitch.y))))))
    return;
  }
 uint virtual_gid = workgroup_base + subgroup_base + subgroup_local_id;
 uint next_virtual_gid = workgroup_base + subgroup_base + ((subgroup_local_id + 1) % subgroup_size);
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     for(int _injected_loop_counter = _GLF_IDENTITY(_GLF_IDENTITY(0, clamp(0, 0, _GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) >> 0)) / 1))), (_GLF_IDENTITY(0, max(0, 0))) ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           return;
          }
         else
          {
          }
        }
       return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          continue;
         return;
        }
      }
    }
   do
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        return;
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 atomicStore(buf[virtual_gid], uint(1), 4, 64, _GLF_IDENTITY(4, clamp(4, _GLF_IDENTITY(_GLF_IDENTITY(4, min(4, _GLF_IDENTITY(_GLF_IDENTITY(4, (_GLF_IDENTITY(4, (true ? 4 : _GLF_FUZZED(-60775)))) | (4)), (_GLF_IDENTITY(4, (_GLF_IDENTITY(4, (true ? 4 : _GLF_FUZZED(-60775)))) | (4))) + 0))), (false ? _GLF_FUZZED(-83529) : 4)), 4)));
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, vec2(mat3x4(injectionSwitch, 0.0, 0.0, 0.0, tan(0.0), 1.0, 0.0, 1.0, abs(1.0), sqrt(0.0), 0.0))), injectionSwitch, injectionSwitch)).y))))))
  return;
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
    }
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
  return;
 if(_GLF_DEAD(false))
  return;
 if((subgroup_local_id % 2) == _GLF_IDENTITY(0, ~ (~ (0))))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))
    return;
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           atomicStore(buf[next_virtual_gid], _GLF_IDENTITY(uint(2), uint(uvec4(uint(2), 1u, 1u, (194549u & _GLF_IDENTITY(0u, uint(_GLF_IDENTITY(uvec4(0u, 1u, 0u, 1u), max(uvec4(0u, 1u, 0u, 1u), _GLF_IDENTITY(uvec4(0u, 1u, 0u, 1u), (uvec4(0u, 1u, 0u, 1u)) * uvec4(1u, 1u, 1u, 1u)))))))))), 4, 64, 4);
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               return;
              }
             else
              {
              }
            }
          }
         else
          {
          }
         for(int _injected_loop_counter = (0 | int(_GLF_ZERO(0.0, injectionSwitch.x))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              return;
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                  {
                   if(_GLF_DEAD(false))
                    return;
                  }
                }
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(false))
                return;
               return;
              }
             else
              {
              }
             for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 & -63134)); _injected_loop_counter --)
              {
               if(_GLF_DEAD(false))
                return;
              }
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                return;
               return;
              }
            }
          }
         for(int _injected_loop_counter = (1 & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec3(true, false, false), bvec3(bvec4(bvec3(true, false, false), true)))))))
            {
             if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  continue;
                 break;
                }
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3)))); _injected_loop_counter ++)
                {
                 return;
                }
              }
            }
           else
            {
            }
          }
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), (int(1)) | (int(1))))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
              return;
            }
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(false))
              return;
            }
           else
            {
            }
           return;
          }
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            return;
          }
         do
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
             return;
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       else
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            return;
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           return;
          }
        }
      }
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     atomicStore(buf[next_virtual_gid], uint(2), 4, 64, 4);
    }
   else
    {
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (false))))))))
    return;
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   do
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        break;
       return;
      }
    }
   while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), false || (_GLF_WRAPPED_LOOP(false))));
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) || false)), bool(bool(_GLF_DEAD(false)))))))
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         return;
        }
       for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 | int(_GLF_ZERO(0.0, injectionSwitch.x)))); _injected_loop_counter --)
        {
         return;
        }
      }
    }
   return;
  }
 do
  {
   do
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(true && (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), bool(bool(_GLF_IDENTITY(bool(false), false || (bool(false))))))))), _GLF_IDENTITY(! (! (_GLF_IDENTITY(true && (false), false || (_GLF_IDENTITY(true && (false), false || (true && (false))))))), (! (! (true && (false)))) || false)))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
           break;
          }
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           return;
          }
        }
       return;
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bvec3(false, true, true)))));
   if(_GLF_DEAD(false))
    break;
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (injectionSwitch.x > injectionSwitch.y))))
    continue;
  }
 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, ! (! (false))), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x)) > injectionSwitch.y)), true), bvec3(bvec4(bvec3(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), true))))), _GLF_IDENTITY(! (! (false)), false || (_GLF_IDENTITY(! (! (false)), (! (! (false))) && true))))));
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   do
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), int(ivec2(int(_GLF_ZERO(0.0, injectionSwitch.x)), (17692 & 0)))), (_GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), int(ivec2(int(_GLF_ZERO(0.0, injectionSwitch.x)), (17692 & 0)))), min(_GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), int(ivec2(int(_GLF_ZERO(0.0, injectionSwitch.x)), (17692 & 0)))), _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), int(ivec2(int(_GLF_ZERO(0.0, injectionSwitch.x)), (17692 & 0))))))) | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              break;
             return;
            }
          }
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             for(int _injected_loop_counter = _GLF_IDENTITY(1, (1) + 0); _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
              {
               return;
              }
            }
           return;
          }
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_DEAD(false))
          continue;
        }
      }
     else
      {
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bool(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec2(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y))))), bool(bvec3(bool(bool(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y))))), true, true)))), true))))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bool(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec2(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y))))), bool(bvec3(bool(bool(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y))))), true, true)))), true))))))))), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, false)))));
  }
 else
  {
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   do
    {
     return;
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, _GLF_IDENTITY(false || (_GLF_IDENTITY(false, (false) || false)), (false || (_GLF_IDENTITY(false, (false) || false))) || false))));
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   return;
   do
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
 if(_GLF_DEAD(false))
  return;
 do
  {
   for(int _injected_loop_counter = (1 | int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))).y))); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, int(ivec2(_injected_loop_counter, 1))) != ((1 ^ 1) >> _GLF_IDENTITY(int(7), _GLF_IDENTITY(_GLF_IDENTITY(int(7), _GLF_IDENTITY((int(7)) | (int(7)), ((int(7)) | (int(7))) | (_GLF_IDENTITY((int(7)) | (int(7)), ((int(7)) | (int(7))) ^ 0)))), ~ (~ (int(7))))))), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(((1 ^ _GLF_IDENTITY(1, ~ (~ (1)))) >> _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), ~ (~ (int(7)))))), 0 | ((_GLF_IDENTITY((1 ^ 1), ((1 ^ 1)) | ((1 ^ 1))) >> _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), ~ (~ (int(7))))))))), _GLF_IDENTITY(bool(bvec2(_GLF_WRAPPED_LOOP(_injected_loop_counter != ((_GLF_IDENTITY(1 ^ 1, min(1 ^ 1, _GLF_IDENTITY(1 ^ 1, (true ? 1 ^ 1 : _GLF_FUZZED(_GLF_IDENTITY(_injected_loop_counter, int(ivec3(_injected_loop_counter, 1, _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), min(int(_GLF_ZERO(0.0, injectionSwitch.x)), int(_GLF_ZERO(0.0, injectionSwitch.x))))))))))))) >> _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), ~ (~ _GLF_IDENTITY((int(7)), (_GLF_IDENTITY((int(7)), 0 | ((int(7))))) >> 0)))))), _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), true && (! (true))))))), _GLF_IDENTITY(bool(bool(bool(bvec2(_GLF_WRAPPED_LOOP(_injected_loop_counter != ((_GLF_IDENTITY(1 ^ 1, min(1 ^ 1, _GLF_IDENTITY(1 ^ 1, (true ? 1 ^ 1 : _GLF_FUZZED(_GLF_IDENTITY(_injected_loop_counter, int(ivec3(_injected_loop_counter, 1, int(_GLF_ZERO(0.0, injectionSwitch.x))))))))))) >> _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), ~ (~ (int(_GLF_IDENTITY(7, clamp(7, 7, 7))))))))), _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), true && (! (true))))))))), false || (bool(bool(bool(bvec2(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != ((_GLF_IDENTITY(1 ^ 1, min(1 ^ 1, _GLF_IDENTITY(1 ^ 1, (true ? 1 ^ 1 : _GLF_FUZZED(_GLF_IDENTITY(_injected_loop_counter, int(ivec3(_injected_loop_counter, 1, int(_GLF_ZERO(0.0, injectionSwitch.x))))))))))) >> _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), ~ (~ (int(7))))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_WRAPPED_LOOP(_injected_loop_counter != ((_GLF_IDENTITY(1 ^ 1, min(1 ^ 1, _GLF_IDENTITY(1 ^ 1, (true ? 1 ^ 1 : _GLF_FUZZED(_GLF_IDENTITY(_injected_loop_counter, int(ivec3(_injected_loop_counter, 1, int(_GLF_ZERO(0.0, injectionSwitch.x))))))))))) >> _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), ~ (~ (int(7))))))))), _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), true && (! (true))))))))))))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != ((_GLF_IDENTITY(1 ^ 1, _GLF_IDENTITY(_GLF_IDENTITY((false ? _GLF_FUZZED(int(1.2)) : 1 ^ 1), (60692 & int(_GLF_ZERO(0.0, injectionSwitch.x))) | (_GLF_IDENTITY((false ? _GLF_FUZZED(int(1.2)) : 1 ^ 1), (true ? (false ? _GLF_FUZZED(int(1.2)) : 1 ^ 1) : _GLF_FUZZED(_injected_loop_counter))))), 0 | (_GLF_IDENTITY((false ? _GLF_FUZZED(int(1.2)) : 1 ^ 1), max((false ? _GLF_FUZZED(int(1.2)) : 1 ^ 1), (false ? _GLF_FUZZED(int(_GLF_IDENTITY(1.2, (true ? 1.2 : _GLF_FUZZED(float((_injected_loop_counter ^ _injected_loop_counter))))))) : 1 ^ 1))))))) >> _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), ~ (_GLF_IDENTITY(~ (int(7)), int(ivec2(_GLF_IDENTITY(~ (int(7)), (~ (int(7))) ^ 0), 1)))))))), bool(bvec2(_GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 ^ _GLF_IDENTITY(1, max(1, 1))) >> _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), ~ (~ (int(7))))))), true))), false || (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != _GLF_IDENTITY(((1 ^ 1) >> _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), ~ (~ _GLF_IDENTITY((int(7)), max((int(7)), _GLF_IDENTITY((int(7)), ((int(7))) | (0 | 0)))))))), (((1 ^ 1) >> _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), ~ (~ _GLF_IDENTITY((int(7)), max((int(7)), _GLF_IDENTITY((int(7)), ((int(7))) | (0 | 0))))))))) + 0), false || (_GLF_IDENTITY(_injected_loop_counter, 0 ^ (_GLF_IDENTITY(_injected_loop_counter, 0 | (_injected_loop_counter)))) != ((1 ^ 1) >> _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), _GLF_IDENTITY(~ (~ (int(_GLF_IDENTITY(7, clamp(_GLF_IDENTITY(7, min(7, 7)), _GLF_IDENTITY(7, (7) / 1), 7))))), (true ? ~ (~ (int(7))) : _GLF_FUZZED(_injected_loop_counter))))))))), bool(bvec2(_GLF_WRAPPED_LOOP(_injected_loop_counter != ((_GLF_IDENTITY(1 ^ 1, ~ (~ (1 ^ 1)))) >> _GLF_IDENTITY(int(7), _GLF_IDENTITY(_GLF_IDENTITY(int(7), (int(7)) ^ int(_GLF_ZERO(0.0, injectionSwitch.x))), ~ (~ (int(7))))))), true)))))) && true)), bool(bvec3(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (true ? _GLF_IDENTITY(_injected_loop_counter, ~ (_GLF_IDENTITY(~ (_injected_loop_counter), (~ (_injected_loop_counter)) | 0))) : _GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(_injected_loop_counter), max(_GLF_IDENTITY(_GLF_FUZZED(_injected_loop_counter), (true ? _GLF_IDENTITY(_GLF_FUZZED(_injected_loop_counter), (_GLF_FUZZED(_injected_loop_counter)) << 0) : _GLF_FUZZED(-89008))), _GLF_FUZZED(_injected_loop_counter))), (_GLF_IDENTITY(_GLF_FUZZED(_injected_loop_counter), max(_GLF_IDENTITY(_GLF_FUZZED(_injected_loop_counter), (true ? _GLF_IDENTITY(_GLF_FUZZED(_injected_loop_counter), (_GLF_FUZZED(_injected_loop_counter)) << 0) : _GLF_FUZZED(-89008))), _GLF_FUZZED(_injected_loop_counter)))) ^ (0 >> _GLF_IDENTITY(int(3), int(3)))))) != ((1 ^ 1) >> _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), ~ (~ (int(7))))))), bool(bvec2(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != ((1 ^ 1) >> _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), ~ (~ _GLF_IDENTITY((int(7)), ((int(7))) * 1))))), (_injected_loop_counter != (_GLF_IDENTITY((1 ^ 1) >> _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), ~ (~ (_GLF_IDENTITY(int(7), max(_GLF_IDENTITY(int(7), min(int(7), int(7))), int(7))))))), ((1 ^ 1) >> _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), ~ (~ _GLF_IDENTITY((_GLF_IDENTITY(int(7), max(_GLF_IDENTITY(int(7), min(int(7), int(7))), int(7)))), min((_GLF_IDENTITY(int(7), max(_GLF_IDENTITY(int(7), min(int(7), int(7))), int(7)))), _GLF_IDENTITY((_GLF_IDENTITY(int(7), max(_GLF_IDENTITY(int(7), min(int(7), int(7))), int(7)))), max((_GLF_IDENTITY(int(7), max(_GLF_IDENTITY(int(7), min(int(7), int(7))), int(7)))), (_GLF_IDENTITY(int(7), max(_GLF_IDENTITY(int(7), min(int(7), int(7))), int(7)))))))))))) | (_GLF_IDENTITY((1 ^ 1) >> _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), ~ (~ (_GLF_IDENTITY(int(7), max(_GLF_IDENTITY(int(7), min(int(7), int(7))), int(7))))))), min((1 ^ 1) >> _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), ~ (~ (_GLF_IDENTITY(int(7), max(_GLF_IDENTITY(int(7), min(int(7), int(7))), int(7))))))), (1 ^ 1) >> _GLF_IDENTITY(int(7), _GLF_IDENTITY(_GLF_IDENTITY(int(7), ~ (~ (_GLF_IDENTITY(int(7), max(_GLF_IDENTITY(int(7), min(int(7), int(7))), int(7)))))), (_GLF_IDENTITY(int(7), ~ (~ (_GLF_IDENTITY(int(7), max(_GLF_IDENTITY(int(7), min(int(7), int(7))), int(7))))))) | (_GLF_IDENTITY(_GLF_IDENTITY(int(7), ~ (~ (_GLF_IDENTITY(int(7), max(_GLF_IDENTITY(int(7), min(int(7), int(7))), int(7)))))), (_GLF_IDENTITY(int(7), ~ (~ (_GLF_IDENTITY(int(7), max(_GLF_IDENTITY(int(7), min(int(7), int(7))), int(7))))))) - 0)))))))))) || false)), _GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(true, (true) || false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec2(bvec3(bvec2(_GLF_IDENTITY(true, (true) || false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true)))))))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 ^ 1) >> _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_IDENTITY(7, _GLF_IDENTITY(int(int(7)), int(ivec3(int(int(7)), 1, (_GLF_IDENTITY(0, max(_GLF_IDENTITY(0, ~ (_GLF_IDENTITY(~ (0), 0 + (~ (0))))), _GLF_IDENTITY(0, (0) + 0))) | _GLF_IDENTITY(0, (0) >> int(_GLF_ZERO(0.0, injectionSwitch.x)))))))), ~ (~ (7)))), ~ (~ (int(7))))))), bool(bvec2(_GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 ^ 1) >> _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), ~ (_GLF_IDENTITY(~ (int(7)), ~ (~ (~ _GLF_IDENTITY((int(7)), ((int(7))) / 1))))))))), _GLF_IDENTITY(true, (_GLF_IDENTITY(true, ! (! (true)))) || _GLF_IDENTITY(false, bool(bvec3(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))))))), _GLF_IDENTITY(false || (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 ^ 1) >> _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_IDENTITY(7, 0 | (7)), (_GLF_IDENTITY(7, 0 | (7))) - (0 & -81705))), ~ (~ (int(7))))))), bool(bvec2(_GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 ^ 1) >> _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), ~ (~ (int(7))))))), true)))), (false || (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 ^ 1) >> _GLF_IDENTITY(_GLF_IDENTITY(int(7), _GLF_IDENTITY(int(_GLF_IDENTITY(7, 0 | (_GLF_IDENTITY(7, 0 | (7))))), ~ (~ (int(7))))), (_GLF_IDENTITY(_GLF_IDENTITY(int(7), _GLF_IDENTITY(int(_GLF_IDENTITY(7, 0 | (_GLF_IDENTITY(7, 0 | (7))))), ~ (~ _GLF_IDENTITY((int(7)), ((int(7))) + (0 | 0))))), (false ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(_GLF_IDENTITY(7, 0 | (_GLF_IDENTITY(7, 0 | (7))))), ~ (~ (int(7)))))))) * int(_GLF_ONE(1.0, injectionSwitch.y))))), bool(bvec2(_GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 ^ _GLF_IDENTITY(1, max(1, _GLF_IDENTITY(1, (1) | 0)))) >> _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), ~ (~ (int(7))))))), true))))) || false))) && true)), (bool(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) - (0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), (_GLF_IDENTITY(int(1), (int(1)) * 1)) ^ 0)), int(int(_GLF_IDENTITY(_GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), (int(1)) ^ 0)), 0 ^ (_GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), (int(1)) ^ 0))))))))) != ((1 ^ 1) >> _GLF_IDENTITY(_GLF_IDENTITY(int(7), (_GLF_IDENTITY(int(7), (int(7)) << 0)) - 0), _GLF_IDENTITY(int(7), ~ (~ _GLF_IDENTITY((_GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(7, int(ivec2(7, 0))), 1 * (_GLF_IDENTITY(7, max(_GLF_IDENTITY(7, ~ (~ (7))), 7)))), (_GLF_IDENTITY(7, (_GLF_IDENTITY(7, 0 + (7))) * 1)) | 0)), (_GLF_IDENTITY(int(_GLF_IDENTITY(7, (_GLF_IDENTITY(7, (_GLF_IDENTITY(7, 0 + (7))) * 1)) | 0)), max(int(_GLF_IDENTITY(7, (_GLF_IDENTITY(7, _GLF_IDENTITY((_GLF_IDENTITY(7, 0 + (7))), 0 | ((_GLF_IDENTITY(7, 0 + (7))))) * 1)) | 0)), int(_GLF_IDENTITY(7, (_GLF_IDENTITY(7, (_GLF_IDENTITY(7, 0 + (7))) * 1)) | 0))))) | (int(_GLF_IDENTITY(7, (_GLF_IDENTITY(7, (_GLF_IDENTITY(7, _GLF_IDENTITY(0 + (7), int(_GLF_IDENTITY(ivec2(0 + (7), 1), (ivec2(0 + (7), 1)) | (ivec2(0 + (7), 1))))))) * 1)) | 0))))), ~ (~ (_GLF_IDENTITY((_GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_IDENTITY(7, 1 * (_GLF_IDENTITY(7, max(_GLF_IDENTITY(7, ~ (~ (7))), 7)))), (_GLF_IDENTITY(7, (_GLF_IDENTITY(7, 0 + (7))) * 1)) | 0)), (_GLF_IDENTITY(int(_GLF_IDENTITY(7, _GLF_IDENTITY((_GLF_IDENTITY(7, (_GLF_IDENTITY(7, 0 + (7))) * 1)) | 0, (_GLF_IDENTITY((_GLF_IDENTITY(7, (_GLF_IDENTITY(7, 0 + (7))) * 1)) | 0, ((_GLF_IDENTITY(7, (_GLF_IDENTITY(7, 0 + (7))) * 1)) | 0) - 0)) << 0))), max(int(_GLF_IDENTITY(7, (_GLF_IDENTITY(7, (_GLF_IDENTITY(7, 0 + (7))) * 1)) | 0)), int(_GLF_IDENTITY(7, (_GLF_IDENTITY(7, (_GLF_IDENTITY(7, 0 + (7))) * 1)) | 0))))) | (int(_GLF_IDENTITY(7, (_GLF_IDENTITY(7, (_GLF_IDENTITY(7, 0 + (7))) * 1)) | 0))))), ((_GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(7, 1 * (_GLF_IDENTITY(7, max(_GLF_IDENTITY(7, ~ (~ (7))), 7)))), (_GLF_IDENTITY(7, 1 * (_GLF_IDENTITY(7, max(_GLF_IDENTITY(7, ~ (~ (7))), 7))))) | (_GLF_IDENTITY(_GLF_IDENTITY(7, 1 * (_GLF_IDENTITY(7, max(_GLF_IDENTITY(7, ~ (~ (7))), 7)))), (_GLF_IDENTITY(7, 1 * (_GLF_IDENTITY(7, max(_GLF_IDENTITY(7, ~ (~ (7))), 7))))) | 0))), (_GLF_IDENTITY(7, (_GLF_IDENTITY(7, 0 + (7))) * 1)) | 0)), (_GLF_IDENTITY(int(_GLF_IDENTITY(7, (_GLF_IDENTITY(7, (_GLF_IDENTITY(7, 0 + (7))) * 1)) | 0)), max(int(_GLF_IDENTITY(7, (_GLF_IDENTITY(7, (_GLF_IDENTITY(7, 0 + (7))) * 1)) | 0)), int(_GLF_IDENTITY(7, (_GLF_IDENTITY(7, (_GLF_IDENTITY(7, 0 + (7))) * 1)) | 0))))) | (int(_GLF_IDENTITY(7, (_GLF_IDENTITY(7, (_GLF_IDENTITY(7, 0 + (7))) * 1)) | 0)))))) | 0))))))))), _GLF_IDENTITY(bool(bvec2(_GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 ^ 1) >> _GLF_IDENTITY(int(7), _GLF_IDENTITY(_GLF_IDENTITY(int(7), int(ivec2(int(7), 0))), _GLF_IDENTITY(~ (~ (_GLF_IDENTITY(int(7), ~ (~ (int(7)))))), 0 ^ (~ (~ (int(7))))))))), true)), bool(bvec4(_GLF_IDENTITY(bool(bvec2(_GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 ^ 1) >> _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), ~ _GLF_IDENTITY((~ (int(7))), ~ (~ ((~ (int(7)))))))))), true)), ! (! (bool(bvec2(_GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 ^ 1) >> _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), ~ (~ (_GLF_IDENTITY(int(7), max(_GLF_IDENTITY(int(7), ~ (~ (int(7)))), int(7))))))))), true))))), _GLF_IDENTITY(true, true && (true)), false, false)))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != (_GLF_IDENTITY((1 ^ 1), ((1 ^ _GLF_IDENTITY(1, (1) / 1))) << 0) >> _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), ~ (~ (int(7))))))), true && (_GLF_WRAPPED_LOOP(_injected_loop_counter != (_GLF_IDENTITY((1 ^ 1), ((1 ^ 1)) << 0) >> _GLF_IDENTITY(_GLF_IDENTITY(int(7), int(_GLF_IDENTITY(ivec4(int(7), 0, 1, 1), ~ (~ (_GLF_IDENTITY(ivec4(int(7), 0, _GLF_IDENTITY(1, 0 + (1)), 1), ivec4(0, 0, 0, 0) ^ (ivec4(int(7), 0, 1, 1)))))))), _GLF_IDENTITY(int(7), ~ (_GLF_IDENTITY(~ (int(7)), (~ (int(7))) * 1)))))))), _GLF_IDENTITY(bool(bvec2(_GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 ^ 1) >> _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(_GLF_IDENTITY(7, 1 * (7))), ~ (~ (int(7))))))), true)), ! (! (_GLF_IDENTITY(bool(bvec2(_GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 ^ 1) >> _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(_GLF_IDENTITY(7, 1 * (7))), ~ (~ (int(7))))))), true)), (bool(bvec2(_GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 ^ 1) >> _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(_GLF_IDENTITY(7, 1 * (7))), ~ (~ (int(7))))))), true))) && true))))), false || (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 ^ 1) >> _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), ~ (~ (int(7))))))), bool(bvec2(_GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 ^ 1) >> _GLF_IDENTITY(int(7), _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(7, min(7, 7))), _GLF_IDENTITY(~ (~ (int(7))), (~ (~ (int(7)))) / 1)), (_GLF_IDENTITY(int(7), ~ (~ (int(7))))) | int(_GLF_ZERO(0.0, injectionSwitch.x)))))), _GLF_IDENTITY(true, bool(bvec4(true, false, _GLF_IDENTITY(true, (true) && true), true))))))))) && true), bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 ^ 1) >> _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), _GLF_IDENTITY(~ (~ (int(7))), (0 | 0) | (~ (~ (int(7))))))))), bool(bvec2(_GLF_WRAPPED_LOOP(_injected_loop_counter != (_GLF_IDENTITY((1 ^ 1), ~ (~ ((1 ^ 1)))) >> _GLF_IDENTITY(int(7), _GLF_IDENTITY(_GLF_IDENTITY(int(7), ~ (~ (int(7)))), (0 << _GLF_IDENTITY(int(4), int(4))) ^ (_GLF_IDENTITY(int(7), ~ (~ (int(7))))))))), true))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 ^ 1) >> _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), ~ (~ (int(7))))))), bool(bvec2(_GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 ^ 1) >> _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), ~ (~ _GLF_IDENTITY((int(7)), ((int(7))) >> (0 | 0))))))), true))), false || (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != ((_GLF_IDENTITY(_GLF_IDENTITY(1, 0 | (1)), min(_GLF_IDENTITY(_GLF_IDENTITY(1, 0 | (1)), (_GLF_IDENTITY(1, 0 | (1))) | (_GLF_IDENTITY(1, 0 | (1)))), _GLF_IDENTITY(_GLF_IDENTITY(1, 0 | (1)), min(_GLF_IDENTITY(1, 0 | (1)), _GLF_IDENTITY(1, 0 | (1)))))) ^ 1) >> _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), ~ (~ (int(7))))))), bool(_GLF_IDENTITY(bvec2(_GLF_WRAPPED_LOOP(_injected_loop_counter != ((_GLF_IDENTITY(1 ^ 1, (0 | 1) * (1 ^ 1))) >> _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), ~ (~ (int(7))))))), true), bvec2(bvec4(bvec2(_GLF_WRAPPED_LOOP(_injected_loop_counter != ((_GLF_IDENTITY(1 ^ 1, (0 | 1) * (1 ^ 1))) >> _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), ~ (~ (int(7))))))), true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))))))) && true), bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 ^ 1) >> _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), ~ (~ (int(_GLF_IDENTITY(7, min(7, _GLF_IDENTITY(7, (7) | (0 << _GLF_IDENTITY(int(4), int(4))))))))))))), bool(bvec2(_GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 ^ 1) >> _GLF_IDENTITY(_GLF_IDENTITY(int(7), int(_GLF_IDENTITY(ivec2(_GLF_IDENTITY(int(7), int(int(int(7)))), 1), (ivec2(_GLF_IDENTITY(int(7), int(int(int(7)))), 1)) | ivec2(0, 0)))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(7), min(int(7), int(7))), _GLF_IDENTITY(0, ~ (~ (_GLF_IDENTITY(0, clamp(0, _GLF_IDENTITY(0, (0) / 1), 0))))) | (int(7))), ~ _GLF_IDENTITY((~ (_GLF_IDENTITY(int(7), (int(7)) | (int(7))))), (_GLF_IDENTITY((~ (_GLF_IDENTITY(int(7), (int(7)) | (int(7))))), int(ivec4((~ (_GLF_IDENTITY(int(7), (int(7)) | (int(7))))), 0, 1, 0)))) | 0))))), true))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_GLF_IDENTITY(_injected_loop_counter, min(_injected_loop_counter, _injected_loop_counter))) | (_injected_loop_counter)) != (_GLF_IDENTITY((1 ^ 1) >> _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), ~ (~ (int(7))))), ((1 ^ 1) >> _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), ~ (~ (int(7)))))) | _GLF_IDENTITY((_GLF_IDENTITY((1 ^ 1) >> _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), ~ (~ (int(7))))), (true ? (1 ^ 1) >> _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), ~ (~ (int(7))))) : _GLF_FUZZED((~ 11165))))), (_GLF_IDENTITY((_GLF_IDENTITY((_GLF_IDENTITY(1, (1) << 0) ^ 1) >> _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), ~ (~ (int(7))))), (true ? (1 ^ 1) >> _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), ~ (~ (int(7))))) : _GLF_FUZZED((~ 11165))))), ((_GLF_IDENTITY((1 ^ 1) >> _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), ~ _GLF_IDENTITY((~ (int(7))), ((~ (int(7)))) ^ 0))), (true ? (1 ^ 1) >> _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), ~ (~ (int(7))))) : _GLF_FUZZED((~ 11165)))))) / 1)) / 1)))), bool(bvec2(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 ^ 1) >> _GLF_IDENTITY(_GLF_IDENTITY(int(7), (_GLF_IDENTITY(int(7), (int(7)) / 1)) + 0), _GLF_IDENTITY(int(7), ~ (~ (int(7))))))), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 ^ _GLF_IDENTITY(1, (0 ^ 0) + (1))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(7), min(int(7), int(7))), _GLF_IDENTITY(int(7), ~ (~ (int(7)))))))))), true))), false || (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 ^ 1) >> _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), ~ (~ (int(7))))))), bool(bvec2(_GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 ^ 1) >> _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), ~ (~ (int(7))))))), true)))))) && true)))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))) || false), true, false))))); _injected_loop_counter --)
    {
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bool(bvec4(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, false, false)), ! (! (bool(bvec4(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)), (_GLF_IDENTITY(bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)), (bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))) && true)) && true))), true, false, false)))))))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec3(injectionSwitch.x > injectionSwitch.y, false, false)))) || false)))))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
          continue;
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch : _GLF_FUZZED(injectionSwitch))).x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0))))))))
          {
           if(_GLF_DEAD(false))
            break;
           break;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
          }
         return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
        }
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
         break;
        }
       do
        {
         return;
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) && true)));
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1]))) * vec2(1.0, 1.0)).x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     for(int _injected_loop_counter = 1; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != (0 >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (int(2)) | _GLF_IDENTITY(0, max(0, 0)))))), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != (0 >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (int(2)) | _GLF_IDENTITY(0, max(0, 0))))))))); _injected_loop_counter --)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         do
          {
           return;
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       return;
      }
    }
   return;
  }
 if(_GLF_DEAD(false))
  {
   do
    {
     return;
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false)), (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(9216.8587), _GLF_FUZZED(8.2)), bvec2(false, false))).x < injectionSwitch.y))))
    {
     return;
    }
   else
    {
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, float(_GLF_IDENTITY(mat4(injectionSwitch.y, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, determinant(mat3(1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0)), 0.0, sqrt(1.0), _GLF_IDENTITY(log(1.0), 1.0 * (_GLF_IDENTITY(log(1.0), mix(float(_GLF_FUZZED((-8.9 / -576.516))), float(log(1.0)), bool(true))))), 0.0, 0.0), (true ? mat4(injectionSwitch.y, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, determinant(mat3(1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0)), 0.0, sqrt(1.0), log(1.0), 0.0, 0.0) : _GLF_FUZZED(mat4(754.640, 2.3, 18.37, -2.4, -338.694, -6.3, -659.965, 73.63, -8.2, -986.832, 2171.3398, -439.904, -292.706, 16.31, -7.0, 5.4)))))), _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * cos(0.0))))))))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, 0.0 + (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, float(mat3x4(injectionSwitch.y, 0.0, 0.0, 1.0, sin(0.0), 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0))), mix(float(_GLF_IDENTITY(injectionSwitch.y, float(mat3x4(injectionSwitch.y, 0.0, 0.0, 1.0, sin(0.0), 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0)))), float(_GLF_FUZZED(96.55)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec2(false, false))), (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
        return;
       if(_GLF_DEAD(false))
        return;
       return;
      }
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
    return;
  }
 else
  {
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).y))))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     return;
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          return;
        }
       else
        {
        }
      }
    }
   else
    {
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 ^ 0)); _injected_loop_counter --)
        {
         return;
        }
      }
    }
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     do
      {
       return;
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(700.795)), bool(false))))), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) && true)));
    }
   return;
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
