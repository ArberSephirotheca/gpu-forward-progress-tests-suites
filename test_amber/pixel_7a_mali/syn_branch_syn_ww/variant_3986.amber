#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(8), int(8))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      break;
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         return;
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
        }
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))) && true), true && (_GLF_DEAD(false))), true, false, true)))) || _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY((true ? injectionSwitch.y : _GLF_FUZZED(-3.1)), ((true ? injectionSwitch.y : _GLF_FUZZED(-3.1))) + 0.0))))))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bvec4(false, true, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
          {
          }
         else
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
            {
             if(_GLF_DEAD(false))
              break;
             continue;
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              break;
             return;
            }
          }
         return;
        }
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
      }
     return;
     if(_GLF_DEAD(false))
      continue;
    }
  }
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    return;
  }
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = workgroup_size * workgroup_id;
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   if(_GLF_DEAD(false))
    return;
   return;
  }
 uint subgroup_base = _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) | 0u), ~ _GLF_IDENTITY(_GLF_IDENTITY((~ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, uint(uvec3(subgroup_id, 1u, 0u))), max(subgroup_id, subgroup_id)) * subgroup_size, min(subgroup_id * _GLF_IDENTITY(subgroup_size, max(subgroup_size, subgroup_size)), subgroup_id * subgroup_size)))), (_GLF_IDENTITY(true, bool(bvec2(true, false))) ? _GLF_IDENTITY((~ (_GLF_IDENTITY(subgroup_id * subgroup_size, min(subgroup_id * _GLF_IDENTITY(subgroup_size, max(subgroup_size, subgroup_size)), subgroup_id * subgroup_size)))), ((~ (_GLF_IDENTITY(subgroup_id * _GLF_IDENTITY(subgroup_size, ~ (~ (_GLF_IDENTITY(subgroup_size, (true ? subgroup_size : _GLF_FUZZED(199054u)))))), _GLF_IDENTITY(min(subgroup_id * _GLF_IDENTITY(subgroup_size, max(subgroup_size, subgroup_size)), subgroup_id * subgroup_size), (min(subgroup_id * _GLF_IDENTITY(subgroup_size, max(subgroup_size, subgroup_size)), _GLF_IDENTITY(subgroup_id * subgroup_size, ~ (~ (subgroup_id * subgroup_size))))) | 0u))))) | ((~ (_GLF_IDENTITY(subgroup_id * subgroup_size, min(subgroup_id * _GLF_IDENTITY(subgroup_size, max(subgroup_size, subgroup_size)), subgroup_id * subgroup_size)))))) : _GLF_FUZZED(subgroup_size))), (_GLF_IDENTITY((~ (_GLF_IDENTITY(subgroup_id * subgroup_size, min(subgroup_id * _GLF_IDENTITY(subgroup_size, max(subgroup_size, subgroup_size)), subgroup_id * subgroup_size)))), (_GLF_IDENTITY(true ? _GLF_IDENTITY((_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_id * _GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, _GLF_IDENTITY(subgroup_size, max(subgroup_size, subgroup_size)))), _GLF_IDENTITY(min(subgroup_id * _GLF_IDENTITY(subgroup_size, max(subgroup_size, subgroup_size)), subgroup_id * subgroup_size), 0u ^ (_GLF_IDENTITY(min(subgroup_id * _GLF_IDENTITY(subgroup_size, max(subgroup_size, subgroup_size)), subgroup_id * subgroup_size), ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (min(_GLF_IDENTITY(subgroup_id * _GLF_IDENTITY(subgroup_size, max(subgroup_size, subgroup_size)), max(subgroup_id * _GLF_IDENTITY(subgroup_size, max(subgroup_size, subgroup_size)), _GLF_IDENTITY(subgroup_id * _GLF_IDENTITY(subgroup_size, max(subgroup_size, subgroup_size)), max(subgroup_id * _GLF_IDENTITY(subgroup_size, max(subgroup_size, subgroup_size)), subgroup_id * _GLF_IDENTITY(subgroup_size, max(subgroup_size, subgroup_size)))))), subgroup_id * subgroup_size)), clamp(~ (min(_GLF_IDENTITY(subgroup_id * _GLF_IDENTITY(subgroup_size, max(subgroup_size, subgroup_size)), max(subgroup_id * _GLF_IDENTITY(subgroup_size, max(subgroup_size, subgroup_size)), _GLF_IDENTITY(subgroup_id * _GLF_IDENTITY(subgroup_size, max(subgroup_size, subgroup_size)), max(subgroup_id * _GLF_IDENTITY(subgroup_size, max(subgroup_size, subgroup_size)), subgroup_id * _GLF_IDENTITY(subgroup_size, max(subgroup_size, subgroup_size)))))), subgroup_id * subgroup_size)), ~ (min(_GLF_IDENTITY(subgroup_id * _GLF_IDENTITY(subgroup_size, max(subgroup_size, subgroup_size)), max(subgroup_id * _GLF_IDENTITY(subgroup_size, max(subgroup_size, subgroup_size)), _GLF_IDENTITY(subgroup_id * _GLF_IDENTITY(subgroup_size, max(subgroup_size, subgroup_size)), max(subgroup_id * _GLF_IDENTITY(subgroup_size, max(subgroup_size, subgroup_size)), subgroup_id * _GLF_IDENTITY(subgroup_size, max(subgroup_size, subgroup_size)))))), subgroup_id * subgroup_size)), ~ (min(_GLF_IDENTITY(subgroup_id * _GLF_IDENTITY(subgroup_size, max(subgroup_size, subgroup_size)), max(subgroup_id * _GLF_IDENTITY(subgroup_size, max(subgroup_size, subgroup_size)), _GLF_IDENTITY(subgroup_id * _GLF_IDENTITY(subgroup_size, max(subgroup_size, subgroup_size)), max(subgroup_id * _GLF_IDENTITY(subgroup_size, max(subgroup_size, subgroup_size)), subgroup_id * _GLF_IDENTITY(subgroup_size, max(subgroup_size, subgroup_size)))))), subgroup_id * subgroup_size)))), 0u ^ (~ (min(subgroup_id * _GLF_IDENTITY(subgroup_size, max(subgroup_size, subgroup_size)), subgroup_id * subgroup_size)))))))))), max(~ (_GLF_IDENTITY(subgroup_id * _GLF_IDENTITY(subgroup_size, clamp(subgroup_size, _GLF_IDENTITY(subgroup_size, (subgroup_size) ^ 0u), _GLF_IDENTITY(subgroup_size, max(subgroup_size, subgroup_size)))), _GLF_IDENTITY(min(subgroup_id * _GLF_IDENTITY(subgroup_size, max(subgroup_size, subgroup_size)), subgroup_id * subgroup_size), 0u ^ (_GLF_IDENTITY(_GLF_IDENTITY(min(subgroup_id * _GLF_IDENTITY(subgroup_size, max(subgroup_size, subgroup_size)), subgroup_id * subgroup_size), 0u ^ (min(subgroup_id * _GLF_IDENTITY(subgroup_size, max(subgroup_size, subgroup_size)), subgroup_id * subgroup_size))), ~ _GLF_IDENTITY((_GLF_IDENTITY(~ (min(subgroup_id * _GLF_IDENTITY(subgroup_size, max(subgroup_size, subgroup_size)), subgroup_id * subgroup_size)), 0u ^ (~ (min(subgroup_id * _GLF_IDENTITY(subgroup_size, max(subgroup_size, subgroup_size)), subgroup_id * subgroup_size))))), clamp((_GLF_IDENTITY(~ (min(subgroup_id * _GLF_IDENTITY(subgroup_size, max(subgroup_size, subgroup_size)), subgroup_id * subgroup_size)), 0u ^ (_GLF_IDENTITY(~ (min(subgroup_id * _GLF_IDENTITY(subgroup_size, max(subgroup_size, subgroup_size)), subgroup_id * subgroup_size)), (true ? ~ (min(subgroup_id * _GLF_IDENTITY(subgroup_size, max(subgroup_size, subgroup_size)), subgroup_id * subgroup_size)) : _GLF_FUZZED(workgroup_id)))))), (_GLF_IDENTITY(~ (min(subgroup_id * _GLF_IDENTITY(subgroup_size, max(subgroup_size, subgroup_size)), subgroup_id * subgroup_size)), 0u ^ (~ (min(subgroup_id * _GLF_IDENTITY(subgroup_size, max(subgroup_size, subgroup_size)), subgroup_id * subgroup_size))))), (_GLF_IDENTITY(~ (min(subgroup_id * _GLF_IDENTITY(subgroup_size, max(subgroup_size, subgroup_size)), subgroup_id * subgroup_size)), 0u ^ (~ (min(_GLF_IDENTITY(subgroup_id, (subgroup_id) >> 0u) * _GLF_IDENTITY(subgroup_size, max(subgroup_size, subgroup_size)), subgroup_id * subgroup_size)))))))))))), _GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_id * _GLF_IDENTITY(subgroup_size, clamp(subgroup_size, _GLF_IDENTITY(subgroup_size, (false ? _GLF_FUZZED(140624u) : subgroup_size)), _GLF_IDENTITY(subgroup_size, max(subgroup_size, subgroup_size)))), _GLF_IDENTITY(min(subgroup_id * _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, max(subgroup_size, subgroup_size)), (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, max(subgroup_size, subgroup_size)), 1u * (_GLF_IDENTITY(subgroup_size, max(subgroup_size, subgroup_size))))) / 1u), _GLF_IDENTITY(subgroup_id, (_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id))) | 0u) * subgroup_size), 0u ^ (_GLF_IDENTITY(min(subgroup_id * _GLF_IDENTITY(subgroup_size, max(subgroup_size, subgroup_size)), subgroup_id * subgroup_size), ~ (_GLF_IDENTITY(~ (min(subgroup_id * _GLF_IDENTITY(subgroup_size, max(subgroup_size, subgroup_size)), _GLF_IDENTITY(subgroup_id, clamp(subgroup_id, subgroup_id, subgroup_id)) * subgroup_size)), _GLF_IDENTITY(0u, _GLF_IDENTITY((0u), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY((0u), (false ? _GLF_FUZZED(workgroup_base) : _GLF_IDENTITY((0u), clamp((0u), (0u), (0u)))))), max(~ (_GLF_IDENTITY((0u), (false ? _GLF_FUZZED(workgroup_base) : _GLF_IDENTITY((0u), clamp((0u), (0u), (0u)))))), ~ (_GLF_IDENTITY((0u), (false ? _GLF_FUZZED(workgroup_base) : _GLF_IDENTITY((0u), clamp((0u), (0u), (0u)))))))))) + (0u | 0u)) ^ (~ (min(_GLF_IDENTITY(subgroup_id, clamp(subgroup_id, subgroup_id, subgroup_id)) * _GLF_IDENTITY(subgroup_size, max(subgroup_size, subgroup_size)), subgroup_id * subgroup_size)))))))))), (true ? ~ (_GLF_IDENTITY(subgroup_id * _GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, _GLF_IDENTITY(subgroup_size, max(subgroup_size, subgroup_size)))), _GLF_IDENTITY(min(subgroup_id * _GLF_IDENTITY(subgroup_size, max(subgroup_size, subgroup_size)), subgroup_id * subgroup_size), 0u ^ _GLF_IDENTITY((_GLF_IDENTITY(min(subgroup_id * _GLF_IDENTITY(subgroup_size, max(subgroup_size, subgroup_size)), subgroup_id * subgroup_size), ~ (_GLF_IDENTITY(~ (min(_GLF_IDENTITY(subgroup_id * _GLF_IDENTITY(subgroup_size, max(subgroup_size, subgroup_size)), (subgroup_id * _GLF_IDENTITY(subgroup_size, max(subgroup_size, subgroup_size))) | (_GLF_IDENTITY(subgroup_id * _GLF_IDENTITY(subgroup_size, max(subgroup_size, subgroup_size)), (0u | 0u) ^ (subgroup_id * _GLF_IDENTITY(subgroup_size, max(subgroup_size, subgroup_size)))))), subgroup_id * _GLF_IDENTITY(subgroup_size, 0u | (subgroup_size)))), 0u ^ _GLF_IDENTITY((~ (min(subgroup_id * _GLF_IDENTITY(subgroup_size, max(subgroup_size, subgroup_size)), subgroup_id * subgroup_size))), ((~ (min(subgroup_id * _GLF_IDENTITY(subgroup_size, max(subgroup_size, subgroup_size)), subgroup_id * subgroup_size)))) ^ 0u))))), max((_GLF_IDENTITY(min(subgroup_id * _GLF_IDENTITY(subgroup_size, max(subgroup_size, subgroup_size)), subgroup_id * subgroup_size), ~ (_GLF_IDENTITY(~ (min(_GLF_IDENTITY(subgroup_id * _GLF_IDENTITY(subgroup_size, max(subgroup_size, subgroup_size)), (subgroup_id * _GLF_IDENTITY(subgroup_size, max(subgroup_size, subgroup_size))) | (_GLF_IDENTITY(subgroup_id * _GLF_IDENTITY(subgroup_size, max(subgroup_size, subgroup_size)), (0u | 0u) ^ (subgroup_id * _GLF_IDENTITY(subgroup_size, max(subgroup_size, subgroup_size)))))), subgroup_id * subgroup_size)), 0u ^ (~ (min(subgroup_id * _GLF_IDENTITY(subgroup_size, max(subgroup_size, subgroup_size)), subgroup_id * subgroup_size))))))), (_GLF_IDENTITY(min(subgroup_id * _GLF_IDENTITY(subgroup_size, max(subgroup_size, subgroup_size)), subgroup_id * subgroup_size), ~ (_GLF_IDENTITY(~ (min(_GLF_IDENTITY(subgroup_id * _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, max(_GLF_IDENTITY(subgroup_size, min(_GLF_IDENTITY(subgroup_size, max(subgroup_size, subgroup_size)), _GLF_IDENTITY(subgroup_size, 0u + (subgroup_size)))), _GLF_IDENTITY(subgroup_size, ~ (~ (_GLF_IDENTITY(subgroup_size, 0u | (subgroup_size))))))), max(subgroup_size, subgroup_size)), (subgroup_id * _GLF_IDENTITY(subgroup_size, max(subgroup_size, subgroup_size))) | (_GLF_IDENTITY(subgroup_id * _GLF_IDENTITY(subgroup_size, max(subgroup_size, subgroup_size)), (_GLF_IDENTITY(0u | 0u, (0u | 0u) | 0u)) ^ (subgroup_id * _GLF_IDENTITY(subgroup_size, max(subgroup_size, subgroup_size)))))), subgroup_id * subgroup_size)), 0u ^ (~ (min(subgroup_id * _GLF_IDENTITY(subgroup_size, max(subgroup_size, subgroup_size)), subgroup_id * subgroup_size)))))))))))) : _GLF_FUZZED(workgroup_base)))))), ((~ (_GLF_IDENTITY(subgroup_id * subgroup_size, min(subgroup_id * _GLF_IDENTITY(subgroup_size, max(subgroup_size, subgroup_size)), subgroup_id * subgroup_size))))) | ((_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_id * _GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, min(subgroup_size, _GLF_IDENTITY(subgroup_size, 0u ^ (subgroup_size)))), clamp(subgroup_size, subgroup_size, subgroup_size)))), min(subgroup_id * _GLF_IDENTITY(subgroup_size, max(subgroup_size, subgroup_size)), _GLF_IDENTITY(subgroup_id, (subgroup_id) ^ (0u >> _GLF_IDENTITY(uint(0u), uint(0u)))) * subgroup_size))), uint(uvec2(~ (_GLF_IDENTITY(subgroup_id * _GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, _GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size)))), min(subgroup_id * _GLF_IDENTITY(subgroup_size, max(subgroup_size, subgroup_size)), _GLF_IDENTITY(subgroup_id, 0u + (subgroup_id)) * subgroup_size))), 0u)))))) : _GLF_FUZZED(subgroup_size), (true ? _GLF_IDENTITY((_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_id * _GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, _GLF_IDENTITY(subgroup_size, max(subgroup_size, subgroup_size)))), _GLF_IDENTITY(min(subgroup_id * _GLF_IDENTITY(subgroup_size, max(subgroup_size, subgroup_size)), subgroup_id * subgroup_size), 0u ^ (_GLF_IDENTITY(min(subgroup_id * _GLF_IDENTITY(subgroup_size, max(subgroup_size, subgroup_size)), subgroup_id * subgroup_size), ~ (_GLF_IDENTITY(~ (min(subgroup_id * _GLF_IDENTITY(subgroup_size, max(subgroup_size, subgroup_size)), subgroup_id * subgroup_size)), _GLF_IDENTITY(0u ^ (~ (min(subgroup_id * _GLF_IDENTITY(subgroup_size, max(subgroup_size, subgroup_size)), subgroup_id * subgroup_size))), _GLF_IDENTITY((0u ^ (~ (min(subgroup_id * _GLF_IDENTITY(subgroup_size, max(subgroup_size, subgroup_size)), subgroup_id * subgroup_size)))), min((0u ^ (~ (min(subgroup_id * _GLF_IDENTITY(subgroup_size, max(subgroup_size, subgroup_size)), subgroup_id * subgroup_size)))), (0u ^ (~ (min(subgroup_id * _GLF_IDENTITY(subgroup_size, max(subgroup_size, subgroup_size)), subgroup_id * subgroup_size)))))) | (_GLF_IDENTITY(0u ^ _GLF_IDENTITY((~ (min(subgroup_id * _GLF_IDENTITY(subgroup_size, max(subgroup_size, subgroup_size)), subgroup_id * subgroup_size))), ((~ (min(subgroup_id * _GLF_IDENTITY(subgroup_size, max(subgroup_size, subgroup_size)), subgroup_id * subgroup_size)))) / 1u), min(0u ^ (~ (min(_GLF_IDENTITY(subgroup_id * _GLF_IDENTITY(subgroup_size, max(subgroup_size, subgroup_size)), min(_GLF_IDENTITY(subgroup_id * _GLF_IDENTITY(subgroup_size, max(subgroup_size, subgroup_size)), (subgroup_id * _GLF_IDENTITY(subgroup_size, max(subgroup_size, subgroup_size))) >> 0u), subgroup_id * _GLF_IDENTITY(subgroup_size, max(subgroup_size, subgroup_size)))), subgroup_id * subgroup_size))), 0u ^ (~ (min(subgroup_id * _GLF_IDENTITY(subgroup_size, max(subgroup_size, subgroup_size)), subgroup_id * subgroup_size)))))))))))))), max(~ (_GLF_IDENTITY(subgroup_id * _GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, _GLF_IDENTITY(subgroup_size, max(subgroup_size, subgroup_size)))), _GLF_IDENTITY(_GLF_IDENTITY(min(subgroup_id * _GLF_IDENTITY(subgroup_size, max(subgroup_size, subgroup_size)), subgroup_id * subgroup_size), 0u ^ (_GLF_IDENTITY(min(subgroup_id * _GLF_IDENTITY(subgroup_size, max(subgroup_size, subgroup_size)), subgroup_id * subgroup_size), ~ (_GLF_IDENTITY(~ (min(subgroup_id * _GLF_IDENTITY(subgroup_size, max(subgroup_size, subgroup_size)), subgroup_id * subgroup_size)), 0u ^ (~ (min(subgroup_id * _GLF_IDENTITY(subgroup_size, max(subgroup_size, subgroup_size)), subgroup_id * subgroup_size)))))))), clamp(_GLF_IDENTITY(min(subgroup_id * _GLF_IDENTITY(subgroup_size, max(subgroup_size, subgroup_size)), subgroup_id * subgroup_size), 0u ^ (_GLF_IDENTITY(min(subgroup_id * _GLF_IDENTITY(subgroup_size, max(subgroup_size, subgroup_size)), subgroup_id * subgroup_size), ~ (_GLF_IDENTITY(~ (min(subgroup_id * _GLF_IDENTITY(subgroup_size, max(subgroup_size, subgroup_size)), subgroup_id * subgroup_size)), 0u ^ (~ (min(subgroup_id * _GLF_IDENTITY(subgroup_size, max(subgroup_size, subgroup_size)), subgroup_id * subgroup_size)))))))), _GLF_IDENTITY(_GLF_IDENTITY(min(subgroup_id * _GLF_IDENTITY(subgroup_size, max(subgroup_size, subgroup_size)), subgroup_id * subgroup_size), 0u ^ (_GLF_IDENTITY(min(subgroup_id * _GLF_IDENTITY(subgroup_size, max(subgroup_size, subgroup_size)), subgroup_id * subgroup_size), ~ (_GLF_IDENTITY(~ (min(subgroup_id * _GLF_IDENTITY(subgroup_size, max(subgroup_size, subgroup_size)), subgroup_id * subgroup_size)), 0u ^ (~ (min(subgroup_id * _GLF_IDENTITY(subgroup_size, max(subgroup_size, subgroup_size)), subgroup_id * subgroup_size)))))))), uint(uvec4(_GLF_IDENTITY(min(subgroup_id * _GLF_IDENTITY(subgroup_size, max(subgroup_size, subgroup_size)), subgroup_id * subgroup_size), 0u ^ (_GLF_IDENTITY(min(subgroup_id * _GLF_IDENTITY(subgroup_size, max(subgroup_size, subgroup_size)), subgroup_id * subgroup_size), ~ (_GLF_IDENTITY(~ (min(subgroup_id * _GLF_IDENTITY(subgroup_size, max(subgroup_size, subgroup_size)), subgroup_id * subgroup_size)), 0u ^ (~ (min(subgroup_id * _GLF_IDENTITY(subgroup_size, max(subgroup_size, subgroup_size)), subgroup_id * subgroup_size)))))))), 0u, 1u, 1u))), _GLF_IDENTITY(min(subgroup_id * _GLF_IDENTITY(subgroup_size, max(subgroup_size, subgroup_size)), subgroup_id * subgroup_size), 0u ^ (_GLF_IDENTITY(min(subgroup_id * _GLF_IDENTITY(subgroup_size, max(subgroup_size, subgroup_size)), subgroup_id * subgroup_size), ~ (_GLF_IDENTITY(~ (min(subgroup_id * _GLF_IDENTITY(subgroup_size, max(subgroup_size, subgroup_size)), subgroup_id * subgroup_size)), 0u ^ (~ (min(subgroup_id * _GLF_IDENTITY(subgroup_size, max(subgroup_size, subgroup_size)), subgroup_id * subgroup_size)))))))))))), _GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (subgroup_id) >> 0u) * _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, max(subgroup_size, subgroup_size)), uint(uvec3(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, max(subgroup_size, subgroup_size)), (true ? _GLF_IDENTITY(subgroup_size, max(subgroup_size, subgroup_size)) : _GLF_FUZZED(subgroup_size))), 1u, ((1u << _GLF_IDENTITY(uint(2u), uint(2u))) >> _GLF_IDENTITY(uint(2u), uint(2u)))))))), uint(uvec4(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, max(subgroup_size, subgroup_size)), uint(uvec3(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, max(subgroup_size, subgroup_size)), (true ? _GLF_IDENTITY(subgroup_size, max(subgroup_size, subgroup_size)) : _GLF_FUZZED(subgroup_size))), 1u, ((1u << _GLF_IDENTITY(uint(2u), uint(2u))) >> _GLF_IDENTITY(uint(2u), uint(2u)))))))), (_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, max(subgroup_size, subgroup_size)), uint(uvec3(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, max(subgroup_size, subgroup_size)), (true ? _GLF_IDENTITY(subgroup_size, max(subgroup_size, subgroup_size)) : _GLF_FUZZED(subgroup_size))), 1u, ((1u << _GLF_IDENTITY(uint(2u), uint(2u))) >> _GLF_IDENTITY(uint(2u), uint(2u))))))))) | (_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, max(subgroup_size, subgroup_size)), uint(uvec3(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, max(subgroup_size, subgroup_size)), (true ? _GLF_IDENTITY(subgroup_size, max(subgroup_size, subgroup_size)) : _GLF_FUZZED(subgroup_size))), 1u, ((1u << _GLF_IDENTITY(uint(2u), uint(2u))) >> _GLF_IDENTITY(uint(2u), uint(2u)))))))))), 0u, 0u, 0u))), _GLF_IDENTITY(min(subgroup_id * _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size)), max(subgroup_size, subgroup_size)), subgroup_id * subgroup_size), 0u ^ (_GLF_IDENTITY(min(subgroup_id * _GLF_IDENTITY(subgroup_size, max(subgroup_size, subgroup_size)), _GLF_IDENTITY(subgroup_id, max(subgroup_id, subgroup_id)) * subgroup_size), ~ (_GLF_IDENTITY(~ (min(subgroup_id * _GLF_IDENTITY(subgroup_size, max(subgroup_size, subgroup_size)), subgroup_id * subgroup_size)), 0u ^ _GLF_IDENTITY((~ (min(subgroup_id * _GLF_IDENTITY(subgroup_size, max(_GLF_IDENTITY(subgroup_size, (subgroup_size) << 0u), subgroup_size)), subgroup_id * subgroup_size))), (_GLF_IDENTITY((_GLF_IDENTITY(~ (min(subgroup_id * _GLF_IDENTITY(subgroup_size, max(_GLF_IDENTITY(subgroup_size, (subgroup_size) << 0u), subgroup_size)), subgroup_id * subgroup_size)), (~ (min(subgroup_id * _GLF_IDENTITY(subgroup_size, max(_GLF_IDENTITY(subgroup_size, (subgroup_size) << 0u), subgroup_size)), subgroup_id * subgroup_size))) << 0u)), ((~ (min(subgroup_id * _GLF_IDENTITY(subgroup_size, max(_GLF_IDENTITY(subgroup_size, (subgroup_size) << 0u), subgroup_size)), subgroup_id * subgroup_size)))) - 0u)) >> 0u)))))))), _GLF_IDENTITY((true ? ~ (_GLF_IDENTITY(subgroup_id * _GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, _GLF_IDENTITY(subgroup_size, max(subgroup_size, subgroup_size)))), _GLF_IDENTITY(min(subgroup_id * _GLF_IDENTITY(subgroup_size, max(subgroup_size, subgroup_size)), subgroup_id * subgroup_size), 0u ^ (_GLF_IDENTITY(min(subgroup_id * _GLF_IDENTITY(subgroup_size, max(subgroup_size, subgroup_size)), subgroup_id * subgroup_size), ~ (_GLF_IDENTITY(~ (min(_GLF_IDENTITY(subgroup_id * _GLF_IDENTITY(subgroup_size, max(subgroup_size, subgroup_size)), (subgroup_id * _GLF_IDENTITY(subgroup_size, max(subgroup_size, subgroup_size))) ^ 0u), subgroup_id * subgroup_size)), 0u ^ (~ (min(subgroup_id * _GLF_IDENTITY(subgroup_size, max(subgroup_size, subgroup_size)), subgroup_id * subgroup_size)))))))))) : _GLF_FUZZED(workgroup_base)), (_GLF_IDENTITY((true ? ~ (_GLF_IDENTITY(subgroup_id * _GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, _GLF_IDENTITY(subgroup_size, max(subgroup_size, subgroup_size)))), _GLF_IDENTITY(min(subgroup_id * _GLF_IDENTITY(subgroup_size, max(subgroup_size, _GLF_IDENTITY(subgroup_size, ~ (~ (subgroup_size))))), subgroup_id * subgroup_size), 0u ^ (_GLF_IDENTITY(min(subgroup_id * _GLF_IDENTITY(subgroup_size, max(subgroup_size, subgroup_size)), subgroup_id * subgroup_size), ~ (_GLF_IDENTITY(~ (min(subgroup_id * _GLF_IDENTITY(subgroup_size, max(subgroup_size, subgroup_size)), subgroup_id * subgroup_size)), 0u ^ (~ (min(subgroup_id * _GLF_IDENTITY(subgroup_size, max(subgroup_size, subgroup_size)), subgroup_id * subgroup_size)))))))))) : _GLF_FUZZED(workgroup_base)), (_GLF_IDENTITY((true ? ~ (_GLF_IDENTITY(subgroup_id * _GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, _GLF_IDENTITY(subgroup_size, max(subgroup_size, subgroup_size)))), _GLF_IDENTITY(min(subgroup_id * _GLF_IDENTITY(subgroup_size, max(subgroup_size, subgroup_size)), subgroup_id * subgroup_size), 0u ^ (_GLF_IDENTITY(min(subgroup_id * _GLF_IDENTITY(subgroup_size, max(subgroup_size, subgroup_size)), subgroup_id * subgroup_size), ~ (_GLF_IDENTITY(~ (min(subgroup_id * _GLF_IDENTITY(subgroup_size, max(subgroup_size, subgroup_size)), subgroup_id * subgroup_size)), 0u ^ (~ (min(subgroup_id * _GLF_IDENTITY(subgroup_size, max(subgroup_size, subgroup_size)), subgroup_id * subgroup_size)))))))))) : _GLF_FUZZED(workgroup_base)), ((true ? ~ (_GLF_IDENTITY(subgroup_id * _GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, _GLF_IDENTITY(subgroup_size, max(subgroup_size, subgroup_size)))), _GLF_IDENTITY(min(subgroup_id * _GLF_IDENTITY(subgroup_size, max(subgroup_size, subgroup_size)), subgroup_id * subgroup_size), 0u ^ (_GLF_IDENTITY(min(subgroup_id * _GLF_IDENTITY(subgroup_size, max(subgroup_size, subgroup_size)), subgroup_id * subgroup_size), ~ (_GLF_IDENTITY(~ (min(subgroup_id * _GLF_IDENTITY(subgroup_size, max(subgroup_size, subgroup_size)), subgroup_id * subgroup_size)), 0u ^ (~ (min(subgroup_id * _GLF_IDENTITY(subgroup_size, max(subgroup_size, subgroup_size)), subgroup_id * _GLF_IDENTITY(subgroup_size, (subgroup_size) ^ 0u))))))))))) : _GLF_FUZZED(workgroup_base))) + 0u)) >> (144213u & 0u))) / 1u))))), _GLF_IDENTITY(((~ _GLF_IDENTITY((_GLF_IDENTITY(subgroup_id * subgroup_size, min(subgroup_id * _GLF_IDENTITY(subgroup_size, max(subgroup_size, subgroup_size)), subgroup_id * subgroup_size))), uint(uvec4((_GLF_IDENTITY(subgroup_id * subgroup_size, min(subgroup_id * _GLF_IDENTITY(subgroup_size, max(subgroup_size, subgroup_size)), subgroup_id * subgroup_size))), 0u, 1u, 0u))))), min(((~ _GLF_IDENTITY((_GLF_IDENTITY(subgroup_id * subgroup_size, min(subgroup_id * _GLF_IDENTITY(subgroup_size, max(subgroup_size, subgroup_size)), subgroup_id * subgroup_size))), uint(uvec4((_GLF_IDENTITY(subgroup_id * subgroup_size, min(subgroup_id * _GLF_IDENTITY(subgroup_size, max(subgroup_size, subgroup_size)), subgroup_id * subgroup_size))), 0u, 1u, 0u))))), ((~ _GLF_IDENTITY((_GLF_IDENTITY(subgroup_id * subgroup_size, min(subgroup_id * _GLF_IDENTITY(subgroup_size, max(subgroup_size, subgroup_size)), subgroup_id * subgroup_size))), uint(uvec4((_GLF_IDENTITY(subgroup_id * subgroup_size, min(subgroup_id * _GLF_IDENTITY(subgroup_size, max(subgroup_size, subgroup_size)), subgroup_id * subgroup_size))), 0u, 1u, 0u))))))) | (_GLF_IDENTITY((_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_id * _GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, _GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size)))), min(subgroup_id * _GLF_IDENTITY(subgroup_size, max(subgroup_size, _GLF_IDENTITY(subgroup_size, (false ? _GLF_FUZZED(num_workgroup) : subgroup_size)))), subgroup_id * subgroup_size))), uint(uvec2(~ (_GLF_IDENTITY(subgroup_id * _GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, _GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size)))), min(subgroup_id * _GLF_IDENTITY(subgroup_size, max(subgroup_size, subgroup_size)), subgroup_id * subgroup_size))), 0u)))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(subgroup_local_id) : (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_id * _GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, _GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size)))), min(subgroup_id * _GLF_IDENTITY(subgroup_size, max(subgroup_size, subgroup_size)), subgroup_id * subgroup_size))), uint(uvec2(~ (_GLF_IDENTITY(subgroup_id * _GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, _GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size)))), min(subgroup_id * _GLF_IDENTITY(subgroup_size, max(subgroup_size, subgroup_size)), subgroup_id * subgroup_size))), 0u)))))))) : _GLF_FUZZED(subgroup_size)) ^ ((0u >> _GLF_IDENTITY(_GLF_IDENTITY(uint(7u), (_GLF_IDENTITY(uint(7u), clamp(uint(7u), uint(7u), uint(7u)))) - 0u), uint(7u))) | 0u))))) / uint(_GLF_ONE(1.0, injectionSwitch.y))));
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
  }
 uint virtual_gid = _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + subgroup_base + _GLF_IDENTITY(subgroup_local_id, uint(uint(subgroup_local_id))), (true ? _GLF_IDENTITY(workgroup_base + subgroup_base + subgroup_local_id, uint(uvec4(workgroup_base + subgroup_base + subgroup_local_id, 0u, 0u, 0u))) : _GLF_FUZZED(subgroup_size))), max(_GLF_IDENTITY(workgroup_base + subgroup_base + subgroup_local_id, (workgroup_base + _GLF_IDENTITY(subgroup_base, 0u + (_GLF_IDENTITY(subgroup_base, ~ (_GLF_IDENTITY(~ (subgroup_base), 0u | (~ (subgroup_base))))))) + _GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(0u ^ (subgroup_local_id), (0u ^ (subgroup_local_id)) / 1u))) ^ 0u), _GLF_IDENTITY(workgroup_base + subgroup_base, ~ (~ (workgroup_base + subgroup_base))) + subgroup_local_id)), (_GLF_IDENTITY(true ? _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_base, (subgroup_base) >> (_GLF_IDENTITY(0u, (0u) >> (0u ^ 0u)) | 0u)) + _GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, uint(uint(_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(uint(_GLF_IDENTITY(uint(subgroup_local_id), (uint(subgroup_local_id)) >> uint(_GLF_ZERO(0.0, injectionSwitch.x)))), (uint(_GLF_IDENTITY(uint(subgroup_local_id), (uint(subgroup_local_id)) >> uint(_GLF_ZERO(0.0, injectionSwitch.x))))) - 0u))))), (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, uint(uint(_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(uint(_GLF_IDENTITY(uint(subgroup_local_id), (uint(subgroup_local_id)) >> uint(_GLF_ZERO(0.0, injectionSwitch.x)))), (uint(_GLF_IDENTITY(uint(subgroup_local_id), (uint(subgroup_local_id)) >> uint(_GLF_ZERO(0.0, injectionSwitch.x))))) - 0u))))), (_GLF_IDENTITY(subgroup_local_id, uint(uint(_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(uint(_GLF_IDENTITY(uint(subgroup_local_id), (uint(subgroup_local_id)) >> uint(_GLF_ZERO(0.0, injectionSwitch.x)))), (uint(_GLF_IDENTITY(uint(subgroup_local_id), (uint(subgroup_local_id)) >> uint(_GLF_ZERO(0.0, injectionSwitch.x))))) - 0u)))))) + 0u)) | 0u), (true ? _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + subgroup_base, 0u + (_GLF_IDENTITY(workgroup_base + subgroup_base, min(_GLF_IDENTITY(workgroup_base + subgroup_base, (workgroup_base + subgroup_base) ^ 0u), workgroup_base + subgroup_base)))) + subgroup_local_id, uint(uvec4(workgroup_base + _GLF_IDENTITY(subgroup_base, (subgroup_base) + 0u) + subgroup_local_id, 0u, 0u, 0u))) : _GLF_FUZZED(subgroup_size))), max(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + subgroup_base, (workgroup_base + subgroup_base) | 0u) + _GLF_IDENTITY(subgroup_local_id, (false ? _GLF_FUZZED(subgroup_local_id) : subgroup_local_id)), (_GLF_IDENTITY(workgroup_base + subgroup_base, min(workgroup_base + subgroup_base, workgroup_base + subgroup_base)) + subgroup_local_id) >> 0u), (workgroup_base + subgroup_base + _GLF_IDENTITY(subgroup_local_id, 0u ^ _GLF_IDENTITY((subgroup_local_id), ~ (~ (_GLF_IDENTITY((subgroup_local_id), (72454u & 0u) | ((subgroup_local_id)))))))) ^ 0u), _GLF_IDENTITY(workgroup_base + subgroup_base, max(workgroup_base + subgroup_base, _GLF_IDENTITY(workgroup_base + subgroup_base, uint(uvec3(workgroup_base + subgroup_base, 1u, 1u))))) + subgroup_local_id)) : _GLF_FUZZED(usubBorrow(_GLF_IDENTITY(subgroup_local_id, min(_GLF_IDENTITY(subgroup_local_id, (true ? _GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, subgroup_local_id)) : _GLF_FUZZED(workgroup_size))), subgroup_local_id)), workgroup_size, subgroup_base)), (_GLF_IDENTITY(true ? _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_base, (subgroup_base) >> (_GLF_IDENTITY(0u, (0u) >> (0u ^ 0u)) | 0u)) + _GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, uint(uint(_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(uint(_GLF_IDENTITY(uint(subgroup_local_id), (uint(subgroup_local_id)) >> uint(_GLF_ZERO(0.0, injectionSwitch.x)))), (uint(_GLF_IDENTITY(uint(subgroup_local_id), (uint(subgroup_local_id)) >> uint(_GLF_ZERO(0.0, injectionSwitch.x))))) - 0u))))), (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, uint(uint(_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(uint(_GLF_IDENTITY(uint(subgroup_local_id), (uint(subgroup_local_id)) >> uint(_GLF_ZERO(0.0, injectionSwitch.x)))), (uint(_GLF_IDENTITY(uint(subgroup_local_id), (uint(subgroup_local_id)) >> uint(_GLF_ZERO(0.0, injectionSwitch.x))))) - 0u))))), (_GLF_IDENTITY(subgroup_local_id, uint(uint(_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(uint(_GLF_IDENTITY(uint(subgroup_local_id), (uint(subgroup_local_id)) >> uint(_GLF_ZERO(0.0, injectionSwitch.x)))), (uint(_GLF_IDENTITY(uint(subgroup_local_id), (uint(subgroup_local_id)) >> uint(_GLF_ZERO(0.0, injectionSwitch.x))))) - 0u)))))) + 0u)) | 0u), (true ? _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + subgroup_base, 0u + (_GLF_IDENTITY(workgroup_base + subgroup_base, min(_GLF_IDENTITY(workgroup_base + subgroup_base, (workgroup_base + subgroup_base) ^ 0u), workgroup_base + subgroup_base)))) + subgroup_local_id, uint(uvec4(workgroup_base + _GLF_IDENTITY(subgroup_base, (subgroup_base) + 0u) + subgroup_local_id, 0u, 0u, 0u))) : _GLF_FUZZED(subgroup_size))), max(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + subgroup_base, (workgroup_base + subgroup_base) | 0u) + _GLF_IDENTITY(subgroup_local_id, (false ? _GLF_FUZZED(subgroup_local_id) : subgroup_local_id)), (_GLF_IDENTITY(workgroup_base + subgroup_base, min(workgroup_base + subgroup_base, workgroup_base + subgroup_base)) + subgroup_local_id) >> 0u), (workgroup_base + subgroup_base + _GLF_IDENTITY(subgroup_local_id, 0u ^ _GLF_IDENTITY((subgroup_local_id), ~ (~ (_GLF_IDENTITY((subgroup_local_id), (72454u & 0u) | ((subgroup_local_id)))))))) ^ 0u), _GLF_IDENTITY(workgroup_base + subgroup_base, max(workgroup_base + subgroup_base, _GLF_IDENTITY(workgroup_base + subgroup_base, uint(uvec3(workgroup_base + subgroup_base, 1u, 1u))))) + subgroup_local_id)) : _GLF_FUZZED(usubBorrow(_GLF_IDENTITY(subgroup_local_id, min(_GLF_IDENTITY(subgroup_local_id, (true ? _GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, subgroup_local_id)) : _GLF_FUZZED(workgroup_size))), subgroup_local_id)), workgroup_size, subgroup_base)), (_GLF_IDENTITY(true ? _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_base, (subgroup_base) >> (_GLF_IDENTITY(0u, (0u) >> (0u ^ 0u)) | 0u)) + _GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, uint(uint(_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(uint(_GLF_IDENTITY(uint(subgroup_local_id), (uint(subgroup_local_id)) >> uint(_GLF_ZERO(0.0, injectionSwitch.x)))), (uint(_GLF_IDENTITY(uint(subgroup_local_id), (uint(subgroup_local_id)) >> uint(_GLF_ZERO(0.0, injectionSwitch.x))))) - 0u))))), (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, uint(uint(_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(uint(_GLF_IDENTITY(uint(subgroup_local_id), (uint(subgroup_local_id)) >> uint(_GLF_ZERO(0.0, injectionSwitch.x)))), (uint(_GLF_IDENTITY(uint(subgroup_local_id), (uint(subgroup_local_id)) >> uint(_GLF_ZERO(0.0, injectionSwitch.x))))) - 0u))))), (_GLF_IDENTITY(subgroup_local_id, uint(uint(_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(uint(_GLF_IDENTITY(uint(subgroup_local_id), (uint(subgroup_local_id)) >> uint(_GLF_ZERO(0.0, injectionSwitch.x)))), (uint(_GLF_IDENTITY(uint(subgroup_local_id), (uint(subgroup_local_id)) >> uint(_GLF_ZERO(0.0, injectionSwitch.x))))) - 0u)))))) + 0u)) | 0u), (true ? _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + subgroup_base, 0u + (_GLF_IDENTITY(workgroup_base + subgroup_base, min(_GLF_IDENTITY(workgroup_base + subgroup_base, (workgroup_base + subgroup_base) ^ 0u), workgroup_base + subgroup_base)))) + subgroup_local_id, uint(uvec4(workgroup_base + _GLF_IDENTITY(subgroup_base, (subgroup_base) + 0u) + subgroup_local_id, 0u, 0u, 0u))) : _GLF_FUZZED(subgroup_size))), max(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + subgroup_base, (workgroup_base + subgroup_base) | 0u) + _GLF_IDENTITY(subgroup_local_id, (false ? _GLF_FUZZED(subgroup_local_id) : subgroup_local_id)), (_GLF_IDENTITY(workgroup_base + subgroup_base, min(workgroup_base + subgroup_base, workgroup_base + subgroup_base)) + subgroup_local_id) >> 0u), (workgroup_base + subgroup_base + _GLF_IDENTITY(subgroup_local_id, 0u ^ _GLF_IDENTITY((subgroup_local_id), ~ (~ (_GLF_IDENTITY((subgroup_local_id), (72454u & 0u) | ((subgroup_local_id)))))))) ^ 0u), _GLF_IDENTITY(workgroup_base + subgroup_base, max(workgroup_base + subgroup_base, _GLF_IDENTITY(workgroup_base + subgroup_base, uint(uvec3(workgroup_base + subgroup_base, 1u, 1u))))) + subgroup_local_id)) : _GLF_FUZZED(usubBorrow(_GLF_IDENTITY(subgroup_local_id, min(_GLF_IDENTITY(subgroup_local_id, (true ? _GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, subgroup_local_id)) : _GLF_FUZZED(workgroup_size))), subgroup_local_id)), workgroup_size, subgroup_base)), (true ? _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_base, (subgroup_base) >> (_GLF_IDENTITY(0u, (0u) >> (0u ^ 0u)) | 0u)) + _GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, uint(uint(_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(uint(_GLF_IDENTITY(uint(subgroup_local_id), (uint(subgroup_local_id)) >> uint(_GLF_ZERO(0.0, injectionSwitch.x)))), (uint(_GLF_IDENTITY(uint(subgroup_local_id), (uint(subgroup_local_id)) >> uint(_GLF_ZERO(0.0, injectionSwitch.x))))) - 0u))))), (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, uint(uint(_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(uint(_GLF_IDENTITY(uint(subgroup_local_id), (uint(subgroup_local_id)) >> uint(_GLF_ZERO(0.0, injectionSwitch.x)))), (uint(_GLF_IDENTITY(uint(subgroup_local_id), (uint(subgroup_local_id)) >> uint(_GLF_ZERO(0.0, injectionSwitch.x))))) - 0u))))), (_GLF_IDENTITY(subgroup_local_id, uint(uint(_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(uint(_GLF_IDENTITY(uint(subgroup_local_id), (uint(subgroup_local_id)) >> uint(_GLF_ZERO(0.0, injectionSwitch.x)))), (uint(_GLF_IDENTITY(uint(subgroup_local_id), (uint(subgroup_local_id)) >> uint(_GLF_ZERO(0.0, injectionSwitch.x))))) - 0u)))))) + 0u)) | 0u), (true ? _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + subgroup_base, 0u + (_GLF_IDENTITY(workgroup_base + subgroup_base, min(_GLF_IDENTITY(workgroup_base + subgroup_base, (workgroup_base + subgroup_base) ^ 0u), workgroup_base + subgroup_base)))) + subgroup_local_id, uint(uvec4(workgroup_base + _GLF_IDENTITY(subgroup_base, (subgroup_base) + 0u) + subgroup_local_id, 0u, 0u, 0u))) : _GLF_FUZZED(subgroup_size))), max(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + subgroup_base, (workgroup_base + subgroup_base) | 0u) + _GLF_IDENTITY(subgroup_local_id, (false ? _GLF_FUZZED(subgroup_local_id) : subgroup_local_id)), (_GLF_IDENTITY(workgroup_base + subgroup_base, min(workgroup_base + subgroup_base, workgroup_base + subgroup_base)) + subgroup_local_id) >> 0u), (workgroup_base + subgroup_base + _GLF_IDENTITY(subgroup_local_id, 0u ^ _GLF_IDENTITY((subgroup_local_id), ~ (~ (_GLF_IDENTITY((subgroup_local_id), (72454u & 0u) | ((subgroup_local_id)))))))) ^ 0u), _GLF_IDENTITY(workgroup_base + subgroup_base, max(workgroup_base + subgroup_base, _GLF_IDENTITY(workgroup_base + subgroup_base, uint(uvec3(workgroup_base + subgroup_base, 1u, 1u))))) + subgroup_local_id)) : _GLF_FUZZED(usubBorrow(_GLF_IDENTITY(subgroup_local_id, min(_GLF_IDENTITY(subgroup_local_id, (true ? _GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, subgroup_local_id)) : _GLF_FUZZED(workgroup_size))), subgroup_local_id)), workgroup_size, subgroup_base))) * 1u)) - 0u)) ^ 0u)));
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       return;
       if(_GLF_DEAD(false))
        return;
      }
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           return;
          }
         else
          {
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         do
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
           return;
           if(_GLF_DEAD(false))
            return;
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false)))) || false))
          return;
        }
       if(_GLF_DEAD(false))
        return;
      }
     else
      {
      }
    }
   if(_GLF_DEAD(false))
    return;
   for(int _injected_loop_counter = _GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), min(int(_GLF_ONE(1.0, injectionSwitch.y)), _GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), (int(_GLF_ONE(1.0, injectionSwitch.y))) ^ 0))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, min(_injected_loop_counter, _injected_loop_counter)) > (_GLF_IDENTITY(0 | _GLF_IDENTITY(int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(_GLF_IDENTITY(float(mat2(injectionSwitch.x, 0.0, 0.0, determinant(mat3(0.0, 0.0, log(1.0), 1.0, length(vec2(0.0, 0.0)), sin(0.0), 0.0, 0.0, 0.0)))), max(_GLF_IDENTITY(float(mat2(injectionSwitch.x, 0.0, 0.0, determinant(mat3(0.0, 0.0, log(1.0), 1.0, length(vec2(0.0, 0.0)), sin(0.0), 0.0, 0.0, 0.0)))), _GLF_IDENTITY(mix(float(float(mat2(injectionSwitch.x, 0.0, 0.0, determinant(mat3(0.0, 0.0, log(1.0), 1.0, length(vec2(0.0, 0.0)), sin(0.0), 0.0, 0.0, 0.0))))), float(_GLF_FUZZED(-31.15)), bool(false)), mix(float(_GLF_FUZZED(579.808)), float(_GLF_IDENTITY(mix(float(float(mat2(injectionSwitch.x, 0.0, 0.0, determinant(mat3(0.0, 0.0, log(1.0), 1.0, length(vec2(0.0, 0.0)), sin(0.0), 0.0, 0.0, 0.0))))), float(_GLF_FUZZED(-31.15)), bool(false)), mix(float(mix(float(float(mat2(injectionSwitch.x, 0.0, 0.0, determinant(mat3(0.0, 0.0, log(1.0), 1.0, length(vec2(0.0, 0.0)), sin(0.0), 0.0, 0.0, 0.0))))), float(_GLF_FUZZED(-31.15)), bool(false))), float(_GLF_FUZZED(9.0)), bool(false)))), bool(true)))), float(mat2(injectionSwitch.x, 0.0, 0.0, determinant(mat3(0.0, 0.0, log(1.0), 1.0, length(vec2(0.0, _GLF_IDENTITY(0.0, (0.0) * 1.0))), sin(0.0), 0.0, 0.0, 0.0)))))), (_GLF_IDENTITY(float(mat2(injectionSwitch.x, 0.0, 0.0, determinant(mat3(0.0, 0.0, log(1.0), 1.0, length(vec2(0.0, 0.0)), sin(0.0), 0.0, 0.0, 0.0)))), max(_GLF_IDENTITY(float(mat2(injectionSwitch.x, 0.0, 0.0, determinant(mat3(0.0, 0.0, log(1.0), 1.0, length(vec2(0.0, 0.0)), sin(0.0), 0.0, 0.0, 0.0)))), _GLF_IDENTITY(mix(float(float(mat2(injectionSwitch.x, 0.0, 0.0, determinant(mat3(0.0, 0.0, log(1.0), 1.0, length(vec2(0.0, 0.0)), sin(0.0), 0.0, 0.0, 0.0))))), float(_GLF_FUZZED(-31.15)), bool(false)), mix(float(_GLF_FUZZED(579.808)), float(_GLF_IDENTITY(mix(float(float(mat2(injectionSwitch.x, 0.0, 0.0, determinant(mat3(0.0, 0.0, log(1.0), 1.0, length(vec2(0.0, 0.0)), sin(0.0), 0.0, 0.0, 0.0))))), float(_GLF_FUZZED(-31.15)), bool(false)), mix(float(mix(float(_GLF_IDENTITY(float(mat2(injectionSwitch.x, 0.0, 0.0, determinant(mat3(0.0, 0.0, log(1.0), 1.0, length(vec2(0.0, 0.0)), sin(0.0), 0.0, 0.0, 0.0)))), (float(mat2(injectionSwitch.x, 0.0, 0.0, determinant(mat3(0.0, 0.0, log(1.0), 1.0, length(vec2(0.0, 0.0)), sin(0.0), 0.0, 0.0, 0.0))))) * 1.0)), float(_GLF_FUZZED(-31.15)), bool(false))), float(_GLF_FUZZED(9.0)), bool(false)))), _GLF_IDENTITY(bool(true), bool(bvec3(bool(true), false, false)))))), float(_GLF_IDENTITY(mat2(injectionSwitch.x, 0.0, 0.0, determinant(mat3(0.0, 0.0, log(1.0), 1.0, length(vec2(0.0, _GLF_IDENTITY(0.0, (0.0) * 1.0))), sin(0.0), 0.0, 0.0, 0.0))), (mat2(injectionSwitch.x, 0.0, 0.0, determinant(mat3(0.0, 0.0, log(1.0), 1.0, length(vec2(0.0, _GLF_IDENTITY(0.0, (0.0) * 1.0))), sin(0.0), 0.0, 0.0, 0.0)))) / mat2(1.0, 1.0, 1.0, 1.0)))))) * sqrt(abs(1.0)))))), max(int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(mat2(injectionSwitch.x, 0.0, 0.0, determinant(mat3(0.0, 0.0, log(1.0), 1.0, length(vec2(0.0, 0.0)), sin(0.0), 0.0, 0.0, 0.0)))), max(_GLF_IDENTITY(float(mat2(injectionSwitch.x, 0.0, 0.0, determinant(mat3(0.0, 0.0, log(1.0), 1.0, length(vec2(0.0, 0.0)), sin(0.0), 0.0, 0.0, 0.0)))), mix(float(float(mat2(injectionSwitch.x, 0.0, 0.0, determinant(mat3(0.0, 0.0, log(1.0), 1.0, length(vec2(0.0, 0.0)), sin(0.0), 0.0, 0.0, 0.0))))), float(_GLF_FUZZED(-31.15)), bool(false))), float(mat2(injectionSwitch.x, 0.0, 0.0, determinant(mat3(0.0, 0.0, log(1.0), 1.0, length(vec2(0.0, 0.0)), sin(0.0), 0.0, 0.0, 0.0))))))))), int(_GLF_ZERO(0.0, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), _GLF_IDENTITY(float(mat2(injectionSwitch.x, 0.0, 0.0, determinant(mat3(0.0, 0.0, log(1.0), 1.0, length(vec2(0.0, 0.0)), sin(0.0), 0.0, 0.0, 0.0)))), max(_GLF_IDENTITY(float(mat2(injectionSwitch.x, 0.0, _GLF_IDENTITY(0.0, (0.0) / 1.0), determinant(mat3(_GLF_IDENTITY(0.0, (0.0) / 1.0), 0.0, _GLF_IDENTITY(log(1.0), max(log(1.0), log(1.0))), 1.0, length(vec2(0.0, 0.0)), sin(0.0), 0.0, 0.0, 0.0)))), mix(float(float(mat2(injectionSwitch.x, 0.0, 0.0, determinant(mat3(0.0, 0.0, log(1.0), 1.0, length(vec2(0.0, 0.0)), sin(0.0), 0.0, 0.0, 0.0))))), float(_GLF_FUZZED(-31.15)), bool(false))), float(mat2(injectionSwitch.x, 0.0, 0.0, determinant(mat3(0.0, 0.0, log(1.0), 1.0, length(vec2(0.0, 0.0)), sin(0.0), 0.0, 0.0, 0.0))))))))))), clamp(0 | _GLF_IDENTITY(int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(_GLF_IDENTITY(float(mat2(injectionSwitch.x, 0.0, 0.0, determinant(mat3(0.0, 0.0, log(1.0), 1.0, length(vec2(0.0, 0.0)), sin(0.0), 0.0, 0.0, 0.0)))), max(_GLF_IDENTITY(float(mat2(injectionSwitch.x, 0.0, 0.0, determinant(mat3(0.0, 0.0, log(1.0), 1.0, length(vec2(0.0, 0.0)), sin(0.0), 0.0, 0.0, 0.0)))), _GLF_IDENTITY(mix(float(float(mat2(injectionSwitch.x, 0.0, 0.0, determinant(mat3(0.0, 0.0, log(1.0), 1.0, length(vec2(0.0, 0.0)), sin(0.0), 0.0, 0.0, 0.0))))), float(_GLF_FUZZED(-31.15)), bool(false)), mix(float(_GLF_FUZZED(579.808)), float(_GLF_IDENTITY(mix(float(float(mat2(injectionSwitch.x, 0.0, 0.0, determinant(mat3(0.0, 0.0, log(1.0), 1.0, length(vec2(0.0, 0.0)), sin(0.0), 0.0, 0.0, 0.0))))), float(_GLF_FUZZED(-31.15)), bool(false)), mix(float(mix(float(float(mat2(injectionSwitch.x, 0.0, 0.0, determinant(mat3(0.0, 0.0, log(1.0), 1.0, length(vec2(0.0, 0.0)), sin(0.0), 0.0, 0.0, 0.0))))), float(_GLF_FUZZED(-31.15)), bool(false))), float(_GLF_FUZZED(9.0)), bool(false)))), bool(true)))), float(mat2(injectionSwitch.x, 0.0, 0.0, determinant(mat3(0.0, 0.0, log(1.0), 1.0, length(vec2(0.0, _GLF_IDENTITY(0.0, (0.0) * 1.0))), sin(0.0), 0.0, 0.0, 0.0)))))), (_GLF_IDENTITY(float(mat2(injectionSwitch.x, 0.0, 0.0, determinant(mat3(0.0, 0.0, log(1.0), 1.0, length(vec2(0.0, 0.0)), sin(0.0), 0.0, 0.0, 0.0)))), max(_GLF_IDENTITY(float(mat2(injectionSwitch.x, 0.0, 0.0, determinant(mat3(0.0, 0.0, log(1.0), 1.0, length(vec2(0.0, 0.0)), sin(0.0), 0.0, 0.0, 0.0)))), _GLF_IDENTITY(mix(float(float(mat2(injectionSwitch.x, 0.0, 0.0, determinant(mat3(0.0, 0.0, log(1.0), 1.0, length(vec2(0.0, 0.0)), sin(0.0), 0.0, 0.0, 0.0))))), float(_GLF_FUZZED(-31.15)), bool(false)), mix(float(_GLF_FUZZED(579.808)), float(_GLF_IDENTITY(mix(float(float(mat2(injectionSwitch.x, 0.0, 0.0, determinant(mat3(0.0, 0.0, log(1.0), 1.0, length(vec2(0.0, 0.0)), sin(0.0), 0.0, 0.0, 0.0))))), float(_GLF_FUZZED(-31.15)), bool(false)), mix(float(mix(float(_GLF_IDENTITY(float(mat2(injectionSwitch.x, 0.0, 0.0, determinant(mat3(0.0, 0.0, log(1.0), 1.0, length(vec2(0.0, 0.0)), sin(0.0), 0.0, 0.0, 0.0)))), (float(mat2(injectionSwitch.x, 0.0, 0.0, determinant(mat3(0.0, 0.0, log(1.0), 1.0, length(vec2(0.0, 0.0)), sin(0.0), 0.0, 0.0, 0.0))))) * 1.0)), float(_GLF_FUZZED(-31.15)), bool(false))), float(_GLF_FUZZED(9.0)), bool(false)))), _GLF_IDENTITY(bool(true), bool(bvec3(bool(true), false, false)))))), float(_GLF_IDENTITY(mat2(injectionSwitch.x, 0.0, 0.0, determinant(mat3(0.0, 0.0, log(1.0), 1.0, length(vec2(0.0, _GLF_IDENTITY(0.0, (0.0) * 1.0))), sin(0.0), 0.0, 0.0, 0.0))), (mat2(injectionSwitch.x, 0.0, 0.0, determinant(mat3(0.0, 0.0, log(1.0), 1.0, length(vec2(0.0, _GLF_IDENTITY(0.0, (0.0) * 1.0))), sin(0.0), 0.0, 0.0, 0.0)))) / mat2(1.0, 1.0, 1.0, 1.0)))))) * sqrt(abs(1.0)))))), max(int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(mat2(injectionSwitch.x, 0.0, 0.0, determinant(mat3(0.0, 0.0, log(1.0), 1.0, length(vec2(0.0, 0.0)), sin(0.0), 0.0, 0.0, 0.0)))), max(_GLF_IDENTITY(float(mat2(injectionSwitch.x, 0.0, 0.0, determinant(mat3(0.0, 0.0, log(1.0), 1.0, length(vec2(0.0, 0.0)), sin(0.0), 0.0, 0.0, 0.0)))), mix(float(float(mat2(injectionSwitch.x, 0.0, 0.0, determinant(mat3(0.0, 0.0, log(1.0), 1.0, length(vec2(0.0, 0.0)), sin(0.0), 0.0, 0.0, 0.0))))), float(_GLF_FUZZED(-31.15)), bool(false))), float(mat2(injectionSwitch.x, 0.0, 0.0, determinant(mat3(0.0, 0.0, log(1.0), 1.0, length(vec2(0.0, 0.0)), sin(0.0), 0.0, 0.0, 0.0))))))))), int(_GLF_ZERO(0.0, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), _GLF_IDENTITY(float(mat2(injectionSwitch.x, 0.0, 0.0, determinant(mat3(0.0, 0.0, log(1.0), 1.0, length(vec2(0.0, 0.0)), sin(0.0), 0.0, 0.0, 0.0)))), max(_GLF_IDENTITY(float(mat2(injectionSwitch.x, 0.0, _GLF_IDENTITY(0.0, (0.0) / 1.0), determinant(mat3(_GLF_IDENTITY(0.0, (0.0) / 1.0), 0.0, _GLF_IDENTITY(log(1.0), max(log(1.0), log(1.0))), 1.0, length(vec2(0.0, 0.0)), sin(0.0), 0.0, 0.0, 0.0)))), mix(float(float(mat2(injectionSwitch.x, 0.0, 0.0, determinant(mat3(0.0, 0.0, log(1.0), 1.0, length(vec2(0.0, 0.0)), sin(0.0), 0.0, 0.0, 0.0))))), float(_GLF_FUZZED(-31.15)), bool(false))), float(mat2(injectionSwitch.x, 0.0, 0.0, determinant(mat3(0.0, 0.0, log(1.0), 1.0, length(vec2(0.0, 0.0)), sin(0.0), 0.0, 0.0, 0.0))))))))))), 0 | _GLF_IDENTITY(int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(_GLF_IDENTITY(float(mat2(injectionSwitch.x, 0.0, 0.0, determinant(mat3(0.0, 0.0, log(1.0), 1.0, length(vec2(0.0, 0.0)), sin(0.0), 0.0, 0.0, 0.0)))), max(_GLF_IDENTITY(float(mat2(injectionSwitch.x, 0.0, 0.0, determinant(mat3(0.0, 0.0, log(1.0), 1.0, length(vec2(0.0, 0.0)), sin(0.0), 0.0, 0.0, 0.0)))), _GLF_IDENTITY(mix(float(float(mat2(injectionSwitch.x, 0.0, 0.0, determinant(mat3(0.0, 0.0, log(1.0), 1.0, length(vec2(0.0, 0.0)), sin(0.0), 0.0, 0.0, 0.0))))), float(_GLF_FUZZED(-31.15)), bool(false)), mix(float(_GLF_FUZZED(579.808)), float(_GLF_IDENTITY(mix(float(float(mat2(injectionSwitch.x, 0.0, 0.0, determinant(mat3(0.0, 0.0, log(1.0), 1.0, length(vec2(0.0, 0.0)), sin(0.0), 0.0, 0.0, 0.0))))), float(_GLF_FUZZED(-31.15)), bool(false)), mix(float(mix(float(float(mat2(injectionSwitch.x, 0.0, 0.0, determinant(mat3(0.0, 0.0, log(1.0), 1.0, length(vec2(0.0, 0.0)), sin(0.0), 0.0, 0.0, 0.0))))), float(_GLF_FUZZED(-31.15)), bool(false))), float(_GLF_FUZZED(9.0)), bool(false)))), bool(true)))), float(mat2(injectionSwitch.x, 0.0, 0.0, determinant(mat3(0.0, 0.0, log(1.0), 1.0, length(vec2(0.0, _GLF_IDENTITY(0.0, (0.0) * 1.0))), sin(0.0), 0.0, 0.0, 0.0)))))), (_GLF_IDENTITY(float(mat2(injectionSwitch.x, 0.0, 0.0, determinant(mat3(0.0, 0.0, log(1.0), 1.0, length(vec2(0.0, 0.0)), sin(0.0), 0.0, 0.0, 0.0)))), max(_GLF_IDENTITY(float(mat2(injectionSwitch.x, 0.0, 0.0, determinant(mat3(0.0, 0.0, log(1.0), 1.0, length(vec2(0.0, 0.0)), sin(0.0), 0.0, 0.0, 0.0)))), _GLF_IDENTITY(mix(float(float(mat2(injectionSwitch.x, 0.0, 0.0, determinant(mat3(0.0, 0.0, log(1.0), 1.0, length(vec2(0.0, 0.0)), sin(0.0), 0.0, 0.0, 0.0))))), float(_GLF_FUZZED(-31.15)), bool(false)), mix(float(_GLF_FUZZED(579.808)), float(_GLF_IDENTITY(mix(float(float(mat2(injectionSwitch.x, 0.0, 0.0, determinant(mat3(0.0, 0.0, log(1.0), 1.0, length(vec2(0.0, 0.0)), sin(0.0), 0.0, 0.0, 0.0))))), float(_GLF_FUZZED(-31.15)), bool(false)), mix(float(mix(float(_GLF_IDENTITY(float(mat2(injectionSwitch.x, 0.0, 0.0, determinant(mat3(0.0, 0.0, log(1.0), 1.0, length(vec2(0.0, 0.0)), sin(0.0), 0.0, 0.0, 0.0)))), (float(mat2(injectionSwitch.x, 0.0, 0.0, determinant(mat3(0.0, 0.0, log(1.0), 1.0, length(vec2(0.0, 0.0)), sin(0.0), 0.0, 0.0, 0.0))))) * 1.0)), float(_GLF_FUZZED(-31.15)), bool(false))), float(_GLF_FUZZED(9.0)), bool(false)))), _GLF_IDENTITY(bool(true), bool(bvec3(bool(true), false, false)))))), float(_GLF_IDENTITY(mat2(injectionSwitch.x, 0.0, 0.0, determinant(mat3(0.0, 0.0, log(1.0), 1.0, length(vec2(0.0, _GLF_IDENTITY(0.0, (0.0) * 1.0))), sin(0.0), 0.0, 0.0, 0.0))), (mat2(injectionSwitch.x, 0.0, 0.0, determinant(mat3(0.0, 0.0, log(1.0), 1.0, length(vec2(0.0, _GLF_IDENTITY(0.0, (0.0) * 1.0))), sin(0.0), 0.0, 0.0, 0.0)))) / mat2(1.0, 1.0, 1.0, 1.0)))))) * sqrt(abs(1.0)))))), max(int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(mat2(injectionSwitch.x, 0.0, 0.0, determinant(mat3(0.0, 0.0, log(1.0), 1.0, length(vec2(0.0, 0.0)), sin(0.0), 0.0, 0.0, 0.0)))), max(_GLF_IDENTITY(float(mat2(injectionSwitch.x, 0.0, 0.0, determinant(mat3(0.0, 0.0, log(1.0), 1.0, length(vec2(0.0, 0.0)), sin(0.0), 0.0, 0.0, 0.0)))), mix(float(float(mat2(injectionSwitch.x, 0.0, 0.0, determinant(mat3(0.0, 0.0, log(1.0), 1.0, length(vec2(0.0, 0.0)), sin(0.0), 0.0, 0.0, 0.0))))), float(_GLF_FUZZED(-31.15)), bool(false))), float(mat2(injectionSwitch.x, 0.0, 0.0, determinant(mat3(0.0, 0.0, log(1.0), 1.0, length(vec2(0.0, 0.0)), sin(0.0), 0.0, 0.0, 0.0))))))))), int(_GLF_ZERO(0.0, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), _GLF_IDENTITY(float(mat2(injectionSwitch.x, 0.0, 0.0, determinant(mat3(0.0, 0.0, log(1.0), 1.0, length(vec2(0.0, 0.0)), sin(0.0), 0.0, 0.0, 0.0)))), max(_GLF_IDENTITY(float(mat2(injectionSwitch.x, 0.0, _GLF_IDENTITY(0.0, (0.0) / 1.0), determinant(mat3(_GLF_IDENTITY(0.0, (0.0) / 1.0), 0.0, _GLF_IDENTITY(log(1.0), max(log(1.0), log(1.0))), 1.0, length(vec2(0.0, 0.0)), sin(0.0), 0.0, 0.0, 0.0)))), mix(float(float(mat2(injectionSwitch.x, 0.0, 0.0, determinant(mat3(0.0, 0.0, log(1.0), 1.0, length(vec2(0.0, 0.0)), sin(0.0), 0.0, 0.0, 0.0))))), float(_GLF_FUZZED(-31.15)), bool(false))), float(mat2(injectionSwitch.x, 0.0, 0.0, determinant(mat3(0.0, 0.0, log(1.0), 1.0, length(vec2(0.0, 0.0)), sin(0.0), 0.0, 0.0, 0.0))))))))))), 0 | _GLF_IDENTITY(int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(_GLF_IDENTITY(float(mat2(injectionSwitch.x, 0.0, 0.0, determinant(mat3(0.0, 0.0, log(1.0), 1.0, length(vec2(0.0, 0.0)), sin(0.0), 0.0, 0.0, 0.0)))), max(_GLF_IDENTITY(float(mat2(injectionSwitch.x, 0.0, 0.0, determinant(mat3(0.0, 0.0, log(1.0), 1.0, length(vec2(0.0, 0.0)), sin(0.0), 0.0, 0.0, 0.0)))), _GLF_IDENTITY(mix(float(float(mat2(injectionSwitch.x, 0.0, 0.0, determinant(mat3(0.0, 0.0, log(1.0), 1.0, length(vec2(0.0, 0.0)), sin(0.0), 0.0, 0.0, 0.0))))), float(_GLF_FUZZED(-31.15)), bool(false)), mix(float(_GLF_FUZZED(579.808)), float(_GLF_IDENTITY(mix(float(float(mat2(injectionSwitch.x, 0.0, 0.0, determinant(mat3(0.0, 0.0, log(1.0), 1.0, length(vec2(0.0, 0.0)), sin(0.0), 0.0, 0.0, 0.0))))), float(_GLF_FUZZED(-31.15)), bool(false)), mix(float(mix(float(float(mat2(injectionSwitch.x, 0.0, 0.0, determinant(mat3(0.0, 0.0, log(1.0), 1.0, length(vec2(0.0, 0.0)), sin(0.0), 0.0, 0.0, 0.0))))), float(_GLF_FUZZED(-31.15)), bool(false))), float(_GLF_FUZZED(9.0)), bool(false)))), bool(true)))), float(mat2(injectionSwitch.x, 0.0, 0.0, determinant(mat3(0.0, 0.0, log(1.0), 1.0, length(vec2(0.0, _GLF_IDENTITY(0.0, (0.0) * 1.0))), sin(0.0), 0.0, 0.0, 0.0)))))), (_GLF_IDENTITY(float(mat2(injectionSwitch.x, 0.0, 0.0, determinant(mat3(0.0, 0.0, log(1.0), 1.0, length(vec2(0.0, 0.0)), sin(0.0), 0.0, 0.0, 0.0)))), max(_GLF_IDENTITY(float(mat2(injectionSwitch.x, 0.0, 0.0, determinant(mat3(0.0, 0.0, log(1.0), 1.0, length(vec2(0.0, 0.0)), sin(0.0), 0.0, 0.0, 0.0)))), _GLF_IDENTITY(mix(float(float(mat2(injectionSwitch.x, 0.0, 0.0, determinant(mat3(0.0, 0.0, log(1.0), 1.0, length(vec2(0.0, 0.0)), sin(0.0), 0.0, 0.0, 0.0))))), float(_GLF_FUZZED(-31.15)), bool(false)), mix(float(_GLF_FUZZED(579.808)), float(_GLF_IDENTITY(mix(float(float(mat2(injectionSwitch.x, 0.0, 0.0, determinant(mat3(0.0, 0.0, log(1.0), 1.0, length(vec2(0.0, 0.0)), sin(0.0), 0.0, 0.0, 0.0))))), float(_GLF_FUZZED(-31.15)), bool(false)), mix(float(mix(float(_GLF_IDENTITY(float(mat2(injectionSwitch.x, 0.0, 0.0, determinant(mat3(0.0, 0.0, log(1.0), 1.0, length(vec2(0.0, 0.0)), sin(0.0), 0.0, 0.0, 0.0)))), (float(mat2(injectionSwitch.x, 0.0, 0.0, determinant(mat3(0.0, 0.0, log(1.0), 1.0, length(vec2(0.0, 0.0)), sin(0.0), 0.0, 0.0, 0.0))))) * 1.0)), float(_GLF_FUZZED(-31.15)), bool(false))), float(_GLF_FUZZED(9.0)), bool(false)))), _GLF_IDENTITY(bool(true), bool(bvec3(bool(true), false, false)))))), float(_GLF_IDENTITY(mat2(injectionSwitch.x, 0.0, 0.0, determinant(mat3(0.0, 0.0, log(1.0), 1.0, length(vec2(0.0, _GLF_IDENTITY(0.0, (0.0) * 1.0))), sin(0.0), 0.0, 0.0, 0.0))), (mat2(injectionSwitch.x, 0.0, 0.0, determinant(mat3(0.0, 0.0, log(1.0), 1.0, length(vec2(0.0, _GLF_IDENTITY(0.0, (0.0) * 1.0))), sin(0.0), 0.0, 0.0, 0.0)))) / mat2(1.0, 1.0, 1.0, 1.0)))))) * sqrt(abs(1.0)))))), max(int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(mat2(injectionSwitch.x, 0.0, 0.0, determinant(mat3(0.0, 0.0, log(1.0), 1.0, length(vec2(0.0, 0.0)), sin(0.0), 0.0, 0.0, 0.0)))), max(_GLF_IDENTITY(float(mat2(injectionSwitch.x, 0.0, 0.0, determinant(mat3(0.0, 0.0, log(1.0), 1.0, length(vec2(0.0, 0.0)), sin(0.0), 0.0, 0.0, 0.0)))), mix(float(float(mat2(injectionSwitch.x, 0.0, 0.0, determinant(mat3(0.0, 0.0, log(1.0), 1.0, length(vec2(0.0, 0.0)), sin(0.0), 0.0, 0.0, 0.0))))), float(_GLF_FUZZED(-31.15)), bool(false))), float(mat2(injectionSwitch.x, 0.0, 0.0, determinant(mat3(0.0, 0.0, log(1.0), 1.0, length(vec2(0.0, 0.0)), sin(0.0), 0.0, 0.0, 0.0))))))))), int(_GLF_ZERO(0.0, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), _GLF_IDENTITY(float(mat2(injectionSwitch.x, 0.0, 0.0, determinant(mat3(0.0, 0.0, log(1.0), 1.0, length(vec2(0.0, 0.0)), sin(0.0), 0.0, 0.0, 0.0)))), max(_GLF_IDENTITY(float(mat2(injectionSwitch.x, 0.0, _GLF_IDENTITY(0.0, (0.0) / 1.0), determinant(mat3(_GLF_IDENTITY(0.0, (0.0) / 1.0), 0.0, _GLF_IDENTITY(log(1.0), max(log(1.0), log(1.0))), 1.0, length(vec2(0.0, 0.0)), sin(0.0), 0.0, 0.0, 0.0)))), mix(float(float(mat2(injectionSwitch.x, 0.0, 0.0, determinant(mat3(0.0, 0.0, log(1.0), 1.0, length(vec2(0.0, 0.0)), sin(0.0), 0.0, 0.0, 0.0))))), float(_GLF_FUZZED(-31.15)), bool(false))), float(mat2(injectionSwitch.x, 0.0, 0.0, determinant(mat3(0.0, 0.0, log(1.0), 1.0, length(vec2(0.0, 0.0)), sin(0.0), 0.0, 0.0, 0.0))))))))))))))); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      continue;
     return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        break;
       continue;
      }
     if(_GLF_DEAD(false))
      return;
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         continue;
        }
       return;
      }
    }
  }
 else
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       return;
      }
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y))) - 0.0)))))))) && true))
      return;
    }
   else
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            continue;
           return;
          }
         return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if(_GLF_DEAD(false))
  return;
 uint next_virtual_gid = workgroup_base + subgroup_base + ((_GLF_IDENTITY(subgroup_local_id + 1, max(_GLF_IDENTITY(subgroup_local_id + 1, min(subgroup_local_id + 1, _GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) << 0u))), _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) ^ (0u ^ 0u)) + 1))) % subgroup_size);
 atomicStore(buf[virtual_gid], uint(1), 4, 64, _GLF_IDENTITY(4, _GLF_IDENTITY(~ (_GLF_IDENTITY(~ (4), clamp(_GLF_IDENTITY(~ (4), ~ (_GLF_IDENTITY(~ (~ (4)), min(_GLF_IDENTITY(~ (~ (4)), ~ (~ (~ (~ (4))))), ~ (~ (4)))))), _GLF_IDENTITY(_GLF_IDENTITY(~ (4), (~ (4)) | (~ (4))), (~ (4)) / 1), ~ (4)))), (~ (_GLF_IDENTITY(~ (4), clamp(_GLF_IDENTITY(~ (4), ~ (_GLF_IDENTITY(~ (~ (4)), min(_GLF_IDENTITY(~ (~ (4)), ~ (~ (~ (~ (4))))), ~ (~ (4)))))), _GLF_IDENTITY(_GLF_IDENTITY(~ (4), (~ (4)) | (~ (4))), (~ (4)) / 1), ~ (4))))) << (0 << _GLF_IDENTITY(int(2), int(2))))));
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(true, false || (true)) && (injectionSwitch.x > injectionSwitch.y))))))
  return;
 for(int _injected_loop_counter = _GLF_IDENTITY(1, int(int(1))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 | (0 | 0))); _injected_loop_counter --)
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
     if(_GLF_DEAD(false))
      continue;
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            return;
           return;
           if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, (false) || false), true)))))
            return;
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            return;
           return;
          }
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          return;
         return;
        }
      }
     else
      {
      }
     if((subgroup_local_id % 2) == 0)
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         atomicStore(buf[next_virtual_gid], uint(2), 4, 64, 4);
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       else
        {
        }
      }
     else
      {
       for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 | 1)); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
            {
             if(_GLF_DEAD(false))
              return;
             if(_GLF_DEAD(false))
              return;
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(false))
                return;
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                continue;
               return;
              }
             else
              {
               if(_GLF_DEAD(false))
                break;
              }
             if(_GLF_DEAD(false))
              continue;
             if(_GLF_DEAD(false))
              break;
            }
           if(_GLF_DEAD(false))
            break;
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                break;
               break;
              }
             continue;
            }
           if(_GLF_DEAD(false))
            break;
           do
            {
             return;
            }
           while(_GLF_WRAPPED_LOOP(false));
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 | 0)); _injected_loop_counter --)
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              break;
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                return;
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                return;
               return;
              }
            }
           if(_GLF_DEAD(false))
            break;
           if(_GLF_DEAD(false))
            break;
          }
         if(_GLF_DEAD(false))
          break;
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           return;
          }
         else
          {
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
        {
         if(_GLF_DEAD(false))
          return;
         return;
        }
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _GLF_IDENTITY(_injected_loop_counter ++, (_GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) >> 0)) + 0))
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              break;
             break;
            }
           return;
           if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
            break;
          }
        }
       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), ! (! (_GLF_WRAPPED_IF_FALSE(false)))))
        {
        }
       else
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(1.0, min(1.0, 1.0)) * (injectionSwitch.y))))))
          {
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              return;
             return;
            }
           atomicStore(buf[next_virtual_gid], uint(2), 4, 64, 4);
           if(_GLF_DEAD(false))
            {
             do
              {
               if(_GLF_DEAD(false))
                return;
               if(_GLF_DEAD(false))
                continue;
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                 if(_GLF_DEAD(false))
                  continue;
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    return;
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(false))
                      return;
                     continue;
                    }
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
                      break;
                     continue;
                    }
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(false))
                      return;
                     return;
                    }
                  }
                 else
                  {
                  }
                }
               else
                {
                 return;
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 >> _GLF_IDENTITY(int(6), int(6)))); _injected_loop_counter --)
              {
               return;
              }
            }
          }
         else
          {
          }
         if(_GLF_DEAD(false))
          return;
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            return;
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              return;
             if(_GLF_DEAD(false))
              return;
             return;
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec4(false, false, false, false)))) && true)))
              return;
             if(_GLF_DEAD(false))
              return;
             return;
            }
          }
        }
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            return;
           return;
          }
         if(_GLF_DEAD(false))
          return;
        }
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         do
          {
           if(_GLF_DEAD(false))
            continue;
           return;
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        }
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, ! (! (false))), false)))))
      return;
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
      return;
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), injectionSwitch)).y))))
    return;
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
