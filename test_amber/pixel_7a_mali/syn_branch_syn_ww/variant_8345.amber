#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = _GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize, uvec3(gl_WorkGroupSize[0], gl_WorkGroupSize[1], gl_WorkGroupSize[2])), ~ (~ (_GLF_IDENTITY(gl_WorkGroupSize, (_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) << _GLF_IDENTITY(uvec3(0u, 0u, 0u), (uvec3(0u, 0u, 0u)) | uvec3(0u, 0u, 0u))), (false ? _GLF_FUZZED(uvec3(141917u, 36682u, 127807u)) : gl_WorkGroupSize))) | _GLF_IDENTITY(_GLF_IDENTITY((gl_WorkGroupSize), (false ? _GLF_FUZZED(uvec3(150163u, 67448u, 186681u)) : (gl_WorkGroupSize))), (_GLF_IDENTITY((gl_WorkGroupSize), (false ? _GLF_FUZZED(uvec3(150163u, 67448u, 186681u)) : (gl_WorkGroupSize)))) ^ uvec3(0u, 0u, 0u)))))).x;
 do
  {
   if(_GLF_DEAD(false))
    break;
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
     return;
     if(_GLF_DEAD(false))
      {
       do
        {
         return;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  return;
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = workgroup_size * workgroup_id;
 uint subgroup_base = _GLF_IDENTITY(subgroup_id, max(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id)), (_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id))) | (_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id)))), subgroup_id)) * subgroup_size;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))
  {
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((false) || false, ((false) || false) && true))))
      return;
    }
   else
    {
    }
  }
 uint virtual_gid = workgroup_base + subgroup_base + subgroup_local_id;
 uint next_virtual_gid = _GLF_IDENTITY(workgroup_base + subgroup_base, uint(_GLF_ZERO(0.0, injectionSwitch.x)) | (workgroup_base + subgroup_base)) + (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, (_GLF_IDENTITY(subgroup_local_id, 1u * (subgroup_local_id)) + 1) | (_GLF_IDENTITY(subgroup_local_id + 1, ~ (~ (subgroup_local_id + 1))))), ~ _GLF_IDENTITY((~ (subgroup_local_id + 1)), 0u | ((~ (subgroup_local_id + 1)))))), _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec2((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) | (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, max(_GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, subgroup_local_id)), subgroup_local_id)) + 1, ~ (~ _GLF_IDENTITY((subgroup_local_id + 1), max(_GLF_IDENTITY((subgroup_local_id + 1), 0u | (_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) >> 0u))), (subgroup_local_id + 1))))))), ~ _GLF_IDENTITY((~ (subgroup_local_id + 1)), 0u | ((~ _GLF_IDENTITY((subgroup_local_id + 1), max((subgroup_local_id + 1), (subgroup_local_id + 1)))))))), uint(_GLF_ONE(1.0, injectionSwitch.y))), clamp(uvec2((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, (_GLF_IDENTITY(subgroup_local_id, ~ _GLF_IDENTITY((~ (subgroup_local_id)), 0u | ((~ (subgroup_local_id))))) + 1) | (_GLF_IDENTITY(subgroup_local_id + 1, ~ (~ (subgroup_local_id + 1))))), ~ _GLF_IDENTITY((~ (subgroup_local_id + 1)), 0u | ((~ (subgroup_local_id + 1)))))), uint(_GLF_ONE(1.0, injectionSwitch.y))), uvec2((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) | _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, (true ? subgroup_local_id + 1 : _GLF_FUZZED((-- workgroup_base)))), ~ (~ (_GLF_IDENTITY(subgroup_local_id + _GLF_IDENTITY(_GLF_IDENTITY(1, (1) | int(_GLF_ZERO(0.0, injectionSwitch.x))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(1, (1) | int(_GLF_ZERO(0.0, injectionSwitch.x)))), (~ (_GLF_IDENTITY(1, (1) | int(_GLF_ZERO(0.0, injectionSwitch.x))))) | 0))), uint(_GLF_ZERO(0.0, injectionSwitch.x)) | (subgroup_local_id + 1)))))), ~ (~ ((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, (true ? subgroup_local_id + 1 : _GLF_FUZZED((-- workgroup_base)))), ~ (~ (_GLF_IDENTITY(subgroup_local_id + _GLF_IDENTITY(_GLF_IDENTITY(1, (1) | int(_GLF_ZERO(0.0, injectionSwitch.x))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(1, (1) | int(_GLF_ZERO(0.0, injectionSwitch.x)))), (~ (_GLF_IDENTITY(1, (1) | int(_GLF_ZERO(0.0, injectionSwitch.x))))) | 0))), uint(_GLF_ZERO(0.0, injectionSwitch.x)) | (subgroup_local_id + 1)))))))))), ~ _GLF_IDENTITY((~ (subgroup_local_id + 1)), 0u | ((_GLF_IDENTITY(~ (subgroup_local_id + 1), (~ (subgroup_local_id + 1)) | (~ (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) >> (0u >> _GLF_IDENTITY(uint(6u), uint(6u)))), (true ? _GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, 0u ^ (subgroup_local_id))) >> (0u >> _GLF_IDENTITY(uint(6u), uint(6u)))) : _GLF_FUZZED(subgroup_base))) + 1)))))))), uint(_GLF_ONE(1.0, injectionSwitch.y))), uvec2(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) | (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, (_GLF_IDENTITY(subgroup_local_id + 1, 0u ^ (_GLF_IDENTITY(subgroup_local_id + 1, min(subgroup_local_id + 1, subgroup_local_id + 1))))) / 1u), ~ (~ (subgroup_local_id + 1))))), ~ _GLF_IDENTITY((~ (subgroup_local_id + 1)), 0u | ((~ (subgroup_local_id + 1)))))), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) | (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, (_GLF_IDENTITY(subgroup_local_id + 1, 0u ^ (_GLF_IDENTITY(subgroup_local_id + 1, min(subgroup_local_id + 1, subgroup_local_id + 1))))) / 1u), ~ (~ (subgroup_local_id + 1))))), ~ _GLF_IDENTITY((~ (subgroup_local_id + 1)), 0u | ((~ (subgroup_local_id + 1)))))) : _GLF_FUZZED(num_workgroup))), uint(_GLF_ONE(1.0, injectionSwitch.y)))))), (_GLF_IDENTITY(uint(_GLF_IDENTITY(uvec2((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) / 1u) + _GLF_IDENTITY(1, min(1, 1)), (subgroup_local_id + 1) | (_GLF_IDENTITY(subgroup_local_id + 1, ~ (~ (subgroup_local_id + 1))))), ~ _GLF_IDENTITY((~ (subgroup_local_id + 1)), _GLF_IDENTITY(0u | _GLF_IDENTITY(((~ (subgroup_local_id + 1))), (((~ (subgroup_local_id + 1)))) / 1u), ~ (~ (_GLF_IDENTITY(0u | ((_GLF_IDENTITY(~ (subgroup_local_id + 1), (true ? ~ (subgroup_local_id + 1) : _GLF_FUZZED(uvec3(84964u, 156981u, 131640u)[1]))))), (_GLF_IDENTITY(0u | ((_GLF_IDENTITY(~ (subgroup_local_id + 1), (true ? ~ (subgroup_local_id + 1) : _GLF_FUZZED(uvec3(84964u, 156981u, 131640u)[1]))))), 0u ^ (_GLF_IDENTITY(0u | ((_GLF_IDENTITY(~ (subgroup_local_id + 1), (true ? ~ (subgroup_local_id + 1) : _GLF_FUZZED(uvec3(84964u, 156981u, 131640u)[1]))))), clamp(0u | ((_GLF_IDENTITY(~ (subgroup_local_id + 1), (true ? ~ (subgroup_local_id + 1) : _GLF_FUZZED(uvec3(84964u, 156981u, 131640u)[1]))))), 0u | ((_GLF_IDENTITY(~ (subgroup_local_id + 1), (true ? ~ (subgroup_local_id + 1) : _GLF_FUZZED(uvec3(84964u, 156981u, 131640u)[1]))))), 0u | ((_GLF_IDENTITY(~ (subgroup_local_id + 1), (true ? ~ (subgroup_local_id + 1) : _GLF_FUZZED(uvec3(84964u, 156981u, 131640u)[1])))))))))) * uint(_GLF_ONE(1.0, injectionSwitch.y))))))))), uint(_GLF_ONE(1.0, injectionSwitch.y))), clamp(uvec2((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) | (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, ~ (~ (_GLF_IDENTITY(subgroup_local_id, (true ? subgroup_local_id : _GLF_FUZZED(virtual_gid))) + 1))), (false ? _GLF_FUZZED(workgroup_id) : _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, ~ (~ (subgroup_local_id + 1))), uint(uvec2(_GLF_IDENTITY(subgroup_local_id + 1, ~ (~ (subgroup_local_id + 1))), 1u))), (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, ~ (~ (subgroup_local_id + 1))), uint(uvec2(_GLF_IDENTITY(subgroup_local_id + 1, ~ (~ (subgroup_local_id + 1))), 1u)))) | (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, ~ (~ (subgroup_local_id + 1))), uint(uvec2(_GLF_IDENTITY(subgroup_local_id + 1, ~ (~ (subgroup_local_id + 1))), 1u))))))))), ~ _GLF_IDENTITY((~ (subgroup_local_id + _GLF_IDENTITY(1, 0 ^ (1)))), 0u | ((~ (subgroup_local_id + 1)))))), uint(_GLF_ONE(1.0, injectionSwitch.y))), uvec2((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) | (_GLF_IDENTITY(subgroup_local_id + 1, ~ (~ (subgroup_local_id + 1))))), ~ _GLF_IDENTITY((~ (subgroup_local_id + 1)), 0u | ((~ (_GLF_IDENTITY(subgroup_local_id, 0u | (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | (subgroup_local_id)))) + 1)))))), uint(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), (_GLF_ONE(1.0, injectionSwitch.y)) - 0.0))), uvec2((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) | (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | (subgroup_local_id)) + 1, ~ (~ (subgroup_local_id + 1))))), ~ _GLF_IDENTITY((~ (subgroup_local_id + 1)), 0u | ((~ (subgroup_local_id + 1)))))), _GLF_IDENTITY(uint(_GLF_ONE(1.0, injectionSwitch.y)), (false ? _GLF_FUZZED(22190u) : uint(_GLF_ONE(1.0, injectionSwitch.y)))))))), (false ? _GLF_FUZZED(workgroup_size) : uint(_GLF_IDENTITY(_GLF_IDENTITY(uvec2((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, ~ (~ (subgroup_local_id + 1))), clamp(_GLF_IDENTITY(subgroup_local_id + 1, ~ (~ (subgroup_local_id + 1))), _GLF_IDENTITY(subgroup_local_id + 1, ~ (~ (subgroup_local_id + 1))), _GLF_IDENTITY(subgroup_local_id + 1, ~ (~ (subgroup_local_id + 1))))), (subgroup_local_id + 1) | (_GLF_IDENTITY(subgroup_local_id + 1, ~ (~ (subgroup_local_id + 1))))), ~ _GLF_IDENTITY((_GLF_IDENTITY(~ (subgroup_local_id + 1), (~ (_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, 0u ^ (subgroup_local_id))) >> 0u) + 1)) | 0u)), _GLF_IDENTITY(0u, max(_GLF_IDENTITY(0u, (false ? _GLF_FUZZED(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) - 0u)) : _GLF_IDENTITY(0u, 1u * (0u)))), _GLF_IDENTITY(0u, 0u | (0u)))) | _GLF_IDENTITY(((~ (subgroup_local_id + 1))), _GLF_IDENTITY(min(_GLF_IDENTITY(((~ (subgroup_local_id + 1))), (((~ (subgroup_local_id + 1)))) << uint(_GLF_ZERO(0.0, injectionSwitch.x))), ((_GLF_IDENTITY(~ (subgroup_local_id + 1), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(subgroup_size) : ~ (subgroup_local_id + 1)))))), min(min(_GLF_IDENTITY(((~ (subgroup_local_id + 1))), (((~ (subgroup_local_id + 1)))) << uint(_GLF_ZERO(0.0, injectionSwitch.x))), ((_GLF_IDENTITY(~ (subgroup_local_id + 1), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(subgroup_size) : ~ (subgroup_local_id + 1)))))), min(_GLF_IDENTITY(((~ (subgroup_local_id + 1))), (((~ (subgroup_local_id + 1)))) << uint(_GLF_ZERO(0.0, injectionSwitch.x))), ((_GLF_IDENTITY(~ (subgroup_local_id + 1), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(subgroup_size) : ~ (subgroup_local_id + 1)))))))))))), uint(_GLF_ONE(1.0, injectionSwitch.y))), (true ? _GLF_IDENTITY(uvec2((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, ~ (~ (subgroup_local_id + 1))), _GLF_IDENTITY((subgroup_local_id + 1) | (_GLF_IDENTITY(subgroup_local_id + 1, ~ (~ (subgroup_local_id + _GLF_IDENTITY(1, (1) >> 0))))), (_GLF_IDENTITY((subgroup_local_id + 1) | (_GLF_IDENTITY(subgroup_local_id + 1, ~ (~ (subgroup_local_id + _GLF_IDENTITY(1, (1) >> 0))))), ((subgroup_local_id + 1) | (_GLF_IDENTITY(subgroup_local_id + 1, ~ (~ (subgroup_local_id + _GLF_IDENTITY(1, (1) >> 0)))))) | ((subgroup_local_id + 1) | (_GLF_IDENTITY(subgroup_local_id + 1, ~ (~ (subgroup_local_id + _GLF_IDENTITY(1, (1) >> 0)))))))) | 0u)), ~ _GLF_IDENTITY((_GLF_IDENTITY(~ (subgroup_local_id + 1), (~ (subgroup_local_id + 1)) | 0u)), _GLF_IDENTITY(0u, max(_GLF_IDENTITY(0u, (false ? _GLF_FUZZED(subgroup_local_id) : _GLF_IDENTITY(0u, 1u * (0u)))), _GLF_IDENTITY(0u, 0u | (0u)))) | _GLF_IDENTITY(((~ (subgroup_local_id + 1))), min(_GLF_IDENTITY(((~ (subgroup_local_id + 1))), (((~ (subgroup_local_id + 1)))) << uint(_GLF_ZERO(0.0, injectionSwitch.x))), ((~ (subgroup_local_id + 1)))))))), uint(_GLF_ONE(1.0, injectionSwitch.y))), (uvec2((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, uint(_GLF_IDENTITY(uvec3(subgroup_local_id, 1u, (1u | 0u)), ~ (~ (uvec3(subgroup_local_id, 1u, (1u | 0u))))))) + 1, ~ (~ (subgroup_local_id + 1))), (subgroup_local_id + 1) | (_GLF_IDENTITY(subgroup_local_id + 1, ~ (_GLF_IDENTITY(~ (subgroup_local_id + 1), (~ (subgroup_local_id + 1)) / 1u))))), ~ _GLF_IDENTITY((_GLF_IDENTITY(~ (subgroup_local_id + 1), (~ (subgroup_local_id + 1)) | 0u)), _GLF_IDENTITY(_GLF_IDENTITY(0u, max(_GLF_IDENTITY(0u, (false ? _GLF_FUZZED(subgroup_local_id) : _GLF_IDENTITY(0u, 1u * (0u)))), _GLF_IDENTITY(0u, 0u | (0u)))), min(_GLF_IDENTITY(0u, max(_GLF_IDENTITY(0u, (false ? _GLF_FUZZED(subgroup_local_id) : _GLF_IDENTITY(0u, 1u * (0u)))), _GLF_IDENTITY(0u, 0u | (0u)))), _GLF_IDENTITY(_GLF_IDENTITY(0u, max(_GLF_IDENTITY(_GLF_IDENTITY(0u, min(_GLF_IDENTITY(0u, min(_GLF_IDENTITY(0u, (0u) >> 0u), _GLF_IDENTITY(0u, ~ (~ (0u))))), 0u)), _GLF_IDENTITY((false ? _GLF_FUZZED(subgroup_local_id) : _GLF_IDENTITY(0u, 1u * (0u))), max((false ? _GLF_FUZZED(subgroup_local_id) : _GLF_IDENTITY(0u, 1u * (0u))), (false ? _GLF_FUZZED(subgroup_local_id) : _GLF_IDENTITY(0u, 1u * (0u)))))), _GLF_IDENTITY(0u, 0u | (0u)))), ~ (~ (_GLF_IDENTITY(0u, max(_GLF_IDENTITY(0u, (false ? _GLF_FUZZED(subgroup_local_id) : _GLF_IDENTITY(0u, 1u * (0u)))), _GLF_IDENTITY(0u, 0u | (0u))))))))) | _GLF_IDENTITY(((~ (subgroup_local_id + 1))), _GLF_IDENTITY(min(_GLF_IDENTITY(((~ (subgroup_local_id + 1))), (((~ (subgroup_local_id + 1)))) << uint(_GLF_ZERO(0.0, injectionSwitch.x))), ((~ (subgroup_local_id + 1)))), 0u ^ (_GLF_IDENTITY(min(_GLF_IDENTITY(((~ (subgroup_local_id + 1))), (((~ (subgroup_local_id + 1)))) << uint(_GLF_ZERO(0.0, injectionSwitch.x))), ((~ (subgroup_local_id + 1)))), clamp(_GLF_IDENTITY(min(_GLF_IDENTITY(((~ (subgroup_local_id + 1))), (_GLF_IDENTITY(((~ (subgroup_local_id + 1))), (_GLF_IDENTITY(((~ (subgroup_local_id + 1))), (((~ (subgroup_local_id + 1)))) >> 0u)) / 1u)) << uint(_GLF_ZERO(0.0, injectionSwitch.x))), ((~ (subgroup_local_id + 1)))), uint(uvec2(min(_GLF_IDENTITY(((~ (subgroup_local_id + 1))), (((~ (subgroup_local_id + 1)))) << _GLF_IDENTITY(uint(_GLF_ZERO(0.0, injectionSwitch.x)), uint(uvec2(uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u)))), ((~ (subgroup_local_id + 1)))), 0u))), min(_GLF_IDENTITY(_GLF_IDENTITY(((~ (subgroup_local_id + 1))), (((~ (subgroup_local_id + 1)))) << uint(_GLF_ZERO(0.0, injectionSwitch.x))), (_GLF_IDENTITY(((~ (subgroup_local_id + 1))), (((~ (subgroup_local_id + 1)))) << uint(_GLF_ZERO(_GLF_IDENTITY(0.0, (0.0) / 1.0), injectionSwitch.x)))) / 1u), ((~ (subgroup_local_id + 1)))), min(_GLF_IDENTITY(((~ (subgroup_local_id + 1))), (((~ (_GLF_IDENTITY(subgroup_local_id + 1, min(subgroup_local_id + 1, subgroup_local_id + 1)))))) << uint(_GLF_ZERO(0.0, injectionSwitch.x))), ((~ (subgroup_local_id + 1)))))))))))), uint(_GLF_ONE(1.0, injectionSwitch.y)))) | uvec2(0u, 0u)) : _GLF_FUZZED(uvec2(72549u, 180771u)))), clamp(uvec2((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) | (_GLF_IDENTITY(subgroup_local_id + 1, ~ (~ (subgroup_local_id + 1))))), (_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) | (_GLF_IDENTITY(subgroup_local_id + 1, ~ (~ (subgroup_local_id + 1)))))) | 0u), ~ _GLF_IDENTITY(_GLF_IDENTITY((~ (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) ^ (0u >> _GLF_IDENTITY(uint(6u), uint(6u)))) + 1)), 0u | ((~ (subgroup_local_id + 1)))), uint(uvec4(_GLF_IDENTITY((~ (subgroup_local_id + 1)), 0u | ((~ (subgroup_local_id + 1)))), 1u, 1u, (0u ^ 0u)))))), uint(_GLF_ONE(1.0, injectionSwitch.y))), uvec2((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) | (_GLF_IDENTITY(subgroup_local_id + 1, ~ (_GLF_IDENTITY(~ (subgroup_local_id + 1), ~ (~ (~ (subgroup_local_id + 1)))))))), ~ _GLF_IDENTITY((~ (subgroup_local_id + _GLF_IDENTITY(1, max(1, 1)))), 0u | ((~ (subgroup_local_id + 1)))))), uint(_GLF_ONE(1.0, injectionSwitch.y))), uvec2((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) | (_GLF_IDENTITY(subgroup_local_id + 1, ~ (~ (subgroup_local_id + 1))))), ~ _GLF_IDENTITY((~ (subgroup_local_id + 1)), 0u | ((~ (subgroup_local_id + 1)))))), uint(_GLF_ONE(1.0, injectionSwitch.y))))))))) << 0u)) % subgroup_size);
 if(_GLF_DEAD(false))
  return;
 atomicStore(buf[virtual_gid], uint(1), 4, 64, 4);
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       return;
      }
     else
      {
      }
    }
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
        return;
       return;
       if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) && true)))
        return;
      }
    }
   if(_GLF_DEAD(false))
    break;
   if(_GLF_DEAD(false))
    continue;
  }
 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)))), ! (! (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))))))), (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)), injectionSwitch)).y, injectionSwitch.y))))) || false)));
 if((subgroup_local_id % 2) == _GLF_IDENTITY(_GLF_IDENTITY(0, clamp(_GLF_IDENTITY(0, 0 | (0)), _GLF_IDENTITY(0, max(0, 0)), _GLF_IDENTITY(0, max(0, 0)))), (false ? _GLF_FUZZED(-99329) : 0)))
  {
   if(_GLF_DEAD(false))
    {
     do
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
        return;
      }
     while(_GLF_WRAPPED_LOOP(false));
     for(int _injected_loop_counter = _GLF_IDENTITY(0, max(0, 0)); _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 ^ 0)); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         break;
        }
       return;
      }
     if(_GLF_DEAD(false))
      return;
    }
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (int(2)) << (0 ^ 0))))); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
    }
   atomicStore(buf[next_virtual_gid], uint(2), _GLF_IDENTITY(4, (false ? _GLF_FUZZED(_GLF_IDENTITY(39981, 0 | (_GLF_IDENTITY(39981, min(39981, 39981))))) : 4)), _GLF_IDENTITY(64, clamp(64, 64, 64)), 4);
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
   for(int _injected_loop_counter = (1 ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      return;
    }
   do
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          break;
         continue;
        }
       if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))) && true), (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) && true)) || false))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y))))))
          continue;
         if(_GLF_DEAD(false))
          return;
         return;
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, ! (! (false)))), ! (! (bool(_GLF_IDENTITY(false, ! (! (false)))))))))))
          continue;
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, max(_GLF_IDENTITY(_injected_loop_counter, max(_injected_loop_counter, _injected_loop_counter)), _injected_loop_counter)) != 0); _injected_loop_counter --)
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         atomicStore(buf[next_virtual_gid], uint(2), 4, 64, 4);
        }
      }
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_DEAD(false))
      break;
    }
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY(false, (false) && true)), _GLF_IDENTITY((! (_GLF_IDENTITY(false, _GLF_IDENTITY((false) && true, ((false) && true) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) && true, bool(bvec2(_GLF_IDENTITY((! (_GLF_IDENTITY(false, _GLF_IDENTITY((false) && true, ((false) && true) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) && true, false || ((! (_GLF_IDENTITY(false, _GLF_IDENTITY((false) && true, ((false) && true) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) && true)), true)))), _GLF_IDENTITY(bool(bvec3(! _GLF_IDENTITY((_GLF_IDENTITY(false, _GLF_IDENTITY((_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false))) && true, _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY((false) && true, bool(bool(_GLF_IDENTITY(_GLF_IDENTITY((false), (_GLF_IDENTITY((false), bool(bvec2((false), true)))) || false) && true, (_GLF_IDENTITY((false) && _GLF_IDENTITY(true, (_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, false || (true)))))) || false), ! (! ((false) && true)))) || false))))), bool(_GLF_IDENTITY(bool(bool(_GLF_IDENTITY((false) && true, bool(bool((false) && true))))), true && (bool(_GLF_IDENTITY(bool(_GLF_IDENTITY((false) && true, bool(bool(_GLF_IDENTITY((_GLF_IDENTITY(false, (false) || false)) && true, ((_GLF_IDENTITY(false, (false) || _GLF_IDENTITY(false, false || (false)))) && true) || _GLF_IDENTITY(false, (false) && true)))))), bool(_GLF_IDENTITY(bvec2(bool(_GLF_IDENTITY((_GLF_IDENTITY(false, true && (false))) && true, bool(bool((_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec2(false, true))), (false) || false)) && true)))), false), bvec2(bvec3(bvec2(bool(_GLF_IDENTITY((false) && true, bool(bool((_GLF_IDENTITY(false, (false) || false)) && true)))), false), false))))))))))), bool(bvec4(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_IDENTITY((false) && true, bool(bool((false) && true)))), ! (_GLF_IDENTITY(! (bool(_GLF_IDENTITY((false) && true, bool(bool((false) && true))))), ! (! (! (bool(_GLF_IDENTITY((false) && true, bool(bool((false) && true)))))))))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(bool(_GLF_IDENTITY((false) && true, _GLF_IDENTITY(bool(bool((false) && true)), true && (bool(bool((false) && true))))))), true && _GLF_IDENTITY((bool(bool(_GLF_IDENTITY((false) && true, bool(bool((false) && true)))))), bool(bvec4((bool(bool(_GLF_IDENTITY((false) && true, bool(bool((false) && true)))))), true, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))), ! (_GLF_IDENTITY(! (bool(_GLF_IDENTITY(bool(bool(_GLF_IDENTITY((false) && true, bool(bool((false) && true))))), true && _GLF_IDENTITY((bool(bool(_GLF_IDENTITY((false) && true, bool(bool((false) && true)))))), bool(bvec4((bool(bool(_GLF_IDENTITY((false) && true, _GLF_IDENTITY(bool(bool((false) && true)), false || (bool(bool((false) && true)))))))), true, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))), bool(bvec4(! (bool(_GLF_IDENTITY(bool(bool(_GLF_IDENTITY((false) && true, bool(bool((false) && true))))), true && _GLF_IDENTITY((bool(bool(_GLF_IDENTITY((false) && true, bool(bool((false) && true)))))), bool(bvec4((bool(bool(_GLF_IDENTITY(_GLF_IDENTITY((false), true && (_GLF_IDENTITY((false), bool(bvec3((false), true, true))))) && _GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, true && (true))))), bool(bool((false) && true)))))), true, true, _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(81.28)), float(_GLF_IDENTITY(injectionSwitch.y, 1.0 * (injectionSwitch.y))), bool(true))))))))))), true, true, false))))))), bool(bvec3(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY((false) && true, bool(bool((false) && true)))), bool(_GLF_IDENTITY(bool(bool(_GLF_IDENTITY((false) && true, bool(bool((false) && true))))), true && (bool(bool(_GLF_IDENTITY((false) && true, bool(bool((false) && true)))))))))), false, true))), false, true, _GLF_TRUE(_GLF_IDENTITY(true, true && (true)), (injectionSwitch.x < injectionSwitch.y)))))))), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, true, false, false)), ! (! (bool(bvec4(false, true, false, false)))))), _GLF_IDENTITY((false) && true, _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY((false) && true, bool(bool(_GLF_IDENTITY((false) && true, (_GLF_IDENTITY((_GLF_IDENTITY(false, (false) && true)) && true, ! (! ((false) && true)))) || false))))), bool(_GLF_IDENTITY(bool(bool(_GLF_IDENTITY((false) && true, bool(bool((false) && true))))), true && (bool(_GLF_IDENTITY(bool(_GLF_IDENTITY((false) && true, bool(bool((_GLF_IDENTITY(false, (false) || false)) && true)))), bool(_GLF_IDENTITY(bvec2(bool(_GLF_IDENTITY((false) && true, bool(bool((_GLF_IDENTITY(false, (false) || false)) && true)))), false), bvec2(bvec3(bvec2(bool(_GLF_IDENTITY((false) && true, bool(bool((_GLF_IDENTITY(false, (false) || false)) && _GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec3(true, false, false), bvec3(bvec4(bvec3(true, false, false), true))))))))), false), false))))))))))), bool(bvec4(_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY((false) && true, _GLF_IDENTITY(bool(bool((_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (! (bool(bvec2(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))) && true)), bool(bvec2(bool(bool((_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (! (bool(bvec2(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))) && true)), false))))), bool(_GLF_IDENTITY(bool(bool(_GLF_IDENTITY((false) && true, bool(bool((false) && true))))), true && (bool(bool(_GLF_IDENTITY((false) && true, bool(_GLF_IDENTITY(bool((_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || false)) || false)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))) && true), bool(bool(bool((_GLF_IDENTITY(false, (false) && _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true && (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))) && true))))))))))))), bool(bvec3(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY((false) && true, bool(bool(_GLF_IDENTITY((false), false || ((false))) && true)))), bool(_GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_GLF_IDENTITY((false) && true, bool(bool((false) && true))), (_GLF_IDENTITY((false) && true, bool(bool((false) && true)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), true && (bool(bool(_GLF_IDENTITY((false) && true, bool(bool((false) && true)))))))))), false, true))), false, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))), ((_GLF_IDENTITY(false, _GLF_IDENTITY((false) && true, _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY((false) && true, bool(bool(_GLF_IDENTITY((false) && true, (_GLF_IDENTITY((false) && true, ! (! ((false) && true)))) || false))))), bool(_GLF_IDENTITY(bool(bool(_GLF_IDENTITY((false) && true, bool(bool((false) && true))))), true && (bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_IDENTITY((false) && true, bool(bool((_GLF_IDENTITY(false, (false) || false)) && true)))), false || (_GLF_IDENTITY(bool(_GLF_IDENTITY((false) && true, bool(bool((_GLF_IDENTITY(false, (false) || false)) && true)))), ! (! (bool(_GLF_IDENTITY((false) && true, bool(bool((_GLF_IDENTITY(false, (false) || false)) && true))))))))), bool(_GLF_IDENTITY(bvec2(bool(_GLF_IDENTITY((false) && true, bool(bool((_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), bool(bvec4(_GLF_IDENTITY(false, (false) || false), true, true, true))))), ! (! (bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), bool(bvec4(_GLF_IDENTITY(false, (false) || false), true, true, true)))))))))) && true)))), false), _GLF_IDENTITY(bvec2(bvec3(bvec2(bool(_GLF_IDENTITY((false) && true, bool(bool((_GLF_IDENTITY(false, (false) || false)) && true)))), false), false)), bvec2(bvec2(bvec2(bvec3(bvec2(bool(_GLF_IDENTITY((false) && true, bool(_GLF_IDENTITY(bool((_GLF_IDENTITY(false, (false) || false)) && true), bool(bvec3(bool((_GLF_IDENTITY(false, (false) || false)) && true), true, false)))))), false), false)))))))))))))), bool(bvec4(_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY((false) && true, bool(bool((false) && true)))), bool(_GLF_IDENTITY(bool(bool(_GLF_IDENTITY((false) && true, bool(bool((false) && true))))), true && (bool(bool(_GLF_IDENTITY((false) && true, bool(bool((false) && true)))))))))), bool(bvec3(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY((false) && true, bool(bool((false) && true)))), bool(_GLF_IDENTITY(bool(bool(_GLF_IDENTITY((false) && true, _GLF_IDENTITY(bool(bool((false) && true)), ! (! (bool(bool((false) && true)))))))), true && (bool(bool(_GLF_IDENTITY((false) && true, bool(bool((false) && true)))))))))), false, true))), false, true, _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, float(_GLF_IDENTITY(mat4x2(injectionSwitch.y, 0.0, 1.0, 1.0, cos(0.0), 1.0, 1.0, sin(0.0)), mat4x2(mat4(_GLF_IDENTITY(mat4x2(injectionSwitch.y, 0.0, 1.0, 1.0, cos(0.0), 1.0, 1.0, sin(0.0)), (mat4x2(injectionSwitch.y, 0.0, 1.0, 1.0, cos(0.0), 1.0, 1.0, sin(0.0))) * mat4(1.0)))))))))))))))) && true), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)).x > injectionSwitch.y)), false, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).x < injectionSwitch.y)))), _GLF_IDENTITY(true, bool(bvec4(_GLF_IDENTITY(true, bool(bvec4(true, false, true, false))), false, _GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, true, true), bvec3(bvec4(_GLF_IDENTITY(bvec3(false, true, true), bvec3(bvec3(bvec3(false, true, true)))), false))))), false))) && (bool(bvec4(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY((false) && true, _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY((false) && true, bool(bool(_GLF_IDENTITY((false) && true, (_GLF_IDENTITY(_GLF_IDENTITY((false), ((false)) && true) && true, ! (! ((false) && true)))) || false))))), bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_GLF_IDENTITY((false) && true, ((false) && true) && true), bool(bool((false) && true))))), true && (bool(bool(_GLF_IDENTITY(_GLF_IDENTITY((false) && true, ((false) && true) && true), bool(bool((false) && true))))))), true && (bool(_GLF_IDENTITY(bool(_GLF_IDENTITY((false) && true, bool(bool((_GLF_IDENTITY(false, (false) || false)) && true)))), bool(_GLF_IDENTITY(bvec2(bool(_GLF_IDENTITY((false) && true, bool(bool((_GLF_IDENTITY(false, (false) || false)) && true)))), false), bvec2(bvec3(bvec2(bool(_GLF_IDENTITY((false) && true, bool(bool((_GLF_IDENTITY(false, (false) || false)) && true)))), false), false))))))))))), bool(bvec4(_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY((false) && true, bool(bool((false) && true)))), bool(_GLF_IDENTITY(bool(bool(_GLF_IDENTITY((false) && true, bool(bool((false) && true))))), true && (bool(bool(_GLF_IDENTITY((false) && true, bool(bool((false) && true)))))))))), bool(bvec3(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY((false) && true, bool(bool((false) && _GLF_IDENTITY(true, (_GLF_IDENTITY(true, bool(bvec2(true, true)))) || false))))), bool(_GLF_IDENTITY(bool(bool(_GLF_IDENTITY((false) && true, bool(bool((false) && true))))), true && (bool(bool(_GLF_IDENTITY((false) && true, bool(bool((false) && true)))))))))), false, true))), false, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))), bool(bvec3(_GLF_IDENTITY(false, _GLF_IDENTITY((false) && true, _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY((false) && true, bool(bool(_GLF_IDENTITY((false) && true, (_GLF_IDENTITY(_GLF_IDENTITY((false), ((false)) && true) && true, ! (! ((false) && true)))) || false))))), bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_GLF_IDENTITY((false) && true, ((false) && true) && true), bool(bool((false) && true))))), true && (bool(bool(_GLF_IDENTITY(_GLF_IDENTITY((false) && true, ((false) && true) && true), bool(bool((false) && true))))))), true && (bool(_GLF_IDENTITY(bool(_GLF_IDENTITY((false) && true, bool(bool((_GLF_IDENTITY(false, (false) || false)) && true)))), bool(_GLF_IDENTITY(bvec2(bool(_GLF_IDENTITY((false) && true, bool(bool((_GLF_IDENTITY(false, (false) || false)) && true)))), false), bvec2(bvec3(bvec2(bool(_GLF_IDENTITY((false) && true, bool(bool((_GLF_IDENTITY(false, (false) || false)) && true)))), false), false))))))))))), bool(bvec4(_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY((false) && true, bool(bool((false) && true)))), bool(_GLF_IDENTITY(bool(bool(_GLF_IDENTITY((false) && true, bool(bool((false) && true))))), true && (bool(bool(_GLF_IDENTITY((false) && true, bool(bool((false) && true)))))))))), bool(bvec3(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY((false) && true, bool(bool((false) && _GLF_IDENTITY(true, (_GLF_IDENTITY(true, bool(bvec2(true, true)))) || false))))), bool(_GLF_IDENTITY(bool(bool(_GLF_IDENTITY((false) && true, bool(bool((false) && true))))), true && (bool(bool(_GLF_IDENTITY((false) && true, bool(bool((false) && true)))))))))), false, true))), false, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))), ((_GLF_IDENTITY(false, _GLF_IDENTITY((false) && true, _GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY((false) && true, bool(bool(_GLF_IDENTITY((false) && true, (_GLF_IDENTITY((false) && true, ! (_GLF_IDENTITY(! ((false) && true), (! ((false) && true)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))) || false))))), bool(_GLF_IDENTITY(bool(bool(_GLF_IDENTITY((false) && true, bool(bool((false) && true))))), true && (bool(_GLF_IDENTITY(bool(_GLF_IDENTITY((false) && true, bool(bool((_GLF_IDENTITY(false, _GLF_IDENTITY((false) || false, (_GLF_IDENTITY((false) || false, false || (_GLF_IDENTITY((false) || false, ! (! ((_GLF_IDENTITY(false, ! (! (false)))) || false)))))) && true))) && true)))), bool(_GLF_IDENTITY(bvec2(bool(_GLF_IDENTITY((false) && true, bool(bool((_GLF_IDENTITY(false, (false) || false)) && true)))), false), bvec2(bvec3(bvec2(bool(_GLF_IDENTITY((false) && true, bool(bool((_GLF_IDENTITY(false, (false) || false)) && true)))), false), false))))))))))), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY((false) && true, bool(bool(_GLF_IDENTITY((false) && true, ! (! (_GLF_IDENTITY((false) && true, true && ((false) && true))))))))), bool(_GLF_IDENTITY(bool(bool(_GLF_IDENTITY((false) && true, bool(bool((false) && true))))), true && (bool(bool(_GLF_IDENTITY((false) && true, bool(bool((false) && true)))))))))), bool(bvec3(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY((false) && true, bool(bool((false) && true)))), bool(_GLF_IDENTITY(bool(bool(_GLF_IDENTITY((false) && true, bool(bool((false) && true))))), true && (bool(bool(_GLF_IDENTITY((false) && true, bool(bool((false) && true)))))))))), false, true))), false, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), (bool(bvec4(_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY((false) && true, bool(bool(_GLF_IDENTITY((false) && true, ! (! (_GLF_IDENTITY((false) && true, true && ((false) && true))))))))), bool(_GLF_IDENTITY(bool(bool(_GLF_IDENTITY((false) && true, bool(bool((false) && true))))), true && (bool(bool(_GLF_IDENTITY((false) && true, bool(bool((false) && true)))))))))), bool(bvec3(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY((false) && true, bool(bool((false) && true)))), bool(_GLF_IDENTITY(bool(bool(_GLF_IDENTITY((false) && true, bool(bool((false) && true))))), true && (bool(bool(_GLF_IDENTITY((false) && true, bool(bool((false) && true)))))))))), false, true))), false, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) || false)), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY((false) && true, bool(bool(_GLF_IDENTITY((false) && true, (_GLF_IDENTITY((false) && true, ! (_GLF_IDENTITY(! ((false) && true), (! ((false) && true)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))) || false))))), bool(_GLF_IDENTITY(bool(bool(_GLF_IDENTITY((false) && true, bool(bool((false) && true))))), true && (bool(_GLF_IDENTITY(bool(_GLF_IDENTITY((false) && true, bool(bool((_GLF_IDENTITY(false, _GLF_IDENTITY((false) || false, (_GLF_IDENTITY((false) || false, false || (_GLF_IDENTITY((false) || false, ! (! ((_GLF_IDENTITY(false, ! (! (false)))) || false)))))) && true))) && true)))), bool(_GLF_IDENTITY(bvec2(bool(_GLF_IDENTITY((false) && true, bool(bool((_GLF_IDENTITY(false, (false) || false)) && true)))), false), bvec2(bvec3(bvec2(bool(_GLF_IDENTITY((false) && true, bool(bool((_GLF_IDENTITY(false, (false) || false)) && true)))), false), false))))))))))), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY((false) && true, bool(bool(_GLF_IDENTITY((false) && true, ! (! (_GLF_IDENTITY((false) && true, true && ((false) && true))))))))), bool(_GLF_IDENTITY(bool(bool(_GLF_IDENTITY((false) && true, bool(bool((false) && true))))), true && (bool(bool(_GLF_IDENTITY((false) && true, bool(bool((false) && true)))))))))), bool(bvec3(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY((false) && true, bool(bool((false) && true)))), bool(_GLF_IDENTITY(bool(bool(_GLF_IDENTITY((false) && true, bool(bool((false) && true))))), true && (bool(bool(_GLF_IDENTITY((false) && true, bool(bool((false) && true)))))))))), false, true))), false, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), (bool(bvec4(_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY((false) && true, bool(bool(_GLF_IDENTITY((false) && true, ! (! (_GLF_IDENTITY((false) && true, true && ((false) && true))))))))), bool(_GLF_IDENTITY(bool(bool(_GLF_IDENTITY((false) && true, bool(bool((false) && true))))), true && (bool(bool(_GLF_IDENTITY((false) && true, bool(bool((false) && true)))))))))), bool(bvec3(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY((false) && true, bool(bool((false) && true)))), bool(_GLF_IDENTITY(bool(bool(_GLF_IDENTITY((false) && true, bool(bool((false) && true))))), true && (bool(bool(_GLF_IDENTITY((false) && true, bool(bool((false) && true)))))))))), false, true))), false, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) || false)), (_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY((false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY((false), (_GLF_IDENTITY((false), ((false)) && true)) || false))) && true, bool(bool(_GLF_IDENTITY(_GLF_IDENTITY((false), true && ((false))) && true, (_GLF_IDENTITY((false) && true, ! (_GLF_IDENTITY(! ((false) && true), (! ((false) && true)) && _GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), false || (_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), false || ((injectionSwitch.x < injectionSwitch.y)))))))))) || false))))), bool(_GLF_IDENTITY(bool(bool(_GLF_IDENTITY((false) && true, bool(bool((false) && true))))), true && (bool(_GLF_IDENTITY(bool(_GLF_IDENTITY((false) && true, _GLF_IDENTITY(bool(bool((_GLF_IDENTITY(false, _GLF_IDENTITY((false) || false, (_GLF_IDENTITY((false) || false, false || (_GLF_IDENTITY((false) || false, ! (! ((_GLF_IDENTITY(false, ! (! (false)))) || false)))))) && true))) && true)), ! (! (bool(bool((_GLF_IDENTITY(false, _GLF_IDENTITY((false) || false, (_GLF_IDENTITY((false) || false, false || (_GLF_IDENTITY((false) || false, ! (! ((_GLF_IDENTITY(false, ! (! (false)))) || false)))))) && true))) && true))))))), bool(_GLF_IDENTITY(bvec2(bool(_GLF_IDENTITY((false) && true, bool(bool((_GLF_IDENTITY(false, (false) || false)) && true)))), false), bvec2(bvec3(bvec2(bool(_GLF_IDENTITY(_GLF_IDENTITY((false) && true, bool(bool((_GLF_IDENTITY(false, (false) || false)) && true))), true && (_GLF_IDENTITY((_GLF_IDENTITY(false, (_GLF_IDENTITY(false, false || (false))) && true)) && true, bool(bool((_GLF_IDENTITY(false, (false) || _GLF_IDENTITY(false, (false) && true))) && true)))))), false), false))))))))))), _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY((false) && true, bool(bool(_GLF_IDENTITY((false) && true, ! (! (_GLF_IDENTITY((false) && true, true && ((false) && true))))))))), bool(_GLF_IDENTITY(bool(bool(_GLF_IDENTITY((false) && true, bool(bool((false) && true))))), true && (bool(bool(_GLF_IDENTITY((false) && true, bool(bool((false) && true)))))))))), bool(bvec3(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY((false) && true, bool(bool((false) && true)))), bool(_GLF_IDENTITY(bool(bool(_GLF_IDENTITY((false) && true, bool(bool((false) && true))))), true && (bool(bool(_GLF_IDENTITY((false) && true, bool(bool((false) && true)))))))))), false, true))), false, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), (bool(bvec4(_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY((false) && true, bool(bool(_GLF_IDENTITY((false) && true, ! (! (_GLF_IDENTITY((false) && true, true && ((false) && true))))))))), bool(_GLF_IDENTITY(bool(bool(_GLF_IDENTITY((false) && true, bool(bool((false) && true))))), true && (bool(bool(_GLF_IDENTITY((false) && true, bool(bool((false) && true)))))))))), bool(bvec3(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY((false) && true, bool(bool((false) && true)))), bool(_GLF_IDENTITY(bool(bool(_GLF_IDENTITY((false) && true, bool(bool((false) && true))))), true && (bool(bool(_GLF_IDENTITY((false) && true, bool(bool((false) && true)))))))))), false, true))), false, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) || false), (_GLF_IDENTITY(_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY((false) && true, bool(bool(_GLF_IDENTITY((false) && true, ! (! (_GLF_IDENTITY((false) && true, _GLF_IDENTITY(true && ((false) && true), (_GLF_IDENTITY(true && ((false) && true), bool(bvec4(true && ((false) && true), true, false, true)))) || false))))))))), bool(_GLF_IDENTITY(bool(bool(_GLF_IDENTITY((false) && true, bool(bool((false) && true))))), true && (bool(bool(_GLF_IDENTITY((false) && true, bool(bool((false) && true)))))))))), bool(bvec3(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY((false) && true, bool(bool((false) && true)))), bool(_GLF_IDENTITY(bool(bool(_GLF_IDENTITY((false) && true, bool(bool((false) && true))))), true && _GLF_IDENTITY((bool(bool(_GLF_IDENTITY((false) && true, bool(bool((false) && true)))))), true && ((bool(bool(_GLF_IDENTITY((false) && true, bool(bool((false) && true)))))))))))), false, true))), false, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), bool(bvec2(bool(bvec4(_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY((false) && true, bool(bool(_GLF_IDENTITY((false) && true, ! (! (_GLF_IDENTITY((false) && true, _GLF_IDENTITY(true && ((false) && true), (_GLF_IDENTITY(true && ((false) && true), bool(bvec4(true && ((false) && true), true, false, true)))) || false))))))))), bool(_GLF_IDENTITY(bool(bool(_GLF_IDENTITY((false) && true, bool(bool((false) && true))))), true && (bool(bool(_GLF_IDENTITY((false) && true, bool(bool((false) && true)))))))))), bool(bvec3(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY((false) && true, bool(bool((false) && true)))), bool(_GLF_IDENTITY(bool(bool(_GLF_IDENTITY((false) && true, bool(bool((false) && true))))), true && _GLF_IDENTITY((bool(bool(_GLF_IDENTITY((false) && true, bool(bool((false) && true)))))), true && ((bool(bool(_GLF_IDENTITY((false) && true, bool(bool((false) && true)))))))))))), false, true))), false, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), true))), (bool(bvec4(_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY((false) && true, bool(bool(_GLF_IDENTITY((false) && true, ! (! (_GLF_IDENTITY((false) && true, true && ((false) && true))))))))), bool(_GLF_IDENTITY(bool(bool(_GLF_IDENTITY((false) && true, bool(bool((false) && true))))), true && (bool(bool(_GLF_IDENTITY((false) && true, bool(bool((false) && true)))))))))), bool(bvec3(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY((false) && true, bool(bool((false) && true)))), bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(bool(_GLF_IDENTITY((false) && true, bool(bool((false) && true))))), true && (bool(bool(_GLF_IDENTITY((false) && true, bool(bool((false) && true))))))), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bool(bool(_GLF_IDENTITY((false) && true, bool(bool((false) && true))))), true && (bool(bool(_GLF_IDENTITY((false) && true, bool(bool((false) && true))))))), false, true), bvec3(bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bool(bool(_GLF_IDENTITY((false) && true, bool(bool((false) && true))))), true && (bool(bool(_GLF_IDENTITY((false) && true, bool(bool((false) && true))))))), false, true), bvec3(bvec4(bvec3(_GLF_IDENTITY(bool(bool(_GLF_IDENTITY((false) && true, bool(bool((false) && true))))), true && (bool(bool(_GLF_IDENTITY((false) && true, bool(bool((false) && true))))))), false, true), false))))))))))), false, true))), false, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) || false)) || false))) && true)))))))) && true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))), false, true)), (bool(bvec3(! (_GLF_IDENTITY(false, _GLF_IDENTITY((false) && true, _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY((false) && true, bool(bool(_GLF_IDENTITY((false), ! (! ((false)))) && true)))), bool(_GLF_IDENTITY(bool(bool(_GLF_IDENTITY((false) && true, bool(bool((false) && true))))), true && (bool(bool(_GLF_IDENTITY((false) && true, bool(bool((false) && true)))))))))), bool(bvec4(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_IDENTITY((false) && true, bool(bool((false) && true)))), (_GLF_IDENTITY(bool(_GLF_IDENTITY((false) && true, bool(bool((false) && true)))), _GLF_IDENTITY(true && (bool(_GLF_IDENTITY((false) && true, bool(bool((false) && true))))), (_GLF_IDENTITY(true && (bool(_GLF_IDENTITY((false) && true, bool(bool((false) && true))))), false || (true && (bool(_GLF_IDENTITY((false) && true, bool(bool((false) && true)))))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) && true), bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(bool(_GLF_IDENTITY((_GLF_IDENTITY(false, true && (false))) && true, bool(bool((false) && true))))), false || (bool(bool(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(false, true && (false))) && true, ! (_GLF_IDENTITY(! ((_GLF_IDENTITY(false, true && (false))) && true), (! (_GLF_IDENTITY((_GLF_IDENTITY(false, true && (false))), ! (! (_GLF_IDENTITY((_GLF_IDENTITY(false, true && (false))), true && ((_GLF_IDENTITY(false, true && (false)))))))) && true)) || false))), bool(bool((false) && true))))))), true && (bool(bool(_GLF_IDENTITY((false) && true, bool(bool((false) && true)))))))))), bool(bvec3(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY((false) && true, bool(bool(_GLF_IDENTITY((false) && true, ! (! ((false) && true))))))), bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(bool(_GLF_IDENTITY((false) && true, bool(bool((false) && true))))), true && (bool(bool(_GLF_IDENTITY((false) && _GLF_IDENTITY(true, true && (true)), bool(bool((false) && true))))))), (_GLF_IDENTITY(_GLF_IDENTITY(bool(bool(_GLF_IDENTITY((false) && true, bool(bool((false) && true))))), true && (bool(bool(_GLF_IDENTITY((false) && _GLF_IDENTITY(true, true && (true)), bool(bool((false) && true))))))), bool(bool(_GLF_IDENTITY(bool(bool(_GLF_IDENTITY((false) && true, bool(bool((false) && true))))), true && (bool(bool(_GLF_IDENTITY((false) && _GLF_IDENTITY(true, true && (true)), bool(bool((false) && true))))))))))) && true)))), false, true))), false, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))), _GLF_IDENTITY(false, ! (! (false))), true))) || false)), _GLF_IDENTITY(false, false || (false)) || (! (_GLF_IDENTITY(false, (false) && true))))))))
      {
       if(_GLF_DEAD(false))
        return;
       return;
       if(_GLF_DEAD(false))
        return;
      }
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       return;
      }
     else
      {
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((false) || false, ((false) || false) || false))))
      return;
     return;
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
