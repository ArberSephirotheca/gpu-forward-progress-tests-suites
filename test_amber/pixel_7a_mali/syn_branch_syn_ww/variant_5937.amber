#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460
struct _GLF_struct_6 {
 vec4 _f0;
 bvec2 _f1;
 float _f2;
 uint _f3;
 bvec4 _f4;
 uvec4 _f5;
 mat3 _f6;
} ;

struct _GLF_struct_5 {
 bool _f0;
 vec4 _f1;
 bool _f2;
 vec3 _f3;
} ;

struct _GLF_struct_7 {
 uvec3 _f0;
 uint _f1;
 _GLF_struct_5 _f2;
 vec2 _f3;
 _GLF_struct_6 _f4;
} ;

struct _GLF_struct_3 {
 bvec4 _f0;
} ;

struct _GLF_struct_4 {
 uvec4 _f0;
 uint subgroup_size;
 mat4x2 _f1;
 float _f2;
 _GLF_struct_3 _f3;
} ;

struct _GLF_struct_8 {
 bvec3 _f0;
 _GLF_struct_4 _f1;
 _GLF_struct_7 _f2;
 uvec3 _f3;
 mat2 _f4;
 uint _f5;
} ;

struct _GLF_struct_0 {
 float _f0;
 bool _f1;
 bvec4 _f2;
 mat4x3 _f3;
 vec3 _f4;
 vec4 _f5;
 mat4x3 _f6;
} ;

struct _GLF_struct_1 {
 _GLF_struct_0 _f0;
} ;

struct _GLF_struct_2 {
 _GLF_struct_1 _f0;
 uint subgroup_local_id;
 ivec3 _f1;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 _GLF_struct_8 _GLF_struct_replacement_8 = _GLF_struct_8(bvec3(true), _GLF_struct_4(uvec4(1u), gl_SubgroupSize, mat4x2(1.0), 1.0, _GLF_struct_3(bvec4(true))), _GLF_struct_7(uvec3(1u), 1u, _GLF_struct_5(true, vec4(1.0), true, vec3(1.0)), vec2(1.0), _GLF_struct_6(vec4(1.0), bvec2(true), 1.0, 1u, bvec4(true), uvec4(1u), mat3(1.0))), uvec3(1u), mat2(1.0), 1u);
 _GLF_struct_2 _GLF_struct_replacement_2 = _GLF_struct_2(_GLF_struct_1(_GLF_struct_0(1.0, true, bvec4(true), mat4x3(1.0), vec3(1.0), vec4(1.0), mat4x3(1.0))), gl_SubgroupInvocationID, ivec3(1));
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = workgroup_size * workgroup_id;
 uint subgroup_base = subgroup_id * _GLF_struct_replacement_8._f1.subgroup_size;
 uint virtual_gid = workgroup_base + subgroup_base + _GLF_struct_replacement_2.subgroup_local_id;
 uint next_virtual_gid = workgroup_base + subgroup_base + ((_GLF_struct_replacement_2.subgroup_local_id + 1) % _GLF_struct_replacement_8._f1.subgroup_size);
 atomicStore(buf[virtual_gid], uint(1), 4, 64, 4);
 if((_GLF_struct_replacement_2.subgroup_local_id % 2) == 0)
  {
   atomicStore(buf[next_virtual_gid], uint(2), 4, 64, 4);
  }
 else
  {
   atomicStore(buf[next_virtual_gid], uint(2), 4, 64, 4);
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
