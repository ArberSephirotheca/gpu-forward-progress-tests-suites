#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), false || (false))))
  {
   if(_GLF_DEAD(false))
    return;
   do
    {
     return;
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   else
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       for(int _injected_loop_counter = 0; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), bool(_GLF_IDENTITY(bool(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1)), bool(bvec2(bool(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1)), true)))))) && true); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
            continue;
           return;
          }
        }
      }
     if(_GLF_DEAD(false))
      return;
    }
  }
 else
  {
  }
 for(int _injected_loop_counter = (0 & -27594); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
        break;
      }
     else
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         return;
        }
       else
        {
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      continue;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    break;
  }
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), _GLF_IDENTITY((_GLF_IDENTITY(false, ! (! (false)))) || false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && ((_GLF_IDENTITY(false, ! (! (false)))) || false)))))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
    return;
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     return;
    }
  }
 if(_GLF_DEAD(false))
  return;
 uint subgroup_id = gl_SubgroupID;
 for(int _injected_loop_counter = _GLF_IDENTITY(0, min(_GLF_IDENTITY(0, max(0, 0)), 0)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    break;
   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
    {
     for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != (int(_GLF_ZERO(0.0, injectionSwitch.x)) << _GLF_IDENTITY(int(1), int(1)))); _injected_loop_counter --)
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), bool(bvec4((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)).y), true, true, true))))))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             return;
            }
          }
         else
          {
          }
        }
       else
        {
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(false))
        return;
      }
    }
  }
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(false))
  return;
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     return;
    }
  }
 uint workgroup_size = gl_WorkGroupSize.x;
 for(int _injected_loop_counter = (1 ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 | 0)); _injected_loop_counter --)
  {
   for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 >> _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), (int(3)) >> 0)))); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(6), int(_GLF_IDENTITY(_GLF_IDENTITY(6, (0 | 0) | (6)), (6) >> 0)))); _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 ^ 0)); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               return;
              }
            }
          }
        }
       return;
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
        break;
      }
     if(_GLF_DEAD(false))
      continue;
    }
  }
 uint workgroup_id = _GLF_IDENTITY(gl_WorkGroupID.x, max(gl_WorkGroupID.x, gl_WorkGroupID.x));
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, clamp(_injected_loop_counter, _GLF_IDENTITY(_injected_loop_counter, (_GLF_IDENTITY(_injected_loop_counter, clamp(_injected_loop_counter, _injected_loop_counter, _injected_loop_counter))) | 0), _GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) - 0))) != 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 uint workgroup_base = workgroup_size * workgroup_id;
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec3(false, true, false))), _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))))
  return;
 if(_GLF_DEAD(false))
  return;
 uint subgroup_base = _GLF_IDENTITY(subgroup_id, (_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY((true ? subgroup_id : _GLF_FUZZED(workgroup_base)), 0u + (_GLF_IDENTITY((true ? subgroup_id : _GLF_FUZZED(workgroup_base)), ((true ? subgroup_id : _GLF_FUZZED(workgroup_base))) | (_GLF_IDENTITY((true ? _GLF_IDENTITY(subgroup_id, min(subgroup_id, _GLF_IDENTITY(subgroup_id, ~ (~ (subgroup_id))))) : _GLF_FUZZED(workgroup_base)), ((true ? subgroup_id : _GLF_FUZZED(workgroup_base))) - 0u))))))) << 0u) * subgroup_size;
 uint virtual_gid = _GLF_IDENTITY(workgroup_base + subgroup_base + subgroup_local_id, (workgroup_base + subgroup_base + subgroup_local_id) | (workgroup_base + subgroup_base + subgroup_local_id));
 if(_GLF_DEAD(false))
  return;
 uint next_virtual_gid = workgroup_base + subgroup_base + ((subgroup_local_id + 1) % subgroup_size);
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   atomicStore(buf[virtual_gid], uint(1), 4, 64, 4);
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(7), int(7))); _GLF_WRAPPED_LOOP(_injected_loop_counter < (0 ^ 1)); _injected_loop_counter ++)
    {
     return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           do
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
              return;
            }
           while(_GLF_WRAPPED_LOOP(false));
           return;
          }
         else
          {
          }
        }
      }
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(4), int(4))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
        {
        }
       else
        {
         do
          {
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(false))
            return;
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        }
      }
    }
  }
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, (1) | (1))); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    {
     do
      {
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(false))
        continue;
       return;
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = (1 ^ 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      return;
    }
   return;
  }
 do
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      break;
     do
      {
       return;
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-6.9), (injectionSwitch)[1]), vec2((_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])))[0], _GLF_FUZZED(4165.6951)), bvec2(true, false)))))) / vec2(1.0, 1.0)).x < _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(1.0 * (_GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(-8616.7823)))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-0.6) : 1.0 * (_GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(-8616.7823)))))))), ((_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-6.9), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(4165.6951)), bvec2(true, false)))))) / vec2(1.0, 1.0)).x < _GLF_IDENTITY(injectionSwitch.y, 1.0 * (_GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(-8616.7823))))))) && true))))
  {
   do
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_DEAD(false))
          return;
        }
       else
        {
         return;
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
     do
      {
       return;
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true))))))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        return;
      }
     return;
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 | 0)); _injected_loop_counter ++)
      {
       return;
      }
    }
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     else
      {
      }
    }
   else
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 >> _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (int(0)) - 0)))); _injected_loop_counter --)
            {
             if(_GLF_DEAD(false))
              return;
            }
           return;
          }
         return;
        }
       if(_GLF_DEAD(false))
        return;
       for(int _injected_loop_counter = 0; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))), ! (! _GLF_IDENTITY((_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))), ! (! (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, max(_injected_loop_counter, _GLF_IDENTITY(_injected_loop_counter, (true ? _GLF_IDENTITY(_injected_loop_counter, (false ? _GLF_FUZZED(_injected_loop_counter) : _injected_loop_counter)) : _GLF_FUZZED(_injected_loop_counter))))) < int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY((injectionSwitch.y) * determinant(mat2(1.0, 1.0, 0.0, 1.0)), clamp((_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y) * determinant(mat2(1.0, 1.0, 0.0, 1.0)), (injectionSwitch.y) * determinant(_GLF_IDENTITY(mat2(1.0, _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), 0.0, 1.0), transpose(_GLF_IDENTITY(transpose(_GLF_IDENTITY(mat2(1.0, 1.0, 0.0, 1.0), (mat2(1.0, 1.0, 0.0, 1.0)) - mat2(0.0, 0.0, 0.0, 0.0))), mat2(mat2x4(transpose(_GLF_IDENTITY(mat2(1.0, 1.0, 0.0, 1.0), (mat2(1.0, 1.0, 0.0, 1.0)) - mat2(0.0, 0.0, 0.0, 0.0))))))))), _GLF_IDENTITY((injectionSwitch.y) * determinant(mat2(_GLF_IDENTITY(_GLF_IDENTITY(1.0, (1.0) - 0.0), float(mat2x3(_GLF_IDENTITY(1.0, (1.0) - 0.0), 1.0, 0.0, 0.0, 1.0, 1.0))), 1.0, 0.0, 1.0)), (true ? (injectionSwitch.y) * determinant(mat2(1.0, 1.0, 0.0, 1.0)) : _GLF_FUZZED(-1.7))))))))))))), (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))), ! (! (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, max(_injected_loop_counter, _GLF_IDENTITY(_injected_loop_counter, (true ? _GLF_IDENTITY(_injected_loop_counter, (false ? _GLF_FUZZED(_injected_loop_counter) : _injected_loop_counter)) : _GLF_FUZZED(_injected_loop_counter))))) < int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY((injectionSwitch.y) * determinant(mat2(1.0, 1.0, 0.0, 1.0)), clamp((_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y) * determinant(mat2(1.0, 1.0, 0.0, 1.0)), (injectionSwitch.y) * determinant(_GLF_IDENTITY(mat2(1.0, _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), 0.0, 1.0), transpose(_GLF_IDENTITY(transpose(_GLF_IDENTITY(mat2(1.0, 1.0, 0.0, 1.0), (mat2(1.0, 1.0, 0.0, 1.0)) - mat2(0.0, 0.0, 0.0, 0.0))), mat2(mat2x4(transpose(_GLF_IDENTITY(mat2(1.0, 1.0, 0.0, 1.0), (mat2(1.0, 1.0, 0.0, 1.0)) - mat2(0.0, 0.0, 0.0, 0.0))))))))), _GLF_IDENTITY((injectionSwitch.y) * determinant(mat2(_GLF_IDENTITY(_GLF_IDENTITY(1.0, (1.0) - 0.0), float(mat2x3(_GLF_IDENTITY(1.0, (1.0) - 0.0), 1.0, 0.0, 0.0, 1.0, 1.0))), 1.0, 0.0, 1.0)), (true ? (injectionSwitch.y) * determinant(mat2(1.0, 1.0, 0.0, 1.0)) : _GLF_FUZZED(-1.7))))))))))))), bool(bvec3((_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))), ! (! (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, max(_injected_loop_counter, _GLF_IDENTITY(_injected_loop_counter, (true ? _GLF_IDENTITY(_injected_loop_counter, (false ? _GLF_FUZZED(_injected_loop_counter) : _injected_loop_counter)) : _GLF_FUZZED(_injected_loop_counter))))) < int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY((injectionSwitch.y) * determinant(mat2(1.0, 1.0, 0.0, 1.0)), clamp((_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y) * determinant(mat2(1.0, 1.0, 0.0, 1.0)), (injectionSwitch.y) * determinant(_GLF_IDENTITY(mat2(1.0, _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), 0.0, 1.0), transpose(_GLF_IDENTITY(transpose(_GLF_IDENTITY(mat2(1.0, 1.0, 0.0, 1.0), (mat2(1.0, 1.0, 0.0, 1.0)) - mat2(0.0, 0.0, 0.0, 0.0))), mat2(mat2x4(transpose(_GLF_IDENTITY(mat2(1.0, 1.0, 0.0, 1.0), (mat2(1.0, 1.0, 0.0, 1.0)) - mat2(0.0, 0.0, 0.0, 0.0))))))))), _GLF_IDENTITY((injectionSwitch.y) * determinant(mat2(_GLF_IDENTITY(_GLF_IDENTITY(1.0, (1.0) - 0.0), float(mat2x3(_GLF_IDENTITY(1.0, (1.0) - 0.0), 1.0, 0.0, 0.0, 1.0, 1.0))), 1.0, 0.0, 1.0)), (true ? (injectionSwitch.y) * determinant(mat2(1.0, 1.0, 0.0, 1.0)) : _GLF_FUZZED(-1.7))))))))))))), true, false)))) || false))); _injected_loop_counter ++)
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           return;
          }
         else
          {
           if(_GLF_DEAD(false))
            continue;
          }
        }
      }
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), bool(bvec4((injectionSwitch.x < injectionSwitch.y), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))))))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if((subgroup_local_id % _GLF_IDENTITY(2, (0 << _GLF_IDENTITY(int(5), int(5))) | (2))) == 0)
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, true, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (! (injectionSwitch.x < injectionSwitch.y))))))), bool(bvec3(bool(bvec3(false, true, _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true && (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), false, false))))))
              return;
            }
           else
            {
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)))).x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / _GLF_IDENTITY(round(length(_GLF_IDENTITY(normalize(vec4(1.0, 1.0, 1.0, 1.0)), mat4(1.0) * _GLF_IDENTITY((normalize(_GLF_IDENTITY(vec4(1.0, 1.0, 1.0, 1.0), (_GLF_IDENTITY(_GLF_IDENTITY(vec4(1.0, 1.0, 1.0, 1.0), mix(vec4(_GLF_FUZZED(-668.523), _GLF_FUZZED(9.6), _GLF_FUZZED(-476.476), _GLF_FUZZED(12.93)), vec4((vec4(1.0, 1.0, 1.0, 1.0))[0], (vec4(1.0, 1.0, 1.0, 1.0))[1], (vec4(1.0, 1.0, 1.0, 1.0))[2], (vec4(1.0, 1.0, 1.0, 1.0))[3]), bvec4(true, true, true, true))), _GLF_IDENTITY(vec4(mat4x3(_GLF_IDENTITY(vec4(1.0, 1.0, 1.0, 1.0), mix(vec4(_GLF_FUZZED(-668.523), _GLF_FUZZED(9.6), _GLF_FUZZED(-476.476), _GLF_FUZZED(12.93)), _GLF_IDENTITY(vec4((vec4(1.0, 1.0, 1.0, 1.0))[0], (vec4(1.0, 1.0, 1.0, 1.0))[1], (vec4(1.0, 1.0, 1.0, 1.0))[2], (vec4(1.0, 1.0, 1.0, 1.0))[3]), (vec4((vec4(1.0, 1.0, 1.0, 1.0))[0], (vec4(1.0, 1.0, 1.0, 1.0))[1], (vec4(1.0, 1.0, 1.0, 1.0))[2], (vec4(1.0, 1.0, 1.0, 1.0))[3])) + vec4(0.0, 0.0, 0.0, 0.0)), bvec4(true, true, true, true))), sqrt(0.0), 0.0, 1.0, log(1.0), 1.0, _GLF_IDENTITY(dot(vec3(_GLF_IDENTITY(dot(vec3(1.0, 0.0, 1.0), vec3(0.0, 1.0, 0.0)), dot(vec3(1.0, 0.0, 1.0), vec3(0.0, 1.0, 0.0))), 1.0, 0.0), vec3(0.0, 1.0, 0.0)), dot(vec3(_GLF_IDENTITY(dot(vec3(1.0, 0.0, 1.0), vec3(0.0, 1.0, 0.0)), dot(vec3(1.0, 0.0, 1.0), vec3(0.0, 1.0, 0.0))), 1.0, 0.0), vec3(0.0, 1.0, 0.0))), 1.0, determinant(mat2(0.0, sqrt(0.0), 1.0, 0.0)))), _GLF_IDENTITY(vec4(mat4x3(vec4(mat4x3(_GLF_IDENTITY(vec4(1.0, 1.0, 1.0, 1.0), _GLF_IDENTITY(mix(vec4(_GLF_FUZZED(-668.523), _GLF_FUZZED(9.6), _GLF_FUZZED(-476.476), _GLF_FUZZED(12.93)), vec4((vec4(1.0, 1.0, 1.0, 1.0))[0], (vec4(1.0, 1.0, 1.0, 1.0))[1], (vec4(1.0, 1.0, 1.0, 1.0))[2], (vec4(1.0, 1.0, 1.0, 1.0))[3]), bvec4(true, true, true, true)), max(mix(vec4(_GLF_FUZZED(-668.523), _GLF_FUZZED(9.6), _GLF_FUZZED(-476.476), _GLF_FUZZED(12.93)), vec4((vec4(1.0, 1.0, 1.0, 1.0))[0], (vec4(1.0, 1.0, 1.0, 1.0))[1], (vec4(1.0, 1.0, 1.0, 1.0))[2], (vec4(1.0, 1.0, 1.0, 1.0))[3]), bvec4(true, true, true, true)), mix(vec4(_GLF_FUZZED(-668.523), _GLF_FUZZED(9.6), _GLF_FUZZED(-476.476), _GLF_FUZZED(12.93)), vec4((vec4(1.0, 1.0, 1.0, 1.0))[0], (vec4(1.0, 1.0, 1.0, 1.0))[1], (vec4(1.0, 1.0, 1.0, 1.0))[2], (vec4(1.0, 1.0, 1.0, 1.0))[3]), bvec4(true, true, true, true))))), sqrt(0.0), 0.0, 1.0, log(1.0), 1.0, _GLF_IDENTITY(dot(vec3(_GLF_IDENTITY(dot(vec3(1.0, 0.0, 1.0), vec3(0.0, 1.0, 0.0)), dot(vec3(1.0, 0.0, 1.0), vec3(0.0, 1.0, 0.0))), 1.0, 0.0), vec3(0.0, 1.0, 0.0)), dot(vec3(_GLF_IDENTITY(dot(vec3(1.0, 0.0, 1.0), vec3(0.0, 1.0, 0.0)), dot(vec3(1.0, 0.0, 1.0), vec3(0.0, 1.0, 0.0))), 1.0, 0.0), vec3(0.0, 1.0, 0.0))), 1.0, determinant(mat2(0.0, sqrt(0.0), 1.0, 0.0)))), round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), 1.0, 1.0, 1.0, cos(0.0), 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x))), clamp(vec4(mat4x3(vec4(mat4x3(_GLF_IDENTITY(vec4(1.0, 1.0, 1.0, 1.0), mix(vec4(_GLF_FUZZED(-668.523), _GLF_FUZZED(9.6), _GLF_FUZZED(-476.476), _GLF_FUZZED(12.93)), vec4((vec4(1.0, 1.0, 1.0, 1.0))[0], (vec4(1.0, 1.0, 1.0, 1.0))[1], (vec4(1.0, 1.0, 1.0, 1.0))[2], (vec4(1.0, 1.0, 1.0, 1.0))[3]), bvec4(true, true, true, true))), sqrt(0.0), 0.0, 1.0, log(1.0), 1.0, _GLF_IDENTITY(dot(vec3(_GLF_IDENTITY(dot(vec3(1.0, 0.0, 1.0), vec3(0.0, 1.0, 0.0)), dot(vec3(1.0, 0.0, 1.0), vec3(0.0, 1.0, 0.0))), 1.0, 0.0), vec3(0.0, 1.0, 0.0)), dot(vec3(_GLF_IDENTITY(dot(vec3(1.0, 0.0, 1.0), vec3(0.0, 1.0, 0.0)), dot(vec3(1.0, 0.0, 1.0), vec3(0.0, 1.0, 0.0))), 1.0, 0.0), vec3(0.0, 1.0, 0.0))), 1.0, determinant(mat2(0.0, sqrt(0.0), 1.0, 0.0)))), round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), 1.0, 1.0, 1.0, cos(0.0), 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x))), vec4(mat4x3(vec4(mat4x3(_GLF_IDENTITY(vec4(1.0, 1.0, 1.0, 1.0), mix(vec4(_GLF_FUZZED(-668.523), _GLF_FUZZED(9.6), _GLF_FUZZED(-476.476), _GLF_FUZZED(12.93)), vec4(_GLF_IDENTITY((vec4(1.0, 1.0, 1.0, 1.0))[0], max(_GLF_IDENTITY((vec4(1.0, 1.0, 1.0, 1.0))[0], (false ? _GLF_FUZZED(98.90) : (vec4(1.0, 1.0, 1.0, 1.0))[0])), (vec4(1.0, 1.0, 1.0, 1.0))[0])), (vec4(1.0, 1.0, 1.0, 1.0))[1], (vec4(1.0, 1.0, 1.0, 1.0))[2], (vec4(1.0, 1.0, 1.0, 1.0))[3]), bvec4(true, true, true, true))), sqrt(0.0), 0.0, 1.0, log(1.0), 1.0, _GLF_IDENTITY(dot(vec3(_GLF_IDENTITY(dot(vec3(1.0, 0.0, 1.0), vec3(0.0, 1.0, 0.0)), dot(vec3(1.0, 0.0, 1.0), vec3(0.0, 1.0, 0.0))), _GLF_IDENTITY(1.0, max(1.0, 1.0)), 0.0), vec3(0.0, 1.0, 0.0)), dot(vec3(_GLF_IDENTITY(dot(vec3(1.0, 0.0, 1.0), vec3(0.0, 1.0, 0.0)), dot(vec3(1.0, 0.0, 1.0), vec3(0.0, 1.0, 0.0))), 1.0, 0.0), vec3(0.0, 1.0, 0.0))), 1.0, determinant(mat2(0.0, sqrt(0.0), 1.0, 0.0)))), round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), 1.0, 1.0, 1.0, cos(0.0), 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x))), vec4(mat4x3(vec4(mat4x3(_GLF_IDENTITY(vec4(1.0, 1.0, 1.0, 1.0), mix(vec4(_GLF_FUZZED(-668.523), _GLF_FUZZED(9.6), _GLF_FUZZED(-476.476), _GLF_FUZZED(12.93)), vec4((vec4(1.0, 1.0, 1.0, 1.0))[0], (vec4(1.0, 1.0, 1.0, 1.0))[1], (vec4(1.0, 1.0, 1.0, 1.0))[2], (vec4(1.0, 1.0, 1.0, 1.0))[3]), bvec4(true, true, true, true))), sqrt(0.0), 0.0, 1.0, log(1.0), 1.0, _GLF_IDENTITY(dot(vec3(_GLF_IDENTITY(dot(_GLF_IDENTITY(vec3(1.0, 0.0, 1.0), max(vec3(1.0, 0.0, 1.0), vec3(1.0, 0.0, 1.0))), vec3(0.0, 1.0, 0.0)), dot(vec3(1.0, 0.0, 1.0), vec3(0.0, 1.0, 0.0))), 1.0, 0.0), vec3(0.0, 1.0, 0.0)), dot(vec3(_GLF_IDENTITY(dot(vec3(1.0, 0.0, 1.0), vec3(0.0, 1.0, 0.0)), dot(vec3(1.0, 0.0, 1.0), vec3(0.0, 1.0, 0.0))), 1.0, 0.0), vec3(0.0, 1.0, 0.0))), 1.0, determinant(mat2(0.0, sqrt(0.0), 1.0, 0.0)))), round(length(normalize(vec4(_GLF_IDENTITY(1.0, float(_GLF_IDENTITY(mat3x4(1.0, sin(0.0), 1.0, determinant(mat3(1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, tan(0.0), 1.0)), 1.0, 0.0, 1.0, sqrt(1.0), 1.0, 0.0, abs(1.0), sin(0.0)), mat3x4(mat4(mat3x4(1.0, sin(0.0), 1.0, determinant(mat3(1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, tan(0.0), 1.0)), 1.0, 0.0, 1.0, sqrt(1.0), 1.0, 0.0, abs(1.0), sin(0.0))))))), 1.0, 1.0, 1.0)))), 1.0, 1.0, 1.0, cos(0.0), 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x)))))))) * vec4(1.0, 1.0, 1.0, 1.0)))), clamp((normalize(_GLF_IDENTITY(vec4(1.0, 1.0, 1.0, 1.0), (_GLF_IDENTITY(_GLF_IDENTITY(vec4(1.0, 1.0, 1.0, 1.0), mix(vec4(_GLF_FUZZED(-668.523), _GLF_FUZZED(9.6), _GLF_FUZZED(-476.476), _GLF_FUZZED(12.93)), vec4((vec4(1.0, 1.0, 1.0, 1.0))[0], (vec4(1.0, 1.0, 1.0, 1.0))[1], _GLF_IDENTITY((vec4(1.0, 1.0, 1.0, 1.0))[2], _GLF_IDENTITY(float(mat2x3(_GLF_IDENTITY((vec4(1.0, 1.0, 1.0, 1.0))[2], ((vec4(1.0, 1.0, 1.0, 1.0))[2]) / 1.0), 0.0, 0.0, 1.0, 0.0, 1.0)), max(_GLF_IDENTITY(float(mat2x3(_GLF_IDENTITY((vec4(1.0, 1.0, 1.0, 1.0))[2], ((vec4(1.0, 1.0, 1.0, 1.0))[2]) / 1.0), 0.0, 0.0, 1.0, 0.0, 1.0)), min(float(mat2x3(_GLF_IDENTITY((vec4(1.0, 1.0, 1.0, 1.0))[2], ((vec4(1.0, 1.0, 1.0, 1.0))[2]) / 1.0), 0.0, 0.0, 1.0, 0.0, 1.0)), float(mat2x3(_GLF_IDENTITY((vec4(1.0, 1.0, 1.0, 1.0))[2], ((vec4(1.0, 1.0, 1.0, 1.0))[2]) / 1.0), 0.0, 0.0, 1.0, 0.0, 1.0)))), _GLF_IDENTITY(float(mat2x3(_GLF_IDENTITY((vec4(1.0, 1.0, 1.0, 1.0))[2], ((vec4(1.0, 1.0, 1.0, 1.0))[2]) / 1.0), 0.0, 0.0, 1.0, 0.0, 1.0)), (float(mat2x3(_GLF_IDENTITY((vec4(1.0, 1.0, 1.0, 1.0))[2], ((vec4(1.0, 1.0, 1.0, 1.0))[2]) / 1.0), 0.0, 0.0, 1.0, 0.0, 1.0))) * 1.0)))), (vec4(1.0, 1.0, 1.0, 1.0))[3]), bvec4(true, true, true, true))), _GLF_IDENTITY(vec4(mat4x3(_GLF_IDENTITY(vec4(1.0, 1.0, 1.0, 1.0), mix(vec4(_GLF_FUZZED(-668.523), _GLF_FUZZED(9.6), _GLF_FUZZED(-476.476), _GLF_FUZZED(12.93)), vec4((vec4(1.0, 1.0, 1.0, 1.0))[0], (vec4(1.0, 1.0, 1.0, 1.0))[1], (vec4(1.0, 1.0, 1.0, 1.0))[_GLF_IDENTITY(2, (_GLF_IDENTITY(2, (_GLF_IDENTITY(2, min(2, 2))) * 1)) ^ 0)], (vec4(1.0, 1.0, 1.0, 1.0))[3]), bvec4(true, true, true, true))), sqrt(0.0), 0.0, 1.0, log(1.0), 1.0, _GLF_IDENTITY(dot(vec3(_GLF_IDENTITY(dot(vec3(1.0, 0.0, 1.0), _GLF_IDENTITY(vec3(0.0, 1.0, 0.0), (vec3(0.0, 1.0, 0.0)) + tan(vec3(0.0, 0.0, 0.0)))), dot(vec3(1.0, 0.0, 1.0), vec3(0.0, 1.0, 0.0))), 1.0, 0.0), vec3(0.0, 1.0, 0.0)), dot(vec3(_GLF_IDENTITY(dot(vec3(1.0, 0.0, 1.0), vec3(0.0, 1.0, 0.0)), dot(vec3(1.0, 0.0, 1.0), vec3(0.0, 1.0, 0.0))), 1.0, 0.0), _GLF_IDENTITY(vec3(0.0, 1.0, 0.0), (vec3(0.0, 1.0, 0.0)) - vec3(0.0, 0.0, 0.0)))), 1.0, determinant(mat2(0.0, sqrt(0.0), 1.0, 0.0)))), _GLF_IDENTITY(vec4(mat4x3(vec4(mat4x3(_GLF_IDENTITY(vec4(1.0, 1.0, 1.0, 1.0), mix(vec4(_GLF_FUZZED(-668.523), _GLF_FUZZED(9.6), _GLF_FUZZED(-476.476), _GLF_FUZZED(12.93)), vec4((vec4(1.0, 1.0, 1.0, 1.0))[0], (vec4(1.0, 1.0, 1.0, 1.0))[1], (vec4(1.0, 1.0, _GLF_IDENTITY(1.0, min(1.0, 1.0)), 1.0))[2], (vec4(1.0, 1.0, 1.0, 1.0))[3]), bvec4(true, true, true, true))), sqrt(0.0), 0.0, 1.0, log(1.0), 1.0, _GLF_IDENTITY(dot(vec3(_GLF_IDENTITY(dot(vec3(1.0, 0.0, 1.0), vec3(0.0, 1.0, 0.0)), dot(vec3(1.0, 0.0, 1.0), vec3(0.0, 1.0, 0.0))), 1.0, 0.0), vec3(0.0, 1.0, 0.0)), dot(vec3(_GLF_IDENTITY(dot(vec3(1.0, 0.0, 1.0), vec3(0.0, 1.0, 0.0)), dot(vec3(1.0, 0.0, 1.0), vec3(0.0, 1.0, 0.0))), 1.0, 0.0), vec3(0.0, 1.0, _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(9.0) : _GLF_IDENTITY(0.0, (0.0) / 1.0)))))), 1.0, determinant(mat2(0.0, sqrt(0.0), 1.0, 0.0)))), round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), 1.0, 1.0, 1.0, cos(0.0), 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x))), clamp(vec4(mat4x3(vec4(mat4x3(_GLF_IDENTITY(vec4(1.0, 1.0, 1.0, 1.0), mix(vec4(_GLF_FUZZED(_GLF_IDENTITY(-668.523, clamp(-668.523, -668.523, -668.523))), _GLF_FUZZED(9.6), _GLF_FUZZED(-476.476), _GLF_FUZZED(12.93)), vec4((vec4(1.0, 1.0, 1.0, 1.0))[0], (vec4(1.0, 1.0, 1.0, 1.0))[1], (vec4(1.0, 1.0, 1.0, 1.0))[2], (vec4(1.0, 1.0, 1.0, 1.0))[3]), bvec4(true, true, true, true))), sqrt(0.0), 0.0, 1.0, log(1.0), 1.0, _GLF_IDENTITY(dot(vec3(_GLF_IDENTITY(dot(vec3(1.0, 0.0, 1.0), vec3(0.0, 1.0, 0.0)), dot(vec3(1.0, 0.0, 1.0), vec3(0.0, 1.0, 0.0))), 1.0, 0.0), vec3(0.0, 1.0, _GLF_IDENTITY(0.0, max(0.0, _GLF_IDENTITY(0.0, float(vec3(0.0, 1.0, 1.0))))))), dot(vec3(_GLF_IDENTITY(dot(vec3(1.0, 0.0, 1.0), vec3(0.0, 1.0, 0.0)), dot(vec3(1.0, 0.0, 1.0), vec3(0.0, 1.0, 0.0))), 1.0, 0.0), vec3(0.0, 1.0, 0.0))), 1.0, determinant(mat2(0.0, sqrt(0.0), 1.0, 0.0)))), round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), 1.0, 1.0, 1.0, cos(0.0), 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x))), vec4(mat4x3(vec4(mat4x3(_GLF_IDENTITY(vec4(1.0, 1.0, 1.0, 1.0), mix(vec4(_GLF_FUZZED(-668.523), _GLF_FUZZED(9.6), _GLF_FUZZED(-476.476), _GLF_FUZZED(12.93)), vec4((vec4(1.0, 1.0, 1.0, 1.0))[0], (vec4(1.0, 1.0, 1.0, 1.0))[1], (vec4(1.0, 1.0, 1.0, 1.0))[2], (vec4(1.0, 1.0, 1.0, 1.0))[3]), bvec4(true, true, true, true))), _GLF_IDENTITY(sqrt(0.0), (false ? _GLF_FUZZED(6.2) : sqrt(0.0))), 0.0, 1.0, log(1.0), 1.0, _GLF_IDENTITY(dot(vec3(_GLF_IDENTITY(dot(vec3(1.0, 0.0, 1.0), vec3(0.0, 1.0, 0.0)), dot(vec3(1.0, 0.0, 1.0), vec3(0.0, 1.0, 0.0))), 1.0, 0.0), vec3(0.0, 1.0, 0.0)), dot(vec3(_GLF_IDENTITY(dot(vec3(1.0, 0.0, 1.0), vec3(0.0, 1.0, 0.0)), dot(vec3(1.0, 0.0, 1.0), vec3(0.0, 1.0, 0.0))), 1.0, 0.0), vec3(0.0, 1.0, _GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(31.42)), float(0.0), bool(true))), 0.0))))), 1.0, determinant(mat2(0.0, sqrt(0.0), 1.0, 0.0)))), round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), 1.0, 1.0, 1.0, cos(0.0), 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x))), vec4(mat4x3(vec4(mat4x3(_GLF_IDENTITY(vec4(1.0, 1.0, 1.0, 1.0), mix(vec4(_GLF_FUZZED(-668.523), _GLF_FUZZED(9.6), _GLF_FUZZED(-476.476), _GLF_FUZZED(12.93)), vec4((vec4(1.0, 1.0, 1.0, 1.0))[0], (vec4(1.0, 1.0, 1.0, 1.0))[1], (vec4(1.0, 1.0, 1.0, 1.0))[2], (vec4(1.0, 1.0, 1.0, 1.0))[3]), bvec4(true, true, true, true))), sqrt(0.0), 0.0, 1.0, log(1.0), 1.0, _GLF_IDENTITY(dot(vec3(_GLF_IDENTITY(dot(vec3(1.0, 0.0, 1.0), vec3(0.0, 1.0, 0.0)), dot(vec3(1.0, 0.0, 1.0), vec3(0.0, 1.0, 0.0))), 1.0, 0.0), vec3(0.0, 1.0, 0.0)), dot(vec3(_GLF_IDENTITY(dot(vec3(1.0, 0.0, 1.0), vec3(0.0, 1.0, 0.0)), dot(vec3(1.0, 0.0, 1.0), vec3(0.0, 1.0, 0.0))), 1.0, 0.0), vec3(0.0, 1.0, 0.0))), 1.0, determinant(mat2(0.0, sqrt(0.0), 1.0, 0.0)))), _GLF_IDENTITY(round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), min(round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))))), _GLF_IDENTITY(1.0, (true ? _GLF_IDENTITY(1.0, min(1.0, 1.0)) : _GLF_FUZZED(599.652))), 1.0, 1.0, cos(0.0), 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x)))))))) * vec4(1.0, 1.0, 1.0, 1.0)))), (normalize(_GLF_IDENTITY(vec4(1.0, 1.0, 1.0, 1.0), (_GLF_IDENTITY(_GLF_IDENTITY(vec4(1.0, 1.0, 1.0, 1.0), mix(vec4(_GLF_FUZZED(-668.523), _GLF_FUZZED(9.6), _GLF_FUZZED(-476.476), _GLF_FUZZED(12.93)), vec4((vec4(1.0, 1.0, 1.0, 1.0))[0], (vec4(1.0, 1.0, 1.0, 1.0))[1], (vec4(1.0, 1.0, 1.0, 1.0))[2], (vec4(1.0, 1.0, 1.0, 1.0))[3]), bvec4(true, true, true, true))), _GLF_IDENTITY(vec4(mat4x3(_GLF_IDENTITY(vec4(1.0, 1.0, 1.0, 1.0), mix(vec4(_GLF_FUZZED(-668.523), _GLF_FUZZED(9.6), _GLF_FUZZED(-476.476), _GLF_FUZZED(12.93)), vec4((vec4(1.0, 1.0, 1.0, 1.0))[0], (vec4(1.0, 1.0, 1.0, 1.0))[1], (vec4(1.0, 1.0, 1.0, 1.0))[2], (vec4(1.0, 1.0, 1.0, 1.0))[3]), bvec4(true, true, true, true))), sqrt(0.0), 0.0, 1.0, log(1.0), 1.0, _GLF_IDENTITY(dot(vec3(_GLF_IDENTITY(_GLF_IDENTITY(dot(vec3(1.0, 0.0, 1.0), vec3(0.0, 1.0, 0.0)), dot(vec3(1.0, 0.0, 1.0), vec3(0.0, 1.0, 0.0))), max(_GLF_IDENTITY(dot(vec3(1.0, 0.0, 1.0), vec3(0.0, 1.0, 0.0)), dot(vec3(1.0, 0.0, 1.0), vec3(0.0, 1.0, 0.0))), _GLF_IDENTITY(dot(vec3(1.0, 0.0, 1.0), vec3(0.0, 1.0, 0.0)), dot(vec3(1.0, 0.0, 1.0), vec3(0.0, 1.0, 0.0))))), 1.0, 0.0), vec3(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), 1.0, 0.0)), dot(vec3(_GLF_IDENTITY(dot(vec3(1.0, 0.0, 1.0), vec3(0.0, 1.0, 0.0)), dot(vec3(1.0, 0.0, 1.0), vec3(0.0, 1.0, 0.0))), 1.0, 0.0), vec3(0.0, 1.0, 0.0))), 1.0, determinant(mat2(0.0, sqrt(0.0), 1.0, 0.0)))), _GLF_IDENTITY(vec4(mat4x3(vec4(mat4x3(_GLF_IDENTITY(vec4(1.0, 1.0, 1.0, 1.0), mix(vec4(_GLF_FUZZED(-668.523), _GLF_FUZZED(9.6), _GLF_FUZZED(-476.476), _GLF_FUZZED(12.93)), vec4((vec4(1.0, 1.0, 1.0, 1.0))[0], (vec4(1.0, 1.0, 1.0, 1.0))[1], (vec4(1.0, 1.0, 1.0, 1.0))[2], (vec4(1.0, 1.0, 1.0, 1.0))[3]), bvec4(true, true, true, true))), sqrt(0.0), 0.0, 1.0, log(1.0), 1.0, _GLF_IDENTITY(dot(vec3(_GLF_IDENTITY(dot(vec3(1.0, 0.0, 1.0), vec3(0.0, 1.0, 0.0)), dot(vec3(1.0, 0.0, 1.0), vec3(0.0, 1.0, 0.0))), 1.0, 0.0), vec3(0.0, 1.0, 0.0)), dot(vec3(_GLF_IDENTITY(dot(vec3(1.0, 0.0, 1.0), vec3(0.0, 1.0, 0.0)), dot(vec3(1.0, 0.0, 1.0), vec3(0.0, 1.0, 0.0))), 1.0, 0.0), vec3(0.0, 1.0, 0.0))), 1.0, determinant(mat2(0.0, sqrt(0.0), 1.0, 0.0)))), round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), 1.0, 1.0, 1.0, cos(0.0), 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x))), clamp(vec4(mat4x3(vec4(mat4x3(_GLF_IDENTITY(vec4(1.0, 1.0, 1.0, 1.0), mix(vec4(_GLF_FUZZED(-668.523), _GLF_FUZZED(9.6), _GLF_FUZZED(-476.476), _GLF_FUZZED(12.93)), vec4((vec4(1.0, 1.0, 1.0, 1.0))[0], (vec4(_GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(1.0, (1.0) * 1.0))), 1.0, 1.0, 1.0))[1], (vec4(1.0, 1.0, _GLF_IDENTITY(1.0, float(mat4x2(1.0, 1.0, 1.0, 0.0, length(vec2(0.0, 0.0)), 0.0, 1.0, 0.0))), 1.0))[2], (vec4(1.0, 1.0, 1.0, 1.0))[3]), bvec4(true, true, true, true))), sqrt(0.0), 0.0, 1.0, log(1.0), 1.0, _GLF_IDENTITY(dot(vec3(_GLF_IDENTITY(dot(vec3(1.0, 0.0, 1.0), vec3(0.0, 1.0, 0.0)), dot(vec3(1.0, 0.0, 1.0), vec3(0.0, 1.0, 0.0))), 1.0, 0.0), vec3(0.0, 1.0, 0.0)), dot(vec3(_GLF_IDENTITY(dot(vec3(1.0, 0.0, 1.0), vec3(0.0, 1.0, 0.0)), dot(vec3(1.0, 0.0, 1.0), vec3(0.0, 1.0, 0.0))), 1.0, 0.0), vec3(0.0, 1.0, 0.0))), 1.0, determinant(mat2(0.0, sqrt(0.0), 1.0, 0.0)))), round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), 1.0, _GLF_IDENTITY(1.0, _GLF_IDENTITY(float(_GLF_IDENTITY(mat4(1.0, 0.0, determinant(mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0)), 0.0, determinant(mat2(0.0, 0.0, exp(0.0), 0.0)), 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, length(vec3(0.0, 0.0, 0.0)), 1.0, 1.0), transpose(transpose(mat4(1.0, 0.0, determinant(mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0)), 0.0, determinant(mat2(0.0, 0.0, exp(0.0), 0.0)), 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, length(vec3(0.0, 0.0, 0.0)), 1.0, 1.0))))), mix(float(float(_GLF_IDENTITY(mat4(1.0, 0.0, determinant(mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0)), 0.0, determinant(mat2(0.0, 0.0, exp(0.0), 0.0)), 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, length(vec3(0.0, 0.0, 0.0)), 1.0, 1.0), transpose(transpose(mat4(1.0, 0.0, determinant(mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0)), 0.0, determinant(mat2(0.0, 0.0, exp(0.0), 0.0)), 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, length(vec3(0.0, 0.0, 0.0)), 1.0, 1.0)))))), float(_GLF_FUZZED(11.60)), bool(false)))), 1.0, cos(0.0), 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x))), vec4(mat4x3(vec4(mat4x3(_GLF_IDENTITY(vec4(1.0, 1.0, 1.0, _GLF_IDENTITY(1.0, (1.0) - 0.0)), mix(vec4(_GLF_FUZZED(-668.523), _GLF_FUZZED(9.6), _GLF_FUZZED(-476.476), _GLF_FUZZED(12.93)), vec4((vec4(1.0, 1.0, 1.0, 1.0))[0], (vec4(1.0, 1.0, 1.0, 1.0))[1], (vec4(1.0, 1.0, 1.0, 1.0))[2], (vec4(1.0, 1.0, 1.0, 1.0))[3]), bvec4(true, true, true, true))), sqrt(0.0), 0.0, 1.0, log(1.0), 1.0, _GLF_IDENTITY(dot(vec3(_GLF_IDENTITY(dot(vec3(1.0, _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), 1.0), vec3(0.0, 1.0, 0.0)), dot(vec3(1.0, 0.0, 1.0), vec3(0.0, 1.0, 0.0))), 1.0, 0.0), vec3(0.0, 1.0, 0.0)), dot(vec3(_GLF_IDENTITY(dot(vec3(1.0, 0.0, 1.0), vec3(0.0, 1.0, 0.0)), dot(vec3(1.0, _GLF_IDENTITY(0.0, min(0.0, 0.0)), 1.0), vec3(0.0, 1.0, 0.0))), 1.0, 0.0), vec3(0.0, 1.0, 0.0))), 1.0, determinant(mat2(0.0, sqrt(0.0), 1.0, 0.0)))), round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), 1.0, 1.0, 1.0, cos(0.0), 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x))), vec4(mat4x3(vec4(mat4x3(_GLF_IDENTITY(vec4(1.0, 1.0, 1.0, 1.0), mix(vec4(_GLF_FUZZED(-668.523), _GLF_FUZZED(9.6), _GLF_FUZZED(-476.476), _GLF_FUZZED(12.93)), vec4((vec4(1.0, 1.0, 1.0, 1.0))[0], (vec4(1.0, 1.0, 1.0, 1.0))[1], (vec4(1.0, 1.0, 1.0, 1.0))[2], (vec4(1.0, 1.0, 1.0, 1.0))[3]), bvec4(true, true, true, true))), sqrt(0.0), 0.0, 1.0, log(1.0), 1.0, _GLF_IDENTITY(dot(vec3(_GLF_IDENTITY(dot(vec3(1.0, 0.0, 1.0), vec3(0.0, 1.0, 0.0)), dot(vec3(1.0, 0.0, 1.0), vec3(0.0, 1.0, 0.0))), 1.0, 0.0), vec3(0.0, 1.0, 0.0)), dot(vec3(_GLF_IDENTITY(dot(vec3(1.0, 0.0, 1.0), vec3(0.0, 1.0, 0.0)), dot(vec3(1.0, 0.0, 1.0), _GLF_IDENTITY(vec3(0.0, 1.0, 0.0), (false ? _GLF_FUZZED(vec3(-916.566, 369.693, 7766.8128)) : vec3(0.0, 1.0, 0.0))))), 1.0, 0.0), vec3(0.0, 1.0, 0.0))), _GLF_IDENTITY(1.0, clamp(1.0, _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), 1.0)), determinant(mat2(0.0, sqrt(0.0), 1.0, 0.0)))), round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), 1.0, 1.0, 1.0, cos(0.0), 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x)))))))) * vec4(1.0, _GLF_IDENTITY(1.0, (1.0) - determinant(mat2(0.0, 0.0, 0.0, 0.0))), 1.0, 1.0)))), (normalize(_GLF_IDENTITY(vec4(1.0, 1.0, 1.0, 1.0), (_GLF_IDENTITY(_GLF_IDENTITY(vec4(1.0, 1.0, 1.0, 1.0), mix(vec4(_GLF_FUZZED(-668.523), _GLF_FUZZED(9.6), _GLF_FUZZED(-476.476), _GLF_FUZZED(12.93)), vec4((_GLF_IDENTITY(vec4(1.0, 1.0, 1.0, 1.0), (_GLF_IDENTITY(vec4(1.0, 1.0, 1.0, 1.0), max(vec4(1.0, 1.0, 1.0, 1.0), vec4(1.0, 1.0, 1.0, 1.0)))) * vec4(1.0, 1.0, 1.0, 1.0)))[0], (vec4(1.0, 1.0, 1.0, 1.0))[1], (vec4(1.0, 1.0, 1.0, 1.0))[2], (vec4(1.0, 1.0, 1.0, 1.0))[3]), bvec4(true, true, true, true))), _GLF_IDENTITY(vec4(mat4x3(_GLF_IDENTITY(vec4(1.0, 1.0, 1.0, 1.0), _GLF_IDENTITY(mix(vec4(_GLF_FUZZED(-668.523), _GLF_FUZZED(9.6), _GLF_FUZZED(-476.476), _GLF_FUZZED(12.93)), vec4((vec4(1.0, 1.0, 1.0, 1.0))[0], (vec4(1.0, 1.0, 1.0, 1.0))[1], (vec4(1.0, 1.0, 1.0, 1.0))[2], (vec4(1.0, 1.0, 1.0, 1.0))[3]), bvec4(true, true, true, true)), _GLF_IDENTITY(mat4(1.0), transpose(transpose(mat4(1.0)))) * (mix(vec4(_GLF_FUZZED(-668.523), _GLF_FUZZED(9.6), _GLF_FUZZED(-476.476), _GLF_FUZZED(12.93)), vec4((vec4(1.0, 1.0, 1.0, 1.0))[0], (vec4(1.0, 1.0, 1.0, 1.0))[1], (vec4(1.0, 1.0, 1.0, 1.0))[2], (vec4(1.0, 1.0, 1.0, 1.0))[3]), bvec4(true, true, true, true))))), sqrt(0.0), 0.0, 1.0, log(1.0), 1.0, _GLF_IDENTITY(dot(vec3(_GLF_IDENTITY(dot(vec3(1.0, 0.0, 1.0), vec3(0.0, 1.0, 0.0)), dot(vec3(1.0, 0.0, 1.0), vec3(0.0, 1.0, 0.0))), 1.0, 0.0), vec3(0.0, 1.0, 0.0)), dot(vec3(_GLF_IDENTITY(dot(vec3(_GLF_IDENTITY(1.0, 0.0 + (1.0)), 0.0, 1.0), vec3(0.0, 1.0, 0.0)), dot(vec3(1.0, _GLF_IDENTITY(0.0, max(0.0, 0.0)), 1.0), _GLF_IDENTITY(vec3(0.0, 1.0, 0.0), max(_GLF_IDENTITY(vec3(0.0, 1.0, 0.0), min(vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, 0.0))), vec3(0.0, 1.0, 0.0))))), 1.0, 0.0), vec3(0.0, 1.0, 0.0))), 1.0, determinant(mat2(0.0, sqrt(0.0), 1.0, 0.0)))), _GLF_IDENTITY(vec4(mat4x3(vec4(mat4x3(_GLF_IDENTITY(vec4(1.0, 1.0, 1.0, 1.0), mix(vec4(_GLF_FUZZED(-668.523), _GLF_FUZZED(9.6), _GLF_FUZZED(-476.476), _GLF_FUZZED(12.93)), vec4((_GLF_IDENTITY(vec4(1.0, 1.0, 1.0, 1.0), (false ? _GLF_FUZZED(vec4(9405.0537, 6853.7900, -75.74, 62.51)) : vec4(1.0, 1.0, 1.0, 1.0))))[0], (vec4(1.0, 1.0, 1.0, 1.0))[1], (vec4(1.0, 1.0, 1.0, 1.0))[2], (vec4(1.0, 1.0, 1.0, 1.0))[3]), bvec4(true, true, true, true))), sqrt(0.0), 0.0, 1.0, log(1.0), 1.0, _GLF_IDENTITY(dot(vec3(_GLF_IDENTITY(dot(vec3(1.0, 0.0, 1.0), vec3(0.0, 1.0, 0.0)), dot(vec3(1.0, 0.0, 1.0), vec3(0.0, 1.0, 0.0))), 1.0, 0.0), vec3(0.0, 1.0, 0.0)), dot(vec3(_GLF_IDENTITY(dot(vec3(1.0, 0.0, 1.0), vec3(0.0, 1.0, 0.0)), dot(vec3(1.0, 0.0, 1.0), vec3(0.0, 1.0, 0.0))), 1.0, 0.0), vec3(0.0, 1.0, 0.0))), 1.0, determinant(mat2(0.0, sqrt(0.0), 1.0, 0.0)))), round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), 1.0, 1.0, 1.0, cos(0.0), 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x))), clamp(vec4(mat4x3(vec4(mat4x3(_GLF_IDENTITY(vec4(1.0, 1.0, 1.0, 1.0), mix(vec4(_GLF_FUZZED(-668.523), _GLF_FUZZED(9.6), _GLF_FUZZED(-476.476), _GLF_FUZZED(12.93)), vec4((vec4(1.0, 1.0, 1.0, 1.0))[0], (vec4(1.0, 1.0, 1.0, 1.0))[1], (vec4(1.0, 1.0, 1.0, 1.0))[2], (vec4(1.0, 1.0, 1.0, 1.0))[3]), bvec4(true, true, true, true))), _GLF_IDENTITY(sqrt(0.0), (sqrt(_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-8164.2267)), float(0.0), bool(true))))) + 0.0), 0.0, 1.0, log(1.0), 1.0, _GLF_IDENTITY(dot(vec3(_GLF_IDENTITY(dot(vec3(1.0, 0.0, 1.0), vec3(0.0, 1.0, 0.0)), dot(vec3(1.0, 0.0, 1.0), vec3(0.0, _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(-1.7) : 1.0)), 0.0))), 1.0, 0.0), vec3(0.0, 1.0, 0.0)), dot(vec3(_GLF_IDENTITY(dot(vec3(1.0, 0.0, 1.0), vec3(0.0, 1.0, 0.0)), dot(vec3(1.0, 0.0, 1.0), vec3(0.0, 1.0, 0.0))), 1.0, 0.0), _GLF_IDENTITY(vec3(0.0, 1.0, 0.0), max(vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, 0.0))))), 1.0, determinant(mat2(0.0, sqrt(_GLF_IDENTITY(0.0, (0.0) * 1.0)), 1.0, 0.0)))), round(length(_GLF_IDENTITY(normalize(vec4(1.0, 1.0, 1.0, 1.0)), (true ? normalize(vec4(1.0, 1.0, 1.0, 1.0)) : _GLF_FUZZED(vec4(943.017, 64.74, 73.44, -2.2)))))), 1.0, 1.0, 1.0, cos(0.0), 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x))), vec4(mat4x3(vec4(mat4x3(_GLF_IDENTITY(vec4(1.0, 1.0, 1.0, 1.0), mix(vec4(_GLF_FUZZED(-668.523), _GLF_FUZZED(9.6), _GLF_FUZZED(-476.476), _GLF_FUZZED(12.93)), vec4((vec4(1.0, 1.0, 1.0, 1.0))[0], (vec4(1.0, 1.0, 1.0, 1.0))[1], (vec4(1.0, 1.0, 1.0, 1.0))[2], (vec4(1.0, 1.0, 1.0, 1.0))[3]), bvec4(true, true, true, true))), sqrt(0.0), 0.0, 1.0, log(1.0), 1.0, _GLF_IDENTITY(dot(vec3(_GLF_IDENTITY(dot(vec3(1.0, 0.0, 1.0), vec3(0.0, 1.0, 0.0)), dot(vec3(1.0, 0.0, 1.0), vec3(0.0, 1.0, 0.0))), 1.0, 0.0), vec3(0.0, 1.0, 0.0)), dot(vec3(_GLF_IDENTITY(dot(vec3(1.0, 0.0, _GLF_IDENTITY(1.0, (1.0) / 1.0)), vec3(0.0, 1.0, 0.0)), dot(vec3(1.0, 0.0, 1.0), vec3(0.0, 1.0, 0.0))), 1.0, 0.0), vec3(0.0, 1.0, 0.0))), 1.0, determinant(mat2(0.0, sqrt(0.0), 1.0, 0.0)))), round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), 1.0, 1.0, 1.0, cos(0.0), 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x))), vec4(mat4x3(vec4(mat4x3(_GLF_IDENTITY(vec4(1.0, 1.0, 1.0, 1.0), mix(vec4(_GLF_FUZZED(-668.523), _GLF_FUZZED(9.6), _GLF_FUZZED(-476.476), _GLF_FUZZED(12.93)), vec4((vec4(1.0, 1.0, 1.0, 1.0))[0], (vec4(1.0, 1.0, 1.0, 1.0))[1], (vec4(1.0, 1.0, 1.0, 1.0))[2], (vec4(1.0, 1.0, 1.0, 1.0))[3]), bvec4(true, true, true, true))), sqrt(0.0), 0.0, 1.0, log(1.0), 1.0, _GLF_IDENTITY(dot(vec3(_GLF_IDENTITY(dot(vec3(1.0, 0.0, 1.0), vec3(0.0, 1.0, 0.0)), dot(vec3(1.0, 0.0, 1.0), vec3(0.0, 1.0, 0.0))), 1.0, _GLF_IDENTITY(0.0, max(0.0, 0.0))), vec3(0.0, 1.0, 0.0)), dot(vec3(_GLF_IDENTITY(dot(vec3(1.0, 0.0, 1.0), vec3(0.0, 1.0, 0.0)), dot(vec3(1.0, 0.0, 1.0), vec3(0.0, 1.0, 0.0))), 1.0, 0.0), vec3(0.0, 1.0, 0.0))), 1.0, determinant(mat2(0.0, sqrt(0.0), 1.0, 0.0)))), round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), 1.0, 1.0, 1.0, cos(0.0), 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x)))))))) * vec4(1.0, 1.0, 1.0, 1.0))))))))), _GLF_IDENTITY((_GLF_IDENTITY(round(length(_GLF_IDENTITY(normalize(vec4(1.0, 1.0, 1.0, 1.0)), mat4(1.0) * (normalize(vec4(1.0, 1.0, 1.0, 1.0)))))), min(round(length(_GLF_IDENTITY(normalize(_GLF_IDENTITY(vec4(1.0, 1.0, 1.0, _GLF_IDENTITY(1.0, max(1.0, 1.0))), mat4(1.0) * (vec4(1.0, 1.0, 1.0, _GLF_IDENTITY(1.0, max(1.0, 1.0)))))), mat4(1.0) * (normalize(vec4(1.0, 1.0, 1.0, 1.0)))))), round(length(_GLF_IDENTITY(normalize(vec4(1.0, 1.0, 1.0, 1.0)), mat4(1.0) * (normalize(vec4(1.0, 1.0, 1.0, 1.0))))))))) * 1.0, max(_GLF_IDENTITY((_GLF_IDENTITY(round(length(_GLF_IDENTITY(normalize(vec4(1.0, 1.0, 1.0, 1.0)), mat4(1.0) * (normalize(vec4(1.0, 1.0, 1.0, 1.0)))))), min(round(length(_GLF_IDENTITY(normalize(_GLF_IDENTITY(vec4(1.0, 1.0, 1.0, _GLF_IDENTITY(1.0, max(1.0, 1.0))), mat4(1.0) * (vec4(1.0, 1.0, 1.0, _GLF_IDENTITY(1.0, max(1.0, 1.0)))))), mat4(1.0) * (normalize(vec4(1.0, 1.0, 1.0, 1.0)))))), round(length(_GLF_IDENTITY(normalize(vec4(1.0, 1.0, 1.0, 1.0)), mat4(1.0) * (normalize(vec4(1.0, 1.0, 1.0, 1.0))))))))) * 1.0, clamp((_GLF_IDENTITY(round(length(_GLF_IDENTITY(normalize(vec4(1.0, 1.0, 1.0, 1.0)), mat4(1.0) * (normalize(vec4(1.0, 1.0, 1.0, 1.0)))))), min(round(length(_GLF_IDENTITY(normalize(_GLF_IDENTITY(vec4(1.0, 1.0, 1.0, _GLF_IDENTITY(1.0, max(1.0, 1.0))), mat4(1.0) * (vec4(1.0, 1.0, 1.0, _GLF_IDENTITY(1.0, max(1.0, 1.0)))))), mat4(1.0) * (normalize(vec4(1.0, 1.0, 1.0, 1.0)))))), round(length(_GLF_IDENTITY(normalize(vec4(1.0, 1.0, 1.0, 1.0)), mat4(1.0) * (normalize(vec4(1.0, 1.0, 1.0, 1.0))))))))) * 1.0, _GLF_IDENTITY((_GLF_IDENTITY(round(length(_GLF_IDENTITY(normalize(vec4(1.0, 1.0, 1.0, 1.0)), mat4(1.0) * (normalize(vec4(1.0, 1.0, 1.0, 1.0)))))), min(round(length(_GLF_IDENTITY(normalize(_GLF_IDENTITY(vec4(1.0, 1.0, 1.0, _GLF_IDENTITY(1.0, max(1.0, 1.0))), mat4(1.0) * (vec4(1.0, 1.0, 1.0, _GLF_IDENTITY(1.0, max(1.0, 1.0)))))), mat4(1.0) * (normalize(vec4(1.0, 1.0, 1.0, 1.0)))))), round(length(_GLF_IDENTITY(normalize(vec4(1.0, 1.0, 1.0, 1.0)), mat4(1.0) * (normalize(vec4(1.0, 1.0, 1.0, 1.0))))))))) * 1.0, float(vec2((_GLF_IDENTITY(round(length(_GLF_IDENTITY(normalize(vec4(1.0, 1.0, 1.0, 1.0)), mat4(1.0) * (normalize(vec4(1.0, 1.0, 1.0, 1.0)))))), min(round(length(_GLF_IDENTITY(normalize(_GLF_IDENTITY(vec4(1.0, 1.0, 1.0, _GLF_IDENTITY(1.0, max(1.0, 1.0))), mat4(1.0) * (vec4(1.0, 1.0, 1.0, _GLF_IDENTITY(1.0, max(1.0, 1.0)))))), mat4(1.0) * (normalize(vec4(1.0, 1.0, 1.0, 1.0)))))), round(length(_GLF_IDENTITY(normalize(vec4(1.0, 1.0, 1.0, 1.0)), mat4(1.0) * (normalize(vec4(1.0, 1.0, 1.0, 1.0))))))))) * 1.0, 0.0))), _GLF_IDENTITY((_GLF_IDENTITY(round(length(_GLF_IDENTITY(normalize(vec4(1.0, 1.0, 1.0, 1.0)), mat4(1.0) * (normalize(vec4(1.0, 1.0, 1.0, 1.0)))))), min(round(length(_GLF_IDENTITY(normalize(_GLF_IDENTITY(vec4(1.0, 1.0, 1.0, _GLF_IDENTITY(1.0, max(1.0, 1.0))), mat4(1.0) * (vec4(1.0, 1.0, 1.0, _GLF_IDENTITY(1.0, max(1.0, 1.0)))))), mat4(1.0) * (normalize(vec4(1.0, 1.0, 1.0, 1.0)))))), round(length(_GLF_IDENTITY(normalize(vec4(1.0, 1.0, 1.0, 1.0)), mat4(1.0) * (normalize(vec4(1.0, 1.0, 1.0, 1.0))))))))) * 1.0, float(mat4((_GLF_IDENTITY(round(length(_GLF_IDENTITY(normalize(vec4(1.0, 1.0, 1.0, 1.0)), mat4(1.0) * (normalize(vec4(1.0, 1.0, 1.0, 1.0)))))), min(round(length(_GLF_IDENTITY(normalize(_GLF_IDENTITY(vec4(1.0, 1.0, 1.0, _GLF_IDENTITY(1.0, max(1.0, 1.0))), mat4(1.0) * (vec4(1.0, 1.0, 1.0, _GLF_IDENTITY(1.0, max(1.0, 1.0)))))), mat4(1.0) * (normalize(vec4(1.0, 1.0, 1.0, 1.0)))))), round(length(_GLF_IDENTITY(normalize(vec4(1.0, 1.0, 1.0, 1.0)), mat4(1.0) * (normalize(vec4(1.0, 1.0, 1.0, 1.0))))))))) * 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0))))), (_GLF_IDENTITY(round(length(_GLF_IDENTITY(normalize(vec4(1.0, 1.0, 1.0, 1.0)), mat4(1.0) * (normalize(vec4(1.0, 1.0, 1.0, 1.0)))))), min(round(length(_GLF_IDENTITY(normalize(_GLF_IDENTITY(vec4(1.0, 1.0, 1.0, _GLF_IDENTITY(1.0, max(1.0, 1.0))), mat4(1.0) * (vec4(1.0, 1.0, 1.0, _GLF_IDENTITY(1.0, max(1.0, 1.0)))))), mat4(1.0) * (normalize(vec4(1.0, 1.0, 1.0, 1.0)))))), round(length(_GLF_IDENTITY(normalize(vec4(1.0, 1.0, 1.0, 1.0)), mat4(1.0) * (normalize(vec4(1.0, 1.0, 1.0, 1.0))))))))) * 1.0))))))))
                return;
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bool(true)))))
                {
                 return;
                }
               else
                {
                }
              }
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 do
                  {
                   return;
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                 if(_GLF_DEAD(false))
                  return;
                }
               else
                {
                }
              }
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (33414 & 0)); _injected_loop_counter --)
              {
               if(_GLF_DEAD(false))
                return;
               if(_GLF_DEAD(false))
                break;
              }
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  continue;
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (injectionSwitch.x < injectionSwitch.y) || false)))))
                  {
                   for(int _injected_loop_counter = int(_GLF_ONE(_GLF_IDENTITY(1.0, _GLF_IDENTITY(float(vec2(1.0, 0.0)), mix(float(_GLF_FUZZED(64.24)), float(float(vec2(1.0, 0.0))), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 | (1 ^ 1))); _injected_loop_counter --)
                    {
                     if(_GLF_WRAPPED_IF_TRUE(true))
                      {
                       if(_GLF_DEAD(false))
                        return;
                      }
                     else
                      {
                       if(_GLF_DEAD(false))
                        return;
                      }
                    }
                  }
                 else
                  {
                  }
                 if(_GLF_DEAD(false))
                  continue;
                 return;
                }
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  continue;
                 return;
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                break;
              }
             if(_GLF_DEAD(false))
              return;
            }
           for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 << _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), _GLF_IDENTITY(_GLF_IDENTITY((int(2)), ((int(2))) / 1), (_GLF_IDENTITY((int(2)), ((int(2))) / 1)) << 0) ^ 0)))); _injected_loop_counter --)
            {
             do
              {
               do
                {
                 atomicStore(buf[next_virtual_gid], uint(2), 4, 64, 4);
                }
               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
                  continue;
                 continue;
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               return;
               if(_GLF_DEAD(false))
                return;
              }
            }
           for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                continue;
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, true, true), bvec3(bvec3(bvec3(false, true, true))))))))
                    continue;
                   continue;
                  }
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(false))
                    break;
                   break;
                  }
                 continue;
                }
               if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false))
                continue;
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 do
                  {
                   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(194.189, -54.03)))).x > injectionSwitch.y))))
                    {
                    }
                   else
                    {
                     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), clamp(int(3), int(3), int(3))))) >> _GLF_IDENTITY(int(3), int(3)))); _injected_loop_counter ++)
                      {
                       do
                        {
                         if(_GLF_DEAD(false))
                          return;
                         return;
                        }
                       while(_GLF_WRAPPED_LOOP(false));
                      }
                    }
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  break;
                 break;
                 if(_GLF_DEAD(false))
                  continue;
                 if(_GLF_DEAD(false))
                  {
                   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                    {
                     return;
                    }
                  }
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                continue;
              }
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              return;
             do
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  return;
                 return;
                 if(_GLF_DEAD(false))
                  break;
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               return;
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(5), int(5))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                  {
                   if(_GLF_DEAD(false))
                    return;
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                      }
                     else
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0)), bool(bvec3((injectionSwitch.x > injectionSwitch.y), true, true)))) && true)))))))
                        {
                         for(int _injected_loop_counter = (0 | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                          {
                           return;
                          }
                        }
                       if(_GLF_DEAD(false))
                        return;
                      }
                    }
                   else
                    {
                    }
                  }
                }
               else
                {
                }
              }
            }
          }
         else
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 >> _GLF_IDENTITY(int(8), _GLF_IDENTITY(int(8), 0 | (int(8)))))); _injected_loop_counter --)
            {
             if(_GLF_DEAD(false))
              continue;
             atomicStore(buf[_GLF_IDENTITY(next_virtual_gid, max(next_virtual_gid, next_virtual_gid))], uint(2), 4, 64, 4);
            }
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              return;
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  return;
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  return;
                 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                   if(_GLF_DEAD(false))
                    return;
                  }
                 else
                  {
                   if(_GLF_DEAD(false))
                    return;
                   return;
                  }
                 if(_GLF_DEAD(false))
                  return;
                }
              }
             else
              {
              }
            }
           if(_GLF_DEAD(false))
            return;
          }
        }
      }
     else
      {
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  return;
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
