#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_34 {
 ivec4 _f0;
 int _f1;
 vec2 _f2;
} ;

struct _GLF_struct_33 {
 mat2 _f0;
 int _f1;
} ;

struct _GLF_struct_32 {
 float _f0;
 mat4 _f1;
} ;

struct _GLF_struct_31 {
 uint _f0;
 mat3 _f1;
 ivec3 _f2;
} ;

struct _GLF_struct_35 {
 _GLF_struct_31 _f0;
 _GLF_struct_32 _f1;
 uvec2 _f2;
 _GLF_struct_33 _f3;
 mat4 _f4;
 _GLF_struct_34 _f5;
} ;

struct _GLF_struct_29 {
 uvec3 _f0;
 mat3x2 _f1;
 vec4 _f2;
 mat4x3 _f3;
 ivec4 _f4;
 uvec3 _f5;
} ;

struct _GLF_struct_28 {
 ivec3 _f0;
 bool _f1;
} ;

struct _GLF_struct_27 {
 mat2 _f0;
} ;

struct _GLF_struct_26 {
 mat2x3 _f0;
 mat2x4 _f1;
} ;

struct _GLF_struct_30 {
 _GLF_struct_26 _f0;
 mat4x3 _f1;
 _GLF_struct_27 _f2;
 _GLF_struct_28 _f3;
 ivec2 _f4;
 _GLF_struct_29 _f5;
} ;

struct _GLF_struct_36 {
 _GLF_struct_30 _f0;
 uint virtual_gid;
 _GLF_struct_35 _f1;
} ;

struct _GLF_struct_23 {
 bool _f0;
 int _f1;
} ;

struct _GLF_struct_22 {
 mat3x2 _f0;
 mat3 _f1;
} ;

struct _GLF_struct_21 {
 mat4x2 _f0;
} ;

struct _GLF_struct_20 {
 float _f0;
 uvec4 _f1;
 int _f2;
 uvec3 _f3;
 ivec3 _f4;
 uvec3 _f5;
 ivec2 _f6;
} ;

struct _GLF_struct_24 {
 _GLF_struct_20 _f0;
 bvec2 _f1;
 uvec3 _f2;
 _GLF_struct_21 _f3;
 _GLF_struct_22 _f4;
 mat3x2 _f5;
 _GLF_struct_23 _f6;
} ;

struct _GLF_struct_18 {
 uvec3 _f0;
 vec2 _f1;
} ;

struct _GLF_struct_17 {
 uvec3 _f0;
 vec2 _f1;
 mat3x2 _f2;
 mat4x3 _f3;
 bool _f4;
 mat4 _f5;
} ;

struct _GLF_struct_16 {
 ivec4 _f0;
 vec2 _f1;
 mat4x3 _f2;
 mat2x3 _f3;
} ;

struct _GLF_struct_15 {
 uvec2 _f0;
 bvec3 _f1;
 bvec4 _f2;
 mat4x3 _f3;
 mat4 _f4;
} ;

struct _GLF_struct_19 {
 _GLF_struct_15 _f0;
 uvec3 _f1;
 _GLF_struct_16 _f2;
 _GLF_struct_17 _f3;
 _GLF_struct_18 _f4;
} ;

struct _GLF_struct_25 {
 _GLF_struct_19 _f0;
 vec4 _f1;
 int _injected_loop_counter;
 mat2 _f2;
 bvec4 _f3;
 _GLF_struct_24 _f4;
} ;

struct _GLF_struct_12 {
 ivec3 _f0;
 bvec2 _f1;
} ;

struct _GLF_struct_13 {
 _GLF_struct_12 _f0;
 uint subgroup_local_id;
} ;

struct _GLF_struct_14 {
 mat4 _f0;
 _GLF_struct_13 _f1;
} ;

struct _GLF_struct_9 {
 uvec2 _f0;
 mat2 _f1;
 mat4x3 _f2;
 ivec4 _f3;
 uint workgroup_size;
} ;

struct _GLF_struct_10 {
 uvec4 _f0;
 _GLF_struct_9 _f1;
 int _f2;
 vec3 _f3;
 mat4x3 _f4;
 uvec4 _f5;
 uvec3 _f6;
} ;

struct _GLF_struct_7 {
 bool _f0;
 int _f1;
 uvec3 _f2;
 uvec2 _f3;
} ;

struct _GLF_struct_6 {
 vec2 _f0;
 int _f1;
 bvec2 _f2;
 uvec3 _f3;
 mat4 _f4;
 ivec4 _f5;
} ;

struct _GLF_struct_5 {
 uvec2 _f0;
 bool _f1;
 vec2 _f2;
 mat4 _f3;
 ivec3 _f4;
 mat3x4 _f5;
 mat3 _f6;
} ;

struct _GLF_struct_8 {
 vec2 _f0;
 ivec2 _f1;
 _GLF_struct_5 _f2;
 _GLF_struct_6 _f3;
 bool _f4;
 _GLF_struct_7 _f5;
} ;

struct _GLF_struct_4 {
 mat2x3 _f0;
 uvec3 _f1;
 vec3 _f2;
 vec3 _f3;
} ;

struct _GLF_struct_2 {
 float _f0;
} ;

struct _GLF_struct_3 {
 _GLF_struct_2 _f0;
 ivec4 _f1;
 mat3 _f2;
} ;

struct _GLF_struct_11 {
 mat3x2 _f0;
 mat3x4 _f1;
 _GLF_struct_3 _f2;
 _GLF_struct_4 _f3;
 _GLF_struct_8 _f4;
 _GLF_struct_10 _f5;
} ;

struct _GLF_struct_1 {
 bvec2 _f0;
 uint num_workgroup;
 ivec2 _f1;
} ;

struct _GLF_struct_0 {
 uint subgroup_base;
 vec2 _f0;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), (_GLF_IDENTITY(false, (false) && true)) && true)))
      return;
     return;
    }
   return;
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), bool(bvec2(_GLF_IDENTITY(false, false || (false)), true)))))
    {
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 | 0)); _injected_loop_counter --)
        {
         barrier();
        }
      }
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || _GLF_IDENTITY((_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true && ((_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))) && true))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
          {
           barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(false))
            continue;
          }
        }
       do
        {
         barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), ! (! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! _GLF_IDENTITY((! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y) || false))))), (_GLF_IDENTITY((! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y) || false))))), (_GLF_IDENTITY((! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y) || false))))), ((! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y) || false)))))) || false)) || false)) || false))))))))))
      {
      }
     else
      {
       barrier();
      }
    }
  }
 else
  {
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(false))
  return;
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 & 1)); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(mat4(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)), 0.0, 0.0, _GLF_IDENTITY(cos(0.0), 0.0 + (cos(0.0))), 0.0, sqrt(1.0), 1.0, 0.0, 0.0, _GLF_IDENTITY(dot(vec3(0.0, 0.0, 1.0), vec3(0.0, 0.0, 1.0)), dot(vec3(0.0, 0.0, _GLF_IDENTITY(1.0, (1.0) * 1.0)), vec3(0.0, 0.0, 1.0))), determinant(mat3(1.0, 0.0, 1.0, _GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(4.2))), 1.0, 1.0, 0.0, 0.0, 1.0)), 1.0, _GLF_IDENTITY(length(vec2(0.0, 0.0)), _GLF_IDENTITY((length(vec2(0.0, 0.0))), ((length(vec2(0.0, 0.0)))) + 0.0) * 1.0), cos(abs(0.0)), sqrt(sqrt(1.0))))).y))))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), true && (bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            break;
           barrier();
          }
         break;
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          break;
         if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, true && (false))))))
          barrier();
         if(_GLF_DEAD(false))
          continue;
         barrier();
        }
       do
        {
         return;
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bool(false)))));
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, _GLF_IDENTITY(true, true && _GLF_IDENTITY((true), false || ((true)))), true)))))
        return;
      }
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) / 1))
    {
     return;
    }
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 do
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      continue;
     return;
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(true, bool(bvec4(true, false, true, true))) && (false))))
  barrier();
 do
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_DEAD(false))
            barrier();
           return;
          }
        }
       do
        {
         return;
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              break;
             if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) && true))))))))
              barrier();
             return;
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                break;
               barrier();
              }
            }
          }
         else
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
             if(_GLF_DEAD(false))
              barrier();
             break;
             if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
              break;
            }
          }
         if(_GLF_DEAD(false))
          {
           do
            {
             barrier();
            }
           while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), (_GLF_WRAPPED_LOOP(false)) && true)))));
          }
        }
       else
        {
        }
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bvec4(true, true, true, true)))))
      {
       barrier();
      }
     else
      {
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    continue;
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
  }
 _GLF_struct_14 _GLF_struct_replacement_14 = _GLF_struct_14(mat4(1.0), _GLF_struct_13(_GLF_struct_12(ivec3(1), bvec2(true)), gl_SubgroupInvocationID));
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ! (_GLF_IDENTITY(! ((injectionSwitch.x < injectionSwitch.y)), false || (! ((injectionSwitch.x < injectionSwitch.y)))))))))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
    return;
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), true && (_GLF_IDENTITY(false, true && (false))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
        }
       else
        {
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
        barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec3(injectionSwitch.x > injectionSwitch.y, true, false))))))), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, false, _GLF_IDENTITY(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (true)))))) && true)))
        barrier();
       return;
      }
    }
   else
    {
     for(int _injected_loop_counter = (_GLF_IDENTITY((((_GLF_IDENTITY(1 ^ 0, (true ? 1 ^ _GLF_IDENTITY(0, (_GLF_IDENTITY(0, max(0, 0))) - (0 ^ 0)) : _GLF_FUZZED(-21559)))) & 1) << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7)), max(_GLF_IDENTITY((((_GLF_IDENTITY(1 ^ 0, (true ? 1 ^ 0 : _GLF_FUZZED(-21559)))) & 1) << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7)), ((((_GLF_IDENTITY(_GLF_IDENTITY(1 ^ 0, (1 ^ 0) | (1 ^ 0)), (true ? 1 ^ 0 : _GLF_FUZZED(-21559)))) & 1) << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))) / 1), (((_GLF_IDENTITY(1 ^ 0, (true ? 1 ^ 0 : _GLF_FUZZED(-21559)))) & 1) << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (_GLF_IDENTITY(0 & (_GLF_IDENTITY(9722, (9722) | (9722)) ^ -64734), int(_GLF_ZERO(0.0, injectionSwitch.x)) | (_GLF_IDENTITY(0 & (9722 ^ -64734), min(_GLF_IDENTITY(0 & (9722 ^ -64734), (0 & (9722 ^ _GLF_IDENTITY(-64734, (-64734) | (-64734)))) | 0), 0 & (9722 ^ -64734))))))); _injected_loop_counter --)
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          return;
        }
      }
    }
  }
 else
  {
  }
 _GLF_struct_1 _GLF_struct_replacement_1 = _GLF_struct_1(bvec2(true), gl_NumWorkGroups.x, ivec2(_GLF_IDENTITY(1, (1) >> 0)));
 _GLF_struct_11 _GLF_struct_replacement_11 = _GLF_struct_11(mat3x2(1.0), mat3x4(1.0), _GLF_struct_3(_GLF_struct_2(1.0), ivec4(1), mat3(1.0)), _GLF_struct_4(mat2x3(1.0), uvec3(1u), vec3(1.0), vec3(1.0)), _GLF_struct_8(vec2(_GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, (1.0) - 0.0), 1.0, _GLF_IDENTITY(1.0, (1.0) - 0.0)))), ivec2(1), _GLF_struct_5(uvec2(1u), true, _GLF_IDENTITY(vec2(1.0), max(vec2(1.0), _GLF_IDENTITY(vec2(1.0), mix(vec2(_GLF_FUZZED(_GLF_IDENTITY(-388.051, _GLF_IDENTITY(float(_GLF_IDENTITY(vec2(-388.051, 0.0), (vec2(-388.051, 0.0)) / vec2(1.0, 1.0))), 0.0 + (_GLF_IDENTITY(float(_GLF_IDENTITY(vec2(-388.051, 0.0), (vec2(-388.051, 0.0)) / vec2(1.0, 1.0))), clamp(float(_GLF_IDENTITY(vec2(-388.051, 0.0), (vec2(-388.051, 0.0)) / vec2(1.0, 1.0))), float(_GLF_IDENTITY(vec2(-388.051, 0.0), (vec2(-388.051, 0.0)) / vec2(1.0, 1.0))), float(_GLF_IDENTITY(vec2(-388.051, 0.0), _GLF_IDENTITY((vec2(-388.051, 0.0)) / vec2(1.0, 1.0), mix(vec2(_GLF_FUZZED(441.915), ((vec2(-388.051, 0.0)) / vec2(1.0, 1.0))[1]), vec2(((vec2(-388.051, 0.0)) / vec2(1.0, 1.0))[0], _GLF_FUZZED(34.83)), bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))))))))))), _GLF_FUZZED(-207.274)), vec2((vec2(1.0))[0], (vec2(1.0))[1]), bvec2(true, true))))), mat4(1.0), ivec3(1), mat3x4(1.0), mat3(1.0)), _GLF_struct_6(vec2(1.0), 1, bvec2(true), uvec3(1u), mat4(1.0), _GLF_IDENTITY(_GLF_IDENTITY(ivec4(1), (ivec4(1)) << ivec4(0, 0, 0, 0)), clamp(_GLF_IDENTITY(ivec4(1), (ivec4(1)) << ivec4(0, 0, 0, 0)), _GLF_IDENTITY(ivec4(1), (ivec4(1)) << ivec4(0, 0, 0, 0)), _GLF_IDENTITY(ivec4(1), (ivec4(1)) << ivec4(0, 0, 0, 0))))), true, _GLF_struct_7(true, 1, uvec3(1u), uvec2(1u))), _GLF_struct_10(uvec4(1u), _GLF_struct_9(uvec2(1u), mat2(1.0), mat4x3(1.0), ivec4(1), gl_WorkGroupSize.x), 1, vec3(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(cosh(1610.1764))))))), mat4x3(1.0), uvec4(1u), _GLF_IDENTITY(_GLF_IDENTITY(uvec3(1u), uvec3(1u, _GLF_IDENTITY(1u, ~ (~ (1u))), 1u) * (uvec3(1u))), (_GLF_IDENTITY(_GLF_IDENTITY(uvec3(1u), uvec3(1u, _GLF_IDENTITY(1u, ~ (~ (1u))), 1u) * (uvec3(1u))), uvec3(1u, 1u, 1u) * (_GLF_IDENTITY(uvec3(1u), uvec3(1u, _GLF_IDENTITY(1u, ~ (~ (1u))), 1u) * (uvec3(1u)))))) ^ uvec3(0u, 0u, 0u))));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  barrier();
 uint workgroup_id = _GLF_IDENTITY(gl_WorkGroupID.x, min(gl_WorkGroupID.x, _GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID.x, min(gl_WorkGroupID.x, gl_WorkGroupID.x)), (gl_WorkGroupID.x) | (gl_WorkGroupID.x))));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  barrier();
 uint workgroup_base = _GLF_struct_replacement_11._f5._f1.workgroup_size * workgroup_id;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, true && (false)))))))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
      return;
     barrier();
    }
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bool(bvec2(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
        {
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))) && true), (injectionSwitch.x > injectionSwitch.y))));
        }
       if(_GLF_DEAD(false))
        return;
      }
     else
      {
      }
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (injectionSwitch.x < injectionSwitch.y) && true))))))))
        {
         barrier();
        }
       else
        {
        }
      }
     else
      {
      }
    }
  }
 _GLF_struct_0 _GLF_struct_replacement_0 = _GLF_struct_0(subgroup_id * subgroup_size, vec2(1.0));
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   do
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          return;
         barrier();
        }
       if(_GLF_DEAD(false))
        return;
       return;
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     barrier();
    }
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     return;
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, (1) ^ 0)); _injected_loop_counter ++)
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         else
          {
           barrier();
          }
        }
       if(_GLF_DEAD(false))
        return;
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bool(true)))))
          {
           return;
          }
         else
          {
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
        }
       barrier();
      }
     return;
    }
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
  return;
 _GLF_struct_36 _GLF_struct_replacement_36 = _GLF_struct_36(_GLF_struct_30(_GLF_struct_26(mat2x3(1.0), mat2x4(1.0)), mat4x3(1.0), _GLF_struct_27(mat2(1.0)), _GLF_struct_28(ivec3(1), true), ivec2(1), _GLF_struct_29(uvec3(1u), mat3x2(1.0), vec4(1.0), mat4x3(1.0), ivec4(1), uvec3(1u))), workgroup_base + _GLF_struct_replacement_0.subgroup_base + _GLF_struct_replacement_14._f1.subgroup_local_id, _GLF_struct_35(_GLF_struct_31(1u, mat3(1.0), ivec3(1)), _GLF_struct_32(1.0, mat4(1.0)), uvec2(1u), _GLF_struct_33(mat2(1.0), 1), mat4(1.0), _GLF_struct_34(ivec4(1), 1, vec2(1.0))));
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     do
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         for(int _injected_loop_counter = 1; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > (0 & -9267)), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter > (0 & -9267))))); _injected_loop_counter --)
          {
           return;
           if(_GLF_DEAD(false))
            continue;
          }
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
             if(_GLF_DEAD(false))
              barrier();
             return;
            }
          }
         else
          {
          }
         if(_GLF_DEAD(false))
          barrier();
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) >> 0) > 0); _injected_loop_counter --)
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(false))
            break;
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             return;
            }
           else
            {
            }
          }
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false)))) && true)))))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           barrier();
          }
         else
          {
           if(_GLF_DEAD(false))
            return;
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
      }
    }
   else
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
      barrier();
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(mat3x4(injectionSwitch.y, log(1.0), 1.0, 0.0, 1.0, sqrt(0.0), exp(0.0), 1.0, 0.0, 0.0, 1.0, 1.0)), (float(mat3x4(injectionSwitch.y, log(1.0), 1.0, 0.0, 1.0, sqrt(0.0), exp(0.0), 1.0, 0.0, 0.0, 1.0, 1.0))) - 0.0))))))
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 & 1)); _injected_loop_counter ++)
          {
           barrier();
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            return;
          }
        }
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              break;
             barrier();
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               if(_GLF_DEAD(false))
                {
                 do
                  {
                   for(int _injected_loop_counter = (int(_GLF_ZERO(0.0, injectionSwitch.x)) >> _GLF_IDENTITY(int(3), int(3))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                    {
                     if(_GLF_DEAD(false))
                      break;
                     do
                      {
                       barrier();
                      }
                     while(_GLF_WRAPPED_LOOP(false));
                     if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec4(false, false, false, false)))) || false)))
                      barrier();
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                    }
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                }
              }
             else
              {
               if(_GLF_DEAD(false))
                barrier();
              }
             if(_GLF_DEAD(false))
              continue;
             if(_GLF_DEAD(false))
              continue;
             for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
              {
               if(_GLF_DEAD(false))
                continue;
               if(_GLF_DEAD(false))
                barrier();
               return;
               if(_GLF_DEAD(false))
                break;
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  continue;
                 continue;
                }
              }
            }
           if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
            barrier();
           if(_GLF_DEAD(false))
            break;
          }
         barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
      }
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, false || _GLF_IDENTITY((false), ((false)) && true))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
       if(_GLF_DEAD(false))
        return;
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))))
      {
       if(_GLF_DEAD(false))
        return;
       for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(_GLF_IDENTITY(bvec3(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, true, false), bvec3(bvec3(bvec3(false, true, false)))))))), false), bvec3(_GLF_IDENTITY(bvec3(bvec3(injectionSwitch.x > injectionSwitch.y, false, false)), bvec3(bvec3(bvec3(bvec3(injectionSwitch.x > injectionSwitch.y, false, false)))))))))))))
              {
               if(_GLF_DEAD(false))
                barrier();
               do
                {
                 if(_GLF_DEAD(false))
                  return;
                 barrier();
                }
               while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), ! (! _GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), bool(bvec4(! ((false)), false, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))));
              }
             return;
            }
           if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) || false), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(injectionSwitch.x > injectionSwitch.y, true, true, false)))))))))))))))
            return;
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
           if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))
            return;
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       do
        {
         do
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) || false)))
            {
            }
           else
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_DEAD(false), true, false))))
                {
                 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                  {
                   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, true, false)), ! (! (_GLF_IDENTITY(bool(bvec3(false, true, false)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (bool(bvec3(false, true, false))))))))))
                    {
                     if(_GLF_DEAD(false))
                      return;
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                     return;
                    }
                  }
                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                  {
                   barrier();
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    continue;
                  }
                }
               if(_GLF_DEAD(false))
                break;
              }
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, bool(bool(true))), (injectionSwitch.x < injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, ! (! (false)))), true && (bool(_GLF_IDENTITY(false, ! (! (false)))))))), (_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(2533.1961)), vec2(_GLF_FUZZED(0.7), (injectionSwitch)[1]), _GLF_IDENTITY(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), _GLF_IDENTITY(bvec2(bvec2(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))), bvec2(bvec3(bvec2(bvec2(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))), false)))))), _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)))).x > injectionSwitch.y))))
          return;
         if(_GLF_DEAD(false))
          return;
        }
       else
        {
        }
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          return;
         return;
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           return;
          }
         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
          return;
        }
      }
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(2), int(2))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           do
            {
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
              {
               do
                {
                 if(_GLF_DEAD(false))
                  return;
                 if(_GLF_DEAD(false))
                  return;
                 return;
                }
               while(_GLF_WRAPPED_LOOP(false));
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  continue;
                 if(_GLF_DEAD(false))
                  barrier();
                 break;
                }
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            break;
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           else
            {
             if(_GLF_DEAD(false))
              barrier();
             return;
             if(_GLF_DEAD(false))
              continue;
            }
          }
        }
      }
     do
      {
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = (1 & _GLF_IDENTITY((1 | 0), (_GLF_IDENTITY((1 | 0), ((1 | 0)) | ((1 | 0)))) * 1)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             barrier();
            }
           else
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(false))
                break;
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(false))
                    continue;
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                      }
                     else
                      {
                       barrier();
                      }
                    }
                   else
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                    }
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    break;
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      {
                       if(_GLF_DEAD(false))
                        return;
                       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, bool(bvec2(false, false)))))), bool(bvec3(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, bool(bvec2(false, false)))))), true, false)))))
                        break;
                       if(_GLF_DEAD(false))
                        barrier();
                      }
                     else
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        break;
                       barrier();
                      }
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      {
                       if(_GLF_WRAPPED_IF_TRUE(true))
                        {
                         barrier();
                         if(_GLF_DEAD(false))
                          continue;
                        }
                       else
                        {
                        }
                      }
                     if(_GLF_DEAD(false))
                      return;
                     if(_GLF_DEAD(false))
                      return;
                    }
                  }
                }
               if(_GLF_DEAD(false))
                continue;
               if(_GLF_DEAD(false))
                barrier();
              }
             else
              {
              }
            }
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(false))
      return;
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, true, true), _GLF_IDENTITY(bvec3(bvec3(bvec3(false, true, true))), bvec3(bvec3(bvec3(bvec3(bvec3(false, true, true)))))))))))
            barrier();
           barrier();
          }
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
           return;
          }
        }
      }
    }
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  return;
 uint next_virtual_gid = _GLF_IDENTITY(workgroup_base, uint(uvec3(_GLF_IDENTITY(workgroup_base, (workgroup_base) ^ 0u), (0u << _GLF_IDENTITY(uint(2u), uint(2u))), 0u))) + _GLF_IDENTITY(_GLF_struct_replacement_0.subgroup_base, (_GLF_struct_replacement_0.subgroup_base) - (0u | 0u)) + ((_GLF_IDENTITY(_GLF_struct_replacement_14._f1.subgroup_local_id + 1, uint(uint(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_struct_replacement_14._f1.subgroup_local_id, (134909u & (0u << _GLF_IDENTITY(uint(4u), _GLF_IDENTITY(uint(4u), (uint(4u)) >> 0u)))) ^ (_GLF_struct_replacement_14._f1.subgroup_local_id)), uint(uvec3(_GLF_IDENTITY(_GLF_struct_replacement_14._f1.subgroup_local_id, (134909u & (0u << _GLF_IDENTITY(uint(4u), _GLF_IDENTITY(uint(4u), (uint(4u)) >> 0u)))) ^ (_GLF_struct_replacement_14._f1.subgroup_local_id)), 0u, 1u))) + 1)))) % subgroup_size);
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(float(false)), _GLF_FUZZED(float(true))), bvec2(false, false))).y))))
  {
   do
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(false))
        {
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)), _GLF_IDENTITY(bool(bvec4(bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)), true, true, false)), (bool(bvec4(bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)), true, true, false))) && true)))))
        continue;
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
   atomicStore(buf[_GLF_struct_replacement_36.virtual_gid], uint(1), _GLF_IDENTITY(4, (4) - 0), 64, 4);
  }
 do
  {
   if(_GLF_DEAD(false))
    break;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))), _GLF_IDENTITY(true, (true) || false) && (_injected_loop_counter != ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7)))))); _injected_loop_counter ++)
      {
       return;
      }
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < ((0 | _GLF_IDENTITY(0, 0 ^ (_GLF_IDENTITY(0, int(int(0)))))) ^ 1)); _injected_loop_counter ++)
        {
         barrier();
        }
      }
    }
   if(_GLF_DEAD(false))
    continue;
  }
 while(_GLF_WRAPPED_LOOP(false));
 for(int _injected_loop_counter = int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, false || (true))))
      {
       do
        {
         if(_GLF_DEAD(false))
          barrier();
         if((_GLF_struct_replacement_14._f1.subgroup_local_id % 2) == _GLF_IDENTITY(0, (0) >> 0))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              return;
             do
              {
               barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), ! (! (_GLF_WRAPPED_IF_FALSE(false)))))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 return;
                }
               else
                {
                }
              }
             if(_GLF_DEAD(false))
              barrier();
            }
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             do
              {
               do
                {
                 if(_GLF_DEAD(false))
                  break;
                 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                  }
                 else
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   if(_GLF_DEAD(false))
                    return;
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(false))
                      continue;
                     if(_GLF_DEAD(false))
                      barrier();
                     break;
                    }
                   for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(4), int(4))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (_GLF_IDENTITY((((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(5), int(5)), _GLF_IDENTITY((_GLF_IDENTITY(int(5), int(5))) | (_GLF_IDENTITY(int(5), int(5))), _GLF_IDENTITY(max((_GLF_IDENTITY(int(5), int(5))) | (_GLF_IDENTITY(int(5), int(5))), _GLF_IDENTITY((_GLF_IDENTITY(int(5), int(5))) | (_GLF_IDENTITY(int(5), int(5))), ~ (~ ((_GLF_IDENTITY(int(5), int(5))) | (_GLF_IDENTITY(int(5), int(5))))))), _GLF_IDENTITY(int(int(max((_GLF_IDENTITY(int(5), int(5))) | (_GLF_IDENTITY(int(5), int(5))), _GLF_IDENTITY((_GLF_IDENTITY(int(5), int(5))) | (_GLF_IDENTITY(int(5), int(5))), ~ (~ ((_GLF_IDENTITY(int(5), int(5))) | (_GLF_IDENTITY(int(5), int(5))))))))), clamp(int(int(max((_GLF_IDENTITY(int(5), int(5))) | (_GLF_IDENTITY(int(5), int(5))), _GLF_IDENTITY((_GLF_IDENTITY(int(5), int(5))) | (_GLF_IDENTITY(int(5), int(5))), ~ (~ ((_GLF_IDENTITY(int(5), int(5))) | (_GLF_IDENTITY(int(5), int(5))))))))), int(int(max((_GLF_IDENTITY(int(5), int(5))) | (_GLF_IDENTITY(int(5), int(5))), _GLF_IDENTITY((_GLF_IDENTITY(int(5), int(5))) | (_GLF_IDENTITY(int(5), int(5))), ~ (~ ((_GLF_IDENTITY(int(5), int(5))) | (_GLF_IDENTITY(int(5), int(5))))))))), int(int(max((_GLF_IDENTITY(int(5), int(5))) | (_GLF_IDENTITY(int(5), int(5))), _GLF_IDENTITY((_GLF_IDENTITY(int(5), int(5))) | (_GLF_IDENTITY(int(5), int(5))), ~ (~ ((_GLF_IDENTITY(int(5), int(5))) | (_GLF_IDENTITY(int(5), int(5))))))))))))))) >> _GLF_IDENTITY(int(5), int(5))) << _GLF_IDENTITY(int(4), int(4))), (_GLF_IDENTITY((((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(5), int(5)), _GLF_IDENTITY((_GLF_IDENTITY(int(5), int(5))) | (_GLF_IDENTITY(int(5), int(5))), max((_GLF_IDENTITY(int(5), int(5))) | (_GLF_IDENTITY(int(5), int(5))), _GLF_IDENTITY((_GLF_IDENTITY(int(5), int(5))) | (_GLF_IDENTITY(int(5), int(5))), ~ (~ ((_GLF_IDENTITY(int(5), int(5))) | (_GLF_IDENTITY(int(5), int(5)))))))))) >> _GLF_IDENTITY(int(5), int(5))) << _GLF_IDENTITY(int(4), int(4))), max((((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(5), int(5)), _GLF_IDENTITY((_GLF_IDENTITY(int(5), int(5))) | (_GLF_IDENTITY(int(5), int(5))), max((_GLF_IDENTITY(int(5), int(5))) | (_GLF_IDENTITY(int(5), int(5))), _GLF_IDENTITY((_GLF_IDENTITY(int(5), int(5))) | (_GLF_IDENTITY(int(5), int(5))), ~ (~ ((_GLF_IDENTITY(int(5), int(5))) | (_GLF_IDENTITY(int(5), int(5)))))))))) >> _GLF_IDENTITY(int(5), int(5))) << _GLF_IDENTITY(int(4), int(4))), _GLF_IDENTITY((((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(5), int(5)), _GLF_IDENTITY((_GLF_IDENTITY(int(5), int(5))) | (_GLF_IDENTITY(int(5), int(5))), max((_GLF_IDENTITY(int(5), int(5))) | (_GLF_IDENTITY(int(5), int(5))), _GLF_IDENTITY((_GLF_IDENTITY(int(5), int(5))) | (_GLF_IDENTITY(int(5), int(5))), ~ (~ ((_GLF_IDENTITY(int(5), int(5))) | (_GLF_IDENTITY(int(5), int(5)))))))))) >> _GLF_IDENTITY(int(5), int(5))) << _GLF_IDENTITY(int(4), int(4))), ((((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(5), int(5)), _GLF_IDENTITY((_GLF_IDENTITY(int(5), int(5))) | (_GLF_IDENTITY(int(5), int(5))), max((_GLF_IDENTITY(int(5), int(5))) | (_GLF_IDENTITY(int(5), int(5))), _GLF_IDENTITY((_GLF_IDENTITY(int(5), int(5))) | (_GLF_IDENTITY(int(5), int(5))), ~ (~ ((_GLF_IDENTITY(int(5), int(5))) | (_GLF_IDENTITY(int(5), int(5)))))))))) >> _GLF_IDENTITY(int(5), int(5))) << _GLF_IDENTITY(int(4), int(4)))) << 0)))) ^ 0) >> _GLF_IDENTITY(int(4), int(4)))); _injected_loop_counter ++)
                    {
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                      }
                     else
                      {
                       if(_GLF_DEAD(false))
                        {
                         for(int _injected_loop_counter = ((int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y)) << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (int(4)) | (int(4))))) >> _GLF_IDENTITY(int(4), int(4))); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != (0 << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), 1 * (int(0)))))), (_GLF_WRAPPED_LOOP(_injected_loop_counter != (0 << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), 1 * (int(0))))))) && true); _injected_loop_counter --)
                          {
                           if(_GLF_DEAD(false))
                            continue;
                           if(_GLF_DEAD(false))
                            barrier();
                          }
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          continue;
                         break;
                        }
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        return;
                       for(_GLF_struct_25 _GLF_struct_replacement_25 = _GLF_struct_25(_GLF_struct_19(_GLF_struct_15(uvec2(1u), bvec3(true), bvec4(true), mat4x3(1.0), mat4(1.0)), uvec3(1u), _GLF_struct_16(ivec4(1), vec2(1.0), mat4x3(_GLF_IDENTITY(1.0, (1.0) * 1.0)), mat2x3(1.0)), _GLF_struct_17(uvec3(1u), vec2(1.0), mat3x2(1.0), mat4x3(1.0), true, mat4(1.0)), _GLF_struct_18(uvec3(1u), vec2(_GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat4x2(_GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, _GLF_IDENTITY((1.0), float(mat2x4((1.0), 0.0, 1.0, _GLF_IDENTITY(1.0, 0.0 + (1.0)), 1.0, 0.0, 1.0, 0.0))) - 0.0), _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(102.392)), float(1.0), bool(true))), 1.0)), 1.0, 0.0, sqrt(1.0), 0.0, 1.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y))), float(vec4(float(mat4x2(1.0, 1.0, 0.0, sqrt(1.0), 0.0, 1.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y))), 0.0, 0.0, 0.0))))))), vec4(1.0), 0, mat2(1.0), bvec4(true), _GLF_struct_24(_GLF_struct_20(1.0, uvec4(1u), 1, uvec3(1u), ivec3(1), uvec3(1u), ivec2(1)), bvec2(true), uvec3(1u), _GLF_struct_21(mat4x2(1.0)), _GLF_struct_22(mat3x2(1.0), mat3(1.0)), mat3x2(1.0), _GLF_struct_23(true, 1))); _GLF_WRAPPED_LOOP(_GLF_struct_replacement_25._injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _GLF_struct_replacement_25._injected_loop_counter ++)
                        {
                         if(_GLF_DEAD(false))
                          {
                           if(_GLF_DEAD(false))
                            {
                             if(_GLF_WRAPPED_IF_FALSE(false))
                              {
                              }
                             else
                              {
                               barrier();
                              }
                            }
                           barrier();
                          }
                         if(_GLF_DEAD(false))
                          return;
                        }
                       if(_GLF_DEAD(false))
                        {
                         if(_GLF_WRAPPED_IF_TRUE(true))
                          {
                           barrier();
                          }
                         else
                          {
                          }
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          barrier();
                        }
                      }
                    }
                  }
                 if(_GLF_DEAD(false))
                  break;
                }
               while(_GLF_WRAPPED_LOOP(false));
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false))))
                    return;
                   continue;
                  }
                 if(_GLF_DEAD(false))
                  return;
                 for(int _injected_loop_counter = (0 & 24298); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) + 0) != ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5)))); _injected_loop_counter ++)
                  {
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(false))
                      break;
                     barrier();
                    }
                  }
                 do
                  {
                   barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                 if(_GLF_DEAD(false))
                  return;
                 if(_GLF_DEAD(false))
                  return;
                 if(_GLF_DEAD(false))
                  continue;
                }
              }
             while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bool(false))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bool(false)))), ! _GLF_IDENTITY((_GLF_IDENTITY(! (! (_GLF_IDENTITY(false, bool(bool(false))))), (! _GLF_IDENTITY((! (_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(false, false), _GLF_IDENTITY(bvec2(bvec2(bvec2(false, false))), bvec2(bvec4(bvec2(bvec2(bvec2(false, false))), false, true))))), (bool(_GLF_IDENTITY(bvec2(false, false), _GLF_IDENTITY(bvec2(bvec2(_GLF_IDENTITY(bvec2(false, false), _GLF_IDENTITY(bvec2(bvec3(bvec2(false, false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), bvec2(bvec3(bvec2(bvec3(bvec2(false, false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), false)))))), bvec2(bvec4(bvec2(bvec2(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec4(bvec2(false, false), true, false))))), false, true)))))) || false))))))), ((! (_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(false, false), _GLF_IDENTITY(bvec2(bvec2(bvec2(false, false))), bvec2(bvec4(bvec2(bvec2(bvec2(false, false))), false, true))))), (bool(_GLF_IDENTITY(bvec2(false, false), _GLF_IDENTITY(bvec2(bvec2(bvec2(false, false))), bvec2(bvec4(bvec2(bvec2(bvec2(false, false))), false, true)))))) || _GLF_IDENTITY(false, (false) || false))))))))) || false)) && true)), (_GLF_IDENTITY((_GLF_IDENTITY(! (! (_GLF_IDENTITY(false, bool(bool(false))))), (! _GLF_IDENTITY((! (_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(false, false), _GLF_IDENTITY(bvec2(bvec2(bvec2(false, false))), bvec2(bvec4(bvec2(bvec2(bvec2(false, false))), false, true))))), (bool(_GLF_IDENTITY(bvec2(false, false), _GLF_IDENTITY(bvec2(bvec2(_GLF_IDENTITY(bvec2(false, false), _GLF_IDENTITY(bvec2(bvec3(bvec2(false, false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), bvec2(bvec3(bvec2(bvec3(bvec2(false, false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), false)))))), bvec2(bvec4(bvec2(bvec2(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec4(bvec2(false, false), true, false))))), false, true)))))) || false))))))), ((! (_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(false, false), _GLF_IDENTITY(bvec2(bvec2(bvec2(false, false))), bvec2(bvec4(bvec2(bvec2(bvec2(false, false))), false, true))))), (bool(_GLF_IDENTITY(bvec2(false, false), _GLF_IDENTITY(bvec2(bvec2(bvec2(false, false))), bvec2(bvec4(bvec2(bvec2(bvec2(false, false))), false, true)))))) || _GLF_IDENTITY(false, (false) || false))))))))) || false)) && true)), bool(bvec3((_GLF_IDENTITY(! (! (_GLF_IDENTITY(false, bool(bool(false))))), (! _GLF_IDENTITY((! (_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(false, false), _GLF_IDENTITY(bvec2(bvec2(bvec2(false, false))), bvec2(bvec4(bvec2(bvec2(bvec2(false, false))), false, true))))), (bool(_GLF_IDENTITY(bvec2(false, false), _GLF_IDENTITY(bvec2(bvec2(_GLF_IDENTITY(bvec2(false, false), _GLF_IDENTITY(bvec2(bvec3(bvec2(false, false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), bvec2(bvec3(bvec2(bvec3(bvec2(false, false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), false)))))), bvec2(bvec4(bvec2(bvec2(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec4(bvec2(false, false), true, false))))), false, true)))))) || false))))))), ((! (_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(false, false), _GLF_IDENTITY(bvec2(bvec2(bvec2(false, false))), bvec2(bvec4(bvec2(bvec2(bvec2(false, false))), false, true))))), (bool(_GLF_IDENTITY(bvec2(false, false), _GLF_IDENTITY(bvec2(bvec2(bvec2(false, false))), bvec2(bvec4(bvec2(bvec2(bvec2(false, false))), false, true)))))) || _GLF_IDENTITY(false, (false) || false))))))))) || false)) && true)), false, true)))) || false)))), false, false, false))), true && (_GLF_IDENTITY(false, (false) && true)))));
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(false))
                barrier();
               continue;
              }
            }
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              return;
            }
           else
            {
             atomicStore(buf[next_virtual_gid], _GLF_IDENTITY(uint(_GLF_IDENTITY(2, (_GLF_IDENTITY(true ? _GLF_IDENTITY(2, (_GLF_IDENTITY(2, clamp(2, 2, 2))) | (2)) : _GLF_FUZZED(mix(_injected_loop_counter, 20162, true)), clamp(true ? _GLF_IDENTITY(2, (_GLF_IDENTITY(2, clamp(2, 2, 2))) | (2)) : _GLF_FUZZED(mix(_injected_loop_counter, 20162, true)), true ? _GLF_IDENTITY(2, (_GLF_IDENTITY(2, clamp(2, 2, 2))) | (2)) : _GLF_FUZZED(mix(_injected_loop_counter, 20162, true)), true ? _GLF_IDENTITY(2, (_GLF_IDENTITY(2, clamp(2, 2, 2))) | (2)) : _GLF_FUZZED(mix(_injected_loop_counter, 20162, true))))))), clamp(uint(2), _GLF_IDENTITY(uint(2), (_GLF_IDENTITY(uint(2), (true ? uint(2) : _GLF_FUZZED(workgroup_id)))) | 0u), _GLF_IDENTITY(uint(2), (uint(2)) >> 0u))), 4, 64, 4);
             if(_GLF_DEAD(false))
              barrier();
            }
          }
         else
          {
           atomicStore(buf[next_virtual_gid], uint(2), 4, 64, 4);
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bool(false)))) && true)))
        {
         if(_GLF_DEAD(false))
          continue;
         return;
        }
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           barrier();
          }
         else
          {
          }
         if(_GLF_DEAD(false))
          return;
        }
       if(_GLF_DEAD(false))
        break;
      }
    }
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
  return;
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
