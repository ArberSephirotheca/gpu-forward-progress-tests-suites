#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer WriteVal {
 uint write_val;
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, true, false)))))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0)))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
    return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    return;
   barrier();
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) ^ 0))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, false || (false))) || false)))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))
      return;
     do
      {
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        continue;
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
  {
   for(int _injected_loop_counter = (1 ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      break;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), false))))
        {
         do
          {
           barrier();
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              break;
             barrier();
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                break;
               continue;
              }
             break;
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
              continue;
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       barrier();
      }
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, true && (false))) || false)))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
        {
         return;
         if(_GLF_DEAD(false))
          barrier();
        }
      }
     else
      {
      }
    }
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if(_GLF_DEAD(false))
  barrier();
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat4(injectionSwitch, abs(1.0), 0.0, 1.0, 1.0, log(1.0), 1.0, log(1.0), 0.0, 0.0, 0.0, 0.0, _GLF_ZERO(_GLF_IDENTITY(0.0, min(0.0, 0.0)), injectionSwitch.x), 0.0, 1.0)), max(vec2(mat4(injectionSwitch, abs(1.0), 0.0, 1.0, 1.0, log(1.0), 1.0, log(1.0), 0.0, 0.0, 0.0, 0.0, _GLF_ZERO(_GLF_IDENTITY(0.0, min(0.0, 0.0)), injectionSwitch.x), 0.0, 1.0)), vec2(mat4(injectionSwitch, abs(1.0), 0.0, 1.0, 1.0, log(1.0), 1.0, log(1.0), 0.0, 0.0, 0.0, 0.0, _GLF_ZERO(_GLF_IDENTITY(0.0, min(0.0, 0.0)), injectionSwitch.x), 0.0, 1.0))))).y)), ! (! _GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && ((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))
        return;
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(false))
            break;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           continue;
           if(_GLF_DEAD(false))
            break;
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))))
          {
           if(_GLF_DEAD(false))
            break;
           if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || _GLF_IDENTITY(false, ! (! (false)))))
            barrier();
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y))))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                barrier();
               continue;
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                break;
               break;
              }
             if(_GLF_DEAD(false))
              break;
            }
           else
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < 1, bool(_GLF_IDENTITY(bvec2(_injected_loop_counter < 1, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec2(bvec2(bvec2(_injected_loop_counter < 1, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))); _injected_loop_counter ++)
              {
               if(_GLF_DEAD(false))
                continue;
               barrier();
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  return;
                 barrier();
                }
               if(_GLF_DEAD(false))
                return;
              }
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
          }
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), false || (_GLF_IDENTITY(false, (false) && true))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), false || (_GLF_IDENTITY(false, (false) && true))), false || (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), false || (_GLF_IDENTITY(false, (false) && true)))))) || false)))
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(max(injectionSwitch.x, injectionSwitch.x), max(_GLF_IDENTITY(max(injectionSwitch.x, injectionSwitch.x), max(max(injectionSwitch.x, injectionSwitch.x), max(injectionSwitch.x, injectionSwitch.x))), max(injectionSwitch.x, injectionSwitch.x)))), injectionSwitch.x)) < _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(min(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(8.2, 19.74)) : injectionSwitch)), injectionSwitch), _GLF_IDENTITY((min(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(8.2, 19.74)) : injectionSwitch)), injectionSwitch)) * mat2(1.0), ((min(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(_GLF_IDENTITY(vec2(8.2, 19.74), (true ? vec2(8.2, 19.74) : _GLF_FUZZED(vec2(0.8, 5820.8546))))) : injectionSwitch)), injectionSwitch)) * mat2(1.0)) - vec2(0.0, 0.0)))).y, _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, 0.0 + (injectionSwitch.y)))) && (injectionSwitch.x < injectionSwitch.y))))))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                return;
               barrier();
              }
             else
              {
               if(_GLF_DEAD(false))
                continue;
              }
             if(_GLF_DEAD(false))
              return;
            }
           else
            {
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), _GLF_IDENTITY(bool(bvec2(! (_GLF_DEAD(false)), true)), bool(bvec3(bool(bvec2(! (_GLF_DEAD(false)), true)), true, false)))))))
              barrier();
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                return;
               continue;
              }
             return;
            }
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(false))
            barrier();
           continue;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
          }
         if(_GLF_DEAD(false))
          barrier();
         return;
         if(_GLF_DEAD(false))
          continue;
        }
       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(635.822) : injectionSwitch.x)))) > injectionSwitch.y))))
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
            barrier();
           barrier();
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, false)))))
            return;
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
          continue;
         barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) || false), (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
           if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - length(0.0)))), false || (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - length(0.0)))), ! (! (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - length(0.0))))))))))))))
            {
             if(_GLF_DEAD(false))
              continue;
             break;
            }
          }
         else
          {
           return;
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            return;
           barrier();
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       return;
      }
    }
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), 0 ^ (_GLF_IDENTITY(int(3), max(int(3), int(3))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(1, (1) << 0)); _injected_loop_counter ++)
      {
       barrier();
      }
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
   barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), false || (! (false))))), true && (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), false || (! (false)))))))))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(false))
        return;
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         return;
         if(_GLF_DEAD(false))
          barrier();
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, (false) || false))))), _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec2((! (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), true && (_GLF_IDENTITY(false, (false) || false))))), false)), ! (! (_GLF_IDENTITY(bool(bvec2((! (_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, (false) || false))))), false)), (bool(bvec2((! (_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, (false) || false))))), false))) || false)))), false || (_GLF_IDENTITY(bool(bvec2((! (_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, (false) || false))))), false)), ! (! (_GLF_IDENTITY(bool(bvec2((! (_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, (false) || false))))), false)), (bool(bvec2((! (_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, (false) || false))))), false))) || false))))))))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
        return;
       return;
      }
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 ^ 0)); _injected_loop_counter --)
      {
       return;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, false || (false)))), (_GLF_IDENTITY(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, _GLF_IDENTITY(false, bool(bvec4(false, false, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) || (false)))), (_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, false || (false))))) && true)) || _GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).x > injectionSwitch.y), (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).x > injectionSwitch.y), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && ((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).x > injectionSwitch.y)))) && true)))))
    return;
  }
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(bvec2(_GLF_DEAD(false), true), bvec2(bvec3(bvec2(_GLF_DEAD(false), true), true))))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_DEAD(false))
    return;
   return;
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, false || (false))) && true), (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_DEAD(false))
  return;
 do
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     for(int _injected_loop_counter = (_GLF_IDENTITY(0 ^ _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), 0 ^ (_GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), max(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), (int(_GLF_ZERO(0.0, injectionSwitch.x))) | 0), clamp(_GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), (int(_GLF_ZERO(0.0, injectionSwitch.x))) | 0), _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), (int(_GLF_ZERO(_GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(-505.149) : _GLF_IDENTITY(0.0, min(0.0, 0.0)))), injectionSwitch.x))) | 0), max(_GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), (int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED((false ? 6229.0509 : -8.8))), float(injectionSwitch.x), bool(true)))))))) | 0), _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), (int(_GLF_ZERO(0.0, injectionSwitch.x))) | 0))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), (int(_GLF_ZERO(0.0, injectionSwitch.x))) | (_GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), (int(_GLF_ZERO(0.0, injectionSwitch.x))) - 0))), (int(_GLF_ZERO(0.0, injectionSwitch.x))) | 0), (false ? _GLF_FUZZED(-87959) : _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), (int(_GLF_ZERO(0.0, injectionSwitch.x))) | 0))))), int(_GLF_ZERO(0.0, injectionSwitch.x)), int(_GLF_ZERO(0.0, injectionSwitch.x)))))), _GLF_IDENTITY((0 ^ _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), _GLF_IDENTITY(_GLF_IDENTITY(0, max(_GLF_IDENTITY(0, (0) - 0), 0)) ^ (int(_GLF_ZERO(0.0, injectionSwitch.x))), min(_GLF_IDENTITY(0, max(_GLF_IDENTITY(0, (0) - 0), 0)) ^ (int(_GLF_ZERO(0.0, injectionSwitch.x))), _GLF_IDENTITY(0, max(_GLF_IDENTITY(0, (0) - 0), 0)) ^ (int(_GLF_ZERO(0.0, injectionSwitch.x))))))) - 0, (_GLF_IDENTITY((0 ^ _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), _GLF_IDENTITY(_GLF_IDENTITY(0, max(_GLF_IDENTITY(0, (0) - 0), 0)) ^ (int(_GLF_ZERO(0.0, injectionSwitch.x))), min(_GLF_IDENTITY(0, max(_GLF_IDENTITY(0, (0) - 0), 0)) ^ (int(_GLF_ZERO(0.0, injectionSwitch.x))), _GLF_IDENTITY(0, max(_GLF_IDENTITY(0, (0) - 0), 0)) ^ (int(_GLF_ZERO(0.0, injectionSwitch.x))))))) - 0, min((0 ^ _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), _GLF_IDENTITY(_GLF_IDENTITY(0, max(_GLF_IDENTITY(0, (0) - 0), 0)) ^ (int(_GLF_ZERO(0.0, injectionSwitch.x))), min(_GLF_IDENTITY(0, max(_GLF_IDENTITY(0, (0) - 0), 0)) ^ (int(_GLF_ZERO(0.0, injectionSwitch.x))), _GLF_IDENTITY(0, max(_GLF_IDENTITY(0, (0) - 0), 0)) ^ (int(_GLF_ZERO(0.0, injectionSwitch.x))))))) - 0, (0 ^ _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), _GLF_IDENTITY(_GLF_IDENTITY(0, max(_GLF_IDENTITY(0, (0) - 0), 0)) ^ (int(_GLF_ZERO(0.0, injectionSwitch.x))), min(_GLF_IDENTITY(0, max(_GLF_IDENTITY(0, (0) - 0), 0)) ^ (int(_GLF_ZERO(0.0, injectionSwitch.x))), _GLF_IDENTITY(0, max(_GLF_IDENTITY(0, (0) - 0), 0)) ^ (int(_GLF_ZERO(0.0, injectionSwitch.x))))))) - 0))) >> 0))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < ((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(6), int(6)), (1 << _GLF_IDENTITY(int(_GLF_IDENTITY(6, (true ? 6 : _GLF_FUZZED(-52678)))), int(6))) + 0)) >> _GLF_IDENTITY(int(_GLF_IDENTITY(6, (6) >> (0 >> _GLF_IDENTITY(int(5), int(5))))), int(6))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_injected_loop_counter < ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), (_GLF_IDENTITY(int(6), int(6))) + 0)) >> _GLF_IDENTITY(int(_GLF_IDENTITY(6, int(ivec4(6, 0, 1, 0)))), _GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_IDENTITY(6, 0 ^ (6)), clamp(_GLF_IDENTITY(6, int(ivec2(6, int(_GLF_ZERO(_GLF_IDENTITY(0.0, _GLF_IDENTITY(float(_GLF_IDENTITY(mat3(0.0, 1.0, 1.0, 1.0, 1.0, 1.0, _GLF_IDENTITY(dot(vec4(1.0, 0.0, sqrt(0.0), 0.0), vec4(1.0, 0.0, 0.0, 0.0)), dot(vec4(1.0, 0.0, sqrt(0.0), 0.0), vec4(1.0, 0.0, 0.0, 0.0))), 1.0, 1.0), transpose(transpose(mat3(0.0, 1.0, 1.0, 1.0, 1.0, 1.0, _GLF_IDENTITY(dot(vec4(1.0, 0.0, sqrt(0.0), 0.0), vec4(1.0, 0.0, 0.0, 0.0)), dot(vec4(1.0, 0.0, sqrt(0.0), 0.0), vec4(1.0, 0.0, 0.0, 0.0))), 1.0, 1.0))))), max(float(_GLF_IDENTITY(mat3(0.0, 1.0, 1.0, 1.0, 1.0, 1.0, _GLF_IDENTITY(dot(vec4(1.0, 0.0, sqrt(0.0), 0.0), vec4(1.0, 0.0, 0.0, 0.0)), dot(vec4(1.0, 0.0, sqrt(0.0), 0.0), vec4(1.0, 0.0, 0.0, 0.0))), 1.0, 1.0), transpose(transpose(mat3(0.0, 1.0, 1.0, 1.0, 1.0, 1.0, _GLF_IDENTITY(dot(vec4(1.0, 0.0, sqrt(0.0), 0.0), vec4(1.0, 0.0, 0.0, 0.0)), dot(vec4(1.0, 0.0, sqrt(0.0), 0.0), vec4(1.0, 0.0, 0.0, 0.0))), 1.0, 1.0))))), float(_GLF_IDENTITY(mat3(0.0, 1.0, 1.0, 1.0, 1.0, 1.0, _GLF_IDENTITY(dot(vec4(1.0, 0.0, sqrt(0.0), 0.0), vec4(1.0, 0.0, 0.0, 0.0)), dot(vec4(1.0, 0.0, sqrt(0.0), 0.0), vec4(1.0, 0.0, 0.0, 0.0))), 1.0, 1.0), transpose(transpose(mat3(0.0, 1.0, 1.0, 1.0, 1.0, 1.0, _GLF_IDENTITY(dot(vec4(1.0, 0.0, sqrt(0.0), 0.0), vec4(1.0, 0.0, 0.0, 0.0)), dot(vec4(1.0, 0.0, sqrt(0.0), 0.0), vec4(1.0, 0.0, 0.0, 0.0))), 1.0, 1.0)))))))), injectionSwitch.x))))), 6, 6))), (int(_GLF_IDENTITY(_GLF_IDENTITY(6, 0 | (6)), clamp(_GLF_IDENTITY(6, int(ivec2(6, int(_GLF_ZERO(0.0, injectionSwitch.x))))), _GLF_IDENTITY(_GLF_IDENTITY(6, max(6, 6)), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(6, max(6, 6)), (_GLF_IDENTITY(6, max(6, 6))) / 1), (_GLF_IDENTITY(_GLF_IDENTITY(6, max(6, 6)), (_GLF_IDENTITY(6, max(6, 6))) / 1)) ^ 0)) ^ 0), 6)))) / (1 & 1)))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_injected_loop_counter < _GLF_IDENTITY(((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), (_GLF_IDENTITY(int(6), int(6))) >> 0)) >> _GLF_IDENTITY(int(_GLF_IDENTITY(6, (6) ^ 0)), int(_GLF_IDENTITY(_GLF_IDENTITY(6, min(_GLF_IDENTITY(6, _GLF_IDENTITY(int(int(6)), clamp(int(int(6)), int(int(6)), int(int(6))))), _GLF_IDENTITY(_GLF_IDENTITY(6, int(_GLF_IDENTITY(ivec2(_GLF_IDENTITY(6, 0 | (6)), 1), (ivec2(_GLF_IDENTITY(6, 0 | (6)), 1)) | (_GLF_IDENTITY(ivec2(_GLF_IDENTITY(6, 0 | (6)), 1), ivec2(ivec2(ivec2(_GLF_IDENTITY(6, 0 | (6)), 1)))))))), clamp(6, 6, 6)))), _GLF_IDENTITY(int(_GLF_IDENTITY(ivec2(_GLF_IDENTITY(6, min(_GLF_IDENTITY(6, _GLF_IDENTITY(int(int(6)), clamp(int(int(6)), int(int(6)), int(int(6))))), _GLF_IDENTITY(_GLF_IDENTITY(6, int(_GLF_IDENTITY(ivec2(_GLF_IDENTITY(6, 0 | (6)), 1), (ivec2(_GLF_IDENTITY(6, 0 | (6)), 1)) | (_GLF_IDENTITY(ivec2(_GLF_IDENTITY(6, 0 | (6)), 1), ivec2(ivec2(ivec2(_GLF_IDENTITY(6, 0 | (6)), 1)))))))), clamp(6, 6, 6)))), 1), ~ (~ (ivec2(_GLF_IDENTITY(6, min(_GLF_IDENTITY(6, _GLF_IDENTITY(int(int(6)), clamp(int(int(6)), int(int(6)), int(int(6))))), _GLF_IDENTITY(_GLF_IDENTITY(6, int(_GLF_IDENTITY(ivec2(_GLF_IDENTITY(6, 0 | (6)), 1), (ivec2(_GLF_IDENTITY(6, 0 | (6)), 1)) | (_GLF_IDENTITY(ivec2(_GLF_IDENTITY(6, 0 | (6)), 1), ivec2(ivec2(ivec2(_GLF_IDENTITY(6, 0 | (6)), 1)))))))), clamp(6, 6, 6)))), 1))))), (int(_GLF_IDENTITY(ivec2(_GLF_IDENTITY(6, min(_GLF_IDENTITY(6, _GLF_IDENTITY(int(int(6)), clamp(int(int(6)), int(int(6)), int(int(6))))), _GLF_IDENTITY(_GLF_IDENTITY(6, int(_GLF_IDENTITY(ivec2(_GLF_IDENTITY(6, 0 | (6)), 1), (ivec2(_GLF_IDENTITY(6, 0 | (6)), 1)) | (_GLF_IDENTITY(ivec2(_GLF_IDENTITY(6, 0 | (6)), 1), ivec2(ivec2(ivec2(_GLF_IDENTITY(6, 0 | (6)), 1)))))))), clamp(6, 6, 6)))), 1), ~ (~ (ivec2(_GLF_IDENTITY(6, min(_GLF_IDENTITY(6, _GLF_IDENTITY(int(int(6)), clamp(int(int(6)), int(int(6)), int(int(6))))), _GLF_IDENTITY(_GLF_IDENTITY(6, int(_GLF_IDENTITY(ivec2(_GLF_IDENTITY(6, 0 | (6)), 1), (ivec2(_GLF_IDENTITY(6, 0 | (6)), 1)) | (_GLF_IDENTITY(ivec2(_GLF_IDENTITY(6, 0 | (6)), 1), ivec2(ivec2(ivec2(_GLF_IDENTITY(6, 0 | (6)), 1)))))))), clamp(6, 6, 6)))), 1)))))) ^ 0))))), (((1 << _GLF_IDENTITY(int(6), int(_GLF_IDENTITY(6, (_GLF_IDENTITY(6, (_GLF_IDENTITY(6, max(6, 6))) | (6))) ^ (0 & -73036))))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(6, (6) ^ 0)), int(6)))) / 1))), false, false), _GLF_IDENTITY(bvec3(bvec3(bvec3(_injected_loop_counter < ((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(6), int(6)), (1 << _GLF_IDENTITY(int(6), int(6))) >> 0)) >> _GLF_IDENTITY(int(6), int(6))), false, false))), bvec3(bvec4(bvec3(bvec3(bvec3(_GLF_IDENTITY(_injected_loop_counter, clamp(_injected_loop_counter, _injected_loop_counter, _injected_loop_counter)) < _GLF_IDENTITY((_GLF_IDENTITY((1 << _GLF_IDENTITY(int(6), int(6))), _GLF_IDENTITY(((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(6), int(_GLF_IDENTITY(6, 0 | (_GLF_IDENTITY(6, int(int(6))))))), (1 << _GLF_IDENTITY(int(6), int(_GLF_IDENTITY(6, 0 | (_GLF_IDENTITY(6, int(int(6)))))))) | (1 << _GLF_IDENTITY(int(6), int(_GLF_IDENTITY(6, 0 | (_GLF_IDENTITY(6, int(int(6))))))))))), int(_GLF_ONE(1.0, injectionSwitch.y)) * (((1 << _GLF_IDENTITY(int(6), int(_GLF_IDENTITY(6, 0 | (_GLF_IDENTITY(6, int(int(6))))))))))) | ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), int(ivec4(_GLF_IDENTITY(int(6), int(6)), ((((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1))) << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2))), 0, 1)))))) >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(_GLF_IDENTITY(int(6), ~ (~ (int(6)))), int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(int(6), ~ (~ (int(6)))))))), ((_GLF_IDENTITY((1 << _GLF_IDENTITY(int(6), int(6))), _GLF_IDENTITY(((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(6), int(_GLF_IDENTITY(6, 0 | (_GLF_IDENTITY(6, int(int(6))))))), (1 << _GLF_IDENTITY(int(6), int(_GLF_IDENTITY(6, 0 | (_GLF_IDENTITY(6, int(int(6)))))))) | (1 << _GLF_IDENTITY(int(6), int(_GLF_IDENTITY(6, 0 | (_GLF_IDENTITY(6, int(int(6))))))))))), int(_GLF_ONE(1.0, injectionSwitch.y)) * (((1 << _GLF_IDENTITY(int(6), int(_GLF_IDENTITY(6, 0 | (_GLF_IDENTITY(6, int(int(6))))))))))) | ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), int(ivec4(_GLF_IDENTITY(int(6), int(6)), ((((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1))) << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2))), 0, 1)))))) >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(_GLF_IDENTITY(int(6), ~ (~ (int(6)))), int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(int(6), ~ (~ (int(6))))))))) >> 0), false, false))), false))))), ! (_GLF_IDENTITY(_GLF_IDENTITY(! (bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(_GLF_IDENTITY(6, clamp(_GLF_IDENTITY(6, int(ivec2(6, int(_GLF_ZERO(0.0, injectionSwitch.x))))), 6, 6))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_injected_loop_counter < ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(6, (6) ^ 0)), int(6))))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(_GLF_IDENTITY(6, clamp(_GLF_IDENTITY(6, int(ivec2(6, int(_GLF_ZERO(0.0, injectionSwitch.x))))), 6, 6))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_injected_loop_counter < ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(6, (6) ^ 0)), int(6))))), ! (! (_GLF_IDENTITY(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(_GLF_IDENTITY(6, clamp(_GLF_IDENTITY(6, int(ivec2(6, _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), (0 << _GLF_IDENTITY(int(4), int(4))) | (int(_GLF_ZERO(0.0, injectionSwitch.x))))))), 6, 6))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_injected_loop_counter < ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(6, (6) ^ 0)), int(6))))))))))), false, false), _GLF_IDENTITY(bvec3(bvec3(bvec3(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6))), false, false))), bvec3(bvec4(bvec3(bvec3(bvec3(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), ~ (~ (int(6)))))), false, false))), false)))))), (! (bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_injected_loop_counter < (_GLF_IDENTITY((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(6), int(_GLF_IDENTITY(6, min(6, 6)))), (true ? _GLF_IDENTITY(1 << _GLF_IDENTITY(int(6), int(6)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 1 << _GLF_IDENTITY(int(6), int(6)) : _GLF_FUZZED((+ _injected_loop_counter)))) : _GLF_FUZZED(88455)))), min((_GLF_IDENTITY(1 << _GLF_IDENTITY(_GLF_IDENTITY(int(6), (false ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(int(6), max(_GLF_IDENTITY(int(6), max(int(6), int(6))), int(6))))), int(6)), (true ? _GLF_IDENTITY(1 << _GLF_IDENTITY(_GLF_IDENTITY(int(6), 0 ^ (int(6))), _GLF_IDENTITY(int(6), (int(6)) - 0)), (_GLF_TRUE(_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, (true) || false)))), (injectionSwitch.x < injectionSwitch.y)) ? 1 << _GLF_IDENTITY(int(6), int(_GLF_IDENTITY(6, (_GLF_IDENTITY(6, (6) >> 0)) * 1))) : _GLF_FUZZED((+ _injected_loop_counter)))) : _GLF_FUZZED(88455)))), _GLF_IDENTITY((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(6), int(6)), (true ? _GLF_IDENTITY(1 << _GLF_IDENTITY(int(6), int(6)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 1 << _GLF_IDENTITY(int(6), int(6)) : _GLF_FUZZED((+ _injected_loop_counter)))) : _GLF_FUZZED(88455)))), ((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(6)) + 0)), (true ? _GLF_IDENTITY(1 << _GLF_IDENTITY(int(6), int(6)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 1 << _GLF_IDENTITY(int(6), int(6)) : _GLF_FUZZED((+ _injected_loop_counter)))) : _GLF_FUZZED(88455))))) | ((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(6), int(6)), (true ? _GLF_IDENTITY(1 << _GLF_IDENTITY(int(6), int(6)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 1 << _GLF_IDENTITY(int(6), int(6)) : _GLF_FUZZED((+ _injected_loop_counter)))) : _GLF_FUZZED(88455)))))))) >> _GLF_IDENTITY(int(6), int(_GLF_IDENTITY(_GLF_IDENTITY(6, clamp(_GLF_IDENTITY(6, int(ivec2(6, int(_GLF_ZERO(_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-9.7)), float(0.0), bool(true))), injectionSwitch.x))))), 6, 6)), ~ (~ (_GLF_IDENTITY(6, clamp(_GLF_IDENTITY(6, int(ivec2(6, int(_GLF_ZERO(0.0, injectionSwitch.x))))), 6, 6)))))))), _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(2.2, 9.0)) : injectionSwitch)).y)) && (_injected_loop_counter < ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(6, _GLF_IDENTITY((6), _GLF_IDENTITY(int(ivec3((6), 0, 0)), (int(ivec3((6), 0, 0))) | 0)) ^ 0)), int(6))))), false, false), bvec3(bvec4(bvec3(_GLF_IDENTITY(_injected_loop_counter < (_GLF_IDENTITY((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(6), int(6)), (true ? _GLF_IDENTITY(1 << _GLF_IDENTITY(int(6), int(6)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 1 << _GLF_IDENTITY(int(6), int(6)) : _GLF_FUZZED((+ _injected_loop_counter)))) : _GLF_FUZZED(_GLF_IDENTITY(88455, (-50179 & 0) + (_GLF_IDENTITY(88455, max(88455, 88455)))))))), min((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(6), int(6)), (true ? _GLF_IDENTITY(1 << _GLF_IDENTITY(int(6), int(_GLF_IDENTITY(6, clamp(6, _GLF_IDENTITY(6, ~ (~ (6))), 6)))), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 1 << _GLF_IDENTITY(int(6), int(6)) : _GLF_FUZZED((+ _injected_loop_counter)))) : _GLF_FUZZED(88455)))), _GLF_IDENTITY((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(6), int(6)), (true ? _GLF_IDENTITY(1 << _GLF_IDENTITY(int(6), int(6)), (_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), true && ((injectionSwitch.x < injectionSwitch.y)))) ? _GLF_IDENTITY(1 << _GLF_IDENTITY(int(6), int(6)), (1 << _GLF_IDENTITY(int(6), int(6))) ^ 0) : _GLF_FUZZED((+ _injected_loop_counter)))) : _GLF_FUZZED(88455)))), ((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(6), int(6)), (true ? _GLF_IDENTITY(1 << _GLF_IDENTITY(_GLF_IDENTITY(int(6), max(int(6), int(6))), int(6)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 1 << _GLF_IDENTITY(int(6), int(6)) : _GLF_FUZZED((+ _injected_loop_counter)))) : _GLF_FUZZED(88455))))) | ((_GLF_IDENTITY(1 << _GLF_IDENTITY(_GLF_IDENTITY(int(6), (int(6)) << 0), _GLF_IDENTITY(int(_GLF_IDENTITY(6, 0 + (_GLF_IDENTITY(6, (false ? _GLF_FUZZED(_injected_loop_counter) : 6))))), clamp(int(_GLF_IDENTITY(6, 0 + (_GLF_IDENTITY(6, (false ? _GLF_FUZZED(_injected_loop_counter) : 6))))), int(_GLF_IDENTITY(6, 0 + (_GLF_IDENTITY(6, (false ? _GLF_FUZZED(_injected_loop_counter) : 6))))), _GLF_IDENTITY(int(_GLF_IDENTITY(6, 0 + (_GLF_IDENTITY(6, (false ? _GLF_FUZZED(_injected_loop_counter) : 6))))), (int(_GLF_IDENTITY(6, 0 + (_GLF_IDENTITY(6, (false ? _GLF_FUZZED(_injected_loop_counter) : 6)))))) | (int(_GLF_IDENTITY(6, 0 + (_GLF_IDENTITY(6, (false ? _GLF_FUZZED(_injected_loop_counter) : 6)))))))))), (true ? _GLF_IDENTITY(1 << _GLF_IDENTITY(int(6), int(6)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 1 << _GLF_IDENTITY(int(6), int(6)) : _GLF_FUZZED((+ _injected_loop_counter)))) : _GLF_FUZZED(88455)))))))) >> _GLF_IDENTITY(int(6), int(_GLF_IDENTITY(_GLF_IDENTITY(6, clamp(_GLF_IDENTITY(6, int(ivec2(6, int(_GLF_ZERO(0.0, injectionSwitch.x))))), 6, 6)), ~ (~ (_GLF_IDENTITY(6, clamp(_GLF_IDENTITY(6, int(ivec2(6, int(_GLF_ZERO(0.0, injectionSwitch.x))))), 6, 6)))))))), _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(2.2, 9.0)) : _GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)))).y)) && _GLF_IDENTITY((_injected_loop_counter < ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(6, (6) ^ 0)), int(6)))), ! (! ((_injected_loop_counter < ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(6, (6) ^ 0)), int(6)))))))), false, false), true))), _GLF_IDENTITY(bvec3(bvec3(bvec3(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6))), false, false))), bvec3(bvec4(bvec3(bvec3(bvec3(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), ~ (~ (int(6))))), (_GLF_IDENTITY(_GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), ~ (~ (int(6))))), 0 | (_GLF_IDENTITY(_GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), ~ (~ (_GLF_IDENTITY(int(6), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-89818) : int(6))))))), ~ (~ (_GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), ~ (~ (int(6))))))))))) | (_GLF_IDENTITY(_GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), ~ (~ (int(6))))), (true ? _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), ~ (~ (int(6))))) : _GLF_FUZZED(_injected_loop_counter)))))), false, false))), false))))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), ! (! (_GLF_IDENTITY(! (bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(6), (int(6)) ^ 0), int(_GLF_IDENTITY(6, clamp(_GLF_IDENTITY(6, int(ivec2(6, _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), max(int(_GLF_ZERO(0.0, injectionSwitch.x)), int(_GLF_ZERO(0.0, injectionSwitch.x))))))), 6, 6))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_injected_loop_counter < ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), (_GLF_IDENTITY(int(6), int(6))) >> 0)) >> _GLF_IDENTITY(int(_GLF_IDENTITY(6, (6) ^ _GLF_IDENTITY(0, (0) | 0))), int(6))))), false, false), _GLF_IDENTITY(bvec3(bvec3(bvec3(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), min(int(6), int(6))))) >> _GLF_IDENTITY(int(6), int(6))), false, false))), bvec3(bvec4(bvec3(bvec3(_GLF_IDENTITY(bvec3(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(_GLF_IDENTITY(int(6), ~ (~ (int(6)))), ~ (~ (_GLF_IDENTITY(int(6), ~ (~ (_GLF_IDENTITY(int(6), min(int(6), int(6))))))))))), false, false), bvec3(bvec3(bvec3(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(6, min(_GLF_IDENTITY(6, (6) | (6)), 6))), _GLF_IDENTITY(int(6), ~ (~ (int(6)))))), false, false)))))), false)))))), (! (bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_injected_loop_counter < (_GLF_IDENTITY((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(6), int(6)), (_GLF_IDENTITY(true ? _GLF_IDENTITY(1 << _GLF_IDENTITY(int(6), int(6)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 1 << _GLF_IDENTITY(int(_GLF_IDENTITY(6, max(6, _GLF_IDENTITY(6, clamp(6, 6, _GLF_IDENTITY(6, (6) | (6))))))), int(6)) : _GLF_FUZZED((_GLF_IDENTITY(+ _injected_loop_counter, (+ _injected_loop_counter) | (+ _injected_loop_counter)))))) : _GLF_FUZZED(88455), (true ? _GLF_IDENTITY(1 << _GLF_IDENTITY(int(6), int(6)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 1 << _GLF_IDENTITY(int(_GLF_IDENTITY(6, _GLF_IDENTITY(max(6, _GLF_IDENTITY(6, clamp(6, 6, _GLF_IDENTITY(6, (6) | (6))))), clamp(max(6, _GLF_IDENTITY(6, clamp(6, 6, _GLF_IDENTITY(6, (6) | (6))))), max(6, _GLF_IDENTITY(6, clamp(6, 6, _GLF_IDENTITY(6, (6) | (6))))), max(6, _GLF_IDENTITY(6, clamp(6, 6, _GLF_IDENTITY(6, (6) | (6))))))))), int(6)) : _GLF_FUZZED((_GLF_IDENTITY(+ _injected_loop_counter, (+ _injected_loop_counter) | (+ _injected_loop_counter)))))) : _GLF_FUZZED(88455)) / 1)))), _GLF_IDENTITY(min((_GLF_IDENTITY(_GLF_IDENTITY(1, 1 * (1)) << _GLF_IDENTITY(int(6), int(6)), (true ? _GLF_IDENTITY(1 << _GLF_IDENTITY(int(6), int(6)), (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 1 << _GLF_IDENTITY(int(6), int(6)) : _GLF_FUZZED((+ _injected_loop_counter)), min(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 1 << _GLF_IDENTITY(int(6), int(6)) : _GLF_FUZZED((+ _injected_loop_counter)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 1 << _GLF_IDENTITY(int(6), int(6)) : _GLF_FUZZED((+ _injected_loop_counter)))))) : _GLF_FUZZED(88455)))), _GLF_IDENTITY((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(6), int(6)), (true ? _GLF_IDENTITY(1 << _GLF_IDENTITY(int(6), int(6)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 1 << _GLF_IDENTITY(int(6), int(6)) : _GLF_FUZZED(_GLF_IDENTITY((+ _injected_loop_counter), ((+ _injected_loop_counter)) + 0)))) : _GLF_FUZZED(88455)))), ((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(6), int(6)), (true ? _GLF_IDENTITY(1 << _GLF_IDENTITY(_GLF_IDENTITY(int(6), ~ (~ (int(6)))), int(_GLF_IDENTITY(6, (6) << 0))), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 1 << _GLF_IDENTITY(int(6), int(6)) : _GLF_FUZZED((+ _injected_loop_counter)))) : _GLF_FUZZED(88455))))) | ((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(6), int(6)), (true ? _GLF_IDENTITY(1 << _GLF_IDENTITY(int(6), int(6)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 1 << _GLF_IDENTITY(int(6), int(6)) : _GLF_FUZZED((+ _injected_loop_counter)))) : _GLF_FUZZED(88455))))))), (min((_GLF_IDENTITY(_GLF_IDENTITY(1, 1 * (1)) << _GLF_IDENTITY(int(6), int(6)), (true ? _GLF_IDENTITY(1 << _GLF_IDENTITY(int(6), int(6)), (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 1 << _GLF_IDENTITY(int(6), int(6)) : _GLF_FUZZED((+ _injected_loop_counter)), min(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 1 << _GLF_IDENTITY(int(6), int(6)) : _GLF_FUZZED((+ _injected_loop_counter)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 1 << _GLF_IDENTITY(int(6), int(6)) : _GLF_FUZZED((+ _injected_loop_counter)))))) : _GLF_FUZZED(88455)))), _GLF_IDENTITY((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(6), int(6)), (true ? _GLF_IDENTITY(1 << _GLF_IDENTITY(int(6), int(6)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 1 << _GLF_IDENTITY(int(6), int(6)) : _GLF_FUZZED(_GLF_IDENTITY((+ _injected_loop_counter), ((+ _injected_loop_counter)) + 0)))) : _GLF_FUZZED(88455)))), ((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(6), int(6)), (true ? _GLF_IDENTITY(1 << _GLF_IDENTITY(_GLF_IDENTITY(int(6), ~ (~ (int(6)))), int(_GLF_IDENTITY(6, (6) << 0))), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 1 << _GLF_IDENTITY(int(6), int(6)) : _GLF_FUZZED((+ _injected_loop_counter)))) : _GLF_FUZZED(88455))))) | ((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(6), int(6)), (true ? _GLF_IDENTITY(1 << _GLF_IDENTITY(int(6), int(6)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 1 << _GLF_IDENTITY(int(6), int(6)) : _GLF_FUZZED((+ _injected_loop_counter)))) : _GLF_FUZZED(88455)))))))) << 0)) >> _GLF_IDENTITY(int(6), int(_GLF_IDENTITY(_GLF_IDENTITY(6, clamp(_GLF_IDENTITY(6, int(ivec2(6, int(_GLF_ZERO(0.0, injectionSwitch.x))))), 6, 6)), ~ (~ (_GLF_IDENTITY(6, clamp(_GLF_IDENTITY(_GLF_IDENTITY(6, clamp(6, 6, 6)), int(ivec2(6, int(_GLF_ZERO(0.0, injectionSwitch.x))))), 6, 6)))))))), _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(2.2, _GLF_IDENTITY(9.0, float(mat3x4(9.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, exp(0.0), 1.0, 0.0, 0.0, 1.0))))) : injectionSwitch)).y)) && (_injected_loop_counter < ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(6, (6) ^ 0)), int(6))))), false, false), bvec3(bvec4(bvec3(_GLF_IDENTITY(_injected_loop_counter < (_GLF_IDENTITY((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(6), int(6)), (true ? _GLF_IDENTITY(1 << _GLF_IDENTITY(int(6), int(6)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 1 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(6)) + (0 & -53710))) : _GLF_FUZZED((+ _injected_loop_counter)))) : _GLF_FUZZED(88455)))), min((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(6), int(6)), (true ? _GLF_IDENTITY(_GLF_IDENTITY(1 << _GLF_IDENTITY(int(6), int(6)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 1 << _GLF_IDENTITY(int(6), int(6)) : _GLF_IDENTITY(_GLF_FUZZED((+ _injected_loop_counter)), clamp(_GLF_FUZZED((+ _injected_loop_counter)), _GLF_FUZZED((+ _injected_loop_counter)), _GLF_FUZZED((+ _injected_loop_counter)))))), (_GLF_IDENTITY(_GLF_IDENTITY(1 << _GLF_IDENTITY(int(6), int(6)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 1 << _GLF_IDENTITY(int(6), int(6)) : _GLF_IDENTITY(_GLF_FUZZED((+ _injected_loop_counter)), clamp(_GLF_FUZZED((+ _injected_loop_counter)), _GLF_FUZZED((+ _injected_loop_counter)), _GLF_FUZZED((+ _injected_loop_counter)))))), (_GLF_IDENTITY(1 << _GLF_IDENTITY(int(6), int(6)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 1 << _GLF_IDENTITY(int(6), int(6)) : _GLF_IDENTITY(_GLF_FUZZED((+ _injected_loop_counter)), clamp(_GLF_FUZZED((+ _injected_loop_counter)), _GLF_FUZZED((+ _injected_loop_counter)), _GLF_FUZZED((+ _injected_loop_counter))))))) / 1)) >> 0) : _GLF_FUZZED(88455)))), _GLF_IDENTITY((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(6), int(6)), (true ? _GLF_IDENTITY(1 << _GLF_IDENTITY(int(6), int(6)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 1 << _GLF_IDENTITY(int(6), int(6)) : _GLF_FUZZED((+ _injected_loop_counter)))) : _GLF_FUZZED(88455)))), ((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(6), int(6)), (true ? _GLF_IDENTITY(_GLF_IDENTITY(1, (1) - int(_GLF_ZERO(0.0, injectionSwitch.x))) << _GLF_IDENTITY(_GLF_IDENTITY(int(6), 1 * (int(6))), int(6)), (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_IDENTITY(bool(bvec3(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, bool(bvec2(_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (injectionSwitch.x < injectionSwitch.y) || false), true))))), false, false)), false || _GLF_IDENTITY((bool(bvec3(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, false))), ((bool(bvec3(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, false)))) && true))) ? 1 << _GLF_IDENTITY(int(6), int(6)) : _GLF_FUZZED((+ _injected_loop_counter)))) : _GLF_FUZZED(88455))))) | ((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(6), int(6)), (true ? _GLF_IDENTITY(1 << _GLF_IDENTITY(_GLF_IDENTITY(int(6), _GLF_IDENTITY(int(int(int(6))), max(int(int(int(6))), int(int(int(6)))))), int(6)), (_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, false || (injectionSwitch.x < injectionSwitch.y)))) ? 1 << _GLF_IDENTITY(int(6), int(6)) : _GLF_FUZZED((+ _injected_loop_counter)))) : _GLF_FUZZED(88455)))))))) >> _GLF_IDENTITY(int(6), int(_GLF_IDENTITY(_GLF_IDENTITY(6, _GLF_IDENTITY(clamp(_GLF_IDENTITY(6, int(ivec2(6, int(_GLF_ZERO(0.0, injectionSwitch.x))))), 6, 6), ~ (_GLF_IDENTITY(~ _GLF_IDENTITY((clamp(_GLF_IDENTITY(6, int(ivec2(6, int(_GLF_ZERO(0.0, injectionSwitch.x))))), 6, 6)), min((clamp(_GLF_IDENTITY(6, int(ivec2(6, int(_GLF_ZERO(0.0, injectionSwitch.x))))), 6, 6)), _GLF_IDENTITY((clamp(_GLF_IDENTITY(6, int(ivec2(6, int(_GLF_ZERO(0.0, injectionSwitch.x))))), 6, 6)), ((clamp(_GLF_IDENTITY(6, int(ivec2(6, int(_GLF_ZERO(0.0, injectionSwitch.x))))), 6, 6))) - 0))), (~ (clamp(_GLF_IDENTITY(6, int(ivec2(6, int(_GLF_ZERO(0.0, injectionSwitch.x))))), 6, 6))) * 1)))), ~ (~ (_GLF_IDENTITY(6, clamp(_GLF_IDENTITY(_GLF_IDENTITY(6, (false ? _GLF_FUZZED(_injected_loop_counter) : 6)), int(ivec2(6, int(_GLF_ZERO(0.0, injectionSwitch.x))))), 6, 6)))))))), _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(false, (false) && true) ? _GLF_FUZZED(vec2(2.2, 9.0)) : injectionSwitch)).y)) && (_injected_loop_counter < ((1 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (true ? _GLF_IDENTITY(_GLF_IDENTITY(int(6), (true ? int(6) : _GLF_FUZZED((49893 ^ _injected_loop_counter)))), min(int(6), int(6))) : _GLF_FUZZED(-4518))))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(6, (6) ^ 0)), int(6))))), false, false), true))), _GLF_IDENTITY(bvec3(bvec3(bvec3(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6))), false, false))), bvec3(bvec4(bvec3(bvec3(bvec3(_injected_loop_counter < (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), ~ (~ (int(6))))), (_GLF_IDENTITY(_GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), ~ (~ (int(6))))), 0 | (_GLF_IDENTITY(_GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), ~ (~ (int(6))))), ~ (~ (_GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), ~ (~ (int(6))))))))))) | (_GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), ~ (~ (int(6))))))), ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), ~ (~ (int(6))))), (_GLF_IDENTITY(_GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), ~ (~ (int(6))))), 0 | (_GLF_IDENTITY(_GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), ~ (~ (int(6))))), ~ (~ (_GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), ~ (~ (int(6))))))))))) | (_GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), ~ (~ (int(6)))))))) | (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), ~ (~ (int(6))))), (_GLF_IDENTITY(_GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), ~ (~ (int(6))))), 0 | (_GLF_IDENTITY(_GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), ~ (~ (int(6))))), ~ (~ (_GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), ~ (~ (int(6))))))))))) | (_GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), ~ (~ (int(6))))))), int(_GLF_IDENTITY(ivec4(_GLF_IDENTITY(_GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), ~ (~ (int(6))))), (_GLF_IDENTITY(_GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), ~ (~ (int(6))))), 0 | (_GLF_IDENTITY(_GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), ~ (~ (int(6))))), ~ (~ (_GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), ~ (~ (int(6))))))))))) | (_GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), ~ (~ (int(6))))))), 1, 0, 0), ~ (~ (ivec4(_GLF_IDENTITY(_GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), ~ (~ (int(6))))), (_GLF_IDENTITY(_GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), ~ (~ (int(6))))), 0 | (_GLF_IDENTITY(_GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), ~ (~ (int(6))))), ~ (~ (_GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), ~ (~ (int(6))))))))))) | (_GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), ~ (~ (int(6))))))), 1, 0, 0)))))), clamp(_GLF_IDENTITY((1 << _GLF_IDENTITY(int(6), int(6))), max((1 << _GLF_IDENTITY(int(6), int(6))), (1 << _GLF_IDENTITY(int(6), int(6))))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(6), _GLF_IDENTITY(int(_GLF_IDENTITY(6, (6) ^ 0)), ~ (~ (int(6))))), (_GLF_IDENTITY(_GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), ~ (~ (int(6))))), 0 | (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(6), ~ (~ (int(6)))), _GLF_IDENTITY(int(6), ~ (~ (int(6))))), ~ (~ (_GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), ~ (~ (int(6))))))))))) | _GLF_IDENTITY((_GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), ~ (~ (int(6)))))), max(_GLF_IDENTITY((_GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), ~ (~ (int(6)))))), min((_GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), ~ (~ (int(6)))))), (_GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), ~ (~ (int(6)))))))), (_GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), ~ (~ (int(6))))))))), (1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), ~ (~ (int(6))))), (_GLF_IDENTITY(_GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), ~ (~ (int(6))))), 0 | (_GLF_IDENTITY(_GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), ~ (~ (int(6))))), ~ (~ (_GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), ~ (~ (int(6))))))))))) | (_GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), ~ (~ (_GLF_IDENTITY(int(6), int(int(int(6)))))))))), (1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), _GLF_IDENTITY(~ (~ (int(6))), max(~ (~ (int(6))), ~ (~ (int(6))))))), (_GLF_IDENTITY(_GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), ~ (_GLF_IDENTITY(~ (int(6)), (true ? ~ (int(6)) : _GLF_FUZZED(_injected_loop_counter)))))), 0 | (_GLF_IDENTITY(_GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), ~ _GLF_IDENTITY((~ (int(6))), (false ? _GLF_FUZZED((++ _injected_loop_counter)) : (~ (int(6))))))), ~ (~ (_GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), ~ (~ (int(6))))))))))) | (_GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), ~ (_GLF_IDENTITY(~ (int(6)), clamp(~ (int(6)), ~ (int(6)), ~ (int(6)))))))))))))), false, false))), false))))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(_GLF_IDENTITY(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))))))), ! (! (bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), (_GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(548.136)), float(_GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0), injectionSwitch.y))), bool(true)))))), ! (! (bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), ! (! (_GLF_IDENTITY(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (_GLF_IDENTITY(! (bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (! (bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) || false))))))) && true), false, true)))))))
        return;
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
      }
     else
      {
      }
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, false || (false))) || false)))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x)), injectionSwitch.x)) > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y))), clamp(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y))), _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y))), _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y))))).y))), true && (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(1.0 * (injectionSwitch.x), (1.0 * (injectionSwitch.x)) + tan(0.0))), injectionSwitch.x)) > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(209.557, 37.48)) : injectionSwitch))) / vec2(1.0, 1.0))) / vec2(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y))), _GLF_IDENTITY(clamp(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y))), _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y))), vec2(1.0, 1.0) * (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y))), vec2(0.0, 0.0) + (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), min(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), (true ? _GLF_ONE(1.0, injectionSwitch.y) : _GLF_FUZZED(8.2))), _GLF_ONE(1.0, injectionSwitch.y))), _GLF_ONE(1.0, injectionSwitch.y)))))))), vec2(mat3(clamp(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y))), _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y))), _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y)))), 1.0, 0.0, 0.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0)))).y))))))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, _GLF_IDENTITY((false) || false, bool(_GLF_IDENTITY(bool(_GLF_IDENTITY((false) || false, ! (! ((false) || false)))), (bool(_GLF_IDENTITY((false) || false, ! (! ((false) || false))))) && true))))))))
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
         barrier();
        }
      }
     return;
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, int(ivec2(_GLF_IDENTITY(_injected_loop_counter, 1 * (_injected_loop_counter)), 1))) < (_GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(-49892 & 0, 0 + (-49892 & 0)))) & (_GLF_IDENTITY(1 ^ 0, (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, float(_GLF_IDENTITY(vec2(injectionSwitch.y, 0.0), (false ? _GLF_FUZZED(injectionSwitch) : vec2(injectionSwitch.y, 0.0))))), injectionSwitch.y, injectionSwitch.y)))) ? _GLF_IDENTITY(_GLF_FUZZED(-68003), clamp(_GLF_FUZZED(-68003), _GLF_IDENTITY(_GLF_FUZZED(-68003), int(_GLF_ONE(1.0, injectionSwitch.y)) * (_GLF_FUZZED(-68003))), _GLF_FUZZED(-68003))) : 1 ^ 0))))); _injected_loop_counter ++)
      {
       barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if(_GLF_DEAD(false))
      return;
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (((1 | 0) << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0)))); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(2265.0807)), bool(false))) > injectionSwitch.y)), (bool(bool(injectionSwitch.x > injectionSwitch.y))) || false))))))
        return;
      }
    }
   if(_GLF_DEAD(false))
    barrier();
   do
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)))
      {
      }
     else
      {
       barrier();
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(4.4)), float(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x))))), bool(true))) > injectionSwitch.y))));
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      return;
     barrier();
     if(_GLF_DEAD(false))
      return;
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      return;
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > 0, ! (! (_GLF_IDENTITY(_injected_loop_counter > 0, (_injected_loop_counter > 0) && true))))); _injected_loop_counter --)
      {
       return;
       if(_GLF_DEAD(false))
        barrier();
      }
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
    {
     for(int _injected_loop_counter = (int(_GLF_ZERO(_GLF_IDENTITY(0.0, float(_GLF_IDENTITY(mat4x3(0.0, sqrt(cos(0.0)), 1.0, 1.0, 0.0, cos(0.0), 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, log(1.0), sqrt(1.0)), transpose(transpose(mat4x3(0.0, sqrt(cos(0.0)), 1.0, 1.0, 0.0, cos(0.0), 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, log(1.0), sqrt(1.0))))))), injectionSwitch.x)) << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (int(0)) | 0))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       barrier();
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 uint workgroup_base = _GLF_IDENTITY(workgroup_size, (false ? _GLF_FUZZED(num_workgroup) : workgroup_size)) * workgroup_id;
 uint subgroup_base = subgroup_id * subgroup_size;
 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (true)))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
      barrier();
     do
      {
       return;
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 & 2120)); _injected_loop_counter --)
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)))))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
      }
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        barrier();
       do
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) && true)));
       barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
   if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false)))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (! (false)))))))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        return;
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(false))
        return;
       barrier();
       if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true)), (! (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))) && true))))
        {
         if(_GLF_DEAD(false))
          return;
         return;
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         return;
        }
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
       return;
       if(_GLF_DEAD(false))
        return;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(false, (false) && true) ? _GLF_FUZZED(vec2(-6778.8782, -87.97)) : injectionSwitch)).y))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bool((injectionSwitch.x > injectionSwitch.y)))))))
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
        return;
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec4(true, false, _GLF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec3(true, true, false), _GLF_IDENTITY(bvec3(bvec3(bvec3(true, true, false))), bvec3(bvec4(bvec3(bvec3(bvec3(true, true, false))), false)))))), ! (! (true))), (injectionSwitch.x < injectionSwitch.y)), false)), _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec4(bool(bvec4(true, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)), false, false, false)), bool(bvec4(bool(bvec4(bool(bvec4(true, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)), false, false, false)), false, true, false))), ! (_GLF_IDENTITY(! (bool(bvec4(bool(bvec4(true, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)), false, false, false))), (_GLF_IDENTITY(! (bool(bvec4(bool(bvec4(true, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)), _GLF_IDENTITY(false, (false) || false), false, false))), (_GLF_IDENTITY(! (bool(bvec4(bool(bvec4(true, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)), false, false, false))), false || (! (bool(bvec4(bool(bvec4(true, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)), false, false, false)))))) || false)) || false))))), (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
        {
         if(_GLF_DEAD(false))
          return;
         barrier();
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         return;
        }
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, _GLF_FALSE(_GLF_IDENTITY(false, (false) || false), (_GLF_IDENTITY(injectionSwitch.x, float(mat4(injectionSwitch.x, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, round(length(normalize(1.0))), 1.0, determinant(mat4(1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, determinant(mat4(1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0)), 0.0, 1.0)), 0.0, 1.0, 0.0))) > injectionSwitch.y)), true)))))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
              continue;
             barrier();
            }
           do
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec4(bvec2(false, false), false, true)))))))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y))))))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    return;
                   barrier();
                  }
                 return;
                }
               return;
              }
             else
              {
               if(_GLF_DEAD(false))
                return;
              }
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
          }
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           return;
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
      }
     else
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
          barrier();
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            return;
           barrier();
          }
         if(_GLF_DEAD(false))
          return;
         return;
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        return;
      }
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && ((false)))))))
      {
      }
     else
      {
       return;
      }
    }
  }
 else
  {
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
      return;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       barrier();
       if(_GLF_DEAD(false))
        return;
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec2(true, false)), false || _GLF_IDENTITY((bool(bvec2(true, false))), bool(bool((bool(bvec2(true, false))))))))))
      {
       if(_GLF_DEAD(false))
        return;
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              return;
            }
           if(_GLF_DEAD(false))
            break;
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              break;
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               do
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  continue;
                 return;
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             else
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                return;
              }
            }
           else
            {
             if(_GLF_DEAD(false))
              return;
            }
          }
        }
       do
        {
         return;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     else
      {
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true)))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
    }
   else
    {
     barrier();
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
   for(int _injected_loop_counter = (int(_GLF_ZERO(0.0, injectionSwitch.x)) << _GLF_IDENTITY(_GLF_IDENTITY(int(3), int(3)), (_GLF_IDENTITY(int(3), int(3))) | 0)); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != 1, ! (! (_injected_loop_counter != 1)))); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        continue;
       continue;
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, true && (false)), false), bvec2(bvec2(bvec2(_GLF_IDENTITY(false, true && (false)), false))))))))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                barrier();
               continue;
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                continue;
              }
             barrier();
             if(_GLF_DEAD(false))
              break;
             if(_GLF_DEAD(false))
              barrier();
            }
           do
            {
             do
              {
               if(_GLF_DEAD(false))
                barrier();
               return;
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))));
           if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec4((injectionSwitch.x > injectionSwitch.y), true, true, false))))))
            return;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         do
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            return;
           barrier();
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(false))
            break;
          }
         while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bvec4(false, false, false, _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), injectionSwitch)).y)))))));
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_DEAD(false))
          return;
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      break;
     if(_GLF_DEAD(false))
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false)))))))
        break;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
       if(_GLF_DEAD(false))
        return;
       barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
        break;
       if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y), bool(_GLF_IDENTITY(bool((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y)), ! (! (bool((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y))))))))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         barrier();
        }
      }
     if(_GLF_DEAD(false))
      break;
     if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
      break;
    }
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bool(false))))))) && true)))
  {
   if(_GLF_DEAD(false))
    return;
   barrier();
  }
 uint virtual_gid = _GLF_IDENTITY(workgroup_base, min(workgroup_base, _GLF_IDENTITY(workgroup_base, (true ? workgroup_base : _GLF_FUZZED(_GLF_IDENTITY(workgroup_id, 0u | (workgroup_id))))))) + subgroup_base + subgroup_local_id;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))))
    barrier();
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true)) && true))) && true)))))) || false))
        {
         if(_GLF_DEAD(false))
          return;
         barrier();
        }
       barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         return;
        }
      }
     return;
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec2(false, false))), bool(bvec4(_GLF_IDENTITY(false, bool(bvec2(false, false))), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))
    {
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    return;
   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), (_GLF_WRAPPED_IF_TRUE(true)) && _GLF_IDENTITY(true, ! (! (true)))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       do
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
   else
    {
    }
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
  return;
 for(int _injected_loop_counter = (ivec2(_GLF_IDENTITY(-72292, ~ _GLF_IDENTITY((~ (-72292)), clamp((~ (-72292)), (~ (-72292)), (~ (-72292))))), -33416).g & 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY((1 | 0), max((1 | 0), (1 | 0)))); _injected_loop_counter ++)
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, false, true)))))
        return;
      }
     else
      {
      }
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x, (false ? _GLF_FUZZED(roundEven(1.8)) : injectionSwitch.x)) > injectionSwitch.y), ((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x, (false ? _GLF_FUZZED(roundEven(1.8)) : injectionSwitch.x)) > injectionSwitch.y)) || false)), (_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x, (false ? _GLF_FUZZED(roundEven(1.8)) : injectionSwitch.x)) > injectionSwitch.y), ((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x, (false ? _GLF_FUZZED(roundEven(1.8)) : injectionSwitch.x)) > injectionSwitch.y)) || false)), ! (! (_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x, (false ? _GLF_FUZZED(roundEven(1.8)) : injectionSwitch.x)) > injectionSwitch.y), ((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x, (false ? _GLF_FUZZED(roundEven(1.8)) : injectionSwitch.x)) > injectionSwitch.y)) || false)))))) || false), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), ! (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), max(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x))))) / abs(1.0)) > injectionSwitch.y)))), (! (_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(false, (false) || false))), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).x, min(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).x, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).x)) > injectionSwitch.y))))) || false), ! (! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), max(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x))))) / _GLF_IDENTITY(abs(1.0), mix(float(abs(1.0)), float(_GLF_FUZZED(-89.52)), bool(false)))) > injectionSwitch.y)))), (! (_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(false, (false) || false))), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).x, min(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).x, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).x)) > injectionSwitch.y))))) || false)))))))
      {
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             do
              {
               return;
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_DEAD(false))
                  break;
                 barrier();
                }
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  return;
                 return;
                }
               if(_GLF_DEAD(false))
                barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
          }
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
       do
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bool(bvec2(bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true))))))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         return;
        }
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(vec4(injectionSwitch.y, 0.0, 0.0, determinant(mat2(1.0, tan(0.0), 0.0, 1.0)))))))))
      {
       if(_GLF_DEAD(false))
        continue;
       break;
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
      continue;
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, false, true)))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
         barrier();
        }
       break;
      }
     atomicStore(write_val, _GLF_IDENTITY(uint(virtual_gid), (uint(virtual_gid)) + 0u), 4, 64, 0);
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            barrier();
           return;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
          }
         else
          {
          }
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           do
            {
             if(_GLF_DEAD(false))
              continue;
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat2x4(injectionSwitch, tan(0.0), 1.0, 0.0, 1.0, 0.0, 1.0), transpose(transpose(_GLF_IDENTITY(mat2x4(injectionSwitch, tan(0.0), 1.0, 0.0, 1.0, 0.0, 1.0), (mat2x4(injectionSwitch, tan(0.0), 1.0, 0.0, 1.0, 0.0, 1.0)) * mat2(1.0))))))).y))));
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))))
          return;
         continue;
        }
       if(_GLF_DEAD(false))
        return;
      }
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, ~ (_GLF_IDENTITY(~ (_injected_loop_counter), min(~ (_injected_loop_counter), _GLF_IDENTITY(~ (_injected_loop_counter), min(~ (_injected_loop_counter), ~ (_injected_loop_counter))))))) != 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        {
         do
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
            return;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))))
          break;
        }
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      continue;
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
        continue;
       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), (_GLF_WRAPPED_IF_TRUE(true)) && true)) || false))))
        {
         barrier();
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_DEAD(false))
          break;
        }
       else
        {
        }
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))
        return;
      }
     if(_GLF_DEAD(false))
      continue;
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       barrier();
      }
     else
      {
      }
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(false)))))
  {
   if(_GLF_DEAD(false))
    barrier();
   return;
  }
 uint read_val = atomicLoad(write_val, _GLF_IDENTITY(4, 0 ^ (4)), 64, 0);
 if(_GLF_DEAD(false))
  return;
 for(int _injected_loop_counter = (((_GLF_IDENTITY((1 << _GLF_IDENTITY(int(3), int(3))), ((1 << _GLF_IDENTITY(int(3), int(3)))) / int(_GLF_ONE(1.0, injectionSwitch.y))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(3), int(3)), int(int(_GLF_IDENTITY(int(3), int(3)))))) << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2))); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, log(vec2(1.0, 1.0)) + (_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)))).x))); _injected_loop_counter --)
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false)))))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).x > injectionSwitch.y)))))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
         do
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           else
            {
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              continue;
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
           if(_GLF_DEAD(false))
            break;
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             return;
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              return;
             barrier();
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
         continue;
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          break;
         do
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       else
        {
         return;
        }
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        return;
      }
    }
   if(_GLF_DEAD(false))
    continue;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      break;
     if(_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))))), true && (_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))))), bool(bvec4(bool(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))))), true, false, true))))))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      continue;
     barrier();
    }
   if(_GLF_DEAD(false))
    break;
  }
 if(_GLF_DEAD(false))
  barrier();
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), (false) || false)))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          continue;
         continue;
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         do
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                {
                 if(_GLF_DEAD(false))
                  return;
                }
               if(_GLF_DEAD(false))
                barrier();
               do
                {
                 return;
                 if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || false)) || false)))
                  barrier();
                }
               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
              }
             else
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  continue;
                 if(_GLF_DEAD(false))
                  barrier();
                 continue;
                }
              }
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                continue;
               barrier();
              }
             if(_GLF_DEAD(false))
              return;
             if(_GLF_DEAD(false))
              barrier();
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              continue;
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(false))
                break;
               barrier();
              }
             return;
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       else
        {
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
       return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           barrier();
          }
         else
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false))))
              continue;
             if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true))))
              {
               if(_GLF_DEAD(false))
                return;
               barrier();
              }
             continue;
            }
          }
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch), mix(vec2((mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch))[0], _GLF_FUZZED(-261.530)), vec2(_GLF_FUZZED(-3.8), (mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch))[1]), bvec2(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))).x > _GLF_IDENTITY(injectionSwitch.y, (true ? _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(-3.5)), bool(false))) : _GLF_FUZZED((exp2(-6703.7548)))))))))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              continue;
             barrier();
            }
           if(_GLF_DEAD(false))
            continue;
          }
         else
          {
           return;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              continue;
             barrier();
            }
          }
         if(_GLF_DEAD(false))
          break;
        }
       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) && true)))), bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) && true)))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) && true))))), bool(bvec3(! (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) && true))))), false, false))))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)).x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0)))))
        {
         if(_GLF_DEAD(false))
          continue;
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 ^ 0)); _injected_loop_counter ++)
          {
           return;
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              continue;
             barrier();
            }
          }
        }
      }
    }
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(false, false || (false))))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 buf[virtual_gid] = uint(subgroupAllEqual(read_val));
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    break;
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1]))) * mat2(1.0)).y, float(mat2(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y, _GLF_IDENTITY(abs(1.0), min(abs(1.0), abs(1.0))), 1.0, 1.0)))) / 1.0), ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), bool(bvec4(! (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch))), (min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))) * mat2(1.0))).x > injectionSwitch.y), true, true, true)))))), bool(bool((_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1]))) * mat2(1.0)).y, float(mat2(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y, _GLF_IDENTITY(abs(1.0), min(abs(1.0), abs(1.0))), 1.0, 1.0)))) / 1.0), ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), bool(bvec4(! (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch))), (min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))) * mat2(1.0))).x > injectionSwitch.y), true, true, true))))))))))))
    {
     do
      {
       return;
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 1
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
