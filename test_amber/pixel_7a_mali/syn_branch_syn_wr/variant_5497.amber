#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_22 {
 mat4x3 _f0;
 bvec3 _f1;
 uvec4 _f2;
 vec3 _f3;
 vec3 _f4;
 ivec2 _f5;
} ;

struct _GLF_struct_21 {
 int _f0;
} ;

struct _GLF_struct_20 {
 uvec2 _f0;
} ;

struct _GLF_struct_19 {
 mat4x3 _f0;
 mat3 _f1;
 bool _f2;
 vec4 _f3;
 mat3x4 _f4;
 ivec4 _f5;
 bool _f6;
} ;

struct _GLF_struct_23 {
 bvec3 _f0;
 _GLF_struct_19 _f1;
 vec3 _f2;
 mat4x3 _f3;
 _GLF_struct_20 _f4;
 _GLF_struct_21 _f5;
 _GLF_struct_22 _f6;
} ;

struct _GLF_struct_17 {
 mat3x4 _f0;
 uvec3 _f1;
 bool _f2;
} ;

struct _GLF_struct_16 {
 mat2x4 _f0;
 vec2 _f1;
} ;

struct _GLF_struct_15 {
 mat3x2 _f0;
 uvec2 _f1;
 ivec3 _f2;
 bvec3 _f3;
 bvec2 _f4;
} ;

struct _GLF_struct_14 {
 mat2x3 _f0;
 mat3x2 _f1;
 mat3x2 _f2;
 uvec2 _f3;
 uvec4 _f4;
} ;

struct _GLF_struct_13 {
 mat2x4 _f0;
} ;

struct _GLF_struct_18 {
 _GLF_struct_13 _f0;
 _GLF_struct_14 _f1;
 _GLF_struct_15 _f2;
 _GLF_struct_16 _f3;
 _GLF_struct_17 _f4;
 mat2x4 _f5;
 mat3x4 _f6;
} ;

struct _GLF_struct_11 {
 vec4 _f0;
} ;

struct _GLF_struct_10 {
 uvec2 _f0;
 mat4x3 _f1;
 mat3x2 _f2;
} ;

struct _GLF_struct_12 {
 _GLF_struct_10 _f0;
 _GLF_struct_11 _f1;
} ;

struct _GLF_struct_24 {
 _GLF_struct_12 _f0;
 mat2 _f1;
 _GLF_struct_18 _f2;
 _GLF_struct_23 _f3;
 ivec2 _f4;
 uint workgroup_size;
} ;

struct _GLF_struct_7 {
 mat3 _f0;
 mat2 _f1;
 mat2x3 _f2;
 vec4 _f3;
 mat4x2 _f4;
} ;

struct _GLF_struct_6 {
 vec3 _f0;
 bvec2 _f1;
 mat3x4 _f2;
} ;

struct _GLF_struct_5 {
 mat4x2 _f0;
 ivec2 _f1;
 int _f2;
} ;

struct _GLF_struct_8 {
 mat3 _f0;
 _GLF_struct_5 _f1;
 mat3x4 _f2;
 uvec2 _f3;
 int _f4;
 _GLF_struct_6 _f5;
 _GLF_struct_7 _f6;
} ;

struct _GLF_struct_3 {
 ivec2 _f0;
 ivec3 _f1;
 mat3 _f2;
 int _f3;
 mat2x3 _f4;
 vec4 _f5;
 bvec2 _f6;
} ;

struct _GLF_struct_2 {
 uvec4 _f0;
 float _f1;
} ;

struct _GLF_struct_1 {
 mat2 _f0;
 vec2 _f1;
 mat3 _f2;
 mat4x3 _f3;
} ;

struct _GLF_struct_4 {
 _GLF_struct_1 _f0;
 _GLF_struct_2 _f1;
 uint subgroup_id;
 float _f2;
 bool _f3;
 mat4 _f4;
 _GLF_struct_3 _f5;
} ;

struct _GLF_struct_0 {
 bool _f0;
} ;

struct _GLF_struct_9 {
 _GLF_struct_0 _f0;
 mat3x4 _f1;
 _GLF_struct_4 _f2;
 mat2x4 _f3;
 _GLF_struct_8 _f4;
 bvec2 _f5;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 _GLF_struct_9 _GLF_struct_replacement_9 = _GLF_struct_9(_GLF_struct_0(true), mat3x4(1.0), _GLF_struct_4(_GLF_struct_1(_GLF_IDENTITY(mat2(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(-72.31) : 1.0))), mat2(mat2x4(_GLF_IDENTITY(_GLF_IDENTITY(mat2(1.0), mat2(mat2x4(mat2(1.0)))), (mat2(1.0)) * mat2(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), (_GLF_ONE(1.0, injectionSwitch.y)) - 0.0)))))), vec2(1.0), _GLF_IDENTITY(mat3(1.0), (_GLF_IDENTITY(false, true && (false)) ? _GLF_FUZZED(mat3(-91.98, -4.5, 725.740, -8.2, -9538.7059, 4.0, -84.47, -9.5, 6271.2508)) : mat3(1.0))), mat4x3(1.0)), _GLF_struct_2(uvec4(1u), 1.0), gl_SubgroupID, 1.0, _GLF_IDENTITY(true, false || (true)), mat4(1.0), _GLF_struct_3(ivec2(1), ivec3(_GLF_IDENTITY(1, ~ (~ (1)))), _GLF_IDENTITY(mat3(1.0), (_GLF_IDENTITY(mat3(1.0), transpose(transpose(mat3(1.0))))) - mat3(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))), 1, mat2x3(1.0), vec4(1.0), bvec2(true))), mat2x4(1.0), _GLF_struct_8(mat3(1.0), _GLF_struct_5(mat4x2(1.0), ivec2(1), _GLF_IDENTITY(1, (1) + 0)), mat3x4(_GLF_IDENTITY(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, max(1.0, 1.0))) * _GLF_ONE(1.0, injectionSwitch.y)), (_GLF_IDENTITY(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, _GLF_IDENTITY(max(1.0, 1.0), clamp(max(1.0, 1.0), max(1.0, 1.0), _GLF_IDENTITY(max(1.0, 1.0), (max(1.0, 1.0)) - 0.0))))) * _GLF_ONE(1.0, injectionSwitch.y)), float(mat3(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, max(1.0, 1.0))) * _GLF_ONE(1.0, injectionSwitch.y)), 1.0, 0.0, 1.0, cos(0.0), round(length(_GLF_IDENTITY(normalize(vec3(1.0, 1.0, 1.0)), vec3(mat3x2(_GLF_IDENTITY(normalize(vec3(1.0, 1.0, 1.0)), vec3(mat3x4(normalize(vec3(1.0, 1.0, 1.0)), 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0))), 0.0, 1.0, 0.0))))), 0.0, 0.0, 1.0)))) - 0.0)), uvec2(1u), 1, _GLF_struct_6(vec3(1.0), bvec2(true), mat3x4(1.0)), _GLF_struct_7(mat3(1.0), mat2(1.0), mat2x3(1.0), vec4(_GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat4(_GLF_IDENTITY(1.0, max(1.0, 1.0)), cos(0.0), exp(0.0), length(0.0), 0.0, _GLF_IDENTITY(1.0, max(1.0, _GLF_IDENTITY(1.0, (_GLF_IDENTITY(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-77.55))), max(1.0, 1.0))) + 0.0))), 1.0, 1.0, 0.0, sqrt(1.0), 1.0, 0.0, 1.0, 1.0, abs(0.0), 0.0)), (float(mat4(_GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, max(1.0, 1.0)), 1.0)), cos(0.0), exp(0.0), length(0.0), 0.0, 1.0, 1.0, 1.0, 0.0, sqrt(1.0), 1.0, 0.0, 1.0, 1.0, abs(0.0), 0.0))) / 1.0))), mat4x2(_GLF_IDENTITY(1.0, _GLF_IDENTITY((1.0) + 0.0, ((1.0) + 0.0) / 1.0))))), bvec2(true));
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), (int(3)) ^ 0)))); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  return;
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))), ! (! (bool(bool(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))))))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ((injectionSwitch.x < injectionSwitch.y)) || false))))
    {
     barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      barrier();
    }
   else
    {
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_DEAD(false), true, true))))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
  return;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
  }
 uint num_workgroup = _GLF_IDENTITY(gl_NumWorkGroups.x, (gl_NumWorkGroups.x) << 0u);
 _GLF_struct_24 _GLF_struct_replacement_24 = _GLF_struct_24(_GLF_struct_12(_GLF_struct_10(uvec2(1u), mat4x3(1.0), mat3x2(1.0)), _GLF_struct_11(vec4(1.0))), mat2(1.0), _GLF_struct_18(_GLF_struct_13(mat2x4(1.0)), _GLF_struct_14(mat2x3(1.0), mat3x2(1.0), mat3x2(1.0), uvec2(1u), uvec4(_GLF_IDENTITY(1u, (1u) / 1u))), _GLF_struct_15(mat3x2(1.0), uvec2(_GLF_IDENTITY(1u, min(_GLF_IDENTITY(1u, 1u * (_GLF_IDENTITY(1u, 0u | (1u)))), _GLF_IDENTITY(1u, (false ? _GLF_FUZZED(subgroup_size) : 1u))))), ivec3(1), bvec3(true), _GLF_IDENTITY(bvec2(_GLF_IDENTITY(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(true, ! (! (true)))))), bvec2(bvec2(bvec2(true))))), _GLF_struct_16(mat2x4(1.0), vec2(1.0)), _GLF_struct_17(mat3x4(1.0), uvec3(1u), true), mat2x4(1.0), mat3x4(1.0)), _GLF_struct_23(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, (true) || false)), ! (! (! (_GLF_IDENTITY(true, (true) || false)))))))), bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, ! (! (true)))) && true)), bvec3(bvec4(bvec3(true), true))), true))), _GLF_struct_19(mat4x3(1.0), mat3(1.0), true, vec4(1.0), mat3x4(1.0), ivec4(1), true), _GLF_IDENTITY(vec3(1.0), mix(_GLF_IDENTITY(vec3(_GLF_IDENTITY((vec3(1.0)), (false ? _GLF_FUZZED(vec3(-1.6, -3.1, 489.002)) : (vec3(1.0))))[0], _GLF_FUZZED(-2610.7896), _GLF_FUZZED(9.9)), (vec3(_GLF_IDENTITY((vec3(1.0)), (false ? _GLF_FUZZED(vec3(-1.6, -3.1, 489.002)) : (vec3(1.0))))[0], _GLF_FUZZED(-2610.7896), _GLF_FUZZED(9.9))) * mat3(1.0)), vec3(_GLF_FUZZED(-5656.9383), _GLF_IDENTITY(_GLF_IDENTITY((vec3(_GLF_IDENTITY(1.0, _GLF_IDENTITY(float(_GLF_IDENTITY(mat2x4(1.0, determinant(mat2(0.0, 0.0, _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(2.8)), float(0.0), bool(true))), _GLF_ZERO(0.0, injectionSwitch.x))), 1.0, sqrt(0.0), _GLF_ONE(1.0, injectionSwitch.y), 0.0, 0.0, 1.0), mat2x4(_GLF_IDENTITY(mat3x4(mat2x4(1.0, determinant(mat2(0.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x))), 1.0, sqrt(0.0), _GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).y), 0.0, 0.0, 1.0)), mat4(_GLF_IDENTITY(1.0, mix(float(_GLF_IDENTITY(1.0, float(vec3(1.0, 0.0, 1.0)))), float(_GLF_FUZZED(3.6)), bool(false)))) * (mat3x4(mat2x4(1.0, determinant(mat2(0.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x))), _GLF_IDENTITY(1.0, (1.0) / 1.0), sqrt(0.0), _GLF_ONE(1.0, injectionSwitch.y), _GLF_IDENTITY(0.0, max(0.0, _GLF_IDENTITY(0.0, max(_GLF_IDENTITY(0.0, (0.0) - 0.0), 0.0)))), 0.0, 1.0))))))), min(_GLF_IDENTITY(float(_GLF_IDENTITY(mat2x4(1.0, determinant(mat2(0.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x))), 1.0, sqrt(0.0), _GLF_ONE(1.0, injectionSwitch.y), 0.0, 0.0, 1.0), mat2x4(_GLF_IDENTITY(mat3x4(mat2x4(1.0, determinant(mat2(0.0, 0.0, 0.0, _GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), float(mat3x2(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), mix(float(_GLF_FUZZED(-33.66)), float(_GLF_ZERO(0.0, injectionSwitch.x)), bool(true))), 1.0, 1.0, abs(1.0), 0.0, 0.0))))), 1.0, _GLF_IDENTITY(sqrt(0.0), (sqrt(0.0)) * 1.0), _GLF_ONE(1.0, injectionSwitch.y), 0.0, 0.0, 1.0)), _GLF_IDENTITY(mat4(1.0), transpose(_GLF_IDENTITY(transpose(mat4(1.0)), transpose(transpose(_GLF_IDENTITY(transpose(mat4(1.0)), (true ? transpose(mat4(1.0)) : _GLF_FUZZED(mat4(6405.3291, -81.06, -6957.2324, 2872.9205, 4833.6423, -0.4, -956.302, -660.569, -512.837, 3.5, 9904.4967, 3.5, 0.5, -498.639, 45.73, 61.87))))))))) * (mat3x4(mat2x4(1.0, determinant(_GLF_IDENTITY(mat2(0.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x)), mat2(0.0, 0.0, 0.0, 0.0) + (mat2(0.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x))))), 1.0, sqrt(0.0), _GLF_ONE(1.0, injectionSwitch.y), 0.0, 0.0, 1.0))))))), (float(_GLF_IDENTITY(mat2x4(1.0, determinant(mat2(0.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x))), 1.0, sqrt(0.0), _GLF_ONE(1.0, injectionSwitch.y), 0.0, 0.0, 1.0), mat2x4(_GLF_IDENTITY(mat3x4(mat2x4(1.0, determinant(mat2(0.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x))), 1.0, sqrt(0.0), _GLF_ONE(1.0, injectionSwitch.y), 0.0, 0.0, 1.0)), mat4(1.0) * (mat3x4(mat2x4(1.0, determinant(mat2(0.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x))), 1.0, sqrt(0.0), _GLF_ONE(1.0, injectionSwitch.y), 0.0, 0.0, 1.0)))))))) + 0.0), float(_GLF_IDENTITY(mat2x4(1.0, determinant(mat2(0.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x))), 1.0, sqrt(0.0), _GLF_ONE(1.0, injectionSwitch.y), 0.0, 0.0, 1.0), mat2x4(_GLF_IDENTITY(mat3x4(mat2x4(1.0, determinant(mat2(0.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x))), 1.0, sqrt(0.0), _GLF_ONE(1.0, injectionSwitch.y), 0.0, 0.0, 1.0)), mat4(1.0) * (mat3x4(mat2x4(1.0, determinant(mat2(0.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x))), 1.0, sqrt(0.0), _GLF_ONE(1.0, injectionSwitch.y), 0.0, 0.0, 1.0)))))))))))), max((vec3(_GLF_IDENTITY(1.0, _GLF_IDENTITY(float(_GLF_IDENTITY(mat2x4(1.0, determinant(mat2(0.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x))), 1.0, sqrt(0.0), _GLF_ONE(1.0, injectionSwitch.y), 0.0, 0.0, 1.0), mat2x4(_GLF_IDENTITY(mat3x4(mat2x4(1.0, _GLF_IDENTITY(determinant(mat2(0.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x))), clamp(determinant(mat2(0.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x))), determinant(mat2(0.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x))), _GLF_IDENTITY(determinant(mat2(0.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x))), float(vec4(determinant(mat2(0.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x))), 0.0, log(1.0), 1.0))))), 1.0, sqrt(0.0), _GLF_ONE(1.0, injectionSwitch.y), 0.0, 0.0, 1.0)), mat4(1.0) * (mat3x4(mat2x4(1.0, determinant(mat2(0.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x))), 1.0, sqrt(0.0), _GLF_ONE(1.0, injectionSwitch.y), 0.0, 0.0, 1.0))))))), min(_GLF_IDENTITY(float(_GLF_IDENTITY(mat2x4(1.0, determinant(_GLF_IDENTITY(mat2(0.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x)), (true ? mat2(0.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x)) : _GLF_FUZZED(mat2(mat3x4(214.402, 4.1, 262.497, 8.8, -4.4, -16.16, 18.10, 4.2, 3523.1814, 9.0, 80.34, 89.59)))))), 1.0, sqrt(0.0), _GLF_ONE(1.0, injectionSwitch.y), 0.0, 0.0, 1.0), mat2x4(_GLF_IDENTITY(mat3x4(mat2x4(1.0, determinant(mat2(0.0, 0.0, 0.0, _GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))))), 1.0, sqrt(0.0), _GLF_ONE(1.0, injectionSwitch.y), 0.0, 0.0, 1.0)), mat4(1.0) * (mat3x4(mat2x4(1.0, determinant(mat2(0.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x))), 1.0, sqrt(0.0), _GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-90.67), _GLF_FUZZED(66.59)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))).y), 0.0, 0.0, 1.0))))))), (float(_GLF_IDENTITY(mat2x4(1.0, determinant(mat2(0.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x))), 1.0, sqrt(0.0), _GLF_ONE(1.0, injectionSwitch.y), 0.0, 0.0, 1.0), mat2x4(_GLF_IDENTITY(mat3x4(mat2x4(1.0, determinant(mat2(0.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x))), 1.0, sqrt(0.0), _GLF_ONE(1.0, injectionSwitch.y), 0.0, 0.0, 1.0)), mat4(1.0) * (mat3x4(mat2x4(1.0, determinant(mat2(0.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x))), 1.0, sqrt(0.0), _GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch : _GLF_FUZZED(log(vec2(93.92, 7.4))))).y), 0.0, 0.0, 1.0)))))))) + 0.0), float(_GLF_IDENTITY(mat2x4(1.0, determinant(mat2(0.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x))), 1.0, sqrt(0.0), _GLF_ONE(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(83.31) : 1.0)), injectionSwitch.y), 0.0, 0.0, 1.0), mat2x4(_GLF_IDENTITY(mat3x4(mat2x4(1.0, determinant(mat2(0.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x))), 1.0, sqrt(0.0), _GLF_ONE(1.0, injectionSwitch.y), 0.0, 0.0, 1.0)), mat4(1.0) * (mat3x4(mat2x4(1.0, determinant(mat2(0.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x))), _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(9.6) : 1.0)), sqrt(0.0), _GLF_ONE(1.0, injectionSwitch.y), 0.0, 0.0, 1.0)))))))))))), (vec3(_GLF_IDENTITY(1.0, _GLF_IDENTITY(float(_GLF_IDENTITY(mat2x4(1.0, _GLF_IDENTITY(determinant(mat2(0.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x))), min(_GLF_IDENTITY(determinant(mat2(0.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x))), (false ? _GLF_FUZZED(radians(6356.8028)) : determinant(mat2(0.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x))))), determinant(mat2(0.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x))))), 1.0, sqrt(0.0), _GLF_ONE(1.0, injectionSwitch.y), 0.0, 0.0, 1.0), mat2x4(_GLF_IDENTITY(mat3x4(mat2x4(1.0, determinant(mat2(0.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x))), 1.0, sqrt(0.0), _GLF_ONE(1.0, injectionSwitch.y), 0.0, 0.0, 1.0)), mat4(1.0) * (mat3x4(mat2x4(1.0, determinant(mat2(0.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x))), 1.0, sqrt(0.0), _GLF_ONE(1.0, injectionSwitch.y), 0.0, 0.0, 1.0))))))), min(_GLF_IDENTITY(float(_GLF_IDENTITY(mat2x4(1.0, determinant(mat2(0.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x))), 1.0, sqrt(0.0), _GLF_ONE(1.0, injectionSwitch.y), 0.0, 0.0, 1.0), mat2x4(_GLF_IDENTITY(mat3x4(mat2x4(1.0, determinant(mat2(0.0, 0.0, 0.0, _GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-64.84)), float(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(7974.0276)), float(injectionSwitch.x), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), bool(true)))))), 1.0, sqrt(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-2.0)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), _GLF_ONE(1.0, injectionSwitch.y), 0.0, _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), 1.0)), mat4(1.0) * (mat3x4(mat2x4(1.0, determinant(mat2(_GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x))), 1.0, sqrt(0.0), _GLF_ONE(1.0, injectionSwitch.y), 0.0, 0.0, 1.0))))))), (float(_GLF_IDENTITY(mat2x4(1.0, determinant(mat2(0.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x))), 1.0, sqrt(0.0), _GLF_ONE(1.0, injectionSwitch.y), 0.0, 0.0, 1.0), mat2x4(_GLF_IDENTITY(mat3x4(mat2x4(1.0, determinant(mat2(0.0, 0.0, 0.0, _GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x))), 1.0, sqrt(0.0), _GLF_ONE(1.0, injectionSwitch.y), 0.0, 0.0, 1.0)), mat4(1.0) * (mat3x4(mat2x4(1.0, determinant(mat2(0.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x))), 1.0, sqrt(0.0), _GLF_ONE(1.0, injectionSwitch.y), 0.0, 0.0, 1.0)))))))) + 0.0), float(_GLF_IDENTITY(mat2x4(1.0, determinant(mat2(0.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x))), 1.0, sqrt(0.0), _GLF_ONE(1.0, injectionSwitch.y), 0.0, 0.0, _GLF_IDENTITY(1.0, max(1.0, 1.0))), mat2x4(_GLF_IDENTITY(mat3x4(mat2x4(1.0, determinant(mat2(0.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x))), 1.0, sqrt(0.0), _GLF_ONE(1.0, injectionSwitch.y), 0.0, 0.0, 1.0)), _GLF_IDENTITY(mat4(1.0), (true ? mat4(1.0) : _GLF_FUZZED(mat4(8340.3523, 61.14, 6.8, -30.96, 3142.8326, -7.2, 3.6, -5.9, 9.3, -4582.3229, 850.259, 34.65, 6.5, 888.299, -753.749, 3.5)))) * (mat3x4(mat2x4(1.0, determinant(mat2(0.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x))), 1.0, sqrt(0.0), _GLF_ONE(1.0, injectionSwitch.y), 0.0, 0.0, 1.0)))))))))))))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(mix(vec3(-5.6, -4946.0485, 8646.0230), vec3(-6.6, -43.18, -9370.0874), 1426.4138)) : _GLF_IDENTITY((vec3(_GLF_IDENTITY(1.0, _GLF_IDENTITY(_GLF_IDENTITY(float(_GLF_IDENTITY(mat2x4(1.0, determinant(mat2(0.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x))), 1.0, sqrt(0.0), _GLF_ONE(1.0, injectionSwitch.y), _GLF_IDENTITY(0.0, min(0.0, _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)))), 0.0, 1.0), mat2x4(_GLF_IDENTITY(mat3x4(mat2x4(1.0, determinant(mat2(0.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x))), 1.0, sqrt(0.0), _GLF_ONE(1.0, injectionSwitch.y), 0.0, 0.0, 1.0)), mat4(1.0) * (mat3x4(mat2x4(1.0, determinant(mat2(0.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x))), 1.0, sqrt(0.0), _GLF_ONE(1.0, injectionSwitch.y), 0.0, 0.0, 1.0))))))), min(_GLF_IDENTITY(float(_GLF_IDENTITY(mat2x4(1.0, determinant(mat2(0.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x))), 1.0, sqrt(0.0), _GLF_ONE(1.0, injectionSwitch.y), 0.0, 0.0, 1.0), mat2x4(_GLF_IDENTITY(mat3x4(mat2x4(1.0, determinant(mat2(0.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x))), 1.0, sqrt(0.0), _GLF_ONE(1.0, injectionSwitch.y), 0.0, 0.0, 1.0)), mat4(1.0) * (mat3x4(mat2x4(1.0, determinant(mat2(0.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x))), 1.0, sqrt(0.0), _GLF_ONE(1.0, injectionSwitch.y), 0.0, 0.0, 1.0))))))), (float(_GLF_IDENTITY(mat2x4(1.0, determinant(mat2(0.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x))), 1.0, sqrt(0.0), _GLF_ONE(1.0, injectionSwitch.y), 0.0, 0.0, 1.0), mat2x4(_GLF_IDENTITY(mat3x4(mat2x4(1.0, determinant(mat2(0.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x))), 1.0, sqrt(0.0), _GLF_ONE(1.0, injectionSwitch.y), 0.0, 0.0, 1.0)), mat4(1.0) * (mat3x4(mat2x4(1.0, determinant(mat2(0.0, 0.0, _GLF_IDENTITY(0.0, max(_GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(cos(-2.6)))), 0.0)), _GLF_ZERO(0.0, injectionSwitch.x))), 1.0, sqrt(0.0), _GLF_ONE(1.0, injectionSwitch.y), 0.0, 0.0, 1.0)))))))) + 0.0), float(_GLF_IDENTITY(mat2x4(1.0, determinant(mat2(0.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x))), 1.0, sqrt(0.0), _GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, vec2(mat4x3(injectionSwitch, length(vec4(0.0, 0.0, 0.0, 0.0)), 0.0, 0.0, sin(0.0), 0.0, 0.0, tan(0.0), 0.0, 1.0, 1.0))).y), 0.0, _GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(99.90) : 0.0))) - 0.0), 1.0), mat2x4(_GLF_IDENTITY(mat3x4(mat2x4(1.0, determinant(mat2(0.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x))), 1.0, sqrt(0.0), _GLF_ONE(1.0, injectionSwitch.y), 0.0, 0.0, 1.0)), mat4(1.0) * (mat3x4(mat2x4(1.0, determinant(mat2(0.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x))), 1.0, sqrt(0.0), _GLF_ONE(_GLF_IDENTITY(1.0, float(vec4(1.0, 0.0, abs(0.0), 1.0))), injectionSwitch.y), 0.0, 0.0, 1.0))))))))), (_GLF_IDENTITY(_GLF_IDENTITY(float(_GLF_IDENTITY(mat2x4(1.0, determinant(mat2(0.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x))), 1.0, sqrt(0.0), _GLF_ONE(1.0, injectionSwitch.y), _GLF_IDENTITY(0.0, min(0.0, _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)))), 0.0, 1.0), mat2x4(_GLF_IDENTITY(mat3x4(mat2x4(1.0, determinant(mat2(0.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x))), 1.0, sqrt(0.0), _GLF_ONE(1.0, injectionSwitch.y), 0.0, 0.0, 1.0)), mat4(1.0) * (mat3x4(mat2x4(1.0, determinant(mat2(0.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x))), 1.0, sqrt(0.0), _GLF_ONE(1.0, injectionSwitch.y), 0.0, 0.0, 1.0))))))), min(_GLF_IDENTITY(float(_GLF_IDENTITY(mat2x4(1.0, determinant(mat2(0.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x))), 1.0, sqrt(0.0), _GLF_ONE(1.0, injectionSwitch.y), 0.0, 0.0, 1.0), mat2x4(_GLF_IDENTITY(mat3x4(mat2x4(1.0, determinant(mat2(0.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x))), 1.0, sqrt(0.0), _GLF_ONE(1.0, injectionSwitch.y), 0.0, 0.0, 1.0)), mat4(1.0) * (mat3x4(mat2x4(1.0, determinant(mat2(0.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x))), 1.0, sqrt(0.0), _GLF_ONE(1.0, injectionSwitch.y), 0.0, 0.0, 1.0))))))), (float(_GLF_IDENTITY(mat2x4(1.0, determinant(mat2(0.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x))), 1.0, sqrt(0.0), _GLF_ONE(1.0, injectionSwitch.y), 0.0, 0.0, 1.0), mat2x4(_GLF_IDENTITY(mat3x4(mat2x4(1.0, determinant(mat2(0.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x))), 1.0, sqrt(0.0), _GLF_ONE(1.0, injectionSwitch.y), 0.0, 0.0, 1.0)), mat4(1.0) * (mat3x4(mat2x4(1.0, determinant(mat2(0.0, 0.0, _GLF_IDENTITY(0.0, max(_GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(cos(-2.6)))), 0.0)), _GLF_ZERO(0.0, injectionSwitch.x))), 1.0, sqrt(0.0), _GLF_ONE(1.0, injectionSwitch.y), 0.0, 0.0, 1.0)))))))) + 0.0), float(_GLF_IDENTITY(mat2x4(1.0, determinant(mat2(0.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x))), 1.0, sqrt(0.0), _GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, vec2(mat4x3(injectionSwitch, length(vec4(0.0, 0.0, 0.0, 0.0)), 0.0, 0.0, sin(0.0), 0.0, 0.0, tan(0.0), 0.0, 1.0, 1.0))).y), 0.0, _GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(99.90) : 0.0))) - 0.0), 1.0), mat2x4(_GLF_IDENTITY(mat3x4(mat2x4(1.0, determinant(mat2(0.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x))), 1.0, sqrt(0.0), _GLF_ONE(1.0, injectionSwitch.y), 0.0, 0.0, 1.0)), mat4(1.0) * (mat3x4(mat2x4(1.0, determinant(mat2(0.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x))), 1.0, sqrt(0.0), _GLF_ONE(_GLF_IDENTITY(1.0, float(vec4(1.0, 0.0, abs(0.0), 1.0))), injectionSwitch.y), 0.0, 0.0, 1.0))))))))), float(mat2x3(_GLF_IDENTITY(float(_GLF_IDENTITY(mat2x4(1.0, determinant(mat2(0.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x))), 1.0, sqrt(0.0), _GLF_ONE(1.0, injectionSwitch.y), _GLF_IDENTITY(0.0, min(0.0, _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)))), 0.0, 1.0), mat2x4(_GLF_IDENTITY(mat3x4(mat2x4(1.0, determinant(mat2(0.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x))), 1.0, sqrt(0.0), _GLF_ONE(1.0, injectionSwitch.y), 0.0, 0.0, 1.0)), mat4(1.0) * (mat3x4(mat2x4(1.0, determinant(mat2(0.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x))), 1.0, sqrt(0.0), _GLF_ONE(1.0, injectionSwitch.y), 0.0, 0.0, 1.0))))))), min(_GLF_IDENTITY(float(_GLF_IDENTITY(mat2x4(1.0, determinant(mat2(0.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x))), 1.0, sqrt(0.0), _GLF_ONE(1.0, injectionSwitch.y), 0.0, 0.0, 1.0), mat2x4(_GLF_IDENTITY(mat3x4(mat2x4(1.0, determinant(mat2(0.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x))), 1.0, sqrt(0.0), _GLF_ONE(1.0, injectionSwitch.y), 0.0, 0.0, 1.0)), mat4(1.0) * (mat3x4(mat2x4(1.0, determinant(mat2(0.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x))), 1.0, sqrt(0.0), _GLF_ONE(1.0, injectionSwitch.y), 0.0, 0.0, 1.0))))))), (float(_GLF_IDENTITY(mat2x4(1.0, determinant(mat2(0.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x))), 1.0, sqrt(0.0), _GLF_ONE(1.0, injectionSwitch.y), 0.0, 0.0, 1.0), mat2x4(_GLF_IDENTITY(mat3x4(mat2x4(1.0, determinant(mat2(0.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x))), 1.0, sqrt(0.0), _GLF_ONE(1.0, injectionSwitch.y), 0.0, 0.0, 1.0)), mat4(1.0) * (mat3x4(mat2x4(1.0, determinant(mat2(0.0, 0.0, _GLF_IDENTITY(0.0, max(_GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(cos(-2.6)))), 0.0)), _GLF_ZERO(0.0, injectionSwitch.x))), 1.0, sqrt(0.0), _GLF_ONE(1.0, injectionSwitch.y), 0.0, 0.0, 1.0)))))))) + 0.0), float(_GLF_IDENTITY(mat2x4(1.0, determinant(mat2(0.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x))), 1.0, sqrt(0.0), _GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, vec2(mat4x3(injectionSwitch, length(vec4(0.0, 0.0, 0.0, 0.0)), 0.0, 0.0, sin(0.0), 0.0, 0.0, tan(0.0), 0.0, 1.0, 1.0))).y), 0.0, _GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(99.90) : 0.0))) - 0.0), 1.0), mat2x4(_GLF_IDENTITY(mat3x4(mat2x4(1.0, determinant(mat2(0.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x))), 1.0, sqrt(0.0), _GLF_ONE(1.0, injectionSwitch.y), 0.0, 0.0, 1.0)), mat4(1.0) * (mat3x4(mat2x4(1.0, determinant(mat2(0.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x))), 1.0, sqrt(0.0), _GLF_ONE(_GLF_IDENTITY(1.0, float(vec4(1.0, 0.0, abs(0.0), 1.0))), injectionSwitch.y), 0.0, 0.0, 1.0))))))))), 1.0, 1.0, 0.0, _GLF_IDENTITY(dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0)), dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0))), 1.0)))) - 0.0)))), max((vec3(_GLF_IDENTITY(1.0, _GLF_IDENTITY(float(_GLF_IDENTITY(mat2x4(1.0, determinant(mat2(0.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x))), 1.0, sqrt(0.0), _GLF_ONE(1.0, injectionSwitch.y), 0.0, 0.0, 1.0), mat2x4(_GLF_IDENTITY(mat3x4(mat2x4(1.0, determinant(mat2(0.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x))), 1.0, _GLF_IDENTITY(sqrt(0.0), max(sqrt(0.0), sqrt(0.0))), _GLF_ONE(1.0, injectionSwitch.y), 0.0, 0.0, 1.0)), mat4(1.0) * (mat3x4(mat2x4(_GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, float(mat4x3(_GLF_IDENTITY(1.0, max(1.0, 1.0)), 0.0, length(vec2(0.0, 0.0)), 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, sin(0.0), 0.0, 0.0))), _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(68.38)), float(1.0), bool(true))))), determinant(mat2(0.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x))), 1.0, sqrt(0.0), _GLF_ONE(1.0, injectionSwitch.y), 0.0, 0.0, 1.0))))))), _GLF_IDENTITY(min(_GLF_IDENTITY(float(_GLF_IDENTITY(mat2x4(1.0, determinant(mat2(0.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x))), 1.0, _GLF_IDENTITY(sqrt(0.0), (_GLF_IDENTITY(sqrt(0.0), mix(float(_GLF_FUZZED(592.131)), float(sqrt(0.0)), bool(true)))) - 0.0), _GLF_ONE(1.0, injectionSwitch.y), 0.0, 0.0, 1.0), mat2x4(_GLF_IDENTITY(mat3x4(mat2x4(1.0, determinant(mat2(_GLF_IDENTITY(0.0, float(float(0.0))), 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x))), 1.0, sqrt(0.0), _GLF_ONE(1.0, injectionSwitch.y), 0.0, 0.0, 1.0)), mat4(1.0) * (mat3x4(mat2x4(1.0, determinant(mat2(0.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x))), 1.0, sqrt(0.0), _GLF_ONE(1.0, injectionSwitch.y), 0.0, 0.0, 1.0))))))), (float(_GLF_IDENTITY(mat2x4(1.0, determinant(mat2(0.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x))), 1.0, sqrt(0.0), _GLF_ONE(1.0, injectionSwitch.y), 0.0, 0.0, 1.0), mat2x4(_GLF_IDENTITY(mat3x4(mat2x4(1.0, determinant(mat2(0.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x))), 1.0, sqrt(0.0), _GLF_ONE(1.0, injectionSwitch.y), 0.0, 0.0, 1.0)), mat4(1.0) * (mat3x4(mat2x4(1.0, determinant(mat2(0.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x))), 1.0, sqrt(0.0), _GLF_ONE(1.0, injectionSwitch.y), 0.0, 0.0, 1.0)))))))) + 0.0), float(_GLF_IDENTITY(mat2x4(1.0, determinant(_GLF_IDENTITY(mat2(0.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x)), transpose(transpose(mat2(0.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x)))))), 1.0, sqrt(0.0), _GLF_ONE(1.0, injectionSwitch.y), 0.0, 0.0, 1.0), mat2x4(_GLF_IDENTITY(mat3x4(mat2x4(1.0, determinant(mat2(0.0, 0.0, 0.0, _GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(_GLF_ONE(1.0, injectionSwitch.y))).x))), 1.0, sqrt(0.0), _GLF_ONE(1.0, injectionSwitch.y), 0.0, 0.0, 1.0)), mat4(_GLF_IDENTITY(1.0, max(1.0, 1.0))) * (mat3x4(mat2x4(1.0, determinant(mat2(0.0, _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(282.382)), float(0.0), bool(true))), 0.0, _GLF_ZERO(0.0, injectionSwitch.x))), 1.0, sqrt(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-7337.7763)), bool(false)))), _GLF_ONE(1.0, injectionSwitch.y), 0.0, 0.0, 1.0)))))))), float(mat4x3(min(_GLF_IDENTITY(float(_GLF_IDENTITY(mat2x4(1.0, determinant(mat2(0.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x))), 1.0, sqrt(0.0), _GLF_ONE(1.0, injectionSwitch.y), _GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0))) - _GLF_IDENTITY(dot(vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0)), dot(vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0))))) + 0.0), _GLF_IDENTITY(0.0, max(0.0, 0.0)), 1.0), mat2x4(_GLF_IDENTITY(mat3x4(mat2x4(1.0, determinant(mat2(0.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x))), 1.0, sqrt(0.0), _GLF_ONE(1.0, injectionSwitch.y), 0.0, 0.0, 1.0)), mat4(1.0) * (mat3x4(mat2x4(1.0, determinant(mat2(0.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x))), 1.0, sqrt(0.0), _GLF_ONE(1.0, injectionSwitch.y), 0.0, 0.0, 1.0))))))), (float(_GLF_IDENTITY(mat2x4(1.0, determinant(mat2(0.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x))), 1.0, sqrt(0.0), _GLF_ONE(1.0, injectionSwitch.y), 0.0, 0.0, 1.0), mat2x4(_GLF_IDENTITY(mat3x4(mat2x4(1.0, determinant(mat2(0.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x))), 1.0, sqrt(0.0), _GLF_ONE(1.0, injectionSwitch.y), 0.0, 0.0, 1.0)), mat4(1.0) * (mat3x4(mat2x4(1.0, determinant(_GLF_IDENTITY(mat2(0.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x)), transpose(_GLF_IDENTITY(transpose(mat2(0.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x))), _GLF_IDENTITY(mat2(mat2x3(transpose(mat2(0.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x))))), (mat2(mat2x3(transpose(mat2(0.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x)))))) / mat2(1.0, 1.0, 1.0, 1.0)))))), 1.0, sqrt(0.0), _GLF_ONE(_GLF_IDENTITY(1.0, min(1.0, 1.0)), _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))), 0.0, 0.0, 1.0)))))))) + 0.0), float(_GLF_IDENTITY(mat2x4(1.0, determinant(mat2(0.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x))), 1.0, sqrt(0.0), _GLF_ONE(1.0, injectionSwitch.y), 0.0, 0.0, 1.0), mat2x4(_GLF_IDENTITY(mat3x4(mat2x4(1.0, determinant(mat2(0.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x))), 1.0, sqrt(0.0), _GLF_ONE(1.0, injectionSwitch.y), 0.0, 0.0, 1.0)), mat4(1.0) * (mat3x4(mat2x4(1.0, determinant(mat2(0.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x))), 1.0, sqrt(0.0), _GLF_ONE(1.0, injectionSwitch.y), 0.0, 0.0, 1.0)))))))), 1.0, log(1.0), _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, determinant(mat2(1.0, 0.0, 0.0, exp(0.0))), 1.0))))))), (vec3(_GLF_IDENTITY(1.0, _GLF_IDENTITY(float(_GLF_IDENTITY(mat2x4(1.0, determinant(mat2(0.0, 0.0, 0.0, _GLF_ZERO(_GLF_IDENTITY(0.0, 1.0 * (0.0)), injectionSwitch.x))), _GLF_IDENTITY(_GLF_IDENTITY(1.0, (1.0) / _GLF_IDENTITY(dot(vec4(0.0, 1.0, _GLF_IDENTITY(dot(vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0)), dot(vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0))), 0.0), vec4(0.0, 1.0, 0.0, 0.0)), dot(vec4(0.0, 1.0, _GLF_IDENTITY(dot(vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0)), dot(vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0))), 0.0), vec4(0.0, 1.0, 0.0, 0.0)))), clamp(1.0, 1.0, 1.0)), sqrt(0.0), _GLF_ONE(1.0, injectionSwitch.y), 0.0, 0.0, 1.0), mat2x4(_GLF_IDENTITY(mat3x4(mat2x4(1.0, determinant(mat2(_GLF_IDENTITY(0.0, (0.0) - 0.0), 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x))), 1.0, sqrt(0.0), _GLF_ONE(1.0, injectionSwitch.y), 0.0, 0.0, 1.0)), mat4(1.0) * (mat3x4(mat2x4(1.0, determinant(mat2(_GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x))), 1.0, sqrt(0.0), _GLF_ONE(1.0, injectionSwitch.y), _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), 0.0, 1.0))))))), min(_GLF_IDENTITY(float(_GLF_IDENTITY(mat2x4(1.0, determinant(mat2(0.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x))), 1.0, sqrt(0.0), _GLF_ONE(1.0, injectionSwitch.y), 0.0, 0.0, 1.0), mat2x4(_GLF_IDENTITY(mat3x4(mat2x4(1.0, determinant(mat2(_GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 0.0 : _GLF_FUZZED((+ determinant(mat3(48.09, -4693.1551, 83.52, 8.8, -943.303, -521.802, -6.8, -30.82, -9.7))))))) / 1.0), 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x))), 1.0, sqrt(_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(242.046)), float(0.0), bool(true)))), _GLF_ONE(1.0, injectionSwitch.y), 0.0, 0.0, 1.0)), mat4(1.0) * (mat3x4(mat2x4(1.0, determinant(mat2(0.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x))), 1.0, sqrt(0.0), _GLF_ONE(1.0, injectionSwitch.y), 0.0, 0.0, 1.0))))))), (float(_GLF_IDENTITY(mat2x4(1.0, determinant(mat2(0.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x))), 1.0, sqrt(0.0), _GLF_ONE(1.0, injectionSwitch.y), _GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0, 1.0), mat2x4(_GLF_IDENTITY(mat3x4(mat2x4(1.0, determinant(mat2(0.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x))), 1.0, sqrt(0.0), _GLF_ONE(1.0, injectionSwitch.y), 0.0, 0.0, 1.0)), mat4(1.0) * (mat3x4(mat2x4(1.0, determinant(_GLF_IDENTITY(_GLF_IDENTITY(mat2(0.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x)), (mat2(0.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x))) - mat2(0.0, 0.0, 0.0, 0.0)), mat2(_GLF_IDENTITY(mat3x4(_GLF_IDENTITY(mat2(0.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x)), (mat2(0.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x))) - mat2(0.0, 0.0, 0.0, 0.0))), transpose(transpose(mat3x4(_GLF_IDENTITY(mat2(0.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x)), (mat2(0.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x))) - mat2(0.0, 0.0, 0.0, 0.0))))))))), 1.0, sqrt(0.0), _GLF_ONE(1.0, injectionSwitch.y), 0.0, 0.0, 1.0)))))))) + 0.0), float(_GLF_IDENTITY(mat2x4(1.0, determinant(_GLF_IDENTITY(mat2(0.0, 0.0, 0.0, _GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), max(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)))), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(mat2(0.0, 0.0, 0.0, _GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), max(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)))), (mat2(0.0, 0.0, 0.0, _GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), max(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))))) - mat2(0.0, 0.0, 0.0, 0.0)) : _GLF_FUZZED(mat2(363.839, -3.3, 189.145, -7213.0283))))), 1.0, sqrt(0.0), _GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))), 0.0, 0.0, 1.0), mat2x4(_GLF_IDENTITY(mat3x4(mat2x4(1.0, determinant(_GLF_IDENTITY(mat2(0.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x)), transpose(_GLF_IDENTITY(transpose(_GLF_IDENTITY(mat2(0.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x)), mat2(mat3x2(mat2(0.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x)))))), mat2(0.0, 0.0, 0.0, 0.0) + (transpose(_GLF_IDENTITY(mat2(0.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x)), mat2(mat3x2(mat2(0.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x))))))))))), 1.0, sqrt(0.0), _GLF_ONE(1.0, injectionSwitch.y), 0.0, 0.0, 1.0)), mat4(1.0) * (mat3x4(mat2x4(1.0, _GLF_IDENTITY(determinant(mat2(0.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x))), (determinant(mat2(0.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x)))) * 1.0), 1.0, sqrt(0.0), _GLF_ONE(1.0, injectionSwitch.y), 0.0, 0.0, 1.0))))))))))))))))[1], (vec3(1.0))[2]), bvec3(false, true, true))), mat4x3(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0))), _GLF_struct_20(uvec2(1u)), _GLF_struct_21(1), _GLF_struct_22(mat4x3(1.0), bvec3(true), _GLF_IDENTITY(uvec4(1u), (_GLF_IDENTITY(uvec4(1u), uvec4(0u, 0u, 0u, 0u) ^ (uvec4(_GLF_IDENTITY(1u, _GLF_IDENTITY((1u), clamp((1u), (1u), (1u))) | (_GLF_IDENTITY(1u, (1u) - (0u >> _GLF_IDENTITY(uint(0u), uint(0u)))))))))) | _GLF_IDENTITY((_GLF_IDENTITY(uvec4(1u), (_GLF_IDENTITY(_GLF_IDENTITY(uvec4(0u, 0u, 0u, 0u) << _GLF_IDENTITY(uvec4(6u), uvec4(6u)), uvec4(1u, 1u, 1u, 1u) * (_GLF_IDENTITY(uvec4(0u, 0u, 0u, 0u) << _GLF_IDENTITY(uvec4(6u), uvec4(6u)), uvec4(1u, 1u, 1u, 1u) * (uvec4(0u, 0u, _GLF_IDENTITY(0u, ~ (_GLF_IDENTITY(~ (0u), uint(_GLF_IDENTITY(uvec3(_GLF_IDENTITY(~ (0u), (~ (0u)) | (~ (0u))), 0u, 0u), (false ? _GLF_FUZZED(uvec3(134506u, 127462u, 183098u)) : uvec3(_GLF_IDENTITY(~ (0u), (~ (0u)) | (~ (0u))), 0u, 0u))))))), 0u) << _GLF_IDENTITY(uvec4(6u), uvec4(6u)))))), (_GLF_IDENTITY(uvec4(0u, 0u, 0u, 0u) << _GLF_IDENTITY(uvec4(6u), uvec4(6u)), uvec4(1u, 1u, 1u, 1u) * (_GLF_IDENTITY(_GLF_IDENTITY(uvec4(0u, 0u, 0u, 0u), uvec4(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)) | (uvec4(0u, 0u, 0u, 0u))) << _GLF_IDENTITY(uvec4(6u), uvec4(6u)), uvec4(1u, 1u, 1u, 1u) * (uvec4(0u, 0u, _GLF_IDENTITY(0u, ~ (_GLF_IDENTITY(~ (0u), uint(uvec3(_GLF_IDENTITY(~ (0u), (~ (0u)) | (~ (0u))), 0u, 0u))))), 0u) << _GLF_IDENTITY(_GLF_IDENTITY(uvec4(6u), ~ (_GLF_IDENTITY(~ (uvec4(6u)), max(~ (uvec4(6u)), _GLF_IDENTITY(~ (uvec4(6u)), max(~ (uvec4(6u)), ~ (uvec4(6u)))))))), uvec4(6u))))))) << uvec4(0u, 0u, 0u, 0u))) | (uvec4(1u)))), max((_GLF_IDENTITY(uvec4(1u), (_GLF_IDENTITY(_GLF_IDENTITY(uvec4(0u, 0u, 0u, 0u) << _GLF_IDENTITY(uvec4(6u), uvec4(6u)), uvec4(1u, 1u, 1u, 1u) * (_GLF_IDENTITY(uvec4(0u, 0u, 0u, 0u) << _GLF_IDENTITY(uvec4(6u), uvec4(6u)), uvec4(1u, 1u, 1u, 1u) * (uvec4(0u, 0u, _GLF_IDENTITY(0u, ~ (_GLF_IDENTITY(~ (0u), uint(_GLF_IDENTITY(uvec3(_GLF_IDENTITY(~ (0u), (~ (0u)) | (~ (0u))), 0u, 0u), (false ? _GLF_FUZZED(uvec3(134506u, 127462u, 183098u)) : uvec3(_GLF_IDENTITY(~ (0u), (~ (0u)) | (~ (0u))), 0u, 0u))))))), 0u) << _GLF_IDENTITY(uvec4(6u), uvec4(6u)))))), (_GLF_IDENTITY(uvec4(0u, 0u, 0u, 0u) << _GLF_IDENTITY(uvec4(6u), uvec4(6u)), uvec4(1u, 1u, 1u, 1u) * (_GLF_IDENTITY(_GLF_IDENTITY(uvec4(0u, 0u, 0u, 0u), uvec4(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)) | (uvec4(0u, 0u, 0u, 0u))) << _GLF_IDENTITY(uvec4(6u), uvec4(6u)), uvec4(1u, 1u, 1u, 1u) * (uvec4(0u, 0u, _GLF_IDENTITY(0u, ~ (_GLF_IDENTITY(~ (0u), uint(uvec3(_GLF_IDENTITY(~ (0u), (~ (0u)) | (~ (0u))), 0u, 0u))))), 0u) << _GLF_IDENTITY(_GLF_IDENTITY(uvec4(6u), ~ (_GLF_IDENTITY(~ (uvec4(6u)), max(~ (uvec4(6u)), _GLF_IDENTITY(~ (uvec4(6u)), max(~ (uvec4(6u)), ~ (uvec4(6u)))))))), uvec4(6u))))))) << uvec4(0u, 0u, 0u, 0u))) | (uvec4(1u)))), (_GLF_IDENTITY(uvec4(1u), (_GLF_IDENTITY(_GLF_IDENTITY(uvec4(0u, 0u, 0u, 0u) << _GLF_IDENTITY(uvec4(6u), uvec4(6u)), uvec4(1u, 1u, 1u, 1u) * (_GLF_IDENTITY(uvec4(0u, 0u, 0u, 0u) << _GLF_IDENTITY(uvec4(6u), uvec4(6u)), uvec4(1u, 1u, 1u, 1u) * (uvec4(0u, 0u, _GLF_IDENTITY(0u, ~ (_GLF_IDENTITY(~ (0u), uint(_GLF_IDENTITY(uvec3(_GLF_IDENTITY(~ (0u), (~ (0u)) | (~ (0u))), 0u, 0u), (false ? _GLF_FUZZED(uvec3(134506u, 127462u, 183098u)) : uvec3(_GLF_IDENTITY(~ (0u), (~ (0u)) | (~ (0u))), 0u, 0u))))))), 0u) << _GLF_IDENTITY(uvec4(6u), uvec4(6u)))))), (_GLF_IDENTITY(uvec4(0u, 0u, 0u, 0u) << _GLF_IDENTITY(uvec4(6u), uvec4(6u)), uvec4(1u, 1u, 1u, 1u) * (_GLF_IDENTITY(_GLF_IDENTITY(uvec4(0u, 0u, 0u, 0u), uvec4(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)) | (uvec4(0u, 0u, 0u, 0u))) << _GLF_IDENTITY(uvec4(6u), uvec4(6u)), uvec4(1u, 1u, 1u, 1u) * (uvec4(0u, 0u, _GLF_IDENTITY(0u, ~ (_GLF_IDENTITY(~ (0u), uint(uvec3(_GLF_IDENTITY(~ (0u), (~ (0u)) | (~ (0u))), 0u, 0u))))), 0u) << _GLF_IDENTITY(_GLF_IDENTITY(uvec4(6u), ~ (_GLF_IDENTITY(~ (uvec4(6u)), max(~ (uvec4(6u)), _GLF_IDENTITY(~ (uvec4(6u)), max(~ (uvec4(6u)), ~ (uvec4(6u)))))))), uvec4(6u))))))) << uvec4(0u, 0u, 0u, 0u))) | (uvec4(1u))))))), _GLF_IDENTITY(vec3(1.0), min(vec3(1.0), vec3(1.0))), vec3(1.0), ivec2(1))), ivec2(1), _GLF_IDENTITY(gl_WorkGroupSize.x, clamp(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize.x, (gl_WorkGroupSize.x) | (gl_WorkGroupSize.x)), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize.x, _GLF_IDENTITY(_GLF_IDENTITY((gl_WorkGroupSize.x), (64003u & 0u) | ((gl_WorkGroupSize.x))), min(_GLF_IDENTITY((gl_WorkGroupSize.x), (64003u & 0u) | ((gl_WorkGroupSize.x))), _GLF_IDENTITY((gl_WorkGroupSize.x), (64003u & 0u) | ((gl_WorkGroupSize.x))))) | (gl_WorkGroupSize.x)), (false ? _GLF_FUZZED(subgroup_size) : _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) / (uvec3(_GLF_IDENTITY(0u, ~ (_GLF_IDENTITY(~ (0u), 0u + (~ (0u))))), 0u, 0u) ^ uvec3(1u, 1u, 1u))).x, (_GLF_IDENTITY(gl_WorkGroupSize, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(gl_WorkGroupSize, uvec3(uvec3(gl_WorkGroupSize)))), min(~ (_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize, uvec3(uvec3(gl_WorkGroupSize))), (_GLF_IDENTITY(gl_WorkGroupSize, uvec3(uvec3(gl_WorkGroupSize)))) | (_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize, uvec3(uvec3(gl_WorkGroupSize))), ~ (~ (_GLF_IDENTITY(gl_WorkGroupSize, uvec3(uvec3(gl_WorkGroupSize))))))))), ~ (_GLF_IDENTITY(gl_WorkGroupSize, uvec3(uvec3(gl_WorkGroupSize)))))))).x) << (0u >> _GLF_IDENTITY(uint(3u), _GLF_IDENTITY(_GLF_IDENTITY(uint(3u), ~ (~ (uint(3u)))), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? uint(3u) : _GLF_FUZZED(subgroup_size)))))), (gl_WorkGroupSize.x) | (gl_WorkGroupSize.x))))), uint(uvec2((_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize.x, _GLF_IDENTITY(_GLF_IDENTITY((gl_WorkGroupSize.x), uint(uvec2((gl_WorkGroupSize.x), 1u))), (64003u & 0u) | ((gl_WorkGroupSize.x))) | (gl_WorkGroupSize.x)), (false ? _GLF_FUZZED(subgroup_size) : _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) / (uvec3(_GLF_IDENTITY(0u, ~ (_GLF_IDENTITY(~ (0u), (~ (0u)) >> 0u))), 0u, 0u) ^ uvec3(1u, 1u, 1u))).x, (_GLF_IDENTITY(gl_WorkGroupSize, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize, (_GLF_IDENTITY(gl_WorkGroupSize, max(gl_WorkGroupSize, gl_WorkGroupSize))) | (_GLF_IDENTITY(gl_WorkGroupSize, (false ? _GLF_FUZZED(uvec3(170006u, 97899u, 168485u)) : gl_WorkGroupSize)))), uvec3(uvec3(gl_WorkGroupSize)))), min(~ (_GLF_IDENTITY(gl_WorkGroupSize, uvec3(uvec3(gl_WorkGroupSize)))), ~ (_GLF_IDENTITY(gl_WorkGroupSize, uvec3(uvec3(gl_WorkGroupSize)))))))).x) << (0u >> _GLF_IDENTITY(uint(3u), uint(3u)))), (_GLF_IDENTITY(gl_WorkGroupSize.x, (_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize, max(gl_WorkGroupSize, _GLF_IDENTITY(gl_WorkGroupSize, uvec3(0u, 0u, 0u) + (gl_WorkGroupSize)))).x, _GLF_IDENTITY(clamp(gl_WorkGroupSize.x, gl_WorkGroupSize.x, gl_WorkGroupSize.x), min(_GLF_IDENTITY(clamp(gl_WorkGroupSize.x, gl_WorkGroupSize.x, gl_WorkGroupSize.x), ~ (~ (clamp(gl_WorkGroupSize.x, gl_WorkGroupSize.x, gl_WorkGroupSize.x)))), clamp(gl_WorkGroupSize.x, gl_WorkGroupSize.x, gl_WorkGroupSize.x))))) / 1u)) | (gl_WorkGroupSize.x))))), 1u))) + 0u), gl_WorkGroupSize.x, _GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize, _GLF_IDENTITY(uvec3(uvec4(gl_WorkGroupSize, 1u)), (uvec3(uvec4(gl_WorkGroupSize, 1u))) | uvec3(0u, 0u, 0u))), min(gl_WorkGroupSize, _GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize, (_GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) | (gl_WorkGroupSize))) | (_GLF_IDENTITY(gl_WorkGroupSize, uvec3(_GLF_IDENTITY(uvec4(gl_WorkGroupSize, (1u ^ 0u)), ~ (~ (uvec4(gl_WorkGroupSize, (1u ^ 0u))))))))), (gl_WorkGroupSize) / uvec3(1u, 1u, 1u)))).x)));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
  return;
 if(_GLF_DEAD(false))
  barrier();
 for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 | 0)); _injected_loop_counter --)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && _GLF_IDENTITY(((injectionSwitch.x > injectionSwitch.y)), ! (! (((injectionSwitch.x > injectionSwitch.y))))))))))))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     return;
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = _GLF_struct_replacement_24.workgroup_size * workgroup_id;
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     return;
    }
   else
    {
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y))))
    barrier();
   barrier();
  }
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       barrier();
      }
     else
      {
      }
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     for(int _injected_loop_counter = 1; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0), (_GLF_WRAPPED_LOOP(_injected_loop_counter != 0)) && true); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           do
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               return;
              }
             else
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                  {
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                      {
                       barrier();
                      }
                     else
                      {
                      }
                    }
                  }
                 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(-6349.6018), _GLF_FUZZED(961.455)), bvec2(false, false))))).x > injectionSwitch.y))))))
                  barrier();
                 barrier();
                }
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         do
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY((0 << _GLF_IDENTITY(_GLF_IDENTITY(int(4), _GLF_IDENTITY(int(_GLF_IDENTITY(int(_GLF_IDENTITY(int(4), (_GLF_IDENTITY(int(4), (int(4)) / 1)) ^ 0)), (int(_GLF_IDENTITY(int(4), _GLF_IDENTITY((_GLF_IDENTITY(int(4), (int(4)) | (int(4)))) ^ 0, clamp(_GLF_IDENTITY(_GLF_IDENTITY((int(4)) ^ 0, (_GLF_IDENTITY((int(4)) ^ 0, ((int(4)) ^ 0) >> 0)) >> int(_GLF_ZERO(0.0, injectionSwitch.x))), int(ivec4((int(4)) ^ 0, 1, 1, 1))), _GLF_IDENTITY((int(_GLF_IDENTITY(4, ~ (~ (_GLF_IDENTITY(4, min(4, 4))))))) ^ 0, ~ (~ ((int(4)) ^ 0))), (int(4)) ^ 0))))) | 0)), min(int(_GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_IDENTITY(int(4), _GLF_IDENTITY((int(_GLF_IDENTITY(4, int(ivec4(4, (97478 & 0), 0, 0))))) ^ 0, ((int(_GLF_IDENTITY(_GLF_IDENTITY(4, int(ivec4(4, (97478 & 0), 0, 0))), (_GLF_IDENTITY(_GLF_IDENTITY(4, int(ivec4(4, (97478 & 0), 0, 0))), (_GLF_IDENTITY(4, int(ivec4(4, (97478 & 0), 0, 0)))) | (_GLF_IDENTITY(4, int(ivec4(4, (97478 & 0), 0, 0)))))) >> 0))) ^ 0) * 1)), clamp(_GLF_IDENTITY(int(4), (int(_GLF_IDENTITY(4, int(ivec4(4, (97478 & 0), 0, 0))))) ^ 0), _GLF_IDENTITY(int(4), (int(_GLF_IDENTITY(4, int(ivec4(4, (97478 & 0), 0, 0))))) ^ 0), _GLF_IDENTITY(int(4), (int(_GLF_IDENTITY(4, int(ivec4(4, (97478 & 0), 0, 0))))) ^ 0)))), (int(_GLF_IDENTITY(int(4), (int(4)) ^ 0))) | 0)), int(_GLF_IDENTITY(int(_GLF_IDENTITY(int(4), (int(4)) ^ 0)), (_GLF_IDENTITY(int(_GLF_IDENTITY(int(4), (int(4)) ^ _GLF_IDENTITY(0, min(0, _GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(_injected_loop_counter))))))), ~ (~ (int(_GLF_IDENTITY(int(4), (int(4)) ^ _GLF_IDENTITY(0, min(0, _GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(_injected_loop_counter))))))))))) | 0))))), int(4))), _GLF_IDENTITY(~ (~ ((0 << _GLF_IDENTITY(int(4), int(4))))), min(~ (~ ((0 << _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(4, (_GLF_IDENTITY(4, ~ (~ (4)))) - 0)), int(4)), int(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(4, (_GLF_IDENTITY(4, ~ (~ (4)))) - 0)), int(4)), 0 | (_GLF_IDENTITY(int(_GLF_IDENTITY(4, (_GLF_IDENTITY(4, ~ (~ (4)))) - 0)), int(4)))), 0, 1)))))), _GLF_IDENTITY(~ (~ ((0 << _GLF_IDENTITY(int(4), int(4))))), (false ? _GLF_FUZZED(_injected_loop_counter) : ~ _GLF_IDENTITY((~ ((0 << _GLF_IDENTITY(int(4), int(4))))), int(_GLF_IDENTITY(ivec2(_GLF_IDENTITY((~ ((0 << _GLF_IDENTITY(_GLF_IDENTITY(int(4), (int(4)) ^ 0), int(4))))), ((~ ((0 << _GLF_IDENTITY(int(4), int(4)))))) | (_GLF_IDENTITY((~ ((_GLF_IDENTITY(0, clamp(0, 0, _GLF_IDENTITY(0, (0) | 0))) << _GLF_IDENTITY(int(4), int(4))))), ((~ ((0 << _GLF_IDENTITY(int(4), int(4)))))) / 1))), 1), ~ (~ (ivec2(_GLF_IDENTITY((~ ((0 << _GLF_IDENTITY(int(4), int(4))))), ((~ ((_GLF_IDENTITY(0 << _GLF_IDENTITY(int(4), int(4)), (0 << _GLF_IDENTITY(int(4), int(4))) - 0))))) | (_GLF_IDENTITY(_GLF_IDENTITY((~ ((0 << _GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), _GLF_IDENTITY(int(int(_GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), 0 | (_GLF_IDENTITY(int(4), int(4)))))), (false ? _GLF_FUZZED(-23993) : int(int(_GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), 0 | (_GLF_IDENTITY(int(4), int(4)))))))))))), max((~ ((0 << _GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), _GLF_IDENTITY(int(int(_GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), 0 | (_GLF_IDENTITY(int(4), int(4)))))), (false ? _GLF_FUZZED(-23993) : int(int(_GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), 0 | (_GLF_IDENTITY(int(4), int(4)))))))))))), _GLF_IDENTITY((~ ((0 << _GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), _GLF_IDENTITY(int(int(_GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), 0 | (_GLF_IDENTITY(int(4), int(4)))))), (false ? _GLF_FUZZED(-23993) : int(int(_GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), 0 | (_GLF_IDENTITY(int(4), int(4)))))))))))), ((~ ((0 << _GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), _GLF_IDENTITY(int(int(_GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), 0 | (_GLF_IDENTITY(int(4), int(4)))))), (false ? _GLF_FUZZED(-23993) : int(int(_GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), 0 | (_GLF_IDENTITY(int(4), int(4))))))))))))) >> 0))), ((~ ((_GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) * 1)) >> 0) << _GLF_IDENTITY(int(4), int(4)))))) / 1))), 1)))))))))))); _GLF_IDENTITY(_injected_loop_counter --, (true ? _injected_loop_counter -- : _GLF_FUZZED(findMSB(_injected_loop_counter)))))
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              {
               if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
                continue;
               if(_GLF_DEAD(false))
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    return;
                   return;
                  }
                 else
                  {
                  }
                }
               if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, false || (false))))
                {
                }
               else
                {
                 barrier();
                }
              }
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
         if(_GLF_DEAD(false))
          break;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         if(_GLF_DEAD(false))
          {
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              break;
             barrier();
            }
          }
         barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
      }
    }
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), injectionSwitch)).x > injectionSwitch.y))))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch) * mat2(_GLF_IDENTITY(_GLF_IDENTITY(1.0, (1.0) * 1.0), min(_GLF_IDENTITY(1.0, (1.0) * 1.0), _GLF_IDENTITY(1.0, (1.0) * 1.0)))), (_GLF_IDENTITY((injectionSwitch) * mat2(1.0), mat2(1.0) * ((injectionSwitch) * mat2(1.0)))) * vec2(1.0, 1.0)), _GLF_IDENTITY(mat2(1.0) * (_GLF_IDENTITY((injectionSwitch) * mat2(_GLF_IDENTITY(1.0, (1.0) * 1.0)), ((injectionSwitch) * mat2(1.0)) * vec2(1.0, 1.0))), clamp(mat2(1.0) * (_GLF_IDENTITY((injectionSwitch) * mat2(_GLF_IDENTITY(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(7.5)), float(1.0), bool(true)))) * 1.0), float(mat3x4(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(7.5)), float(1.0), bool(true)))) * 1.0), 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, determinant(mat3(_GLF_ONE(1.0, injectionSwitch.y), sin(0.0), 0.0, 1.0, 1.0, 0.0, cos(0.0), 0.0, 1.0)), 0.0, 1.0, 0.0, length(vec3(0.0, 0.0, 0.0)))))), ((_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], max(injectionSwitch[0], injectionSwitch[0])), injectionSwitch[1]))) * mat2(1.0)) * vec2(1.0, 1.0))), mat2(1.0) * (_GLF_IDENTITY((injectionSwitch) * mat2(_GLF_IDENTITY(1.0, (1.0) * 1.0)), _GLF_IDENTITY(((injectionSwitch) * mat2(1.0)), clamp((_GLF_IDENTITY((injectionSwitch), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(injectionSwitch) : (injectionSwitch))) * mat2(1.0)), _GLF_IDENTITY(((injectionSwitch) * mat2(1.0)), clamp(((injectionSwitch) * mat2(1.0)), ((injectionSwitch) * mat2(1.0)), ((injectionSwitch) * mat2(1.0)))), _GLF_IDENTITY(((injectionSwitch) * mat2(1.0)), vec2(vec2(((injectionSwitch) * mat2(1.0))))))) * vec2(1.0, 1.0))), _GLF_IDENTITY(mat2(1.0) * (_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch) * mat2(_GLF_IDENTITY(1.0, (1.0) * 1.0)), ((injectionSwitch) * mat2(1.0)) * vec2(1.0, 1.0)), (_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch) * mat2(_GLF_IDENTITY(1.0, (1.0) * 1.0)), ((injectionSwitch) * mat2(1.0)) * vec2(1.0, 1.0)), max(_GLF_IDENTITY((injectionSwitch) * mat2(_GLF_IDENTITY(1.0, (1.0) * 1.0)), ((injectionSwitch) * mat2(1.0)) * vec2(1.0, 1.0)), _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch) * mat2(_GLF_IDENTITY(1.0, (1.0) * 1.0)), ((injectionSwitch) * mat2(1.0)) * vec2(1.0, 1.0)), vec2(1.0, 1.0) * (_GLF_IDENTITY((injectionSwitch) * mat2(_GLF_IDENTITY(1.0, (1.0) * 1.0)), ((injectionSwitch) * mat2(1.0)) * vec2(1.0, 1.0))))))) / vec2(1.0, 1.0))), max(mat2(1.0) * (_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch) * mat2(_GLF_IDENTITY(1.0, (1.0) * 1.0)), mat2(1.0) * ((injectionSwitch) * mat2(_GLF_IDENTITY(1.0, (1.0) * 1.0)))), ((injectionSwitch) * mat2(1.0)) * vec2(1.0, 1.0))), mat2(1.0) * (_GLF_IDENTITY((injectionSwitch) * mat2(_GLF_IDENTITY(1.0, _GLF_IDENTITY((1.0) * 1.0, clamp(_GLF_IDENTITY((1.0) * 1.0, mix(float(_GLF_IDENTITY((1.0) * 1.0, min((1.0) * 1.0, (1.0) * 1.0))), float(_GLF_FUZZED(8.5)), bool(false))), _GLF_IDENTITY((1.0) * 1.0, float(vec2((1.0) * 1.0, 1.0))), _GLF_IDENTITY((1.0) * 1.0, min((1.0) * 1.0, (1.0) * 1.0)))))), _GLF_IDENTITY((_GLF_IDENTITY((injectionSwitch) * mat2(1.0), (_GLF_IDENTITY((injectionSwitch) * mat2(1.0), (true ? (injectionSwitch) * mat2(1.0) : _GLF_FUZZED(vec2(-5.0, -6104.6681))))) + vec2(0.0, 0.0))), vec2(mat2x3(_GLF_IDENTITY((_GLF_IDENTITY((injectionSwitch) * mat2(1.0), (_GLF_IDENTITY((injectionSwitch) * mat2(1.0), (true ? (injectionSwitch) * mat2(1.0) : _GLF_FUZZED(vec2(-5.0, -6104.6681))))) + vec2(0.0, 0.0))), ((_GLF_IDENTITY((injectionSwitch) * mat2(1.0), (_GLF_IDENTITY((injectionSwitch) * mat2(1.0), (true ? (injectionSwitch) * mat2(1.0) : _GLF_FUZZED(vec2(-5.0, -6104.6681))))) + vec2(0.0, 0.0)))) - vec2(0.0, 0.0)), sqrt(0.0), 1.0, 1.0, 0.0))) * vec2(1.0, 1.0))))))))).x > injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
  }
 do
  {
   if(_GLF_DEAD(false))
    continue;
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true && (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) && true), false, false)))))))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(false));
 uint subgroup_base = _GLF_struct_replacement_9._f2.subgroup_id * subgroup_size;
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(bvec3(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, false))) && (_GLF_FALSE(false, _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || _GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) && true)) || false))), ! (_GLF_IDENTITY(! ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || _GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) && true)) || false)))), bool(bvec2(! ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || _GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) && true)) || false)))), false))))), _GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_IDENTITY(bool((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))))))).y)), (bool((injectionSwitch.x > injectionSwitch.y))) && true)), false || (_GLF_IDENTITY(bool(_GLF_IDENTITY(bool((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch))), mix(vec2((min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch))))[0], _GLF_FUZZED(float(73916u))), vec2(_GLF_FUZZED((false ? 297.277 : 9.0)), (min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch))))[1]), bvec2(false, true)))).y)), (bool((injectionSwitch.x > injectionSwitch.y))) && true)), bool(bvec4(bool(_GLF_IDENTITY(bool((_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))).y)), (bool((injectionSwitch.x > injectionSwitch.y))) && true)), true, true, _GLF_IDENTITY(false, bool(bvec4(false, false, false, true)))))))), (bool(_GLF_IDENTITY(bool((injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(bool(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! (_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec2(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true), false))), true && ((injectionSwitch.x > injectionSwitch.y))))))), bool(_GLF_IDENTITY(bvec3(bool(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! (_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec2(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true), false))), true && ((injectionSwitch.x > injectionSwitch.y))))))), true, false), bvec3(bvec4(_GLF_IDENTITY(bvec3(bool(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! (_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec2(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true), false))), true && ((injectionSwitch.x > injectionSwitch.y))))))), true, false), bvec3(bvec3(bvec3(bool(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! (_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec2(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true), false))), true && ((injectionSwitch.x > injectionSwitch.y))))))), true, false)))), true)))))) && true))) && true)))))))
  barrier();
 uint virtual_gid = workgroup_base + subgroup_base + subgroup_local_id;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec3(false, _GLF_IDENTITY(true, bool(bvec3(_GLF_IDENTITY(true, bool(bvec2(_GLF_IDENTITY(true, ! (! (true))), false))), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), true))), _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(max(injectionSwitch, injectionSwitch), min(max(injectionSwitch, injectionSwitch), max(injectionSwitch, injectionSwitch)))))).x > _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(vec2(62.80, -115.249).r)), vec2(_GLF_FUZZED(-8335.3354), (injectionSwitch)[1]), bvec2(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))).y), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(injectionSwitch.x > injectionSwitch.y))))) || ((_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(0.0, 0.0) + _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0))))), ((_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)))))) * mat2(1.0)), log(vec2(1.0, 1.0)) + (_GLF_IDENTITY(vec2(0.0, 0.0) + _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0))))), ((_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)))))) * mat2(1.0)), vec2(0.0, 0.0) + (vec2(0.0, 0.0) + _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0))))), ((_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)))))) * mat2(1.0))))))).x > injectionSwitch.y))))))
    {
    }
   else
    {
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 uint next_virtual_gid = workgroup_base + subgroup_base + (_GLF_IDENTITY((subgroup_local_id + 1), max((subgroup_local_id + 1), (subgroup_local_id + 1))) % subgroup_size);
 uint read = 0;
 do
  {
   atomicStore(buf[next_virtual_gid], _GLF_IDENTITY(uint(1), (uint(1)) - 0u), 4, 64, 4);
  }
 while(_GLF_WRAPPED_LOOP(false));
 if((subgroup_local_id % 2) == 0)
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != (_GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)) << _GLF_IDENTITY(int(5), int(5)), clamp(int(_GLF_ZERO(0.0, injectionSwitch.x)) << _GLF_IDENTITY(int(5), int(5)), int(_GLF_ZERO(0.0, injectionSwitch.x)) << _GLF_IDENTITY(int(5), int(5)), int(_GLF_ZERO(0.0, injectionSwitch.x)) << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(_GLF_IDENTITY(5, 1 * (_GLF_IDENTITY(5, int(ivec3(5, 0, 1)))))), clamp(int(_GLF_IDENTITY(5, 1 * (_GLF_IDENTITY(5, int(ivec3(5, 0, 1)))))), int(_GLF_IDENTITY(5, 1 * (_GLF_IDENTITY(5, int(ivec3(5, 0, 1)))))), _GLF_IDENTITY(int(_GLF_IDENTITY(5, 1 * (_GLF_IDENTITY(5, int(ivec3(5, 0, 1)))))), (_GLF_IDENTITY(int(_GLF_IDENTITY(5, 1 * (_GLF_IDENTITY(5, int(ivec3(5, 0, 1)))))), (int(_GLF_IDENTITY(5, 1 * (_GLF_IDENTITY(5, int(ivec3(5, 0, 1))))))) - 0)) + 0))))))), (_injected_loop_counter != (_GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)) << _GLF_IDENTITY(int(5), int(5)), clamp(int(_GLF_ZERO(0.0, injectionSwitch.x)) << _GLF_IDENTITY(int(5), int(5)), _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)) << _GLF_IDENTITY(int(5), int(5)), clamp(int(_GLF_ZERO(0.0, injectionSwitch.x)) << _GLF_IDENTITY(int(5), int(5)), _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)) << _GLF_IDENTITY(int(5), int(5)), max(int(_GLF_ZERO(0.0, injectionSwitch.x)) << _GLF_IDENTITY(int(5), int(5)), int(_GLF_ZERO(0.0, injectionSwitch.x)) << _GLF_IDENTITY(int(5), int(5)))), int(_GLF_ZERO(0.0, injectionSwitch.x)) << _GLF_IDENTITY(int(5), int(5)))), int(_GLF_ZERO(0.0, injectionSwitch.x)) << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(_GLF_IDENTITY(5, 1 * (_GLF_IDENTITY(5, int(ivec3(5, 0, 1)))))), clamp(int(_GLF_IDENTITY(5, 1 * (_GLF_IDENTITY(5, int(ivec3(5, 0, 1)))))), int(_GLF_IDENTITY(5, 1 * (_GLF_IDENTITY(5, int(ivec3(5, 0, 1)))))), _GLF_IDENTITY(int(_GLF_IDENTITY(5, 1 * (_GLF_IDENTITY(5, int(ivec3(5, 0, 1)))))), (_GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(5, 1 * (_GLF_IDENTITY(5, int(ivec3(5, 0, 1)))))), (int(_GLF_IDENTITY(5, 1 * (_GLF_IDENTITY(5, int(ivec3(5, 0, 1))))))) - 0), (_GLF_IDENTITY(int(_GLF_IDENTITY(5, 1 * (_GLF_IDENTITY(5, int(ivec3(5, 0, 1)))))), (int(_GLF_IDENTITY(5, 1 * (_GLF_IDENTITY(5, int(ivec3(5, 0, 1))))))) - 0)) + int(_GLF_ZERO(0.0, injectionSwitch.x)))) + 0)))))))) || false)); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      barrier();
     read = atomicLoad(buf[virtual_gid], 4, 64, 2);
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (_GLF_IDENTITY(! (false), (! (false)) || false)) && true)))))
        barrier();
       return;
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(_GLF_IDENTITY(_GLF_IDENTITY(bool((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, vec2(mat3(injectionSwitch, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0))), injectionSwitch)), injectionSwitch)).y)), false || (bool((injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, vec2(mat3(injectionSwitch, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0))), injectionSwitch)), injectionSwitch)).y, (_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, vec2(mat3(injectionSwitch, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0))), injectionSwitch)), injectionSwitch)).y) - 0.0))))), ! (! (_GLF_IDENTITY(bool((injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(bool((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)) : _GLF_FUZZED(injectionSwitch))).x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)) : _GLF_FUZZED(injectionSwitch))).x > injectionSwitch.y))))), ! (! (bool((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)) : _GLF_FUZZED(injectionSwitch))).x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)) : _GLF_FUZZED(injectionSwitch))).x > injectionSwitch.y))))))))) || false)))))))))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = (1 & ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0)))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
        {
         barrier();
        }
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), ((false)) && true)))))
      return;
     if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false)) && true)) && true))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
        {
         barrier();
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, 1.0 * (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(_GLF_IDENTITY(float(vec2(injectionSwitch.x, 0.0)), clamp(float(vec2(injectionSwitch.x, 0.0)), float(vec2(injectionSwitch.x, 0.0)), float(vec2(injectionSwitch.x, 0.0)))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(float(vec2(injectionSwitch.x, 0.0)), clamp(float(vec2(injectionSwitch.x, 0.0)), float(vec2(injectionSwitch.x, 0.0)), float(vec2(injectionSwitch.x, 0.0)))), (_GLF_IDENTITY(float(vec2(injectionSwitch.x, 0.0)), clamp(float(vec2(injectionSwitch.x, 0.0)), float(vec2(injectionSwitch.x, 0.0)), float(vec2(injectionSwitch.x, 0.0))))) - 0.0), _GLF_IDENTITY(_GLF_IDENTITY(float(vec2(injectionSwitch.x, 0.0)), clamp(float(vec2(injectionSwitch.x, 0.0)), float(vec2(injectionSwitch.x, 0.0)), float(vec2(injectionSwitch.x, 0.0)))), exp(0.0) * (_GLF_IDENTITY(float(vec2(injectionSwitch.x, 0.0)), clamp(float(vec2(injectionSwitch.x, 0.0)), float(vec2(injectionSwitch.x, 0.0)), float(vec2(injectionSwitch.x, 0.0)))))), _GLF_IDENTITY(float(vec2(injectionSwitch.x, 0.0)), clamp(float(vec2(injectionSwitch.x, 0.0)), float(vec2(injectionSwitch.x, 0.0)), float(vec2(injectionSwitch.x, 0.0))))))))) > injectionSwitch.y), ! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (! ((injectionSwitch.x > injectionSwitch.y))), (! (! ((injectionSwitch.x > injectionSwitch.y)))) && true))))))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      return;
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         do
          {
           return;
           if(_GLF_DEAD(false))
            continue;
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       else
        {
        }
      }
    }
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)))))
    barrier();
   read = _GLF_IDENTITY(atomicLoad(_GLF_IDENTITY(buf[virtual_gid], max(buf[virtual_gid], buf[virtual_gid])), 4, 64, _GLF_IDENTITY(2, min(2, 2))), min(atomicLoad(buf[virtual_gid], _GLF_IDENTITY(4, (_GLF_IDENTITY(4, (4) - 0)) | 0), 64, 2), atomicLoad(buf[_GLF_IDENTITY(virtual_gid, uint(_GLF_IDENTITY(uint(virtual_gid), max(uint(virtual_gid), uint(virtual_gid)))))], 4, 64, 2)));
   if(_GLF_DEAD(false))
    barrier();
   do
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))))))
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))))
        barrier();
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           do
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(false))
                continue;
               barrier();
              }
             do
              {
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(6), int(6))), clamp(_GLF_IDENTITY((1 << _GLF_IDENTITY(int(6), int(6))), ((1 << _GLF_IDENTITY(int(6), int(6)))) | 0), _GLF_IDENTITY((1 << _GLF_IDENTITY(int(6), int(6))), ((1 << _GLF_IDENTITY(int(6), int(6)))) >> 0), (1 << _GLF_IDENTITY(int(6), int(6))))) >> _GLF_IDENTITY(int(6), int(_GLF_IDENTITY(6, (6) >> 0))))); _GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) >> 0))
                {
                 return;
                 if(_GLF_DEAD(false))
                  barrier();
                }
               if(_GLF_DEAD(false))
                break;
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(false, bool(bool(false))), true, true, false)), false || (bool(bvec4(_GLF_IDENTITY(false, bool(bool(false))), true, true, false)))))))
                  barrier();
                 if(_GLF_DEAD(false))
                  return;
                }
               else
                {
                }
              }
             while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, _GLF_IDENTITY(false, true && (false)) || (false))));
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
             for(int _injected_loop_counter = (0 << _GLF_IDENTITY(_GLF_IDENTITY(int(5), 0 ^ (int(5))), int(5))); _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
              {
               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _GLF_IDENTITY(_injected_loop_counter --, ~ (~ (_injected_loop_counter --))))
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, true && (false))))), true, true)))))
                  break;
                 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))
                  barrier();
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * _GLF_IDENTITY(1.0, _GLF_IDENTITY(float(vec3(1.0, 1.0, 0.0)), (true ? float(vec3(1.0, 1.0, 0.0)) : _GLF_FUZZED(-7630.4364)))))))))
                  barrier();
                }
              }
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                return;
               barrier();
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-3.6), _GLF_FUZZED(-4.1)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))).y, false || (injectionSwitch.x > injectionSwitch.y))))))
              barrier();
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
              {
               if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y), ! (! (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)) || false)), false || (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))))))))))
                {
                 if(_GLF_DEAD(false))
                  return;
                 return;
                }
               if(_GLF_DEAD(false))
                barrier();
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         else
          {
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
          }
         if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) && true)) && true)))
          return;
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            return;
           for(int _injected_loop_counter = _GLF_IDENTITY(((1 << _GLF_IDENTITY(int(4), int(_GLF_IDENTITY(4, (true ? _GLF_IDENTITY(4, (false ? _GLF_FUZZED(1500) : 4)) : _GLF_FUZZED(-79204)))))) >> _GLF_IDENTITY(int(4), int(4))), (((1 << _GLF_IDENTITY(int(4), int(_GLF_IDENTITY(4, (true ? _GLF_IDENTITY(4, (false ? _GLF_FUZZED(1500) : 4)) : _GLF_FUZZED(-79204)))))) >> _GLF_IDENTITY(int(4), int(4)))) >> 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, ~ (~ (0)))); _injected_loop_counter --)
            {
             if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))))
              barrier();
            }
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(false, false, true, true))), ! (! (false)))))
            {
             do
              {
               return;
               if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(false, bool(bvec3(false, false, false))) ? _GLF_FUZZED(vec2(93.99, 3.2)) : injectionSwitch)).x > injectionSwitch.y))))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 barrier();
                }
               if(_GLF_DEAD(false))
                barrier();
              }
             while(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), _GLF_IDENTITY(bool(bvec2(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))), true)), ! (! (bool(bvec2(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)), bool(_GLF_IDENTITY(bvec2((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)), true), bvec2(bvec3(_GLF_IDENTITY(bvec2((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)), true), bvec2(bvec3(bvec2((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)), true), false))), true)))))), bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), true)))))), (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec3(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(injectionSwitch.x > injectionSwitch.y, true))), true, false))))), bool(bool(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch))) / vec2(1.0, 1.0)).y))))), bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))), _GLF_IDENTITY(bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false || (bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), true && (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))), _GLF_IDENTITY(bool(bvec2(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), true)), ! (! (bool(bvec2(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), true))))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), false || (bool(bool(false)))))))
              return;
            }
           barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), ! (_GLF_IDENTITY(! _GLF_IDENTITY((_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_IF_FALSE(false)), bool(bvec4(! (_GLF_WRAPPED_IF_FALSE(false)), false, false, false)))))), ! (! (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_IF_FALSE(false)), bool(bvec4(! (_GLF_WRAPPED_IF_FALSE(false)), false, false, false)))))), true && (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_IF_FALSE(false)), bool(bvec4(! (_GLF_WRAPPED_IF_FALSE(false)), false, false, false)))))), ! (! ((_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_IF_FALSE(false)), bool(bvec4(! (_GLF_WRAPPED_IF_FALSE(false)), false, false, false)))))))))))))), ! (! (! (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_IF_FALSE(false)), bool(bvec4(! (_GLF_WRAPPED_IF_FALSE(false)), false, false, false))))))))))))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false)), (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
      }
     else
      {
      }
    }
  }
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = (0 | 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     return;
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 subgroupBarrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   do
    {
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, true, false), bvec3(bvec4(bvec3(false, true, false), true)))))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + 0.0) < injectionSwitch.y))))
  {
   atomicStore(checker[virtual_gid], read, 4, 64, 4);
  }
 else
  {
  }
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), ! (! (! ((injectionSwitch.x > injectionSwitch.y))))))))))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(bvec2((injectionSwitch.x > injectionSwitch.y), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), (_GLF_IDENTITY(bool(bvec2((injectionSwitch.x > injectionSwitch.y), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), true && (bool(bvec2((injectionSwitch.x > injectionSwitch.y), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))) && true)))))
      {
      }
     else
      {
       barrier();
      }
    }
   if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))))
    barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       return;
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   if(_GLF_DEAD(false))
    barrier();
   for(int _injected_loop_counter = _GLF_IDENTITY(0, int(ivec4(0, 0, int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)))).y)), 1))); _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(1, ~ (~ (1)))); _injected_loop_counter ++)
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      continue;
    }
   if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_DEAD(false)), false || (bool(_GLF_DEAD(false))))), ! (! (bool(_GLF_IDENTITY(bool(_GLF_DEAD(false)), false || (bool(_GLF_DEAD(false))))))))))
    barrier();
  }
 if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_DEAD(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))), (_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_DEAD(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)))) || false), bool(bvec4(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_DEAD(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))), true, true, false))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) || false)))
      {
      }
     else
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         barrier();
        }
      }
    }
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_DEAD(false))
  barrier();
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END
BUFFER checker DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected_checker DATA_TYPE uint32 SIZE 8388096 FILL 1

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 
  BIND BUFFER checker AS storage DESCRIPTOR_SET 0 BINDING 2 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT checker EQ_BUFFER expected_checker
