#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y)))), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3((injectionSwitch.x > injectionSwitch.y), false, _GLF_IDENTITY(false, (false) || false)), bvec3(bvec4(bvec3((injectionSwitch.x > injectionSwitch.y), false, _GLF_IDENTITY(false, (false) || false)), true)))), ! (! (bool(_GLF_IDENTITY(bvec3((injectionSwitch.x > injectionSwitch.y), false, _GLF_IDENTITY(false, (false) || false)), bvec3(bvec4(bvec3((injectionSwitch.x > injectionSwitch.y), false, _GLF_IDENTITY(false, (false) || false)), true))))))))), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) && true))))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(float(injectionSwitch.x), (_GLF_IDENTITY(float(injectionSwitch.x), max(float(injectionSwitch.x), float(injectionSwitch.x)))) + 0.0))) > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(false, _GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, ! (! (false))))) || (false)))), (_GLF_IDENTITY(bool(bool(_GLF_IDENTITY(false, false || _GLF_IDENTITY((false), _GLF_IDENTITY(false || ((false)), (_GLF_IDENTITY(false || ((false)), bool(bvec4(false || ((false)), true, false, true)))) && true))))), ! _GLF_IDENTITY((! (bool(bool(_GLF_IDENTITY(false, false || (false)))))), ! (! ((! _GLF_IDENTITY((bool(bool(_GLF_IDENTITY(false, false || (false))))), bool(_GLF_IDENTITY(bvec2((bool(bool(_GLF_IDENTITY(false, false || (false))))), true), bvec2(bvec2(bvec2((bool(bool(_GLF_IDENTITY(false, false || (false))))), true)))))))))))) || false))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(bool(bool(false)), (bool(bool(false))) || false), ! (! (bool(bool(false)))))), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), ! (! (bool(bool(false)))))), true && (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), ! (! (bool(bool(_GLF_IDENTITY(false, bool(bvec4(false, false, true, false))))))))))), true, true), bvec3(bvec3(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), ! (! (bool(bool(false)))))), true && (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), ! (! (bool(bool(false)))))))), true, true))))))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(bool(bool(false)), bool(bvec3(bool(bool(_GLF_IDENTITY(false, ! (! (false))))), false, _GLF_IDENTITY(true, _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec2(true, true)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(bool(bvec2(true, true)), (bool(bvec2(true, true))) && true))), false || (bool(bvec2(true, true)))))))), ! (! (_GLF_IDENTITY(bool(bool(false)), _GLF_IDENTITY(bool(bvec3(bool(bool(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bvec4(false, true, false, false)))))))), false, _GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec2(true, true)), false || (bool(bvec2(true, true))))))), true && (_GLF_IDENTITY(bool(bvec3(bool(bool(_GLF_IDENTITY(false, ! (! (false))))), false, _GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec2(true, true)), false || (bool(bvec2(true, true))))))), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(bvec3(bool(bool(_GLF_IDENTITY(false, ! (! (false))))), false, _GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec2(true, true)), false || (_GLF_IDENTITY(bool(bvec2(true, true)), (bool(bvec2(true, true))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))), true && (bool(bvec3(bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), ((false)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), ((false)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), false || (bool(bool(_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), ((false)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))))), false, _GLF_IDENTITY(true, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(true, true), bvec2(bvec4(bvec2(true, true), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), injectionSwitch, injectionSwitch)), _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - log(vec2(1.0, 1.0))))).x > injectionSwitch.y)), true)))), false || (bool(bvec2(true, true)))))))))), (bool(_GLF_IDENTITY(bool(bvec3(bool(bool(_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (false)), _GLF_IDENTITY(bool(bvec3((! (false)), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), ! (! (_GLF_IDENTITY(bool(bvec3((! (false)), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), (bool(bvec3((! (false)), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) || false)))))))), false, _GLF_IDENTITY(true, _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec2(true, true)), (bool(bvec2(true, true))) && true), false || (bool(bvec2(true, true))))))), true && (bool(bvec3(bool(bool(_GLF_IDENTITY(false, ! (! (false))))), false, _GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec2(true, true)), false || (bool(bvec2(true, true))))))))))) || false))))))))))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - log(vec2(1.0, 1.0))).x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY((false), true && ((false))) && true), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, ! _GLF_IDENTITY(_GLF_IDENTITY((! (false)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY((! (false)), ((! (false))) || false))), (_GLF_IDENTITY((! (false)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY((! (false)), ((! (false))) || false)))) && true))), bool(bvec4(! (_GLF_IDENTITY(false, ! (! (false)))), true, true, true))))), (false) && true)))), bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY((false), true && ((false))) && true), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, ! _GLF_IDENTITY(_GLF_IDENTITY((! (false)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY((! (false)), ((! (false))) || false))), (_GLF_IDENTITY((! (false)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY((! (false)), ((! (false))) || false)))) && true))), bool(bvec4(! (_GLF_IDENTITY(false, ! (! (false)))), true, true, true))))), (false) && true)))), true)))))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (! (_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y))))))) && true))))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(false))
  barrier();
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = _GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups.x, max(gl_NumWorkGroups.x, _GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups.x, max(_GLF_IDENTITY(gl_NumWorkGroups.x, (gl_NumWorkGroups.x) | 0u), gl_NumWorkGroups.x)), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(gl_NumWorkGroups.x, max(_GLF_IDENTITY(gl_NumWorkGroups.x, (gl_NumWorkGroups.x) | 0u), gl_NumWorkGroups.x))), clamp(~ (_GLF_IDENTITY(gl_NumWorkGroups.x, max(_GLF_IDENTITY(gl_NumWorkGroups.x, (gl_NumWorkGroups.x) | 0u), gl_NumWorkGroups.x))), ~ (_GLF_IDENTITY(gl_NumWorkGroups.x, max(_GLF_IDENTITY(gl_NumWorkGroups.x, (gl_NumWorkGroups.x) | 0u), gl_NumWorkGroups.x))), ~ (_GLF_IDENTITY(gl_NumWorkGroups.x, max(_GLF_IDENTITY(gl_NumWorkGroups.x, (gl_NumWorkGroups.x) | 0u), gl_NumWorkGroups.x))))))))), (gl_NumWorkGroups.x) | 0u);
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-101.441)), float(injectionSwitch.y), _GLF_IDENTITY(bool(true), _GLF_IDENTITY(bool(bool(bool(true))), bool(bvec3(bool(bool(bool(true))), false, false))))))))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), bool(bvec3(! (! (false)), true, _GLF_IDENTITY(false, ! (! (false)))))))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 uint workgroup_size = _GLF_IDENTITY(gl_WorkGroupSize, clamp(gl_WorkGroupSize, _GLF_IDENTITY(gl_WorkGroupSize, ~ (~ (gl_WorkGroupSize))), _GLF_IDENTITY(gl_WorkGroupSize, (true ? _GLF_IDENTITY(gl_WorkGroupSize, uvec3(0u, 0u, 0u) + (gl_WorkGroupSize)) : _GLF_FUZZED(uvec3(175413u, 182144u, 171427u)))))).x;
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint workgroup_base = _GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, min(_GLF_IDENTITY(workgroup_size, clamp(workgroup_size, _GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, _GLF_IDENTITY(~ (_GLF_IDENTITY(~ (workgroup_size), (~ (workgroup_size)) ^ 0u)), ~ (~ (~ (_GLF_IDENTITY(~ (workgroup_size), (~ (workgroup_size)) ^ 0u)))))), (_GLF_IDENTITY(workgroup_size, _GLF_IDENTITY(~ (_GLF_IDENTITY(~ (workgroup_size), (~ (workgroup_size)) ^ 0u)), ~ (~ (~ (_GLF_IDENTITY(~ (workgroup_size), (~ (workgroup_size)) ^ 0u))))))) | (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, _GLF_IDENTITY(~ (_GLF_IDENTITY(~ (workgroup_size), (~ (workgroup_size)) ^ 0u)), ~ (~ (~ (_GLF_IDENTITY(~ (workgroup_size), (~ (workgroup_size)) ^ 0u)))))), (_GLF_IDENTITY(workgroup_size, _GLF_IDENTITY(~ (_GLF_IDENTITY(~ (workgroup_size), (~ (workgroup_size)) ^ 0u)), ~ (~ (~ (_GLF_IDENTITY(~ (workgroup_size), (~ (workgroup_size)) ^ 0u))))))) - 0u))), workgroup_size)), workgroup_size)), (true ? _GLF_IDENTITY(workgroup_size, min(_GLF_IDENTITY(workgroup_size, clamp(workgroup_size, workgroup_size, workgroup_size)), workgroup_size)) : _GLF_FUZZED(uint(-22776)))) * workgroup_id;
 uint subgroup_base = subgroup_id * subgroup_size;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 uint virtual_gid = _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_base, (subgroup_base) / uint(_GLF_ONE(1.0, injectionSwitch.y))), (workgroup_base + _GLF_IDENTITY(subgroup_base, (subgroup_base) / uint(_GLF_ONE(1.0, injectionSwitch.y)))) / uint(_GLF_ONE(1.0, injectionSwitch.y))), (workgroup_base + _GLF_IDENTITY(subgroup_base, (subgroup_base) / uint(_GLF_ONE(1.0, injectionSwitch.y)))) >> 0u), max(workgroup_base + subgroup_base, workgroup_base + subgroup_base)) + subgroup_local_id;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, false || _GLF_IDENTITY((_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bool(false))))))), _GLF_IDENTITY(((_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bool(false)))))))) || _GLF_IDENTITY(false, false || (false)), ! (! (((_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bool(false)))))))) || _GLF_IDENTITY(false, false || (false)))))))), _GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec3(! (false), true, false))))), ! _GLF_IDENTITY((! (false)), false || (_GLF_IDENTITY((! (false)), ((! (false))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))), true, true), bvec3(bvec3(_GLF_IDENTITY(bvec3(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), _GLF_IDENTITY(bool(bvec3(! (false), true, false)), bool(bvec3(bool(bvec3(! (false), true, false)), false, false)))))), ! (! (false)))))), true, true), bvec3(bvec3(_GLF_IDENTITY(bvec3(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec3(! (false), true, false))))), ! (! (false))))), true && (_GLF_IDENTITY(false, false || (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec3(! (_GLF_IDENTITY(false, ! (! (false)))), true, false))))), ! (! (false)))))))), true, true), bvec3(bvec3(bvec3(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec3(! (false), true, false))))), ! (! (false)))))), true, true)))))))))), bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (! (false)))))), true, true), bvec3(bvec3(bvec3(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (! (false)))))), true, true)))), false))), bvec3(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec3(! (false), true, false))))), ! (_GLF_IDENTITY(! (false), true && (_GLF_IDENTITY(! (false), (! _GLF_IDENTITY((false), ! (! (_GLF_IDENTITY((false), true && ((false))))))) || false)))))))), true, true), bvec3(bvec3(_GLF_IDENTITY(bvec3(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec3(! (false), true, false))))), ! (! (false)))))), true, true), bvec3(bvec3(_GLF_IDENTITY(bvec3(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(! (_GLF_IDENTITY(! (false), bool(bvec3(! (false), true, false)))), bool(bvec2(_GLF_IDENTITY(! (_GLF_IDENTITY(! (false), bool(bvec3(! (false), true, false)))), (! (_GLF_IDENTITY(! (false), bool(bvec3(! (false), true, false))))) && true), false)))), ! (! (false)))))), true, true), bvec3(bvec3(bvec3(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec3(! (false), true, false))))), ! (! (false)))))), true, true)))))))))), bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (false))))))))), true, true), bvec3(bvec3(bvec3(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), false || (! (false)))))))), true, true)))), _GLF_IDENTITY(false, false || (false))))), false)))), bool(bvec2(bool(_GLF_IDENTITY(bvec3(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(false, ! (! (false)))))))), true, true), bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (! (false)))))), true, true), bvec3(bvec3(bvec3(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), ! _GLF_IDENTITY((! (_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), ! (! _GLF_IDENTITY((false), true && (_GLF_IDENTITY((false), _GLF_IDENTITY(bool(bool((false))), _GLF_IDENTITY((bool(bool((false)))) || false, true && ((bool(bool((false)))) || false)))))))))), _GLF_IDENTITY(((! (_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), ! (! (false)))))) || false, ! (! _GLF_IDENTITY((_GLF_IDENTITY(((! (_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), ! (! (false)))))) || false, ! (! (((! (_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), ! (! (false)))))) || false)))), bool(bool(_GLF_IDENTITY((_GLF_IDENTITY(((! (_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), ! (! (false)))))) || false, ! (! (((! (_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), ! (! (false)))))) || false)))), ((_GLF_IDENTITY(((! (_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), ! (! (false)))))) || false, ! (! (((! (_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), ! (! (false)))))) || false))))) && true))))))))))), true, true)))), false)))), false)))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     barrier();
    }
   barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 uint next_virtual_gid = _GLF_IDENTITY(workgroup_base + subgroup_base, (_GLF_IDENTITY(workgroup_base + subgroup_base, (_GLF_IDENTITY(workgroup_base + subgroup_base, (false ? _GLF_FUZZED(workgroup_base) : _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(workgroup_base, clamp(workgroup_base, workgroup_base, workgroup_base))), (~ (_GLF_IDENTITY(workgroup_base, clamp(workgroup_base, _GLF_IDENTITY(workgroup_base, max(workgroup_base, workgroup_base)), workgroup_base)))) | 0u))), (_GLF_IDENTITY(workgroup_base, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(workgroup_base, _GLF_IDENTITY(clamp(workgroup_base, workgroup_base, workgroup_base), (false ? _GLF_FUZZED(virtual_gid) : clamp(workgroup_base, workgroup_base, workgroup_base))))), (~ (_GLF_IDENTITY(workgroup_base, clamp(workgroup_base, _GLF_IDENTITY(workgroup_base, max(workgroup_base, workgroup_base)), workgroup_base)))) | 0u)))) - (0u << _GLF_IDENTITY(uint(3u), uint(3u)))) + subgroup_base))) + 0u)) << 0u) + ((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) >> _GLF_IDENTITY(0u, max(0u, 0u))), (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + _GLF_IDENTITY(1, max(1, 1))) >> 0u), (_GLF_IDENTITY(subgroup_local_id + 1, (_GLF_IDENTITY(subgroup_local_id + 1, min(subgroup_local_id + 1, subgroup_local_id + 1))) >> 0u)) | (_GLF_IDENTITY(0u | 0u, (0u | 0u) * 1u)))) ^ 0u)) % subgroup_size);
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 uint read = 0;
 atomicStore(buf[next_virtual_gid], _GLF_IDENTITY(uint(1), ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (uint(1)), (~ (uint(1))) ^ 0u), _GLF_IDENTITY(0u ^ (~ (uint(1))), max(0u ^ (~ (uint(1))), 0u ^ (~ (uint(1)))))))), 4, _GLF_IDENTITY(64, 0 | (64)), 4);
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if((_GLF_IDENTITY(subgroup_local_id, ~ (~ (subgroup_local_id))) % 2) == 0)
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (! (false))))), (false) && true)))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, ! (! (false))), true, false, false)))))
      barrier();
     barrier();
    }
   _GLF_IDENTITY(read = _GLF_IDENTITY(atomicLoad(buf[virtual_gid], 4, 64, 2), ~ (_GLF_IDENTITY(~ (atomicLoad(buf[virtual_gid], 4, 64, 2)), ~ (_GLF_IDENTITY(~ (~ (atomicLoad(buf[virtual_gid], 4, 64, 2))), 0u | (~ (~ (atomicLoad(buf[virtual_gid], 4, 64, 2))))))))), (read = atomicLoad(buf[virtual_gid], 4, 64, 2)) << 0u);
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(mat3x2(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)), _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(trunc(-11.48)) : 0.0)), 1.0, 1.0, 0.0))).x > injectionSwitch.y))), bool(bvec2(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat3x2(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)), _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(trunc(-11.48)) : 0.0)), 1.0, 1.0, 0.0))).x > injectionSwitch.y, false || (_GLF_IDENTITY(injectionSwitch, vec2(mat3x2(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)), _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(trunc(_GLF_IDENTITY(-11.48, (-11.48) + 0.0))) : 0.0)), 1.0, 1.0, 0.0))).x > injectionSwitch.y))))), true))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mix(vec2(_GLF_FUZZED(_GLF_IDENTITY(9.6, mix(float(9.6), float(_GLF_FUZZED((+ -474.773))), bool(false)))), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-91.30)), bvec2(true, false)), (mix(vec2(_GLF_FUZZED(_GLF_IDENTITY(9.6, mix(float(9.6), float(_GLF_FUZZED((+ -474.773))), bool(false)))), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-91.30)), bvec2(true, false))) / vec2(1.0, 1.0))).x) * cos(_GLF_IDENTITY(dot(vec3(_GLF_IDENTITY(1.0, 1.0 * (1.0)), 1.0, 1.0), vec3(0.0, 0.0, 0.0)), dot(vec3(_GLF_IDENTITY(1.0, max(1.0, 1.0)), 1.0, 1.0), vec3(0.0, 0.0, 0.0))))), min(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mix(vec2(_GLF_FUZZED(_GLF_IDENTITY(9.6, mix(float(9.6), float(_GLF_FUZZED((+ -474.773))), bool(false)))), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-91.30)), bvec2(true, false)), (mix(vec2(_GLF_FUZZED(_GLF_IDENTITY(9.6, mix(float(9.6), float(_GLF_FUZZED((+ -474.773))), bool(false)))), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-91.30)), bvec2(true, false))) / vec2(1.0, 1.0))).x) * cos(_GLF_IDENTITY(dot(vec3(_GLF_IDENTITY(1.0, 1.0 * (1.0)), 1.0, 1.0), vec3(0.0, 0.0, 0.0)), dot(vec3(_GLF_IDENTITY(1.0, max(1.0, 1.0)), 1.0, 1.0), vec3(0.0, 0.0, 0.0))))), (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mix(vec2(_GLF_FUZZED(_GLF_IDENTITY(9.6, mix(float(9.6), float(_GLF_FUZZED((+ -474.773))), bool(false)))), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-91.30)), bvec2(true, false)), (mix(vec2(_GLF_FUZZED(_GLF_IDENTITY(9.6, mix(float(9.6), float(_GLF_FUZZED((+ -474.773))), bool(false)))), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-91.30)), bvec2(true, false))) / vec2(1.0, 1.0))).x) * cos(_GLF_IDENTITY(dot(vec3(_GLF_IDENTITY(1.0, 1.0 * (1.0)), 1.0, 1.0), vec3(0.0, 0.0, 0.0)), dot(vec3(_GLF_IDENTITY(1.0, max(1.0, 1.0)), 1.0, 1.0), vec3(0.0, 0.0, 0.0)))))) * 1.0), _GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mix(vec2(_GLF_FUZZED(_GLF_IDENTITY(9.6, mix(float(9.6), float(_GLF_FUZZED((+ -474.773))), bool(false)))), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-91.30)), bvec2(true, false)), (mix(vec2(_GLF_FUZZED(_GLF_IDENTITY(9.6, mix(float(9.6), float(_GLF_FUZZED((+ -474.773))), bool(false)))), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-91.30)), bvec2(true, false))) / vec2(1.0, 1.0))).x) * cos(_GLF_IDENTITY(dot(vec3(_GLF_IDENTITY(1.0, 1.0 * (1.0)), 1.0, 1.0), vec3(0.0, 0.0, 0.0)), dot(vec3(_GLF_IDENTITY(1.0, max(1.0, 1.0)), 1.0, 1.0), vec3(0.0, 0.0, 0.0))))))) > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], clamp(_GLF_IDENTITY(injectionSwitch[0], max(injectionSwitch[0], injectionSwitch[0])), injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[0], min(injectionSwitch[0], injectionSwitch[0])))), injectionSwitch[1])), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(injectionSwitch) : _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], clamp(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch[0], max(injectionSwitch[0], injectionSwitch[0])), max(injectionSwitch[0], injectionSwitch[0])), injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[0], min(injectionSwitch[0], injectionSwitch[0])))), injectionSwitch[1])))).y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y, ! (! (injectionSwitch.x > injectionSwitch.y)))))), false || (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y, ! (! (injectionSwitch.x > injectionSwitch.y)))))), bool(_GLF_IDENTITY(bvec3(! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y, ! (! (injectionSwitch.x > injectionSwitch.y)))))), false, true), bvec3(bvec4(bvec3(! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y, ! (! (injectionSwitch.x > injectionSwitch.y)))))), false, true), true)))))))))))))
    barrier();
   _GLF_IDENTITY(read = atomicLoad(buf[virtual_gid], 4, 64, 2), (0u << _GLF_IDENTITY(_GLF_IDENTITY(uint(6u), clamp(_GLF_IDENTITY(uint(6u), uint(uvec2(_GLF_IDENTITY(uint(6u), ~ (~ (_GLF_IDENTITY(uint(6u), 0u ^ (uint(6u)))))), 1u))), uint(6u), _GLF_IDENTITY(uint(6u), clamp(uint(6u), _GLF_IDENTITY(uint(6u), max(uint(6u), uint(6u))), uint(6u))))), uint(6u))) | (read = atomicLoad(buf[virtual_gid], 4, 64, 2)));
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 subgroupBarrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 atomicStore(checker[virtual_gid], read, 4, 64, 4);
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) && true)))))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! _GLF_IDENTITY((! _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec4(bvec2(false, true), true, true))), bvec2(bvec3(bvec2(false, true), true))))), ! (! _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec4(bvec2(false, true), true, true))), bvec2(bvec3(_GLF_IDENTITY(bvec2(false, true), _GLF_IDENTITY(bvec2(bvec4(_GLF_IDENTITY(bvec2(false, true), _GLF_IDENTITY(bvec2(bvec3(bvec2(false, true), true)), bvec2(bvec4(bvec2(bvec3(bvec2(false, true), true)), false, false)))), false, true)), bvec2(bvec3(bvec2(bvec4(_GLF_IDENTITY(bvec2(false, true), _GLF_IDENTITY(bvec2(bvec3(bvec2(false, true), _GLF_IDENTITY(true, ! (! (true))))), bvec2(bvec4(bvec2(bvec3(bvec2(false, true), true)), false, false)))), false, true)), true)))), true))))), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec4(bvec2(false, true), true, true))), bvec2(bvec3(bvec2(false, true), true)))), bool(bvec4(bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec4(bvec2(false, true), true, true))), bvec2(bvec3(bvec2(false, true), true)))), true, false, true)))), (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec4(bvec2(false, true), true, true))), bvec2(bvec3(bvec2(false, true), true)))))) && true)), (bool(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec4(bvec2(false, true), true, true))), bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec4(bvec2(false, true), true, true)))), bvec2(bvec4(bvec2(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec4(bvec2(false, true), true, true)))), true, false))))), bvec2(bvec3(bvec2(false, true), true))))), _GLF_IDENTITY((_GLF_IDENTITY(false, bool(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec4(bvec2(false, true), true, true))), bvec2(bvec3(bvec2(false, true), true))), bvec2(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec4(bvec2(false, true), true, true))), bvec2(bvec3(bvec2(false, true), true))), true)))))), ! (! ((_GLF_IDENTITY(false, bool(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec4(bvec2(false, true), true, true))), bvec2(bvec3(bvec2(false, true), true))), bvec2(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec4(bvec2(false, true), true, true))), bvec2(bvec3(bvec2(false, true), true))), true))))))))) && true))) || false)))), false || ((_GLF_IDENTITY(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec4(bvec2(false, true), true, true))), bvec2(bvec3(_GLF_IDENTITY(bvec2(false, true), _GLF_IDENTITY(bvec2(bvec4(_GLF_IDENTITY(bvec2(false, true), _GLF_IDENTITY(bvec2(bvec3(bvec2(false, true), true)), bvec2(bvec4(bvec2(bvec3(bvec2(false, true), true)), false, false)))), false, true)), bvec2(bvec3(bvec2(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec4(bvec2(false, true), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), _GLF_IDENTITY(bvec2(bvec3(bvec2(false, true), true)), bvec2(bvec4(bvec2(bvec3(bvec2(false, true), true)), false, false)))), false, true)), true)))), true))))), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec4(bvec2(false, true), true, true))), bvec2(bvec3(bvec2(false, true), true)))), bool(bvec4(bool(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec4(bvec2(false, true), true, true))), bvec2(bvec3(bvec2(false, true), true))), bvec2(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec4(bvec2(false, true), true, true))), bvec2(bvec3(bvec2(false, true), true))), false)))), _GLF_IDENTITY(true, ! (! (true))), false, true)))), (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec4(bvec2(false, true), true, true))), bvec2(bvec3(bvec2(false, true), true)))))) && true)), (bool(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec4(bvec2(false, true), true, true))), bvec2(bvec3(bvec2(_GLF_IDENTITY(false, ! (! (false))), true), true))))), (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec4(bvec2(false, true), true, true))), _GLF_IDENTITY(bvec2(bvec3(bvec2(false, true), true)), bvec2(bvec4(bvec2(bvec3(bvec2(false, true), true)), false, false))))), ! (_GLF_IDENTITY(! (bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec4(bvec2(false, true), true, true))), _GLF_IDENTITY(bvec2(bvec3(bvec2(false, true), true)), bvec2(bvec4(bvec2(bvec3(bvec2(false, true), true)), false, false)))))), ! (! (_GLF_IDENTITY(! (bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec4(bvec2(false, true), true, true))), _GLF_IDENTITY(bvec2(bvec3(bvec2(false, true), true)), bvec2(bvec4(bvec2(bvec3(bvec2(false, true), true)), false, false)))))), ! (! (! (bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec4(bvec2(false, true), true, true))), _GLF_IDENTITY(bvec2(bvec3(bvec2(false, true), true)), bvec2(bvec4(bvec2(bvec3(bvec2(false, true), true)), false, false)))))))))))))))) && true))) || false))))))))), _GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, false, false, false)), (bool(bvec4(false, false, false, false))) || false)) || ((_GLF_IDENTITY(false, bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec4(bvec2(false, true), true, true))), bvec2(bvec3(bvec2(false, _GLF_IDENTITY(true, (true) && true)), true))))))))), ! (! ((_GLF_IDENTITY(! _GLF_IDENTITY((_GLF_IDENTITY(false, bool(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec3(bvec2(false, true), true))), bvec2(bvec4(bvec2(false, true), true, true))), bvec2(bvec3(bvec2(false, true), true)))))), _GLF_IDENTITY(false, bool(bvec4(false, false, false, false))) || ((_GLF_IDENTITY(false, bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(false, ! (! (false))))), true), bvec2(bvec4(bvec2(false, true), true, true))), bvec2(bvec3(bvec2(false, true), true)))))))), true && (! _GLF_IDENTITY((_GLF_IDENTITY(false, bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec4(bvec2(_GLF_IDENTITY(false, (false) || false), true), true, true))), bvec2(bvec3(bvec2(_GLF_IDENTITY(false, bool(bool(false))), true), true)))))), _GLF_IDENTITY(false, bool(bvec4(false, false, false, false))) || ((_GLF_IDENTITY(false, bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, (false) && true), true), bvec2(bvec4(bvec2(false, true), true, true))), bvec2(bvec3(bvec2(false, true), true)))))))))))))))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   barrier();
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END
BUFFER checker DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected_checker DATA_TYPE uint32 SIZE 8388096 FILL 1

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 
  BIND BUFFER checker AS storage DESCRIPTOR_SET 0 BINDING 2 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT checker EQ_BUFFER expected_checker
