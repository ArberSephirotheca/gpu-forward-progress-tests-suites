#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_0 {
 uvec4 _f0;
 vec4 _f1;
 uvec2 _f2;
 int _f3;
 bool _f4;
 bvec2 _f5;
} ;

struct _GLF_struct_1 {
 _GLF_struct_0 _f0;
 vec2 _f1;
} ;

struct _GLF_struct_2 {
 uvec4 _f0;
 mat3x4 _f1;
 uvec4 _f2;
 float _f3;
 float _f4;
 _GLF_struct_1 _f5;
 uint subgroup_size;
 mat3x4 _f6;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       barrier();
      }
     barrier();
    }
   return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), (mat2(1.0) * (injectionSwitch)) * vec2(1.0, 1.0))).y))))
    return;
  }
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(false))
  return;
 _GLF_struct_2 _GLF_struct_replacement_2 = _GLF_struct_2(uvec4(1u), mat3x4(1.0), uvec4(1u), 1.0, _GLF_IDENTITY(1.0, max(1.0, 1.0)), _GLF_struct_1(_GLF_struct_0(uvec4(1u), vec4(1.0), _GLF_IDENTITY(uvec2(_GLF_IDENTITY(_GLF_IDENTITY(1u, _GLF_IDENTITY((1u) << 0u, clamp(_GLF_IDENTITY((1u), ((1u)) | (_GLF_IDENTITY(0u << _GLF_IDENTITY(_GLF_IDENTITY(uint(4u), ~ (~ (uint(4u)))), uint(4u)), 0u | (0u << _GLF_IDENTITY(uint(4u), uint(4u)))))) << 0u, (1u) << 0u, (1u) << 0u))), (false ? _GLF_FUZZED(subgroup_id) : _GLF_IDENTITY(1u, _GLF_IDENTITY((1u) << 0u, clamp(_GLF_IDENTITY((1u), ((1u)) | (_GLF_IDENTITY(0u << _GLF_IDENTITY(uint(4u), uint(4u)), _GLF_IDENTITY(0u, max(0u, 0u)) | (0u << _GLF_IDENTITY(uint(4u), uint(4u)))))) << 0u, (1u) << 0u, (1u) << _GLF_IDENTITY(0u, min(0u, 0u)))))))), _GLF_IDENTITY(uvec2(_GLF_IDENTITY(uvec4(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(1u, _GLF_IDENTITY((1u) << 0u, ((1u) << 0u) - 0u))), max(uvec2(_GLF_IDENTITY(1u, (1u) << 0u)), _GLF_IDENTITY(uvec2(_GLF_IDENTITY(1u, (1u) << 0u)), uvec2(_GLF_IDENTITY(_GLF_IDENTITY(uvec2(uvec2(_GLF_IDENTITY(1u, (1u) << 0u))), clamp(uvec2(uvec2(_GLF_IDENTITY(1u, _GLF_IDENTITY((1u), uint(_GLF_ZERO(0.0, injectionSwitch.x)) ^ ((1u))) << 0u))), uvec2(uvec2(_GLF_IDENTITY(1u, (1u) << 0u))), _GLF_IDENTITY(uvec2(uvec2(_GLF_IDENTITY(1u, (1u) << 0u))), uvec2(uvec3(uvec2(uvec2(_GLF_IDENTITY(1u, (1u) << 0u))), 0u))))), (uvec2(uvec2(_GLF_IDENTITY(_GLF_IDENTITY(1u, (1u) << 0u), 0u | (_GLF_IDENTITY(1u, (1u) << 0u)))))) / uvec2(1u, 1u)))))), 1u, _GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, min(1u, 1u))) << 0u)) | (1u))), min(_GLF_IDENTITY(uvec4(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(1u, _GLF_IDENTITY(_GLF_IDENTITY((1u) << 0u, ((1u) << 0u) - _GLF_IDENTITY(0u, (0u) >> 0u)), (_GLF_IDENTITY((1u) << 0u, ((1u) << 0u) - 0u)) << 0u))), max(uvec2(_GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, (0u << _GLF_IDENTITY(uint(1u), uint(1u))) | (1u))) << 0u)), _GLF_IDENTITY(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(1u, (1u) << 0u)), uvec2(_GLF_IDENTITY(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(1u, (1u) << _GLF_IDENTITY(0u, (0u >> _GLF_IDENTITY(uint(2u), uint(2u))) | (0u)))), clamp(uvec2(_GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec4(1u, 1u, 0u, uint(_GLF_ONE(1.0, injectionSwitch.y))), ~ (~ (uvec4(1u, 1u, 0u, uint(_GLF_ONE(1.0, injectionSwitch.y))))))), (false ? _GLF_FUZZED(subgroup_id) : _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec4(1u, 1u, 0u, uint(_GLF_ONE(1.0, injectionSwitch.y))), ~ (~ (uvec4(1u, 1u, 0u, uint(_GLF_ONE(1.0, injectionSwitch.y))))))), 0u ^ (uint(_GLF_IDENTITY(uvec4(1u, 1u, 0u, uint(_GLF_ONE(1.0, injectionSwitch.y))), ~ (~ (uvec4(1u, 1u, 0u, uint(_GLF_ONE(1.0, injectionSwitch.y))))))))))))) << _GLF_IDENTITY(0u, (0u >> _GLF_IDENTITY(uint(2u), uint(2u))) | (0u)))), uvec2(_GLF_IDENTITY(1u, _GLF_IDENTITY((1u), uint(uvec4((1u), 0u, 0u, uint(_GLF_ONE(1.0, injectionSwitch.y))))) << _GLF_IDENTITY(0u, (0u >> _GLF_IDENTITY(_GLF_IDENTITY(uint(2u), uint(2u)), 0u + (_GLF_IDENTITY(uint(2u), _GLF_IDENTITY(uint(2u), clamp(uint(2u), uint(2u), _GLF_IDENTITY(uint(2u), min(uint(2u), uint(2u))))))))) | (0u)))), uvec2(_GLF_IDENTITY(1u, (1u) << _GLF_IDENTITY(0u, (0u >> _GLF_IDENTITY(uint(2u), uint(2u))) | (0u))))))), clamp(uvec2(uvec2(_GLF_IDENTITY(_GLF_IDENTITY(1u, (1u) << 0u), max(_GLF_IDENTITY(1u, (1u) << 0u), _GLF_IDENTITY(_GLF_IDENTITY(1u, (1u) << 0u), (_GLF_IDENTITY(1u, (1u) << 0u)) ^ 0u))))), uvec2(uvec2(_GLF_IDENTITY(1u, (1u) << 0u))), uvec2(uvec2(_GLF_IDENTITY(1u, _GLF_IDENTITY((1u) << 0u, ((1u) << 0u) | 0u)))))), _GLF_IDENTITY((uvec2(uvec2(_GLF_IDENTITY(1u, (1u) << 0u)))) / uvec2(1u, 1u), ~ (_GLF_IDENTITY(~ ((uvec2(uvec2(_GLF_IDENTITY(1u, (1u) << 0u)))) / uvec2(1u, 1u)), (_GLF_IDENTITY(~ ((uvec2(uvec2(_GLF_IDENTITY(1u, (1u) << 0u)))) / uvec2(1u, 1u)), (~ (_GLF_IDENTITY((uvec2(uvec2(_GLF_IDENTITY(1u, (1u) << 0u)))) / uvec2(1u, 1u), ((uvec2(uvec2(_GLF_IDENTITY(1u, (1u) << 0u)))) / uvec2(1u, 1u)) - uvec2(0u, 0u)))) / uvec2(1u, 1u))) / uvec2(1u, 1u))))))), uvec2(_GLF_IDENTITY(uvec3(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(1u, (1u) << 0u)), uvec2(_GLF_IDENTITY(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(1u, (1u) << _GLF_IDENTITY(0u, (0u >> _GLF_IDENTITY(uint(2u), uint(2u))) | (0u)))), clamp(uvec2(_GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec4(1u, 1u, 0u, uint(_GLF_ONE(1.0, injectionSwitch.y))), ~ (~ (uvec4(1u, 1u, 0u, uint(_GLF_ONE(1.0, injectionSwitch.y))))))), (false ? _GLF_FUZZED(subgroup_id) : _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec4(1u, 1u, 0u, uint(_GLF_ONE(1.0, injectionSwitch.y))), ~ (~ (uvec4(1u, 1u, 0u, uint(_GLF_ONE(1.0, injectionSwitch.y))))))), 0u ^ (uint(_GLF_IDENTITY(uvec4(1u, 1u, 0u, uint(_GLF_ONE(1.0, injectionSwitch.y))), ~ (~ (uvec4(1u, 1u, 0u, uint(_GLF_ONE(1.0, injectionSwitch.y))))))))))))) << _GLF_IDENTITY(0u, (0u >> _GLF_IDENTITY(uint(2u), uint(2u))) | (0u)))), uvec2(_GLF_IDENTITY(1u, _GLF_IDENTITY((1u), uint(uvec4((1u), 0u, 0u, uint(_GLF_ONE(1.0, injectionSwitch.y))))) << _GLF_IDENTITY(0u, (0u >> _GLF_IDENTITY(_GLF_IDENTITY(uint(2u), uint(2u)), 0u + (_GLF_IDENTITY(uint(2u), _GLF_IDENTITY(uint(2u), clamp(uint(2u), uint(2u), _GLF_IDENTITY(uint(2u), min(uint(2u), uint(2u))))))))) | (0u)))), uvec2(_GLF_IDENTITY(1u, (1u) << _GLF_IDENTITY(0u, (0u >> _GLF_IDENTITY(uint(2u), uint(2u))) | (0u))))))), clamp(uvec2(uvec2(_GLF_IDENTITY(_GLF_IDENTITY(1u, (1u) << 0u), max(_GLF_IDENTITY(1u, (1u) << 0u), _GLF_IDENTITY(_GLF_IDENTITY(1u, (1u) << 0u), (_GLF_IDENTITY(1u, (1u) << 0u)) ^ 0u))))), uvec2(uvec2(_GLF_IDENTITY(1u, (1u) << 0u))), uvec2(uvec2(_GLF_IDENTITY(1u, _GLF_IDENTITY((1u) << 0u, ((1u) << 0u) | 0u)))))), _GLF_IDENTITY((uvec2(uvec2(_GLF_IDENTITY(1u, (1u) << 0u)))) / uvec2(1u, 1u), ~ (_GLF_IDENTITY(~ ((uvec2(uvec2(_GLF_IDENTITY(1u, (1u) << 0u)))) / uvec2(1u, 1u)), (_GLF_IDENTITY(~ ((uvec2(uvec2(_GLF_IDENTITY(1u, (1u) << 0u)))) / uvec2(1u, 1u)), (~ (_GLF_IDENTITY((uvec2(uvec2(_GLF_IDENTITY(1u, (1u) << 0u)))) / uvec2(1u, 1u), ((uvec2(uvec2(_GLF_IDENTITY(1u, (1u) << 0u)))) / uvec2(1u, 1u)) - uvec2(0u, 0u)))) / uvec2(1u, 1u))) / uvec2(1u, 1u))))))), 0u), (_GLF_IDENTITY(uvec3(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(1u, (1u) << 0u)), uvec2(_GLF_IDENTITY(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(1u, (1u) << _GLF_IDENTITY(0u, (0u >> _GLF_IDENTITY(uint(2u), uint(2u))) | (0u)))), clamp(uvec2(_GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec4(1u, 1u, 0u, uint(_GLF_ONE(1.0, injectionSwitch.y))), ~ (~ (uvec4(1u, 1u, 0u, uint(_GLF_ONE(1.0, injectionSwitch.y))))))), (false ? _GLF_FUZZED(subgroup_id) : _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec4(1u, 1u, 0u, uint(_GLF_ONE(1.0, injectionSwitch.y))), ~ (~ (uvec4(1u, 1u, 0u, uint(_GLF_ONE(1.0, injectionSwitch.y))))))), 0u ^ (uint(_GLF_IDENTITY(uvec4(1u, 1u, 0u, uint(_GLF_ONE(1.0, injectionSwitch.y))), ~ (~ (uvec4(1u, 1u, 0u, uint(_GLF_ONE(1.0, injectionSwitch.y))))))))))))) << _GLF_IDENTITY(0u, (0u >> _GLF_IDENTITY(uint(2u), uint(2u))) | (0u)))), uvec2(_GLF_IDENTITY(1u, _GLF_IDENTITY((1u), uint(uvec4((1u), 0u, 0u, uint(_GLF_ONE(1.0, injectionSwitch.y))))) << _GLF_IDENTITY(0u, (0u >> _GLF_IDENTITY(_GLF_IDENTITY(uint(2u), uint(2u)), 0u + (_GLF_IDENTITY(uint(2u), _GLF_IDENTITY(uint(2u), clamp(uint(2u), uint(2u), _GLF_IDENTITY(uint(2u), min(uint(2u), uint(2u))))))))) | (0u)))), uvec2(_GLF_IDENTITY(1u, (1u) << _GLF_IDENTITY(0u, (0u >> _GLF_IDENTITY(uint(2u), uint(2u))) | (0u))))))), clamp(uvec2(uvec2(_GLF_IDENTITY(_GLF_IDENTITY(1u, (1u) << 0u), max(_GLF_IDENTITY(1u, (1u) << 0u), _GLF_IDENTITY(_GLF_IDENTITY(1u, (1u) << 0u), (_GLF_IDENTITY(1u, (1u) << 0u)) ^ 0u))))), uvec2(uvec2(_GLF_IDENTITY(1u, (1u) << 0u))), uvec2(uvec2(_GLF_IDENTITY(1u, _GLF_IDENTITY((1u) << 0u, ((1u) << 0u) | 0u)))))), _GLF_IDENTITY((uvec2(uvec2(_GLF_IDENTITY(1u, (1u) << 0u)))) / uvec2(1u, 1u), ~ (_GLF_IDENTITY(~ ((uvec2(uvec2(_GLF_IDENTITY(1u, (1u) << 0u)))) / uvec2(1u, 1u)), (_GLF_IDENTITY(~ ((uvec2(uvec2(_GLF_IDENTITY(1u, (1u) << 0u)))) / uvec2(1u, 1u)), (~ (_GLF_IDENTITY((uvec2(uvec2(_GLF_IDENTITY(1u, (1u) << 0u)))) / uvec2(1u, 1u), ((uvec2(uvec2(_GLF_IDENTITY(1u, (1u) << 0u)))) / uvec2(1u, 1u)) - uvec2(0u, 0u)))) / uvec2(1u, 1u))) / uvec2(1u, 1u))))))), 0u), clamp(uvec3(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(1u, (1u) << 0u)), uvec2(_GLF_IDENTITY(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(1u, (1u) << _GLF_IDENTITY(0u, (0u >> _GLF_IDENTITY(uint(2u), uint(2u))) | (0u)))), clamp(uvec2(_GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec4(1u, 1u, 0u, uint(_GLF_ONE(1.0, injectionSwitch.y))), ~ (~ (uvec4(1u, 1u, 0u, uint(_GLF_ONE(1.0, injectionSwitch.y))))))), (false ? _GLF_FUZZED(subgroup_id) : _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec4(1u, 1u, 0u, uint(_GLF_ONE(1.0, injectionSwitch.y))), ~ (~ (uvec4(1u, 1u, 0u, uint(_GLF_ONE(1.0, injectionSwitch.y))))))), 0u ^ (uint(_GLF_IDENTITY(uvec4(1u, 1u, 0u, uint(_GLF_ONE(1.0, injectionSwitch.y))), ~ (~ (uvec4(1u, 1u, 0u, uint(_GLF_ONE(1.0, injectionSwitch.y))))))))))))) << _GLF_IDENTITY(0u, (0u >> _GLF_IDENTITY(uint(2u), uint(2u))) | (0u)))), uvec2(_GLF_IDENTITY(1u, _GLF_IDENTITY((1u), uint(uvec4((1u), 0u, 0u, uint(_GLF_ONE(1.0, injectionSwitch.y))))) << _GLF_IDENTITY(0u, (0u >> _GLF_IDENTITY(_GLF_IDENTITY(uint(2u), uint(2u)), 0u + (_GLF_IDENTITY(uint(2u), _GLF_IDENTITY(uint(2u), clamp(uint(2u), uint(2u), _GLF_IDENTITY(uint(2u), min(uint(2u), uint(2u))))))))) | (0u)))), uvec2(_GLF_IDENTITY(1u, (1u) << _GLF_IDENTITY(0u, (0u >> _GLF_IDENTITY(uint(2u), uint(2u))) | (0u))))))), clamp(uvec2(uvec2(_GLF_IDENTITY(_GLF_IDENTITY(1u, (1u) << 0u), max(_GLF_IDENTITY(1u, (1u) << 0u), _GLF_IDENTITY(_GLF_IDENTITY(1u, (1u) << 0u), (_GLF_IDENTITY(1u, (1u) << 0u)) ^ 0u))))), uvec2(uvec2(_GLF_IDENTITY(1u, (1u) << 0u))), uvec2(uvec2(_GLF_IDENTITY(1u, _GLF_IDENTITY((1u) << 0u, ((1u) << 0u) | 0u)))))), _GLF_IDENTITY((uvec2(uvec2(_GLF_IDENTITY(1u, (1u) << 0u)))) / uvec2(1u, 1u), ~ (_GLF_IDENTITY(~ ((uvec2(uvec2(_GLF_IDENTITY(1u, (1u) << 0u)))) / uvec2(1u, 1u)), (_GLF_IDENTITY(~ ((uvec2(uvec2(_GLF_IDENTITY(1u, (1u) << 0u)))) / uvec2(1u, 1u)), (~ (_GLF_IDENTITY((uvec2(uvec2(_GLF_IDENTITY(1u, (1u) << 0u)))) / uvec2(1u, 1u), ((uvec2(uvec2(_GLF_IDENTITY(1u, (1u) << 0u)))) / uvec2(1u, 1u)) - uvec2(0u, 0u)))) / uvec2(1u, 1u))) / uvec2(1u, 1u))))))), 0u), uvec3(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(1u, (1u) << 0u)), uvec2(_GLF_IDENTITY(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(1u, (1u) << _GLF_IDENTITY(0u, (0u >> _GLF_IDENTITY(uint(2u), uint(2u))) | (0u)))), clamp(uvec2(_GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec4(1u, 1u, 0u, uint(_GLF_ONE(1.0, injectionSwitch.y))), ~ (~ (uvec4(1u, 1u, 0u, uint(_GLF_ONE(1.0, injectionSwitch.y))))))), (false ? _GLF_FUZZED(subgroup_id) : _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec4(1u, 1u, 0u, uint(_GLF_ONE(1.0, injectionSwitch.y))), ~ (~ (uvec4(1u, 1u, 0u, uint(_GLF_ONE(1.0, injectionSwitch.y))))))), 0u ^ (uint(_GLF_IDENTITY(uvec4(1u, 1u, 0u, uint(_GLF_ONE(1.0, injectionSwitch.y))), ~ (~ (uvec4(1u, 1u, 0u, uint(_GLF_ONE(1.0, injectionSwitch.y))))))))))))) << _GLF_IDENTITY(0u, (0u >> _GLF_IDENTITY(uint(2u), uint(2u))) | (0u)))), uvec2(_GLF_IDENTITY(1u, _GLF_IDENTITY((1u), uint(uvec4((1u), 0u, 0u, uint(_GLF_ONE(1.0, injectionSwitch.y))))) << _GLF_IDENTITY(0u, (0u >> _GLF_IDENTITY(_GLF_IDENTITY(uint(2u), uint(2u)), 0u + (_GLF_IDENTITY(uint(2u), _GLF_IDENTITY(uint(2u), clamp(uint(2u), uint(2u), _GLF_IDENTITY(uint(2u), min(uint(2u), uint(2u))))))))) | (0u)))), uvec2(_GLF_IDENTITY(1u, (1u) << _GLF_IDENTITY(0u, (0u >> _GLF_IDENTITY(uint(2u), uint(2u))) | (0u))))))), clamp(uvec2(uvec2(_GLF_IDENTITY(_GLF_IDENTITY(1u, (1u) << 0u), max(_GLF_IDENTITY(1u, (1u) << 0u), _GLF_IDENTITY(_GLF_IDENTITY(1u, (1u) << 0u), (_GLF_IDENTITY(1u, (1u) << 0u)) ^ 0u))))), uvec2(uvec2(_GLF_IDENTITY(1u, (1u) << 0u))), uvec2(uvec2(_GLF_IDENTITY(1u, _GLF_IDENTITY((1u) << 0u, ((1u) << 0u) | 0u)))))), _GLF_IDENTITY((uvec2(uvec2(_GLF_IDENTITY(1u, (1u) << 0u)))) / uvec2(1u, 1u), ~ (_GLF_IDENTITY(~ ((uvec2(uvec2(_GLF_IDENTITY(1u, (1u) << 0u)))) / uvec2(1u, 1u)), (_GLF_IDENTITY(~ ((uvec2(uvec2(_GLF_IDENTITY(1u, (1u) << 0u)))) / uvec2(1u, 1u)), (~ (_GLF_IDENTITY((uvec2(uvec2(_GLF_IDENTITY(1u, (1u) << 0u)))) / uvec2(1u, 1u), ((uvec2(uvec2(_GLF_IDENTITY(1u, (1u) << 0u)))) / uvec2(1u, 1u)) - uvec2(0u, 0u)))) / uvec2(1u, 1u))) / uvec2(1u, 1u))))))), 0u), uvec3(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(1u, (1u) << 0u)), uvec2(_GLF_IDENTITY(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(1u, (1u) << _GLF_IDENTITY(0u, (0u >> _GLF_IDENTITY(uint(2u), uint(2u))) | (0u)))), clamp(uvec2(_GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec4(1u, 1u, 0u, uint(_GLF_ONE(1.0, injectionSwitch.y))), ~ (~ (uvec4(1u, 1u, 0u, uint(_GLF_ONE(1.0, injectionSwitch.y))))))), (false ? _GLF_FUZZED(subgroup_id) : _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec4(1u, 1u, 0u, uint(_GLF_ONE(1.0, injectionSwitch.y))), ~ (~ (uvec4(1u, 1u, 0u, uint(_GLF_ONE(1.0, injectionSwitch.y))))))), 0u ^ (uint(_GLF_IDENTITY(uvec4(1u, 1u, 0u, uint(_GLF_ONE(1.0, injectionSwitch.y))), ~ (~ (uvec4(1u, 1u, 0u, uint(_GLF_ONE(1.0, injectionSwitch.y))))))))))))) << _GLF_IDENTITY(0u, (0u >> _GLF_IDENTITY(uint(2u), uint(2u))) | (0u)))), uvec2(_GLF_IDENTITY(1u, _GLF_IDENTITY((1u), uint(uvec4((1u), 0u, 0u, uint(_GLF_ONE(1.0, injectionSwitch.y))))) << _GLF_IDENTITY(0u, (0u >> _GLF_IDENTITY(_GLF_IDENTITY(uint(2u), uint(2u)), 0u + (_GLF_IDENTITY(uint(2u), _GLF_IDENTITY(uint(2u), clamp(uint(2u), uint(2u), _GLF_IDENTITY(uint(2u), min(uint(2u), uint(2u))))))))) | (0u)))), uvec2(_GLF_IDENTITY(1u, (1u) << _GLF_IDENTITY(0u, (0u >> _GLF_IDENTITY(uint(2u), uint(2u))) | (0u))))))), clamp(uvec2(uvec2(_GLF_IDENTITY(_GLF_IDENTITY(1u, (1u) << 0u), max(_GLF_IDENTITY(1u, (1u) << 0u), _GLF_IDENTITY(_GLF_IDENTITY(1u, (1u) << 0u), (_GLF_IDENTITY(1u, (1u) << 0u)) ^ 0u))))), uvec2(uvec2(_GLF_IDENTITY(1u, (1u) << 0u))), uvec2(uvec2(_GLF_IDENTITY(1u, _GLF_IDENTITY((1u) << 0u, ((1u) << 0u) | 0u)))))), _GLF_IDENTITY((uvec2(uvec2(_GLF_IDENTITY(1u, (1u) << 0u)))) / uvec2(1u, 1u), ~ (_GLF_IDENTITY(~ ((uvec2(uvec2(_GLF_IDENTITY(1u, (1u) << 0u)))) / uvec2(1u, 1u)), (_GLF_IDENTITY(~ ((uvec2(uvec2(_GLF_IDENTITY(1u, (1u) << 0u)))) / uvec2(1u, 1u)), (~ (_GLF_IDENTITY((uvec2(uvec2(_GLF_IDENTITY(1u, (1u) << 0u)))) / uvec2(1u, 1u), ((uvec2(uvec2(_GLF_IDENTITY(1u, (1u) << 0u)))) / uvec2(1u, 1u)) - uvec2(0u, 0u)))) / uvec2(1u, 1u))) / uvec2(1u, 1u))))))), 0u)))) - uvec3(0u, 0u, 0u)))))), 1u, 1u), (uvec4(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(1u, _GLF_IDENTITY(_GLF_IDENTITY((1u) << 0u, ((1u) << 0u) - 0u), (_GLF_IDENTITY((1u) << 0u, _GLF_IDENTITY(((1u) << 0u), (((1u) << 0u)) / 1u) - 0u)) << 0u))), max(uvec2(_GLF_IDENTITY(1u, (1u) << 0u)), _GLF_IDENTITY(uvec2(_GLF_IDENTITY(1u, (1u) << 0u)), uvec2(_GLF_IDENTITY(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(1u, (1u) << _GLF_IDENTITY(0u, (0u >> _GLF_IDENTITY(uint(2u), uint(2u))) | (0u)))), clamp(uvec2(_GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec4(1u, 1u, 0u, uint(_GLF_ONE(1.0, injectionSwitch.y))), ~ (~ (uvec4(1u, 1u, 0u, uint(_GLF_ONE(1.0, injectionSwitch.y))))))), (false ? _GLF_FUZZED(subgroup_id) : _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec4(1u, 1u, 0u, uint(_GLF_ONE(1.0, injectionSwitch.y))), ~ (~ (uvec4(1u, 1u, _GLF_IDENTITY(0u, (0u) >> 0u), uint(_GLF_ONE(1.0, injectionSwitch.y))))))), 0u ^ (uint(_GLF_IDENTITY(uvec4(1u, 1u, 0u, uint(_GLF_ONE(1.0, injectionSwitch.y))), ~ (~ (uvec4(1u, 1u, 0u, uint(_GLF_ONE(1.0, injectionSwitch.y))))))))))))) << _GLF_IDENTITY(0u, (0u >> _GLF_IDENTITY(uint(2u), uint(2u))) | (0u)))), uvec2(_GLF_IDENTITY(1u, _GLF_IDENTITY((1u), uint(uvec4((1u), 0u, 0u, uint(_GLF_ONE(1.0, injectionSwitch.y))))) << _GLF_IDENTITY(0u, (0u >> _GLF_IDENTITY(_GLF_IDENTITY(uint(2u), uint(2u)), 0u + (_GLF_IDENTITY(uint(2u), _GLF_IDENTITY(uint(2u), clamp(uint(2u), uint(2u), _GLF_IDENTITY(uint(2u), min(uint(2u), uint(2u))))))))) | (0u)))), uvec2(_GLF_IDENTITY(1u, (1u) << _GLF_IDENTITY(0u, (0u >> _GLF_IDENTITY(uint(2u), uint(2u))) | (0u))))))), clamp(uvec2(uvec2(_GLF_IDENTITY(_GLF_IDENTITY(1u, (1u) << 0u), max(_GLF_IDENTITY(1u, (1u) << 0u), _GLF_IDENTITY(_GLF_IDENTITY(1u, (1u) << 0u), (_GLF_IDENTITY(1u, (1u) << 0u)) ^ 0u))))), uvec2(uvec2(_GLF_IDENTITY(1u, (1u) << 0u))), uvec2(uvec2(_GLF_IDENTITY(1u, _GLF_IDENTITY(_GLF_IDENTITY((1u) << 0u, ((1u) << 0u) | 0u), (_GLF_IDENTITY((1u) << 0u, ((1u) << 0u) | 0u)) >> 0u)))))), _GLF_IDENTITY((uvec2(uvec2(_GLF_IDENTITY(1u, _GLF_IDENTITY((1u) << 0u, (1u ^ uint(_GLF_ONE(1.0, injectionSwitch.y))) | ((1u) << 0u)))))) / uvec2(1u, 1u), ~ (_GLF_IDENTITY(~ ((uvec2(uvec2(_GLF_IDENTITY(_GLF_IDENTITY(1u, (1u) + 0u), (1u) << 0u)))) / uvec2(1u, 1u)), (_GLF_IDENTITY(~ ((uvec2(uvec2(_GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, ~ (~ (1u)))) << 0u)))) / uvec2(1u, 1u)), (~ (_GLF_IDENTITY(_GLF_IDENTITY((uvec2(uvec2(_GLF_IDENTITY(1u, (1u) << 0u)))) / uvec2(1u, 1u), ((uvec2(uvec2(_GLF_IDENTITY(1u, (1u) << 0u)))) / uvec2(1u, 1u)) << uvec2(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))), _GLF_IDENTITY(((uvec2(uvec2(_GLF_IDENTITY(1u, (1u) << 0u)))) / uvec2(1u, 1u)) - uvec2(0u, 0u), (((uvec2(uvec2(_GLF_IDENTITY(1u, (1u) << 0u)))) / uvec2(1u, 1u)) - uvec2(0u, 0u)) / uvec2(1u, 1u))))) / uvec2(1u, 1u))) / uvec2(1u, 1u))))))))), 1u, 1u)) << uvec4(0u, 0u, 0u, 0u)), _GLF_IDENTITY(uvec4(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(1u, _GLF_IDENTITY((1u) << 0u, ((1u) << 0u) - 0u))), max(uvec2(_GLF_IDENTITY(1u, _GLF_IDENTITY((1u) << 0u, ((1u) << 0u) | 0u))), _GLF_IDENTITY(uvec2(_GLF_IDENTITY(1u, (1u) << 0u)), uvec2(_GLF_IDENTITY(_GLF_IDENTITY(uvec2(uvec2(_GLF_IDENTITY(1u, (1u) << 0u))), clamp(uvec2(uvec2(_GLF_IDENTITY(1u, (1u) << 0u))), uvec2(uvec2(_GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, uint(uvec2(1u, 1u)))) << 0u))), uvec2(uvec2(_GLF_IDENTITY(1u, (1u) << 0u))))), _GLF_IDENTITY((uvec2(uvec2(_GLF_IDENTITY(1u, (1u) << 0u)))), ((_GLF_IDENTITY(uvec2(uvec2(_GLF_IDENTITY(1u, _GLF_IDENTITY((1u) << 0u, 0u | ((1u) << 0u))))), max(uvec2(uvec2(_GLF_IDENTITY(1u, _GLF_IDENTITY((1u) << 0u, 0u | ((1u) << 0u))))), uvec2(uvec2(_GLF_IDENTITY(1u, _GLF_IDENTITY((1u) << 0u, 0u | ((1u) << 0u))))))))) ^ uvec2(0u, 0u)) / uvec2(1u, 1u)))))), 1u, _GLF_IDENTITY(1u, ((1u << _GLF_IDENTITY(uint(1u), uint(1u))) >> _GLF_IDENTITY(uint(1u), uint(1u))) * (_GLF_IDENTITY(1u, ~ (~ (1u)))))), min(_GLF_IDENTITY(uvec4(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(1u, _GLF_IDENTITY((1u) << 0u, ((_GLF_IDENTITY(1u, min(_GLF_IDENTITY(1u, _GLF_IDENTITY(0u ^ (_GLF_IDENTITY(1u, (1u) >> 0u)), max(0u ^ (_GLF_IDENTITY(1u, (1u) >> 0u)), 0u ^ (_GLF_IDENTITY(1u, _GLF_IDENTITY((1u), max((1u), _GLF_IDENTITY((1u), ((1u)) >> 0u))) >> 0u))))), 1u))) << _GLF_IDENTITY(0u, (0u) - 0u)) - 0u))), max(uvec2(_GLF_IDENTITY(1u, (1u) << 0u)), _GLF_IDENTITY(uvec2(_GLF_IDENTITY(_GLF_IDENTITY(1u, (1u) << 0u), _GLF_IDENTITY((_GLF_IDENTITY(1u, (1u) << 0u)), (false ? _GLF_FUZZED(subgroup_id) : _GLF_IDENTITY((_GLF_IDENTITY(1u, (1u) << 0u)), ((_GLF_IDENTITY(1u, (1u) << 0u))) - 0u))) | 0u)), uvec2(_GLF_IDENTITY(_GLF_IDENTITY(uvec2(uvec2(_GLF_IDENTITY(1u, (1u) << 0u))), clamp(uvec2(uvec2(_GLF_IDENTITY(1u, (1u) << 0u))), uvec2(uvec2(_GLF_IDENTITY(1u, (1u) << 0u))), _GLF_IDENTITY(uvec2(uvec2(_GLF_IDENTITY(1u, _GLF_IDENTITY((1u) << 0u, (false ? _GLF_FUZZED(21442u) : (1u) << 0u))))), uvec2(uvec4(uvec2(uvec2(_GLF_IDENTITY(1u, _GLF_IDENTITY((1u) << 0u, (false ? _GLF_FUZZED(21442u) : (1u) << 0u))))), 1u, 0u))))), (uvec2(uvec2(_GLF_IDENTITY(1u, (1u) << 0u)))) / uvec2(1u, 1u)))))), 1u, 1u), (uvec4(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(1u, _GLF_IDENTITY((1u) << 0u, _GLF_IDENTITY(((1u) << 0u) - 0u, (false ? _GLF_FUZZED((subgroup_id % 114383u)) : _GLF_IDENTITY(((1u) << 0u) - 0u, max(((1u) << 0u) - 0u, ((1u) << 0u) - 0u))))))), max(uvec2(_GLF_IDENTITY(1u, _GLF_IDENTITY((1u), uint(uint((1u)))) << 0u)), _GLF_IDENTITY(uvec2(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1u, 1u * (1u)), max(1u, _GLF_IDENTITY(1u, (1u) * 1u))), (1u) << _GLF_IDENTITY(0u, clamp(0u, 0u, 0u)))), uvec2(_GLF_IDENTITY(_GLF_IDENTITY(uvec2(uvec2(_GLF_IDENTITY(1u, (1u) << 0u))), clamp(uvec2(uvec2(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1u, min(1u, 1u)), (_GLF_IDENTITY(_GLF_IDENTITY(1u, min(1u, 1u)), (_GLF_IDENTITY(1u, min(1u, 1u))) / 1u)) + 0u), (1u) << _GLF_IDENTITY(0u, max(0u, _GLF_IDENTITY(0u, ~ (_GLF_IDENTITY(~ (0u), (~ (0u)) - 0u)))))))), uvec2(uvec2(_GLF_IDENTITY(1u, (1u) << 0u))), uvec2(uvec2(_GLF_IDENTITY(1u, (1u) << 0u))))), (uvec2(uvec2(_GLF_IDENTITY(1u, (1u) << 0u)))) / uvec2(1u, 1u)))))), 1u, _GLF_IDENTITY(1u, (1u) << (0u << _GLF_IDENTITY(uint(1u), uint(1u)))))) | (uvec4(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(1u, _GLF_IDENTITY((1u) << 0u, _GLF_IDENTITY(((1u) << 0u), (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY((1u) << 0u, (_GLF_IDENTITY((1u) << 0u, max(_GLF_IDENTITY((1u) << 0u, max((1u) << 0u, (1u) << 0u)), (1u) << 0u))) | ((1u) << 0u))), max((_GLF_IDENTITY((1u) << 0u, (_GLF_IDENTITY((1u) << 0u, max(_GLF_IDENTITY((1u) << 0u, max((1u) << 0u, (1u) << 0u)), (1u) << 0u))) | ((1u) << 0u))), _GLF_IDENTITY((_GLF_IDENTITY((1u) << 0u, (_GLF_IDENTITY((1u) << 0u, max(_GLF_IDENTITY((1u) << 0u, max((1u) << 0u, (1u) << 0u)), (1u) << 0u))) | ((1u) << 0u))), min((_GLF_IDENTITY((1u) << 0u, (_GLF_IDENTITY((1u) << 0u, max(_GLF_IDENTITY((1u) << 0u, max((1u) << 0u, (1u) << 0u)), (1u) << 0u))) | ((1u) << 0u))), (_GLF_IDENTITY((1u) << 0u, (_GLF_IDENTITY((1u) << 0u, max(_GLF_IDENTITY((1u) << 0u, max((1u) << 0u, (1u) << 0u)), (1u) << 0u))) | ((1u) << 0u))))))), (((1u) << 0u)) >> 0u)) ^ 0u) - 0u))), max(uvec2(_GLF_IDENTITY(1u, (1u) << 0u)), _GLF_IDENTITY(uvec2(_GLF_IDENTITY(1u, (1u) << _GLF_IDENTITY(0u, max(0u, 0u)))), uvec2(_GLF_IDENTITY(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(1u, (1u) << 0u)), uvec2(0u, 0u) | (uvec2(_GLF_IDENTITY(1u, (1u) << 0u))))), clamp(uvec2(uvec2(_GLF_IDENTITY(1u, (1u) << 0u))), uvec2(uvec2(_GLF_IDENTITY(1u, (1u) << 0u))), uvec2(uvec2(_GLF_IDENTITY(1u, (1u) << 0u))))), _GLF_IDENTITY((uvec2(uvec2(_GLF_IDENTITY(1u, (1u) << 0u)))), uvec2(0u, 0u) + ((uvec2(uvec2(_GLF_IDENTITY(1u, (1u) << 0u)))))) / uvec2(1u, 1u)))))), 1u, 1u))), uvec4(_GLF_IDENTITY(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(1u, _GLF_IDENTITY((1u) << 0u, _GLF_IDENTITY(((1u) << 0u), (1u & 1u) * (_GLF_IDENTITY(((1u) << 0u), (((1u) << 0u)) | 0u))) - 0u))), clamp(uvec2(_GLF_IDENTITY(1u, _GLF_IDENTITY((1u) << 0u, _GLF_IDENTITY(((1u) << 0u), (_GLF_IDENTITY(1u & 1u, (1u & 1u) - 0u)) * (_GLF_IDENTITY(((1u) << 0u), (((1u) << 0u)) | 0u))) - 0u))), uvec2(_GLF_IDENTITY(1u, _GLF_IDENTITY((1u) << 0u, _GLF_IDENTITY(((1u) << 0u), (1u & 1u) * (_GLF_IDENTITY(((1u) << 0u), (((1u) << 0u)) | 0u))) - 0u))), uvec2(_GLF_IDENTITY(1u, _GLF_IDENTITY((1u) << 0u, _GLF_IDENTITY(((1u) << 0u), (1u & 1u) * (_GLF_IDENTITY(((1u) << 0u), (((1u) << 0u)) | 0u))) - 0u))))), _GLF_IDENTITY(max(uvec2(_GLF_IDENTITY(1u, (1u) << 0u)), _GLF_IDENTITY(uvec2(_GLF_IDENTITY(1u, (1u) << 0u)), uvec2(_GLF_IDENTITY(_GLF_IDENTITY(uvec2(uvec2(_GLF_IDENTITY(1u, (1u) << 0u))), clamp(uvec2(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, ~ _GLF_IDENTITY((~ (1u)), 0u + ((~ (1u)))))) << 0u)), (_GLF_IDENTITY(uvec2(_GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, ~ _GLF_IDENTITY((~ (1u)), 0u + ((~ (1u)))))) << 0u)), (false ? _GLF_FUZZED(uvec2(110153u, 122515u)) : uvec2(_GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, ~ _GLF_IDENTITY((~ (1u)), 0u + ((~ (1u)))))) << 0u))))) * uvec2(1u, 1u))), uvec2(uvec2(_GLF_IDENTITY(1u, (1u) << _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, (0u) | (0u))) - 0u)))), uvec2(uvec2(_GLF_IDENTITY(1u, (1u) << 0u))))), (uvec2(uvec2(_GLF_IDENTITY(_GLF_IDENTITY(1u, uint(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (1u)), (1u) << 0u)))) / uvec2(1u, 1u))))), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? max(uvec2(_GLF_IDENTITY(1u, (1u) << 0u)), _GLF_IDENTITY(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(1u, (1u) << 0u)), uvec2(_GLF_IDENTITY(_GLF_IDENTITY(uvec2(uvec2(_GLF_IDENTITY(1u, (1u) << 0u))), clamp(uvec2(uvec2(_GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, ~ (~ (1u)))) << 0u))), uvec2(uvec2(_GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, min(1u, 1u))) << _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, (0u) | (0u))) - 0u)))), uvec2(uvec2(_GLF_IDENTITY(1u, (1u) << 0u))))), _GLF_IDENTITY((uvec2(uvec2(_GLF_IDENTITY(_GLF_IDENTITY(1u, uint(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (1u)), (1u) << 0u)))) / uvec2(1u, 1u), ((uvec2(uvec2(_GLF_IDENTITY(_GLF_IDENTITY(1u, uint(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (1u)), (1u) << 0u)))) / uvec2(1u, 1u)) ^ uvec2(0u, 0u))))), ~ (~ (_GLF_IDENTITY(uvec2(_GLF_IDENTITY(1u, (1u) << _GLF_IDENTITY(0u, (0u) / 1u))), uvec2(_GLF_IDENTITY(_GLF_IDENTITY(uvec2(uvec2(_GLF_IDENTITY(1u, (1u) << 0u))), clamp(uvec2(uvec2(_GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, ~ (~ (1u)))) << 0u))), uvec2(uvec2(_GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, min(1u, 1u))) << _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, (0u) | (0u))) - 0u)))), uvec2(uvec2(_GLF_IDENTITY(1u, (1u) << 0u))))), _GLF_IDENTITY((_GLF_IDENTITY(uvec2(uvec2(_GLF_IDENTITY(_GLF_IDENTITY(1u, uint(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (1u)), (1u) << _GLF_IDENTITY(0u, (0u) >> 0u)))), (true ? uvec2(uvec2(_GLF_IDENTITY(_GLF_IDENTITY(1u, uint(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (1u)), (1u) << _GLF_IDENTITY(0u, (0u) >> 0u)))) : _GLF_FUZZED(uvec2(1648u, 118753u))))) / uvec2(1u, 1u), ((uvec2(uvec2(_GLF_IDENTITY(_GLF_IDENTITY(1u, uint(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (1u)), (1u) << 0u)))) / uvec2(1u, 1u)) ^ uvec2(0u, 0u))))))))) : _GLF_FUZZED(uvec2(47151u, 113779u))))), 1u, 1u)))))), _GLF_IDENTITY(min(uvec2(uvec4(uvec2(_GLF_IDENTITY(1u, _GLF_IDENTITY((1u) << 0u, clamp((_GLF_IDENTITY(1u, uint(_GLF_IDENTITY(uvec3(1u, uint(_GLF_ZERO(0.0, injectionSwitch.x)), uint(_GLF_ZERO(0.0, injectionSwitch.x))), uvec3(uvec4(uvec3(1u, uint(_GLF_ZERO(0.0, injectionSwitch.x)), uint(_GLF_ZERO(0.0, injectionSwitch.x))), 0u)))))) << 0u, (1u) << 0u, _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(1u, 0u | (_GLF_IDENTITY(1u, clamp(1u, 1u, 1u))))), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY((_GLF_IDENTITY(1u, 0u | (_GLF_IDENTITY(1u, clamp(1u, 1u, 1u))))), clamp((_GLF_IDENTITY(1u, 0u | (_GLF_IDENTITY(1u, clamp(1u, 1u, 1u))))), (_GLF_IDENTITY(1u, 0u | (_GLF_IDENTITY(1u, clamp(1u, 1u, 1u))))), (_GLF_IDENTITY(1u, 0u | (_GLF_IDENTITY(1u, clamp(1u, 1u, 1u))))))) : _GLF_FUZZED(31169u))) << 0u, ((1u) << 0u) << 0u))))), 1u, _GLF_IDENTITY(_GLF_IDENTITY(1u, _GLF_IDENTITY(0u + (1u), (0u + (1u)) | (0u + (1u)))), (true ? _GLF_IDENTITY(1u, _GLF_IDENTITY(0u + (1u), (0u + (1u)) | (0u + (1u)))) : _GLF_FUZZED(uint(false)))))), uvec2(uvec4(uvec2(_GLF_IDENTITY(1u, (1u) << 0u)), 1u, 1u))), (min(uvec2(uvec4(uvec2(_GLF_IDENTITY(1u, _GLF_IDENTITY((1u), ~ (~ ((1u)))) << 0u)), 1u, _GLF_IDENTITY(1u, 0u + (1u)))), uvec2(uvec4(uvec2(_GLF_IDENTITY(1u, (1u) << 0u)), 1u, _GLF_IDENTITY(1u, ~ _GLF_IDENTITY((~ (_GLF_IDENTITY(1u, (1u) | 0u))), ((~ (_GLF_IDENTITY(1u, (1u) | 0u)))) * uint(_GLF_ONE(1.0, injectionSwitch.y)))))))) | (min(uvec2(uvec4(uvec2(_GLF_IDENTITY(1u, (1u) << 0u)), 1u, _GLF_IDENTITY(1u, 0u + (1u)))), uvec2(uvec4(uvec2(_GLF_IDENTITY(1u, (1u) << _GLF_IDENTITY(0u, (0u) / (1u & 1u)))), 1u, 1u))))))), 1, true, bvec2(true)), vec2(1.0)), gl_SubgroupSize, mat3x4(1.0));
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), ! (! (! ((injectionSwitch.x > injectionSwitch.y))))))))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec4(false, true, false, false))), (_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(42.81)), _GLF_IDENTITY(bool(false), (bool(false)) && true))) > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         return;
        }
       return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     return;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(false))
    return;
   barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(false, false, _GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), bool(bool((injectionSwitch.x < injectionSwitch.y)))))), bvec3(bvec3(bvec3(_GLF_IDENTITY(false, (false) && true), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))), bool(bool(bool(_GLF_IDENTITY(bvec3(false, false, _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y))), bvec3(bvec3(bvec3(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) && true)))), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(false, false, _GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), bool(bool((injectionSwitch.x < injectionSwitch.y)))))), bvec3(bvec3(bvec3(_GLF_IDENTITY(false, (false) && true), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))), bool(bool(bool(_GLF_IDENTITY(bvec3(false, false, _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y))), bvec3(bvec3(bvec3(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) && true)))), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))))), bool(bvec4(! (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(false, false, _GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), bool(bool((injectionSwitch.x < injectionSwitch.y)))))), bvec3(bvec3(bvec3(_GLF_IDENTITY(false, (false) && true), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))), bool(bool(bool(_GLF_IDENTITY(bvec3(false, false, _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y))), bvec3(bvec3(bvec3(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) && true)))), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))))), true, true, false)))))))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false)) || (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(mat3x2(injectionSwitch.x, abs(0.0), 0.0, 1.0, 0.0, 1.0), mat3x2(mat4x2(mat3x2(injectionSwitch.x, abs(0.0), _GLF_IDENTITY(0.0, min(0.0, _GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(-9957.3748))))), 1.0, 0.0, 1.0)))))) > injectionSwitch.y))))))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        return;
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))), true && (_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))))
        return;
       return;
      }
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) || false)))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat4(injectionSwitch, _GLF_IDENTITY(dot(vec3(0.0, 0.0, cos(0.0)), vec3(0.0, 0.0, 1.0)), _GLF_IDENTITY(dot(vec3(0.0, 0.0, cos(0.0)), vec3(0.0, 0.0, 1.0)), 1.0 * (dot(vec3(0.0, 0.0, cos(0.0)), vec3(0.0, 0.0, 1.0))))), 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0)), clamp(vec2(mat4(injectionSwitch, _GLF_IDENTITY(dot(vec3(0.0, 0.0, cos(0.0)), vec3(0.0, 0.0, 1.0)), _GLF_IDENTITY(dot(vec3(0.0, 0.0, cos(0.0)), vec3(0.0, 0.0, 1.0)), 1.0 * (dot(vec3(0.0, 0.0, cos(0.0)), vec3(0.0, 0.0, 1.0))))), 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0)), vec2(mat4(injectionSwitch, _GLF_IDENTITY(dot(vec3(0.0, 0.0, cos(0.0)), vec3(0.0, 0.0, 1.0)), _GLF_IDENTITY(dot(vec3(0.0, 0.0, cos(0.0)), vec3(0.0, 0.0, 1.0)), 1.0 * (dot(vec3(0.0, 0.0, cos(0.0)), vec3(0.0, 0.0, 1.0))))), 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0)), vec2(mat4(injectionSwitch, _GLF_IDENTITY(dot(vec3(0.0, 0.0, cos(0.0)), vec3(0.0, 0.0, 1.0)), _GLF_IDENTITY(dot(vec3(0.0, 0.0, cos(0.0)), vec3(0.0, 0.0, 1.0)), 1.0 * (dot(vec3(0.0, 0.0, cos(0.0)), vec3(0.0, 0.0, 1.0))))), 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0))))).x > injectionSwitch.y), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && ((_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat4(injectionSwitch, _GLF_IDENTITY(dot(vec3(0.0, 0.0, cos(0.0)), vec3(0.0, 0.0, 1.0)), _GLF_IDENTITY(dot(vec3(0.0, 0.0, cos(0.0)), vec3(0.0, 0.0, 1.0)), 1.0 * (dot(vec3(0.0, 0.0, cos(0.0)), vec3(0.0, 0.0, 1.0))))), 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0)), clamp(vec2(mat4(injectionSwitch, _GLF_IDENTITY(dot(vec3(0.0, 0.0, cos(0.0)), vec3(0.0, 0.0, 1.0)), _GLF_IDENTITY(dot(vec3(0.0, 0.0, cos(0.0)), vec3(0.0, 0.0, 1.0)), 1.0 * (dot(vec3(0.0, 0.0, cos(0.0)), vec3(0.0, 0.0, 1.0))))), 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0)), vec2(mat4(injectionSwitch, _GLF_IDENTITY(dot(vec3(0.0, 0.0, cos(0.0)), vec3(0.0, 0.0, 1.0)), _GLF_IDENTITY(dot(vec3(0.0, 0.0, cos(0.0)), vec3(0.0, 0.0, 1.0)), 1.0 * (dot(vec3(0.0, 0.0, cos(0.0)), vec3(0.0, 0.0, 1.0))))), 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0)), vec2(mat4(injectionSwitch, _GLF_IDENTITY(dot(vec3(0.0, 0.0, cos(0.0)), vec3(0.0, 0.0, 1.0)), _GLF_IDENTITY(dot(vec3(0.0, 0.0, cos(0.0)), vec3(0.0, 0.0, 1.0)), 1.0 * (dot(vec3(0.0, 0.0, cos(0.0)), vec3(0.0, 0.0, 1.0))))), 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0))))).x > injectionSwitch.y))))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(true, bool(bvec4(true, true, true, true))) && (false)), (_GLF_IDENTITY(false, _GLF_IDENTITY(true, bool(bvec4(true, true, true, true))) && (false))) && true)))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       return;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true)) || false))
            barrier();
           return;
          }
         return;
         if(_GLF_DEAD(false))
          barrier();
        }
       barrier();
       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(false))
        return;
      }
     if(_GLF_DEAD(false))
      return;
     return;
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      return;
     return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   return;
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y)))))))))
    barrier();
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(_GLF_IDENTITY(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (_GLF_IDENTITY(! (bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), bool(bvec3(! (bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), false, false))))))))
  barrier();
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0)) * 1.0)))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), injectionSwitch)).x > injectionSwitch.y), ! (! _GLF_IDENTITY(((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y)), (_GLF_IDENTITY(((_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat4x3(injectionSwitch, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0), _GLF_IDENTITY(mat4x3(mat4x3(mat4x3(injectionSwitch, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0))), (_GLF_IDENTITY(false, (false) && true) ? _GLF_FUZZED(mat4x3(3.5, -1.9, 84.21, -7635.9522, -8.4, -59.57, 290.721, -53.18, -19.38, -28.60, 9995.6904, 414.058)) : mat4x3(mat4x3(mat4x3(injectionSwitch, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0)))))))).x > _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y)), ((_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y), (_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y), false || ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y)))) && true))) || false)) && _GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, (true) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, _GLF_IDENTITY(true, (true) || false), false)))))
    return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
   barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
     return;
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, vec2(mat2(injectionSwitch, 0.0, 1.0))), injectionSwitch)).x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), clamp(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), _GLF_IDENTITY(vec2(mat4(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), _GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, length(0.0), 1.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0)), vec2(mat4(vec2(mat4(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), _GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, length(0.0), 1.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0)), 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0)))), _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)))))).y), (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), clamp(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), _GLF_IDENTITY(vec2(mat4(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), _GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, length(0.0), 1.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0)), vec2(mat4(vec2(mat4(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), _GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, length(0.0), 1.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0)), 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0)))), _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)))))).y), true && ((_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), clamp(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), _GLF_IDENTITY(vec2(mat4(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), _GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, length(0.0), 1.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0)), vec2(mat4(vec2(mat4(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), _GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, length(0.0), 1.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0)), 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0)))), _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)))))).y)))) || false))))
      barrier();
     return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
     barrier();
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false), _GLF_IDENTITY(! (! (_GLF_IDENTITY(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false))), ! (! _GLF_IDENTITY((! (! (_GLF_IDENTITY(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false)))), ((! (! (_GLF_IDENTITY(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false))))) || false))))))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   return;
  }
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (injectionSwitch.x > injectionSwitch.y)), ! _GLF_IDENTITY((_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), ((! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) && true))))
  {
   if(_GLF_DEAD(false))
    barrier();
   return;
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), (! ((false))) || false))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      return;
    }
   barrier();
  }
 uint num_workgroup = _GLF_IDENTITY(gl_NumWorkGroups.x, uint(uint(_GLF_IDENTITY(gl_NumWorkGroups.x, min(gl_NumWorkGroups.x, gl_NumWorkGroups.x)))));
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, false, false)), _GLF_IDENTITY((bool(bvec3(false, false, false))) || false, bool(_GLF_IDENTITY(bvec2((bool(bvec3(false, false, false))) || false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec2(bvec3(bvec2((bool(bvec3(false, false, false))) || false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false)))))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(-8326.6544)), vec2(_GLF_FUZZED(-7456.5419), (injectionSwitch)[1]), bvec2(false, true)))) - vec2(0.0, 0.0)).y))))
          return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         return;
        }
       if(_GLF_DEAD(false))
        return;
       barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          return;
         return;
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), false || (! (false)))))))
        return;
       if(_GLF_DEAD(false))
        return;
       return;
      }
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
        {
         if(_GLF_DEAD(false))
          barrier();
         return;
        }
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), false, true, false)))) || false))
        return;
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))) || false)), true && (_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(748.595)), float(injectionSwitch.x), bool(true)))) * 1.0) > injectionSwitch.y, _GLF_IDENTITY(bool(bvec2(injectionSwitch.x > injectionSwitch.y, true)), (bool(bvec2(injectionSwitch.x > injectionSwitch.y, true))) && true)))), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).x > injectionSwitch.y))) || false)), true && (bool(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x > injectionSwitch.y, bool(bvec2(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) > injectionSwitch.y, true))))), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).x > injectionSwitch.y))) || false))))))))))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, ! (! (false)))), true && (! (_GLF_IDENTITY(false, ! (! (false))))))))))
          return;
         barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) || false), (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec4(_GLF_DEAD(false), false, true, false)), (bool(bvec4(_GLF_DEAD(false), false, true, false))) || false)))
          {
           if(_GLF_DEAD(false))
            barrier();
           return;
          }
         return;
        }
       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec2(false, true))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec2(false, true))), (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec2(false, true))), ! (! (_GLF_IDENTITY(false, bool(bvec2(false, true))))))) || false)))), (injectionSwitch.x > injectionSwitch.y))))
        return;
       barrier();
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         barrier();
        }
       if(_GLF_DEAD(false))
        return;
      }
     if(_GLF_DEAD(false))
      return;
     barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
        barrier();
       return;
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(bvec2(_GLF_DEAD(false), true), _GLF_IDENTITY(bvec2(bvec3(bvec2(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))), true), true)), bvec2(bvec4(bvec2(bvec3(bvec2(_GLF_DEAD(false), true), _GLF_IDENTITY(true, false || (true)))), false, true))))))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
        return;
       return;
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), true && (! (false)))))))
      return;
     if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         return;
        }
       if(_GLF_DEAD(false))
        return;
       return;
      }
     if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
      return;
     if(_GLF_DEAD(false))
      return;
     barrier();
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      return;
     return;
     if(_GLF_DEAD(false))
      barrier();
    }
   return;
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch))) * vec2(1.0, 1.0)).y))))
        return;
       barrier();
      }
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    return;
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(injectionSwitch.x > injectionSwitch.y)))))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
   return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), true && (! (true))))), false)))))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))))))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(false), bool(bool(bool(false)))), (_GLF_IDENTITY(bool(false), bool(bool(bool(false))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))
    barrier();
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_DEAD(false))
  barrier();
 uint workgroup_size = _GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize, min(_GLF_IDENTITY(gl_WorkGroupSize, uvec3(0u, 0u, 0u) + (gl_WorkGroupSize)), _GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize, _GLF_IDENTITY((_GLF_IDENTITY(gl_WorkGroupSize, max(gl_WorkGroupSize, _GLF_IDENTITY(gl_WorkGroupSize, ~ (~ (gl_WorkGroupSize)))))) / uvec3(1u, 1u, 1u), (_GLF_IDENTITY((_GLF_IDENTITY(gl_WorkGroupSize, max(gl_WorkGroupSize, _GLF_IDENTITY(gl_WorkGroupSize, ~ (~ (gl_WorkGroupSize)))))) / uvec3(1u, 1u, 1u), ((_GLF_IDENTITY(gl_WorkGroupSize, max(gl_WorkGroupSize, _GLF_IDENTITY(gl_WorkGroupSize, ~ (~ (gl_WorkGroupSize)))))) / uvec3(1u, _GLF_IDENTITY(1u, (false ? _GLF_FUZZED(subgroup_id) : _GLF_IDENTITY(1u, 0u | (_GLF_IDENTITY(1u, min(1u, 1u)))))), 1u)) / uvec3(1u, 1u, 1u))) + uvec3(0u, 0u, 0u))), clamp(_GLF_IDENTITY(gl_WorkGroupSize, _GLF_IDENTITY((_GLF_IDENTITY(gl_WorkGroupSize, max(gl_WorkGroupSize, _GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize, min(_GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) | (_GLF_IDENTITY(gl_WorkGroupSize, clamp(gl_WorkGroupSize, gl_WorkGroupSize, gl_WorkGroupSize)))), gl_WorkGroupSize)), ~ (~ (gl_WorkGroupSize)))))), ((_GLF_IDENTITY(gl_WorkGroupSize, max(gl_WorkGroupSize, _GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize, min(_GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) | (_GLF_IDENTITY(gl_WorkGroupSize, clamp(gl_WorkGroupSize, gl_WorkGroupSize, gl_WorkGroupSize)))), gl_WorkGroupSize)), ~ (~ (gl_WorkGroupSize))))))) ^ uvec3(0u, 0u, 0u)) / uvec3(1u, 1u, 1u)), _GLF_IDENTITY(gl_WorkGroupSize, (_GLF_IDENTITY(gl_WorkGroupSize, max(gl_WorkGroupSize, _GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize, ~ (~ (gl_WorkGroupSize))), (_GLF_IDENTITY(gl_WorkGroupSize, ~ (~ (gl_WorkGroupSize)))) << uvec3(0u, 0u, 0u))))) / uvec3(1u, 1u, 1u)), _GLF_IDENTITY(gl_WorkGroupSize, (_GLF_IDENTITY(gl_WorkGroupSize, _GLF_IDENTITY(max(gl_WorkGroupSize, _GLF_IDENTITY(gl_WorkGroupSize, ~ (~ (gl_WorkGroupSize)))), (true ? _GLF_IDENTITY(max(gl_WorkGroupSize, _GLF_IDENTITY(gl_WorkGroupSize, ~ (~ (gl_WorkGroupSize)))), (_GLF_IDENTITY(max(gl_WorkGroupSize, _GLF_IDENTITY(gl_WorkGroupSize, ~ (~ (gl_WorkGroupSize)))), (max(gl_WorkGroupSize, _GLF_IDENTITY(gl_WorkGroupSize, ~ (~ (gl_WorkGroupSize))))) ^ uvec3(0u, 0u, 0u))) >> uvec3(0u, 0u, 0u)) : _GLF_FUZZED(uvec3(114503u, 126810u, 15184u)))))) / uvec3(1u, 1u, 1u)))))), (_GLF_IDENTITY(gl_WorkGroupSize, _GLF_IDENTITY(min(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize, uvec3(_GLF_IDENTITY(gl_WorkGroupSize[0], (gl_WorkGroupSize[0]) | (gl_WorkGroupSize[0])), gl_WorkGroupSize[1], gl_WorkGroupSize[2])), _GLF_IDENTITY(uvec3(0u, 0u, 0u) + (gl_WorkGroupSize), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED((128995u | uvec3(143020u, 182346u, 130087u))) : _GLF_IDENTITY(uvec3(0u, 0u, 0u) + (gl_WorkGroupSize), (uvec3(0u, 0u, 0u) + (gl_WorkGroupSize)) | (uvec3(0u, 0u, 0u) + (gl_WorkGroupSize)))))), _GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize, (_GLF_IDENTITY(gl_WorkGroupSize, max(gl_WorkGroupSize, _GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize, ~ (~ (gl_WorkGroupSize))), max(_GLF_IDENTITY(gl_WorkGroupSize, ~ (~ (gl_WorkGroupSize))), _GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize, ~ (~ (gl_WorkGroupSize))), min(_GLF_IDENTITY(gl_WorkGroupSize, ~ (~ (gl_WorkGroupSize))), _GLF_IDENTITY(gl_WorkGroupSize, ~ (~ (gl_WorkGroupSize)))))))))) / uvec3(1u, 1u, 1u)), clamp(_GLF_IDENTITY(gl_WorkGroupSize, (_GLF_IDENTITY(gl_WorkGroupSize, max(gl_WorkGroupSize, _GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize, min(_GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) | (_GLF_IDENTITY(gl_WorkGroupSize, clamp(gl_WorkGroupSize, gl_WorkGroupSize, gl_WorkGroupSize)))), gl_WorkGroupSize)), ~ (~ (gl_WorkGroupSize)))))) / uvec3(_GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, (1u) << 0u)) << 0u), 1u, 1u)), _GLF_IDENTITY(gl_WorkGroupSize, (_GLF_IDENTITY(gl_WorkGroupSize, max(_GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) / uvec3(1u, 1u, 1u)), _GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize, ~ (~ (gl_WorkGroupSize))), (_GLF_IDENTITY(gl_WorkGroupSize, ~ (~ (gl_WorkGroupSize)))) << uvec3(0u, 0u, 0u))))) / uvec3(1u, 1u, 1u)), _GLF_IDENTITY(gl_WorkGroupSize, (_GLF_IDENTITY(gl_WorkGroupSize, max(gl_WorkGroupSize, _GLF_IDENTITY(gl_WorkGroupSize, ~ (~ (gl_WorkGroupSize)))))) / uvec3(1u, 1u, 1u))))), (min(_GLF_IDENTITY(gl_WorkGroupSize, uvec3(0u, 0u, 0u) + (gl_WorkGroupSize)), _GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize, (_GLF_IDENTITY(gl_WorkGroupSize, max(gl_WorkGroupSize, _GLF_IDENTITY(gl_WorkGroupSize, ~ (~ (gl_WorkGroupSize)))))) / uvec3(1u, 1u, 1u)), clamp(_GLF_IDENTITY(gl_WorkGroupSize, (_GLF_IDENTITY(gl_WorkGroupSize, max(gl_WorkGroupSize, _GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize, min(_GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) | (_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize, max(gl_WorkGroupSize, gl_WorkGroupSize)), clamp(gl_WorkGroupSize, gl_WorkGroupSize, gl_WorkGroupSize)))), gl_WorkGroupSize)), ~ (~ (gl_WorkGroupSize)))))) / uvec3(1u, 1u, 1u)), _GLF_IDENTITY(gl_WorkGroupSize, (_GLF_IDENTITY(gl_WorkGroupSize, max(gl_WorkGroupSize, _GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize, ~ (~ (gl_WorkGroupSize))), (_GLF_IDENTITY(gl_WorkGroupSize, ~ (~ (gl_WorkGroupSize)))) << uvec3(0u, 0u, 0u))))) / uvec3(1u, 1u, 1u)), _GLF_IDENTITY(gl_WorkGroupSize, (_GLF_IDENTITY(gl_WorkGroupSize, max(gl_WorkGroupSize, _GLF_IDENTITY(gl_WorkGroupSize, ~ (~ (_GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) | (gl_WorkGroupSize)))))))) / uvec3(1u, 1u, 1u)))))) << uvec3(0u, 0u, 0u)))) << uvec3(0u, 0u, 0u)).x;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   barrier();
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + length(vec2(0.0, 0.0))) > injectionSwitch.y, false || (_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(_GLF_IDENTITY(_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-8.0)), float(_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-6.9)), float(0.0), bool(true)))), bool(true))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-8.0)), float(_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-6.9)), float(0.0), bool(true)))), bool(true))), min(_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-8.0)), float(_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-6.9)), float(0.0), bool(true)))), bool(true))), _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-8.0)), float(_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-6.9)), float(0.0), bool(true)))), bool(true))))), _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-8.0)), float(_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-6.9)), float(0.0), bool(true)))), bool(true))), _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-8.0)), float(_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-6.9)), float(0.0), bool(true)))), bool(true))))), 0.0)), injectionSwitch)).x > injectionSwitch.y))))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    barrier();
   return;
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
  barrier();
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0), (injectionSwitch.y) / 1.0))), _GLF_IDENTITY(! (! (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(true && (! (! (injectionSwitch.x > injectionSwitch.y))), (true && (! (! (injectionSwitch.x > injectionSwitch.y)))) && true))))))), true, false, true)))))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(true, ! (! (true))) && (false))))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
     if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), true && (! (_GLF_DEAD(false)))))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), true))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       barrier();
      }
     if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
      {
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec3(_GLF_DEAD(false), true, _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true && (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), (bool(bvec3(_GLF_DEAD(false), true, _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, sqrt(0.0) + (injectionSwitch.y)))), true && _GLF_IDENTITY((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bool(bvec4((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))) && true)))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           return;
          }
         barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, bool(bool(false))), true), bvec2(bvec2(bvec2(_GLF_IDENTITY(false, bool(bool(false))), true)))))), _GLF_IDENTITY(false || (false), true && (_GLF_IDENTITY(false || (false), (_GLF_IDENTITY(false || (false), bool(bool(false || (false))))) || false))))), (_GLF_DEAD(_GLF_IDENTITY(false, false || (false)))) && true))
        barrier();
       return;
      }
     return;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-64.82)), float(injectionSwitch.y), bool(true)))))))
      barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((false), (_GLF_IDENTITY((false), ! (! ((false))))) && true) && true)))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        return;
       return;
      }
     return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      return;
    }
   return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (false))))))))
      return;
    }
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))), false || (bool(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))))))), _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)))) && (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
        {
         if(_GLF_DEAD(false))
          return;
         return;
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        return;
       return;
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
      barrier();
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 uint workgroup_base = workgroup_size * workgroup_id;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (injectionSwitch.x > injectionSwitch.y))))))
    return;
   if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))))
    barrier();
   return;
  }
 uint subgroup_base = _GLF_IDENTITY(subgroup_id * _GLF_struct_replacement_2.subgroup_size, 0u | (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id * _GLF_struct_replacement_2.subgroup_size, (subgroup_id * _GLF_struct_replacement_2.subgroup_size) | 0u), clamp(_GLF_IDENTITY(subgroup_id * _GLF_struct_replacement_2.subgroup_size, (subgroup_id * _GLF_struct_replacement_2.subgroup_size) | _GLF_IDENTITY(0u, (0u) / 1u)), _GLF_IDENTITY(subgroup_id * _GLF_struct_replacement_2.subgroup_size, (subgroup_id * _GLF_struct_replacement_2.subgroup_size) | 0u), _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id * _GLF_struct_replacement_2.subgroup_size, (subgroup_id * _GLF_struct_replacement_2.subgroup_size) | 0u), (_GLF_IDENTITY(subgroup_id * _GLF_struct_replacement_2.subgroup_size, (subgroup_id * _GLF_struct_replacement_2.subgroup_size) | 0u)) + 0u)))));
 if(_GLF_DEAD(false))
  return;
 uint virtual_gid = _GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_base, (subgroup_base) - 0u), (workgroup_base + subgroup_base) | 0u) + _GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, ~ (~ (_GLF_IDENTITY(subgroup_local_id, 0u ^ (subgroup_local_id))))), (subgroup_local_id) / 1u);
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 uint next_virtual_gid = _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_base, clamp(subgroup_base, _GLF_IDENTITY(subgroup_base, 0u | (subgroup_base)), subgroup_base)), (true ? workgroup_base + subgroup_base : _GLF_FUZZED(atomicAnd(virtual_gid, workgroup_id)))), (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, (workgroup_base) >> _GLF_IDENTITY(uint(_GLF_ZERO(0.0, injectionSwitch.x)), (uint(_GLF_ZERO(0.0, injectionSwitch.x))) - 0u)) + subgroup_base, (true ? workgroup_base + subgroup_base : _GLF_IDENTITY(_GLF_FUZZED(atomicAnd(virtual_gid, workgroup_id)), (_GLF_IDENTITY(_GLF_FUZZED(atomicAnd(virtual_gid, workgroup_id)), ~ (~ (_GLF_IDENTITY(_GLF_FUZZED(atomicAnd(virtual_gid, _GLF_IDENTITY(workgroup_id, (workgroup_id) | (_GLF_IDENTITY(workgroup_id, _GLF_IDENTITY((workgroup_id) - 0u, clamp(_GLF_IDENTITY((workgroup_id) - 0u, max((workgroup_id) - 0u, (workgroup_id) - 0u)), (workgroup_id) - 0u, (workgroup_id) - 0u))))))), ~ (_GLF_IDENTITY(~ (_GLF_FUZZED(atomicAnd(virtual_gid, workgroup_id))), (true ? ~ (_GLF_FUZZED(atomicAnd(virtual_gid, workgroup_id))) : _GLF_FUZZED(workgroup_id))))))))) | (0u >> _GLF_IDENTITY(uint(_GLF_IDENTITY(7u, (7u) ^ 0u)), uint(7u))))))) - 0u) + ((subgroup_local_id + _GLF_IDENTITY(1, (false ? _GLF_FUZZED(clamp(ivec4(59310, -81018, -63995, -93862), -12699, 27966)[1]) : 1))) % _GLF_IDENTITY(_GLF_struct_replacement_2.subgroup_size, 0u | (_GLF_struct_replacement_2.subgroup_size)));
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), ! (! (_GLF_IDENTITY(false, true && (false))))), false, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bool(bvec3(bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), ! (! (_GLF_IDENTITY(false, true && (false))))), false, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false, true))))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)), (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), (false) && true)), ! (! (_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))))) && true))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      return;
     if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         return;
        }
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, false || _GLF_IDENTITY((false), ! (! (_GLF_IDENTITY((false), ((false)) && true))))), ! (_GLF_IDENTITY(! _GLF_IDENTITY((false), bool(bool((_GLF_IDENTITY(false, false || (_GLF_IDENTITY(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), (_GLF_IDENTITY(false, (false) && true)) || false)) && true))), true && (false)))))))), ! (! (_GLF_IDENTITY(! (false), (! (false)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))), (_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, false || _GLF_IDENTITY((false), ! (! (_GLF_IDENTITY((false), ((false)) && true))))), ! (_GLF_IDENTITY(! _GLF_IDENTITY((false), bool(bool((_GLF_IDENTITY(false, _GLF_IDENTITY(false || (_GLF_IDENTITY(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), (_GLF_IDENTITY(false, (false) && true)) || false)) && true))), true && (false))), _GLF_IDENTITY(bool(bvec3(false || (_GLF_IDENTITY(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), (_GLF_IDENTITY(false, (false) && true)) || false)) && true))), true && (false))), false, true)), ! (_GLF_IDENTITY(! (bool(bvec3(false || (_GLF_IDENTITY(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), (_GLF_IDENTITY(false, (false) && true)) || false)) && true))), true && (false))), false, true))), (! (bool(bvec3(false || (_GLF_IDENTITY(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), (_GLF_IDENTITY(false, (false) && true)) || false)) && true))), true && (false))), false, true)))) || false))))))))), ! (! (_GLF_IDENTITY(! (false), (! (false)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))) || false))
        {
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false))
          {
           if(_GLF_DEAD(false))
            return;
           barrier();
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y))))))))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(false))
                return;
               return;
              }
             return;
             if(_GLF_DEAD(false))
              barrier();
            }
           barrier();
          }
         return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(139.729)), float(injectionSwitch.y), bool(true))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, exp(vec2(0.0, 0.0)) * (injectionSwitch)), vec2(_GLF_IDENTITY(injectionSwitch[0], mix(float(injectionSwitch[0]), float(_GLF_FUZZED(167.688)), bool(false))), _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(mat2x3(injectionSwitch, 0.0, 0.0, 0.0, 1.0)))))[1])).y)), injectionSwitch.y))), float(_GLF_FUZZED(float(-585))), bool(false)))))))
          barrier();
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), bool(bool(_GLF_IDENTITY(false, (false) || false))))))
          return;
         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)))))
          return;
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
            barrier();
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
              barrier();
             return;
            }
           barrier();
           if(_GLF_DEAD(false))
            return;
          }
         if(_GLF_DEAD(false))
          return;
        }
       barrier();
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((false) || _GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_IDENTITY((false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && ((false))) || _GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (injectionSwitch.x > injectionSwitch.y)))))))
        return;
      }
     if(_GLF_DEAD(false))
      barrier();
     return;
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(false))
    return;
   barrier();
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(_GLF_IDENTITY(mat4x2(injectionSwitch, 1.0, sqrt(0.0), 0.0, 0.0, 0.0, 0.0), transpose(transpose(mat4x2(injectionSwitch, 1.0, sqrt(0.0), 0.0, 0.0, 0.0, 0.0))))), (vec2(_GLF_IDENTITY(mat4x2(injectionSwitch, 1.0, sqrt(0.0), 0.0, 0.0, 0.0, 0.0), transpose(transpose(mat4x2(injectionSwitch, 1.0, sqrt(0.0), 0.0, 0.0, 0.0, 0.0)))))) * vec2(1.0, 1.0))).x) * 1.0), clamp(_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(_GLF_IDENTITY(mat4x2(injectionSwitch, 1.0, sqrt(0.0), 0.0, 0.0, 0.0, 0.0), transpose(transpose(mat4x2(injectionSwitch, 1.0, sqrt(0.0), 0.0, 0.0, 0.0, 0.0))))), (vec2(_GLF_IDENTITY(mat4x2(injectionSwitch, 1.0, sqrt(0.0), 0.0, 0.0, 0.0, 0.0), transpose(transpose(mat4x2(injectionSwitch, 1.0, sqrt(0.0), 0.0, 0.0, 0.0, 0.0)))))) * vec2(1.0, 1.0))).x) * 1.0), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(_GLF_IDENTITY(mat4x2(injectionSwitch, 1.0, sqrt(0.0), 0.0, 0.0, 0.0, 0.0), transpose(transpose(mat4x2(injectionSwitch, 1.0, sqrt(0.0), 0.0, 0.0, 0.0, 0.0))))), (vec2(_GLF_IDENTITY(mat4x2(injectionSwitch, 1.0, sqrt(0.0), 0.0, 0.0, 0.0, 0.0), transpose(transpose(mat4x2(injectionSwitch, 1.0, sqrt(0.0), 0.0, 0.0, 0.0, 0.0)))))) * vec2(1.0, 1.0))).x) * 1.0), max(_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(_GLF_IDENTITY(mat4x2(injectionSwitch, 1.0, sqrt(0.0), 0.0, 0.0, 0.0, 0.0), transpose(transpose(mat4x2(injectionSwitch, 1.0, sqrt(0.0), 0.0, 0.0, 0.0, 0.0))))), (vec2(_GLF_IDENTITY(mat4x2(injectionSwitch, 1.0, sqrt(0.0), 0.0, 0.0, 0.0, 0.0), transpose(transpose(mat4x2(injectionSwitch, 1.0, sqrt(0.0), 0.0, 0.0, 0.0, 0.0)))))) * vec2(1.0, 1.0))).x) * 1.0), _GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(_GLF_IDENTITY(mat4x2(injectionSwitch, 1.0, sqrt(0.0), 0.0, 0.0, 0.0, 0.0), transpose(transpose(mat4x2(injectionSwitch, 1.0, sqrt(0.0), 0.0, 0.0, 0.0, 0.0))))), (vec2(_GLF_IDENTITY(mat4x2(injectionSwitch, 1.0, sqrt(0.0), 0.0, 0.0, 0.0, 0.0), transpose(transpose(mat4x2(injectionSwitch, 1.0, sqrt(0.0), 0.0, 0.0, 0.0, 0.0)))))) * vec2(1.0, 1.0))).x) * 1.0))), _GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(_GLF_IDENTITY(mat4x2(injectionSwitch, 1.0, sqrt(0.0), 0.0, 0.0, 0.0, 0.0), transpose(transpose(mat4x2(injectionSwitch, 1.0, sqrt(0.0), 0.0, 0.0, 0.0, 0.0))))), (vec2(_GLF_IDENTITY(mat4x2(injectionSwitch, 1.0, sqrt(0.0), 0.0, 0.0, 0.0, 0.0), transpose(transpose(mat4x2(injectionSwitch, 1.0, sqrt(0.0), 0.0, 0.0, 0.0, 0.0)))))) * vec2(1.0, 1.0))).x) * 1.0))) > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
  barrier();
 uint read = 0;
 if(_GLF_DEAD(false))
  return;
 atomicStore(buf[next_virtual_gid], uint(1), _GLF_IDENTITY(4, int(_GLF_ZERO(0.0, injectionSwitch.x)) + _GLF_IDENTITY((4), int(int((_GLF_IDENTITY(4, (4) / 1)))))), 64, 4);
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y))))))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! _GLF_IDENTITY((! (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec3(injectionSwitch.x > injectionSwitch.y, true, false))))), ! _GLF_IDENTITY((! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ((! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) && true)))), ! (! ((! (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec3(injectionSwitch.x > injectionSwitch.y, true, false))))), ! _GLF_IDENTITY((! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ((! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) && true))))))))))
    barrier();
   return;
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), bool(bvec4(_GLF_IDENTITY((_GLF_IDENTITY(false, (false) || false)), _GLF_IDENTITY(((false)) || false, ! (! (((false)) || false)))), true, true, true))))), _GLF_TRUE(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, ! (! (true)))) && true), (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), ! _GLF_IDENTITY((! (_GLF_IDENTITY(_GLF_IDENTITY(false, ! _GLF_IDENTITY((! _GLF_IDENTITY(_GLF_IDENTITY((false), bool(bool((false)))), (_GLF_IDENTITY((false), bool(bool((false))))) && true)), ((! (false))) || false)), (_GLF_IDENTITY(_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, ! (! (false))), false))))), ((! (false))) || false)), true && (_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, ! (! (false))), false))))), ((! (false))) || false))))) && true))), bool(bvec2((! (_GLF_IDENTITY(_GLF_IDENTITY(false, ! _GLF_IDENTITY((! _GLF_IDENTITY(_GLF_IDENTITY((false), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY((false), bool(bvec4((false), false, true, true))), false), bvec2(bvec3(bvec2(_GLF_IDENTITY((false), bool(bvec4((false), false, true, true))), false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), bool(bool((false))))), ((! (false))) || false)), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, ! (! (false))), false))))), ((! (false))) || false)), ! (! (_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), false || (_GLF_IDENTITY(false, ! (! (false))))), false))))), ((! (false))) || false))))), true && (_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, ! (! (false))), false))))), ((! (false))) || false))))) && true))), true)))))), ! _GLF_IDENTITY((_GLF_IDENTITY(! (_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), bool(bvec3((false), false, false)))))), ! (! (! (_GLF_IDENTITY(false, _GLF_IDENTITY(! (! _GLF_IDENTITY((false), bool(bvec3((false), false, false)))), bool(bvec2(! (! _GLF_IDENTITY((false), bool(bvec3((false), false, false)))), false))))))))), ! (! ((_GLF_IDENTITY(! (_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), bool(bvec3((false), false, false)))))), ! (! (! (_GLF_IDENTITY(false, _GLF_IDENTITY(! (! _GLF_IDENTITY((false), bool(bvec3((false), false, false)))), bool(bvec2(! (! _GLF_IDENTITY((false), bool(bvec3((false), false, false)))), false)))))))))))))) && _GLF_IDENTITY(true, false || (true))))) || false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     barrier();
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || ((injectionSwitch.x > injectionSwitch.y)))) || false))))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)), injectionSwitch)).x > injectionSwitch.y))))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec3(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, true)))), (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec3(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, true))))) && true))))
      barrier();
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            return;
           barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
          }
         if(_GLF_DEAD(false))
          return;
         return;
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))))
          barrier();
        }
       barrier();
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec3(injectionSwitch.x > injectionSwitch.y, true, false))))), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec3(injectionSwitch.x > injectionSwitch.y, true, false)))))) || false)))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            return;
           return;
          }
         return;
         if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) && true)))
          barrier();
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false))))))))
          return;
         if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false), false, true)), true && (bool(bvec3(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false), false, true))))))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           if(_GLF_DEAD(false))
            barrier();
           return;
           if(_GLF_DEAD(false))
            return;
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         return;
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         return;
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y)), (_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (injectionSwitch.x > injectionSwitch.y))) || false)))))
        {
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
          barrier();
         return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), bool(bvec2(! (_GLF_DEAD(false)), true))))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         barrier();
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && _GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec2(true, true), bvec2(bvec4(bvec2(true, true), false, true))))))))))
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         return;
        }
       return;
       if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) || false)))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec2(bvec2(false, false)))))))))))
          return;
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          return;
         barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(_GLF_IDENTITY(mat2x4(injectionSwitch, 1.0, 1.0, _GLF_IDENTITY(dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, 0.0, 1.0)), dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, 0.0, 1.0))), 0.0, 0.0, 0.0), (mat2x4(injectionSwitch, 1.0, 1.0, _GLF_IDENTITY(dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, 0.0, 1.0)), dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, 0.0, 1.0))), 0.0, 0.0, 0.0)) * mat2(1.0))), vec2(vec4(vec2(_GLF_IDENTITY(mat2x4(injectionSwitch, 1.0, 1.0, _GLF_IDENTITY(dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, 0.0, 1.0)), dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, 0.0, 1.0))), 0.0, 0.0, 0.0), (mat2x4(injectionSwitch, 1.0, 1.0, _GLF_IDENTITY(dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, 0.0, 1.0)), dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, 0.0, 1.0))), 0.0, 0.0, 0.0)) * mat2(1.0))), 0.0, 1.0)))).y))))
        barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))))))))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          return;
         barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y)))))) || false)))))
        return;
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           barrier();
          }
         return;
         if(_GLF_DEAD(false))
          return;
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         return;
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), false, false, _GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(false, (false) && true)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(false, (false) && true)))))))))) && true))
        return;
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
   if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), true && (! (_GLF_DEAD(false)))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      return;
     barrier();
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, false, false)))))
    return;
   return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(injectionSwitch.x > injectionSwitch.y, false, _GLF_IDENTITY(true, bool(bool(true))), true)))))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          return;
         return;
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       barrier();
      }
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
    }
  }
 if((_GLF_IDENTITY(subgroup_local_id % 2, (subgroup_local_id % 2) | (0u << _GLF_IDENTITY(_GLF_IDENTITY(uint(4u), uint(_GLF_IDENTITY(4u, ~ (~ (4u))))), (_GLF_IDENTITY(uint(4u), uint(_GLF_IDENTITY(4u, ~ (~ (4u)))))) / 1u)))) == _GLF_IDENTITY(0, (_GLF_IDENTITY(0, int(int(_GLF_IDENTITY(_GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) >> 0)) | (_GLF_IDENTITY(_GLF_IDENTITY(0, (_GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(-17352)))) | (0)), (true ? 0 : _GLF_FUZZED(-64235))))), ~ (_GLF_IDENTITY(~ (0), min(~ (0), ~ (0))))))))) | (_GLF_IDENTITY(0, min(0, _GLF_IDENTITY(0, 0 ^ (0)))))))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0) > _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, mix(vec2((_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))[0], _GLF_FUZZED(float(false))), vec2(_GLF_FUZZED(-61.82), (injectionSwitch)[1]), bvec2(false, true))), injectionSwitch, injectionSwitch)).y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         barrier();
        }
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec4(false, false, true, true)))) || false)))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(false))
        barrier();
       return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / sqrt(vec2(1.0, 1.0))).y), _GLF_IDENTITY(bool(bvec3((injectionSwitch.x > injectionSwitch.y), false, true)), (bool(bvec3((injectionSwitch.x > injectionSwitch.y), false, true))) || false)))))
      return;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y))))))), false, true))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         return;
         if(_GLF_DEAD(false))
          return;
        }
       return;
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
      barrier();
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).x > _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-83.65, 388.419)) : injectionSwitch)).y)), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(false, bool(bool(false))) ? _GLF_FUZZED(vec2(54.48, 78.62)) : injectionSwitch)).x > injectionSwitch.y)), true, false)), true && (bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(1.4)), float(injectionSwitch.x), bool(true))), _GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)))) > injectionSwitch.y)), true, false)))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true)) && true))))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, true, true)))))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, true, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (! (bool(bvec4(false, true, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))
          return;
         barrier();
        }
       return;
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)))))
          barrier();
         return;
        }
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
     return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(6.1, 34.61)))), injectionSwitch))) + _GLF_IDENTITY(vec2(0.0, 0.0), (vec2(0.0, 0.0)) * mat2(1.0))).y))))
        return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), _GLF_IDENTITY(bool(bvec4(! (false), false, false, true)), (bool(bvec4(! (false), false, false, true))) || false)))), (injectionSwitch.x > injectionSwitch.y)))))))
          barrier();
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))
          barrier();
         return;
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            return;
           return;
          }
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), bool(bvec3(bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_IDENTITY(_GLF_FUZZED(-6524.9339), float(mat2x3(_GLF_FUZZED(-6524.9339), 0.0, cos(0.0), 1.0, _GLF_IDENTITY(dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(1.0, 0.0, _GLF_IDENTITY(dot(vec2(0.0, 0.0), vec2(1.0, 1.0)), dot(vec2(0.0, 0.0), vec2(1.0, 1.0))), 0.0)), _GLF_IDENTITY(dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(1.0, 0.0, _GLF_IDENTITY(dot(vec2(0.0, 0.0), vec2(1.0, 1.0)), dot(vec2(0.0, 0.0), vec2(1.0, 1.0))), 0.0)), clamp(dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(1.0, 0.0, _GLF_IDENTITY(dot(vec2(0.0, 0.0), vec2(1.0, 1.0)), dot(vec2(0.0, 0.0), vec2(1.0, 1.0))), 0.0)), dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(1.0, 0.0, _GLF_IDENTITY(dot(vec2(0.0, 0.0), vec2(1.0, 1.0)), dot(vec2(0.0, 0.0), vec2(1.0, 1.0))), 0.0)), dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(1.0, 0.0, _GLF_IDENTITY(dot(vec2(0.0, 0.0), vec2(1.0, 1.0)), dot(vec2(0.0, 0.0), vec2(1.0, 1.0))), 0.0))))), 0.0))), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-9516.9222)), bvec2(true, false))).y)), true, _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(bvec4(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, false, true))))), false, false))))))
          return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(false))
          return;
         barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            return;
           return;
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        return;
      }
     barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) && true)) && true)))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          return;
         barrier();
        }
       return;
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       barrier();
      }
     barrier();
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, false), _GLF_IDENTITY(bvec2(bvec2(_GLF_IDENTITY(bvec2(false, false), bvec2(_GLF_IDENTITY(bvec2(bvec2(false, false)), bvec2(bvec3(bvec2(bvec2(false, false)), true))))))), bvec2(bvec3(_GLF_IDENTITY(bvec2(bvec2(_GLF_IDENTITY(bvec2(false, false), bvec2(_GLF_IDENTITY(bvec2(bvec2(false, false)), bvec2(bvec3(bvec2(bvec2(false, false)), true))))))), bvec2(bvec3(bvec2(bvec2(_GLF_IDENTITY(bvec2(false, false), bvec2(_GLF_IDENTITY(bvec2(bvec2(false, false)), bvec2(bvec3(bvec2(bvec2(false, false)), true))))))), false))), false))))))))
      {
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
     return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
        return;
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      return;
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
     return;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y)))), true)), true && (_GLF_IDENTITY(bool(bvec3(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)), ! (! (bool(bvec3(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))))))))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
     barrier();
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      return;
    }
   read = atomicLoad(_GLF_IDENTITY(buf[_GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, (virtual_gid) - 0u), (virtual_gid) >> 0u)], 0u ^ (_GLF_IDENTITY(buf[virtual_gid], max(buf[_GLF_IDENTITY(virtual_gid, clamp(virtual_gid, virtual_gid, virtual_gid))], _GLF_IDENTITY(buf[virtual_gid], uint(uvec3(buf[virtual_gid], 0u, (0u >> _GLF_IDENTITY(uint(2u), uint(2u)))))))))), _GLF_IDENTITY(4, 0 | (4)), 64, 2);
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && _GLF_IDENTITY(true, (true) || false))))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         return;
        }
       return;
      }
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true)) || false))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bool(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))))))))
      {
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1]))[_GLF_IDENTITY(1, _GLF_IDENTITY(int(ivec4(1, 0, 0, 0)), clamp(int(ivec4(1, 0, 0, 0)), int(ivec4(1, 0, 0, 0)), int(ivec4(1, 0, 0, 0)))))])).x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(injectionSwitch.x > injectionSwitch.y, true, false), _GLF_IDENTITY(bvec3(bvec3(_GLF_IDENTITY(bvec3(injectionSwitch.x > injectionSwitch.y, true, false), _GLF_IDENTITY(bvec3(bvec4(bvec3(injectionSwitch.x > injectionSwitch.y, true, false), false)), bvec3(bvec4(bvec3(bvec4(bvec3(injectionSwitch.x > injectionSwitch.y, true, false), false)), true)))))), bvec3(bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec3(injectionSwitch.x > injectionSwitch.y, true, false), _GLF_IDENTITY(bvec3(bvec4(bvec3(injectionSwitch.x > injectionSwitch.y, true, false), false)), bvec3(bvec4(bvec3(bvec4(bvec3(injectionSwitch.x > injectionSwitch.y, true, false), false)), true)))))))))), bvec3(bvec4(bvec3(injectionSwitch.x > injectionSwitch.y, true, false), false)))))))))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
     barrier();
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(true && (false), ! (! (true && (false))))), false || (_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(true, ! (! (true))) && (false)), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(false, true && (false)))), (bool(bool(_GLF_IDENTITY(false, true && (false))))) && true)))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_IDENTITY(_GLF_FUZZED((_GLF_IDENTITY(asin(9.6), (asin(9.6)) / 1.0) * injectionSwitch)), mix(vec2(_GLF_FUZZED(-56.49), _GLF_FUZZED(-3.1)), vec2((_GLF_FUZZED((_GLF_IDENTITY(asin(9.6), (asin(9.6)) / 1.0) * injectionSwitch)))[0], (_GLF_FUZZED((_GLF_IDENTITY(asin(9.6), (asin(9.6)) / 1.0) * injectionSwitch)))[1]), bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))))), (_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED((_GLF_IDENTITY(asin(9.6), (asin(9.6)) / 1.0) * injectionSwitch))))) * vec2(1.0, 1.0)).x, max(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED((_GLF_IDENTITY(asin(9.6), (asin(9.6)) / 1.0) * injectionSwitch)))), (_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED((_GLF_IDENTITY(asin(9.6), (asin(9.6)) / 1.0) * injectionSwitch))))) * vec2(1.0, 1.0)).x, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_IDENTITY(_GLF_FUZZED((_GLF_IDENTITY(asin(9.6), (asin(9.6)) / 1.0) * injectionSwitch)), (_GLF_IDENTITY(_GLF_FUZZED((_GLF_IDENTITY(asin(9.6), (asin(9.6)) / 1.0) * injectionSwitch)), (false ? _GLF_FUZZED(vec2(-3.8, 1.5)) : _GLF_FUZZED((_GLF_IDENTITY(asin(9.6), (asin(9.6)) / 1.0) * injectionSwitch))))) + vec2(0.0, 0.0)))), (_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED((_GLF_IDENTITY(_GLF_IDENTITY(asin(9.6), (asin(9.6)) / 1.0), (_GLF_IDENTITY(asin(9.6), (asin(9.6)) / 1.0)) / 1.0) * injectionSwitch))))) * vec2(1.0, 1.0)).x) * _GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, 0.0 + (1.0)), 1.0, 1.0))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), injectionSwitch, injectionSwitch)), injectionSwitch)) : _GLF_FUZZED((_GLF_IDENTITY(_GLF_IDENTITY(asin(9.6), (asin(9.6)) / 1.0), (true ? _GLF_IDENTITY(asin(9.6), (asin(9.6)) / 1.0) : _GLF_FUZZED(-1913.5233))) * injectionSwitch)))), (_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED((_GLF_IDENTITY(asin(9.6), (asin(9.6)) / _GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-334.863)), bool(false))), 1.0))) * injectionSwitch))))) * vec2(1.0, 1.0)).x, min(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED((_GLF_IDENTITY(_GLF_IDENTITY(asin(9.6), _GLF_IDENTITY((asin(9.6)) / 1.0, clamp(_GLF_IDENTITY((asin(9.6)) / 1.0, ((asin(9.6)) / 1.0) - 0.0), _GLF_IDENTITY((asin(9.6)) / 1.0, clamp(_GLF_IDENTITY((asin(9.6)) / 1.0, float(vec2((asin(9.6)) / 1.0, 0.0))), (asin(9.6)) / 1.0, _GLF_IDENTITY((asin(9.6)) / 1.0, clamp((asin(9.6)) / 1.0, (asin(9.6)) / 1.0, (asin(9.6)) / 1.0)))), (asin(9.6)) / 1.0))), min(_GLF_IDENTITY(asin(9.6), (asin(9.6)) / 1.0), _GLF_IDENTITY(asin(9.6), (asin(9.6)) / 1.0))) * injectionSwitch)))), (_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED((_GLF_IDENTITY(asin(9.6), (asin(9.6)) / 1.0) * injectionSwitch))))) * vec2(1.0, 1.0)).x, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((true ? injectionSwitch : _GLF_FUZZED((_GLF_IDENTITY(asin(9.6), (asin(9.6)) / 1.0) * injectionSwitch))), mix(vec2(_GLF_FUZZED(45.83), _GLF_FUZZED(float(ivec2(-87206, 84733).t))), vec2(((true ? injectionSwitch : _GLF_FUZZED((_GLF_IDENTITY(asin(9.6), (asin(9.6)) / 1.0) * injectionSwitch))))[0], ((true ? injectionSwitch : _GLF_FUZZED((_GLF_IDENTITY(asin(9.6), (asin(9.6)) / 1.0) * injectionSwitch))))[1]), bvec2(true, true)))), min(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((true ? injectionSwitch : _GLF_FUZZED((_GLF_IDENTITY(asin(9.6), (asin(9.6)) / 1.0) * injectionSwitch))), mix(vec2(_GLF_FUZZED(45.83), _GLF_FUZZED(float(ivec2(-87206, 84733).t))), vec2(((true ? injectionSwitch : _GLF_FUZZED((_GLF_IDENTITY(asin(9.6), (asin(9.6)) / 1.0) * injectionSwitch))))[0], ((true ? injectionSwitch : _GLF_FUZZED((_GLF_IDENTITY(asin(9.6), (asin(9.6)) / 1.0) * injectionSwitch))))[1]), bvec2(true, true)))), _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((true ? injectionSwitch : _GLF_FUZZED((_GLF_IDENTITY(asin(9.6), (asin(9.6)) / 1.0) * injectionSwitch))), mix(vec2(_GLF_FUZZED(45.83), _GLF_FUZZED(float(ivec2(-87206, 84733).t))), vec2(((true ? injectionSwitch : _GLF_FUZZED((_GLF_IDENTITY(asin(9.6), (asin(9.6)) / 1.0) * injectionSwitch))))[0], ((true ? injectionSwitch : _GLF_FUZZED((_GLF_IDENTITY(asin(9.6), (asin(9.6)) / 1.0) * injectionSwitch))))[1]), bvec2(true, true)))))), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(vec4(injectionSwitch, 1.0, 0.0))), (true ? injectionSwitch : _GLF_FUZZED((_GLF_IDENTITY(asin(9.6), (asin(9.6)) / 1.0) * injectionSwitch))))) * vec2(1.0, 1.0)).x)))), float(vec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED((_GLF_IDENTITY(_GLF_IDENTITY(asin(9.6), min(asin(9.6), asin(9.6))), (asin(9.6)) / 1.0) * injectionSwitch)))), (_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED((_GLF_IDENTITY(asin(9.6), (asin(9.6)) / 1.0) * injectionSwitch))))) * vec2(1.0, 1.0)).x, max(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED((_GLF_IDENTITY(asin(9.6), _GLF_IDENTITY((asin(9.6)) / 1.0, (_GLF_IDENTITY((asin(9.6)), mix(float(_GLF_FUZZED(6039.4485)), float(_GLF_IDENTITY((asin(9.6)), (true ? (asin(9.6)) : _GLF_FUZZED(-7.6)))), bool(true))) / 1.0) - 0.0)) * injectionSwitch)))), (_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED((_GLF_IDENTITY(asin(9.6), (asin(9.6)) / 1.0) * injectionSwitch))))) * vec2(1.0, 1.0)).x, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED((_GLF_IDENTITY(asin(9.6), _GLF_IDENTITY((asin(9.6)) / 1.0, (_GLF_IDENTITY((asin(9.6)), mix(float(_GLF_FUZZED(6039.4485)), float(_GLF_IDENTITY((asin(9.6)), (true ? (asin(9.6)) : _GLF_FUZZED(-7.6)))), bool(true))) / 1.0) - 0.0)) * injectionSwitch)))), (_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED((_GLF_IDENTITY(asin(9.6), (asin(9.6)) / 1.0) * injectionSwitch))))) * vec2(1.0, 1.0)).x) + 0.0), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED((_GLF_IDENTITY(_GLF_IDENTITY(asin(9.6), (asin(9.6)) * 1.0), _GLF_IDENTITY((asin(9.6)), ((asin(9.6))) / 1.0) / 1.0) * injectionSwitch)))), (_GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)) : _GLF_FUZZED((_GLF_IDENTITY(asin(9.6), (asin(9.6)) / 1.0) * injectionSwitch))))) * vec2(1.0, 1.0)).x) * 1.0), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED((_GLF_IDENTITY(asin(9.6), (asin(9.6)) / 1.0) * injectionSwitch)))), (_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED((_GLF_IDENTITY(asin(9.6), (asin(9.6)) / 1.0) * injectionSwitch))))) * vec2(1.0, 1.0)).x, min(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED((_GLF_IDENTITY(asin(9.6), (asin(9.6)) / 1.0) * injectionSwitch)))), (_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED((_GLF_IDENTITY(asin(9.6), (asin(9.6)) / 1.0) * injectionSwitch))))) * vec2(1.0, 1.0)).x, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(_GLF_IDENTITY((_GLF_IDENTITY(asin(9.6), (asin(9.6)) / 1.0) * injectionSwitch), (_GLF_IDENTITY((_GLF_IDENTITY(asin(9.6), (asin(9.6)) / 1.0) * injectionSwitch), min((_GLF_IDENTITY(asin(9.6), (asin(9.6)) / 1.0) * injectionSwitch), (_GLF_IDENTITY(asin(9.6), (asin(9.6)) / 1.0) * injectionSwitch)))) - vec2(0.0, 0.0))))), (_GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, vec2(mat2(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), 0.0, log(1.0)))) : _GLF_FUZZED((_GLF_IDENTITY(asin(9.6), (asin(9.6)) / 1.0) * injectionSwitch))))) * vec2(_GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(1.0, max(1.0, 1.0)))), 1.0)), 1.0)).x)))), 1.0, 0.0))) > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec3(false, true, false))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(9385.9821)), float(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(1.8)), float(injectionSwitch.y), bool(true)))), bool(true)))))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           return;
          }
         return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       return;
      }
     return;
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
    barrier();
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        return;
       return;
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(length(vec3(60.79, 126.030, -3.1))) : injectionSwitch.x)) > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / cos(0.0))))))
      {
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
     if(_GLF_DEAD(false))
      return;
     barrier();
     if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
      return;
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
     barrier();
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch : _GLF_FUZZED(injectionSwitch))).x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch : _GLF_FUZZED(injectionSwitch))).x > injectionSwitch.y) && true)))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, false, false))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, false, false))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, false, false)))), bool(bvec4(! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, false, false)))), false, false, true)))))))) && true)), (_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true)), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, false, false)))) && true))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))) || _GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), _GLF_IDENTITY(bool(bvec2(! (! (false)), true)), bool(bool(bool(bvec2(! (! (false)), true))))))), true, false, false)), false || (bool(bvec4(_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (false)), ! (! (_GLF_IDENTITY((! (false)), ! (! ((! (false))))))))), true, false, false))))), (false) || false))), _GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), true && (false)) || (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(-2142.7550) : injectionSwitch.x)) > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(-2142.7550) : injectionSwitch.x)) > injectionSwitch.y))))))) || false)))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), ! (! (_GLF_IDENTITY(false, (false) || false))))))
      {
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
      return;
    }
   _GLF_IDENTITY(read = _GLF_IDENTITY(atomicLoad(_GLF_IDENTITY(buf[virtual_gid], (false ? _GLF_FUZZED(atomicExchange(next_virtual_gid, 100551u)) : buf[virtual_gid])), 4, 64, _GLF_IDENTITY(2, (true ? 2 : _GLF_FUZZED(-17631)))), (atomicLoad(buf[virtual_gid], 4, 64, 2)) - 0u), (_GLF_IDENTITY(read = _GLF_IDENTITY(atomicLoad(_GLF_IDENTITY(buf[virtual_gid], (false ? _GLF_FUZZED(atomicExchange(next_virtual_gid, 100551u)) : buf[virtual_gid])), 4, 64, _GLF_IDENTITY(2, (true ? 2 : _GLF_FUZZED(-17631)))), (atomicLoad(buf[virtual_gid], 4, _GLF_IDENTITY(64, clamp(64, 64, 64)), 2)) - 0u), (_GLF_IDENTITY(read = _GLF_IDENTITY(atomicLoad(_GLF_IDENTITY(buf[virtual_gid], (false ? _GLF_FUZZED(atomicExchange(next_virtual_gid, 100551u)) : buf[virtual_gid])), 4, 64, _GLF_IDENTITY(2, (true ? 2 : _GLF_FUZZED(-17631)))), (atomicLoad(buf[virtual_gid], 4, 64, 2)) - 0u), (read = _GLF_IDENTITY(atomicLoad(_GLF_IDENTITY(buf[virtual_gid], (false ? _GLF_FUZZED(atomicExchange(next_virtual_gid, 100551u)) : buf[virtual_gid])), 4, 64, _GLF_IDENTITY(_GLF_IDENTITY(2, (2) >> 0), (true ? 2 : _GLF_FUZZED(-17631)))), (atomicLoad(buf[virtual_gid], 4, 64, 2)) - 0u)) - 0u)) / 1u)) ^ (0u >> _GLF_IDENTITY(uint(3u), uint(3u))));
  }
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))) || false))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false)))))))
  return;
 subgroupBarrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), ! (! (bool(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), injectionSwitch)))).x > injectionSwitch.y)))))))))))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-2.4)), bool(false))), (_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-2.4)), bool(false)))) / 1.0) > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   return;
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && _GLF_IDENTITY((_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), bool(bvec3((_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))) && true)), ! (! ((_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), bool(bvec3((_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))) && true))))))))
    barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), bool(bool(! ((injectionSwitch.x > injectionSwitch.y))))))))))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    barrier();
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)))).y) || false)))))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), _GLF_IDENTITY(bvec2(bvec4(_GLF_IDENTITY(bvec2(false, _GLF_TRUE(_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec3(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), bvec3(bvec3(bvec3(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))))), (injectionSwitch.x < injectionSwitch.y))), bvec2(bvec2(bvec2(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), false, false)), bvec2(bvec2(bvec2(bvec4(_GLF_IDENTITY(bvec2(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec2(bvec2(bvec2(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), false, false))))))))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            return;
           return;
          }
         if(_GLF_DEAD(false))
          barrier();
         return;
        }
       barrier();
       if(_GLF_DEAD(false))
        return;
      }
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, bool(bvec4(injectionSwitch.x < injectionSwitch.y, true, false, false))))))) && (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
      barrier();
     return;
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       barrier();
      }
     return;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       barrier();
      }
     return;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       return;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bvec2(injectionSwitch.x > injectionSwitch.y, false)), (bool(bvec2(injectionSwitch.x > injectionSwitch.y, false))) && true))))))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     barrier();
     if(_GLF_DEAD(false))
      return;
    }
   barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
        return;
       barrier();
      }
     return;
    }
   return;
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (injectionSwitch.x > injectionSwitch.y)))) || false))
      return;
     return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   barrier();
   if(_GLF_DEAD(false))
    return;
  }
 atomicStore(checker[virtual_gid], read, 4, 64, 4);
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ! (_GLF_IDENTITY(! ((injectionSwitch.x < injectionSwitch.y)), _GLF_IDENTITY(bool(bvec3(! ((injectionSwitch.x < injectionSwitch.y)), false, true)), ! (! (bool(bvec3(! ((injectionSwitch.x < injectionSwitch.y)), false, true))))))))) && (false))), (_GLF_DEAD(_GLF_IDENTITY(false, _GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * _GLF_IDENTITY(_GLF_IDENTITY(mat2(_GLF_IDENTITY(1.0, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 1.0 : _GLF_FUZZED(9225.3151)))), mat2(mat3(mat2(1.0)))), transpose(transpose(_GLF_IDENTITY(_GLF_IDENTITY(mat2(1.0), _GLF_IDENTITY(mat2(_GLF_IDENTITY(mat3x2(mat2(1.0)), mat3x2(mat3x2(mat3x2(mat2(1.0)))))), (_GLF_IDENTITY(mat2(_GLF_IDENTITY(mat3x2(mat2(1.0)), mat3x2(mat3x2(mat3x2(mat2(1.0)))))), mat2(mat3x4(mat2(_GLF_IDENTITY(mat3x2(mat2(1.0)), mat3x2(mat3x2(mat3x2(mat2(1.0)))))))))) / mat2(1.0, 1.0, 1.0, 1.0))), mat2(mat3(mat2(1.0)))))))).y), false || (_GLF_IDENTITY((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * _GLF_IDENTITY(_GLF_IDENTITY(mat2(_GLF_IDENTITY(1.0, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 1.0 : _GLF_FUZZED(9225.3151)))), mat2(mat3(mat2(1.0)))), transpose(transpose(_GLF_IDENTITY(_GLF_IDENTITY(mat2(1.0), _GLF_IDENTITY(mat2(_GLF_IDENTITY(mat3x2(mat2(1.0)), mat3x2(mat3x2(mat3x2(mat2(1.0)))))), (_GLF_IDENTITY(mat2(_GLF_IDENTITY(mat3x2(mat2(1.0)), mat3x2(mat3x2(mat3x2(mat2(1.0)))))), mat2(mat3x4(mat2(_GLF_IDENTITY(mat3x2(mat2(1.0)), mat3x2(mat3x2(mat3x2(mat2(1.0)))))))))) / mat2(1.0, 1.0, 1.0, 1.0))), mat2(mat3(mat2(1.0)))))))).y), bool(_GLF_IDENTITY(bvec3((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * _GLF_IDENTITY(_GLF_IDENTITY(mat2(_GLF_IDENTITY(1.0, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 1.0 : _GLF_FUZZED(9225.3151)))), mat2(mat3(mat2(1.0)))), transpose(transpose(_GLF_IDENTITY(_GLF_IDENTITY(mat2(1.0), _GLF_IDENTITY(mat2(_GLF_IDENTITY(mat3x2(mat2(1.0)), mat3x2(mat3x2(mat3x2(mat2(1.0)))))), (_GLF_IDENTITY(mat2(_GLF_IDENTITY(mat3x2(mat2(1.0)), mat3x2(mat3x2(mat3x2(mat2(1.0)))))), mat2(mat3x4(mat2(_GLF_IDENTITY(mat3x2(mat2(1.0)), mat3x2(mat3x2(mat3x2(mat2(1.0)))))))))) / mat2(1.0, 1.0, 1.0, 1.0))), mat2(mat3(mat2(1.0)))))))).y), true, false), bvec3(bvec4(bvec3((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * _GLF_IDENTITY(_GLF_IDENTITY(mat2(_GLF_IDENTITY(1.0, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 1.0 : _GLF_FUZZED(9225.3151)))), mat2(mat3(mat2(1.0)))), transpose(transpose(_GLF_IDENTITY(_GLF_IDENTITY(mat2(1.0), _GLF_IDENTITY(mat2(_GLF_IDENTITY(mat3x2(mat2(1.0)), mat3x2(mat3x2(mat3x2(mat2(1.0)))))), (_GLF_IDENTITY(mat2(_GLF_IDENTITY(mat3x2(mat2(1.0)), mat3x2(mat3x2(mat3x2(mat2(1.0)))))), mat2(mat3x4(mat2(_GLF_IDENTITY(mat3x2(mat2(1.0)), mat3x2(mat3x2(mat3x2(mat2(1.0)))))))))) / mat2(1.0, 1.0, 1.0, 1.0))), mat2(mat3(mat2(1.0)))))))).y), true, false), true)))))))) && (false)))) && true))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
    return;
   if(_GLF_DEAD(false))
    return;
   barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, true)))), (_GLF_DEAD(false)) && true))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-9722.9768), _GLF_FUZZED(3.2)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))).x > injectionSwitch.y)) || (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).y, (false ? _GLF_FUZZED(-827.223) : _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).y))))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
     return;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     barrier();
    }
   barrier();
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END
BUFFER checker DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected_checker DATA_TYPE uint32 SIZE 8388096 FILL 1

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 
  BIND BUFFER checker AS storage DESCRIPTOR_SET 0 BINDING 2 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT checker EQ_BUFFER expected_checker
