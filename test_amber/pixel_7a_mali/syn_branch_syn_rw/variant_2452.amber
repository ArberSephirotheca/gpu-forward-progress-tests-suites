#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uvec4 GLF_merged2_0_3_74_3_1_13GLF_merged3_0_1_17_1_1_13_2_1_12subgroup_local_idsubgroup_sizeworkgroup_idsubgroup_base;
 uvec4 GLF_merged2_0_3_71_3_1_16GLF_merged3_0_1_11_1_1_14_2_1_14virtual_gidworkgroup_baseworkgroup_sizenext_virtual_gid;
 uvec4 GLF_merged2_0_3_80_3_1_4GLF_merged2_0_2_52_2_1_4GLF_merged2_0_1_13_1_1_14subgroup_baseworkgroup_basereadread;
 uvec4 GLF_merged3_0_2_52_2_1_13_3_1_11GLF_merged2_0_1_13_1_1_14subgroup_baseworkgroup_basesubgroup_sizevirtual_gid;
 uvec4 GLF_merged2_0_3_71_3_1_17GLF_merged3_0_1_11_1_1_17_2_1_11subgroup_idsubgroup_local_idvirtual_gidsubgroup_local_id;
 uvec4 GLF_merged2_0_3_71_3_1_14GLF_merged3_0_1_11_1_1_14_2_1_14virtual_gidworkgroup_baseworkgroup_sizeworkgroup_size;
 uvec4 GLF_merged3_0_2_52_2_1_16_3_1_4GLF_merged2_0_1_13_1_1_14subgroup_baseworkgroup_basenext_virtual_gidread;
 uvec4 GLF_merged2_0_3_88_3_1_13GLF_merged2_0_2_50_2_1_13GLF_merged2_0_1_13_1_1_12subgroup_sizeworkgroup_idsubgroup_basesubgroup_size;
 uvec3 GLF_merged2_0_2_52_2_1_4GLF_merged2_0_1_13_1_1_14subgroup_baseworkgroup_baseread;
 GLF_merged2_0_3_80_3_1_4GLF_merged2_0_2_52_2_1_4GLF_merged2_0_1_13_1_1_14subgroup_baseworkgroup_basereadread.xyz = GLF_merged2_0_2_52_2_1_4GLF_merged2_0_1_13_1_1_14subgroup_baseworkgroup_baseread;
 if(_GLF_DEAD(false))
  return;
 uvec4 GLF_merged2_0_3_74_3_1_14GLF_merged3_0_1_17_1_1_13_2_1_12subgroup_local_idsubgroup_sizeworkgroup_idworkgroup_base;
 for(int _injected_loop_counter = ((((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))) << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (int(4)) ^ 0))) >> _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), clamp(int(4), int(4), int(4))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    {
     do
      {
       return;
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      break;
    }
  }
 uvec4 GLF_merged3_0_2_52_2_1_4_3_1_11GLF_merged2_0_1_13_1_1_14subgroup_baseworkgroup_basereadvirtual_gid;
 uvec3 GLF_merged2_0_2_50_2_1_13GLF_merged2_0_1_13_1_1_12subgroup_sizeworkgroup_idsubgroup_base;
 GLF_merged2_0_3_88_3_1_13GLF_merged2_0_2_50_2_1_13GLF_merged2_0_1_13_1_1_12subgroup_sizeworkgroup_idsubgroup_basesubgroup_size.xyz = GLF_merged2_0_2_50_2_1_13GLF_merged2_0_1_13_1_1_12subgroup_sizeworkgroup_idsubgroup_base;
 uvec3 GLF_merged3_0_1_11_1_1_14_2_1_14virtual_gidworkgroup_baseworkgroup_size;
 GLF_merged2_0_3_71_3_1_16GLF_merged3_0_1_11_1_1_14_2_1_14virtual_gidworkgroup_baseworkgroup_sizenext_virtual_gid.xyz = GLF_merged3_0_1_11_1_1_14_2_1_14virtual_gidworkgroup_baseworkgroup_size;
 if(_GLF_DEAD(false))
  return;
 GLF_merged2_0_3_71_3_1_14GLF_merged3_0_1_11_1_1_14_2_1_14virtual_gidworkgroup_baseworkgroup_sizeworkgroup_size.xyz = GLF_merged2_0_3_71_3_1_16GLF_merged3_0_1_11_1_1_14_2_1_14virtual_gidworkgroup_baseworkgroup_sizenext_virtual_gid.xyz;
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = (0 & -95908); _GLF_WRAPPED_LOOP(_injected_loop_counter < ((((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3))) << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), int(ivec3(int(0), (0 << _GLF_IDENTITY(int(2), int(2))), 1))))) >> _GLF_IDENTITY(int(0), int(0)))); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(false))
              continue;
             do
              {
               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                }
               else
                {
                 return;
                }
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-478.062)), bool(false))) > injectionSwitch.y))));
            }
          }
        }
       else
        {
        }
       return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         return;
        }
      }
    }
  }
 uvec2 GLF_merged2_0_1_13_1_1_12subgroup_sizeworkgroup_id;
 if(_GLF_DEAD(false))
  return;
 GLF_merged2_0_3_88_3_1_13GLF_merged2_0_2_50_2_1_13GLF_merged2_0_1_13_1_1_12subgroup_sizeworkgroup_idsubgroup_basesubgroup_size.xyz.xy = GLF_merged2_0_1_13_1_1_12subgroup_sizeworkgroup_id;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   return;
  }
 uvec3 GLF_merged3_0_1_11_1_1_17_2_1_11subgroup_idsubgroup_local_idvirtual_gid;
 GLF_merged2_0_3_71_3_1_17GLF_merged3_0_1_11_1_1_17_2_1_11subgroup_idsubgroup_local_idvirtual_gidsubgroup_local_id.xyz = GLF_merged3_0_1_11_1_1_17_2_1_11subgroup_idsubgroup_local_idvirtual_gid;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 uvec4 GLF_merged3_0_2_52_2_1_13_3_1_13GLF_merged2_0_1_13_1_1_14subgroup_baseworkgroup_basenum_workgroupsubgroup_base;
 uvec4 GLF_merged2_0_3_74_3_1_13GLF_merged3_0_1_17_1_1_13_2_1_12subgroup_local_idsubgroup_sizeworkgroup_idnum_workgroup;
 if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
  return;
 uvec4 GLF_merged3_0_2_52_2_1_4_3_1_13GLF_merged2_0_1_13_1_1_14subgroup_baseworkgroup_basereadsubgroup_base;
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    continue;
   if(_GLF_DEAD(false))
    return;
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 uvec3 GLF_merged3_0_1_17_1_1_13_2_1_12subgroup_local_idsubgroup_sizeworkgroup_id;
 GLF_merged2_0_3_74_3_1_13GLF_merged3_0_1_17_1_1_13_2_1_12subgroup_local_idsubgroup_sizeworkgroup_idsubgroup_base.xyz = GLF_merged3_0_1_17_1_1_13_2_1_12subgroup_local_idsubgroup_sizeworkgroup_id;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 GLF_merged2_0_3_74_3_1_14GLF_merged3_0_1_17_1_1_13_2_1_12subgroup_local_idsubgroup_sizeworkgroup_idworkgroup_base.xyz = GLF_merged2_0_3_74_3_1_13GLF_merged3_0_1_17_1_1_13_2_1_12subgroup_local_idsubgroup_sizeworkgroup_idsubgroup_base.xyz;
 for(int _injected_loop_counter = (0 & (-52339)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y))))))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, vec2(vec3(injectionSwitch, 1.0))), _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], mix(float(_GLF_IDENTITY(injectionSwitch[1], (true ? injectionSwitch[1] : _GLF_FUZZED(3.9)))), float(_GLF_FUZZED(5267.7519)), bool(false)))))) - vec2(0.0, 0.0)))) : _GLF_FUZZED(vec2(-3218.9790, 68.29)))).x > _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_IDENTITY(_GLF_FUZZED(mod(injectionSwitch, injectionSwitch)), min(_GLF_FUZZED(mod(injectionSwitch, injectionSwitch)), _GLF_FUZZED(mod(injectionSwitch, injectionSwitch)))))).y))))
      return;
    }
  }
 if(_GLF_DEAD(false))
  return;
 GLF_merged2_0_3_74_3_1_13GLF_merged3_0_1_17_1_1_13_2_1_12subgroup_local_idsubgroup_sizeworkgroup_idnum_workgroup.xyz = GLF_merged2_0_3_74_3_1_14GLF_merged3_0_1_17_1_1_13_2_1_12subgroup_local_idsubgroup_sizeworkgroup_idworkgroup_base.xyz;
 uvec2 GLF_merged2_0_1_13_1_1_14subgroup_baseworkgroup_base;
 GLF_merged3_0_2_52_2_1_13_3_1_11GLF_merged2_0_1_13_1_1_14subgroup_baseworkgroup_basesubgroup_sizevirtual_gid.xy = GLF_merged2_0_1_13_1_1_14subgroup_baseworkgroup_base;
 GLF_merged3_0_2_52_2_1_16_3_1_4GLF_merged2_0_1_13_1_1_14subgroup_baseworkgroup_basenext_virtual_gidread.xy = GLF_merged3_0_2_52_2_1_13_3_1_11GLF_merged2_0_1_13_1_1_14subgroup_baseworkgroup_basesubgroup_sizevirtual_gid.xy;
 if(_GLF_DEAD(false))
  return;
 GLF_merged2_0_3_80_3_1_4GLF_merged2_0_2_52_2_1_4GLF_merged2_0_1_13_1_1_14subgroup_baseworkgroup_basereadread.xyz.xy = GLF_merged3_0_2_52_2_1_16_3_1_4GLF_merged2_0_1_13_1_1_14subgroup_baseworkgroup_basenext_virtual_gidread.xy;
 GLF_merged3_0_2_52_2_1_4_3_1_11GLF_merged2_0_1_13_1_1_14subgroup_baseworkgroup_basereadvirtual_gid.xy = GLF_merged2_0_3_80_3_1_4GLF_merged2_0_2_52_2_1_4GLF_merged2_0_1_13_1_1_14subgroup_baseworkgroup_basereadread.xyz.xy;
 do
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     GLF_merged3_0_2_52_2_1_13_3_1_13GLF_merged2_0_1_13_1_1_14subgroup_baseworkgroup_basenum_workgroupsubgroup_base.xy = GLF_merged3_0_2_52_2_1_4_3_1_11GLF_merged2_0_1_13_1_1_14subgroup_baseworkgroup_basereadvirtual_gid.xy;
    }
   if(_GLF_DEAD(false))
    continue;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 GLF_merged3_0_2_52_2_1_4_3_1_13GLF_merged2_0_1_13_1_1_14subgroup_baseworkgroup_basereadsubgroup_base.xy = GLF_merged3_0_2_52_2_1_13_3_1_13GLF_merged2_0_1_13_1_1_14subgroup_baseworkgroup_basenum_workgroupsubgroup_base.xy;
 uvec4 GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_11next_virtual_gidnum_workgroupreadsubgroup_id;
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_DEAD(false))
  return;
 do
  {
   for(int _injected_loop_counter = (int(_GLF_ZERO(0.0, injectionSwitch.x)) << _GLF_IDENTITY(int(_GLF_IDENTITY(7, (7) << _GLF_IDENTITY((0 | 0), ((0 | 0)) + 0))), int(7))); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY((_GLF_IDENTITY((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(1), 0 | (int(1))), int(1))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(1, 0 | (1))), int(1)), ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1))) << 0)), (((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1)))) | (_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), (int(_GLF_IDENTITY(1, (1 ^ ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6)))) | (1)))) / 1))) >> _GLF_IDENTITY(int(1), int(1))), (((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, int(ivec2(1, 0))), 1, 1))) << 0)), int(1))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(_GLF_IDENTITY(1, int(ivec3(1, 1, (1 & 1)))))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(int(1), int(_GLF_IDENTITY(1, int(ivec3(1, 1, (1 & 1))))))), (~ (_GLF_IDENTITY(int(1), int(_GLF_IDENTITY(1, int(ivec3(1, 1, (1 & 1)))))))) << 0))))) >> 0)))); _injected_loop_counter ++)
    {
     do
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        continue;
       GLF_merged2_0_3_71_3_1_17GLF_merged3_0_1_11_1_1_17_2_1_11subgroup_idsubgroup_local_idvirtual_gidsubgroup_local_id.xyz.x = subgroup_id;
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
       break;
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      break;
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
      }
     else
      {
       return;
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     return;
    }
   else
    {
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(21.70), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(4.4)), bvec2(true, false))).x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  return;
 for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_IDENTITY(0, _GLF_IDENTITY((_GLF_IDENTITY(0, clamp(0, 0, 0))) | (0), max((_GLF_IDENTITY(0, clamp(0, 0, 0))) | (0), (_GLF_IDENTITY(0, clamp(0, 0, 0))) | (0)))), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(0, (_GLF_IDENTITY(0, max(0, 0))) / 1), (_GLF_IDENTITY(0, clamp(0, 0, 0))) | (0))) | (_GLF_IDENTITY(0, (_GLF_IDENTITY(0, clamp(0, 0, 0))) | (0))), (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(0, (_GLF_IDENTITY(0, max(0, 0))) / 1), (_GLF_IDENTITY(0, clamp(0, 0, 0))) | (0))) | (_GLF_IDENTITY(0, (_GLF_IDENTITY(0, clamp(0, 0, 0))) | (0))), 0 + ((_GLF_IDENTITY(_GLF_IDENTITY(0, (_GLF_IDENTITY(0, max(0, 0))) / 1), (_GLF_IDENTITY(0, clamp(0, 0, 0))) | (0))) | (_GLF_IDENTITY(0, (_GLF_IDENTITY(0, clamp(0, 0, 0))) | (0)))))) - 0))), (int(_GLF_IDENTITY(_GLF_IDENTITY(0, (_GLF_IDENTITY(0, clamp(0, 0, 0))) | (0)), (_GLF_IDENTITY(0, (_GLF_IDENTITY(0, clamp(0, 0, 0))) | (0))) | (_GLF_IDENTITY(0, (_GLF_IDENTITY(0, clamp(0, 0, 0))) | (0)))))) << 0))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(true, true && (true)), false, true), bvec3(bvec4(bvec3(_GLF_IDENTITY(true, true && (true)), false, true), true)))))))
      {
       do
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY((_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(smoothstep(-69.46, 8.3, vec2(-2.9, 3.9))) : injectionSwitch)).x)), clamp(_GLF_IDENTITY((_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(smoothstep(-69.46, 8.3, vec2(-2.9, 3.9))) : injectionSwitch)).x)), clamp((_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(smoothstep(-69.46, 8.3, vec2(-2.9, 3.9))) : injectionSwitch)).x)), (_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(smoothstep(-69.46, 8.3, vec2(-2.9, 3.9))) : injectionSwitch)).x)), (_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(smoothstep(-69.46, 8.3, vec2(-2.9, 3.9))) : injectionSwitch)).x)))), (_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(smoothstep(-69.46, 8.3, vec2(-2.9, 3.9))) : injectionSwitch)).x)), (_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(smoothstep(-69.46, 8.3, vec2(-2.9, 3.9))) : injectionSwitch)).x)))) + 0.0))); _injected_loop_counter --)
          {
           return;
           if(_GLF_DEAD(false))
            break;
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    continue;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     return;
    }
   else
    {
    }
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     return;
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(2), int(2))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      return;
     do
      {
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           return;
          }
         else
          {
           if(_GLF_DEAD(false))
            continue;
          }
        }
       do
        {
         do
          {
           GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_11next_virtual_gidnum_workgroupreadsubgroup_id.w = GLF_merged2_0_3_71_3_1_17GLF_merged3_0_1_11_1_1_17_2_1_11subgroup_idsubgroup_local_idvirtual_gidsubgroup_local_id.xyz.x;
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))))))));
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(false))
        break;
       if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), true, true, true))))
        continue;
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, _GLF_IDENTITY((false) || false, ! (! ((false) || false))))))))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), ! (! (_GLF_WRAPPED_IF_FALSE(false)))))
            {
             if(_GLF_DEAD(false))
              continue;
            }
           else
            {
             return;
            }
          }
        }
       return;
      }
    }
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
   do
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          break;
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             return;
             if(_GLF_DEAD(false))
              return;
            }
           else
            {
            }
           if(_GLF_DEAD(false))
            return;
          }
         if(_GLF_DEAD(false))
          break;
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat2(injectionSwitch, 0.0, 0.0)), vec2(mat4x3(vec2(_GLF_IDENTITY(mat2(injectionSwitch, 0.0, 0.0), (false ? _GLF_FUZZED(mat2(8689.0269, -8109.0465, 973.658, 0.4)) : mat2(injectionSwitch, 0.0, 0.0)))), 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, _GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-1.5)), bool(false))), 0.0)), 1.0, 1.0)))).x > injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           return;
          }
        }
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(false))
        break;
      }
     else
      {
       if(_GLF_DEAD(false))
        return;
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(9.8) : injectionSwitch.x)) > _GLF_IDENTITY(injectionSwitch.y, float(_GLF_IDENTITY(mat2(injectionSwitch.y, 0.0, 0.0, 0.0), transpose(_GLF_IDENTITY(transpose(mat2(injectionSwitch.y, 0.0, 0.0, 0.0)), (transpose(mat2(injectionSwitch.y, 0.0, 0.0, 0.0))) - mat2(0.0, 0.0, 0.0, 0.0))))))))))
          continue;
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   do
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
       if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y))))))
        continue;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         for(int _injected_loop_counter = (1 & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           return;
          }
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        return;
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bvec4(false, _GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bvec4(false, true, true, true)))), ! (! (! (_GLF_IDENTITY(false, bool(bvec4(false, true, true, true))))))))), false, false)))));
  }
 do
  {
   if(_GLF_DEAD(false))
    break;
   if(_GLF_DEAD(false))
    return;
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (! (injectionSwitch.x < injectionSwitch.y)))))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     else
      {
      }
    }
   else
    {
     for(int _injected_loop_counter = (1 | 0); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) | (_injected_loop_counter))) ^ 0) > 0); _injected_loop_counter --)
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bool(true)), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(bool(bool(true)), false), bvec2(bvec2(_GLF_IDENTITY(bvec2(bool(bool(true)), _GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, true && (false))))), bvec2(bvec2(_GLF_IDENTITY(bvec2(bool(bool(true)), _GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, true && (false))))), _GLF_IDENTITY(bvec2(bvec2(bvec2(bool(bool(true)), _GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, true && (false))))))), bvec2(bvec4(bvec2(bvec2(bvec2(bool(bool(true)), _GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, true && (false))))))), false, true))))))))))), ! (! (bool(_GLF_IDENTITY(bvec2(bool(bool(true)), false), bvec2(bvec2(bvec2(bool(bool(true)), false))))))))))))
          {
           do
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  return;
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   return;
                  }
                }
               do
                {
                 if(_GLF_DEAD(false))
                  continue;
                 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
                  break;
                 if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, false || (false))) || false)))
                  continue;
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    break;
                  }
                 else
                  {
                   do
                    {
                     return;
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                  }
                }
               while(_GLF_WRAPPED_LOOP(false));
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                continue;
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         else
          {
          }
        }
      }
    }
  }
 else
  {
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((false), false || ((false))) && true)))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_DEAD(false))
          return;
        }
       else
        {
         return;
        }
      }
    }
  }
 else
  {
  }
 uint subgroup_size = gl_SubgroupSize;
 GLF_merged3_0_2_52_2_1_13_3_1_11GLF_merged2_0_1_13_1_1_14subgroup_baseworkgroup_basesubgroup_sizevirtual_gid.z = subgroup_size;
 GLF_merged2_0_3_88_3_1_13GLF_merged2_0_2_50_2_1_13GLF_merged2_0_1_13_1_1_12subgroup_sizeworkgroup_idsubgroup_basesubgroup_size.w = GLF_merged3_0_2_52_2_1_13_3_1_11GLF_merged2_0_1_13_1_1_14subgroup_baseworkgroup_basesubgroup_sizevirtual_gid.z;
 GLF_merged2_0_3_88_3_1_13GLF_merged2_0_2_50_2_1_13GLF_merged2_0_1_13_1_1_12subgroup_sizeworkgroup_idsubgroup_basesubgroup_size.xyz.xy.x = GLF_merged2_0_3_88_3_1_13GLF_merged2_0_2_50_2_1_13GLF_merged2_0_1_13_1_1_12subgroup_sizeworkgroup_idsubgroup_basesubgroup_size.w;
 do
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      continue;
     return;
    }
   do
    {
     do
      {
       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), (_GLF_WRAPPED_IF_TRUE(true)) || false)))))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           GLF_merged2_0_3_74_3_1_13GLF_merged3_0_1_17_1_1_13_2_1_12subgroup_local_idsubgroup_sizeworkgroup_idnum_workgroup.xyz.y = GLF_merged2_0_3_88_3_1_13GLF_merged2_0_2_50_2_1_13GLF_merged2_0_1_13_1_1_12subgroup_sizeworkgroup_idsubgroup_basesubgroup_size.xyz.xy.x;
          }
         else
          {
          }
        }
       else
        {
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 while(_GLF_WRAPPED_LOOP(false));
 uint subgroup_local_id = gl_SubgroupInvocationID;
 GLF_merged2_0_3_71_3_1_17GLF_merged3_0_1_11_1_1_17_2_1_11subgroup_idsubgroup_local_idvirtual_gidsubgroup_local_id.w = subgroup_local_id;
 if(_GLF_DEAD(false))
  return;
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, (0) ^ 0)); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    continue;
   GLF_merged2_0_3_71_3_1_17GLF_merged3_0_1_11_1_1_17_2_1_11subgroup_idsubgroup_local_idvirtual_gidsubgroup_local_id.xyz.y = GLF_merged2_0_3_71_3_1_17GLF_merged3_0_1_11_1_1_17_2_1_11subgroup_idsubgroup_local_idvirtual_gidsubgroup_local_id.w;
  }
 _GLF_IDENTITY(_GLF_IDENTITY(GLF_merged2_0_3_74_3_1_13GLF_merged3_0_1_17_1_1_13_2_1_12subgroup_local_idsubgroup_sizeworkgroup_idnum_workgroup.xyz.x = GLF_merged2_0_3_71_3_1_17GLF_merged3_0_1_11_1_1_17_2_1_11subgroup_idsubgroup_local_idvirtual_gidsubgroup_local_id.xyz.y, (GLF_merged2_0_3_74_3_1_13GLF_merged3_0_1_17_1_1_13_2_1_12subgroup_local_idsubgroup_sizeworkgroup_idnum_workgroup.xyz.x = GLF_merged2_0_3_71_3_1_17GLF_merged3_0_1_11_1_1_17_2_1_11subgroup_idsubgroup_local_idvirtual_gidsubgroup_local_id.xyz.y) >> 0u), (_GLF_IDENTITY(false, ! (! (false))) ? _GLF_FUZZED(_GLF_IDENTITY(GLF_merged2_0_3_88_3_1_13GLF_merged2_0_2_50_2_1_13GLF_merged2_0_1_13_1_1_12subgroup_sizeworkgroup_idsubgroup_basesubgroup_size.w, min(GLF_merged2_0_3_88_3_1_13GLF_merged2_0_2_50_2_1_13GLF_merged2_0_1_13_1_1_12subgroup_sizeworkgroup_idsubgroup_basesubgroup_size.w, GLF_merged2_0_3_88_3_1_13GLF_merged2_0_2_50_2_1_13GLF_merged2_0_1_13_1_1_12subgroup_sizeworkgroup_idsubgroup_basesubgroup_size.w))) : GLF_merged2_0_3_74_3_1_13GLF_merged3_0_1_17_1_1_13_2_1_12subgroup_local_idsubgroup_sizeworkgroup_idnum_workgroup.xyz.x = GLF_merged2_0_3_71_3_1_17GLF_merged3_0_1_11_1_1_17_2_1_11subgroup_idsubgroup_local_idvirtual_gidsubgroup_local_id.xyz.y));
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat2x4(injectionSwitch, 0.0, 1.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0), _GLF_IDENTITY(mat4(1.0) * (mat2x4(injectionSwitch, 0.0, 1.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0)), mat2x4(mat3x4(mat4(1.0) * (mat2x4(injectionSwitch, 0.0, 1.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0)))))))).x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y))))
    {
    }
   else
    {
     GLF_merged3_0_2_52_2_1_13_3_1_13GLF_merged2_0_1_13_1_1_14subgroup_baseworkgroup_basenum_workgroupsubgroup_base.z = num_workgroup;
    }
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   do
    {
     do
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) && true)))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)))) > injectionSwitch.y))))
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(0, 0 ^ (0))); _injected_loop_counter --)
            {
             return;
            }
          }
         if(_GLF_DEAD(false))
          break;
        }
       else
        {
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (injectionSwitch.x > injectionSwitch.y))));
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(4), int(4))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (0 ^ 1))); _injected_loop_counter ++)
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), false || (! (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, _GLF_IDENTITY(bool(bvec4(injectionSwitch.x < injectionSwitch.y, true, false, false)), ! (! (bool(bvec4(injectionSwitch.x < injectionSwitch.y, true, false, false))))))) && true))))))))))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      break;
    }
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 _GLF_IDENTITY(GLF_merged2_0_3_74_3_1_13GLF_merged3_0_1_17_1_1_13_2_1_12subgroup_local_idsubgroup_sizeworkgroup_idnum_workgroup.w = GLF_merged3_0_2_52_2_1_13_3_1_13GLF_merged2_0_1_13_1_1_14subgroup_baseworkgroup_basenum_workgroupsubgroup_base.z, ~ (~ (_GLF_IDENTITY(GLF_merged2_0_3_74_3_1_13GLF_merged3_0_1_17_1_1_13_2_1_12subgroup_local_idsubgroup_sizeworkgroup_idnum_workgroup.w = GLF_merged3_0_2_52_2_1_13_3_1_13GLF_merged2_0_1_13_1_1_14subgroup_baseworkgroup_basenum_workgroupsubgroup_base.z, (GLF_merged2_0_3_74_3_1_13GLF_merged3_0_1_17_1_1_13_2_1_12subgroup_local_idsubgroup_sizeworkgroup_idnum_workgroup.w = GLF_merged3_0_2_52_2_1_13_3_1_13GLF_merged2_0_1_13_1_1_14subgroup_baseworkgroup_basenum_workgroupsubgroup_base.z) ^ 0u))));
 if(_GLF_DEAD(false))
  return;
 for(int _injected_loop_counter = (1 & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 ^ (0 << _GLF_IDENTITY(int(1), int(1))))); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
  }
 GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_11next_virtual_gidnum_workgroupreadsubgroup_id.y = GLF_merged2_0_3_74_3_1_13GLF_merged3_0_1_17_1_1_13_2_1_12subgroup_local_idsubgroup_sizeworkgroup_idnum_workgroup.w;
 uint workgroup_size = gl_WorkGroupSize.x;
 do
  {
   if(_GLF_DEAD(false))
    return;
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(bvec3(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x))) - 0.0), min(_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x))) - 0.0), _GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x))) - 0.0))), injectionSwitch.x)) < injectionSwitch.y)), false, false)))))
  {
   GLF_merged2_0_3_71_3_1_14GLF_merged3_0_1_11_1_1_14_2_1_14virtual_gidworkgroup_baseworkgroup_sizeworkgroup_size.w = workgroup_size;
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, true && (false))) || false)))
  return;
 GLF_merged2_0_3_71_3_1_14GLF_merged3_0_1_11_1_1_14_2_1_14virtual_gidworkgroup_baseworkgroup_sizeworkgroup_size.xyz.z = GLF_merged2_0_3_71_3_1_14GLF_merged3_0_1_11_1_1_14_2_1_14virtual_gidworkgroup_baseworkgroup_sizeworkgroup_size.w;
 do
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       do
        {
         return;
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)).y))))
        break;
      }
     if(_GLF_DEAD(false))
      continue;
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ((injectionSwitch.x < injectionSwitch.y)) && _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))
  {
   do
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         return;
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
        {
         if(_GLF_DEAD(false))
          break;
         if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
          {
          }
         else
          {
           return;
          }
        }
      }
     if(_GLF_DEAD(false))
      break;
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  return;
 uint workgroup_id = gl_WorkGroupID.x;
 GLF_merged2_0_3_88_3_1_13GLF_merged2_0_2_50_2_1_13GLF_merged2_0_1_13_1_1_12subgroup_sizeworkgroup_idsubgroup_basesubgroup_size.xyz.xy.y = workgroup_id;
 do
  {
   _GLF_IDENTITY(GLF_merged2_0_3_74_3_1_13GLF_merged3_0_1_17_1_1_13_2_1_12subgroup_local_idsubgroup_sizeworkgroup_idnum_workgroup.xyz.z = GLF_merged2_0_3_88_3_1_13GLF_merged2_0_2_50_2_1_13GLF_merged2_0_1_13_1_1_12subgroup_sizeworkgroup_idsubgroup_basesubgroup_size.xyz.xy.y, 0u | (GLF_merged2_0_3_74_3_1_13GLF_merged3_0_1_17_1_1_13_2_1_12subgroup_local_idsubgroup_sizeworkgroup_idnum_workgroup.xyz.z = GLF_merged2_0_3_88_3_1_13GLF_merged2_0_2_50_2_1_13GLF_merged2_0_1_13_1_1_12subgroup_sizeworkgroup_idsubgroup_basesubgroup_size.xyz.xy.y));
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         return;
         if(_GLF_DEAD(false))
          {
           do
            {
             return;
             if(_GLF_DEAD(false))
              break;
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
       else
        {
        }
      }
    }
   else
    {
    }
   do
    {
     do
      {
       do
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
         return;
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
       if(_GLF_DEAD(false))
        return;
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), 0 ^ (int(_GLF_IDENTITY(2, (2) | 0))))))); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    continue;
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 ^ 1)); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false, ((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false) && true))))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            return;
           return;
          }
         return;
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    break;
  }
 uint workgroup_base = GLF_merged2_0_3_71_3_1_14GLF_merged3_0_1_11_1_1_14_2_1_14virtual_gidworkgroup_baseworkgroup_sizeworkgroup_size.xyz.z * GLF_merged2_0_3_74_3_1_13GLF_merged3_0_1_17_1_1_13_2_1_12subgroup_local_idsubgroup_sizeworkgroup_idnum_workgroup.xyz.z;
 if(_GLF_DEAD(false))
  return;
 GLF_merged2_0_3_74_3_1_14GLF_merged3_0_1_17_1_1_13_2_1_12subgroup_local_idsubgroup_sizeworkgroup_idworkgroup_base.w = workgroup_base;
 GLF_merged2_0_3_71_3_1_14GLF_merged3_0_1_11_1_1_14_2_1_14virtual_gidworkgroup_baseworkgroup_sizeworkgroup_size.xyz.y = GLF_merged2_0_3_74_3_1_14GLF_merged3_0_1_17_1_1_13_2_1_12subgroup_local_idsubgroup_sizeworkgroup_idworkgroup_base.w;
 if(_GLF_DEAD(false))
  return;
 for(int _injected_loop_counter = ((1 & 1) | 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(_GLF_IDENTITY(0.0, _GLF_IDENTITY(float(mat4x2(0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, abs(length(vec2(0.0, 0.0))))), min(float(mat4x2(0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, abs(length(vec2(0.0, 0.0))))), float(mat4x2(0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, abs(length(vec2(0.0, 0.0)))))))), injectionSwitch.x))); _injected_loop_counter --)
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     GLF_merged3_0_2_52_2_1_4_3_1_13GLF_merged2_0_1_13_1_1_14subgroup_baseworkgroup_basereadsubgroup_base.xy.y = GLF_merged2_0_3_71_3_1_14GLF_merged3_0_1_11_1_1_14_2_1_14virtual_gidworkgroup_baseworkgroup_sizeworkgroup_size.xyz.y;
    }
   else
    {
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (false)), ! (! ((! (false))))))) && true), (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec4(! (false), true, false, true)))))))
  return;
 uint subgroup_base = GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_11next_virtual_gidnum_workgroupreadsubgroup_id.w * GLF_merged2_0_3_74_3_1_13GLF_merged3_0_1_17_1_1_13_2_1_12subgroup_local_idsubgroup_sizeworkgroup_idnum_workgroup.xyz.y;
 GLF_merged2_0_3_74_3_1_13GLF_merged3_0_1_17_1_1_13_2_1_12subgroup_local_idsubgroup_sizeworkgroup_idsubgroup_base.w = subgroup_base;
 GLF_merged2_0_3_88_3_1_13GLF_merged2_0_2_50_2_1_13GLF_merged2_0_1_13_1_1_12subgroup_sizeworkgroup_idsubgroup_basesubgroup_size.xyz.z = GLF_merged2_0_3_74_3_1_13GLF_merged3_0_1_17_1_1_13_2_1_12subgroup_local_idsubgroup_sizeworkgroup_idsubgroup_base.w;
 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) && true)))
  {
   do
    {
     _GLF_IDENTITY(GLF_merged3_0_2_52_2_1_13_3_1_13GLF_merged2_0_1_13_1_1_14subgroup_baseworkgroup_basenum_workgroupsubgroup_base.w = GLF_merged2_0_3_88_3_1_13GLF_merged2_0_2_50_2_1_13GLF_merged2_0_1_13_1_1_12subgroup_sizeworkgroup_idsubgroup_basesubgroup_size.xyz.z, (_GLF_IDENTITY(GLF_merged3_0_2_52_2_1_13_3_1_13GLF_merged2_0_1_13_1_1_14subgroup_baseworkgroup_basenum_workgroupsubgroup_base.w = _GLF_IDENTITY(GLF_merged2_0_3_88_3_1_13GLF_merged2_0_2_50_2_1_13GLF_merged2_0_1_13_1_1_12subgroup_sizeworkgroup_idsubgroup_basesubgroup_size.xyz, clamp(GLF_merged2_0_3_88_3_1_13GLF_merged2_0_2_50_2_1_13GLF_merged2_0_1_13_1_1_12subgroup_sizeworkgroup_idsubgroup_basesubgroup_size.xyz, GLF_merged2_0_3_88_3_1_13GLF_merged2_0_2_50_2_1_13GLF_merged2_0_1_13_1_1_12subgroup_sizeworkgroup_idsubgroup_basesubgroup_size.xyz, GLF_merged2_0_3_88_3_1_13GLF_merged2_0_2_50_2_1_13GLF_merged2_0_1_13_1_1_12subgroup_sizeworkgroup_idsubgroup_basesubgroup_size.xyz)).z, ~ (~ (GLF_merged3_0_2_52_2_1_13_3_1_13GLF_merged2_0_1_13_1_1_14subgroup_baseworkgroup_basenum_workgroupsubgroup_base.w = GLF_merged2_0_3_88_3_1_13GLF_merged2_0_2_50_2_1_13GLF_merged2_0_1_13_1_1_12subgroup_sizeworkgroup_idsubgroup_basesubgroup_size.xyz.z)))) / 1u);
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
 else
  {
  }
 GLF_merged3_0_2_52_2_1_4_3_1_13GLF_merged2_0_1_13_1_1_14subgroup_baseworkgroup_basereadsubgroup_base.w = GLF_merged3_0_2_52_2_1_13_3_1_13GLF_merged2_0_1_13_1_1_14subgroup_baseworkgroup_basenum_workgroupsubgroup_base.w;
 GLF_merged3_0_2_52_2_1_4_3_1_13GLF_merged2_0_1_13_1_1_14subgroup_baseworkgroup_basereadsubgroup_base.xy.x = GLF_merged3_0_2_52_2_1_4_3_1_13GLF_merged2_0_1_13_1_1_14subgroup_baseworkgroup_basereadsubgroup_base.w;
 uint virtual_gid = GLF_merged3_0_2_52_2_1_4_3_1_13GLF_merged2_0_1_13_1_1_14subgroup_baseworkgroup_basereadsubgroup_base.xy.y + GLF_merged3_0_2_52_2_1_4_3_1_13GLF_merged2_0_1_13_1_1_14subgroup_baseworkgroup_basereadsubgroup_base.xy.x + GLF_merged2_0_3_74_3_1_13GLF_merged3_0_1_17_1_1_13_2_1_12subgroup_local_idsubgroup_sizeworkgroup_idnum_workgroup.xyz.x;
 GLF_merged3_0_2_52_2_1_13_3_1_11GLF_merged2_0_1_13_1_1_14subgroup_baseworkgroup_basesubgroup_sizevirtual_gid.w = virtual_gid;
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 else
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       GLF_merged3_0_2_52_2_1_4_3_1_11GLF_merged2_0_1_13_1_1_14subgroup_baseworkgroup_basereadvirtual_gid.w = GLF_merged3_0_2_52_2_1_13_3_1_11GLF_merged2_0_1_13_1_1_14subgroup_baseworkgroup_basesubgroup_sizevirtual_gid.w;
      }
     else
      {
      }
    }
  }
 if(_GLF_DEAD(false))
  return;
 for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
  {
   GLF_merged2_0_3_71_3_1_14GLF_merged3_0_1_11_1_1_14_2_1_14virtual_gidworkgroup_baseworkgroup_sizeworkgroup_size.xyz.x = GLF_merged3_0_2_52_2_1_4_3_1_11GLF_merged2_0_1_13_1_1_14subgroup_baseworkgroup_basereadvirtual_gid.w;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 GLF_merged2_0_3_71_3_1_17GLF_merged3_0_1_11_1_1_17_2_1_11subgroup_idsubgroup_local_idvirtual_gidsubgroup_local_id.xyz.z = GLF_merged2_0_3_71_3_1_14GLF_merged3_0_1_11_1_1_14_2_1_14virtual_gidworkgroup_baseworkgroup_sizeworkgroup_size.xyz.x;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(2.9) : injectionSwitch.y))))))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && ((injectionSwitch.x > injectionSwitch.y))))))))))
  {
   if(_GLF_DEAD(false))
    {
     do
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true, false, true)))))
          break;
         continue;
        }
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          continue;
         return;
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            return;
           return;
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
   if(_GLF_DEAD(false))
    {
     do
      {
       if(_GLF_DEAD(false))
        return;
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(false))
      return;
     do
      {
       if(_GLF_DEAD(false))
        break;
       for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))), (_GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y)))) && true); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          return;
        }
       return;
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
   return;
   do
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        return;
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(_GLF_IDENTITY(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true), bvec3(bvec3(_GLF_IDENTITY(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true), bvec3(bvec4(bvec3(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false), false, true), false))))))))))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       return;
      }
     if(_GLF_DEAD(false))
      break;
    }
  }
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(0, ~ (~ (0)))); _injected_loop_counter --)
      {
       do
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           return;
          }
         else
          {
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
   do
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       return;
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(false || (false), true && (false || (false)))), (_GLF_IDENTITY(false, _GLF_IDENTITY(false || (false), true && (false || (false))))) || false)) && true)))
    return;
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
  }
 for(int _injected_loop_counter = (0 & 85138); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bvec2(false, false)))))
    {
     do
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, (false) || false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          continue;
        }
       else
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)), ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))).y)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))
            return;
          }
         else
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
            return;
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) && true)))
        {
         for(int _injected_loop_counter = (0 | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(0, ~ (~ (0)))), _GLF_IDENTITY(int(0), ~ (~ (int(0)))))) >> _GLF_IDENTITY(int(0), int(0))), (true ? ((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(0, ~ (~ (0)))), _GLF_IDENTITY(int(0), ~ (~ (int(0)))))) >> _GLF_IDENTITY(int(0), int(0))) : _GLF_FUZZED(_injected_loop_counter)))); _injected_loop_counter ++)
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              break;
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               return;
              }
             else
              {
              }
            }
          }
        }
       else
        {
         if(_GLF_DEAD(false))
          return;
        }
      }
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) - 0)) | (0))); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          {
           do
            {
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (((1 & 1) << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), clamp(int(1), int(1), int(1)))))); _injected_loop_counter ++)
              {
               if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), (bool(bool(false))) || false)), (injectionSwitch.x > injectionSwitch.y))))
                return;
               if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec3(false, _GLF_IDENTITY(true, ! (! (true))), true))), bool(bvec2(_GLF_IDENTITY(false, bool(bvec3(false, _GLF_IDENTITY(true, ! (! (true))), true))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
                continue;
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
           return;
           if(_GLF_DEAD(false))
            break;
          }
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(false))
            return;
          }
         else
          {
          }
        }
      }
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
          return;
         return;
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         return;
        }
      }
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
         return;
        }
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y))))
          return;
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             return;
            }
           else
            {
            }
          }
        }
       do
        {
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
       if(_GLF_DEAD(false))
        {
         do
          {
           return;
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       do
        {
         return;
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(false))
        continue;
      }
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bool(false)))) || false)), false || (_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_DEAD(false), false, false))))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   return;
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 else
  {
   for(int _injected_loop_counter = ((0 ^ 1) & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
      break;
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec3(false, _GLF_IDENTITY(true, ! (! (true))), false))), false || (false)), (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) ^ 0))
        {
         do
          {
           do
            {
             for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 & 1)); _injected_loop_counter ++)
              {
               if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), true))))
                {
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                  {
                   return;
                  }
                 else
                  {
                  }
                }
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(false))
                break;
               return;
               if(_GLF_DEAD(false))
                continue;
              }
             do
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                continue;
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                 if(_GLF_DEAD(false))
                  break;
                }
               else
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-86.55) : _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(float(injectionSwitch.y)), min(float(float(injectionSwitch.y)), _GLF_IDENTITY(float(float(injectionSwitch.y)), mix(float(float(float(injectionSwitch.y))), float(_GLF_FUZZED(1.0)), bool(false))))))))))))
                    continue;
                   break;
                  }
                 for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(8), int(8))); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
                  {
                   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, false, false)))))
                    {
                     if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
                      break;
                     continue;
                    }
                   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_GLF_IDENTITY(_injected_loop_counter, clamp(_GLF_IDENTITY(_injected_loop_counter, _GLF_IDENTITY(int(ivec2(_injected_loop_counter, 1)), (int(ivec2(_injected_loop_counter, 1))) | (int(ivec2(_injected_loop_counter, 1))))), _GLF_IDENTITY(_injected_loop_counter, 0 ^ (_injected_loop_counter)), _injected_loop_counter))) | 0) > 0); _injected_loop_counter --)
                    {
                     do
                      {
                       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec4(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, _GLF_IDENTITY(false, bool(bvec4(false, true, true, false))), true))))
                        return;
                      }
                     while(_GLF_WRAPPED_LOOP(false));
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_DEAD(false))
                        {
                         if(_GLF_WRAPPED_IF_TRUE(true))
                          {
                           return;
                          }
                         else
                          {
                           if(_GLF_DEAD(false))
                            break;
                           if(_GLF_DEAD(false))
                            return;
                          }
                        }
                       continue;
                      }
                     if(_GLF_DEAD(false))
                      return;
                     return;
                     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true))
                      break;
                     do
                      {
                       if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, false, _GLF_IDENTITY(true, bool(bvec4(true, false, true, false))))), ! (! (bool(bvec3(false, false, _GLF_IDENTITY(true, bool(bvec4(true, false, true, false)))))))))))
                        return;
                      }
                     while(_GLF_WRAPPED_LOOP(false));
                     if(_GLF_DEAD(false))
                      continue;
                    }
                  }
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    continue;
                   continue;
                  }
                }
               if(_GLF_DEAD(false))
                break;
              }
             while(_GLF_WRAPPED_LOOP(false));
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_DEAD(false))
                  break;
                 break;
                }
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_DEAD(false))
                  return;
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))
                  {
                   if(_GLF_DEAD(false))
                    return;
                   if(_GLF_DEAD(false))
                    continue;
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    break;
                   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                    break;
                   if(_GLF_DEAD(false))
                    continue;
                   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                    {
                     return;
                    }
                   else
                    {
                    }
                  }
                 else
                  {
                   if(_GLF_DEAD(false))
                    break;
                  }
                 if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
                  {
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      break;
                     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (int(_GLF_ONE(1.0, injectionSwitch.y)) ^ (0 & _GLF_IDENTITY(-95746, clamp(-95746, _GLF_IDENTITY(-95746, 0 ^ (-95746)), -95746))))); _injected_loop_counter ++)
                      {
                       return;
                      }
                    }
                   if(_GLF_DEAD(false))
                    return;
                   if(_GLF_DEAD(false))
                    continue;
                   continue;
                  }
                }
               else
                {
                }
               if(_GLF_DEAD(false))
                {
                 do
                  {
                   return;
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  return;
                }
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              break;
            }
           if(_GLF_DEAD(false))
            break;
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
        {
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, ! (! (false))), false, true)))))
          continue;
         if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false))))
          continue;
         return;
        }
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        continue;
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       continue;
      }
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) || false))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false), true, true, false))))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            continue;
           return;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
          }
        }
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 else
  {
  }
 uint next_virtual_gid = _GLF_IDENTITY(_GLF_IDENTITY(GLF_merged3_0_2_52_2_1_4_3_1_13GLF_merged2_0_1_13_1_1_14subgroup_baseworkgroup_basereadsubgroup_base, (GLF_merged3_0_2_52_2_1_4_3_1_13GLF_merged2_0_1_13_1_1_14subgroup_baseworkgroup_basereadsubgroup_base) | (GLF_merged3_0_2_52_2_1_4_3_1_13GLF_merged2_0_1_13_1_1_14subgroup_baseworkgroup_basereadsubgroup_base)).xy, (uvec2(0u, 0u) | uvec2(0u, 0u)) ^ (_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged3_0_2_52_2_1_4_3_1_13GLF_merged2_0_1_13_1_1_14subgroup_baseworkgroup_basereadsubgroup_base, (GLF_merged3_0_2_52_2_1_4_3_1_13GLF_merged2_0_1_13_1_1_14subgroup_baseworkgroup_basereadsubgroup_base) | (GLF_merged3_0_2_52_2_1_4_3_1_13GLF_merged2_0_1_13_1_1_14subgroup_baseworkgroup_basereadsubgroup_base)).xy, (_GLF_IDENTITY(GLF_merged3_0_2_52_2_1_4_3_1_13GLF_merged2_0_1_13_1_1_14subgroup_baseworkgroup_basereadsubgroup_base, (GLF_merged3_0_2_52_2_1_4_3_1_13GLF_merged2_0_1_13_1_1_14subgroup_baseworkgroup_basereadsubgroup_base) | (GLF_merged3_0_2_52_2_1_4_3_1_13GLF_merged2_0_1_13_1_1_14subgroup_baseworkgroup_basereadsubgroup_base)).xy) | (_GLF_IDENTITY(GLF_merged3_0_2_52_2_1_4_3_1_13GLF_merged2_0_1_13_1_1_14subgroup_baseworkgroup_basereadsubgroup_base, (GLF_merged3_0_2_52_2_1_4_3_1_13GLF_merged2_0_1_13_1_1_14subgroup_baseworkgroup_basereadsubgroup_base) | (GLF_merged3_0_2_52_2_1_4_3_1_13GLF_merged2_0_1_13_1_1_14subgroup_baseworkgroup_basereadsubgroup_base)).xy)))).y + GLF_merged3_0_2_52_2_1_4_3_1_13GLF_merged2_0_1_13_1_1_14subgroup_baseworkgroup_basereadsubgroup_base.xy.x + (_GLF_IDENTITY((_GLF_IDENTITY(GLF_merged2_0_3_74_3_1_13GLF_merged3_0_1_17_1_1_13_2_1_12subgroup_local_idsubgroup_sizeworkgroup_idnum_workgroup, uvec4(0u, 0u, 0u, 0u) + (GLF_merged2_0_3_74_3_1_13GLF_merged3_0_1_17_1_1_13_2_1_12subgroup_local_idsubgroup_sizeworkgroup_idnum_workgroup)).xyz.x + 1) % GLF_merged2_0_3_74_3_1_13GLF_merged3_0_1_17_1_1_13_2_1_12subgroup_local_idsubgroup_sizeworkgroup_idnum_workgroup.xyz.y, ((_GLF_IDENTITY(GLF_merged2_0_3_74_3_1_13GLF_merged3_0_1_17_1_1_13_2_1_12subgroup_local_idsubgroup_sizeworkgroup_idnum_workgroup.xyz, ((uvec3(1u, 1u, 1u) << _GLF_IDENTITY(uvec3(4u), uvec3(4u))) >> _GLF_IDENTITY(uvec3(4u), _GLF_IDENTITY(uvec3(4u), clamp(uvec3(4u), uvec3(4u), uvec3(4u))))) * (_GLF_IDENTITY(GLF_merged2_0_3_74_3_1_13GLF_merged3_0_1_17_1_1_13_2_1_12subgroup_local_idsubgroup_sizeworkgroup_idnum_workgroup.xyz, max(GLF_merged2_0_3_74_3_1_13GLF_merged3_0_1_17_1_1_13_2_1_12subgroup_local_idsubgroup_sizeworkgroup_idnum_workgroup.xyz, GLF_merged2_0_3_74_3_1_13GLF_merged3_0_1_17_1_1_13_2_1_12subgroup_local_idsubgroup_sizeworkgroup_idnum_workgroup.xyz)))).x + 1) % GLF_merged2_0_3_74_3_1_13GLF_merged3_0_1_17_1_1_13_2_1_12subgroup_local_idsubgroup_sizeworkgroup_idnum_workgroup.xyz.y) - 0u));
 GLF_merged2_0_3_71_3_1_16GLF_merged3_0_1_11_1_1_14_2_1_14virtual_gidworkgroup_baseworkgroup_sizenext_virtual_gid.w = next_virtual_gid;
 _GLF_IDENTITY(GLF_merged3_0_2_52_2_1_16_3_1_4GLF_merged2_0_1_13_1_1_14subgroup_baseworkgroup_basenext_virtual_gidread.z = GLF_merged2_0_3_71_3_1_16GLF_merged3_0_1_11_1_1_14_2_1_14virtual_gidworkgroup_baseworkgroup_sizenext_virtual_gid.w, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(workgroup_size) : GLF_merged3_0_2_52_2_1_16_3_1_4GLF_merged2_0_1_13_1_1_14subgroup_baseworkgroup_basenext_virtual_gidread.z = GLF_merged2_0_3_71_3_1_16GLF_merged3_0_1_11_1_1_14_2_1_14virtual_gidworkgroup_baseworkgroup_sizenext_virtual_gid.w));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   for(int _injected_loop_counter = 0; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), int(ivec3(int(4), 1, 1))))) >> _GLF_IDENTITY(int(4), int(4)))), (_GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), int(ivec3(int(4), 1, 1))))) >> _GLF_IDENTITY(int(4), int(4))))) && true); _injected_loop_counter ++)
    {
     return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      continue;
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
      return;
    }
   if(_GLF_DEAD(false))
    return;
  }
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    continue;
   if(_GLF_DEAD(false))
    continue;
   if(_GLF_DEAD(false))
    break;
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
    {
     GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_11next_virtual_gidnum_workgroupreadsubgroup_id.x = GLF_merged3_0_2_52_2_1_16_3_1_4GLF_merged2_0_1_13_1_1_14subgroup_baseworkgroup_basenext_virtual_gidread.z;
     if(_GLF_DEAD(false))
      break;
    }
  }
 if(_GLF_DEAD(false))
  return;
 uint read = atomicLoad(buf[GLF_merged2_0_3_71_3_1_17GLF_merged3_0_1_11_1_1_17_2_1_11subgroup_idsubgroup_local_idvirtual_gidsubgroup_local_id.xyz.z], _GLF_IDENTITY(4, (4) | (4)), 64, 2);
 GLF_merged2_0_3_80_3_1_4GLF_merged2_0_2_52_2_1_4GLF_merged2_0_1_13_1_1_14subgroup_baseworkgroup_basereadread.w = read;
 GLF_merged3_0_2_52_2_1_16_3_1_4GLF_merged2_0_1_13_1_1_14subgroup_baseworkgroup_basenext_virtual_gidread.w = GLF_merged2_0_3_80_3_1_4GLF_merged2_0_2_52_2_1_4GLF_merged2_0_1_13_1_1_14subgroup_baseworkgroup_basereadread.w;
 do
  {
   GLF_merged2_0_3_80_3_1_4GLF_merged2_0_2_52_2_1_4GLF_merged2_0_1_13_1_1_14subgroup_baseworkgroup_basereadread.xyz.z = GLF_merged3_0_2_52_2_1_16_3_1_4GLF_merged2_0_1_13_1_1_14subgroup_baseworkgroup_basenext_virtual_gidread.w;
  }
 while(_GLF_WRAPPED_LOOP(false));
 GLF_merged3_0_2_52_2_1_4_3_1_11GLF_merged2_0_1_13_1_1_14subgroup_baseworkgroup_basereadvirtual_gid.z = GLF_merged2_0_3_80_3_1_4GLF_merged2_0_2_52_2_1_4GLF_merged2_0_1_13_1_1_14subgroup_baseworkgroup_basereadread.xyz.z;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), _GLF_IDENTITY(bool(bvec4(! (! (false)), true, true, false)), ! (_GLF_IDENTITY(! (bool(bvec4(! (! (false)), true, true, false))), bool(bool(! (bool(bvec4(! (! (false)), true, true, _GLF_IDENTITY(false, (false) || false)))))))))))))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     GLF_merged3_0_2_52_2_1_4_3_1_13GLF_merged2_0_1_13_1_1_14subgroup_baseworkgroup_basereadsubgroup_base.z = GLF_merged3_0_2_52_2_1_4_3_1_11GLF_merged2_0_1_13_1_1_14subgroup_baseworkgroup_basereadvirtual_gid.z;
    }
   else
    {
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         do
          {
           return;
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bvec4(true, true, true, false)))))
        {
         return;
        }
       else
        {
        }
      }
    }
   else
    {
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    {
     do
      {
       return;
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
     if(_GLF_DEAD(false))
      return;
    }
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 << _GLF_IDENTITY(int(8), int(8)))); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      break;
     return;
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   do
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_11next_virtual_gidnum_workgroupreadsubgroup_id.z = _GLF_IDENTITY(_GLF_IDENTITY(GLF_merged3_0_2_52_2_1_4_3_1_13GLF_merged2_0_1_13_1_1_14subgroup_baseworkgroup_basereadsubgroup_base, (GLF_merged3_0_2_52_2_1_4_3_1_13GLF_merged2_0_1_13_1_1_14subgroup_baseworkgroup_basereadsubgroup_base) >> _GLF_IDENTITY(uvec4(0u, 0u, 0u, 0u), uvec4(0u, 0u, 0u, 0u) ^ (uvec4(0u, 0u, 0u, 0u)))), (_GLF_IDENTITY(GLF_merged3_0_2_52_2_1_4_3_1_13GLF_merged2_0_1_13_1_1_14subgroup_baseworkgroup_basereadsubgroup_base, (GLF_merged3_0_2_52_2_1_4_3_1_13GLF_merged2_0_1_13_1_1_14subgroup_baseworkgroup_basereadsubgroup_base) >> _GLF_IDENTITY(uvec4(0u, 0u, 0u, 0u), uvec4(0u, 0u, 0u, 0u) ^ (uvec4(0u, 0u, 0u, 0u))))) / uvec4(1u, 1u, 1u, 1u)).z;
       if(_GLF_DEAD(false))
        break;
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if((GLF_merged2_0_3_74_3_1_13GLF_merged3_0_1_17_1_1_13_2_1_12subgroup_local_idsubgroup_sizeworkgroup_idnum_workgroup.xyz.x % 2) == _GLF_IDENTITY(0, (false ? _GLF_FUZZED(1056) : 0)))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      return;
     atomicStore(buf[GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_11next_virtual_gidnum_workgroupreadsubgroup_id.x], _GLF_IDENTITY(uint(1), min(uint(1), _GLF_IDENTITY(uint(1), _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec4(uint(1), 1u, 0u, 1u), clamp(uvec4(uint(1), 1u, 0u, 1u), uvec4(uint(1), 1u, 0u, 1u), uvec4(uint(1), 1u, 0u, 1u)))), (uint(uvec4(uint(1), 1u, 0u, 1u))) * 1u)))), 4, 64, 4);
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false))))
        return;
       if(_GLF_DEAD(false))
        {
         do
          {
           return;
           if(_GLF_DEAD(false))
            continue;
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
     return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 else
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x < injectionSwitch.y), ! (_GLF_IDENTITY(! (! (injectionSwitch.x < injectionSwitch.y)), _GLF_IDENTITY((! (! (injectionSwitch.x < injectionSwitch.y))) && true, ! (! (_GLF_IDENTITY((! (! (injectionSwitch.x < injectionSwitch.y))), bool(bvec4((! (! (injectionSwitch.x < injectionSwitch.y))), false, false, false))) && true))))))))))))
        {
         do
          {
           do
            {
             for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
              {
               atomicStore(buf[GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_11next_virtual_gidnum_workgroupreadsubgroup_id.x], uint(1), 4, 64, 4);
              }
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
              }
             else
              {
               if(_GLF_DEAD(false))
                {
                 do
                  {
                   return;
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                }
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)))))
            return;
          }
         else
          {
           if(_GLF_DEAD(false))
            return;
          }
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         if(_GLF_DEAD(false))
          return;
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(vec2(injectionSwitch), max(vec2(injectionSwitch), vec2(injectionSwitch)))))[1])).x > injectionSwitch.y))))
              return;
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), _GLF_IDENTITY((int(6)), ~ (~ (_GLF_IDENTITY((int(6)), min((int(6)), (int(6))))))) << 0))) >> _GLF_IDENTITY(int(6), int(6)))); _injected_loop_counter ++)
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    {
                     if(_GLF_WRAPPED_IF_TRUE(true))
                      {
                       if(_GLF_DEAD(false))
                        break;
                       if(_GLF_WRAPPED_IF_FALSE(false))
                        {
                        }
                       else
                        {
                         if(_GLF_DEAD(false))
                          continue;
                         return;
                        }
                      }
                     else
                      {
                      }
                    }
                   return;
                  }
                }
               else
                {
                }
              }
            }
           else
            {
            }
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
              }
             else
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  return;
                }
               else
                {
                 if(_GLF_DEAD(false))
                  {
                   do
                    {
                     return;
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                  }
                 if(_GLF_DEAD(false))
                  return;
                 if(_GLF_DEAD(false))
                  return;
                }
              }
            }
           else
            {
            }
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0))) > injectionSwitch.y))))
            return;
          }
        }
      }
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   do
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), bool(bvec4(_GLF_IDENTITY(false, true && _GLF_IDENTITY((false), ((false)) || false)), false, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), _GLF_IDENTITY(bool(bvec3(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))), false, false)), (bool(bvec3(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))), false, false))) && true)))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
        return;
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         return;
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
   do
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bvec4(false, false, true, true)))))
      {
      }
     else
      {
       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), _GLF_IDENTITY(! (! (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) && true))))), bool(bvec3(! (! (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) && true))))), false, false)))))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            break;
           return;
          }
         if(_GLF_DEAD(false))
          break;
        }
       else
        {
         do
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).x > injectionSwitch.y))))
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                }
               else
                {
                 for(int _injected_loop_counter = 1; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != (0 >> _GLF_IDENTITY(int(6), int(6)))), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != (0 >> _GLF_IDENTITY(int(6), int(6))))))); _injected_loop_counter --)
                  {
                   for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 << _GLF_IDENTITY(int(6), int(6)))); _injected_loop_counter --)
                    {
                     return;
                    }
                  }
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  break;
                }
              }
             else
              {
              }
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(mat3x4(injectionSwitch.y, 0.0, 0.0, determinant(mat4(0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, exp(0.0), 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, sin(0.0))), 1.0, 1.0, 1.0, exp(0.0), 0.0, 1.0, 1.0, 1.0)))))))
          return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            break;
           if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), true && _GLF_IDENTITY((_GLF_DEAD(false)), ((_GLF_DEAD(false))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) || false))
            {
             for(int _injected_loop_counter = 1; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0), bool(bvec4(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0), false, false, true))); _injected_loop_counter --)
              {
               return;
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              continue;
             if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
              return;
            }
           return;
          }
        }
      }
    }
   while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), bool(bvec4(_GLF_WRAPPED_LOOP(false), true, false, true))));
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x > _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0), _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))))))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(false))
  return;
 do
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        {
         do
          {
           return;
           if(_GLF_DEAD(false))
            break;
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      break;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
       do
        {
         do
          {
           return;
           if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((false), bool(_GLF_IDENTITY(bvec3((false), false, true), bvec3(bvec3(bvec3((false), false, true)))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), (_GLF_DEAD(_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) || false))
            {
             if(_GLF_DEAD(false))
              return;
             continue;
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * _GLF_IDENTITY(mat2(1.0), (false ? _GLF_FUZZED(mat2(19.65, -2.5, 56.58, 8482.7736)) : mat2(1.0))), (false ? _GLF_FUZZED(vec2(_GLF_IDENTITY(-9.3, min(-9.3, -9.3)), 0.5)) : (injectionSwitch) * mat2(1.0)))).x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * _GLF_IDENTITY(mat2(1.0), (false ? _GLF_FUZZED(mat2(19.65, -2.5, 56.58, 8482.7736)) : mat2(1.0))), (false ? _GLF_FUZZED(vec2(_GLF_IDENTITY(-9.3, min(-9.3, -9.3)), 0.5)) : (injectionSwitch) * mat2(1.0)))).x > injectionSwitch.y) || false)))));
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > _GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(distance(vec3(5.7, 0.4, 6.6), vec3(70.86, 922.902, 9.7)))))))))
          continue;
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, true && (false))));
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) && true)))), (false) || false)))
        break;
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
          continue;
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           do
            {
             return;
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
          }
         else
          {
          }
        }
      }
    }
  }
 else
  {
  }
 do
  {
   subgroupBarrier();
   if(_GLF_DEAD(false))
    return;
  }
 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))));
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   for(int _injected_loop_counter = (_GLF_IDENTITY((0 << _GLF_IDENTITY(int(0), int(0))), (false ? _GLF_FUZZED(-71120) : _GLF_IDENTITY((0 << _GLF_IDENTITY(int(0), int(0))), int(ivec4((0 << _GLF_IDENTITY(int(0), int(0))), 0, 0, 0))))) | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     atomicStore(checker[GLF_merged2_0_3_71_3_1_17GLF_merged3_0_1_11_1_1_17_2_1_11subgroup_idsubgroup_local_idvirtual_gidsubgroup_local_id.xyz.z], GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_11next_virtual_gidnum_workgroupreadsubgroup_id.z, _GLF_IDENTITY(4, 0 | (4)), 64, 4);
    }
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     else
      {
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
  }
 else
  {
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END
BUFFER checker DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected_checker DATA_TYPE uint32 SIZE 8388096 FILL 0

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 
  BIND BUFFER checker AS storage DESCRIPTOR_SET 0 BINDING 2 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT checker EQ_BUFFER expected_checker
