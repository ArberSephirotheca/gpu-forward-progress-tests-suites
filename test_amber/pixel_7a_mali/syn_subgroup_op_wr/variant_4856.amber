#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_1 {
 mat3x4 _f0;
 mat2x4 _f1;
 uint _f2;
 mat3x4 _f3;
 mat4x2 _f4;
 vec2 _f5;
} ;

struct _GLF_struct_0 {
 bool _f0;
 bvec2 _f1;
 mat2x4 _f2;
 mat4x2 _f3;
 bvec3 _f4;
 mat3 _f5;
 mat4x3 _f6;
} ;

struct _GLF_struct_2 {
 _GLF_struct_0 _f0;
 ivec3 _f1;
 int _f2;
 _GLF_struct_1 _f3;
 mat2 _f4;
} ;

struct _GLF_struct_3 {
 bool _f0;
 _GLF_struct_2 _f1;
 uint subgroup_size;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uvec4 GLF_merged4_0_1_4_1_1_17_2_1_14_3_1_14readsubgroup_local_idworkgroup_baseworkgroup_size;
 uvec4 GLF_merged4_0_1_17_1_1_13_2_1_14_3_1_14subgroup_local_idsubgroup_sizeworkgroup_baseworkgroup_size;
 uvec4 GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_13next_virtual_gidnum_workgroupreadsubgroup_base;
 uint subgroup_id = gl_SubgroupID;
 _GLF_struct_3 _GLF_struct_replacement_3 = _GLF_struct_3(true, _GLF_struct_2(_GLF_struct_0(true, bvec2(true), mat2x4(1.0), mat4x2(1.0), bvec3(true), mat3(1.0), mat4x3(1.0)), ivec3(1), 1, _GLF_struct_1(mat3x4(1.0), mat2x4(1.0), 1u, mat3x4(1.0), mat4x2(1.0), vec2(1.0)), mat2(1.0)), gl_SubgroupSize);
 GLF_merged4_0_1_17_1_1_13_2_1_14_3_1_14subgroup_local_idsubgroup_sizeworkgroup_baseworkgroup_size.y = _GLF_struct_replacement_3.subgroup_size;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 GLF_merged4_0_1_4_1_1_17_2_1_14_3_1_14readsubgroup_local_idworkgroup_baseworkgroup_size.y = subgroup_local_id;
 GLF_merged4_0_1_17_1_1_13_2_1_14_3_1_14subgroup_local_idsubgroup_sizeworkgroup_baseworkgroup_size.x = GLF_merged4_0_1_4_1_1_17_2_1_14_3_1_14readsubgroup_local_idworkgroup_baseworkgroup_size.y;
 uint num_workgroup = gl_NumWorkGroups.x;
 do
  {
   GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_13next_virtual_gidnum_workgroupreadsubgroup_base.y = num_workgroup;
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 uint workgroup_size = gl_WorkGroupSize.x;
 GLF_merged4_0_1_4_1_1_17_2_1_14_3_1_14readsubgroup_local_idworkgroup_baseworkgroup_size.w = workgroup_size;
 GLF_merged4_0_1_17_1_1_13_2_1_14_3_1_14subgroup_local_idsubgroup_sizeworkgroup_baseworkgroup_size.w = GLF_merged4_0_1_4_1_1_17_2_1_14_3_1_14readsubgroup_local_idworkgroup_baseworkgroup_size.w;
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = GLF_merged4_0_1_17_1_1_13_2_1_14_3_1_14subgroup_local_idsubgroup_sizeworkgroup_baseworkgroup_size.w * workgroup_id;
 GLF_merged4_0_1_4_1_1_17_2_1_14_3_1_14readsubgroup_local_idworkgroup_baseworkgroup_size.z = workgroup_base;
 GLF_merged4_0_1_17_1_1_13_2_1_14_3_1_14subgroup_local_idsubgroup_sizeworkgroup_baseworkgroup_size.z = GLF_merged4_0_1_4_1_1_17_2_1_14_3_1_14readsubgroup_local_idworkgroup_baseworkgroup_size.z;
 uint subgroup_base = subgroup_id * GLF_merged4_0_1_17_1_1_13_2_1_14_3_1_14subgroup_local_idsubgroup_sizeworkgroup_baseworkgroup_size.y;
 do
  {
   GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_13next_virtual_gidnum_workgroupreadsubgroup_base.w = subgroup_base;
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 uint virtual_gid = GLF_merged4_0_1_17_1_1_13_2_1_14_3_1_14subgroup_local_idsubgroup_sizeworkgroup_baseworkgroup_size.z + GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_13next_virtual_gidnum_workgroupreadsubgroup_base.w + GLF_merged4_0_1_17_1_1_13_2_1_14_3_1_14subgroup_local_idsubgroup_sizeworkgroup_baseworkgroup_size.x;
 uint next_virtual_gid = GLF_merged4_0_1_17_1_1_13_2_1_14_3_1_14subgroup_local_idsubgroup_sizeworkgroup_baseworkgroup_size.z + GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_13next_virtual_gidnum_workgroupreadsubgroup_base.w + ((GLF_merged4_0_1_17_1_1_13_2_1_14_3_1_14subgroup_local_idsubgroup_sizeworkgroup_baseworkgroup_size.x + 1) % GLF_merged4_0_1_17_1_1_13_2_1_14_3_1_14subgroup_local_idsubgroup_sizeworkgroup_baseworkgroup_size.y);
 GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_13next_virtual_gidnum_workgroupreadsubgroup_base.x = next_virtual_gid;
 uint read = 0;
 GLF_merged4_0_1_4_1_1_17_2_1_14_3_1_14readsubgroup_local_idworkgroup_baseworkgroup_size.x = read;
 GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_13next_virtual_gidnum_workgroupreadsubgroup_base.z = GLF_merged4_0_1_4_1_1_17_2_1_14_3_1_14readsubgroup_local_idworkgroup_baseworkgroup_size.x;
 atomicStore(buf[GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_13next_virtual_gidnum_workgroupreadsubgroup_base.x], uint(1), 4, 64, 4);
 if((GLF_merged4_0_1_17_1_1_13_2_1_14_3_1_14subgroup_local_idsubgroup_sizeworkgroup_baseworkgroup_size.x % 2) == 0)
  {
   subgroupAll(false);
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_13next_virtual_gidnum_workgroupreadsubgroup_base.z = atomicLoad(buf[virtual_gid], 4, 64, 2);
    }
  }
 else
  {
   subgroupAll(false);
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_13next_virtual_gidnum_workgroupreadsubgroup_base.z = atomicLoad(buf[virtual_gid], 4, 64, 2);
    }
   else
    {
    }
  }
 subgroupBarrier();
 atomicStore(checker[virtual_gid], GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_13next_virtual_gidnum_workgroupreadsubgroup_base.z, 4, 64, 4);
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END
BUFFER checker DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected_checker DATA_TYPE uint32 SIZE 8388096 FILL 1

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 
  BIND BUFFER checker AS storage DESCRIPTOR_SET 0 BINDING 2 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT checker EQ_BUFFER expected_checker
