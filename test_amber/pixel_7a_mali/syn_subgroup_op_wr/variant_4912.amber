#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     do
      {
       return;
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))));
    }
   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), (_GLF_WRAPPED_IF_TRUE(true)) && true))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || _GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y)), bool(bvec3(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y)), true, false)))) || false))))
      {
       do
        {
         do
          {
           return;
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(_GLF_IDENTITY(vec2(-87.94, 772.075), (false ? _GLF_FUZZED(vec2(-79.65, 624.343)) : vec2(-87.94, 772.075)))) : _GLF_IDENTITY(injectionSwitch, vec2(mat2x4(injectionSwitch, determinant(mat2(0.0, 0.0, 1.0, 0.0)), 0.0, 1.0, 0.0, 0.0, 0.0))))).y))));
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, _GLF_IDENTITY(false || (false), bool(bvec3(false || (false), false, false))))));
      }
    }
   else
    {
    }
   for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, ~ (~ (_injected_loop_counter))) > 0); _injected_loop_counter --)
    {
     return;
    }
  }
 if(_GLF_DEAD(false))
  return;
 uint num_workgroup = _GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups.x, clamp(gl_NumWorkGroups.x, gl_NumWorkGroups.x, gl_NumWorkGroups.x)), clamp(gl_NumWorkGroups.x, gl_NumWorkGroups.x, _GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups.x, (gl_NumWorkGroups.x) | 0u), (gl_NumWorkGroups.x) << 0u)));
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       return;
      }
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 uint workgroup_size = _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) | (gl_WorkGroupSize)).x, (gl_WorkGroupSize.x) | (gl_WorkGroupSize.x)), ~ (~ (_GLF_IDENTITY(gl_WorkGroupSize.x, _GLF_IDENTITY((gl_WorkGroupSize.x), min((gl_WorkGroupSize.x), (gl_WorkGroupSize.x))) | (gl_WorkGroupSize.x)))));
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3)))); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-9.4), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED((true ? 5009.3212 : 619.476))), bvec2(true, false))).x > injectionSwitch.y))))
      return;
    }
  }
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    {
     do
      {
       return;
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 uint workgroup_id = gl_WorkGroupID.x;
 do
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false))))))))
    return;
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
  }
 do
  {
   if(_GLF_DEAD(false))
    {
     do
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, max(0, _GLF_IDENTITY(0, (0) | (0))))); _injected_loop_counter --)
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (true)))))
            {
             do
              {
               return;
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           else
            {
            }
          }
        }
       else
        {
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false))));
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 uint workgroup_base = _GLF_IDENTITY(workgroup_size * workgroup_id, uint(_GLF_IDENTITY(uint(workgroup_size * workgroup_id), uint(uvec2(_GLF_IDENTITY(uint(_GLF_IDENTITY(workgroup_size, (workgroup_size) ^ 0u) * workgroup_id), _GLF_IDENTITY(_GLF_IDENTITY((uint(workgroup_size * workgroup_id)), min((uint(workgroup_size * workgroup_id)), _GLF_IDENTITY((uint(workgroup_size * workgroup_id)), ((uint(workgroup_size * workgroup_id))) - 0u))), (_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(true, (true) || false), _GLF_IDENTITY(false, ! (! (false)))), bvec2(_GLF_IDENTITY(bvec3(bvec2(_GLF_IDENTITY(true, (true) || false), false), false), bvec3(bvec3(bvec3(bvec2(_GLF_IDENTITY(true, (true) || false), false), false)))))))) ? _GLF_IDENTITY((uint(workgroup_size * workgroup_id)), min((uint(_GLF_IDENTITY(workgroup_size, (0u | 0u) ^ (workgroup_size)) * workgroup_id)), _GLF_IDENTITY((uint(workgroup_size * _GLF_IDENTITY(workgroup_id, (workgroup_id) >> 0u))), ((uint(workgroup_size * workgroup_id))) - _GLF_IDENTITY(0u, (0u) | 0u)))) : _GLF_FUZZED(packUnorm2x16(vec2(-5.4, 5.3))))) - 0u), 0u)))));
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (int(_GLF_ZERO(0.0, injectionSwitch.x)) << _GLF_IDENTITY(int(0), int(0)))); _injected_loop_counter --)
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
    }
  }
 uint subgroup_base = _GLF_IDENTITY(subgroup_id * _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, 1u * (subgroup_size)), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, (subgroup_size) - (0u << _GLF_IDENTITY(uint(6u), _GLF_IDENTITY(uint(6u), uint(uvec2(uint(6u), 1u))))))) | (subgroup_size))), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_size, (subgroup_size) | (subgroup_size))), (~ (_GLF_IDENTITY(subgroup_size, (subgroup_size) | (subgroup_size)))) ^ 0u), max(_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_size, (subgroup_size) | (subgroup_size))), (~ (_GLF_IDENTITY(subgroup_size, (subgroup_size) | (subgroup_size)))) ^ 0u), _GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((subgroup_size) | (subgroup_size), ((subgroup_size) | _GLF_IDENTITY((subgroup_size), (true ? (subgroup_size) : _GLF_FUZZED(workgroup_size)))) / 1u))), (~ (_GLF_IDENTITY(subgroup_size, (subgroup_size) | (subgroup_size)))) ^ 0u)))), uint(_GLF_IDENTITY(uvec3(_GLF_IDENTITY((_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_size, (subgroup_size) | (subgroup_size))), (~ (_GLF_IDENTITY(subgroup_size, (subgroup_size) | (subgroup_size)))) ^ 0u)), (_GLF_IDENTITY((_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_size, (subgroup_size) | (subgroup_size))), (~ (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, ~ (~ (_GLF_IDENTITY(subgroup_size, (subgroup_size) >> 0u)))), (subgroup_size) | (subgroup_size)))) ^ 0u)), 0u + ((_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_size, (subgroup_size) | (subgroup_size))), (~ (_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((subgroup_size), min((subgroup_size), (subgroup_size))) | (subgroup_size)))) ^ 0u))))) | ((_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_size, (subgroup_size) | (subgroup_size))), (~ (_GLF_IDENTITY(subgroup_size, (subgroup_size) | (subgroup_size)))) ^ 0u)))), 1u, ((1u << _GLF_IDENTITY(uint(5u), uint(5u))) >> _GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(5u, _GLF_IDENTITY(clamp(5u, 5u, _GLF_IDENTITY(5u, (5u) - 0u)), ~ (~ (_GLF_IDENTITY(clamp(5u, 5u, _GLF_IDENTITY(5u, (5u) - 0u)), (clamp(5u, 5u, _GLF_IDENTITY(5u, (5u) - 0u))) | (clamp(5u, 5u, _GLF_IDENTITY(5u, (5u) - 0u))))))))), (false ? _GLF_FUZZED(workgroup_id) : uint(_GLF_IDENTITY(5u, clamp(5u, 5u, _GLF_IDENTITY(5u, (5u) - 0u)))))), uint(5u)))), clamp(uvec3((_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_size, (subgroup_size) | (subgroup_size))), (~ (_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((subgroup_size) | (subgroup_size), (false ? _GLF_FUZZED(packHalf2x16(injectionSwitch)) : (subgroup_size) | (subgroup_size)))))) ^ 0u)), 1u, ((_GLF_IDENTITY(1u << _GLF_IDENTITY(uint(5u), uint(5u)), clamp(_GLF_IDENTITY(1u << _GLF_IDENTITY(uint(5u), uint(5u)), clamp(1u << _GLF_IDENTITY(uint(5u), uint(5u)), 1u << _GLF_IDENTITY(uint(5u), uint(5u)), 1u << _GLF_IDENTITY(uint(5u), uint(5u)))), 1u << _GLF_IDENTITY(uint(5u), uint(5u)), 1u << _GLF_IDENTITY(uint(5u), uint(5u))))) >> _GLF_IDENTITY(uint(5u), uint(5u)))), uvec3(_GLF_IDENTITY((_GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, 1u * (_GLF_IDENTITY(subgroup_size, (subgroup_size) + 0u))), (subgroup_size) | _GLF_IDENTITY((subgroup_size), ((subgroup_size)) | ((subgroup_size))))), (~ (_GLF_IDENTITY(subgroup_size, (subgroup_size) | (subgroup_size)))) ^ 0u)), ~ (~ ((_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_size, (subgroup_size) | _GLF_IDENTITY((subgroup_size), ((subgroup_size)) | ((subgroup_size))))), (~ (_GLF_IDENTITY(subgroup_size, (subgroup_size) | (subgroup_size)))) ^ 0u))))), 1u, ((1u << _GLF_IDENTITY(uint(5u), uint(5u))) >> _GLF_IDENTITY(uint(5u), _GLF_IDENTITY(uint(5u), (_GLF_IDENTITY(uint(5u), (uint(5u)) - 0u)) ^ 0u)))), uvec3((_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_size, (subgroup_size) | (subgroup_size))), (~ (_GLF_IDENTITY(subgroup_size, (subgroup_size) | (subgroup_size)))) ^ 0u)), 1u, ((1u << _GLF_IDENTITY(uint(5u), uint(5u))) >> _GLF_IDENTITY(uint(5u), uint(5u)))))))) >> 0u))), (subgroup_id * _GLF_IDENTITY(subgroup_size, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_size, (subgroup_size) | (subgroup_size))), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((subgroup_size) | (subgroup_size), ((subgroup_size) | (subgroup_size)) | ((subgroup_size) | (subgroup_size))))), max(~ (_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((subgroup_size) | (subgroup_size), ((subgroup_size) | (subgroup_size)) | ((subgroup_size) | (subgroup_size))))), ~ (_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((subgroup_size) | (subgroup_size), ((subgroup_size) | (subgroup_size)) | ((subgroup_size) | (subgroup_size))))))), _GLF_IDENTITY((~ (_GLF_IDENTITY(subgroup_size, (subgroup_size) | (subgroup_size)))) ^ 0u, 0u + ((~ (_GLF_IDENTITY(subgroup_size, (subgroup_size) | (subgroup_size)))) ^ 0u)))), uint(_GLF_IDENTITY(_GLF_IDENTITY(uvec3((_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_size, (subgroup_size) | (subgroup_size))), (~ (_GLF_IDENTITY(subgroup_size, (subgroup_size) | (subgroup_size)))) ^ 0u)), 1u, ((1u << _GLF_IDENTITY(uint(5u), uint(5u))) >> _GLF_IDENTITY(uint(5u), _GLF_IDENTITY(uint(5u), uint(uvec2(uint(5u), 1u)))))), _GLF_IDENTITY(uvec3(uvec4(uvec3((_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_size, (subgroup_size) | (subgroup_size))), (~ (_GLF_IDENTITY(subgroup_size, (subgroup_size) | (subgroup_size)))) ^ 0u)), 1u, ((1u << _GLF_IDENTITY(uint(5u), uint(5u))) >> _GLF_IDENTITY(uint(5u), _GLF_IDENTITY(uint(5u), uint(uvec2(uint(5u), 1u)))))), 1u)), uvec3(0u, 0u, 0u) | (uvec3(uvec4(uvec3((_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_size, (subgroup_size) | (subgroup_size))), (~ (_GLF_IDENTITY(subgroup_size, (subgroup_size) | (subgroup_size)))) ^ 0u)), 1u, ((1u << _GLF_IDENTITY(uint(5u), uint(5u))) >> _GLF_IDENTITY(uint(5u), _GLF_IDENTITY(uint(5u), uint(uvec2(uint(5u), 1u)))))), 1u))))), clamp(uvec3((_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_size, (subgroup_size) | (subgroup_size))), (~ (_GLF_IDENTITY(subgroup_size, (subgroup_size) | (subgroup_size)))) ^ 0u)), 1u, ((1u << _GLF_IDENTITY(uint(5u), uint(5u))) >> _GLF_IDENTITY(uint(5u), uint(5u)))), uvec3((_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_size, (subgroup_size) | (_GLF_IDENTITY(subgroup_size, (subgroup_size) | (subgroup_size))))), (~ _GLF_IDENTITY((_GLF_IDENTITY(subgroup_size, (subgroup_size) | (subgroup_size))), ~ (~ (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_size, (subgroup_size) | (subgroup_size))), ((_GLF_IDENTITY(subgroup_size, (subgroup_size) | (subgroup_size)))) >> 0u))))) ^ 0u)), 1u, ((1u << _GLF_IDENTITY(uint(5u), uint(5u))) >> _GLF_IDENTITY(uint(5u), uint(5u)))), uvec3((_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((subgroup_size), _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec4(_GLF_IDENTITY((subgroup_size), max(_GLF_IDENTITY(_GLF_IDENTITY((subgroup_size), max((subgroup_size), (subgroup_size))), 0u | (_GLF_IDENTITY((subgroup_size), max((subgroup_size), (subgroup_size))))), (subgroup_size))), 0u, 1u, 1u), clamp(uvec4(_GLF_IDENTITY(_GLF_IDENTITY((subgroup_size), ((subgroup_size)) | (_GLF_IDENTITY((subgroup_size), ((subgroup_size)) | ((subgroup_size))))), max(_GLF_IDENTITY((subgroup_size), max((subgroup_size), (subgroup_size))), (subgroup_size))), 0u, 1u, 1u), uvec4(_GLF_IDENTITY((subgroup_size), max(_GLF_IDENTITY((subgroup_size), max((subgroup_size), (subgroup_size))), (subgroup_size))), 0u, 1u, 1u), uvec4(_GLF_IDENTITY(_GLF_IDENTITY((subgroup_size), max(_GLF_IDENTITY((subgroup_size), max((subgroup_size), (subgroup_size))), (subgroup_size))), 1u * (_GLF_IDENTITY(_GLF_IDENTITY((subgroup_size), max(_GLF_IDENTITY((subgroup_size), max((subgroup_size), (subgroup_size))), (subgroup_size))), 0u ^ (_GLF_IDENTITY((subgroup_size), max(_GLF_IDENTITY((subgroup_size), max((subgroup_size), (subgroup_size))), (subgroup_size))))))), 0u, 1u, 1u)))), ~ (~ (_GLF_IDENTITY(uint(_GLF_IDENTITY(uvec4(_GLF_IDENTITY((subgroup_size), max(_GLF_IDENTITY((subgroup_size), max((subgroup_size), (subgroup_size))), (subgroup_size))), 0u, 1u, 1u), clamp(uvec4(_GLF_IDENTITY((subgroup_size), max(_GLF_IDENTITY((subgroup_size), max((subgroup_size), (subgroup_size))), (subgroup_size))), 0u, 1u, 1u), uvec4(_GLF_IDENTITY((subgroup_size), max(_GLF_IDENTITY((subgroup_size), max((subgroup_size), (subgroup_size))), (subgroup_size))), 0u, 1u, 1u), uvec4(_GLF_IDENTITY((subgroup_size), max(_GLF_IDENTITY((subgroup_size), max((subgroup_size), (subgroup_size))), (subgroup_size))), 0u, 1u, 1u)))), (uint(_GLF_IDENTITY(uvec4(_GLF_IDENTITY((subgroup_size), max(_GLF_IDENTITY((subgroup_size), max((subgroup_size), (subgroup_size))), (subgroup_size))), 0u, 1u, 1u), clamp(uvec4(_GLF_IDENTITY((subgroup_size), max(_GLF_IDENTITY((subgroup_size), max((subgroup_size), (subgroup_size))), (subgroup_size))), 0u, 1u, 1u), uvec4(_GLF_IDENTITY((subgroup_size), max(_GLF_IDENTITY(_GLF_IDENTITY((subgroup_size), (_GLF_IDENTITY((subgroup_size), clamp((subgroup_size), (subgroup_size), _GLF_IDENTITY((subgroup_size), (true ? (subgroup_size) : _GLF_FUZZED(workgroup_id)))))) ^ 0u), max((subgroup_size), (subgroup_size))), (subgroup_size))), 0u, 1u, 1u), uvec4(_GLF_IDENTITY((subgroup_size), max(_GLF_IDENTITY((subgroup_size), max(_GLF_IDENTITY((subgroup_size), 0u ^ ((subgroup_size))), (subgroup_size))), (subgroup_size))), 0u, 1u, 1u))))) | 0u))))) | (subgroup_size))), (~ (_GLF_IDENTITY(subgroup_size, (subgroup_size) | (subgroup_size)))) ^ 0u)), 1u, (_GLF_IDENTITY((1u << _GLF_IDENTITY(uint(5u), uint(5u))), ((1u << _GLF_IDENTITY(uint(5u), uint(5u)))) / 1u) >> _GLF_IDENTITY(uint(5u), uint(5u)))))))) >> 0u)))) | 0u);
 uint virtual_gid = _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + subgroup_base, min(workgroup_base + subgroup_base, workgroup_base + subgroup_base)) + _GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY((subgroup_local_id) << 0u, max((subgroup_local_id) << 0u, (subgroup_local_id) << 0u))), ~ _GLF_IDENTITY((~ (_GLF_IDENTITY(workgroup_base + subgroup_base, min(workgroup_base + subgroup_base, workgroup_base + subgroup_base)) + _GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id) << 0u, clamp((subgroup_local_id) << 0u, _GLF_IDENTITY((subgroup_local_id), min((subgroup_local_id), (subgroup_local_id))) << 0u, (subgroup_local_id) << 0u)), max(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, ~ (~ (subgroup_local_id)))), (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, ~ (~ (subgroup_local_id)))), min((_GLF_IDENTITY(subgroup_local_id, ~ (~ (subgroup_local_id)))), (_GLF_IDENTITY(subgroup_local_id, ~ (~ (subgroup_local_id))))))) - ((0u | 0u) & uint(72079))) << 0u, _GLF_IDENTITY((subgroup_local_id), max(_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id), (true ? (subgroup_local_id) : _GLF_FUZZED(subgroup_base))), ((subgroup_local_id)) - 0u), _GLF_IDENTITY((subgroup_local_id), uint(_GLF_IDENTITY(uvec2((subgroup_local_id), 1u), (uvec2((subgroup_local_id), 1u)) >> _GLF_IDENTITY(uvec2(0u, 0u), min(uvec2(0u, 0u), uvec2(0u, 0u)))))))) << 0u))))), ~ (~ ((~ (_GLF_IDENTITY(workgroup_base + subgroup_base, min(workgroup_base + subgroup_base, workgroup_base + subgroup_base)) + _GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id) << 0u, clamp((subgroup_local_id) << 0u, _GLF_IDENTITY((subgroup_local_id), min((subgroup_local_id), (subgroup_local_id))) << 0u, (subgroup_local_id) << 0u)), max(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, ~ (~ (subgroup_local_id)))), (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, ~ (~ (subgroup_local_id)))), min((_GLF_IDENTITY(subgroup_local_id, ~ (~ (subgroup_local_id)))), (_GLF_IDENTITY(subgroup_local_id, ~ (~ (subgroup_local_id))))))) - ((0u | 0u) & uint(72079))) << 0u, _GLF_IDENTITY((subgroup_local_id), max(_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id), (true ? (subgroup_local_id) : _GLF_FUZZED(subgroup_base))), ((subgroup_local_id)) - 0u), _GLF_IDENTITY((subgroup_local_id), uint(_GLF_IDENTITY(uvec2((subgroup_local_id), 1u), (uvec2((subgroup_local_id), 1u)) >> _GLF_IDENTITY(uvec2(0u, 0u), min(uvec2(0u, 0u), uvec2(0u, 0u)))))))) << 0u))))))))), ~ (~ (_GLF_IDENTITY(workgroup_base + subgroup_base, min(workgroup_base + subgroup_base, workgroup_base + subgroup_base)) + _GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) << 0u), (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) << 0u)) * 1u))));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 uint next_virtual_gid = workgroup_base + subgroup_base + ((subgroup_local_id + _GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(62795)))) % _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, max(subgroup_size, subgroup_size)), _GLF_IDENTITY(_GLF_IDENTITY((true ? subgroup_size : _GLF_FUZZED(num_workgroup)), ((true ? subgroup_size : _GLF_FUZZED(num_workgroup))) | 0u), (_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), _GLF_IDENTITY(true, true && (true)), false, true))) ? _GLF_FUZZED(num_workgroup) : (true ? subgroup_size : _GLF_FUZZED(num_workgroup))))));
 uint read = 0;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)), vec2(_GLF_IDENTITY(mat2(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), 1.0, 1.0), mat2(mat4x3(mat2(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), _GLF_IDENTITY(1.0, clamp(1.0, _GLF_IDENTITY(1.0, min(1.0, 1.0)), _GLF_IDENTITY(1.0, max(1.0, 1.0)))), 1.0)))))).x < injectionSwitch.y))))
    {
     for(int _injected_loop_counter = ((0 ^ 0) ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), (int(7)) | (int(7))))) >> _GLF_IDENTITY(int(7), int(7)))); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (0 | _GLF_IDENTITY(1, min(1, 1)))); _GLF_IDENTITY(_injected_loop_counter ++, (_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter ++, (_GLF_IDENTITY(true ? _injected_loop_counter ++ : _GLF_FUZZED(_injected_loop_counter), 1 * (true ? _injected_loop_counter ++ : _GLF_FUZZED(_injected_loop_counter))))), ((0 & -40465) >> _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), int(int(int(4)))))) | (_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter ++, (true ? _injected_loop_counter ++ : _GLF_FUZZED(_GLF_IDENTITY(_injected_loop_counter, _GLF_IDENTITY(int(ivec3(_injected_loop_counter, ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3))), (1 & ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7)))))), 0 | (int(ivec3(_injected_loop_counter, ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3))), (1 & ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7)))))))))))), _GLF_IDENTITY(0, clamp(0, _GLF_IDENTITY(0, (0) | (0)), 0)) | (_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter ++, (true ? _injected_loop_counter ++ : _GLF_FUZZED(_injected_loop_counter))), (_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter ++, (true ? _GLF_IDENTITY(_injected_loop_counter ++, 1 * (_injected_loop_counter ++)) : _GLF_FUZZED(-71840))), (true ? _injected_loop_counter ++ : _GLF_FUZZED(_injected_loop_counter)))) << 0)))))) + 0))
      {
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
         do
          {
           return;
          }
         while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), false || (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), (_GLF_WRAPPED_LOOP(false)) && true))));
        }
      }
    }
   else
    {
    }
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  return;
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (int(_GLF_ONE(1.0, injectionSwitch.y)) & 1)); _GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter ++, (true ? _injected_loop_counter ++ : _GLF_FUZZED(36588))), (_GLF_IDENTITY(_injected_loop_counter ++, (true ? _injected_loop_counter ++ : _GLF_FUZZED(36588)))) * 1))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      break;
     atomicStore(buf[next_virtual_gid], uint(1), 4, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(64, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(64, (64) * 1)), (false ? _GLF_FUZZED(6331) : ~ (_GLF_IDENTITY(64, (64) * 1)))))), (_GLF_IDENTITY(64, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(64, (64) * 1)), (false ? _GLF_FUZZED(6331) : ~ (_GLF_IDENTITY(64, (64) * 1))))))) << 0), min(_GLF_IDENTITY(_GLF_IDENTITY(64, (true ? 64 : _GLF_FUZZED(_injected_loop_counter))), (_GLF_IDENTITY(64, (64) * 1)) | 0), 64)), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(64, ~ (_GLF_IDENTITY(~ _GLF_IDENTITY((_GLF_IDENTITY(64, (64) * 1)), min((_GLF_IDENTITY(64, (64) * 1)), _GLF_IDENTITY((_GLF_IDENTITY(64, (64) * 1)), ((_GLF_IDENTITY(64, (64) * 1))) >> 0))), (false ? _GLF_FUZZED(6331) : ~ (_GLF_IDENTITY(64, (64) * 1)))))), min(_GLF_IDENTITY(64, (_GLF_IDENTITY(64, (64) * 1)) | 0), 64)), (_GLF_IDENTITY(_GLF_IDENTITY(64, ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (_GLF_IDENTITY(64, (64) * 1)), (false ? _GLF_FUZZED(6331) : ~ (_GLF_IDENTITY(64, (64) * 1)))), (_GLF_IDENTITY(~ (_GLF_IDENTITY(64, (64) * 1)), (false ? _GLF_FUZZED(6331) : ~ (_GLF_IDENTITY(64, (64) * 1))))) >> 0))), min(_GLF_IDENTITY(_GLF_IDENTITY(64, (_GLF_IDENTITY(64, (64) * 1)) | 0), max(_GLF_IDENTITY(64, (_GLF_IDENTITY(64, (64) * 1)) | 0), _GLF_IDENTITY(64, (_GLF_IDENTITY(64, (64) * 1)) | 0))), 64))) | (_GLF_IDENTITY(_GLF_IDENTITY(64, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_IDENTITY(64, (_GLF_IDENTITY(64, (64) | (64))) | (64)), (64) * 1)), _GLF_IDENTITY((false ? _GLF_FUZZED(6331) : ~ (_GLF_IDENTITY(64, (64) * 1))), max(_GLF_IDENTITY((false ? _GLF_FUZZED(6331) : ~ (_GLF_IDENTITY(64, (64) * 1))), ((false ? _GLF_FUZZED(6331) : ~ (_GLF_IDENTITY(64, (64) * 1)))) << 0), (false ? _GLF_FUZZED(6331) : ~ (_GLF_IDENTITY(64, (64) * 1)))))))), min(_GLF_IDENTITY(64, (_GLF_IDENTITY(64, (64) * 1)) | 0), 64))))) >> 0), 4);
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(false))
    continue;
  }
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
    }
  }
 else
  {
  }
 do
  {
   if((_GLF_IDENTITY(subgroup_local_id % 2, (subgroup_local_id % 2) >> (0u >> _GLF_IDENTITY(uint(1u), uint(1u))))) == _GLF_IDENTITY(0, 0 | (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, _GLF_IDENTITY((0) / 1, min((0) / 1, _GLF_IDENTITY(_GLF_IDENTITY((0) / 1, clamp((0) / 1, (0) / 1, (0) / 1)), max((0) / 1, (0) / 1))))))), 0 | (_GLF_IDENTITY(_GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, _GLF_IDENTITY((0) / 1, min((0) / 1, _GLF_IDENTITY(_GLF_IDENTITY((0) / 1, clamp((0) / 1, (0) / 1, (0) / 1)), max((0) / 1, (0) / 1))))))), (_GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, _GLF_IDENTITY((0) / 1, min((0) / 1, _GLF_IDENTITY(_GLF_IDENTITY((0) / 1, clamp((0) / 1, (0) / 1, (0) / 1)), max((0) / 1, (0) / 1)))))))) ^ 0))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, _GLF_IDENTITY((0) / 1, ((0) / 1) | ((0) / 1))))), (false ? _GLF_FUZZED(_GLF_IDENTITY(_GLF_IDENTITY(-77785, (_GLF_IDENTITY(-77785, (-77785) | (-77785))) << 0), (_GLF_IDENTITY(-77785, (_GLF_IDENTITY(-77785, (-77785) | (-77785))) << 0)) - (1 ^ 1))) : _GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, _GLF_IDENTITY((0), clamp(_GLF_IDENTITY((0), clamp((0), (0), (0))), _GLF_IDENTITY((0), min((0), (0))), _GLF_IDENTITY((0), clamp((0), (0), (0))))) / 1))))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, _GLF_IDENTITY((0) / 1, ((0) / 1) | ((0) / 1))))), (false ? _GLF_FUZZED(_GLF_IDENTITY(_GLF_IDENTITY(-77785, (_GLF_IDENTITY(-77785, (-77785) | (-77785))) << 0), (_GLF_IDENTITY(-77785, (_GLF_IDENTITY(-77785, (-77785) | (-77785))) << 0)) - (1 ^ 1))) : _GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, _GLF_IDENTITY((0), clamp(_GLF_IDENTITY((0), clamp((0), (0), (0))), _GLF_IDENTITY((0), min((0), (0))), _GLF_IDENTITY((0), clamp((0), (0), (0))))) / 1)))))), (~ (_GLF_IDENTITY(_GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, _GLF_IDENTITY((0) / 1, ((0) / 1) | ((0) / 1))))), (false ? _GLF_FUZZED(_GLF_IDENTITY(_GLF_IDENTITY(-77785, (_GLF_IDENTITY(-77785, (-77785) | (-77785))) << 0), (_GLF_IDENTITY(-77785, (_GLF_IDENTITY(-77785, (-77785) | (-77785))) << 0)) - (1 ^ 1))) : _GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, _GLF_IDENTITY((0), clamp(_GLF_IDENTITY((0), clamp((0), (0), (0))), _GLF_IDENTITY((0), min((0), (0))), _GLF_IDENTITY((0), clamp((0), (0), (0))))) / 1))))))) | (~ (_GLF_IDENTITY(_GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, _GLF_IDENTITY((0) / 1, ((0) / 1) | ((0) / 1))))), (false ? _GLF_FUZZED(_GLF_IDENTITY(_GLF_IDENTITY(-77785, (_GLF_IDENTITY(-77785, (-77785) | (-77785))) << 0), (_GLF_IDENTITY(-77785, (_GLF_IDENTITY(-77785, (-77785) | (-77785))) << 0)) - (1 ^ 1))) : _GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, _GLF_IDENTITY((0), clamp(_GLF_IDENTITY((0), clamp((0), (0), (0))), _GLF_IDENTITY((0), min((0), (0))), _GLF_IDENTITY((0), clamp((0), (0), (0))))) / 1)))))))))), _GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, (0) / 1))), _GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, (0) / _GLF_IDENTITY(1, 0 + (1))))))), 0 + (_GLF_IDENTITY(_GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, _GLF_IDENTITY((0) / 1, min((0) / 1, _GLF_IDENTITY(_GLF_IDENTITY((0) / 1, clamp((0) / 1, (0) / 1, (0) / 1)), max((0) / 1, (0) / 1))))))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, _GLF_IDENTITY((0) / 1, ((0) / 1) | ((0) / 1))))), (false ? _GLF_FUZZED(_GLF_IDENTITY(_GLF_IDENTITY(-77785, _GLF_IDENTITY((_GLF_IDENTITY(-77785, (_GLF_IDENTITY(-77785, clamp(_GLF_IDENTITY(-77785, 0 + (-77785)), -77785, -77785))) | (-77785))), (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(-77785, (-77785) | (-77785))), 0 + ((_GLF_IDENTITY(-77785, (-77785) | (-77785))))), ((_GLF_IDENTITY(-77785, (-77785) | (-77785)))) * 1)) | ((_GLF_IDENTITY(-77785, (-77785) | (-77785))))) << 0), _GLF_IDENTITY((_GLF_IDENTITY(-77785, (_GLF_IDENTITY(-77785, (-77785) | _GLF_IDENTITY((-77785), _GLF_IDENTITY(int(ivec4((-77785), 1, 0, 1)), ~ (~ (int(ivec4((-77785), 1, 0, 1)))))))) << 0)), ((_GLF_IDENTITY(-77785, (_GLF_IDENTITY(-77785, _GLF_IDENTITY((-77785) | (-77785), ((-77785) | (-77785)) ^ 0))) << 0))) | 0) - (1 ^ 1))) : _GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, _GLF_IDENTITY((0), _GLF_IDENTITY(clamp(_GLF_IDENTITY((0), clamp((0), (0), (0))), _GLF_IDENTITY((_GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, max(0, 0))))) | (_GLF_IDENTITY(0, 0 ^ (0))))), min((0), (0))), _GLF_IDENTITY((0), clamp((0), (0), (0)))), int(ivec4(clamp(_GLF_IDENTITY((0), clamp((0), (0), (0))), _GLF_IDENTITY((0), min((0), (0))), _GLF_IDENTITY(_GLF_IDENTITY((0), 0 ^ (_GLF_IDENTITY((0), int(ivec2((0), 1))))), clamp((0), (0), (0)))), 0, 0, 1)))) / 1))))), _GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) * (0 ^ 1))) | (_GLF_IDENTITY(0, (0) / 1))), _GLF_IDENTITY(0, (_GLF_IDENTITY(0, 0 ^ (0))) | (_GLF_IDENTITY(0, _GLF_IDENTITY((0), ~ (~ (_GLF_IDENTITY((0), ((0)) << 0)))) / _GLF_IDENTITY(1, 0 + (1))))))))))))
    {
     subgroupAll(false);
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        break;
       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (false)))))
        {
        }
       else
        {
         do
          {
           return;
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           return;
          }
         else
          {
          }
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y))))))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             return;
            }
          }
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, float(mat3x4(injectionSwitch.x, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0))), (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(mat3x4(injectionSwitch.x, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0)), (_GLF_IDENTITY(float(mat3x4(injectionSwitch.x, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0)), (false ? _GLF_FUZZED(-28.69) : float(mat3x4(injectionSwitch.x, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0))))) + 0.0))) + log(1.0)) > _GLF_IDENTITY(injectionSwitch, vec2(mat2x4(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(_GLF_IDENTITY(mat3x2(injectionSwitch, 0.0, 0.0, 0.0, exp(0.0)), (mat3x2(injectionSwitch, 0.0, 0.0, 0.0, exp(0.0))) - mat3x2(0.0, 0.0, 0.0, 0.0, 0.0, 0.0))), clamp(vec2(_GLF_IDENTITY(mat3x2(injectionSwitch, 0.0, 0.0, 0.0, exp(0.0)), (mat3x2(injectionSwitch, 0.0, 0.0, 0.0, exp(0.0))) - mat3x2(0.0, 0.0, 0.0, 0.0, 0.0, 0.0))), vec2(_GLF_IDENTITY(mat3x2(injectionSwitch, 0.0, 0.0, 0.0, exp(0.0)), (mat3x2(injectionSwitch, 0.0, 0.0, 0.0, exp(0.0))) - mat3x2(0.0, 0.0, 0.0, 0.0, 0.0, 0.0))), vec2(_GLF_IDENTITY(mat3x2(injectionSwitch, 0.0, 0.0, 0.0, exp(0.0)), (mat3x2(injectionSwitch, 0.0, 0.0, 0.0, exp(0.0))) - mat3x2(0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))))), max(injectionSwitch, injectionSwitch)), max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(_GLF_IDENTITY(mat3x2(injectionSwitch, 0.0, 0.0, 0.0, exp(0.0)), (mat3x2(injectionSwitch, 0.0, 0.0, 0.0, exp(0.0))) - mat3x2(0.0, 0.0, 0.0, 0.0, 0.0, 0.0))), clamp(vec2(_GLF_IDENTITY(mat3x2(injectionSwitch, 0.0, 0.0, 0.0, exp(0.0)), (mat3x2(injectionSwitch, 0.0, 0.0, 0.0, exp(0.0))) - mat3x2(0.0, 0.0, 0.0, 0.0, 0.0, 0.0))), vec2(_GLF_IDENTITY(mat3x2(injectionSwitch, 0.0, 0.0, 0.0, exp(0.0)), (mat3x2(injectionSwitch, 0.0, 0.0, 0.0, exp(0.0))) - mat3x2(0.0, 0.0, 0.0, 0.0, 0.0, 0.0))), vec2(_GLF_IDENTITY(mat3x2(injectionSwitch, 0.0, 0.0, 0.0, exp(0.0)), (mat3x2(injectionSwitch, 0.0, 0.0, 0.0, exp(0.0))) - mat3x2(0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))))), max(injectionSwitch, injectionSwitch)), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(_GLF_IDENTITY(mat3x2(injectionSwitch, 0.0, 0.0, 0.0, exp(0.0)), (mat3x2(injectionSwitch, 0.0, 0.0, 0.0, exp(0.0))) - mat3x2(0.0, 0.0, 0.0, 0.0, 0.0, 0.0))), clamp(vec2(_GLF_IDENTITY(mat3x2(injectionSwitch, 0.0, 0.0, 0.0, exp(0.0)), (mat3x2(injectionSwitch, 0.0, 0.0, 0.0, exp(0.0))) - mat3x2(0.0, 0.0, 0.0, 0.0, 0.0, 0.0))), vec2(_GLF_IDENTITY(mat3x2(injectionSwitch, 0.0, 0.0, 0.0, exp(0.0)), (mat3x2(injectionSwitch, 0.0, 0.0, 0.0, exp(0.0))) - mat3x2(0.0, 0.0, 0.0, 0.0, 0.0, 0.0))), vec2(_GLF_IDENTITY(mat3x2(injectionSwitch, 0.0, 0.0, 0.0, exp(0.0)), (mat3x2(injectionSwitch, 0.0, 0.0, 0.0, exp(0.0))) - mat3x2(0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))))), max(injectionSwitch, injectionSwitch)), clamp(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(_GLF_IDENTITY(mat3x2(injectionSwitch, 0.0, 0.0, 0.0, exp(0.0)), (mat3x2(injectionSwitch, 0.0, 0.0, 0.0, exp(0.0))) - mat3x2(0.0, 0.0, 0.0, 0.0, 0.0, 0.0))), clamp(vec2(_GLF_IDENTITY(mat3x2(injectionSwitch, 0.0, 0.0, 0.0, exp(0.0)), (mat3x2(injectionSwitch, 0.0, 0.0, 0.0, exp(0.0))) - mat3x2(0.0, 0.0, 0.0, 0.0, 0.0, 0.0))), vec2(_GLF_IDENTITY(mat3x2(injectionSwitch, 0.0, 0.0, 0.0, exp(0.0)), (mat3x2(injectionSwitch, 0.0, 0.0, 0.0, exp(0.0))) - mat3x2(0.0, 0.0, 0.0, 0.0, 0.0, 0.0))), vec2(_GLF_IDENTITY(mat3x2(injectionSwitch, 0.0, 0.0, 0.0, exp(0.0)), (mat3x2(injectionSwitch, 0.0, 0.0, 0.0, exp(0.0))) - mat3x2(0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))))), max(injectionSwitch, injectionSwitch)), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(_GLF_IDENTITY(mat3x2(injectionSwitch, 0.0, 0.0, 0.0, exp(0.0)), (mat3x2(injectionSwitch, 0.0, 0.0, 0.0, exp(0.0))) - mat3x2(0.0, 0.0, 0.0, 0.0, 0.0, 0.0))), clamp(vec2(_GLF_IDENTITY(mat3x2(injectionSwitch, 0.0, 0.0, 0.0, exp(0.0)), (mat3x2(injectionSwitch, 0.0, 0.0, 0.0, exp(0.0))) - mat3x2(0.0, 0.0, 0.0, 0.0, 0.0, 0.0))), vec2(_GLF_IDENTITY(mat3x2(injectionSwitch, 0.0, 0.0, 0.0, exp(0.0)), (mat3x2(injectionSwitch, 0.0, 0.0, 0.0, exp(0.0))) - mat3x2(0.0, 0.0, 0.0, 0.0, 0.0, 0.0))), vec2(_GLF_IDENTITY(mat3x2(injectionSwitch, 0.0, 0.0, 0.0, exp(0.0)), (mat3x2(injectionSwitch, 0.0, 0.0, 0.0, exp(0.0))) - mat3x2(0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))))), max(injectionSwitch, injectionSwitch)), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(_GLF_IDENTITY(mat3x2(injectionSwitch, 0.0, 0.0, 0.0, exp(0.0)), (mat3x2(injectionSwitch, 0.0, 0.0, 0.0, exp(0.0))) - mat3x2(0.0, 0.0, 0.0, 0.0, 0.0, 0.0))), clamp(vec2(_GLF_IDENTITY(mat3x2(injectionSwitch, 0.0, 0.0, 0.0, exp(0.0)), (mat3x2(injectionSwitch, 0.0, 0.0, 0.0, exp(0.0))) - mat3x2(0.0, 0.0, 0.0, 0.0, 0.0, 0.0))), vec2(_GLF_IDENTITY(mat3x2(injectionSwitch, 0.0, 0.0, 0.0, exp(0.0)), (mat3x2(injectionSwitch, 0.0, 0.0, 0.0, exp(0.0))) - mat3x2(0.0, 0.0, 0.0, 0.0, 0.0, 0.0))), vec2(_GLF_IDENTITY(mat3x2(injectionSwitch, 0.0, 0.0, 0.0, exp(0.0)), (mat3x2(injectionSwitch, 0.0, 0.0, 0.0, exp(0.0))) - mat3x2(0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))))), max(injectionSwitch, injectionSwitch)))))), 1.0, length(0.0), 0.0, determinant(mat2(0.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(0.0, 1.0)), dot(vec2(1.0, 0.0), vec2(0.0, 1.0))), 0.0, 0.0)), 1.0, 1.0))).y))))
          {
          }
         else
          {
           return;
          }
        }
       return;
       if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))))), _GLF_IDENTITY(bool(bvec3(_GLF_DEAD(false), false, _GLF_IDENTITY(true, (_GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, (true) || false)))) && true))), true && (bool(bvec3(_GLF_DEAD(false), false, true))))))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           do
            {
             if(_GLF_DEAD(false))
              break;
             return;
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         else
          {
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(false))
        break;
      }
     do
      {
       read = atomicLoad(_GLF_IDENTITY(buf[virtual_gid], min(buf[virtual_gid], _GLF_IDENTITY(buf[virtual_gid], (_GLF_IDENTITY(buf[virtual_gid], max(buf[virtual_gid], buf[virtual_gid]))) - 0u))), 4, 64, 2);
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   else
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(vec2(_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x)), 0.0), (false ? _GLF_FUZZED(injectionSwitch) : vec2(injectionSwitch.x, 0.0))))) > _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(mix(float(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))), float(_GLF_FUZZED(-3.6)), bool(false)), (mix(float(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y))), float(_GLF_FUZZED(-3.6)), bool(false))) / 1.0))))), ((_GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(vec2(injectionSwitch.x, 0.0), (false ? _GLF_FUZZED(injectionSwitch) : vec2(injectionSwitch.x, _GLF_IDENTITY(0.0, (0.0) * 1.0)))))) > _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), _GLF_IDENTITY(float(mat2x3(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), 0.0, 0.0, 0.0, 0.0, 1.0)), mix(float(_GLF_FUZZED(6321.8762)), float(float(mat2x3(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), 0.0, 0.0, 0.0, 0.0, 1.0))), bool(true)))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), (true ? _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)) : _GLF_FUZZED(-4345.3371))))), _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))), float(_GLF_FUZZED(-3.6)), bool(false))))))) || false)), _GLF_IDENTITY(! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (_GLF_IDENTITY(! (! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), ! (_GLF_IDENTITY(! (! (! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), (! (! (! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))) && true))))))))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != 0, bool(bvec3(_injected_loop_counter != 0, true, true)))); _injected_loop_counter --)
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(8), int(8))); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(-86993)))); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(false))
              break;
             return;
            }
          }
        }
      }
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       for(int _injected_loop_counter = int(_GLF_ZERO(_GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(-46.08) : 0.0)), injectionSwitch.x)); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < (((0 & -62448) | 0) ^ int(_GLF_ONE(1.0, injectionSwitch.y)))), ! _GLF_IDENTITY((! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(((_GLF_IDENTITY((0 & -62448) | 0, clamp((_GLF_IDENTITY(0 & -62448, (false ? _GLF_FUZZED((-- _injected_loop_counter)) : _GLF_IDENTITY(0 & -62448, ~ (~ (0 & -62448)))))) | _GLF_IDENTITY(0, (0) >> 0), _GLF_IDENTITY((_GLF_IDENTITY(0 & -62448, ~ (~ (_GLF_IDENTITY(0 & -62448, (true ? 0 & -62448 : _GLF_FUZZED(-96868))))))) | 0, ((0 & -62448) | 0) / 1), _GLF_IDENTITY((0 & -62448) | 0, clamp((0 & -62448) | 0, (0 & -62448) | 0, (0 & -62448) | 0))))) ^ _GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), (int(_GLF_ONE(1.0, injectionSwitch.y))) << (0 >> _GLF_IDENTITY(int(1), int(1))))), ((((0 & -62448) | 0) ^ int(_GLF_ONE(1.0, injectionSwitch.y)))) + int(_GLF_ZERO(0.0, injectionSwitch.x)))), bool(bvec2(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < (((0 & -62448) | 0) ^ int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0)))), ! (! (_injected_loop_counter < (((0 & -62448) | 0) ^ int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0)))))))), true))))), (_GLF_IDENTITY((! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY((_GLF_IDENTITY(((0 & -62448) | 0) ^ int(_GLF_ONE(1.0, injectionSwitch.y)), ~ (~ (((0 & -62448) | 0) ^ int(_GLF_ONE(1.0, injectionSwitch.y)))))), ((((0 & -62448) | 0) ^ int(_GLF_ONE(1.0, injectionSwitch.y)))) + int(_GLF_ZERO(0.0, injectionSwitch.x)))), _GLF_IDENTITY(bool(bvec2(_GLF_WRAPPED_LOOP(_injected_loop_counter < (_GLF_IDENTITY(((0 & -62448) | 0), _GLF_IDENTITY(int(ivec3(((0 & -62448) | 0), (_GLF_IDENTITY(0, clamp(0, 0, 0)) << _GLF_IDENTITY(int(5), int(5))), 0)), (int(ivec3(((0 & -62448) | 0), (0 << _GLF_IDENTITY(int(5), int(5))), 0))) + 0)) ^ int(_GLF_ONE(1.0, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0), (injectionSwitch.y) + 0.0))))), true)), ! (! (bool(bvec2(_GLF_WRAPPED_LOOP(_injected_loop_counter < (_GLF_IDENTITY(((0 & -62448) | 0), _GLF_IDENTITY(int(ivec3((_GLF_IDENTITY((0 & -62448), ((0 & -62448)) / 1) | 0), (0 << _GLF_IDENTITY(int(5), int(5))), 0)), (int(ivec3(((0 & -62448) | 0), (0 << _GLF_IDENTITY(int(5), int(5))), 0))) + 0)) ^ int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y))) + 0.0))))), true)))))))), ((_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY((((0 & -62448) | 0) ^ int(_GLF_ONE(1.0, injectionSwitch.y))), ((((0 & -62448) | 0) ^ _GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), max(int(_GLF_ONE(1.0, injectionSwitch.y)), _GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), (int(_GLF_ONE(1.0, injectionSwitch.y))) - 0))))) + int(_GLF_ZERO(0.0, injectionSwitch.x)))), bool(bvec2(_GLF_WRAPPED_LOOP(_injected_loop_counter < (((0 & -62448) | 0) ^ int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0))))), true)))), ! (! (! _GLF_IDENTITY((_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, int(ivec3(_injected_loop_counter, _GLF_IDENTITY(_GLF_IDENTITY(1, max(1, 1)), _GLF_IDENTITY(int(int(_GLF_IDENTITY(_GLF_IDENTITY(1, max(1, 1)), max(_GLF_IDENTITY(1, max(1, 1)), _GLF_IDENTITY(1, max(1, 1)))))), max(int(int(_GLF_IDENTITY(_GLF_IDENTITY(1, max(1, 1)), max(_GLF_IDENTITY(1, max(1, 1)), _GLF_IDENTITY(1, max(1, 1)))))), _GLF_IDENTITY(int(int(_GLF_IDENTITY(_GLF_IDENTITY(1, max(1, 1)), max(_GLF_IDENTITY(1, max(1, 1)), _GLF_IDENTITY(1, max(1, 1)))))), (int(int(_GLF_IDENTITY(_GLF_IDENTITY(1, max(1, 1)), max(_GLF_IDENTITY(1, max(1, 1)), _GLF_IDENTITY(1, max(1, 1))))))) ^ 0)))), 0))) < _GLF_IDENTITY((((0 & -62448) | 0) ^ int(_GLF_ONE(1.0, injectionSwitch.y))), ((((0 & -62448) | 0) ^ int(_GLF_ONE(1.0, injectionSwitch.y)))) + _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), 0 + (_GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), int(ivec2(int(_GLF_ZERO(0.0, injectionSwitch.x)), 0))))))), bool(bvec2(_GLF_WRAPPED_LOOP(_injected_loop_counter < (((0 & _GLF_IDENTITY(-62448, (true ? -62448 : _GLF_FUZZED(_injected_loop_counter)))) | 0) ^ int(_GLF_ONE(1.0, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, float(_GLF_IDENTITY(vec3(injectionSwitch.y, 1.0, 1.0), mat3(1.0) * (vec3(injectionSwitch.y, 1.0, 1.0))))))), (injectionSwitch.y) + 0.0))))), true)))), (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, int(ivec3(_injected_loop_counter, _GLF_IDENTITY(_GLF_IDENTITY(1, max(1, 1)), _GLF_IDENTITY(int(int(_GLF_IDENTITY(_GLF_IDENTITY(1, max(1, 1)), max(_GLF_IDENTITY(1, max(1, 1)), _GLF_IDENTITY(1, max(1, 1)))))), max(int(int(_GLF_IDENTITY(_GLF_IDENTITY(1, max(1, 1)), max(_GLF_IDENTITY(1, max(1, 1)), _GLF_IDENTITY(1, max(1, 1)))))), _GLF_IDENTITY(int(int(_GLF_IDENTITY(_GLF_IDENTITY(1, max(1, 1)), max(_GLF_IDENTITY(1, max(1, 1)), _GLF_IDENTITY(1, max(1, 1)))))), (int(int(_GLF_IDENTITY(_GLF_IDENTITY(1, max(1, 1)), max(_GLF_IDENTITY(1, max(1, 1)), _GLF_IDENTITY(1, max(1, 1))))))) ^ 0)))), 0))) < _GLF_IDENTITY((((0 & -62448) | 0) ^ int(_GLF_ONE(1.0, injectionSwitch.y))), ((((0 & -62448) | 0) ^ int(_GLF_ONE(1.0, injectionSwitch.y)))) + _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), 0 + (_GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), int(ivec2(int(_GLF_ZERO(0.0, injectionSwitch.x)), 0))))))), bool(bvec2(_GLF_WRAPPED_LOOP(_injected_loop_counter < (((0 & _GLF_IDENTITY(-62448, (true ? -62448 : _GLF_FUZZED(_injected_loop_counter)))) | 0) ^ int(_GLF_ONE(1.0, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, float(_GLF_IDENTITY(vec3(injectionSwitch.y, 1.0, 1.0), mat3(1.0) * (vec3(injectionSwitch.y, 1.0, 1.0))))))), (injectionSwitch.y) + 0.0))))), true)))), bool(bvec4((_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, int(ivec3(_injected_loop_counter, _GLF_IDENTITY(_GLF_IDENTITY(1, max(1, 1)), _GLF_IDENTITY(int(int(_GLF_IDENTITY(_GLF_IDENTITY(1, max(1, 1)), max(_GLF_IDENTITY(1, max(1, 1)), _GLF_IDENTITY(1, max(1, 1)))))), max(int(int(_GLF_IDENTITY(_GLF_IDENTITY(1, max(1, 1)), max(_GLF_IDENTITY(1, max(1, 1)), _GLF_IDENTITY(1, max(1, 1)))))), _GLF_IDENTITY(int(int(_GLF_IDENTITY(_GLF_IDENTITY(1, max(1, 1)), max(_GLF_IDENTITY(1, max(1, 1)), _GLF_IDENTITY(1, max(1, 1)))))), (int(int(_GLF_IDENTITY(_GLF_IDENTITY(1, max(1, 1)), max(_GLF_IDENTITY(1, max(1, 1)), _GLF_IDENTITY(1, max(1, 1))))))) ^ 0)))), 0))) < _GLF_IDENTITY((((0 & -62448) | 0) ^ int(_GLF_ONE(1.0, injectionSwitch.y))), ((((0 & -62448) | 0) ^ int(_GLF_ONE(1.0, injectionSwitch.y)))) + _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), 0 + (_GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), int(ivec2(int(_GLF_ZERO(0.0, injectionSwitch.x)), 0))))))), bool(bvec2(_GLF_WRAPPED_LOOP(_injected_loop_counter < (((0 & _GLF_IDENTITY(-62448, (true ? -62448 : _GLF_FUZZED(_injected_loop_counter)))) | 0) ^ int(_GLF_ONE(1.0, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, float(_GLF_IDENTITY(vec3(injectionSwitch.y, 1.0, 1.0), mat3(1.0) * (vec3(injectionSwitch.y, 1.0, 1.0))))))), (injectionSwitch.y) + 0.0))))), true)))), false, true, true)))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))) || false)) && _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y)), (_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y))) || false))); _injected_loop_counter ++)
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            break;
           if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), (_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), mix(float(_GLF_FUZZED(-7.3)), float(_GLF_ZERO(0.0, injectionSwitch.x)), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))) / exp(0.0)))), _GLF_IDENTITY((injectionSwitch) * mat2(1.0), min((injectionSwitch) * mat2(1.0), (injectionSwitch) * mat2(1.0)))).x < injectionSwitch.y))), _GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), (_GLF_IDENTITY(false, (false) || false)) && true) || (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), min((injectionSwitch) * mat2(1.0), (injectionSwitch) * mat2(1.0)))).x < injectionSwitch.y))), ! (! (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), min((injectionSwitch) * mat2(1.0), (injectionSwitch) * mat2(1.0)))).x < injectionSwitch.y, false || (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), min((injectionSwitch) * mat2(1.0), (injectionSwitch) * mat2(1.0)))).x < _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y)))))))), bool(bool(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), min((injectionSwitch) * mat2(1.0), (injectionSwitch) * mat2(1.0)))).x < injectionSwitch.y)), _GLF_IDENTITY(bool(bool(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), min((injectionSwitch) * mat2(1.0), (injectionSwitch) * mat2(1.0)))).x < injectionSwitch.y)))), ! (! (bool(bool(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), min((injectionSwitch) * mat2(1.0), (injectionSwitch) * mat2(1.0)))).x < injectionSwitch.y)))))))))))))))
            {
             if(_GLF_DEAD(false))
              return;
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) >> 0) > 0); _injected_loop_counter --)
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                break;
               if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
                break;
               subgroupAll(false);
               if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(648.204), _GLF_FUZZED(88.68)), bvec2(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), min(injectionSwitch, injectionSwitch)).y), ((injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(648.204), _GLF_FUZZED(88.68)), bvec2(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), min(injectionSwitch, injectionSwitch)).y)) || false))))
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   return;
                  }
                 else
                  {
                  }
                 if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
                  break;
                }
               if(_GLF_DEAD(false))
                break;
              }
            }
           else
            {
             do
              {
               for(int _injected_loop_counter = int(_GLF_IDENTITY(_GLF_ZERO(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), injectionSwitch.x), (true ? _GLF_ZERO(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), injectionSwitch.x) : _GLF_FUZZED(-9.0)))); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(_GLF_IDENTITY(1.0, max(1.0, 1.0)), _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(8.4) : injectionSwitch.y))))); _injected_loop_counter ++)
                {
                 if(_GLF_DEAD(false))
                  return;
                }
               for(int _injected_loop_counter = (1 ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  break;
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  return;
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               for(int _injected_loop_counter = 0; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < (1 & 1)), true && (_GLF_WRAPPED_LOOP(_injected_loop_counter < (1 & 1)))); _injected_loop_counter ++)
                {
                 return;
                }
              }
            }
          }
        }
      }
     else
      {
      }
     if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         return;
        }
      }
     for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(5), int(5))); _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4)))); _injected_loop_counter ++)
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, false, false)))))
          {
           do
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(false))
                {
                 do
                  {
                   if(_GLF_DEAD(false))
                    break;
                   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                    {
                     return;
                    }
                   else
                    {
                    }
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
              }
             else
              {
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
           if(_GLF_DEAD(false))
            break;
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              continue;
             if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(true, bool(bvec4(true, true, true, true))), _GLF_IDENTITY(true, false || (true)), false)), _GLF_IDENTITY(! (! (bool(bvec3(_GLF_IDENTITY(true, bool(bvec4(true, true, true, true))), _GLF_IDENTITY(true, false || (true)), false)))), true && (_GLF_IDENTITY(! (! (bool(bvec3(_GLF_IDENTITY(true, bool(bvec4(true, true, true, true))), _GLF_IDENTITY(true, false || (true)), false)))), ! (_GLF_IDENTITY(! (! (! (bool(bvec3(_GLF_IDENTITY(true, bool(bvec4(true, true, true, true))), _GLF_IDENTITY(true, false || (true)), false))))), ! (! (! (! (! (bool(bvec3(_GLF_IDENTITY(true, bool(bvec4(true, true, true, true))), _GLF_IDENTITY(true, false || (true)), false)))))))))))))), _GLF_IDENTITY(true, bool(bvec4(true, true, _GLF_IDENTITY(false, bool(bvec2(false, true))), false))) && (_GLF_IDENTITY(true, bool(bool(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, bool(bvec3(true, false, false)))) && true))))))))
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (true)))))
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))).y))))
                      {
                       do
                        {
                         return;
                        }
                       while(_GLF_WRAPPED_LOOP(false));
                      }
                     return;
                     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, bool(bvec2(false, true))), false, true))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))))))
                      return;
                    }
                   else
                    {
                    }
                  }
                 for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(2), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? int(2) : _GLF_FUZZED((_injected_loop_counter / _injected_loop_counter)))), int(_GLF_IDENTITY(2, clamp(2, 2, 2))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                  {
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     return;
                    }
                  }
                }
              }
             else
              {
              }
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(false))
                {
                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (_GLF_IDENTITY((0 >> _GLF_IDENTITY(int(3), int(3))) | _GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) / 1)) << 0), max(_GLF_IDENTITY((0 >> _GLF_IDENTITY(int(3), int(3))) | _GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) / 1)) << 0), ((0 >> _GLF_IDENTITY(int(3), int(3))) | _GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) / 1)) << 0)) << 0), (0 >> _GLF_IDENTITY(int(3), int(3))) | _GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) / 1)) << 0))))); _injected_loop_counter ++)
                  {
                   if(_GLF_DEAD(false))
                    continue;
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(false))
                      break;
                     return;
                    }
                  }
                 do
                  {
                   do
                    {
                     return;
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
              }
             else
              {
              }
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true))))
                return;
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                {
                 if(_GLF_DEAD(false))
                  return;
                }
              }
             else
              {
              }
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                    {
                     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(-93.86)), vec2(_GLF_IDENTITY(_GLF_FUZZED(1272.6755), max(_GLF_FUZZED(1272.6755), _GLF_FUZZED(1272.6755))), (injectionSwitch)[1]), bvec2(false, _GLF_IDENTITY(true, (true) && true)))).y))))
                      {
                      }
                     else
                      {
                       return;
                      }
                    }
                   else
                    {
                    }
                  }
                 else
                  {
                  }
                }
              }
             if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false)))))))
              break;
             return;
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                {
                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5)))); _injected_loop_counter ++)
                  {
                   return;
                  }
                }
               if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
                {
                 for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(4), int(4))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                  {
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     return;
                    }
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y, _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(1.9)), bool(false))), injectionSwitch.y))))))))
                    break;
                  }
                }
               if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(false || (false), ! (! (false || (false))))), bool(bvec2(_GLF_IDENTITY(false, (false) && true), false)))))
                return;
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 return;
                }
               else
                {
                }
               if(_GLF_DEAD(false))
                return;
              }
            }
           if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) && true))))))
            {
            }
           else
            {
             return;
            }
          }
        }
       else
        {
        }
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
     do
      {
       for(int _injected_loop_counter = ((_GLF_IDENTITY(0, clamp(_GLF_IDENTITY(0, (0) | (0)), _GLF_IDENTITY(0, (0) | 0), _GLF_IDENTITY(0, max(0, 0)))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(6, (_GLF_IDENTITY(6, 0 + (6))) | (_GLF_IDENTITY(_GLF_IDENTITY(6, ~ (~ (6))), (true ? _GLF_IDENTITY(6, ~ (~ (6))) : _GLF_FUZZED(-13906)))))), int(6))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(6, (6) | 0)), int(6))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         read = atomicLoad(buf[virtual_gid], _GLF_IDENTITY(4, max(_GLF_IDENTITY(4, _GLF_IDENTITY((4) - 0, max((4) - 0, (4) - 0))), _GLF_IDENTITY(4, (4) ^ 0))), 64, 2);
         if(_GLF_DEAD(false))
          return;
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         return;
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)), max(_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)), max(_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)), _GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)))))), mix(vec2((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)), max(_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)), max(_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)), _GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)))))))[0], _GLF_FUZZED(-208.041)), vec2(_GLF_FUZZED(0.7), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)), max(_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)), max(_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)), _GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)))))))[1]), bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))).y))))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         return;
        }
       else
        {
        }
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(mat4x3(injectionSwitch, sqrt(1.0), 1.0, 1.0, 1.0, 0.0, abs(1.0), 0.0, 0.0, 1.0, 0.0))).x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, 0 + (_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) | (_injected_loop_counter)))) != 0); _injected_loop_counter --)
      {
       return;
      }
    }
   else
    {
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     do
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x))))); _injected_loop_counter --)
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) >> 0) != 1); _injected_loop_counter ++)
          {
           subgroupBarrier();
          }
         if(_GLF_DEAD(false))
          {
           do
            {
             return;
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bvec3(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true))), false, true)), (_GLF_IDENTITY(bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true)), (bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true))) || false)) || false)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
          continue;
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(max(injectionSwitch.x, injectionSwitch.x), max(max(injectionSwitch.x, injectionSwitch.x), max(injectionSwitch.x, injectionSwitch.x)))) > injectionSwitch.y))))
          continue;
         if(_GLF_DEAD(false))
          return;
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(false))
      return;
    }
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
  return;
 do
  {
   for(int _injected_loop_counter = int(_GLF_IDENTITY(_GLF_ZERO(_GLF_IDENTITY(_GLF_IDENTITY(0.0, min(0.0, 0.0)), _GLF_IDENTITY(float(vec2(_GLF_IDENTITY(0.0, min(0.0, _GLF_IDENTITY(0.0, clamp(0.0, _GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0)))), 0.0)), max(_GLF_IDENTITY(float(vec2(_GLF_IDENTITY(0.0, min(0.0, _GLF_IDENTITY(0.0, clamp(0.0, _GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0)))), 0.0)), min(float(vec2(_GLF_IDENTITY(0.0, min(0.0, _GLF_IDENTITY(0.0, clamp(0.0, _GLF_IDENTITY(0.0, max(_GLF_IDENTITY(0.0, _GLF_IDENTITY(float(mat4x3(_GLF_IDENTITY(0.0, _GLF_IDENTITY(float(mat3x4(0.0, 0.0, 1.0, 1.0, _GLF_IDENTITY(1.0, (1.0) - 0.0), _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 1.0, round(_GLF_IDENTITY(length(normalize(vec3(1.0, 1.0, 1.0))), (length(normalize(vec3(1.0, 1.0, 1.0)))) * 1.0)), 0.0, 0.0, 0.0)), (float(mat3x4(0.0, 0.0, 1.0, 1.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 1.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0, 0.0, 0.0))) / 1.0)), _GLF_IDENTITY(log(1.0), min(log(1.0), _GLF_IDENTITY(log(1.0), (log(1.0)) * 1.0))), 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0)), float(vec3(_GLF_IDENTITY(float(mat4x3(_GLF_IDENTITY(0.0, _GLF_IDENTITY(float(mat3x4(0.0, 0.0, 1.0, 1.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 1.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0, 0.0, 0.0)), (float(mat3x4(0.0, 0.0, 1.0, 1.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 1.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0, 0.0, 0.0))) / 1.0)), log(1.0), 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0)), clamp(float(mat4x3(_GLF_IDENTITY(0.0, _GLF_IDENTITY(float(mat3x4(0.0, 0.0, 1.0, 1.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 1.0, round(_GLF_IDENTITY(length(normalize(vec3(1.0, 1.0, 1.0))), 1.0 * (length(normalize(vec3(1.0, 1.0, 1.0)))))), 0.0, 0.0, 0.0)), (float(mat3x4(0.0, 0.0, 1.0, 1.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 1.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0, 0.0, 0.0))) / 1.0)), log(1.0), 1.0, 1.0, 0.0, 1.0, 1.0, _GLF_IDENTITY(0.0, min(0.0, 0.0)), 1.0, 1.0, 1.0, 1.0)), float(mat4x3(_GLF_IDENTITY(0.0, _GLF_IDENTITY(float(mat3x4(0.0, 0.0, 1.0, 1.0, _GLF_IDENTITY(1.0, float(_GLF_IDENTITY(mat3(_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(vec2(-63.68, -5.4).t)), bool(false))), 0.0, 0.0, 1.0, 0.0, abs(length(vec4(0.0, 0.0, 0.0, 0.0))), determinant(mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, sin(0.0))), _GLF_IDENTITY(dot(vec4(0.0, 1.0, 0.0, 1.0), vec4(1.0, 0.0, 1.0, 0.0)), dot(vec4(0.0, 1.0, 0.0, 1.0), vec4(1.0, 0.0, 1.0, 0.0))), abs(1.0)), (true ? mat3(_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(vec2(-63.68, -5.4).t)), bool(false))), 0.0, 0.0, 1.0, 0.0, abs(length(vec4(0.0, 0.0, 0.0, 0.0))), determinant(mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, sin(0.0))), _GLF_IDENTITY(dot(vec4(0.0, 1.0, 0.0, 1.0), vec4(1.0, 0.0, 1.0, 0.0)), dot(vec4(0.0, 1.0, 0.0, 1.0), vec4(1.0, 0.0, 1.0, 0.0))), abs(1.0)) : _GLF_FUZZED(mat3(21.87, 422.167, -38.58, 8.1, -450.722, 8935.3962, 5.5, 3.3, -5.4)))))), _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 1.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0, 0.0, 0.0)), (float(mat3x4(0.0, 0.0, 1.0, 1.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 1.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0, 0.0, 0.0))) / 1.0)), log(1.0), 1.0, _GLF_IDENTITY(1.0, float(mat2(1.0, cos(0.0), 1.0, 1.0))), 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0)), float(mat4x3(_GLF_IDENTITY(_GLF_IDENTITY(0.0, _GLF_IDENTITY(float(mat3x4(0.0, 0.0, 1.0, 1.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 1.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0, 0.0, 0.0)), (float(mat3x4(0.0, 0.0, 1.0, 1.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 1.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0, 0.0, 0.0))) / 1.0)), min(_GLF_IDENTITY(0.0, _GLF_IDENTITY(float(mat3x4(0.0, 0.0, 1.0, 1.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 1.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0, 0.0, 0.0)), (float(mat3x4(0.0, 0.0, 1.0, 1.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 1.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0, 0.0, 0.0))) / 1.0)), _GLF_IDENTITY(0.0, _GLF_IDENTITY(float(mat3x4(0.0, 0.0, 1.0, 1.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 1.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0, 0.0, 0.0)), (float(mat3x4(0.0, 0.0, 1.0, 1.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 1.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0, 0.0, 0.0))) / 1.0)))), log(1.0), 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0)))), 1.0, 0.0)))), 0.0)), _GLF_IDENTITY(0.0, max(0.0, 0.0)))))), _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-579.355)), float(0.0), bool(true))))), float(vec2(_GLF_IDENTITY(0.0, min(0.0, _GLF_IDENTITY(0.0, clamp(0.0, _GLF_IDENTITY(_GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, 1.0 * (0.0)), _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)))), max(0.0, 0.0)), 0.0)))), 0.0)))), float(vec2(_GLF_IDENTITY(0.0, min(0.0, _GLF_IDENTITY(0.0, _GLF_IDENTITY(clamp(0.0, _GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0), max(clamp(0.0, _GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0), clamp(0.0, _GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0)))))), 0.0))))), _GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), vec2(_GLF_IDENTITY(vec2(injectionSwitch), (false ? _GLF_IDENTITY(_GLF_FUZZED(injectionSwitch), sin(vec2(0.0, 0.0)) + (_GLF_FUZZED(injectionSwitch))) : _GLF_IDENTITY(vec2(injectionSwitch), _GLF_IDENTITY(mat2(1.0) * (vec2(injectionSwitch)), (mat2(1.0) * (vec2(injectionSwitch))) - vec2(0.0, 0.0))))))).x, _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat2(injectionSwitch, 0.0, 1.0), mat2(1.0) * (mat2(injectionSwitch, 0.0, 1.0))))), injectionSwitch, injectionSwitch)).x))), mix(float(_GLF_IDENTITY(_GLF_ZERO(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(0.0, _GLF_IDENTITY(min(_GLF_IDENTITY(0.0, max(0.0, 0.0)), _GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(-452.233)))), float(mat4x2(min(_GLF_IDENTITY(0.0, _GLF_IDENTITY(max(0.0, 0.0), clamp(max(0.0, 0.0), max(0.0, 0.0), max(0.0, 0.0)))), _GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(-452.233)))), 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0)))), min(_GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(-5320.7952) : 0.0)), 0.0)), float(vec2(_GLF_IDENTITY(0.0, min(0.0, _GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, float(mat2x4(0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0)))) / 1.0)) / 1.0))), 0.0))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(158.582)), bool(false))), max(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(vec2(injectionSwitch), (false ? _GLF_FUZZED(injectionSwitch) : _GLF_IDENTITY(vec2(injectionSwitch), mat2(1.0) * (vec2(injectionSwitch))))))).x, _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat2(injectionSwitch, 0.0, 1.0), mat2(1.0) * (mat2(injectionSwitch, 0.0, 1.0))))), min(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat2(injectionSwitch, 0.0, 1.0), mat2(1.0) * (mat2(injectionSwitch, 0.0, 1.0))))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat2(injectionSwitch, 0.0, 1.0), mat2(1.0) * (mat2(injectionSwitch, 0.0, 1.0))))), min(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat2(injectionSwitch, 0.0, 1.0), mat2(1.0) * (mat2(injectionSwitch, 0.0, 1.0))))), _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat2(injectionSwitch, 0.0, 1.0), mat2(1.0) * (mat2(injectionSwitch, 0.0, 1.0))))))))), injectionSwitch, injectionSwitch)).x))), (false ? _GLF_FUZZED(204.461) : _GLF_ZERO(_GLF_IDENTITY(_GLF_IDENTITY(0.0, min(0.0, 0.0)), float(vec2(_GLF_IDENTITY(0.0, min(0.0, 0.0)), 0.0))), _GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(_GLF_IDENTITY(vec2(injectionSwitch), (false ? _GLF_FUZZED(injectionSwitch) : _GLF_IDENTITY(_GLF_IDENTITY(vec2(injectionSwitch), mat2(1.0) * (vec2(injectionSwitch))), mix(vec2((_GLF_IDENTITY(vec2(injectionSwitch), mat2(1.0) * (vec2(injectionSwitch))))[0], (_GLF_IDENTITY(vec2(injectionSwitch), mat2(1.0) * (vec2(injectionSwitch))))[1]), vec2(_GLF_FUZZED(2.1), _GLF_FUZZED(-117.357)), bvec2(false, false))))), min(_GLF_IDENTITY(vec2(injectionSwitch), (false ? _GLF_FUZZED(injectionSwitch) : _GLF_IDENTITY(_GLF_IDENTITY(vec2(injectionSwitch), mat2(1.0) * (vec2(injectionSwitch))), mix(vec2((_GLF_IDENTITY(vec2(injectionSwitch), mat2(1.0) * (vec2(injectionSwitch))))[0], (_GLF_IDENTITY(vec2(injectionSwitch), mat2(1.0) * (vec2(injectionSwitch))))[1]), vec2(_GLF_FUZZED(2.1), _GLF_FUZZED(-117.357)), bvec2(false, false))))), _GLF_IDENTITY(vec2(injectionSwitch), (false ? _GLF_FUZZED(injectionSwitch) : _GLF_IDENTITY(_GLF_IDENTITY(vec2(injectionSwitch), mat2(1.0) * (vec2(injectionSwitch))), mix(vec2((_GLF_IDENTITY(vec2(injectionSwitch), mat2(1.0) * (vec2(injectionSwitch))))[0], (_GLF_IDENTITY(vec2(injectionSwitch), mat2(1.0) * (vec2(injectionSwitch))))[1]), vec2(_GLF_FUZZED(2.1), _GLF_FUZZED(-117.357)), bvec2(false, false))))))))).x, _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat2(injectionSwitch, 0.0, 1.0), _GLF_IDENTITY(mat2(1.0), (mat2(1.0)) + mat2(0.0, 0.0, 0.0, 0.0)) * (mat2(injectionSwitch, 0.0, 1.0))))), injectionSwitch, injectionSwitch)).x)))))), float(_GLF_FUZZED(-3.6)), bool(false)))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      continue;
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       do
        {
         atomicStore(checker[virtual_gid], read, 4, _GLF_IDENTITY(_GLF_IDENTITY(64, int(int(64))), min(_GLF_IDENTITY(64, int(int(64))), _GLF_IDENTITY(64, int(int(64))))), 4);
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, true && (false))) && true)));
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      continue;
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  return;
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END
BUFFER checker DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected_checker DATA_TYPE uint32 SIZE 8388096 FILL 1

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 
  BIND BUFFER checker AS storage DESCRIPTOR_SET 0 BINDING 2 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT checker EQ_BUFFER expected_checker
