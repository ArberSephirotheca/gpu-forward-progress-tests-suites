#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = _GLF_IDENTITY(gl_WorkGroupID, min(gl_WorkGroupID, _GLF_IDENTITY(gl_WorkGroupID, _GLF_IDENTITY(_GLF_IDENTITY((gl_WorkGroupID), clamp(_GLF_IDENTITY((gl_WorkGroupID), (true ? (gl_WorkGroupID) : _GLF_FUZZED(uvec3(178699u, 86011u, 47647u)))), _GLF_IDENTITY((_GLF_IDENTITY(gl_WorkGroupID, (gl_WorkGroupID) + _GLF_IDENTITY(uvec3(0u, 0u, 0u), _GLF_IDENTITY(uvec3(_GLF_IDENTITY(0u, (0u) - (0u << _GLF_IDENTITY(uint(1u), uint(1u)))), 0u, 0u) ^ (uvec3(_GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, (0u) << 0u)) << 0u)) >> 0u), 0u, 0u)), uvec3(uvec3(uvec3(0u, _GLF_IDENTITY(0u, clamp(0u, 0u, 0u)), 0u) ^ _GLF_IDENTITY((uvec3(0u, 0u, 0u)), min(_GLF_IDENTITY((uvec3(0u, 0u, 0u)), (false ? _GLF_FUZZED(uvec3(101623u, 112553u, 14258u)) : (uvec3(0u, 0u, 0u)))), (uvec3(0u, 0u, 0u)))))))))), ((_GLF_IDENTITY(gl_WorkGroupID, (gl_WorkGroupID) + _GLF_IDENTITY(uvec3(0u, 0u, 0u), _GLF_IDENTITY(uvec3(0u, 0u, 0u), clamp(uvec3(0u, 0u, 0u), _GLF_IDENTITY(uvec3(0u, 0u, 0u), (_GLF_IDENTITY(uvec3(0u, 0u, 0u), (uvec3(0u, 0u, 0u)) * uvec3(1u, 1u, 1u))) - uvec3(0u, 0u, 0u)), uvec3(0u, 0u, 0u))) ^ (uvec3(0u, 0u, 0u)))))) - _GLF_IDENTITY(uvec3(0u, 0u, 0u), (uvec3(0u, 0u, 0u)) / uvec3(1u, 1u, 1u))), (gl_WorkGroupID))), ((_GLF_IDENTITY(gl_WorkGroupID, (gl_WorkGroupID) / uvec3(1u, _GLF_IDENTITY(_GLF_IDENTITY(1u, (1u) ^ 0u), clamp(_GLF_IDENTITY(_GLF_IDENTITY(1u, (1u) ^ 0u), (_GLF_IDENTITY(1u, (1u) ^ 0u)) | (_GLF_IDENTITY(1u, (1u) ^ 0u))), _GLF_IDENTITY(1u, (1u) ^ 0u), _GLF_IDENTITY(1u, (1u) ^ 0u))), 1u)))) - uvec3(0u, 0u, 0u)) ^ uvec3(0u, 0u, 0u)))).x;
 uint workgroup_base = _GLF_IDENTITY(workgroup_size * workgroup_id, _GLF_IDENTITY(0u, (0u) ^ 0u) ^ (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, (workgroup_size) - 0u) * _GLF_IDENTITY(workgroup_id, clamp(workgroup_id, workgroup_id, workgroup_id)), (false ? _GLF_FUZZED(subgroup_local_id) : workgroup_size * workgroup_id))));
 uint subgroup_base = _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, max(subgroup_id, subgroup_id)) * subgroup_size, 0u + (_GLF_IDENTITY(subgroup_id, max(subgroup_id, subgroup_id)) * subgroup_size)), ~ (~ _GLF_IDENTITY((subgroup_id * subgroup_size), clamp(_GLF_IDENTITY((subgroup_id * subgroup_size), uint(uvec3((subgroup_id * subgroup_size), 1u, (1u | 1u)))), (subgroup_id * subgroup_size), (subgroup_id * subgroup_size)))));
 uint virtual_gid = _GLF_IDENTITY(workgroup_base + subgroup_base + subgroup_local_id, uint(uvec3(workgroup_base + subgroup_base + subgroup_local_id, 1u, (0u | 1u))));
 uint next_virtual_gid = _GLF_IDENTITY(workgroup_base + subgroup_base + ((_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec4(subgroup_local_id, _GLF_IDENTITY(1u, min(1u, _GLF_IDENTITY(1u, (1u) | (1u)))), 1u, 0u), max(uvec4(subgroup_local_id, 1u, 1u, 0u), _GLF_IDENTITY(uvec4(subgroup_local_id, 1u, 1u, 0u), uvec4(1u, 1u, 1u, 1u) * (uvec4(subgroup_local_id, 1u, 1u, 0u)))))), clamp(uint(_GLF_IDENTITY(uvec4(subgroup_local_id, 1u, 1u, 0u), max(uvec4(subgroup_local_id, 1u, 1u, 0u), _GLF_IDENTITY(uvec4(subgroup_local_id, 1u, 1u, 0u), uvec4(1u, 1u, 1u, 1u) * _GLF_IDENTITY((uvec4(subgroup_local_id, 1u, 1u, 0u)), clamp((uvec4(subgroup_local_id, 1u, 1u, 0u)), (uvec4(subgroup_local_id, 1u, 1u, 0u)), _GLF_IDENTITY((uvec4(subgroup_local_id, 1u, 1u, 0u)), (true ? (uvec4(subgroup_local_id, 1u, 1u, 0u)) : _GLF_FUZZED(uvec4(191386u, 89843u, 15735u, 199779u)))))))))), uint(_GLF_IDENTITY(_GLF_IDENTITY(uvec4(subgroup_local_id, 1u, 1u, 0u), max(uvec4(subgroup_local_id, 1u, 1u, 0u), _GLF_IDENTITY(uvec4(subgroup_local_id, 1u, 1u, 0u), uvec4(1u, 1u, 1u, 1u) * (uvec4(subgroup_local_id, 1u, 1u, 0u))))), (_GLF_IDENTITY(_GLF_IDENTITY(uvec4(subgroup_local_id, 1u, 1u, 0u), max(uvec4(subgroup_local_id, 1u, 1u, 0u), _GLF_IDENTITY(uvec4(subgroup_local_id, 1u, 1u, 0u), uvec4(1u, 1u, 1u, 1u) * (uvec4(subgroup_local_id, 1u, 1u, 0u))))), (_GLF_IDENTITY(uvec4(subgroup_local_id, 1u, 1u, 0u), max(uvec4(subgroup_local_id, 1u, 1u, 0u), _GLF_IDENTITY(uvec4(subgroup_local_id, 1u, 1u, 0u), uvec4(1u, 1u, 1u, 1u) * (uvec4(subgroup_local_id, 1u, 1u, 0u)))))) | (_GLF_IDENTITY(_GLF_IDENTITY(uvec4(subgroup_local_id, 1u, 1u, 0u), max(uvec4(subgroup_local_id, 1u, 1u, 0u), _GLF_IDENTITY(uvec4(subgroup_local_id, 1u, 1u, 0u), uvec4(1u, 1u, 1u, 1u) * (uvec4(subgroup_local_id, 1u, 1u, 0u))))), (_GLF_IDENTITY(uvec4(subgroup_local_id, 1u, 1u, 0u), max(uvec4(subgroup_local_id, 1u, 1u, 0u), _GLF_IDENTITY(uvec4(subgroup_local_id, 1u, 1u, 0u), uvec4(1u, 1u, 1u, 1u) * (uvec4(subgroup_local_id, 1u, 1u, 0u)))))) - (uvec4(84162u, 65600u, 6683u, 168294u) & uvec4(0u, 0u, 0u, 0u)))))) ^ uvec4(0u, 0u, 0u, 0u))), uint(_GLF_IDENTITY(_GLF_IDENTITY(uvec4(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) ^ (0u ^ 0u)), 1u, 1u, 0u), (uvec4(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) ^ (0u ^ 0u)), 1u, 1u, 0u)) << uvec4(0u, 0u, 0u, 0u)), max(uvec4(_GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, subgroup_local_id)), 1u, 1u, 0u), _GLF_IDENTITY(uvec4(subgroup_local_id, 1u, 1u, 0u), _GLF_IDENTITY(uvec4(1u, 1u, 1u, 1u) * (uvec4(subgroup_local_id, 1u, 1u, 0u)), (false ? _GLF_FUZZED(uvec4(22645u, 74771u, 41062u, 105597u)) : uvec4(1u, 1u, 1u, 1u) * (uvec4(subgroup_local_id, 1u, 1u, 0u))))))))))) + 1) % subgroup_size), clamp(workgroup_base + subgroup_base + ((subgroup_local_id + 1) % subgroup_size), _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + subgroup_base + ((subgroup_local_id + 1) % subgroup_size), clamp(workgroup_base + subgroup_base + ((subgroup_local_id + 1) % subgroup_size), workgroup_base + subgroup_base + ((subgroup_local_id + 1) % _GLF_IDENTITY(subgroup_size, (false ? _GLF_FUZZED(workgroup_size) : subgroup_size))), _GLF_IDENTITY(workgroup_base + subgroup_base + ((subgroup_local_id + 1) % subgroup_size), (workgroup_base + subgroup_base + (_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, ((subgroup_local_id + 1) % subgroup_size) | (_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, (_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, ((subgroup_local_id + 1) % subgroup_size) | ((subgroup_local_id + 1) % subgroup_size))) ^ 0u))))) ^ 0u))), (workgroup_base + subgroup_base + ((_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | 0u) + 1) % subgroup_size)) - 0u), workgroup_base + subgroup_base + ((subgroup_local_id + 1) % subgroup_size)));
 uint read = _GLF_IDENTITY(0, (_GLF_IDENTITY(0, max(0, 0))) | (0));
 do
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (_GLF_IDENTITY((((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3))) ^ _GLF_IDENTITY(1, 0 + (1))) | 0, int(ivec4((((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3))) ^ 1) | 0, 1, 1, int(_GLF_ZERO(0.0, injectionSwitch.x))))))); _injected_loop_counter --)
      {
       do
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bvec3(_GLF_IDENTITY(true, bool(bool(true))), true, false)))))
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec4(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, false, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) < injectionSwitch.y)))))))))
            {
            }
           else
            {
             if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bool(true)))), _GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y), (_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y), ! (! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y))))) || false)) || (_GLF_WRAPPED_IF_TRUE(true))))
              {
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 | 1)); _injected_loop_counter ++)
                {
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                  {
                   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) && true)) && _GLF_IDENTITY(true, (true) || false))))
                    {
                    }
                   else
                    {
                     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, true && (false))))
                      {
                      }
                     else
                      {
                       atomicStore(buf[next_virtual_gid], uint(1), 4, _GLF_IDENTITY(64, (64) << 0), 4);
                      }
                    }
                  }
                 else
                  {
                  }
                }
              }
             else
              {
              }
            }
          }
         else
          {
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, false || (false))));
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), (_GLF_IDENTITY(false, (false) || false)) || false)));
 do
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)))), bool(bvec4(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_IDENTITY(false, (false) || _GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))), true, _GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ((injectionSwitch.x < injectionSwitch.y)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), 0 | (int(1))))) >> _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), (int(1)) / 1))), clamp(_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), 0 | (int(1))))) >> _GLF_IDENTITY(int(1), int(1))), (true ? ((1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(_GLF_IDENTITY(int(1), ~ (_GLF_IDENTITY(~ (int(1)), (~ (int(1))) - 0))), 0 | (int(1))))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(1, clamp(1, 1, 1))), int(1))) : _GLF_FUZZED(88581))), ((1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), 0 | (int(1))))) >> _GLF_IDENTITY(int(1), int(1))), _GLF_IDENTITY(((1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(_GLF_IDENTITY(int(1), 0 | (int(1))), int(ivec4(_GLF_IDENTITY(int(1), 0 | (int(1))), 0, 1, 0))))) >> _GLF_IDENTITY(int(1), int(1))), (_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), 0 | (int(1))))) >> _GLF_IDENTITY(int(1), int(1))), (((1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), 0 | (int(1))))) >> _GLF_IDENTITY(int(1), int(1)))) | 0)) | 0))), (false ? _GLF_FUZZED(_GLF_IDENTITY(_injected_loop_counter, 0 ^ (_injected_loop_counter))) : _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(1, min(1, _GLF_IDENTITY(1, ~ (~ (_GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(-70239))))))))), _GLF_IDENTITY(int(1), 0 | (int(1))))), (false ? _GLF_FUZZED(52800) : (1 << _GLF_IDENTITY(int(_GLF_IDENTITY(1, min(1, _GLF_IDENTITY(1, ~ (~ (_GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(-70239))))))))), _GLF_IDENTITY(int(1), 0 | (int(1))))))) >> _GLF_IDENTITY(int(1), int(1))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), 0 | (int(1))))) >> _GLF_IDENTITY(int(1), int(1))), (true ? ((1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), 0 | (int(1))))) >> _GLF_IDENTITY(int(1), int(1))) : _GLF_FUZZED(88581))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), 0 | (int(1))))) >> _GLF_IDENTITY(int(1), int(1))), (true ? ((1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), 0 | (int(1))))) >> _GLF_IDENTITY(int(1), int(1))) : _GLF_FUZZED(88581))), (_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), 0 | (int(1))))) >> _GLF_IDENTITY(int(1), int(1))), (true ? ((1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), 0 | (int(1))))) >> _GLF_IDENTITY(int(1), int(1))) : _GLF_FUZZED(88581)))) | 0), _GLF_IDENTITY(_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), 0 | (int(1))))) >> _GLF_IDENTITY(int(1), int(1))), (true ? ((1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), 0 | (int(1))))) >> _GLF_IDENTITY(int(1), int(1))) : _GLF_FUZZED(88581))), (false ? _GLF_FUZZED(15216) : _GLF_IDENTITY(((1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), 0 | (int(1))))) >> _GLF_IDENTITY(int(1), int(1))), (true ? ((1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), 0 | (int(1))))) >> _GLF_IDENTITY(int(1), int(1))) : _GLF_FUZZED(88581))))), _GLF_IDENTITY(((1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), 0 | (int(1))))) >> _GLF_IDENTITY(int(1), int(1))), (true ? ((1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), 0 | (int(1))))) >> _GLF_IDENTITY(int(1), int(1))) : _GLF_FUZZED(88581))))), ((1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), 0 | (int(1))))) >> _GLF_IDENTITY(int(1), int(1))), _GLF_IDENTITY(((1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), 0 | (int(1))))) >> _GLF_IDENTITY(int(1), int(1))), (_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), 0 | (int(1))))) >> _GLF_IDENTITY(int(1), int(1))), (((1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), 0 | _GLF_IDENTITY((int(1)), ((int(1))) / 1)))) >> _GLF_IDENTITY(int(1), int(1)))) | 0)) | 0))), _GLF_IDENTITY((_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), 0 | (int(1))))) >> _GLF_IDENTITY(int(1), int(1))), clamp(_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), 0 | (int(1))))) >> _GLF_IDENTITY(int(1), int(1))), (true ? ((1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), 0 | (int(1))))) >> _GLF_IDENTITY(int(1), int(1))) : _GLF_FUZZED(88581))), ((1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), 0 | (int(1))))) >> _GLF_IDENTITY(int(1), int(1))), _GLF_IDENTITY(((1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), 0 | (int(1))))) >> _GLF_IDENTITY(int(1), int(1))), (_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), 0 | (int(1))))) >> _GLF_IDENTITY(int(1), int(1))), (((1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), 0 | (int(1))))) >> _GLF_IDENTITY(int(1), int(1)))) | 0)) | 0)))) | 0, (_GLF_IDENTITY((_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), 0 | (int(1))))) >> _GLF_IDENTITY(int(1), int(1))), clamp(_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), 0 | (int(1))))) >> _GLF_IDENTITY(int(1), int(1))), (true ? ((1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), 0 | (int(1))))) >> _GLF_IDENTITY(int(1), int(1))) : _GLF_FUZZED(88581))), ((1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), 0 | (int(1))))) >> _GLF_IDENTITY(int(1), int(1))), _GLF_IDENTITY(((1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), 0 | (int(1))))) >> _GLF_IDENTITY(int(1), int(1))), (_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), 0 | (int(1))))) >> _GLF_IDENTITY(int(1), int(1))), (((1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), 0 | (int(1))))) >> _GLF_IDENTITY(int(1), int(1)))) | 0)) | 0)))) | 0, int(ivec3((_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), 0 | (int(1))))) >> _GLF_IDENTITY(int(1), int(1))), clamp(_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), 0 | (int(1))))) >> _GLF_IDENTITY(int(1), int(1))), (true ? ((1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), 0 | (int(1))))) >> _GLF_IDENTITY(int(1), int(1))) : _GLF_FUZZED(88581))), ((1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), 0 | (int(1))))) >> _GLF_IDENTITY(int(1), int(1))), _GLF_IDENTITY(((1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), 0 | (int(1))))) >> _GLF_IDENTITY(int(1), int(1))), (_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), 0 | (int(1))))) >> _GLF_IDENTITY(int(1), int(1))), (((1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), 0 | (int(1))))) >> _GLF_IDENTITY(int(1), int(1)))) | 0)) | 0)))) | 0, 1, 0)))) | 0))))); _injected_loop_counter ++)
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(2), int(2)), (1 << _GLF_IDENTITY(int(2), int(2))) | (1 << _GLF_IDENTITY(int(2), int(2))))) >> _GLF_IDENTITY(int(2), int(_GLF_IDENTITY(_GLF_IDENTITY(2, min(2, 2)), min(2, 2)))))); _injected_loop_counter ++)
        {
         do
          {
           if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), true && (_GLF_WRAPPED_IF_FALSE(false))))
            {
            }
           else
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, float(mat4x2(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(-659.382), _GLF_FUZZED(-8.0)), bvec2(false, false))), _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(-48.28), _GLF_FUZZED(vec3(-1.7, 3.5, -3.2).p)), bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))), injectionSwitch)).y, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0)))))))))
              {
              }
             else
              {
               if(_GLF_IDENTITY((subgroup_local_id % 2) == 0, _GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, (true) && true)))) && (_GLF_IDENTITY((subgroup_local_id % _GLF_IDENTITY(2, (2) | 0)) == 0, _GLF_IDENTITY(false || _GLF_IDENTITY(((subgroup_local_id % 2) == 0), (((subgroup_local_id % 2) == 0)) && true), bool(bvec3(false || _GLF_IDENTITY(((subgroup_local_id % 2) == 0), (((subgroup_local_id % 2) == 0)) && true), true, false)))))))
                {
                 do
                  {
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                      }
                     else
                      {
                       for(int _injected_loop_counter = _GLF_IDENTITY((0 | 0), clamp((0 | 0), (0 | 0), _GLF_IDENTITY((0 | 0), (_GLF_IDENTITY(true ? _GLF_IDENTITY((0 | 0), clamp((0 | 0), _GLF_IDENTITY((0 | 0), int(ivec4((0 | 0), 1, 1, 1))), (0 | 0))) : _GLF_FUZZED(_GLF_IDENTITY(_injected_loop_counter, min(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) | (_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) | (_injected_loop_counter)))), _injected_loop_counter))), (true ? _GLF_IDENTITY((0 | 0), clamp((_GLF_IDENTITY(0 | 0, (0 | 0) / 1)), (0 | 0), (0 | 0))) : _GLF_FUZZED(_injected_loop_counter)) - 0))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 ^ 1)); _injected_loop_counter ++)
                        {
                         for(int _injected_loop_counter = ((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (_GLF_IDENTITY(0 & 25965, (0 & 25965) / (1 ^ 0)))); _injected_loop_counter --)
                          {
                           if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, ! (! (true))), (injectionSwitch.x < injectionSwitch.y))), ! (! (_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))))
                            {
                             if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bvec4(false, false, true, _GLF_IDENTITY(true, false || (_GLF_IDENTITY(_GLF_IDENTITY(true, (true) && true), (_GLF_IDENTITY(_GLF_IDENTITY(true, (true) && true), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, (true) && true)), (! (_GLF_IDENTITY(true, (true) && true))) || false)))) || false))))))))
                              {
                              }
                             else
                              {
                               if(_GLF_WRAPPED_IF_TRUE(true))
                                {
                                 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec4(false, false, false, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))).x < injectionSwitch.y)))), (bool(bvec4(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (_GLF_IDENTITY(! (false), ! (! (! (false))))))))), false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), (_GLF_IDENTITY(bool(bvec4(false, false, false, _GLF_TRUE(_GLF_IDENTITY(true, bool(bool(true))), _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (injectionSwitch.x < injectionSwitch.y) || false), false, false), bvec3(bvec4(bvec3(injectionSwitch.x < injectionSwitch.y, false, false), false)))), bool(bvec4(_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(injectionSwitch.x < injectionSwitch.y, false, false), bvec3(bvec4(bvec3(injectionSwitch.x < injectionSwitch.y, false, false), false)))), (bool(_GLF_IDENTITY(bvec3(injectionSwitch.x < injectionSwitch.y, false, false), bvec3(bvec4(bvec3(injectionSwitch.x < injectionSwitch.y, false, false), false))))) || _GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, false || (false))) && true), false, true)), ! (! (bool(bvec3(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, false || (false))) && true), false, true))))))), _GLF_IDENTITY(false, false || (false)), false, true))))), ((injectionSwitch.x < injectionSwitch.y)) || false)))), bool(bool(bool(bvec4(false, false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))) || false)) || (true))), bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, false, false, _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(vec3(injectionSwitch, 0.0), min(vec3(injectionSwitch, 0.0), vec3(injectionSwitch, 0.0)))))) - vec2(0.0, 0.0)), max(injectionSwitch, injectionSwitch)).y)))), _GLF_IDENTITY((_GLF_IDENTITY(bool(bvec4(false, false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), bool(bool(bool(bvec4(false, false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))) || false, true && ((_GLF_IDENTITY(_GLF_IDENTITY(bool(bvec4(false, false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), ! (_GLF_IDENTITY(! (bool(bvec4(false, false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), true && (! (bool(bvec4(false, false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))), bool(bool(bool(bvec4(false, false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))) || false)))) || (true))), _GLF_IDENTITY(false || (_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, false, false, _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))))), (_GLF_IDENTITY(bool(bvec4(false, false, false, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).x < injectionSwitch.y)))), bool(bool(bool(bvec4(false, false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))) || false)) || (true)))), ! (! (false || (_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, false, false, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(-3.5))) < _GLF_IDENTITY(injectionSwitch, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)).y)))), (_GLF_IDENTITY(bool(bvec4(false, false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), bool(bool(_GLF_IDENTITY(bool(bvec4(false, false, false, _GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), false || (_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), bool(_GLF_IDENTITY(bvec2((injectionSwitch.x < injectionSwitch.y), true), bvec2(bvec4(bvec2((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).x < injectionSwitch.y), true), _GLF_IDENTITY(false, (false) || false), false)))))))))), true && (bool(bvec4(false, false, false, _GLF_TRUE(true, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ! (! ((injectionSwitch.x < injectionSwitch.y))))), bool(bvec2(! (_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ! (! ((injectionSwitch.x < injectionSwitch.y))))), false))))), _GLF_IDENTITY(false || (_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), bool(_GLF_IDENTITY(bvec2((injectionSwitch.x < injectionSwitch.y), true), bvec2(bvec4(bvec2((injectionSwitch.x < injectionSwitch.y), true), false, false)))))), ! (_GLF_IDENTITY(! (false || (_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), bool(_GLF_IDENTITY(bvec2((injectionSwitch.x < injectionSwitch.y), true), bvec2(bvec4(bvec2((injectionSwitch.x < injectionSwitch.y), true), false, false))))))), ! (! (_GLF_IDENTITY(! (false || (_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), bool(_GLF_IDENTITY(bvec2((injectionSwitch.x < injectionSwitch.y), true), bvec2(bvec4(bvec2((injectionSwitch.x < injectionSwitch.y), true), false, false))))))), ! (! (! (false || (_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), bool(_GLF_IDENTITY(bvec2((injectionSwitch.x < injectionSwitch.y), true), bvec2(bvec4(bvec2((_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(85.28)), float(injectionSwitch.x), bool(true))))) < _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0))) - vec2(0.0, 0.0)).y) || false)) && true)), true), false, false))))))))))))))))))))))))) || false)) || (true))))))))), bool(bvec3(bool(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, false, false, _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y)))), _GLF_IDENTITY((_GLF_IDENTITY(bool(bvec4(false, false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), bool(bool(bool(bvec4(false, false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))) || false, true && ((_GLF_IDENTITY(bool(bvec4(false, false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), bool(bool(bool(bvec4(false, false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))) || false)))) || (true))), _GLF_IDENTITY(false || (_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, false, false, _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))))), (_GLF_IDENTITY(bool(bvec4(false, false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), bool(bool(bool(bvec4(false, false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))) || false)) || (true)))), ! (! (false || (_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, false, false, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(-3.5))) < _GLF_IDENTITY(injectionSwitch, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)).y)))), (_GLF_IDENTITY(bool(bvec4(false, false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), bool(bool(_GLF_IDENTITY(bool(bvec4(false, false, false, _GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), false || (_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), bool(_GLF_IDENTITY(bvec2((injectionSwitch.x < injectionSwitch.y), true), bvec2(bvec4(bvec2((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).x < injectionSwitch.y), true), _GLF_IDENTITY(false, (false) || false), false)))))))))), true && (bool(bvec4(false, false, false, _GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), false || (_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), bool(_GLF_IDENTITY(bvec2((injectionSwitch.x < injectionSwitch.y), true), bvec2(bvec4(bvec2((injectionSwitch.x < injectionSwitch.y), true), false, false)))))))))))))))) || false)) || (true)))))))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, false, false, _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y)))), _GLF_IDENTITY((_GLF_IDENTITY(bool(bvec4(false, false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), bool(bool(bool(bvec4(false, false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))) || false, true && ((_GLF_IDENTITY(bool(bvec4(false, false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), bool(bool(bool(bvec4(false, false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))) || false)))) || (true))), _GLF_IDENTITY(false || (_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, false, false, _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))))), (_GLF_IDENTITY(bool(bvec4(false, false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), bool(bool(bool(bvec4(false, false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))) || false)) || (true)))), ! (! (false || (_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, false, false, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(-3.5))) < _GLF_IDENTITY(injectionSwitch, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)).y)))), (_GLF_IDENTITY(bool(bvec4(false, false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), bool(bool(_GLF_IDENTITY(bool(bvec4(false, false, false, _GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), false || (_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), bool(_GLF_IDENTITY(bvec2((injectionSwitch.x < injectionSwitch.y), true), bvec2(bvec4(bvec2((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).x < injectionSwitch.y), true), _GLF_IDENTITY(false, (false) || false), false)))))))))), true && (bool(bvec4(false, false, false, _GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), false || (_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), bool(_GLF_IDENTITY(bvec2((injectionSwitch.x < injectionSwitch.y), true), bvec2(bvec4(bvec2((injectionSwitch.x < injectionSwitch.y), true), false, false)))))))))))))))) || false)) || (true)))))))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, false, false, _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y)))), _GLF_IDENTITY((_GLF_IDENTITY(bool(bvec4(false, false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), bool(bool(bool(bvec4(false, false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))) || false, true && ((_GLF_IDENTITY(bool(bvec4(false, false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), bool(bool(bool(bvec4(false, false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))) || false)))) || (true))), _GLF_IDENTITY(false || (_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, false, false, _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))))), (_GLF_IDENTITY(bool(bvec4(false, false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), bool(bool(bool(bvec4(false, false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))) || false)) || (true)))), ! (! (false || (_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, false, false, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(-3.5))) < _GLF_IDENTITY(injectionSwitch, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)).y)))), (_GLF_IDENTITY(bool(bvec4(false, false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), bool(bool(_GLF_IDENTITY(bool(bvec4(false, false, false, _GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), false || (_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), bool(_GLF_IDENTITY(bvec2((injectionSwitch.x < injectionSwitch.y), true), bvec2(bvec4(bvec2((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).x < injectionSwitch.y), true), _GLF_IDENTITY(false, (false) || false), false)))))))))), true && (bool(bvec4(false, false, false, _GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), false || (_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), bool(_GLF_IDENTITY(bvec2((injectionSwitch.x < injectionSwitch.y), true), bvec2(bvec4(bvec2((injectionSwitch.x < injectionSwitch.y), true), false, false)))))))))))))))) || false)) || (true)))))))), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, false, false, _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y)))), _GLF_IDENTITY((_GLF_IDENTITY(bool(bvec4(false, false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), bool(bool(bool(bvec4(false, false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))) || false, true && ((_GLF_IDENTITY(bool(bvec4(false, false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), bool(bool(bool(bvec4(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec2(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec4(bvec2(false, true), true, true)))))))), false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))) || false)))) || (true))), _GLF_IDENTITY(false || (_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, false, false, _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))))), (_GLF_IDENTITY(bool(bvec4(false, false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), bool(bool(_GLF_IDENTITY(bool(bvec4(false, false, false, _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(vec3(injectionSwitch, 1.0)), (true ? vec2(vec3(injectionSwitch, 1.0)) : _GLF_FUZZED(vec2(-200.420, 5.8))))).y)))), bool(bvec3(_GLF_IDENTITY(bool(bvec4(false, false, false, _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(vec3(injectionSwitch, 1.0)), (true ? vec2(vec3(injectionSwitch, 1.0)) : _GLF_FUZZED(vec2(-200.420, 5.8))))).y)))), ! (! (bool(bvec4(false, false, false, _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(vec3(injectionSwitch, 1.0)), (true ? vec2(vec3(injectionSwitch, 1.0)) : _GLF_FUZZED(vec2(-200.420, 5.8))))).y))))))), true, true))))))) || false)) || (true)))), ! (! (false || (_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, false, false, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(-3.5))) < _GLF_IDENTITY(injectionSwitch, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)).y)))), (_GLF_IDENTITY(bool(bvec4(false, false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), bool(bool(_GLF_IDENTITY(bool(bvec4(false, false, false, _GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), false || (_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), bool(_GLF_IDENTITY(bvec2((injectionSwitch.x < injectionSwitch.y), true), bvec2(bvec4(bvec2((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).x < injectionSwitch.y), true), _GLF_IDENTITY(false, (false) || false), false)))))))))), true && (bool(bvec4(false, false, false, _GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), false || (_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), bool(_GLF_IDENTITY(bvec2((injectionSwitch.x < injectionSwitch.y), true), bvec2(bvec4(bvec2((injectionSwitch.x < injectionSwitch.y), true), false, _GLF_IDENTITY(false, bool(bvec4(false, false, true, true))))))))))))))))))) || false)) || (true)))))))))))) && true)) || false)), true, _GLF_IDENTITY(true, _GLF_IDENTITY(false || (true), ! (_GLF_IDENTITY(! (false || (true)), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(! (false || (true)), ! (! (! (false || (true)))))), (bool(_GLF_IDENTITY(! (false || (true)), ! (! (! (false || (true))))))) || false)), bool(bvec3(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(! (false || (true)), ! (! (! (false || (true)))))), (bool(_GLF_IDENTITY(! (false || (true)), ! (! (! (false || (true))))))) || false)), false, false)))))))))), false || (bool(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec4(false, false, false, _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(vec4(injectionSwitch, 1.0, 0.0)), clamp(vec2(vec4(injectionSwitch, 1.0, 0.0)), vec2(vec4(injectionSwitch, 1.0, 0.0)), vec2(vec4(injectionSwitch, 1.0, 0.0))))).y)))), bool(bool(bool(bvec4(false, false, false, _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(vec4(injectionSwitch, 1.0, 0.0)), clamp(vec2(vec4(injectionSwitch, 1.0, 0.0)), vec2(vec4(injectionSwitch, 1.0, 0.0)), vec2(vec4(injectionSwitch, 1.0, 0.0))))).y))))))), _GLF_IDENTITY((_GLF_IDENTITY(bool(bvec4(false, false, false, _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(_GLF_IDENTITY(bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bool(bool(bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))), bool(bool(_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(false, (false) || false), false, _GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) || false))), _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / _GLF_IDENTITY(dot(vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, 0.0)), dot(vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, 0.0)))))))), false || (bool(bvec4(_GLF_IDENTITY(false, (false) || false), false, _GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) || false))), _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / _GLF_IDENTITY(dot(vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, 0.0)), dot(vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, 0.0)))))))))))))), bool(bvec3((_GLF_IDENTITY(bool(bvec4(false, false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), bool(bool(bool(bvec4(_GLF_IDENTITY(false, (false) || false), false, _GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) || false))), _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)))).y) / _GLF_IDENTITY(dot(vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, 0.0)), dot(vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, 0.0)))))))))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))) || false)) || (_GLF_IDENTITY(true, ! (! (true)))))), false || (_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), (_GLF_IDENTITY(bool(bvec4(false, false, false, _GLF_TRUE(true, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))), (_GLF_IDENTITY((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))), ! (! ((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))))))) || false), true && (_GLF_IDENTITY((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))), (_GLF_IDENTITY((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))), ! (! ((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y), (_GLF_IDENTITY(clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y), mix(float(_GLF_FUZZED(5225.1142)), float(clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), bool(true)))) / 1.0))))))) || false)))))), bool(bool(bool(bvec4(false, false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))) || false)) || (true), ! (! (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), (_GLF_IDENTITY(bool(bvec4(false, false, false, _GLF_TRUE(true, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))), (_GLF_IDENTITY((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))), ! (! ((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))))))) || false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))), (_GLF_IDENTITY((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))), ! (! ((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))))))) || false), ! (! (_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))), ! (! ((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)))))), (_GLF_IDENTITY((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))), ! (! ((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))))))) || false)))))), true && (_GLF_IDENTITY((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))), (_GLF_IDENTITY((injectionSwitch.x < _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(-428.533, -3571.5380)))).y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))), ! (! ((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y), (_GLF_IDENTITY(clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y), mix(float(_GLF_FUZZED(5225.1142)), float(clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), bool(true)))) / 1.0))))))) || false)))))), bool(bool(bool(bvec4(false, false, false, _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))) && true))))))) || false)) || (true))))))))))))))
                                  {
                                   if(_GLF_WRAPPED_IF_FALSE(false))
                                    {
                                    }
                                   else
                                    {
                                     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                                      {
                                       do
                                        {
                                         do
                                          {
                                           subgroupAll(false);
                                          }
                                         while(_GLF_WRAPPED_LOOP(false));
                                        }
                                       while(_GLF_WRAPPED_LOOP(false));
                                      }
                                    }
                                  }
                                 else
                                  {
                                  }
                                }
                               else
                                {
                                }
                              }
                            }
                           else
                            {
                            }
                          }
                        }
                      }
                    }
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) || false))
                  {
                  }
                 else
                  {
                   read = atomicLoad(buf[_GLF_IDENTITY(virtual_gid, (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y, clamp(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y, clamp(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y)), _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y, (true ? _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y : _GLF_FUZZED(0.6))))))) ? _GLF_IDENTITY(virtual_gid, clamp(virtual_gid, virtual_gid, virtual_gid)) : _GLF_FUZZED(160606u), (false ? _GLF_IDENTITY(_GLF_FUZZED(read), (_GLF_FUZZED(read)) / 1u) : _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(virtual_gid, _GLF_IDENTITY(clamp(virtual_gid, virtual_gid, virtual_gid), clamp(clamp(virtual_gid, virtual_gid, virtual_gid), clamp(virtual_gid, virtual_gid, virtual_gid), clamp(virtual_gid, virtual_gid, virtual_gid)))) : _GLF_FUZZED(160606u)))))], 4, 64, 2);
                  }
                }
               else
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   for(int _injected_loop_counter = (_GLF_IDENTITY(0, clamp(_GLF_IDENTITY(0, 0 | (0)), _GLF_IDENTITY(0, (_GLF_IDENTITY(true, (true) && true) ? _GLF_IDENTITY(0, int(ivec4(0, 0, 1, 0))) : _GLF_FUZZED(_injected_loop_counter))), 0)) << _GLF_IDENTITY(int(5), int(5))); _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(1, (1) | (1))); _GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) / 1))
                    {
                     do
                      {
                       do
                        {
                         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > 0, true && (_injected_loop_counter > 0))); _injected_loop_counter --)
                          {
                           for(int _injected_loop_counter = _GLF_IDENTITY(_GLF_IDENTITY(1, (1) | (1)), 0 ^ (_GLF_IDENTITY(1, (1) | (1)))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) - _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(0, ~ _GLF_IDENTITY((~ (_GLF_IDENTITY(0, (_GLF_IDENTITY(0, clamp(0, 0, 0))) | 0))), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? (~ (0)) : _GLF_FUZZED(_injected_loop_counter)))), 0 | (_GLF_IDENTITY(0, ~ (~ (0))))), _GLF_IDENTITY(int(ivec4(_GLF_IDENTITY(_GLF_IDENTITY(0, ~ _GLF_IDENTITY((~ (0)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? (~ _GLF_IDENTITY((0), min((0), (0)))) : _GLF_FUZZED(_injected_loop_counter)))), 0 | (_GLF_IDENTITY(0, ~ (~ (0))))), int(_GLF_ONE(1.0, injectionSwitch.y)), 0, 1)), int(ivec2(int(ivec4(_GLF_IDENTITY(_GLF_IDENTITY(0, ~ _GLF_IDENTITY((~ (0)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? (~ (0)) : _GLF_FUZZED(_injected_loop_counter)))), 0 | (_GLF_IDENTITY(0, ~ (~ (0))))), int(_GLF_ONE(1.0, injectionSwitch.y)), 0, 1)), 1))))), (_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) - _GLF_IDENTITY(_GLF_IDENTITY(0, ~ _GLF_IDENTITY((~ (0)), (_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ((injectionSwitch.x < injectionSwitch.y)) || false)) ? (~ (0)) : _GLF_FUZZED(_injected_loop_counter)))), 0 | (_GLF_IDENTITY(_GLF_IDENTITY(0, min(0, 0)), ~ (~ (0)))))), (_GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) - _GLF_IDENTITY(_GLF_IDENTITY(0, ~ _GLF_IDENTITY((~ (0)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? (~ (0)) : _GLF_FUZZED(_injected_loop_counter)))), 0 | (_GLF_IDENTITY(0, ~ (~ (0))))))) >> 0)) | 0))
                            {
                             if(_GLF_WRAPPED_IF_FALSE(false))
                              {
                              }
                             else
                              {
                               for(int _injected_loop_counter = (1 | 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(0, (false ? _GLF_FUZZED(_injected_loop_counter) : 0))); _injected_loop_counter --)
                                {
                                 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 << _GLF_IDENTITY(int(_GLF_IDENTITY(7, (7) ^ (0 << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), int(ivec2(int(0), 1))))))), _GLF_IDENTITY(int(7), 0 | (int(7)))))); _injected_loop_counter --)
                                  {
                                   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + 0.0) < _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0), min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(_GLF_IDENTITY(vec3(injectionSwitch.y, abs(1.0), 0.0), (false ? _GLF_FUZZED(vec3(2701.3949, -8.7, 3.2)) : vec3(injectionSwitch.y, abs(1.0), 0.0)))), min(float(_GLF_IDENTITY(vec3(injectionSwitch.y, abs(1.0), 0.0), (false ? _GLF_FUZZED(vec3(2701.3949, -8.7, 3.2)) : vec3(injectionSwitch.y, abs(1.0), 0.0)))), float(_GLF_IDENTITY(vec3(injectionSwitch.y, abs(1.0), 0.0), (false ? _GLF_FUZZED(vec3(2701.3949, -8.7, 3.2)) : vec3(injectionSwitch.y, abs(1.0), 0.0)))))))))))))
                                    {
                                     if(_GLF_WRAPPED_IF_TRUE(true))
                                      {
                                       subgroupAll(false);
                                      }
                                     else
                                      {
                                      }
                                    }
                                   else
                                    {
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                       while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), (_GLF_WRAPPED_LOOP(false)) && true));
                      }
                     while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), (_GLF_WRAPPED_LOOP(false)) || false));
                    }
                  }
                 _GLF_IDENTITY(_GLF_IDENTITY(read = atomicLoad(buf[virtual_gid], 4, 64, 2), 0u ^ (_GLF_IDENTITY(read = atomicLoad(buf[virtual_gid], 4, 64, 2), 0u ^ (read = atomicLoad(buf[_GLF_IDENTITY(virtual_gid, (virtual_gid) >> 0u)], 4, _GLF_IDENTITY(64, (_GLF_IDENTITY(64, 0 | (64))) - _GLF_IDENTITY(0, _GLF_IDENTITY((_GLF_IDENTITY(0, _GLF_IDENTITY(clamp(0, 0, 0), (_GLF_IDENTITY(clamp(0, 0, 0), 0 ^ (clamp(0, 0, 0)))) * (0 ^ 1)))) ^ 0, ((_GLF_IDENTITY(0, _GLF_IDENTITY(clamp(0, 0, 0), (_GLF_IDENTITY(clamp(0, 0, 0), 0 ^ (clamp(0, 0, 0)))) * (0 ^ 1)))) ^ 0) >> (0 | 0)))), 2))))), (read = atomicLoad(buf[virtual_gid], 4, 64, 2)) / 1u);
                }
              }
            }
          }
         while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), _GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY(! _GLF_IDENTITY((_GLF_WRAPPED_LOOP(false)), _GLF_IDENTITY(bool(bool((_GLF_WRAPPED_LOOP(false)))), ! (! (bool(bool((_GLF_WRAPPED_LOOP(false)))))))), bool(bvec4(_GLF_IDENTITY(! (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) && true))), ! (! (! (_GLF_WRAPPED_LOOP(false))))), false, true, false)))), ! (! (_GLF_IDENTITY(! (_GLF_IDENTITY(! _GLF_IDENTITY((_GLF_WRAPPED_LOOP(false)), _GLF_IDENTITY(bool(bool((_GLF_WRAPPED_LOOP(false)))), ! (! (bool(bool((_GLF_WRAPPED_LOOP(false)))))))), bool(bvec4(_GLF_IDENTITY(! (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) && true))), ! (! (! (_GLF_WRAPPED_LOOP(false))))), false, true, false)))), ! (! (! (_GLF_IDENTITY(! _GLF_IDENTITY((_GLF_WRAPPED_LOOP(false)), _GLF_IDENTITY(_GLF_IDENTITY(bool(bool((_GLF_WRAPPED_LOOP(false)))), _GLF_IDENTITY(bool(bvec4(bool(bool((_GLF_WRAPPED_LOOP(false)))), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)), ! (_GLF_IDENTITY(! (bool(bvec4(bool(bool((_GLF_WRAPPED_LOOP(false)))), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))), bool(bvec4(! (bool(bvec4(bool(bool((_GLF_WRAPPED_LOOP(false)))), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))), false, true, false)))))), ! (! (bool(bool((_GLF_WRAPPED_LOOP(false)))))))), bool(bvec4(_GLF_IDENTITY(! (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) && true))), ! (! (_GLF_IDENTITY(! (_GLF_WRAPPED_LOOP(false)), (! (_GLF_WRAPPED_LOOP(false))) || false)))), false, true, false)))))))))), true && (! (_GLF_IDENTITY(! (_GLF_WRAPPED_LOOP(false)), bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_WRAPPED_LOOP(false)))), ! (! (! (_GLF_WRAPPED_LOOP(false))))), ! (! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (injectionSwitch.x < injectionSwitch.y) || false))) && (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), bool(bool(_GLF_WRAPPED_LOOP(false)))))), true && (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (injectionSwitch.x < injectionSwitch.y) || _GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (_GLF_IDENTITY(! (false), true && (! (false))))))))))) && (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), bool(bool(_GLF_WRAPPED_LOOP(false))))))))), ! (_GLF_IDENTITY(! (! _GLF_IDENTITY((_GLF_WRAPPED_LOOP(false)), ! (! ((_GLF_WRAPPED_LOOP(false)))))), ! (! (! (! (_GLF_WRAPPED_LOOP(false))))))))))), _GLF_IDENTITY(false, ! _GLF_IDENTITY((_GLF_IDENTITY(! (false), ! (! (! (false))))), ((_GLF_IDENTITY(! (false), ! (! (! (false)))))) || false)), true, false))))))));
        }
      }
    }
   else
    {
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 subgroupBarrier();
 atomicStore(checker[virtual_gid], read, _GLF_IDENTITY(4, max(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(4, _GLF_IDENTITY(0, max(_GLF_IDENTITY(0, max(_GLF_IDENTITY(0, int(ivec4(0, 0, 0, 1))), 0)), 0)) | (_GLF_IDENTITY(4, min(_GLF_IDENTITY(4, (_GLF_IDENTITY(4, _GLF_IDENTITY(clamp(4, 4, 4), clamp(_GLF_IDENTITY(_GLF_IDENTITY(clamp(4, 4, 4), max(_GLF_IDENTITY(clamp(4, 4, 4), (clamp(4, 4, 4)) | (clamp(4, 4, 4))), _GLF_IDENTITY(clamp(4, 4, 4), 0 ^ (clamp(4, 4, 4))))), (clamp(4, 4, 4)) + 0), clamp(4, 4, 4), clamp(4, 4, 4))))) - (0 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), 0 | (int(6)))))), _GLF_IDENTITY(4, (4) | _GLF_IDENTITY((4), ~ (~ ((4))))))))), (4) >> 0), _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(4, 0 + (4))), max(_GLF_IDENTITY((_GLF_IDENTITY(4, 0 + _GLF_IDENTITY((4), 1 * (_GLF_IDENTITY((4), ((4)) ^ 0))))), 0 ^ ((_GLF_IDENTITY(4, 0 + (4))))), (_GLF_IDENTITY(4, _GLF_IDENTITY(0, max(0, 0)) + (_GLF_IDENTITY(4, ~ (~ (4)))))))) | 0, _GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, (0) * 1))) | (_GLF_IDENTITY(_GLF_IDENTITY((4), 0 ^ ((4))) | 0, clamp(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(4, _GLF_IDENTITY((4), (_GLF_IDENTITY((4), (true ? (4) : _GLF_FUZZED(-31314)))) ^ 0) >> 0)), ((_GLF_IDENTITY(4, _GLF_IDENTITY((4), (_GLF_IDENTITY((_GLF_IDENTITY(4, clamp(4, _GLF_IDENTITY(4, clamp(4, 4, 4)), 4))), (true ? (4) : _GLF_FUZZED(-31314)))) ^ 0) >> 0))) | 0), 0 ^ (_GLF_IDENTITY((_GLF_IDENTITY(4, _GLF_IDENTITY((4), (_GLF_IDENTITY((4), (true ? (4) : _GLF_FUZZED(-31314)))) ^ 0) >> 0)), ((_GLF_IDENTITY(4, _GLF_IDENTITY((4), (_GLF_IDENTITY((4), (true ? (4) : _GLF_FUZZED(-31314)))) ^ 0) >> 0))) | 0))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(4, _GLF_IDENTITY((4), (_GLF_IDENTITY((4), (true ? (4) : _GLF_FUZZED(-31314)))) ^ 0) >> 0)), ((_GLF_IDENTITY(_GLF_IDENTITY(4, (4) | 0), _GLF_IDENTITY((4), (_GLF_IDENTITY((4), (true ? (4) : _GLF_FUZZED(-31314)))) ^ 0) >> 0))) | 0), 0 ^ (_GLF_IDENTITY((_GLF_IDENTITY(4, _GLF_IDENTITY((4), (_GLF_IDENTITY((4), (true ? (4) : _GLF_FUZZED(-31314)))) ^ 0) >> 0)), ((_GLF_IDENTITY(4, _GLF_IDENTITY((4), (_GLF_IDENTITY((4), (true ? (4) : _GLF_FUZZED(-31314)))) ^ 0) >> 0))) | 0))), (false ? _GLF_FUZZED(-83449) : _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(4, _GLF_IDENTITY((4), (_GLF_IDENTITY(_GLF_IDENTITY((4), (true ? (4) : _GLF_FUZZED(_GLF_IDENTITY(-31314, (true ? _GLF_IDENTITY(-31314, (true ? -31314 : _GLF_FUZZED(50726))) : _GLF_FUZZED(-77169)))))), (_GLF_IDENTITY((4), (true ? (4) : _GLF_FUZZED(-31314)))) | (_GLF_IDENTITY(_GLF_IDENTITY((4), (true ? (4) : _GLF_FUZZED(-31314))), 0 | (_GLF_IDENTITY(_GLF_IDENTITY((4), (true ? (4) : _GLF_FUZZED(-31314))), 0 ^ (_GLF_IDENTITY((4), (true ? (4) : _GLF_FUZZED(-31314)))))))))) ^ 0) >> 0)), ((_GLF_IDENTITY(4, _GLF_IDENTITY((4), (_GLF_IDENTITY((4), (true ? (4) : _GLF_FUZZED(-31314)))) ^ 0) >> 0))) | 0), 0 ^ (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(4, _GLF_IDENTITY((4), (_GLF_IDENTITY((4), (true ? (4) : _GLF_FUZZED(-31314)))) ^ 0) >> 0), (_GLF_IDENTITY(4, _GLF_IDENTITY(_GLF_IDENTITY((4), (_GLF_IDENTITY((4), (true ? (4) : _GLF_FUZZED(-31314)))) ^ 0), min(_GLF_IDENTITY(_GLF_IDENTITY((4), (_GLF_IDENTITY((4), (true ? (4) : _GLF_FUZZED(-31314)))) ^ 0), (_GLF_IDENTITY(_GLF_IDENTITY((4), (_GLF_IDENTITY((4), (true ? (4) : _GLF_FUZZED(-31314)))) ^ 0), (false ? _GLF_FUZZED(-84039) : _GLF_IDENTITY((4), (_GLF_IDENTITY((4), (true ? (4) : _GLF_FUZZED(-31314)))) ^ 0)))) + 0), _GLF_IDENTITY(_GLF_IDENTITY((4), (_GLF_IDENTITY((4), (true ? (4) : _GLF_FUZZED(-31314)))) ^ 0), int(ivec3(_GLF_IDENTITY((4), (_GLF_IDENTITY((4), (true ? (4) : _GLF_FUZZED(-31314)))) ^ 0), int(_GLF_ZERO(0.0, injectionSwitch.x)), 1))))) >> 0)) << 0)), ((_GLF_IDENTITY(4, _GLF_IDENTITY((4), (_GLF_IDENTITY(_GLF_IDENTITY((4), ((4)) | ((4))), (true ? (4) : _GLF_FUZZED(-31314)))) ^ 0) >> 0))) | 0))))), _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(4, _GLF_IDENTITY((4), (_GLF_IDENTITY((4), (true ? (4) : _GLF_FUZZED(-31314)))) ^ 0) >> 0)), ((_GLF_IDENTITY(_GLF_IDENTITY(4, _GLF_IDENTITY((4), (_GLF_IDENTITY((4), (true ? (4) : _GLF_FUZZED(-31314)))) ^ 0) >> 0), (_GLF_IDENTITY(4, _GLF_IDENTITY((4), (_GLF_IDENTITY((4), (true ? (4) : _GLF_FUZZED(-31314)))) ^ 0) >> 0)) << (0 | 0)))) | 0), 0 ^ (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(4, _GLF_IDENTITY((4), (_GLF_IDENTITY((4), (true ? (4) : _GLF_FUZZED(-31314)))) ^ 0) >> 0), _GLF_IDENTITY(int(ivec2(_GLF_IDENTITY(4, _GLF_IDENTITY((4), (_GLF_IDENTITY((4), (true ? (4) : _GLF_FUZZED(-31314)))) ^ 0) >> 0), 0)), (int(ivec2(_GLF_IDENTITY(4, _GLF_IDENTITY((4), (_GLF_IDENTITY((4), (true ? (4) : _GLF_FUZZED(-31314)))) ^ 0) >> 0), 0))) * 1))), ((_GLF_IDENTITY(4, _GLF_IDENTITY((4), (_GLF_IDENTITY((4), (true ? (4) : _GLF_FUZZED(-31314)))) ^ 0) >> 0))) | 0))), _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(4, _GLF_IDENTITY(_GLF_IDENTITY((4), (_GLF_IDENTITY((4), (true ? (4) : _GLF_FUZZED(-31314)))) ^ 0), (_GLF_IDENTITY((4), (_GLF_IDENTITY((4), (true ? (4) : _GLF_FUZZED(-31314)))) ^ 0)) >> 0) >> 0)), ((_GLF_IDENTITY(4, _GLF_IDENTITY((4), (_GLF_IDENTITY(_GLF_IDENTITY((4), ((4)) ^ 0), (true ? (4) : _GLF_FUZZED(-31314)))) ^ 0) >> 0))) | 0), 0 ^ (_GLF_IDENTITY((_GLF_IDENTITY(4, _GLF_IDENTITY((4), (_GLF_IDENTITY((4), (true ? (4) : _GLF_FUZZED(-31314)))) ^ 0) >> 0)), ((_GLF_IDENTITY(4, _GLF_IDENTITY((4), (_GLF_IDENTITY((4), (true ? (4) : _GLF_FUZZED(-31314)))) ^ 0) >> 0))) | 0))))) | _GLF_IDENTITY(0, (_GLF_IDENTITY(0, clamp(0, 0, _GLF_IDENTITY(_GLF_IDENTITY(0, (0) / 1), max(_GLF_IDENTITY(0, (0) / 1), _GLF_IDENTITY(0, (0) / 1)))))) ^ 0), (4) | 0, _GLF_IDENTITY((4), 0 ^ (_GLF_IDENTITY((4), min((4), (4))))) | 0))))), 4)), 64, 4);
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END
BUFFER checker DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected_checker DATA_TYPE uint32 SIZE 8388096 FILL 1

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 
  BIND BUFFER checker AS storage DESCRIPTOR_SET 0 BINDING 2 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT checker EQ_BUFFER expected_checker
