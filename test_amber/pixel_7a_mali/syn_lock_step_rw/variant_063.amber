#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460
struct _GLF_struct_15 {
 vec3 _f0;
} ;

struct _GLF_struct_14 {
 uvec3 _f0;
 mat3 _f1;
 mat3x2 _f2;
} ;

struct _GLF_struct_16 {
 ivec4 _f0;
 _GLF_struct_14 _f1;
 _GLF_struct_15 _f2;
} ;

struct _GLF_struct_12 {
 mat4 _f0;
 uvec2 _f1;
 ivec3 _f2;
 mat3x2 _f3;
} ;

struct _GLF_struct_13 {
 bvec3 _f0;
 _GLF_struct_12 _f1;
} ;

struct _GLF_struct_10 {
 int _f0;
 mat3x2 _f1;
 mat3x4 _f2;
 bool _f3;
 vec4 _f4;
} ;

struct _GLF_struct_9 {
 int _f0;
} ;

struct _GLF_struct_8 {
 bvec3 _f0;
 bvec3 _f1;
 int _f2;
 ivec4 _f3;
 bvec4 _f4;
 mat3 _f5;
} ;

struct _GLF_struct_7 {
 mat4x2 _f0;
 mat2x3 _f1;
 int _f2;
 ivec2 _f3;
} ;

struct _GLF_struct_11 {
 ivec4 _f0;
 _GLF_struct_7 _f1;
 _GLF_struct_8 _f2;
 bool _f3;
 _GLF_struct_9 _f4;
 _GLF_struct_10 _f5;
} ;

struct _GLF_struct_6 {
 uvec4 _f0;
 vec3 _f1;
} ;

struct _GLF_struct_17 {
 mat2 _f0;
 _GLF_struct_6 _f1;
 _GLF_struct_11 _f2;
 uint workgroup_size;
 _GLF_struct_13 _f3;
 _GLF_struct_16 _f4;
} ;

struct _GLF_struct_3 {
 mat4 _f0;
 bvec3 _f1;
 bvec3 _f2;
} ;

struct _GLF_struct_2 {
 bvec4 _f0;
} ;

struct _GLF_struct_4 {
 _GLF_struct_2 _f0;
 _GLF_struct_3 _f1;
} ;

struct _GLF_struct_1 {
 uint workgroup_base;
 bvec3 _f0;
} ;

struct _GLF_struct_5 {
 _GLF_struct_1 _f0;
 _GLF_struct_4 _f1;
 uvec4 _f2;
} ;

struct _GLF_struct_0 {
 uvec3 _f0;
 uint workgroup_id;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uvec4 GLF_merged4_0_1_13_1_1_11_2_1_17_3_1_12num_workgroupsubgroup_idsubgroup_local_idworkgroup_id;
 uint subgroup_id = gl_SubgroupID;
 GLF_merged4_0_1_13_1_1_11_2_1_17_3_1_12num_workgroupsubgroup_idsubgroup_local_idworkgroup_id.y = subgroup_id;
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 GLF_merged4_0_1_13_1_1_11_2_1_17_3_1_12num_workgroupsubgroup_idsubgroup_local_idworkgroup_id.z = subgroup_local_id;
 uint num_workgroup = gl_NumWorkGroups.x;
 GLF_merged4_0_1_13_1_1_11_2_1_17_3_1_12num_workgroupsubgroup_idsubgroup_local_idworkgroup_id.x = num_workgroup;
 _GLF_struct_17 _GLF_struct_replacement_17 = _GLF_struct_17(mat2(1.0), _GLF_struct_6(uvec4(1u), vec3(1.0)), _GLF_struct_11(ivec4(1), _GLF_struct_7(mat4x2(1.0), mat2x3(1.0), 1, ivec2(1)), _GLF_struct_8(bvec3(true), bvec3(true), 1, ivec4(1), bvec4(true), mat3(1.0)), true, _GLF_struct_9(1), _GLF_struct_10(1, mat3x2(1.0), mat3x4(1.0), true, vec4(1.0))), gl_WorkGroupSize.x, _GLF_struct_13(bvec3(true), _GLF_struct_12(mat4(1.0), uvec2(1u), ivec3(1), mat3x2(1.0))), _GLF_struct_16(ivec4(1), _GLF_struct_14(uvec3(1u), mat3(1.0), mat3x2(1.0)), _GLF_struct_15(vec3(1.0))));
 _GLF_struct_0 _GLF_struct_replacement_0 = _GLF_struct_0(uvec3(1u), gl_WorkGroupID.x);
 GLF_merged4_0_1_13_1_1_11_2_1_17_3_1_12num_workgroupsubgroup_idsubgroup_local_idworkgroup_id.w = _GLF_struct_replacement_0.workgroup_id;
 _GLF_struct_5 _GLF_struct_replacement_5 = _GLF_struct_5(_GLF_struct_1(_GLF_struct_replacement_17.workgroup_size * GLF_merged4_0_1_13_1_1_11_2_1_17_3_1_12num_workgroupsubgroup_idsubgroup_local_idworkgroup_id.w, bvec3(true)), _GLF_struct_4(_GLF_struct_2(bvec4(true)), _GLF_struct_3(mat4(1.0), bvec3(true), bvec3(true))), uvec4(1u));
 uint subgroup_base = GLF_merged4_0_1_13_1_1_11_2_1_17_3_1_12num_workgroupsubgroup_idsubgroup_local_idworkgroup_id.y * subgroup_size;
 uint virtual_gid = _GLF_struct_replacement_5._f0.workgroup_base + subgroup_base + GLF_merged4_0_1_13_1_1_11_2_1_17_3_1_12num_workgroupsubgroup_idsubgroup_local_idworkgroup_id.z;
 uint next_virtual_gid = _GLF_struct_replacement_5._f0.workgroup_base + subgroup_base + ((GLF_merged4_0_1_13_1_1_11_2_1_17_3_1_12num_workgroupsubgroup_idsubgroup_local_idworkgroup_id.z + 1) % subgroup_size);
 uint read = atomicLoad(buf[virtual_gid], 4, 64, 2);
 atomicStore(buf[next_virtual_gid], uint(1), 4, 64, 4);
 subgroupBarrier();
 atomicStore(checker[virtual_gid], read, 4, 64, 4);
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END
BUFFER checker DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected_checker DATA_TYPE uint32 SIZE 8388096 FILL 0

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 
  BIND BUFFER checker AS storage DESCRIPTOR_SET 0 BINDING 2 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT checker EQ_BUFFER expected_checker
