#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), true))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(false))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     return;
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - _GLF_IDENTITY(dot(vec4(1.0, 0.0, 1.0, 0.0), vec4(0.0, 1.0, 0.0, 1.0)), dot(vec4(1.0, 0.0, 1.0, 0.0), vec4(0.0, 1.0, 0.0, 1.0)))) > injectionSwitch.y)))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) && true)) || false)))
        barrier();
       return;
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      return;
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (true ? _GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(mat3(injectionSwitch.x, 1.0, 0.0, 0.0, 1.0, 0.0, _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), 0.0, 1.0)), clamp(float(mat3(injectionSwitch.x, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0)), float(mat3(injectionSwitch.x, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0)), float(mat3(injectionSwitch.x, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0))))) : _GLF_FUZZED(-52.41))))) > injectionSwitch.y))))))), true && (! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, bool(bvec3(true, false, true)))))) ? _GLF_IDENTITY(injectionSwitch.x, float(mat3(injectionSwitch.x, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0))) : _GLF_FUZZED(-52.41))), (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, bool(bvec3(true, false, true)))))) ? _GLF_IDENTITY(injectionSwitch.x, float(mat3(injectionSwitch.x, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0))) : _GLF_FUZZED(-52.41)))) / sqrt(1.0)), (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(true ? _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0), float(mat3(injectionSwitch.x, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(1.0, min(1.0, 1.0))))) : _GLF_FUZZED(-52.41), mix(float(true ? _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0), float(mat3(injectionSwitch.x, _GLF_IDENTITY(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), _GLF_IDENTITY(float(mat2x3(1.0, 0.0, 0.0, 1.0, abs(1.0), 1.0)), min(_GLF_IDENTITY(float(mat2x3(1.0, 0.0, 0.0, 1.0, abs(1.0), 1.0)), (float(mat2x3(1.0, 0.0, 0.0, 1.0, abs(1.0), 1.0))) / 1.0), float(mat2x3(1.0, 0.0, 0.0, 1.0, abs(1.0), 1.0))))), 0.0, 0.0, 1.0, _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), 0.0, 0.0, 1.0))) : _GLF_FUZZED(-52.41)), float(_GLF_FUZZED(9173.0780)), bool(false)))))) / _GLF_IDENTITY(1.0, (1.0) / 1.0)))) > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(vec3(injectionSwitch, sqrt(0.0))), vec2(mat4(vec2(vec3(injectionSwitch, sqrt(0.0))), 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, sin(0.0), 0.0, 0.0, 1.0, 0.0, 0.0, 0.0))))[1])).y))))))))))), true && (_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! _GLF_IDENTITY((! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (true ? _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, float(mat3(injectionSwitch.x, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0))), clamp(_GLF_IDENTITY(injectionSwitch.x, float(mat3(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)))).x, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0))), _GLF_IDENTITY(injectionSwitch.x, float(mat3(injectionSwitch.x, 1.0, _GLF_IDENTITY(0.0, clamp(_GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0, 0.0)), 0.0, 1.0, 0.0, 0.0, 0.0, 1.0))), _GLF_IDENTITY(injectionSwitch.x, float(mat3(injectionSwitch.x, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0))))), float(mat3x2(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, float(mat3(injectionSwitch.x, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0))), clamp(_GLF_IDENTITY(injectionSwitch.x, float(mat3(injectionSwitch.x, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0))), _GLF_IDENTITY(injectionSwitch.x, float(mat3(injectionSwitch.x, 1.0, 0.0, 0.0, _GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(atanh(148.901)))), 1.0)), 0.0, 0.0, 0.0, 1.0))), _GLF_IDENTITY(injectionSwitch.x, float(mat3(injectionSwitch.x, 1.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(0.0, (true ? _GLF_IDENTITY(0.0, min(0.0, 0.0)) : _GLF_FUZZED(clamp(acosh(-470.218), 54.60, -9.4)))), 0.0, 0.0, 1.0))))), 0.0, 1.0, 1.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y)))) : _GLF_FUZZED(-52.41))))) > injectionSwitch.y)))), bool(bool(_GLF_IDENTITY((! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (true ? _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, float(mat3(injectionSwitch.x, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0))), clamp(_GLF_IDENTITY(injectionSwitch.x, float(mat3(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)))).x, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0))), _GLF_IDENTITY(injectionSwitch.x, float(mat3(injectionSwitch.x, 1.0, _GLF_IDENTITY(0.0, clamp(_GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0, 0.0)), 0.0, 1.0, 0.0, 0.0, 0.0, 1.0))), _GLF_IDENTITY(injectionSwitch.x, float(mat3(injectionSwitch.x, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0))))), float(mat3x2(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, float(mat3(injectionSwitch.x, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0))), clamp(_GLF_IDENTITY(injectionSwitch.x, float(mat3(injectionSwitch.x, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0))), _GLF_IDENTITY(injectionSwitch.x, float(mat3(injectionSwitch.x, 1.0, 0.0, 0.0, _GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(atanh(148.901)))), 1.0)), 0.0, 0.0, 0.0, 1.0))), _GLF_IDENTITY(injectionSwitch.x, float(mat3(injectionSwitch.x, 1.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(0.0, (true ? _GLF_IDENTITY(0.0, min(0.0, 0.0)) : _GLF_FUZZED(clamp(acosh(-470.218), 54.60, -9.4)))), 0.0, 0.0, 1.0))))), 0.0, 1.0, 1.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y)))) : _GLF_FUZZED(-52.41))))) > injectionSwitch.y)))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && ((! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (true ? _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, float(mat3(injectionSwitch.x, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0))), clamp(_GLF_IDENTITY(injectionSwitch.x, float(mat3(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)))).x, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0))), _GLF_IDENTITY(injectionSwitch.x, float(mat3(injectionSwitch.x, 1.0, _GLF_IDENTITY(0.0, clamp(_GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0, 0.0)), 0.0, 1.0, 0.0, 0.0, 0.0, 1.0))), _GLF_IDENTITY(injectionSwitch.x, float(mat3(injectionSwitch.x, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0))))), float(mat3x2(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, float(mat3(injectionSwitch.x, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0))), clamp(_GLF_IDENTITY(injectionSwitch.x, float(mat3(injectionSwitch.x, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0))), _GLF_IDENTITY(injectionSwitch.x, float(mat3(injectionSwitch.x, 1.0, 0.0, 0.0, _GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(atanh(148.901)))), 1.0)), 0.0, 0.0, 0.0, 1.0))), _GLF_IDENTITY(injectionSwitch.x, float(mat3(injectionSwitch.x, 1.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(0.0, (true ? _GLF_IDENTITY(0.0, min(0.0, 0.0)) : _GLF_FUZZED(clamp(acosh(-470.218), 54.60, -9.4)))), 0.0, 0.0, 1.0))))), 0.0, 1.0, 1.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y)))) : _GLF_FUZZED(-52.41))))) > injectionSwitch.y)))))))))))), true && (! (_GLF_IDENTITY(! (_GLF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (false)), (_GLF_IDENTITY((! (false)), bool(_GLF_IDENTITY(bvec2((! (false)), true), bvec2(bvec2(bvec2((! (false)), true))))))) || false))) || false), (injectionSwitch.x > injectionSwitch.y))), ! (! (! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (true ? _GLF_IDENTITY(injectionSwitch.x, float(mat3(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0))) - sin(vec2(0.0, 0.0))).x, _GLF_IDENTITY(1.0, _GLF_IDENTITY(mix(float(_GLF_FUZZED(-2602.3005)), float(1.0), bool(true)), (mix(float(_GLF_FUZZED(-2602.3005)), float(1.0), bool(true))) - 0.0)), 0.0, _GLF_IDENTITY(0.0, 1.0 * (0.0)), 1.0, 0.0, 0.0, 0.0, 1.0))) : _GLF_FUZZED(-52.41))), (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(true ? _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0), float(mat3(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0))) / vec2(1.0, 1.0)).x, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0))) : _GLF_FUZZED(-52.41), mix(float(true ? _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0), float(mat3(injectionSwitch.x, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0))) : _GLF_FUZZED(-52.41)), float(_GLF_FUZZED(9173.0780)), bool(false))), (true ? _GLF_IDENTITY(true ? _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0), float(mat3(injectionSwitch.x, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, _GLF_IDENTITY(0.0, float(mat3x4(_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-4.3)), float(0.0), bool(true))), 0.0, 1.0, 1.0, 0.0, _GLF_IDENTITY(cos(0.0), min(cos(0.0), cos(0.0))), 1.0, 0.0, 1.0, 0.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y)))), 1.0))) : _GLF_FUZZED(-52.41), mix(float(true ? _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0), float(mat3(injectionSwitch.x, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0))) : _GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(-52.41, mix(float(-52.41), float(_GLF_FUZZED(-82.49)), bool(false)))), (true ? _GLF_IDENTITY(_GLF_FUZZED(-52.41), (_GLF_FUZZED(-52.41)) * 1.0) : _GLF_FUZZED((12.98 - 1967.3607))))), float(_GLF_IDENTITY(_GLF_FUZZED(9173.0780), 0.0 + (_GLF_FUZZED(9173.0780)))), bool(false))) : _GLF_FUZZED(9.8))), (_GLF_IDENTITY(true ? _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0), float(mat3(injectionSwitch.x, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0))) : _GLF_FUZZED(-52.41), mix(float(true ? _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY((injectionSwitch.x) - 0.0, clamp((injectionSwitch.x) - 0.0, (injectionSwitch.x) - 0.0, (injectionSwitch.x) - 0.0))), _GLF_IDENTITY(float(mat3(injectionSwitch.x, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0)), min(float(mat3(injectionSwitch.x, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0)), float(mat3(injectionSwitch.x, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0))))) : _GLF_FUZZED(-52.41)), _GLF_IDENTITY(float(_GLF_FUZZED(_GLF_IDENTITY(9173.0780, mix(float(9173.0780), float(_GLF_FUZZED(30.33)), bool(false))))), min(float(_GLF_FUZZED(9173.0780)), float(_GLF_FUZZED(9173.0780)))), bool(false)))) + 0.0)))) / 1.0))) > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(_GLF_ONE(1.0, injectionSwitch.y))).y))))))))))))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))))))
        return;
       return;
      }
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-7787.4127)), float(injectionSwitch.y), bool(true)))), float(_GLF_FUZZED(-26.97)), bool(false)))), (_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-7787.4127)), float(injectionSwitch.y), bool(true)))), float(_GLF_FUZZED(-26.97)), bool(false)))), false || (_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-7787.4127)), float(injectionSwitch.y), bool(true)))), float(_GLF_FUZZED(-26.97)), bool(false)))), ! (! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-7787.4127)), float(injectionSwitch.y), bool(true)))), float(_GLF_FUZZED(-26.97)), bool(false)))))))))) && true))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
      {
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, true && (false))) && true)))
      barrier();
     barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, false, _GLF_IDENTITY(false, _GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (! (false))))) || _GLF_IDENTITY((false), _GLF_IDENTITY(bool(bvec2((false), false)), ! (! (bool(bvec2((false), _GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, true && (false)))))))))))))))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(! (! (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x)) > injectionSwitch.y)), ! (! (_GLF_IDENTITY(! (! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y, false || (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, float(mat3x2(injectionSwitch.x, 1.0, 1.0, 0.0, sqrt(1.0), _GLF_IDENTITY(dot(vec4(0.0, 0.0, 1.0, exp(0.0)), vec4(1.0, 1.0, 0.0, 0.0)), dot(vec4(0.0, 0.0, 1.0, exp(0.0)), vec4(1.0, 1.0, 0.0, 0.0)))))))) > injectionSwitch.y)))), (! (! (_GLF_IDENTITY(injectionSwitch.x, 1.0 * (_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(4570.4644)), bool(false))))) > injectionSwitch.y))) || false)))))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(6.8))))), max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(6.8))))), float(float(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(6.8)))))))), _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(6.8)))))))))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y))))))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(mat3(injectionSwitch.x, 1.0, _GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(float(57040u))), bool(false))), 0.0, 1.0, 1.0, abs(1.0), 1.0, 0.0)), mix(_GLF_IDENTITY(float(_GLF_IDENTITY(float(mat3(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x, 1.0, 1.0, 0.0, 1.0, 1.0, abs(1.0), 1.0, 0.0)), min(float(mat3(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x, 1.0, 1.0, 0.0, 1.0, 1.0, abs(1.0), 1.0, 0.0)), _GLF_IDENTITY(float(mat3(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x, 1.0, 1.0, 0.0, 1.0, 1.0, abs(1.0), 1.0, 0.0)), mix(float(float(mat3(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x, 1.0, 1.0, 0.0, 1.0, 1.0, abs(1.0), 1.0, 0.0))), float(_GLF_FUZZED(7.7)), bool(false)))))), mix(float(_GLF_FUZZED(2.5)), float(float(_GLF_IDENTITY(float(mat3(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x, 1.0, 1.0, 0.0, 1.0, 1.0, abs(1.0), 1.0, 0.0)), min(float(mat3(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x, 1.0, 1.0, 0.0, 1.0, 1.0, abs(1.0), 1.0, 0.0)), _GLF_IDENTITY(float(mat3(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x, 1.0, 1.0, 0.0, 1.0, 1.0, abs(1.0), 1.0, 0.0)), mix(float(float(mat3(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x, 1.0, 1.0, 0.0, 1.0, 1.0, abs(1.0), 1.0, 0.0))), float(_GLF_FUZZED(7.7)), bool(false))))))), bool(true))), float(_GLF_FUZZED(4.6)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) > injectionSwitch.y)), _GLF_IDENTITY(_GLF_IDENTITY(true && (_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).x > injectionSwitch.y), bool(bool((_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).x > injectionSwitch.y)))))), ! (! (true && (_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).x > injectionSwitch.y), bool(bool((_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).x > injectionSwitch.y))))))))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(true && (_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).x > injectionSwitch.y), bool(bool((_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).x > injectionSwitch.y)))))), ! (! (true && (_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).x > injectionSwitch.y), bool(bool((_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).x > injectionSwitch.y))))))))), true && (_GLF_IDENTITY(true && (_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), vec2(mat3x4(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0))).x > injectionSwitch.y), bool(bool((_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).x > injectionSwitch.y)))))), ! (! (true && (_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).x > _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(dot(vec3(65.11, -1.3, 66.55), vec3(4113.0893, -0.2, -826.742))) : injectionSwitch.y))), bool(bool((_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).x > injectionSwitch.y)))))))))))))))))
      {
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) / vec2(1.0, 1.0), (_GLF_IDENTITY((injectionSwitch) / vec2(1.0, 1.0), mix(vec2(((injectionSwitch) / vec2(1.0, 1.0))[0], ((injectionSwitch) / vec2(1.0, 1.0))[1]), vec2(_GLF_FUZZED(-9135.9717), _GLF_FUZZED(-706.152)), bvec2(false, false)))) / vec2(1.0, 1.0))).y, clamp(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).y, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).y, mix(float(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)), (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0))) * mat2(1.0)).y), float(_GLF_FUZZED(17.39)), bool(false))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).y, (true ? _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).y, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).y) * 1.0) : _GLF_FUZZED(1.6)))))))), bool(bvec4(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true), false, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec2(false, true))), (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           return;
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(bvec2((injectionSwitch.x > injectionSwitch.y), true)), (bool(bvec2((injectionSwitch.x > injectionSwitch.y), true))) || false)))))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))).y))))
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
           return;
          }
         if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, bool(bvec4(false, true, false, true))))), (_GLF_IDENTITY(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, bool(bvec4(false, true, false, true))))), false || (_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, bool(bvec4(false, true, false, true)))))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) || (false))))
          barrier();
         barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
      }
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - _GLF_IDENTITY(_GLF_IDENTITY(vec2(0.0, 0.0), min(vec2(0.0, 0.0), vec2(0.0, 0.0))), vec2(vec2(vec2(0.0, 0.0))))).y, false || (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(-4.0)), bool(false))))), (true ? _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(-4.0)), bool(false))))), max(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(-4.0)), bool(false))))), _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(-4.0)), bool(false))))))) : _GLF_FUZZED(fma(-5.6, 25.08, -9.8)))), true && (injectionSwitch.x > injectionSwitch.y)))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - _GLF_IDENTITY(_GLF_IDENTITY(vec2(0.0, 0.0), min(vec2(0.0, 0.0), vec2(0.0, 0.0))), vec2(vec2(vec2(0.0, 0.0))))).y, false || (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(-4.0)), bool(false))))), (true ? _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(-4.0)), bool(false))))), max(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(-4.0)), bool(false))))), _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(-4.0)), bool(false))))))) : _GLF_FUZZED(fma(-5.6, 25.08, -9.8)))), true && (injectionSwitch.x > injectionSwitch.y)))))), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - _GLF_IDENTITY(_GLF_IDENTITY(vec2(0.0, 0.0), min(vec2(0.0, 0.0), vec2(0.0, 0.0))), vec2(vec2(vec2(0.0, 0.0))))).y, false || (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(-4.0)), bool(false))))), (true ? _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(-4.0)), bool(false))))), max(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(-4.0)), bool(false))))), _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(-4.0)), bool(false))))))) : _GLF_FUZZED(fma(-5.6, 25.08, -9.8)))), true && (injectionSwitch.x > injectionSwitch.y)))))), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - _GLF_IDENTITY(_GLF_IDENTITY(vec2(0.0, 0.0), min(vec2(0.0, 0.0), vec2(0.0, 0.0))), vec2(vec2(vec2(0.0, 0.0))))).y, false || (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(-4.0)), bool(false))))), (true ? _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(-4.0)), bool(false))))), max(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(-4.0)), bool(false))))), _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(-4.0)), bool(false))))))) : _GLF_FUZZED(fma(-5.6, 25.08, -9.8)))), true && (injectionSwitch.x > injectionSwitch.y))))))) && true))))), true && (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - _GLF_IDENTITY(_GLF_IDENTITY(vec2(0.0, 0.0), min(vec2(0.0, 0.0), vec2(0.0, 0.0))), vec2(vec2(vec2(0.0, 0.0))))).y, false || (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(-4.0)), bool(false))))), (true ? _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(-4.0)), bool(false))))), max(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(-4.0)), bool(false))))), _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(-4.0)), bool(false))))))) : _GLF_FUZZED(fma(-5.6, 25.08, -9.8)))), true && (injectionSwitch.x > injectionSwitch.y)))))), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - _GLF_IDENTITY(_GLF_IDENTITY(vec2(0.0, 0.0), min(vec2(0.0, 0.0), vec2(0.0, 0.0))), vec2(vec2(vec2(0.0, 0.0))))).y, false || (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(-4.0)), bool(false))))), (true ? _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(-4.0)), bool(false))))), max(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(-4.0)), bool(false))))), _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(-4.0)), bool(false))))))) : _GLF_FUZZED(fma(-5.6, 25.08, -9.8)))), true && (injectionSwitch.x > injectionSwitch.y)))))), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - _GLF_IDENTITY(_GLF_IDENTITY(vec2(0.0, 0.0), min(vec2(0.0, 0.0), vec2(0.0, 0.0))), vec2(vec2(vec2(0.0, 0.0))))).y, false || (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(-4.0)), bool(false))))), (true ? _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(-4.0)), bool(false))))), max(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(-4.0)), bool(false))))), _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(-4.0)), bool(false))))))) : _GLF_FUZZED(fma(-5.6, 25.08, -9.8)))), true && (injectionSwitch.x > injectionSwitch.y))))))) && true))))), (! (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - _GLF_IDENTITY(_GLF_IDENTITY(vec2(0.0, 0.0), min(vec2(0.0, 0.0), vec2(0.0, 0.0))), vec2(vec2(vec2(0.0, 0.0))))).y, false || (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(-4.0)), bool(false))))), (true ? _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(-4.0)), bool(false))))), max(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(-4.0)), bool(false))))), _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(-4.0)), bool(false))))))) : _GLF_FUZZED(fma(-5.6, 25.08, -9.8)))), true && (injectionSwitch.x > injectionSwitch.y)))))), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - _GLF_IDENTITY(_GLF_IDENTITY(vec2(0.0, 0.0), min(vec2(0.0, 0.0), vec2(0.0, 0.0))), vec2(vec2(vec2(0.0, 0.0))))).y, false || (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(-4.0)), bool(false))))), (true ? _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(-4.0)), bool(false))))), max(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(-4.0)), bool(false))))), _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(-4.0)), bool(false))))))) : _GLF_FUZZED(fma(-5.6, 25.08, -9.8)))), true && (injectionSwitch.x > injectionSwitch.y)))))), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - _GLF_IDENTITY(_GLF_IDENTITY(vec2(0.0, 0.0), min(vec2(0.0, 0.0), vec2(0.0, _GLF_IDENTITY(0.0, float(vec3(0.0, 1.0, 0.0)))))), vec2(vec2(vec2(0.0, 0.0))))).y, false || (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).x > _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(-4.0)), bool(false))))), clamp(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(-4.0)), bool(false))))), _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(-4.0)), bool(false))))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(-4.0)), bool(false))))), clamp(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(-4.0)), bool(false))))), _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(-4.0)), bool(false))))), _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(-4.0)), bool(false))))))))), (true ? _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(-4.0)), bool(false))))), (_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(-4.0)), bool(false)))))) + 0.0), max(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(-4.0)), bool(false))))), _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(-4.0)), bool(false))))))) : _GLF_FUZZED(fma(-5.6, 25.08, -9.8)))), true && (injectionSwitch.x > injectionSwitch.y))))))) && true)))))) && true)))))))
      barrier();
     return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
          barrier();
         barrier();
        }
       barrier();
      }
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).x, _GLF_IDENTITY(float(mat4x2(injectionSwitch.x, 1.0, 0.0, 1.0, 0.0, cos(0.0), abs(0.0), 0.0)), min(_GLF_IDENTITY(float(mat4x2(injectionSwitch.x, 1.0, 0.0, 1.0, 0.0, cos(0.0), abs(0.0), 0.0)), float(mat4(float(mat4x2(injectionSwitch.x, 1.0, 0.0, 1.0, 0.0, cos(0.0), abs(0.0), 0.0)), 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0))), float(mat4x2(injectionSwitch.x, 1.0, 0.0, 1.0, 0.0, cos(0.0), abs(0.0), 0.0))))) > injectionSwitch.y), ((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).x, _GLF_IDENTITY(float(mat4x2(injectionSwitch.x, 1.0, 0.0, 1.0, 0.0, cos(0.0), abs(0.0), 0.0)), min(_GLF_IDENTITY(float(mat4x2(injectionSwitch.x, 1.0, 0.0, 1.0, 0.0, cos(0.0), abs(0.0), 0.0)), float(mat4(float(mat4x2(injectionSwitch.x, 1.0, 0.0, 1.0, 0.0, cos(0.0), abs(0.0), 0.0)), 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0))), float(mat4x2(injectionSwitch.x, 1.0, 0.0, 1.0, 0.0, cos(0.0), abs(0.0), 0.0))))) > injectionSwitch.y)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))
  barrier();
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-617.037)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), injectionSwitch.x)) > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec2(false, _GLF_IDENTITY(_GLF_IDENTITY(true, bool(bvec2(true, true))), (_GLF_IDENTITY(true, bool(bvec2(true, true)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    return;
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, bool(bvec2(false, false)))))))
          barrier();
         return;
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false))))
          barrier();
         barrier();
        }
       return;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true))))
      barrier();
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).x > injectionSwitch.y), (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).x > injectionSwitch.y), ((_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).x > injectionSwitch.y)) && true)) || false))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     return;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false))))) && true)))))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     return;
    }
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(-9.5))) > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY((true ? injectionSwitch.x : _GLF_FUZZED(-9.5)), clamp((true ? injectionSwitch.x : _GLF_FUZZED(-9.5)), (true ? injectionSwitch.x : _GLF_FUZZED(-9.5)), (true ? injectionSwitch.x : _GLF_FUZZED(-9.5))))) > injectionSwitch.y))), bool(bool(! (_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(-9.5))) > injectionSwitch.y), ((_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(-9.5))) > injectionSwitch.y)) && true)), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(-9.5))) > injectionSwitch.y))), false || (! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(-9.5))) > injectionSwitch.y))))))))))))), _GLF_IDENTITY((_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(-9.5))), (_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(-9.5)))) + 0.0) > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y))) && true, bool(bvec4(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(-9.5))), (_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(-9.5)))) + 0.0), min(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(-9.5))), (_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(-9.5)))) + 0.0), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(-9.5))), (_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(-9.5)))) + 0.0), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(-9.5))), (_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(-9.5)))) + 0.0)) + 0.0))) > injectionSwitch.y)), true && (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(-9.5))), (_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(-9.5)))) + 0.0) > injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(-9.5))), (_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(-9.5)))) + 0.0) > injectionSwitch.y))))))) && true, ! (! ((_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(-9.5))), (_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(-9.5)))) + 0.0) > injectionSwitch.y))) && true))), true, false, false))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) && true), _GLF_IDENTITY(bool(bool(false)), (bool(_GLF_IDENTITY(bool(false), _GLF_IDENTITY(bool(bvec4(bool(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true)), false || (bool(bvec4(bool(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true))))))) && true))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
    }
   return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)), ! (! (bool(bvec4(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)))))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(false, true, true, true))), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(false, bool(bvec4(false, true, true, true))), false)), ! (! (bool(bvec2(_GLF_IDENTITY(false, bool(bvec4(false, true, true, true))), false)))))), ! (! (_GLF_IDENTITY(false, bool(bvec4(false, true, _GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, (true) && true))), true))))))) || false)))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false))
  barrier();
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)))).x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(false), ! _GLF_IDENTITY((! (_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(false, false || _GLF_IDENTITY((false), _GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))) || ((false)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, ! (! (false))) || ((false))), bool(bvec4(_GLF_IDENTITY(! (_GLF_IDENTITY(false, ! (! (false))) || ((false))), bool(bool(! (_GLF_IDENTITY(false, ! (! (false))) || ((false)))))), true, true, false))))))), true && (_GLF_IDENTITY(false, false || (false))))), (bool(false)) && true))), ((! (_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(false, false || _GLF_IDENTITY((false), _GLF_IDENTITY(false, ! (! (false))) || ((false)))), true && (_GLF_IDENTITY(false, false || (false))))), (bool(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(false, (false) || false))), ! (! (bool(bvec4(false, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(false, (false) || false))))))))) && true)))) && true))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(false), ! _GLF_IDENTITY((! (_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(false, false || _GLF_IDENTITY((false), _GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))) || ((false)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, ! (! (false))) || ((false))), bool(bvec4(_GLF_IDENTITY(! (_GLF_IDENTITY(false, ! (! (false))) || ((false))), bool(bool(! (_GLF_IDENTITY(false, ! (! (false))) || ((false)))))), true, true, false))))))), true && (_GLF_IDENTITY(false, false || (false))))), (bool(false)) && true))), ((! (_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(false, false || _GLF_IDENTITY((false), _GLF_IDENTITY(false, ! (! (false))) || ((false)))), true && (_GLF_IDENTITY(false, false || (false))))), (bool(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(false, (false) || false))), ! (! (bool(bvec4(false, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(false, (false) || false))))))))) && true)))) && true))), bool(bvec3(bool(_GLF_IDENTITY(bool(false), ! _GLF_IDENTITY((! (_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(false, false || _GLF_IDENTITY((false), _GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))) || ((false)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, ! (! (false))) || ((false))), bool(bvec4(_GLF_IDENTITY(! (_GLF_IDENTITY(false, ! (! (false))) || ((false))), bool(bool(! (_GLF_IDENTITY(false, ! (! (false))) || ((false)))))), true, true, false))))))), true && (_GLF_IDENTITY(false, false || (false))))), (bool(false)) && true))), ((! (_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(false, false || _GLF_IDENTITY((false), _GLF_IDENTITY(false, ! (! (false))) || ((false)))), true && (_GLF_IDENTITY(false, false || (false))))), (bool(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(false, (false) || false))), ! (! (bool(bvec4(false, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(false, (false) || false))))))))) && true)))) && true))), true, true)))), true && (! (_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(false), ! _GLF_IDENTITY((! (_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(false, false || _GLF_IDENTITY((false), _GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))) || ((false)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, ! (! (false))) || ((false))), bool(bvec4(_GLF_IDENTITY(! (_GLF_IDENTITY(false, ! (! (false))) || ((false))), bool(bool(! (_GLF_IDENTITY(false, ! (! (false))) || ((false)))))), true, true, false))))))), true && (_GLF_IDENTITY(false, false || (false))))), (bool(false)) && true))), ((! (_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(false, false || _GLF_IDENTITY((false), _GLF_IDENTITY(false, ! (! (false))) || ((false)))), true && (_GLF_IDENTITY(false, false || (false))))), (bool(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(false, (false) || false))), ! (! (bool(bvec4(false, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(false, (false) || false))))))))) && true)))) && true))), bool(bvec3(bool(_GLF_IDENTITY(bool(false), ! _GLF_IDENTITY((! (_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(false, false || _GLF_IDENTITY((false), _GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))) || ((false)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, ! (! (false))) || ((false))), bool(bvec4(_GLF_IDENTITY(! (_GLF_IDENTITY(false, ! (! (false))) || ((false))), bool(bool(! (_GLF_IDENTITY(false, ! (! (false))) || ((false)))))), true, true, false))))))), true && (_GLF_IDENTITY(false, false || (false))))), (bool(false)) && true))), ((! (_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(false, false || _GLF_IDENTITY((false), _GLF_IDENTITY(false, ! (! (false))) || ((false)))), true && (_GLF_IDENTITY(false, false || (false))))), (bool(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(false, (false) || false))), ! (! (bool(bvec4(false, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(false, (false) || false))))))))) && true)))) && true))), true, true))))))))))), ! (! _GLF_IDENTITY(((! (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), _GLF_IDENTITY(! (! (_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), true && (_GLF_IDENTITY(false, false || (false))))), (bool(false)) && true))), (! (! (_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), true && (_GLF_IDENTITY(false, false || (false))))), (bool(false)) && true)))) && true))))))), bool(bool(_GLF_IDENTITY(((! (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), _GLF_IDENTITY(! (! (_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), true && (_GLF_IDENTITY(false, false || (false))))), (bool(false)) && true))), (! (! (_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), true && (_GLF_IDENTITY(false, false || (false))))), (bool(false)) && true)))) && true))))))), (((! (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), _GLF_IDENTITY(! (! (_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), true && (_GLF_IDENTITY(false, false || (false))))), (bool(false)) && true))), (! (! (_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), true && (_GLF_IDENTITY(false, false || (false))))), (bool(false)) && true)))) && true)))))))) || false)))))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     return;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y)))))))
      barrier();
     return;
    }
   barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bool(bvec2(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec2(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(bvec4((injectionSwitch.x > injectionSwitch.y), false, false, true)), _GLF_IDENTITY(bool(bvec2(bool(bvec4((injectionSwitch.x > injectionSwitch.y), false, false, true)), true)), (bool(bvec2(bool(bvec4((injectionSwitch.x > injectionSwitch.y), false, false, true)), true))) && true))), true))), false))))))
    barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * exp(vec2(0.0, 0.0))).x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0)))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec4(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))), true, true, true))))))
        barrier();
       barrier();
      }
     barrier();
    }
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((false), (_GLF_IDENTITY((false), false || (_GLF_IDENTITY((false), ((false)) || false)))) && true) && true)))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, _GLF_IDENTITY(true && (false), bool(bvec4(_GLF_IDENTITY(true && (false), ! _GLF_IDENTITY((! (true && (false))), true && ((! (true && (false)))))), true, true, true)))))))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)) && true)))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])))).x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       barrier();
      }
     if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
      return;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   if(_GLF_DEAD(false))
    barrier();
   return;
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false)))))), bool(bvec4(_GLF_DEAD(false), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   if(_GLF_DEAD(false))
    barrier();
   return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(mat2(injectionSwitch.x, 1.0, exp(0.0), 1.0)), (float(mat2(injectionSwitch.x, 1.0, exp(0.0), 1.0))) / 1.0)) > injectionSwitch.y))))
    return;
   return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(mat3(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), 1.0, determinant(mat2(1.0, 0.0, 0.0, 1.0)), 1.0, 1.0, log(1.0), 1.0, abs(1.0)))))).y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), ! (! (! (_GLF_DEAD(false)))))))), true && (! (_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), ! (! (! (_GLF_DEAD(false)))))))))))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
   return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     barrier();
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     return;
    }
   barrier();
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y))), injectionSwitch)).x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec2(false, true)), (bool(bvec2(false, true))) && true), (_GLF_IDENTITY(bool(bvec2(false, true)), (bool(bvec2(false, true))) && true)) || false))))
  barrier();
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (false))))))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bool(false))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)))).y))))
  return;
 if(_GLF_DEAD(false))
  barrier();
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), ((injectionSwitch) * mat2(1.0)) * mat2(1.0))))).y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 uint workgroup_base = workgroup_size * workgroup_id;
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0) > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y))))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))
    barrier();
   if(_GLF_DEAD(false))
    return;
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(9.1, -8.6)))), _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)))).y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   barrier();
  }
 uint subgroup_base = _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (subgroup_id) ^ 0u), min(_GLF_IDENTITY(subgroup_id, (subgroup_id) ^ 0u), _GLF_IDENTITY(subgroup_id, (subgroup_id) ^ _GLF_IDENTITY(0u, max(0u, 0u))))) * subgroup_size;
 uint virtual_gid = _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, (workgroup_base) >> 0u), min(workgroup_base, workgroup_base)), (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, (workgroup_base) >> 0u), min(workgroup_base, workgroup_base))) ^ 0u) + subgroup_base + _GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY((subgroup_local_id), (true ? (_GLF_IDENTITY(subgroup_local_id, uint(_GLF_IDENTITY(uint(_GLF_IDENTITY(subgroup_local_id, 0u ^ (subgroup_local_id))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(workgroup_size) : uint(_GLF_IDENTITY(subgroup_local_id, 0u ^ (subgroup_local_id)))))))) : _GLF_FUZZED(workgroup_id))) / 1u);
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((_GLF_IDENTITY(false, bool(bvec3(false, _GLF_IDENTITY(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (injectionSwitch.x < injectionSwitch.y) && true))), bool(bool(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (injectionSwitch.x < injectionSwitch.y) && true)))))), false)))), bool(_GLF_IDENTITY(bvec2((_GLF_IDENTITY(false, bool(bvec3(false, _GLF_IDENTITY(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (injectionSwitch.x < injectionSwitch.y) && true))), bool(bool(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (injectionSwitch.x < injectionSwitch.y) && true)))))), false)))), true), bvec2(bvec2(bvec2((_GLF_IDENTITY(false, bool(bvec3(false, _GLF_IDENTITY(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (injectionSwitch.x < injectionSwitch.y) && true))), bool(bool(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (injectionSwitch.x < injectionSwitch.y) && true)))))), false)))), true)))))))), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x, mix(float(_GLF_FUZZED((-3.9 / vec4(81.98, -438.476, -4999.7526, -859.645).t))), float(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x), bool(true))), mix(float(_GLF_FUZZED(_GLF_IDENTITY(-781.619, mix(float(_GLF_FUZZED(-68.53)), float(_GLF_IDENTITY(_GLF_IDENTITY(-781.619, clamp(-781.619, -781.619, -781.619)), clamp(-781.619, -781.619, -781.619))), bool(true))))), float(injectionSwitch.x), bool(true))) > injectionSwitch.y), bool(bool((_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(_GLF_IDENTITY(-781.619, mix(float(_GLF_FUZZED(-68.53)), float(_GLF_IDENTITY(-781.619, clamp(-781.619, -781.619, -781.619))), _GLF_IDENTITY(bool(true), bool(_GLF_IDENTITY(bvec3(bool(true), true, true), bvec3(bvec4(bvec3(bool(true), true, true), true))))))))), float(injectionSwitch.x), bool(true))) > injectionSwitch.y)))))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     return;
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       return;
      }
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((false) || false, true && ((false) || false)))))
      barrier();
     return;
    }
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, (false) || false))), false)), false || (bool(bvec2(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, (false) || false))), false))))), _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(_GLF_IDENTITY(bvec3((injectionSwitch.x > injectionSwitch.y), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), bvec3(bvec4(bvec3((injectionSwitch.x > injectionSwitch.y), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), true)))))), bool(bvec4(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, (false) || false))), false)), false || (bool(bvec2(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, (false) || false))), false))))), _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(_GLF_IDENTITY(bvec3((injectionSwitch.x > injectionSwitch.y), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), bvec3(bvec4(bvec3((injectionSwitch.x > injectionSwitch.y), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), true)))))), bool(bvec4(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, (false) || false))), false)), false || (bool(bvec2(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, (false) || false))), false))))), _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(_GLF_IDENTITY(bvec3((injectionSwitch.x > injectionSwitch.y), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), bvec3(bvec4(bvec3((injectionSwitch.x > injectionSwitch.y), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), true)))))), true, true, false))), true, false, false)))))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY((false), ! (! ((false)))) || _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(5124.5737)), float(injectionSwitch.x), bool(true))) > injectionSwitch.y))), (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true), bool(_GLF_IDENTITY(bool(_GLF_DEAD(false)), (bool(_GLF_DEAD(false))) || false))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true), bool(bool(_GLF_DEAD(false))))) || false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(true, bool(bvec3(true, true, true))) && (false))))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-566.207) : injectionSwitch.y))))))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), bool(bvec2(bool(injectionSwitch.x > injectionSwitch.y), false)))))))))
      return;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   return;
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, 0.0 + (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)))) > injectionSwitch.y))))
    barrier();
   return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), bool(bool(_GLF_IDENTITY(bool(bool(false)), true && (bool(bool(false)))))))) || (_GLF_DEAD(false))), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(bool(false)), true && (bool(bool(false)))), (_GLF_IDENTITY(bool(bool(false)), true && (bool(bool(false))))) || false))))) || (_GLF_DEAD(false)))))))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 uint next_virtual_gid = _GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_base, (_GLF_IDENTITY(subgroup_base, ~ (~ (subgroup_base)))) | (subgroup_base)), _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec4(_GLF_IDENTITY(workgroup_base + subgroup_base, 0u + (workgroup_base + subgroup_base)), 0u, 0u, 0u), (uvec4(workgroup_base + subgroup_base, 0u, _GLF_IDENTITY(0u, (0u) - (0u << _GLF_IDENTITY(uint(4u), uint(4u)))), 0u)) | (uvec4(workgroup_base + subgroup_base, 0u, _GLF_IDENTITY(0u, ~ (~ (0u))), 0u)))), (uint(_GLF_IDENTITY(uvec4(workgroup_base + _GLF_IDENTITY(subgroup_base, (subgroup_base) | (subgroup_base)), 0u, 0u, _GLF_IDENTITY(_GLF_IDENTITY(0u, max(_GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, (0u) ^ uint(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), max(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)))))) - 0u), _GLF_IDENTITY(0u, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(0u, max(0u, 0u))), clamp(~ (_GLF_IDENTITY(0u, max(0u, 0u))), ~ (_GLF_IDENTITY(0u, max(_GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, _GLF_IDENTITY(~ (_GLF_IDENTITY(~ (0u), (~ (0u)) | (~ (0u)))), clamp(~ (_GLF_IDENTITY(~ (0u), (~ (0u)) | (~ (0u)))), ~ (_GLF_IDENTITY(~ (0u), (~ (0u)) | (~ (0u)))), ~ (_GLF_IDENTITY(~ (0u), (~ (0u)) | (~ (0u)))))))) | (_GLF_IDENTITY(0u, (0u) * 1u))), 0u))), ~ (_GLF_IDENTITY(0u, max(0u, 0u))))))))), min(0u, _GLF_IDENTITY(0u, _GLF_IDENTITY((0u) >> 0u, ((0u) >> 0u) - 0u))))), (uvec4(workgroup_base + subgroup_base, 0u, _GLF_IDENTITY(0u, (0u) << uint(_GLF_ZERO(0.0, injectionSwitch.x))), _GLF_IDENTITY(0u, min(0u, 0u)))) | (uvec4(workgroup_base + subgroup_base, 0u, 0u, _GLF_IDENTITY(0u, _GLF_IDENTITY(_GLF_IDENTITY(~ _GLF_IDENTITY((~ (0u)), max((~ (0u)), (~ (0u)))), _GLF_IDENTITY(uint(_GLF_IDENTITY(uint(~ _GLF_IDENTITY((~ (0u)), max((~ (0u)), (~ (0u))))), (uint(~ _GLF_IDENTITY((~ (0u)), max((~ (0u)), (~ (0u)))))) * 1u)), min(uint(_GLF_IDENTITY(uint(~ _GLF_IDENTITY((~ (0u)), max((~ (0u)), (~ (0u))))), (uint(~ _GLF_IDENTITY((~ (0u)), max((~ (0u)), (~ (0u)))))) * 1u)), uint(_GLF_IDENTITY(uint(~ _GLF_IDENTITY((~ (0u)), max((~ (0u)), (~ (0u))))), (uint(~ _GLF_IDENTITY((~ (0u)), max((~ (0u)), (~ (0u)))))) * 1u))))), (_GLF_IDENTITY(~ _GLF_IDENTITY((~ (0u)), ((~ (0u))) | 0u), uint(_GLF_IDENTITY(uvec2(~ _GLF_IDENTITY((~ (0u)), ((~ (0u))) | 0u), 0u), ~ (~ (uvec2(~ _GLF_IDENTITY((~ (0u)), ((~ (0u))) | 0u), 0u))))))) ^ 0u))))))) | (uint(_GLF_IDENTITY(_GLF_IDENTITY(uvec4(workgroup_base + subgroup_base, 0u, 0u, 0u), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED((_GLF_IDENTITY(uvec4(144146u, 192730u, 108828u, 133930u), _GLF_IDENTITY(clamp(uvec4(144146u, 192730u, 108828u, 133930u), _GLF_IDENTITY(_GLF_IDENTITY(uvec4(144146u, _GLF_IDENTITY(192730u, ~ (~ (192730u))), 108828u, _GLF_IDENTITY(133930u, (true ? _GLF_IDENTITY(133930u, min(133930u, 133930u)) : _GLF_FUZZED(subgroup_id)))), min(uvec4(144146u, _GLF_IDENTITY(192730u, ~ (~ (192730u))), 108828u, _GLF_IDENTITY(133930u, (true ? _GLF_IDENTITY(133930u, min(133930u, 133930u)) : _GLF_FUZZED(subgroup_id)))), uvec4(144146u, _GLF_IDENTITY(192730u, ~ (~ (192730u))), 108828u, _GLF_IDENTITY(133930u, (true ? _GLF_IDENTITY(133930u, min(133930u, 133930u)) : _GLF_FUZZED(subgroup_id)))))), uvec4(0u, 0u, 0u, 0u) ^ (uvec4(_GLF_IDENTITY(144146u, max(_GLF_IDENTITY(144146u, max(144146u, 144146u)), 144146u)), 192730u, 108828u, 133930u))), uvec4(_GLF_IDENTITY(144146u, uint(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (144146u)), 192730u, 108828u, 133930u)), ~ (_GLF_IDENTITY(~ (clamp(uvec4(144146u, 192730u, 108828u, 133930u), _GLF_IDENTITY(uvec4(144146u, _GLF_IDENTITY(192730u, ~ (~ (192730u))), 108828u, _GLF_IDENTITY(133930u, (true ? _GLF_IDENTITY(133930u, min(133930u, 133930u)) : _GLF_FUZZED(subgroup_id)))), uvec4(0u, 0u, 0u, 0u) ^ (uvec4(_GLF_IDENTITY(144146u, max(_GLF_IDENTITY(144146u, max(144146u, 144146u)), 144146u)), 192730u, 108828u, 133930u))), uvec4(_GLF_IDENTITY(144146u, uint(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), clamp(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)))) ^ (144146u)), 192730u, 108828u, 133930u))), (~ (clamp(uvec4(144146u, 192730u, 108828u, 133930u), _GLF_IDENTITY(uvec4(144146u, _GLF_IDENTITY(192730u, ~ (~ (192730u))), 108828u, _GLF_IDENTITY(133930u, (true ? _GLF_IDENTITY(133930u, min(133930u, 133930u)) : _GLF_FUZZED(subgroup_id)))), uvec4(0u, 0u, 0u, 0u) ^ (uvec4(_GLF_IDENTITY(144146u, max(_GLF_IDENTITY(144146u, max(144146u, 144146u)), _GLF_IDENTITY(144146u, max(144146u, 144146u)))), 192730u, 108828u, 133930u))), uvec4(_GLF_IDENTITY(144146u, uint(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(144146u, uint(uvec3(144146u, 1u, (1u ^ 1u)))))), 192730u, 108828u, 133930u)))) | (~ (clamp(uvec4(144146u, 192730u, 108828u, 133930u), _GLF_IDENTITY(uvec4(144146u, _GLF_IDENTITY(192730u, ~ (~ (192730u))), 108828u, _GLF_IDENTITY(_GLF_IDENTITY(133930u, (true ? _GLF_IDENTITY(133930u, min(133930u, 133930u)) : _GLF_FUZZED(subgroup_id))), uint(uint(_GLF_IDENTITY(133930u, (true ? _GLF_IDENTITY(133930u, min(133930u, 133930u)) : _GLF_FUZZED(subgroup_id))))))), uvec4(0u, 0u, 0u, 0u) ^ (uvec4(_GLF_IDENTITY(144146u, max(_GLF_IDENTITY(144146u, max(144146u, 144146u)), 144146u)), 192730u, 108828u, 133930u))), uvec4(_GLF_IDENTITY(144146u, uint(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (144146u)), 192730u, 108828u, 133930u)))))))) * subgroup_id)) : _GLF_IDENTITY(_GLF_IDENTITY(uvec4(workgroup_base + subgroup_base, 0u, 0u, 0u), min(uvec4(workgroup_base + subgroup_base, 0u, 0u, 0u), uvec4(workgroup_base + subgroup_base, 0u, 0u, 0u))), clamp(_GLF_IDENTITY(uvec4(workgroup_base + subgroup_base, 0u, 0u, 0u), min(uvec4(workgroup_base + subgroup_base, 0u, 0u, 0u), uvec4(workgroup_base + subgroup_base, 0u, 0u, 0u))), _GLF_IDENTITY(_GLF_IDENTITY(uvec4(workgroup_base + subgroup_base, 0u, 0u, 0u), min(uvec4(workgroup_base + subgroup_base, 0u, 0u, 0u), uvec4(workgroup_base + subgroup_base, 0u, 0u, 0u))), (_GLF_IDENTITY(uvec4(workgroup_base + subgroup_base, 0u, 0u, 0u), min(uvec4(workgroup_base + subgroup_base, 0u, 0u, 0u), uvec4(workgroup_base + subgroup_base, 0u, 0u, 0u)))) | (_GLF_IDENTITY(uvec4(workgroup_base + subgroup_base, 0u, 0u, 0u), min(uvec4(workgroup_base + subgroup_base, 0u, 0u, 0u), uvec4(workgroup_base + subgroup_base, 0u, 0u, 0u))))), _GLF_IDENTITY(uvec4(_GLF_IDENTITY(workgroup_base, (true ? workgroup_base : _GLF_FUZZED(atomicAnd(subgroup_id, num_workgroup)))) + subgroup_base, 0u, 0u, 0u), min(uvec4(workgroup_base + subgroup_base, 0u, 0u, 0u), uvec4(workgroup_base + subgroup_base, 0u, 0u, 0u))))))), (uvec4(workgroup_base + _GLF_IDENTITY(subgroup_base, 0u | (subgroup_base)), 0u, 0u, 0u)) | _GLF_IDENTITY((_GLF_IDENTITY(uvec4(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + subgroup_base, max(workgroup_base + subgroup_base, workgroup_base + subgroup_base)), (_GLF_IDENTITY(workgroup_base + subgroup_base, (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + subgroup_base, max(_GLF_IDENTITY(workgroup_base + subgroup_base, (workgroup_base + subgroup_base) | (_GLF_IDENTITY(workgroup_base + subgroup_base, (true ? workgroup_base + subgroup_base : _GLF_FUZZED(subgroup_base))))), workgroup_base + subgroup_base)), min(workgroup_base + subgroup_base, _GLF_IDENTITY(workgroup_base + subgroup_base, (_GLF_IDENTITY(workgroup_base, (false ? _GLF_FUZZED(subgroup_local_id) : workgroup_base)) + subgroup_base) | (workgroup_base + subgroup_base))))) - 0u)) / 1u), 0u, 0u, _GLF_IDENTITY(0u, (0u) ^ 0u)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(uvec4(133880u, 1111u, 109927u, 7338u)) : uvec4(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + subgroup_base, max(workgroup_base + subgroup_base, workgroup_base + subgroup_base)), (_GLF_IDENTITY(workgroup_base + subgroup_base, (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + subgroup_base, max(_GLF_IDENTITY(workgroup_base + subgroup_base, (workgroup_base + subgroup_base) | (_GLF_IDENTITY(workgroup_base + subgroup_base, (true ? workgroup_base + subgroup_base : _GLF_FUZZED(subgroup_base))))), workgroup_base + subgroup_base)), min(workgroup_base + subgroup_base, _GLF_IDENTITY(workgroup_base + subgroup_base, (_GLF_IDENTITY(workgroup_base, (false ? _GLF_FUZZED(subgroup_local_id) : workgroup_base)) + subgroup_base) | (workgroup_base + subgroup_base))))) - 0u)) / 1u), 0u, 0u, _GLF_IDENTITY(0u, (0u) ^ 0u))))), ((uvec4(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + subgroup_base, max(workgroup_base + subgroup_base, workgroup_base + subgroup_base)), (_GLF_IDENTITY(workgroup_base + subgroup_base, (_GLF_IDENTITY(workgroup_base + subgroup_base, min(workgroup_base + subgroup_base, _GLF_IDENTITY(workgroup_base + subgroup_base, (workgroup_base + subgroup_base) | (workgroup_base + subgroup_base))))) - 0u)) / 1u), 0u, 0u, _GLF_IDENTITY(0u, (0u) ^ 0u)))) | (uvec4(0u, 0u, 0u, 0u) & uvec4(165494u, 88705u, 41113u, 185193u)))))))) + ((subgroup_local_id + 1) % subgroup_size);
 if(_GLF_DEAD(false))
  return;
 uint read = _GLF_IDENTITY(atomicLoad(buf[_GLF_IDENTITY(virtual_gid, clamp(virtual_gid, _GLF_IDENTITY(virtual_gid, (virtual_gid) + 0u), virtual_gid))], 4, 64, _GLF_IDENTITY(2, (2) << int(_GLF_ZERO(0.0, injectionSwitch.x)))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(atomicLoad(buf[virtual_gid], 4, 64, 2), min(atomicLoad(buf[_GLF_IDENTITY(virtual_gid, (virtual_gid) << 0u)], 4, 64, 2), atomicLoad(buf[_GLF_IDENTITY(virtual_gid, (_GLF_IDENTITY(virtual_gid, max(virtual_gid, virtual_gid))) - 0u)], 4, 64, 2))), uint(uvec4(_GLF_IDENTITY(_GLF_IDENTITY(atomicLoad(buf[virtual_gid], 4, 64, 2), min(atomicLoad(buf[virtual_gid], 4, 64, 2), atomicLoad(buf[virtual_gid], 4, 64, 2))), max(_GLF_IDENTITY(atomicLoad(buf[virtual_gid], 4, 64, 2), min(atomicLoad(buf[virtual_gid], 4, 64, 2), atomicLoad(buf[virtual_gid], 4, 64, 2))), _GLF_IDENTITY(_GLF_IDENTITY(atomicLoad(_GLF_IDENTITY(buf[virtual_gid], min(buf[virtual_gid], _GLF_IDENTITY(buf[virtual_gid], max(buf[virtual_gid], buf[virtual_gid])))), 4, 64, 2), (_GLF_IDENTITY(atomicLoad(_GLF_IDENTITY(buf[virtual_gid], min(buf[virtual_gid], _GLF_IDENTITY(buf[virtual_gid], max(buf[virtual_gid], _GLF_IDENTITY(buf[virtual_gid], (_GLF_IDENTITY(buf[virtual_gid], uint(uvec2(buf[virtual_gid], 0u)))) ^ 0u))))), 4, 64, 2), (atomicLoad(_GLF_IDENTITY(buf[virtual_gid], min(buf[virtual_gid], _GLF_IDENTITY(buf[virtual_gid], max(buf[virtual_gid], buf[virtual_gid])))), 4, 64, 2)) - 0u)) | (_GLF_IDENTITY(atomicLoad(_GLF_IDENTITY(buf[virtual_gid], min(buf[virtual_gid], _GLF_IDENTITY(buf[virtual_gid], max(buf[virtual_gid], buf[virtual_gid])))), 4, 64, 2), min(atomicLoad(_GLF_IDENTITY(buf[virtual_gid], min(buf[virtual_gid], _GLF_IDENTITY(_GLF_IDENTITY(buf[virtual_gid], clamp(buf[virtual_gid], buf[virtual_gid], buf[virtual_gid])), _GLF_IDENTITY(max(buf[virtual_gid], buf[virtual_gid]), (max(buf[virtual_gid], buf[virtual_gid])) / 1u)))), 4, 64, 2), atomicLoad(_GLF_IDENTITY(buf[virtual_gid], min(buf[virtual_gid], _GLF_IDENTITY(buf[virtual_gid], max(buf[virtual_gid], buf[virtual_gid])))), 4, 64, 2))))), _GLF_IDENTITY(min(atomicLoad(buf[virtual_gid], 4, 64, 2), atomicLoad(buf[virtual_gid], 4, 64, 2)), (min(atomicLoad(_GLF_IDENTITY(buf[virtual_gid], min(buf[virtual_gid], buf[virtual_gid])), 4, 64, 2), atomicLoad(buf[virtual_gid], 4, 64, 2))) / 1u)))), 1u, 1u, 1u))), atomicLoad(buf[_GLF_IDENTITY(virtual_gid, 0u ^ (virtual_gid))], 4, 64, _GLF_IDENTITY(2, (2) << 0)), atomicLoad(buf[virtual_gid], 4, _GLF_IDENTITY(64, max(64, 64)), 2)));
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(7.4)), bool(false)))))))
  return;
 if(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, ~ (~ (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) - 0u)))) % 2), ~ (~ ((_GLF_IDENTITY(subgroup_local_id, ~ (~ (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) - 0u)))) % 2)))) == 0, ! _GLF_IDENTITY((! ((_GLF_IDENTITY(subgroup_local_id % _GLF_IDENTITY(2, int(int(2))), ~ (~ (_GLF_IDENTITY(subgroup_local_id % _GLF_IDENTITY(2, int(int(2))), uint(uvec2(subgroup_local_id % _GLF_IDENTITY(2, int(int(2))), 0u))))))) == 0)), _GLF_IDENTITY(bool(bvec2((! ((subgroup_local_id % 2) == 0)), true)), (bool(bvec2((! ((subgroup_local_id % 2) == 0)), _GLF_IDENTITY(true, (_GLF_IDENTITY(true, ! (! (true)))) || false)))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_DEAD(false), true, true))), false, true, false)))) && true))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(! (false), bool(bvec2(! (false), false))), true && (_GLF_IDENTITY(! (false), ! (! (_GLF_IDENTITY(! (false), _GLF_IDENTITY((! (false)) || false, ((! (false)) || false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))), bool(bvec4((_GLF_IDENTITY(! _GLF_IDENTITY((false), (_GLF_IDENTITY((false), ! (! ((false))))) && true), true && (_GLF_IDENTITY(! (false), ! (! (_GLF_IDENTITY(! (false), (! (false)) || false))))))), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))))))
    return;
   subgroupAll(false);
   atomicStore(buf[next_virtual_gid], _GLF_IDENTITY(uint(1), (uint(1)) ^ 0u), 4, _GLF_IDENTITY(64, (_GLF_IDENTITY(64, (_GLF_IDENTITY(64, int(int(_GLF_IDENTITY(64, min(64, 64)))))) - 0)) >> 0), _GLF_IDENTITY(4, (4) / 1));
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
       if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
        barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, true && (false))) && true)))
        return;
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(max(min(injectionSwitch, injectionSwitch), vec2(3.9, 4.1))) : injectionSwitch)).y))))
            barrier();
           barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         return;
        }
       if(_GLF_DEAD(false))
        return;
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(3.8)), float(injectionSwitch.y), bool(true)))))))
        barrier();
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, true && (false))))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
      barrier();
     return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1]))) / vec2(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y))).x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) || false), (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true)))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     return;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   subgroupAll(false);
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(_GLF_IDENTITY(bvec2(injectionSwitch.x > injectionSwitch.y, false), bvec2(bvec3(_GLF_IDENTITY(bvec2(injectionSwitch.x > injectionSwitch.y, false), bvec2(bvec3(bvec2(injectionSwitch.x > injectionSwitch.y, false), false))), false)))))))))
      barrier();
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, _GLF_IDENTITY(true, (_GLF_IDENTITY(true, (true) && true)) && true))))))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      return;
     return;
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   atomicStore(buf[next_virtual_gid], uint(1), 4, 64, 4);
   if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY((_GLF_IDENTITY(false, ! (! (false)))), ! (! ((_GLF_IDENTITY(false, ! (! (false))))))) && _GLF_IDENTITY(true, ! (! (true)))), false || (false))), bool(bvec2(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), bool(bvec2((false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))) && _GLF_IDENTITY(true, ! (! _GLF_IDENTITY((true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && ((true)))))), false || (false))), false))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY((_GLF_IDENTITY(false, ! (! (false)))), ! (! ((_GLF_IDENTITY(false, ! (! (false))))))) && _GLF_IDENTITY(true, ! (! (true)))), false || (false))), bool(bvec2(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), bool(bvec2((false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))) && _GLF_IDENTITY(true, ! (! _GLF_IDENTITY((true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && ((true)))))), false || (false))), false))), false || (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY((_GLF_IDENTITY(false, ! (! (false)))), ! (! ((_GLF_IDENTITY(false, ! (! (false))))))) && _GLF_IDENTITY(true, ! (! (true)))), false || (false))), bool(bvec2(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), bool(bvec2((false), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(_GLF_IDENTITY(bvec3(injectionSwitch.x > injectionSwitch.y, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec3(bvec4(bvec3(injectionSwitch.x > injectionSwitch.y, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false))))))))))))) && _GLF_IDENTITY(true, ! (! _GLF_IDENTITY((true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && ((true)))))), _GLF_IDENTITY(false || (false), (_GLF_IDENTITY(false || (false), ! (! (false || (false))))) || false))), false)))))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          return;
         barrier();
        }
       barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))))))
          barrier();
         barrier();
        }
      }
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bool(false)))) && true), false || (false)), bool(bvec4(_GLF_IDENTITY(false, false || (false)), true, false, true))), false || (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), bool(bvec2(_GLF_IDENTITY(false, false || (false)), true))), bool(bvec4(_GLF_IDENTITY(false, false || (false)), true, _GLF_IDENTITY(false, ! (! (false))), true)))))))
        barrier();
       barrier();
      }
     barrier();
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-0.9, 92.88)) : injectionSwitch)).x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         return;
        }
       barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, bool(bvec3(false, true, false))))))), (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x > injectionSwitch.y))))
    return;
   return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   return;
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))), (_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false))))) || false))
  {
   if(_GLF_DEAD(false))
    barrier();
   return;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))), ! (! (! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))))))))
  barrier();
 subgroupBarrier();
 if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), false || _GLF_IDENTITY((false), false || ((false))))), true && (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), false || _GLF_IDENTITY((false), false || ((false))))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), false || _GLF_IDENTITY((false), false || ((false))))), ! (! (_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), _GLF_IDENTITY(false, bool(bvec3(false, true, true))) || _GLF_IDENTITY((false), false || ((false))))))))) || false))), (_GLF_DEAD(_GLF_IDENTITY(false, false || (false)))) || _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(sqrt(vec2(1.0, 1.0)) * (injectionSwitch), (_GLF_IDENTITY(sqrt(vec2(1.0, 1.0)) * (injectionSwitch), (true ? sqrt(vec2(1.0, 1.0)) * (injectionSwitch) : _GLF_FUZZED(injectionSwitch)))) + vec2(0.0, 0.0))).y))))
  barrier();
 atomicStore(buf[virtual_gid], read, 4, 64, 4);
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    barrier();
   barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   return;
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END
BUFFER checker DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected_checker DATA_TYPE uint32 SIZE 8388096 FILL 0

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 
  BIND BUFFER checker AS storage DESCRIPTOR_SET 0 BINDING 2 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT checker EQ_BUFFER expected_checker
