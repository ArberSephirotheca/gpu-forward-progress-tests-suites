#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_38 {
 float _f0;
 int _f1;
 mat3x2 _f2;
 vec3 _f3;
 mat2 _f4;
 mat4 _f5;
 mat4x2 _f6;
} ;

struct _GLF_struct_39 {
 mat2x4 _f0;
 mat3x4 _f1;
 vec3 _f2;
 _GLF_struct_38 _f3;
} ;

struct _GLF_struct_37 {
 ivec3 _f0;
 vec4 _f1;
} ;

struct _GLF_struct_35 {
 int _f0;
} ;

struct _GLF_struct_34 {
 uvec2 _f0;
 bvec3 _f1;
 uint _f2;
 int _f3;
 mat4x2 _f4;
} ;

struct _GLF_struct_33 {
 ivec3 _f0;
} ;

struct _GLF_struct_36 {
 uvec4 _f0;
 _GLF_struct_33 _f1;
 _GLF_struct_34 _f2;
 _GLF_struct_35 _f3;
} ;

struct _GLF_struct_40 {
 _GLF_struct_36 _f0;
 mat4 _f1;
 uint subgroup_id;
 mat4x2 _f2;
 _GLF_struct_37 _f3;
 _GLF_struct_39 _f4;
} ;

struct _GLF_struct_32 {
 uint read;
 vec3 _f0;
 uvec4 _f1;
} ;

struct _GLF_struct_30 {
 mat4x2 _f0;
 mat4x3 _f1;
 mat3 _f2;
} ;

struct _GLF_struct_28 {
 bvec3 _f0;
 vec2 _f1;
} ;

struct _GLF_struct_27 {
 mat2 _f0;
} ;

struct _GLF_struct_29 {
 ivec2 _f0;
 _GLF_struct_27 _f1;
 _GLF_struct_28 _f2;
} ;

struct _GLF_struct_25 {
 vec3 _f0;
 uvec4 _f1;
 mat4 _f2;
} ;

struct _GLF_struct_24 {
 mat3 _f0;
} ;

struct _GLF_struct_23 {
 int _f0;
 vec4 _f1;
 mat3x4 _f2;
 uint _f3;
 mat2x3 _f4;
} ;

struct _GLF_struct_22 {
 bvec3 _f0;
} ;

struct _GLF_struct_26 {
 _GLF_struct_22 _f0;
 uvec4 _f1;
 _GLF_struct_23 _f2;
 _GLF_struct_24 _f3;
 _GLF_struct_25 _f4;
 int _f5;
} ;

struct _GLF_struct_21 {
 mat3x4 _f0;
 vec3 _f1;
} ;

struct _GLF_struct_31 {
 bvec2 _f0;
 uint workgroup_id;
 _GLF_struct_21 _f1;
 _GLF_struct_26 _f2;
 _GLF_struct_29 _f3;
 _GLF_struct_30 _f4;
} ;

struct _GLF_struct_18 {
 mat2 _f0;
 ivec2 _f1;
} ;

struct _GLF_struct_17 {
 uvec2 _f0;
 float _f1;
 mat3x4 _f2;
} ;

struct _GLF_struct_16 {
 float _f0;
 mat2x4 _f1;
 mat3x4 _f2;
} ;

struct _GLF_struct_15 {
 uvec3 _f0;
 mat4x3 _f1;
 bvec3 _f2;
 bvec2 _f3;
 uvec4 _f4;
 mat4x2 _f5;
 ivec2 _f6;
} ;

struct _GLF_struct_19 {
 _GLF_struct_15 _f0;
 _GLF_struct_16 _f1;
 _GLF_struct_17 _f2;
 _GLF_struct_18 _f3;
} ;

struct _GLF_struct_14 {
 mat3x2 _f0;
 mat4 _f1;
} ;

struct _GLF_struct_20 {
 _GLF_struct_14 _f0;
 uint _f1;
 mat4x2 _f2;
 uint subgroup_local_id;
 vec2 _f3;
 _GLF_struct_19 _f4;
} ;

struct _GLF_struct_12 {
 bvec4 _f0;
} ;

struct _GLF_struct_10 {
 float _f0;
 mat3 _f1;
 mat2x4 _f2;
} ;

struct _GLF_struct_9 {
 mat3x2 _f0;
 int _f1;
 bvec3 _f2;
} ;

struct _GLF_struct_8 {
 mat4x3 _f0;
 bool _f1;
 ivec4 _f2;
} ;

struct _GLF_struct_11 {
 _GLF_struct_8 _f0;
 _GLF_struct_9 _f1;
 _GLF_struct_10 _f2;
 bvec4 _f3;
 mat4 _f4;
 mat2x4 _f5;
} ;

struct _GLF_struct_13 {
 uint subgroup_size;
 mat4x3 _f0;
 _GLF_struct_11 _f1;
 _GLF_struct_12 _f2;
 ivec3 _f3;
} ;

struct _GLF_struct_5 {
 ivec4 _f0;
 vec4 _f1;
 mat4 _f2;
} ;

struct _GLF_struct_4 {
 int _f0;
 mat4x3 _f1;
 mat3 _f2;
 mat2 _f3;
 mat4 _f4;
 mat3x4 _f5;
 int _f6;
} ;

struct _GLF_struct_6 {
 _GLF_struct_4 _f0;
 int _f1;
 _GLF_struct_5 _f2;
 vec4 _f3;
 mat2 _f4;
} ;

struct _GLF_struct_2 {
 mat4x2 _f0;
 vec2 _f1;
} ;

struct _GLF_struct_1 {
 ivec4 _f0;
 mat4 _f1;
 bvec4 _f2;
 mat2 _f3;
 mat3x2 _f4;
} ;

struct _GLF_struct_0 {
 mat3x4 _f0;
 bool _f1;
 mat3x2 _f2;
} ;

struct _GLF_struct_3 {
 _GLF_struct_0 _f0;
 bvec3 _f1;
 _GLF_struct_1 _f2;
 _GLF_struct_2 _f3;
 bvec2 _f4;
} ;

struct _GLF_struct_7 {
 uint virtual_gid;
 _GLF_struct_3 _f0;
 float _f1;
 ivec3 _f2;
 _GLF_struct_6 _f3;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(false))
  barrier();
 _GLF_struct_40 _GLF_struct_replacement_40 = _GLF_struct_40(_GLF_struct_36(uvec4(1u), _GLF_struct_33(ivec3(1)), _GLF_struct_34(_GLF_IDENTITY(uvec2(1u), (uvec2(1u)) | (_GLF_IDENTITY(uvec2(1u), uvec2(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)) + (_GLF_IDENTITY(uvec2(1u), max(uvec2(1u), uvec2(1u))))))), bvec3(true), 1u, 1, mat4x2(1.0)), _GLF_struct_35(1)), mat4(1.0), gl_SubgroupID, mat4x2(1.0), _GLF_struct_37(ivec3(1), _GLF_IDENTITY(vec4(1.0), (true ? _GLF_IDENTITY(vec4(1.0), min(vec4(1.0), _GLF_IDENTITY(vec4(1.0), vec4(1.0, 1.0, 1.0, 1.0) * (vec4(1.0))))) : _GLF_FUZZED(vec4(-1549.9511, -731.166, 77.73, 6.0))))), _GLF_struct_39(mat2x4(1.0), mat3x4(1.0), vec3(1.0), _GLF_struct_38(1.0, 1, mat3x2(1.0), vec3(1.0), mat2(1.0), mat4(1.0), mat4x2(1.0))));
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))))))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))) && true)), (! _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))) && true), bool(bvec4(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))) && true), true, false, true)))), ((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))) && true), bool(bvec4(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))) && true), true, false, true))))) && true)) || false))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, (false) || false)), (_GLF_IDENTITY(bool(_GLF_IDENTITY(false, (false) || false)), (bool(_GLF_IDENTITY(false, (false) || false))) || false)) || false)))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(74.89), _GLF_FUZZED(6.4)), _GLF_IDENTITY(vec2((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch)[1], ((injectionSwitch)[1]) / 1.0)), mat2(1.0) * (vec2((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch)[1], ((injectionSwitch)[1]) / 1.0)))), bvec2(_GLF_IDENTITY(true, true && (true)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))) + vec2(0.0, 0.0)).y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 _GLF_struct_13 _GLF_struct_replacement_13 = _GLF_struct_13(gl_SubgroupSize, mat4x3(_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-1.4)), bool(false)))), _GLF_struct_11(_GLF_struct_8(mat4x3(1.0), true, ivec4(1)), _GLF_struct_9(mat3x2(1.0), 1, _GLF_IDENTITY(bvec3(_GLF_IDENTITY(true, _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec4(true, false, true, true)), ! (! (bool(bvec4(true, false, true, true)))))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec4(true, false, _GLF_IDENTITY(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (true)), true)), ! (! (bool(bvec4(true, false, true, _GLF_IDENTITY(true, false || (true)))))))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)), true && (bool(bvec4(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec4(true, false, _GLF_IDENTITY(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (true)), true)), ! (! (bool(bvec4(true, false, true, _GLF_IDENTITY(true, false || (true)))))))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))))), bool(bool(! (bool(bvec4(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec4(true, false, true, true)), ! (_GLF_IDENTITY(! (bool(bvec4(true, false, true, true))), bool(bvec4(_GLF_IDENTITY(! (bool(bvec4(true, false, true, true))), bool(bvec3(! (bool(bvec4(true, false, true, true))), false, false))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)))))))), (_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(true, ! (! (true))), false, true, true)), ! (! (bool(bvec4(true, false, true, true)))))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)), _GLF_IDENTITY(! (_GLF_IDENTITY(! (_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec4(true, false, _GLF_IDENTITY(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (true)), true)), ! (! (bool(bvec4(true, false, true, _GLF_IDENTITY(true, false || (true)))))))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)), true && (bool(bvec4(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec4(true, false, _GLF_IDENTITY(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (true)), true)), ! (! (bool(bvec4(true, false, true, _GLF_IDENTITY(true, false || (true)))))))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))))), bool(bool(! (bool(bvec4(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec4(true, false, true, true)), ! (_GLF_IDENTITY(! (bool(bvec4(true, false, true, true))), bool(bvec4(_GLF_IDENTITY(! (bool(bvec4(true, false, true, true))), bool(bvec3(! (bool(bvec4(true, false, true, true))), false, false))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))))))), (! (_GLF_IDENTITY(! (_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec4(true, false, _GLF_IDENTITY(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (true)), true)), _GLF_IDENTITY(! (! (bool(bvec4(true, false, true, _GLF_IDENTITY(true, false || (true)))))), bool(bvec4(! (! (bool(bvec4(true, false, true, _GLF_IDENTITY(true, false || (true)))))), true, false, false))))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)), true && (bool(bvec4(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec4(true, false, _GLF_IDENTITY(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (true)), true)), ! (! (bool(bvec4(true, false, true, _GLF_IDENTITY(true, false || (true)))))))), true, _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, float(vec4(injectionSwitch.y, 0.0, 1.0, 0.0))))))), false))))), bool(bool(! (bool(bvec4(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec4(true, false, true, true)), ! (_GLF_IDENTITY(! (bool(bvec4(true, false, true, true))), bool(bvec4(_GLF_IDENTITY(! (bool(bvec4(true, false, true, true))), bool(bvec3(! (bool(bvec4(true, false, true, true))), false, false))), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) > injectionSwitch.y)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(false, false || (false)))))))))) || false))) && true))), _GLF_IDENTITY(bvec3(bvec4(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(true, bool(bvec2(true, true))), bool(bvec4(_GLF_IDENTITY(true, bool(bvec4(true, false, true, true))), _GLF_IDENTITY(true, bool(bvec3(_GLF_IDENTITY(true, true && (true)), true, false))), _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y)), false)))), false)), _GLF_IDENTITY(bvec3(bvec4(bvec3(bvec4(bvec3(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(true, bool(bvec4(true, false, true, true))), _GLF_IDENTITY(_GLF_IDENTITY(true, ! _GLF_IDENTITY((_GLF_IDENTITY(! (true), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(! (true), false || (! (true)))), true && (_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(! (true), bool(bvec4(! (true), true, false, false))), false || (! (true)))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(! (true), bool(bvec4(! (true), true, false, false))), false || (! (true)))), (bool(_GLF_IDENTITY(_GLF_IDENTITY(! (true), bool(bvec4(! (true), true, false, false))), false || (! (true))))) || false)), false || (_GLF_IDENTITY(! (_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(! (true), bool(bvec4(! (true), true, false, false))), false || (! (true)))), (bool(_GLF_IDENTITY(_GLF_IDENTITY(! (true), bool(bvec4(! (true), true, false, false))), false || (! (true))))) || false)), ! (! (! (_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(! (true), bool(bvec4(! (true), true, false, false))), false || (! (true)))), (bool(_GLF_IDENTITY(_GLF_IDENTITY(! (true), bool(bvec4(! (true), true, false, false))), false || (! (true))))) || false)))))))))))))), ! (! ((_GLF_IDENTITY(! (true), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(! (true), false || (! (true)))), true && (_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(! (true), bool(bvec4(! (true), true, false, false))), false || (! (true)))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(! (true), bool(bvec4(! (true), true, false, false))), false || (! (true)))), (bool(_GLF_IDENTITY(_GLF_IDENTITY(! (true), bool(bvec4(! (true), true, false, false))), false || (! (true))))) || false)), false || (_GLF_IDENTITY(! (_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(! (true), bool(bvec4(! (true), true, false, false))), false || (! (true)))), (bool(_GLF_IDENTITY(_GLF_IDENTITY(! (true), bool(bvec4(! (true), true, false, false))), false || (! (true))))) || false)), ! (! (! (_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(! (true), bool(bvec4(! (true), true, false, false))), false || (! (true)))), (bool(_GLF_IDENTITY(_GLF_IDENTITY(! (true), bool(bvec4(! (true), true, false, false))), false || (! (true))))) || false)))))))))))))))))), (_GLF_IDENTITY(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(! (true), false || (! (true)))), true && (bool(_GLF_IDENTITY(! (true), false || (! (true)))))))))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(! (true), false || (! (true)))), true && (bool(_GLF_IDENTITY(_GLF_IDENTITY(! (true), false || (! (true))), (_GLF_IDENTITY(! (true), false || (! (true)))) && true)))))))), false, _GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y))))), bvec3(bvec4(bvec3(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(! (true), false || (! (true)))), true && (bool(_GLF_IDENTITY(! (true), _GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, bool(bool(false))), false, true, true))) || (! (true)))))))))), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true)))), (bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(! (true), false || (! (true)))), _GLF_IDENTITY(true, false || (true)) && (bool(_GLF_IDENTITY(! (true), false || (! (true)))))))))), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec3(bvec4(bvec3(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(! (true), false || (! (true)))), true && (bool(_GLF_IDENTITY(! (true), false || (! (true)))))))))), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true))))) && true))) && true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)), ! (! (_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(true, bool(bvec4(true, false, true, true))), _GLF_IDENTITY(_GLF_IDENTITY(true, ! _GLF_IDENTITY((_GLF_IDENTITY(! (true), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(! (true), false || (! (true)))), true && (_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(! (true), bool(bvec4(! (true), true, false, false))), false || (! (true)))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(! (true), bool(bvec4(! (true), true, false, false))), false || (! (true)))), (bool(_GLF_IDENTITY(_GLF_IDENTITY(! (true), bool(bvec4(! (true), true, false, false))), false || (! (true))))) || false)), false || (_GLF_IDENTITY(! (_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(! (true), bool(bvec4(! (true), true, false, false))), false || (! (true)))), (bool(_GLF_IDENTITY(_GLF_IDENTITY(! (true), bool(bvec4(! (true), true, false, false))), false || (! (true))))) || false)), ! (! (! (_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(! (true), bool(bvec4(! (true), true, false, false))), false || (! (true)))), (bool(_GLF_IDENTITY(_GLF_IDENTITY(! (true), bool(bvec4(! (true), true, false, false))), false || (! (true))))) || false)))))))))))))), ! (! ((_GLF_IDENTITY(! (true), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(! (true), false || (! (true)))), true && (_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(! (true), bool(bvec4(! (true), true, false, false))), false || (! (true)))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(! (true), bool(bvec4(! (true), true, false, false))), false || (! (true)))), (bool(_GLF_IDENTITY(_GLF_IDENTITY(! (true), bool(bvec4(! (true), true, false, false))), false || (! (true))))) || false)), false || (_GLF_IDENTITY(! (_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(! (true), bool(bvec4(! (true), true, false, false))), false || (! (true)))), (bool(_GLF_IDENTITY(_GLF_IDENTITY(! (true), bool(bvec4(! (true), true, false, false))), false || (! (true))))) || false)), ! (! (! (_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(! (true), bool(bvec4(! (true), true, false, false))), false || (! (true)))), (bool(_GLF_IDENTITY(_GLF_IDENTITY(! (true), bool(bvec4(! (true), true, false, false))), false || (! (true))))) || false)))))))))))))))))), (_GLF_IDENTITY(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(! (true), false || (! (true)))), true && (bool(_GLF_IDENTITY(! (true), false || (! (true)))))))))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(! (true), false || (! (true)))), true && (bool(_GLF_IDENTITY(_GLF_IDENTITY(! (true), false || (! (true))), (_GLF_IDENTITY(! (true), false || (! (true)))) && true)))))))), false, _GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y))))), bvec3(bvec4(bvec3(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(! (true), false || (! (true)))), true && (bool(_GLF_IDENTITY(! (true), _GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, bool(bool(false))), false, true, true))) || (! (true)))))))))), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true)))), (bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(! (true), false || (! (true)))), _GLF_IDENTITY(true, false || (true)) && (bool(_GLF_IDENTITY(! (true), false || (! (true)))))))))), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec3(bvec4(bvec3(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(! (true), false || (! (true)))), true && (bool(_GLF_IDENTITY(! (true), false || (! (true)))))))))), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true))))) && true))) && true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)), (bool(bvec4(_GLF_IDENTITY(true, bool(bvec4(true, false, true, true))), _GLF_IDENTITY(_GLF_IDENTITY(true, ! _GLF_IDENTITY((_GLF_IDENTITY(! (true), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(! (true), false || (! (true)))), true && (_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(! (true), bool(bvec4(! (true), true, false, false))), false || (! (true)))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(! (true), bool(bvec4(! (true), true, false, false))), false || (! (true)))), (bool(_GLF_IDENTITY(_GLF_IDENTITY(! (true), bool(bvec4(! (true), true, false, false))), false || (! (true))))) || false)), false || (_GLF_IDENTITY(! (_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(! (true), bool(bvec4(! (true), true, false, false))), false || (! (true)))), (bool(_GLF_IDENTITY(_GLF_IDENTITY(! (true), bool(bvec4(! (true), true, false, false))), false || (! (true))))) || false)), ! (! (! (_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(! (true), bool(bvec4(! (true), true, false, false))), false || (! (true)))), (bool(_GLF_IDENTITY(_GLF_IDENTITY(! (true), bool(bvec4(! (true), true, false, false))), false || (! (true))))) || false)))))))))))))), ! (! ((_GLF_IDENTITY(! (true), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(! (true), false || (! (true)))), true && (_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(! (true), bool(bvec4(! (true), true, false, false))), false || (! (true)))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(! (true), bool(bvec4(! (true), true, false, false))), false || (! (true)))), (bool(_GLF_IDENTITY(_GLF_IDENTITY(! (true), bool(bvec4(! (true), true, false, false))), false || (! (true))))) || false)), false || (_GLF_IDENTITY(! (_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(! (true), bool(bvec4(! (true), true, false, false))), false || (! (true)))), (bool(_GLF_IDENTITY(_GLF_IDENTITY(! (true), bool(bvec4(! (true), true, false, false))), false || (! (true))))) || false)), ! (! (! (_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(! (true), bool(bvec4(! (true), true, false, false))), false || (! (true)))), (bool(_GLF_IDENTITY(_GLF_IDENTITY(! (true), bool(bvec4(! (true), true, false, false))), false || (! (true))))) || false)))))))))))))))))), (_GLF_IDENTITY(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(! (true), false || (! (true)))), true && (bool(_GLF_IDENTITY(! (true), false || (! (true)))))))))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(! (true), false || (! (true)))), true && (bool(_GLF_IDENTITY(_GLF_IDENTITY(! (true), false || (! (true))), (_GLF_IDENTITY(! (true), false || (! (true)))) && true)))))))), false, _GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y))))), bvec3(bvec4(bvec3(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(! (true), false || (! (true)))), true && (bool(_GLF_IDENTITY(! (true), _GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, bool(bool(false))), false, true, true))) || (! (true)))))))))), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true)))), (bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(! (true), false || (! (true)))), _GLF_IDENTITY(true, false || (true)) && (bool(_GLF_IDENTITY(! (true), false || (! (true)))))))))), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec3(bvec4(bvec3(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(! (true), false || (! (true)))), true && (bool(_GLF_IDENTITY(! (true), false || (! (true)))))))))), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true))))) && true))) && true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))) || false)))))), false)), false)), bvec3(bvec3(bvec3(bvec4(bvec3(bvec4(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(true, (true) && true), bool(bvec4(_GLF_IDENTITY(true, bool(bvec4(true, false, true, true))), true, _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).y)))), false)))), false)), false)))))))), _GLF_struct_10(1.0, mat3(1.0), mat2x4(1.0)), bvec4(true), mat4(1.0), mat2x4(1.0)), _GLF_struct_12(bvec4(true)), ivec3(1));
 _GLF_struct_20 _GLF_struct_replacement_20 = _GLF_struct_20(_GLF_struct_14(mat3x2(1.0), mat4(1.0)), 1u, mat4x2(_GLF_IDENTITY(1.0, (1.0) - 0.0)), gl_SubgroupInvocationID, vec2(1.0), _GLF_struct_19(_GLF_struct_15(uvec3(1u), mat4x3(_GLF_IDENTITY(1.0, (1.0) / 1.0)), bvec3(true), _GLF_IDENTITY(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(true, false), bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(true, false), bvec2(bvec4(bvec2(true, false), true, false))), bvec2(_GLF_IDENTITY(bvec2(bvec2(true, false)), bvec2(bvec4(bvec2(bvec2(true, false)), true, false)))))), bvec2(bvec3(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(true, false), bvec2(bvec4(bvec2(true, false), true, false))), bvec2(_GLF_IDENTITY(bvec2(bvec2(true, false)), bvec2(bvec4(bvec2(bvec2(true, false)), true, false)))))), true)))))), bool(bvec3(bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(true, false), bvec2(bvec2(bvec2(true, false)))), bvec2(bvec2(_GLF_IDENTITY(bvec2(true, false), bvec2(bvec2(bvec2(true, false)))))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))))), bvec2(bvec3(bvec2(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(true, false), bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(true, false), bvec2(bvec4(bvec2(true, false), true, false))), bvec2(_GLF_IDENTITY(bvec2(bvec2(true, false)), bvec2(bvec4(bvec2(bvec2(true, false)), true, false)))))), bvec2(bvec3(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(true, false), bvec2(bvec4(bvec2(true, false), true, false))), bvec2(_GLF_IDENTITY(bvec2(bvec2(true, false)), bvec2(bvec4(bvec2(bvec2(true, false)), true, false)))))), true)))))), bool(bvec3(bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(true, false), bvec2(bvec2(bvec2(true, false)))), bvec2(bvec2(_GLF_IDENTITY(bvec2(true, false), bvec2(bvec2(bvec2(true, false)))))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))))), true))), bvec2(bvec4(bvec2(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(true, false), bvec2(bvec2(_GLF_IDENTITY(bvec2(true, false), bvec2(_GLF_IDENTITY(bvec2(bvec2(true, false)), bvec2(bvec4(bvec2(bvec2(true, false)), true, false))))))))), bool(bvec3(bool(_GLF_IDENTITY(bvec2(true, _GLF_IDENTITY(false, true && (false))), bvec2(bvec2(_GLF_IDENTITY(bvec2(true, false), bvec2(bvec2(bvec2(true, false)))))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))))), true, false))), uvec4(1u), mat4x2(1.0), ivec2(1)), _GLF_struct_16(1.0, mat2x4(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, (1.0) * 1.0)) - 0.0)), mat3x4(1.0)), _GLF_struct_17(uvec2(1u), 1.0, mat3x4(_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(4442.9296)), _GLF_IDENTITY(bool(false), bool(bool(bool(false)))))))), _GLF_struct_18(mat2(1.0), ivec2(1))));
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = gl_WorkGroupSize.x;
 _GLF_struct_31 _GLF_struct_replacement_31 = _GLF_struct_31(bvec2(_GLF_IDENTITY(true, false || (_GLF_IDENTITY(_GLF_IDENTITY(true, false || _GLF_IDENTITY((true), ! (! ((true))))), _GLF_IDENTITY(true, ! (! (true))) && (true))))), gl_WorkGroupID.x, _GLF_struct_21(mat3x4(1.0), vec3(_GLF_IDENTITY(1.0, min(1.0, 1.0)))), _GLF_struct_26(_GLF_struct_22(bvec3(true)), uvec4(1u), _GLF_struct_23(1, vec4(_GLF_IDENTITY(_GLF_IDENTITY(1.0, _GLF_IDENTITY(float(vec2(1.0, 1.0)), (true ? float(vec2(1.0, 1.0)) : _GLF_FUZZED(-5.8)))), (_GLF_IDENTITY(true, (_GLF_IDENTITY(true, bool(bvec2(true, false)))) && true) ? _GLF_IDENTITY(_GLF_IDENTITY(1.0, _GLF_IDENTITY(float(vec2(1.0, 1.0)), (true ? float(vec2(1.0, 1.0)) : _GLF_FUZZED(-5.8)))), float(mat3x2(_GLF_IDENTITY(1.0, _GLF_IDENTITY(float(vec2(1.0, 1.0)), (true ? float(vec2(1.0, 1.0)) : _GLF_FUZZED(-5.8)))), 1.0, 1.0, 0.0, 0.0, 1.0))) : _GLF_FUZZED(-6184.0948)))), mat3x4(1.0), 1u, mat2x3(_GLF_IDENTITY(1.0, max(1.0, _GLF_IDENTITY(1.0, float(vec2(1.0, 1.0))))))), _GLF_struct_24(mat3(1.0)), _GLF_struct_25(vec3(1.0), uvec4(1u), mat4(1.0)), 1), _GLF_struct_29(ivec2(1), _GLF_struct_27(mat2(_GLF_IDENTITY(1.0, max(1.0, 1.0)))), _GLF_struct_28(bvec3(true), vec2(1.0))), _GLF_struct_30(mat4x2(1.0), mat4x3(_GLF_IDENTITY(1.0, float(_GLF_IDENTITY(vec2(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-923.079)), float(1.0), bool(true))), 0.0), vec2(0.0, 0.0) + (vec2(_GLF_IDENTITY(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-923.079)), float(_GLF_IDENTITY(1.0, min(1.0, 1.0))), bool(true))), (_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-923.079)), _GLF_IDENTITY(float(1.0), float(mat3(_GLF_IDENTITY(float(1.0), mix(float(float(1.0)), float(_GLF_FUZZED(-76.52)), bool(false))), 1.0, determinant(mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0)), 0.0, 0.0, 1.0, 0.0, 1.0, 0.0))), bool(true)))) / 1.0), 0.0)))))), _GLF_IDENTITY(mat3(1.0), transpose(transpose(mat3(1.0))))));
 uint workgroup_base = workgroup_size * _GLF_struct_replacement_31.workgroup_id;
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, (true ? _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(-1.9) : 1.0))) : _GLF_FUZZED(-440.471))), injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y)))) || false))
  barrier();
 for(int _injected_loop_counter = int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, (_GLF_IDENTITY(0, ~ (~ (0)))) >> 0)); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
      barrier();
    }
  }
 uint subgroup_base = _GLF_IDENTITY(_GLF_struct_replacement_40.subgroup_id, min(_GLF_struct_replacement_40.subgroup_id, _GLF_IDENTITY(_GLF_struct_replacement_40.subgroup_id, _GLF_IDENTITY(0u, (_GLF_IDENTITY(_GLF_IDENTITY(0u, _GLF_IDENTITY(uint(uvec4(0u, 1u, (0u << _GLF_IDENTITY(uint(5u), uint(5u))), 0u)), (false ? _GLF_FUZZED(workgroup_size) : uint(uvec4(0u, 1u, (0u << _GLF_IDENTITY(uint(5u), uint(_GLF_IDENTITY(5u, (0u & 26144u) ^ (_GLF_IDENTITY(5u, (5u) | (5u))))))), 0u))))), (0u) / 1u)) | (0u)) ^ (_GLF_struct_replacement_40.subgroup_id)))) * _GLF_IDENTITY(_GLF_struct_replacement_13.subgroup_size, 0u + (_GLF_IDENTITY(_GLF_struct_replacement_13.subgroup_size, uint(uvec4(_GLF_IDENTITY(_GLF_struct_replacement_13.subgroup_size, (_GLF_struct_replacement_13.subgroup_size) / 1u), 1u, 0u, 0u)))));
 _GLF_struct_7 _GLF_struct_replacement_7 = _GLF_struct_7(_GLF_IDENTITY(workgroup_base, _GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(uvec2(workgroup_base, 1u), _GLF_IDENTITY((uvec2(workgroup_base, 1u)) / uvec2(1u, 1u), ((uvec2(workgroup_base, 1u)) / uvec2(1u, 1u)) | (uvec2(0u, 0u) << _GLF_IDENTITY(uvec2(2u), uvec2(2u)))))), (uint(_GLF_IDENTITY(uvec2(workgroup_base, 1u), (uvec2(workgroup_base, 1u)) / uvec2(1u, 1u)))) * 1u), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(uvec2(workgroup_base, 1u), _GLF_IDENTITY((uvec2(workgroup_base, 1u)) / uvec2(1u, 1u), ((uvec2(workgroup_base, 1u)) / uvec2(1u, 1u)) | (uvec2(0u, 0u) << _GLF_IDENTITY(uvec2(2u), uvec2(2u)))))), (uint(_GLF_IDENTITY(uvec2(workgroup_base, 1u), (uvec2(workgroup_base, 1u)) / uvec2(1u, 1u)))) * 1u), min(_GLF_IDENTITY(uint(_GLF_IDENTITY(uvec2(workgroup_base, 1u), _GLF_IDENTITY((uvec2(workgroup_base, 1u)) / uvec2(1u, 1u), ((uvec2(workgroup_base, 1u)) / uvec2(1u, 1u)) | (uvec2(0u, 0u) << _GLF_IDENTITY(uvec2(2u), uvec2(2u)))))), (uint(_GLF_IDENTITY(uvec2(workgroup_base, 1u), (uvec2(workgroup_base, 1u)) / uvec2(1u, 1u)))) * 1u), _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec2(workgroup_base, 1u), _GLF_IDENTITY((uvec2(workgroup_base, 1u)) / uvec2(1u, 1u), ((uvec2(workgroup_base, 1u)) / uvec2(1u, 1u)) | (uvec2(0u, 0u) << _GLF_IDENTITY(uvec2(2u), uvec2(2u)))))), (uint(_GLF_IDENTITY(uvec2(workgroup_base, 1u), (uvec2(workgroup_base, 1u)) / uvec2(1u, 1u)))) * 1u))))))) + subgroup_base + _GLF_struct_replacement_20.subgroup_local_id, _GLF_struct_3(_GLF_struct_0(mat3x4(1.0), true, mat3x2(1.0)), bvec3(true), _GLF_struct_1(_GLF_IDENTITY(ivec4(1), (ivec4(1)) ^ ivec4(0, 0, _GLF_IDENTITY(0, (0) | (0)), 0)), mat4(_GLF_IDENTITY(1.0, (1.0) - 0.0)), bvec4(true), mat2(1.0), mat3x2(1.0)), _GLF_struct_2(mat4x2(1.0), vec2(_GLF_IDENTITY(1.0, min(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1.0, (1.0) / 1.0), float(mat2x4(_GLF_IDENTITY(1.0, (1.0) / 1.0), 1.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, mix(float(_GLF_IDENTITY(1.0, (1.0) - 0.0)), float(_GLF_FUZZED(2.1)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), 1.0, 1.0)), 1.0, 1.0))), _GLF_IDENTITY(min(_GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, float(mat4(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, abs(0.0), 0.0, 1.0, 1.0))), 1.0)), 1.0), _GLF_IDENTITY(clamp(_GLF_IDENTITY(min(1.0, 1.0), max(min(1.0, 1.0), min(1.0, 1.0))), _GLF_IDENTITY(min(1.0, 1.0), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-0.3) : min(1.0, 1.0), (true ? _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-0.3) : min(1.0, 1.0) : _GLF_FUZZED(-79.50))))), min(1.0, 1.0)), (clamp(_GLF_IDENTITY(_GLF_IDENTITY(min(1.0, 1.0), (false ? _GLF_FUZZED(-0.9) : min(1.0, 1.0))), max(min(1.0, 1.0), min(1.0, 1.0))), _GLF_IDENTITY(min(1.0, 1.0), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-0.3) : min(1.0, 1.0), (true ? _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-0.3) : min(1.0, 1.0) : _GLF_FUZZED(-79.50))))), min(1.0, 1.0))) / 1.0))), _GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(0.3) : 1.0)))))))), bvec2(true)), 1.0, _GLF_IDENTITY(ivec3(1), _GLF_IDENTITY((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? ivec3(1) : _GLF_FUZZED(ivec3(_GLF_IDENTITY(-17508, (-17508) | 0), _GLF_IDENTITY(-62506, (-62506) * 1), -14041))), clamp((_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false || (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(-419.544)), bool(false))))), ! (! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))) ? ivec3(1) : _GLF_FUZZED(ivec3(_GLF_IDENTITY(-17508, (_GLF_IDENTITY(-17508, 0 ^ (-17508))) | 0), -62506, -14041))), _GLF_IDENTITY((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? ivec3(_GLF_IDENTITY(1, ~ (_GLF_IDENTITY(~ (1), (_GLF_IDENTITY(~ (1), 0 ^ (~ (1)))) ^ 0)))) : _GLF_FUZZED(ivec3(_GLF_IDENTITY(-17508, (_GLF_IDENTITY(-17508, (false ? _GLF_FUZZED(ivec3(45775, -46724, 91847)[2]) : -17508))) | 0), -62506, -14041))), ((_GLF_TRUE(true, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)), clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)))).x, mix(float(_GLF_FUZZED(-6.2)), float(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)), clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)))).x), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) < injectionSwitch.y)) ? ivec3(1) : _GLF_FUZZED(ivec3(_GLF_IDENTITY(-17508, (-17508) | 0), -62506, -14041)))) | (_GLF_IDENTITY((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? ivec3(1) : _GLF_FUZZED(ivec3(_GLF_IDENTITY(-17508, (-17508) | 0), -62506, -14041))), max((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? ivec3(1) : _GLF_FUZZED(_GLF_IDENTITY(ivec3(_GLF_IDENTITY(-17508, (_GLF_IDENTITY(-17508, (_GLF_IDENTITY(-17508, min(-17508, -17508))) | 0)) | 0), -62506, -14041), (true ? ivec3(_GLF_IDENTITY(-17508, (-17508) | 0), -62506, -14041) : _GLF_FUZZED(_GLF_IDENTITY(ivec3(37330, 5280, -84347), min(_GLF_IDENTITY(ivec3(37330, 5280, -84347), (ivec3(37330, 5280, -84347)) ^ ivec3(0, 0, 0)), ivec3(37330, 5280, -84347)))))))), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? ivec3(_GLF_IDENTITY(1, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(1, (1) | (1))), min(_GLF_IDENTITY(~ (_GLF_IDENTITY(1, (1) | (1))), (~ (_GLF_IDENTITY(1, (1) | (1)))) - 0), ~ (_GLF_IDENTITY(1, (1) | (1)))))))) : _GLF_FUZZED(ivec3(_GLF_IDENTITY(-17508, (-17508) | 0), -62506, -14041))))))), (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) || false) ? ivec3(1) : _GLF_FUZZED(ivec3(_GLF_IDENTITY(-17508, (-17508) | 0), -62506, -14041)))))), _GLF_struct_6(_GLF_struct_4(1, mat4x3(1.0), mat3(1.0), mat2(1.0), mat4(_GLF_IDENTITY(1.0, 0.0 + _GLF_IDENTITY((1.0), (true ? (1.0) : _GLF_FUZZED(2389.4550))))), mat3x4(1.0), 1), 1, _GLF_struct_5(ivec4(1), vec4(1.0), mat4(1.0)), vec4(_GLF_IDENTITY(1.0, _GLF_IDENTITY(clamp(1.0, 1.0, _GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-7998.1137)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), _GLF_IDENTITY(float(mat4x2(clamp(1.0, 1.0, 1.0), 1.0, sqrt(1.0), 1.0, 0.0, 1.0, 1.0, 0.0)), mix(float(float(mat4x2(clamp(1.0, 1.0, 1.0), 1.0, _GLF_IDENTITY(sqrt(1.0), min(sqrt(1.0), _GLF_IDENTITY(sqrt(1.0), (sqrt(1.0)) / 1.0))), 1.0, 0.0, 1.0, 1.0, 0.0))), float(_GLF_FUZZED(-1396.6240)), bool(false)))))), _GLF_IDENTITY(mat2(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(-463.908) : _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(8.9) : 1.0))))), mat2(mat4x2(mat2(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(-463.908) : _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(8.9) : 1.0))))))))));
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), (! (_GLF_DEAD(false))) || false))), false)), (bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), (! (_GLF_DEAD(false))) || false))), false))) && true)), _GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), bool(bvec2((injectionSwitch.x < injectionSwitch.y), false)))) && (_GLF_DEAD(false))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(7660.7124) : injectionSwitch.y))))))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch.y : _GLF_FUZZED(length(vec4(-7084.5539, -3.0, -4313.0223, 66.13))))))))))), (_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch.y : _GLF_FUZZED(length(vec4(-7084.5539, -3.0, -4313.0223, 66.13))))))), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch.y : _GLF_FUZZED(length(vec4(-7084.5539, -3.0, -4313.0223, 66.13)))))))), (! (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch.y : _GLF_FUZZED(length(vec4(-7084.5539, -3.0, -4313.0223, 66.13))))))))) || false)))))))) && true))
  barrier();
 for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(3), int(3))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
  }
 uint next_virtual_gid = workgroup_base + _GLF_IDENTITY(subgroup_base, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_base, min(subgroup_base, subgroup_base)), (_GLF_IDENTITY(subgroup_base, min(subgroup_base, subgroup_base))) << _GLF_IDENTITY(0u, (0u) | 0u))) | 0u, ((_GLF_IDENTITY(subgroup_base, min(subgroup_base, subgroup_base))) | 0u) ^ _GLF_IDENTITY(0u, 0u | (_GLF_IDENTITY(0u, uint(_GLF_ZERO(0.0, injectionSwitch.x)) | (0u)))))) + ((_GLF_struct_replacement_20.subgroup_local_id + 1) % _GLF_struct_replacement_13.subgroup_size);
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(bvec2(_GLF_TRUE(_GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, true && (true)))), _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ! (! ((injectionSwitch.x < injectionSwitch.y))))), false)))) || false)))
    {
     barrier();
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 _GLF_struct_32 _GLF_struct_replacement_32 = _GLF_struct_32(atomicLoad(_GLF_IDENTITY(buf[_GLF_struct_replacement_7.virtual_gid], ((1u << _GLF_IDENTITY(uint(6u), _GLF_IDENTITY(uint(6u), uint(uint(uint(6u)))))) >> _GLF_IDENTITY(uint(6u), uint(6u))) * (buf[_GLF_struct_replacement_7.virtual_gid])), 4, _GLF_IDENTITY(64, ~ (~ (64))), 2), vec3(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(true, bool(bool(true))) ? _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-8708.4994)), float(1.0), bool(true))) : _GLF_FUZZED(13.44)))), uvec4(1u));
 if((_GLF_struct_replacement_20.subgroup_local_id % 2) == 0)
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     subgroupAll(false);
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec3(bvec2(false, false), true)))), false || (bool(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec3(bvec2(false, false), true)))))))));
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)))))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
        barrier();
      }
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(2), clamp(int(2), _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(ivec4(int(2), 0, 0, 1)), (int(ivec4(int(2), 0, 0, 1))) | (int(ivec4(int(2), 0, 0, 1))))), int(2))), _GLF_IDENTITY(int(_GLF_IDENTITY(2, ~ (~ (2)))), int(_GLF_IDENTITY(ivec4(_GLF_IDENTITY(int(_GLF_IDENTITY(2, (2) >> 0)), _GLF_IDENTITY(int(_GLF_IDENTITY(ivec3(int(_GLF_IDENTITY(2, (2) >> 0)), 0, 0), clamp(ivec3(int(_GLF_IDENTITY(2, (2) >> 0)), 0, 0), ivec3(int(_GLF_IDENTITY(2, (2) >> 0)), 0, 0), ivec3(int(_GLF_IDENTITY(2, (2) >> 0)), 0, 0)))), (int(_GLF_IDENTITY(ivec3(int(_GLF_IDENTITY(2, (2) >> 0)), 0, 0), clamp(ivec3(int(_GLF_IDENTITY(2, (2) >> 0)), 0, 0), ivec3(int(_GLF_IDENTITY(2, (2) >> 0)), 0, 0), ivec3(int(_GLF_IDENTITY(2, (2) >> 0)), 0, 0))))) / 1)), 1, 1, (0 >> _GLF_IDENTITY(int(6), int(6)))), _GLF_IDENTITY(ivec4(1, 1, 1, 1), (_GLF_IDENTITY(ivec4(1, 1, 1, 1), (ivec4(1, 1, 1, 1)) - ivec4(0, 0, 0, 0))) - ivec4(0, 0, 0, 0)) * (ivec4(int(_GLF_IDENTITY(2, (2) >> 0)), 1, 1, (0 >> _GLF_IDENTITY(int(6), int(6)))))))))) >> _GLF_IDENTITY(int(2), int(2))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
          }
         else
          {
          }
        }
      }
    }
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, _GLF_IDENTITY(false, bool(bool(false))))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(false), (bool(false)) || false)), bool(bvec2(bool(_GLF_IDENTITY(bool(false), (bool(false)) || _GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) && true))), false)))), (_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))), bool(bvec2(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(false), (bool(false)) || false)), bool(bvec2(bool(_GLF_IDENTITY(bool(false), (bool(false)) || false)), false))), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(false), (bool(false)) || false)), bool(bvec2(bool(_GLF_IDENTITY(bool(false), (bool(false)) || false)), false)))), (bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(false), (bool(false)) || false)), bool(bvec2(bool(_GLF_IDENTITY(bool(false), (bool(false)) || false)), false))))) && true)))), (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(false), (bool(false)) || false)), bool(bvec2(bool(_GLF_IDENTITY(bool(false), (bool(false)) || false)), false)))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1]))) / vec2(1.0, 1.0)).y))))), false))))
    {
    }
   else
    {
     atomicStore(buf[next_virtual_gid], _GLF_IDENTITY(uint(1), uint(uvec4(_GLF_IDENTITY(_GLF_IDENTITY(uint(1), (uint(1)) / uint(_GLF_ONE(1.0, injectionSwitch.y))), (_GLF_IDENTITY(uint(1), (uint(1)) / uint(_GLF_ONE(1.0, injectionSwitch.y)))) >> (0u | 0u)), 1u, 1u, 1u))), _GLF_IDENTITY(4, (_GLF_IDENTITY(false ? _GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(15272), min(_GLF_IDENTITY(_GLF_FUZZED(15272), min(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(15272), (_GLF_FUZZED(15272)) ^ 0), min(_GLF_IDENTITY(_GLF_FUZZED(15272), (_GLF_FUZZED(15272)) ^ 0), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(15272), (_GLF_FUZZED(15272)) ^ 0), (_GLF_IDENTITY(_GLF_FUZZED(15272), (_GLF_FUZZED(15272)) ^ 0)) ^ 0))), _GLF_FUZZED(15272))), _GLF_FUZZED(15272))), min(_GLF_IDENTITY(_GLF_FUZZED(15272), min(_GLF_IDENTITY(_GLF_FUZZED(15272), min(_GLF_IDENTITY(_GLF_FUZZED(15272), (_GLF_FUZZED(15272)) ^ 0), _GLF_FUZZED(15272))), _GLF_FUZZED(15272))), _GLF_IDENTITY(_GLF_FUZZED(15272), min(_GLF_IDENTITY(_GLF_FUZZED(15272), min(_GLF_IDENTITY(_GLF_FUZZED(15272), (_GLF_FUZZED(15272)) ^ 0), _GLF_FUZZED(15272))), _GLF_FUZZED(15272))))) : _GLF_IDENTITY(4, (_GLF_IDENTITY(4, clamp(4, 4, 4))) | 0), (false ? _GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(15272), min(_GLF_IDENTITY(_GLF_FUZZED(15272), min(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(15272), (_GLF_FUZZED(15272)) ^ 0), min(_GLF_IDENTITY(_GLF_FUZZED(15272), (_GLF_FUZZED(15272)) ^ 0), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(15272), (_GLF_FUZZED(15272)) ^ 0), (_GLF_IDENTITY(_GLF_FUZZED(15272), (_GLF_FUZZED(15272)) ^ 0)) ^ 0))), _GLF_FUZZED(15272))), _GLF_FUZZED(15272))), min(_GLF_IDENTITY(_GLF_FUZZED(15272), min(_GLF_IDENTITY(_GLF_FUZZED(15272), min(_GLF_IDENTITY(_GLF_FUZZED(15272), (_GLF_FUZZED(15272)) ^ 0), _GLF_FUZZED(15272))), _GLF_FUZZED(15272))), _GLF_IDENTITY(_GLF_FUZZED(15272), min(_GLF_IDENTITY(_GLF_FUZZED(15272), min(_GLF_IDENTITY(_GLF_FUZZED(15272), (_GLF_FUZZED(15272)) ^ 0), _GLF_FUZZED(15272))), _GLF_FUZZED(15272))))) : _GLF_IDENTITY(4, (_GLF_IDENTITY(4, clamp(4, 4, 4))) | 0)) ^ int(_GLF_ZERO(0.0, injectionSwitch.x))))), 64, 4);
    }
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))))))
    barrier();
  }
 else
  {
   subgroupAll(false);
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           barrier();
          }
        }
      }
     atomicStore(buf[_GLF_IDENTITY(_GLF_IDENTITY(next_virtual_gid, _GLF_IDENTITY(0u, (0u) ^ 0u) + (next_virtual_gid)), (true ? _GLF_IDENTITY(_GLF_IDENTITY(next_virtual_gid, _GLF_IDENTITY(0u, (0u) ^ 0u) + (next_virtual_gid)), max(_GLF_IDENTITY(next_virtual_gid, _GLF_IDENTITY(_GLF_IDENTITY(0u, clamp(0u, 0u, 0u)), _GLF_IDENTITY((0u) ^ 0u, (false ? _GLF_FUZZED(workgroup_size) : (_GLF_IDENTITY(0u, min(0u, 0u))) ^ 0u))) + (next_virtual_gid)), _GLF_IDENTITY(next_virtual_gid, _GLF_IDENTITY(0u, (0u) ^ 0u) + _GLF_IDENTITY((_GLF_IDENTITY(next_virtual_gid, clamp(_GLF_IDENTITY(next_virtual_gid, (next_virtual_gid) << 0u), next_virtual_gid, next_virtual_gid))), uint(_GLF_ZERO(0.0, injectionSwitch.x)) | ((_GLF_IDENTITY(next_virtual_gid, clamp(_GLF_IDENTITY(next_virtual_gid, (next_virtual_gid) << 0u), next_virtual_gid, next_virtual_gid)))))))) : _GLF_FUZZED(subgroup_base)))], _GLF_IDENTITY(uint(_GLF_IDENTITY(1, (1) * int(_GLF_ONE(1.0, injectionSwitch.y)))), (true ? _GLF_IDENTITY(uint(1), (_GLF_IDENTITY(uint(1), (uint(_GLF_IDENTITY(1, int(ivec4(_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, (false ? _GLF_FUZZED(_GLF_IDENTITY(-28277, ~ (~ (-28277)))) : 1)), 1, 1)), 1, 0, (0 << _GLF_IDENTITY(_GLF_IDENTITY(int(8), int(8)), (_GLF_IDENTITY(int(8), int(8))) | (_GLF_IDENTITY(_GLF_IDENTITY(int(8), int(8)), ~ (~ (_GLF_IDENTITY(int(8), int(8))))))))))))) | _GLF_IDENTITY((uint(1)), max(_GLF_IDENTITY((uint(1)), uint(uvec2((uint(1)), 0u))), (uint(1)))))) - _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(0u, uint(_GLF_ZERO(0.0, injectionSwitch.x)) | (_GLF_IDENTITY(0u, max(0u, 0u)))), (0u) * 1u), clamp(_GLF_IDENTITY(0u, (0u) * _GLF_IDENTITY(1u, 0u ^ (1u))), _GLF_IDENTITY(0u, _GLF_IDENTITY((0u) * _GLF_IDENTITY(1u, (1u) | (_GLF_IDENTITY(1u, (1u) >> 0u))), min((0u) * _GLF_IDENTITY(1u, (1u) | (_GLF_IDENTITY(1u, (1u) >> 0u))), (0u) * _GLF_IDENTITY(1u, (1u) | (_GLF_IDENTITY(1u, (1u) >> 0u)))))), _GLF_IDENTITY(_GLF_IDENTITY(0u, (0u) * 1u), (_GLF_IDENTITY(0u, (0u) * 1u)) | (_GLF_IDENTITY(0u, (0u) * 1u))))), (_GLF_IDENTITY(_GLF_IDENTITY(0u, (0u) * 1u), clamp(_GLF_IDENTITY(0u, _GLF_IDENTITY((0u) * 1u, ((0u) * 1u) >> 0u)), _GLF_IDENTITY(0u, _GLF_IDENTITY((0u), ((0u)) + 0u) * 1u), _GLF_IDENTITY(_GLF_IDENTITY(0u, (0u) * 1u), (_GLF_IDENTITY(0u, (0u) * 1u)) | (_GLF_IDENTITY(0u, (0u) * 1u)))))) ^ 0u)) : _GLF_FUZZED(_GLF_struct_replacement_31.workgroup_id))), 4, 64, 4);
    }
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), false || (_GLF_IDENTITY(false, ! (! (false)))))))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       barrier();
      }
     else
      {
      }
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), _GLF_IDENTITY(_GLF_IDENTITY(bool(bool(false)), false || (bool(bool(false)))), ! (! (_GLF_IDENTITY(bool(bool(false)), false || (bool(bool(false))))))))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         barrier();
        }
       else
        {
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, true && (false)))))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 subgroupBarrier();
 do
  {
   atomicStore(buf[_GLF_struct_replacement_7.virtual_gid], _GLF_struct_replacement_32.read, 4, 64, _GLF_IDENTITY(4, (_GLF_IDENTITY(4, 0 | (4))) ^ _GLF_IDENTITY(0, (0) >> 0)));
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y))))), bool(bool(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)), true && ((injectionSwitch.x > injectionSwitch.y)))))))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, abs(1.0) * (injectionSwitch.x)) > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END
BUFFER checker DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected_checker DATA_TYPE uint32 SIZE 8388096 FILL 0

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 
  BIND BUFFER checker AS storage DESCRIPTOR_SET 0 BINDING 2 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT checker EQ_BUFFER expected_checker
