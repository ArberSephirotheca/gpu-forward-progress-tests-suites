#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_6 {
 uvec4 _f0;
 uvec2 _f1;
 ivec3 _f2;
} ;

struct _GLF_struct_5 {
 bvec2 _f0;
 bool _f1;
 mat3 _f2;
 mat3x2 _f3;
 ivec4 _f4;
 float _f5;
 mat2x4 _f6;
} ;

struct _GLF_struct_7 {
 _GLF_struct_5 _f0;
 mat3 _f1;
 _GLF_struct_6 _f2;
 uvec2 _f3;
 uint _f4;
 bool _f5;
} ;

struct _GLF_struct_3 {
 bvec2 _f0;
 mat2x4 _f1;
 bvec2 _f2;
} ;

struct _GLF_struct_2 {
 mat2x4 _f0;
 uvec2 _f1;
 bvec2 _f2;
 mat4x2 _f3;
 mat2x4 _f4;
 mat3x2 _f5;
} ;

struct _GLF_struct_1 {
 vec3 _f0;
 bvec3 _f1;
 mat2x4 _f2;
} ;

struct _GLF_struct_4 {
 _GLF_struct_1 _f0;
 _GLF_struct_2 _f1;
 ivec4 _f2;
 mat4x3 _f3;
 uvec3 _f4;
 _GLF_struct_3 _f5;
} ;

struct _GLF_struct_0 {
 vec2 _f0;
 bvec4 _f1;
 bvec3 _f2;
 bvec3 _f3;
 bvec4 _f4;
} ;

struct _GLF_struct_8 {
 vec4 _f0;
 uint subgroup_local_id;
 _GLF_struct_0 _f1;
 _GLF_struct_4 _f2;
 _GLF_struct_7 _f3;
 int _f4;
 mat4x2 _f5;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uvec4 GLF_merged3_0_2_44_2_1_16_3_1_13GLF_merged2_0_1_16_1_1_4next_virtual_gidreadnext_virtual_gidnum_workgroup;
 if(_GLF_DEAD(false))
  barrier();
 uvec2 GLF_merged2_0_1_16_1_1_4next_virtual_gidread;
 _GLF_IDENTITY(GLF_merged3_0_2_44_2_1_16_3_1_13GLF_merged2_0_1_16_1_1_4next_virtual_gidreadnext_virtual_gidnum_workgroup.xy = GLF_merged2_0_1_16_1_1_4next_virtual_gidread, uvec2(1u, 1u) * _GLF_IDENTITY((GLF_merged3_0_2_44_2_1_16_3_1_13GLF_merged2_0_1_16_1_1_4next_virtual_gidreadnext_virtual_gidnum_workgroup.xy = GLF_merged2_0_1_16_1_1_4next_virtual_gidread), (false ? _GLF_FUZZED(GLF_merged2_0_1_16_1_1_4next_virtual_gidread) : (GLF_merged3_0_2_44_2_1_16_3_1_13GLF_merged2_0_1_16_1_1_4next_virtual_gidreadnext_virtual_gidnum_workgroup.xy = GLF_merged2_0_1_16_1_1_4next_virtual_gidread))));
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   return;
  }
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(false))
  barrier();
 _GLF_struct_8 _GLF_struct_replacement_8 = _GLF_struct_8(vec4(1.0), gl_SubgroupInvocationID, _GLF_struct_0(vec2(1.0), bvec4(true), _GLF_IDENTITY(bvec3(true), bvec3(bvec3(bvec3(true)))), bvec3(true), bvec4(true)), _GLF_struct_4(_GLF_struct_1(vec3(1.0), bvec3(_GLF_IDENTITY(true, true && (true))), mat2x4(1.0)), _GLF_struct_2(mat2x4(1.0), uvec2(1u), bvec2(true), mat4x2(_GLF_IDENTITY(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(length(vec3(8.3, -351.511, 2.9))))), (_GLF_IDENTITY(_GLF_TRUE(_GLF_IDENTITY(true, bool(bvec2(true, false))), (injectionSwitch.x < injectionSwitch.y)) ? 1.0 : _GLF_IDENTITY(_GLF_FUZZED(-4.4), min(_GLF_FUZZED(-4.4), _GLF_FUZZED(-4.4))), (false ? _GLF_FUZZED(-1762.2004) : _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 1.0 : _GLF_IDENTITY(_GLF_FUZZED(-4.4), min(_GLF_FUZZED(-4.4), _GLF_FUZZED(-4.4)))))))), mat2x4(1.0), mat3x2(1.0)), ivec4(_GLF_IDENTITY(1, 1 * (_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, int(ivec2(1, (0 >> _GLF_IDENTITY(int(3), int(3)))))), 1, _GLF_IDENTITY(1, min(1, 1))))))), mat4x3(1.0), uvec3(1u), _GLF_struct_3(bvec2(true), mat2x4(_GLF_IDENTITY(1.0, max(1.0, _GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat3x2(1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0, 1.0, round(_GLF_IDENTITY(length(normalize(vec2(1.0, 1.0))), min(length(_GLF_IDENTITY(normalize(vec2(1.0, 1.0)), (normalize(vec2(1.0, 1.0))) * vec2(1.0, 1.0))), length(normalize(vec2(1.0, 1.0)))))))), min(float(mat3x2(_GLF_IDENTITY(1.0, (true ? _GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, 0.0 + (1.0)), 1.0, _GLF_IDENTITY(1.0, (1.0) + 0.0))) : _GLF_FUZZED(7.4))), _GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), (_GLF_ZERO(0.0, injectionSwitch.x)) / exp(0.0)), 0.0, 1.0, 1.0, round(length(normalize(vec2(1.0, 1.0)))))), _GLF_IDENTITY(float(mat3x2(1.0, _GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-58.86)), float(0.0), bool(true))), _GLF_IDENTITY(1.0, (_GLF_IDENTITY(true ? 1.0 : _GLF_FUZZED(length(_GLF_IDENTITY(vec2(80.15, -2.1), vec2(vec2(_GLF_IDENTITY(vec2(80.15, -2.1), mix(vec2(_GLF_IDENTITY(_GLF_FUZZED(92.39), float(_GLF_IDENTITY(vec2(_GLF_IDENTITY(_GLF_FUZZED(92.39), (_GLF_IDENTITY(_GLF_FUZZED(92.39), float(float(_GLF_FUZZED(92.39))))) - 0.0), 1.0), min(vec2(_GLF_IDENTITY(_GLF_FUZZED(92.39), (_GLF_IDENTITY(_GLF_FUZZED(92.39), float(float(_GLF_FUZZED(92.39))))) - 0.0), 1.0), vec2(_GLF_IDENTITY(_GLF_FUZZED(92.39), (_GLF_IDENTITY(_GLF_FUZZED(92.39), float(float(_GLF_FUZZED(92.39))))) - 0.0), 1.0))))), (vec2(_GLF_IDENTITY(80.15, mix(float(_GLF_FUZZED(-4470.7891)), float(80.15), bool(true))), -2.1))[1]), vec2((vec2(80.15, -2.1))[0], _GLF_FUZZED(4328.8330)), bvec2(true, false)))))))), mix(float(true ? 1.0 : _GLF_FUZZED(length(_GLF_IDENTITY(vec2(80.15, -2.1), vec2(vec2(_GLF_IDENTITY(_GLF_IDENTITY(vec2(80.15, -2.1), max(vec2(80.15, -2.1), vec2(80.15, -2.1))), mix(_GLF_IDENTITY(vec2(_GLF_FUZZED(92.39), (vec2(80.15, -2.1))[1]), vec2(0.0, 0.0) + (vec2(_GLF_FUZZED(92.39), (vec2(80.15, -2.1))[1]))), vec2((vec2(80.15, -2.1))[0], _GLF_FUZZED(4328.8330)), bvec2(true, false))))))))), float(_GLF_IDENTITY(_GLF_FUZZED(-75.81), min(_GLF_FUZZED(-75.81), _GLF_FUZZED(-75.81)))), bool(false))))), 1.0, round(length(normalize(vec2(1.0, 1.0)))))), (false ? _GLF_FUZZED(-17.35) : float(mat3x2(1.0, _GLF_ZERO(_GLF_IDENTITY(0.0, max(0.0, 0.0)), injectionSwitch.x), 0.0, _GLF_IDENTITY(1.0, (_GLF_IDENTITY(true ? 1.0 : _GLF_FUZZED(length(_GLF_IDENTITY(vec2(80.15, -2.1), vec2(vec2(_GLF_IDENTITY(vec2(80.15, -2.1), mix(vec2(_GLF_FUZZED(92.39), (vec2(80.15, -2.1))[1]), vec2((vec2(80.15, -2.1))[0], _GLF_FUZZED(4328.8330)), bvec2(true, false)))))))), mix(float(true ? 1.0 : _GLF_FUZZED(length(_GLF_IDENTITY(vec2(80.15, -2.1), vec2(vec2(_GLF_IDENTITY(vec2(80.15, -2.1), mix(vec2(_GLF_FUZZED(92.39), (vec2(80.15, -2.1))[1]), vec2((vec2(80.15, -2.1))[0], _GLF_FUZZED(4328.8330)), _GLF_IDENTITY(bvec2(true, false), _GLF_IDENTITY(bvec2(bvec4(_GLF_IDENTITY(bvec2(true, false), bvec2(bvec2(_GLF_IDENTITY(bvec2(true, false), bvec2(bvec3(bvec2(true, false), false)))))), false, false)), bvec2(bvec4(bvec2(bvec4(_GLF_IDENTITY(bvec2(true, false), bvec2(bvec2(_GLF_IDENTITY(bvec2(true, false), bvec2(bvec3(bvec2(true, false), false)))))), false, false)), false, true)))))))))))), _GLF_IDENTITY(float(_GLF_FUZZED(-75.81)), mix(float(_GLF_FUZZED(-48.66)), float(float(_GLF_FUZZED(-75.81))), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), bool(false))))), _GLF_IDENTITY(1.0, 0.0 + (1.0)), round(length(normalize(vec2(1.0, 1.0)))))))))))))), _GLF_IDENTITY(bvec2(true), bvec2(bvec4(bvec2(true), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), _GLF_struct_7(_GLF_struct_5(bvec2(true), true, mat3(1.0), mat3x2(1.0), ivec4(1), _GLF_IDENTITY(1.0, (1.0) + log(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(vec2(74.06, 4058.0328).g)), float(1.0), bool(true))))), mat2x4(1.0)), mat3(1.0), _GLF_struct_6(uvec4(1u), _GLF_IDENTITY(uvec2(1u), (_GLF_IDENTITY(uvec2(1u), (uvec2(1u)) | (uvec2(1u)))) << uvec2(0u, 0u)), ivec3(1)), uvec2(1u), 1u, true), _GLF_IDENTITY(1, _GLF_IDENTITY((1), 0 | (_GLF_IDENTITY((1), ~ (~ ((1)))))) * 1), mat4x2(1.0));
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 GLF_merged3_0_2_44_2_1_16_3_1_13GLF_merged2_0_1_16_1_1_4next_virtual_gidreadnext_virtual_gidnum_workgroup.w = num_workgroup;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
      return;
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))))
      return;
     barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), bool(bvec3(_GLF_IDENTITY(false, (false) && true), false, false)))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(vec2(injectionSwitch)))) / vec2(1.0, 1.0)).x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      return;
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  barrier();
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   return;
  }
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bool(false)))))), _GLF_IDENTITY(! (_GLF_IDENTITY(! (false), bool(bvec4(! (false), true, false, true)))), (! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bvec2(false, true)))), bool(bvec4(! (false), true, false, true))))) && true))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true), false)))))))))))))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   return;
  }
 if(_GLF_DEAD(false))
  return;
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))) || false)))
      return;
     barrier();
    }
   return;
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false), false))), false || (_GLF_DEAD(false))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, vec2(mat3x4(injectionSwitch, 0.0, round(length(normalize(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(float(-21334)) : 1.0))))), 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0))), injectionSwitch)).x > injectionSwitch.y))))
    return;
   return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    return;
   if(_GLF_DEAD(false))
    return;
  }
 uint workgroup_base = _GLF_IDENTITY(workgroup_size, (workgroup_size) << (_GLF_IDENTITY((0u | 0u) | 0u, clamp((0u | 0u) | 0u, _GLF_IDENTITY((0u | 0u), ((0u | 0u)) | 0u) | 0u, _GLF_IDENTITY((0u | _GLF_IDENTITY(0u, (true ? 0u : _GLF_FUZZED(123226u)))) | 0u, _GLF_IDENTITY(uint(uint((0u | 0u) | 0u)), (false ? _GLF_IDENTITY(_GLF_FUZZED(subgroup_id), clamp(_GLF_IDENTITY(_GLF_FUZZED(subgroup_id), (_GLF_FUZZED(subgroup_id)) + 0u), _GLF_FUZZED(subgroup_id), _GLF_FUZZED(subgroup_id))) : uint(uint((0u | 0u) | 0u))))))))) * workgroup_id;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, ! (! (false))), _GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))), false), bvec3(bvec4(bvec3(_GLF_IDENTITY(false, ! (! (false))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false), false))))), false || (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bvec2(false, true))))))))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          return;
         barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
        return;
       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec2(bvec3(_GLF_IDENTITY(bvec2(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec2(bvec2(bvec2(false, _GLF_TRUE(_GLF_IDENTITY(true, (true) && true), (injectionSwitch.x < injectionSwitch.y)))))), false))))), ! (_GLF_IDENTITY(! _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec2(bvec3(_GLF_IDENTITY(bvec2(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec2(bvec2(bvec2(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), false))))), true && (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec2(bvec3(_GLF_IDENTITY(bvec2(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec2(bvec2(bvec2(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), false)))))))), true && ((_GLF_IDENTITY(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec2(bvec3(_GLF_IDENTITY(bvec2(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec2(bvec2(bvec2(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), false))))), true && (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec2(bvec3(_GLF_IDENTITY(bvec2(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec2(bvec2(bvec2(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), false)))))))))), _GLF_IDENTITY(false || (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec2(bvec3(_GLF_IDENTITY(bvec2(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec2(bvec2(bvec2(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), false))))), true && (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec2(bvec3(_GLF_IDENTITY(bvec2(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec2(bvec2(bvec2(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), false)))))))), true && (! (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec2(bvec3(_GLF_IDENTITY(bvec2(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec2(bvec2(bvec2(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), false))))), true && (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec2(bvec3(_GLF_IDENTITY(bvec2(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec2(bvec2(bvec2(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), false))))))))))), (false || (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec2(bvec3(_GLF_IDENTITY(bvec2(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec2(bvec2(bvec2(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), false))))), true && (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec2(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec2(false, _GLF_TRUE(_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec3(true, true, true), bvec3(bvec4(bvec3(true, true, true), true)))))))), (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) < injectionSwitch.y))), bvec2(_GLF_IDENTITY(bvec2(bvec2(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), bvec2(bvec2(_GLF_IDENTITY(bvec2(bvec2(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), bvec2(bvec4(bvec2(bvec2(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), true, true)))))))), false), bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec2(false, _GLF_TRUE(_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec3(true, true, true), bvec3(bvec4(bvec3(true, true, true), true)))))))), (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) < injectionSwitch.y))), bvec2(_GLF_IDENTITY(bvec2(bvec2(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), bvec2(bvec2(_GLF_IDENTITY(bvec2(bvec2(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), bvec2(bvec4(bvec2(bvec2(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), true, true)))))))), false))))))))))), true && (! (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec2(bvec3(_GLF_IDENTITY(bvec2(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec2(bvec2(bvec2(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), false))))), true && (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec2(bvec3(_GLF_IDENTITY(bvec2(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec2(bvec2(bvec2(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), false))), _GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec2(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec2(bvec3(_GLF_IDENTITY(bvec2(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec2(bvec2(bvec2(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), false))), true), bvec3(bvec4(bvec3(_GLF_IDENTITY(bvec2(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec2(bvec3(_GLF_IDENTITY(bvec2(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec2(bvec2(bvec2(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), false))), true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), bvec2(bvec4(bvec2(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec2(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec2(bvec3(_GLF_IDENTITY(bvec2(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec2(bvec2(bvec2(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), false))), true), bvec3(bvec4(bvec3(_GLF_IDENTITY(bvec2(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec2(bvec3(_GLF_IDENTITY(bvec2(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec2(bvec2(bvec2(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), false))), true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), true, true))))))))))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec3(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), min(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)))).y, true && (injectionSwitch.x > injectionSwitch.y)))), false, _GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec3(true, true, false)), true && (bool(bvec3(true, true, false))))))))))))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
          return;
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
          return;
         barrier();
        }
       if(_GLF_DEAD(false))
        return;
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      return;
     return;
    }
   barrier();
   if(_GLF_DEAD(false))
    return;
   if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(true, false || (true)) && (false))), (_GLF_DEAD(false)) || false))))))), false || (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))))))))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
    barrier();
  }
 uint subgroup_base = subgroup_id * subgroup_size;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (true ? _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY((injectionSwitch.y), max((injectionSwitch.y), _GLF_IDENTITY((injectionSwitch.y), 0.0 + ((injectionSwitch.y))))) / 1.0) : _GLF_FUZZED(sinh((- -42.66)))))))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   return;
  }
 if(_GLF_DEAD(false))
  barrier();
 uint virtual_gid = workgroup_base + subgroup_base + _GLF_struct_replacement_8.subgroup_local_id;
 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec3(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec4(bvec2(false, false), false, false))), false)))), ! (! (bool(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec2(bvec2(false, false)))), bvec2(bvec4(bvec2(false, _GLF_IDENTITY(false, bool(bool(false)))), false, false))), _GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, (false) || false), false, false)))))))))))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     barrier();
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0), injectionSwitch.y, injectionSwitch.y)), _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0)), clamp((_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0)), (_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0)), (_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0)))) - 0.0), injectionSwitch.y))))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
        return;
       return;
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false))))
      barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))
    {
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   barrier();
  }
 uint next_virtual_gid = workgroup_base + subgroup_base + ((_GLF_struct_replacement_8.subgroup_local_id + 1) % subgroup_size);
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
  return;
 if(_GLF_DEAD(false))
  return;
 GLF_merged3_0_2_44_2_1_16_3_1_13GLF_merged2_0_1_16_1_1_4next_virtual_gidreadnext_virtual_gidnum_workgroup.z = _GLF_IDENTITY(next_virtual_gid, (next_virtual_gid) << (0u << _GLF_IDENTITY(_GLF_IDENTITY(uint(1u), _GLF_IDENTITY(uint(1u), 1u * (uint(1u)))), min(_GLF_IDENTITY(uint(1u), _GLF_IDENTITY(uint(1u), 1u * (uint(1u)))), _GLF_IDENTITY(uint(1u), _GLF_IDENTITY(uint(1u), 1u * (uint(1u))))))));
 GLF_merged3_0_2_44_2_1_16_3_1_13GLF_merged2_0_1_16_1_1_4next_virtual_gidreadnext_virtual_gidnum_workgroup.xy.x = GLF_merged3_0_2_44_2_1_16_3_1_13GLF_merged2_0_1_16_1_1_4next_virtual_gidreadnext_virtual_gidnum_workgroup.z;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   barrier();
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))), ! (! (_GLF_DEAD(false))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_DEAD(false), ! (! _GLF_IDENTITY((_GLF_DEAD(false)), bool(bvec4((_GLF_DEAD(false)), _GLF_IDENTITY(false, bool(bvec3(false, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), true, false)))))), ! (! ((_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))))))), true && (_GLF_IDENTITY(! (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))), ! (_GLF_IDENTITY(! ((_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))), bool(bvec2(! ((_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))), false)))))), bool(bvec3(! (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(! (! (_GLF_DEAD(false))), (! (! (_GLF_DEAD(false)))) && true))), ! (_GLF_IDENTITY(! ((_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))), bool(bvec2(! ((_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))), false)))))), true, false)))))))), ! (! (! (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))), ! (! (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))), ! (! ((_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))))))))), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))), ! (! (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))), ! (! ((_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))))))))), true)), ! (! (bool(bvec2(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))), ! (! (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))), ! (! ((_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))))))))), true)))))))))))) && _GLF_TRUE(true, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, true && (injectionSwitch.x < injectionSwitch.y)), bool(bvec2(_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (injectionSwitch.x < injectionSwitch.y) || false), false)))))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         return;
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        return;
       barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(vec4(6088.3929, 59.42, 693.706, -89.42).s), _GLF_FUZZED(-6.6)), vec2((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch)[1], ((injectionSwitch)[1]) / exp(0.0))), bvec2(true, true))).x > injectionSwitch.y))))
        barrier();
      }
     if(_GLF_DEAD(false))
      return;
     return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), bool(bvec4(_GLF_IDENTITY(false, true && (false)), true, false, true)))))
        return;
       barrier();
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)))).y)), true, false)), ! (! (bool(bvec3(_GLF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) || false), (injectionSwitch.x > injectionSwitch.y)), true, false))))))), (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false)), ! (! (bool(_GLF_IDENTITY(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false), bvec3(bvec3(_GLF_IDENTITY(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false), bvec3(bvec3(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false)))))))))))))) || _GLF_IDENTITY(false, true && (false)))))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, true && (false)))))))
          barrier();
         if(_GLF_DEAD(false))
          return;
         barrier();
        }
       if(_GLF_DEAD(false))
        return;
       return;
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
      barrier();
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - abs(0.0))))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, float(mat3(injectionSwitch.x, 0.0, 1.0, _GLF_IDENTITY(dot(vec4(1.0, 0.0, 1.0, 1.0), vec4(0.0, 1.0, 0.0, 0.0)), dot(vec4(1.0, 0.0, 1.0, 1.0), vec4(0.0, 1.0, 0.0, 0.0))), _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 0.0, 0.0, 0.0))), _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)))) > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bvec3(false, false, true))))))))
      return;
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (false))))))) || false)))
      barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if(_GLF_DEAD(false))
  barrier();
 uint read = atomicLoad(buf[virtual_gid], _GLF_IDENTITY(4, (4) >> 0), 64, 2);
 if(_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(bvec3(_GLF_DEAD(false), true, false), bvec3(_GLF_IDENTITY(bvec3(bvec3(_GLF_DEAD(false), true, false)), bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec3(_GLF_DEAD(false), true, false))), bvec3(bvec3(bvec3(bvec3(bvec3(_GLF_DEAD(false), true, false)))))))))))))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(false || (false), (false || _GLF_IDENTITY((_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), true && ((false)))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), false || (_GLF_IDENTITY(false, ! (! (false))))))))), bool(bvec4(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), ! (! (false))), ! (! (false)))), ! (! ((_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), _GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(! (false), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec3(bvec4(bvec3(! (false), true, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, bool(bool(injectionSwitch.x < injectionSwitch.y)))))), true)))), ! (! (bool(_GLF_IDENTITY(bvec3(! (false), true, _GLF_TRUE(_GLF_IDENTITY(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(true, bool(bvec4(true, true, true, true))))), (injectionSwitch.x < injectionSwitch.y))), bvec3(bvec4(bvec3(! (false), true, _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, (true ? _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0) : _GLF_FUZZED(-5.5))) < injectionSwitch.y))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true))))))), false || (_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(! (false), true, _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).y, mix(float(_GLF_FUZZED(-889.086)), float(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).y), bool(true)))))), _GLF_IDENTITY(bvec3(bvec4(bvec3(! _GLF_IDENTITY((false), ! (! (_GLF_IDENTITY((false), _GLF_IDENTITY(bool(bvec2((false), false)), bool(bool(bool(bvec2((false), false))))))))), true, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, bool(bool(injectionSwitch.x < injectionSwitch.y)))))), true)), bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec4(bvec3(! _GLF_IDENTITY((false), ! (! (_GLF_IDENTITY((false), _GLF_IDENTITY(bool(bvec2((false), false)), bool(bool(bool(bvec2((false), false))))))))), true, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, bool(bool(injectionSwitch.x < injectionSwitch.y)))))), true))), bvec3(bvec4(_GLF_IDENTITY(bvec3(bvec3(bvec4(bvec3(! _GLF_IDENTITY((false), ! (! (_GLF_IDENTITY((false), _GLF_IDENTITY(bool(bvec2((false), false)), bool(bool(bool(bvec2((false), false))))))))), true, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, bool(bool(injectionSwitch.x < injectionSwitch.y)))))), true))), bvec3(bvec4(bvec3(bvec3(bvec4(bvec3(! _GLF_IDENTITY((false), ! (! (_GLF_IDENTITY((false), _GLF_IDENTITY(bool(bvec2((false), false)), bool(bool(bool(bvec2((false), false))))))))), true, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, bool(bool(injectionSwitch.x < injectionSwitch.y)))))), true))), true))), true))))))), ! (! (bool(_GLF_IDENTITY(bvec3(! (false), true, _GLF_TRUE(_GLF_IDENTITY(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(true, bool(bvec4(true, true, true, true))))), (_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, float(mat4x3(_GLF_IDENTITY(injectionSwitch.x, float(mat4x3(injectionSwitch.x, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0))), log(1.0), 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, exp(0.0), 1.0, sqrt(1.0)))))) < injectionSwitch.y))), bvec3(bvec4(bvec3(! (false), true, _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_TRUE(true, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0))))), (true ? _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0) : _GLF_FUZZED(-5.5))) < injectionSwitch.y), ! (! ((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0))))), (true ? _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0) : _GLF_FUZZED(-5.5))) < injectionSwitch.y)))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true)))))))))))))))), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)))), false || (! _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), ! (! ((false))))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), ! (! ((false))))))), bool(_GLF_IDENTITY(bool((_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), ! (! ((false)))))))), bool(bool(bool((_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), ! (! ((false)))))))))))))), bool(bvec2(! (_GLF_IDENTITY((_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), ! (! ((false))))))), bool(_GLF_IDENTITY(bool((_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), ! _GLF_IDENTITY((_GLF_IDENTITY(! ((false)), ! (! (! ((false)))))), false || ((_GLF_IDENTITY(! ((false)), ! (! (! ((false))))))))))))), bool(bool(bool((_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), ! (! ((false)))))))))))))), false))))), bool(bvec4(_GLF_IDENTITY((_GLF_IDENTITY(false, ! (! (false)))), ! (! ((_GLF_IDENTITY(false, ! (! (false))))))), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_IDENTITY(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), true && (_GLF_IDENTITY((false), bool(bvec4(_GLF_IDENTITY((false), false || ((false))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))))))))), (_GLF_IDENTITY(false, ! (! (false)))) && true))))), true && ((_GLF_IDENTITY((_GLF_IDENTITY(false, ! (! (false)))), bool(bvec4(_GLF_IDENTITY((_GLF_IDENTITY(false, ! (! (false)))), ! (! ((_GLF_IDENTITY(false, ! (! (false))))))), false, _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y)), _GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) && true)))))))))))) || false))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     return;
    }
   if(_GLF_DEAD(false))
    return;
   return;
  }
 GLF_merged3_0_2_44_2_1_16_3_1_13GLF_merged2_0_1_16_1_1_4next_virtual_gidreadnext_virtual_gidnum_workgroup.xy.y = read;
 if(_GLF_DEAD(false))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      return;
    }
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   return;
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))))
    barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))), (_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(false, true && (false))), false || (_GLF_IDENTITY((_GLF_IDENTITY(false, true && (false))), bool(bvec4((_GLF_IDENTITY(false, true && (false))), false, false, false))))) && true, false || (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(false, true && (false))), false || (_GLF_IDENTITY((_GLF_IDENTITY(false, true && (false))), bool(bvec4((_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, false || (false))))), false, false, false))))) && true, true && (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(false, true && (false))), false || (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(false, true && (false))), ! (! ((_GLF_IDENTITY(false, true && (false)))))), bool(bvec4((_GLF_IDENTITY(false, true && (false))), false, false, false))))) && true, (_GLF_IDENTITY((_GLF_IDENTITY(false, true && (false))), _GLF_IDENTITY(false, ! (! (false))) || (_GLF_IDENTITY((_GLF_IDENTITY(false, true && (false))), bool(bvec4((_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), true && (false))), false, false, false))))) && true) || false)))))), (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false)))))) && true)))
  barrier();
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     return;
    }
  }
 if((_GLF_IDENTITY(_GLF_struct_replacement_8.subgroup_local_id % 2, (true ? _GLF_IDENTITY(_GLF_IDENTITY(_GLF_struct_replacement_8.subgroup_local_id % 2, (_GLF_IDENTITY(_GLF_struct_replacement_8.subgroup_local_id % 2, (_GLF_struct_replacement_8.subgroup_local_id % 2) ^ 0u)) / 1u), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_struct_replacement_8.subgroup_local_id % _GLF_IDENTITY(2, 0 ^ (_GLF_IDENTITY(2, (true ? 2 : _GLF_FUZZED(-39596))))), (_GLF_IDENTITY(_GLF_struct_replacement_8.subgroup_local_id % 2, (_GLF_struct_replacement_8.subgroup_local_id % 2) ^ 0u)) / 1u), _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(_GLF_struct_replacement_8.subgroup_local_id % 2, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_struct_replacement_8.subgroup_local_id % 2, _GLF_IDENTITY((_GLF_struct_replacement_8.subgroup_local_id % 2) ^ 0u, ~ (~ ((_GLF_struct_replacement_8.subgroup_local_id % 2) ^ 0u))))), ((_GLF_IDENTITY(_GLF_struct_replacement_8.subgroup_local_id % 2, _GLF_IDENTITY((_GLF_struct_replacement_8.subgroup_local_id % 2) ^ 0u, ~ (~ ((_GLF_struct_replacement_8.subgroup_local_id % 2) ^ 0u)))))) / 1u) / 1u), _GLF_IDENTITY(0u, (0u) >> 0u)), (uvec2(_GLF_IDENTITY(_GLF_struct_replacement_8.subgroup_local_id % 2, (_GLF_IDENTITY(_GLF_struct_replacement_8.subgroup_local_id % 2, (_GLF_IDENTITY(_GLF_struct_replacement_8.subgroup_local_id, 0u ^ (_GLF_IDENTITY(_GLF_struct_replacement_8.subgroup_local_id, (_GLF_struct_replacement_8.subgroup_local_id) | 0u))) % 2) ^ 0u)) / 1u), 0u)) | (uvec2(_GLF_IDENTITY(_GLF_struct_replacement_8.subgroup_local_id % 2, (_GLF_IDENTITY(_GLF_struct_replacement_8.subgroup_local_id % 2, (_GLF_struct_replacement_8.subgroup_local_id % 2) ^ 0u)) / 1u), 0u)))), 0u ^ (uint(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_struct_replacement_8.subgroup_local_id, (_GLF_struct_replacement_8.subgroup_local_id) >> (uint(_GLF_ZERO(0.0, injectionSwitch.x)) & 168643u)) % 2, (_GLF_IDENTITY(_GLF_struct_replacement_8.subgroup_local_id % 2, (_GLF_struct_replacement_8.subgroup_local_id % 2) ^ 0u)) / 1u), 0u), (uvec2(_GLF_IDENTITY(_GLF_struct_replacement_8.subgroup_local_id % 2, (_GLF_IDENTITY(_GLF_struct_replacement_8.subgroup_local_id % 2, (_GLF_struct_replacement_8.subgroup_local_id % 2) ^ _GLF_IDENTITY(0u, (0u) + uint(_GLF_ZERO(0.0, injectionSwitch.x))))) / 1u), 0u)) | (uvec2(_GLF_IDENTITY(_GLF_struct_replacement_8.subgroup_local_id % 2, (_GLF_IDENTITY(_GLF_struct_replacement_8.subgroup_local_id % 2, _GLF_IDENTITY((_GLF_struct_replacement_8.subgroup_local_id % 2), (false ? _GLF_FUZZED(next_virtual_gid) : (_GLF_struct_replacement_8.subgroup_local_id % 2))) ^ 0u)) / 1u), 0u)))))))) | (_GLF_IDENTITY(_GLF_struct_replacement_8.subgroup_local_id % _GLF_IDENTITY(2, ~ (~ (_GLF_IDENTITY(2, min(2, 2))))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_struct_replacement_8.subgroup_local_id % 2, (_GLF_struct_replacement_8.subgroup_local_id % 2) | (_GLF_struct_replacement_8.subgroup_local_id % 2)), (_GLF_struct_replacement_8.subgroup_local_id % _GLF_IDENTITY(2, (2) << 0)) ^ 0u)) / _GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, (1u) - 0u)) / 1u)))) : _GLF_FUZZED(virtual_gid)))) == _GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) | (0))) ^ 0))
  {
   subgroupAll(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) && true)) || false));
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(6.6) : injectionSwitch.x)))), injectionSwitch.x)) > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      return;
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, vec2(mat2(injectionSwitch, 0.0, 0.0))), injectionSwitch)), abs(vec2(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY((injectionSwitch.y) + 0.0, min((injectionSwitch.y) + 0.0, (injectionSwitch.y) + 0.0)))))) * (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, vec2(mat2(injectionSwitch, 0.0, 0.0))), injectionSwitch)), min(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, vec2(mat2(injectionSwitch, 0.0, 0.0))), injectionSwitch)), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)), injectionSwitch, injectionSwitch)), vec2(mat2(injectionSwitch, 0.0, 0.0))), injectionSwitch)), vec2(mat2x3(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, vec2(mat2(injectionSwitch, 0.0, 0.0))), injectionSwitch)), 1.0, 1.0, 1.0, 0.0))))))).x > injectionSwitch.y))))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   atomicStore(buf[_GLF_IDENTITY(GLF_merged3_0_2_44_2_1_16_3_1_13GLF_merged2_0_1_16_1_1_4next_virtual_gidreadnext_virtual_gidnum_workgroup.xy, clamp(_GLF_IDENTITY(GLF_merged3_0_2_44_2_1_16_3_1_13GLF_merged2_0_1_16_1_1_4next_virtual_gidreadnext_virtual_gidnum_workgroup.xy, (_GLF_IDENTITY(GLF_merged3_0_2_44_2_1_16_3_1_13GLF_merged2_0_1_16_1_1_4next_virtual_gidreadnext_virtual_gidnum_workgroup.xy, clamp(GLF_merged3_0_2_44_2_1_16_3_1_13GLF_merged2_0_1_16_1_1_4next_virtual_gidreadnext_virtual_gidnum_workgroup.xy, _GLF_IDENTITY(GLF_merged3_0_2_44_2_1_16_3_1_13GLF_merged2_0_1_16_1_1_4next_virtual_gidreadnext_virtual_gidnum_workgroup.xy, min(GLF_merged3_0_2_44_2_1_16_3_1_13GLF_merged2_0_1_16_1_1_4next_virtual_gidreadnext_virtual_gidnum_workgroup.xy, GLF_merged3_0_2_44_2_1_16_3_1_13GLF_merged2_0_1_16_1_1_4next_virtual_gidreadnext_virtual_gidnum_workgroup.xy)), GLF_merged3_0_2_44_2_1_16_3_1_13GLF_merged2_0_1_16_1_1_4next_virtual_gidreadnext_virtual_gidnum_workgroup.xy))) - uvec2(0u, 0u)), _GLF_IDENTITY(_GLF_IDENTITY(GLF_merged3_0_2_44_2_1_16_3_1_13GLF_merged2_0_1_16_1_1_4next_virtual_gidreadnext_virtual_gidnum_workgroup.xy, uvec2(0u, 0u) | (_GLF_IDENTITY(GLF_merged3_0_2_44_2_1_16_3_1_13GLF_merged2_0_1_16_1_1_4next_virtual_gidreadnext_virtual_gidnum_workgroup.xy, uvec2(uvec3(_GLF_IDENTITY(GLF_merged3_0_2_44_2_1_16_3_1_13GLF_merged2_0_1_16_1_1_4next_virtual_gidreadnext_virtual_gidnum_workgroup.xy, (GLF_merged3_0_2_44_2_1_16_3_1_13GLF_merged2_0_1_16_1_1_4next_virtual_gidreadnext_virtual_gidnum_workgroup.xy) / uvec2(1u, 1u)), 0u))))), (GLF_merged3_0_2_44_2_1_16_3_1_13GLF_merged2_0_1_16_1_1_4next_virtual_gidreadnext_virtual_gidnum_workgroup.xy) >> uvec2(0u, 0u)), GLF_merged3_0_2_44_2_1_16_3_1_13GLF_merged2_0_1_16_1_1_4next_virtual_gidreadnext_virtual_gidnum_workgroup.xy)).x], uint(1), _GLF_IDENTITY(4, min(4, 4)), _GLF_IDENTITY(64, (64) | 0), 4);
  }
 else
  {
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, true && (false))) || false), (_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(27.24) : _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / exp(vec2(0.0, 0.0))).x, max(injectionSwitch.x, injectionSwitch.x)))) > injectionSwitch.y))), _GLF_IDENTITY(false, _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y)) || (false)) || (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), ! (! (false))))))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, 0.0 + (injectionSwitch.y)), injectionSwitch.y, injectionSwitch.y))))) || false)))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(-960.066, 231.695)))).x > injectionSwitch.y))))
        barrier();
      }
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec2(false, false))), _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(_GLF_IDENTITY(mat2x3(injectionSwitch.y, 0.0, 1.0, 1.0, cos(0.0), determinant(mat2(abs(1.0), 0.0, 1.0, 1.0))), mat3(_GLF_ONE(1.0, injectionSwitch.y)) * (mat2x3(injectionSwitch.y, 0.0, 1.0, 1.0, cos(0.0), determinant(mat2(abs(1.0), 0.0, 1.0, _GLF_IDENTITY(1.0, (1.0) / _GLF_IDENTITY(dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, tan(0.0), 1.0)), dot(vec4(0.0, 0.0, 0.0, 1.0), _GLF_IDENTITY(vec4(0.0, 0.0, tan(0.0), 1.0), (vec4(0.0, 0.0, tan(0.0), 1.0)) * mat4(_GLF_ONE(1.0, injectionSwitch.y))))))))))))))) || (false), (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(_GLF_IDENTITY(6.2, (_GLF_IDENTITY(6.2, clamp(6.2, _GLF_IDENTITY(6.2, clamp(6.2, 6.2, 6.2)), 6.2))) - 0.0))))) / 1.0) > injectionSwitch.y)), true && (_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY((true ? injectionSwitch.x : _GLF_FUZZED(6.2)), (_GLF_IDENTITY((true ? injectionSwitch.x : _GLF_FUZZED(6.2)), max((true ? injectionSwitch.x : _GLF_FUZZED(6.2)), (true ? injectionSwitch.x : _GLF_FUZZED(6.2))))) - length(0.0)))) / 1.0) > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(0.0, 0.0) + (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0))), (false ? _GLF_FUZZED(vec2(923.729, -779.443)) : _GLF_IDENTITY(vec2(0.0, 0.0) + (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0))), min(vec2(0.0, 0.0) + (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0))), vec2(0.0, 0.0) + (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)))))))).y, true && (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY((true ? injectionSwitch.x : _GLF_FUZZED(6.2)), (_GLF_IDENTITY((true ? injectionSwitch.x : _GLF_FUZZED(6.2)), max((true ? injectionSwitch.x : _GLF_FUZZED(_GLF_IDENTITY(6.2, clamp(6.2, 6.2, _GLF_IDENTITY(6.2, min(6.2, 6.2)))))), (true ? injectionSwitch.x : _GLF_FUZZED(6.2))))) - length(0.0)))) / 1.0) > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(0.0, 0.0) + (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)), max(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)), _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0))))), (false ? _GLF_FUZZED(vec2(923.729, -779.443)) : _GLF_IDENTITY(vec2(0.0, 0.0) + (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) - vec2(0.0, 0.0), min((injectionSwitch) - vec2(0.0, 0.0), (injectionSwitch) - vec2(0.0, 0.0))))), min(vec2(0.0, 0.0) + (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0))), vec2(0.0, 0.0) + (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)))))))).y)))))) || (false)) || false))))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), ! (! (! (_GLF_DEAD(false))))))))
        barrier();
       return;
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            return;
           return;
          }
         if(_GLF_DEAD(false))
          barrier();
         return;
        }
       barrier();
      }
     return;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    return;
   if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(bvec2(_GLF_DEAD(false), _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), false || (! (true)))))), bvec2(bvec4(bvec2(_GLF_DEAD(false), true), true, false))))), (_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))) || false))), (_GLF_IDENTITY(_GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false))) && true))) || false))), ! (! (_GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false))) && true))) || false))), (bool(bool(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false))) && true))) || false)))) && true)))), (_GLF_IDENTITY(_GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false))) && true))) || false))), ! (! (bool(bool(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).x < injectionSwitch.y)) && (false))) && true))) || false)))))), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false))) && true))) || false))), ! (! (bool(bool(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false))) && true))) || false)))))), (_GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false))) && true))) || false))), ! (_GLF_IDENTITY(! (bool(bool(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false))) && true))) || false)))), true && (! (bool(bool(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false))) && true, ! (! ((_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false))) && true)))))) || false))))))))) && true), true, false, false)), ! (! (bool(bvec4(_GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false))) && true))) || false))), ! (! (bool(bool(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false))) && true))) || false)))))), true, false, false))))))) && true)) && true)))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(vec4(injectionSwitch, 1.0, _GLF_IDENTITY(dot(vec4(0.0, tan(0.0), 1.0, determinant(mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0))), vec4(0.0, 0.0, 1.0, _GLF_IDENTITY(0.0, (true ? _GLF_IDENTITY(0.0, max(0.0, 0.0)) : _GLF_FUZZED(2.9))))), dot(vec4(0.0, tan(0.0), 1.0, determinant(mat4(0.0, 0.0, _GLF_IDENTITY(0.0, (0.0) + 0.0), 0.0, _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0))), vec4(0.0, 0.0, 1.0, 0.0)))), (false ? _GLF_FUZZED(vec4(3.5, 20.47, _GLF_IDENTITY(-699.486, 1.0 * (-699.486)), -1.7)) : vec4(injectionSwitch, 1.0, _GLF_IDENTITY(dot(vec4(0.0, _GLF_IDENTITY(tan(0.0), (false ? _GLF_FUZZED(_GLF_IDENTITY(-9.0, mix(float(_GLF_FUZZED(float(48413u))), float(_GLF_IDENTITY(-9.0, (-9.0) - 0.0)), bool(true)))) : tan(0.0))), 1.0, determinant(mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0))), vec4(0.0, 0.0, 1.0, 0.0)), dot(vec4(0.0, tan(0.0), 1.0, determinant(mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(0.0, (0.0) - 0.0), 0.0, 0.0))), vec4(0.0, 0.0, 1.0, 0.0)))))))).y))))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        return;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, float(mat4x2(injectionSwitch.x, 1.0, _GLF_IDENTITY(dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0)), dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0))), 0.0, 1.0, 0.0, 1.0, 1.0))), injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      return;
     barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      barrier();
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)))))), bool(bvec3(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   subgroupAll(false);
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)))).y) + 0.0), float(vec3(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)))).y) + 0.0), clamp(_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)))).y) + 0.0), _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)))).y) + 0.0), _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)))).y) + 0.0))), abs(1.0), 0.0)))))))
    return;
   atomicStore(buf[GLF_merged3_0_2_44_2_1_16_3_1_13GLF_merged2_0_1_16_1_1_4next_virtual_gidreadnext_virtual_gidnum_workgroup.xy.x], uint(1), 4, 64, 4);
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 subgroupBarrier();
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec3(! (false), true, true))))), (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec3(! (false), true, _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), bool(bvec2(! (true), true))))))))))) && true)))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   if(_GLF_DEAD(false))
    return;
   barrier();
  }
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bool(bvec4(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, true, true)), bool(bvec4(bool(bvec4(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, true, true)), false, false, true)))))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, false, false)))))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), (bool(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED((- -4.1)))))) && true))))), _GLF_IDENTITY(bool(bvec4(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), (bool(injectionSwitch.x > injectionSwitch.y)) && _GLF_IDENTITY(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(true, bool(bvec4(true, true, false, false)))))))))), false, false, true)), ! (! (bool(bvec4(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, float(_GLF_IDENTITY(vec3(injectionSwitch.y, 0.0, 1.0), min(vec3(injectionSwitch.y, 0.0, 1.0), vec3(injectionSwitch.y, 0.0, 1.0))))), injectionSwitch.y)), bool(_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), (bool(injectionSwitch.x > injectionSwitch.y)) && true))))), false, false, true))))))))
  barrier();
 atomicStore(buf[virtual_gid], _GLF_IDENTITY(_GLF_IDENTITY(GLF_merged3_0_2_44_2_1_16_3_1_13GLF_merged2_0_1_16_1_1_4next_virtual_gidreadnext_virtual_gidnum_workgroup, min(GLF_merged3_0_2_44_2_1_16_3_1_13GLF_merged2_0_1_16_1_1_4next_virtual_gidreadnext_virtual_gidnum_workgroup, _GLF_IDENTITY(GLF_merged3_0_2_44_2_1_16_3_1_13GLF_merged2_0_1_16_1_1_4next_virtual_gidreadnext_virtual_gidnum_workgroup, (true ? GLF_merged3_0_2_44_2_1_16_3_1_13GLF_merged2_0_1_16_1_1_4next_virtual_gidreadnext_virtual_gidnum_workgroup : _GLF_FUZZED(GLF_merged3_0_2_44_2_1_16_3_1_13GLF_merged2_0_1_16_1_1_4next_virtual_gidreadnext_virtual_gidnum_workgroup))))).xy.y, (GLF_merged3_0_2_44_2_1_16_3_1_13GLF_merged2_0_1_16_1_1_4next_virtual_gidreadnext_virtual_gidnum_workgroup.xy.y) / 1u), 4, 64, 4);
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END
BUFFER checker DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected_checker DATA_TYPE uint32 SIZE 8388096 FILL 0

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 
  BIND BUFFER checker AS storage DESCRIPTOR_SET 0 BINDING 2 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT checker EQ_BUFFER expected_checker
