#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       do
        {
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = (0 | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
            {
             barrier();
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
       barrier();
      }
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-6.9), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(534.707)), bvec2(true, false))).y))))
      barrier();
    }
   else
    {
    }
  }
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       do
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x))) - 0.0), _GLF_IDENTITY(float(_GLF_IDENTITY(mat4x3(_GLF_IDENTITY(injectionSwitch.x, float(mat4x3(injectionSwitch.x, 1.0, 0.0, 1.0, 1.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), abs(1.0), 0.0, 0.0, 0.0, 0.0))), 1.0, 0.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), clamp(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, _GLF_IDENTITY(0.0, max(0.0, 0.0)))), dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, _GLF_IDENTITY(0.0, clamp(0.0, _GLF_IDENTITY(0.0, 1.0 * (0.0)), _GLF_IDENTITY(0.0, min(0.0, 0.0))))))))), _GLF_IDENTITY(1.0, float(mat2x4(1.0, cos(0.0), 1.0, 1.0, 1.0, 1.0, 0.0, cos(0.0)))), 1.0, 1.0, log(1.0), cos(0.0), 1.0, 0.0, 1.0), (mat4x3(_GLF_IDENTITY(injectionSwitch.x, float(mat4x3(injectionSwitch.x, 1.0, 0.0, 1.0, 1.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), abs(1.0), 0.0, 0.0, 0.0, 0.0))), 1.0, 0.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), clamp(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0))))), 1.0, 1.0, 1.0, log(1.0), cos(0.0), 1.0, 0.0, 1.0)) - mat4x3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))), float(mat2(_GLF_IDENTITY(float(_GLF_IDENTITY(mat4x3(_GLF_IDENTITY(injectionSwitch.x, float(mat4x3(injectionSwitch.x, 1.0, 0.0, 1.0, 1.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), abs(1.0), 0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-7038.9175) : 0.0))))), 1.0, 0.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), clamp(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0))))), 1.0, 1.0, 1.0, log(1.0), cos(0.0), 1.0, 0.0, 1.0), (mat4x3(_GLF_IDENTITY(injectionSwitch.x, float(mat4x3(injectionSwitch.x, 1.0, 0.0, 1.0, 1.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), abs(1.0), 0.0, 0.0, 0.0, 0.0))), _GLF_IDENTITY(1.0, 1.0 * (1.0)), 0.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), _GLF_IDENTITY(vec3(1.0, 0.0, 0.0), (vec3(1.0, 0.0, 0.0)) + tan(vec3(0.0, 0.0, 0.0)))), _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), clamp(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0))))), 1.0, 1.0, 1.0, log(1.0), cos(0.0), 1.0, 0.0, 1.0)) - mat4x3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))), clamp(float(_GLF_IDENTITY(mat4x3(_GLF_IDENTITY(injectionSwitch.x, float(mat4x3(injectionSwitch.x, 1.0, 0.0, 1.0, 1.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), abs(1.0), 0.0, 0.0, 0.0, 0.0))), 1.0, 0.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), clamp(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0))))), 1.0, 1.0, 1.0, log(1.0), cos(0.0), 1.0, 0.0, 1.0), (mat4x3(_GLF_IDENTITY(injectionSwitch.x, float(mat4x3(injectionSwitch.x, 1.0, 0.0, 1.0, 1.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), abs(1.0), 0.0, 0.0, 0.0, 0.0))), 1.0, 0.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), clamp(dot(_GLF_IDENTITY(vec3(1.0, 0.0, 0.0), min(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0))), vec3(1.0, 0.0, 0.0)), dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0))))), 1.0, 1.0, 1.0, log(1.0), cos(0.0), 1.0, 0.0, 1.0)) - mat4x3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))), float(_GLF_IDENTITY(mat4x3(_GLF_IDENTITY(injectionSwitch.x, float(mat4x3(injectionSwitch.x, 1.0, 0.0, 1.0, 1.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), abs(1.0), 0.0, 0.0, 0.0, 0.0))), 1.0, 0.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), clamp(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0))))), 1.0, 1.0, 1.0, _GLF_IDENTITY(log(1.0), min(log(1.0), log(1.0))), cos(0.0), 1.0, 0.0, 1.0), (mat4x3(_GLF_IDENTITY(injectionSwitch.x, float(mat4x3(injectionSwitch.x, 1.0, 0.0, 1.0, 1.0, _GLF_IDENTITY(0.0, (0.0) / 1.0), _GLF_ZERO(_GLF_IDENTITY(0.0, (0.0) + 0.0), injectionSwitch.x), abs(1.0), 0.0, 0.0, 0.0, 0.0))), 1.0, 0.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), clamp(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0))))), 1.0, 1.0, 1.0, log(1.0), cos(0.0), 1.0, 0.0, 1.0)) - mat4x3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))), float(_GLF_IDENTITY(mat4x3(_GLF_IDENTITY(injectionSwitch.x, float(mat4x3(injectionSwitch.x, 1.0, 0.0, 1.0, 1.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), abs(1.0), 0.0, 0.0, 0.0, 0.0))), 1.0, 0.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), _GLF_IDENTITY(clamp(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0))), mix(float(_GLF_FUZZED((5.5 + -4.6))), float(clamp(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)))), bool(true))))), 1.0, 1.0, 1.0, log(1.0), cos(0.0), 1.0, 0.0, _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0))), (mat4x3(_GLF_IDENTITY(injectionSwitch.x, float(mat4x3(injectionSwitch.x, 1.0, 0.0, 1.0, 1.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), abs(1.0), 0.0, 0.0, 0.0, 0.0))), _GLF_IDENTITY(1.0, float(_GLF_IDENTITY(mat2x3(_GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, (1.0) - 0.0), 1.0, 1.0)), 0.0, 1.0, 0.0, 1.0, 0.0), mat2x3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0) + (mat2x3(_GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, (1.0) - 0.0), 1.0, 1.0)), 0.0, 1.0, 0.0, 1.0, 0.0))))), 0.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), clamp(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0))))), 1.0, 1.0, 1.0, log(1.0), cos(0.0), 1.0, 0.0, 1.0)) - mat4x3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))))), 0.0, _GLF_ZERO(0.0, injectionSwitch.x), abs(0.0))))), abs(1.0) * (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(_GLF_IDENTITY(mat4x3(_GLF_IDENTITY(injectionSwitch.x, float(mat4x3(injectionSwitch.x, 1.0, 0.0, 1.0, 1.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), abs(1.0), 0.0, 0.0, _GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0))), 1.0, 0.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(_GLF_IDENTITY(1.0, min(1.0, 1.0)), 0.0, 0.0)), _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), clamp(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0))))), 1.0, 1.0, 1.0, log(1.0), cos(0.0), 1.0, 0.0, 1.0), (mat4x3(_GLF_IDENTITY(injectionSwitch.x, float(mat4x3(injectionSwitch.x, 1.0, 0.0, 1.0, 1.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), abs(1.0), 0.0, 0.0, 0.0, 0.0))), 1.0, 0.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), clamp(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), dot(vec3(1.0, 0.0, 0.0), vec3(_GLF_IDENTITY(1.0, min(1.0, 1.0)), 0.0, 0.0)), dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0))))), 1.0, 1.0, 1.0, log(_GLF_IDENTITY(1.0, max(1.0, 1.0))), cos(0.0), 1.0, 0.0, 1.0)) - mat4x3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))), float(mat2(_GLF_IDENTITY(float(_GLF_IDENTITY(mat4x3(_GLF_IDENTITY(injectionSwitch.x, float(mat4x3(injectionSwitch.x, 1.0, 0.0, 1.0, 1.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), abs(1.0), 0.0, 0.0, 0.0, 0.0))), 1.0, 0.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), clamp(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), dot(vec3(_GLF_IDENTITY(1.0, mix(float(_GLF_IDENTITY(_GLF_FUZZED(-4350.4056), min(_GLF_FUZZED(-4350.4056), _GLF_IDENTITY(_GLF_FUZZED(-4350.4056), clamp(_GLF_FUZZED(-4350.4056), _GLF_IDENTITY(_GLF_FUZZED(-4350.4056), (_GLF_FUZZED(-4350.4056)) * 1.0), _GLF_FUZZED(-4350.4056)))))), float(1.0), bool(true))), 0.0, 0.0), vec3(1.0, 0.0, 0.0))))), 1.0, 1.0, 1.0, log(1.0), cos(0.0), 1.0, 0.0, 1.0), (mat4x3(_GLF_IDENTITY(injectionSwitch.x, float(mat4x3(injectionSwitch.x, 1.0, 0.0, 1.0, 1.0, 0.0, _GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), (_GLF_ZERO(0.0, injectionSwitch.x)) - 0.0), abs(1.0), 0.0, 0.0, 0.0, 0.0))), 1.0, 0.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), clamp(dot(_GLF_IDENTITY(vec3(1.0, _GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0), mix(vec3(_GLF_FUZZED(-5.4), _GLF_FUZZED((false ? vec2(-4.9, 9553.7282).s : -4.4)), _GLF_FUZZED((+ -39.64))), vec3((vec3(1.0, _GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0))[0], (vec3(1.0, _GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0))[1], (vec3(1.0, _GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0))[2]), bvec3(true, true, true))), vec3(1.0, 0.0, 0.0)), dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0))))), 1.0, 1.0, 1.0, _GLF_IDENTITY(log(1.0), _GLF_IDENTITY(float(mat3(log(1.0), round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), determinant(mat4(0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0)), _GLF_IDENTITY(dot(vec4(0.0, 0.0, 0.0, 0.0), vec4(1.0, 1.0, determinant(mat2(1.0, 0.0, _GLF_IDENTITY(0.0, float(mat3x2(0.0, 1.0, 1.0, tan(0.0), 0.0, 1.0))), 1.0)), cos(0.0))), dot(vec4(0.0, 0.0, 0.0, 0.0), vec4(1.0, 1.0, determinant(mat2(1.0, 0.0, 0.0, 1.0)), cos(0.0)))), 1.0, 0.0, _GLF_IDENTITY(1.0, float(mat4x2(1.0, 1.0, sqrt(0.0), length(vec3(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))), 1.0, 0.0, 1.0, sqrt(0.0)))), 1.0, 0.0)), mix(float(float(mat3(log(1.0), round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), determinant(mat4(0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0)), _GLF_IDENTITY(dot(vec4(0.0, 0.0, 0.0, 0.0), vec4(1.0, 1.0, determinant(mat2(1.0, 0.0, 0.0, 1.0)), cos(0.0))), dot(vec4(0.0, 0.0, 0.0, 0.0), vec4(1.0, 1.0, determinant(mat2(1.0, 0.0, 0.0, 1.0)), cos(0.0)))), 1.0, 0.0, 1.0, 1.0, 0.0))), _GLF_IDENTITY(float(_GLF_FUZZED(7142.2697)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? float(_GLF_FUZZED(7142.2697)) : _GLF_FUZZED(2.6))), bool(false)))), _GLF_IDENTITY(cos(0.0), mix(float(_GLF_IDENTITY(cos(0.0), float(mat3x4(cos(0.0), 1.0, 0.0, 0.0, 1.0, 1.0, abs(0.0), 1.0, 1.0, 0.0, 1.0, 1.0)))), float(_GLF_FUZZED((682.242 * -60.05))), bool(false))), 1.0, 0.0, 1.0)) - mat4x3(0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-77.98)), bool(false))), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))), clamp(float(_GLF_IDENTITY(mat4x3(_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(mat4x3(injectionSwitch.x, 1.0, 0.0, 1.0, 1.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), abs(1.0), 0.0, 0.0, 0.0, 0.0)), mix(float(_GLF_FUZZED(-303.689)), float(_GLF_IDENTITY(float(mat4x3(injectionSwitch.x, 1.0, 0.0, 1.0, 1.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), abs(1.0), 0.0, 0.0, 0.0, 0.0)), (float(mat4x3(injectionSwitch.x, 1.0, 0.0, 1.0, 1.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), abs(1.0), 0.0, 0.0, 0.0, 0.0))) / 1.0)), bool(true)))), 1.0, 0.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(_GLF_IDENTITY(1.0, _GLF_IDENTITY(max(1.0, _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(78.08)))), (_GLF_IDENTITY(max(1.0, _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(78.08)))), max(_GLF_IDENTITY(max(1.0, _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(78.08)))), min(max(1.0, _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(78.08)))), max(1.0, _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(78.08)))))), max(1.0, _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(78.08))))))) / cos(0.0))), 0.0, 0.0)), clamp(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0))))), 1.0, 1.0, 1.0, log(1.0), cos(0.0), 1.0, 0.0, 1.0), (mat4x3(_GLF_IDENTITY(injectionSwitch.x, float(mat4x3(injectionSwitch.x, 1.0, 0.0, 1.0, 1.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), abs(1.0), 0.0, 0.0, 0.0, 0.0))), 1.0, 0.0, _GLF_IDENTITY(dot(vec3(1.0, _GLF_IDENTITY(0.0, max(_GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, float(vec2(0.0, 1.0)))) / 1.0), 0.0)), 0.0), vec3(1.0, 0.0, 0.0)), _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), clamp(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), dot(vec3(1.0, 0.0, 0.0), vec3(1.0, _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), 0.0))))), 1.0, 1.0, 1.0, log(1.0), cos(0.0), 1.0, 0.0, 1.0)) - mat4x3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))), float(_GLF_IDENTITY(mat4x3(_GLF_IDENTITY(injectionSwitch.x, float(mat4x3(injectionSwitch.x, 1.0, 0.0, 1.0, 1.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), abs(1.0), 0.0, 0.0, 0.0, 0.0))), 1.0, 0.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), clamp(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0))))), 1.0, 1.0, 1.0, log(1.0), cos(0.0), 1.0, 0.0, 1.0), (mat4x3(_GLF_IDENTITY(injectionSwitch.x, float(mat4x3(injectionSwitch.x, 1.0, 0.0, 1.0, 1.0, _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(smoothstep(3476.1281, 6.1, -8.4)) : 0.0)), _GLF_ZERO(0.0, injectionSwitch.x), abs(1.0), 0.0, 0.0, 0.0, 0.0))), 1.0, 0.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), _GLF_IDENTITY(dot(vec3(_GLF_IDENTITY(1.0, max(1.0, _GLF_IDENTITY(1.0, float(mat2(1.0, 0.0, 1.0, 1.0))))), 0.0, 0.0), vec3(1.0, 0.0, 0.0)), clamp(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0))))), 1.0, 1.0, 1.0, log(1.0), cos(0.0), 1.0, 0.0, 1.0)) - mat4x3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, (0.0) - 0.0), _GLF_IDENTITY(0.0, clamp(0.0, 0.0, _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(968.542)), float(0.0), bool(true))))), 0.0, 0.0, 0.0))), float(_GLF_IDENTITY(mat4x3(_GLF_IDENTITY(injectionSwitch.x, float(mat4x3(injectionSwitch.x, 1.0, 0.0, 1.0, 1.0, 0.0, _GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), clamp(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), (true ? _GLF_ZERO(0.0, injectionSwitch.x) : _GLF_FUZZED(-8.3))), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))), abs(1.0), 0.0, 0.0, 0.0, 0.0))), 1.0, 0.0, _GLF_IDENTITY(dot(vec3(_GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(3.9)), bool(false))), 1.0, _GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(7.5)), float(1.0), bool(true))))))), 0.0, 0.0), vec3(_GLF_IDENTITY(1.0, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 1.0 : _GLF_FUZZED(-6.1))), 0.0, 0.0)), _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, _GLF_IDENTITY(0.0, (0.0) - tan(0.0)))), clamp(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0))))), 1.0, 1.0, 1.0, log(1.0), cos(0.0), 1.0, 0.0, _GLF_IDENTITY(1.0, clamp(1.0, 1.0, _GLF_IDENTITY(1.0, clamp(1.0, _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), 1.0))))), (mat4x3(_GLF_IDENTITY(injectionSwitch.x, float(mat4x3(injectionSwitch.x, 1.0, 0.0, 1.0, 1.0, 0.0, _GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), (_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), min(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)))) * 1.0), abs(1.0), 0.0, 0.0, 0.0, 0.0))), 1.0, 0.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), clamp(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), dot(vec3(1.0, 0.0, 0.0), vec3(1.0, _GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, min(0.0, 0.0))) * _GLF_IDENTITY(dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0)), dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0)))), 0.0)), dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0))))), 1.0, 1.0, 1.0, log(1.0), cos(0.0), 1.0, 0.0, 1.0)) - mat4x3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))))), 0.0, _GLF_ZERO(0.0, injectionSwitch.x), abs(0.0))))))), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(_GLF_IDENTITY(mat4x3(_GLF_IDENTITY(injectionSwitch.x, float(mat4x3(injectionSwitch.x, 1.0, 0.0, 1.0, 1.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), abs(1.0), 0.0, 0.0, 0.0, 0.0))), 1.0, 0.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), clamp(dot(vec3(1.0, 0.0, _GLF_IDENTITY(0.0, clamp(0.0, 0.0, _GLF_IDENTITY(0.0, max(0.0, 0.0))))), vec3(1.0, 0.0, 0.0)), dot(vec3(1.0, 0.0, _GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, float(mat2x4(0.0, abs(0.0), 1.0, 0.0, 0.0, 1.0, 0.0, 1.0))), _GLF_IDENTITY(0.0, max(0.0, 0.0))))), vec3(1.0, 0.0, 0.0)), dot(vec3(1.0, 0.0, 0.0), vec3(_GLF_IDENTITY(1.0, clamp(1.0, _GLF_IDENTITY(1.0, sqrt(0.0) + (1.0)), 1.0)), 0.0, 0.0))))), 1.0, 1.0, 1.0, log(1.0), cos(0.0), 1.0, 0.0, 1.0), (mat4x3(_GLF_IDENTITY(injectionSwitch.x, float(mat4x3(injectionSwitch.x, 1.0, 0.0, 1.0, 1.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), abs(1.0), 0.0, 0.0, 0.0, 0.0))), 1.0, 0.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), clamp(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, _GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0)), dot(vec3(1.0, 0.0, 0.0), vec3(1.0, _GLF_IDENTITY(0.0, _GLF_IDENTITY(float(mat3x2(0.0, 1.0, 1.0, 1.0, 0.0, 0.0)), float(mat4(_GLF_IDENTITY(float(mat3x2(0.0, 1.0, 1.0, 1.0, 0.0, 0.0)), (false ? _GLF_FUZZED(5688.2785) : float(mat3x2(0.0, 1.0, 1.0, 1.0, 0.0, 0.0)))), 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, exp(0.0), 1.0, 0.0, 1.0, 1.0)))), 0.0)), dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0))))), 1.0, 1.0, 1.0, log(1.0), cos(0.0), 1.0, 0.0, 1.0)) - mat4x3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, clamp(0.0, _GLF_IDENTITY(0.0, min(0.0, 0.0)), _GLF_IDENTITY(0.0, 1.0 * (0.0)))), 0.0, 0.0, 0.0))), float(mat2(_GLF_IDENTITY(float(_GLF_IDENTITY(mat4x3(_GLF_IDENTITY(injectionSwitch.x, float(mat4x3(injectionSwitch.x, 1.0, 0.0, 1.0, 1.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), abs(1.0), 0.0, 0.0, 0.0, 0.0))), 1.0, 0.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), clamp(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), _GLF_IDENTITY(dot(_GLF_IDENTITY(vec3(1.0, 0.0, 0.0), clamp(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0))), vec3(1.0, 0.0, 0.0)), min(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)))), dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0))))), 1.0, 1.0, 1.0, log(1.0), cos(0.0), 1.0, 0.0, 1.0), (mat4x3(_GLF_IDENTITY(injectionSwitch.x, float(mat4x3(injectionSwitch.x, 1.0, 0.0, 1.0, 1.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), abs(1.0), 0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, clamp(_GLF_IDENTITY(0.0, (0.0) / cos(0.0)), 0.0, 0.0))))), 1.0, 0.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(1.8)), float(0.0), bool(true)))), vec3(1.0, 0.0, 0.0)), _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), clamp(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), _GLF_IDENTITY(vec3(1.0, 0.0, 0.0), min(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)))), max(dot(vec3(1.0, 0.0, 0.0), _GLF_IDENTITY(vec3(1.0, 0.0, 0.0), min(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)))), dot(vec3(1.0, 0.0, 0.0), _GLF_IDENTITY(vec3(1.0, 0.0, 0.0), min(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)))))), dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0))))), 1.0, 1.0, 1.0, log(1.0), cos(0.0), 1.0, 0.0, 1.0)) - mat4x3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))), clamp(float(_GLF_IDENTITY(mat4x3(_GLF_IDENTITY(injectionSwitch.x, float(mat4x3(_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x)), injectionSwitch.x)), 1.0, 0.0, 1.0, 1.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), abs(1.0), 0.0, 0.0, 0.0, 0.0))), 1.0, 0.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-3.3)), float(0.0), bool(true))))), _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, _GLF_IDENTITY(0.0, _GLF_IDENTITY(float(mat4(0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(1.0, (1.0) / 1.0), sqrt(1.0), 1.0, 1.0)), (float(mat4(0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, sqrt(1.0), 1.0, 1.0))) - 0.0)))), clamp(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0))))), 1.0, 1.0, 1.0, log(1.0), cos(0.0), 1.0, 0.0, 1.0), (mat4x3(_GLF_IDENTITY(injectionSwitch.x, float(mat4x3(injectionSwitch.x, 1.0, 0.0, 1.0, _GLF_IDENTITY(1.0, max(1.0, 1.0)), 0.0, _GLF_ZERO(0.0, injectionSwitch.x), abs(1.0), 0.0, 0.0, 0.0, 0.0))), 1.0, 0.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), _GLF_IDENTITY(dot(vec3(1.0, _GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0), vec3(1.0, 0.0, 0.0)), clamp(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0))))), 1.0, 1.0, 1.0, log(1.0), cos(_GLF_IDENTITY(0.0, max(0.0, 0.0))), 1.0, 0.0, 1.0)) - mat4x3(0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))), float(_GLF_IDENTITY(mat4x3(_GLF_IDENTITY(injectionSwitch.x, float(mat4x3(injectionSwitch.x, 1.0, 0.0, _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(_GLF_IDENTITY(9.8, (9.8) + 0.0)))), 1.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), abs(1.0), 0.0, _GLF_IDENTITY(0.0, max(_GLF_IDENTITY(0.0, (0.0) * 1.0), _GLF_IDENTITY(0.0, max(0.0, 0.0)))), 0.0, 0.0))), 1.0, 0.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), clamp(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0))))), 1.0, 1.0, 1.0, log(1.0), cos(0.0), 1.0, 0.0, 1.0), (mat4x3(_GLF_IDENTITY(injectionSwitch.x, float(mat4x3(injectionSwitch.x, 1.0, 0.0, 1.0, 1.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), abs(1.0), 0.0, 0.0, 0.0, 0.0))), 1.0, 0.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), clamp(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0))))), 1.0, 1.0, 1.0, log(1.0), cos(0.0), 1.0, 0.0, 1.0)) - mat4x3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))), float(_GLF_IDENTITY(mat4x3(_GLF_IDENTITY(injectionSwitch.x, float(mat4x3(injectionSwitch.x, 1.0, 0.0, 1.0, 1.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), abs(1.0), 0.0, 0.0, 0.0, 0.0))), 1.0, 0.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), clamp(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0))))), 1.0, 1.0, 1.0, log(1.0), cos(0.0), 1.0, 0.0, 1.0), (mat4x3(_GLF_IDENTITY(injectionSwitch.x, float(mat4x3(injectionSwitch.x, 1.0, 0.0, 1.0, 1.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), abs(1.0), 0.0, 0.0, 0.0, 0.0))), 1.0, 0.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), _GLF_IDENTITY(dot(vec3(1.0, 0.0, _GLF_IDENTITY(0.0, (0.0) + 0.0)), vec3(1.0, _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(length(vec3(-536.071, -96.81, -460.435))) : 0.0)), 0.0)), clamp(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), dot(_GLF_IDENTITY(vec3(1.0, 0.0, 0.0), (vec3(1.0, 0.0, 0.0)) + log(vec3(1.0, 1.0, 1.0))), vec3(1.0, 0.0, 0.0)), dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0))))), 1.0, 1.0, 1.0, log(1.0), cos(0.0), 1.0, 0.0, 1.0)) - mat4x3(0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, clamp(0.0, _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(340.388)), _GLF_IDENTITY(float(0.0), mix(float(_GLF_IDENTITY(float(0.0), mix(float(float(0.0)), float(_GLF_FUZZED(-981.656)), bool(false)))), float(_GLF_FUZZED(-6371.2154)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), bool(true))), 0.0)), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, min(0.0, _GLF_IDENTITY(0.0, (0.0) - 0.0))), 0.0))))), 0.0, _GLF_ZERO(0.0, injectionSwitch.x), abs(0.0))))), abs(1.0) * (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(_GLF_IDENTITY(mat4x3(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), float(mat4x3(injectionSwitch.x, 1.0, 0.0, 1.0, 1.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), abs(1.0), 0.0, 0.0, _GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0))), 1.0, 0.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(_GLF_IDENTITY(1.0, min(1.0, 1.0)), 0.0, 0.0)), _GLF_IDENTITY(dot(vec3(_GLF_IDENTITY(1.0, (1.0) / 1.0), 0.0, 0.0), vec3(1.0, 0.0, 0.0)), clamp(dot(vec3(1.0, 0.0, 0.0), vec3(_GLF_IDENTITY(1.0, (true ? _GLF_IDENTITY(1.0, max(1.0, _GLF_IDENTITY(1.0, (1.0) + 0.0))) : _GLF_FUZZED(5.3))), 0.0, 0.0)), dot(vec3(1.0, 0.0, 0.0), _GLF_IDENTITY(vec3(1.0, 0.0, 0.0), clamp(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)))), dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0))))), 1.0, 1.0, 1.0, log(1.0), cos(0.0), 1.0, 0.0, 1.0), (mat4x3(_GLF_IDENTITY(injectionSwitch.x, float(mat4x3(injectionSwitch.x, 1.0, 0.0, 1.0, 1.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), abs(1.0), 0.0, 0.0, 0.0, 0.0))), 1.0, 0.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), clamp(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), dot(vec3(1.0, 0.0, 0.0), vec3(_GLF_IDENTITY(1.0, min(1.0, 1.0)), 0.0, _GLF_IDENTITY(0.0, max(_GLF_IDENTITY(0.0, min(0.0, 0.0)), 0.0)))), dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0))))), 1.0, 1.0, 1.0, log(_GLF_IDENTITY(1.0, max(1.0, _GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, _GLF_IDENTITY(1.0, max(1.0, 1.0)))), 1.0))))), cos(0.0), 1.0, 0.0, 1.0)) - mat4x3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))), float(mat2(_GLF_IDENTITY(float(_GLF_IDENTITY(mat4x3(_GLF_IDENTITY(injectionSwitch.x, float(mat4x3(injectionSwitch.x, 1.0, 0.0, 1.0, 1.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), abs(1.0), 0.0, 0.0, 0.0, 0.0))), 1.0, 0.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), clamp(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), dot(vec3(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-4350.4056)), float(1.0), bool(true))), 0.0, 0.0), vec3(1.0, 0.0, 0.0))))), 1.0, 1.0, 1.0, log(1.0), cos(0.0), 1.0, 0.0, 1.0), (mat4x3(_GLF_IDENTITY(injectionSwitch.x, float(mat4x3(injectionSwitch.x, 1.0, 0.0, 1.0, 1.0, 0.0, _GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), (_GLF_ZERO(0.0, injectionSwitch.x)) - 0.0), abs(1.0), 0.0, 0.0, 0.0, 0.0))), 1.0, 0.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), clamp(dot(vec3(1.0, _GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0), vec3(1.0, 0.0, 0.0)), dot(_GLF_IDENTITY(vec3(1.0, 0.0, 0.0), (_GLF_IDENTITY(true ? vec3(1.0, 0.0, 0.0) : _GLF_FUZZED(vec3(-1.4, -182.865, -94.62)), max(true ? vec3(1.0, 0.0, 0.0) : _GLF_FUZZED(vec3(-1.4, -182.865, -94.62)), true ? vec3(1.0, 0.0, 0.0) : _GLF_FUZZED(vec3(-1.4, -182.865, -94.62)))))), vec3(1.0, 0.0, 0.0)), dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0))))), 1.0, 1.0, 1.0, _GLF_IDENTITY(log(1.0), _GLF_IDENTITY(float(mat3(log(1.0), round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), determinant(mat4(0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0)), _GLF_IDENTITY(dot(vec4(0.0, 0.0, 0.0, 0.0), vec4(1.0, 1.0, determinant(mat2(1.0, 0.0, 0.0, 1.0)), cos(0.0))), dot(vec4(0.0, 0.0, _GLF_IDENTITY(0.0, _GLF_IDENTITY(float(_GLF_IDENTITY(mat3x2(0.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), exp(_GLF_IDENTITY(0.0, (0.0) - _GLF_IDENTITY(0.0, (0.0) - 0.0))), 1.0, 1.0, determinant(mat2(1.0, 0.0, 1.0, _GLF_IDENTITY(_GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, 0.0))), (_GLF_IDENTITY(_GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, 0.0))), float(mat4x3(_GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, 0.0))), 1.0, 1.0, 0.0, round(length(normalize(vec2(1.0, 1.0)))), 0.0, 0.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0)))) - 0.0)))), transpose(transpose(mat3x2(0.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), exp(0.0), 1.0, 1.0, determinant(mat2(1.0, 0.0, 1.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, 0.0)))))))))), mix(float(_GLF_FUZZED(-562.677)), float(float(_GLF_IDENTITY(mat3x2(0.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), exp(0.0), 1.0, 1.0, determinant(mat2(1.0, 0.0, 1.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), mix(float(dot(vec2(1.0, 0.0), vec2(1.0, 0.0))), float(_GLF_FUZZED(427.879)), bool(false))))))), transpose(transpose(mat3x2(0.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), exp(0.0), 1.0, 1.0, determinant(mat2(1.0, 0.0, 1.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, 0.0))))))))))), bool(true)))), 0.0), vec4(1.0, 1.0, determinant(mat2(1.0, 0.0, 0.0, _GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), 1.0, 1.0)))), cos(0.0)))), 1.0, 0.0, 1.0, 1.0, 0.0)), _GLF_IDENTITY(mix(float(float(mat3(log(1.0), round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), determinant(mat4(0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0)), _GLF_IDENTITY(dot(vec4(0.0, 0.0, 0.0, 0.0), vec4(1.0, 1.0, determinant(mat2(1.0, 0.0, 0.0, 1.0)), cos(0.0))), dot(vec4(0.0, 0.0, 0.0, 0.0), vec4(1.0, 1.0, determinant(mat2(1.0, 0.0, 0.0, 1.0)), cos(0.0)))), 1.0, 0.0, 1.0, 1.0, 0.0))), float(_GLF_FUZZED(7142.2697)), bool(false)), (mix(float(float(mat3(log(1.0), round(length(normalize(vec4(1.0, _GLF_IDENTITY(1.0, (1.0) - 0.0), 1.0, 1.0)))), determinant(mat4(0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0)), _GLF_IDENTITY(dot(vec4(0.0, 0.0, 0.0, 0.0), vec4(1.0, 1.0, determinant(mat2(1.0, 0.0, 0.0, 1.0)), cos(0.0))), dot(vec4(0.0, 0.0, 0.0, 0.0), vec4(1.0, 1.0, determinant(mat2(1.0, 0.0, 0.0, 1.0)), cos(0.0)))), 1.0, 0.0, 1.0, 1.0, 0.0))), float(_GLF_FUZZED(7142.2697)), bool(false))) - 0.0))), cos(0.0), 1.0, 0.0, 1.0)) - mat4x3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))), clamp(float(_GLF_IDENTITY(mat4x3(_GLF_IDENTITY(injectionSwitch.x, float(mat4x3(injectionSwitch.x, 1.0, 0.0, 1.0, 1.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), abs(1.0), 0.0, 0.0, 0.0, 0.0))), 1.0, 0.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, _GLF_IDENTITY(0.0, min(0.0, 0.0)))), _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(_GLF_IDENTITY(1.0, max(1.0, _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(78.08))))), 0.0, 0.0)), clamp(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0))))), 1.0, 1.0, 1.0, log(1.0), cos(0.0), 1.0, 0.0, 1.0), (mat4x3(_GLF_IDENTITY(injectionSwitch.x, float(mat4x3(injectionSwitch.x, 1.0, 0.0, _GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, max(1.0, 1.0)), 1.0)), 1.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), abs(1.0), 0.0, 0.0, 0.0, 0.0))), 1.0, 0.0, _GLF_IDENTITY(_GLF_IDENTITY(dot(_GLF_IDENTITY(vec3(1.0, _GLF_IDENTITY(0.0, max(_GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, float(vec2(0.0, 1.0)))) / 1.0), 0.0)), 0.0), (vec3(1.0, _GLF_IDENTITY(0.0, max(_GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, float(vec2(0.0, 1.0)))) / 1.0), 0.0)), 0.0)) * vec3(1.0, 1.0, 1.0)), vec3(1.0, 0.0, 0.0)), _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), clamp(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0))))), (_GLF_IDENTITY(dot(_GLF_IDENTITY(vec3(1.0, _GLF_IDENTITY(0.0, max(_GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, float(vec2(0.0, 1.0)))) / 1.0), 0.0)), 0.0), (vec3(1.0, _GLF_IDENTITY(0.0, max(_GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, float(vec2(0.0, 1.0)))) / 1.0), 0.0)), 0.0)) * vec3(1.0, 1.0, 1.0)), vec3(1.0, 0.0, 0.0)), _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), clamp(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)))))) * 1.0), 1.0, 1.0, 1.0, log(1.0), cos(0.0), 1.0, 0.0, 1.0)) - mat4x3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, max(0.0, 0.0))) * 1.0), 0.0, 0.0, 0.0))), float(_GLF_IDENTITY(mat4x3(_GLF_IDENTITY(injectionSwitch.x, float(mat4x3(injectionSwitch.x, 1.0, 0.0, 1.0, 1.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), abs(1.0), 0.0, 0.0, 0.0, 0.0))), 1.0, 0.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), _GLF_IDENTITY(_GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-8.7) : dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(7.4)), float(_GLF_IDENTITY(0.0, max(_GLF_IDENTITY(0.0, min(0.0, 0.0)), 0.0))), bool(true))))))), clamp(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, _GLF_IDENTITY(0.0, min(0.0, 0.0)))), dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0))))), 1.0, 1.0, 1.0, log(1.0), cos(0.0), 1.0, 0.0, 1.0), (mat4x3(_GLF_IDENTITY(injectionSwitch.x, float(mat4x3(injectionSwitch.x, 1.0, 0.0, 1.0, 1.0, _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(_GLF_IDENTITY(smoothstep(3476.1281, 6.1, -8.4), float(_GLF_IDENTITY(mat4x3(smoothstep(3476.1281, 6.1, -8.4), 1.0, 0.0, 0.0, _GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + 0.0), injectionSwitch.x))), 1.0, tan(0.0), 1.0, 0.0, 1.0, 0.0, 0.0), _GLF_IDENTITY(mat3(1.0) * (mat4x3(smoothstep(3476.1281, 6.1, -8.4), 1.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, tan(0.0), 1.0, 0.0, 1.0, 0.0, 0.0)), mat4x3(mat4(mat3(1.0) * (mat4x3(smoothstep(3476.1281, 6.1, -8.4), 1.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(1.0, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-42.36)), float(1.0), bool(true))) : _GLF_FUZZED(-612.586))), tan(0.0), 1.0, 0.0, _GLF_IDENTITY(1.0, (1.0) + tan(0.0)), 0.0, 0.0))))))))) : 0.0)), _GLF_ZERO(0.0, injectionSwitch.x), abs(1.0), 0.0, 0.0, 0.0, 0.0))), 1.0, 0.0, _GLF_IDENTITY(dot(vec3(_GLF_IDENTITY(1.0, float(_GLF_IDENTITY(vec4(1.0, 1.0, 1.0, 0.0), clamp(vec4(1.0, 1.0, 1.0, 0.0), _GLF_IDENTITY(vec4(1.0, 1.0, 1.0, 0.0), (false ? _GLF_FUZZED(vec4(4015.5080, -94.14, -61.56, 7.5)) : vec4(1.0, 1.0, 1.0, 0.0))), vec4(1.0, 1.0, 1.0, 0.0))))), 0.0, 0.0), vec3(1.0, 0.0, 0.0)), _GLF_IDENTITY(dot(_GLF_IDENTITY(vec3(_GLF_IDENTITY(1.0, max(1.0, _GLF_IDENTITY(1.0, float(mat2(1.0, 0.0, 1.0, 1.0))))), 0.0, 0.0), cross(vec3(_GLF_IDENTITY(_GLF_IDENTITY(598.744, (true ? 598.744 : _GLF_FUZZED(9962.8336))), float(mat2x4(_GLF_IDENTITY(598.744, (true ? 598.744 : _GLF_FUZZED(9962.8336))), 1.0, 1.0, 1.0, 1.0, 1.0, cos(0.0), 1.0))), -73.24, -5683.6355), vec3(598.744, _GLF_IDENTITY(-73.24, (-73.24) * 1.0), -5683.6355)) + (vec3(_GLF_IDENTITY(1.0, max(1.0, _GLF_IDENTITY(1.0, float(mat2(1.0, 0.0, 1.0, 1.0))))), 0.0, 0.0))), vec3(1.0, 0.0, 0.0)), clamp(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0))))), 1.0, 1.0, 1.0, _GLF_IDENTITY(log(1.0), max(log(1.0), _GLF_IDENTITY(log(1.0), min(log(1.0), _GLF_IDENTITY(log(1.0), min(log(1.0), log(1.0))))))), cos(0.0), 1.0, 0.0, 1.0)) - mat4x3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, (0.0) - 0.0), 0.0, 0.0, 0.0, 0.0))), float(_GLF_IDENTITY(mat4x3(_GLF_IDENTITY(injectionSwitch.x, float(mat4x3(injectionSwitch.x, 1.0, 0.0, 1.0, 1.0, 0.0, _GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), clamp(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), (true ? _GLF_ZERO(0.0, injectionSwitch.x) : _GLF_FUZZED(-8.3))), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))), _GLF_IDENTITY(abs(1.0), mix(float(_GLF_FUZZED(7.0)), float(abs(1.0)), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), 0.0, 0.0, 0.0, 0.0))), 1.0, 0.0, _GLF_IDENTITY(dot(vec3(_GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(3.9)), bool(false))), 1.0, _GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(7.5)), float(1.0), bool(true))))))), 0.0, 0.0), vec3(_GLF_IDENTITY(_GLF_IDENTITY(1.0, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 1.0 : _GLF_FUZZED(-6.1))), (_GLF_IDENTITY(1.0, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 1.0 : _GLF_FUZZED(-6.1)))) - 0.0), 0.0, 0.0)), _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), clamp(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0))))), 1.0, 1.0, 1.0, log(1.0), cos(0.0), 1.0, 0.0, _GLF_IDENTITY(1.0, clamp(1.0, 1.0, _GLF_IDENTITY(1.0, clamp(1.0, _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), 1.0))))), (mat4x3(_GLF_IDENTITY(injectionSwitch.x, float(mat4x3(injectionSwitch.x, 1.0, 0.0, 1.0, 1.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), abs(1.0), 0.0, 0.0, 0.0, 0.0))), 1.0, _GLF_IDENTITY(0.0, _GLF_IDENTITY(float(_GLF_IDENTITY(float(0.0), mix(float(_GLF_IDENTITY(float(0.0), min(float(0.0), float(0.0)))), float(_GLF_IDENTITY(_GLF_FUZZED(8539.5307), mix(float(_GLF_FUZZED(3.7)), float(_GLF_FUZZED(8539.5307)), bool(true)))), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), mix(float(_GLF_FUZZED(8586.3852)), float(float(_GLF_IDENTITY(float(0.0), mix(float(_GLF_IDENTITY(float(0.0), min(float(0.0), float(0.0)))), float(_GLF_FUZZED(8539.5307)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), bool(true)))), _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), _GLF_IDENTITY(dot(vec3(1.0, _GLF_IDENTITY(0.0, (0.0) / 1.0), 0.0), vec3(1.0, 0.0, 0.0)), clamp(dot(vec3(1.0, 0.0, _GLF_IDENTITY(0.0, (0.0) - 0.0)), vec3(1.0, 0.0, 0.0)), _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), min(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)))), dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0))))), 1.0, 1.0, 1.0, log(1.0), cos(0.0), 1.0, 0.0, 1.0)) - mat4x3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))))), 0.0, _GLF_ZERO(0.0, injectionSwitch.x), abs(0.0)))))))) * _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(3818.3616)))), mix(float(injectionSwitch.x), float(_GLF_FUZZED(float(29490u))), bool(false)))) - sin(0.0)) > injectionSwitch.y))))
          {
           do
            {
             barrier();
             if(_GLF_DEAD(false))
              {
               do
                {
                 barrier();
                }
               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
              }
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y))));
          }
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (_GLF_IDENTITY(int(6), max(int(6), int(6)))) ^ 0))) >> _GLF_IDENTITY(int(6), int(6)))); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            barrier();
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     do
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
    }
  }
 else
  {
  }
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 do
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((false), ((false)) && true) || false)))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
    }
   else
    {
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     barrier();
    }
   else
    {
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)), _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(2151.3015, -60.96))))))) - vec2(0.0, 0.0)).y)), true, false)))))
  barrier();
 uint workgroup_size = gl_WorkGroupSize.x;
 do
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(false));
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = workgroup_size * workgroup_id;
 uint subgroup_base = subgroup_id * subgroup_size;
 if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
  barrier();
 uint virtual_gid = workgroup_base + subgroup_base + subgroup_local_id;
 uint next_virtual_gid = workgroup_base + subgroup_base + ((subgroup_local_id + 1) % subgroup_size);
 uint read = atomicLoad(buf[virtual_gid], _GLF_IDENTITY(_GLF_IDENTITY(4, _GLF_IDENTITY((_GLF_IDENTITY(4, (1 & 1) * (_GLF_IDENTITY(4, (4) + 0)))), (_GLF_IDENTITY((_GLF_IDENTITY(4, (1 & 1) * (_GLF_IDENTITY(4, (4) + 0)))), ((_GLF_IDENTITY(_GLF_IDENTITY(4, (4) ^ 0), (1 & 1) * (_GLF_IDENTITY(4, (4) + 0))))) ^ 0)) | ((_GLF_IDENTITY(4, (1 & 1) * (_GLF_IDENTITY(4, (4) + 0)))))) - 0), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(4, _GLF_IDENTITY((_GLF_IDENTITY(4, (1 & 1) * (_GLF_IDENTITY(_GLF_IDENTITY(4, (0 << _GLF_IDENTITY(int(5), int(5))) ^ (_GLF_IDENTITY(4, min(4, 4)))), (4) + 0)))), (_GLF_IDENTITY((_GLF_IDENTITY(4, (1 & 1) * (_GLF_IDENTITY(4, (4) + 0)))), ((_GLF_IDENTITY(4, (1 & 1) * (_GLF_IDENTITY(4, (4) + 0))))) ^ 0)) | ((_GLF_IDENTITY(4, (1 & 1) * (_GLF_IDENTITY(4, (4) + 0)))))) - 0)), (~ (_GLF_IDENTITY(4, _GLF_IDENTITY((_GLF_IDENTITY(4, (1 & 1) * (_GLF_IDENTITY(4, (4) + 0)))), (_GLF_IDENTITY((_GLF_IDENTITY(4, (1 & 1) * (_GLF_IDENTITY(4, (4) + 0)))), ((_GLF_IDENTITY(4, (1 & 1) * (_GLF_IDENTITY(4, (4) + 0))))) ^ 0)) | ((_GLF_IDENTITY(4, (1 & 1) * (_GLF_IDENTITY(4, (4) + 0)))))) - 0))) ^ (0 ^ 0)))), 64, 2);
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   do
    {
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6)))); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         barrier();
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true, true)), bool(bvec2(bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true, true)), false))))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       barrier();
      }
    }
   for(int _injected_loop_counter = (1 ^ 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         barrier();
        }
      }
    }
  }
 if(_GLF_IDENTITY((subgroup_local_id % 2), ~ (~ ((subgroup_local_id % 2)))) == 0)
  {
   subgroupAll(false);
   if(_GLF_DEAD(false))
    barrier();
   do
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))).x > injectionSwitch.y))) || false)))
      {
      }
     else
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > ((0 << _GLF_IDENTITY(int(4), int(4))) ^ 0)); _injected_loop_counter --)
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 barrier();
                }
               else
                {
                }
              }
             if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(630.656) : injectionSwitch.y)))), bool(bvec4(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0))))) > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(vec2(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0), abs(0.0))), (float(vec2(_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[_GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(80309)))])).y) + 0.0), abs(0.0)))) - 0.0)))), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))))) && true), true, false, true)))))
              {
               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                {
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(_GLF_IDENTITY(bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), ! (! (bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))))
                  {
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_WRAPPED_IF_TRUE(true))
                        {
                         barrier();
                        }
                       else
                        {
                        }
                      }
                    }
                   if(_GLF_DEAD(false))
                    barrier();
                   barrier();
                  }
                 else
                  {
                   for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                  }
                }
               else
                {
                }
              }
            }
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec2(bvec2(false, true))))))))))
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         for(int _injected_loop_counter = int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(cos(541.055)))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
          {
           barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
        }
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       barrier();
      }
     if(_GLF_DEAD(false))
      {
       do
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             barrier();
            }
           else
            {
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         atomicStore(buf[next_virtual_gid], uint(1), 4, 64, 4);
        }
       else
        {
        }
       do
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, true && (true))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (false)))))
          {
          }
         else
          {
           do
            {
             if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, bool(bvec4(false, true, false, false)))))), ! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, bool(bvec4(false, true, false, false)))))), (_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, true, false, false)), true && (_GLF_IDENTITY(bool(bvec4(false, true, false, false)), (bool(bvec4(false, true, false, false))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))) && true)))))
              barrier();
             barrier();
             if(_GLF_DEAD(false))
              barrier();
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
          }
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
   else
    {
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       barrier();
      }
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, float(vec3(injectionSwitch.y, 0.0, 0.0))))), injectionSwitch.y)))), ! (! (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)))), max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, float(vec3(injectionSwitch.y, 0.0, 0.0))))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0), (injectionSwitch.y) + 0.0))))))))))
      {
      }
     else
      {
       for(int _injected_loop_counter = (1 & ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6)))); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 ^ 0)); _injected_loop_counter --)
        {
         barrier();
        }
       do
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = _GLF_IDENTITY(0, (0) | (0)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         barrier();
        }
       for(int _injected_loop_counter = ((int(_GLF_ZERO(0.0, injectionSwitch.x)) | 0) ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         for(int _injected_loop_counter = int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 & 1)); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(6)) ^ 0)))); _injected_loop_counter ++)
              {
               barrier();
              }
            }
           do
            {
             if(_GLF_DEAD(false))
              barrier();
             do
              {
               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                }
               else
                {
                 barrier();
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
      }
    }
   subgroupAll(false);
   if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
    barrier();
   for(int _injected_loop_counter = (0 ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 & 1)); _injected_loop_counter ++)
    {
     for(int _injected_loop_counter = (0 | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(730.064))), _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], (injectionSwitch[1]) / 1.0))).y, injectionSwitch.y))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(730.064))), _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], (injectionSwitch[1]) / 1.0))).y, injectionSwitch.y))))), false || (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(730.064))), _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], (injectionSwitch[1]) / 1.0))).y, injectionSwitch.y)))))))), bool(bvec4(! (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(730.064))), _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], (injectionSwitch[1]) / 1.0))).y, injectionSwitch.y))))), false || (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(730.064))), _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], (injectionSwitch[1]) / 1.0))).y, injectionSwitch.y)))))))), false, true, true))))))
      {
       atomicStore(buf[next_virtual_gid], uint(1), 4, 64, 4);
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           barrier();
          }
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           barrier();
          }
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
        barrier();
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
      barrier();
     barrier();
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 subgroupBarrier();
 if(_GLF_DEAD(false))
  barrier();
 atomicStore(buf[_GLF_IDENTITY(virtual_gid, clamp(virtual_gid, virtual_gid, _GLF_IDENTITY(virtual_gid, _GLF_IDENTITY((_GLF_IDENTITY(virtual_gid, clamp(virtual_gid, virtual_gid, virtual_gid))) / 1u, ~ (_GLF_IDENTITY(~ ((_GLF_IDENTITY(virtual_gid, clamp(virtual_gid, virtual_gid, virtual_gid))) / 1u), (_GLF_IDENTITY(~ ((_GLF_IDENTITY(virtual_gid, clamp(virtual_gid, virtual_gid, virtual_gid))) / 1u), min(_GLF_IDENTITY(~ ((_GLF_IDENTITY(virtual_gid, clamp(virtual_gid, virtual_gid, virtual_gid))) / 1u), clamp(~ ((_GLF_IDENTITY(virtual_gid, clamp(virtual_gid, virtual_gid, virtual_gid))) / 1u), ~ ((_GLF_IDENTITY(virtual_gid, clamp(virtual_gid, virtual_gid, virtual_gid))) / 1u), _GLF_IDENTITY(~ ((_GLF_IDENTITY(virtual_gid, clamp(virtual_gid, virtual_gid, virtual_gid))) / 1u), uint(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (~ ((_GLF_IDENTITY(virtual_gid, clamp(virtual_gid, virtual_gid, virtual_gid))) / 1u))))), ~ (_GLF_IDENTITY((_GLF_IDENTITY(virtual_gid, _GLF_IDENTITY(clamp(virtual_gid, virtual_gid, virtual_gid), max(clamp(virtual_gid, virtual_gid, virtual_gid), clamp(virtual_gid, virtual_gid, virtual_gid))))), max((_GLF_IDENTITY(virtual_gid, _GLF_IDENTITY(clamp(virtual_gid, virtual_gid, virtual_gid), max(clamp(virtual_gid, virtual_gid, virtual_gid), clamp(_GLF_IDENTITY(virtual_gid, ((0u & 190063u) | 0u) ^ (virtual_gid)), virtual_gid, virtual_gid))))), (_GLF_IDENTITY(virtual_gid, _GLF_IDENTITY(clamp(virtual_gid, virtual_gid, virtual_gid), max(clamp(virtual_gid, virtual_gid, virtual_gid), clamp(virtual_gid, virtual_gid, virtual_gid))))))) / 1u)))) >> 0u))))))], read, 4, 64, 4);
 if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], (injectionSwitch[1]) - 0.0))).y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     do
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
        }
       else
        {
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
   for(int _injected_loop_counter = _GLF_IDENTITY(1, (_GLF_IDENTITY(1, ~ (~ (1)))) / 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(0), int(0))); _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 | 1)); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (1 ^ 1)); _injected_loop_counter --)
        {
         barrier();
        }
      }
    }
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END
BUFFER checker DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected_checker DATA_TYPE uint32 SIZE 8388096 FILL 0

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 
  BIND BUFFER checker AS storage DESCRIPTOR_SET 0 BINDING 2 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT checker EQ_BUFFER expected_checker
