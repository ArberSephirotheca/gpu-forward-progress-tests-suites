#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(false))
  return;
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = _GLF_IDENTITY(gl_WorkGroupSize, (_GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) | (gl_WorkGroupSize))) - uvec3(0u, 0u, 0u)).x;
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = workgroup_size * _GLF_IDENTITY(workgroup_id, (_GLF_IDENTITY(workgroup_id, max(workgroup_id, workgroup_id))) - 0u);
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 uint subgroup_base = subgroup_id * subgroup_size;
 for(int _injected_loop_counter = _GLF_IDENTITY(0, 0 ^ (_GLF_IDENTITY(0, (0) >> 0))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 & (1 | 1))); _GLF_IDENTITY(_injected_loop_counter ++, 0 ^ (_injected_loop_counter ++)))
  {
   if(_GLF_DEAD(false))
    return;
  }
 uint virtual_gid = workgroup_base + subgroup_base + subgroup_local_id;
 uint next_virtual_gid = workgroup_base + subgroup_base + ((subgroup_local_id + 1) % subgroup_size);
 uint read = _GLF_IDENTITY(atomicLoad(buf[virtual_gid], 4, 64, 2), (atomicLoad(buf[virtual_gid], 4, 64, 2)) ^ 0u);
 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))
  {
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = _GLF_IDENTITY(1, _GLF_IDENTITY((_GLF_IDENTITY(1, max(1, 1))), max((_GLF_IDENTITY(1, max(1, 1))), (_GLF_IDENTITY(1, max(1, 1))))) | (1)); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > (1 ^ 1), ! (! (_injected_loop_counter > (1 ^ 1))))); _injected_loop_counter --)
      {
       return;
      }
    }
  }
 else
  {
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   do
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
        break;
      }
     else
      {
       do
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               do
                {
                 return;
                }
               while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)))));
              }
             else
              {
              }
            }
           continue;
          }
         do
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, (true) || false))) && (false)), true && (_GLF_IDENTITY(false, ! (! (false))))), (injectionSwitch.x > injectionSwitch.y))))
              return;
             if(_GLF_DEAD(false))
              return;
             if((subgroup_local_id % 2) == _GLF_IDENTITY(0, max(_GLF_IDENTITY(0, clamp(_GLF_IDENTITY(0, ~ (~ (0))), 0, _GLF_IDENTITY(0, (0) / 1))), _GLF_IDENTITY(_GLF_IDENTITY(0, int(ivec2(0, 0))), _GLF_IDENTITY((_GLF_IDENTITY(0, int(ivec2(0, 0)))), max((_GLF_IDENTITY(0, int(ivec2(0, 0)))), (_GLF_IDENTITY(0, int(ivec2(0, 0)))))) >> 0))))
              {
               for(int _injected_loop_counter = 0; _GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < 1), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < 1), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter < 1))))))), (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < 1), (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < 1), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < 1), true && (_GLF_WRAPPED_LOOP(_injected_loop_counter < 1))), true && (_GLF_WRAPPED_LOOP(_injected_loop_counter < 1)))) && _GLF_IDENTITY(true, false || (_GLF_IDENTITY(_GLF_IDENTITY(true, (true) || false), _GLF_IDENTITY((true) || false, ! (! ((true) || false)))))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && _GLF_IDENTITY(true, ! (! (true)))); _injected_loop_counter ++)
                {
                 switch(_GLF_SWITCH(0))
                  {
                   case 28:
                   uvec4(91206u, 195831u, 31121u, 14359u);
                   case 52:
                   bvec2(bvec3(false, false, true));
                   case 0:
                   case 56:
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     switch(_GLF_SWITCH((0 >> _GLF_IDENTITY(int(7), int(7)))))
                      {
                       case 10:
                       ;
                       if(_GLF_DEAD(false))
                        break;
                       case 0:
                       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                        {
                         subgroupAll(_GLF_IDENTITY(false, _GLF_IDENTITY(! (_GLF_IDENTITY(! (false), _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec3(! (false), false, true)), true && (bool(bvec3(! (false), false, true)))), _GLF_IDENTITY((bool(bvec3(! (_GLF_IDENTITY(false, true && (false))), false, true))) && true, bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_IDENTITY((bool(bvec3(! (false), false, true))) && true, ((bool(_GLF_IDENTITY(bvec3(! (false), false, true), bvec3(bvec4(bvec3(! (false), false, true), false))))) && true) || _GLF_IDENTITY(false, (false) && true)), true && (_GLF_IDENTITY((bool(bvec3(! (false), false, true))), true && ((bool(bvec3(! (false), false, true))))) && true)), true, false), bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_IDENTITY((bool(bvec3(! (false), false, true))) && true, ((bool(_GLF_IDENTITY(bvec3(! (false), false, true), bvec3(bvec4(bvec3(! (false), false, true), false))))) && true) || _GLF_IDENTITY(false, (false) && true)), true && (_GLF_IDENTITY((bool(bvec3(! (false), false, true))), true && ((bool(bvec3(! (false), false, true))))) && true)), true, false), bvec3(bvec4(bvec3(_GLF_IDENTITY(_GLF_IDENTITY((bool(bvec3(! (false), false, true))) && true, ((bool(_GLF_IDENTITY(bvec3(! (false), false, true), bvec3(bvec4(bvec3(! (false), false, true), false))))) && true) || _GLF_IDENTITY(false, (false) && true)), true && (_GLF_IDENTITY((bool(bvec3(! (false), false, true))), true && ((bool(bvec3(! (false), false, true))))) && true)), true, false), false))), false))), bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_IDENTITY((bool(bvec3(! (false), false, true))) && true, true && _GLF_IDENTITY(((bool(bvec3(! (false), false, true))) && true), true && (((bool(bvec3(! (false), false, true))) && true)))), true, false), bvec3(bvec4(bvec3(_GLF_IDENTITY((bool(bvec3(! (false), false, true))) && true, true && ((bool(bvec3(_GLF_IDENTITY(! (false), (! (false)) && true), false, true))) && true)), true, false), true))), false)))))))), (! (_GLF_IDENTITY(! (false), _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec3(! (false), false, true)), true && (bool(bvec3(! (false), false, true)))), _GLF_IDENTITY((bool(bvec3(! (false), false, true))) && true, bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(bool(bvec3(! (false), false, true)), false || (bool(bvec3(! (false), false, true))))) && true, ((bool(_GLF_IDENTITY(bvec3(! (false), _GLF_IDENTITY(false, ! (! (false))), true), bvec3(bvec4(_GLF_IDENTITY(bvec3(! (false), false, true), bvec3(bvec3(bvec3(! (false), false, true)))), false))))) && true) || _GLF_IDENTITY(false, (false) && true)), true && (_GLF_IDENTITY((bool(bvec3(! (false), false, true))), true && ((bool(bvec3(! (false), false, true))))) && true)), _GLF_IDENTITY(true, ! (! (true))), false), bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_IDENTITY((bool(bvec3(! (false), false, true))) && true, true && _GLF_IDENTITY(((bool(bvec3(! (false), false, true))) && true), true && (((bool(bvec3(! (false), false, true))) && true)))), true, false), bvec3(bvec4(bvec3(_GLF_IDENTITY((bool(bvec3(! (false), false, true))) && true, true && ((bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(! (false), (! (false)) && true), ! (! (_GLF_IDENTITY(! (false), (! (false)) && true)))), false, true))) && true)), true, false), true))), false))))))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))));
                        }
                       case 22:
                       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false)))))), false || (_GLF_IDENTITY(false, bool(bool(false)))))))
                        continue;
                       break;
                       do
                        {
                         if(_GLF_DEAD(false))
                          return;
                        }
                       while(_GLF_WRAPPED_LOOP(false));
                       default:
                       1;
                      }
                    }
                   else
                    {
                    }
                   case 2:
                   if(_GLF_DEAD(false))
                    continue;
                   if(_GLF_DEAD(false))
                    continue;
                   break;
                   case 6:
                   vec4 _GLF_SWITCH_4_0v[62];
                   default:
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     1;
                    }
                  }
                 if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) || false)))
                  continue;
                }
               do
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(false))
                    break;
                   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                    {
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_WRAPPED_IF_FALSE(false))
                        {
                        }
                       else
                        {
                         return;
                        }
                      }
                    }
                   break;
                  }
                 if(_GLF_DEAD(false))
                  {
                   switch(_GLF_SWITCH(((0 | _GLF_IDENTITY(0, max(0, 0))) ^ 0)))
                    {
                     case 0:
                     case 76:
                     case 97:
                     case 72:
                     case 43:
                     case 41:
                     case 21:
                     case 67:
                     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                      {
                       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                        {
                         return;
                        }
                      }
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      continue;
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      break;
                     case 26:
                     do
                      {
                       if(_GLF_WRAPPED_IF_TRUE(true))
                        {
                         switch(_GLF_SWITCH(0))
                          {
                           case 67:
                           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                            break;
                           uint _GLF_SWITCH_1_0v, _GLF_SWITCH_1_1v[20];
                           case 70:
                           if(_GLF_DEAD(false))
                            continue;
                           if(_GLF_WRAPPED_IF_FALSE(false))
                            {
                            }
                           else
                            {
                             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), ~ (~ (int(7)))))) >> _GLF_IDENTITY(int(7), int(7)))); _injected_loop_counter ++)
                              {
                               if(_GLF_DEAD(false))
                                break;
                               do
                                {
                                 if(_GLF_WRAPPED_IF_TRUE(true))
                                  {
                                   for(int _injected_loop_counter = (int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 << _GLF_IDENTITY(int(6), int(6)))); _injected_loop_counter --)
                                    {
                                     uvec2(81572u, 3973u);
                                    }
                                  }
                                 else
                                  {
                                  }
                                }
                               while(_GLF_WRAPPED_LOOP(false));
                              }
                            }
                           if(_GLF_DEAD(false))
                            break;
                           if(_GLF_DEAD(false))
                            continue;
                           case 0:
                           case 73:
                           case 90:
                           case 60:
                           case 23:
                           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                            return;
                           case 10:
                           if(_GLF_DEAD(false))
                            return;
                           do
                            {
                             barrier();
                             if(_GLF_DEAD(false))
                              continue;
                             if(_GLF_DEAD(false))
                              break;
                            }
                           while(_GLF_WRAPPED_LOOP(false));
                           break;
                           case 15:
                           greaterThan(ivec2(20296, 29531), ivec2(-28437, 9160));
                           default:
                           1;
                          }
                        }
                       else
                        {
                        }
                      }
                     while(_GLF_WRAPPED_LOOP(false));
                     if(_GLF_DEAD(false))
                      continue;
                     break;
                     case 75:
                     vec2 _GLF_SWITCH_4_0v;
                     case 85:
                     mat4x2 _GLF_SWITCH_4_1v, _GLF_SWITCH_4_2v;
                     default:
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      break;
                     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, true, false)))))
                      return;
                     1;
                    }
                  }
                }
               while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (_GLF_IDENTITY(! (false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(! (false), bool(bvec4(! (false), true, false, false)))))) || false))), (injectionSwitch.x > injectionSwitch.y))), (_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, false, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).x < injectionSwitch.y)), false)), (_GLF_IDENTITY(bool(bvec4(false, false, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch), clamp((injectionSwitch), _GLF_IDENTITY((injectionSwitch), max((injectionSwitch), (injectionSwitch))), (injectionSwitch))) * mat2(1.0)).x < injectionSwitch.y)), false)), (bool(bvec4(false, false, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).x < injectionSwitch.y)), false))) && true)) && true)), (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y)))) && true));
               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))
                {
                }
               else
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      return;
                     switch(_GLF_SWITCH((0 << _GLF_IDENTITY(int(8), int(8)))))
                      {
                       case 47:
                       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (int(5)) | (_GLF_IDENTITY(int(5), max(int(5), int(5))))))) >> _GLF_IDENTITY(int(5), int(_GLF_IDENTITY(5, (true ? 5 : _GLF_FUZZED(62506))))))); _injected_loop_counter ++)
                        {
                         (mat3x2(-934.320, 5492.8091, -999.570, -4.1, -8022.1583, 5904.0851));
                        }
                       case 0:
                       case 85:
                       case 29:
                       case 17:
                       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
                        return;
                       if(_GLF_DEAD(false))
                        return;
                       case 99:
                       case 2:
                       case 87:
                       if(_GLF_DEAD(false))
                        break;
                       case 55:
                       return;
                       break;
                       case 58:
                       (mat3x4(3.5, 5.8, -56.08, 0.5, -926.132, -7.0, 8543.0354, 0.9, _GLF_IDENTITY(7.5, mix(float(7.5), float(_GLF_FUZZED(-1728.3640)), bool(false))), 2990.0360, 1.8, -241.323) + -360.992);
                       case 39:
                       bvec4 _GLF_SWITCH_4_0v;
                       default:
                       1;
                      }
                    }
                  }
                }
               do
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, false)))))
                  return;
                }
               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 do
                  {
                   for(int _injected_loop_counter = 1; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, (0) >> 0)), _GLF_IDENTITY(bool(bvec2(_GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, (0) >> 0)), false)), ! (! (bool(bvec2(_GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, (0) >> 0)), false)))))); _injected_loop_counter --)
                    {
                     atomicStore(buf[next_virtual_gid], uint(1), 4, _GLF_IDENTITY(64, _GLF_IDENTITY(~ (~ (64)), (~ (~ (64))) - 0)), _GLF_IDENTITY(4, 0 | (4)));
                    }
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
              }
             else
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, false, false)))))
                  {
                   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (true)))))
                    {
                     switch(_GLF_SWITCH(0))
                      {
                       case 94:
                       uint _GLF_SWITCH_5_0v, _GLF_SWITCH_5_1v, _GLF_SWITCH_5_2v;
                       case 27:
                       if(_GLF_WRAPPED_IF_FALSE(false))
                        {
                        }
                       else
                        {
                         lessThanEqual((_GLF_IDENTITY(abs(ivec4(-23479, 75623, -78019, -50876)), ~ (_GLF_IDENTITY(~ (abs(ivec4(-23479, 75623, -78019, -50876))), (~ (abs(ivec4(-23479, 75623, -78019, -50876)))) >> ivec4(0, 0, 0, 0)))) + (59931)), ivec4(-51031, -53885, _GLF_IDENTITY(-40888, max(-40888, _GLF_IDENTITY(-40888, clamp(-40888, -40888, -40888)))), -6347));
                        }
                       case 0:
                       case 20:
                       case 22:
                       switch(_GLF_SWITCH(int(_GLF_ZERO(0.0, injectionSwitch.x))))
                        {
                         case 17:
                         ;
                         case 40:
                         if(_GLF_DEAD(false))
                          return;
                         if(_GLF_DEAD(false))
                          {
                           do
                            {
                             switch(_GLF_SWITCH(0))
                              {
                               case 0:
                               case 63:
                               case 19:
                               case 34:
                               do
                                {
                                 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                                  {
                                   if(_GLF_WRAPPED_IF_TRUE(true))
                                    {
                                     switch(_GLF_SWITCH(0))
                                      {
                                       case 0:
                                       case 79:
                                       case 3:
                                       case 41:
                                       return;
                                       break;
                                       case 84:
                                       uvec4 _GLF_SWITCH_5_0v;
                                       default:
                                       1;
                                      }
                                    }
                                   else
                                    {
                                    }
                                  }
                                }
                               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                               break;
                               case 88:
                               -84801;
                               default:
                               1;
                              }
                            }
                           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                          }
                         if(_GLF_WRAPPED_IF_FALSE(false))
                          {
                          }
                         else
                          {
                           workgroup_size;
                           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                            {
                             for(int _injected_loop_counter = (0 | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                              {
                               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (int(_GLF_ONE(1.0, injectionSwitch.y)) ^ 1)); _injected_loop_counter --)
                                {
                                 if(true)
                                  {
                                   vec4 _GLF_SWITCH_0_0v;
                                   uint _GLF_SWITCH_0_1v;
                                   mat4x3 _GLF_SWITCH_0_2v, _GLF_SWITCH_0_3v[28], _GLF_SWITCH_0_4v;
                                   if(_GLF_DEAD(false))
                                    break;
                                  }
                                 else
                                  {
                                   if(_GLF_WRAPPED_IF_FALSE(false))
                                    {
                                     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) && true)))))
                                      continue;
                                    }
                                   else
                                    {
                                     for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), ~ (~ (int(_GLF_IDENTITY(3, (3) | (3)))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 ^ 0)); _injected_loop_counter ++)
                                      {
                                       for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != (0 >> _GLF_IDENTITY(int(6), int(_GLF_IDENTITY(6, _GLF_IDENTITY(~ (~ (6)), (~ (~ (6))) / (1 | 1)))))), (_injected_loop_counter != (0 >> _GLF_IDENTITY(int(6), int(_GLF_IDENTITY(6, ~ (~ (6))))))) || false)); _injected_loop_counter --)
                                        {
                                         switch(_GLF_SWITCH(0))
                                          {
                                           case 0:
                                           case 97:
                                           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3((_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y))), true, true), bvec3(bvec4(bvec3((_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y))), true, true), true)))), true && (bool(_GLF_IDENTITY(bvec3((_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y))), true, true), bvec3(bvec4(bvec3((_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y))), true, true), true))))))) || false)))
                                            break;
                                           case 28:
                                           if(_GLF_DEAD(false))
                                            continue;
                                           case 60:
                                           case 44:
                                           if(_GLF_WRAPPED_IF_TRUE(true))
                                            {
                                             (- _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)))), max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(_GLF_IDENTITY(1.0, 0.0 + (_GLF_IDENTITY(1.0, (1.0) / 1.0))), 1.0)))), min(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)))), (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0))))) * mat2(_GLF_IDENTITY(1.0, 1.0 * (1.0)))), _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)))))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)))), vec2(mat2x3(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)))), 0.0, 1.0, 1.0, 0.0))))));
                                            }
                                           else
                                            {
                                            }
                                           break;
                                           case 76:
                                           do
                                            {
                                             ;
                                            }
                                           while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bvec2(false, true)))));
                                           default:
                                           1;
                                          }
                                        }
                                      }
                                    }
                                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                    return;
                                   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) + abs(vec2(0.0, 0.0))).y))))
                                    {
                                    }
                                   else
                                    {
                                     if(_GLF_WRAPPED_IF_FALSE(false))
                                      {
                                      }
                                     else
                                      {
                                       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
                                        {
                                         for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 ^ 0)); _injected_loop_counter ++)
                                          {
                                           mat2x4(2.7, -875.962, 89.62, -169.648, -481.203, 9.6, -6.0, 704.343);
                                          }
                                        }
                                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                        {
                                         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) || false))))
                                          break;
                                         break;
                                        }
                                      }
                                    }
                                   if(_GLF_DEAD(false))
                                    {
                                     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 >> _GLF_IDENTITY(int(8), int(_GLF_IDENTITY(8, (8) / int(_GLF_ONE(1.0, injectionSwitch.y))))))); _injected_loop_counter --)
                                      {
                                       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                                        {
                                         return;
                                         if(_GLF_DEAD(false))
                                          break;
                                        }
                                      }
                                    }
                                   ivec2 _GLF_SWITCH_0_5v;
                                   if(_GLF_WRAPPED_IF_TRUE(true))
                                    {
                                     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                                      {
                                       for(int _injected_loop_counter = (0 | _GLF_IDENTITY(0, ~ (_GLF_IDENTITY(~ (0), min(_GLF_IDENTITY(~ (0), min(~ (0), ~ (0))), ~ (0)))))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                                        {
                                         vec4(_GLF_IDENTITY(_GLF_IDENTITY(-5.4, clamp(_GLF_IDENTITY(-5.4, clamp(_GLF_IDENTITY(-5.4, (-5.4) - 0.0), -5.4, -5.4)), -5.4, _GLF_IDENTITY(-5.4, (_GLF_IDENTITY(-5.4, (-5.4) / 1.0)) / 1.0))), float(vec3(-5.4, round(length(normalize(1.0))), _GLF_IDENTITY(sin(0.0), mix(float(_GLF_IDENTITY(sin(0.0), max(sin(0.0), sin(0.0)))), float(_GLF_FUZZED(-6.2)), bool(false)))))), 536.955, -925.081, -8.8);
                                         if(_GLF_DEAD(false))
                                          return;
                                        }
                                      }
                                     else
                                      {
                                      }
                                    }
                                   else
                                    {
                                    }
                                   mat2x3 _GLF_SWITCH_0_6v, _GLF_SWITCH_0_7v[13], _GLF_SWITCH_0_8v;
                                   vec3(38.11, -7.6, -8.3);
                                   if(_GLF_WRAPPED_IF_TRUE(true))
                                    {
                                     abs(ivec4(99118, 69979, -67078, 39673));
                                    }
                                   else
                                    {
                                    }
                                  }
                                }
                              }
                            }
                           else
                            {
                            }
                           for(                           mat4x3((mat2x4(1.1, -4.4, -3.6, 7022.1472, -98.03, 33.42, 6.7, -7.9) / -30.03));
 (9.6 != -4135.2931); bvec3(false, false, true))
                            {
                             switch(_GLF_SWITCH(0))
                              {
                               case 53:
                               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                                {
                                 ;
                                }
                               case 82:
                               ivec2 _GLF_SWITCH_5_0v, _GLF_SWITCH_5_1v;
                               case 0:
                               case 20:
                               case 12:
                               if(_GLF_DEAD(false))
                                {
                                 if(_GLF_DEAD(false))
                                  continue;
                                 continue;
                                }
                               case 68:
                               case 45:
                               do
                                {
                                 switch(_GLF_SWITCH(((-98407 << 18589) & (0 ^ 0))))
                                  {
                                   case 91:
                                   ivec4 _GLF_SWITCH_4_0v;
                                   case 0:
                                   case 55:
                                   case 76:
                                   case 99:
                                   case 98:
                                   case 71:
                                   case 97:
                                   do
                                    {
                                     switch(_GLF_SWITCH(0))
                                      {
                                       case 76:
                                       if(_GLF_DEAD(false))
                                        break;
                                       mat4x2 _GLF_SWITCH_2_0v[37];
                                       case 0:
                                       mat2x3 _GLF_SWITCH_0_9v;
                                       (uvec2(151007u, 175283u) >> uvec2(46350u, _GLF_IDENTITY(109545u, (109545u) - 0u)));
                                       break;
                                       case 85:
                                       if(_GLF_DEAD(false))
                                        break;
                                       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (_GLF_IDENTITY(0, _GLF_IDENTITY(~ (~ (0)), _GLF_IDENTITY(int(_GLF_IDENTITY(int(_GLF_IDENTITY(~ (~ (0)), max(~ (~ (0)), ~ (~ (0))))), ~ (~ (int(_GLF_IDENTITY(~ (~ (0)), max(~ (~ (0)), ~ (~ (0))))))))), max(int(_GLF_IDENTITY(int(_GLF_IDENTITY(~ (~ (0)), max(~ (~ (0)), ~ (~ (0))))), ~ (~ (int(_GLF_IDENTITY(~ (~ _GLF_IDENTITY((0), (true ? (0) : _GLF_FUZZED(ivec3(74122, 18588, 27682).z)))), max(~ (~ (0)), ~ (~ (0))))))))), _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(int(_GLF_IDENTITY(~ (~ (0)), max(~ (~ (0)), ~ (~ (0))))), ~ (~ (int(_GLF_IDENTITY(~ (~ (0)), max(~ (~ (0)), ~ (~ (0))))))))), (int(_GLF_IDENTITY(int(_GLF_IDENTITY(~ (~ (0)), max(~ (~ (0)), ~ (~ (0))))), ~ (~ (int(_GLF_IDENTITY(~ (~ (0)), max(~ (~ (0)), ~ (~ (0)))))))))) | 0), (_GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(int(_GLF_IDENTITY(~ (~ (0)), max(~ (~ (0)), ~ (~ (0))))), ~ (~ (int(_GLF_IDENTITY(~ (~ (0)), max(~ (~ (0)), ~ (~ (0))))))))), (int(_GLF_IDENTITY(int(_GLF_IDENTITY(~ (~ (0)), max(~ (~ (0)), ~ (~ (0))))), ~ (~ (int(_GLF_IDENTITY(~ (~ (0)), max(~ (~ (0)), ~ (~ (0)))))))))) | 0), 0 | (_GLF_IDENTITY(int(_GLF_IDENTITY(int(_GLF_IDENTITY(~ (~ (0)), max(~ (~ (0)), ~ (~ (0))))), ~ (~ (int(_GLF_IDENTITY(~ (~ (0)), max(~ (~ (0)), ~ (~ (0))))))))), (int(_GLF_IDENTITY(int(_GLF_IDENTITY(~ (~ (0)), max(~ (~ (0)), ~ (~ (0))))), ~ (~ (int(_GLF_IDENTITY(~ (~ (0)), max(~ (~ (0)), ~ (~ (0)))))))))) | 0)))) | (_GLF_IDENTITY(int(_GLF_IDENTITY(int(_GLF_IDENTITY(~ (~ (0)), max(~ (~ (0)), ~ (~ (0))))), ~ (~ (int(_GLF_IDENTITY(~ (~ (0)), max(~ (~ (0)), ~ (~ (0))))))))), (int(_GLF_IDENTITY(int(_GLF_IDENTITY(~ (~ (0)), max(~ (~ (0)), ~ (~ (0))))), ~ (~ (int(_GLF_IDENTITY(~ (~ (0)), max(~ (~ (0)), ~ (~ (0)))))))))) | 0))))))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(3, 0 ^ (_GLF_IDENTITY(3, _GLF_IDENTITY(int(ivec4(3, 1, (_GLF_IDENTITY(0 >> _GLF_IDENTITY(int(5), int(5)), clamp(_GLF_IDENTITY(0 >> _GLF_IDENTITY(int(5), int(5)), (0 >> _GLF_IDENTITY(int(5), int(5))) | 0), 0 >> _GLF_IDENTITY(int(5), int(5)), 0 >> _GLF_IDENTITY(int(5), int(5))))), 0)), _GLF_IDENTITY((int(ivec4(3, 1, (0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(5), int(5)), (_GLF_IDENTITY(int(5), int(5))) | (_GLF_IDENTITY(int(5), int(5))))), 0))) * 1, ((int(ivec4(3, 1, (_GLF_IDENTITY(0 >> _GLF_IDENTITY(int(5), int(5)), (0 >> _GLF_IDENTITY(int(5), int(5))) | 0)), 0))) * 1) + int(_GLF_ZERO(0.0, injectionSwitch.x)))))))), min(int(_GLF_IDENTITY(3, 0 ^ (_GLF_IDENTITY(3, _GLF_IDENTITY(int(ivec4(3, 1, (0 >> _GLF_IDENTITY(int(5), int(5))), 0)), (int(ivec4(3, 1, (0 >> _GLF_IDENTITY(int(5), int(5))), 0))) * 1))))), int(_GLF_IDENTITY(3, _GLF_IDENTITY(0 ^ (_GLF_IDENTITY(3, _GLF_IDENTITY(int(ivec4(3, 1, (0 >> _GLF_IDENTITY(int(5), int(5))), 0)), (int(ivec4(3, 1, (0 >> _GLF_IDENTITY(int(5), int(5))), 0))) * 1))), _GLF_IDENTITY(int(_GLF_IDENTITY(ivec4(0 ^ (_GLF_IDENTITY(3, _GLF_IDENTITY(int(ivec4(3, 1, (0 >> _GLF_IDENTITY(int(5), int(5))), 0)), (int(ivec4(3, 1, (0 >> _GLF_IDENTITY(int(5), int(5))), 0))) * 1))), 0, 0, 1), (ivec4(0 ^ (_GLF_IDENTITY(3, _GLF_IDENTITY(int(ivec4(3, 1, (0 >> _GLF_IDENTITY(int(5), int(5))), 0)), (int(ivec4(3, 1, (0 >> _GLF_IDENTITY(int(5), int(5))), 0))) * 1))), 0, 0, 1)) / ((ivec4(1, 1, 1, 1) << _GLF_IDENTITY(ivec4(7), ivec4(7))) >> _GLF_IDENTITY(ivec4(7), ivec4(7))))), (_GLF_IDENTITY(int(_GLF_IDENTITY(ivec4(0 ^ (_GLF_IDENTITY(3, _GLF_IDENTITY(int(ivec4(3, 1, (0 >> _GLF_IDENTITY(int(5), int(5))), 0)), (int(ivec4(3, 1, (0 >> _GLF_IDENTITY(int(5), int(5))), 0))) * 1))), 0, 0, 1), (ivec4(0 ^ (_GLF_IDENTITY(3, _GLF_IDENTITY(int(ivec4(3, 1, (0 >> _GLF_IDENTITY(int(5), int(5))), 0)), (int(ivec4(3, 1, (0 >> _GLF_IDENTITY(int(5), int(5))), 0))) * 1))), 0, 0, 1)) / ((ivec4(1, 1, 1, 1) << _GLF_IDENTITY(ivec4(7), ivec4(7))) >> _GLF_IDENTITY(ivec4(7), ivec4(7))))), min(int(_GLF_IDENTITY(ivec4(0 ^ (_GLF_IDENTITY(3, _GLF_IDENTITY(int(ivec4(3, 1, (0 >> _GLF_IDENTITY(int(5), int(5))), 0)), (int(ivec4(3, 1, (0 >> _GLF_IDENTITY(int(5), int(5))), 0))) * 1))), 0, 0, 1), (ivec4(0 ^ (_GLF_IDENTITY(3, _GLF_IDENTITY(int(ivec4(3, 1, (0 >> _GLF_IDENTITY(int(5), int(5))), 0)), (int(ivec4(3, 1, (0 >> _GLF_IDENTITY(int(5), int(5))), 0))) * 1))), 0, 0, 1)) / ((ivec4(1, 1, 1, 1) << _GLF_IDENTITY(ivec4(7), ivec4(7))) >> _GLF_IDENTITY(ivec4(7), ivec4(7))))), int(_GLF_IDENTITY(ivec4(0 ^ (_GLF_IDENTITY(3, _GLF_IDENTITY(int(ivec4(3, 1, (0 >> _GLF_IDENTITY(int(5), int(5))), 0)), (int(ivec4(3, 1, (0 >> _GLF_IDENTITY(int(5), int(5))), 0))) * 1))), 0, 0, 1), (ivec4(0 ^ (_GLF_IDENTITY(3, _GLF_IDENTITY(int(ivec4(3, 1, (0 >> _GLF_IDENTITY(int(5), int(5))), 0)), (int(ivec4(3, 1, (0 >> _GLF_IDENTITY(int(5), int(5))), 0))) * 1))), 0, 0, 1)) / ((ivec4(1, 1, 1, 1) << _GLF_IDENTITY(ivec4(7), ivec4(7))) >> _GLF_IDENTITY(ivec4(7), ivec4(7)))))))) / 1)))))), _GLF_IDENTITY(int(3), ~ (_GLF_IDENTITY(~ (int(_GLF_IDENTITY(3, max(3, 3)))), 0 ^ (~ _GLF_IDENTITY((_GLF_IDENTITY(int(3), _GLF_IDENTITY(0, _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), min(int(_GLF_ZERO(0.0, injectionSwitch.x)), int(_GLF_ZERO(0.0, injectionSwitch.x)))) ^ (_GLF_IDENTITY(0, (0) - 0))) ^ (int(3)))), 1 * ((_GLF_IDENTITY(int(3), _GLF_IDENTITY(0, int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(0, (0) - 0))) ^ (int(3))))))))))))); _GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) << 0))
                                        {
                                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                          break;
                                         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) > injectionSwitch.y), _GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, (false) && true), false, false, true)))) || false) || ((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0), mix(float(_GLF_FUZZED(-7.0)), float(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0), (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0)) - 0.0)), bool(true))) > injectionSwitch.y))))))
                                          {
                                          }
                                         else
                                          {
                                           for(int _injected_loop_counter = ((0 | 0) << _GLF_IDENTITY(int(1), int(1))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                                            {
                                             if(_GLF_WRAPPED_IF_TRUE(true))
                                              {
                                               if(_GLF_WRAPPED_IF_TRUE(true))
                                                {
                                                 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), min(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)))).x > injectionSwitch.y))))
                                                  {
                                                  }
                                                 else
                                                  {
                                                   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), ! (_GLF_IDENTITY(! (false), ! (! (! (false))))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))
                                                    {
                                                     if(_GLF_WRAPPED_IF_FALSE(false))
                                                      {
                                                      }
                                                     else
                                                      {
                                                       return;
                                                      }
                                                    }
                                                  }
                                                }
                                               else
                                                {
                                                }
                                              }
                                             else
                                              {
                                              }
                                            }
                                          }
                                        }
                                       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_IDENTITY((injectionSwitch)[0], min((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch)[0], mix(float(_GLF_FUZZED(-0.8)), float((injectionSwitch)[0]), bool(true))))), (injectionSwitch)[1]), vec2(_GLF_FUZZED(2098.9109), _GLF_FUZZED((3097.2136 + 2.9))), bvec2(false, _GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, false || (false))), bool(bvec4(_GLF_IDENTITY(! (_GLF_IDENTITY(false, false || (false))), (_GLF_IDENTITY(! (_GLF_IDENTITY(false, false || (false))), (_GLF_IDENTITY(! (_GLF_IDENTITY(false, false || (false))), true && _GLF_IDENTITY((! (_GLF_IDENTITY(false, false || (false)))), bool(bvec3((! (_GLF_IDENTITY(false, false || (false)))), true, true))))) || false)) && true), true, true, false)))))))).x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * _GLF_IDENTITY(vec2(1.0, 1.0), _GLF_IDENTITY(vec2(mat3x4(_GLF_IDENTITY(vec2(1.0, 1.0), (vec2(1.0, 1.0)) / vec2(1.0, 1.0)), 1.0, 0.0, 1.0, cos(0.0), 0.0, 1.0, 1.0, 0.0, 0.0, exp(0.0))), min(vec2(mat3x4(_GLF_IDENTITY(vec2(1.0, 1.0), (vec2(1.0, 1.0)) / vec2(1.0, 1.0)), 1.0, 0.0, 1.0, cos(0.0), 0.0, 1.0, 1.0, 0.0, 0.0, exp(0.0))), vec2(mat3x4(_GLF_IDENTITY(vec2(1.0, 1.0), (vec2(1.0, 1.0)) / vec2(1.0, 1.0)), 1.0, 0.0, 1.0, cos(0.0), 0.0, 1.0, 1.0, 0.0, 0.0, exp(0.0))))))), injectionSwitch)).y))))
                                        break;
                                       vec2 _GLF_SWITCH_2_1v[77];
                                       default:
                                       1;
                                      }
                                    }
                                   while(_GLF_WRAPPED_LOOP(false));
                                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                    continue;
                                   break;
                                   case 73:
                                   vec4 _GLF_SWITCH_4_1v, _GLF_SWITCH_4_2v, _GLF_SWITCH_4_3v;
                                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                    return;
                                   default:
                                   if(_GLF_WRAPPED_IF_FALSE(false))
                                    {
                                    }
                                   else
                                    {
                                     1;
                                    }
                                  }
                                }
                               while(_GLF_WRAPPED_LOOP(false));
                               break;
                               default:
                               1;
                              }
                            }
                           if(_GLF_DEAD(false))
                            continue;
                           if(_GLF_DEAD(false))
                            continue;
                          }
                         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec3(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y)), true, true)))))))
                          {
                          }
                         else
                          {
                           if(_GLF_DEAD(false))
                            {
                             if(_GLF_DEAD(false))
                              {
                               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                                {
                                 return;
                                }
                               else
                                {
                                }
                              }
                             return;
                            }
                          }
                         if(_GLF_DEAD(false))
                          continue;
                         case 0:
                         case 53:
                         if(_GLF_DEAD(false))
                          continue;
                         case 24:
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          break;
                         if(_GLF_WRAPPED_IF_TRUE(true))
                          {
                           if(_GLF_DEAD(false))
                            {
                             if(_GLF_DEAD(false))
                              return;
                             if(_GLF_DEAD(false))
                              {
                               if(_GLF_DEAD(false))
                                return;
                               continue;
                              }
                             if(_GLF_WRAPPED_IF_FALSE(false))
                              {
                              }
                             else
                              {
                               do
                                {
                                 if(_GLF_DEAD(false))
                                  {
                                   if(_GLF_WRAPPED_IF_FALSE(false))
                                    {
                                    }
                                   else
                                    {
                                     return;
                                    }
                                  }
                                }
                               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y))));
                              }
                             do
                              {
                               do
                                {
                                 switch(_GLF_SWITCH(_GLF_IDENTITY(0, clamp(0, 0, 0))))
                                  {
                                   case 48:
                                   vec3(-1747.4460, -1361.4096, -5.0);
                                   case 46:
                                   bvec2(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec2(true, true)), ! (! (bool(bvec2(true, true)))))), false);
                                   case 0:
                                   case 45:
                                   case 53:
                                   case 55:
                                   case 8:
                                   for(int _injected_loop_counter = (0 ^ (1 | 1)); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x))); _injected_loop_counter --)
                                    {
                                     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
                                      {
                                       if(_GLF_DEAD(false))
                                        return;
                                       do
                                        {
                                         return;
                                        }
                                       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                                      }
                                    }
                                   break;
                                   case 12:
                                   bvec2 _GLF_SWITCH_3_0v, _GLF_SWITCH_3_1v, _GLF_SWITCH_3_2v;
                                   default:
                                   if(_GLF_DEAD(false))
                                    break;
                                   if(_GLF_DEAD(false))
                                    continue;
                                   if(_GLF_WRAPPED_IF_FALSE(false))
                                    {
                                    }
                                   else
                                    {
                                     1;
                                    }
                                  }
                                }
                               while(_GLF_WRAPPED_LOOP(false));
                              }
                             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                            }
                          }
                         else
                          {
                           if(_GLF_DEAD(false))
                            break;
                          }
                         for(int _injected_loop_counter = _GLF_IDENTITY(_GLF_IDENTITY(0, ~ (~ (0))), (_GLF_IDENTITY(0, ~ (~ (0)))) << 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                          {
                           if(_GLF_DEAD(false))
                            return;
                           do
                            {
                             if(_GLF_DEAD(false))
                              return;
                            }
                           while(_GLF_WRAPPED_LOOP(false));
                           return;
                          }
                         break;
                         do
                          {
                           switch(_GLF_SWITCH(_GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), 0 | (_GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), (true ? int(_GLF_ZERO(0.0, injectionSwitch.x)) : _GLF_FUZZED(-37022)))))))
                            {
                             case 0:
                             case 89:
                             case 13:
                             case 1:
                             case 20:
                             case 67:
                             case 46:
                             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                              {
                               if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y))))))
                                continue;
                               return;
                              }
                             break;
                             case 39:
                             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6)))); _injected_loop_counter ++)
                              {
                               fract(vec4(-6799.0494, 5.0, 2112.6450, 1213.9694));
                              }
                             default:
                             1;
                            }
                          }
                         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                         case 66:
                         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                          {
                           do
                            {
                             switch(_GLF_SWITCH(((_GLF_IDENTITY(0 << _GLF_IDENTITY(int(_GLF_IDENTITY(0, _GLF_IDENTITY(int(_GLF_IDENTITY(ivec4(_GLF_IDENTITY(0, 1 * (_GLF_IDENTITY(0, (0) << 0))), 0, int(_GLF_ONE(1.0, injectionSwitch.y)), (0 >> _GLF_IDENTITY(int(0), int(0)))), ivec4(0, 0, 0, 0) | _GLF_IDENTITY((ivec4(_GLF_IDENTITY(0, _GLF_IDENTITY(1, int(_GLF_IDENTITY(ivec3(1, 0, 1), (ivec3(1, 0, 1)) | ivec3(0, 0, 0)))) * (_GLF_IDENTITY(0, (0) << 0))), 0, int(_GLF_ONE(1.0, injectionSwitch.y)), (0 >> _GLF_IDENTITY(int(0), int(0))))), ((ivec4(_GLF_IDENTITY(0, 1 * (_GLF_IDENTITY(0, (0) << 0))), 0, int(_GLF_ONE(1.0, injectionSwitch.y)), (0 >> _GLF_IDENTITY(int(0), int(0)))))) | ivec4(0, 0, 0, 0)))), (int(_GLF_IDENTITY(ivec4(_GLF_IDENTITY(0, 1 * (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(0, (0) << 0), max(_GLF_IDENTITY(_GLF_IDENTITY(0, (0) << 0), (_GLF_IDENTITY(0, (0) << 0)) << 0), _GLF_IDENTITY(_GLF_IDENTITY(0, (0) << 0), int(ivec4(_GLF_IDENTITY(0, (0) << 0), 1, 0, 1))))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(0, (0) << 0), (_GLF_IDENTITY(0, (0) << 0)) | (_GLF_IDENTITY(0, (0) << 0))), _GLF_IDENTITY(0, (0) << 0), _GLF_IDENTITY(_GLF_IDENTITY(0, (0) << 0), (_GLF_IDENTITY(0, (0) << 0)) ^ 0))))), 0, _GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), (int(_GLF_ONE(1.0, injectionSwitch.y))) << 0), (0 >> _GLF_IDENTITY(int(0), int(0)))), ivec4(0, 0, 0, 0) | (ivec4(_GLF_IDENTITY(0, 1 * (_GLF_IDENTITY(0, (0) << 0))), 0, int(_GLF_ONE(1.0, injectionSwitch.y)), (0 >> _GLF_IDENTITY(int(0), int(0)))))))) / 1))), int(0)), (false ? _GLF_FUZZED(89133) : _GLF_IDENTITY(0, (0 >> _GLF_IDENTITY(int(2), int(2))) ^ (_GLF_IDENTITY(0, (0) | (0)))) << _GLF_IDENTITY(int(_GLF_IDENTITY(0, _GLF_IDENTITY(int(_GLF_IDENTITY(ivec4(_GLF_IDENTITY(0, 1 * (_GLF_IDENTITY(0, (0) << 0))), 0, int(_GLF_ONE(1.0, injectionSwitch.y)), (0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(0), max(int(0), int(0))), int(0)))), ivec4(0, _GLF_IDENTITY(0, ~ _GLF_IDENTITY((~ (0)), (true ? (~ (0)) : _GLF_FUZZED(40038)))), 0, _GLF_IDENTITY(0, int(ivec3(0, ((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4))), 1)))) | (ivec4(_GLF_IDENTITY(0, 1 * (_GLF_IDENTITY(0, (_GLF_IDENTITY(0, ~ (~ (0)))) << 0))), 0, int(_GLF_ONE(1.0, injectionSwitch.y)), (0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(0), (_GLF_IDENTITY(int(0), max(int(0), int(0)))) | (int(0))), int(0))))))), (int(_GLF_IDENTITY(ivec4(_GLF_IDENTITY(_GLF_IDENTITY(0, ~ (~ (0))), 1 * (_GLF_IDENTITY(0, (0) << 0))), 0, int(_GLF_IDENTITY(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))), min(_GLF_ONE(1.0, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), (_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))) + 0.0)), _GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)))))), (0 >> _GLF_IDENTITY(int(0), int(0)))), ivec4(0, 0, _GLF_IDENTITY(_GLF_IDENTITY(0, _GLF_IDENTITY((_GLF_IDENTITY(0, _GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(_injected_loop_counter))) * (0))), ((_GLF_IDENTITY(0, _GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(_injected_loop_counter))) * (0)))) >> int(_GLF_ZERO(0.0, injectionSwitch.x))) ^ 0), (0) + 0), 0) | (_GLF_IDENTITY(ivec4(_GLF_IDENTITY(0, _GLF_IDENTITY(1 * (_GLF_IDENTITY(_GLF_IDENTITY(0, (0) << 0), max(_GLF_IDENTITY(0, (0) << 0), _GLF_IDENTITY(_GLF_IDENTITY(0, (0) << 0), (_GLF_IDENTITY(_GLF_IDENTITY(0, (0) << 0), (_GLF_IDENTITY(_GLF_IDENTITY(0, (0) << 0), clamp(_GLF_IDENTITY(0, (0) << 0), _GLF_IDENTITY(0, (0) << _GLF_IDENTITY(0, (0) - (0 ^ 0))), _GLF_IDENTITY(0, (0) << 0)))) << 0)) ^ 0)))), (1 * _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(0, (0) << 0), max(_GLF_IDENTITY(0, (0) << 0), _GLF_IDENTITY(_GLF_IDENTITY(0, (0) << 0), (_GLF_IDENTITY(_GLF_IDENTITY(0, (0) << 0), (_GLF_IDENTITY(_GLF_IDENTITY(0, (0) << 0), clamp(_GLF_IDENTITY(0, (0) << 0), _GLF_IDENTITY(0, (0) << 0), _GLF_IDENTITY(0, _GLF_IDENTITY((0) << 0, min((0) << 0, (0) << 0)))))) << 0)) ^ 0)))), 0 ^ (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(0, (0) << 0), max(_GLF_IDENTITY(0, (0) << 0), _GLF_IDENTITY(_GLF_IDENTITY(0, (0) << 0), (_GLF_IDENTITY(_GLF_IDENTITY(0, (0) << 0), (_GLF_IDENTITY(_GLF_IDENTITY(0, (0) << 0), clamp(_GLF_IDENTITY(0, (0) << 0), _GLF_IDENTITY(0, (0) << 0), _GLF_IDENTITY(0, _GLF_IDENTITY((0) << 0, min((0) << 0, (0) << 0)))))) << 0)) ^ 0)))), max((_GLF_IDENTITY(_GLF_IDENTITY(0, (0) << 0), max(_GLF_IDENTITY(0, (0) << 0), _GLF_IDENTITY(_GLF_IDENTITY(0, (0) << 0), (_GLF_IDENTITY(_GLF_IDENTITY(0, (0) << 0), (_GLF_IDENTITY(_GLF_IDENTITY(0, (0) << 0), clamp(_GLF_IDENTITY(0, (0) << 0), _GLF_IDENTITY(0, (0) << 0), _GLF_IDENTITY(0, _GLF_IDENTITY((0) << 0, min((0) << 0, (0) << 0)))))) << 0)) ^ 0)))), (_GLF_IDENTITY(_GLF_IDENTITY(0, (0) << 0), max(_GLF_IDENTITY(0, (0) << 0), _GLF_IDENTITY(_GLF_IDENTITY(0, (0) << 0), (_GLF_IDENTITY(_GLF_IDENTITY(0, (0) << 0), (_GLF_IDENTITY(_GLF_IDENTITY(0, (0) << 0), clamp(_GLF_IDENTITY(0, (0) << 0), _GLF_IDENTITY(0, (0) << 0), _GLF_IDENTITY(0, _GLF_IDENTITY((0) << 0, min((0) << 0, (0) << 0)))))) << 0)) ^ 0))))))))) | 0)), 0, int(_GLF_ONE(1.0, injectionSwitch.y)), (0 >> _GLF_IDENTITY(int(0), int(_GLF_IDENTITY(0, min(_GLF_IDENTITY(0, (_GLF_IDENTITY(0, min(0, 0))) - 0), 0)))))), max(ivec4(_GLF_IDENTITY(0, _GLF_IDENTITY(1 * (_GLF_IDENTITY(_GLF_IDENTITY(0, (0) << 0), max(_GLF_IDENTITY(0, (0) << 0), _GLF_IDENTITY(_GLF_IDENTITY(0, (0) << 0), (_GLF_IDENTITY(_GLF_IDENTITY(0, (0) << 0), (_GLF_IDENTITY(_GLF_IDENTITY(0, (0) << 0), clamp(_GLF_IDENTITY(0, (0) << 0), _GLF_IDENTITY(0, (0) << _GLF_IDENTITY(0, (0) - (0 ^ 0))), _GLF_IDENTITY(0, (0) << 0)))) << 0)) ^ 0)))), (1 * _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(0, (0) << 0), max(_GLF_IDENTITY(0, (0) << 0), _GLF_IDENTITY(_GLF_IDENTITY(0, (0) << 0), (_GLF_IDENTITY(_GLF_IDENTITY(0, (0) << 0), (_GLF_IDENTITY(_GLF_IDENTITY(0, (0) << 0), clamp(_GLF_IDENTITY(0, (0) << 0), _GLF_IDENTITY(0, (0) << 0), _GLF_IDENTITY(0, _GLF_IDENTITY((0) << 0, min((0) << 0, (0) << 0)))))) << 0)) ^ 0)))), 0 ^ (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(0, (0) << 0), max(_GLF_IDENTITY(0, (0) << 0), _GLF_IDENTITY(_GLF_IDENTITY(0, (0) << 0), (_GLF_IDENTITY(_GLF_IDENTITY(0, (0) << 0), (_GLF_IDENTITY(_GLF_IDENTITY(0, (0) << 0), clamp(_GLF_IDENTITY(0, (0) << 0), _GLF_IDENTITY(0, (0) << 0), _GLF_IDENTITY(0, _GLF_IDENTITY((0) << 0, min((0) << 0, (0) << 0)))))) << 0)) ^ 0)))), max((_GLF_IDENTITY(_GLF_IDENTITY(0, (0) << 0), max(_GLF_IDENTITY(0, (0) << 0), _GLF_IDENTITY(_GLF_IDENTITY(0, (0) << 0), (_GLF_IDENTITY(_GLF_IDENTITY(0, (0) << 0), (_GLF_IDENTITY(_GLF_IDENTITY(0, (0) << 0), clamp(_GLF_IDENTITY(0, (0) << 0), _GLF_IDENTITY(0, (0) << 0), _GLF_IDENTITY(0, _GLF_IDENTITY((0) << 0, min((0) << 0, (0) << 0)))))) << 0)) ^ 0)))), (_GLF_IDENTITY(_GLF_IDENTITY(0, (0) << 0), max(_GLF_IDENTITY(0, (0) << 0), _GLF_IDENTITY(_GLF_IDENTITY(0, (0) << 0), (_GLF_IDENTITY(_GLF_IDENTITY(0, (0) << 0), (_GLF_IDENTITY(_GLF_IDENTITY(0, (0) << 0), clamp(_GLF_IDENTITY(0, (0) << 0), _GLF_IDENTITY(0, (0) << 0), _GLF_IDENTITY(0, _GLF_IDENTITY((0) << 0, min((0) << 0, (0) << 0)))))) << 0)) ^ 0))))))))) | 0)), 0, int(_GLF_ONE(1.0, injectionSwitch.y)), (0 >> _GLF_IDENTITY(int(0), int(_GLF_IDENTITY(0, min(_GLF_IDENTITY(0, (_GLF_IDENTITY(0, min(0, 0))) - 0), 0)))))), ivec4(_GLF_IDENTITY(0, _GLF_IDENTITY(1 * (_GLF_IDENTITY(_GLF_IDENTITY(0, (0) << 0), max(_GLF_IDENTITY(0, (0) << 0), _GLF_IDENTITY(_GLF_IDENTITY(0, (0) << 0), (_GLF_IDENTITY(_GLF_IDENTITY(0, (0) << 0), (_GLF_IDENTITY(_GLF_IDENTITY(0, (0) << 0), clamp(_GLF_IDENTITY(0, (0) << 0), _GLF_IDENTITY(0, (0) << _GLF_IDENTITY(0, (0) - (0 ^ 0))), _GLF_IDENTITY(0, (0) << 0)))) << 0)) ^ 0)))), (1 * _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(0, (0) << 0), max(_GLF_IDENTITY(0, (0) << 0), _GLF_IDENTITY(_GLF_IDENTITY(0, (0) << 0), (_GLF_IDENTITY(_GLF_IDENTITY(0, (0) << 0), (_GLF_IDENTITY(_GLF_IDENTITY(0, (0) << 0), clamp(_GLF_IDENTITY(0, (0) << 0), _GLF_IDENTITY(0, (0) << 0), _GLF_IDENTITY(0, _GLF_IDENTITY((0) << 0, min((0) << 0, (0) << 0)))))) << 0)) ^ 0)))), 0 ^ (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(0, (0) << 0), max(_GLF_IDENTITY(0, (0) << 0), _GLF_IDENTITY(_GLF_IDENTITY(0, (0) << 0), (_GLF_IDENTITY(_GLF_IDENTITY(0, (0) << 0), (_GLF_IDENTITY(_GLF_IDENTITY(0, (0) << 0), clamp(_GLF_IDENTITY(0, (0) << 0), _GLF_IDENTITY(0, (0) << 0), _GLF_IDENTITY(0, _GLF_IDENTITY((0) << 0, min((0) << 0, (0) << 0)))))) << 0)) ^ 0)))), max((_GLF_IDENTITY(_GLF_IDENTITY(0, (0) << 0), max(_GLF_IDENTITY(0, (0) << 0), _GLF_IDENTITY(_GLF_IDENTITY(0, (0) << 0), (_GLF_IDENTITY(_GLF_IDENTITY(0, (0) << 0), (_GLF_IDENTITY(_GLF_IDENTITY(0, (0) << 0), clamp(_GLF_IDENTITY(0, (0) << 0), _GLF_IDENTITY(0, (0) << 0), _GLF_IDENTITY(0, _GLF_IDENTITY((0) << 0, min((0) << 0, (0) << 0)))))) << 0)) ^ 0)))), (_GLF_IDENTITY(_GLF_IDENTITY(0, (0) << 0), max(_GLF_IDENTITY(0, (0) << 0), _GLF_IDENTITY(_GLF_IDENTITY(0, (0) << 0), (_GLF_IDENTITY(_GLF_IDENTITY(0, (0) << 0), (_GLF_IDENTITY(_GLF_IDENTITY(0, (0) << 0), clamp(_GLF_IDENTITY(0, (0) << 0), _GLF_IDENTITY(0, (0) << 0), _GLF_IDENTITY(0, _GLF_IDENTITY((0) << 0, min((0) << 0, (0) << 0)))))) << 0)) ^ 0))))))))) | 0)), 0, int(_GLF_ONE(1.0, injectionSwitch.y)), (0 >> _GLF_IDENTITY(int(0), int(_GLF_IDENTITY(0, min(_GLF_IDENTITY(0, (_GLF_IDENTITY(0, min(0, 0))) - 0), 0)))))))))))) / 1))), int(0))))) << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), 0 | (_GLF_IDENTITY(int(4), min(int(4), int(4)))))))))
                              {
                               case 93:
                               ;
                               case 78:
                               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                {
                                }
                               else
                                {
                                 ivec4(-48595, -46661, -70488, -65879);
                                }
                               case 0:
                               case 75:
                               if(false)
                                {
                                }
                               else
                                {
                                 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                  {
                                  }
                                 else
                                  {
                                   mat2x4(-82.33, -900.032, -5250.9375, -6696.1765, -0.9, -5.1, 727.545, 2508.2885);
                                  }
                                }
                               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                {
                                }
                               else
                                {
                                 do
                                  {
                                   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                                    {
                                     switch(_GLF_IDENTITY(_GLF_SWITCH(0), (_GLF_SWITCH(0)) ^ 0))
                                      {
                                       case 61:
                                       (mat2x3(-36.60, -6.2, 4.4, -665.849, 9.6, 101.577) / 732.711);
                                       case 0:
                                       case 33:
                                       case 42:
                                       case 89:
                                       case 17:
                                       case 48:
                                       case 50:
                                       case 79:
                                       do
                                        {
                                         switch(_GLF_SWITCH((0 | 0)))
                                          {
                                           case 92:
                                           mat3x4 _GLF_SWITCH_4_0v[36];
                                           case 49:
                                           transpose(mat3x4(583.053, 2.5, 4866.8885, 70.94, -2.5, 760.600, 3901.9281, -24.11, -475.991, 9.3, -143.746, -7532.8065));
                                           if(_GLF_DEAD(false))
                                            continue;
                                           case 0:
                                           do
                                            {
                                             ;
                                            }
                                           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                                           break;
                                           case 32:
                                           bvec2 _GLF_SWITCH_4_1v;
                                           default:
                                           1;
                                          }
                                        }
                                       while(_GLF_WRAPPED_LOOP(false));
                                       break;
                                       case 43:
                                       max(uvec3(82433u, 45123u, 60544u), (next_virtual_gid * (uvec3(11711u, 186924u, 177419u) << subgroup_base)));
                                       default:
                                       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                                        {
                                         1;
                                        }
                                       else
                                        {
                                        }
                                      }
                                    }
                                   else
                                    {
                                    }
                                  }
                                 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) && true)));
                                }
                               if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(bool(bool(false)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(bool(bool(false)), ! (! (bool(bool(false)))))), ! (! (! (_GLF_IDENTITY(bool(bool(false)), ! (! (bool(bool(false))))))))))), _GLF_IDENTITY(false, true && (false)) || (bool(bool(false)))))))
                                return;
                               mat2x3((+ mat3x2(-31.02, -63.60, -94.64, -8.0, 192.126, -2894.7624)));
                               case 55:
                               case 46:
                               vec2 _GLF_SWITCH_0_10v, _GLF_SWITCH_0_11v;
                               if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                                continue;
                               _GLF_IDENTITY(_GLF_SWITCH_0_11v, min(_GLF_SWITCH_0_11v, _GLF_IDENTITY(_GLF_SWITCH_0_11v, _GLF_IDENTITY((_GLF_SWITCH_0_11v) * mat2(1.0), (false ? _GLF_FUZZED(injectionSwitch) : (_GLF_SWITCH_0_11v) * mat2(1.0))))));
                               break;
                               default:
                               if(_GLF_DEAD(false))
                                continue;
                               1;
                               if(_GLF_DEAD(false))
                                continue;
                              }
                            }
                           while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) || false)));
                          }
                         default:
                         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
                          continue;
                         1;
                        }
                       break;
                       case 26:
                       mat2x3(-7.9, 3463.3293, -3521.6058, -425.010, -2054.7542, 160.847);
                       case 37:
                       mat3 _GLF_SWITCH_5_3v[29];
                       default:
                       1;
                      }
                    }
                   else
                    {
                    }
                  }
                }
               subgroupAll(false);
               do
                {
                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, _GLF_IDENTITY(int(_GLF_IDENTITY(ivec2(_GLF_IDENTITY(_injected_loop_counter, max(_GLF_IDENTITY(_injected_loop_counter, ~ (~ (_injected_loop_counter))), _injected_loop_counter)), 1), min(_GLF_IDENTITY(ivec2(_GLF_IDENTITY(_injected_loop_counter, max(_GLF_IDENTITY(_injected_loop_counter, ~ (~ (_injected_loop_counter))), _injected_loop_counter)), 1), clamp(_GLF_IDENTITY(ivec2(_GLF_IDENTITY(_injected_loop_counter, max(_GLF_IDENTITY(_injected_loop_counter, ~ (~ (_injected_loop_counter))), _injected_loop_counter)), 1), (ivec2(_GLF_IDENTITY(_injected_loop_counter, max(_GLF_IDENTITY(_injected_loop_counter, ~ (~ (_injected_loop_counter))), _injected_loop_counter)), 1)) ^ ivec2(0, 0)), ivec2(_GLF_IDENTITY(_injected_loop_counter, max(_GLF_IDENTITY(_injected_loop_counter, ~ (~ (_injected_loop_counter))), _injected_loop_counter)), 1), ivec2(_GLF_IDENTITY(_injected_loop_counter, max(_GLF_IDENTITY(_injected_loop_counter, ~ (~ (_injected_loop_counter))), _injected_loop_counter)), 1))), ivec2(_GLF_IDENTITY(_injected_loop_counter, max(_GLF_IDENTITY(_injected_loop_counter, ~ (~ (_injected_loop_counter))), _injected_loop_counter)), 1)))), clamp(int(ivec2(_GLF_IDENTITY(_injected_loop_counter, max(_injected_loop_counter, _injected_loop_counter)), 1)), _GLF_IDENTITY(_GLF_IDENTITY(int(ivec2(_GLF_IDENTITY(_injected_loop_counter, max(_injected_loop_counter, _injected_loop_counter)), 1)), (int(ivec2(_GLF_IDENTITY(_injected_loop_counter, max(_injected_loop_counter, _injected_loop_counter)), 1))) | 0), ~ (~ (_GLF_IDENTITY(int(ivec2(_GLF_IDENTITY(_injected_loop_counter, max(_injected_loop_counter, _injected_loop_counter)), 1)), (int(ivec2(_GLF_IDENTITY(_injected_loop_counter, max(_injected_loop_counter, _injected_loop_counter)), 1))) | 0)))), int(ivec2(_GLF_IDENTITY(_injected_loop_counter, max(_injected_loop_counter, _injected_loop_counter)), 1))))) < int(_GLF_ONE(1.0, injectionSwitch.y))); _GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) ^ int(_GLF_ZERO(0.0, injectionSwitch.x))))
                  {
                   switch(_GLF_SWITCH(int(_GLF_ZERO(0.0, injectionSwitch.x))))
                    {
                     case 0:
                     case 47:
                     case 38:
                     case 60:
                     case 89:
                     case 18:
                     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_IDENTITY((injectionSwitch)[0], (true ? (injectionSwitch)[0] : _GLF_FUZZED(36.56))), _GLF_FUZZED(-9985.5453)), vec2(_GLF_FUZZED(-538.378), _GLF_IDENTITY((injectionSwitch)[1], 0.0 + ((injectionSwitch)[1]))), _GLF_IDENTITY(bvec2(false, true), bvec2(bvec4(bvec2(false, true), true, true))))).x < injectionSwitch.y))))
                      {
                       atomicStore(buf[next_virtual_gid], uint(1), 4, 64, 4);
                      }
                     else
                      {
                      }
                     if(_GLF_DEAD(false))
                      break;
                     break;
                     case 65:
                     bvec2(false, true);
                     default:
                     1;
                    }
                  }
                }
               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
              }
             if(_GLF_DEAD(false))
              {
               for(int _injected_loop_counter = 1; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 0)))); _injected_loop_counter --)
                {
                 return;
                }
              }
            }
           if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bool(_GLF_DEAD(false))), ! (! (bool(bool(_GLF_DEAD(false)))))))) && true)))))
            break;
          }
         while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y, injectionSwitch.y)))), _GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! _GLF_IDENTITY((! ((_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), _GLF_IDENTITY(bool(bvec4((! ((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, 1.0 * (injectionSwitch.y)), _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))))))))))))))))), _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y)), false, true)), (bool(bvec4((! ((_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(7.8)), bool(false))) > injectionSwitch.y)), ! (! _GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true))))))))), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(_GLF_IDENTITY(mat3x4(injectionSwitch.x, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, sqrt(0.0), _GLF_IDENTITY(dot(vec3(0.0, _GLF_IDENTITY(dot(vec4(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), 1.0, 0.0, 0.0), vec4(0.0, 1.0, 0.0, 0.0)), dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 1.0, 0.0, 0.0))), 0.0), vec3(0.0, 1.0, abs(0.0))), dot(vec3(0.0, _GLF_IDENTITY(dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 1.0, 0.0, 0.0)), dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 1.0, 0.0, 0.0))), 0.0), vec3(0.0, 1.0, abs(0.0)))), 1.0, sin(0.0), 1.0, abs(0.0), 1.0, 1.0), transpose(transpose(_GLF_IDENTITY(mat3x4(injectionSwitch.x, _GLF_IDENTITY(0.0, float(vec4(0.0, 1.0, 0.0, 1.0))), _GLF_ZERO(0.0, injectionSwitch.x), 1.0, sqrt(0.0), _GLF_IDENTITY(dot(vec3(0.0, _GLF_IDENTITY(dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 1.0, 0.0, 0.0)), dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 1.0, 0.0, 0.0))), 0.0), vec3(0.0, 1.0, abs(0.0))), dot(vec3(0.0, _GLF_IDENTITY(dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 1.0, 0.0, 0.0)), dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 1.0, 0.0, 0.0))), 0.0), vec3(0.0, 1.0, abs(0.0)))), 1.0, sin(_GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(-1.5) : 0.0))), 1.0, abs(0.0), 1.0, 1.0), mat3x4(mat3x4(mat3x4(injectionSwitch.x, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, sqrt(0.0), _GLF_IDENTITY(dot(vec3(0.0, _GLF_IDENTITY(dot(vec4(0.0, 1.0, _GLF_IDENTITY(0.0, max(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-9.7)), float(0.0), bool(true))))), 0.0), vec4(0.0, 1.0, 0.0, 0.0)), dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 1.0, 0.0, 0.0))), 0.0), vec3(0.0, 1.0, abs(0.0))), dot(vec3(0.0, _GLF_IDENTITY(dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 1.0, 0.0, 0.0)), dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 1.0, 0.0, 0.0))), 0.0), vec3(0.0, 1.0, abs(0.0)))), 1.0, sin(0.0), 1.0, abs(0.0), 1.0, 1.0)))))))), max(float(_GLF_IDENTITY(mat3x4(injectionSwitch.x, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, sqrt(0.0), _GLF_IDENTITY(dot(vec3(0.0, _GLF_IDENTITY(dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 1.0, 0.0, 0.0)), dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 1.0, 0.0, 0.0))), 0.0), vec3(0.0, 1.0, abs(0.0))), dot(vec3(0.0, _GLF_IDENTITY(dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 1.0, 0.0, 0.0)), dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 1.0, 0.0, 0.0))), 0.0), vec3(0.0, 1.0, abs(0.0)))), 1.0, sin(0.0), 1.0, _GLF_IDENTITY(abs(0.0), float(mat2x3(_GLF_IDENTITY(abs(0.0), min(abs(0.0), abs(0.0))), 1.0, 0.0, 0.0, log(1.0), 1.0))), 1.0, 1.0), transpose(transpose(_GLF_IDENTITY(mat3x4(injectionSwitch.x, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, sqrt(0.0), _GLF_IDENTITY(dot(vec3(0.0, _GLF_IDENTITY(dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 1.0, 0.0, 0.0)), dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 1.0, 0.0, 0.0))), 0.0), vec3(0.0, 1.0, abs(0.0))), dot(vec3(0.0, _GLF_IDENTITY(dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 1.0, 0.0, 0.0)), dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 1.0, 0.0, 0.0))), 0.0), vec3(0.0, 1.0, abs(0.0)))), 1.0, sin(0.0), 1.0, abs(0.0), 1.0, 1.0), mat3x4(mat3x4(mat3x4(injectionSwitch.x, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, sqrt(0.0), _GLF_IDENTITY(dot(vec3(0.0, _GLF_IDENTITY(dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 1.0, 0.0, 0.0)), dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 1.0, 0.0, 0.0))), 0.0), vec3(0.0, 1.0, abs(0.0))), dot(vec3(0.0, _GLF_IDENTITY(dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 1.0, 0.0, 0.0)), dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, _GLF_IDENTITY(1.0, _GLF_IDENTITY(float(vec3(1.0, 0.0, 0.0)), max(_GLF_IDENTITY(float(vec3(1.0, 0.0, 0.0)), float(mat2x3(float(vec3(1.0, 0.0, 0.0)), 1.0, 0.0, 0.0, 0.0, 1.0))), float(vec3(1.0, 0.0, 0.0))))), 0.0, 0.0))), 0.0), vec3(0.0, 1.0, abs(0.0)))), 1.0, sin(_GLF_IDENTITY(0.0, abs(1.0) * (0.0))), 1.0, abs(0.0), 1.0, 1.0)))))))), float(_GLF_IDENTITY(mat3x4(injectionSwitch.x, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, sqrt(0.0), _GLF_IDENTITY(dot(vec3(0.0, _GLF_IDENTITY(dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 1.0, 0.0, 0.0)), dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 1.0, 0.0, 0.0))), 0.0), vec3(0.0, 1.0, abs(0.0))), dot(vec3(0.0, _GLF_IDENTITY(dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 1.0, 0.0, 0.0)), dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 1.0, 0.0, 0.0))), 0.0), vec3(0.0, 1.0, _GLF_IDENTITY(abs(0.0), max(abs(0.0), abs(0.0)))))), 1.0, sin(0.0), 1.0, abs(0.0), 1.0, 1.0), transpose(transpose(_GLF_IDENTITY(mat3x4(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x, _GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-67.48)), bool(false))), _GLF_ZERO(0.0, injectionSwitch.x), 1.0, sqrt(0.0), _GLF_IDENTITY(dot(vec3(0.0, _GLF_IDENTITY(dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 1.0, 0.0, 0.0)), dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 1.0, 0.0, 0.0))), 0.0), vec3(0.0, 1.0, abs(0.0))), dot(vec3(0.0, _GLF_IDENTITY(_GLF_IDENTITY(dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 1.0, 0.0, 0.0)), clamp(dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 1.0, 0.0, 0.0)), dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 1.0, 0.0, 0.0)), dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 1.0, 0.0, 0.0)))), dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 1.0, 0.0, 0.0))), 0.0), vec3(0.0, 1.0, abs(0.0)))), 1.0, sin(0.0), 1.0, abs(0.0), 1.0, 1.0), mat3x4(mat3x4(mat3x4(injectionSwitch.x, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, sqrt(0.0), _GLF_IDENTITY(dot(vec3(0.0, _GLF_IDENTITY(dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 1.0, 0.0, 0.0)), dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 1.0, 0.0, 0.0))), 0.0), vec3(0.0, 1.0, abs(_GLF_IDENTITY(0.0, max(0.0, 0.0))))), dot(vec3(0.0, _GLF_IDENTITY(dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 1.0, 0.0, 0.0)), dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 1.0, 0.0, 0.0))), 0.0), vec3(0.0, _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(uintBitsToFloat(workgroup_id)))), abs(0.0)))), 1.0, sin(0.0), 1.0, abs(0.0), 1.0, 1.0))))))))))) > injectionSwitch.y)), false, true))) && true))) || false)))));
         if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (injectionSwitch.x > injectionSwitch.y))))
          break;
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bool(false))), (false) || _GLF_IDENTITY(false, (false) && true))));
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 else
  {
  }
 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, bool(bvec4(_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(_GLF_IDENTITY(float(mat4x3(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, sqrt(0.0), 0.0, 0.0, 0.0, 1.0)), (_GLF_IDENTITY(float(mat4x3(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, sqrt(0.0), 0.0, 0.0, 0.0, 1.0)), clamp(float(mat4x3(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, sqrt(0.0), 0.0, 0.0, 0.0, 1.0)), float(mat4x3(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, sqrt(0.0), 0.0, 0.0, 0.0, 1.0)), float(mat4x3(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, sqrt(0.0), 0.0, 0.0, 0.0, 1.0))))) / 1.0), (_GLF_IDENTITY(float(mat4x3(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, sqrt(0.0), 0.0, 0.0, 0.0, 1.0)), _GLF_IDENTITY((_GLF_IDENTITY(float(mat4x3(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, sqrt(0.0), 0.0, 0.0, 0.0, 1.0)), clamp(float(mat4x3(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, sqrt(0.0), 0.0, 0.0, 0.0, 1.0)), float(mat4x3(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, sqrt(0.0), 0.0, 0.0, 0.0, 1.0)), float(mat4x3(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, sqrt(0.0), 0.0, 0.0, 0.0, 1.0))))), (true ? _GLF_IDENTITY((_GLF_IDENTITY(float(mat4x3(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, sqrt(0.0), 0.0, 0.0, 0.0, 1.0)), clamp(float(mat4x3(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, sqrt(0.0), 0.0, 0.0, 0.0, 1.0)), float(mat4x3(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, sqrt(0.0), 0.0, 0.0, 0.0, 1.0)), float(mat4x3(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, sqrt(0.0), 0.0, 0.0, 0.0, 1.0))))), max(_GLF_IDENTITY((_GLF_IDENTITY(float(mat4x3(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, sqrt(0.0), 0.0, 0.0, 0.0, 1.0)), clamp(float(mat4x3(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, sqrt(0.0), 0.0, 0.0, 0.0, 1.0)), float(mat4x3(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, sqrt(0.0), 0.0, 0.0, 0.0, 1.0)), float(mat4x3(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, sqrt(0.0), 0.0, 0.0, 0.0, 1.0))))), ((_GLF_IDENTITY(float(mat4x3(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, sqrt(0.0), 0.0, 0.0, 0.0, 1.0)), clamp(float(mat4x3(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, sqrt(0.0), 0.0, 0.0, 0.0, 1.0)), float(mat4x3(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, sqrt(0.0), 0.0, 0.0, 0.0, 1.0)), float(mat4x3(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, sqrt(0.0), 0.0, 0.0, 0.0, 1.0)))))) / 1.0), (_GLF_IDENTITY(float(mat4x3(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, sqrt(0.0), 0.0, 0.0, 0.0, 1.0)), clamp(float(mat4x3(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, sqrt(0.0), 0.0, 0.0, 0.0, 1.0)), float(mat4x3(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, sqrt(0.0), 0.0, 0.0, 0.0, 1.0)), float(mat4x3(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, sqrt(0.0), 0.0, 0.0, 0.0, 1.0))))))) : _GLF_FUZZED(-9456.8353))) / 1.0)) * 1.0)) < injectionSwitch.y, true, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))) || false)))
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      return;
    }
  }
 else
  {
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
    }
   subgroupBarrier();
  }
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, max(_injected_loop_counter, _GLF_IDENTITY(_injected_loop_counter, int(int(_injected_loop_counter))))) < 1); _injected_loop_counter ++)
  {
   for(int _injected_loop_counter = int(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), (false ? _GLF_FUZZED(-446.318) : _GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), float(float(_GLF_ZERO(0.0, injectionSwitch.x))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_IDENTITY(1, max(_GLF_IDENTITY(1, (1) | (1)), 1)), max(_GLF_IDENTITY(_GLF_IDENTITY(1, max(_GLF_IDENTITY(1, (1) | (1)), 1)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(_GLF_IDENTITY(1, max(_GLF_IDENTITY(1, (1) | (1)), 1)), (_GLF_IDENTITY(1, max(_GLF_IDENTITY(1, (1) | (1)), 1))) * 1) : _GLF_FUZZED(3469))), _GLF_IDENTITY(1, max(_GLF_IDENTITY(1, (1) | (1)), 1))))), _GLF_IDENTITY(int(1), clamp(int(1), int(1), int(1)))), max(1 << _GLF_IDENTITY(int(1), int(1)), 1 << _GLF_IDENTITY(_GLF_IDENTITY(int(1), max(_GLF_IDENTITY(int(1), ~ (~ (int(1)))), int(1))), int(1))))) >> _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(1), min(_GLF_IDENTITY(int(1), max(int(1), int(1))), int(1))), (_GLF_IDENTITY(_GLF_IDENTITY(int(1), min(_GLF_IDENTITY(int(1), max(int(1), int(1))), int(1))), max(_GLF_IDENTITY(int(1), min(_GLF_IDENTITY(int(1), max(int(1), int(1))), int(1))), _GLF_IDENTITY(int(1), min(_GLF_IDENTITY(int(1), max(int(1), int(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) ^ 0)) ^ (65544 & 0))))), int(1)))))) | (_GLF_IDENTITY(int(1), min(_GLF_IDENTITY(int(1), max(int(1), int(1))), int(1))))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(1), (int(1)) | 0), (_GLF_IDENTITY(int(1), (int(1)) | (int(1)))) >> 0), _GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, 0 | (_GLF_IDENTITY(0, int(ivec2(0, 0))))))) ^ (int(1)))))); _injected_loop_counter ++)
    {
     atomicStore(buf[virtual_gid], read, 4, 64, 4);
    }
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END
BUFFER checker DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected_checker DATA_TYPE uint32 SIZE 8388096 FILL 0

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 
  BIND BUFFER checker AS storage DESCRIPTOR_SET 0 BINDING 2 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT checker EQ_BUFFER expected_checker
