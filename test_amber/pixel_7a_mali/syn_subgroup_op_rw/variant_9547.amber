#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)))
        return;
       return;
      }
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        barrier();
       do
        {
         if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))) && true))))
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((0 ^ 1) | 1)); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           if(_GLF_DEAD(false))
            continue;
           barrier();
           if(_GLF_DEAD(false))
            return;
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     else
      {
      }
     return;
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))))))
      return;
    }
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
       barrier();
      }
    }
  }
 else
  {
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)))).y))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), bool(bool(bool(bool(false))))))))
    return;
   do
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          continue;
        }
       else
        {
         return;
         if(_GLF_DEAD(false))
          return;
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   barrier();
  }
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, _GLF_IDENTITY(false, bool(bvec4(false, _GLF_IDENTITY(false, ! (! (false))), false, true))), true)))))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(false))
        return;
      }
     else
      {
       barrier();
      }
    }
   do
    {
     return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(false))
  {
   do
    {
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))), (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))) || false)))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(false))
            continue;
          }
         return;
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(injectionSwitch.x > injectionSwitch.y)))))));
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      break;
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))), (_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false)))) || false))
    return;
   return;
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bool(! (false)))))), (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bool(! (false)))))), (injectionSwitch.x > injectionSwitch.y))))))
    {
     for(int _injected_loop_counter = _GLF_IDENTITY(((_GLF_IDENTITY(1, (true ? _GLF_IDENTITY(1, min(1, 1)) : _GLF_FUZZED(-91390))) << _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(6, ~ (_GLF_IDENTITY(~ (6), min(~ (6), ~ (6)))))), int(6)), max(_GLF_IDENTITY(int(_GLF_IDENTITY(6, ~ (_GLF_IDENTITY(~ (6), min(~ (6), ~ (6)))))), int(6)), _GLF_IDENTITY(int(_GLF_IDENTITY(6, ~ (_GLF_IDENTITY(~ (6), min(~ (6), ~ (6)))))), int(6))))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(6, (6) >> 0)), int(6))), (true ? ((_GLF_IDENTITY(1, (true ? _GLF_IDENTITY(1, min(1, 1)) : _GLF_FUZZED(-91390))) << _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(6, ~ (_GLF_IDENTITY(~ (6), min(~ (6), ~ (6)))))), int(6)), max(_GLF_IDENTITY(int(_GLF_IDENTITY(6, ~ (_GLF_IDENTITY(~ (6), min(~ (6), ~ (6)))))), int(6)), _GLF_IDENTITY(int(_GLF_IDENTITY(6, ~ (_GLF_IDENTITY(~ (6), min(~ (6), ~ (6)))))), int(6))))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(6, (6) >> 0)), int(6))) : _GLF_FUZZED(-205))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x)), _GLF_IDENTITY(bool(bvec3(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x)), false, true)), bool(bvec4(_GLF_IDENTITY(bool(bvec3(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x)), false, true)), bool(bvec4(bool(bvec3(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x)), false, true)), true, false, false))), true, true, true))))); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        continue;
       barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bool(false))), (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bool(false))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bool(false))), bool(bvec2(_GLF_IDENTITY(false, bool(bool(false))), false))))))) && true)))
          {
          }
         else
          {
           do
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY((false), false || ((false))) && true), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), false || (_GLF_IDENTITY(false, (false) && true)))))), true)))))))
              barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         barrier();
        }
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         barrier();
        }
       return;
      }
    }
  }
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), (false) && true))) || false))), (false) || false)))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         barrier();
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         return;
        }
       return;
      }
     return;
    }
   for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(_GLF_IDENTITY(6, 0 | (6))), int(6))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < (1 & 1), bool(bvec2(_injected_loop_counter < (1 & 1), true)))); _injected_loop_counter ++)
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0)))))
        {
         for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 ^ 0)); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
            return;
           barrier();
          }
        }
      }
     else
      {
      }
    }
   return;
   if(_GLF_DEAD(false))
    barrier();
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(false))
  return;
 uint num_workgroup = _GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups.x, (gl_NumWorkGroups.x) << 0u), (gl_NumWorkGroups.x) * _GLF_IDENTITY(1u, min(1u, 1u)));
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(! _GLF_IDENTITY((_GLF_IDENTITY(! (false), false || (! (false)))), false || ((_GLF_IDENTITY(! (false), false || (! (false)))))), false || (! _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(! (false), false || (! (false))), (_GLF_IDENTITY(_GLF_IDENTITY(! (false), false || (! (false))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(! (false), false || (! (false)))), ! (! (! (_GLF_IDENTITY(! (false), false || (! (false)))))))))) || false)), false || ((_GLF_IDENTITY(! (false), false || (! (false)))))))))))
    {
    }
   else
    {
     return;
    }
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     barrier();
    }
   else
    {
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if(_GLF_DEAD(false))
  return;
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = _GLF_IDENTITY(workgroup_size * workgroup_id, clamp(workgroup_size * workgroup_id, workgroup_size * workgroup_id, workgroup_size * workgroup_id));
 uint subgroup_base = subgroup_id * subgroup_size;
 uint virtual_gid = workgroup_base + subgroup_base + subgroup_local_id;
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch))) - vec2(0.0, 0.0)).y)))))))
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, 0 | (_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, (true ? _GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) >> 0) : _GLF_FUZZED(_injected_loop_counter))), (_injected_loop_counter) | (_injected_loop_counter)))) != 1); _injected_loop_counter ++)
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        return;
      }
    }
   return;
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(false))
  barrier();
 do
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true)) && true))))), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true)) && true))))), false, true, false)), bool(bool(bool(bvec4(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true)) && true))))), false, true, false))))))))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(injectionSwitch.x > injectionSwitch.y)))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), ! (! ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(injectionSwitch.x > injectionSwitch.y)))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))));
 uint next_virtual_gid = workgroup_base + _GLF_IDENTITY(subgroup_base, clamp(subgroup_base, subgroup_base, _GLF_IDENTITY(subgroup_base, (0u | 0u) ^ (_GLF_IDENTITY(subgroup_base, max(subgroup_base, subgroup_base)))))) + _GLF_IDENTITY((_GLF_IDENTITY((subgroup_local_id + 1), clamp((subgroup_local_id + 1), (subgroup_local_id + 1), (subgroup_local_id + 1))) % subgroup_size), ~ (~ _GLF_IDENTITY((((_GLF_IDENTITY(subgroup_local_id + 1, clamp(_GLF_IDENTITY(subgroup_local_id + 1, (_GLF_IDENTITY(subgroup_local_id, 0u ^ (subgroup_local_id)) + 1) * 1u), _GLF_IDENTITY(subgroup_local_id + 1, (false ? _GLF_FUZZED(workgroup_size) : subgroup_local_id + 1)), subgroup_local_id + 1))) % subgroup_size)), (_GLF_IDENTITY((((_GLF_IDENTITY(subgroup_local_id + 1, clamp(_GLF_IDENTITY(subgroup_local_id + 1, (_GLF_IDENTITY(subgroup_local_id, 0u ^ (subgroup_local_id)) + 1) * 1u), _GLF_IDENTITY(subgroup_local_id + 1, (false ? _GLF_FUZZED(workgroup_size) : subgroup_local_id + 1)), subgroup_local_id + 1))) % subgroup_size)), ((((_GLF_IDENTITY(subgroup_local_id + 1, clamp(_GLF_IDENTITY(subgroup_local_id + 1, (_GLF_IDENTITY(subgroup_local_id, 0u ^ (subgroup_local_id)) + 1) * 1u), _GLF_IDENTITY(subgroup_local_id + 1, (false ? _GLF_FUZZED(workgroup_size) : subgroup_local_id + 1)), subgroup_local_id + 1))) % subgroup_size))) | 0u)) / 1u)));
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, bool(bvec3(false, _GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, (true) || false))), _GLF_IDENTITY(false, false || (false)))))))))
  {
   if(_GLF_DEAD(false))
    return;
   barrier();
  }
 for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, (false) && true), true, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), (injectionSwitch.x > injectionSwitch.y))))
    continue;
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))), ! _GLF_IDENTITY(_GLF_IDENTITY((! ((injectionSwitch.x > injectionSwitch.y))), false || (_GLF_IDENTITY((! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))), ! (! ((! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(faceforward(injectionSwitch.g, min(-247.040, -8107.2563), 315.170)) : injectionSwitch.y)))))))))), (_GLF_IDENTITY((! ((injectionSwitch.x > injectionSwitch.y))), false || (_GLF_IDENTITY((! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))), ! (! ((! ((_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(faceforward(injectionSwitch.g, min(-247.040, -8107.2563), 315.170)) : injectionSwitch.y)), true && (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(faceforward(injectionSwitch.g, min(-247.040, -8107.2563), 315.170)) : injectionSwitch.y))))))))))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), (_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (injectionSwitch.x > injectionSwitch.y))) || false)))
    barrier();
  }
 uint read = atomicLoad(buf[virtual_gid], 4, 64, _GLF_IDENTITY(2, max(_GLF_IDENTITY(2, 0 | (2)), 2)));
 if(_GLF_DEAD(false))
  return;
 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) && true)))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) || _GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, (false) && true)), (! (_GLF_IDENTITY(false, (false) && true))) || false))))))))))))
    barrier();
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + 0.0) > injectionSwitch.y), ! (! ((_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + 0.0) > injectionSwitch.y)))))))
    {
     for(int _injected_loop_counter = _GLF_IDENTITY(0, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(0, int(ivec2(0, 0))) : _GLF_FUZZED(34098))); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))).y))); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
    }
   if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
    return;
  }
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) >> 0) < 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
      return;
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (_GLF_IDENTITY(_GLF_IDENTITY(0, (0) * 1) >> _GLF_IDENTITY(int(2), int(2)), int(ivec3(_GLF_IDENTITY(0, (0) * 1) >> _GLF_IDENTITY(int(2), int(2)), 0, 1))))); _injected_loop_counter --)
      {
       return;
      }
    }
  }
 do
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(_GLF_IDENTITY(vec2(_GLF_FUZZED(_GLF_IDENTITY(vec2(264.077, -830.047).y, (_GLF_IDENTITY(vec2(264.077, -830.047).y, 1.0 * (vec2(264.077, -830.047).y))) / 1.0)), _GLF_FUZZED(0.6)), clamp(vec2(_GLF_FUZZED(vec2(264.077, -830.047).y), _GLF_FUZZED(0.6)), vec2(_GLF_FUZZED(_GLF_IDENTITY(vec2(264.077, -830.047).y, clamp(vec2(264.077, -830.047).y, vec2(264.077, -830.047).y, vec2(264.077, -830.047).y))), _GLF_FUZZED(0.6)), vec2(_GLF_FUZZED(vec2(264.077, -830.047).y), _GLF_FUZZED(0.6)))), _GLF_IDENTITY(vec2((injectionSwitch)[0], (injectionSwitch)[1]), min(_GLF_IDENTITY(vec2((injectionSwitch)[0], (injectionSwitch)[1]), (_GLF_IDENTITY(true ? _GLF_IDENTITY(_GLF_IDENTITY(vec2((injectionSwitch)[0], (injectionSwitch)[1]), (vec2((injectionSwitch)[0], (injectionSwitch)[1])) * mat2(1.0)), mat2(1.0) * (_GLF_IDENTITY(vec2((injectionSwitch)[0], (injectionSwitch)[1]), (vec2((injectionSwitch)[0], (injectionSwitch)[1])) * mat2(1.0)))) : _GLF_FUZZED(injectionSwitch), (_GLF_IDENTITY(true ? _GLF_IDENTITY(_GLF_IDENTITY(vec2((injectionSwitch)[0], (injectionSwitch)[1]), (vec2((injectionSwitch)[0], (injectionSwitch)[1])) * mat2(1.0)), mat2(1.0) * (_GLF_IDENTITY(vec2((injectionSwitch)[0], (injectionSwitch)[1]), (vec2((injectionSwitch)[0], (injectionSwitch)[1])) * mat2(1.0)))) : _GLF_FUZZED(injectionSwitch), (true ? true ? _GLF_IDENTITY(_GLF_IDENTITY(vec2((injectionSwitch)[0], (injectionSwitch)[1]), (vec2((injectionSwitch)[0], (injectionSwitch)[1])) * mat2(1.0)), mat2(1.0) * (_GLF_IDENTITY(vec2((injectionSwitch)[0], (injectionSwitch)[1]), (vec2((injectionSwitch)[0], (injectionSwitch)[1])) * mat2(1.0)))) : _GLF_FUZZED(injectionSwitch) : _GLF_FUZZED(vec2(-3.3, 24.02))))) + vec2(0.0, 0.0)))), vec2((injectionSwitch)[0], (injectionSwitch)[1]))), bvec2(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))).y), bool(bvec2((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(vec2(264.077, -830.047), mix(vec2(_GLF_IDENTITY((vec2(264.077, -830.047))[0], mix(float((vec2(264.077, -830.047))[0]), float(_GLF_FUZZED(-5.0)), bool(false))), _GLF_FUZZED((-786.713))), vec2(_GLF_FUZZED(7.4), (vec2(264.077, -830.047))[1]), bvec2(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))).y, mix(float(_GLF_FUZZED(vec3(-3.8, -4.6, 6.1).g)), float(_GLF_IDENTITY(_GLF_IDENTITY(vec2(264.077, -830.047), mix(vec2(_GLF_IDENTITY((vec2(264.077, -830.047))[0], mix(float((vec2(264.077, -830.047))[0]), float(_GLF_FUZZED(-5.0)), bool(false))), _GLF_FUZZED((-786.713))), vec2(_GLF_FUZZED(7.4), (vec2(264.077, -830.047))[1]), bvec2(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))).y, (true ? _GLF_IDENTITY(vec2(264.077, -830.047), mix(vec2(_GLF_IDENTITY((vec2(264.077, -830.047))[0], mix(float((vec2(264.077, -830.047))[0]), float(_GLF_FUZZED(-5.0)), bool(false))), _GLF_FUZZED((-786.713))), vec2(_GLF_FUZZED(7.4), (vec2(264.077, -830.047))[1]), bvec2(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))).y : _GLF_FUZZED(-649.490)))), bool(true))), max(_GLF_IDENTITY(vec2(264.077, -830.047).y, float(mat3x4(vec2(264.077, -830.047).y, 0.0, 0.0, determinant(mat4(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(1.0, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 1.0 : _GLF_FUZZED(0.7))), 0.0, 0.0, 0.0, 0.0)), 0.0, 1.0, 1.0, _GLF_IDENTITY(0.0, float(vec2(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, _GLF_IDENTITY(0.0, float(mat3x4(0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0))))), 0.0))), 1.0, 1.0, 1.0, 0.0))), vec2(264.077, -830.047).y))), _GLF_IDENTITY(_GLF_FUZZED(0.6), (_GLF_IDENTITY(_GLF_FUZZED(0.6), max(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(0.6), (false ? _GLF_FUZZED(0.9) : _GLF_FUZZED(0.6))), mix(float(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(0.6), (false ? _GLF_FUZZED(0.9) : _GLF_FUZZED(0.6))), min(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(0.6), (false ? _GLF_FUZZED(0.9) : _GLF_FUZZED(0.6))), min(_GLF_IDENTITY(_GLF_FUZZED(0.6), (false ? _GLF_FUZZED(0.9) : _GLF_FUZZED(0.6))), _GLF_IDENTITY(_GLF_FUZZED(0.6), (false ? _GLF_FUZZED(0.9) : _GLF_FUZZED(0.6))))), _GLF_IDENTITY(_GLF_FUZZED(0.6), (false ? _GLF_FUZZED(0.9) : _GLF_FUZZED(0.6)))))), float(_GLF_FUZZED(-2996.1036)), bool(false))), _GLF_FUZZED(0.6)))) - 0.0)), vec2((injectionSwitch)[0], (injectionSwitch)[_GLF_IDENTITY(1, 0 | (1))]), bvec2(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))).y), false))))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
           return;
          }
        }
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(sqrt(26.67)) : injectionSwitch.x)) < injectionSwitch.y))))
          {
           barrier();
          }
         else
          {
          }
        }
      }
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, false || (false))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     else
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(9522.4855) : injectionSwitch.y))))))
          return;
         barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
          }
        }
      }
     return;
     if(_GLF_DEAD(false))
      break;
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4)))); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          barrier();
        }
      }
    }
   if(_GLF_DEAD(false))
    continue;
  }
 while(_GLF_WRAPPED_LOOP(false));
 do
  {
   if((subgroup_local_id % 2) == 0)
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(false, ! (! (false))), false)), ! (! (bool(bvec2(_GLF_IDENTITY(false, ! (! (false))), false))))))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       do
        {
         return;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      break;
     subgroupAll(_GLF_IDENTITY(false, bool(bvec2(false, false))));
     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((false) && true, ! (! ((false) && true))))))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
         do
          {
           do
            {
             return;
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))))));
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
     do
      {
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, sin(vec2(0.0, 0.0)) + (injectionSwitch)).y)))) || false))
        {
         for(int _injected_loop_counter = (0 << _GLF_IDENTITY(_GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (int(4)) / 1)), min(_GLF_IDENTITY(_GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (int(4)) / 1)), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (int(4)) / 1)), int(ivec4(_GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (int(4)) / 1)), 0, 1, 1)))))), _GLF_IDENTITY(_GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (int(4)) / 1)), (_GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (int(4)) / 1))) | 0)))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            {
             do
              {
               return;
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
            }
          }
         return;
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          break;
         atomicStore(buf[_GLF_IDENTITY(_GLF_IDENTITY(next_virtual_gid, (next_virtual_gid) / uint(_GLF_ONE(1.0, injectionSwitch.y))), 0u | (next_virtual_gid))], _GLF_IDENTITY(uint(1), (uint(1)) | (uint(1))), 4, 64, 4);
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(mat3x4(_GLF_IDENTITY(injectionSwitch, mix(_GLF_IDENTITY(vec2((injectionSwitch)[0], (injectionSwitch)[1]), clamp(_GLF_IDENTITY(vec2((injectionSwitch)[0], (injectionSwitch)[1]), mat2(1.0) * (vec2((injectionSwitch)[0], (injectionSwitch)[1]))), vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2((injectionSwitch)[0], (injectionSwitch)[1]))), vec2(_GLF_FUZZED(9.9), _GLF_FUZZED(4740.8675)), bvec2(false, false))), 0.0, 0.0, 1.0, 0.0, tan(_GLF_IDENTITY(0.0, 0.0 + (0.0))), 1.0, 0.0, 0.0, 1.0, 1.0))).y)), (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec2(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec4((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)), _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)))).y), true, true, _GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, true && (true)))))), ! (! (bool(bvec4((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)), _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)))).y), true, true, _GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, true && (true))))))))), ! (! (bool(bvec4((injectionSwitch.x > injectionSwitch.y), true, true, true)))))), false))))) || _GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(false), _GLF_IDENTITY(bool(bvec4(bool(false), false, true, false)), (bool(bvec4(bool(false), false, true, false))) && true))), ! (! (bool(_GLF_IDENTITY(bool(false), _GLF_IDENTITY(bool(bvec4(bool(false), false, true, false)), (bool(bvec4(bool(false), false, true, false))) && true))))))))))
            return;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               return;
              }
             else
              {
               if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), bool(bvec3(! (_GLF_DEAD(false)), true, true))))))
                break;
              }
            }
          }
         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
          return;
        }
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(false || (false), ! (! (_GLF_IDENTITY(false || (false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false || (false)))))))))
        {
         if(_GLF_DEAD(false))
          return;
         return;
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           return;
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
          }
        }
       return;
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(true && (false), ! (! (true && _GLF_IDENTITY((false), ((false)) || _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(_GLF_ONE(1.0, injectionSwitch.y))).y))))))), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(true && (false), ! (! (true && _GLF_IDENTITY((false), ((false)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), (_GLF_IDENTITY(false, _GLF_IDENTITY(true && (false), ! (! (true && _GLF_IDENTITY((false), ((false)) || _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], (injectionSwitch[1]) + 0.0))).y)))))))) && true), true, true)), ! (! (_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(true, false || (true)) && (false), ! (! (true && _GLF_IDENTITY((false), ((false)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), (_GLF_IDENTITY(false, _GLF_IDENTITY(true && (false), ! (! (true && _GLF_IDENTITY((false), ((false)) || _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(mat4x3(injectionSwitch.x, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(dot(vec2(0.0, 0.0), vec2(exp(0.0), 1.0)), dot(vec2(0.0, 0.0), vec2(exp(0.0), 1.0))), 0.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x))), clamp(_GLF_IDENTITY(float(mat4x3(injectionSwitch.x, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(dot(vec2(0.0, 0.0), vec2(exp(0.0), 1.0)), dot(vec2(0.0, 0.0), vec2(exp(0.0), 1.0))), 0.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x))), clamp(float(mat4x3(injectionSwitch.x, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(dot(vec2(0.0, 0.0), vec2(exp(0.0), 1.0)), dot(vec2(0.0, 0.0), vec2(exp(0.0), 1.0))), 0.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x))), float(mat4x3(injectionSwitch.x, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(dot(vec2(0.0, 0.0), vec2(exp(0.0), 1.0)), dot(vec2(0.0, 0.0), vec2(exp(0.0), 1.0))), 0.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x))), float(mat4x3(injectionSwitch.x, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(dot(vec2(0.0, 0.0), vec2(exp(0.0), 1.0)), dot(vec2(0.0, 0.0), vec2(exp(0.0), 1.0))), 0.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x))))), float(mat4x3(injectionSwitch.x, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(dot(vec2(0.0, 0.0), vec2(exp(0.0), 1.0)), dot(vec2(0.0, 0.0), vec2(exp(0.0), 1.0))), 0.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x))), float(mat4x3(injectionSwitch.x, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(dot(vec2(0.0, 0.0), vec2(exp(0.0), 1.0)), dot(vec2(0.0, 0.0), vec2(exp(0.0), 1.0))), 0.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x)))))) > injectionSwitch.y)))))))) && true), true, true), bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(true, false || (true)) && (false), ! (! (true && _GLF_IDENTITY((false), ((false)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), (_GLF_IDENTITY(false, _GLF_IDENTITY(true && (false), ! (! (true && _GLF_IDENTITY((false), ((false)) || _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(mat4x3(injectionSwitch.x, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(dot(vec2(0.0, 0.0), vec2(exp(0.0), 1.0)), dot(vec2(0.0, 0.0), vec2(exp(0.0), 1.0))), 0.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x))), clamp(_GLF_IDENTITY(float(mat4x3(injectionSwitch.x, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(dot(vec2(0.0, 0.0), vec2(exp(0.0), 1.0)), dot(vec2(0.0, 0.0), vec2(exp(0.0), 1.0))), 0.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x))), clamp(float(mat4x3(injectionSwitch.x, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(dot(vec2(0.0, 0.0), vec2(exp(0.0), 1.0)), dot(vec2(0.0, 0.0), vec2(exp(0.0), 1.0))), 0.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x))), float(mat4x3(injectionSwitch.x, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(dot(vec2(0.0, 0.0), vec2(exp(0.0), 1.0)), dot(vec2(0.0, 0.0), vec2(exp(0.0), 1.0))), 0.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x))), float(mat4x3(injectionSwitch.x, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(dot(vec2(0.0, 0.0), vec2(exp(0.0), 1.0)), dot(vec2(0.0, 0.0), vec2(exp(0.0), 1.0))), 0.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x))))), float(mat4x3(injectionSwitch.x, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(dot(vec2(0.0, 0.0), vec2(exp(0.0), 1.0)), dot(vec2(0.0, 0.0), vec2(exp(0.0), 1.0))), 0.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x))), float(mat4x3(injectionSwitch.x, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(dot(vec2(0.0, 0.0), vec2(exp(0.0), 1.0)), dot(vec2(0.0, 0.0), vec2(exp(0.0), 1.0))), 0.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x)))))) > injectionSwitch.y)))))))) && true), true, true), bvec3(bvec3(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(true, false || (true)) && (false), ! (! (true && _GLF_IDENTITY((false), ((false)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), (_GLF_IDENTITY(false, _GLF_IDENTITY(true && (false), ! (! (true && _GLF_IDENTITY((false), ((false)) || _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(mat4x3(injectionSwitch.x, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(dot(vec2(0.0, 0.0), vec2(exp(0.0), 1.0)), dot(vec2(0.0, 0.0), vec2(exp(0.0), 1.0))), 0.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x))), clamp(_GLF_IDENTITY(float(mat4x3(injectionSwitch.x, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(dot(vec2(0.0, 0.0), vec2(exp(0.0), 1.0)), dot(vec2(0.0, 0.0), vec2(exp(0.0), 1.0))), 0.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x))), clamp(float(mat4x3(injectionSwitch.x, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(dot(vec2(0.0, 0.0), vec2(exp(0.0), 1.0)), dot(vec2(0.0, 0.0), vec2(exp(0.0), 1.0))), 0.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x))), float(mat4x3(injectionSwitch.x, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(dot(vec2(0.0, 0.0), vec2(exp(0.0), 1.0)), dot(vec2(0.0, 0.0), vec2(exp(0.0), 1.0))), 0.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x))), float(mat4x3(injectionSwitch.x, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(dot(vec2(0.0, 0.0), vec2(exp(0.0), 1.0)), dot(vec2(0.0, 0.0), vec2(exp(0.0), 1.0))), 0.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x))))), float(mat4x3(injectionSwitch.x, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(dot(vec2(0.0, 0.0), vec2(exp(0.0), 1.0)), dot(vec2(0.0, 0.0), vec2(exp(0.0), 1.0))), 0.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x))), float(mat4x3(injectionSwitch.x, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(dot(vec2(0.0, 0.0), vec2(exp(0.0), 1.0)), dot(vec2(0.0, 0.0), vec2(exp(0.0), 1.0))), 0.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x)))))) > injectionSwitch.y)))))))) && true), true, true)))), false)))), ! (! (bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(true && (false), ! (! (true && _GLF_IDENTITY((false), ((false)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), (_GLF_IDENTITY(false, _GLF_IDENTITY(true && (false), ! (! (_GLF_IDENTITY(true && _GLF_IDENTITY((false), ((false)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (_GLF_IDENTITY(! (true && _GLF_IDENTITY((false), ((false)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (! (_GLF_IDENTITY(! (true && _GLF_IDENTITY((false), ((false)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false || (! (true && _GLF_IDENTITY((false), ((false)) || _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0) > injectionSwitch.y)))))))))))))))) && true), true, true)))))))))))
        return;
      }
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec4(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true)))))))))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         return;
        }
       else
        {
        }
      }
    }
   else
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter < _GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), int(ivec3(int(_GLF_ONE(1.0, injectionSwitch.y)), 1, 1))), ! (! (_GLF_IDENTITY(_injected_loop_counter, (_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) << 0)) >> (1953 & 0)) < int(_GLF_ONE(1.0, injectionSwitch.y))))), bool(bvec4(_GLF_IDENTITY(_injected_loop_counter < _GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), int(ivec3(int(_GLF_ONE(1.0, injectionSwitch.y)), 1, 1))), ! (! (_GLF_IDENTITY(_injected_loop_counter, (_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) << 0)) >> (1953 & 0)) < int(_GLF_ONE(1.0, injectionSwitch.y))))), true, false, true)))); _injected_loop_counter ++)
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
          }
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           continue;
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            break;
           barrier();
          }
         subgroupAll(false);
         if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), ! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(_GLF_IDENTITY(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, false), bvec3(bvec3(_GLF_IDENTITY(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, false), bvec3(bvec4(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, false), true)))))))))), (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(2.5)), float(injectionSwitch.x), bool(true))) > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec2(false, true))), (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(_GLF_FUZZED(2.5), (false ? _GLF_FUZZED(8.2) : _GLF_FUZZED(2.5)))), float(injectionSwitch.x), bool(true))) > injectionSwitch.y)))))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
          barrier();
         if(_GLF_DEAD(false))
          break;
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            break;
           continue;
          }
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          continue;
        }
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(false))
        return;
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        break;
       barrier();
      }
     atomicStore(buf[next_virtual_gid], uint(1), 4, 64, 4);
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 do
  {
   subgroupBarrier();
  }
 while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bvec3(injectionSwitch.x > injectionSwitch.y, false, true)), false || (_GLF_IDENTITY(bool(bvec3(injectionSwitch.x > injectionSwitch.y, false, true)), ! (! (bool(bvec3(injectionSwitch.x > injectionSwitch.y, false, true)))))))))), true && (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0)), (_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0)), ! (_GLF_IDENTITY(! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0))), true && (! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0)))))))) && true))))), (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) || false), true, true)), (bool(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) || false), true, true))) || false)));
 if(_GLF_DEAD(false))
  {
   do
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         barrier();
        }
       return;
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   barrier();
  }
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(bool(false), bool(bvec4(_GLF_IDENTITY(bool(false), (bool(false)) && true), true, true, true))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true)), ! (! (bool(bvec4(bool(false), _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y)), true, true))))), (_GLF_IDENTITY(bool(bvec4(bool(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, _GLF_IDENTITY(true, bool(bvec3(true, true, true))))), ! (! (bool(bvec4(_GLF_IDENTITY(bool(false), ! (! (bool(false)))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true)))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(bool(bvec4(bool(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true)), ! (! (bool(bvec4(bool(false), _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y))) && true), true, true))))), ! (! (_GLF_IDENTITY(bool(bvec4(bool(false), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, vec2(mat2x3(injectionSwitch, 1.0, 0.0, determinant(mat3(0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0)), abs(1.0)))), injectionSwitch)).x > injectionSwitch.y)), true, true)), ! (! (bool(bvec4(bool(false), _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(mat2x4(injectionSwitch, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0))))).y)), true, true)))))))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(bool(bvec4(bool(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true)), ! (! (bool(bvec4(bool(false), _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y))) && true), true, true))))), ! (! (_GLF_IDENTITY(bool(bvec4(bool(false), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, vec2(mat2x3(injectionSwitch, 1.0, 0.0, determinant(mat3(0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0)), abs(1.0)))), injectionSwitch)).x > injectionSwitch.y)), true, true)), ! (! (bool(bvec4(bool(false), _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(mat2x4(injectionSwitch, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0))))).y)), true, true)))))))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(bool(false), ! (! (_GLF_IDENTITY(bool(false), false || (bool(false)))))), _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y)), true, true)), ! (! (bool(bvec4(bool(false), _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y))) && true), true, true))))), ! (! (_GLF_IDENTITY(bool(bvec4(bool(false), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, vec2(mat2x3(injectionSwitch, 1.0, 0.0, determinant(mat3(0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0)), abs(1.0)))), injectionSwitch)).x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)))), true, true)), ! (! (bool(bvec4(bool(false), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(mat2x4(injectionSwitch, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0))))).y, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(mat2x4(injectionSwitch, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0))))).y, false || (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(mat2x4(injectionSwitch, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0))))).y)), false), bvec2(bvec2(bvec2(_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(mat2x4(injectionSwitch, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0))))).y, false || (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(mat2x4(injectionSwitch, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0))))).y)), false))))), (bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(mat2x4(injectionSwitch, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0))))).y, false || (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(mat2x4(injectionSwitch, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0))))).y)), false), bvec2(bvec2(bvec2(_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(mat2x4(injectionSwitch, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0))))).y, false || (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(mat2x4(injectionSwitch, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0))))).y)), false)))))) && true)))), true, true)))))))))))) || _GLF_IDENTITY(false, bool(bvec2(false, false)))))))))), (_GLF_IDENTITY(injectionSwitch.x, float(mat3(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0), 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(0.0, _GLF_IDENTITY(1.0, float(mat2(1.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), max(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, 0.0)))))))), 1.0)), dot(vec3(1.0, 0.0, 0.0), vec3(0.0, 1.0, 1.0)))))) > injectionSwitch.y))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(bool(false), bool(bvec4(_GLF_IDENTITY(bool(false), (bool(false)) && true), true, true, true))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true)), ! (! (bool(bvec4(bool(false), _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y)), true, true))))), (_GLF_IDENTITY(bool(bvec4(bool(false), _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(mat4x2(injectionSwitch, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0))))).y)), true, _GLF_IDENTITY(true, bool(bvec3(true, true, true))))), ! (! (bool(bvec4(_GLF_IDENTITY(bool(false), ! (! (bool(false)))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true)))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(bool(bvec4(bool(false), _GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y)), true, true)), _GLF_IDENTITY(! (! (bool(bvec4(bool(false), _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y))) && true), true, true)))), ! (_GLF_IDENTITY(! (! (! (bool(bvec4(bool(false), _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y))) && true), true, true))))), bool(bvec2(! (! (! (bool(bvec4(bool(false), _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y))) && true), true, true))))), false)))))), ! (! (_GLF_IDENTITY(bool(bvec4(bool(false), _GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * _GLF_IDENTITY(mat2(1.0), mat2(mat4x3(mat2(1.0))))), max(_GLF_IDENTITY(injectionSwitch, vec2(mat2x3(injectionSwitch, 1.0, 0.0, determinant(mat3(0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0)), abs(1.0)))), injectionSwitch)).x > injectionSwitch.y)), true, true)), ! (! _GLF_IDENTITY((bool(bvec4(bool(false), _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(mat2x4(injectionSwitch, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0)))), mix(vec2(_GLF_FUZZED(-410.017), _GLF_FUZZED(vec3(-155.853, -790.592, -5132.5756).b)), vec2((max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(mat2x4(injectionSwitch, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0)))))[0], (max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(mat2x4(injectionSwitch, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0)))))[1]), bvec2(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))).y)), true, true))), ((bool(bvec4(bool(false), _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(mat2x4(injectionSwitch, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0)))), mix(vec2(_GLF_FUZZED(-410.017), _GLF_FUZZED(vec3(-155.853, -790.592, -5132.5756).b)), vec2((max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(mat2x4(injectionSwitch, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0)))))[0], (max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(mat2x4(injectionSwitch, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0)))))[1]), bvec2(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))).y)), true, true)))) || false)))))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(bool(bvec4(bool(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true)), ! (! (bool(bvec4(bool(false), _GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec2(false, false)))) || false), false, true), bvec3(bvec4(bvec3(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec2(false, false)))) || false), false, true), false))))), (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y))) && true, ! (! ((_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y))) && true)))), true, true))))), ! (! (_GLF_IDENTITY(bool(bvec4(bool(false), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, vec2(mat2x3(injectionSwitch, 1.0, 0.0, determinant(mat3(0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0)), abs(1.0)))), injectionSwitch)).x > injectionSwitch.y)), true, true)), ! (! (bool(bvec4(bool(false), _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat2x4(injectionSwitch, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0)), vec2(mat2x4(vec2(mat2x4(injectionSwitch, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0)), 0.0, abs(1.0), cos(0.0), 1.0, 0.0, 1.0)))))).y)), true, true)))))))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(bool(false), ! (! (_GLF_IDENTITY(bool(false), false || (bool(false)))))), _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y)), _GLF_IDENTITY(true, ! (! (true))), true)), ! (! (bool(bvec4(bool(false), _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y))) && true), true, true))))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(bool(false), true && (bool(false))), _GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, vec2(mat2x3(injectionSwitch, 1.0, 0.0, determinant(mat3(0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0)), abs(1.0)))), injectionSwitch)).x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), bool(bvec3(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, vec2(mat2x3(injectionSwitch, 1.0, 0.0, determinant(mat3(0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0)), abs(1.0)))), injectionSwitch)).x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), false, false))))), true, _GLF_IDENTITY(true, (true) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), ! (! (_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(bool(false), true && (bool(false))), _GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, vec2(mat2x3(injectionSwitch, 1.0, 0.0, determinant(mat3(0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0)), abs(1.0)))), injectionSwitch)).x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), bool(bvec3(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, vec2(mat2x3(injectionSwitch, 1.0, 0.0, determinant(mat3(0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0)), abs(1.0)))), injectionSwitch)).x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), false, false))))), true, _GLF_IDENTITY(true, (true) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), (bool(bvec4(_GLF_IDENTITY(bool(false), true && (bool(false))), _GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, vec2(mat2x3(injectionSwitch, 1.0, 0.0, determinant(mat3(0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0)), abs(1.0)))), injectionSwitch)).x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), bool(bvec3(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, vec2(mat2x3(injectionSwitch, 1.0, 0.0, determinant(mat3(0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0)), abs(1.0)))), injectionSwitch)).x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), false, false))))), true, _GLF_IDENTITY(true, (true) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) && true)))), ! (! (bool(bvec4(bool(false), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(mat2x4(injectionSwitch, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0))))).y, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(mat2x4(injectionSwitch, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0))))).y, false || (_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-41.49)), bool(false))), _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)))) > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(mat2x4(injectionSwitch, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0))))).y)), false), bvec2(bvec2(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(mat2x4(injectionSwitch, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0))))).y, false || (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(mat2x4(injectionSwitch, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0))))).y)), bool(bvec4(_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(mat2x4(injectionSwitch, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0))))).y, false || (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(mat2x4(injectionSwitch, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0))))).y)), false, false, false))), false))))), (bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(mat2x4(injectionSwitch, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0))))).y, false || (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(mat2x4(injectionSwitch, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0))))).y)), false), bvec2(bvec2(bvec2(_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(mat2x4(injectionSwitch, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0))))).y, _GLF_IDENTITY(false, bool(bvec2(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) || (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(mat2x4(injectionSwitch, 1.0, 1.0, 0.0, 1.0, _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), 1.0))))).y)), false)))))) && true)))), true, true)))))))))))) || _GLF_IDENTITY(false, bool(bvec2(false, false)))))))))), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), float(mat3(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0), 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(min(length(vec3(-5.0, 208.851, -93.01)), 56.80)))), _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(0.0, _GLF_IDENTITY(1.0, float(mat2(1.0, _GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0)))))), 0.0, _GLF_IDENTITY(dot(_GLF_IDENTITY(vec2(1.0, 0.0), max(vec2(1.0, 0.0), _GLF_IDENTITY(vec2(1.0, 0.0), min(vec2(1.0, 0.0), _GLF_IDENTITY(vec2(1.0, 0.0), mat2(1.0) * (vec2(1.0, 0.0))))))), vec2(1.0, 0.0)), _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), max(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), _GLF_IDENTITY(vec2(1.0, 0.0), (false ? _GLF_FUZZED(injectionSwitch) : vec2(1.0, 0.0)))))))))), 1.0)), dot(vec3(1.0, 0.0, 0.0), vec3(0.0, 1.0, 1.0)))))) > injectionSwitch.y))))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || _GLF_IDENTITY(false, bool(bvec2(false, true))))))))), bool(bvec3(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, false))))
    return;
   if(_GLF_DEAD(false))
    return;
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
    {
     return;
    }
   for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * sqrt(1.0)) > injectionSwitch.y))))
  return;
 atomicStore(buf[virtual_gid], _GLF_IDENTITY(_GLF_IDENTITY(read, (read) - 0u), (true ? _GLF_IDENTITY(_GLF_IDENTITY(read, (read) - 0u), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(read, (read) - 0u), max(_GLF_IDENTITY(read, (read) - 0u), _GLF_IDENTITY(read, (read) - 0u)))) | 0u, uint(uvec2((_GLF_IDENTITY(_GLF_IDENTITY(read, (read) - 0u), max(_GLF_IDENTITY(read, (read) - 0u), _GLF_IDENTITY(read, (read) - 0u)))) | 0u, 1u)))) : _GLF_FUZZED(virtual_gid))), 4, 64, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(4, (_GLF_IDENTITY(4, min(4, 4))) + int(_GLF_ZERO(0.0, injectionSwitch.x))), (_GLF_IDENTITY(4, int(_GLF_IDENTITY(ivec2(_GLF_IDENTITY(4, (true ? 4 : _GLF_FUZZED(-44110))), (1 & 1)), max(ivec2(_GLF_IDENTITY(4, (true ? 4 : _GLF_FUZZED(-44110))), _GLF_IDENTITY((1 & 1), min((1 & 1), _GLF_IDENTITY((1 & 1), max(_GLF_IDENTITY((1 & 1), ((1 & 1)) << 0), (1 & 1)))))), ivec2(_GLF_IDENTITY(4, (true ? 4 : _GLF_FUZZED(-44110))), (1 & 1))))))) ^ 0), max(_GLF_IDENTITY(_GLF_IDENTITY(4, (_GLF_IDENTITY(4, min(4, 4))) + int(_GLF_ZERO(0.0, injectionSwitch.x))), (_GLF_IDENTITY(4, int(_GLF_IDENTITY(ivec2(_GLF_IDENTITY(4, (true ? 4 : _GLF_FUZZED(-44110))), (1 & 1)), max(ivec2(_GLF_IDENTITY(4, (true ? 4 : _GLF_FUZZED(-44110))), _GLF_IDENTITY((1 & 1), min((1 & 1), _GLF_IDENTITY((1 & 1), max(_GLF_IDENTITY((1 & 1), ((1 & 1)) << 0), (1 & 1)))))), ivec2(_GLF_IDENTITY(4, (true ? 4 : _GLF_FUZZED(-44110))), (1 & 1))))))) ^ 0), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(4, (_GLF_IDENTITY(4, min(4, 4))) + int(_GLF_ZERO(0.0, injectionSwitch.x))), (_GLF_IDENTITY(4, int(_GLF_IDENTITY(ivec2(_GLF_IDENTITY(4, (true ? 4 : _GLF_FUZZED(-44110))), (1 & 1)), max(ivec2(_GLF_IDENTITY(4, (true ? 4 : _GLF_FUZZED(-44110))), _GLF_IDENTITY((1 & 1), min((1 & 1), _GLF_IDENTITY((1 & 1), max(_GLF_IDENTITY((1 & 1), ((1 & 1)) << 0), (1 & 1)))))), ivec2(_GLF_IDENTITY(4, (true ? 4 : _GLF_FUZZED(-44110))), (1 & 1))))))) ^ 0), max(_GLF_IDENTITY(_GLF_IDENTITY(4, (_GLF_IDENTITY(4, min(4, 4))) + int(_GLF_ZERO(0.0, injectionSwitch.x))), (_GLF_IDENTITY(4, int(_GLF_IDENTITY(ivec2(_GLF_IDENTITY(4, (true ? 4 : _GLF_FUZZED(-44110))), (1 & 1)), max(ivec2(_GLF_IDENTITY(4, (true ? 4 : _GLF_FUZZED(-44110))), _GLF_IDENTITY((1 & 1), min((1 & 1), _GLF_IDENTITY((1 & 1), max(_GLF_IDENTITY((1 & 1), ((1 & 1)) << 0), (1 & 1)))))), ivec2(_GLF_IDENTITY(4, (true ? 4 : _GLF_FUZZED(-44110))), (1 & 1))))))) ^ 0), _GLF_IDENTITY(_GLF_IDENTITY(4, (_GLF_IDENTITY(4, min(4, 4))) + int(_GLF_ZERO(0.0, injectionSwitch.x))), (_GLF_IDENTITY(4, int(_GLF_IDENTITY(ivec2(_GLF_IDENTITY(4, (true ? 4 : _GLF_FUZZED(-44110))), (1 & 1)), max(ivec2(_GLF_IDENTITY(4, (true ? 4 : _GLF_FUZZED(-44110))), _GLF_IDENTITY((1 & 1), min((1 & 1), _GLF_IDENTITY((1 & 1), max(_GLF_IDENTITY((1 & 1), ((1 & 1)) << 0), (1 & 1)))))), ivec2(_GLF_IDENTITY(4, (true ? 4 : _GLF_FUZZED(-44110))), (1 & 1))))))) ^ 0))))));
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END
BUFFER checker DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected_checker DATA_TYPE uint32 SIZE 8388096 FILL 0

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 
  BIND BUFFER checker AS storage DESCRIPTOR_SET 0 BINDING 2 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT checker EQ_BUFFER expected_checker
