#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = workgroup_size * workgroup_id;
 uint subgroup_base = subgroup_id * subgroup_size;
 uint virtual_gid = workgroup_base + subgroup_base + subgroup_local_id;
 uint next_virtual_gid = workgroup_base + subgroup_base + ((subgroup_local_id + 1) % subgroup_size);
 atomicStore(buf[virtual_gid], uint(1), 4, 64, 4);
 if((subgroup_local_id % 2) == 0)
  {
   switch(_GLF_SWITCH(int(_GLF_ZERO(0.0, injectionSwitch.x))))
    {
     case 1:
     mat2x3(-3.7, 22.53, -179.987, 3.5, -9.3, 12.86);
     case 93:
     if((-3.2 != vec3(8.0, 52.26, 92.52)[0]))
      {
       for(uvec4 _GLF_SWITCH_0_0v; true; matrixCompMult(mat2(4375.7584, -16.08, 0.5, -668.637), (mat2(-1986.4329, 1.3, 885.148, 464.575) * mat2(-56.28, -76.35, 1.2, -929.973))))
        {
         ;
         {
          mat4(-7.2, -32.82, -1.7, 89.52, -60.37, 8609.1989, 354.296, -19.33, -1.0, 9.0, 5677.9874, 0.7, 25.08, -8.4, -727.919, -117.161);
          vec3(-714.444, 8.5, 6.6);
          bvec4(false, true, false, true);
          outerProduct(injectionSwitch, mat4(-29.60, -5.6, 1.7, -243.387, 8860.4916, -26.36, -15.78, 9618.2488, -9.7, 9.3, -0.7, -531.339, 8486.7457, -643.990, -5.2, 9.5)[1]);
         }
         {
          ((! false) , -62318);
          uvec4(uvec2(97037u, 130961u), workgroup_size, subgroup_local_id);
          mat4(-1235.9992, -8.5, 7.1, -757.780, 418.561, 1.5, 7724.1573, -4.4, 44.07, 4.7, 74.85, -957.850, 6.4, -804.557, 54.01, 8.3);
          (-98456 + 80835);
          float((ivec2(93740, 80750) == (ivec2(-77905, -42917) % ivec2(16800, 97457))));
         }
        }
      }
     else
      {
       {
        while(false)
         {
          (-30342 - ivec4(99283, -15823, 77815, 74490));
         }
        for(vec4 _GLF_SWITCH_0_1v, _GLF_SWITCH_0_2v[17]; false; (+ mod(vec2(1.9, 68.93), -9.6)))
         {
          bvec2(false, true);
          bvec2 _GLF_SWITCH_0_3v, _GLF_SWITCH_0_4v;
          bool _GLF_SWITCH_0_5v, _GLF_SWITCH_0_6v, _GLF_SWITCH_0_7v;
          uvec3(99944u, 51513u, 176735u);
          mat3 _GLF_SWITCH_0_8v, _GLF_SWITCH_0_9v[9];
         }
        (ivec2(-64404, 58797) & -76051);
        uvec4 _GLF_SWITCH_0_10v[59];
        if((determinant(mat4(-40.37, -9.1, -11.85, -93.80, -7614.0222, -513.147, -27.57, 4.6, 104.562, -4.4, 2.1, 1.3, -2.1, -7960.9168, -558.606, 2322.5596)) < 3.6))
         {
          mat4(859.109, 610.194, -8.2, -563.686, 8328.7400, -9.7, 54.32, -9.3, 38.76, 3605.0003, -42.16, -535.892, 9327.4659, 2.2, -9144.7355, -23.10);
          uvec4(147875u, 142825u, 159220u, 160779u);
          mat4x3 _GLF_SWITCH_0_11v, _GLF_SWITCH_0_12v;
         }
        else
         {
          (~ uvec4(70132u, 197289u, 16735u, 30254u));
          bvec3 _GLF_SWITCH_0_13v;
          mat3x4 _GLF_SWITCH_0_14v[92];
          ivec3(-90962, 2833, 88226);
          mat4x2(7.7, 96.99, -3954.4407, 5455.5196, 1.0, 2.9, -61.77, -524.395);
          uvec3(194314u, 46715u, 136895u);
         }
        vec3 _GLF_SWITCH_0_15v;
       }
       ivec2 _GLF_SWITCH_0_16v[92];
       ivec3(15846, 76515, 20303);
       for(       mat4x3(41.13, -82.17, 202.588, 91.97, 80.81, 4494.5281, 24.46, 2.1, 8.8, 55.34, -1.7, -566.700);
 true; ivec4(-59330, -56158, 11046, 45328))
        {
        }
       for(       false;
 false; bvec2(false, true))
        {
         vec3 _GLF_SWITCH_0_17v[60], _GLF_SWITCH_0_18v[31], _GLF_SWITCH_0_19v;
        }
      }
     case 0:
     case 35:
     case 76:
     case 11:
     case 97:
     case 87:
     subgroupAll(true);
     case 82:
     case 94:
     case 2:
     atomicStore(buf[next_virtual_gid], uint(2), 4, 64, 4);
     break;
     default:
     1;
    }
  }
 else
  {
   switch(_GLF_SWITCH(0))
    {
     case 59:
     uint _GLF_SWITCH_2_0v, _GLF_SWITCH_2_1v;
     case 12:
     if((workgroup_base < (subgroup_id >> workgroup_id)))
      {
       for(mat2x3 _GLF_SWITCH_2_2v; (uvec4(84562u, 28383u, 168834u, 1378u) != ((uvec4(107832u, 163552u, 3481u, 49553u) | _GLF_SWITCH_2_1v) << (uvec4(97570u, 127382u, 102190u, 142639u) / uvec4(189188u, 162702u, 79678u, 51648u)))); (uvec2(17834u, 24570u) * max((uvec2(181462u, 38063u) << _GLF_SWITCH_2_0v), subgroup_size)))
        {
        }
       ivec3 _GLF_SWITCH_2_3v;
       while(isnan(acos(-9.9)))
        {
         ;
         mat4x2 _GLF_SWITCH_2_4v, _GLF_SWITCH_2_5v[53];
        }
      }
     case 0:
     case 96:
     case 89:
     case 61:
     case 26:
     case 83:
     case 29:
     case 97:
     case 68:
     switch(_GLF_SWITCH(0))
      {
       case 86:
       ivec2 _GLF_SWITCH_1_0v, _GLF_SWITCH_1_1v, _GLF_SWITCH_1_2v;
       case 0:
       case 3:
       case 35:
       case 77:
       case 97:
       subgroupAll(false);
       case 75:
       case 42:
       case 1:
       atomicStore(buf[next_virtual_gid], uint(2), 4, 64, 4);
       break;
       case 21:
       -72836;
       default:
       1;
      }
     break;
     default:
     1;
    }
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
