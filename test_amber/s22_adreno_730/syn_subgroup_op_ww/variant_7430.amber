#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 do
  {
   if(_GLF_DEAD(false))
    {
     do
      {
       return;
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), (bool(bool(false))) && true))));
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = _GLF_IDENTITY(gl_NumWorkGroups.x, (_GLF_IDENTITY(gl_NumWorkGroups.x, min(gl_NumWorkGroups.x, gl_NumWorkGroups.x))) | 0u);
 uint workgroup_size = _GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) ^ uvec3(0u, 0u, 0u)).x;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! _GLF_IDENTITY((_GLF_IDENTITY(! (false), bool(bvec2(! (false), false)))), false || ((_GLF_IDENTITY(! (false), bool(bvec2(! (false), false)))))))))), (injectionSwitch.x > injectionSwitch.y))))))
  return;
 uint workgroup_id = _GLF_IDENTITY(gl_WorkGroupID, (_GLF_IDENTITY(gl_WorkGroupID, _GLF_IDENTITY((gl_WorkGroupID), uvec3(_GLF_IDENTITY(uvec4((gl_WorkGroupID), 1u), (uvec4((gl_WorkGroupID), 1u)) - uvec4(0u, 0u, 0u, 0u)))) / uvec3(1u, 1u, 1u))) ^ uvec3(0u, 0u, 0u)).x;
 if(_GLF_DEAD(false))
  {
   do
    {
     return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bvec4(true, false, true, true)))))
      {
       return;
       do
        {
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(ivec3(int(3), 1, 1)), (int(ivec3(int(3), 1, 1))) / 1)))) >> _GLF_IDENTITY(int(3), int(3))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
            {
             return;
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     else
      {
      }
    }
  }
 else
  {
  }
 uint workgroup_base = _GLF_IDENTITY(workgroup_size, max(workgroup_size, workgroup_size)) * workgroup_id;
 if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), false))))
  return;
 uint subgroup_base = subgroup_id * subgroup_size;
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     return;
    }
  }
 uint virtual_gid = workgroup_base + subgroup_base + _GLF_IDENTITY(subgroup_local_id, uint(uint(subgroup_local_id)));
 uint next_virtual_gid = workgroup_base + subgroup_base + ((subgroup_local_id + 1) % subgroup_size);
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 for(int _injected_loop_counter = _GLF_IDENTITY(0, int(int(0))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bool(_GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, false || (true))))))))))))
    {
     atomicStore(buf[virtual_gid], uint(1), 4, 64, 4);
    }
   else
    {
    }
  }
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[_GLF_IDENTITY(0, (0) << 0)], injectionSwitch[1])).y))); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(injectionSwitch.x > injectionSwitch.y, false, false, true)))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat3x4(injectionSwitch, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0)), (_GLF_IDENTITY(vec2(mat3x4(injectionSwitch, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0)), mix(vec2(_GLF_FUZZED(-8.0), _GLF_FUZZED(9.3)), vec2((vec2(mat3x4(injectionSwitch, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0)))[0], (vec2(mat3x4(injectionSwitch, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0)))[1]), bvec2(true, true)))) / vec2(1.0, 1.0))).x, clamp(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat3x4(injectionSwitch, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0)), (_GLF_IDENTITY(vec2(mat3x4(injectionSwitch, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0)), mix(vec2(_GLF_FUZZED(-8.0), _GLF_FUZZED(9.3)), vec2((vec2(mat3x4(injectionSwitch, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0)))[0], (vec2(mat3x4(injectionSwitch, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0)))[1]), bvec2(true, true)))) / vec2(1.0, 1.0))).x, _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat3x4(injectionSwitch, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0)), (_GLF_IDENTITY(vec2(mat3x4(injectionSwitch, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0)), mix(vec2(_GLF_FUZZED(-8.0), _GLF_FUZZED(9.3)), vec2((vec2(mat3x4(injectionSwitch, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0)))[0], (vec2(mat3x4(injectionSwitch, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0)))[1]), bvec2(true, true)))) / vec2(1.0, 1.0))).x, _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat3x4(injectionSwitch, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0)), (_GLF_IDENTITY(vec2(mat3x4(injectionSwitch, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0)), mix(vec2(_GLF_FUZZED(-8.0), _GLF_FUZZED(9.3)), vec2((vec2(mat3x4(injectionSwitch, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0)))[0], (vec2(mat3x4(injectionSwitch, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0)))[1]), bvec2(true, true)))) / vec2(1.0, 1.0))).x)) > _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(85.71)), bool(false)))))))
      return;
     return;
    }
   if(_GLF_DEAD(false))
    break;
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             return;
            }
           else
            {
            }
          }
         else
          {
           if(_GLF_DEAD(false))
            return;
          }
        }
       else
        {
        }
      }
    }
   else
    {
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     do
      {
       if(_GLF_IDENTITY((subgroup_local_id % 2), _GLF_IDENTITY(((subgroup_local_id % 2)), max(((subgroup_local_id % _GLF_IDENTITY(2, clamp(2, 2, 2)))), _GLF_IDENTITY(((subgroup_local_id % 2)), max(((_GLF_IDENTITY(subgroup_local_id % 2, (subgroup_local_id % 2) | (_GLF_IDENTITY(subgroup_local_id % 2, (true ? _GLF_IDENTITY(subgroup_local_id % 2, 0u + (subgroup_local_id % 2)) : _GLF_FUZZED(workgroup_id))))))), ((_GLF_IDENTITY(subgroup_local_id % 2, (subgroup_local_id % 2) << 0u))))))) | 0u) == 0)
        {
         switch(_GLF_SWITCH(0))
          {
           case 99:
           if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), false || (! (false)))))))
            {
             if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (injectionSwitch.x > injectionSwitch.y))))
              return;
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 return;
                }
              }
             return;
            }
           if(_GLF_DEAD(false))
            continue;
           ;
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               do
                {
                 return;
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             else
              {
              }
            }
           case 0:
           case 12:
           for(int _injected_loop_counter = _GLF_IDENTITY((0 ^ int(_GLF_ONE(1.0, injectionSwitch.y))), ~ (_GLF_IDENTITY(~ ((0 ^ int(_GLF_ONE(1.0, injectionSwitch.y)))), (~ ((_GLF_IDENTITY(0, (0) / 1) ^ int(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), max(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), (_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), min(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y)))) + 0.0), _GLF_ONE(1.0, injectionSwitch.y))))))) - 0))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
            {
             subgroupAll(true);
            }
           case 97:
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec3((injectionSwitch.x > injectionSwitch.y), true, true))))))), ! (! (_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (injectionSwitch.x > injectionSwitch.y)))))), true && (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))
              {
               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                }
               else
                {
                 return;
                }
              }
             do
              {
               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                {
                 if(_GLF_DEAD(false))
                  return;
                }
              }
             while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), false, true, true))), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true, false)))));
            }
           else
            {
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) > injectionSwitch.y, false || _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(((injectionSwitch.x > injectionSwitch.y)) || false, ! (! (((injectionSwitch.x > injectionSwitch.y)) || false)))))))))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               return;
              }
             else
              {
              }
            }
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             do
              {
               atomicStore(buf[next_virtual_gid], uint(2), 4, _GLF_IDENTITY(64, min(64, 64)), 4);
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           else
            {
            }
           if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               do
                {
                 return;
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
              {
               return;
              }
             if(_GLF_DEAD(false))
              continue;
            }
           break;
           default:
           1;
          }
         if(_GLF_DEAD(false))
          return;
        }
       else
        {
         if(_GLF_DEAD(false))
          break;
         do
          {
           switch(_GLF_SWITCH(0))
            {
             case 22:
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               while(((mat3x4(-19.21, -1869.6611, -4.4, 1.7, _GLF_IDENTITY(2.1, (2.1) / abs(1.0)), _GLF_IDENTITY(3021.5760, (_GLF_IDENTITY(false, ! (! (false))) ? _GLF_FUZZED(fract(0.0)) : 3021.5760)), -0.6, -353.527, 52.54, -8.5, -347.401, -3237.4649) / (- mat3x4(8.8, -712.257, _GLF_IDENTITY(2.6, (2.6) - 0.0), 255.877, 201.013, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(-5.9, mix(float(_GLF_FUZZED(-903.091)), float(-5.9), bool(true))), mix(float(_GLF_IDENTITY(-5.9, mix(float(_GLF_FUZZED(-903.091)), float(-5.9), bool(true)))), float(_GLF_FUZZED(56.42)), bool(false))), (_GLF_IDENTITY(-5.9, float(_GLF_IDENTITY(mat4(-5.9, 0.0, 0.0, round(_GLF_IDENTITY(length(normalize(1.0)), float(_GLF_IDENTITY(mat3x2(length(normalize(1.0)), 0.0, _GLF_IDENTITY(1.0, clamp(1.0, _GLF_IDENTITY(1.0, float(mat2x3(_GLF_IDENTITY(1.0, (1.0) + 0.0), 0.0, 0.0, 0.0, 1.0, 0.0))), _GLF_IDENTITY(1.0, float(vec4(1.0, 1.0, 0.0, 1.0))))), 0.0, _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), 0.0), mat3x2(mat3x2(mat3x2(length(normalize(1.0)), 0.0, 1.0, 0.0, _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), 0.0))))))), 1.0, 1.0, 0.0, 1.0, sin(_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(0.9)), float(0.0), bool(true)))), 0.0, 1.0, 0.0, _GLF_IDENTITY(tan(0.0), min(_GLF_IDENTITY(tan(0.0), (tan(0.0)) - 0.0), tan(0.0))), 1.0, 0.0, 1.0), transpose(transpose(mat4(-5.9, 0.0, 0.0, round(length(normalize(1.0))), 1.0, 1.0, 0.0, 1.0, sin(0.0), _GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(mix(5.8, 1.0, sin(2.8))))), 1.0, 0.0, tan(0.0), _GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, float(mat2x3(1.0, 0.0, _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-1644.8829)), float(_GLF_IDENTITY(0.0, max(0.0, 0.0))), bool(true))), 0.0, 1.0, 1.0)))) / 1.0), 0.0, 1.0))))))) / _GLF_IDENTITY(1.0, (1.0) + 0.0)), -6894.1781, 40.32, -7457.4627, 9.4, -6922.2375, -3.3))) != mat3x4(569.486, 0.9, -89.33, -1764.2666, -6.0, 9.4, 573.661, 5.4, -86.02, 27.46, -250.627, 9.8)))
                {
                 if((ivec4(-13849, 19962, -60499, -71866) == ivec4(60590, -21741, _GLF_IDENTITY(26158, int(_GLF_IDENTITY(ivec4(26158, 1, 1, 1), (_GLF_IDENTITY(ivec4(26158, 1, 1, 1), (true ? _GLF_IDENTITY(ivec4(26158, 1, 1, 1), (ivec4(26158, 1, 1, 1)) * ivec4(1, 1, 1, 1)) : _GLF_FUZZED(ivec4(68130, ivec2(93070, 50777), 36911))))) + ivec4(0, 0, 0, 0)))), _GLF_IDENTITY(91718, int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), injectionSwitch)).x)) + (_GLF_IDENTITY(91718, ~ (~ (_GLF_IDENTITY(91718, _GLF_IDENTITY((91718), int(int((91718)))) ^ 0)))))))))
                  {
                   ;
                   mat3x2 _GLF_SWITCH_1_0v[8], _GLF_SWITCH_1_1v;
                   mat3x4 _GLF_SWITCH_1_2v, _GLF_SWITCH_1_3v;
                   mat2 _GLF_SWITCH_1_4v, _GLF_SWITCH_1_5v[16];
                   if(_GLF_DEAD(false))
                    return;
                   do
                    {
                     do
                      {
                       if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ! (! ((injectionSwitch.x < injectionSwitch.y))))) && (_GLF_DEAD(false))))
                        continue;
                       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bool(true)))))
                        {
                         for(int _injected_loop_counter = (-80686 & 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
                          {
                           do
                            {
                             do
                              {
                              }
                             while(_GLF_IDENTITY(true, true && (true)));
                            }
                           while(_GLF_WRAPPED_LOOP(false));
                          }
                         if(_GLF_DEAD(false))
                          continue;
                        }
                       else
                        {
                         if(_GLF_DEAD(false))
                          continue;
                        }
                      }
                     while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_LOOP(false)), bool(bvec3(! (_GLF_WRAPPED_LOOP(false)), false, true)))))) && true));
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    continue;
                   if(_GLF_IDENTITY((ivec3(-5577, -73454, 39260) != sign(ivec3(17714, 25882, 91110))), _GLF_IDENTITY(! (! (_GLF_IDENTITY((ivec3(-5577, -73454, 39260) != _GLF_IDENTITY(sign(ivec3(_GLF_IDENTITY(17714, int(_GLF_IDENTITY(ivec4(17714, 1, 1, 0), (true ? ivec4(17714, 1, 1, 0) : _GLF_FUZZED(ivec4(86463, 73960, 53667, 44907)))))), 25882, 91110)), min(sign(ivec3(_GLF_IDENTITY(17714, int(_GLF_IDENTITY(ivec4(17714, 1, 1, 0), (true ? ivec4(17714, 1, 1, 0) : _GLF_FUZZED(ivec4(86463, 73960, 53667, 44907)))))), 25882, 91110)), sign(ivec3(_GLF_IDENTITY(17714, int(_GLF_IDENTITY(ivec4(17714, 1, 1, 0), (true ? ivec4(17714, 1, 1, 0) : _GLF_FUZZED(ivec4(86463, 73960, 53667, 44907)))))), 25882, 91110))))), ! (_GLF_IDENTITY(! ((ivec3(-5577, -73454, 39260) != sign(ivec3(17714, 25882, _GLF_IDENTITY(91110, (91110) / 1))))), (! ((ivec3(-5577, -73454, 39260) != sign(ivec3(17714, 25882, 91110))))) && true))))), (! (! (_GLF_IDENTITY((ivec3(-5577, -73454, 39260) != sign(ivec3(_GLF_IDENTITY(17714, int(_GLF_IDENTITY(ivec4(17714, 1, 1, 0), (true ? ivec4(17714, 1, 1, 0) : _GLF_FUZZED(ivec4(86463, 73960, 53667, _GLF_IDENTITY(44907, (_GLF_IDENTITY(44907, (_GLF_IDENTITY(44907, (44907) ^ 0)) | 0)) ^ 0))))))), 25882, 91110))), ! (_GLF_IDENTITY(! ((ivec3(-5577, -73454, _GLF_IDENTITY(39260, clamp(39260, 39260, 39260))) != sign(ivec3(17714, _GLF_IDENTITY(25882, (25882) >> (0 >> _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), int(ivec3(int(7), 1, 0)))))), _GLF_IDENTITY(91110, (91110) / 1))))), (! ((_GLF_IDENTITY(_GLF_IDENTITY(ivec3(-5577, -73454, 39260) != sign(ivec3(17714, 25882, 91110)), bool(bvec2(ivec3(-5577, -73454, 39260) != sign(ivec3(17714, 25882, 91110)), true))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(ivec3(-5577, -73454, 39260) != sign(ivec3(17714, 25882, 91110)), (ivec3(-5577, -73454, 39260) != sign(ivec3(17714, 25882, 91110))) || false)))))) && true)))))) || false)))
                    {
                     if(_GLF_DEAD(false))
                      continue;
                     do
                      {
                       do
                        {
                         if(_GLF_DEAD(false))
                          {
                           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                            continue;
                           break;
                          }
                         mat4(mat3(-2138.0102, -6.4, 0.2, -2.6, 8414.7032, -45.43, _GLF_IDENTITY(8213.6717, (8213.6717) + 0.0), 6.5, -2451.3654));
                         if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y))))
                          {
                           if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), true && (! (_GLF_DEAD(false)))))))
                            continue;
                           continue;
                          }
                        }
                       while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(_GLF_IDENTITY(bool(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false || (bool(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(36.23)), vec2(_GLF_FUZZED(9100.5241), (injectionSwitch)[1]), bvec2(false, true))).x > _GLF_IDENTITY(injectionSwitch.y, 1.0 * (injectionSwitch.y)))))))))));
                      }
                     while(_GLF_WRAPPED_LOOP(false));
                     mat3x4 _GLF_SWITCH_1_6v, _GLF_SWITCH_1_7v, _GLF_SWITCH_1_8v[81];
                     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bool((injectionSwitch.x > injectionSwitch.y)))), ! (! ((injectionSwitch.x > injectionSwitch.y)))))))
                      continue;
                     float _GLF_SWITCH_1_9v[85], _GLF_SWITCH_1_10v;
                     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)).y, mix(float(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)).y, min(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)).y, _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)).y))), float(_GLF_FUZZED(-51.21)), bool(false))), bool(bvec4(injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)).y, mix(float(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)).y, min(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)).y, _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)).y))), float(_GLF_FUZZED(-51.21)), bool(false))), true, false, true)))))))
                      {
                       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > 0, (_injected_loop_counter > 0) && true)); _injected_loop_counter --)
                        {
                         return;
                        }
                      }
                     bvec2 _GLF_SWITCH_1_11v[64], _GLF_SWITCH_1_12v, _GLF_SWITCH_1_13v[94];
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_DEAD(false))
                        return;
                       break;
                      }
                     if(_GLF_DEAD(false))
                      break;
                     int _GLF_SWITCH_1_14v, _GLF_SWITCH_1_15v;
                     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))
                      break;
                     mat2x4 _GLF_SWITCH_1_16v;
                    }
                   if((_GLF_SWITCH_1_1v != (+ mat3x2(_GLF_IDENTITY(-2.6, mix(float(_GLF_FUZZED(-9.3)), float(_GLF_IDENTITY(-2.6, min(-2.6, -2.6))), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), -90.29, -167.607, 230.191, 2216.4196, 8899.3136))))
                    {
                     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))))))))
                      {
                       if(_GLF_WRAPPED_IF_FALSE(false))
                        {
                        }
                       else
                        {
                         if(_GLF_DEAD(false))
                          return;
                        }
                       if(_GLF_WRAPPED_IF_FALSE(false))
                        {
                        }
                       else
                        {
                         for(int _injected_loop_counter = 0; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1)))); _injected_loop_counter ++)
                          {
                           true;
                          }
                        }
                      }
                     else
                      {
                       if(_GLF_DEAD(false))
                        break;
                      }
                     for(int _injected_loop_counter = (_GLF_IDENTITY(1 | (0 | 0), (1 | (0 | 0)) >> 0)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                      {
                       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(false, _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(6.6))))), false, false))), (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, _GLF_IDENTITY(false, (false) && true)))), (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(false, _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), min((injectionSwitch) * mat2(1.0), (injectionSwitch) * mat2(1.0)))).y)), false, false))), (_GLF_IDENTITY(false, bool(bvec4(false, _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y)), false, false)))) && true)) && true)) || false)))
                        return;
                      }
                     do
                      {
                       do
                        {
                         _GLF_SWITCH_1_2v;
                        }
                       while(_GLF_WRAPPED_LOOP(false));
                      }
                     while(_GLF_WRAPPED_LOOP(false));
                     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                      return;
                     if(_GLF_WRAPPED_IF_TRUE(true))
                      {
                       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, false, true, true)), (bool(bvec4(false, false, true, true))) && true)), bool(bvec4(false, true, true, true))), bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, false, true, true)), (bool(bvec4(false, false, true, true))) && true)), bool(bvec4(false, true, true, true))), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, false, true, true)), (bool(bvec4(false, false, true, true))) && true)), bool(bvec4(false, true, true, true))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec2(bvec4(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, false, true, true)), (bool(bvec4(false, false, true, true))) && true)), bool(bvec4(false, true, true, true))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, false))))), true)))))
                        break;
                       ;
                       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bool(false)))))) || (_GLF_IDENTITY(false, ! (! (false)))))))
                        {
                        }
                       else
                        {
                         if(_GLF_DEAD(false))
                          return;
                        }
                      }
                     else
                      {
                      }
                     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < ((_GLF_IDENTITY((int(_GLF_ONE(1.0, injectionSwitch.y)) | 1), (_GLF_IDENTITY(_GLF_IDENTITY((int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)))) | _GLF_IDENTITY(1, int(_GLF_ONE(1.0, injectionSwitch.y)) * (1))), _GLF_IDENTITY(max((int(_GLF_ONE(1.0, injectionSwitch.y)) | 1), (int(_GLF_ONE(1.0, injectionSwitch.y)) | 1)), (true ? _GLF_IDENTITY(max(_GLF_IDENTITY((int(_GLF_ONE(1.0, injectionSwitch.y)) | 1), ~ (~ ((int(_GLF_ONE(1.0, injectionSwitch.y)) | 1)))), (int(_GLF_ONE(1.0, injectionSwitch.y)) | 1)), 0 | (max((int(_GLF_ONE(1.0, injectionSwitch.y)) | 1), (int(_GLF_ONE(1.0, injectionSwitch.y)) | 1)))) : _GLF_FUZZED(72521)))), (_GLF_IDENTITY((int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)))) | _GLF_IDENTITY(1, int(_GLF_ONE(1.0, injectionSwitch.y)) * (1))), _GLF_IDENTITY(max((int(_GLF_ONE(1.0, injectionSwitch.y)) | 1), (int(_GLF_ONE(1.0, injectionSwitch.y)) | 1)), (_GLF_IDENTITY(true, (true) && true) ? _GLF_IDENTITY(max(_GLF_IDENTITY((int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], clamp(injectionSwitch[1], injectionSwitch[1], injectionSwitch[1])))).y)) | 1), ~ (~ (_GLF_IDENTITY((int(_GLF_ONE(1.0, injectionSwitch.y)) | 1), ~ (~ ((int(_GLF_ONE(1.0, injectionSwitch.y)) | 1))))))), (int(_GLF_ONE(1.0, injectionSwitch.y)) | 1)), 0 | (max((int(_GLF_ONE(1.0, injectionSwitch.y)) | 1), (int(_GLF_ONE(1.0, injectionSwitch.y)) | 1)))) : _GLF_FUZZED(72521))))) * int(_GLF_ONE(1.0, injectionSwitch.y)))) << 0) << _GLF_IDENTITY(_GLF_IDENTITY(int(1), (_GLF_IDENTITY(int(1), max(int(1), int(1)))) + int(_GLF_ZERO(0.0, injectionSwitch.x))), int(_GLF_IDENTITY(1, (false ? _GLF_FUZZED(_injected_loop_counter) : 1))))) >> _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), (int(1)) << 0)))); _injected_loop_counter ++)
                      {
                       if(_GLF_DEAD(false))
                        continue;
                       for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                        {
                         ;
                        }
                      }
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_DEAD(false))
                        break;
                       continue;
                      }
                     do
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        break;
                       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                        {
                         ;
                         if(_GLF_DEAD(false))
                          return;
                         if(_GLF_DEAD(false))
                          break;
                         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) || false))), (false) && true)))
                          break;
                         if(_GLF_DEAD(false))
                          {
                           if(_GLF_WRAPPED_IF_FALSE(false))
                            {
                            }
                           else
                            {
                             if(_GLF_WRAPPED_IF_TRUE(true))
                              {
                               if(_GLF_WRAPPED_IF_TRUE(true))
                                {
                                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                  break;
                                 if(_GLF_WRAPPED_IF_FALSE(false))
                                  {
                                  }
                                 else
                                  {
                                   do
                                    {
                                     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                      {
                                      }
                                     else
                                      {
                                       return;
                                      }
                                     if(_GLF_DEAD(false))
                                      break;
                                    }
                                   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                                  }
                                }
                               else
                                {
                                }
                               if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
                                {
                                 if(_GLF_DEAD(false))
                                  break;
                                 break;
                                }
                              }
                             else
                              {
                              }
                            }
                           if(_GLF_DEAD(false))
                            {
                             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                              return;
                             if(_GLF_WRAPPED_IF_TRUE(true))
                              {
                               return;
                              }
                             else
                              {
                              }
                            }
                          }
                        }
                       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), false || (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))
                        continue;
                       if(_GLF_DEAD(false))
                        continue;
                      }
                     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))))));
                     do
                      {
                       do
                        {
                         if(_GLF_WRAPPED_IF_FALSE(false))
                          {
                          }
                         else
                          {
                           if(_GLF_WRAPPED_IF_TRUE(true))
                            {
                             if(_GLF_DEAD(false))
                              break;
                             ;
                            }
                           else
                            {
                            }
                          }
                        }
                       while(_GLF_WRAPPED_LOOP(false));
                      }
                     while(_GLF_WRAPPED_LOOP(false));
                     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), bool(bvec4(false, false, false, true)))))
                      {
                       do
                        {
                         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                          {
                           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                            continue;
                           if(_GLF_DEAD(false))
                            return;
                           return;
                          }
                        }
                       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))))))))))
                        continue;
                       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(5.9) : injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0))) > injectionSwitch.y))))
                        {
                         if(_GLF_DEAD(false))
                          break;
                         continue;
                        }
                      }
                     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      {
                      }
                     else
                      {
                       do
                        {
                         (uvec3(62991u, 155479u, 8698u) >> _GLF_IDENTITY(uvec3(_GLF_IDENTITY(18071u, clamp(18071u, 18071u, 18071u)), 161208u, 29676u), uvec3(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)) | (_GLF_IDENTITY(uvec3(_GLF_IDENTITY(18071u, clamp(18071u, 18071u, 18071u)), 161208u, 29676u), (false ? _GLF_FUZZED(uvec3(155111u, 137933u, 31507u)) : uvec3(_GLF_IDENTITY(18071u, clamp(_GLF_IDENTITY(18071u, ~ (~ (18071u))), 18071u, 18071u)), 161208u, 29676u))))));
                        }
                       while(_GLF_WRAPPED_LOOP(false));
                      }
                    }
                   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false))))
                    {
                    }
                   else
                    {
                     if(_GLF_DEAD(false))
                      return;
                    }
                  }
                 else
                  {
                   uvec4 _GLF_SWITCH_1_17v[73];
                   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).x < injectionSwitch.y)) && ((false))))), true && (_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x < injectionSwitch.y))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && _GLF_IDENTITY(((false)), _GLF_IDENTITY((_GLF_IDENTITY(((false)), bool(bvec2(((false)), true)))), ((_GLF_IDENTITY(((false)), bool(bvec2(((false)), true))))) && true) && true))))))))
                    {
                    }
                   else
                    {
                     if(_GLF_WRAPPED_IF_TRUE(true))
                      {
                       mat4(5378.0258, -4.9, 644.344, -4.3, -6.8, _GLF_IDENTITY(-44.16, min(-44.16, _GLF_IDENTITY(-44.16, (_GLF_IDENTITY(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), bool(bvec2((injectionSwitch.x < injectionSwitch.y), false)))) ? _GLF_IDENTITY(-44.16, mix(float(-44.16), float(_GLF_FUZZED(0.1)), bool(false))) : _GLF_FUZZED(2.0), float(mat4(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(-44.16, mix(float(-44.16), float(_GLF_FUZZED(0.1)), bool(false))) : _GLF_FUZZED(2.0), 1.0, round(length(normalize(1.0))), 0.0, 1.0, exp(0.0), 0.0, 0.0, 0.0, log(1.0), 0.0, 0.0, 1.0, 0.0, sqrt(1.0), 1.0))))))), -6.4, 213.730, -56.61, 8.0, 0.9, 0.1, -878.321, -209.012, 7817.1337, 3.7);
                      }
                     else
                      {
                      }
                    }
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    break;
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, abs(vec2(1.0, 1.0)) * (injectionSwitch)).y))))
                      {
                       do
                        {
                         if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) || false))
                          {
                          }
                         else
                          {
                           return;
                          }
                        }
                       while(_GLF_WRAPPED_LOOP(false));
                      }
                    }
                   else
                    {
                    }
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(_GLF_ONE(1.0, injectionSwitch.y)), clamp(_GLF_IDENTITY((injectionSwitch) * mat2(_GLF_ONE(1.0, injectionSwitch.y)), mix(vec2(_GLF_FUZZED(2637.3700), _GLF_FUZZED(1.1)), vec2(((injectionSwitch) * mat2(_GLF_ONE(1.0, injectionSwitch.y)))[0], ((injectionSwitch) * mat2(_GLF_ONE(1.0, injectionSwitch.y)))[1]), bvec2(true, true))), (injectionSwitch) * mat2(_GLF_ONE(1.0, injectionSwitch.y)), (injectionSwitch) * mat2(_GLF_ONE(1.0, injectionSwitch.y))))).y))))
                      continue;
                     continue;
                    }
                   if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false)))))
                    break;
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    return;
                   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0)), ! (! ((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY((injectionSwitch.y), float(_GLF_IDENTITY(mat2(_GLF_IDENTITY((injectionSwitch.y), (true ? (injectionSwitch.y) : _GLF_FUZZED(20.63))), sin(0.0), 1.0, 1.0), (mat2(_GLF_IDENTITY((injectionSwitch.y), (true ? (injectionSwitch.y) : _GLF_FUZZED(20.63))), sin(0.0), 1.0, 1.0)) + mat2(0.0, 0.0, 0.0, 0.0)))) - 0.0))))))))
                    {
                     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
                      break;
                     ;
                    }
                   else
                    {
                    }
                   if(_GLF_DEAD(false))
                    continue;
                   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec3(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, false))))
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      return;
                     break;
                    }
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     mat2x4(29.20, 8.4, 89.83, -533.744, _GLF_IDENTITY(-19.46, _GLF_IDENTITY((-19.46) / determinant(mat3(1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0)), _GLF_IDENTITY(((-19.46) / determinant(mat3(1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0))) + 0.0, mix(float(_GLF_FUZZED(-9855.5435)), float(_GLF_IDENTITY(((-19.46) / determinant(mat3(1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(1.0, max(1.0, 1.0))))) + 0.0, mix(float(_GLF_IDENTITY(((-19.46) / determinant(mat3(1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0))) + 0.0, clamp(_GLF_IDENTITY(((-19.46) / determinant(mat3(1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0))) + 0.0, 0.0 + (((-19.46) / determinant(mat3(1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0))) + 0.0)), _GLF_IDENTITY(((-19.46) / determinant(mat3(1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0))) + 0.0, min(((-19.46) / determinant(mat3(1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0))) + 0.0, ((-19.46) / determinant(mat3(1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0))) + 0.0)), ((-19.46) / determinant(mat3(1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0))) + 0.0))), float(_GLF_FUZZED(-660.398)), bool(false)))), bool(true))))), 43.80, -38.34, 776.403);
                    }
                   else
                    {
                    }
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_WRAPPED_IF_TRUE(true))
                      {
                       if(_GLF_DEAD(false))
                        break;
                       do
                        {
                         return;
                        }
                       while(_GLF_WRAPPED_LOOP(false));
                       if(_GLF_DEAD(false))
                        break;
                      }
                     else
                      {
                      }
                    }
                  }
                 float _GLF_SWITCH_1_18v;
                 mat2x3(20.35, -464.642, _GLF_IDENTITY(6319.3913, (false ? _GLF_FUZZED(_GLF_SWITCH_1_18v) : 6319.3913)), 2331.1522, 3.4, -3.1);
                 ivec4 _GLF_SWITCH_1_19v, _GLF_SWITCH_1_20v[23], _GLF_SWITCH_1_21v;
                 if(_GLF_DEAD(false))
                  continue;
                 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], (injectionSwitch[1]) - log(1.0)))), (false ? _GLF_FUZZED(injectionSwitch) : _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], (_GLF_IDENTITY(injectionSwitch[1], min(injectionSwitch[1], injectionSwitch[1]))) - log(1.0)))))).y))), bool(bool(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))))) && true))
                  break;
                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (((_GLF_IDENTITY(0, (0) - 0) | 1) << _GLF_IDENTITY(_GLF_IDENTITY(int(7), int(7)), (_GLF_IDENTITY(int(7), int(7))) << 0)) >> _GLF_IDENTITY(int(7), int(7)))); _injected_loop_counter ++)
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    {
                     if(_GLF_DEAD(false))
                      return;
                     continue;
                    }
                   for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 ^ _GLF_IDENTITY(0, max(0, 0)))); _injected_loop_counter --)
                    {
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                      }
                     else
                      {
                       mat4x2(-8.2, _GLF_SWITCH_1_18v, pow(_GLF_IDENTITY(_GLF_SWITCH_1_18v, float(mat2(_GLF_SWITCH_1_18v, 0.0, _GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat2(1.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0)), max(float(mat2(1.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0)), float(mat2(1.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0))))), 1.0))), 6.9), -9009.4218, _GLF_SWITCH_1_18v, _GLF_SWITCH_1_18v, _GLF_SWITCH_1_18v, _GLF_SWITCH_1_18v);
                      }
                    }
                   if(_GLF_DEAD(false))
                    continue;
                  }
                }
               if(_GLF_DEAD(false))
                return;
              }
             else
              {
              }
             if(_GLF_DEAD(false))
              break;
             if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false)))))))
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) && true)))
                    continue;
                   return;
                  }
                 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                  }
                 else
                  {
                   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - log(vec2(1.0, 1.0))).y, ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), true && (_GLF_IDENTITY(! (_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0), injectionSwitch.x)) > injectionSwitch.y), _GLF_IDENTITY(false || (! (injectionSwitch.x > injectionSwitch.y)), (false || (! (injectionSwitch.x > injectionSwitch.y))) && true))))))))))
                    {
                    }
                   else
                    {
                     if(_GLF_DEAD(false))
                      return;
                     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      {
                      }
                     else
                      {
                       return;
                      }
                    }
                  }
                }
              }
             case 8:
             uvec3 _GLF_SWITCH_1_22v;
             case 0:
             if(_GLF_DEAD(false))
              break;
             case 12:
             case 93:
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).y))))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  return;
                 break;
                }
               if(_GLF_DEAD(false))
                continue;
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                {
                 if(_GLF_DEAD(false))
                  return;
                }
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 return;
                }
              }
             case 74:
             if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec3(false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), (_GLF_IDENTITY(false, false || _GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), true && (! ((false)))))))) && _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(116.868) : _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + 0.0))) < injectionSwitch.y)))))
              break;
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 return;
                }
               else
                {
                }
              }
             subgroupAll(false);
             do
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 atomicStore(buf[next_virtual_gid], uint(2), _GLF_IDENTITY(_GLF_IDENTITY(4, (_GLF_IDENTITY(4, (4) / 1)) + 0), _GLF_IDENTITY((true ? 4 : _GLF_FUZZED(76900)), 0 + _GLF_IDENTITY(((true ? 4 : _GLF_FUZZED(76900))), (((true ? 4 : _GLF_FUZZED(76900)))) | (((true ? 4 : _GLF_FUZZED(76900))))))), 64, 4);
                }
               else
                {
                }
               if(_GLF_DEAD(false))
                break;
              }
             while(_GLF_WRAPPED_LOOP(false));
             if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(! (! (_GLF_DEAD(false))), true && (! (_GLF_IDENTITY(! (_GLF_DEAD(false)), false || (! (_GLF_DEAD(false)))))))))
              {
               if(_GLF_DEAD(false))
                return;
               return;
              }
             break;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              continue;
             if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))
              {
               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                {
                 return;
                }
              }
             if(_GLF_DEAD(false))
              continue;
             case 84:
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
              }
             else
              {
               for(               mat2x3(7793.7003, 9.4, 74.40, -577.071, 8.7, -5.5);
 (vec4(6.4, -25.21, -27.58, _GLF_IDENTITY(_GLF_IDENTITY(6.1, 0.0 + (6.1)), max(6.1, 6.1))) == vec4(693.046, 961.515, -9.2, -650.093)); ivec3(-53759, -4373, -51414))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  break;
                 do
                  {
                   mat4(3.9, -924.572, -6.3, 7.1, 73.30, _GLF_IDENTITY(8.0, 0.0 + (_GLF_IDENTITY(8.0, (false ? _GLF_FUZZED(degrees(519.142)) : 8.0)))), _GLF_IDENTITY(-7509.8634, max(_GLF_IDENTITY(-7509.8634, clamp(_GLF_IDENTITY(-7509.8634, clamp(_GLF_IDENTITY(-7509.8634, 1.0 * (-7509.8634)), -7509.8634, -7509.8634)), _GLF_IDENTITY(-7509.8634, float(vec3(-7509.8634, 0.0, 1.0))), _GLF_IDENTITY(-7509.8634, mix(float(-7509.8634), float(_GLF_FUZZED(-1904.2968)), bool(false))))), -7509.8634)), -4.2, -1905.6622, -545.367, 6.9, 6917.4168, -6898.9764, _GLF_IDENTITY(-629.186, min(-629.186, -629.186)), 1005.2102, 6.9);
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                 if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false)))))
                  continue;
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                    {
                     ;
                    }
                   else
                    {
                    }
                  }
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (injectionSwitch.x < injectionSwitch.y) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (injectionSwitch.x < injectionSwitch.y) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ((_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (injectionSwitch.x < injectionSwitch.y) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) || false)) && true))))
                  {
                   if(_GLF_DEAD(false))
                    continue;
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_WRAPPED_IF_TRUE(true))
                        {
                         return;
                        }
                       else
                        {
                        }
                      }
                     if(_GLF_DEAD(false))
                      continue;
                    }
                  }
                 else
                  {
                  }
                }
              }
             case 83:
             for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(0), _GLF_IDENTITY(_GLF_IDENTITY(int(0), min(_GLF_IDENTITY(int(0), (_GLF_IDENTITY(int(0), ~ (~ (int(0))))) - 0), int(0))), (int(0)) << 0))); _GLF_WRAPPED_LOOP(_injected_loop_counter < (_GLF_IDENTITY((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(4), int(int(int(4)))), int(4))) >> _GLF_IDENTITY(int(4), int(4)), _GLF_IDENTITY((0 | 1), 0 + ((0 | _GLF_IDENTITY(1, clamp(1, 1, _GLF_IDENTITY(1, ~ (~ (1)))))))) * ((_GLF_IDENTITY(1, (1) ^ (0 >> _GLF_IDENTITY(int(7), int(7)))) << _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(4), max(int(4), _GLF_IDENTITY(int(4), ~ (~ (int(4)))))), min(_GLF_IDENTITY(int(4), max(int(4), _GLF_IDENTITY(int(4), (false ? _GLF_FUZZED((_GLF_SWITCH_1_22v , int(false))) : int(4))))), _GLF_IDENTITY(_GLF_IDENTITY(int(4), max(int(4), int(4))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(int(4), max(int(4), int(_GLF_IDENTITY(4, (_GLF_IDENTITY(4, (4) / 1)) | (4)))))), clamp(_GLF_IDENTITY(~ (_GLF_IDENTITY(int(4), max(int(4), int(4)))), ~ (~ (~ (_GLF_IDENTITY(int(4), max(int(4), int(4))))))), ~ (_GLF_IDENTITY(int(4), max(int(4), int(4)))), ~ (_GLF_IDENTITY(int(4), _GLF_IDENTITY(max(int(4), int(4)), (max(int(4), int(4))) ^ 0))))))))), _GLF_IDENTITY(int(4), (int(4)) | (int(4))))) >> _GLF_IDENTITY(int(4), int(4)))))); _injected_loop_counter ++)
              {
               if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (! (_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec3(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))) || false))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true))
                {
                 for(int _injected_loop_counter = (int(_GLF_ONE(1.0, injectionSwitch.y)) ^ (0 << _GLF_IDENTITY(int(5), int(5)))); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 << _GLF_IDENTITY(int(8), int(8)))); _injected_loop_counter --)
                  {
                   if(_GLF_DEAD(false))
                    return;
                  }
                 if(_GLF_DEAD(false))
                  continue;
                 break;
                }
               if(_GLF_DEAD(_GLF_IDENTITY(false, true && _GLF_IDENTITY((false), _GLF_IDENTITY(bool(bool((false))), (bool(bool((false)))) && true)))))
                {
                 if(_GLF_DEAD(false))
                  break;
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   return;
                   if(_GLF_DEAD(false))
                    break;
                  }
                 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(-19.43))) > injectionSwitch.y))))
                  {
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     return;
                    }
                   else
                    {
                    }
                  }
                }
               if(_GLF_DEAD(false))
                break;
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch)[1], (true ? (injectionSwitch)[1] : _GLF_FUZZED(vec3(-872.866, -3.8, 4309.0241).x)))), vec2(_GLF_FUZZED(2.2), _GLF_FUZZED(-6.3)), bvec2(false, false))).y))))
                return;
               for(               bvec2(true, true);
 (mat4x2(_GLF_IDENTITY(-69.74, clamp(_GLF_IDENTITY(-69.74, max(-69.74, -69.74)), -69.74, -69.74)), 3.3, -8.7, -147.196, 4.2, -331.407, 0.9, -9.3) != mat4x2(-63.49, _GLF_IDENTITY(-3408.0133, min(_GLF_IDENTITY(-3408.0133, min(-3408.0133, -3408.0133)), _GLF_IDENTITY(-3408.0133, max(-3408.0133, -3408.0133)))), 3.9, 672.334, 436.577, _GLF_IDENTITY(73.73, (73.73) * 1.0), -3578.5113, -9.4)); log2(vec4(6.1, 6076.7212, -958.267, -4.1)))
                {
                 ivec4 _GLF_SWITCH_1_23v, _GLF_SWITCH_1_24v;
                 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false))))
                  return;
                 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))), _GLF_IDENTITY((_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x > injectionSwitch.y)))), _GLF_IDENTITY(! (! ((_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x > injectionSwitch.y)))))), _GLF_IDENTITY(true && (! (! ((_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x > injectionSwitch.y))))))), bool(bvec3(true && (! (! ((_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x > injectionSwitch.y))))))), false, false))))) && true))
                  {
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     return;
                    }
                   else
                    {
                    }
                  }
                 for(bvec2 _GLF_SWITCH_1_25v, _GLF_SWITCH_1_26v, _GLF_SWITCH_1_27v; _GLF_IDENTITY((mat3x4(6673.2135, _GLF_IDENTITY(1.2, max(1.2, 1.2)), -98.91, _GLF_IDENTITY(-86.33, _GLF_IDENTITY(float(_GLF_IDENTITY(mat4x2(-86.33, abs(1.0), 0.0, 1.0, 0.0, abs(_GLF_ONE(1.0, injectionSwitch.y)), 0.0, 1.0), (true ? mat4x2(-86.33, abs(1.0), 0.0, 1.0, 0.0, abs(_GLF_ONE(1.0, injectionSwitch.y)), 0.0, 1.0) : _GLF_FUZZED(mat4x2(-9.1, -220.752, 289.021, 5.6, 5.9, 168.780, -74.31, 681.389))))), mix(float(_GLF_FUZZED(float(49660))), float(float(_GLF_IDENTITY(mat4x2(-86.33, abs(1.0), 0.0, 1.0, 0.0, abs(_GLF_ONE(1.0, injectionSwitch.y)), 0.0, 1.0), (true ? mat4x2(-86.33, abs(1.0), 0.0, 1.0, 0.0, abs(_GLF_ONE(1.0, injectionSwitch.y)), 0.0, 1.0) : _GLF_FUZZED(mat4x2(-9.1, -220.752, 289.021, 5.6, 5.9, 168.780, -74.31, 681.389)))))), bool(true)))), -4472.8013, 19.58, 5.9, 147.766, -6.2, 8563.0187, 124.722, _GLF_IDENTITY(-15.77, (true ? -15.77 : _GLF_FUZZED(-9.0)))) == mat3x4(-1.0, -8.4, 445.946, 3.3, -630.836, 1.2, -31.83, -652.344, 6.6, 8783.6599, 9.0, -1713.2458)), true && ((mat3x4(6673.2135, _GLF_IDENTITY(1.2, max(1.2, 1.2)), -98.91, -86.33, -4472.8013, 19.58, 5.9, 147.766, -6.2, 8563.0187, 124.722, _GLF_IDENTITY(-15.77, (true ? -15.77 : _GLF_FUZZED(-9.0)))) == mat3x4(-1.0, -8.4, 445.946, 3.3, -630.836, 1.2, -31.83, -652.344, 6.6, 8783.6599, 9.0, -1713.2458)))); bvec3(false, true, _GLF_IDENTITY(false, (false) || false)))
                  {
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_DEAD(false)))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bool(bvec2(_GLF_DEAD(false), true))))), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_DEAD(false)))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bool(bvec2(_GLF_DEAD(false), true)))))))))
                      break;
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch.y : _GLF_FUZZED(acos(-61.56))))))))))
                      {
                       if(_GLF_DEAD(false))
                        break;
                       return;
                      }
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      {
                       if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
                        break;
                       return;
                      }
                     do
                      {
                       if(_GLF_WRAPPED_IF_FALSE(false))
                        {
                        }
                       else
                        {
                         do
                          {
                           if(_GLF_WRAPPED_IF_FALSE(false))
                            {
                            }
                           else
                            {
                             _GLF_IDENTITY(ivec3(35741, 84452, -99452), (_GLF_IDENTITY(ivec3(35741, 84452, -99452), min(ivec3(35741, 84452, -99452), ivec3(_GLF_IDENTITY(35741, min(35741, _GLF_IDENTITY(35741, 0 | (_GLF_IDENTITY(35741, 0 | (_GLF_IDENTITY(35741, 0 ^ (35741)))))))), 84452, -99452)))) + _GLF_IDENTITY(ivec3(0, 0, 0), (ivec3(0, 0, 0)) >> ivec3(0, 0, 0)));
                            }
                          }
                         while(_GLF_WRAPPED_LOOP(false));
                        }
                      }
                     while(_GLF_WRAPPED_LOOP(false));
                    }
                   else
                    {
                    }
                   if(_GLF_DEAD(false))
                    return;
                   mat4x2(1.1, -7839.7341, -9760.0193, -5.5, 21.40, 452.006, _GLF_IDENTITY(-857.544, (false ? _GLF_FUZZED(injectionSwitch.r) : _GLF_IDENTITY(-857.544, mix(float(-857.544), float(_GLF_FUZZED(82.28)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), 6262.7307);
                   notEqual(uvec4(60127u, 182545u, 177285u, 40606u), uvec4(168130u, 103367u, 100665u, _GLF_IDENTITY(42627u, (42627u) | (42627u))));
                   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))))
                    break;
                   mat4x2 _GLF_SWITCH_1_28v[63];
                   vec4(_GLF_IDENTITY(5.4, (false ? _GLF_FUZZED(-5.6) : _GLF_IDENTITY(5.4, (5.4) * 1.0))), 73.47, -5.5, 233.604);
                   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), ! (! (bool(bvec3(false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))))
                    return;
                   uint(-2.4);
                   if(_GLF_DEAD(false))
                    return;
                   bvec3(true, false, true);
                   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), bool(bvec3((injectionSwitch.x < injectionSwitch.y), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))) && true)))))
                    {
                     (workgroup_id % uvec2(188738u, 65465u));
                    }
                   else
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      {
                       do
                        {
                         return;
                        }
                       while(_GLF_WRAPPED_LOOP(false));
                      }
                    }
                  }
                 if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec4(_GLF_DEAD(false), true, true, false)), bool(bool(bool(bvec4(_GLF_DEAD(false), true, true, false)))))))
                  continue;
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    break;
                   continue;
                  }
                 mat3 _GLF_SWITCH_1_29v, _GLF_SWITCH_1_30v, _GLF_SWITCH_1_31v;
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     do
                      {
                       if(_GLF_DEAD(false))
                        {
                         if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
                          break;
                         return;
                        }
                       if(_GLF_DEAD(false))
                        {
                         if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec3(_GLF_DEAD(false), true, true)), ! (! (bool(bvec3(_GLF_DEAD(false), true, true)))))))
                          break;
                         continue;
                        }
                      }
                     while(_GLF_WRAPPED_LOOP(false));
                    }
                   if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
                    continue;
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(false))
                      continue;
                     return;
                    }
                   for(uvec4 _GLF_SWITCH_1_32v[7]; (_GLF_IDENTITY(subgroup_size, (subgroup_size) | _GLF_IDENTITY((subgroup_size), uint(uvec2((subgroup_size), 1u)))) == workgroup_id); length(_GLF_IDENTITY(vec3(_GLF_IDENTITY(-2930.6147, max(-2930.6147, -2930.6147)), -0.5, 18.60), max(_GLF_IDENTITY(vec3(-2930.6147, -0.5, 18.60), clamp(_GLF_IDENTITY(vec3(-2930.6147, -0.5, 18.60), max(vec3(-2930.6147, -0.5, 18.60), vec3(-2930.6147, -0.5, _GLF_IDENTITY(18.60, (true ? 18.60 : _GLF_FUZZED(log2(3895.8671))))))), vec3(-2930.6147, -0.5, 18.60), vec3(-2930.6147, -0.5, 18.60))), vec3(-2930.6147, -0.5, 18.60)))))
                    {
                     (72322 / _GLF_SWITCH_1_24v);
                     ivec2(42279, 19726);
                     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, true && (false)))))), _GLF_IDENTITY(bool(bool(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, true && (false)))))))), (bool(bool(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, true && (false))))))))) || false)))
                      continue;
                     vec3 _GLF_SWITCH_1_33v;
                     uvec2(158059u, 148494u).tss;
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                      }
                     else
                      {
                       if(_GLF_DEAD(false))
                        return;
                      }
                    }
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    return;
                  }
                 else
                  {
                   if(_GLF_DEAD(false))
                    break;
                  }
                 if(_GLF_DEAD(false))
                  break;
                 if(_GLF_DEAD(false))
                  {
                   for(int _injected_loop_counter = (1 & int(_GLF_ONE(1.0, injectionSwitch.y))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                    {
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                      }
                     else
                      {
                       return;
                      }
                    }
                  }
                 uvec3 _GLF_SWITCH_1_34v, _GLF_SWITCH_1_35v[38], _GLF_SWITCH_1_36v[47];
                 if(_GLF_DEAD(false))
                  continue;
                 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY((injectionSwitch.x), mix(float(_GLF_IDENTITY((injectionSwitch.x), clamp((injectionSwitch.x), (injectionSwitch.x), (injectionSwitch.x)))), float(_GLF_FUZZED(3999.1254)), bool(false))) - log(1.0)) > injectionSwitch.y))))
                  continue;
                 do
                  {
                   matrixCompMult(mat2(-527.250, -0.7, 6.4, 20.58), mat2(9828.6671, 8.6, 103.146, 3.3));
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), false || (! (false)))))));
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  continue;
                 if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false)))))
                  continue;
                 mat4x2(7.7, _GLF_IDENTITY(-4874.8221, max(-4874.8221, -4874.8221)), -476.005, 788.304, 46.64, -2041.8600, -8.6, 581.057);
                 mat3 _GLF_SWITCH_1_37v[30], _GLF_SWITCH_1_38v, _GLF_SWITCH_1_39v;
                 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y) && true)))))
                  continue;
                }
               uvec2 _GLF_SWITCH_1_40v;
               uint _GLF_SWITCH_1_41v, _GLF_SWITCH_1_42v;
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  break;
                 return;
                }
              }
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                return;
               if(_GLF_DEAD(false))
                continue;
               continue;
              }
             default:
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               1;
              }
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
