#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_20 {
 bvec2 _f0;
} ;

struct _GLF_struct_19 {
 mat4x2 _f0;
 int _f1;
 uvec3 _f2;
} ;

struct _GLF_struct_18 {
 mat3x2 _f0;
 uvec3 _f1;
 vec3 _f2;
 mat3 _f3;
} ;

struct _GLF_struct_17 {
 uvec3 _f0;
 mat3x4 _f1;
 bool _f2;
 uint subgroup_id;
 ivec3 _f3;
} ;

struct _GLF_struct_21 {
 mat3x2 _f0;
 _GLF_struct_17 _f1;
 _GLF_struct_18 _f2;
 _GLF_struct_19 _f3;
 _GLF_struct_20 _f4;
 uint _f5;
} ;

struct _GLF_struct_22 {
 mat4x3 _f0;
 _GLF_struct_21 _f1;
} ;

struct _GLF_struct_14 {
 mat4 _f0;
 float _f1;
 bool _f2;
 bool _f3;
 mat4x2 _f4;
} ;

struct _GLF_struct_13 {
 uvec2 _f0;
 bvec4 _f1;
 uvec3 _f2;
} ;

struct _GLF_struct_12 {
 bvec2 _f0;
 ivec2 _f1;
 mat2x3 _f2;
 mat3x2 _f3;
 int _f4;
 ivec2 _f5;
} ;

struct _GLF_struct_15 {
 _GLF_struct_12 _f0;
 _GLF_struct_13 _f1;
 _GLF_struct_14 _f2;
 mat2 _f3;
} ;

struct _GLF_struct_10 {
 ivec2 _f0;
 vec4 _f1;
 mat2 _f2;
 mat2 _f3;
} ;

struct _GLF_struct_9 {
 mat3x4 _f0;
 mat2 _f1;
 mat4x3 _f2;
 bvec3 _f3;
} ;

struct _GLF_struct_11 {
 mat4x3 _f0;
 bvec4 _f1;
 _GLF_struct_9 _f2;
 _GLF_struct_10 _f3;
 bvec4 _f4;
 uint workgroup_id;
 bool _f5;
} ;

struct _GLF_struct_7 {
 ivec2 _f0;
 bvec4 _f1;
 vec4 _f2;
 mat4x2 _f3;
} ;

struct _GLF_struct_6 {
 vec4 _f0;
 ivec3 _f1;
 mat4x3 _f2;
 vec4 _f3;
 uvec2 _f4;
 mat3x4 _f5;
} ;

struct _GLF_struct_5 {
 ivec4 _f0;
 mat4x3 _f1;
 int _f2;
} ;

struct _GLF_struct_8 {
 int _f0;
 bool _f1;
 _GLF_struct_5 _f2;
 bvec3 _f3;
 _GLF_struct_6 _f4;
 _GLF_struct_7 _f5;
 ivec3 _f6;
} ;

struct _GLF_struct_4 {
 bvec2 _f0;
} ;

struct _GLF_struct_16 {
 vec4 _f0;
 mat4x3 _f1;
 _GLF_struct_4 _f2;
 _GLF_struct_8 _f3;
 _GLF_struct_11 _f4;
 uint _f5;
 _GLF_struct_15 _f6;
} ;

struct _GLF_struct_1 {
 bvec3 _f0;
 int _f1;
 uint _f2;
 mat2x4 _f3;
 vec3 _f4;
 vec4 _f5;
} ;

struct _GLF_struct_0 {
 bvec3 _f0;
} ;

struct _GLF_struct_2 {
 ivec4 _f0;
 vec3 _f1;
 uvec4 _f2;
 _GLF_struct_0 _f3;
 _GLF_struct_1 _f4;
} ;

struct _GLF_struct_3 {
 _GLF_struct_2 _f0;
 mat4 _f1;
 bool _f2;
 bvec2 _f3;
 vec3 _f4;
 uvec2 _f5;
 uint subgroup_local_id;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))), _GLF_IDENTITY(! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true)))))), _GLF_IDENTITY(false, (false) || false) || (! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true), true), bvec2(bvec4(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true), true), true, false))))), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))))))))))
    barrier();
  }
 _GLF_struct_22 _GLF_struct_replacement_22 = _GLF_struct_22(mat4x3(1.0), _GLF_struct_21(mat3x2(1.0), _GLF_struct_17(uvec3(_GLF_IDENTITY(1u, (_GLF_IDENTITY(_GLF_IDENTITY(1u, min(1u, 1u)), (_GLF_IDENTITY(1u, (true ? 1u : _GLF_FUZZED(49205u)))) ^ 0u)) | 0u)), mat3x4(1.0), true, gl_SubgroupID, ivec3(1)), _GLF_struct_18(mat3x2(1.0), uvec3(1u), _GLF_IDENTITY(vec3(1.0), vec3(1.0, 1.0, 1.0) * (_GLF_IDENTITY(vec3(_GLF_IDENTITY(1.0, float(mat4x2(1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0)))), mat3(1.0) * (vec3(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, max(1.0, 1.0))) - 0.0)))))), _GLF_IDENTITY(_GLF_IDENTITY(mat3(1.0), (mat3(1.0)) / mat3(1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0)), transpose(transpose(mat3(1.0))))), _GLF_struct_19(mat4x2(1.0), 1, uvec3(1u)), _GLF_struct_20(bvec2(true)), 1u));
 uint subgroup_size = gl_SubgroupSize;
 do
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)), _GLF_IDENTITY((injectionSwitch) * mat2(1.0), ((injectionSwitch) * mat2(1.0)) - vec2(0.0, 0.0))).x > _GLF_IDENTITY(injectionSwitch, vec2(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)) + (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)))).y))))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(_GLF_IDENTITY(! (false), ! (_GLF_IDENTITY(! (! (false)), bool(bool(! (! (false))))))), true && (! (false)))))));
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 _GLF_struct_3 _GLF_struct_replacement_3 = _GLF_struct_3(_GLF_struct_2(_GLF_IDENTITY(ivec4(_GLF_IDENTITY(_GLF_IDENTITY(1, (1) / 1), int(ivec4(_GLF_IDENTITY(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, _GLF_IDENTITY((1) | 0, clamp((1) | 0, (1) | 0, (1) | 0)))) >> 0), (1) / _GLF_IDENTITY(1, ~ (_GLF_IDENTITY(~ (1), (~ (1)) - (1 ^ 1))))), 0, 0, 1)))), ((((ivec4(1, 1, 1, 1) << _GLF_IDENTITY(ivec4(3), ivec4(3))) >> _GLF_IDENTITY(ivec4(3), ivec4(3))) << _GLF_IDENTITY(ivec4(5), ivec4(5))) >> _GLF_IDENTITY(ivec4(5), ivec4(5))) * (ivec4(_GLF_IDENTITY(_GLF_IDENTITY(1, (1) / 1), int(ivec4(_GLF_IDENTITY(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, _GLF_IDENTITY((1) | 0, clamp((1) | 0, (1) | 0, (1) | 0)))) >> 0), (1) / _GLF_IDENTITY(1, ~ (_GLF_IDENTITY(~ (1), (~ (1)) - (1 ^ 1))))), 0, 0, 1)))))), _GLF_IDENTITY(vec3(_GLF_IDENTITY(_GLF_IDENTITY(1.0, float(vec2(1.0, 0.0))), max(_GLF_IDENTITY(_GLF_IDENTITY(1.0, float(vec2(1.0, 0.0))), (_GLF_IDENTITY(1.0, float(vec2(1.0, 0.0)))) + 0.0), _GLF_IDENTITY(1.0, float(vec2(1.0, 0.0)))))), max(vec3(_GLF_IDENTITY(_GLF_IDENTITY(1.0, float(vec2(1.0, 0.0))), max(_GLF_IDENTITY(_GLF_IDENTITY(1.0, float(vec2(1.0, 0.0))), (_GLF_IDENTITY(1.0, float(vec2(1.0, 0.0)))) + 0.0), _GLF_IDENTITY(1.0, float(vec2(1.0, 0.0)))))), vec3(_GLF_IDENTITY(_GLF_IDENTITY(1.0, float(vec2(1.0, 0.0))), max(_GLF_IDENTITY(_GLF_IDENTITY(1.0, float(vec2(1.0, 0.0))), (_GLF_IDENTITY(1.0, float(vec2(1.0, 0.0)))) + 0.0), _GLF_IDENTITY(1.0, float(vec2(1.0, 0.0)))))))), uvec4(_GLF_IDENTITY(_GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, (1u) - 0u)) | (1u)), max(_GLF_IDENTITY(1u, ~ (~ _GLF_IDENTITY((1u), ~ (~ ((1u)))))), _GLF_IDENTITY(1u, (false ? _GLF_IDENTITY(_GLF_FUZZED(_GLF_struct_replacement_22._f1._f1.subgroup_id), (_GLF_FUZZED(_GLF_struct_replacement_22._f1._f1.subgroup_id)) >> 0u) : 1u))))), _GLF_struct_0(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(true), _GLF_IDENTITY(bvec3(bvec3(bvec3(true))), bvec3(bvec3(bvec3(bvec3(bvec3(true))))))), bvec3(bvec4(bvec3(true), false))), bvec3(bvec4(_GLF_IDENTITY(bvec3(true), bvec3(bvec4(bvec3(true), false))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), _GLF_struct_1(bvec3(true), 1, _GLF_IDENTITY(1u, (1u) | 0u), mat2x4(1.0), vec3(1.0), _GLF_IDENTITY(_GLF_IDENTITY(vec4(1.0), max(_GLF_IDENTITY(vec4(1.0), (false ? _GLF_FUZZED(vec4(-45.09, 10.46, -8762.2279, -0.6)) : vec4(1.0))), vec4(1.0))), clamp(vec4(1.0), vec4(1.0), _GLF_IDENTITY(vec4(1.0), (true ? vec4(1.0) : _GLF_FUZZED(vec4(-97.88, 17.99, 6905.0517, -0.9)))))))), _GLF_IDENTITY(mat4(1.0), (mat4(1.0)) - mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, max(0.0, _GLF_IDENTITY(0.0, max(0.0, 0.0)))))), true, bvec2(true), vec3(1.0), _GLF_IDENTITY(uvec2(_GLF_IDENTITY(1u, max(_GLF_IDENTITY(1u, (1u) | (1u)), _GLF_IDENTITY(1u, clamp(_GLF_IDENTITY(1u, ~ (~ (1u))), 1u, 1u))))), (uvec2(1u)) * uvec2(1u, 1u)), gl_SubgroupInvocationID);
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_DEAD(false))
  barrier();
 uint workgroup_size = _GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize, _GLF_IDENTITY(uvec3(1u, 1u, 1u) * (gl_WorkGroupSize), clamp(uvec3(1u, 1u, 1u) * (gl_WorkGroupSize), _GLF_IDENTITY(uvec3(1u, 1u, 1u) * (gl_WorkGroupSize), (_GLF_IDENTITY(uvec3(1u, 1u, 1u) * (gl_WorkGroupSize), uvec3(1u, 1u, 1u) * (uvec3(1u, 1u, 1u) * (gl_WorkGroupSize)))) | (uvec3(1u, 1u, 1u) * (gl_WorkGroupSize))), uvec3(1u, 1u, 1u) * (gl_WorkGroupSize)))), ~ (~ (_GLF_IDENTITY(gl_WorkGroupSize, _GLF_IDENTITY(uvec3(1u, 1u, _GLF_IDENTITY(1u, (true ? 1u : _GLF_FUZZED(112775u)))) * (gl_WorkGroupSize), clamp(uvec3(1u, 1u, 1u) * (gl_WorkGroupSize), _GLF_IDENTITY(uvec3(1u, 1u, 1u) * (gl_WorkGroupSize), (_GLF_IDENTITY(uvec3(1u, 1u, 1u) * (gl_WorkGroupSize), uvec3(1u, 1u, 1u) * (uvec3(1u, 1u, 1u) * (gl_WorkGroupSize)))) | (uvec3(1u, 1u, 1u) * (gl_WorkGroupSize))), uvec3(1u, 1u, 1u) * (gl_WorkGroupSize))))))).x;
 for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(2), int(2))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 _GLF_struct_16 _GLF_struct_replacement_16 = _GLF_struct_16(vec4(1.0), mat4x3(1.0), _GLF_struct_4(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(true), bvec2(bvec3(bvec2(true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), _GLF_IDENTITY(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec3(bvec2(true), true), bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec2(true), true), bvec3(bvec4(bvec3(bvec2(true), true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))), _GLF_IDENTITY(bvec2(bvec3(bvec2(_GLF_IDENTITY(bvec3(bvec2(true), true), bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec2(true), true), bvec3(bvec4(bvec3(bvec2(true), true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))), false)), bvec2(bvec3(bvec2(bvec3(bvec2(_GLF_IDENTITY(bvec3(bvec2(true), true), bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec2(true), true), bvec3(bvec4(bvec3(bvec2(true), true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))), false)), true)))), bvec2(bvec4(bvec2(_GLF_IDENTITY(bvec3(bvec2(true), true), bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec2(true), true)), bvec3(bvec4(_GLF_IDENTITY(bvec3(bvec3(bvec2(true), true)), bvec3(bvec4(bvec3(bvec3(bvec2(true), true)), false))), true)))))), true, true))))), _GLF_struct_8(1, true, _GLF_struct_5(ivec4(1), mat4x3(_GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat4x2(_GLF_IDENTITY(1.0, max(1.0, 1.0)), 1.0, 1.0, determinant(mat3(0.0, 1.0, 0.0, tan(0.0), 0.0, length(0.0), 0.0, 0.0, 0.0)), 0.0, tan(tan(0.0)), 0.0, 1.0)), (true ? float(mat4x2(_GLF_IDENTITY(1.0, max(1.0, 1.0)), 1.0, 1.0, determinant(mat3(0.0, 1.0, 0.0, tan(0.0), 0.0, length(0.0), 0.0, 0.0, 0.0)), 0.0, tan(tan(0.0)), 0.0, 1.0)) : _GLF_FUZZED(-8.4))))), 1), bvec3(true), _GLF_struct_6(vec4(1.0), ivec3(1), mat4x3(1.0), vec4(1.0), uvec2(1u), mat3x4(_GLF_IDENTITY(1.0, _GLF_IDENTITY((1.0), mix(float(_GLF_IDENTITY((1.0), float(mat2x4((1.0), 1.0, sin(0.0), 1.0, 0.0, 0.0, 0.0, 1.0)))), float(_GLF_FUZZED(-5803.0451)), bool(false))) - 0.0))), _GLF_struct_7(ivec2(1), bvec4(true), vec4(1.0), mat4x2(1.0)), ivec3(1)), _GLF_struct_11(mat4x3(1.0), bvec4(true), _GLF_struct_9(mat3x4(1.0), mat2(_GLF_IDENTITY(_GLF_IDENTITY(1.0, 1.0 * (1.0)), clamp(_GLF_IDENTITY(1.0, 1.0 * (1.0)), _GLF_IDENTITY(1.0, 1.0 * (1.0)), _GLF_IDENTITY(1.0, 1.0 * (1.0))))), mat4x3(1.0), _GLF_IDENTITY(bvec3(true), _GLF_IDENTITY(bvec3(bvec3(bvec3(true))), bvec3(bvec4(bvec3(bvec3(bvec3(true))), false))))), _GLF_struct_10(_GLF_IDENTITY(_GLF_IDENTITY(ivec2(1), (_GLF_IDENTITY(false ? _GLF_FUZZED(ivec2(-29395, -32089)) : _GLF_IDENTITY(ivec2(_GLF_IDENTITY(_GLF_IDENTITY(1, 0 ^ (1)), min(1, 1))), max(ivec2(1), _GLF_IDENTITY(_GLF_IDENTITY(ivec2(1), (ivec2(1)) ^ ivec2(0, _GLF_IDENTITY(0, (0) << (0 | 0)))), max(_GLF_IDENTITY(ivec2(1), (ivec2(1)) ^ ivec2(0, _GLF_IDENTITY(0, (0) << (0 | 0)))), _GLF_IDENTITY(ivec2(1), (ivec2(1)) ^ ivec2(0, _GLF_IDENTITY(0, (0) << (0 | 0)))))))), max(false ? _GLF_FUZZED(ivec2(-29395, -32089)) : _GLF_IDENTITY(ivec2(_GLF_IDENTITY(1, min(1, 1))), max(ivec2(1), _GLF_IDENTITY(ivec2(1), (ivec2(1)) ^ ivec2(0, _GLF_IDENTITY(0, (0) << (0 | 0)))))), false ? _GLF_FUZZED(ivec2(-29395, -32089)) : _GLF_IDENTITY(ivec2(_GLF_IDENTITY(1, min(1, 1))), max(ivec2(_GLF_IDENTITY(1, min(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, max(1, 1))) | 0), 1))), _GLF_IDENTITY(ivec2(1), (ivec2(1)) ^ ivec2(0, _GLF_IDENTITY(_GLF_IDENTITY(0, clamp(_GLF_IDENTITY(0, _GLF_IDENTITY(max(0, 0), (max(0, 0)) << 0)), _GLF_IDENTITY(0, (0) * 1), 0)), (0) << _GLF_IDENTITY(_GLF_IDENTITY((0 | 0), max((0 | 0), _GLF_IDENTITY((0 | 0), ((0 | 0)) - 0))), (true ? _GLF_IDENTITY((0 | 0), max((0 | 0), _GLF_IDENTITY((0 | 0), ((0 | 0)) - 0))) : _GLF_FUZZED(-42252)))))))))))), (true ? _GLF_IDENTITY(ivec2(1), (_GLF_IDENTITY(false ? _GLF_FUZZED(ivec2(-29395, -32089)) : _GLF_IDENTITY(ivec2(_GLF_IDENTITY(_GLF_IDENTITY(1, 0 ^ (1)), min(1, 1))), max(ivec2(1), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(ivec2(1), (ivec2(1)) ^ ivec2(0, _GLF_IDENTITY(0, (0) << (0 | 0)))), max(_GLF_IDENTITY(ivec2(1), (ivec2(1)) ^ ivec2(0, _GLF_IDENTITY(0, (0) << (0 | 0)))), _GLF_IDENTITY(ivec2(1), (ivec2(1)) ^ ivec2(0, _GLF_IDENTITY(0, (0) << (0 | 0)))))), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(ivec2(1), (ivec2(1)) ^ ivec2(0, _GLF_IDENTITY(0, (0) << (0 | 0)))), max(_GLF_IDENTITY(ivec2(1), (ivec2(1)) ^ ivec2(0, _GLF_IDENTITY(0, (0) << (0 | 0)))), _GLF_IDENTITY(ivec2(1), (ivec2(1)) ^ ivec2(0, _GLF_IDENTITY(0, (0) << (0 | 0)))))), (false ? _GLF_FUZZED(ivec2(-8640, -88662)) : _GLF_IDENTITY(_GLF_IDENTITY(ivec2(1), _GLF_IDENTITY((ivec2(1)), ((ivec2(1))) / ivec2(1, 1)) ^ ivec2(0, _GLF_IDENTITY(0, (0) << (0 | 0)))), max(_GLF_IDENTITY(ivec2(1), (ivec2(1)) ^ ivec2(0, _GLF_IDENTITY(0, (0) << (0 | 0)))), _GLF_IDENTITY(ivec2(1), (ivec2(1)) ^ ivec2(0, _GLF_IDENTITY(0, (0) << (0 | 0))))))))))))), max(false ? _GLF_FUZZED(ivec2(-29395, -32089)) : _GLF_IDENTITY(ivec2(_GLF_IDENTITY(1, min(1, 1))), max(ivec2(1), _GLF_IDENTITY(ivec2(1), (ivec2(_GLF_IDENTITY(1, max(1, 1)))) ^ ivec2(0, _GLF_IDENTITY(0, (0) << (0 | 0)))))), false ? _GLF_FUZZED(ivec2(-29395, -32089)) : _GLF_IDENTITY(ivec2(_GLF_IDENTITY(1, min(1, 1))), max(ivec2(_GLF_IDENTITY(1, min(_GLF_IDENTITY(1, (_GLF_IDENTITY(_GLF_IDENTITY(1, 0 ^ (1)), max(1, 1))) | 0), 1))), _GLF_IDENTITY(ivec2(1), (ivec2(1)) ^ ivec2(0, _GLF_IDENTITY(_GLF_IDENTITY(0, clamp(_GLF_IDENTITY(0, _GLF_IDENTITY(max(0, 0), (max(0, 0)) << 0)), _GLF_IDENTITY(0, _GLF_IDENTITY((0), (true ? (0) : _GLF_FUZZED(-38704))) * 1), 0)), (0) << _GLF_IDENTITY(_GLF_IDENTITY((0 | _GLF_IDENTITY(0, clamp(0, 0, 0))), max((0 | 0), _GLF_IDENTITY((0 | 0), ((_GLF_IDENTITY(0 | 0, (0 | 0) << 0))) - 0))), (true ? _GLF_IDENTITY((0 | 0), max((0 | 0), _GLF_IDENTITY((0 | 0), ((0 | 0)) - 0))) : _GLF_FUZZED(-42252)))))))))))) : _GLF_FUZZED(ivec2(74344, 37190)))), _GLF_IDENTITY(vec4(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, min(1.0, 1.0)), 1.0, 1.0)), mix(float(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0))), float(_GLF_FUZZED(-7.8)), bool(false))), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))) && true)))) ? _GLF_FUZZED(-364.937) : _GLF_IDENTITY(_GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, (true ? _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-709.959)), float(_GLF_IDENTITY(1.0, float(float(1.0)))), bool(true))) : _GLF_FUZZED(0.4))), _GLF_IDENTITY(1.0, _GLF_IDENTITY(_GLF_IDENTITY((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 1.0 : _GLF_FUZZED(3.7)), mix(float(_GLF_IDENTITY((_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, vec2(vec3(injectionSwitch, 0.0))) : _GLF_FUZZED(injectionSwitch))).x < injectionSwitch.y)) ? 1.0 : _GLF_FUZZED(3.7)), (false ? _GLF_FUZZED(6.6) : _GLF_IDENTITY((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 1.0 : _GLF_FUZZED(3.7)), float(mat3((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 1.0 : _GLF_FUZZED(3.7)), 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(0.0, 0.0 + (_GLF_IDENTITY(0.0, float(mat3x4(_GLF_IDENTITY(0.0, min(0.0, 0.0)), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, abs(0.0), 1.0))))))))))), float(_GLF_FUZZED(vec2(-89.41, 602.834).r)), bool(false))), clamp(_GLF_IDENTITY((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 1.0 : _GLF_IDENTITY(_GLF_FUZZED(3.7), clamp(_GLF_FUZZED(3.7), _GLF_FUZZED(3.7), _GLF_IDENTITY(_GLF_FUZZED(3.7), clamp(_GLF_FUZZED(3.7), _GLF_FUZZED(3.7), _GLF_FUZZED(3.7)))))), mix(float(_GLF_IDENTITY((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 1.0 : _GLF_FUZZED(3.7)), (false ? _GLF_FUZZED(6.6) : _GLF_IDENTITY((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 1.0 : _GLF_FUZZED(3.7)), float(mat3((_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(injectionSwitch.x, float(vec2(injectionSwitch.x, 1.0)))), float(_GLF_FUZZED(4.7)), bool(false))) < injectionSwitch.y)) ? 1.0 : _GLF_FUZZED(3.7)), 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(0.0, clamp(0.0, 0.0, _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(4125.5911)), float(0.0), bool(true))))))))))), _GLF_IDENTITY(float(_GLF_FUZZED(vec2(-89.41, 602.834).r)), clamp(float(_GLF_FUZZED(vec2(-89.41, 602.834).r)), float(_GLF_FUZZED(vec2(-89.41, 602.834).r)), float(_GLF_FUZZED(vec2(-89.41, 602.834).r)))), bool(false))), _GLF_IDENTITY((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 1.0 : _GLF_FUZZED(3.7)), mix(float(_GLF_IDENTITY((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 1.0 : _GLF_FUZZED(3.7)), (false ? _GLF_FUZZED(6.6) : _GLF_IDENTITY((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 1.0 : _GLF_FUZZED(3.7)), float(mat3((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 1.0 : _GLF_FUZZED(_GLF_IDENTITY(3.7, (3.7) + 0.0))), 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0)))))), float(_GLF_FUZZED(vec2(-89.41, 602.834).r)), bool(false))), _GLF_IDENTITY((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 1.0 : _GLF_FUZZED(3.7)), mix(float(_GLF_IDENTITY((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 1.0 : _GLF_FUZZED(3.7)), (false ? _GLF_IDENTITY(_GLF_FUZZED(6.6), (true ? _GLF_FUZZED(6.6) : _GLF_FUZZED(-5.8))) : _GLF_IDENTITY((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 1.0 : _GLF_FUZZED(3.7)), float(mat3((_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0))))) ? 1.0 : _GLF_FUZZED(3.7)), 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0)))))), float(_GLF_FUZZED(vec2(-89.41, 602.834).r)), bool(false)))))), 1.0)), max(_GLF_IDENTITY(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), min(_GLF_IDENTITY(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), mix(_GLF_IDENTITY(float(_GLF_FUZZED(42.28)), (float(_GLF_FUZZED(42.28))) / abs(1.0)), float(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0))), bool(true))), _GLF_IDENTITY(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), _GLF_IDENTITY(max(_GLF_IDENTITY(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), min(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), _GLF_IDENTITY(1.0, clamp(1.0, 1.0, _GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, float(mat2(1.0, 0.0, 1.0, 0.0)))) / 1.0))))), _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0))), mix(float(max(_GLF_IDENTITY(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), min(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), _GLF_IDENTITY(1.0, clamp(1.0, 1.0, _GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, float(mat2(1.0, 0.0, 1.0, 0.0)))) / 1.0))))), _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)))), float(_GLF_FUZZED(-754.228)), bool(false)))))), _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0))))))), _GLF_IDENTITY((vec4(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, min(1.0, 1.0)), 1.0, 1.0)), mix(float(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0))), float(_GLF_FUZZED(-7.8)), bool(false))), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)))) ? _GLF_FUZZED(-364.937) : _GLF_IDENTITY(_GLF_IDENTITY(1.0, clamp(1.0, _GLF_IDENTITY(1.0, _GLF_IDENTITY(_GLF_IDENTITY((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 1.0 : _GLF_FUZZED(3.7)), mix(float(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) && true)), (! (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) && true))) && true))) ? 1.0 : _GLF_FUZZED(3.7)), (false ? _GLF_FUZZED(6.6) : _GLF_IDENTITY((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 1.0 : _GLF_FUZZED(3.7)), float(mat3((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 1.0 : _GLF_FUZZED(3.7)), 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0)))))), float(_GLF_FUZZED(vec2(-89.41, 602.834).r)), bool(false))), clamp(_GLF_IDENTITY((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 1.0 : _GLF_IDENTITY(_GLF_FUZZED(3.7), min(_GLF_IDENTITY(_GLF_FUZZED(3.7), max(_GLF_FUZZED(3.7), _GLF_FUZZED(3.7))), _GLF_FUZZED(3.7)))), mix(float(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false || (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true && (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))) && true) ? 1.0 : _GLF_FUZZED(3.7)), (false ? _GLF_FUZZED(6.6) : _GLF_IDENTITY((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 1.0 : _GLF_FUZZED(3.7)), float(mat3((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 1.0 : _GLF_FUZZED(3.7)), 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0)))))), float(_GLF_FUZZED(vec2(-89.41, 602.834).r)), bool(false))), _GLF_IDENTITY((_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], (false ? _GLF_FUZZED(8.8) : injectionSwitch[0])), injectionSwitch[1])).y)) ? 1.0 : _GLF_FUZZED(3.7)), mix(float(_GLF_IDENTITY((_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).x < injectionSwitch.y)) ? 1.0 : _GLF_FUZZED(3.7)), (false ? _GLF_IDENTITY(_GLF_FUZZED(6.6), min(_GLF_FUZZED(6.6), _GLF_IDENTITY(_GLF_FUZZED(6.6), mix(float(_GLF_FUZZED(-7.0)), float(_GLF_FUZZED(6.6)), bool(true))))) : _GLF_IDENTITY((_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true && (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) || false) ? 1.0 : _GLF_FUZZED(3.7)), float(mat3((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 1.0 : _GLF_FUZZED(3.7)), 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0)))))), float(_GLF_FUZZED(vec2(-89.41, 602.834).r)), bool(false))), _GLF_IDENTITY((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 1.0 : _GLF_FUZZED(3.7)), mix(float(_GLF_IDENTITY((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 1.0 : _GLF_FUZZED(3.7)), (false ? _GLF_FUZZED(6.6) : _GLF_IDENTITY((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 1.0 : _GLF_IDENTITY(_GLF_FUZZED(3.7), mix(float(_GLF_FUZZED(3.7)), float(_GLF_FUZZED(-3.0)), bool(false)))), float(mat3((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 1.0 : _GLF_FUZZED(3.7)), 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0)))))), float(_GLF_FUZZED(vec2(-89.41, 602.834).r)), bool(false)))))), 1.0)), max(_GLF_IDENTITY(_GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, min(1.0, 1.0)), 1.0, 1.0)), min(_GLF_IDENTITY(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), mix(float(_GLF_FUZZED(42.28)), float(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0))), bool(true))), _GLF_IDENTITY(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), max(_GLF_IDENTITY(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), min(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), _GLF_IDENTITY(1.0, clamp(1.0, 1.0, _GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, float(mat2(1.0, _GLF_IDENTITY(0.0, 0.0 + (_GLF_IDENTITY(0.0, 0.0 + (0.0)))), 1.0, 0.0)))) / 1.0))))), _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)))))), _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)))))))) * mat4(1.0), mat4(_GLF_ONE(1.0, injectionSwitch.y)) * ((vec4(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, min(1.0, 1.0)), 1.0, 1.0)), mix(float(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0))), float(_GLF_FUZZED(-7.8)), bool(false))), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)))) ? _GLF_FUZZED(-364.937) : _GLF_IDENTITY(_GLF_IDENTITY(1.0, clamp(1.0, _GLF_IDENTITY(1.0, _GLF_IDENTITY(_GLF_IDENTITY((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 1.0 : _GLF_FUZZED(3.7)), mix(float(_GLF_IDENTITY((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 1.0 : _GLF_FUZZED(_GLF_IDENTITY(3.7, float(mat2x3(_GLF_IDENTITY(3.7, min(3.7, _GLF_IDENTITY(3.7, mix(float(_GLF_FUZZED(0.6)), float(3.7), bool(true))))), 0.0, 0.0, 0.0, 1.0, 0.0))))), (_GLF_IDENTITY(false ? _GLF_FUZZED(6.6) : _GLF_IDENTITY((_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) < injectionSwitch.y)) ? 1.0 : _GLF_FUZZED(3.7)), float(mat3((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 1.0 : _GLF_FUZZED(3.7)), 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0))), (true ? false ? _GLF_FUZZED(6.6) : _GLF_IDENTITY((_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) < injectionSwitch.y)) ? 1.0 : _GLF_FUZZED(3.7)), float(mat3((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 1.0 : _GLF_FUZZED(3.7)), 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0))) : _GLF_FUZZED(5.3)))))), _GLF_IDENTITY(float(_GLF_FUZZED(vec2(-89.41, 602.834).r)), max(float(_GLF_FUZZED(vec2(-89.41, 602.834).r)), float(_GLF_FUZZED(vec2(-89.41, 602.834).r)))), bool(false))), _GLF_IDENTITY(clamp(_GLF_IDENTITY((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 1.0 : _GLF_FUZZED(3.7)), mix(float(_GLF_IDENTITY((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 1.0 : _GLF_FUZZED(3.7)), (false ? _GLF_FUZZED(6.6) : _GLF_IDENTITY((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 1.0 : _GLF_FUZZED(3.7)), float(mat3((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 1.0 : _GLF_FUZZED(3.7)), 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0)))))), float(_GLF_FUZZED(vec2(-89.41, 602.834).r)), bool(false))), _GLF_IDENTITY((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 1.0 : _GLF_FUZZED(3.7)), mix(float(_GLF_IDENTITY((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 1.0 : _GLF_FUZZED(3.7)), (false ? _GLF_FUZZED(6.6) : _GLF_IDENTITY((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 1.0 : _GLF_FUZZED(3.7)), float(mat3((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 1.0 : _GLF_FUZZED(3.7)), 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0)))))), float(_GLF_FUZZED(vec2(-89.41, 602.834).r)), bool(false))), _GLF_IDENTITY((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 1.0 : _GLF_FUZZED(3.7)), mix(float(_GLF_IDENTITY((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 1.0 : _GLF_FUZZED(3.7)), (false ? _GLF_FUZZED(6.6) : _GLF_IDENTITY((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 1.0 : _GLF_FUZZED(3.7)), float(mat3((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 1.0 : _GLF_FUZZED(3.7)), 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0)))))), float(_GLF_FUZZED(vec2(-89.41, 602.834).r)), bool(false)))), max(clamp(_GLF_IDENTITY((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 1.0 : _GLF_FUZZED(3.7)), mix(float(_GLF_IDENTITY((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 1.0 : _GLF_FUZZED(3.7)), (false ? _GLF_FUZZED(6.6) : _GLF_IDENTITY((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 1.0 : _GLF_FUZZED(3.7)), float(mat3((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 1.0 : _GLF_FUZZED(3.7)), 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0)))))), float(_GLF_FUZZED(vec2(-89.41, 602.834).r)), bool(false))), _GLF_IDENTITY((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 1.0 : _GLF_FUZZED(3.7)), mix(float(_GLF_IDENTITY((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 1.0 : _GLF_FUZZED(3.7)), (false ? _GLF_FUZZED(6.6) : _GLF_IDENTITY((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 1.0 : _GLF_FUZZED(3.7)), float(mat3((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 1.0 : _GLF_FUZZED(3.7)), 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0)))))), float(_GLF_FUZZED(vec2(-89.41, 602.834).r)), bool(false))), _GLF_IDENTITY((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 1.0 : _GLF_FUZZED(3.7)), mix(float(_GLF_IDENTITY((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 1.0 : _GLF_FUZZED(3.7)), (false ? _GLF_FUZZED(6.6) : _GLF_IDENTITY((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 1.0 : _GLF_FUZZED(3.7)), float(mat3((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 1.0 : _GLF_FUZZED(3.7)), 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0)))))), float(_GLF_FUZZED(vec2(-89.41, 602.834).r)), bool(false)))), _GLF_IDENTITY(clamp(_GLF_IDENTITY((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 1.0 : _GLF_FUZZED(3.7)), mix(float(_GLF_IDENTITY((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 1.0 : _GLF_FUZZED(3.7)), (false ? _GLF_FUZZED(6.6) : _GLF_IDENTITY((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 1.0 : _GLF_FUZZED(3.7)), float(mat3((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 1.0 : _GLF_FUZZED(3.7)), 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0)))))), float(_GLF_FUZZED(vec2(-89.41, 602.834).r)), bool(false))), _GLF_IDENTITY((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 1.0 : _GLF_FUZZED(3.7)), mix(float(_GLF_IDENTITY((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 1.0 : _GLF_FUZZED(3.7)), (false ? _GLF_FUZZED(6.6) : _GLF_IDENTITY((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 1.0 : _GLF_FUZZED(3.7)), float(mat3((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 1.0 : _GLF_FUZZED(3.7)), 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0)))))), float(_GLF_FUZZED(vec2(-89.41, 602.834).r)), bool(false))), _GLF_IDENTITY((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 1.0 : _GLF_FUZZED(3.7)), mix(float(_GLF_IDENTITY((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 1.0 : _GLF_FUZZED(3.7)), (false ? _GLF_FUZZED(6.6) : _GLF_IDENTITY((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 1.0 : _GLF_FUZZED(3.7)), float(mat3((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 1.0 : _GLF_FUZZED(3.7)), 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0)))))), float(_GLF_FUZZED(vec2(-89.41, 602.834).r)), bool(false)))), clamp(clamp(_GLF_IDENTITY((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 1.0 : _GLF_FUZZED(3.7)), mix(float(_GLF_IDENTITY((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 1.0 : _GLF_FUZZED(3.7)), (false ? _GLF_FUZZED(6.6) : _GLF_IDENTITY((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 1.0 : _GLF_FUZZED(3.7)), float(mat3((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 1.0 : _GLF_FUZZED(3.7)), 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0)))))), float(_GLF_FUZZED(vec2(-89.41, 602.834).r)), bool(false))), _GLF_IDENTITY((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 1.0 : _GLF_FUZZED(3.7)), mix(float(_GLF_IDENTITY((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 1.0 : _GLF_FUZZED(3.7)), (false ? _GLF_FUZZED(6.6) : _GLF_IDENTITY((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 1.0 : _GLF_FUZZED(3.7)), float(mat3((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 1.0 : _GLF_FUZZED(3.7)), 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0)))))), float(_GLF_FUZZED(vec2(-89.41, 602.834).r)), bool(false))), _GLF_IDENTITY((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 1.0 : _GLF_FUZZED(3.7)), mix(float(_GLF_IDENTITY((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 1.0 : _GLF_FUZZED(3.7)), (false ? _GLF_FUZZED(6.6) : _GLF_IDENTITY((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 1.0 : _GLF_FUZZED(3.7)), float(mat3((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 1.0 : _GLF_FUZZED(3.7)), 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0)))))), float(_GLF_FUZZED(vec2(-89.41, 602.834).r)), bool(false)))), _GLF_IDENTITY(clamp(_GLF_IDENTITY((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 1.0 : _GLF_FUZZED(3.7)), mix(float(_GLF_IDENTITY((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 1.0 : _GLF_FUZZED(3.7)), (false ? _GLF_FUZZED(6.6) : _GLF_IDENTITY((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 1.0 : _GLF_FUZZED(3.7)), float(mat3((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 1.0 : _GLF_FUZZED(3.7)), 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0)))))), float(_GLF_FUZZED(vec2(-89.41, 602.834).r)), bool(false))), _GLF_IDENTITY((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 1.0 : _GLF_FUZZED(3.7)), mix(float(_GLF_IDENTITY((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 1.0 : _GLF_FUZZED(3.7)), (false ? _GLF_FUZZED(6.6) : _GLF_IDENTITY((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 1.0 : _GLF_FUZZED(3.7)), float(mat3((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 1.0 : _GLF_FUZZED(3.7)), 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0)))))), float(_GLF_FUZZED(vec2(-89.41, 602.834).r)), bool(false))), _GLF_IDENTITY((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 1.0 : _GLF_FUZZED(3.7)), mix(float(_GLF_IDENTITY((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 1.0 : _GLF_FUZZED(3.7)), (false ? _GLF_FUZZED(6.6) : _GLF_IDENTITY((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 1.0 : _GLF_FUZZED(3.7)), float(mat3((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 1.0 : _GLF_FUZZED(3.7)), 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0)))))), float(_GLF_FUZZED(vec2(-89.41, 602.834).r)), bool(false)))), (true ? clamp(_GLF_IDENTITY((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 1.0 : _GLF_FUZZED(3.7)), mix(float(_GLF_IDENTITY((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 1.0 : _GLF_FUZZED(3.7)), (false ? _GLF_FUZZED(6.6) : _GLF_IDENTITY((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 1.0 : _GLF_FUZZED(3.7)), float(mat3((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 1.0 : _GLF_FUZZED(3.7)), 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0)))))), float(_GLF_FUZZED(vec2(-89.41, 602.834).r)), bool(false))), _GLF_IDENTITY((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 1.0 : _GLF_FUZZED(3.7)), mix(float(_GLF_IDENTITY((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 1.0 : _GLF_FUZZED(3.7)), (false ? _GLF_FUZZED(6.6) : _GLF_IDENTITY((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 1.0 : _GLF_FUZZED(3.7)), float(mat3((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 1.0 : _GLF_FUZZED(3.7)), 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0)))))), float(_GLF_FUZZED(vec2(-89.41, 602.834).r)), bool(false))), _GLF_IDENTITY((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 1.0 : _GLF_FUZZED(3.7)), mix(float(_GLF_IDENTITY((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 1.0 : _GLF_FUZZED(3.7)), (false ? _GLF_FUZZED(6.6) : _GLF_IDENTITY((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 1.0 : _GLF_FUZZED(3.7)), float(mat3((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 1.0 : _GLF_FUZZED(3.7)), 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0)))))), float(_GLF_FUZZED(vec2(-89.41, 602.834).r)), bool(false)))) : _GLF_FUZZED(-71.22))), clamp(_GLF_IDENTITY((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 1.0 : _GLF_FUZZED(3.7)), mix(float(_GLF_IDENTITY((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 1.0 : _GLF_FUZZED(3.7)), (false ? _GLF_FUZZED(6.6) : _GLF_IDENTITY((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 1.0 : _GLF_FUZZED(3.7)), float(mat3((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 1.0 : _GLF_FUZZED(3.7)), 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0)))))), float(_GLF_FUZZED(vec2(-89.41, 602.834).r)), bool(false))), _GLF_IDENTITY((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 1.0 : _GLF_FUZZED(3.7)), mix(float(_GLF_IDENTITY((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 1.0 : _GLF_FUZZED(3.7)), (false ? _GLF_FUZZED(6.6) : _GLF_IDENTITY((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 1.0 : _GLF_FUZZED(3.7)), float(mat3((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 1.0 : _GLF_FUZZED(3.7)), 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0)))))), float(_GLF_FUZZED(vec2(-89.41, 602.834).r)), bool(false))), _GLF_IDENTITY((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 1.0 : _GLF_FUZZED(3.7)), mix(float(_GLF_IDENTITY((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 1.0 : _GLF_FUZZED(3.7)), (false ? _GLF_FUZZED(6.6) : _GLF_IDENTITY((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 1.0 : _GLF_FUZZED(3.7)), float(mat3((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 1.0 : _GLF_FUZZED(3.7)), 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0)))))), float(_GLF_FUZZED(vec2(-89.41, 602.834).r)), bool(false)))))))))), 1.0)), max(_GLF_IDENTITY(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), min(_GLF_IDENTITY(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), mix(float(_GLF_FUZZED(_GLF_IDENTITY(42.28, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-3554.3722) : 42.28)))), float(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0))), bool(true))), _GLF_IDENTITY(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), max(_GLF_IDENTITY(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), min(_GLF_IDENTITY(1.0, _GLF_IDENTITY(clamp(1.0, 1.0, 1.0), (false ? _GLF_FUZZED(-2.1) : clamp(1.0, 1.0, 1.0)))), _GLF_IDENTITY(1.0, clamp(1.0, 1.0, _GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, float(mat2(1.0, 0.0, 1.0, 0.0)))) / 1.0))))), _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)))))), _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)))))))) * mat4(1.0)))), _GLF_IDENTITY(mat2(1.0), transpose(_GLF_IDENTITY(transpose(mat2(1.0)), (transpose(mat2(1.0))) / mat2(_GLF_IDENTITY(1.0, _GLF_IDENTITY(min(1.0, _GLF_IDENTITY(1.0, mix(float(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(-71.16), mix(float(_GLF_FUZZED(-71.16)), float(_GLF_FUZZED(float(20925u))), bool(false))), clamp(_GLF_IDENTITY(_GLF_FUZZED(-71.16), mix(float(_GLF_FUZZED(-71.16)), float(_GLF_FUZZED(float(20925u))), bool(false))), _GLF_IDENTITY(_GLF_FUZZED(-71.16), mix(float(_GLF_FUZZED(-71.16)), float(_GLF_FUZZED(float(20925u))), bool(false))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(-71.16), mix(float(_GLF_FUZZED(-71.16)), float(_GLF_FUZZED(float(20925u))), bool(false))), (_GLF_IDENTITY(_GLF_FUZZED(-71.16), mix(float(_GLF_FUZZED(-71.16)), float(_GLF_FUZZED(float(20925u))), bool(false)))) / 1.0)))), float(1.0), bool(true)))), max(min(1.0, _GLF_IDENTITY(1.0, mix(float(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(-71.16), mix(float(_GLF_FUZZED(-71.16)), float(_GLF_FUZZED(float(20925u))), bool(false))), (false ? _GLF_FUZZED(-7.0) : _GLF_IDENTITY(_GLF_FUZZED(-71.16), mix(float(_GLF_FUZZED(-71.16)), float(_GLF_FUZZED(float(20925u))), bool(false)))))), float(1.0), bool(true)))), min(1.0, _GLF_IDENTITY(1.0, mix(float(_GLF_IDENTITY(_GLF_FUZZED(-71.16), _GLF_IDENTITY(mix(float(_GLF_FUZZED(-71.16)), float(_GLF_FUZZED(float(20925u))), bool(false)), (false ? _GLF_FUZZED(561.981) : mix(float(_GLF_FUZZED(-71.16)), float(_GLF_FUZZED(float(20925u))), bool(false)))))), float(1.0), bool(true))))))), 1.0, _GLF_IDENTITY(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(float(10384u))), bool(false)))) - _GLF_ZERO(0.0, injectionSwitch.x)), (false ? _GLF_FUZZED(73.36) : 1.0)), 1.0)))), mat2(1.0)), bvec4(true), _GLF_IDENTITY(gl_WorkGroupID, uvec3(0u, 0u, 0u) | (_GLF_IDENTITY(gl_WorkGroupID, uvec3(0u, 0u, 0u) + (gl_WorkGroupID)))).x, _GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(true, _GLF_IDENTITY(true, ! (! (true))) && (true)), false, true, false)), bool(bvec2(bool(bvec4(_GLF_IDENTITY(true, true && (true)), false, true, _GLF_IDENTITY(false, ! (! (false))))), false)))))))), 1u, _GLF_struct_15(_GLF_struct_12(bvec2(true), ivec2(1), mat2x3(1.0), mat3x2(1.0), _GLF_IDENTITY(1, _GLF_IDENTITY((1), (_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x > injectionSwitch.y), ! (! ((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))) ? _GLF_IDENTITY(_GLF_FUZZED(-11278), (_GLF_FUZZED(_GLF_IDENTITY(-11278, (true ? -11278 : _GLF_FUZZED(-83500))))) ^ (0 | 0)) : _GLF_IDENTITY((1), max((1), _GLF_IDENTITY((1), ~ (~ _GLF_IDENTITY(((1)), (_GLF_IDENTITY(((1)), min(((1)), ((1))))) ^ _GLF_IDENTITY(0, (0) ^ 0)))))))) | int(_GLF_ZERO(0.0, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-9.2), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-3.7)), bvec2(true, false))), injectionSwitch)).x, max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x))))))), ivec2(1)), _GLF_struct_13(_GLF_IDENTITY(uvec2(1u), (uvec2(1u)) | (_GLF_IDENTITY(uvec2(1u), _GLF_IDENTITY((uvec2(1u)) | uvec2(0u, 0u), _GLF_IDENTITY((_GLF_IDENTITY((uvec2(1u)) | uvec2(0u, 0u), ((uvec2(1u)) | uvec2(0u, 0u)) | ((uvec2(1u)) | uvec2(0u, 0u)))), clamp((_GLF_IDENTITY((uvec2(1u)) | uvec2(0u, 0u), ((uvec2(1u)) | uvec2(0u, 0u)) | ((uvec2(1u)) | uvec2(0u, 0u)))), (_GLF_IDENTITY((uvec2(1u)) | uvec2(0u, 0u), ((uvec2(1u)) | uvec2(0u, 0u)) | ((uvec2(1u)) | uvec2(0u, 0u)))), _GLF_IDENTITY((_GLF_IDENTITY((uvec2(1u)) | uvec2(0u, 0u), ((uvec2(1u)) | uvec2(0u, 0u)) | ((uvec2(1u)) | uvec2(0u, 0u)))), ((_GLF_IDENTITY((uvec2(1u)) | uvec2(0u, 0u), ((uvec2(1u)) | uvec2(0u, 0u)) | ((uvec2(1u)) | uvec2(0u, 0u))))) << uvec2(0u, 0u)))) | uvec2(0u, 0u))))), bvec4(_GLF_IDENTITY(true, bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), bool(bool(! (true)))))), true && (_GLF_IDENTITY(true, bool(bvec2(true, true))))), false, false, _GLF_TRUE(_GLF_IDENTITY(true, false || (true)), (injectionSwitch.x < injectionSwitch.y)))))), uvec3(1u)), _GLF_struct_14(mat4(1.0), 1.0, true, true, mat4x2(1.0)), mat2(1.0)));
 uint workgroup_base = workgroup_size * _GLF_IDENTITY(_GLF_struct_replacement_16._f4.workgroup_id, _GLF_IDENTITY((false ? _GLF_FUZZED(num_workgroup) : _GLF_IDENTITY(_GLF_struct_replacement_16._f4.workgroup_id, (true ? _GLF_struct_replacement_16._f4.workgroup_id : _GLF_FUZZED(subgroup_size)))), (_GLF_IDENTITY((false ? _GLF_FUZZED(num_workgroup) : _GLF_IDENTITY(_GLF_struct_replacement_16._f4.workgroup_id, (true ? _GLF_struct_replacement_16._f4.workgroup_id : _GLF_FUZZED(subgroup_size)))), max((false ? _GLF_FUZZED(num_workgroup) : _GLF_IDENTITY(_GLF_struct_replacement_16._f4.workgroup_id, (true ? _GLF_struct_replacement_16._f4.workgroup_id : _GLF_FUZZED(subgroup_size)))), (false ? _GLF_FUZZED(num_workgroup) : _GLF_IDENTITY(_GLF_struct_replacement_16._f4.workgroup_id, (true ? _GLF_struct_replacement_16._f4.workgroup_id : _GLF_FUZZED(subgroup_size))))))) | 0u));
 uint subgroup_base = _GLF_struct_replacement_22._f1._f1.subgroup_id * subgroup_size;
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
  {
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(_GLF_IDENTITY(bvec3(injectionSwitch.x > injectionSwitch.y, true, false), bvec3(bvec3(bvec3(injectionSwitch.x > injectionSwitch.y, true, false))))))) || false))), true && (_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - sqrt(vec2(0.0, 0.0))), (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - sqrt(vec2(0.0, 0.0)))) / vec2(1.0, 1.0)).x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0), injectionSwitch.x)) > injectionSwitch.y, bool(bvec4(injectionSwitch.x > injectionSwitch.y, true, true, false)))) && true))))))))), (_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(_GLF_IDENTITY(bvec3(injectionSwitch.x > injectionSwitch.y, true, false), bvec3(bvec3(bvec3(injectionSwitch.x > injectionSwitch.y, true, false))))))) || false))), true && (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - sqrt(vec2(0.0, 0.0))), (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - sqrt(vec2(0.0, 0.0)))) / vec2(1.0, 1.0)).x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0), injectionSwitch.x)) > injectionSwitch.y, bool(bvec4(injectionSwitch.x > injectionSwitch.y, true, true, false)))) && true)))))), false || (_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), (injectionSwitch) - sqrt(vec2(_GLF_IDENTITY(0.0, (0.0) + 0.0), _GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(-312.147)))))), (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0))) - sqrt(vec2(0.0, 0.0)))) / vec2(1.0, 1.0)).x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat3(_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))), 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0), mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0) + (_GLF_IDENTITY(mat3(_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))), 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0), transpose(transpose(mat3(_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))), 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0)))))))).y, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0), injectionSwitch.x)) > injectionSwitch.y, bool(bvec4(injectionSwitch.x > injectionSwitch.y, true, true, false)))) && true)))))))))))) && true))
    {
     if(_GLF_DEAD(false))
      barrier();
     do
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))
        {
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             barrier();
            }
          }
         barrier();
        }
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
        {
         for(int _injected_loop_counter = _GLF_IDENTITY(0, clamp(_GLF_IDENTITY(0, (0) | 0), 0, 0)); _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(1, min(1, _GLF_IDENTITY(1, max(1, 1))))); _injected_loop_counter ++)
          {
           if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0), injectionSwitch.x, injectionSwitch.x)))) > injectionSwitch.y), bool(_GLF_IDENTITY(bvec2((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0), injectionSwitch.x, injectionSwitch.x)))), 1.0 * (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0), injectionSwitch.x, injectionSwitch.x)))))) > injectionSwitch.y), false), bvec2(bvec4(bvec2((_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0), injectionSwitch.x, injectionSwitch.x)))) > injectionSwitch.y), false), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), ! (! (_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).x), clamp(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).x), clamp(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).x), min((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).x), (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).x))), _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).x), float(vec3((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).x), 0.0, 1.0))), (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).x))), (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).x), _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).x), ((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).x)) + 0.0))) - 0.0) > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, cos(0.0) * (injectionSwitch.x)) > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / abs(vec2(1.0, 1.0))))).y))))))))))
            {
            }
           else
            {
             barrier();
             if(_GLF_DEAD(false))
              barrier();
            }
           if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false))
            {
            }
           else
            {
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
              {
               if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y))))), bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-7982.1189) : injectionSwitch.y)))))))), true))), true && (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(false || ((injectionSwitch.x > injectionSwitch.y)), false || (false || ((injectionSwitch.x > injectionSwitch.y))))))), bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, false || (false))))))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-7982.1189) : injectionSwitch.y)))))))), true))))))
                {
                 do
                  {
                   barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
              }
            }
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), (_GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), ~ (~ (int(_GLF_ONE(1.0, injectionSwitch.y)))))) - 0)); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
          }
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         do
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(injectionSwitch.x > injectionSwitch.y))))))) && true)), (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(true, (true) || false) ? injectionSwitch.y : _GLF_FUZZED(-2486.7370))), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(-9.8), _GLF_FUZZED(-6.9)), bvec2(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), max(injectionSwitch, injectionSwitch)).x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(true, (true) || false) ? injectionSwitch.y : _GLF_FUZZED(-2486.7370)))) || false), false || (injectionSwitch.x > injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(float(20087u)), _GLF_IDENTITY(_GLF_FUZZED(2.7), float(_GLF_IDENTITY(mat4x3(_GLF_FUZZED(2.7), 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, exp(0.0)), (mat4x3(_GLF_FUZZED(2.7), 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, exp(0.0))) - mat4x3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))))), bvec2(false, false))).x, (_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(float(20087u)), _GLF_IDENTITY(_GLF_FUZZED(2.7), float(_GLF_IDENTITY(mat4x3(_GLF_FUZZED(2.7), 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, exp(0.0)), (mat4x3(_GLF_FUZZED(2.7), 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, exp(0.0))) - mat4x3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))))), bvec2(false, false))).x) * 1.0) > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y), bool(bvec3((_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(float(20087u)), _GLF_FUZZED(_GLF_IDENTITY(2.7, float(mat4x3(_GLF_IDENTITY(2.7, 0.0 + (2.7)), 0.0, 1.0, 0.0, 1.0, length(log(vec2(1.0, 1.0))), abs(1.0), 1.0, 1.0, 0.0, 0.0, length(0.0)))))), _GLF_IDENTITY(bvec2(false, false), bvec2(bvec3(bvec2(false, false), false))))).x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y, clamp(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y, min(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y))))), true, false))) && true)), bool(bvec4((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)), bool(bvec3(! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)), true, true)))))), true, false, false)))) || false))));
    }
  }
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x)) > injectionSwitch.y))))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))))) && true))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), (! (true)) || false)))))
        {
         barrier();
        }
       else
        {
        }
      }
     barrier();
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 uint virtual_gid = workgroup_base + _GLF_IDENTITY(subgroup_base, 0u + (subgroup_base)) + _GLF_struct_replacement_3.subgroup_local_id;
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
  {
   do
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, true && (true)), _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), false || ((injectionSwitch.x < injectionSwitch.y))))))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             barrier();
            }
           else
            {
             if(_GLF_DEAD(false))
              barrier();
            }
          }
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       else
        {
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 uint next_virtual_gid = _GLF_IDENTITY(workgroup_base + subgroup_base + (_GLF_IDENTITY((_GLF_struct_replacement_3.subgroup_local_id + _GLF_IDENTITY(1, min(_GLF_IDENTITY(1, (1) >> (0 >> _GLF_IDENTITY(int(4), int(_GLF_IDENTITY(4, min(_GLF_IDENTITY(4, int(ivec4(4, 1, 1, 1))), _GLF_IDENTITY(4, int(ivec3(4, 0, 0))))))))), 1))), clamp(_GLF_IDENTITY((_GLF_struct_replacement_3.subgroup_local_id + 1), ((_GLF_struct_replacement_3.subgroup_local_id + 1)) - 0u), (_GLF_struct_replacement_3.subgroup_local_id + 1), (_GLF_struct_replacement_3.subgroup_local_id + 1))) % subgroup_size), _GLF_IDENTITY((_GLF_IDENTITY(workgroup_base + subgroup_base, ~ (_GLF_IDENTITY(~ _GLF_IDENTITY((workgroup_base + subgroup_base), min((workgroup_base + subgroup_base), (workgroup_base + subgroup_base))), _GLF_IDENTITY((_GLF_IDENTITY(~ (workgroup_base + subgroup_base), min(~ (workgroup_base + subgroup_base), _GLF_IDENTITY(~ (workgroup_base + subgroup_base), clamp(~ (workgroup_base + subgroup_base), ~ (workgroup_base + subgroup_base), ~ (workgroup_base + subgroup_base)))))) / 1u, clamp((_GLF_IDENTITY(~ (workgroup_base + subgroup_base), min(~ (workgroup_base + subgroup_base), _GLF_IDENTITY(~ (workgroup_base + subgroup_base), clamp(~ (workgroup_base + subgroup_base), ~ (workgroup_base + subgroup_base), ~ (workgroup_base + subgroup_base)))))) / 1u, (_GLF_IDENTITY(~ (workgroup_base + subgroup_base), min(~ (workgroup_base + subgroup_base), _GLF_IDENTITY(~ (workgroup_base + subgroup_base), clamp(~ (workgroup_base + subgroup_base), ~ (workgroup_base + subgroup_base), ~ (workgroup_base + subgroup_base)))))) / 1u, (_GLF_IDENTITY(~ (workgroup_base + subgroup_base), min(~ (workgroup_base + subgroup_base), _GLF_IDENTITY(~ (workgroup_base + subgroup_base), clamp(~ (workgroup_base + subgroup_base), ~ (workgroup_base + subgroup_base), ~ (workgroup_base + subgroup_base)))))) / 1u))))) + _GLF_IDENTITY((_GLF_IDENTITY((_GLF_struct_replacement_3.subgroup_local_id + 1), ~ (~ (_GLF_IDENTITY((_GLF_struct_replacement_3.subgroup_local_id + 1), max((_GLF_struct_replacement_3.subgroup_local_id + 1), (_GLF_struct_replacement_3.subgroup_local_id + 1)))))) % subgroup_size), uint(uint((_GLF_IDENTITY((_GLF_struct_replacement_3.subgroup_local_id + 1), ~ (~ (_GLF_IDENTITY((_GLF_struct_replacement_3.subgroup_local_id + 1), max((_GLF_struct_replacement_3.subgroup_local_id + 1), (_GLF_struct_replacement_3.subgroup_local_id + 1)))))) % subgroup_size))))), min((workgroup_base + subgroup_base + ((_GLF_struct_replacement_3.subgroup_local_id + 1) % subgroup_size)), (workgroup_base + subgroup_base + ((_GLF_struct_replacement_3.subgroup_local_id + 1) % subgroup_size)))) >> _GLF_IDENTITY(_GLF_IDENTITY(0u, (0u) ^ 0u), (_GLF_IDENTITY(0u, (0u) ^ 0u)) | (_GLF_IDENTITY(0u, (0u) ^ 0u))));
 for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5))); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
  {
   for(int _injected_loop_counter = _GLF_IDENTITY((0 << _GLF_IDENTITY(int(4), int(4))), ~ (~ ((0 << _GLF_IDENTITY(int(4), int(4)))))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != 1, _GLF_IDENTITY(bool(bvec4(_injected_loop_counter != 1, false, _GLF_IDENTITY(false, (false) || false), false)), (_GLF_IDENTITY(bool(bvec4(_injected_loop_counter != 1, false, _GLF_IDENTITY(false, (false) || false), false)), bool(bvec2(bool(bvec4(_injected_loop_counter != 1, false, _GLF_IDENTITY(false, (false) || false), false)), true)))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))); _injected_loop_counter ++)
    {
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)))).y))), bool(bvec2(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) || false), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0), (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0)) - 0.0) > injectionSwitch.y))), true))))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, (true) || false)))))
            {
             barrier();
            }
           else
            {
            }
          }
        }
       else
        {
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), ! (! (bool(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false) || (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0))) - log(vec2(1.0, 1.0))).x > injectionSwitch.y)))), (_GLF_IDENTITY(false, (false) || false) || (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0))) - log(vec2(1.0, 1.0))).x > injectionSwitch.y))))) || false)))))))))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, bool(bvec3(false, false, false))), false, true, false)))))
              {
              }
             else
              {
               barrier();
              }
            }
           for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(5, (false ? _GLF_FUZZED(_injected_loop_counter) : 5))), int(5))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
            {
             barrier();
            }
          }
        }
       if(_GLF_DEAD(false))
        barrier();
       do
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec3(false, true, false))), bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec3(false, true, false))), bool(bvec2(_GLF_IDENTITY(false, bool(bvec3(false, true, false))), true))))))));
       barrier();
       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false), false, true), bvec3(bvec3(bvec3(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false), false, true))))))))))), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false))), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! ((_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, float(mat2x4(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), 1.0, 0.0, 0.0, 0.0, round(length(normalize(1.0))), 1.0, 1.0))) > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false))), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)), injectionSwitch, injectionSwitch)).y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > ((_GLF_IDENTITY(0, (_GLF_IDENTITY(0, 0 ^ (0))) | (0)) & -3900) & -26574)); _injected_loop_counter --)
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               barrier();
              }
             else
              {
              }
            }
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))
        barrier();
      }
     do
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 atomicStore(buf[virtual_gid], uint(1), 4, 64, 4);
 if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) || false))))) || false)))
  barrier();
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    barrier();
   do
    {
     for(int _injected_loop_counter = 0; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), false || (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1))))) || false))); _injected_loop_counter ++)
      {
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))), ! (! (_GLF_DEAD(false)))))
        barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).y))), ! (_GLF_IDENTITY(! ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y)))), (! ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y))))) || false))), false || ((injectionSwitch.x > injectionSwitch.y))))))
        {
        }
       else
        {
         barrier();
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           barrier();
          }
         else
          {
          }
        }
      }
     if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_DEAD(false)))), false || (! (_GLF_IDENTITY(_GLF_DEAD(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_DEAD(false)))))))))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         barrier();
        }
       else
        {
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), vec2(_GLF_IDENTITY(mat3(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), 1.0, 1.0, _GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(0.0, 0.0)), dot(vec2(1.0, 1.0), vec2(0.0, 0.0))), length(_GLF_IDENTITY(sin(0.0), clamp(_GLF_IDENTITY(sin(0.0), min(sin(0.0), _GLF_IDENTITY(sin(0.0), (true ? sin(0.0) : _GLF_FUZZED(-1.0))))), sin(0.0), sin(0.0)))), exp(0.0), log(1.0), 0.0), mat3(mat4(mat3(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), 1.0, 1.0, _GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(0.0, 0.0)), dot(vec2(1.0, 1.0), vec2(0.0, 0.0))), length(_GLF_IDENTITY(sin(0.0), _GLF_IDENTITY(float(mat3x2(sin(0.0), 1.0, _GLF_IDENTITY(1.0, min(1.0, 1.0)), 1.0, sqrt(0.0), 0.0)), (true ? _GLF_IDENTITY(_GLF_IDENTITY(float(mat3x2(sin(0.0), 1.0, _GLF_IDENTITY(1.0, min(1.0, 1.0)), 1.0, sqrt(0.0), 0.0)), (float(mat3x2(sin(0.0), 1.0, _GLF_IDENTITY(1.0, min(1.0, 1.0)), 1.0, sqrt(0.0), 0.0))) + 0.0), clamp(_GLF_IDENTITY(_GLF_IDENTITY(float(mat3x2(sin(0.0), 1.0, _GLF_IDENTITY(1.0, min(1.0, 1.0)), 1.0, sqrt(0.0), 0.0)), (float(mat3x2(sin(0.0), 1.0, _GLF_IDENTITY(1.0, min(1.0, 1.0)), 1.0, sqrt(0.0), 0.0))) + 0.0), clamp(_GLF_IDENTITY(_GLF_IDENTITY(float(mat3x2(sin(0.0), 1.0, _GLF_IDENTITY(1.0, min(1.0, 1.0)), 1.0, sqrt(0.0), 0.0)), (float(mat3x2(sin(0.0), 1.0, _GLF_IDENTITY(1.0, min(1.0, 1.0)), 1.0, sqrt(0.0), 0.0))) + 0.0), clamp(_GLF_IDENTITY(float(mat3x2(sin(0.0), 1.0, _GLF_IDENTITY(1.0, min(1.0, 1.0)), 1.0, sqrt(0.0), 0.0)), (float(mat3x2(sin(0.0), 1.0, _GLF_IDENTITY(1.0, min(1.0, 1.0)), 1.0, sqrt(0.0), 0.0))) + 0.0), _GLF_IDENTITY(float(mat3x2(sin(0.0), 1.0, _GLF_IDENTITY(1.0, min(1.0, 1.0)), 1.0, sqrt(0.0), 0.0)), (float(mat3x2(sin(0.0), 1.0, _GLF_IDENTITY(1.0, min(1.0, 1.0)), 1.0, sqrt(0.0), 0.0))) + 0.0), _GLF_IDENTITY(float(mat3x2(sin(0.0), 1.0, _GLF_IDENTITY(1.0, min(1.0, 1.0)), 1.0, sqrt(0.0), 0.0)), (float(mat3x2(sin(0.0), 1.0, _GLF_IDENTITY(1.0, min(1.0, 1.0)), 1.0, sqrt(0.0), 0.0))) + 0.0))), _GLF_IDENTITY(float(mat3x2(sin(0.0), 1.0, _GLF_IDENTITY(1.0, min(1.0, 1.0)), 1.0, sqrt(0.0), 0.0)), (float(mat3x2(sin(0.0), 1.0, _GLF_IDENTITY(1.0, min(1.0, 1.0)), 1.0, sqrt(0.0), 0.0))) + 0.0), _GLF_IDENTITY(float(mat3x2(sin(0.0), 1.0, _GLF_IDENTITY(1.0, min(1.0, 1.0)), 1.0, sqrt(0.0), 0.0)), (float(mat3x2(sin(0.0), 1.0, _GLF_IDENTITY(1.0, min(1.0, 1.0)), 1.0, sqrt(0.0), 0.0))) + 0.0))), _GLF_IDENTITY(float(mat3x2(sin(0.0), 1.0, _GLF_IDENTITY(1.0, min(1.0, 1.0)), 1.0, sqrt(0.0), 0.0)), (float(mat3x2(sin(0.0), 1.0, _GLF_IDENTITY(1.0, min(1.0, 1.0)), 1.0, sqrt(0.0), 0.0))) + 0.0), _GLF_IDENTITY(float(mat3x2(sin(0.0), 1.0, _GLF_IDENTITY(1.0, min(1.0, 1.0)), 1.0, sqrt(0.0), 0.0)), (float(mat3x2(sin(0.0), 1.0, _GLF_IDENTITY(1.0, min(1.0, 1.0)), 1.0, sqrt(0.0), 0.0))) + 0.0))) : _GLF_FUZZED(-8.5))))), exp(0.0), _GLF_IDENTITY(log(1.0), min(log(1.0), _GLF_IDENTITY(log(1.0), (false ? _GLF_FUZZED(25.69) : log(1.0))))), 0.0)))))).x > injectionSwitch.y))));
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec3(false, true, true))), (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(-70.55), _GLF_FUZZED(5.9)), bvec2(false, false))).x > injectionSwitch.y))))
      {
      }
     else
      {
       do
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             barrier();
            }
           else
            {
            }
          }
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) < _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))))))
          {
           do
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_DEAD(false))
                barrier();
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         else
          {
          }
         for(int _injected_loop_counter = (0 | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 & (1 & 1))); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         for(int _injected_loop_counter = (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(2), int(2))), (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(2), int(2))), min((1 << _GLF_IDENTITY(int(2), int(2))), (1 << _GLF_IDENTITY(int(2), int(2)))))) | 0) >> _GLF_IDENTITY(int(2), int(2))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           do
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 barrier();
                }
               barrier();
              }
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (injectionSwitch.x > injectionSwitch.y))));
          }
         if((_GLF_IDENTITY(_GLF_struct_replacement_3.subgroup_local_id, (false ? _GLF_IDENTITY(_GLF_FUZZED(virtual_gid), clamp(_GLF_FUZZED(virtual_gid), _GLF_IDENTITY(_GLF_FUZZED(virtual_gid), uint(uvec3(_GLF_FUZZED(virtual_gid), 1u, 1u))), _GLF_IDENTITY(_GLF_FUZZED(virtual_gid), ~ (~ (_GLF_FUZZED(virtual_gid)))))) : _GLF_IDENTITY(_GLF_struct_replacement_3.subgroup_local_id, (_GLF_IDENTITY(_GLF_struct_replacement_3.subgroup_local_id, (_GLF_struct_replacement_3.subgroup_local_id) ^ 0u)) + 0u))) % 2) == 0)
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y))))))
            {
            }
           else
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
              {
               for(int _injected_loop_counter = _GLF_IDENTITY(1, min(1, _GLF_IDENTITY(1, (1) << _GLF_IDENTITY(0, (0) - 0)))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                {
                 subgroupAll(true);
                }
              }
            }
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y))))
              {
              }
             else
              {
               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                {
                 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED((3.2 / -7562.5170))), bool(false))) > injectionSwitch.y)))))))
                    {
                     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED((vec3(-4208.4080, 9.5, -99.55) * mat2x3(-75.99, -7.4, -0.8, 0.4, 7056.9693, 603.778))) : injectionSwitch)).x > injectionSwitch.y))), ! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bool((injectionSwitch.x > injectionSwitch.y)))))), bool(bvec4(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bool((injectionSwitch.x > injectionSwitch.y)))))), true, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) && true))))) || false))
                      {
                       if(_GLF_WRAPPED_IF_TRUE(true))
                        {
                         barrier();
                        }
                       else
                        {
                        }
                      }
                     barrier();
                    }
                  }
                }
               else
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   barrier();
                  }
                }
              }
            }
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             do
              {
               if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), ! (! (_GLF_WRAPPED_IF_FALSE(false)))))
                {
                 for(int _injected_loop_counter = _GLF_IDENTITY(1, (1) << 0); _GLF_WRAPPED_LOOP(_injected_loop_counter > (int(float(-54635)) & 0)); _GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) + 0))
                  {
                   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
                    {
                     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                      {
                       if(_GLF_WRAPPED_IF_FALSE(false))
                        {
                        }
                       else
                        {
                         barrier();
                        }
                      }
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_WRAPPED_IF_FALSE(false))
                        {
                        }
                       else
                        {
                         barrier();
                        }
                      }
                    }
                  }
                }
               else
                {
                 for(int _injected_loop_counter = (_GLF_IDENTITY(1 | 1, (_GLF_IDENTITY(1 | 1, min(_GLF_IDENTITY(1 | 1, (1 | 1) | 0), _GLF_IDENTITY(1 | 1, max(1 | 1, 1 | 1))))) | 0)); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(0), int(0)), (0 ^ 1) * (_GLF_IDENTITY(int(0), int(0)))))); _injected_loop_counter --)
                  {
                   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                    {
                     if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))), ! (! (_GLF_DEAD(false)))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(bool(bvec3(_GLF_DEAD(false), true, true)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(bool(bvec3(_GLF_DEAD(false), true, true)), (_GLF_IDENTITY(bool(bvec3(_GLF_DEAD(false), true, true)), false || (bool(bvec3(_GLF_DEAD(false), true, _GLF_IDENTITY(true, (true) && true)))))) && true)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || _GLF_IDENTITY((! (_GLF_IDENTITY(bool(bvec3(_GLF_DEAD(false), true, true)), (_GLF_IDENTITY(bool(bvec3(_GLF_DEAD(false), true, true)), false || (bool(bvec3(_GLF_DEAD(false), _GLF_IDENTITY(true, true && (true)), true))))) && true))), false || ((! (_GLF_IDENTITY(bool(bvec3(_GLF_DEAD(false), true, true)), (_GLF_IDENTITY(bool(bvec3(_GLF_DEAD(false), true, true)), false || (bool(bvec3(_GLF_DEAD(false), _GLF_IDENTITY(true, true && (true)), true))))) && true)))))))), ! (! (bool(bvec3(_GLF_DEAD(false), _GLF_IDENTITY(true, true && (true)), true))))), (bool(bvec3(_GLF_DEAD(false), true, true))) || false)), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(_GLF_IDENTITY(false, (false) && true))))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(bool(bvec3(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))), true, true)), ! (! (bool(bvec3(_GLF_DEAD(false), true, true))))), (bool(bvec3(_GLF_DEAD(false), true, true))) || false), false || (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(bool(bvec3(_GLF_DEAD(false), true, true)), ! (! (bool(bvec3(_GLF_DEAD(false), true, true))))), (_GLF_IDENTITY(bool(bvec3(_GLF_DEAD(false), true, true)), true && (bool(bvec3(_GLF_DEAD(false), true, true))))) || false), true && (_GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_GLF_DEAD(false), true, true), _GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(_GLF_DEAD(false), true, true), _GLF_IDENTITY(bvec3(bvec4(bvec3(_GLF_DEAD(false), true, true), false)), bvec3(bvec3(bvec3(bvec4(bvec3(_GLF_DEAD(false), true, true), false))))))), bvec3(bvec4(bvec3(_GLF_IDENTITY(bvec3(_GLF_DEAD(false), true, true), _GLF_IDENTITY(bvec3(bvec4(bvec3(_GLF_DEAD(false), true, true), false)), bvec3(bvec3(bvec3(bvec4(bvec3(_GLF_DEAD(false), true, true), false))))))), true)))), bvec3(bvec4(bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(_GLF_DEAD(false), true, true), _GLF_IDENTITY(bvec3(bvec4(bvec3(_GLF_DEAD(false), true, true), false)), bvec3(bvec3(bvec3(bvec4(bvec3(_GLF_DEAD(false), true, true), false))))))), bvec3(bvec4(bvec3(_GLF_IDENTITY(bvec3(_GLF_DEAD(false), true, true), _GLF_IDENTITY(bvec3(bvec4(bvec3(_GLF_DEAD(false), true, true), false)), bvec3(bvec3(bvec3(bvec4(bvec3(_GLF_DEAD(false), true, true), false))))))), true)))), false))))), ! (! (bool(_GLF_IDENTITY(bvec3(_GLF_DEAD(false), true, true), _GLF_IDENTITY(bvec3(bvec3(bvec3(_GLF_DEAD(false), true, _GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec2(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), bool(bvec4(bool(bvec2(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))))))), bvec3(bvec4(_GLF_IDENTITY(bvec3(bvec3(bvec3(_GLF_DEAD(false), true, true))), bvec3(bvec4(bvec3(bvec3(bvec3(_GLF_DEAD(false), true, true))), true))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))), (bool(bvec3(_GLF_DEAD(false), true, true))) || false))))))) || _GLF_IDENTITY(false, bool(bvec3(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)))))
                      {
                       if(_GLF_DEAD(false))
                        {
                         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                          {
                           barrier();
                          }
                         else
                          {
                          }
                        }
                       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bool(bvec4(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), ! (! (! (true)))))), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), ! (! (bool(bvec4(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec3(true, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec3(bvec3(bvec3(true, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))), ! (! (true))), false, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(vec3(90.61, 14.88, -5.4).b), _GLF_FUZZED(-4636.7331)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))).x < _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(min(injectionSwitch.y, injectionSwitch.y), 1.0 * (min(injectionSwitch.y, injectionSwitch.y)))))))))))))
                        {
                        }
                       else
                        {
                         for(int _injected_loop_counter = _GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), _GLF_IDENTITY((_GLF_ONE(1.0, injectionSwitch.y)) / 1.0, max((_GLF_ONE(1.0, injectionSwitch.y)) / 1.0, (_GLF_ONE(1.0, injectionSwitch.y)) / 1.0)))), (int(_GLF_IDENTITY(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(vec4(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), 0.0, 0.0), max(vec4(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), 0.0, 0.0), vec4(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), 0.0, 0.0))))).y), _GLF_IDENTITY((_GLF_ONE(1.0, injectionSwitch.y)) / 1.0, max((_GLF_ONE(1.0, injectionSwitch.y)) / 1.0, (_GLF_ONE(1.0, injectionSwitch.y)) / 1.0))))) / (1 & 1)); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > (-74845 & 0)), _GLF_IDENTITY(! (! _GLF_IDENTITY((_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > (-74845 & 0)), (_GLF_WRAPPED_LOOP(_injected_loop_counter > (-74845 & _GLF_IDENTITY(0, (0) - 0)))) || false)), _GLF_IDENTITY(! (_GLF_IDENTITY(! ((_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > (-74845 & 0)), _GLF_IDENTITY((_GLF_WRAPPED_LOOP(_injected_loop_counter > (-74845 & _GLF_IDENTITY(_GLF_IDENTITY(0, (0) - 0), (_GLF_IDENTITY(0, (0) - 0)) | 0)))), (_GLF_IDENTITY((_GLF_WRAPPED_LOOP(_injected_loop_counter > (-74845 & _GLF_IDENTITY(_GLF_IDENTITY(0, (0) - 0), (_GLF_IDENTITY(0, (0) - 0)) | 0)))), false || ((_GLF_WRAPPED_LOOP(_injected_loop_counter > (-74845 & _GLF_IDENTITY(_GLF_IDENTITY(0, (0) - 0), (_GLF_IDENTITY(0, (0) - 0)) | 0))))))) && true) || false))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (! ((_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > (-74845 & 0)), (_GLF_WRAPPED_LOOP(_injected_loop_counter > (-74845 & _GLF_IDENTITY(0, (0) - 0)))) || false)))))), _GLF_IDENTITY(bool(bvec4(! (_GLF_IDENTITY(! ((_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > (-74845 & 0)), (_GLF_WRAPPED_LOOP(_injected_loop_counter > (-74845 & _GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) ^ 0)) - 0)))) || false))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (! ((_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > (-74845 & 0)), (_GLF_WRAPPED_LOOP(_injected_loop_counter > (-74845 & _GLF_IDENTITY(0, (0) - 0)))) || false)))))), false, false, false)), ! (! (bool(bvec4(! (_GLF_IDENTITY(! ((_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > (_GLF_IDENTITY(-74845 & 0, 0 | (-74845 & 0)))), (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > (-74845 & _GLF_IDENTITY(0, (0) - 0)), true && (_injected_loop_counter > (-74845 & _GLF_IDENTITY(0, (0) - 0)))))) || false))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (! ((_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > (-74845 & 0)), (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, min(_GLF_IDENTITY(_injected_loop_counter, 0 ^ (_injected_loop_counter)), _injected_loop_counter)) > (-74845 & _GLF_IDENTITY(0, (0) - 0)))) || false)))))), false, false, false)))))))), true && (! (! _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > (-74845 & 0)), (_GLF_WRAPPED_LOOP(_injected_loop_counter > (-74845 & _GLF_IDENTITY(_GLF_IDENTITY(0, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(0, ~ (~ (0)))), 0 ^ (~ (_GLF_IDENTITY(0, ~ (~ (0)))))))), (_GLF_IDENTITY(0, (_GLF_IDENTITY(0, int(ivec4(0, 0, 0, 1)))) | 0)) - 0)))) || false)), _GLF_IDENTITY(bool(bvec4((_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > (-74845 & 0)), (_GLF_WRAPPED_LOOP(_injected_loop_counter > (-74845 & _GLF_IDENTITY(_GLF_IDENTITY(0, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(0, ~ (~ (0)))), 0 ^ (~ (_GLF_IDENTITY(0, ~ (~ (0)))))))), (_GLF_IDENTITY(0, (_GLF_IDENTITY(0, int(ivec4(0, 0, 0, 1)))) | 0)) - 0)))) || false)), true, false, false)), (_GLF_IDENTITY(bool(bvec4((_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > (-74845 & 0)), (_GLF_WRAPPED_LOOP(_injected_loop_counter > (-74845 & _GLF_IDENTITY(_GLF_IDENTITY(0, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(0, ~ (~ (0)))), 0 ^ (~ (_GLF_IDENTITY(0, ~ (~ (0)))))))), (_GLF_IDENTITY(0, (_GLF_IDENTITY(0, int(ivec4(0, 0, 0, 1)))) | 0)) - 0)))) || false)), true, false, false)), bool(bool(bool(bvec4((_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > (-74845 & 0)), (_GLF_WRAPPED_LOOP(_injected_loop_counter > (-74845 & _GLF_IDENTITY(_GLF_IDENTITY(0, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(0, ~ (~ (0)))), 0 ^ (~ (_GLF_IDENTITY(0, ~ (~ (0)))))))), (_GLF_IDENTITY(0, (_GLF_IDENTITY(0, int(ivec4(0, 0, 0, 1)))) | 0)) - 0)))) || false)), true, false, false)))))) || false)), ! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(! ((_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > (-74845 & 0)), (_GLF_WRAPPED_LOOP(_injected_loop_counter > (-74845 & _GLF_IDENTITY(0, (0) - 0)))) || false))), (! ((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > (-74845 & 0)), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > (-74845 & 0)), (_GLF_WRAPPED_LOOP(_injected_loop_counter > (-74845 & 0))) || false)))), (_GLF_WRAPPED_LOOP(_injected_loop_counter > (-74845 & _GLF_IDENTITY(_GLF_IDENTITY(0, (0) - 0), int(int(_GLF_IDENTITY(0, (0) - 0))))))) || false)))) || false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (! ((_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, 0 ^ (_injected_loop_counter)) > (-74845 & 0)), _GLF_IDENTITY((_GLF_WRAPPED_LOOP(_injected_loop_counter > (-74845 & _GLF_IDENTITY(0, (0) - 0)))) || false, ((_GLF_WRAPPED_LOOP(_injected_loop_counter > (-74845 & _GLF_IDENTITY(0, (0) - 0)))) || false) || false)))))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(! ((_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > (_GLF_IDENTITY(-74845 & 0, min(-74845 & 0, _GLF_IDENTITY(-74845 & 0, int(int(-74845 & 0))))))), (_GLF_WRAPPED_LOOP(_injected_loop_counter > (-74845 & _GLF_IDENTITY(0, (0) - 0)))) || false))), (! ((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > (-74845 & 0)), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > (-74845 & 0)), (_GLF_WRAPPED_LOOP(_injected_loop_counter > (-74845 & 0))) || false)))), (_GLF_WRAPPED_LOOP(_injected_loop_counter > (-74845 & _GLF_IDENTITY(_GLF_IDENTITY(0, (0) - 0), int(int(_GLF_IDENTITY(0, _GLF_IDENTITY((0), (1 & 1) * ((0))) - 0))))))) || false)))) || false), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, float(float(injectionSwitch.x))), _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - determinant(mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0))))) < _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))) / 1.0))) && (! ((_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, 0 ^ (_injected_loop_counter)) > (-74845 & 0)), _GLF_IDENTITY((_GLF_WRAPPED_LOOP(_injected_loop_counter > (_GLF_IDENTITY(-74845 & _GLF_IDENTITY(0, (0) - 0), (-74845 & _GLF_IDENTITY(0, (0) - _GLF_IDENTITY(0, ~ (~ (0))))) * 1)))) || _GLF_IDENTITY(false, bool(bvec3(false, false, false))), ((_GLF_WRAPPED_LOOP(_injected_loop_counter > (-74845 & _GLF_IDENTITY(0, (0) - 0)))) || _GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), bool(bvec3(bool(false), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))) || false))))))))))))))); _GLF_IDENTITY(_injected_loop_counter --, _GLF_IDENTITY((_GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) << 0)) * 1, (false ? _GLF_FUZZED((atomicMax(_injected_loop_counter, -48969) / _injected_loop_counter)) : (_GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) << 0)) * 1))))
                          {
                           for(int _injected_loop_counter = (1 ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                            {
                             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, float(float(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat3(_GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)) : _GLF_FUZZED(injectionSwitch))), _GLF_IDENTITY(0.0, min(0.0, 0.0)), cos(0.0), _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(0.0, exp(0.0))), dot(vec2(1.0, 0.0), vec2(0.0, exp(0.0)))), 1.0, 1.0, 1.0, 1.0)), min(vec2(mat3(_GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)) : _GLF_FUZZED(injectionSwitch))), _GLF_IDENTITY(0.0, min(0.0, 0.0)), cos(0.0), _GLF_IDENTITY(_GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(0.0, exp(0.0))), dot(vec2(1.0, 0.0), vec2(0.0, exp(0.0)))), clamp(_GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(0.0, exp(0.0))), dot(vec2(1.0, 0.0), vec2(0.0, exp(0.0)))), _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(0.0, exp(0.0))), dot(vec2(1.0, 0.0), vec2(0.0, exp(0.0)))), _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(0.0, exp(0.0))), dot(vec2(1.0, 0.0), vec2(0.0, exp(0.0)))))), 1.0, 1.0, 1.0, 1.0)), vec2(mat3(_GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)) : _GLF_FUZZED(injectionSwitch))), _GLF_IDENTITY(0.0, min(0.0, 0.0)), cos(0.0), _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(0.0, exp(0.0))), dot(vec2(1.0, _GLF_IDENTITY(0.0, 0.0 + (0.0))), vec2(0.0, exp(0.0)))), 1.0, 1.0, 1.0, 1.0))))).x, (injectionSwitch.x) / 1.0)))), _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(8639.8825), _GLF_FUZZED(-6.4)), bvec2(false, false))).x)) > injectionSwitch.y))))
                              {
                              }
                             else
                              {
                               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                {
                                 if(_GLF_DEAD(false))
                                  barrier();
                                 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) || false)))
                                  barrier();
                                }
                               else
                                {
                                 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! _GLF_IDENTITY(_GLF_IDENTITY((false), false || _GLF_IDENTITY(((false)), false || (((false))))), false || ((false))))), (injectionSwitch.x > injectionSwitch.y))))
                                  {
                                   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x)) > injectionSwitch.y))))
                                    barrier();
                                   barrier();
                                  }
                                }
                               if(_GLF_DEAD(false))
                                {
                                 if(_GLF_DEAD(false))
                                  {
                                   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), (int(3)) >> 0)))); _injected_loop_counter ++)
                                    {
                                     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                      {
                                      }
                                     else
                                      {
                                       barrier();
                                      }
                                    }
                                  }
                                 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), true && (! (false)))))))
                                  {
                                  }
                                 else
                                  {
                                   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
                                    barrier();
                                   barrier();
                                  }
                                 if(_GLF_DEAD(false))
                                  barrier();
                                }
                               if(_GLF_DEAD(false))
                                {
                                 if(_GLF_WRAPPED_IF_FALSE(false))
                                  {
                                  }
                                 else
                                  {
                                   barrier();
                                  }
                                }
                               if(_GLF_DEAD(false))
                                barrier();
                              }
                             if(_GLF_DEAD(false))
                              barrier();
                             if(_GLF_DEAD(false))
                              barrier();
                            }
                          }
                        }
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        {
                         if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) && true)), bool(bvec2(! (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) && true)), false))))))
                          {
                          }
                         else
                          {
                           if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec4(bvec2(false, true), true, true)))))))
                            {
                            }
                           else
                            {
                             barrier();
                            }
                          }
                        }
                       barrier();
                       if(_GLF_DEAD(false))
                        barrier();
                      }
                    }
                   else
                    {
                    }
                  }
                }
              }
             while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), _GLF_IDENTITY(bool(bvec4(_GLF_WRAPPED_LOOP(false), false, false, false)), _GLF_IDENTITY(false, (false) || false) || (bool(bvec4(_GLF_WRAPPED_LOOP(false), _GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), true && (! (false))))), false, false))))));
            }
           do
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                {
                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (((0 | 1) << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7)))); _injected_loop_counter ++)
                  {
                   barrier();
                  }
                }
               barrier();
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
           atomicStore(buf[next_virtual_gid], uint(2), 4, 64, 4);
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 barrier();
                }
               else
                {
                }
              }
            }
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
           do
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 do
                  {
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || _GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(false, (false) || false), true, true, true)), ! (! (_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(false, (false) || false), true, true, true)), bool(bvec3(bool(bvec4(_GLF_IDENTITY(false, (false) || false), true, true, true)), false, true))))))), (false) || false))))
                      {
                       if(_GLF_WRAPPED_IF_FALSE(false))
                        {
                        }
                       else
                        {
                         barrier();
                        }
                      }
                     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec3(false, false, true))), (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
                      {
                       do
                        {
                         barrier();
                        }
                       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                      }
                     if(_GLF_DEAD(false))
                      barrier();
                     subgroupAll(false);
                    }
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                }
               else
                {
                }
              }
             else
              {
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), _GLF_IDENTITY((_GLF_WRAPPED_LOOP(false)) && true, true && ((_GLF_WRAPPED_LOOP(false)) && true))));
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
            {
             do
              {
               do
                {
                 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2))) ^ 1)); _GLF_IDENTITY(_injected_loop_counter --, (_GLF_IDENTITY(_injected_loop_counter --, ~ (~ (_injected_loop_counter --)))) * 1))
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                }
               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
               atomicStore(buf[next_virtual_gid], _GLF_IDENTITY(uint(_GLF_IDENTITY(2, _GLF_IDENTITY(max(2, _GLF_IDENTITY(2, (2) >> 0)), int(_GLF_IDENTITY(int(max(2, _GLF_IDENTITY(2, (_GLF_IDENTITY(2, (_GLF_IDENTITY(2, ~ (~ (2)))) | 0)) >> 0))), (int(max(2, _GLF_IDENTITY(2, _GLF_IDENTITY((2), 0 | (_GLF_IDENTITY((2), ((2)) >> 0))) >> 0)))) << 0))))), max(_GLF_IDENTITY(uint(_GLF_IDENTITY(2, _GLF_IDENTITY(max(2, _GLF_IDENTITY(2, (2) >> 0)), int(_GLF_IDENTITY(int(max(2, _GLF_IDENTITY(2, (_GLF_IDENTITY(2, (_GLF_IDENTITY(2, ~ (~ (2)))) | 0)) >> 0))), (int(max(2, _GLF_IDENTITY(2, _GLF_IDENTITY((2), 0 | (_GLF_IDENTITY((2), ((2)) >> 0))) >> 0)))) << 0))))), (uint(_GLF_IDENTITY(2, _GLF_IDENTITY(max(2, _GLF_IDENTITY(2, (2) >> 0)), int(_GLF_IDENTITY(int(max(2, _GLF_IDENTITY(2, (_GLF_IDENTITY(2, (_GLF_IDENTITY(2, ~ (~ (2)))) | 0)) >> 0))), (int(max(2, _GLF_IDENTITY(2, _GLF_IDENTITY((2), 0 | (_GLF_IDENTITY((2), ((2)) >> 0))) >> 0)))) << 0)))))) - 0u), _GLF_IDENTITY(uint(_GLF_IDENTITY(2, _GLF_IDENTITY(max(2, _GLF_IDENTITY(2, (2) >> 0)), int(_GLF_IDENTITY(int(max(2, _GLF_IDENTITY(2, (_GLF_IDENTITY(2, (_GLF_IDENTITY(2, ~ (~ (2)))) | 0)) >> 0))), (int(max(2, _GLF_IDENTITY(2, _GLF_IDENTITY((2), 0 | (_GLF_IDENTITY((2), ((2)) >> 0))) >> 0)))) << 0))))), (false ? _GLF_FUZZED(subgroup_base) : uint(_GLF_IDENTITY(2, _GLF_IDENTITY(max(2, _GLF_IDENTITY(2, (2) >> 0)), int(_GLF_IDENTITY(int(max(2, _GLF_IDENTITY(2, (_GLF_IDENTITY(2, (_GLF_IDENTITY(2, ~ (~ (2)))) | 0)) >> 0))), (int(max(2, _GLF_IDENTITY(2, _GLF_IDENTITY((2), 0 | (_GLF_IDENTITY((2), ((2)) >> 0))) >> 0)))) << 0))))))))), 4, 64, 4);
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), false || (_GLF_IDENTITY(false, (false) && true)))));
      }
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = (_GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(-28066))) >> _GLF_IDENTITY(int(3), int(3))); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(_GLF_IDENTITY(int(6), max(_GLF_IDENTITY(int(6), ~ (~ (int(6)))), int(_GLF_IDENTITY(6, _GLF_IDENTITY(int(ivec4(6, 1, 1, 1)), ~ (~ (int(ivec4(6, 1, 1, 1))))))))), 1 * (int(6))))) >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (true ? _GLF_IDENTITY(_GLF_IDENTITY(int(6), (false ? _GLF_FUZZED(-11285) : int(6))), (int(6)) * 1) : _GLF_FUZZED(-2599)))))); _injected_loop_counter ++)
        {
         barrier();
        }
      }
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       barrier();
      }
    }
   else
    {
    }
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
