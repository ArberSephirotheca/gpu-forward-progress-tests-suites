#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_23 {
 mat2x4 _f0;
 float _f1;
} ;

struct _GLF_struct_24 {
 uvec4 _f0;
 _GLF_struct_23 _f1;
 vec4 _f2;
 uint read;
} ;

struct _GLF_struct_21 {
 mat2 _f0;
} ;

struct _GLF_struct_20 {
 uvec4 _f0;
 ivec3 _f1;
 mat2x3 _f2;
} ;

struct _GLF_struct_22 {
 uvec3 _f0;
 _GLF_struct_20 _f1;
 _GLF_struct_21 _f2;
 ivec2 _f3;
} ;

struct _GLF_struct_25 {
 _GLF_struct_22 _f0;
 mat2x3 _f1;
 _GLF_struct_24 _f2;
 vec3 _f3;
} ;

struct _GLF_struct_18 {
 mat4x3 _f0;
} ;

struct _GLF_struct_17 {
 mat2x4 _f0;
} ;

struct _GLF_struct_15 {
 uvec3 _f0;
 ivec4 _f1;
 uvec3 _f2;
 mat3 _f3;
 mat3 _f4;
 vec2 _f5;
} ;

struct _GLF_struct_16 {
 _GLF_struct_15 _f0;
 uvec2 _f1;
} ;

struct _GLF_struct_19 {
 _GLF_struct_16 _f0;
 float _f1;
 _GLF_struct_17 _f2;
 uint subgroup_local_id;
 float _f3;
 _GLF_struct_18 _f4;
 bvec4 _f5;
 uvec3 _f6;
} ;

struct _GLF_struct_13 {
 vec2 _f0;
} ;

struct _GLF_struct_11 {
 bvec2 _f0;
 float _f1;
 uvec2 _f2;
 uvec2 _f3;
 bvec3 _f4;
 bool _f5;
} ;

struct _GLF_struct_10 {
 mat4x3 _f0;
 vec2 _f1;
 mat3x4 _f2;
} ;

struct _GLF_struct_9 {
 mat3 _f0;
 ivec3 _f1;
} ;

struct _GLF_struct_8 {
 uvec2 _f0;
 mat4x2 _f1;
 uint _f2;
 ivec2 _f3;
 mat3x4 _f4;
} ;

struct _GLF_struct_12 {
 _GLF_struct_8 _f0;
 _GLF_struct_9 _f1;
 vec3 _f2;
 vec2 _f3;
 _GLF_struct_10 _f4;
 _GLF_struct_11 _f5;
} ;

struct _GLF_struct_14 {
 _GLF_struct_12 _f0;
 uint workgroup_size;
 _GLF_struct_13 _f1;
} ;

struct _GLF_struct_5 {
 vec3 _f0;
 ivec3 _f1;
 mat2x3 _f2;
 uint subgroup_id;
 bvec3 _f3;
 mat4x3 _f4;
 vec4 _f5;
} ;

struct _GLF_struct_4 {
 mat3 _f0;
} ;

struct _GLF_struct_3 {
 mat4 _f0;
 mat3 _f1;
 int _f2;
} ;

struct _GLF_struct_6 {
 _GLF_struct_3 _f0;
 vec3 _f1;
 _GLF_struct_4 _f2;
 _GLF_struct_5 _f3;
} ;

struct _GLF_struct_7 {
 ivec2 _f0;
 bool _f1;
 uvec3 _f2;
 _GLF_struct_6 _f3;
} ;

struct _GLF_struct_0 {
 mat3 _f0;
 bool _f1;
 uvec4 _f2;
 mat2x4 _f3;
 mat4 _f4;
 bool _f5;
} ;

struct _GLF_struct_1 {
 mat4 _f0;
 ivec4 _f1;
 ivec4 _f2;
 int _f3;
 _GLF_struct_0 _f4;
 mat2x4 _f5;
} ;

struct _GLF_struct_2 {
 uvec4 _f0;
 uint workgroup_base;
 _GLF_struct_1 _f1;
 mat4x2 _f2;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uvec4 GLF_merged4_0_1_13_1_1_11_2_1_12_3_1_14num_workgroupvirtual_gidworkgroup_idworkgroup_size;
 uvec4 GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_13next_virtual_gidsubgroup_basesubgroup_idsubgroup_size;
 _GLF_struct_7 _GLF_struct_replacement_7 = _GLF_struct_7(ivec2(1), true, uvec3(1u), _GLF_struct_6(_GLF_struct_3(mat4(1.0), mat3(1.0), 1), vec3(1.0), _GLF_struct_4(mat3(1.0)), _GLF_struct_5(vec3(1.0), ivec3(1), mat2x3(1.0), gl_SubgroupID, bvec3(true), mat4x3(1.0), vec4(1.0))));
 GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_13next_virtual_gidsubgroup_basesubgroup_idsubgroup_size.z = _GLF_struct_replacement_7._f3._f3.subgroup_id;
 uint subgroup_size = gl_SubgroupSize;
 GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_13next_virtual_gidsubgroup_basesubgroup_idsubgroup_size.w = subgroup_size;
 _GLF_struct_19 _GLF_struct_replacement_19 = _GLF_struct_19(_GLF_struct_16(_GLF_struct_15(uvec3(1u), ivec4(1), uvec3(1u), mat3(1.0), mat3(1.0), vec2(1.0)), uvec2(1u)), 1.0, _GLF_struct_17(mat2x4(1.0)), gl_SubgroupInvocationID, 1.0, _GLF_struct_18(mat4x3(1.0)), bvec4(true), uvec3(1u));
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   GLF_merged4_0_1_13_1_1_11_2_1_12_3_1_14num_workgroupvirtual_gidworkgroup_idworkgroup_size.x = num_workgroup;
  }
 _GLF_struct_14 _GLF_struct_replacement_14 = _GLF_struct_14(_GLF_struct_12(_GLF_struct_8(uvec2(1u), mat4x2(1.0), 1u, ivec2(1), mat3x4(1.0)), _GLF_struct_9(mat3(1.0), ivec3(1)), vec3(1.0), vec2(1.0), _GLF_struct_10(mat4x3(1.0), vec2(1.0), mat3x4(1.0)), _GLF_struct_11(bvec2(true), 1.0, uvec2(1u), uvec2(1u), bvec3(true), true)), gl_WorkGroupSize.x, _GLF_struct_13(vec2(1.0)));
 GLF_merged4_0_1_13_1_1_11_2_1_12_3_1_14num_workgroupvirtual_gidworkgroup_idworkgroup_size.w = _GLF_struct_replacement_14.workgroup_size;
 uint workgroup_id = gl_WorkGroupID.x;
 GLF_merged4_0_1_13_1_1_11_2_1_12_3_1_14num_workgroupvirtual_gidworkgroup_idworkgroup_size.z = workgroup_id;
 _GLF_struct_2 _GLF_struct_replacement_2 = _GLF_struct_2(uvec4(1u), GLF_merged4_0_1_13_1_1_11_2_1_12_3_1_14num_workgroupvirtual_gidworkgroup_idworkgroup_size.w * GLF_merged4_0_1_13_1_1_11_2_1_12_3_1_14num_workgroupvirtual_gidworkgroup_idworkgroup_size.z, _GLF_struct_1(mat4(1.0), ivec4(1), ivec4(1), 1, _GLF_struct_0(mat3(1.0), true, uvec4(1u), mat2x4(1.0), mat4(1.0), true), mat2x4(1.0)), mat4x2(1.0));
 uint subgroup_base = GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_13next_virtual_gidsubgroup_basesubgroup_idsubgroup_size.z * GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_13next_virtual_gidsubgroup_basesubgroup_idsubgroup_size.w;
 GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_13next_virtual_gidsubgroup_basesubgroup_idsubgroup_size.y = subgroup_base;
 uint virtual_gid = _GLF_struct_replacement_2.workgroup_base + GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_13next_virtual_gidsubgroup_basesubgroup_idsubgroup_size.y + _GLF_struct_replacement_19.subgroup_local_id;
 GLF_merged4_0_1_13_1_1_11_2_1_12_3_1_14num_workgroupvirtual_gidworkgroup_idworkgroup_size.y = virtual_gid;
 uint next_virtual_gid = _GLF_struct_replacement_2.workgroup_base + GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_13next_virtual_gidsubgroup_basesubgroup_idsubgroup_size.y + ((_GLF_struct_replacement_19.subgroup_local_id + 1) % GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_13next_virtual_gidsubgroup_basesubgroup_idsubgroup_size.w);
 GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_13next_virtual_gidsubgroup_basesubgroup_idsubgroup_size.x = next_virtual_gid;
 _GLF_struct_25 _GLF_struct_replacement_25 = _GLF_struct_25(_GLF_struct_22(uvec3(1u), _GLF_struct_20(uvec4(1u), ivec3(1), mat2x3(1.0)), _GLF_struct_21(mat2(1.0)), ivec2(1)), mat2x3(1.0), _GLF_struct_24(uvec4(1u), _GLF_struct_23(mat2x4(1.0), 1.0), vec4(1.0), atomicLoad(buf[GLF_merged4_0_1_13_1_1_11_2_1_12_3_1_14num_workgroupvirtual_gidworkgroup_idworkgroup_size.y], 4, 64, 2)), vec3(1.0));
 atomicStore(buf[GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_13next_virtual_gidsubgroup_basesubgroup_idsubgroup_size.x], uint(1), 4, 64, 4);
 subgroupBarrier();
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   atomicStore(checker[GLF_merged4_0_1_13_1_1_11_2_1_12_3_1_14num_workgroupvirtual_gidworkgroup_idworkgroup_size.y], _GLF_struct_replacement_25._f2.read, 4, 64, 4);
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END
BUFFER checker DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected_checker DATA_TYPE uint32 SIZE 8388096 FILL 0

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 
  BIND BUFFER checker AS storage DESCRIPTOR_SET 0 BINDING 2 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT checker EQ_BUFFER expected_checker
