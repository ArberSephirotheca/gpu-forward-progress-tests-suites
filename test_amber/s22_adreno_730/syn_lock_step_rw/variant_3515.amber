#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_4 {
 bool _f0;
 mat4 _f1;
 mat3 _f2;
 mat4x2 _f3;
 vec4 _f4;
 bvec2 _f5;
} ;

struct _GLF_struct_3 {
 mat2x4 _f0;
 float _f1;
 mat2 _f2;
 uint _f3;
 mat4x3 _f4;
} ;

struct _GLF_struct_5 {
 _GLF_struct_3 _f0;
 _GLF_struct_4 _f1;
} ;

struct _GLF_struct_1 {
 ivec3 _f0;
 ivec2 _f1;
 ivec3 _f2;
 vec4 _f3;
} ;

struct _GLF_struct_0 {
 ivec3 _f0;
 vec4 _f1;
 vec4 _f2;
 bvec2 _f3;
} ;

struct _GLF_struct_2 {
 vec2 _f0;
 ivec3 _f1;
 mat3x2 _f2;
 _GLF_struct_0 _f3;
 _GLF_struct_1 _f4;
} ;

struct _GLF_struct_6 {
 uint subgroup_local_id;
 _GLF_struct_2 _f0;
 _GLF_struct_5 _f1;
 mat4x3 _f2;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(false, bool(bvec2(false, true))), true, false)), true && (bool(bvec3(_GLF_IDENTITY(false, bool(bvec2(false, true))), true, false)))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), (! (_GLF_DEAD(false))) || false))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(! (_GLF_IDENTITY(! _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec2((injectionSwitch.x > injectionSwitch.y), true))), (! (injectionSwitch.x > injectionSwitch.y)) || false)), (_GLF_IDENTITY(! (_GLF_IDENTITY(! _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec2((injectionSwitch.x > injectionSwitch.y), true))), (! (injectionSwitch.x > injectionSwitch.y)) || false)), true && (! (_GLF_IDENTITY(! _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec2((injectionSwitch.x > injectionSwitch.y), true))), (! (injectionSwitch.x > injectionSwitch.y)) || false))))) && true))))))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(vec2(injectionSwitch), clamp(vec2(injectionSwitch), _GLF_IDENTITY(vec2(injectionSwitch), min(vec2(injectionSwitch), vec2(injectionSwitch))), vec2(injectionSwitch))))).x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! _GLF_IDENTITY((_GLF_IDENTITY(! (false), bool(bvec3(! (false), true, true)))), ((_GLF_IDENTITY(! (false), bool(bvec3(! (false), true, true))))) || false)))))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) || false)))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (true ? _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0) : _GLF_FUZZED(6.2))) > injectionSwitch.y)) || (false))))
      barrier();
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(_GLF_ONE(1.0, injectionSwitch.y))).y, true && (injectionSwitch.x > injectionSwitch.y))) && true)))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
           barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
         barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
        barrier();
       barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)))))), _GLF_IDENTITY(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ! (! ((injectionSwitch.x < injectionSwitch.y))))) && true)), ! (_GLF_IDENTITY(! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), _GLF_IDENTITY(bool(bvec4(! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (bool(bvec4(! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) && true)))) && (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x))) - tan(0.0)) > injectionSwitch.y))))), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), (_GLF_IDENTITY(false, ! (! (false)))) && true)))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, 1.0 * (_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)))), injectionSwitch.y)), ! _GLF_IDENTITY((! (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || ((! (injectionSwitch.x > injectionSwitch.y)))))), (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))), ! (! (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))), bool(bool((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))))))))))) || false))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true))))))))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))) || false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false), bvec3(bvec4(bvec3(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2((injectionSwitch.x > injectionSwitch.y), false), bvec2(bvec2(bvec2((injectionSwitch.x > injectionSwitch.y), false))))), (bool(_GLF_IDENTITY(bvec2((injectionSwitch.x > injectionSwitch.y), false), bvec2(bvec2(bvec2((injectionSwitch.x > injectionSwitch.y), false)))))) && true))) && true))) || false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false), false)))))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), max(mat2(1.0) * (injectionSwitch), mat2(1.0) * (injectionSwitch)))).y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, _GLF_IDENTITY(1.0, min(1.0, 1.0)))).y))))
        barrier();
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, _GLF_IDENTITY(! (_GLF_IDENTITY(! (false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(! (false), (! (false)) || false)))), false || (! (! (false)))))))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 _GLF_struct_6 _GLF_struct_replacement_6 = _GLF_struct_6(gl_SubgroupInvocationID, _GLF_struct_2(vec2(1.0), ivec3(1), mat3x2(1.0), _GLF_struct_0(ivec3(1), vec4(1.0), vec4(1.0), bvec2(true)), _GLF_struct_1(ivec3(1), ivec2(1), ivec3(1), vec4(1.0))), _GLF_struct_5(_GLF_struct_3(mat2x4(1.0), 1.0, mat2(_GLF_IDENTITY(_GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), 1.0, 1.0)), _GLF_IDENTITY(_GLF_IDENTITY(1.0, min(1.0, 1.0)), 0.0 + (1.0)))), mix(float(_GLF_FUZZED((- 0.7))), float(1.0), bool(true)))), 1u, mat4x3(1.0)), _GLF_struct_4(_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec3(true, _GLF_IDENTITY(false, bool(bvec2(false, false))), true), bvec3(bvec4(bvec3(true, false, true), false))))), mat4(1.0), mat3(1.0), mat4x2(1.0), vec4(1.0), bvec2(true))), mat4x3(1.0));
 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, true, false)), (bool(bvec3(false, true, false))) && true))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y)), true)))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true)), (bool(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))) || false), (bool(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))) && true))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(-4621.9304)))) - 0.0) > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, true, true)))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 uint num_workgroup = _GLF_IDENTITY(gl_NumWorkGroups, uvec3(1u, 1u, 1u) * (gl_NumWorkGroups)).x;
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(((vec4(2.6, 52.12, 0.4, -38.94) == vec4(-733.976, -1897.7420, -6159.1054, 411.276)) ? -24.04 : 31.51)), (injectionSwitch)[1]), vec2(_GLF_IDENTITY((injectionSwitch)[0], mix(float((injectionSwitch)[0]), float(_GLF_FUZZED(-803.485)), bool(false))), _GLF_FUZZED(3150.0924)), bvec2(true, false))).y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(((vec4(2.6, 52.12, 0.4, -38.94) == vec4(-733.976, -1897.7420, -6159.1054, 411.276)) ? -24.04 : 31.51)), (injectionSwitch)[1]), vec2(_GLF_IDENTITY((injectionSwitch)[0], mix(float((injectionSwitch)[0]), float(_GLF_FUZZED(-803.485)), bool(false))), _GLF_FUZZED(3150.0924)), bvec2(true, false))).y)))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(mat4(injectionSwitch.x, 1.0, 1.0, determinant(mat4(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, log(1.0), 1.0, 1.0, 0.0, 1.0)), 1.0, 0.0, 0.0, 1.0, 1.0, _GLF_IDENTITY(dot(vec4(1.0, 1.0, 0.0, 0.0), vec4(0.0, 0.0, 1.0, 1.0)), dot(vec4(1.0, 1.0, 0.0, 0.0), vec4(0.0, 0.0, 1.0, 1.0))), 1.0, 0.0, 0.0, 0.0, 0.0, 1.0)), (float(mat4(injectionSwitch.x, 1.0, 1.0, determinant(mat4(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, log(1.0), 1.0, 1.0, 0.0, 1.0)), 1.0, 0.0, 0.0, 1.0, 1.0, _GLF_IDENTITY(dot(vec4(1.0, 1.0, 0.0, 0.0), vec4(0.0, 0.0, 1.0, 1.0)), dot(vec4(1.0, 1.0, 0.0, 0.0), vec4(0.0, 0.0, 1.0, 1.0))), 1.0, 0.0, 0.0, 0.0, 0.0, 1.0))) / 1.0)) > _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0))) - vec2(0.0, 0.0)).y))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))), (_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false))))) && true))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint workgroup_size = _GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize.x, (gl_WorkGroupSize.x) / (((1u | 1u) << _GLF_IDENTITY(uint(5u), uint(5u))) >> _GLF_IDENTITY(uint(5u), uint(5u)))), _GLF_IDENTITY((_GLF_IDENTITY(gl_WorkGroupSize.x, (_GLF_IDENTITY(gl_WorkGroupSize.x, ~ (~ (gl_WorkGroupSize.x)))) / (((_GLF_IDENTITY(1u | 1u, min(1u | 1u, 1u | 1u))) << _GLF_IDENTITY(uint(5u), uint(5u))) >> _GLF_IDENTITY(uint(5u), uint(5u))))) | (_GLF_IDENTITY(gl_WorkGroupSize.x, (gl_WorkGroupSize.x) / (((_GLF_IDENTITY(1u | 1u, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(1u | 1u, (1u | 1u) / 1u) : _GLF_FUZZED(3229u)))) << _GLF_IDENTITY(uint(5u), uint(5u))) >> _GLF_IDENTITY(uint(5u), uint(5u))))), clamp((_GLF_IDENTITY(gl_WorkGroupSize.x, (_GLF_IDENTITY(gl_WorkGroupSize.x, ~ (~ (gl_WorkGroupSize.x)))) / (((_GLF_IDENTITY(1u | 1u, min(1u | 1u, 1u | 1u))) << _GLF_IDENTITY(uint(5u), uint(5u))) >> _GLF_IDENTITY(uint(5u), uint(5u))))) | (_GLF_IDENTITY(gl_WorkGroupSize.x, (gl_WorkGroupSize.x) / (((_GLF_IDENTITY(1u | 1u, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(1u | 1u, (1u | 1u) / 1u) : _GLF_FUZZED(3229u)))) << _GLF_IDENTITY(uint(5u), uint(5u))) >> _GLF_IDENTITY(uint(5u), uint(5u))))), _GLF_IDENTITY((_GLF_IDENTITY(gl_WorkGroupSize.x, (_GLF_IDENTITY(gl_WorkGroupSize.x, ~ (~ (gl_WorkGroupSize.x)))) / (((_GLF_IDENTITY(1u | 1u, min(1u | 1u, 1u | 1u))) << _GLF_IDENTITY(uint(5u), uint(5u))) >> _GLF_IDENTITY(uint(5u), uint(5u))))) | (_GLF_IDENTITY(gl_WorkGroupSize.x, (gl_WorkGroupSize.x) / (((_GLF_IDENTITY(1u | 1u, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(1u | 1u, (1u | 1u) / 1u) : _GLF_FUZZED(3229u)))) << _GLF_IDENTITY(uint(5u), uint(5u))) >> _GLF_IDENTITY(uint(5u), uint(5u))))), uint(uint((_GLF_IDENTITY(gl_WorkGroupSize.x, (_GLF_IDENTITY(gl_WorkGroupSize.x, ~ (~ (gl_WorkGroupSize.x)))) / (((_GLF_IDENTITY(1u | 1u, min(1u | 1u, 1u | 1u))) << _GLF_IDENTITY(uint(5u), uint(5u))) >> _GLF_IDENTITY(uint(5u), uint(5u))))) | (_GLF_IDENTITY(gl_WorkGroupSize.x, (gl_WorkGroupSize.x) / (((_GLF_IDENTITY(1u | 1u, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(1u | 1u, (1u | 1u) / 1u) : _GLF_FUZZED(3229u)))) << _GLF_IDENTITY(uint(5u), uint(5u))) >> _GLF_IDENTITY(uint(5u), uint(5u)))))))), (_GLF_IDENTITY(gl_WorkGroupSize.x, (_GLF_IDENTITY(gl_WorkGroupSize.x, ~ (~ (gl_WorkGroupSize.x)))) / (((_GLF_IDENTITY(1u | 1u, min(1u | 1u, 1u | 1u))) << _GLF_IDENTITY(uint(5u), uint(5u))) >> _GLF_IDENTITY(uint(5u), uint(5u))))) | (_GLF_IDENTITY(gl_WorkGroupSize.x, (gl_WorkGroupSize.x) / (((_GLF_IDENTITY(1u | 1u, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(1u | 1u, (1u | 1u) / 1u) : _GLF_FUZZED(3229u)))) << _GLF_IDENTITY(uint(5u), uint(5u))) >> _GLF_IDENTITY(uint(5u), uint(5u))))))));
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec3(injectionSwitch.x > injectionSwitch.y, false, false)))), true && (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec3(injectionSwitch.x > injectionSwitch.y, false, false))))))))))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
        barrier();
       barrier();
      }
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (_GLF_IDENTITY(! (! (false)), ! (! (! (! (false))))))))))))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(injectionSwitch.x > injectionSwitch.y)))))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(1269.8204, 3.0)) : injectionSwitch)).x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)))).y))))
  barrier();
 uint workgroup_base = workgroup_size * workgroup_id;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      barrier();
     barrier();
    }
   barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 uint subgroup_base = subgroup_id * subgroup_size;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 uint virtual_gid = workgroup_base + subgroup_base + _GLF_struct_replacement_6.subgroup_local_id;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(4694.9664), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(22.32)), bvec2(true, false))).x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint next_virtual_gid = _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, (workgroup_base) | (_GLF_IDENTITY(workgroup_base, 0u | (_GLF_IDENTITY(workgroup_base, uint(uvec3(workgroup_base, 0u, 1u))))))), (_GLF_IDENTITY(workgroup_base, (workgroup_base) | (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, (workgroup_base) * 1u), _GLF_IDENTITY(0u | (_GLF_IDENTITY(workgroup_base, uint(uvec3(workgroup_base, 0u, 1u)))), max(0u | (_GLF_IDENTITY(workgroup_base, uint(uvec3(workgroup_base, 0u, 1u)))), 0u | (_GLF_IDENTITY(workgroup_base, uint(uvec3(workgroup_base, 0u, 1u)))))))))) ^ 0u) + subgroup_base + (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_struct_replacement_6.subgroup_local_id + 1), max((_GLF_struct_replacement_6.subgroup_local_id + 1), (_GLF_struct_replacement_6.subgroup_local_id + 1))), min(_GLF_IDENTITY((_GLF_struct_replacement_6.subgroup_local_id + 1), max((_GLF_struct_replacement_6.subgroup_local_id + 1), (_GLF_struct_replacement_6.subgroup_local_id + 1))), _GLF_IDENTITY((_GLF_struct_replacement_6.subgroup_local_id + 1), max((_GLF_struct_replacement_6.subgroup_local_id + 1), (_GLF_struct_replacement_6.subgroup_local_id + 1))))) % subgroup_size, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_struct_replacement_6.subgroup_local_id + 1, (_GLF_IDENTITY(_GLF_struct_replacement_6.subgroup_local_id + 1, max(_GLF_struct_replacement_6.subgroup_local_id + 1, _GLF_IDENTITY(_GLF_struct_replacement_6.subgroup_local_id, max(_GLF_struct_replacement_6.subgroup_local_id, _GLF_IDENTITY(_GLF_struct_replacement_6.subgroup_local_id, ~ (~ (_GLF_IDENTITY(_GLF_struct_replacement_6.subgroup_local_id, min(_GLF_struct_replacement_6.subgroup_local_id, _GLF_struct_replacement_6.subgroup_local_id))))))) + 1))) | (_GLF_struct_replacement_6.subgroup_local_id + 1))), max((_GLF_struct_replacement_6.subgroup_local_id + _GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(66062)))), (_GLF_struct_replacement_6.subgroup_local_id + 1))) % subgroup_size, uint(_GLF_IDENTITY(uint(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_struct_replacement_6.subgroup_local_id + 1), max((_GLF_struct_replacement_6.subgroup_local_id + 1), (_GLF_struct_replacement_6.subgroup_local_id + 1))) % subgroup_size, (_GLF_IDENTITY((_GLF_struct_replacement_6.subgroup_local_id + 1), max((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_struct_replacement_6.subgroup_local_id, 1u * (_GLF_struct_replacement_6.subgroup_local_id)) + 1, uint(uvec3(_GLF_IDENTITY(_GLF_struct_replacement_6.subgroup_local_id, 1u * (_GLF_struct_replacement_6.subgroup_local_id)) + 1, 0u, (0u | 0u))))), (_GLF_IDENTITY(_GLF_struct_replacement_6.subgroup_local_id + _GLF_IDENTITY(1, (1) >> 0), max(_GLF_IDENTITY(_GLF_struct_replacement_6.subgroup_local_id + 1, 0u ^ (_GLF_struct_replacement_6.subgroup_local_id + 1)), _GLF_struct_replacement_6.subgroup_local_id + 1))))) % subgroup_size) - (0u >> _GLF_IDENTITY(uint(8u), uint(8u))))), 0u | (uint(_GLF_IDENTITY((_GLF_struct_replacement_6.subgroup_local_id + 1), max((_GLF_struct_replacement_6.subgroup_local_id + 1), (_GLF_IDENTITY(_GLF_struct_replacement_6.subgroup_local_id, (false ? _GLF_FUZZED(uint(91830)) : _GLF_IDENTITY(_GLF_struct_replacement_6.subgroup_local_id, (_GLF_struct_replacement_6.subgroup_local_id) - 0u))) + 1))) % subgroup_size))))), clamp(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_struct_replacement_6.subgroup_local_id + 1, (_GLF_IDENTITY(_GLF_struct_replacement_6.subgroup_local_id + 1, max(_GLF_struct_replacement_6.subgroup_local_id + 1, _GLF_struct_replacement_6.subgroup_local_id + 1))) | (_GLF_struct_replacement_6.subgroup_local_id + 1))), max((_GLF_struct_replacement_6.subgroup_local_id + 1), (_GLF_struct_replacement_6.subgroup_local_id + 1))) % subgroup_size, uint(_GLF_IDENTITY(uint(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_struct_replacement_6.subgroup_local_id + 1), max((_GLF_struct_replacement_6.subgroup_local_id + 1), (_GLF_struct_replacement_6.subgroup_local_id + 1))) % subgroup_size, (_GLF_IDENTITY((_GLF_struct_replacement_6.subgroup_local_id + 1), max((_GLF_IDENTITY(_GLF_struct_replacement_6.subgroup_local_id, 1u * (_GLF_struct_replacement_6.subgroup_local_id)) + _GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(-31060)))), (_GLF_IDENTITY(_GLF_struct_replacement_6.subgroup_local_id + 1, max(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_struct_replacement_6.subgroup_local_id + 1, min(_GLF_struct_replacement_6.subgroup_local_id + 1, _GLF_struct_replacement_6.subgroup_local_id + 1)), 0u ^ (_GLF_struct_replacement_6.subgroup_local_id + 1)), _GLF_struct_replacement_6.subgroup_local_id + 1))))) % subgroup_size) - (_GLF_IDENTITY(0u, (0u) | 0u) >> _GLF_IDENTITY(uint(8u), uint(8u))))), 0u | (uint(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_struct_replacement_6.subgroup_local_id + 1), max((_GLF_struct_replacement_6.subgroup_local_id + 1), (_GLF_struct_replacement_6.subgroup_local_id + 1))) % subgroup_size, (_GLF_IDENTITY((_GLF_struct_replacement_6.subgroup_local_id + 1), max((_GLF_struct_replacement_6.subgroup_local_id + 1), (_GLF_struct_replacement_6.subgroup_local_id + 1))) % subgroup_size) >> 0u)))))), _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_struct_replacement_6.subgroup_local_id + 1, (_GLF_IDENTITY(_GLF_struct_replacement_6.subgroup_local_id + 1, max(_GLF_struct_replacement_6.subgroup_local_id + 1, _GLF_struct_replacement_6.subgroup_local_id + 1))) | (_GLF_struct_replacement_6.subgroup_local_id + 1))), max((_GLF_IDENTITY(_GLF_struct_replacement_6.subgroup_local_id + 1, uint(uint(_GLF_struct_replacement_6.subgroup_local_id + 1)))), (_GLF_struct_replacement_6.subgroup_local_id + 1))) % subgroup_size, uint(_GLF_IDENTITY(uint(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_struct_replacement_6.subgroup_local_id + 1), max((_GLF_struct_replacement_6.subgroup_local_id + 1), _GLF_IDENTITY((_GLF_struct_replacement_6.subgroup_local_id + 1), ~ (_GLF_IDENTITY(~ ((_GLF_struct_replacement_6.subgroup_local_id + 1)), (false ? _GLF_FUZZED(subgroup_base) : _GLF_IDENTITY(~ ((_GLF_struct_replacement_6.subgroup_local_id + 1)), min(~ ((_GLF_struct_replacement_6.subgroup_local_id + 1)), ~ ((_GLF_struct_replacement_6.subgroup_local_id + 1)))))))))) % subgroup_size, (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_struct_replacement_6.subgroup_local_id, (_GLF_IDENTITY(_GLF_struct_replacement_6.subgroup_local_id, (false ? _GLF_FUZZED(subgroup_size) : _GLF_struct_replacement_6.subgroup_local_id))) | 0u) + 1), max((_GLF_IDENTITY(_GLF_struct_replacement_6.subgroup_local_id, 1u * (_GLF_struct_replacement_6.subgroup_local_id)) + 1), (_GLF_IDENTITY(_GLF_struct_replacement_6.subgroup_local_id + 1, max(_GLF_IDENTITY(_GLF_struct_replacement_6.subgroup_local_id + 1, 0u ^ (_GLF_struct_replacement_6.subgroup_local_id + 1)), _GLF_struct_replacement_6.subgroup_local_id + 1))))) % subgroup_size) - (0u >> _GLF_IDENTITY(uint(8u), uint(8u))))), 0u | (uint(_GLF_IDENTITY((_GLF_struct_replacement_6.subgroup_local_id + 1), max((_GLF_struct_replacement_6.subgroup_local_id + 1), (_GLF_IDENTITY(_GLF_struct_replacement_6.subgroup_local_id, min(_GLF_struct_replacement_6.subgroup_local_id, _GLF_struct_replacement_6.subgroup_local_id)) + 1))) % subgroup_size))))), _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_struct_replacement_6.subgroup_local_id + 1, (_GLF_IDENTITY(_GLF_struct_replacement_6.subgroup_local_id + 1, max(_GLF_struct_replacement_6.subgroup_local_id + 1, _GLF_struct_replacement_6.subgroup_local_id + 1))) | (_GLF_struct_replacement_6.subgroup_local_id + 1)), clamp(_GLF_IDENTITY(_GLF_struct_replacement_6.subgroup_local_id + 1, (_GLF_IDENTITY(_GLF_struct_replacement_6.subgroup_local_id + 1, max(_GLF_struct_replacement_6.subgroup_local_id + 1, _GLF_struct_replacement_6.subgroup_local_id + 1))) | (_GLF_struct_replacement_6.subgroup_local_id + 1)), _GLF_IDENTITY(_GLF_struct_replacement_6.subgroup_local_id + 1, (_GLF_IDENTITY(_GLF_struct_replacement_6.subgroup_local_id + 1, max(_GLF_struct_replacement_6.subgroup_local_id + 1, _GLF_struct_replacement_6.subgroup_local_id + 1))) | (_GLF_struct_replacement_6.subgroup_local_id + 1)), _GLF_IDENTITY(_GLF_struct_replacement_6.subgroup_local_id + 1, (_GLF_IDENTITY(_GLF_struct_replacement_6.subgroup_local_id + 1, max(_GLF_struct_replacement_6.subgroup_local_id + 1, _GLF_struct_replacement_6.subgroup_local_id + 1))) | (_GLF_struct_replacement_6.subgroup_local_id + 1))))), max((_GLF_struct_replacement_6.subgroup_local_id + 1), (_GLF_struct_replacement_6.subgroup_local_id + 1))) % subgroup_size, uint(_GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_struct_replacement_6.subgroup_local_id + 1), max((_GLF_struct_replacement_6.subgroup_local_id + 1), (_GLF_struct_replacement_6.subgroup_local_id + 1))) % subgroup_size, _GLF_IDENTITY((_GLF_IDENTITY((_GLF_struct_replacement_6.subgroup_local_id + 1), max((_GLF_IDENTITY(_GLF_struct_replacement_6.subgroup_local_id, 1u * (_GLF_struct_replacement_6.subgroup_local_id)) + 1), (_GLF_IDENTITY(_GLF_struct_replacement_6.subgroup_local_id + 1, max(_GLF_IDENTITY(_GLF_struct_replacement_6.subgroup_local_id + 1, 0u ^ (_GLF_struct_replacement_6.subgroup_local_id + 1)), _GLF_struct_replacement_6.subgroup_local_id + _GLF_IDENTITY(1, ~ (~ (1)))))))) % subgroup_size), max((_GLF_IDENTITY((_GLF_struct_replacement_6.subgroup_local_id + 1), max((_GLF_IDENTITY(_GLF_struct_replacement_6.subgroup_local_id, 1u * (_GLF_struct_replacement_6.subgroup_local_id)) + 1), (_GLF_IDENTITY(_GLF_struct_replacement_6.subgroup_local_id + 1, max(_GLF_IDENTITY(_GLF_struct_replacement_6.subgroup_local_id + 1, 0u ^ (_GLF_struct_replacement_6.subgroup_local_id + 1)), _GLF_struct_replacement_6.subgroup_local_id + _GLF_IDENTITY(1, ~ (~ (1)))))))) % subgroup_size), (_GLF_IDENTITY((_GLF_struct_replacement_6.subgroup_local_id + 1), max((_GLF_IDENTITY(_GLF_struct_replacement_6.subgroup_local_id, 1u * (_GLF_struct_replacement_6.subgroup_local_id)) + 1), (_GLF_IDENTITY(_GLF_struct_replacement_6.subgroup_local_id + 1, max(_GLF_IDENTITY(_GLF_struct_replacement_6.subgroup_local_id + 1, 0u ^ (_GLF_struct_replacement_6.subgroup_local_id + 1)), _GLF_struct_replacement_6.subgroup_local_id + _GLF_IDENTITY(1, ~ (~ (1)))))))) % subgroup_size))) - (0u >> _GLF_IDENTITY(uint(8u), uint(8u))))), 0u | (uint(_GLF_IDENTITY((_GLF_struct_replacement_6.subgroup_local_id + 1), max((_GLF_IDENTITY(_GLF_struct_replacement_6.subgroup_local_id + 1, (false ? _GLF_FUZZED(num_workgroup) : _GLF_struct_replacement_6.subgroup_local_id + 1))), (_GLF_struct_replacement_6.subgroup_local_id + 1))) % subgroup_size))), (false ? _GLF_FUZZED(workgroup_base) : _GLF_IDENTITY(uint(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_struct_replacement_6.subgroup_local_id + 1), max((_GLF_struct_replacement_6.subgroup_local_id + 1), (_GLF_struct_replacement_6.subgroup_local_id + 1))) % subgroup_size, _GLF_IDENTITY((_GLF_IDENTITY((_GLF_struct_replacement_6.subgroup_local_id + 1), max((_GLF_IDENTITY(_GLF_struct_replacement_6.subgroup_local_id, 1u * (_GLF_struct_replacement_6.subgroup_local_id)) + 1), (_GLF_IDENTITY(_GLF_struct_replacement_6.subgroup_local_id + 1, max(_GLF_IDENTITY(_GLF_struct_replacement_6.subgroup_local_id + 1, 0u ^ (_GLF_struct_replacement_6.subgroup_local_id + 1)), _GLF_struct_replacement_6.subgroup_local_id + _GLF_IDENTITY(1, ~ (~ (1)))))))) % subgroup_size), max((_GLF_IDENTITY(_GLF_IDENTITY((_GLF_struct_replacement_6.subgroup_local_id + 1), max((_GLF_IDENTITY(_GLF_struct_replacement_6.subgroup_local_id, 1u * (_GLF_struct_replacement_6.subgroup_local_id)) + 1), (_GLF_IDENTITY(_GLF_struct_replacement_6.subgroup_local_id + 1, max(_GLF_IDENTITY(_GLF_struct_replacement_6.subgroup_local_id + 1, 0u ^ (_GLF_struct_replacement_6.subgroup_local_id + 1)), _GLF_struct_replacement_6.subgroup_local_id + _GLF_IDENTITY(1, ~ (~ (1)))))))) % subgroup_size, max(_GLF_IDENTITY((_GLF_struct_replacement_6.subgroup_local_id + 1), max((_GLF_IDENTITY(_GLF_struct_replacement_6.subgroup_local_id, 1u * (_GLF_struct_replacement_6.subgroup_local_id)) + 1), (_GLF_IDENTITY(_GLF_struct_replacement_6.subgroup_local_id + 1, max(_GLF_IDENTITY(_GLF_struct_replacement_6.subgroup_local_id + 1, 0u ^ (_GLF_struct_replacement_6.subgroup_local_id + 1)), _GLF_struct_replacement_6.subgroup_local_id + _GLF_IDENTITY(1, ~ (~ (1)))))))) % subgroup_size, _GLF_IDENTITY((_GLF_struct_replacement_6.subgroup_local_id + 1), max((_GLF_IDENTITY(_GLF_struct_replacement_6.subgroup_local_id, 1u * (_GLF_struct_replacement_6.subgroup_local_id)) + 1), (_GLF_IDENTITY(_GLF_struct_replacement_6.subgroup_local_id + 1, max(_GLF_IDENTITY(_GLF_struct_replacement_6.subgroup_local_id + 1, 0u ^ (_GLF_struct_replacement_6.subgroup_local_id + 1)), _GLF_struct_replacement_6.subgroup_local_id + _GLF_IDENTITY(1, ~ (~ (1)))))))) % subgroup_size))), (_GLF_IDENTITY((_GLF_struct_replacement_6.subgroup_local_id + 1), max((_GLF_IDENTITY(_GLF_struct_replacement_6.subgroup_local_id, 1u * (_GLF_struct_replacement_6.subgroup_local_id)) + 1), (_GLF_IDENTITY(_GLF_struct_replacement_6.subgroup_local_id + 1, max(_GLF_IDENTITY(_GLF_struct_replacement_6.subgroup_local_id + 1, 0u ^ (_GLF_struct_replacement_6.subgroup_local_id + 1)), _GLF_struct_replacement_6.subgroup_local_id + _GLF_IDENTITY(1, ~ (~ (1)))))))) % subgroup_size))) - (0u >> _GLF_IDENTITY(uint(8u), uint(8u))))), 0u | (uint(_GLF_IDENTITY((_GLF_struct_replacement_6.subgroup_local_id + 1), max((_GLF_IDENTITY(_GLF_struct_replacement_6.subgroup_local_id + 1, (false ? _GLF_FUZZED(num_workgroup) : _GLF_struct_replacement_6.subgroup_local_id + 1))), (_GLF_struct_replacement_6.subgroup_local_id + 1))) % subgroup_size)))))))))) >> 0u));
 uint read = atomicLoad(_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) ^ 0u), 4, _GLF_IDENTITY(64, _GLF_IDENTITY(max(64, 64), _GLF_IDENTITY(int(_GLF_IDENTITY(ivec2(max(64, 64), 0), (ivec2(max(64, 64), 0)) | (_GLF_IDENTITY(ivec2(max(64, 64), 0), max(ivec2(max(64, 64), 0), _GLF_IDENTITY(ivec2(max(64, 64), 0), clamp(_GLF_IDENTITY(ivec2(max(64, 64), 0), (ivec2(max(64, 64), 0)) - ivec2(0, 0)), ivec2(max(64, 64), 0), ivec2(max(64, 64), 0)))))))), min(_GLF_IDENTITY(int(_GLF_IDENTITY(ivec2(_GLF_IDENTITY(max(64, 64), (max(64, _GLF_IDENTITY(64, _GLF_IDENTITY((64), int(int((64)))) / 1))) | (max(64, 64))), 0), (ivec2(max(64, 64), 0)) | (ivec2(max(64, 64), _GLF_IDENTITY(0, (0) | (0)))))), (false ? _GLF_FUZZED(24171) : int(_GLF_IDENTITY(_GLF_IDENTITY(ivec2(max(64, 64), 0), (ivec2(max(64, 64), 0)) | (ivec2(max(64, 64), 0))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(ivec2(max(64, 64), 0), (ivec2(max(64, 64), 0)) | (ivec2(max(_GLF_IDENTITY(64, (64) | (_GLF_IDENTITY(64, ~ (~ (64))))), 64), 0))), ivec2(0, 0) ^ (_GLF_IDENTITY(ivec2(max(64, 64), 0), (ivec2(max(64, 64), 0)) | (ivec2(max(64, 64), 0))))), _GLF_IDENTITY(ivec2(max(64, 64), 0), (ivec2(max(64, 64), 0)) | (ivec2(max(64, 64), 0))), _GLF_IDENTITY(ivec2(max(64, 64), 0), _GLF_IDENTITY((ivec2(max(64, 64), 0)) | (ivec2(max(64, 64), 0)), (_GLF_IDENTITY((ivec2(max(64, 64), 0)) | (ivec2(max(64, 64), 0)), ((ivec2(max(64, 64), 0)) | (ivec2(max(64, 64), 0))) / ivec2(1, 1))) / ((ivec2(1, 1) << _GLF_IDENTITY(ivec2(3), ivec2(3))) >> _GLF_IDENTITY(ivec2(3), _GLF_IDENTITY(ivec2(3), (ivec2(3)) - ivec2(0, 0))))))))))), int(_GLF_IDENTITY(_GLF_IDENTITY(ivec2(max(64, 64), 0), ivec2(ivec4(_GLF_IDENTITY(ivec2(max(64, 64), 0), (ivec2(max(64, 64), 0)) | (ivec2(max(64, 64), 0))), int(_GLF_ONE(1.0, injectionSwitch.y)), 1))), (ivec2(max(64, 64), 0)) | (ivec2(max(64, 64), 0)))))))), 2);
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(false, (false) || false))), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true))))) && true))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat3x2(injectionSwitch, 1.0, 0.0, 1.0, 0.0), mat2(1.0) * (mat3x2(injectionSwitch, 1.0, 0.0, 1.0, 0.0))))).y, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat3x2(injectionSwitch, 1.0, 0.0, 1.0, 0.0), mat2(1.0) * (mat3x2(injectionSwitch, 1.0, 0.0, 1.0, 0.0))))).y, (_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat3x2(injectionSwitch, 1.0, 0.0, 1.0, 0.0), mat2(1.0) * (mat3x2(injectionSwitch, 1.0, 0.0, 1.0, 0.0))))).y) * 1.0)) * 1.0), _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(_GLF_IDENTITY(-72.66, (-72.66) / _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, 1.0)), dot(vec2(0.0, 1.0), vec2(0.0, 1.0))))) : injectionSwitch.y))))))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, false, true), bvec3(bvec3(_GLF_IDENTITY(bvec3(false, false, true), bvec3(bvec3(bvec3(false, false, true)))))))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 atomicStore(buf[next_virtual_gid], uint(1), 4, 64, 4);
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), true, false, false))))
    barrier();
   barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)))
    barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(_GLF_IDENTITY(1.0, float(mat2x3(_GLF_IDENTITY(1.0, float(_GLF_IDENTITY(mat3(1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0), (false ? _GLF_FUZZED(mat3(244.280, 9467.5402, -3807.3845, -4.0, 6.0, -5802.4501, _GLF_IDENTITY(36.48, (_GLF_IDENTITY(36.48, float(vec3(_GLF_IDENTITY(36.48, (36.48) + 0.0), 0.0, 1.0)))) / 1.0), -20.65, -8.0)) : mat3(1.0, 1.0, 1.0, 1.0, 1.0, 1.0, _GLF_IDENTITY(1.0, 1.0 * (1.0)), 1.0, 0.0))))), 0.0, 1.0, 1.0, 1.0, 0.0))), 1.0)).y))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 subgroupBarrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 atomicStore(checker[virtual_gid], _GLF_IDENTITY(read, (read) >> 0u), 4, 64, 4);
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(injectionSwitch.x, float(mat2x3(injectionSwitch.x, 1.0, 0.0, 1.0, 1.0, 1.0)))), float(_GLF_FUZZED(-1573.2013)), bool(false))) > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END
BUFFER checker DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected_checker DATA_TYPE uint32 SIZE 8388096 FILL 0

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 
  BIND BUFFER checker AS storage DESCRIPTOR_SET 0 BINDING 2 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT checker EQ_BUFFER expected_checker
