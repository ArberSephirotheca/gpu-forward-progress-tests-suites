#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460
struct _GLF_struct_6 {
 mat2x4 _f0;
 ivec3 _f1;
 uint _f2;
 ivec4 _f3;
} ;

struct _GLF_struct_5 {
 uvec2 _f0;
} ;

struct _GLF_struct_7 {
 _GLF_struct_5 _f0;
 int _f1;
 _GLF_struct_6 _f2;
} ;

struct _GLF_struct_8 {
 uint subgroup_base;
 uvec3 _f0;
 _GLF_struct_7 _f1;
} ;

struct _GLF_struct_2 {
 bool _f0;
 float _f1;
 mat4 _f2;
 ivec2 _f3;
 mat2x4 _f4;
} ;

struct _GLF_struct_3 {
 uvec3 _f0;
 uvec4 _f1;
 _GLF_struct_2 _f2;
} ;

struct _GLF_struct_4 {
 _GLF_struct_3 _f0;
 uint workgroup_id;
 vec4 _f1;
 bvec4 _f2;
} ;

struct _GLF_struct_0 {
 bvec2 _f0;
 uint subgroup_local_id;
 mat3x2 _f1;
 bvec2 _f2;
} ;

struct _GLF_struct_1 {
 _GLF_struct_0 _f0;
 mat4x3 _f1;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uvec2 GLF_merged2_0_1_16_1_1_13next_virtual_gidsubgroup_size;
 uvec2 GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_base;
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 GLF_merged2_0_1_16_1_1_13next_virtual_gidsubgroup_size.y = subgroup_size;
 GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_base.x = GLF_merged2_0_1_16_1_1_13next_virtual_gidsubgroup_size.y;
 _GLF_struct_1 _GLF_struct_replacement_1 = _GLF_struct_1(_GLF_struct_0(bvec2(true), gl_SubgroupInvocationID, mat3x2(1.0), bvec2(true)), mat4x3(1.0));
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = gl_WorkGroupSize.x;
 _GLF_struct_4 _GLF_struct_replacement_4 = _GLF_struct_4(_GLF_struct_3(uvec3(1u), uvec4(1u), _GLF_struct_2(true, 1.0, mat4(1.0), ivec2(1), mat2x4(1.0))), gl_WorkGroupID.x, vec4(1.0), bvec4(true));
 uint workgroup_base = workgroup_size * _GLF_struct_replacement_4.workgroup_id;
 GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_base.y = workgroup_base;
 _GLF_struct_8 _GLF_struct_replacement_8 = _GLF_struct_8(subgroup_id * GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_base.x, uvec3(1u), _GLF_struct_7(_GLF_struct_5(uvec2(1u)), 1, _GLF_struct_6(mat2x4(1.0), ivec3(1), 1u, ivec4(1))));
 uint virtual_gid = GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_base.y + _GLF_struct_replacement_8.subgroup_base + _GLF_struct_replacement_1._f0.subgroup_local_id;
 uint next_virtual_gid = GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_base.y + _GLF_struct_replacement_8.subgroup_base + ((_GLF_struct_replacement_1._f0.subgroup_local_id + 1) % GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_base.x);
 GLF_merged2_0_1_16_1_1_13next_virtual_gidsubgroup_size.x = next_virtual_gid;
 uint read = atomicLoad(buf[virtual_gid], 4, 64, 2);
 atomicStore(buf[GLF_merged2_0_1_16_1_1_13next_virtual_gidsubgroup_size.x], uint(1), 4, 64, 4);
 subgroupBarrier();
 atomicStore(checker[virtual_gid], read, 4, 64, 4);
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END
BUFFER checker DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected_checker DATA_TYPE uint32 SIZE 8388096 FILL 0

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 
  BIND BUFFER checker AS storage DESCRIPTOR_SET 0 BINDING 2 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT checker EQ_BUFFER expected_checker
