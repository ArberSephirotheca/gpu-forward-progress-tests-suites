#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uvec4 GLF_merged3_0_2_55_2_1_16_3_1_13GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_sizenext_virtual_gidnum_workgroup;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
  barrier();
 uvec2 GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_size;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 GLF_merged3_0_2_55_2_1_16_3_1_13GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_sizenext_virtual_gidnum_workgroup.xy = GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_size;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 uvec4 GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_13next_virtual_gidnum_workgroupreadsubgroup_base;
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     barrier();
    }
   else
    {
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(false))
  barrier();
 do
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
    barrier();
  }
 else
  {
   GLF_merged3_0_2_55_2_1_16_3_1_13GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_sizenext_virtual_gidnum_workgroup.xy.y = subgroup_size;
  }
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).x > injectionSwitch.y))))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec2(_GLF_DEAD(false), true)), bool(bvec3(bool(bvec2(_GLF_DEAD(false), true)), true, false)))), (_GLF_DEAD(false)) || false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y), false || ((_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY((1 & _GLF_IDENTITY(1, min(1, _GLF_IDENTITY(_GLF_IDENTITY(1, clamp(1, _GLF_IDENTITY(1, (1) | 0), _GLF_IDENTITY(1, (_GLF_IDENTITY(1, max(1, 1))) - 0))), ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (1), (~ (1)) * 1), int(_GLF_ONE(1.0, injectionSwitch.y)) * (_GLF_IDENTITY(~ (1), (~ (1)) * 1)))))))), (_GLF_IDENTITY((1 & _GLF_IDENTITY(1, min(1, _GLF_IDENTITY(_GLF_IDENTITY(1, clamp(1, _GLF_IDENTITY(1, (1) | 0), _GLF_IDENTITY(1, (_GLF_IDENTITY(1, max(1, 1))) - 0))), ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (1), (~ (1)) * 1), int(_GLF_ONE(1.0, injectionSwitch.y)) * (_GLF_IDENTITY(~ (1), (~ (1)) * 1)))))))), min((1 & _GLF_IDENTITY(1, min(1, _GLF_IDENTITY(_GLF_IDENTITY(1, clamp(1, _GLF_IDENTITY(1, (1) | 0), _GLF_IDENTITY(1, (_GLF_IDENTITY(1, max(1, 1))) - 0))), ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (1), (~ (1)) * 1), int(_GLF_ONE(1.0, injectionSwitch.y)) * (_GLF_IDENTITY(~ (1), (~ (1)) * 1)))))))), (1 & _GLF_IDENTITY(1, min(1, _GLF_IDENTITY(_GLF_IDENTITY(1, clamp(1, _GLF_IDENTITY(1, (1) | 0), _GLF_IDENTITY(1, (_GLF_IDENTITY(1, max(1, 1))) - 0))), ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (1), (~ (1)) * 1), int(_GLF_ONE(1.0, injectionSwitch.y)) * (_GLF_IDENTITY(~ (1), (~ (1)) * 1))))))))))) << 0)); _injected_loop_counter ++)
    {
     barrier();
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 GLF_merged3_0_2_55_2_1_16_3_1_13GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_sizenext_virtual_gidnum_workgroup.xy.x = subgroup_local_id;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(! (! (_GLF_DEAD(false))), (! (! (_GLF_DEAD(false)))) || false)))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) || false))))))), true && (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) || false)))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) || false)))), bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) || false)))), false || (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) || false)))))))))))))))))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
    barrier();
  }
 do
  {
   if(_GLF_DEAD(false))
    barrier();
   do
    {
     GLF_merged3_0_2_55_2_1_16_3_1_13GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_sizenext_virtual_gidnum_workgroup.w = num_workgroup;
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y))));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 << _GLF_IDENTITY(int(_GLF_IDENTITY(2, clamp(2, _GLF_IDENTITY(2, ~ (~ (2))), 2))), _GLF_IDENTITY(int(2), 0 + (_GLF_IDENTITY(int(2), ~ (~ (int(2))))))))); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
   GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_13next_virtual_gidnum_workgroupreadsubgroup_base.y = GLF_merged3_0_2_55_2_1_16_3_1_13GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_sizenext_virtual_gidnum_workgroup.w;
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) && true)))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, true, true), bvec3(bvec4(bvec3(false, true, true), true)))))) || false)))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! _GLF_IDENTITY((! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), false || ((! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0)))))
  barrier();
 uint workgroup_base = workgroup_size * workgroup_id;
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(false, false, true), bvec3(bvec4(bvec3(false, false, true), true)))), true && (bool(_GLF_IDENTITY(bvec3(false, false, true), bvec3(bvec4(bvec3(false, false, true), true)))))))))
    {
    }
   else
    {
     barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), (_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (false)), bool(bvec4((! (false)), true, false, false))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, true && (false))))))
      barrier();
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 uint subgroup_base = subgroup_id * _GLF_IDENTITY(GLF_merged3_0_2_55_2_1_16_3_1_13GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_sizenext_virtual_gidnum_workgroup.xy, (GLF_merged3_0_2_55_2_1_16_3_1_13GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_sizenext_virtual_gidnum_workgroup.xy) / uvec2(1u, 1u)).y;
 if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_13next_virtual_gidnum_workgroupreadsubgroup_base.w = subgroup_base, 0u | (GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_13next_virtual_gidnum_workgroupreadsubgroup_base.w = subgroup_base));
 if(_GLF_DEAD(false))
  barrier();
 uint virtual_gid = _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_13next_virtual_gidnum_workgroupreadsubgroup_base.w, max(workgroup_base + GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_13next_virtual_gidnum_workgroupreadsubgroup_base.w, workgroup_base + GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_13next_virtual_gidnum_workgroupreadsubgroup_base.w)), clamp(_GLF_IDENTITY(workgroup_base + GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_13next_virtual_gidnum_workgroupreadsubgroup_base.w, max(workgroup_base + _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_13next_virtual_gidnum_workgroupreadsubgroup_base, ~ (~ (GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_13next_virtual_gidnum_workgroupreadsubgroup_base))).w, _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_13next_virtual_gidnum_workgroupreadsubgroup_base.w, (workgroup_base + GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_13next_virtual_gidnum_workgroupreadsubgroup_base.w) | 0u), clamp(workgroup_base + GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_13next_virtual_gidnum_workgroupreadsubgroup_base.w, workgroup_base + GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_13next_virtual_gidnum_workgroupreadsubgroup_base.w, workgroup_base + GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_13next_virtual_gidnum_workgroupreadsubgroup_base.w)))), workgroup_base + GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_13next_virtual_gidnum_workgroupreadsubgroup_base.w, workgroup_base + GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_13next_virtual_gidnum_workgroupreadsubgroup_base.w)) + GLF_merged3_0_2_55_2_1_16_3_1_13GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_sizenext_virtual_gidnum_workgroup.xy.x;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 uint next_virtual_gid = workgroup_base + GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_13next_virtual_gidnum_workgroupreadsubgroup_base.w + (_GLF_IDENTITY((_GLF_IDENTITY(GLF_merged3_0_2_55_2_1_16_3_1_13GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_sizenext_virtual_gidnum_workgroup.xy, clamp(GLF_merged3_0_2_55_2_1_16_3_1_13GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_sizenext_virtual_gidnum_workgroup.xy, _GLF_IDENTITY(GLF_merged3_0_2_55_2_1_16_3_1_13GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_sizenext_virtual_gidnum_workgroup.xy, uvec2(0u, 0u) | (GLF_merged3_0_2_55_2_1_16_3_1_13GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_sizenext_virtual_gidnum_workgroup.xy)), GLF_merged3_0_2_55_2_1_16_3_1_13GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_sizenext_virtual_gidnum_workgroup.xy)).x + _GLF_IDENTITY(1, _GLF_IDENTITY(int(_GLF_IDENTITY(ivec4(1, 0, (1 & 1), 0), ~ _GLF_IDENTITY((~ (ivec4(1, 0, (1 & _GLF_IDENTITY(1, (1) >> 0)), 0))), clamp((~ (ivec4(1, 0, (1 & 1), 0))), (~ (ivec4(1, 0, (1 & 1), 0))), (~ (ivec4(1, 0, (1 & _GLF_IDENTITY(1, 0 | (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, max(1, 1))) >> 0)))), 0))))))), min(int(_GLF_IDENTITY(ivec4(1, 0, (1 & 1), 0), ~ (~ _GLF_IDENTITY((ivec4(1, 0, (1 & 1), 0)), min(_GLF_IDENTITY((ivec4(1, 0, (1 & 1), 0)), _GLF_IDENTITY(min((ivec4(1, 0, (1 & 1), 0)), _GLF_IDENTITY((ivec4(1, 0, (1 & 1), 0)), ((ivec4(1, 0, (1 & 1), 0))) ^ ivec4(0, 0, 0, 0))), (min((ivec4(1, 0, (1 & 1), 0)), _GLF_IDENTITY((ivec4(1, 0, (1 & 1), 0)), ((ivec4(1, 0, (1 & 1), 0))) ^ ivec4(0, 0, 0, 0)))) * ivec4(1, 1, 1, 1))), (ivec4(1, 0, (1 & 1), 0))))))), int(_GLF_IDENTITY(_GLF_IDENTITY(ivec4(1, 0, (1 & _GLF_IDENTITY(1, (0 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), (true ? int(1) : _GLF_FUZZED(78753))))) | (_GLF_IDENTITY(1, int(ivec3(_GLF_IDENTITY(1, ~ (~ (1))), 0, (0 & -74374))))))), 0), ~ (~ (ivec4(1, 0, (1 & 1), 0)))), (_GLF_IDENTITY(ivec4(1, 0, (1 & 1), 0), ~ (~ (ivec4(1, 0, _GLF_IDENTITY((_GLF_IDENTITY(1 & 1, (1 & 1) | (1 & 1))), ((1 & 1)) / 1), 0))))) / ivec4(1, 1, 1, 1))))))), clamp((_GLF_IDENTITY(GLF_merged3_0_2_55_2_1_16_3_1_13GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_sizenext_virtual_gidnum_workgroup, (GLF_merged3_0_2_55_2_1_16_3_1_13GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_sizenext_virtual_gidnum_workgroup) | (GLF_merged3_0_2_55_2_1_16_3_1_13GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_sizenext_virtual_gidnum_workgroup)).xy.x + _GLF_IDENTITY(1, _GLF_IDENTITY(int(_GLF_IDENTITY(ivec4(1, 0, (_GLF_IDENTITY(1 & 1, ~ (~ (1 & 1)))), 0), ~ _GLF_IDENTITY((~ (ivec4(1, 0, (1 & 1), 0))), clamp((~ (ivec4(1, 0, (1 & 1), _GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(-2807)))))), (~ (ivec4(1, 0, (_GLF_IDENTITY(1 & 1, (1 & 1) >> int(_GLF_ZERO(0.0, injectionSwitch.x)))), 0))), (_GLF_IDENTITY(~ (ivec4(1, 0, (1 & 1), 0)), (~ (ivec4(1, 0, (1 & 1), 0))) << ivec4(0, 0, 0, 0))))))), min(int(_GLF_IDENTITY(ivec4(1, 0, (1 & 1), 0), ~ (~ (ivec4(1, 0, (1 & 1), 0))))), int(_GLF_IDENTITY(_GLF_IDENTITY(ivec4(1, 0, (1 & 1), 0), ~ (~ (ivec4(1, 0, (1 & 1), 0)))), (_GLF_IDENTITY(ivec4(1, 0, (1 & 1), 0), ~ _GLF_IDENTITY((~ (ivec4(1, 0, _GLF_IDENTITY((1 & 1), _GLF_IDENTITY(((1 & 1)) / 1, min(((1 & 1)) / 1, ((1 & 1)) / 1))), 0))), (_GLF_IDENTITY((~ (ivec4(1, _GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) | (0))) ^ 0), _GLF_IDENTITY((1 & 1), ((1 & 1)) / 1), 0))), clamp(_GLF_IDENTITY((~ (ivec4(1, 0, _GLF_IDENTITY((1 & 1), ((1 & 1)) / 1), 0))), clamp(_GLF_IDENTITY((~ (ivec4(1, 0, _GLF_IDENTITY((1 & 1), ((1 & 1)) / 1), 0))), max((~ (ivec4(1, 0, _GLF_IDENTITY((1 & 1), ((1 & 1)) / 1), 0))), (~ (ivec4(1, 0, _GLF_IDENTITY((1 & 1), ((1 & 1)) / 1), 0))))), (~ (ivec4(1, 0, _GLF_IDENTITY((1 & 1), ((1 & 1)) / 1), 0))), (~ (ivec4(1, 0, _GLF_IDENTITY((1 & 1), ((1 & 1)) / 1), 0))))), (~ (ivec4(1, 0, _GLF_IDENTITY((1 & 1), ((1 & 1)) / 1), 0))), (~ (ivec4(1, 0, _GLF_IDENTITY((1 & 1), ((1 & 1)) / 1), 0)))))) | ((~ (ivec4(1, 0, _GLF_IDENTITY((1 & 1), (_GLF_IDENTITY((1 & 1), (_GLF_IDENTITY((1 & 1), 1 * ((1 & 1)))) | (_GLF_IDENTITY((1 & 1), clamp((1 & 1), (1 & 1), (1 & 1)))))) / 1), 0))))))) / ivec4(1, 1, 1, 1))))))), (GLF_merged3_0_2_55_2_1_16_3_1_13GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_sizenext_virtual_gidnum_workgroup.xy.x + _GLF_IDENTITY(1, _GLF_IDENTITY(int(_GLF_IDENTITY(ivec4(1, 0, (1 & 1), 0), ~ _GLF_IDENTITY((~ (ivec4(1, 0, (1 & 1), 0))), clamp((~ (ivec4(1, 0, (1 & 1), 0))), (~ (ivec4(1, 0, (1 & 1), 0))), (~ (ivec4(1, 0, (1 & 1), 0))))))), min(int(_GLF_IDENTITY(ivec4(1, 0, (1 & 1), 0), _GLF_IDENTITY(~ (~ (ivec4(1, 0, (1 & 1), 0))), clamp(~ (~ (ivec4(1, 0, (1 & 1), 0))), ~ (~ (ivec4(1, 0, (1 & 1), 0))), _GLF_IDENTITY(~ (~ (ivec4(1, 0, (1 & 1), 0))), (~ (~ (ivec4(1, 0, (1 & 1), 0)))) >> ivec4(0, _GLF_IDENTITY(0, (0) >> 0), 0, 0)))))), int(_GLF_IDENTITY(_GLF_IDENTITY(ivec4(1, 0, (1 & 1), 0), ~ (~ (ivec4(1, 0, (1 & 1), 0)))), (_GLF_IDENTITY(ivec4(1, 0, (1 & 1), 0), ~ (~ (ivec4(_GLF_IDENTITY(1, (false ? _GLF_FUZZED(28388) : 1)), 0, _GLF_IDENTITY((1 & 1), ((_GLF_IDENTITY(1 & 1, 0 | (1 & 1)))) / 1), 0))))) / ivec4(1, 1, 1, 1))))))), _GLF_IDENTITY((GLF_merged3_0_2_55_2_1_16_3_1_13GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_sizenext_virtual_gidnum_workgroup.xy.x + _GLF_IDENTITY(1, _GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_IDENTITY(ivec4(1, 0, (1 & 1), 0), ~ _GLF_IDENTITY((~ (ivec4(1, 0, (1 & 1), 0))), clamp((~ (ivec4(1, 0, (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) << 0)) - 0) & 1), 0))), (~ (ivec4(1, 0, (1 & 1), 0))), (~ (ivec4(1, 0, (1 & 1), _GLF_IDENTITY(0, (_GLF_IDENTITY(0, min(0, 0))) - 0))))))), clamp(_GLF_IDENTITY(ivec4(1, 0, (1 & 1), 0), ~ _GLF_IDENTITY((~ _GLF_IDENTITY((ivec4(1, 0, (1 & 1), 0)), min(_GLF_IDENTITY((ivec4(1, 0, (1 & 1), 0)), clamp((ivec4(1, 0, (1 & 1), 0)), (ivec4(1, 0, (1 & 1), 0)), (ivec4(1, 0, (1 & 1), 0)))), (ivec4(1, 0, (1 & 1), 0))))), clamp((~ (ivec4(1, 0, (1 & 1), 0))), (~ (ivec4(1, _GLF_IDENTITY(0, (0) | 0), (1 & _GLF_IDENTITY(1, max(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) + 0)) | (1)), 1))), 0))), _GLF_IDENTITY((~ (ivec4(1, 0, (1 & 1), 0))), min((~ (ivec4(1, 0, (1 & 1), 0))), (~ (ivec4(1, 0, (1 & 1), 0)))))))), _GLF_IDENTITY(ivec4(1, 0, (1 & 1), 0), ~ _GLF_IDENTITY(_GLF_IDENTITY((~ (ivec4(1, _GLF_IDENTITY(0, clamp(0, 0, 0)), _GLF_IDENTITY((1 & 1), min((1 & 1), (1 & 1))), 0))), ~ (_GLF_IDENTITY(~ ((~ (ivec4(1, _GLF_IDENTITY(0, clamp(0, 0, 0)), _GLF_IDENTITY((1 & 1), min((1 & 1), (1 & 1))), 0)))), (false ? _GLF_FUZZED(ivec4(-11005, 31123, 50643, 77247)) : ~ ((~ (ivec4(1, _GLF_IDENTITY(0, clamp(0, 0, 0)), _GLF_IDENTITY((1 & 1), min((1 & 1), (1 & 1))), 0)))))))), clamp((~ (ivec4(1, 0, (1 & 1), 0))), (~ (ivec4(1, _GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(bitCount((-31155 * 47895))))), (1 & 1), 0))), (~ (ivec4(1, 0, (1 & 1), 0)))))), _GLF_IDENTITY(ivec4(1, 0, (1 & 1), 0), ~ _GLF_IDENTITY((~ (ivec4(1, 0, (1 & 1), 0))), clamp((~ (ivec4(1, 0, (1 & 1), 0))), (~ (ivec4(1, 0, (1 & 1), 0))), _GLF_IDENTITY((~ (ivec4(1, 0, (1 & 1), 0))), ~ (_GLF_IDENTITY(~ ((~ (ivec4(1, 0, (1 & 1), 0)))), max(~ ((~ (ivec4(1, 0, (1 & 1), 0)))), ~ ((~ (ivec4(1, 0, (1 & 1), 0)))))))))))))), min(int(_GLF_IDENTITY(ivec4(1, 0, (1 & 1), 0), ~ (~ (ivec4(1, 0, (1 & 1), 0))))), int(_GLF_IDENTITY(_GLF_IDENTITY(ivec4(1, 0, (1 & 1), 0), ~ (~ (ivec4(1, 0, (1 & 1), 0)))), (_GLF_IDENTITY(ivec4(1, 0, (1 & 1), 0), ~ (~ (ivec4(1, 0, _GLF_IDENTITY((1 & 1), ((1 & 1)) / 1), 0))))) / ivec4(1, 1, 1, 1))))))), min(_GLF_IDENTITY((GLF_merged3_0_2_55_2_1_16_3_1_13GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_sizenext_virtual_gidnum_workgroup.xy.x + _GLF_IDENTITY(1, _GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_IDENTITY(ivec4(1, 0, (1 & 1), 0), ~ _GLF_IDENTITY((~ (ivec4(1, 0, (1 & 1), 0))), clamp((~ (ivec4(1, 0, (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) << 0)) - 0) & 1), 0))), (~ (ivec4(1, 0, (1 & 1), 0))), (~ (ivec4(1, 0, (1 & 1), _GLF_IDENTITY(0, (_GLF_IDENTITY(0, min(0, 0))) - 0))))))), clamp(_GLF_IDENTITY(ivec4(1, 0, (1 & 1), 0), ~ _GLF_IDENTITY((~ _GLF_IDENTITY((ivec4(1, 0, (1 & 1), 0)), min(_GLF_IDENTITY((ivec4(1, 0, (1 & 1), 0)), clamp((ivec4(1, 0, (1 & 1), 0)), (ivec4(1, 0, (1 & 1), 0)), (ivec4(1, 0, (1 & 1), 0)))), (ivec4(1, 0, (1 & 1), 0))))), clamp((~ (ivec4(1, 0, (1 & 1), 0))), (~ (ivec4(1, _GLF_IDENTITY(0, (0) | 0), (1 & _GLF_IDENTITY(1, max(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) + 0)) | (1)), 1))), 0))), _GLF_IDENTITY((~ (ivec4(1, 0, (1 & 1), 0))), min((~ (ivec4(1, 0, (1 & 1), 0))), (~ (ivec4(1, 0, (1 & 1), 0)))))))), _GLF_IDENTITY(ivec4(1, 0, (1 & 1), 0), ~ _GLF_IDENTITY(_GLF_IDENTITY((~ (ivec4(1, _GLF_IDENTITY(0, clamp(0, 0, 0)), _GLF_IDENTITY((1 & 1), min((1 & 1), (1 & 1))), 0))), ~ (_GLF_IDENTITY(~ ((~ (ivec4(1, _GLF_IDENTITY(0, clamp(0, 0, 0)), _GLF_IDENTITY((1 & 1), min((1 & 1), (1 & 1))), 0)))), (false ? _GLF_FUZZED(ivec4(-11005, 31123, 50643, 77247)) : ~ ((~ (ivec4(1, _GLF_IDENTITY(0, clamp(0, 0, 0)), _GLF_IDENTITY((1 & 1), min((1 & 1), (1 & 1))), 0)))))))), clamp((~ (ivec4(1, 0, (1 & 1), 0))), (~ (ivec4(1, _GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(bitCount((-31155 * 47895))))), (1 & 1), 0))), (~ (ivec4(1, 0, (1 & 1), 0)))))), _GLF_IDENTITY(ivec4(1, 0, (1 & 1), 0), ~ _GLF_IDENTITY((~ (ivec4(1, 0, (1 & 1), 0))), clamp((~ (ivec4(1, 0, (1 & 1), 0))), (~ (ivec4(1, 0, (1 & 1), 0))), _GLF_IDENTITY((~ (ivec4(1, 0, (1 & 1), 0))), ~ (_GLF_IDENTITY(~ ((~ (ivec4(1, 0, (1 & 1), 0)))), max(~ ((~ (ivec4(1, 0, (1 & 1), 0)))), ~ ((~ (ivec4(1, 0, (1 & 1), 0)))))))))))))), min(int(_GLF_IDENTITY(ivec4(1, 0, (1 & 1), 0), ~ (~ (ivec4(1, 0, (1 & 1), 0))))), int(_GLF_IDENTITY(_GLF_IDENTITY(ivec4(1, 0, (1 & 1), 0), ~ (~ (ivec4(1, 0, (1 & 1), 0)))), (_GLF_IDENTITY(ivec4(1, 0, (1 & 1), 0), ~ (~ (ivec4(1, 0, _GLF_IDENTITY((1 & 1), ((1 & 1)) / 1), 0))))) / ivec4(1, 1, 1, 1))))))), ((GLF_merged3_0_2_55_2_1_16_3_1_13GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_sizenext_virtual_gidnum_workgroup.xy.x + _GLF_IDENTITY(1, _GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_IDENTITY(ivec4(1, 0, (1 & 1), 0), ~ _GLF_IDENTITY((~ (ivec4(1, 0, (1 & 1), 0))), clamp((~ (ivec4(1, 0, (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) << 0)) - 0) & 1), 0))), (~ (ivec4(1, 0, (1 & 1), 0))), (~ (ivec4(1, 0, (1 & 1), _GLF_IDENTITY(0, (_GLF_IDENTITY(0, min(0, 0))) - 0))))))), clamp(_GLF_IDENTITY(ivec4(1, 0, (1 & 1), 0), ~ _GLF_IDENTITY((~ _GLF_IDENTITY((ivec4(1, 0, (1 & 1), 0)), min(_GLF_IDENTITY((ivec4(1, 0, (1 & 1), 0)), clamp((ivec4(1, 0, (1 & 1), 0)), (ivec4(1, 0, (1 & 1), 0)), (ivec4(1, 0, (1 & 1), 0)))), (ivec4(1, 0, (1 & 1), 0))))), clamp((~ (ivec4(1, 0, (1 & 1), 0))), (~ (ivec4(1, _GLF_IDENTITY(0, (0) | 0), (1 & _GLF_IDENTITY(1, max(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) + 0)) | (1)), 1))), 0))), _GLF_IDENTITY((~ (ivec4(1, 0, (1 & 1), 0))), min((~ (ivec4(1, 0, (1 & 1), 0))), (~ (ivec4(1, 0, (1 & 1), 0)))))))), _GLF_IDENTITY(ivec4(1, 0, (1 & 1), 0), ~ _GLF_IDENTITY(_GLF_IDENTITY((~ (ivec4(1, _GLF_IDENTITY(0, clamp(0, 0, 0)), _GLF_IDENTITY((1 & 1), min((1 & 1), (1 & 1))), 0))), ~ (_GLF_IDENTITY(~ ((~ (ivec4(1, _GLF_IDENTITY(0, clamp(0, 0, 0)), _GLF_IDENTITY((1 & 1), min((1 & 1), (1 & 1))), 0)))), (false ? _GLF_FUZZED(ivec4(-11005, 31123, 50643, 77247)) : ~ ((~ (ivec4(1, _GLF_IDENTITY(0, clamp(0, 0, 0)), _GLF_IDENTITY((1 & 1), min((1 & 1), (1 & 1))), 0)))))))), clamp((~ (ivec4(1, 0, (1 & 1), 0))), (~ (ivec4(1, _GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(bitCount((-31155 * 47895))))), (1 & 1), 0))), (~ (ivec4(1, 0, (1 & 1), 0)))))), _GLF_IDENTITY(ivec4(1, 0, (1 & 1), 0), ~ _GLF_IDENTITY((~ (ivec4(1, 0, (1 & 1), 0))), clamp((~ (ivec4(1, 0, (1 & 1), 0))), (~ (ivec4(1, 0, (1 & 1), 0))), _GLF_IDENTITY((~ (ivec4(1, 0, (1 & 1), 0))), ~ (_GLF_IDENTITY(~ ((~ (ivec4(1, 0, (1 & 1), 0)))), max(~ ((~ (ivec4(1, 0, (1 & 1), 0)))), ~ ((~ (ivec4(1, 0, (1 & 1), 0)))))))))))))), min(int(_GLF_IDENTITY(ivec4(1, 0, (1 & 1), 0), ~ (~ (ivec4(1, 0, (1 & 1), 0))))), int(_GLF_IDENTITY(_GLF_IDENTITY(ivec4(1, 0, (1 & 1), 0), ~ (~ (ivec4(1, 0, (1 & 1), 0)))), (_GLF_IDENTITY(ivec4(1, 0, (1 & 1), 0), ~ (~ (ivec4(1, 0, _GLF_IDENTITY((1 & 1), ((1 & 1)) / 1), 0))))) / ivec4(1, 1, 1, 1)))))))) | ((GLF_merged3_0_2_55_2_1_16_3_1_13GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_sizenext_virtual_gidnum_workgroup.xy.x + _GLF_IDENTITY(1, _GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_IDENTITY(ivec4(1, 0, (1 & 1), 0), ~ _GLF_IDENTITY((~ (ivec4(1, 0, (1 & 1), 0))), clamp((~ (ivec4(1, 0, (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) << 0)) - 0) & 1), 0))), (~ (ivec4(1, 0, (1 & 1), 0))), (~ (ivec4(1, 0, (1 & 1), _GLF_IDENTITY(0, (_GLF_IDENTITY(0, min(0, 0))) - 0))))))), clamp(_GLF_IDENTITY(ivec4(1, 0, (1 & 1), 0), ~ _GLF_IDENTITY((~ _GLF_IDENTITY((ivec4(1, 0, (1 & 1), 0)), min(_GLF_IDENTITY((ivec4(1, 0, (1 & 1), 0)), clamp((ivec4(1, 0, (1 & 1), 0)), (ivec4(1, 0, (1 & 1), 0)), (ivec4(1, 0, (1 & 1), 0)))), (ivec4(1, 0, (1 & 1), 0))))), clamp((~ (ivec4(1, 0, (1 & 1), 0))), (~ (ivec4(1, _GLF_IDENTITY(0, (0) | 0), (1 & _GLF_IDENTITY(1, max(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) + 0)) | (1)), 1))), 0))), _GLF_IDENTITY((~ (ivec4(1, 0, (1 & 1), 0))), min((~ (ivec4(1, 0, (1 & 1), 0))), (~ (ivec4(1, 0, (1 & 1), 0)))))))), _GLF_IDENTITY(ivec4(1, 0, (1 & 1), 0), ~ _GLF_IDENTITY(_GLF_IDENTITY((~ (ivec4(1, _GLF_IDENTITY(0, clamp(0, 0, 0)), _GLF_IDENTITY((1 & 1), min((1 & 1), (1 & 1))), 0))), ~ (_GLF_IDENTITY(~ ((~ (ivec4(1, _GLF_IDENTITY(0, clamp(0, 0, 0)), _GLF_IDENTITY((1 & 1), min((1 & 1), (1 & 1))), 0)))), (false ? _GLF_FUZZED(ivec4(-11005, 31123, 50643, 77247)) : ~ ((~ (ivec4(1, _GLF_IDENTITY(0, clamp(0, 0, 0)), _GLF_IDENTITY((1 & 1), min((1 & 1), (1 & 1))), 0)))))))), clamp((~ (ivec4(1, 0, (1 & 1), 0))), (~ (ivec4(1, _GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(bitCount((-31155 * 47895))))), (1 & 1), 0))), (~ (ivec4(1, 0, (1 & 1), 0)))))), _GLF_IDENTITY(ivec4(1, 0, (1 & 1), 0), ~ _GLF_IDENTITY((~ (ivec4(1, 0, (1 & 1), 0))), clamp((~ (ivec4(1, 0, (1 & 1), 0))), (~ (ivec4(1, 0, (1 & 1), 0))), _GLF_IDENTITY((~ (ivec4(1, 0, (1 & 1), 0))), ~ (_GLF_IDENTITY(~ ((~ (ivec4(1, 0, (1 & 1), 0)))), max(~ ((~ (ivec4(1, 0, (1 & 1), 0)))), ~ ((~ (ivec4(1, 0, (1 & 1), 0)))))))))))))), min(int(_GLF_IDENTITY(ivec4(1, 0, (1 & 1), 0), ~ (~ (ivec4(1, 0, (1 & 1), 0))))), int(_GLF_IDENTITY(_GLF_IDENTITY(ivec4(1, 0, (1 & 1), 0), ~ (~ (ivec4(1, 0, (1 & 1), 0)))), (_GLF_IDENTITY(ivec4(1, 0, (1 & 1), 0), ~ (~ (ivec4(1, 0, _GLF_IDENTITY((1 & 1), ((1 & 1)) / 1), 0))))) / ivec4(1, 1, 1, 1))))))))), (GLF_merged3_0_2_55_2_1_16_3_1_13GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_sizenext_virtual_gidnum_workgroup.xy.x + _GLF_IDENTITY(1, _GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_IDENTITY(ivec4(1, 0, (1 & 1), 0), ~ _GLF_IDENTITY((~ (ivec4(1, 0, (1 & 1), 0))), clamp((~ (ivec4(1, 0, (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) << 0)) - 0) & 1), 0))), (~ (ivec4(1, 0, (1 & 1), 0))), (~ (ivec4(1, 0, (1 & 1), _GLF_IDENTITY(0, (_GLF_IDENTITY(0, min(0, 0))) - 0))))))), clamp(_GLF_IDENTITY(ivec4(1, 0, (1 & 1), 0), ~ _GLF_IDENTITY((~ _GLF_IDENTITY((ivec4(1, 0, (1 & 1), 0)), min(_GLF_IDENTITY((ivec4(1, 0, (1 & 1), 0)), clamp((ivec4(1, 0, (1 & 1), 0)), (ivec4(1, 0, (1 & 1), 0)), (ivec4(1, 0, (1 & 1), 0)))), (ivec4(1, 0, (1 & 1), 0))))), clamp((~ (ivec4(1, 0, (1 & 1), 0))), (~ (ivec4(1, _GLF_IDENTITY(0, (0) | 0), (1 & _GLF_IDENTITY(1, max(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) + 0)) | (1)), 1))), 0))), _GLF_IDENTITY((~ (ivec4(1, 0, (1 & 1), 0))), min((~ (ivec4(1, 0, (1 & 1), 0))), (~ (ivec4(1, 0, (1 & 1), 0)))))))), _GLF_IDENTITY(ivec4(1, 0, (1 & 1), 0), ~ _GLF_IDENTITY(_GLF_IDENTITY((~ (ivec4(1, _GLF_IDENTITY(0, clamp(0, 0, 0)), _GLF_IDENTITY((1 & 1), min((1 & 1), (1 & 1))), 0))), ~ (_GLF_IDENTITY(~ ((~ (ivec4(1, _GLF_IDENTITY(0, clamp(0, 0, 0)), _GLF_IDENTITY((1 & 1), min((1 & 1), (1 & 1))), 0)))), (false ? _GLF_FUZZED(ivec4(-11005, 31123, 50643, 77247)) : ~ ((~ (ivec4(1, _GLF_IDENTITY(0, clamp(0, 0, 0)), _GLF_IDENTITY((1 & 1), min((1 & 1), (1 & 1))), 0)))))))), clamp((~ (ivec4(1, 0, (1 & 1), 0))), (~ (ivec4(1, _GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(bitCount((-31155 * 47895))))), (1 & 1), 0))), (~ (ivec4(1, 0, (1 & 1), 0)))))), _GLF_IDENTITY(ivec4(1, 0, (1 & 1), 0), ~ _GLF_IDENTITY((~ (ivec4(1, 0, (1 & 1), 0))), clamp((~ (ivec4(1, 0, (1 & 1), 0))), (~ (ivec4(1, 0, (1 & 1), 0))), _GLF_IDENTITY((~ (ivec4(1, 0, (1 & 1), 0))), ~ (_GLF_IDENTITY(~ ((~ (ivec4(1, 0, (1 & 1), 0)))), max(~ ((~ (ivec4(1, 0, (1 & 1), 0)))), ~ ((~ (ivec4(1, 0, (1 & 1), 0)))))))))))))), min(int(_GLF_IDENTITY(ivec4(1, 0, (1 & 1), 0), ~ (~ (ivec4(1, 0, (1 & 1), 0))))), int(_GLF_IDENTITY(_GLF_IDENTITY(ivec4(1, 0, (1 & 1), 0), ~ (~ (ivec4(1, 0, (1 & 1), 0)))), (_GLF_IDENTITY(ivec4(1, 0, (1 & 1), 0), ~ (~ (ivec4(1, 0, _GLF_IDENTITY((1 & 1), ((1 & 1)) / 1), 0))))) / ivec4(1, 1, 1, 1))))))))))) % GLF_merged3_0_2_55_2_1_16_3_1_13GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_sizenext_virtual_gidnum_workgroup.xy.y);
 if(_GLF_DEAD(false))
  barrier();
 GLF_merged3_0_2_55_2_1_16_3_1_13GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_sizenext_virtual_gidnum_workgroup.z = _GLF_IDENTITY(next_virtual_gid, (next_virtual_gid) | (next_virtual_gid));
 GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_13next_virtual_gidnum_workgroupreadsubgroup_base.x = GLF_merged3_0_2_55_2_1_16_3_1_13GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_sizenext_virtual_gidnum_workgroup.z;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint read = atomicLoad(buf[virtual_gid], 4, _GLF_IDENTITY(64, _GLF_IDENTITY((true ? 64 : _GLF_IDENTITY(_GLF_FUZZED(-55458), (0 & -30073) ^ (_GLF_FUZZED(-55458)))), clamp((true ? 64 : _GLF_FUZZED(-55458)), (_GLF_IDENTITY(true, ! (! (true))) ? 64 : _GLF_FUZZED(-55458)), _GLF_IDENTITY((true ? 64 : _GLF_FUZZED(-55458)), max((_GLF_IDENTITY(true ? 64 : _GLF_FUZZED(-55458), (_GLF_IDENTITY(true ? 64 : _GLF_FUZZED(-55458), int(ivec2(true ? 64 : _GLF_FUZZED(-55458), 1)))) | (true ? 64 : _GLF_FUZZED(-55458)))), (true ? 64 : _GLF_FUZZED(-55458))))))), 2);
 _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_13next_virtual_gidnum_workgroupreadsubgroup_base.z = read, (true ? GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_13next_virtual_gidnum_workgroupreadsubgroup_base.z = read : _GLF_FUZZED(num_workgroup)));
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
      barrier();
     barrier();
    }
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
  {
   do
    {
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 atomicStore(buf[GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_13next_virtual_gidnum_workgroupreadsubgroup_base.x], uint(1), 4, 64, 4);
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   do
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 else
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
    barrier();
   subgroupBarrier();
  }
 do
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    barrier();
   atomicStore(checker[virtual_gid], _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_13next_virtual_gidnum_workgroupreadsubgroup_base.z, (true ? GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_13next_virtual_gidnum_workgroupreadsubgroup_base.z : _GLF_FUZZED(next_virtual_gid))), 4, 64, _GLF_IDENTITY(4, clamp(4, 4, 4)));
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = _GLF_IDENTITY(0, 0 ^ (_GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) >> 0)) - 0))); _GLF_WRAPPED_LOOP(_injected_loop_counter < (_GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), int(_GLF_IDENTITY(ivec3(int(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), float(mat3(_GLF_ONE(1.0, injectionSwitch.y), sqrt(1.0), 1.0, 1.0, 1.0, 1.0, determinant(mat4(1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0)), 0.0, abs(0.0))))), 1, 0), (ivec3(int(_GLF_ONE(1.0, injectionSwitch.y)), 1, 0)) | (ivec3(int(_GLF_ONE(1.0, injectionSwitch.y)), 1, 0))))) & 1)); _injected_loop_counter ++)
      {
       barrier();
      }
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       for(int _injected_loop_counter = _GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) << 0)) | (0)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END
BUFFER checker DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected_checker DATA_TYPE uint32 SIZE 8388096 FILL 0

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 
  BIND BUFFER checker AS storage DESCRIPTOR_SET 0 BINDING 2 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT checker EQ_BUFFER expected_checker
