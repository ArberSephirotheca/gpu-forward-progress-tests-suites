#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 do
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, 0.0 + (injectionSwitch.y))))), bool(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), true), bvec2(bvec3(bvec2(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y))), bool(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), true), false)))), (bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, 0.0 + (injectionSwitch.y))))), bool(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), true), bvec2(bvec3(bvec2(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y))), bool(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), true), false))))) && true)))
      continue;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), (false) && true)))
      continue;
     return;
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     do
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), false || (_GLF_IDENTITY(false, ! (! (false)))))))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
           break;
          }
         if(_GLF_DEAD(false))
          barrier();
         continue;
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(((vec2(7.5, 165.111) != vec2(-4946.6368, -7.1)) ? 1.4 : 8.0))), float(injectionSwitch.y), bool(true)))))))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y))))
        break;
       if(_GLF_DEAD(false))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bool((injectionSwitch.x > injectionSwitch.y)))))));
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (false))))))))
        barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY((false), ! (! (_GLF_IDENTITY((false), bool(_GLF_IDENTITY(bvec2((_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), true && (! (false)))))), false), bvec2(bvec3(bvec2((_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, false)), false || (bool(bvec2(false, false)))))), false), false)))))))) && true)))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         do
          {
           if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)))), ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false))))) && true))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             for(int _injected_loop_counter = 0; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, max(_GLF_IDENTITY(1, 0 ^ (1)), 1))), _GLF_IDENTITY(bool(bool(_GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, max(_GLF_IDENTITY(1, 0 ^ (1)), 1))))), ! (! (_GLF_IDENTITY(bool(bool(_GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, max(_GLF_IDENTITY(1, 0 ^ (1)), 1))))), bool(bool(bool(bool(_GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, max(_GLF_IDENTITY(1, 0 ^ (1)), 1)))))))))))); _injected_loop_counter ++)
              {
               barrier();
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
      }
     else
      {
      }
    }
   do
    {
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (_GLF_IDENTITY(! (false), bool(bool(_GLF_IDENTITY(! (false), false || (! (false))))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), false, true, true)))));
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) && true)) && true)))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec3((injectionSwitch.x > injectionSwitch.y), true, false))))))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), ! (! (! (_GLF_DEAD(false))))))))
    barrier();
   return;
  }
 uint subgroup_id = gl_SubgroupID;
 for(int _injected_loop_counter = int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(_GLF_IDENTITY(-9386.3625, mix(float(_GLF_IDENTITY(-9386.3625, _GLF_IDENTITY(float(vec2(-9386.3625, 1.0)), min(float(vec2(-9386.3625, 1.0)), float(vec2(-9386.3625, 1.0)))))), float(_GLF_FUZZED(-7.1)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), vec2(_GLF_FUZZED(4.8), (injectionSwitch)[1]), _GLF_IDENTITY(bvec2(false, true), _GLF_IDENTITY(bvec2(bvec2(bvec2(false, true))), bvec2(bvec4(bvec2(bvec2(bvec2(false, true))), false, false))))))), _GLF_IDENTITY(vec2(vec4((_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(_GLF_IDENTITY(-9386.3625, mix(float(_GLF_IDENTITY(-9386.3625, _GLF_IDENTITY(float(vec2(-9386.3625, 1.0)), min(float(vec2(-9386.3625, 1.0)), float(vec2(-9386.3625, 1.0)))))), float(_GLF_FUZZED(-7.1)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), vec2(_GLF_FUZZED(4.8), (injectionSwitch)[1]), _GLF_IDENTITY(bvec2(false, true), _GLF_IDENTITY(bvec2(bvec2(bvec2(false, true))), bvec2(bvec4(bvec2(bvec2(bvec2(false, true))), false, false))))))), 0.0, 1.0)), mix(vec2(_GLF_FUZZED(98.83), (vec2(vec4((_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(_GLF_IDENTITY(-9386.3625, mix(float(_GLF_IDENTITY(-9386.3625, _GLF_IDENTITY(float(vec2(-9386.3625, 1.0)), min(float(vec2(-9386.3625, 1.0)), float(vec2(-9386.3625, 1.0)))))), float(_GLF_FUZZED(-7.1)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), vec2(_GLF_FUZZED(4.8), (injectionSwitch)[1]), _GLF_IDENTITY(bvec2(false, true), _GLF_IDENTITY(bvec2(bvec2(bvec2(false, true))), bvec2(bvec4(bvec2(bvec2(bvec2(false, true))), false, false))))))), 0.0, 1.0)))[1]), vec2(_GLF_IDENTITY((vec2(vec4((_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(_GLF_IDENTITY(-9386.3625, mix(float(_GLF_IDENTITY(-9386.3625, _GLF_IDENTITY(float(vec2(-9386.3625, 1.0)), min(float(vec2(-9386.3625, 1.0)), float(vec2(-9386.3625, 1.0)))))), float(_GLF_FUZZED(-7.1)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), vec2(_GLF_FUZZED(4.8), (injectionSwitch)[1]), _GLF_IDENTITY(bvec2(false, true), _GLF_IDENTITY(bvec2(bvec2(bvec2(false, true))), bvec2(bvec4(bvec2(bvec2(bvec2(false, true))), false, false))))))), 0.0, 1.0)))[0], ((vec2(vec4((_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(_GLF_IDENTITY(-9386.3625, mix(float(_GLF_IDENTITY(-9386.3625, _GLF_IDENTITY(float(vec2(-9386.3625, 1.0)), min(float(vec2(-9386.3625, 1.0)), float(vec2(-9386.3625, 1.0)))))), float(_GLF_FUZZED(-7.1)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), vec2(_GLF_FUZZED(4.8), (injectionSwitch)[1]), _GLF_IDENTITY(bvec2(false, true), _GLF_IDENTITY(bvec2(bvec2(bvec2(false, true))), bvec2(bvec4(bvec2(bvec2(bvec2(false, true))), false, false))))))), 0.0, 1.0)))[0]) * 1.0), _GLF_FUZZED(-5.5)), bvec2(true, false)))) * vec2(1.0, 1.0)), _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY(min(injectionSwitch, injectionSwitch), clamp(min(injectionSwitch, injectionSwitch), min(injectionSwitch, injectionSwitch), min(injectionSwitch, injectionSwitch))), _GLF_IDENTITY(vec2(mat4x2(_GLF_IDENTITY(min(injectionSwitch, injectionSwitch), _GLF_IDENTITY(clamp(min(injectionSwitch, injectionSwitch), min(injectionSwitch, injectionSwitch), min(injectionSwitch, injectionSwitch)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? clamp(min(injectionSwitch, injectionSwitch), min(injectionSwitch, injectionSwitch), min(injectionSwitch, injectionSwitch)) : _GLF_FUZZED(injectionSwitch)))), sqrt(0.0), 1.0, length(vec3(0.0, 0.0, 0.0)), 1.0, sqrt(1.0), 0.0)), vec2(mat4(_GLF_IDENTITY(vec2(mat4x2(_GLF_IDENTITY(min(injectionSwitch, injectionSwitch), clamp(min(injectionSwitch, injectionSwitch), min(injectionSwitch, injectionSwitch), min(injectionSwitch, injectionSwitch))), sqrt(0.0), 1.0, length(vec3(0.0, 0.0, 0.0)), 1.0, sqrt(1.0), 0.0)), _GLF_IDENTITY(clamp(vec2(mat4x2(_GLF_IDENTITY(min(injectionSwitch, injectionSwitch), clamp(min(injectionSwitch, injectionSwitch), min(injectionSwitch, injectionSwitch), min(injectionSwitch, injectionSwitch))), sqrt(0.0), 1.0, length(vec3(0.0, 0.0, 0.0)), 1.0, sqrt(1.0), 0.0)), vec2(mat4x2(_GLF_IDENTITY(min(injectionSwitch, injectionSwitch), clamp(min(injectionSwitch, injectionSwitch), min(injectionSwitch, injectionSwitch), min(injectionSwitch, injectionSwitch))), sqrt(0.0), 1.0, length(vec3(0.0, 0.0, 0.0)), 1.0, sqrt(1.0), 0.0)), vec2(mat4x2(_GLF_IDENTITY(min(injectionSwitch, injectionSwitch), clamp(min(injectionSwitch, injectionSwitch), min(injectionSwitch, injectionSwitch), min(injectionSwitch, injectionSwitch))), sqrt(0.0), 1.0, length(vec3(0.0, 0.0, 0.0)), 1.0, sqrt(1.0), 0.0))), mix(vec2((clamp(vec2(mat4x2(_GLF_IDENTITY(min(injectionSwitch, injectionSwitch), clamp(min(injectionSwitch, injectionSwitch), min(injectionSwitch, injectionSwitch), min(injectionSwitch, injectionSwitch))), sqrt(0.0), 1.0, length(vec3(0.0, 0.0, 0.0)), 1.0, sqrt(1.0), 0.0)), vec2(mat4x2(_GLF_IDENTITY(min(injectionSwitch, injectionSwitch), clamp(min(injectionSwitch, injectionSwitch), min(injectionSwitch, injectionSwitch), min(injectionSwitch, injectionSwitch))), sqrt(0.0), 1.0, length(vec3(0.0, 0.0, 0.0)), 1.0, sqrt(1.0), 0.0)), vec2(mat4x2(_GLF_IDENTITY(min(injectionSwitch, injectionSwitch), clamp(min(injectionSwitch, injectionSwitch), min(injectionSwitch, injectionSwitch), min(injectionSwitch, injectionSwitch))), sqrt(0.0), 1.0, length(vec3(0.0, 0.0, 0.0)), 1.0, sqrt(1.0), 0.0))))[0], _GLF_FUZZED(-837.673)), vec2(_GLF_FUZZED(79.59), (clamp(vec2(mat4x2(_GLF_IDENTITY(min(injectionSwitch, injectionSwitch), clamp(min(injectionSwitch, injectionSwitch), min(injectionSwitch, injectionSwitch), min(injectionSwitch, injectionSwitch))), sqrt(0.0), 1.0, length(vec3(0.0, 0.0, 0.0)), 1.0, sqrt(1.0), 0.0)), vec2(mat4x2(_GLF_IDENTITY(min(injectionSwitch, injectionSwitch), clamp(min(injectionSwitch, injectionSwitch), min(injectionSwitch, injectionSwitch), min(injectionSwitch, injectionSwitch))), sqrt(0.0), 1.0, length(vec3(0.0, 0.0, 0.0)), 1.0, sqrt(1.0), 0.0)), vec2(mat4x2(_GLF_IDENTITY(min(injectionSwitch, injectionSwitch), clamp(min(injectionSwitch, injectionSwitch), min(injectionSwitch, injectionSwitch), min(injectionSwitch, injectionSwitch))), sqrt(0.0), 1.0, length(vec3(0.0, 0.0, 0.0)), 1.0, sqrt(1.0), 0.0))))[1]), bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))), 1.0, 1.0, _GLF_IDENTITY(1.0, (1.0) * 1.0), exp(_GLF_IDENTITY(0.0, max(_GLF_IDENTITY(0.0, min(0.0, 0.0)), _GLF_IDENTITY(0.0, (0.0) / 1.0)))), 0.0, 0.0, log(1.0), 0.0, 1.0, 0.0, 1.0, sin(0.0), 1.0, 1.0))))))).x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < (0 ^ 1)); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, true, true)))))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       continue;
      }
    }
  }
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(false))
  barrier();
 uint num_workgroup = _GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, clamp(gl_NumWorkGroups, gl_NumWorkGroups, gl_NumWorkGroups)), (_GLF_IDENTITY(gl_NumWorkGroups, clamp(gl_NumWorkGroups, gl_NumWorkGroups, gl_NumWorkGroups))) / uvec3(1u, 1u, 1u)).x;
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(false, false || (false))))), true, false, false))), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(false, false || (false))))), true, false, false)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
  barrier();
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_DEAD(false))
  barrier();
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
  return;
 uint workgroup_base = workgroup_size * workgroup_id;
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) || false))))))))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             barrier();
            }
           else
            {
            }
          }
        }
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       else
        {
        }
       return;
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec2((injectionSwitch.x > injectionSwitch.y), false))))))
      barrier();
     barrier();
    }
  }
 uint subgroup_base = _GLF_IDENTITY(subgroup_id * subgroup_size, _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec3(_GLF_IDENTITY(subgroup_id * subgroup_size, _GLF_IDENTITY((_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id)) * subgroup_size), clamp((_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id)) * subgroup_size), (_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id)) * subgroup_size), (_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id)) * subgroup_size))) | 0u), 1u, (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(1u << _GLF_IDENTITY(uint(_GLF_IDENTITY(0u, (0u) + (5256u & 0u))), uint(0u)), max(1u << _GLF_IDENTITY(uint(0u), uint(0u)), _GLF_IDENTITY(1u << _GLF_IDENTITY(_GLF_IDENTITY(uint(0u), (uint(0u)) + 0u), uint(_GLF_IDENTITY(0u, ~ (~ (0u))))), ~ (~ (1u << _GLF_IDENTITY(uint(0u), uint(0u)))))))), ((_GLF_IDENTITY(1u << _GLF_IDENTITY(uint(_GLF_IDENTITY(0u, (0u) + (5256u & 0u))), uint(0u)), max(1u << _GLF_IDENTITY(uint(0u), uint(0u)), _GLF_IDENTITY(1u << _GLF_IDENTITY(uint(_GLF_IDENTITY(0u, (0u) ^ 0u)), uint(0u)), ~ (_GLF_IDENTITY(~ (1u << _GLF_IDENTITY(uint(0u), uint(0u))), 1u * (_GLF_IDENTITY(~ (1u << _GLF_IDENTITY(uint(0u), uint(0u))), 1u * (~ (1u << _GLF_IDENTITY(uint(0u), uint(0u))))))))))))) - 0u), max(_GLF_IDENTITY((_GLF_IDENTITY(1u << _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uint(0u), (uint(0u)) | (_GLF_IDENTITY(uint(0u), 0u ^ (uint(0u))))), uint(0u)), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uint(0u), (uint(0u)) | (uint(0u))), uint(0u)), (true ? _GLF_IDENTITY(_GLF_IDENTITY(uint(0u), (uint(_GLF_IDENTITY(0u, _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec3(_GLF_IDENTITY(0u, clamp(0u, 0u, 0u)), 0u, 0u), max(uvec3(_GLF_IDENTITY(0u, clamp(0u, 0u, 0u)), 0u, 0u), _GLF_IDENTITY(uvec3(_GLF_IDENTITY(0u, clamp(0u, 0u, 0u)), 0u, 0u), uvec3(0u, 0u, 0u) | (uvec3(_GLF_IDENTITY(0u, clamp(0u, 0u, 0u)), 0u, 0u)))))), (0u << _GLF_IDENTITY(uint(5u), uint(5u))) + (uint(_GLF_IDENTITY(uvec3(_GLF_IDENTITY(0u, clamp(0u, 0u, 0u)), 0u, 0u), max(uvec3(_GLF_IDENTITY(0u, clamp(0u, 0u, 0u)), 0u, 0u), _GLF_IDENTITY(uvec3(_GLF_IDENTITY(0u, clamp(0u, 0u, 0u)), 0u, 0u), uvec3(0u, 0u, 0u) | (uvec3(_GLF_IDENTITY(0u, clamp(0u, 0u, 0u)), 0u, 0u))))))))))) | (uint(0u))), uint(0u)) : _GLF_FUZZED(subgroup_size)))) | (_GLF_IDENTITY(_GLF_IDENTITY(uint(0u), (uint(_GLF_IDENTITY(0u, 0u | (_GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, (0u) | (0u))) ^ 0u))))) | (uint(_GLF_IDENTITY(0u, (0u) >> (0u << _GLF_IDENTITY(uint(1u), uint(1u))))))), uint(0u)))), max(_GLF_IDENTITY(1u << _GLF_IDENTITY(uint(0u), uint(0u)), (1u << _GLF_IDENTITY(uint(0u), uint(0u))) | (1u << _GLF_IDENTITY(uint(0u), uint(0u)))), 1u << _GLF_IDENTITY(uint(0u), uint(0u))))), uint(_GLF_IDENTITY(_GLF_IDENTITY(uvec2((_GLF_IDENTITY(_GLF_IDENTITY(1u, (1u) * 1u) << _GLF_IDENTITY(_GLF_IDENTITY(uint(0u), (uint(0u)) | (uint(0u))), uint(0u)), max(1u << _GLF_IDENTITY(uint(0u), uint(0u)), 1u << _GLF_IDENTITY(uint(0u), uint(0u))))), 0u), uvec2(0u, 0u) | (_GLF_IDENTITY(uvec2((_GLF_IDENTITY(_GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, 0u ^ (_GLF_IDENTITY(1u, (1u) ^ (0u | 0u))))) * 1u) << _GLF_IDENTITY(_GLF_IDENTITY(uint(0u), (uint(0u)) | (uint(0u))), uint(0u)), max(1u << _GLF_IDENTITY(uint(0u), _GLF_IDENTITY(uint(0u), (uint(0u)) / 1u)), 1u << _GLF_IDENTITY(uint(0u), uint(0u))))), 0u), (uvec2((_GLF_IDENTITY(_GLF_IDENTITY(1u, (1u) * 1u) << _GLF_IDENTITY(_GLF_IDENTITY(uint(0u), (uint(0u)) | (uint(0u))), uint(_GLF_IDENTITY(0u, (0u) | 0u))), max(1u << _GLF_IDENTITY(uint(0u), uint(0u)), 1u << _GLF_IDENTITY(uint(0u), uint(0u))))), 0u)) | _GLF_IDENTITY((uvec2((_GLF_IDENTITY(_GLF_IDENTITY(1u, (1u) * 1u) << _GLF_IDENTITY(_GLF_IDENTITY(uint(0u), (uint(0u)) | (uint(0u))), uint(_GLF_IDENTITY(0u, (0u) ^ 0u))), max(1u << _GLF_IDENTITY(_GLF_IDENTITY(uint(0u), uint(0u)), (_GLF_IDENTITY(_GLF_IDENTITY(uint(0u), uint(0u)), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(uint(0u), uint(0u)), uint(uvec4(_GLF_IDENTITY(uint(0u), uint(0u)), 0u, 1u, 0u))))))) | (_GLF_IDENTITY(uint(0u), uint(0u)))), 1u << _GLF_IDENTITY(uint(0u), uint(0u))))), 0u)), ((uvec2((_GLF_IDENTITY(_GLF_IDENTITY(1u, (1u) * 1u) << _GLF_IDENTITY(_GLF_IDENTITY(uint(0u), (uint(0u)) | (uint(0u))), uint(_GLF_IDENTITY(0u, (0u) ^ 0u))), max(1u << _GLF_IDENTITY(_GLF_IDENTITY(uint(0u), uint(0u)), (_GLF_IDENTITY(_GLF_IDENTITY(uint(0u), uint(0u)), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(uint(0u), uint(0u)), uint(uvec4(_GLF_IDENTITY(uint(0u), uint(0u)), 0u, 1u, 0u))))))) | (_GLF_IDENTITY(uint(0u), uint(0u)))), 1u << _GLF_IDENTITY(uint(0u), uint(0u))))), 0u))) | uvec2(0u, 0u))))), max(_GLF_IDENTITY(uvec2((_GLF_IDENTITY(1u << _GLF_IDENTITY(uint(_GLF_IDENTITY(0u, (0u) | 0u)), uint(0u)), max(1u << _GLF_IDENTITY(uint(0u), uint(0u)), 1u << _GLF_IDENTITY(_GLF_IDENTITY(uint(0u), uint(0u)), max(_GLF_IDENTITY(uint(0u), uint(0u)), _GLF_IDENTITY(uint(0u), uint(0u))))))), 0u), (_GLF_IDENTITY(uvec2((_GLF_IDENTITY(1u << _GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(0u, (0u) | 0u)), uint(0u)), uint(uvec3(_GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(0u, (0u) | 0u)), uint(0u)), (_GLF_IDENTITY(uint(_GLF_IDENTITY(0u, (0u) | 0u)), uint(0u))) | 0u), 1u, (0u >> _GLF_IDENTITY(uint(7u), uint(7u)))))), max(_GLF_IDENTITY(1u, (false ? _GLF_FUZZED(subgroup_id) : 1u)) << _GLF_IDENTITY(uint(0u), uint(0u)), 1u << _GLF_IDENTITY(_GLF_IDENTITY(uint(0u), uint(0u)), max(_GLF_IDENTITY(uint(0u), uint(0u)), _GLF_IDENTITY(uint(_GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, min(0u, 0u))) << 0u)), uint(0u))))))), 0u), _GLF_IDENTITY((uvec2((_GLF_IDENTITY(1u << _GLF_IDENTITY(uint(_GLF_IDENTITY(0u, (0u) | _GLF_IDENTITY(0u, ~ (~ (0u))))), uint(0u)), max(1u << _GLF_IDENTITY(uint(0u), uint(0u)), 1u << _GLF_IDENTITY(_GLF_IDENTITY(uint(0u), uint(_GLF_IDENTITY(0u, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(0u, max(0u, 0u))), (~ (_GLF_IDENTITY(0u, max(0u, 0u)))) + 0u))))), max(_GLF_IDENTITY(uint(0u), uint(0u)), _GLF_IDENTITY(uint(0u), uint(0u))))))), 0u)) ^ uvec2(0u, 0u), (true ? (_GLF_IDENTITY(uvec2((_GLF_IDENTITY(1u << _GLF_IDENTITY(uint(_GLF_IDENTITY(0u, (0u) | 0u)), uint(0u)), max(1u << _GLF_IDENTITY(uint(0u), uint(0u)), _GLF_IDENTITY(1u, min(1u, 1u)) << _GLF_IDENTITY(_GLF_IDENTITY(uint(0u), uint(0u)), max(_GLF_IDENTITY(uint(0u), uint(0u)), _GLF_IDENTITY(uint(0u), uint(0u))))))), 0u), min(uvec2((_GLF_IDENTITY(1u << _GLF_IDENTITY(uint(_GLF_IDENTITY(0u, (0u) | 0u)), uint(0u)), max(1u << _GLF_IDENTITY(uint(0u), uint(0u)), _GLF_IDENTITY(1u, min(1u, 1u)) << _GLF_IDENTITY(_GLF_IDENTITY(uint(0u), uint(0u)), max(_GLF_IDENTITY(uint(0u), uint(0u)), _GLF_IDENTITY(uint(0u), uint(0u))))))), 0u), uvec2((_GLF_IDENTITY(1u << _GLF_IDENTITY(uint(_GLF_IDENTITY(0u, (0u) | 0u)), uint(0u)), max(1u << _GLF_IDENTITY(uint(0u), uint(0u)), _GLF_IDENTITY(1u, min(1u, 1u)) << _GLF_IDENTITY(_GLF_IDENTITY(uint(0u), uint(0u)), max(_GLF_IDENTITY(uint(0u), uint(0u)), _GLF_IDENTITY(uint(0u), uint(0u))))))), 0u)))) ^ uvec2(_GLF_IDENTITY(0u, ~ (~ (_GLF_IDENTITY(0u, max(0u, 0u))))), 0u) : _GLF_FUZZED((uvec2(172963u, 124979u) - uvec2(54797u, 86079u))))))) / uvec2(1u, 1u)), uvec2((_GLF_IDENTITY(1u << _GLF_IDENTITY(uint(0u), uint(0u)), max(1u << _GLF_IDENTITY(_GLF_IDENTITY(uint(0u), uint(0u)), clamp(_GLF_IDENTITY(uint(0u), uint(0u)), _GLF_IDENTITY(uint(0u), uint(0u)), _GLF_IDENTITY(uint(0u), uint(0u)))), _GLF_IDENTITY(_GLF_IDENTITY(1u, 1u * (1u)), (1u) | 0u) << _GLF_IDENTITY(uint(_GLF_IDENTITY(0u, (0u) / 1u)), _GLF_IDENTITY(uint(0u), (uint(0u)) | _GLF_IDENTITY(0u, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(subgroup_id) : 0u))))))), 0u))))), (_GLF_IDENTITY(1u << _GLF_IDENTITY(_GLF_IDENTITY(uint(0u), _GLF_IDENTITY(uint(0u), uint(_GLF_IDENTITY(uvec3(uint(0u), 1u, 1u), max(_GLF_IDENTITY(uvec3(uint(0u), 1u, 1u), max(uvec3(uint(0u), 1u, 1u), uvec3(uint(0u), 1u, 1u))), uvec3(uint(0u), 1u, 1u)))))), max(_GLF_IDENTITY(uint(_GLF_IDENTITY(0u, (0u) + 0u)), uint(0u)), _GLF_IDENTITY(_GLF_IDENTITY(uint(0u), (uint(0u)) * ((1u << _GLF_IDENTITY(uint(4u), uint(4u))) >> _GLF_IDENTITY(uint(4u), _GLF_IDENTITY(uint(4u), min(uint(4u), _GLF_IDENTITY(uint(4u), clamp(uint(4u), uint(4u), uint(4u)))))))), uint(0u)))), _GLF_IDENTITY(max(1u << _GLF_IDENTITY(_GLF_IDENTITY(uint(0u), ~ (~ (uint(0u)))), uint(0u)), _GLF_IDENTITY(1u, max(_GLF_IDENTITY(1u, max(_GLF_IDENTITY(1u, _GLF_IDENTITY(0u | (_GLF_IDENTITY(1u, (true ? 1u : _GLF_FUZZED(subgroup_id)))), ~ (~ (0u | (_GLF_IDENTITY(1u, (true ? 1u : _GLF_FUZZED(subgroup_id)))))))), 1u)), _GLF_IDENTITY(1u, min(1u, 1u)))) << _GLF_IDENTITY(uint(_GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, 0u ^ (0u))) ^ 0u)), uint(0u))), _GLF_IDENTITY((max(1u << _GLF_IDENTITY(uint(0u), uint(0u)), 1u << _GLF_IDENTITY(uint(0u), uint(0u)))) * 1u, ((max(1u << _GLF_IDENTITY(uint(0u), uint(0u)), 1u << _GLF_IDENTITY(uint(0u), uint(0u)))) * 1u) ^ 0u)))))) >> _GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(0u, 0u | (0u)), _GLF_IDENTITY((false ? _GLF_FUZZED(194685u) : 0u), _GLF_IDENTITY(clamp((false ? _GLF_FUZZED(194685u) : 0u), (false ? _GLF_FUZZED(194685u) : 0u), (false ? _GLF_FUZZED(194685u) : 0u)), (false ? _GLF_FUZZED(workgroup_base) : clamp((false ? _GLF_FUZZED(194685u) : 0u), (false ? _GLF_FUZZED(194685u) : 0u), (false ? _GLF_FUZZED(194685u) : 0u)))))), (_GLF_IDENTITY(0u, _GLF_IDENTITY((_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, ! (! (false))))) ? _GLF_FUZZED(194685u) : 0u), clamp((false ? _GLF_FUZZED(194685u) : 0u), _GLF_IDENTITY((false ? _GLF_FUZZED(194685u) : 0u), max(_GLF_IDENTITY((false ? _GLF_FUZZED(194685u) : 0u), clamp((false ? _GLF_FUZZED(194685u) : 0u), (false ? _GLF_FUZZED(194685u) : 0u), (false ? _GLF_FUZZED(194685u) : 0u))), (false ? _GLF_FUZZED(194685u) : 0u))), (false ? _GLF_FUZZED(_GLF_IDENTITY(194685u, max(_GLF_IDENTITY(194685u, (false ? _GLF_FUZZED(bitfieldExtract(subgroup_size, 58909, -3466)) : 194685u)), 194685u))) : 0u))))) + uint(_GLF_ZERO(0.0, injectionSwitch.x)))), uint(0u)), (_GLF_IDENTITY(_GLF_IDENTITY(uint(0u), uint(0u)), (_GLF_IDENTITY(_GLF_IDENTITY(uint(0u), uint(0u)), 0u | (_GLF_IDENTITY(uint(0u), uint(0u))))) >> 0u)) << 0u))), (true ? _GLF_IDENTITY(uvec3(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) | 0u), (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) | 0u), (_GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) | 0u)) | 0u)) | (_GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) | 0u))), 1u, _GLF_IDENTITY(((1u << _GLF_IDENTITY(uint(0u), uint(0u))) >> _GLF_IDENTITY(_GLF_IDENTITY(uint(0u), uint(0u)), max(_GLF_IDENTITY(uint(0u), uint(0u)), _GLF_IDENTITY(_GLF_IDENTITY(uint(0u), uint(0u)), clamp(_GLF_IDENTITY(uint(0u), uint(0u)), _GLF_IDENTITY(uint(0u), uint(0u)), _GLF_IDENTITY(uint(0u), uint(0u))))))), _GLF_IDENTITY(uint(uvec2((_GLF_IDENTITY((1u << _GLF_IDENTITY(uint(0u), uint(0u))), uint(uint((1u << _GLF_IDENTITY(uint(0u), uint(0u)))))) >> _GLF_IDENTITY(uint(_GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, (1u ^ 1u) | (0u))) >> 0u)), uint(0u))), 0u)), max(uint(uvec2(((1u << _GLF_IDENTITY(uint(0u), uint(0u))) >> _GLF_IDENTITY(uint(0u), uint(0u))), 0u)), uint(uvec2(((_GLF_IDENTITY(1u << _GLF_IDENTITY(uint(0u), uint(0u)), max(1u << _GLF_IDENTITY(uint(0u), uint(0u)), _GLF_IDENTITY(1u << _GLF_IDENTITY(uint(0u), uint(0u)), (false ? _GLF_FUZZED(workgroup_id) : 1u << _GLF_IDENTITY(uint(0u), uint(0u))))))) >> _GLF_IDENTITY(uint(0u), uint(0u))), 0u)))))), clamp(uvec3(_GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) | 0u), 1u, ((1u << _GLF_IDENTITY(uint(0u), _GLF_IDENTITY(uint(0u), (uint(0u)) * (1u & 1u)))) >> _GLF_IDENTITY(uint(0u), uint(0u)))), uvec3(_GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) | 0u), 1u, ((1u << _GLF_IDENTITY(_GLF_IDENTITY(uint(0u), uint(0u)), 0u | (_GLF_IDENTITY(_GLF_IDENTITY(uint(0u), uint(0u)), (false ? _GLF_FUZZED(workgroup_size) : _GLF_IDENTITY(uint(0u), uint(0u))))))) >> _GLF_IDENTITY(uint(0u), uint(0u)))), uvec3(_GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) | 0u), 1u, ((1u << _GLF_IDENTITY(uint(0u), uint(_GLF_IDENTITY(0u, (_GLF_IDENTITY(_GLF_IDENTITY(0u, ~ (~ (0u))), min(_GLF_IDENTITY(0u, ~ (~ (0u))), _GLF_IDENTITY(_GLF_IDENTITY(0u, ~ (~ (0u))), max(_GLF_IDENTITY(0u, ~ (~ (0u))), _GLF_IDENTITY(0u, ~ (~ (0u)))))))) | (0u))))) >> _GLF_IDENTITY(uint(_GLF_IDENTITY(0u, (1u ^ 1u) ^ (0u))), uint(0u)))))) : _GLF_FUZZED(uvec3(13361u, 53031u, 65706u))))), 0u ^ (uint(_GLF_IDENTITY(uvec3(_GLF_IDENTITY(subgroup_id * subgroup_size, _GLF_IDENTITY((_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id)) * subgroup_size), clamp((_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id)) * subgroup_size), (_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id)) * subgroup_size), (_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id)) * subgroup_size))) | 0u), 1u, (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(1u << _GLF_IDENTITY(uint(_GLF_IDENTITY(0u, (0u) + (5256u & 0u))), uint(0u)), max(1u << _GLF_IDENTITY(uint(0u), uint(0u)), _GLF_IDENTITY(1u << _GLF_IDENTITY(_GLF_IDENTITY(uint(0u), (uint(0u)) + 0u), uint(_GLF_IDENTITY(0u, ~ (~ (0u))))), ~ (~ (1u << _GLF_IDENTITY(uint(0u), uint(0u)))))))), ((_GLF_IDENTITY(1u << _GLF_IDENTITY(uint(_GLF_IDENTITY(0u, (0u) + (5256u & 0u))), uint(0u)), max(1u << _GLF_IDENTITY(uint(0u), uint(0u)), _GLF_IDENTITY(1u << _GLF_IDENTITY(uint(_GLF_IDENTITY(0u, (0u) ^ 0u)), uint(0u)), ~ (_GLF_IDENTITY(~ (1u << _GLF_IDENTITY(uint(0u), uint(0u))), 1u * (_GLF_IDENTITY(~ (1u << _GLF_IDENTITY(uint(0u), uint(0u))), 1u * (~ (1u << _GLF_IDENTITY(uint(0u), uint(0u))))))))))))) - 0u), max(_GLF_IDENTITY((_GLF_IDENTITY(1u << _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uint(0u), (uint(0u)) | (_GLF_IDENTITY(uint(0u), 0u ^ (uint(0u))))), uint(0u)), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uint(0u), (uint(0u)) | (uint(0u))), uint(0u)), (true ? _GLF_IDENTITY(_GLF_IDENTITY(uint(0u), (uint(_GLF_IDENTITY(0u, _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec3(_GLF_IDENTITY(0u, clamp(0u, 0u, 0u)), 0u, 0u), max(uvec3(_GLF_IDENTITY(0u, clamp(0u, 0u, 0u)), 0u, 0u), _GLF_IDENTITY(uvec3(_GLF_IDENTITY(0u, clamp(0u, 0u, 0u)), 0u, 0u), uvec3(0u, 0u, 0u) | (uvec3(_GLF_IDENTITY(0u, clamp(0u, 0u, 0u)), 0u, 0u)))))), (0u << _GLF_IDENTITY(uint(5u), uint(5u))) + (uint(_GLF_IDENTITY(uvec3(_GLF_IDENTITY(0u, clamp(0u, 0u, 0u)), 0u, 0u), max(uvec3(_GLF_IDENTITY(0u, clamp(0u, 0u, 0u)), 0u, 0u), _GLF_IDENTITY(uvec3(_GLF_IDENTITY(0u, clamp(0u, 0u, 0u)), 0u, 0u), uvec3(0u, 0u, 0u) | (uvec3(_GLF_IDENTITY(0u, clamp(0u, 0u, 0u)), 0u, 0u))))))))))) | (uint(0u))), uint(0u)) : _GLF_FUZZED(subgroup_size)))) | (_GLF_IDENTITY(_GLF_IDENTITY(uint(0u), (uint(_GLF_IDENTITY(0u, 0u | (_GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, (0u) | (0u))) ^ 0u))))) | (uint(_GLF_IDENTITY(0u, (0u) >> (0u << _GLF_IDENTITY(uint(1u), uint(1u))))))), uint(0u)))), max(_GLF_IDENTITY(1u << _GLF_IDENTITY(uint(0u), uint(0u)), (1u << _GLF_IDENTITY(uint(0u), uint(0u))) | (1u << _GLF_IDENTITY(uint(0u), uint(0u)))), 1u << _GLF_IDENTITY(uint(0u), uint(0u))))), uint(_GLF_IDENTITY(_GLF_IDENTITY(uvec2((_GLF_IDENTITY(_GLF_IDENTITY(1u, (1u) * 1u) << _GLF_IDENTITY(_GLF_IDENTITY(uint(0u), (uint(0u)) | (uint(0u))), uint(0u)), max(1u << _GLF_IDENTITY(uint(0u), uint(0u)), 1u << _GLF_IDENTITY(uint(0u), uint(0u))))), 0u), uvec2(0u, 0u) | (_GLF_IDENTITY(uvec2((_GLF_IDENTITY(_GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, 0u ^ (_GLF_IDENTITY(1u, (1u) ^ (0u | 0u))))) * 1u) << _GLF_IDENTITY(_GLF_IDENTITY(uint(0u), (uint(0u)) | (uint(0u))), uint(0u)), max(1u << _GLF_IDENTITY(uint(0u), _GLF_IDENTITY(uint(0u), (uint(0u)) / 1u)), 1u << _GLF_IDENTITY(uint(0u), uint(0u))))), 0u), (uvec2((_GLF_IDENTITY(_GLF_IDENTITY(1u, (1u) * 1u) << _GLF_IDENTITY(_GLF_IDENTITY(uint(0u), (uint(0u)) | (uint(0u))), uint(_GLF_IDENTITY(0u, (0u) | 0u))), max(1u << _GLF_IDENTITY(uint(0u), uint(0u)), 1u << _GLF_IDENTITY(uint(0u), uint(0u))))), 0u)) | _GLF_IDENTITY((uvec2((_GLF_IDENTITY(_GLF_IDENTITY(1u, (1u) * 1u) << _GLF_IDENTITY(_GLF_IDENTITY(uint(0u), (uint(0u)) | (uint(0u))), uint(_GLF_IDENTITY(0u, (0u) ^ 0u))), max(1u << _GLF_IDENTITY(_GLF_IDENTITY(uint(0u), uint(0u)), (_GLF_IDENTITY(_GLF_IDENTITY(uint(0u), uint(0u)), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(uint(0u), uint(0u)), uint(uvec4(_GLF_IDENTITY(uint(0u), uint(0u)), 0u, 1u, 0u))))))) | (_GLF_IDENTITY(uint(0u), uint(0u)))), 1u << _GLF_IDENTITY(uint(0u), uint(0u))))), 0u)), ((uvec2((_GLF_IDENTITY(_GLF_IDENTITY(1u, (1u) * 1u) << _GLF_IDENTITY(_GLF_IDENTITY(uint(0u), (uint(0u)) | (uint(0u))), uint(_GLF_IDENTITY(0u, (0u) ^ 0u))), max(1u << _GLF_IDENTITY(_GLF_IDENTITY(uint(0u), uint(0u)), (_GLF_IDENTITY(_GLF_IDENTITY(uint(0u), uint(0u)), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(uint(0u), uint(0u)), uint(uvec4(_GLF_IDENTITY(uint(0u), uint(0u)), 0u, 1u, 0u))))))) | (_GLF_IDENTITY(uint(0u), uint(0u)))), 1u << _GLF_IDENTITY(uint(0u), uint(0u))))), 0u))) | uvec2(0u, 0u))))), max(_GLF_IDENTITY(uvec2((_GLF_IDENTITY(1u << _GLF_IDENTITY(uint(_GLF_IDENTITY(0u, (0u) | 0u)), uint(0u)), max(1u << _GLF_IDENTITY(uint(0u), uint(0u)), 1u << _GLF_IDENTITY(_GLF_IDENTITY(uint(0u), uint(0u)), max(_GLF_IDENTITY(uint(0u), uint(0u)), _GLF_IDENTITY(uint(0u), uint(0u))))))), 0u), (_GLF_IDENTITY(uvec2((_GLF_IDENTITY(1u << _GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(0u, (0u) | 0u)), uint(0u)), uint(uvec3(_GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(0u, (0u) | 0u)), uint(0u)), (_GLF_IDENTITY(uint(_GLF_IDENTITY(0u, (0u) | 0u)), uint(0u))) | 0u), 1u, (0u >> _GLF_IDENTITY(uint(7u), uint(7u)))))), max(_GLF_IDENTITY(1u, (false ? _GLF_FUZZED(subgroup_id) : 1u)) << _GLF_IDENTITY(uint(0u), uint(0u)), 1u << _GLF_IDENTITY(_GLF_IDENTITY(uint(0u), uint(0u)), max(_GLF_IDENTITY(uint(0u), uint(0u)), _GLF_IDENTITY(uint(_GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, min(0u, 0u))) << 0u)), uint(0u))))))), 0u), _GLF_IDENTITY((uvec2((_GLF_IDENTITY(1u << _GLF_IDENTITY(uint(_GLF_IDENTITY(0u, (0u) | _GLF_IDENTITY(0u, ~ (~ (0u))))), uint(0u)), max(1u << _GLF_IDENTITY(uint(0u), uint(0u)), 1u << _GLF_IDENTITY(_GLF_IDENTITY(uint(0u), uint(_GLF_IDENTITY(0u, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(0u, max(0u, 0u))), (~ (_GLF_IDENTITY(0u, max(0u, 0u)))) + 0u))))), max(_GLF_IDENTITY(uint(0u), uint(0u)), _GLF_IDENTITY(uint(0u), uint(0u))))))), 0u)) ^ uvec2(0u, 0u), (true ? (_GLF_IDENTITY(uvec2((_GLF_IDENTITY(1u << _GLF_IDENTITY(uint(_GLF_IDENTITY(0u, (0u) | 0u)), uint(0u)), max(1u << _GLF_IDENTITY(uint(0u), uint(0u)), _GLF_IDENTITY(1u, min(1u, 1u)) << _GLF_IDENTITY(_GLF_IDENTITY(uint(0u), uint(0u)), max(_GLF_IDENTITY(uint(0u), uint(0u)), _GLF_IDENTITY(uint(0u), uint(0u))))))), 0u), min(uvec2((_GLF_IDENTITY(1u << _GLF_IDENTITY(uint(_GLF_IDENTITY(0u, (0u) | 0u)), uint(0u)), max(1u << _GLF_IDENTITY(uint(0u), uint(0u)), _GLF_IDENTITY(1u, min(1u, 1u)) << _GLF_IDENTITY(_GLF_IDENTITY(uint(0u), uint(0u)), max(_GLF_IDENTITY(uint(0u), uint(0u)), _GLF_IDENTITY(uint(0u), uint(0u))))))), 0u), uvec2((_GLF_IDENTITY(1u << _GLF_IDENTITY(uint(_GLF_IDENTITY(0u, (0u) | 0u)), uint(0u)), max(1u << _GLF_IDENTITY(uint(0u), uint(0u)), _GLF_IDENTITY(1u, min(1u, 1u)) << _GLF_IDENTITY(_GLF_IDENTITY(uint(0u), uint(0u)), max(_GLF_IDENTITY(uint(0u), uint(0u)), _GLF_IDENTITY(uint(0u), uint(0u))))))), 0u)))) ^ uvec2(_GLF_IDENTITY(0u, ~ (~ (_GLF_IDENTITY(0u, max(0u, 0u))))), 0u) : _GLF_FUZZED((uvec2(172963u, 124979u) - uvec2(54797u, 86079u))))))) / uvec2(1u, 1u)), uvec2((_GLF_IDENTITY(1u << _GLF_IDENTITY(uint(0u), uint(0u)), max(1u << _GLF_IDENTITY(_GLF_IDENTITY(uint(0u), uint(0u)), clamp(_GLF_IDENTITY(uint(0u), uint(0u)), _GLF_IDENTITY(uint(0u), uint(0u)), _GLF_IDENTITY(uint(0u), uint(0u)))), _GLF_IDENTITY(_GLF_IDENTITY(1u, 1u * (1u)), (1u) | 0u) << _GLF_IDENTITY(uint(_GLF_IDENTITY(0u, (0u) / 1u)), _GLF_IDENTITY(uint(0u), (uint(0u)) | _GLF_IDENTITY(0u, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(subgroup_id) : 0u))))))), 0u))))), (_GLF_IDENTITY(1u << _GLF_IDENTITY(_GLF_IDENTITY(uint(0u), _GLF_IDENTITY(uint(0u), uint(_GLF_IDENTITY(uvec3(uint(0u), 1u, 1u), max(_GLF_IDENTITY(uvec3(uint(0u), 1u, 1u), max(uvec3(uint(0u), 1u, 1u), uvec3(uint(0u), 1u, 1u))), uvec3(uint(0u), 1u, 1u)))))), max(_GLF_IDENTITY(uint(_GLF_IDENTITY(0u, (0u) + 0u)), uint(0u)), _GLF_IDENTITY(_GLF_IDENTITY(uint(0u), (uint(0u)) * ((1u << _GLF_IDENTITY(uint(4u), uint(4u))) >> _GLF_IDENTITY(uint(4u), _GLF_IDENTITY(uint(4u), min(uint(4u), _GLF_IDENTITY(uint(4u), clamp(uint(4u), uint(4u), uint(4u)))))))), uint(0u)))), _GLF_IDENTITY(max(1u << _GLF_IDENTITY(_GLF_IDENTITY(uint(0u), ~ (~ (uint(0u)))), uint(0u)), _GLF_IDENTITY(1u, max(_GLF_IDENTITY(1u, max(_GLF_IDENTITY(1u, _GLF_IDENTITY(0u | (_GLF_IDENTITY(1u, (true ? 1u : _GLF_FUZZED(subgroup_id)))), ~ (~ (0u | (_GLF_IDENTITY(1u, (true ? 1u : _GLF_FUZZED(subgroup_id)))))))), 1u)), _GLF_IDENTITY(1u, min(1u, 1u)))) << _GLF_IDENTITY(uint(_GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, 0u ^ (0u))) ^ 0u)), uint(0u))), _GLF_IDENTITY((max(1u << _GLF_IDENTITY(uint(0u), uint(0u)), 1u << _GLF_IDENTITY(uint(0u), uint(0u)))) * 1u, ((max(1u << _GLF_IDENTITY(uint(0u), uint(0u)), 1u << _GLF_IDENTITY(uint(0u), uint(0u)))) * 1u) ^ 0u)))))) >> _GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(0u, 0u | (0u)), _GLF_IDENTITY((false ? _GLF_FUZZED(194685u) : 0u), _GLF_IDENTITY(clamp((false ? _GLF_FUZZED(194685u) : 0u), (false ? _GLF_FUZZED(194685u) : 0u), (false ? _GLF_FUZZED(194685u) : 0u)), (false ? _GLF_FUZZED(workgroup_base) : clamp((false ? _GLF_FUZZED(194685u) : 0u), (false ? _GLF_FUZZED(194685u) : 0u), (false ? _GLF_FUZZED(194685u) : 0u)))))), (_GLF_IDENTITY(0u, _GLF_IDENTITY((_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, ! (! (false))))) ? _GLF_FUZZED(194685u) : 0u), clamp((false ? _GLF_FUZZED(194685u) : 0u), _GLF_IDENTITY((false ? _GLF_FUZZED(194685u) : 0u), max(_GLF_IDENTITY((false ? _GLF_FUZZED(194685u) : 0u), clamp((false ? _GLF_FUZZED(194685u) : 0u), (false ? _GLF_FUZZED(194685u) : 0u), (false ? _GLF_FUZZED(194685u) : 0u))), (false ? _GLF_FUZZED(194685u) : 0u))), (false ? _GLF_FUZZED(_GLF_IDENTITY(194685u, max(_GLF_IDENTITY(194685u, (false ? _GLF_FUZZED(bitfieldExtract(subgroup_size, 58909, -3466)) : 194685u)), 194685u))) : 0u))))) + uint(_GLF_ZERO(0.0, injectionSwitch.x)))), uint(0u)), (_GLF_IDENTITY(_GLF_IDENTITY(uint(0u), uint(0u)), (_GLF_IDENTITY(_GLF_IDENTITY(uint(0u), uint(0u)), 0u | (_GLF_IDENTITY(uint(0u), uint(0u))))) >> 0u)) << 0u))), (true ? _GLF_IDENTITY(uvec3(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) | 0u), (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) | 0u), (_GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) | 0u)) | 0u)) | (_GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) | 0u))), 1u, _GLF_IDENTITY(((1u << _GLF_IDENTITY(uint(0u), uint(0u))) >> _GLF_IDENTITY(_GLF_IDENTITY(uint(0u), uint(0u)), max(_GLF_IDENTITY(uint(0u), uint(0u)), _GLF_IDENTITY(_GLF_IDENTITY(uint(0u), uint(0u)), clamp(_GLF_IDENTITY(uint(0u), uint(0u)), _GLF_IDENTITY(uint(0u), uint(0u)), _GLF_IDENTITY(uint(0u), uint(0u))))))), _GLF_IDENTITY(uint(uvec2((_GLF_IDENTITY((1u << _GLF_IDENTITY(uint(0u), uint(0u))), uint(uint((1u << _GLF_IDENTITY(uint(0u), uint(0u)))))) >> _GLF_IDENTITY(uint(_GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, (1u ^ 1u) | (0u))) >> 0u)), uint(0u))), 0u)), max(uint(uvec2(((1u << _GLF_IDENTITY(uint(0u), uint(0u))) >> _GLF_IDENTITY(uint(0u), uint(0u))), 0u)), uint(uvec2(((_GLF_IDENTITY(1u << _GLF_IDENTITY(uint(0u), uint(0u)), max(1u << _GLF_IDENTITY(uint(0u), uint(0u)), _GLF_IDENTITY(1u << _GLF_IDENTITY(uint(0u), uint(0u)), (false ? _GLF_FUZZED(workgroup_id) : 1u << _GLF_IDENTITY(uint(0u), uint(0u))))))) >> _GLF_IDENTITY(uint(0u), uint(0u))), 0u)))))), clamp(uvec3(_GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) | 0u), 1u, ((1u << _GLF_IDENTITY(uint(0u), _GLF_IDENTITY(uint(0u), (uint(0u)) * (1u & 1u)))) >> _GLF_IDENTITY(uint(0u), uint(0u)))), uvec3(_GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) | 0u), 1u, ((1u << _GLF_IDENTITY(_GLF_IDENTITY(uint(0u), uint(0u)), 0u | (_GLF_IDENTITY(_GLF_IDENTITY(uint(0u), uint(0u)), (false ? _GLF_FUZZED(workgroup_size) : _GLF_IDENTITY(uint(0u), uint(0u))))))) >> _GLF_IDENTITY(uint(0u), uint(0u)))), uvec3(_GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) | 0u), 1u, ((1u << _GLF_IDENTITY(uint(0u), uint(_GLF_IDENTITY(0u, (_GLF_IDENTITY(_GLF_IDENTITY(0u, ~ (~ (0u))), min(_GLF_IDENTITY(0u, ~ (~ (0u))), _GLF_IDENTITY(_GLF_IDENTITY(0u, ~ (~ (0u))), max(_GLF_IDENTITY(0u, ~ (~ (0u))), _GLF_IDENTITY(0u, ~ (~ (0u)))))))) | (0u))))) >> _GLF_IDENTITY(uint(_GLF_IDENTITY(0u, (1u ^ 1u) ^ (0u))), uint(0u)))))) : _GLF_FUZZED(uvec3(13361u, 53031u, 65706u))))))));
 uint virtual_gid = workgroup_base + subgroup_base + subgroup_local_id;
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))))))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
  }
 else
  {
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(_GLF_IDENTITY(! (false), bool(bvec3(! (false), true, false))), _GLF_IDENTITY((_GLF_IDENTITY(! (false), bool(bvec3(! (false), true, false)))), ! (! ((_GLF_IDENTITY(! (false), bool(bvec3(! (false), true, false))))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     barrier();
    }
   else
    {
    }
  }
 uint next_virtual_gid = _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, _GLF_IDENTITY(0u ^ (workgroup_base), (0u ^ (workgroup_base)) ^ 0u)), _GLF_IDENTITY((workgroup_base), ((workgroup_base)) | ((workgroup_base))) << uint(_GLF_ZERO(0.0, injectionSwitch.x))) + _GLF_IDENTITY(subgroup_base, (subgroup_base) | (subgroup_base)) + (_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, max((subgroup_local_id + 1) % subgroup_size, _GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, min(_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, ((subgroup_local_id + 1) % subgroup_size) + 0u), (subgroup_local_id + 1) % subgroup_size))))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, _GLF_IDENTITY(0u ^ (workgroup_base), (0u ^ (workgroup_base)) ^ 0u)), _GLF_IDENTITY((workgroup_base), ((workgroup_base)) | ((workgroup_base))) << uint(_GLF_ZERO(0.0, injectionSwitch.x))) + _GLF_IDENTITY(subgroup_base, (subgroup_base) | (subgroup_base)) + (_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, max((subgroup_local_id + 1) % subgroup_size, _GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, min(_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, ((subgroup_local_id + 1) % subgroup_size) + 0u), (subgroup_local_id + 1) % subgroup_size))))), 0u + (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, _GLF_IDENTITY(0u ^ (workgroup_base), (0u ^ (workgroup_base)) ^ 0u)), _GLF_IDENTITY((workgroup_base), ((workgroup_base)) | ((workgroup_base))) << uint(_GLF_ZERO(0.0, injectionSwitch.x))) + _GLF_IDENTITY(subgroup_base, (subgroup_base) | (subgroup_base)) + (_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, max((subgroup_local_id + 1) % subgroup_size, _GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, min(_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, ((subgroup_local_id + 1) % subgroup_size) + 0u), (subgroup_local_id + 1) % subgroup_size))))), 0u + (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, _GLF_IDENTITY(0u ^ (workgroup_base), (0u ^ (workgroup_base)) ^ 0u)), _GLF_IDENTITY((workgroup_base), ((workgroup_base)) | ((workgroup_base))) << uint(_GLF_ZERO(0.0, injectionSwitch.x))) + _GLF_IDENTITY(subgroup_base, (subgroup_base) | (subgroup_base)) + (_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, max((subgroup_local_id + 1) % subgroup_size, _GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, min(_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, ((subgroup_local_id + 1) % subgroup_size) + 0u), (subgroup_local_id + 1) % subgroup_size)))))))))) / 1u);
 uint read = atomicLoad(buf[_GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, (virtual_gid) | _GLF_IDENTITY((virtual_gid), ((virtual_gid)) | ((virtual_gid)))), (_GLF_IDENTITY(virtual_gid, (virtual_gid) | (virtual_gid))) | (_GLF_IDENTITY(virtual_gid, (virtual_gid) | (virtual_gid))))], 4, _GLF_IDENTITY(64, (_GLF_IDENTITY(64, (_GLF_IDENTITY(false ? _GLF_FUZZED(85228) : 64, int(_GLF_IDENTITY(ivec3(false ? _GLF_FUZZED(85228) : 64, 0, 1), ivec3(ivec3(ivec3(false ? _GLF_FUZZED(85228) : 64, 0, 1))))))))) | (_GLF_IDENTITY(64, (_GLF_IDENTITY(64, (true ? 64 : _GLF_FUZZED(-34460)))) >> (0 | 0)))), 2);
 if(_GLF_DEAD(false))
  barrier();
 do
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bvec3(false, true, true)))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), true, true, _GLF_IDENTITY(false, bool(bool(false)))))), bool(bvec4(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), _GLF_IDENTITY(true, bool(bvec4(_GLF_IDENTITY(true, ! (! (true))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, false))), true, false))), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
       barrier();
      }
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 ^ 0)); _injected_loop_counter ++)
        {
         return;
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
   else
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec3(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))
      return;
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(mat2x3(injectionSwitch.x, 1.0, 1.0, tan(abs(0.0)), 1.0, 0.0), (mat2x3(injectionSwitch.x, 1.0, 1.0, tan(abs(0.0)), 1.0, 0.0)) + mat2x3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))) > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0)) * 1.0))), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))), bool(bvec3(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(mat2x3(injectionSwitch.x, 1.0, 1.0, tan(abs(0.0)), 1.0, 0.0), (mat2x3(injectionSwitch.x, 1.0, 1.0, tan(abs(0.0)), 1.0, 0.0)) + mat2x3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))) > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0)) * 1.0))), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))), false, false)))))
      barrier();
     atomicStore(buf[next_virtual_gid], uint(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1, int(ivec2(_GLF_IDENTITY(1, min(1, 1)), 1))), (_GLF_IDENTITY(1, int(ivec2(_GLF_IDENTITY(1, min(1, 1)), 1)))) | (_GLF_IDENTITY(1, int(ivec2(_GLF_IDENTITY(1, min(1, 1)), 1))))), max(_GLF_IDENTITY(1, int(ivec2(_GLF_IDENTITY(1, min(1, 1)), 1))), _GLF_IDENTITY(1, int(ivec2(_GLF_IDENTITY(1, min(1, 1)), 1))))), _GLF_IDENTITY(_GLF_IDENTITY((1), min((1), (1))), (_GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, bool(bool(true))))) ? _GLF_IDENTITY((1), min((1), (1))) : _GLF_FUZZED(-76142))) | _GLF_IDENTITY((1), clamp((1), (1), (1))))), 4, 64, 4);
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(injectionSwitch.x > injectionSwitch.y, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), true, true)), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bvec2(injectionSwitch.x > injectionSwitch.y, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (_GLF_IDENTITY(bool(bvec2(injectionSwitch.x > injectionSwitch.y, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (bool(bvec2(_GLF_IDENTITY(injectionSwitch, vec2(mat3(injectionSwitch, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0))).x > injectionSwitch.y, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) || false)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true, _GLF_IDENTITY(true, true && (true)))), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED((-2209.4378 / vec2(9969.3535, 4.7))))).x > injectionSwitch.y, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (_GLF_IDENTITY(bool(bvec2(injectionSwitch.x > injectionSwitch.y, _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), (! (injectionSwitch.x > injectionSwitch.y)) || false))))))), (bool(bvec2(injectionSwitch.x > injectionSwitch.y, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) || _GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec3(bvec3(_GLF_IDENTITY(bvec3(false, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec3(bvec4(bvec3(false, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true)))))))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true, true)), (bool(bvec3(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bvec2(injectionSwitch.x > injectionSwitch.y, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (_GLF_IDENTITY(bool(bvec2(injectionSwitch.x > injectionSwitch.y, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (bool(bvec2(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) || false)) || _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-792.874)), float(injectionSwitch.x), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))) > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0))))), true, true))) && true), false)), true && (_GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bvec2(injectionSwitch.x > injectionSwitch.y, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (_GLF_IDENTITY(bool(bvec2(injectionSwitch.x > injectionSwitch.y, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (bool(bvec2(injectionSwitch.x > injectionSwitch.y, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) || false)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true, true)), (bool(bvec3(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bvec2(injectionSwitch.x > injectionSwitch.y, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (_GLF_IDENTITY(bool(bvec2(injectionSwitch.x > injectionSwitch.y, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (bool(bvec2(injectionSwitch.x > injectionSwitch.y, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) || false)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true, true))) && true), false)), false || (bool(bvec2(_GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bvec2(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true))), (_GLF_IDENTITY(_GLF_IDENTITY(bool(bvec2(injectionSwitch.x > injectionSwitch.y, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (bool(bvec2(injectionSwitch.x > injectionSwitch.y, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) || false), (_GLF_IDENTITY(bool(bvec2(injectionSwitch.x > injectionSwitch.y, _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)))))), (bool(bvec2(injectionSwitch.x > injectionSwitch.y, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) || false)) || false)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true, true)), _GLF_IDENTITY((bool(bvec3(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bvec2(injectionSwitch.x > injectionSwitch.y, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (_GLF_IDENTITY(bool(bvec2(injectionSwitch.x > injectionSwitch.y, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (bool(bvec2(injectionSwitch.x > injectionSwitch.y, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) || false)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true, true))) && true, _GLF_IDENTITY(true, ! (! (true))) && ((bool(bvec3(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bvec2(injectionSwitch.x > injectionSwitch.y, _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, 0.0 + (injectionSwitch.y)))))), (_GLF_IDENTITY(bool(bvec2(injectionSwitch.x > injectionSwitch.y, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), _GLF_IDENTITY((bool(bvec2(injectionSwitch.x > injectionSwitch.y, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) || false, ! (! (_GLF_IDENTITY((bool(bvec2(injectionSwitch.x > injectionSwitch.y, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) || false, ((bool(bvec2(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0) > injectionSwitch.y, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) || false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true, true))) && true))), false))))))), false || (bool(bvec3(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(injectionSwitch.x > injectionSwitch.y, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), true, true))))))))))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec3(injectionSwitch.x > injectionSwitch.y, true, true)))))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
       return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            barrier();
           for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(6), int(6))); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(_GLF_IDENTITY(1, 0 | (1)), int(int(_GLF_IDENTITY(_GLF_IDENTITY(1, 0 | (1)), (false ? _GLF_FUZZED(62138) : _GLF_IDENTITY(1, 0 | (_GLF_IDENTITY(1, ~ (~ (1))))))))))); _injected_loop_counter ++)
            {
             return;
            }
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           barrier();
          }
         else
          {
          }
        }
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) || false), (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         return;
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = (_GLF_IDENTITY(0, (0) >> (0 << _GLF_IDENTITY(int(1), int(1)))) << _GLF_IDENTITY(int(0), int(0))); _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
        {
         barrier();
        }
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    return;
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
    }
   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))
      barrier();
    }
   else
    {
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   if(_GLF_DEAD(false))
    barrier();
   return;
  }
 subgroupBarrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).x > injectionSwitch.y))))
  barrier();
 atomicStore(checker[virtual_gid], read, 4, 64, 4);
 do
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) || false), bool(bool(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) || false))))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           barrier();
          }
         else
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
            barrier();
          }
        }
       return;
      }
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       return;
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))));
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(injectionSwitch.x > injectionSwitch.y, false, false, true)))))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, false || (injectionSwitch.x < injectionSwitch.y))))))
    {
     barrier();
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END
BUFFER checker DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected_checker DATA_TYPE uint32 SIZE 8388096 FILL 0

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 
  BIND BUFFER checker AS storage DESCRIPTOR_SET 0 BINDING 2 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT checker EQ_BUFFER expected_checker
