#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_15 {
 uvec3 _f0;
} ;

struct _GLF_struct_14 {
 mat4x3 _f0;
 uvec3 _f1;
 uvec4 _f2;
} ;

struct _GLF_struct_13 {
 uint _f0;
 mat2 _f1;
 bool _f2;
} ;

struct _GLF_struct_16 {
 mat2x4 _f0;
 float _f1;
 mat2 _f2;
 _GLF_struct_13 _f3;
 _GLF_struct_14 _f4;
 _GLF_struct_15 _f5;
 mat3 _f6;
} ;

struct _GLF_struct_11 {
 mat4x3 _f0;
} ;

struct _GLF_struct_10 {
 mat2x3 _f0;
 float _f1;
 bvec2 _f2;
 ivec2 _f3;
} ;

struct _GLF_struct_12 {
 _GLF_struct_10 _f0;
 _GLF_struct_11 _f1;
 bvec4 _f2;
} ;

struct _GLF_struct_8 {
 int _f0;
 ivec3 _f1;
 int _f2;
} ;

struct _GLF_struct_7 {
 uint _f0;
 mat4x2 _f1;
 mat2 _f2;
 mat3 _f3;
 bvec4 _f4;
 vec2 _f5;
} ;

struct _GLF_struct_6 {
 bvec3 _f0;
 ivec4 _f1;
 int _f2;
 mat2x3 _f3;
 mat4x2 _f4;
 uvec4 _f5;
} ;

struct _GLF_struct_5 {
 mat4x2 _f0;
 mat2x4 _f1;
} ;

struct _GLF_struct_4 {
 mat3x4 _f0;
 vec2 _f1;
 bvec3 _f2;
} ;

struct _GLF_struct_9 {
 _GLF_struct_4 _f0;
 _GLF_struct_5 _f1;
 _GLF_struct_6 _f2;
 _GLF_struct_7 _f3;
 _GLF_struct_8 _f4;
 mat3x2 _f5;
} ;

struct _GLF_struct_2 {
 mat3x2 _f0;
 int _f1;
} ;

struct _GLF_struct_1 {
 bvec3 _f0;
} ;

struct _GLF_struct_0 {
 uint _f0;
 vec4 _f1;
 ivec3 _f2;
 uint _f3;
 vec4 _f4;
 bvec4 _f5;
 bvec4 _f6;
} ;

struct _GLF_struct_3 {
 ivec3 _f0;
 bvec2 _f1;
 _GLF_struct_0 _f2;
 ivec3 _f3;
 _GLF_struct_1 _f4;
 _GLF_struct_2 _f5;
 bvec3 _f6;
} ;

struct _GLF_struct_17 {
 _GLF_struct_3 _f0;
 ivec2 _f1;
 _GLF_struct_9 _f2;
 _GLF_struct_12 _f3;
 bool _f4;
 mat2x4 _f5;
 uint workgroup_base;
 _GLF_struct_16 _f6;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(false))
  return;
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4))); _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)) && true)))
    {
     for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (int(5)) - 0))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(5, max(5, 5))), int(5))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       return;
      }
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     return;
    }
  }
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).y))))
  return;
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 else
  {
  }
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 | _GLF_IDENTITY((68558 & int(_GLF_ZERO(0.0, injectionSwitch.x))), (true ? _GLF_IDENTITY((68558 & int(_GLF_ZERO(0.0, injectionSwitch.x))), ((68558 & int(_GLF_ZERO(0.0, injectionSwitch.x)))) | ((68558 & int(_GLF_ZERO(0.0, injectionSwitch.x))))) : _GLF_FUZZED(_injected_loop_counter))))); _injected_loop_counter --)
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
          }
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
            return;
          }
         else
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, (false) || false), (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))))
              {
               do
                {
                 if(_GLF_DEAD(false))
                  return;
                 for(int _injected_loop_counter = (1 | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
                    {
                     if(_GLF_DEAD(false))
                      continue;
                     continue;
                    }
                   return;
                  }
                 if(_GLF_DEAD(false))
                  break;
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
            }
          }
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_DEAD(false))
          continue;
         do
          {
           if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).x > injectionSwitch.y)), false || (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! _GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || ((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))))), false || (_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false))), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   return;
                  }
                 else
                  {
                  }
                }
               continue;
              }
             do
              {
               if(_GLF_DEAD(false))
                break;
               do
                {
                 return;
                 if(_GLF_DEAD(false))
                  break;
                }
               while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), _GLF_IDENTITY(bool(bool(_GLF_WRAPPED_LOOP(false))), bool(bvec3(bool(bool(_GLF_WRAPPED_LOOP(false))), false, _GLF_IDENTITY(false, ! (! (false))))))));
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(true, (true) && true) && (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, 1.0 * (injectionSwitch.y)), bool(bvec2(injectionSwitch.x > injectionSwitch.y, true))))), bool(bvec2(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(true, (true) && true) && (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), bool(bvec2(injectionSwitch.x > injectionSwitch.y, true))))), false)))) || false)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(true, (true) && true) && (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, 1.0 * (injectionSwitch.y)), bool(bvec2(injectionSwitch.x > injectionSwitch.y, true))))), bool(bvec2(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(true, (true) && true) && (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), bool(bvec2(injectionSwitch.x > injectionSwitch.y, true))))), false)))) || false)))))));
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
         if(_GLF_DEAD(false))
          return;
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      break;
    }
  }
 else
  {
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   do
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   if(_GLF_DEAD(false))
    {
     do
      {
       return;
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).y))));
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   return;
  }
 if(_GLF_DEAD(false))
  return;
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     do
      {
       return;
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_DEAD(false))
    return;
   do
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
      break;
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 & 89392)); _injected_loop_counter --)
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
           return;
          }
        }
       else
        {
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
        {
         if(_GLF_DEAD(false))
          break;
         return;
        }
      }
     else
      {
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y))))));
  }
 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3))); _GLF_WRAPPED_LOOP(_injected_loop_counter > (int(_GLF_ZERO(0.0, injectionSwitch.x)) >> _GLF_IDENTITY(int(4), int(4)))); _injected_loop_counter --)
      {
       return;
      }
    }
  }
 else
  {
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 _GLF_struct_17 _GLF_struct_replacement_17 = _GLF_struct_17(_GLF_struct_3(ivec3(1), bvec2(true), _GLF_struct_0(_GLF_IDENTITY(1u, ~ (~ (1u))), vec4(1.0), ivec3(_GLF_IDENTITY(1, (false ? _GLF_FUZZED(93419) : 1))), 1u, vec4(_GLF_IDENTITY(1.0, 1.0 * (_GLF_IDENTITY(1.0, _GLF_IDENTITY((1.0), max((1.0), (1.0))) * 1.0)))), bvec4(true), bvec4(true)), ivec3(1), _GLF_struct_1(bvec3(true)), _GLF_struct_2(mat3x2(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, float(vec3(1.0, 0.0, sqrt(1.0))))) - 0.0)), 1), _GLF_IDENTITY(bvec3(true), bvec3(bvec4(bvec3(true), true)))), ivec2(1), _GLF_struct_9(_GLF_struct_4(mat3x4(1.0), _GLF_IDENTITY(vec2(1.0), clamp(vec2(1.0), vec2(1.0), vec2(1.0))), bvec3(true)), _GLF_struct_5(mat4x2(1.0), mat2x4(_GLF_IDENTITY(1.0, float(_GLF_IDENTITY(mat3(1.0, 1.0, 0.0, _GLF_IDENTITY(0.0, float(vec4(_GLF_IDENTITY(0.0, _GLF_IDENTITY(float(_GLF_IDENTITY(mat2x3(_GLF_IDENTITY(0.0, min(0.0, 0.0)), 1.0, 0.0, 0.0, _GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_IDENTITY(_GLF_FUZZED(-4.5), max(_GLF_FUZZED(-4.5), _GLF_FUZZED(-4.5)))), bool(false))), sqrt(1.0)), (mat2x3(_GLF_IDENTITY(0.0, min(0.0, 0.0)), 1.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(sqrt(1.0), (true ? sqrt(1.0) : _GLF_FUZZED(7038.1988))))) + mat2x3(0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, (0.0) / 1.0), 0.0, 0.0))), (_GLF_IDENTITY(false ? _GLF_FUZZED(-21.21) : float(_GLF_IDENTITY(mat2x3(_GLF_IDENTITY(0.0, min(0.0, 0.0)), 1.0, 0.0, 0.0, 0.0, sqrt(1.0)), (mat2x3(_GLF_IDENTITY(0.0, min(0.0, 0.0)), 1.0, 0.0, 0.0, 0.0, sqrt(1.0))) + mat2x3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0))), float(_GLF_IDENTITY(mat3x2(_GLF_IDENTITY(false ? _GLF_FUZZED(-21.21) : float(_GLF_IDENTITY(mat2x3(_GLF_IDENTITY(0.0, min(0.0, 0.0)), 1.0, 0.0, 0.0, 0.0, sqrt(1.0)), (mat2x3(_GLF_IDENTITY(0.0, min(0.0, 0.0)), 1.0, 0.0, 0.0, 0.0, sqrt(1.0))) + mat2x3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0))), (_GLF_IDENTITY(false ? _GLF_FUZZED(-21.21) : float(_GLF_IDENTITY(mat2x3(_GLF_IDENTITY(0.0, min(0.0, 0.0)), 1.0, 0.0, 0.0, 0.0, sqrt(1.0)), (mat2x3(_GLF_IDENTITY(0.0, min(0.0, 0.0)), 1.0, 0.0, 0.0, 0.0, sqrt(1.0))) + mat2x3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0))), max(_GLF_IDENTITY(false ? _GLF_FUZZED(-21.21) : float(_GLF_IDENTITY(mat2x3(_GLF_IDENTITY(0.0, min(0.0, 0.0)), 1.0, 0.0, 0.0, 0.0, sqrt(1.0)), (mat2x3(_GLF_IDENTITY(0.0, min(0.0, 0.0)), 1.0, 0.0, 0.0, 0.0, sqrt(1.0))) + mat2x3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0))), (false ? _GLF_FUZZED(0.8) : false ? _GLF_FUZZED(-21.21) : float(_GLF_IDENTITY(mat2x3(_GLF_IDENTITY(0.0, min(0.0, 0.0)), 1.0, 0.0, 0.0, 0.0, sqrt(1.0)), (mat2x3(_GLF_IDENTITY(0.0, min(0.0, 0.0)), 1.0, 0.0, 0.0, 0.0, sqrt(1.0))) + mat2x3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0))))), _GLF_IDENTITY(false ? _GLF_FUZZED(-21.21) : float(_GLF_IDENTITY(mat2x3(_GLF_IDENTITY(0.0, min(0.0, 0.0)), 1.0, 0.0, 0.0, 0.0, sqrt(1.0)), (mat2x3(_GLF_IDENTITY(0.0, min(0.0, 0.0)), 1.0, 0.0, 0.0, 0.0, sqrt(1.0))) + mat2x3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0))), clamp(false ? _GLF_FUZZED(-21.21) : float(_GLF_IDENTITY(mat2x3(_GLF_IDENTITY(0.0, min(0.0, 0.0)), 1.0, 0.0, 0.0, 0.0, sqrt(1.0)), (mat2x3(_GLF_IDENTITY(0.0, min(0.0, 0.0)), 1.0, 0.0, 0.0, 0.0, sqrt(1.0))) + mat2x3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0))), false ? _GLF_FUZZED(-21.21) : float(_GLF_IDENTITY(mat2x3(_GLF_IDENTITY(0.0, min(0.0, 0.0)), 1.0, 0.0, 0.0, 0.0, sqrt(1.0)), (mat2x3(_GLF_IDENTITY(0.0, min(0.0, 0.0)), 1.0, 0.0, 0.0, 0.0, sqrt(1.0))) + mat2x3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0))), false ? _GLF_FUZZED(-21.21) : float(_GLF_IDENTITY(mat2x3(_GLF_IDENTITY(0.0, min(0.0, 0.0)), 1.0, 0.0, 0.0, 0.0, sqrt(1.0)), (mat2x3(_GLF_IDENTITY(0.0, min(0.0, 0.0)), 1.0, 0.0, 0.0, 0.0, sqrt(1.0))) + mat2x3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))))))) / 1.0), 1.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 0.0), (mat3x2(_GLF_IDENTITY(false ? _GLF_FUZZED(-21.21) : float(_GLF_IDENTITY(mat2x3(_GLF_IDENTITY(0.0, min(0.0, 0.0)), 1.0, 0.0, 0.0, 0.0, sqrt(1.0)), (mat2x3(_GLF_IDENTITY(0.0, min(0.0, _GLF_IDENTITY(0.0, max(0.0, _GLF_IDENTITY(0.0, _GLF_IDENTITY(float(mat3(0.0, determinant(mat4(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0)), 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0)), 1.0 * (float(mat3(0.0, determinant(mat4(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0)), 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0))))))))), _GLF_IDENTITY(1.0, max(1.0, _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)))), 0.0, 0.0, 0.0, sqrt(1.0))) + mat2x3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0))), (false ? _GLF_FUZZED(-21.21) : float(_GLF_IDENTITY(mat2x3(_GLF_IDENTITY(0.0, min(0.0, 0.0)), 1.0, 0.0, 0.0, 0.0, sqrt(1.0)), (mat2x3(_GLF_IDENTITY(0.0, min(0.0, 0.0)), 1.0, 0.0, 0.0, 0.0, sqrt(1.0))) + mat2x3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))) / 1.0), 1.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 0.0)) - mat3x2(0.0, 0.0, 0.0, 0.0, 0.0, 0.0))))))), 1.0, 1.0, 1.0))), 0.0, 1.0, _GLF_IDENTITY(1.0, clamp(1.0, _GLF_IDENTITY(1.0, (1.0) - 0.0), 1.0)), 0.0, 1.0), (true ? _GLF_IDENTITY(mat3(1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0), _GLF_IDENTITY(mat3(mat4x3(mat3(1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0))), mat3(mat4x3(_GLF_IDENTITY(mat3(mat4x3(mat3(1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0))), mat3(mat3(mat3(mat4x3(mat3(1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0)))))))))) : _GLF_FUZZED((+ mat3(-2.5, -41.94, -2295.5649, 7.4, 3.6, -692.460, -6.8, -7.1, 3470.8089))))))))), _GLF_struct_6(bvec3(true), ivec4(_GLF_IDENTITY(_GLF_IDENTITY(1, min(1, 1)), (_GLF_IDENTITY(_GLF_IDENTITY(1, clamp(1, 1, _GLF_IDENTITY(_GLF_IDENTITY(1, int(ivec3(1, 0, 0))), (_GLF_IDENTITY(1, int(ivec2(1, 1)))) | _GLF_IDENTITY((1), ((1)) | ((1)))))), ~ (~ (_GLF_IDENTITY(1, int(ivec4(_GLF_IDENTITY(1, (1) ^ 0), 0, 0, 0))))))) - 0)), 1, mat2x3(1.0), mat4x2(1.0), uvec4(1u)), _GLF_struct_7(1u, mat4x2(1.0), mat2(1.0), mat3(1.0), bvec4(true), vec2(1.0)), _GLF_struct_8(1, ivec3(1), 1), mat3x2(1.0)), _GLF_struct_12(_GLF_struct_10(mat2x3(1.0), 1.0, bvec2(true), ivec2(1)), _GLF_struct_11(mat4x3(1.0)), bvec4(true)), true, mat2x4(1.0), workgroup_size * workgroup_id, _GLF_struct_16(mat2x4(1.0), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), max(1.0, _GLF_IDENTITY(1.0, (_GLF_IDENTITY(true ? 1.0 : _GLF_FUZZED(-4.2), clamp(_GLF_IDENTITY(true ? 1.0 : _GLF_FUZZED(-4.2), tan(0.0) + (true ? 1.0 : _GLF_FUZZED(-4.2))), true ? 1.0 : _GLF_FUZZED(-4.2), _GLF_IDENTITY(true, (_GLF_IDENTITY(true, ! (! (true)))) || false) ? 1.0 : _GLF_FUZZED(-4.2))))))), mix(float(_GLF_FUZZED(((-9.0 + -6.7)))), float(_GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-4.2)))))), bool(true))), mat2(1.0), _GLF_struct_13(1u, mat2(1.0), true), _GLF_struct_14(mat4x3(1.0), uvec3(1u), uvec4(1u)), _GLF_struct_15(uvec3(1u)), mat3(1.0)));
 do
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
    return;
  }
 while(_GLF_WRAPPED_LOOP(false));
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
   do
    {
     for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false)))))
          continue;
         continue;
        }
       for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              continue;
             for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), int(ivec4(int(0), int(_GLF_ZERO(0.0, injectionSwitch.x)), 1, 1))))) >> _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), ~ (_GLF_IDENTITY(~ _GLF_IDENTITY(_GLF_IDENTITY((int(0)), max((int(0)), (int(0)))), max((int(_GLF_IDENTITY(0, (0) | 0))), (int(0)))), (_GLF_IDENTITY(~ (int(0)), clamp(~ (int(0)), ~ (int(0)), _GLF_IDENTITY(~ (int(0)), int(ivec4(~ (int(0)), 0, 0, 1)))))) | 0))))); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 >> _GLF_IDENTITY(int(2), int(2)))); _injected_loop_counter --)
              {
               for(int _injected_loop_counter = int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED((- -49.86)))), injectionSwitch.y)))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                {
                 return;
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  break;
                }
              }
            }
           return;
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) / int(_GLF_ONE(1.0, injectionSwitch.y))) < 1); _injected_loop_counter ++)
            {
             return;
            }
          }
        }
       if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), true, true, false))))
        continue;
       if(_GLF_DEAD(false))
        continue;
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    {
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
       return;
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1]))) - vec2(0.0, 0.0)).x > injectionSwitch.y))));
    }
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         return;
        }
       else
        {
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
      }
    }
  }
 else
  {
  }
 uint subgroup_base = subgroup_id * subgroup_size;
 uint virtual_gid = _GLF_IDENTITY(_GLF_struct_replacement_17.workgroup_base + _GLF_IDENTITY(subgroup_base, _GLF_IDENTITY(uint(uvec2(subgroup_base, 0u)), uint(uint(uint(uvec2(subgroup_base, 0u)))))), min(_GLF_struct_replacement_17.workgroup_base + subgroup_base, _GLF_struct_replacement_17.workgroup_base + _GLF_IDENTITY(subgroup_base, (subgroup_base) | 0u))) + _GLF_IDENTITY(subgroup_local_id, min(_GLF_IDENTITY(subgroup_local_id, min(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | 0u), subgroup_local_id)), subgroup_local_id));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
     return;
    }
  }
 uint next_virtual_gid = _GLF_struct_replacement_17.workgroup_base + _GLF_IDENTITY(subgroup_base, clamp(subgroup_base, subgroup_base, subgroup_base)) + ((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, clamp(subgroup_local_id + 1, subgroup_local_id + 1, subgroup_local_id + 1)), _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec3(_GLF_IDENTITY(subgroup_local_id + 1, (false ? _GLF_FUZZED(workgroup_size) : subgroup_local_id + _GLF_IDENTITY(_GLF_IDENTITY(1, (1) - (0 | 0)), _GLF_IDENTITY(int(ivec2(_GLF_IDENTITY(1, (1) - (0 | 0)), 0)), ~ (~ (int(ivec2(_GLF_IDENTITY(1, (1) - (0 | 0)), 0)))))))), 1u, (0u | 0u)), ~ (~ (uvec3(_GLF_IDENTITY(subgroup_local_id + 1, (false ? _GLF_FUZZED(workgroup_size) : subgroup_local_id + 1)), 1u, (0u | 0u)))))), clamp(uint(_GLF_IDENTITY(uvec3(_GLF_IDENTITY(subgroup_local_id + 1, (false ? _GLF_FUZZED(workgroup_size) : _GLF_IDENTITY(subgroup_local_id + _GLF_IDENTITY(1, (1) - (0 | 0)), (subgroup_local_id + _GLF_IDENTITY(1, (1) - (0 | 0))) * 1u))), 1u, (0u | 0u)), ~ (~ (uvec3(_GLF_IDENTITY(subgroup_local_id + 1, (false ? _GLF_FUZZED(workgroup_size) : subgroup_local_id + _GLF_IDENTITY(1, (false ? _GLF_FUZZED(41844) : _GLF_IDENTITY(1, max(1, 1)))))), 1u, (0u | 0u)))))), uint(_GLF_IDENTITY(_GLF_IDENTITY(uvec3(_GLF_IDENTITY(subgroup_local_id + 1, (false ? _GLF_FUZZED(workgroup_size) : subgroup_local_id + _GLF_IDENTITY(1, (1) - (0 | 0)))), 1u, _GLF_IDENTITY((_GLF_IDENTITY(0u, uint(uvec4(0u, 1u, 0u, 1u))) | _GLF_IDENTITY(0u, (0u) * 1u)), ~ (~ (_GLF_IDENTITY((0u | 0u), ((0u | 0u)) << 0u))))), min(uvec3(_GLF_IDENTITY(subgroup_local_id + 1, (false ? _GLF_FUZZED(workgroup_size) : subgroup_local_id + _GLF_IDENTITY(1, (1) - (0 | 0)))), 1u, _GLF_IDENTITY((_GLF_IDENTITY(0u, uint(uvec4(0u, 1u, 0u, 1u))) | _GLF_IDENTITY(0u, (0u) * 1u)), ~ (~ (_GLF_IDENTITY((0u | 0u), ((0u | 0u)) << 0u))))), uvec3(_GLF_IDENTITY(subgroup_local_id + 1, (false ? _GLF_FUZZED(workgroup_size) : subgroup_local_id + _GLF_IDENTITY(1, (1) - (0 | 0)))), 1u, _GLF_IDENTITY((_GLF_IDENTITY(0u, uint(uvec4(0u, 1u, 0u, 1u))) | _GLF_IDENTITY(0u, (0u) * 1u)), ~ (~ (_GLF_IDENTITY((0u | 0u), ((0u | 0u)) << 0u))))))), ~ (~ (uvec3(_GLF_IDENTITY(subgroup_local_id + 1, (false ? _GLF_FUZZED(workgroup_size) : subgroup_local_id + 1)), 1u, (0u | 0u)))))), uint(_GLF_IDENTITY(uvec3(_GLF_IDENTITY(subgroup_local_id + 1, (false ? _GLF_FUZZED(workgroup_size) : _GLF_IDENTITY(subgroup_local_id + _GLF_IDENTITY(1, (1) - (0 | 0)), (subgroup_local_id + _GLF_IDENTITY(1, (1) - (_GLF_IDENTITY(0, (false ? _GLF_FUZZED(82806) : 0)) | 0))) / 1u))), 1u, (_GLF_IDENTITY(0u, (0u) >> 0u) | 0u)), ~ (~ (uvec3(_GLF_IDENTITY(subgroup_local_id + 1, (false ? _GLF_FUZZED(workgroup_size) : subgroup_local_id + 1)), 1u, (0u | 0u)))))))))) % subgroup_size);
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 uint read = 0;
 for(int _injected_loop_counter = (0 ^ 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    break;
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = (_GLF_IDENTITY(_GLF_IDENTITY((0 >> _GLF_IDENTITY(int(4), int(4))), (_GLF_IDENTITY((_GLF_IDENTITY(0, (0) ^ 0) >> _GLF_IDENTITY(int(4), int(4))), (_GLF_IDENTITY((0 >> _GLF_IDENTITY(int(4), int(4))), min((0 >> _GLF_IDENTITY(int(4), int(4))), (0 >> _GLF_IDENTITY(int(4), int(4)))))) | 0)) | ((0 >> _GLF_IDENTITY(int(4), int(4))))) >> _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(2), max(int(2), int(2))), (int(2)) ^ 0), int(_GLF_IDENTITY(2, min(2, _GLF_IDENTITY(2, min(2, 2)))))), ((_GLF_IDENTITY(0, 1 * (0)) >> _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(2), int(2))) / _GLF_IDENTITY(1, (1) - 0))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], max(injectionSwitch[0], injectionSwitch[0])), injectionSwitch[1])).x > _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))).y))))
          continue;
         continue;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
        }
       return;
       if(_GLF_DEAD(false))
        return;
      }
    }
  }
 if(_GLF_DEAD(false))
  return;
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
  {
   atomicStore(buf[next_virtual_gid], uint(1), 4, 64, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(4, _GLF_IDENTITY(int(_GLF_IDENTITY(int(4), max(int(4), int(4)))), min(int(_GLF_IDENTITY(int(4), max(int(4), int(4)))), int(_GLF_IDENTITY(int(4), max(int(4), int(4))))))), (4) - _GLF_IDENTITY(0, _GLF_IDENTITY(min(_GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(-86305))), 0), (min(_GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(-86305))), 0)) | (min(_GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(-86305))), 0))))), (_GLF_IDENTITY(4, _GLF_IDENTITY((_GLF_IDENTITY(4, max(4, 4))), ((_GLF_IDENTITY(4, max(4, 4)))) - 0) - 0)) << 0));
  }
 for(int _injected_loop_counter = (int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (int(_GLF_ONE(1.0, injectionSwitch.y)) & 1)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _GLF_IDENTITY(_injected_loop_counter --, ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (_injected_loop_counter --), 1 * (~ (_injected_loop_counter --))), (~ (_injected_loop_counter --)) << 0))))
  {
   do
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (false)), _GLF_IDENTITY(bool(bvec2((! (false)), false)), true && (bool(bvec2((! (false)), false))))))))
      break;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      continue;
     if(_GLF_DEAD(false))
      break;
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bvec4(false, false, false, false))))))))
      continue;
     if((subgroup_local_id % 2) == 0)
      {
       do
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))))
                return;
               return;
              }
             break;
            }
           if(_GLF_DEAD(false))
            continue;
           break;
          }
         break;
        }
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
         return;
        }
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false))))
        {
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            return;
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(1, (1) - int(_GLF_ZERO(0.0, injectionSwitch.x)))); _injected_loop_counter ++)
              {
               return;
              }
            }
          }
         continue;
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
          break;
        }
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), (! (_GLF_DEAD(false))) || false))))
          return;
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch : _GLF_FUZZED((+ atan(injectionSwitch))))) : _GLF_FUZZED(injectionSwitch))), _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(7180.0313), _GLF_FUZZED(16.76)), vec2(_GLF_IDENTITY((injectionSwitch)[0], ((injectionSwitch)[0]) / 1.0), (injectionSwitch)[1]), bvec2(true, true))))).x < _GLF_IDENTITY(injectionSwitch.y, float(_GLF_IDENTITY(mat3x2(injectionSwitch.y, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), determinant(mat4(1.0, determinant(mat2(1.0, 1.0, 0.0, 1.0)), 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, abs(1.0), 1.0, 0.0, 0.0, 0.0, 1.0)), abs(_GLF_ONE(1.0, injectionSwitch.y)), 1.0), mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (mat3x2(injectionSwitch.y, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), determinant(mat4(1.0, determinant(mat2(1.0, 1.0, 0.0, 1.0)), 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, abs(1.0), 1.0, 0.0, 0.0, 0.0, 1.0)), abs(_GLF_ONE(1.0, injectionSwitch.y)), 1.0)))))))))
          {
           if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(_GLF_IDENTITY(false, false || (false)))) || false))
            continue;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             do
              {
               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   if(_GLF_DEAD(false))
                    {
                     for(int _injected_loop_counter = _GLF_IDENTITY(_GLF_IDENTITY(1, max(1, 1)), (_GLF_IDENTITY(1, max(1, 1))) ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                      {
                       return;
                      }
                     if(_GLF_DEAD(false))
                      continue;
                    }
                  }
                 else
                  {
                  }
                 if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
                  return;
                 if(_GLF_DEAD(false))
                  continue;
                 if(_GLF_DEAD(false))
                  continue;
                 if(_GLF_DEAD(false))
                  return;
                }
               else
                {
                 subgroupAll(false);
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    continue;
                   continue;
                  }
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     return;
                    }
                  }
                 if(_GLF_DEAD(false))
                  break;
                 continue;
                 if(_GLF_DEAD(false))
                  break;
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(_GLF_IDENTITY(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true), bvec3(bvec4(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true), true))))), true, false)))))
                    {
                    }
                   else
                    {
                     return;
                    }
                  }
                }
               if(_GLF_DEAD(false))
                {
                 do
                  {
                   if(_GLF_DEAD(false))
                    break;
                   return;
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           else
            {
            }
          }
         else
          {
           if(_GLF_DEAD(false))
            return;
          }
         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
          break;
        }
       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), true && (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), false || (_GLF_IDENTITY((false), ! (! ((false))))))))), (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (false)))))))))), false || (_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (false))))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))
        {
         for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              continue;
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
              {
               return;
              }
             if(_GLF_DEAD(false))
              break;
            }
          }
        }
       else
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           for(int _injected_loop_counter = ((_GLF_IDENTITY(1, clamp(1, 1, 1)) << _GLF_IDENTITY(_GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(_GLF_IDENTITY(int(_GLF_IDENTITY(int(6), (_GLF_IDENTITY(int(6), (int(6)) / 1)) | (int(6)))), (int(_GLF_IDENTITY(int(6), (_GLF_IDENTITY(int(_GLF_IDENTITY(6, min(6, 6))), (int(6)) / _GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) ^ 0)) << 0))) | _GLF_IDENTITY((int(6)), int(_GLF_IDENTITY(int(_GLF_IDENTITY((int(6)), ((int(6))) / 1)), min(int(_GLF_IDENTITY((int(6)), ((int(6))) / 1)), int(_GLF_IDENTITY((int(6)), ((int(6))) / 1))))))))) / 1)), ~ (~ (int(_GLF_IDENTITY(int(_GLF_IDENTITY(int(6), (_GLF_IDENTITY(int(6), (int(6)) / 1)) | (int(6)))), _GLF_IDENTITY((int(_GLF_IDENTITY(int(6), (_GLF_IDENTITY(int(6), (int(6)) / 1)) | (int(6))))), (1 & 1) * (_GLF_IDENTITY((int(_GLF_IDENTITY(_GLF_IDENTITY(int(6), _GLF_IDENTITY(int(_GLF_IDENTITY(ivec4(_GLF_IDENTITY(int(6), (int(6)) >> 0), (1 & 1), ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))), 0), (false ? _GLF_FUZZED(ivec4(55618, 44003, -55055, -44237)) : _GLF_IDENTITY(ivec4(_GLF_IDENTITY(int(6), (int(6)) >> 0), (1 & 1), ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))), 0), (ivec4(_GLF_IDENTITY(int(6), (int(6)) >> 0), (1 & 1), ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))), 0)) | (ivec4(_GLF_IDENTITY(int(6), (int(6)) >> 0), (1 & 1), ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))), 0)))))), (true ? int(_GLF_IDENTITY(ivec4(_GLF_IDENTITY(int(6), (int(6)) >> 0), (1 & 1), ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))), 0), (false ? _GLF_FUZZED(ivec4(55618, 44003, -55055, -44237)) : _GLF_IDENTITY(ivec4(_GLF_IDENTITY(int(6), (int(6)) >> 0), (1 & 1), ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))), 0), (ivec4(_GLF_IDENTITY(int(6), (int(6)) >> 0), (1 & 1), ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))), 0)) | (ivec4(_GLF_IDENTITY(int(6), (int(6)) >> 0), (1 & 1), ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))), 0)))))) : _GLF_FUZZED(_injected_loop_counter)))), (_GLF_IDENTITY(int(6), (int(6)) / 1)) | (int(6))))), clamp((int(_GLF_IDENTITY(_GLF_IDENTITY(int(6), _GLF_IDENTITY(int(_GLF_IDENTITY(ivec4(_GLF_IDENTITY(int(6), (int(6)) >> 0), (1 & 1), ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))), 0), (false ? _GLF_FUZZED(ivec4(55618, 44003, -55055, -44237)) : _GLF_IDENTITY(ivec4(_GLF_IDENTITY(int(6), (int(6)) >> 0), (1 & 1), ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))), 0), (ivec4(_GLF_IDENTITY(int(6), (int(6)) >> 0), (1 & 1), ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))), 0)) | (ivec4(_GLF_IDENTITY(int(6), (int(6)) >> 0), (1 & 1), ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))), 0)))))), (true ? int(_GLF_IDENTITY(ivec4(_GLF_IDENTITY(int(6), (int(6)) >> 0), (1 & 1), ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))), 0), (false ? _GLF_FUZZED(ivec4(55618, 44003, -55055, -44237)) : _GLF_IDENTITY(ivec4(_GLF_IDENTITY(int(6), (int(6)) >> 0), (1 & 1), ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))), 0), (ivec4(_GLF_IDENTITY(int(6), (int(6)) >> 0), (1 & 1), ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))), 0)) | (ivec4(_GLF_IDENTITY(int(6), (int(6)) >> 0), (1 & 1), ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))), 0)))))) : _GLF_FUZZED(_injected_loop_counter)))), (_GLF_IDENTITY(int(6), (int(6)) / 1)) | (int(6))))), (int(_GLF_IDENTITY(_GLF_IDENTITY(int(6), _GLF_IDENTITY(int(_GLF_IDENTITY(ivec4(_GLF_IDENTITY(int(6), (int(6)) >> 0), (1 & 1), ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))), 0), (false ? _GLF_FUZZED(ivec4(55618, 44003, -55055, -44237)) : _GLF_IDENTITY(ivec4(_GLF_IDENTITY(int(6), (int(6)) >> 0), (1 & 1), ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))), 0), (ivec4(_GLF_IDENTITY(int(6), (int(6)) >> 0), (1 & 1), ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))), 0)) | (ivec4(_GLF_IDENTITY(int(6), (int(6)) >> 0), (1 & 1), ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))), 0)))))), (true ? int(_GLF_IDENTITY(ivec4(_GLF_IDENTITY(int(6), (int(6)) >> 0), (1 & 1), ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))), 0), (false ? _GLF_FUZZED(ivec4(55618, 44003, -55055, -44237)) : _GLF_IDENTITY(ivec4(_GLF_IDENTITY(int(6), (int(6)) >> 0), (1 & 1), ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))), 0), (ivec4(_GLF_IDENTITY(int(6), (int(6)) >> 0), (1 & 1), ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))), 0)) | (ivec4(_GLF_IDENTITY(int(6), (int(6)) >> 0), (1 & 1), ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))), 0)))))) : _GLF_FUZZED(_injected_loop_counter)))), (_GLF_IDENTITY(int(6), (int(6)) / 1)) | (int(6))))), (int(_GLF_IDENTITY(_GLF_IDENTITY(int(6), _GLF_IDENTITY(int(_GLF_IDENTITY(ivec4(_GLF_IDENTITY(int(6), (int(6)) >> 0), (1 & 1), ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))), 0), (false ? _GLF_FUZZED(ivec4(55618, 44003, -55055, -44237)) : _GLF_IDENTITY(ivec4(_GLF_IDENTITY(int(6), (int(6)) >> 0), (1 & 1), ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))), 0), (ivec4(_GLF_IDENTITY(int(6), (int(6)) >> 0), (1 & 1), ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))), 0)) | (ivec4(_GLF_IDENTITY(int(6), (int(6)) >> 0), (1 & 1), ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))), 0)))))), (true ? int(_GLF_IDENTITY(ivec4(_GLF_IDENTITY(int(6), (int(6)) >> 0), (1 & 1), ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))), 0), (false ? _GLF_FUZZED(ivec4(55618, 44003, -55055, -44237)) : _GLF_IDENTITY(ivec4(_GLF_IDENTITY(int(6), (int(6)) >> 0), (1 & 1), ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))), 0), (ivec4(_GLF_IDENTITY(int(6), (int(6)) >> 0), (1 & 1), ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))), 0)) | (ivec4(_GLF_IDENTITY(int(6), (int(6)) >> 0), (1 & 1), ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))), 0)))))) : _GLF_FUZZED(_injected_loop_counter)))), (_GLF_IDENTITY(int(6), (int(6)) / 1)) | (int(6))))))))) / 1))))))), min(_GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(_GLF_IDENTITY(int(_GLF_IDENTITY(int(6), (_GLF_IDENTITY(int(6), (int(6)) / 1)) | (int(6)))), (int(_GLF_IDENTITY(int(6), (_GLF_IDENTITY(int(_GLF_IDENTITY(6, min(6, 6))), (int(6)) / _GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) ^ 0)) << 0))) | _GLF_IDENTITY((int(6)), int(_GLF_IDENTITY(int(_GLF_IDENTITY((int(6)), ((int(6))) / 1)), min(int(_GLF_IDENTITY((int(6)), ((int(6))) / 1)), int(_GLF_IDENTITY((int(6)), ((int(6))) / 1))))))))) / 1)), ~ (~ (int(_GLF_IDENTITY(int(_GLF_IDENTITY(int(6), (_GLF_IDENTITY(int(6), (int(6)) / 1)) | (int(6)))), _GLF_IDENTITY((int(_GLF_IDENTITY(int(6), (_GLF_IDENTITY(int(6), (int(6)) / 1)) | (int(6))))), (1 & 1) * (_GLF_IDENTITY((int(_GLF_IDENTITY(_GLF_IDENTITY(int(6), _GLF_IDENTITY(int(_GLF_IDENTITY(ivec4(_GLF_IDENTITY(int(6), (int(6)) >> 0), (1 & 1), ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))), 0), (false ? _GLF_FUZZED(ivec4(55618, 44003, -55055, -44237)) : _GLF_IDENTITY(ivec4(_GLF_IDENTITY(int(6), (int(6)) >> 0), (1 & 1), ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))), 0), (ivec4(_GLF_IDENTITY(int(6), (int(6)) >> 0), (1 & 1), ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))), 0)) | (ivec4(_GLF_IDENTITY(int(6), (int(6)) >> 0), (1 & 1), ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))), 0)))))), (true ? int(_GLF_IDENTITY(ivec4(_GLF_IDENTITY(int(6), (int(6)) >> 0), (1 & 1), ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))), 0), (false ? _GLF_FUZZED(ivec4(55618, 44003, -55055, -44237)) : _GLF_IDENTITY(ivec4(_GLF_IDENTITY(int(6), (int(6)) >> 0), (1 & 1), ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))), 0), (ivec4(_GLF_IDENTITY(int(6), (int(6)) >> 0), (1 & 1), ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))), 0)) | (ivec4(_GLF_IDENTITY(int(6), (int(6)) >> 0), (1 & 1), ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))), 0)))))) : _GLF_FUZZED(_injected_loop_counter)))), (_GLF_IDENTITY(int(6), (int(6)) / 1)) | (int(6))))), clamp((int(_GLF_IDENTITY(_GLF_IDENTITY(int(6), _GLF_IDENTITY(int(_GLF_IDENTITY(ivec4(_GLF_IDENTITY(int(6), (int(6)) >> 0), (1 & 1), ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))), 0), (false ? _GLF_FUZZED(ivec4(55618, 44003, -55055, -44237)) : _GLF_IDENTITY(ivec4(_GLF_IDENTITY(int(6), (int(6)) >> 0), (1 & 1), ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))), 0), (ivec4(_GLF_IDENTITY(int(6), (int(6)) >> 0), (1 & 1), ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))), 0)) | (ivec4(_GLF_IDENTITY(int(6), (int(6)) >> 0), (1 & 1), ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))), 0)))))), (true ? int(_GLF_IDENTITY(ivec4(_GLF_IDENTITY(int(6), (int(6)) >> 0), (1 & 1), ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))), 0), (false ? _GLF_FUZZED(ivec4(55618, 44003, -55055, -44237)) : _GLF_IDENTITY(ivec4(_GLF_IDENTITY(int(6), (int(6)) >> 0), (1 & 1), ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))), 0), (ivec4(_GLF_IDENTITY(int(6), (int(6)) >> 0), (1 & 1), ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))), 0)) | (ivec4(_GLF_IDENTITY(int(6), (int(6)) >> 0), (1 & 1), ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))), 0)))))) : _GLF_FUZZED(_injected_loop_counter)))), (_GLF_IDENTITY(int(6), (int(6)) / 1)) | (int(6))))), (int(_GLF_IDENTITY(_GLF_IDENTITY(int(6), _GLF_IDENTITY(int(_GLF_IDENTITY(ivec4(_GLF_IDENTITY(int(6), (int(6)) >> 0), (1 & 1), ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))), 0), (false ? _GLF_FUZZED(ivec4(55618, 44003, -55055, -44237)) : _GLF_IDENTITY(ivec4(_GLF_IDENTITY(int(6), (int(6)) >> 0), (1 & 1), ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))), 0), (ivec4(_GLF_IDENTITY(int(6), (int(6)) >> 0), (1 & 1), ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))), 0)) | (ivec4(_GLF_IDENTITY(int(6), (int(6)) >> 0), (1 & 1), ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))), 0)))))), (true ? int(_GLF_IDENTITY(ivec4(_GLF_IDENTITY(int(6), (int(6)) >> 0), (1 & 1), ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))), 0), (false ? _GLF_FUZZED(ivec4(55618, 44003, -55055, -44237)) : _GLF_IDENTITY(ivec4(_GLF_IDENTITY(int(6), (int(6)) >> 0), (1 & 1), ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))), 0), (ivec4(_GLF_IDENTITY(int(6), (int(6)) >> 0), (1 & 1), ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))), 0)) | (ivec4(_GLF_IDENTITY(int(6), (int(6)) >> 0), (1 & 1), ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))), 0)))))) : _GLF_FUZZED(_injected_loop_counter)))), (_GLF_IDENTITY(int(6), (int(6)) / 1)) | (int(6))))), (int(_GLF_IDENTITY(_GLF_IDENTITY(int(6), _GLF_IDENTITY(int(_GLF_IDENTITY(ivec4(_GLF_IDENTITY(int(6), (int(6)) >> 0), (1 & 1), ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))), 0), (false ? _GLF_FUZZED(ivec4(55618, 44003, -55055, -44237)) : _GLF_IDENTITY(ivec4(_GLF_IDENTITY(int(6), (int(6)) >> 0), (1 & 1), ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))), 0), (ivec4(_GLF_IDENTITY(int(6), (int(6)) >> 0), (1 & 1), ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))), 0)) | (ivec4(_GLF_IDENTITY(int(6), (int(6)) >> 0), (1 & 1), ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))), 0)))))), (true ? int(_GLF_IDENTITY(ivec4(_GLF_IDENTITY(int(6), (int(6)) >> 0), (1 & 1), ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))), 0), (false ? _GLF_FUZZED(ivec4(55618, 44003, -55055, -44237)) : _GLF_IDENTITY(ivec4(_GLF_IDENTITY(int(6), (int(6)) >> 0), (1 & 1), ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))), 0), (ivec4(_GLF_IDENTITY(int(6), (int(6)) >> 0), (1 & 1), ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))), 0)) | (ivec4(_GLF_IDENTITY(int(6), (int(6)) >> 0), (1 & 1), ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))), 0)))))) : _GLF_FUZZED(_injected_loop_counter)))), (_GLF_IDENTITY(int(6), (int(6)) / 1)) | (int(6))))))))) / 1))))))), _GLF_IDENTITY(_GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(_GLF_IDENTITY(int(_GLF_IDENTITY(int(6), (_GLF_IDENTITY(int(6), (int(6)) / 1)) | (int(6)))), (int(_GLF_IDENTITY(int(6), (_GLF_IDENTITY(int(_GLF_IDENTITY(6, min(6, 6))), (int(6)) / _GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) ^ 0)) << 0))) | _GLF_IDENTITY((int(6)), int(_GLF_IDENTITY(int(_GLF_IDENTITY((int(6)), ((int(6))) / 1)), min(int(_GLF_IDENTITY((int(6)), ((int(6))) / 1)), int(_GLF_IDENTITY((int(6)), ((int(6))) / 1))))))))) / 1)), ~ (~ (int(_GLF_IDENTITY(int(_GLF_IDENTITY(int(6), (_GLF_IDENTITY(int(6), (int(6)) / 1)) | (int(6)))), _GLF_IDENTITY((int(_GLF_IDENTITY(int(6), (_GLF_IDENTITY(int(6), (int(6)) / 1)) | (int(6))))), (1 & 1) * (_GLF_IDENTITY((int(_GLF_IDENTITY(_GLF_IDENTITY(int(6), _GLF_IDENTITY(int(_GLF_IDENTITY(ivec4(_GLF_IDENTITY(int(6), (int(6)) >> 0), (1 & 1), ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))), 0), (false ? _GLF_FUZZED(ivec4(55618, 44003, -55055, -44237)) : _GLF_IDENTITY(ivec4(_GLF_IDENTITY(int(6), (int(6)) >> 0), (1 & 1), ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))), 0), (ivec4(_GLF_IDENTITY(int(6), (int(6)) >> 0), (1 & 1), ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))), 0)) | (ivec4(_GLF_IDENTITY(int(6), (int(6)) >> 0), (1 & 1), ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))), 0)))))), (true ? int(_GLF_IDENTITY(ivec4(_GLF_IDENTITY(int(6), (int(6)) >> 0), (1 & 1), ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))), 0), (false ? _GLF_FUZZED(ivec4(55618, 44003, -55055, -44237)) : _GLF_IDENTITY(ivec4(_GLF_IDENTITY(int(6), (int(6)) >> 0), (1 & 1), ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))), 0), (ivec4(_GLF_IDENTITY(int(6), (int(6)) >> 0), (1 & 1), ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))), 0)) | (ivec4(_GLF_IDENTITY(int(6), (int(6)) >> 0), (1 & 1), ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))), 0)))))) : _GLF_FUZZED(_injected_loop_counter)))), (_GLF_IDENTITY(int(6), (int(6)) / 1)) | (int(6))))), clamp((int(_GLF_IDENTITY(_GLF_IDENTITY(int(6), _GLF_IDENTITY(int(_GLF_IDENTITY(ivec4(_GLF_IDENTITY(int(6), (int(6)) >> 0), (1 & 1), ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))), 0), (false ? _GLF_FUZZED(ivec4(55618, 44003, -55055, -44237)) : _GLF_IDENTITY(ivec4(_GLF_IDENTITY(int(6), (int(6)) >> 0), (1 & 1), ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))), 0), (ivec4(_GLF_IDENTITY(int(6), (int(6)) >> 0), (1 & 1), ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))), 0)) | (ivec4(_GLF_IDENTITY(int(6), (int(6)) >> 0), (1 & 1), ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))), 0)))))), (true ? int(_GLF_IDENTITY(ivec4(_GLF_IDENTITY(int(6), (int(6)) >> 0), (1 & 1), ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))), 0), (false ? _GLF_FUZZED(ivec4(55618, 44003, -55055, -44237)) : _GLF_IDENTITY(ivec4(_GLF_IDENTITY(int(6), (int(6)) >> 0), (1 & 1), ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))), 0), (ivec4(_GLF_IDENTITY(int(6), (int(6)) >> 0), (1 & 1), ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))), 0)) | (ivec4(_GLF_IDENTITY(int(6), (int(6)) >> 0), (1 & 1), ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))), 0)))))) : _GLF_FUZZED(_injected_loop_counter)))), (_GLF_IDENTITY(int(6), (int(6)) / 1)) | (int(6))))), (int(_GLF_IDENTITY(_GLF_IDENTITY(int(6), _GLF_IDENTITY(int(_GLF_IDENTITY(ivec4(_GLF_IDENTITY(int(6), (int(6)) >> 0), (1 & 1), ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))), 0), (false ? _GLF_FUZZED(ivec4(55618, 44003, -55055, -44237)) : _GLF_IDENTITY(ivec4(_GLF_IDENTITY(int(6), (int(6)) >> 0), (1 & 1), ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))), 0), (ivec4(_GLF_IDENTITY(int(6), (int(6)) >> 0), (1 & 1), ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))), 0)) | (ivec4(_GLF_IDENTITY(int(6), (int(6)) >> 0), (1 & 1), ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))), 0)))))), (true ? int(_GLF_IDENTITY(ivec4(_GLF_IDENTITY(int(6), (int(6)) >> 0), (1 & 1), ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))), 0), (false ? _GLF_FUZZED(ivec4(55618, 44003, -55055, -44237)) : _GLF_IDENTITY(ivec4(_GLF_IDENTITY(int(6), (int(6)) >> 0), (1 & 1), ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))), 0), (ivec4(_GLF_IDENTITY(int(6), (int(6)) >> 0), (1 & 1), ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))), 0)) | (ivec4(_GLF_IDENTITY(int(6), (int(6)) >> 0), (1 & 1), ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))), 0)))))) : _GLF_FUZZED(_injected_loop_counter)))), (_GLF_IDENTITY(int(6), (int(6)) / 1)) | (int(6))))), (int(_GLF_IDENTITY(_GLF_IDENTITY(int(6), _GLF_IDENTITY(int(_GLF_IDENTITY(ivec4(_GLF_IDENTITY(int(6), (int(6)) >> 0), (1 & 1), ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))), 0), (false ? _GLF_FUZZED(ivec4(55618, 44003, -55055, -44237)) : _GLF_IDENTITY(ivec4(_GLF_IDENTITY(int(6), (int(6)) >> 0), (1 & 1), ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))), 0), (ivec4(_GLF_IDENTITY(int(6), (int(6)) >> 0), (1 & 1), ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))), 0)) | (ivec4(_GLF_IDENTITY(int(6), (int(6)) >> 0), (1 & 1), ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))), 0)))))), (true ? int(_GLF_IDENTITY(ivec4(_GLF_IDENTITY(int(6), (int(6)) >> 0), (1 & 1), ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))), 0), (false ? _GLF_FUZZED(ivec4(55618, 44003, -55055, -44237)) : _GLF_IDENTITY(ivec4(_GLF_IDENTITY(int(6), (int(6)) >> 0), (1 & 1), ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))), 0), (ivec4(_GLF_IDENTITY(int(6), (int(6)) >> 0), (1 & 1), ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))), 0)) | (ivec4(_GLF_IDENTITY(int(6), (int(6)) >> 0), (1 & 1), ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))), 0)))))) : _GLF_FUZZED(_injected_loop_counter)))), (_GLF_IDENTITY(int(6), (int(6)) / 1)) | (int(6))))))))) / 1))))))), (_GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(_GLF_IDENTITY(int(_GLF_IDENTITY(int(6), (_GLF_IDENTITY(int(6), (int(6)) / 1)) | (int(6)))), (int(_GLF_IDENTITY(int(6), (_GLF_IDENTITY(int(_GLF_IDENTITY(6, min(6, 6))), (int(6)) / _GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) ^ 0)) << 0))) | _GLF_IDENTITY((int(6)), int(_GLF_IDENTITY(int(_GLF_IDENTITY((int(6)), ((int(6))) / 1)), min(int(_GLF_IDENTITY((int(6)), ((int(6))) / 1)), int(_GLF_IDENTITY((int(6)), ((int(6))) / 1))))))))) / 1)), ~ (~ (int(_GLF_IDENTITY(int(_GLF_IDENTITY(int(6), (_GLF_IDENTITY(int(6), (int(6)) / 1)) | (int(6)))), _GLF_IDENTITY((int(_GLF_IDENTITY(int(6), (_GLF_IDENTITY(int(6), (int(6)) / 1)) | (int(6))))), (1 & 1) * (_GLF_IDENTITY((int(_GLF_IDENTITY(_GLF_IDENTITY(int(6), _GLF_IDENTITY(int(_GLF_IDENTITY(ivec4(_GLF_IDENTITY(int(6), (int(6)) >> 0), (1 & 1), ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))), 0), (false ? _GLF_FUZZED(ivec4(55618, 44003, -55055, -44237)) : _GLF_IDENTITY(ivec4(_GLF_IDENTITY(int(6), (int(6)) >> 0), (1 & 1), ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))), 0), (ivec4(_GLF_IDENTITY(int(6), (int(6)) >> 0), (1 & 1), ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))), 0)) | (ivec4(_GLF_IDENTITY(int(6), (int(6)) >> 0), (1 & 1), ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))), 0)))))), (true ? int(_GLF_IDENTITY(ivec4(_GLF_IDENTITY(int(6), (int(6)) >> 0), (1 & 1), ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))), 0), (false ? _GLF_FUZZED(ivec4(55618, 44003, -55055, -44237)) : _GLF_IDENTITY(ivec4(_GLF_IDENTITY(int(6), (int(6)) >> 0), (1 & 1), ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))), 0), (ivec4(_GLF_IDENTITY(int(6), (int(6)) >> 0), (1 & 1), ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))), 0)) | (ivec4(_GLF_IDENTITY(int(6), (int(6)) >> 0), (1 & 1), ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))), 0)))))) : _GLF_FUZZED(_injected_loop_counter)))), (_GLF_IDENTITY(int(6), (int(6)) / 1)) | (int(6))))), clamp((int(_GLF_IDENTITY(_GLF_IDENTITY(int(6), _GLF_IDENTITY(int(_GLF_IDENTITY(ivec4(_GLF_IDENTITY(int(6), (int(6)) >> 0), (1 & 1), ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))), 0), (false ? _GLF_FUZZED(ivec4(55618, 44003, -55055, -44237)) : _GLF_IDENTITY(ivec4(_GLF_IDENTITY(int(6), (int(6)) >> 0), (1 & 1), ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))), 0), (ivec4(_GLF_IDENTITY(int(6), (int(6)) >> 0), (1 & 1), ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))), 0)) | (ivec4(_GLF_IDENTITY(int(6), (int(6)) >> 0), (1 & 1), ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))), 0)))))), (true ? int(_GLF_IDENTITY(ivec4(_GLF_IDENTITY(int(6), (int(6)) >> 0), (1 & 1), ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))), 0), (false ? _GLF_FUZZED(ivec4(55618, 44003, -55055, -44237)) : _GLF_IDENTITY(ivec4(_GLF_IDENTITY(int(6), (int(6)) >> 0), (1 & 1), ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))), 0), (ivec4(_GLF_IDENTITY(int(6), (int(6)) >> 0), (1 & 1), ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))), 0)) | (ivec4(_GLF_IDENTITY(int(6), (int(6)) >> 0), (1 & 1), ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))), 0)))))) : _GLF_FUZZED(_injected_loop_counter)))), (_GLF_IDENTITY(int(6), (int(6)) / 1)) | (int(6))))), (int(_GLF_IDENTITY(_GLF_IDENTITY(int(6), _GLF_IDENTITY(int(_GLF_IDENTITY(ivec4(_GLF_IDENTITY(int(6), (int(6)) >> 0), (1 & 1), ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))), 0), (false ? _GLF_FUZZED(ivec4(55618, 44003, -55055, -44237)) : _GLF_IDENTITY(ivec4(_GLF_IDENTITY(int(6), (int(6)) >> 0), (1 & 1), ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))), 0), (ivec4(_GLF_IDENTITY(int(6), (int(6)) >> 0), (1 & 1), ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))), 0)) | (ivec4(_GLF_IDENTITY(int(6), (int(6)) >> 0), (1 & 1), ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))), 0)))))), (true ? int(_GLF_IDENTITY(ivec4(_GLF_IDENTITY(int(6), (int(6)) >> 0), (1 & 1), ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))), 0), (false ? _GLF_FUZZED(ivec4(55618, 44003, -55055, -44237)) : _GLF_IDENTITY(ivec4(_GLF_IDENTITY(int(6), (int(6)) >> 0), (1 & 1), ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))), 0), (ivec4(_GLF_IDENTITY(int(6), (int(6)) >> 0), (1 & 1), ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))), 0)) | (ivec4(_GLF_IDENTITY(int(6), (int(6)) >> 0), (1 & 1), ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))), 0)))))) : _GLF_FUZZED(_injected_loop_counter)))), (_GLF_IDENTITY(int(6), (int(6)) / 1)) | (int(6))))), (int(_GLF_IDENTITY(_GLF_IDENTITY(int(6), _GLF_IDENTITY(int(_GLF_IDENTITY(ivec4(_GLF_IDENTITY(int(6), (int(6)) >> 0), (1 & 1), ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))), 0), (false ? _GLF_FUZZED(ivec4(55618, 44003, -55055, -44237)) : _GLF_IDENTITY(ivec4(_GLF_IDENTITY(int(6), (int(6)) >> 0), (1 & 1), ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))), 0), (ivec4(_GLF_IDENTITY(int(6), (int(6)) >> 0), (1 & 1), ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))), 0)) | (ivec4(_GLF_IDENTITY(int(6), (int(6)) >> 0), (1 & 1), ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))), 0)))))), (true ? int(_GLF_IDENTITY(ivec4(_GLF_IDENTITY(int(6), (int(6)) >> 0), (1 & 1), ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))), 0), (false ? _GLF_FUZZED(ivec4(55618, 44003, -55055, -44237)) : _GLF_IDENTITY(ivec4(_GLF_IDENTITY(int(6), (int(6)) >> 0), (1 & 1), ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))), 0), (ivec4(_GLF_IDENTITY(int(6), (int(6)) >> 0), (1 & 1), ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))), 0)) | (ivec4(_GLF_IDENTITY(int(6), (int(6)) >> 0), (1 & 1), ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))), 0)))))) : _GLF_FUZZED(_injected_loop_counter)))), (_GLF_IDENTITY(int(6), (int(6)) / 1)) | (int(6))))))))) / 1)))))))) >> 0)))) >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(int(6), (int(6)) / 1), ~ (~ (_GLF_IDENTITY(int(6), (int(6)) / 1))))))))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != 0, bool(bvec4(_injected_loop_counter != 0, true, false, true)))); _injected_loop_counter --)
            {
             if(_GLF_DEAD(false))
              return;
             if(_GLF_DEAD(false))
              return;
            }
          }
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_DEAD(false))
            break;
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_DEAD(false))
            continue;
          }
         else
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               if(_GLF_DEAD(false))
                break;
               return;
              }
             else
              {
               if(_GLF_DEAD(false))
                return;
              }
            }
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), true && (bool(bool(false)))))))
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x)), injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-85.35)), float(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x))), bool(true))))) > injectionSwitch.y))))
                  {
                   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
                    break;
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    return;
                   return;
                  }
                }
               else
                {
                }
               if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) && true)) || false)))
                break;
               for(int _injected_loop_counter = 1; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), true && (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, 0 | (_injected_loop_counter)) > 0), (_GLF_WRAPPED_LOOP(_injected_loop_counter > 0)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))); _injected_loop_counter --)
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(injectionSwitch.x > injectionSwitch.y, false)))))))
                  break;
                 if(_GLF_DEAD(_GLF_IDENTITY(false, true && _GLF_IDENTITY((false), true && (_GLF_IDENTITY((false), bool(bool((false)))))))))
                  {
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     if(_GLF_DEAD(false))
                      break;
                     return;
                    }
                   else
                    {
                    }
                  }
                 for(int _injected_loop_counter = ((1 ^ 0) | 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                  {
                   for(int _injected_loop_counter = int(_GLF_ZERO(_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED((7.1 + 133.071))), float(_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(5.8)), float(0.0), bool(true)))), bool(true))), injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                    {
                     do
                      {
                       if(_GLF_DEAD(false))
                        continue;
                       return;
                      }
                     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, true && (false))));
                     if(_GLF_DEAD(false))
                      break;
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), ! (! (_GLF_IDENTITY(! (_GLF_DEAD(false)), ! (! (! (_GLF_DEAD(false)))))))))))
                        continue;
                       return;
                      }
                    }
                  }
                }
              }
             if(_GLF_DEAD(false))
              return;
            }
          }
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           do
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 >> _GLF_IDENTITY(int(8), _GLF_IDENTITY(int(8), _GLF_IDENTITY(~ (~ (int(8))), (~ (~ (int(8)))) >> 0))))); _injected_loop_counter --)
                {
                 return;
                }
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         else
          {
          }
         for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(5), int(5))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, clamp(_injected_loop_counter, _injected_loop_counter, _GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) / 1))) != 1); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            break;
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(0, 0 | (0))); _injected_loop_counter --)
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                break;
               if(_GLF_DEAD(false))
                return;
               _GLF_IDENTITY(read = atomicLoad(buf[virtual_gid], 4, 64, 2), (read = atomicLoad(_GLF_IDENTITY(buf[virtual_gid], clamp(_GLF_IDENTITY(buf[virtual_gid], ~ (~ (buf[virtual_gid]))), _GLF_IDENTITY(_GLF_IDENTITY(buf[virtual_gid], (true ? buf[virtual_gid] : _GLF_FUZZED(atomicMax(virtual_gid, subgroup_size)))), (_GLF_IDENTITY(buf[virtual_gid], (_GLF_IDENTITY(true ? buf[virtual_gid] : _GLF_FUZZED(atomicMax(virtual_gid, subgroup_size)), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(true, bool(bvec4(true, false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) ? buf[virtual_gid] : _GLF_FUZZED(atomicMax(virtual_gid, subgroup_size)), _GLF_IDENTITY((true ? buf[virtual_gid] : _GLF_FUZZED(atomicMax(virtual_gid, subgroup_size))) - 0u, 0u | ((true ? buf[virtual_gid] : _GLF_FUZZED(atomicMax(virtual_gid, subgroup_size))) - 0u))))))))) | 0u), _GLF_IDENTITY(buf[virtual_gid], _GLF_IDENTITY((buf[virtual_gid]) >> (0u | 0u), (_GLF_IDENTITY((buf[virtual_gid]) >> (0u | 0u), _GLF_IDENTITY(((buf[virtual_gid]) >> (0u | 0u)) | 0u, 0u ^ (((buf[virtual_gid]) >> (0u | 0u)) | 0u)))) << 0u)))), 4, 64, 2)) / 1u);
               if(_GLF_DEAD(false))
                break;
              }
             if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
              return;
            }
           else
            {
            }
          }
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, false, true)))))
          {
           do
            {
             return;
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, ! (! (false)))))) || false), ! (_GLF_IDENTITY(! (false), true && (_GLF_IDENTITY(! (false), (! (false)) && true))))), (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          continue;
         break;
        }
       do
        {
         for(int _injected_loop_counter = _GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), _GLF_IDENTITY(int(ivec2(_GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), ~ (~ (int(_GLF_ONE(1.0, injectionSwitch.y))))), 1)), max(_GLF_IDENTITY(int(ivec2(_GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), ~ (~ _GLF_IDENTITY((int(_GLF_ONE(1.0, injectionSwitch.y))), 0 ^ ((int(_GLF_ONE(1.0, injectionSwitch.y))))))), 1)), (int(ivec2(_GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), ~ (~ (int(_GLF_ONE(1.0, injectionSwitch.y))))), 1))) | 0), int(ivec2(_GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), ~ (~ (int(_GLF_ONE(1.0, injectionSwitch.y))))), 1))))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              return;
             return;
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
         return;
        }
      }
     else
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
        continue;
       subgroupAll(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, ! (! (false))))));
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         do
          {
           do
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bool(true)))))
              {
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
                {
                 if(_GLF_DEAD(false))
                  break;
                 if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_DEAD(false), false, false))), false, false, false))))
                  return;
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                continue;
               read = atomicLoad(buf[virtual_gid], _GLF_IDENTITY(4, min(4, 4)), 64, 2);
               if(_GLF_DEAD(false))
                return;
              }
             else
              {
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              continue;
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                break;
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 return;
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))))))
                  return;
                }
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(false))
        continue;
      }
    }
   while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), ! (! (_GLF_WRAPPED_LOOP(false)))));
  }
 do
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
      {
       do
        {
         return;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     return;
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false || (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     else
      {
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 do
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (_GLF_IDENTITY(0 | 0, int(ivec2(0 | 0, 1))))); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          break;
         if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), bool(_GLF_IDENTITY(bvec3((injectionSwitch.x < injectionSwitch.y), _GLF_IDENTITY(false, bool(bvec4(false, true, true, true))), false), bvec3(bvec4(bvec3((injectionSwitch.x < injectionSwitch.y), _GLF_IDENTITY(false, bool(bvec4(false, true, true, true))), false), true)))))))) && true))
          {
           subgroupBarrier();
          }
         else
          {
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
        }
       do
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).y))))
            continue;
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (true ? _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)))).x, 1.0 * (injectionSwitch.x)) : _GLF_FUZZED(distance(vec4(1255.1000, 385.094, -960.975, 4.2), vec4(-271.896, -9.7, -1571.5308, -9.4))))) > injectionSwitch.y))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), false || _GLF_IDENTITY((! ((injectionSwitch.x > injectionSwitch.y))), ! (! ((! ((injectionSwitch.x > injectionSwitch.y))))))))))))
              return;
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 do
                  {
                   do
                    {
                     return;
                    }
                   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, false, false), bvec3(bvec3(_GLF_IDENTITY(bvec3(false, false, false), bvec3(bvec4(bvec3(false, false, false), true))))))))))
                    return;
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
              }
             else
              {
              }
            }
           if(_GLF_DEAD(false))
            break;
          }
         else
          {
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      return;
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 atomicStore(checker[virtual_gid], read, 4, 64, 4);
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    break;
   if(_GLF_DEAD(false))
    break;
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, bool(bvec4(injectionSwitch.x < injectionSwitch.y, false, false, false)))))))
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))
        {
         if(_GLF_DEAD(false))
          return;
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
            {
             return;
             if(_GLF_DEAD(false))
              return;
            }
          }
         if(_GLF_DEAD(false))
          continue;
        }
      }
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       do
        {
         if(_GLF_DEAD(false))
          continue;
         return;
         if(_GLF_DEAD(false))
          break;
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
    }
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       return;
      }
     if(_GLF_DEAD(false))
      continue;
    }
  }
 while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), ! (! (_GLF_WRAPPED_LOOP(false)))));
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)))), _GLF_IDENTITY(injectionSwitch.y, (true ? _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)) : _GLF_FUZZED(length(vec3(6871.6595, -756.915, 2.5))))))), (_GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)))), _GLF_IDENTITY(injectionSwitch.y, (true ? _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)) : _GLF_FUZZED(length(vec3(6871.6595, -756.915, 2.5)))))))) - 0.0)))), (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         return;
        }
       else
        {
        }
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, false, false)))))
        return;
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (_GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, ~ (~ (0))))) << _GLF_IDENTITY(int(3), int(3)))); _injected_loop_counter --)
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bvec2(true, true)))))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                break;
               return;
              }
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, bool(bvec4(injectionSwitch.x < injectionSwitch.y, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)))))))
                  {
                   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                    {
                     return;
                     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, false, true)))))
                      break;
                    }
                  }
                 else
                  {
                  }
                }
              }
             else
              {
              }
            }
           else
            {
            }
          }
        }
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_DEAD(false))
          return;
        }
       else
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           return;
          }
        }
      }
    }
   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_IF_TRUE(true)), (_GLF_IDENTITY(! (_GLF_WRAPPED_IF_TRUE(true)), false || (! (_GLF_WRAPPED_IF_TRUE(true))))) && true))))
    {
     return;
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      return;
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(false))
        break;
      }
     return;
    }
   return;
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END
BUFFER checker DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected_checker DATA_TYPE uint32 SIZE 8388096 FILL 1

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 
  BIND BUFFER checker AS storage DESCRIPTOR_SET 0 BINDING 2 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT checker EQ_BUFFER expected_checker
