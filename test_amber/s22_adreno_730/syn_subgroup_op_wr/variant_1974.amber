#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 for(int _injected_loop_counter = _GLF_IDENTITY((0 | 0), ((0 | 0)) | ((0 | 0))); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < 1), bool(_GLF_IDENTITY(bvec2(_GLF_WRAPPED_LOOP(_injected_loop_counter < 1), true), bvec2(bvec4(_GLF_IDENTITY(bvec2(_GLF_WRAPPED_LOOP(_injected_loop_counter < 1), true), bvec2(bvec4(_GLF_IDENTITY(bvec2(_GLF_WRAPPED_LOOP(_injected_loop_counter < 1), true), bvec2(_GLF_IDENTITY(bvec3(bvec2(_GLF_WRAPPED_LOOP(_injected_loop_counter < 1), true), false), bvec3(bvec3(bvec3(bvec2(_GLF_WRAPPED_LOOP(_injected_loop_counter < 1), true), false)))))), false, true))), true, false))))); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       return;
      }
     else
      {
      }
    }
   do
    {
     if(_GLF_DEAD(false))
      return;
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) && true)))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       do
        {
         return;
        }
       while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), true && (_GLF_WRAPPED_LOOP(false)))) || false));
      }
     return;
    }
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = workgroup_size * workgroup_id;
 uint subgroup_base = subgroup_id * subgroup_size;
 uint virtual_gid = _GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_base, ~ (~ (_GLF_IDENTITY(subgroup_base, (subgroup_base) << 0u)))) + subgroup_local_id, (workgroup_base + subgroup_base + subgroup_local_id) << 0u);
 if(_GLF_DEAD(false))
  return;
 uint next_virtual_gid = workgroup_base + subgroup_base + ((_GLF_IDENTITY(subgroup_local_id + 1, (_GLF_IDENTITY(false ? _GLF_IDENTITY(_GLF_FUZZED((_GLF_IDENTITY(virtual_gid --, (_GLF_IDENTITY(virtual_gid --, (true ? virtual_gid -- : _GLF_FUZZED(min(subgroup_base, subgroup_size))))) ^ 0u))), (_GLF_FUZZED((_GLF_IDENTITY(virtual_gid --, (_GLF_IDENTITY(virtual_gid --, (true ? virtual_gid -- : _GLF_FUZZED(min(subgroup_base, subgroup_size))))) ^ 0u)))) / 1u) : _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, 0u + _GLF_IDENTITY((subgroup_local_id), max((subgroup_local_id), (subgroup_local_id)))), _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec4(_GLF_IDENTITY(subgroup_local_id, 0u + _GLF_IDENTITY((subgroup_local_id), max((subgroup_local_id), (subgroup_local_id)))), 0u, 0u, 1u), (uvec4(_GLF_IDENTITY(subgroup_local_id, 0u + _GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id), max((subgroup_local_id), (subgroup_local_id))), (_GLF_IDENTITY((subgroup_local_id), max((subgroup_local_id), (subgroup_local_id)))) | (_GLF_IDENTITY((subgroup_local_id), max((subgroup_local_id), (subgroup_local_id)))))), 0u, 0u, 1u)) | (uvec4(_GLF_IDENTITY(subgroup_local_id, 0u + _GLF_IDENTITY((subgroup_local_id), max((subgroup_local_id), (subgroup_local_id)))), 0u, 0u, 1u)))), max(_GLF_IDENTITY(uint(_GLF_IDENTITY(uvec4(_GLF_IDENTITY(subgroup_local_id, 0u + _GLF_IDENTITY((subgroup_local_id), max((subgroup_local_id), (subgroup_local_id)))), 0u, 0u, 1u), (uvec4(_GLF_IDENTITY(subgroup_local_id, 0u + _GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id), max((subgroup_local_id), (subgroup_local_id))), (_GLF_IDENTITY((subgroup_local_id), max((subgroup_local_id), (subgroup_local_id)))) | (_GLF_IDENTITY((subgroup_local_id), max((subgroup_local_id), (subgroup_local_id)))))), 0u, 0u, 1u)) | (uvec4(_GLF_IDENTITY(subgroup_local_id, 0u + _GLF_IDENTITY((subgroup_local_id), max((subgroup_local_id), (subgroup_local_id)))), 0u, 0u, 1u)))), 0u | (uint(_GLF_IDENTITY(uvec4(_GLF_IDENTITY(subgroup_local_id, 0u + _GLF_IDENTITY((subgroup_local_id), max((subgroup_local_id), (subgroup_local_id)))), 0u, 0u, 1u), (uvec4(_GLF_IDENTITY(subgroup_local_id, 0u + _GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id), max((subgroup_local_id), (subgroup_local_id))), (_GLF_IDENTITY((subgroup_local_id), max((subgroup_local_id), (subgroup_local_id)))) | (_GLF_IDENTITY((subgroup_local_id), max((subgroup_local_id), (subgroup_local_id)))))), 0u, 0u, 1u)) | (uvec4(_GLF_IDENTITY(subgroup_local_id, 0u + _GLF_IDENTITY((subgroup_local_id), max((subgroup_local_id), (subgroup_local_id)))), 0u, 0u, 1u)))))), uint(_GLF_IDENTITY(uvec4(_GLF_IDENTITY(subgroup_local_id, 0u + _GLF_IDENTITY((subgroup_local_id), max((subgroup_local_id), (subgroup_local_id)))), 0u, 0u, 1u), (uvec4(_GLF_IDENTITY(subgroup_local_id, 0u + _GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id), max((subgroup_local_id), (subgroup_local_id))), (_GLF_IDENTITY((subgroup_local_id), max((subgroup_local_id), (subgroup_local_id)))) | (_GLF_IDENTITY((subgroup_local_id), max((subgroup_local_id), (subgroup_local_id)))))), 0u, 0u, 1u)) | (uvec4(_GLF_IDENTITY(subgroup_local_id, 0u + _GLF_IDENTITY((subgroup_local_id), max((subgroup_local_id), (subgroup_local_id)))), 0u, 0u, 1u))))))) + 1, (subgroup_local_id + 1) - 0u), (false ? _GLF_FUZZED(_GLF_IDENTITY((_GLF_IDENTITY(virtual_gid --, (_GLF_IDENTITY(virtual_gid --, (1u & 1u) * (virtual_gid --))) ^ 0u)), (false ? _GLF_FUZZED(num_workgroup) : (_GLF_IDENTITY(_GLF_IDENTITY(virtual_gid --, 0u | (virtual_gid --)), (virtual_gid --) ^ 0u))))) : _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, (_GLF_IDENTITY(subgroup_local_id + 1, 1u * (subgroup_local_id + 1))) >> 0u), (subgroup_local_id + 1) - _GLF_IDENTITY(0u, (0u) * 1u)), _GLF_IDENTITY(~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, (_GLF_IDENTITY(subgroup_local_id + 1, 1u * (subgroup_local_id + 1))) >> 0u), (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, ((1u << _GLF_IDENTITY(uint(1u), _GLF_IDENTITY(uint(1u), min(uint(1u), uint(1u))))) >> _GLF_IDENTITY(uint(1u), uint(1u))) * (_GLF_IDENTITY(subgroup_local_id + 1, (false ? _GLF_FUZZED(virtual_gid) : subgroup_local_id + 1)))), min(subgroup_local_id + 1, _GLF_IDENTITY(subgroup_local_id, (true ? subgroup_local_id : _GLF_FUZZED(workgroup_size))) + 1))) - 0u), uint(uvec4(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, _GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id + 1, 1u * (subgroup_local_id + 1))) >> 0u, (false ? _GLF_FUZZED(workgroup_base) : _GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id + 1, 1u * (subgroup_local_id + 1))) >> 0u, ~ (~ ((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, clamp(subgroup_local_id, subgroup_local_id, subgroup_local_id)) + 1, 1u * (subgroup_local_id + 1))) >> 0u)))))), (_GLF_IDENTITY(subgroup_local_id + 1, (_GLF_IDENTITY(subgroup_local_id + 1, 1u * _GLF_IDENTITY((subgroup_local_id + 1), uint(uint((subgroup_local_id + 1)))))) >> 0u)) >> 0u), (subgroup_local_id + 1) - 0u), 1u, 0u, 1u))))), (_GLF_IDENTITY(~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, (_GLF_IDENTITY(subgroup_local_id + 1, 1u * (subgroup_local_id + 1))) >> 0u), (subgroup_local_id + _GLF_IDENTITY(1, (1) * 1)) - _GLF_IDENTITY(0u, (0u) << uint(_GLF_ZERO(0.0, injectionSwitch.x)))), uint(uvec4(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, (_GLF_IDENTITY(subgroup_local_id + 1, _GLF_IDENTITY(1u, (1u) / 1u) * _GLF_IDENTITY((subgroup_local_id + _GLF_IDENTITY(1, (1) | (1))), clamp((subgroup_local_id + _GLF_IDENTITY(1, (1) | (1))), (subgroup_local_id + _GLF_IDENTITY(1, (1) | (1))), (subgroup_local_id + _GLF_IDENTITY(1, (1) | (1))))))) >> 0u), (_GLF_IDENTITY(subgroup_local_id + 1, (_GLF_IDENTITY(subgroup_local_id + 1, 1u * (subgroup_local_id + 1))) >> 0u)) >> 0u), _GLF_IDENTITY((subgroup_local_id + 1) - 0u, 1u * ((subgroup_local_id + _GLF_IDENTITY(1, _GLF_IDENTITY(0, min(0, 0)) ^ (1))) - 0u))), 1u, 0u, 1u))))), uint(uvec3(~ _GLF_IDENTITY((~ _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, (_GLF_IDENTITY(subgroup_local_id + 1, _GLF_IDENTITY(1u, 1u * (1u)) * (subgroup_local_id + 1))) >> 0u), (subgroup_local_id + 1) - 0u), uint(uvec4(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, (_GLF_IDENTITY(subgroup_local_id + 1, 1u * (subgroup_local_id + 1))) >> 0u), (_GLF_IDENTITY(subgroup_local_id + 1, (_GLF_IDENTITY(subgroup_local_id + 1, 1u * (subgroup_local_id + 1))) >> 0u)) >> 0u), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, ~ (~ (subgroup_local_id))) + 1, ~ (~ (_GLF_IDENTITY(subgroup_local_id, ~ (~ (subgroup_local_id))) + 1)))), 0u | ((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, ~ (~ (subgroup_local_id))) + 1, ~ (~ (_GLF_IDENTITY(subgroup_local_id, ~ (~ (subgroup_local_id))) + 1)))))) - 0u), 1u, 0u, 1u)))), clamp((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, (_GLF_IDENTITY(subgroup_local_id + 1, _GLF_IDENTITY(1u, 1u * (1u)) * (subgroup_local_id + 1))) >> 0u), (subgroup_local_id + 1) - 0u), uint(uvec4(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, (_GLF_IDENTITY(subgroup_local_id + 1, 1u * (subgroup_local_id + 1))) >> 0u), (_GLF_IDENTITY(subgroup_local_id + 1, (_GLF_IDENTITY(subgroup_local_id + 1, 1u * (subgroup_local_id + 1))) >> 0u)) >> 0u), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, ~ (~ (subgroup_local_id))) + 1, ~ (~ (_GLF_IDENTITY(subgroup_local_id, ~ (~ (subgroup_local_id))) + 1)))), 0u | ((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, ~ (~ (subgroup_local_id))) + 1, ~ (~ (_GLF_IDENTITY(subgroup_local_id, ~ (~ (subgroup_local_id))) + 1)))))) - 0u), 1u, 0u, 1u)))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, (_GLF_IDENTITY(subgroup_local_id + 1, _GLF_IDENTITY(1u, 1u * (1u)) * (subgroup_local_id + 1))) >> 0u), (subgroup_local_id + 1) - 0u), uint(uvec4(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, (_GLF_IDENTITY(subgroup_local_id + 1, 1u * (subgroup_local_id + 1))) >> 0u), (_GLF_IDENTITY(subgroup_local_id + 1, (_GLF_IDENTITY(subgroup_local_id + 1, 1u * (subgroup_local_id + 1))) >> 0u)) >> 0u), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, ~ (~ (subgroup_local_id))) + 1, ~ (~ (_GLF_IDENTITY(subgroup_local_id, ~ (~ (subgroup_local_id))) + 1)))), 0u | ((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, ~ (~ (subgroup_local_id))) + 1, ~ (~ (_GLF_IDENTITY(subgroup_local_id, ~ (~ (subgroup_local_id))) + 1)))))) - 0u), 1u, 0u, 1u)))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, (_GLF_IDENTITY(subgroup_local_id + 1, _GLF_IDENTITY(1u, 1u * (1u)) * (subgroup_local_id + 1))) >> 0u), (subgroup_local_id + 1) - 0u), uint(uvec4(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, (_GLF_IDENTITY(subgroup_local_id + 1, 1u * (subgroup_local_id + 1))) >> 0u), (_GLF_IDENTITY(subgroup_local_id + 1, (_GLF_IDENTITY(subgroup_local_id + 1, 1u * (subgroup_local_id + 1))) >> 0u)) >> 0u), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, ~ (~ (subgroup_local_id))) + 1, ~ (~ (_GLF_IDENTITY(subgroup_local_id, ~ (~ (subgroup_local_id))) + 1)))), 0u | ((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, ~ (~ (subgroup_local_id))) + 1, ~ (~ (_GLF_IDENTITY(subgroup_local_id, ~ (~ (subgroup_local_id))) + 1)))))) - 0u), 1u, 0u, 1u))))))), max((~ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, uint(_GLF_IDENTITY(uint(subgroup_local_id), (_GLF_IDENTITY(uint(subgroup_local_id), (uint(subgroup_local_id)) / 1u)) | (uint(subgroup_local_id))))) + 1, _GLF_IDENTITY(1u, 1u * (1u)) * (subgroup_local_id + 1))) >> 0u), (subgroup_local_id + 1) - 0u), uint(uvec4(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, clamp(subgroup_local_id + 1, _GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) - (0u | 0u)), subgroup_local_id + 1)), (_GLF_IDENTITY(subgroup_local_id + 1, _GLF_IDENTITY(1u, ~ (~ (1u))) * (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | (0u >> _GLF_IDENTITY(uint(5u), uint(5u)))) + 1))) >> 0u), (_GLF_IDENTITY(subgroup_local_id + 1, (_GLF_IDENTITY(subgroup_local_id + 1, 1u * (_GLF_IDENTITY(subgroup_local_id + 1, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_local_id + 1, (false ? _GLF_FUZZED(num_workgroup) : subgroup_local_id + 1))), (true ? ~ (_GLF_IDENTITY(subgroup_local_id + 1, (false ? _GLF_FUZZED(num_workgroup) : subgroup_local_id + 1))) : _GLF_FUZZED((num_workgroup / workgroup_id))))))))) >> 0u)) >> 0u), (_GLF_IDENTITY(subgroup_local_id, ~ (~ (subgroup_local_id))) + 1) - 0u), 1u, 0u, 1u))))), (~ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, (_GLF_IDENTITY(subgroup_local_id + _GLF_IDENTITY(1, ~ (_GLF_IDENTITY(~ (1), int(_GLF_IDENTITY(ivec3(~ (1), 0, 1), ivec3(0, 0, 0) ^ (ivec3(~ (1), 0, 1))))))), _GLF_IDENTITY(1u, 1u * (1u)) * (subgroup_local_id + 1))) >> 0u), (subgroup_local_id + 1) - 0u), uint(uvec4(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, (_GLF_IDENTITY(subgroup_local_id + 1, _GLF_IDENTITY(1u * (subgroup_local_id + 1), (1u * (subgroup_local_id + 1)) | (_GLF_IDENTITY(1u * (subgroup_local_id + 1), min(1u * (subgroup_local_id + 1), 1u * (subgroup_local_id + 1))))))) >> 0u), (_GLF_IDENTITY(subgroup_local_id + 1, (_GLF_IDENTITY(subgroup_local_id + 1, 1u * (subgroup_local_id + 1))) >> 0u)) >> 0u), (_GLF_IDENTITY(subgroup_local_id, ~ (~ (subgroup_local_id))) + 1) - 0u), 1u, 0u, 1u))))))), 0u, 0u)))) << 0u))) / 1u)))) % subgroup_size);
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, (false) || false)))) || (injectionSwitch.x > injectionSwitch.y))))), false || (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, (false) || false)))) || (injectionSwitch.x > injectionSwitch.y))))))))
    {
     do
      {
       return;
       if(_GLF_DEAD(false))
        break;
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 uint read = 0;
 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec3(false, false, true)), (bool(bvec3(false, false, true))) || false), false || (_GLF_IDENTITY(_GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(false, ! (! (false))), false, true)), (bool(bvec3(false, false, true))) || false), (_GLF_IDENTITY(bool(bvec3(false, false, true)), (bool(bvec3(false, false, true))) || false)) && true))))))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   for(int _injected_loop_counter = (((_GLF_IDENTITY(_GLF_IDENTITY((0 ^ 1), min(_GLF_IDENTITY(_GLF_IDENTITY((0 ^ 1), ((0 ^ 1)) / 1), clamp((_GLF_IDENTITY(0 ^ 1, ~ (~ (0 ^ 1)))), (0 ^ 1), (_GLF_IDENTITY(0, (false ? _GLF_FUZZED(-64030) : _GLF_IDENTITY(0, (0) ^ 0))) ^ 1))), (0 ^ 1))), _GLF_IDENTITY(int(ivec4(_GLF_IDENTITY(_GLF_IDENTITY((0 ^ 1), min(_GLF_IDENTITY(_GLF_IDENTITY((0 ^ 1), ((0 ^ 1)) / 1), clamp((_GLF_IDENTITY(0 ^ 1, ~ (~ (0 ^ 1)))), (0 ^ 1), (_GLF_IDENTITY(0, (false ? _GLF_FUZZED(-64030) : _GLF_IDENTITY(0, (0) ^ 0))) ^ 1))), (0 ^ 1))), (_GLF_IDENTITY((0 ^ 1), min(_GLF_IDENTITY(_GLF_IDENTITY((0 ^ 1), ((0 ^ 1)) / 1), clamp((_GLF_IDENTITY(0 ^ 1, ~ (~ (0 ^ 1)))), (0 ^ 1), (_GLF_IDENTITY(0, (false ? _GLF_FUZZED(-64030) : _GLF_IDENTITY(0, (0) ^ 0))) ^ 1))), (0 ^ 1)))) - 0), ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))), 0, 1)), (false ? _GLF_FUZZED(20566) : int(ivec4(_GLF_IDENTITY(_GLF_IDENTITY((0 ^ 1), min(_GLF_IDENTITY(_GLF_IDENTITY((0 ^ 1), ((0 ^ 1)) / 1), clamp((_GLF_IDENTITY(0 ^ 1, ~ (~ (0 ^ 1)))), (0 ^ 1), (_GLF_IDENTITY(0, (false ? _GLF_FUZZED(-64030) : _GLF_IDENTITY(0, (0) ^ 0))) ^ 1))), (0 ^ 1))), (_GLF_IDENTITY((0 ^ 1), min(_GLF_IDENTITY(_GLF_IDENTITY((0 ^ 1), ((0 ^ 1)) / 1), clamp((_GLF_IDENTITY(0 ^ 1, ~ (~ (0 ^ 1)))), (0 ^ 1), (_GLF_IDENTITY(0, (false ? _GLF_FUZZED(-64030) : _GLF_IDENTITY(0, (0) ^ 0))) ^ 1))), (0 ^ 1)))) - 0), ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))), 0, 1))))) & _GLF_IDENTITY(1, 0 ^ (1))) << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), max(int(5), int(5))))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     do
      {
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
       atomicStore(buf[_GLF_IDENTITY(next_virtual_gid, min(_GLF_IDENTITY(next_virtual_gid, clamp(next_virtual_gid, next_virtual_gid, next_virtual_gid)), next_virtual_gid))], uint(1), 4, 64, 4);
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(false))
      break;
    }
  }
 else
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) && true)))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
    }
  }
 if((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, max(subgroup_local_id, subgroup_local_id)), (_GLF_IDENTITY(subgroup_local_id, max(subgroup_local_id, subgroup_local_id))) / (1u & 1u)) % _GLF_IDENTITY(2, (_GLF_IDENTITY(2, (2) / 1)) | (_GLF_IDENTITY(2, min(2, _GLF_IDENTITY(2, min(2, 2))))))) == 0)
  {
   do
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(7, (7) << 0)), int(7))), (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(7, (7) << 0)), int(7))), int(int((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(7, (7) << 0)), int(7))))))) | ((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(7, (7) << 0)), int(7))))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(7, (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false))) ? _GLF_FUZZED(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) | (_GLF_IDENTITY(_injected_loop_counter, int(ivec3(_injected_loop_counter, 1, 0)))))) : 7))), int(7)), ~ (~ _GLF_IDENTITY(((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(7, (_GLF_IDENTITY(7, (_GLF_IDENTITY(7, (7) << 0)) << 0)) << 0)), int(7))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(7, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(7, min(7, 7))))), int(7))), (((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(7, (_GLF_IDENTITY(7, (_GLF_IDENTITY(7, (7) << 0)) << 0)) << 0)), int(7))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(7, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(7, min(7, 7))))), int(7)))) ^ 0)))), (_GLF_IDENTITY((_GLF_IDENTITY((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(7, (7) << 0)), int(7))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(7, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(_GLF_IDENTITY(_injected_loop_counter, _GLF_IDENTITY((_injected_loop_counter), ~ (~ ((_injected_loop_counter)))) | (_GLF_IDENTITY(_injected_loop_counter, int(ivec3(_injected_loop_counter, 1, 0)))))) : 7))), int(7)), ~ (~ ((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(7, (7) << 0)), int(7))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(7, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(7, min(_GLF_IDENTITY(7, (false ? _GLF_FUZZED(-86654) : 7)), 7))))), int(7)))))), (_GLF_IDENTITY((_GLF_IDENTITY((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(7, (7) << 0)), int(7))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(7, (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))) * 1.0))) ? _GLF_FUZZED(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) | (_GLF_IDENTITY(_injected_loop_counter, int(ivec3(_injected_loop_counter, 1, 0)))))) : 7))), int(7)), ~ (~ ((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(7, (7) << 0)), int(7))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(7, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(7, _GLF_IDENTITY(min(7, 7), (min(7, 7)) | (min(7, 7))))))), int(7)))))), ~ (~ ((_GLF_IDENTITY((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(7, (7) << 0)), int(7))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(7, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) | (_GLF_IDENTITY(_injected_loop_counter, int(ivec3(_injected_loop_counter, 1, 0)))))) : 7))), int(7)), ~ _GLF_IDENTITY((~ ((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(_GLF_IDENTITY(7, (7) << 0)), int(7)), (false ? _GLF_FUZZED(72768) : 1 << _GLF_IDENTITY(int(_GLF_IDENTITY(7, (7) << 0)), int(7))))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(7, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(7, min(7, 7))))), _GLF_IDENTITY(int(7), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? int(7) : _GLF_FUZZED(_injected_loop_counter)))))), 0 | ((~ ((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(_GLF_IDENTITY(7, (7) << 0)), int(7)), (false ? _GLF_FUZZED(72768) : 1 << _GLF_IDENTITY(int(_GLF_IDENTITY(7, (7) << 0)), int(7))))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(7, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(7, min(7, 7))))), _GLF_IDENTITY(int(7), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? int(7) : _GLF_FUZZED(_injected_loop_counter)))))))))))))) * 1)) << int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x))) ^ 0)); _injected_loop_counter ++)
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     do
      {
       do
        {
         subgroupAll(_GLF_IDENTITY(false, ! (! (false))));
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0), min(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0), _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0))) > injectionSwitch.y))));
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY(_GLF_IDENTITY((true), false || ((true))) && true, bool(bvec2((true) && true, false))))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         return;
        }
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        return;
      }
    }
   else
    {
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(_GLF_IDENTITY(5, _GLF_IDENTITY((5), ((5)) - 0) | (5))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(((0 & 43697) >> _GLF_IDENTITY(_GLF_IDENTITY(int(8), int(8)), clamp(_GLF_IDENTITY(_GLF_IDENTITY(int(8), _GLF_IDENTITY(int(8), clamp(_GLF_IDENTITY(int(8), (int(8)) | (int(8))), int(8), _GLF_IDENTITY(int(8), ~ (~ (int(8))))))), clamp(_GLF_IDENTITY(int(8), int(8)), _GLF_IDENTITY(int(8), int(8)), _GLF_IDENTITY(int(8), int(8)))), _GLF_IDENTITY(int(8), int(8)), _GLF_IDENTITY(_GLF_IDENTITY(int(8), int(8)), (false ? _GLF_FUZZED(6694) : _GLF_IDENTITY(int(8), int(8))))))), ((_GLF_IDENTITY((0 & 43697) >> _GLF_IDENTITY(int(8), int(8)), _GLF_IDENTITY(int(int((0 & 43697) >> _GLF_IDENTITY(_GLF_IDENTITY(int(8), int(8)), (_GLF_IDENTITY(_GLF_IDENTITY(int(8), int(8)), (_GLF_IDENTITY(int(8), int(8))) ^ 0)) >> 0))), (int(int((0 & 43697) >> _GLF_IDENTITY(int(8), int(8))))) << _GLF_IDENTITY(0, min(0, 0)))))) - 0)); _injected_loop_counter --)
      {
       _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(read = _GLF_IDENTITY(atomicLoad(_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) - (0u ^ 0u)), 4, 64, 2), (true ? atomicLoad(buf[virtual_gid], 4, 64, _GLF_IDENTITY(2, (_GLF_IDENTITY(2, 0 ^ (2))) ^ 0)) : _GLF_FUZZED(num_workgroup))), _GLF_IDENTITY(_GLF_IDENTITY((read = atomicLoad(buf[virtual_gid], 4, 64, 2)), ((read = atomicLoad(buf[virtual_gid], _GLF_IDENTITY(4, 0 | (_GLF_IDENTITY(4, (4) | 0))), 64, _GLF_IDENTITY(2, int(_GLF_IDENTITY(ivec4(_GLF_IDENTITY(2, max(2, _GLF_IDENTITY(2, (2) + 0))), 0, 0, 1), (ivec4(_GLF_IDENTITY(2, max(2, _GLF_IDENTITY(2, (2) + 0))), 0, 0, 1)) | (ivec4(_GLF_IDENTITY(2, max(2, _GLF_IDENTITY(2, (2) + 0))), 0, 0, 1)))))))) << 0u), 0u | (_GLF_IDENTITY((read = atomicLoad(buf[virtual_gid], 4, 64, 2)), ((read = atomicLoad(buf[virtual_gid], _GLF_IDENTITY(4, 0 | (_GLF_IDENTITY(4, (4) | 0))), 64, 2))) << 0u))) - 0u), (_GLF_IDENTITY(_GLF_IDENTITY(read = _GLF_IDENTITY(atomicLoad(_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) - (0u ^ 0u)), 4, 64, 2), (true ? atomicLoad(buf[virtual_gid], 4, 64, _GLF_IDENTITY(2, (_GLF_IDENTITY(2, 0 ^ (2))) ^ 0)) : _GLF_FUZZED(num_workgroup))), _GLF_IDENTITY((read = atomicLoad(buf[virtual_gid], 4, 64, 2)), ((read = atomicLoad(buf[virtual_gid], _GLF_IDENTITY(4, 0 | (_GLF_IDENTITY(4, (4) | 0))), 64, 2))) << 0u) - _GLF_IDENTITY(0u, max(0u, _GLF_IDENTITY(0u, 0u ^ (0u))))), (_GLF_IDENTITY(read = _GLF_IDENTITY(atomicLoad(_GLF_IDENTITY(_GLF_IDENTITY(buf[virtual_gid], clamp(_GLF_IDENTITY(buf[virtual_gid], 0u | (buf[virtual_gid])), buf[virtual_gid], buf[virtual_gid])), (buf[virtual_gid]) - _GLF_IDENTITY((0u ^ 0u), (true ? _GLF_IDENTITY((0u ^ 0u), _GLF_IDENTITY(((0u ^ 0u)), (((0u ^ 0u))) | 0u) ^ 0u) : _GLF_FUZZED(num_workgroup)))), 4, 64, 2), (true ? atomicLoad(buf[virtual_gid], 4, 64, _GLF_IDENTITY(2, _GLF_IDENTITY((_GLF_IDENTITY(2, 0 ^ _GLF_IDENTITY((2), int(int((2)))))), int(ivec3((_GLF_IDENTITY(2, 0 ^ (2))), _GLF_IDENTITY(0, _GLF_IDENTITY(int(ivec4(0, int(_GLF_ONE(1.0, injectionSwitch.y)), 0, 1)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? int(ivec4(0, int(_GLF_ONE(1.0, injectionSwitch.y)), 0, 1)) : _GLF_FUZZED(_injected_loop_counter)))), 1))) ^ _GLF_IDENTITY(0, min(_GLF_IDENTITY(0, 0 + (0)), 0)))) : _GLF_FUZZED(num_workgroup))), _GLF_IDENTITY((read = atomicLoad(buf[virtual_gid], 4, 64, 2)), ((read = atomicLoad(buf[virtual_gid], _GLF_IDENTITY(4, 0 | (_GLF_IDENTITY(4, (_GLF_IDENTITY(4, int(ivec4(4, 0, ((1 << _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), max(int(7), int(7))))) >> _GLF_IDENTITY(int(7), int(7))), 0)))) | 0))), 64, 2))) << 0u) - 0u)) | 0u)) | 0u), (_GLF_IDENTITY(_GLF_IDENTITY(read = _GLF_IDENTITY(atomicLoad(_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) - (0u ^ 0u)), 4, 64, 2), (true ? atomicLoad(buf[virtual_gid], 4, 64, _GLF_IDENTITY(2, (_GLF_IDENTITY(2, 0 ^ _GLF_IDENTITY((2), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY((2), min((2), (2)))), max(~ (_GLF_IDENTITY((2), min((2), (2)))), ~ (_GLF_IDENTITY((2), min((2), (2)))))))))) ^ 0)) : _GLF_FUZZED(num_workgroup))), _GLF_IDENTITY(_GLF_IDENTITY((read = atomicLoad(buf[virtual_gid], 4, 64, 2)), ((read = atomicLoad(buf[virtual_gid], _GLF_IDENTITY(4, _GLF_IDENTITY(0 | (_GLF_IDENTITY(4, (4) | 0)), clamp(0 | (_GLF_IDENTITY(4, (4) | 0)), _GLF_IDENTITY(0 | (_GLF_IDENTITY(4, (4) | 0)), (true ? _GLF_IDENTITY(0 | (_GLF_IDENTITY(4, (4) | 0)), (true ? 0 | (_GLF_IDENTITY(4, (4) | 0)) : _GLF_FUZZED(-96764))) : _GLF_FUZZED(11286))), 0 | (_GLF_IDENTITY(4, (4) | 0))))), 64, 2))) << 0u), 0u | _GLF_IDENTITY((_GLF_IDENTITY((read = atomicLoad(buf[virtual_gid], 4, _GLF_IDENTITY(64, clamp(64, 64, 64)), 2)), ((read = atomicLoad(buf[virtual_gid], _GLF_IDENTITY(4, 0 | (_GLF_IDENTITY(4, (4) | 0))), 64, 2))) << 0u)), ((_GLF_IDENTITY((read = atomicLoad(buf[virtual_gid], _GLF_IDENTITY(4, (4) << 0), _GLF_IDENTITY(64, _GLF_IDENTITY(clamp(64, 64, 64), (clamp(64, 64, 64)) - 0)), 2)), ((read = atomicLoad(buf[virtual_gid], _GLF_IDENTITY(4, 0 | (_GLF_IDENTITY(4, (4) | 0))), 64, 2))) << 0u))) + (199628u & 0u))) - 0u), (_GLF_IDENTITY(_GLF_IDENTITY(read = _GLF_IDENTITY(atomicLoad(_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) - (0u ^ 0u)), 4, _GLF_IDENTITY(64, max(64, 64)), 2), (true ? atomicLoad(buf[virtual_gid], 4, 64, _GLF_IDENTITY(2, _GLF_IDENTITY((_GLF_IDENTITY(2, 0 ^ (2))), (true ? (_GLF_IDENTITY(2, 0 ^ (2))) : _GLF_FUZZED((_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) | (_injected_loop_counter)) | -3126)))) ^ 0)) : _GLF_FUZZED(num_workgroup))), _GLF_IDENTITY((read = atomicLoad(buf[virtual_gid], 4, 64, 2)), ((read = atomicLoad(buf[virtual_gid], _GLF_IDENTITY(4, 0 | (_GLF_IDENTITY(4, (4) | 0))), 64, _GLF_IDENTITY(2, (2) ^ _GLF_IDENTITY(0, (false ? _GLF_FUZZED(_injected_loop_counter) : 0)))))) << 0u) - _GLF_IDENTITY(0u, max(0u, _GLF_IDENTITY(0u, 0u ^ (0u))))), (_GLF_IDENTITY(read = _GLF_IDENTITY(atomicLoad(_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) - _GLF_IDENTITY((0u ^ 0u), (true ? _GLF_IDENTITY((_GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, (0u) >> 0u)) >> 0u) ^ 0u), _GLF_IDENTITY(((0u ^ 0u)), clamp(((0u ^ 0u)), ((0u ^ 0u)), ((0u ^ 0u)))) ^ 0u) : _GLF_FUZZED(num_workgroup)))), 4, 64, 2), (true ? atomicLoad(buf[_GLF_IDENTITY(virtual_gid, (virtual_gid) >> (0u << _GLF_IDENTITY(uint(6u), uint(6u))))], 4, _GLF_IDENTITY(64, ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2))) * (64)), _GLF_IDENTITY(2, _GLF_IDENTITY((_GLF_IDENTITY(2, 0 ^ (2))), int(ivec3((_GLF_IDENTITY(2, 0 ^ (2))), 0, 1))) ^ 0)) : _GLF_FUZZED(_GLF_IDENTITY(num_workgroup, min(_GLF_IDENTITY(num_workgroup, max(num_workgroup, num_workgroup)), num_workgroup))))), _GLF_IDENTITY((read = atomicLoad(buf[virtual_gid], 4, 64, 2)), ((read = atomicLoad(buf[virtual_gid], _GLF_IDENTITY(4, 0 | (_GLF_IDENTITY(_GLF_IDENTITY(4, (_GLF_IDENTITY(4, int(ivec4(4, 0, ((1 << _GLF_IDENTITY(int(7), _GLF_IDENTITY(_GLF_IDENTITY(int(7), max(int(7), int(7))), (true ? _GLF_IDENTITY(int(7), max(int(7), int(7))) : _GLF_FUZZED(ivec4(36960, 50066, -56052, 18282)[3]))))) >> _GLF_IDENTITY(int(7), int(7))), 0)))) | 0), int(int(_GLF_IDENTITY(4, (_GLF_IDENTITY(4, int(ivec4(4, 0, ((1 << _GLF_IDENTITY(int(7), _GLF_IDENTITY(_GLF_IDENTITY(int(7), max(int(7), int(7))), (true ? _GLF_IDENTITY(int(7), max(int(7), int(7))) : _GLF_FUZZED(ivec4(36960, 50066, -56052, 18282)[3]))))) >> _GLF_IDENTITY(int(7), int(7))), 0)))) | 0)))))), 64, 2))) << 0u) - 0u)) | 0u)) | 0u)) * ((1u << _GLF_IDENTITY(uint(3u), uint(3u))) >> _GLF_IDENTITY(uint(3u), uint(3u))));
      }
    }
   else
    {
    }
  }
 else
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (_GLF_IDENTITY(1 & 1, (1 & 1) << (0 | 0)))); _GLF_IDENTITY(_injected_loop_counter ++, 0 + (_GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) - 0))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
      break;
     if(_GLF_DEAD(false))
      break;
     do
      {
       do
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(_GLF_IDENTITY(! _GLF_IDENTITY(_GLF_IDENTITY((false), false || ((false))), (_GLF_IDENTITY((false), false || ((false)))) && true), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(! _GLF_IDENTITY((false), false || ((false))), ! (! (! _GLF_IDENTITY((false), _GLF_IDENTITY(false || ((false)), (false || ((false))) || false))))), false)), true && (bool(bvec2(_GLF_IDENTITY(! _GLF_IDENTITY((false), false || ((false))), ! (! (! _GLF_IDENTITY((false), false || ((false)))))), false))))), ! (! (! (false))))))))
          {
          }
         else
          {
           subgroupAll(false);
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true && (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bool(bvec3(! (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false, true))), (_GLF_IDENTITY(! (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true && (! (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || false)) || false), false || (_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || false)) || false), ! (! (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || false)) || false)))))), _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true))))))) && true))))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (false)), true && ((! (false))))), (injectionSwitch.x > injectionSwitch.y))))))
      return;
    }
   else
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec3(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, true)))))))
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
        {
         do
          {
           return;
          }
         while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, (false) || false), false)))));
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     else
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_DEAD(false))
          return;
        }
       else
        {
         if(_GLF_DEAD(false))
          return;
        }
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
          return;
         read = atomicLoad(buf[virtual_gid], 4, _GLF_IDENTITY(64, 0 ^ (64)), _GLF_IDENTITY(2, 0 ^ (2)));
        }
       else
        {
        }
      }
    }
   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       do
        {
         return;
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        return;
      }
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), (mat2(1.0) * (injectionSwitch)) * mat2(1.0))).y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
        }
       else
        {
         if(_GLF_DEAD(false))
          break;
         do
          {
           if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || false)) || false), (injectionSwitch.x > injectionSwitch.y))))
            return;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
           do
            {
             return;
             if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), ! (! (_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))
              continue;
            }
           while(_GLF_WRAPPED_LOOP(false));
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
          }
         while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) && _GLF_IDENTITY(true, (true) || false))))));
        }
      }
     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), _GLF_IDENTITY((_GLF_WRAPPED_IF_FALSE(false)), bool(bvec3((_GLF_WRAPPED_IF_FALSE(false)), true, true))) && _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(78.60)), vec2(_GLF_FUZZED((6000.0092 / -925.117)), (injectionSwitch)[1]), bvec2(false, true))).y))))
      {
      }
     else
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != (_GLF_IDENTITY(0, (0) * 1) | 0), ! (! (_injected_loop_counter != (_GLF_IDENTITY(0, (0) * 1) | 0))))); _injected_loop_counter --)
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(injectionSwitch.x > injectionSwitch.y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), false, false), _GLF_IDENTITY(bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(injectionSwitch.x > injectionSwitch.y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), false, false), bvec3(bvec3(bvec3(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(injectionSwitch.x > injectionSwitch.y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), false, false)))), false)), bvec3(bvec4(bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(injectionSwitch.x > injectionSwitch.y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), false, false), bvec3(bvec3(bvec3(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(injectionSwitch.x > injectionSwitch.y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), false, false)))), false)), true))))))))))
            break;
           break;
           if(_GLF_DEAD(false))
            break;
           if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
            return;
          }
         if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || false)) || false)))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            return;
          }
         if(_GLF_DEAD(false))
          continue;
        }
      }
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) : _GLF_FUZZED(-1.3))) > injectionSwitch.y))))
      return;
    }
   else
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat2x4(injectionSwitch, 1.0, 1.0, 0.0, 0.0, 0.0, cos(0.0)), mat4(1.0) * (mat2x4(injectionSwitch, 1.0, 1.0, 0.0, 0.0, 0.0, cos(0.0)))))).x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false), ! (_GLF_IDENTITY(_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), ! (! (! ((injectionSwitch.x > injectionSwitch.y))))), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(! _GLF_IDENTITY(((injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_IDENTITY(((injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(((injectionSwitch.x > injectionSwitch.y)), ! (! (((injectionSwitch.x > injectionSwitch.y)))))))), true, true, false))), ! (! (! ((_GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x)) > injectionSwitch.y))))), true, false, false)), _GLF_IDENTITY((bool(bvec4(_GLF_IDENTITY(! ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(_GLF_IDENTITY(bvec3(injectionSwitch.x > injectionSwitch.y, true, true), bvec3(bvec3(bvec3(injectionSwitch.x > injectionSwitch.y, true, true)))))))), ! (! (! ((injectionSwitch.x > injectionSwitch.y))))), true, false, false))), true && _GLF_IDENTITY(((bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), ! (! (! ((injectionSwitch.x > injectionSwitch.y)))))))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))), ! (! (! ((_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))), true, false, false)))), ! (_GLF_IDENTITY(! (((bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), ! (! (! ((injectionSwitch.x > injectionSwitch.y)))))))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))), ! (! (! ((_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))), true, false, false))))), (! (((bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), ! (! (! ((injectionSwitch.x > injectionSwitch.y)))))))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))), ! (! (! ((_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))), true, false, false)))))) || false)))) || false)))))))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        return;
       do
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false))))) || false))
            break;
           return;
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        return;
      }
    }
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false)))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)), (bool(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false)))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))) && true)))
    return;
  }
 do
  {
   do
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (1 ^ 1)); _injected_loop_counter --)
              {
               return;
              }
             if(_GLF_DEAD(false))
              continue;
            }
          }
         else
          {
          }
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           do
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), _GLF_IDENTITY(bool(bvec2(bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true)), (bool(bvec2(bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true))) && true)))))
              {
              }
             else
              {
               if(_GLF_DEAD(false))
                return;
               if(_GLF_DEAD(false))
                return;
               if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) && true)))), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), (! (injectionSwitch.x > injectionSwitch.y)) || false))))), bool(bvec3(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) && true)))), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), (! (injectionSwitch.x > injectionSwitch.y)) || false))))), false || (_GLF_FALSE(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) && true)))), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), (! (injectionSwitch.x > injectionSwitch.y)) || false))))))), false, _GLF_IDENTITY(false, (false) && true)))), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-3.1), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(1.8)), bvec2(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, 1.0 * (injectionSwitch.y)))), false))).y))), ! (! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))
                return;
              }
            }
           while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, true && (false))))));
          }
         else
          {
           if(_GLF_DEAD(false))
            continue;
          }
        }
       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) && true)), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) && true))), false || (! (_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY((false) && true, false || ((false) && true))))))))))
        {
        }
       else
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(59.72)), bool(false))), injectionSwitch.x)) < injectionSwitch.y))))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             subgroupBarrier();
            }
          }
         else
          {
          }
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), false || (_GLF_WRAPPED_LOOP(false))));
 if(_GLF_DEAD(false))
  return;
 atomicStore(checker[virtual_gid], read, 4, 64, 4);
 if(_GLF_DEAD(false))
  return;
 if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))) || (_GLF_DEAD(false)), bool(bvec4(_GLF_IDENTITY(false, ! (! (false))) || (_GLF_DEAD(false)), false, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))) || false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))) || (_GLF_DEAD(false)), bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, true, false, true)), ! (! (bool(bvec4(false, true, false, true)))))), ! (! (false))) || (_GLF_DEAD(false)), false, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))) || false)))))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), ! (! (! (true)))))), (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(_GLF_IDENTITY(_GLF_IDENTITY(mat3(_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-9302.7522)), bool(false))), injectionSwitch.x, injectionSwitch.x)), 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0), (false ? _GLF_FUZZED(mat3(217.218, 37.96, -5.9, 633.966, 7.9, -47.13, 88.02, -2639.6364, 355.377)) : _GLF_IDENTITY(mat3(_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-9302.7522)), bool(false))), injectionSwitch.x, injectionSwitch.x)), 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0), (false ? _GLF_FUZZED((- mat3(5.2, 8943.7631, 12.12, 9.3, -28.92, 3672.6171, -638.352, -8.8, 7.8))) : mat3(_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-9302.7522)), bool(false))), injectionSwitch.x, injectionSwitch.x)), 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0))))), (mat3(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).x, clamp(_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-9302.7522)), bool(false))), injectionSwitch.x, injectionSwitch.x)), 1.0, 1.0, 0.0, 0.0, _GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-6065.9009)), bool(false))), 1.0, 0.0, 1.0)) / mat3(1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0))), _GLF_IDENTITY(float(mat3x4(float(_GLF_IDENTITY(mat3(_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-9302.7522)), bool(false))), injectionSwitch.x, injectionSwitch.x)), 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0), (mat3(_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-9302.7522)), bool(false))), injectionSwitch.x, injectionSwitch.x)), 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0)) / mat3(1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0))), 0.0, _GLF_IDENTITY(dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(1.0, 0.0, 1.0, 1.0)), dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(1.0, 0.0, 1.0, 1.0))), round(length(normalize(vec2(1.0, 1.0)))), 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0)), float(mat2x3(float(mat3x4(float(_GLF_IDENTITY(mat3(_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(clamp(_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-9302.7522)), bool(false))), injectionSwitch.x, injectionSwitch.x), float(_GLF_IDENTITY(mat2(clamp(_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-9302.7522)), bool(false))), injectionSwitch.x, injectionSwitch.x), 1.0, 1.0, 1.0), (mat2(clamp(_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-9302.7522)), bool(false))), injectionSwitch.x, injectionSwitch.x), 1.0, 1.0, 1.0)) * mat2(_GLF_ONE(1.0, injectionSwitch.y)))))), 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0), (mat3(_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-9302.7522)), bool(false))), injectionSwitch.x, injectionSwitch.x)), 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0)) / mat3(1.0, 1.0, 1.0, 1.0, 1.0, 1.0, _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-9.9)), float(_GLF_IDENTITY(1.0, (1.0) * 1.0)), bool(true))), 1.0, 1.0))), 0.0, _GLF_IDENTITY(dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(1.0, 0.0, 1.0, 1.0)), dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(1.0, 0.0, 1.0, 1.0))), round(_GLF_IDENTITY(length(normalize(vec2(1.0, 1.0))), mix(float(_GLF_FUZZED(-63.27)), float(length(normalize(vec2(1.0, 1.0)))), bool(_GLF_IDENTITY(true, bool(bvec4(true, false, false, false))))))), 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0)), 0.0, 0.0, _GLF_IDENTITY(0.0, float(_GLF_IDENTITY(mat2(_GLF_IDENTITY(0.0, min(0.0, 0.0)), round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0, 1.0), mat2(mat3x4(mat2(_GLF_IDENTITY(0.0, min(0.0, 0.0)), round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0, 1.0)))))), 1.0, 1.0))))) > injectionSwitch.y))))
        return;
      }
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec4(false, false, false, _GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (injectionSwitch.x > injectionSwitch.y)))))) || false))) || _GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + 0.0), (false ? _GLF_FUZZED(9.4) : _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(vec4(injectionSwitch, sqrt(1.0), 0.0))).x, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x) + 0.0))) > injectionSwitch.y, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat3x4(injectionSwitch, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, _GLF_IDENTITY(0.0, clamp(_GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0, 0.0)), 1.0, 1.0, sin(0.0))), vec2(mat3x2(_GLF_IDENTITY(vec2(mat3x4(injectionSwitch, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, sin(0.0))), (vec2(mat3x4(injectionSwitch, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, sin(0.0)))) * vec2(1.0, 1.0)), 1.0, 0.0, 1.0, sqrt(1.0))))).x, _GLF_IDENTITY(float(_GLF_IDENTITY(mat4x3(injectionSwitch.x, 0.0, 1.0, 1.0, sqrt(1.0), 0.0, round(length(normalize(vec2(1.0, 1.0)))), 1.0, _GLF_IDENTITY(dot(vec3(0.0, 0.0, 0.0), vec3(_GLF_IDENTITY(1.0, 0.0 + (_GLF_IDENTITY(1.0, float(mat3x4(1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0))))), 1.0, 1.0)), dot(vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0))), cos(0.0), 0.0, 0.0), mat3(1.0) * (mat4x3(injectionSwitch.x, 0.0, 1.0, 1.0, sqrt(1.0), 0.0, round(length(normalize(vec2(1.0, 1.0)))), 1.0, _GLF_IDENTITY(dot(vec3(_GLF_IDENTITY(0.0, clamp(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), 0.0, 0.0)), 0.0, 0.0), vec3(1.0, 1.0, 1.0)), dot(vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0))), _GLF_IDENTITY(cos(0.0), clamp(cos(0.0), cos(0.0), _GLF_IDENTITY(cos(0.0), max(cos(0.0), cos(0.0))))), 0.0, 0.0)))), (float(_GLF_IDENTITY(mat4x3(injectionSwitch.x, 0.0, _GLF_IDENTITY(1.0, (1.0) + 0.0), 1.0, sqrt(1.0), 0.0, round(length(normalize(vec2(1.0, 1.0)))), 1.0, _GLF_IDENTITY(dot(vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0)), dot(vec3(0.0, 0.0, 0.0), vec3(_GLF_IDENTITY(1.0, max(1.0, 1.0)), _GLF_IDENTITY(1.0, float(_GLF_IDENTITY(mat3x4(_GLF_IDENTITY(1.0, (1.0) - 0.0), 0.0, 0.0, _GLF_IDENTITY(dot(vec4(0.0, 1.0, 0.0, 1.0), vec4(1.0, 0.0, 1.0, 0.0)), dot(vec4(0.0, 1.0, 0.0, 1.0), vec4(1.0, 0.0, 1.0, 0.0))), _GLF_IDENTITY(0.0, (0.0) - 0.0), 0.0, 1.0, 0.0, log(1.0), 0.0, 1.0, 0.0), transpose(transpose(mat3x4(_GLF_IDENTITY(1.0, (1.0) - 0.0), 0.0, 0.0, _GLF_IDENTITY(dot(vec4(0.0, 1.0, 0.0, 1.0), vec4(1.0, 0.0, 1.0, 0.0)), dot(vec4(0.0, 1.0, 0.0, 1.0), vec4(1.0, 0.0, 1.0, 0.0))), _GLF_IDENTITY(0.0, (0.0) - 0.0), 0.0, 1.0, 0.0, log(1.0), 0.0, 1.0, 0.0)))))), 1.0))), cos(0.0), 0.0, 0.0), mat3(1.0) * (mat4x3(injectionSwitch.x, 0.0, 1.0, 1.0, sqrt(1.0), 0.0, round(length(normalize(vec2(1.0, 1.0)))), 1.0, _GLF_IDENTITY(dot(vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0)), dot(vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0))), cos(0.0), _GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(-4586.8850))), 0.0))))) / 1.0))) + _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(6.8) : 0.0))), (false ? _GLF_FUZZED(9.4) : _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + 0.0))) > injectionSwitch.y) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false || ((_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + 0.0) > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))))))))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         do
          {
           return;
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y, ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (! (injectionSwitch.x > injectionSwitch.y)))))))));
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
        return;
      }
     else
      {
      }
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
    }
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END
BUFFER checker DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected_checker DATA_TYPE uint32 SIZE 8388096 FILL 1

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 
  BIND BUFFER checker AS storage DESCRIPTOR_SET 0 BINDING 2 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT checker EQ_BUFFER expected_checker
