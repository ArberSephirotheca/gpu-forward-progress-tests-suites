#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_0 {
 uvec4 _f0;
 uvec2 _f1;
 bvec3 _f2;
 uint virtual_gid;
} ;

struct _GLF_struct_1 {
 mat4 _f0;
 _GLF_struct_0 _f1;
} ;

struct _GLF_struct_2 {
 uvec2 _f0;
 _GLF_struct_1 _f1;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uvec4 GLF_merged3_0_2_41_2_1_16_3_1_11GLF_merged2_0_1_13_1_1_4num_workgroupreadnext_virtual_gidsubgroup_id;
 uvec2 GLF_merged2_0_1_13_1_1_4num_workgroupread;
 GLF_merged3_0_2_41_2_1_16_3_1_11GLF_merged2_0_1_13_1_1_4num_workgroupreadnext_virtual_gidsubgroup_id.xy = GLF_merged2_0_1_13_1_1_4num_workgroupread;
 uvec4 GLF_merged4_0_1_16_1_1_11_2_1_14_3_1_12next_virtual_gidvirtual_gidworkgroup_baseworkgroup_id;
 uint subgroup_id = gl_SubgroupID;
 GLF_merged3_0_2_41_2_1_16_3_1_11GLF_merged2_0_1_13_1_1_4num_workgroupreadnext_virtual_gidsubgroup_id.w = subgroup_id;
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 GLF_merged3_0_2_41_2_1_16_3_1_11GLF_merged2_0_1_13_1_1_4num_workgroupreadnext_virtual_gidsubgroup_id.xy.x = num_workgroup;
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = gl_WorkGroupID.x;
 GLF_merged4_0_1_16_1_1_11_2_1_14_3_1_12next_virtual_gidvirtual_gidworkgroup_baseworkgroup_id.w = workgroup_id;
 uint workgroup_base = workgroup_size * GLF_merged4_0_1_16_1_1_11_2_1_14_3_1_12next_virtual_gidvirtual_gidworkgroup_baseworkgroup_id.w;
 GLF_merged4_0_1_16_1_1_11_2_1_14_3_1_12next_virtual_gidvirtual_gidworkgroup_baseworkgroup_id.z = workgroup_base;
 uint subgroup_base = GLF_merged3_0_2_41_2_1_16_3_1_11GLF_merged2_0_1_13_1_1_4num_workgroupreadnext_virtual_gidsubgroup_id.w * subgroup_size;
 _GLF_struct_2 _GLF_struct_replacement_2 = _GLF_struct_2(uvec2(1u), _GLF_struct_1(mat4(1.0), _GLF_struct_0(uvec4(1u), uvec2(1u), bvec3(true), GLF_merged4_0_1_16_1_1_11_2_1_14_3_1_12next_virtual_gidvirtual_gidworkgroup_baseworkgroup_id.z + subgroup_base + subgroup_local_id)));
 GLF_merged4_0_1_16_1_1_11_2_1_14_3_1_12next_virtual_gidvirtual_gidworkgroup_baseworkgroup_id.y = _GLF_struct_replacement_2._f1._f1.virtual_gid;
 uint next_virtual_gid = GLF_merged4_0_1_16_1_1_11_2_1_14_3_1_12next_virtual_gidvirtual_gidworkgroup_baseworkgroup_id.z + subgroup_base + ((subgroup_local_id + 1) % subgroup_size);
 GLF_merged3_0_2_41_2_1_16_3_1_11GLF_merged2_0_1_13_1_1_4num_workgroupreadnext_virtual_gidsubgroup_id.z = next_virtual_gid;
 GLF_merged4_0_1_16_1_1_11_2_1_14_3_1_12next_virtual_gidvirtual_gidworkgroup_baseworkgroup_id.x = GLF_merged3_0_2_41_2_1_16_3_1_11GLF_merged2_0_1_13_1_1_4num_workgroupreadnext_virtual_gidsubgroup_id.z;
 uint read = 0;
 GLF_merged3_0_2_41_2_1_16_3_1_11GLF_merged2_0_1_13_1_1_4num_workgroupreadnext_virtual_gidsubgroup_id.xy.y = read;
 atomicStore(buf[GLF_merged4_0_1_16_1_1_11_2_1_14_3_1_12next_virtual_gidvirtual_gidworkgroup_baseworkgroup_id.x], uint(1), 4, 64, 4);
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   if((subgroup_local_id % 2) == 0)
    {
     subgroupAll(false);
     GLF_merged3_0_2_41_2_1_16_3_1_11GLF_merged2_0_1_13_1_1_4num_workgroupreadnext_virtual_gidsubgroup_id.xy.y = atomicLoad(buf[GLF_merged4_0_1_16_1_1_11_2_1_14_3_1_12next_virtual_gidvirtual_gidworkgroup_baseworkgroup_id.y], 4, 64, 2);
    }
   else
    {
     subgroupAll(false);
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       GLF_merged3_0_2_41_2_1_16_3_1_11GLF_merged2_0_1_13_1_1_4num_workgroupreadnext_virtual_gidsubgroup_id.xy.y = atomicLoad(buf[GLF_merged4_0_1_16_1_1_11_2_1_14_3_1_12next_virtual_gidvirtual_gidworkgroup_baseworkgroup_id.y], 4, 64, 2);
      }
    }
  }
 do
  {
   subgroupBarrier();
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   atomicStore(checker[GLF_merged4_0_1_16_1_1_11_2_1_14_3_1_12next_virtual_gidvirtual_gidworkgroup_baseworkgroup_id.y], GLF_merged3_0_2_41_2_1_16_3_1_11GLF_merged2_0_1_13_1_1_4num_workgroupreadnext_virtual_gidsubgroup_id.xy.y, 4, 64, 4);
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END
BUFFER checker DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected_checker DATA_TYPE uint32 SIZE 8388096 FILL 1

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 
  BIND BUFFER checker AS storage DESCRIPTOR_SET 0 BINDING 2 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT checker EQ_BUFFER expected_checker
