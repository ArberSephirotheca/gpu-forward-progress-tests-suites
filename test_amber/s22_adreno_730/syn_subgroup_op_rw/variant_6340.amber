#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bool(false)))) || false)))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(false))
  barrier();
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || _GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (! (false))))))))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
    barrier();
  }
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(mat4(injectionSwitch.x, 1.0, round(length(normalize(vec2(1.0, 1.0)))), 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, abs(1.0), 0.0, 0.0, exp(0.0), 0.0), transpose(transpose(_GLF_IDENTITY(mat4(injectionSwitch.x, 1.0, round(length(normalize(vec2(1.0, 1.0)))), 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, abs(1.0), 0.0, 0.0, exp(0.0), 0.0), (true ? mat4(injectionSwitch.x, 1.0, round(length(normalize(vec2(1.0, 1.0)))), 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, abs(1.0), 0.0, 0.0, exp(0.0), 0.0) : _GLF_FUZZED(mat4(-1.1, -9098.8657, -9.0, 33.39, 954.811, 4.5, -4.0, 3.6, 7227.9843, -9.4, -163.884, -7969.6488, -2.0, -0.7, 7402.0568, 7957.7316))))))))) > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y, (injectionSwitch.y) - 0.0))))))) || false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))) || false))))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint workgroup_base = workgroup_size * _GLF_IDENTITY(workgroup_id, (workgroup_id) | 0u);
 if(_GLF_DEAD(false))
  barrier();
 uint subgroup_base = _GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) << 0u);
 if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, (false) && _GLF_IDENTITY(true, ! (! (true))))), ! (! _GLF_IDENTITY((_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, (false) && _GLF_IDENTITY(true, bool(bvec4(true, false, true, false))))), (_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), (_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY((false) && true, false || (_GLF_IDENTITY((false) && true, ! (_GLF_IDENTITY(! ((false) && true), bool(bvec4(! ((false) && true), false, true, true)))))))), bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY((false) && true, ! (_GLF_IDENTITY(! ((false) && true), _GLF_IDENTITY(bool(bvec2(! ((false) && true), _GLF_IDENTITY(true, (true) && true))), (bool(bvec2(! ((false) && true), true))) || false))))), ! (! (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (_GLF_IDENTITY(! (false), ! (! (! (false))))) && true)))) && true)))), true, false, false)))) && true))) || false)), ! (! (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, (false) && _GLF_IDENTITY(true, bool(bvec4(true, false, true, false))))), (_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY((false) && true, ! (_GLF_IDENTITY(! ((false) && true), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(! ((false) && true), (! ((false) && true)) && true), true)), (bool(bvec2(! ((false) && true), true))) || false))))), ! (! (_GLF_IDENTITY(false, (false) && true)))), true, false, false)))) && true))) || false)), (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, (false) && _GLF_IDENTITY(true, bool(bvec4(true, false, true, false))))), (_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY((false) && true, ! (_GLF_IDENTITY(! ((false) && true), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(! ((false) && true), (! ((false) && true)) && true), true)), (bool(bvec2(! ((false) && true), true))) || false))))), ! (! (_GLF_IDENTITY(false, (false) && true)))), true, false, false)))) && true))) || false)), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool((_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, (false) && _GLF_IDENTITY(true, bool(bvec4(true, false, true, false))))), (_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY((false) && true, ! (_GLF_IDENTITY(! ((false) && true), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(! ((false) && true), (! ((false) && true)) && true), true)), (bool(bvec2(! ((false) && true), true))) || false))))), ! (! (_GLF_IDENTITY(false, (false) && true)))), true, false, false)))) && true))) || false))), bool(bvec3(bool((_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, (false) && _GLF_IDENTITY(true, bool(bvec4(true, false, true, false))))), (_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY((false) && true, ! (_GLF_IDENTITY(! ((false) && true), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(! ((false) && true), (! ((false) && true)) && true), true)), (bool(bvec2(! ((false) && true), true))) || false))))), ! (! (_GLF_IDENTITY(false, (false) && true)))), true, false, false)))) && true))) || false))), true, true)))), bool(bvec2(bool(_GLF_IDENTITY(bool((_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, (false) && _GLF_IDENTITY(true, bool(bvec4(true, false, true, false))))), (_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY((false) && true, ! (_GLF_IDENTITY(! ((false) && true), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(! ((false) && true), (! ((false) && true)) && true), true)), (bool(bvec2(! ((false) && true), true))) || false))))), ! (! (_GLF_IDENTITY(false, (false) && true)))), true, false, false)))) && true))) || false))), bool(bvec3(bool((_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, (false) && _GLF_IDENTITY(true, bool(bvec4(true, false, true, false))))), (_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY((false) && true, ! (_GLF_IDENTITY(! ((false) && true), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(! ((false) && true), (! ((false) && true)) && true), true)), (bool(bvec2(! ((false) && true), true))) || false))))), ! (! (_GLF_IDENTITY(false, (false) && true)))), true, false, false)))) && true))) || false))), true, true)))), true))))) && true)))))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED((-78.70 - 3.0))), vec2(_GLF_FUZZED(-1.6), _GLF_IDENTITY((injectionSwitch)[1], mix(float((injectionSwitch)[1]), float(_GLF_FUZZED(7579.4052)), bool(false)))), bvec2(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))).y))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
      }
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 uint virtual_gid = workgroup_base + subgroup_base + _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) >> 0u);
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x, (false ? _GLF_FUZZED(572.972) : _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch))) - vec2(0.0, 0.0)).x)) > injectionSwitch.y))))))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     barrier();
     if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) || false))))))))
      barrier();
     if(_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(bvec2(_GLF_DEAD(false), _GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bool(false)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bvec2(bvec2(bvec2(_GLF_DEAD(false), false)))))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
          barrier();
         barrier();
        }
       barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((false), ! (! (_GLF_IDENTITY((false), bool(_GLF_IDENTITY(bvec2((false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec2(bvec4(bvec2((false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, false)))))))) || false)))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 uint next_virtual_gid = workgroup_base + _GLF_IDENTITY(subgroup_base, 0u ^ (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_base, min(subgroup_base, subgroup_base)), ~ (~ (_GLF_IDENTITY(subgroup_base, min(subgroup_base, subgroup_base))))))) + ((subgroup_local_id + _GLF_IDENTITY(1, 0 | (1))) % subgroup_size);
 uint read = atomicLoad(_GLF_IDENTITY(buf[virtual_gid], _GLF_IDENTITY(max(_GLF_IDENTITY(buf[virtual_gid], _GLF_IDENTITY(clamp(buf[virtual_gid], buf[virtual_gid], buf[virtual_gid]), min(clamp(buf[virtual_gid], buf[virtual_gid], buf[virtual_gid]), clamp(buf[virtual_gid], buf[virtual_gid], buf[virtual_gid])))), buf[virtual_gid]), max(max(_GLF_IDENTITY(buf[virtual_gid], clamp(buf[virtual_gid], buf[virtual_gid], buf[virtual_gid])), buf[virtual_gid]), max(_GLF_IDENTITY(buf[virtual_gid], clamp(buf[virtual_gid], buf[_GLF_IDENTITY(virtual_gid, (_GLF_IDENTITY(virtual_gid, ~ (_GLF_IDENTITY(~ (virtual_gid), (~ (virtual_gid)) >> 0u)))) * 1u)], buf[virtual_gid])), buf[virtual_gid])))), 4, 64, 2);
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec4(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)))) > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, (false) && true)))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat2x4(injectionSwitch, 1.0, 0.0, 0.0, length(sin(vec2(0.0, 0.0))), 1.0, 0.0))), vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], clamp(_GLF_IDENTITY(injectionSwitch[1], clamp(injectionSwitch[1], injectionSwitch[1], injectionSwitch[1])), injectionSwitch[1], injectionSwitch[1])))).x > injectionSwitch.y, _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec3(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0), true, false)), false || (_GLF_IDENTITY(bool(bvec3(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0), true, false)), bool(bvec2(bool(bvec3(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0), true, false)), false))))), false || (bool(bvec3(injectionSwitch.x > injectionSwitch.y, true, false)))))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, true && (false))))))))))
        barrier();
       barrier();
      }
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(5.6)), float(injectionSwitch.y), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))
          barrier();
         barrier();
        }
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         barrier();
        }
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(_GLF_IDENTITY(bvec3(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(bool(! (injectionSwitch.x > injectionSwitch.y))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(bool(bool(! (injectionSwitch.x > injectionSwitch.y))), bool(bvec2(bool(bool(! (injectionSwitch.x > injectionSwitch.y))), true)))))))))), false, true), _GLF_IDENTITY(bvec3(bvec3(bvec3(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y), _GLF_IDENTITY(bool(bool(! (injectionSwitch.x > injectionSwitch.y))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(bool(bool(! (injectionSwitch.x > injectionSwitch.y))), bool(bvec2(bool(bool(! (injectionSwitch.x > injectionSwitch.y))), true)))))))))), false, true))), bvec3(bvec4(bvec3(bvec3(bvec3(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(bool(! (injectionSwitch.x > injectionSwitch.y))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(bool(bool(! (injectionSwitch.x > injectionSwitch.y))), bool(bvec2(bool(bool(! (injectionSwitch.x > injectionSwitch.y))), true)))))))))), false, true))), _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat2(injectionSwitch, tan(0.0), 0.0), (mat2(injectionSwitch, tan(0.0), 0.0)) - mat2(0.0, 0.0, 0.0, 0.0)))).y))))))))))
        barrier();
       barrier();
      }
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id % 2) == 0, ! (! ((subgroup_local_id % 2) == 0))), true && (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, (false ? _GLF_IDENTITY(_GLF_FUZZED(subgroup_size), uint(_GLF_IDENTITY(uvec4(_GLF_IDENTITY(_GLF_FUZZED(subgroup_size), (false ? _GLF_FUZZED(workgroup_size) : _GLF_IDENTITY(_GLF_FUZZED(subgroup_size), (_GLF_FUZZED(subgroup_size)) << 0u))), 1u, 0u, 1u), (uvec4(_GLF_IDENTITY(_GLF_FUZZED(subgroup_size), (false ? _GLF_FUZZED(workgroup_size) : _GLF_IDENTITY(_GLF_FUZZED(subgroup_size), (_GLF_FUZZED(subgroup_size)) << 0u))), 1u, 0u, 1u)) | (uvec4(_GLF_IDENTITY(_GLF_FUZZED(subgroup_size), (false ? _GLF_FUZZED(workgroup_size) : _GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(subgroup_size), (_GLF_FUZZED(subgroup_size)) << 0u), (0u >> _GLF_IDENTITY(uint(8u), uint(8u))) ^ (_GLF_IDENTITY(_GLF_FUZZED(subgroup_size), (_GLF_FUZZED(subgroup_size)) << 0u))))), 1u, 0u, 1u))))) : subgroup_local_id)) % 2) == 0, ! _GLF_IDENTITY((! ((subgroup_local_id % 2) == 0)), bool(bvec2((! ((subgroup_local_id % 2) == 0)), true)))))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id % 2) == 0, ((subgroup_local_id % 2) == 0) || false), _GLF_IDENTITY(! (! ((subgroup_local_id % 2) == _GLF_IDENTITY(0, (0) << _GLF_IDENTITY(0, _GLF_IDENTITY((0), _GLF_IDENTITY(((0)) + 0, (((0)) + 0) >> 0)) >> 0)))), (_GLF_IDENTITY(! (! ((subgroup_local_id % 2) == _GLF_IDENTITY(0, (0) << _GLF_IDENTITY(0, _GLF_IDENTITY((0), _GLF_IDENTITY(((0)) + 0, (((0)) + 0) >> 0)) >> 0)))), ! (! (! (! ((subgroup_local_id % 2) == _GLF_IDENTITY(0, (0) << _GLF_IDENTITY(0, _GLF_IDENTITY((0), _GLF_IDENTITY(((0)) + 0, (((0)) + 0) >> 0)) >> 0)))))))) || false))), true && (_GLF_IDENTITY(bool(_GLF_IDENTITY((subgroup_local_id % 2) == 0, ! (! ((subgroup_local_id % 2) == 0)))), _GLF_IDENTITY(bool(bvec3(bool(_GLF_IDENTITY((subgroup_local_id % 2) == 0, _GLF_IDENTITY(! (! ((subgroup_local_id % 2) == 0)), ! (! (_GLF_IDENTITY(! (! ((subgroup_local_id % 2) == _GLF_IDENTITY(0, int(_GLF_IDENTITY(ivec3(0, 1, int(_GLF_ZERO(_GLF_IDENTITY(0.0, 0.0 + (0.0)), _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(vec4(injectionSwitch, 0.0, 0.0)), min(vec2(vec4(injectionSwitch, 0.0, 0.0)), vec2(vec4(injectionSwitch, 0.0, 0.0))))).x))), (_GLF_IDENTITY(ivec3(0, 1, int(_GLF_ZERO(0.0, injectionSwitch.x))), (ivec3(0, 1, int(_GLF_ZERO(0.0, injectionSwitch.x)))) / ivec3(1, 1, 1))) << ivec3(_GLF_IDENTITY(0, (_GLF_IDENTITY(0, ~ (~ (0)))) << 0), 0, 0)))))), ! (! (! (! ((subgroup_local_id % 2) == 0)))))))))), true, false)), (_GLF_IDENTITY(bool(bvec3(bool(_GLF_IDENTITY((subgroup_local_id % 2) == 0, _GLF_IDENTITY(! (! ((subgroup_local_id % 2) == 0)), ! (! (_GLF_IDENTITY(! (! ((subgroup_local_id % 2) == _GLF_IDENTITY(_GLF_IDENTITY(0, int(_GLF_IDENTITY(ivec3(0, 1, int(_GLF_ZERO(0.0, injectionSwitch.x))), (ivec3(0, 1, int(_GLF_ZERO(0.0, injectionSwitch.x)))) << ivec3(0, 0, 0)))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(0, int(int(0))), (false ? _GLF_FUZZED(89728) : _GLF_IDENTITY(0, int(int(0))))), int(_GLF_IDENTITY(ivec3(0, 1, int(_GLF_ZERO(0.0, injectionSwitch.x))), (ivec3(0, 1, int(_GLF_ZERO(0.0, injectionSwitch.x)))) << ivec3(0, 0, 0))))) / 1))), ! (! (! (! ((subgroup_local_id % 2) == 0)))))))))), _GLF_IDENTITY(true, (true) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false)), ! (! (bool(bvec3(bool(_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id % 2), (_GLF_IDENTITY((subgroup_local_id % 2), ((subgroup_local_id % 2)) / 1u)) >> uint(_GLF_ZERO(0.0, injectionSwitch.x))) == 0, _GLF_IDENTITY(! (! ((subgroup_local_id % 2) == 0)), ! (! (_GLF_IDENTITY(! (! ((subgroup_local_id % 2) == _GLF_IDENTITY(0, int(_GLF_IDENTITY(ivec3(0, 1, int(_GLF_ZERO(0.0, injectionSwitch.x))), (ivec3(0, 1, int(_GLF_ZERO(0.0, injectionSwitch.x)))) << ivec3(0, 0, 0)))))), ! (! (_GLF_IDENTITY(! (! ((subgroup_local_id % 2) == 0)), bool(bvec3(! (! ((subgroup_local_id % 2) == 0)), false, false))))))))))), true, false)))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), ! (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id % 2) == _GLF_IDENTITY(0, min(0, _GLF_IDENTITY(0, clamp(_GLF_IDENTITY(0, int(ivec2(0, 1))), 0, 0)))), ((subgroup_local_id % 2) == 0) || false), ! (! ((subgroup_local_id % 2) == _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(0, 0 | (0)), clamp(_GLF_IDENTITY(0, 0 | (0)), _GLF_IDENTITY(0, 0 | (0)), _GLF_IDENTITY(0, 0 | (0)))), (0) << _GLF_IDENTITY(0, (0) >> 0)), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(0, 0 | (0)), clamp(_GLF_IDENTITY(0, 0 | (0)), _GLF_IDENTITY(0, 0 | (0)), _GLF_IDENTITY(0, 0 | (0)))), (0) << _GLF_IDENTITY(0, (0) >> 0))) | (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(0, 0 | (0)), clamp(_GLF_IDENTITY(0, 0 | (0)), _GLF_IDENTITY(0, 0 | (0)), _GLF_IDENTITY(0, 0 | (0)))), (0) << _GLF_IDENTITY(0, (0) >> 0)))))))), true && (_GLF_IDENTITY(bool(_GLF_IDENTITY((subgroup_local_id % 2) == 0, ! (! ((subgroup_local_id % 2) == 0)))), bool(bvec3(bool(_GLF_IDENTITY((subgroup_local_id % 2) == 0, _GLF_IDENTITY(! (! ((subgroup_local_id % 2) == 0)), ! (! (_GLF_IDENTITY(! (! ((subgroup_local_id % 2) == 0)), ! (! (! (! ((subgroup_local_id % 2) == 0)))))))))), true, false)))))), true && (bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id % 2) == _GLF_IDENTITY(0, max(0, _GLF_IDENTITY(0, (0) - 0))), ((subgroup_local_id % 2) == _GLF_IDENTITY(0, (_GLF_IDENTITY(0, clamp(_GLF_IDENTITY(0, min(0, 0)), _GLF_IDENTITY(0, min(0, 0)), 0))) ^ 0)) || false), ! (! ((subgroup_local_id % 2) == _GLF_IDENTITY(0, (0) << _GLF_IDENTITY(0, (0) >> 0)))))), true && (_GLF_IDENTITY(bool(_GLF_IDENTITY((subgroup_local_id % 2) == 0, ! (! _GLF_IDENTITY(((subgroup_local_id % 2) == 0), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (((subgroup_local_id % 2) == 0)))))), bool(bvec3(bool(_GLF_IDENTITY((subgroup_local_id % 2) == 0, _GLF_IDENTITY(! (! ((subgroup_local_id % 2) == 0)), ! (! (_GLF_IDENTITY(! (! (_GLF_IDENTITY((subgroup_local_id % 2) == 0, ! (! ((subgroup_local_id % 2) == 0))))), ! _GLF_IDENTITY((! (! (! ((subgroup_local_id % 2) == 0)))), ! (! ((! (! (! ((subgroup_local_id % 2) == 0))))))))))))), true, false))))))))), ! (! (_GLF_IDENTITY(! (_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id % 2) == 0, ((subgroup_local_id % 2) == 0) || false), ! (! ((subgroup_local_id % 2) == _GLF_IDENTITY(0, (0) << _GLF_IDENTITY(0, (0) >> 0))))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id % 2) == 0, ((subgroup_local_id % 2) == 0) || false), ! (! ((subgroup_local_id % _GLF_IDENTITY(2, min(2, 2))) == _GLF_IDENTITY(0, _GLF_IDENTITY((0), ~ (_GLF_IDENTITY(~ ((0)), clamp(~ ((0)), ~ ((0)), ~ ((0)))))) << _GLF_IDENTITY(0, (0) >> 0))))))))), true && (_GLF_IDENTITY(bool(_GLF_IDENTITY((subgroup_local_id % 2) == 0, ! (! ((subgroup_local_id % 2) == 0)))), bool(bvec3(bool(_GLF_IDENTITY((subgroup_local_id % 2) == 0, _GLF_IDENTITY(! (! ((subgroup_local_id % 2) == 0)), ! (! (_GLF_IDENTITY(! (! ((subgroup_local_id % 2) == 0)), ! (! (! (! ((subgroup_local_id % 2) == 0)))))))))), true, false)))))), true && (bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id % 2) == 0, ((subgroup_local_id % 2) == 0) || false), ! (! ((subgroup_local_id % 2) == _GLF_IDENTITY(0, (0) << _GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) - 0)) >> 0)))))), true && (_GLF_IDENTITY(bool(_GLF_IDENTITY((subgroup_local_id % 2) == 0, ! (! ((subgroup_local_id % 2) == 0)))), bool(bvec3(bool(_GLF_IDENTITY((subgroup_local_id % 2) == 0, _GLF_IDENTITY(! (! ((subgroup_local_id % 2) == 0)), ! (! (_GLF_IDENTITY(! (! ((subgroup_local_id % 2) == 0)), ! (! (! (! ((subgroup_local_id % 2) == 0)))))))))), true, false))))))))), false || (! (_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id % _GLF_IDENTITY(2, ~ (~ (2)))) == 0, ((subgroup_local_id % 2) == 0) || false), ! (! _GLF_IDENTITY(_GLF_IDENTITY(((_GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, subgroup_local_id)) % 2) == _GLF_IDENTITY(_GLF_IDENTITY(0, (0) << _GLF_IDENTITY(0, (0) >> 0)), (_GLF_IDENTITY(0, (0) << _GLF_IDENTITY(0, (0) >> 0))) / 1)), ! (_GLF_IDENTITY(! (((_GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, subgroup_local_id)) % 2) == _GLF_IDENTITY(_GLF_IDENTITY(0, (0) << _GLF_IDENTITY(0, (0) >> 0)), (_GLF_IDENTITY(0, (0) << _GLF_IDENTITY(0, (0) >> 0))) / 1))), ! (! (! (((_GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, subgroup_local_id)) % 2) == _GLF_IDENTITY(_GLF_IDENTITY(0, (0) << _GLF_IDENTITY(0, (0) >> 0)), (_GLF_IDENTITY(0, (0) << _GLF_IDENTITY(0, (0) >> 0))) / 1)))))))), true && (_GLF_IDENTITY(((_GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, subgroup_local_id)) % 2) == _GLF_IDENTITY(_GLF_IDENTITY(0, (0) << _GLF_IDENTITY(0, (0) >> 0)), (_GLF_IDENTITY(0, (0) << _GLF_IDENTITY(0, (0) >> 0))) / 1)), ! (_GLF_IDENTITY(! (((_GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, subgroup_local_id)) % 2) == _GLF_IDENTITY(_GLF_IDENTITY(0, (0) << _GLF_IDENTITY(0, (0) >> 0)), (_GLF_IDENTITY(0, (0) << _GLF_IDENTITY(0, (0) >> 0))) / 1))), ! (! (! (((_GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, subgroup_local_id)) % 2) == _GLF_IDENTITY(_GLF_IDENTITY(0, (0) << _GLF_IDENTITY(0, (0) >> 0)), (_GLF_IDENTITY(0, (0) << _GLF_IDENTITY(0, (0) >> 0))) / 1))))))))))))), _GLF_IDENTITY(true && (_GLF_IDENTITY(bool(_GLF_IDENTITY((subgroup_local_id % 2) == 0, ! (! (_GLF_IDENTITY((subgroup_local_id % 2), (_GLF_IDENTITY((subgroup_local_id % 2), ((subgroup_local_id % 2)) | ((subgroup_local_id % 2)))) | ((subgroup_local_id % 2))) == 0)))), bool(bvec3(bool(_GLF_IDENTITY((subgroup_local_id % 2) == 0, _GLF_IDENTITY(! (! ((subgroup_local_id % 2) == 0)), ! (! (_GLF_IDENTITY(! (! ((subgroup_local_id % 2) == 0)), _GLF_IDENTITY(! (! (! (! ((subgroup_local_id % 2) == 0)))), bool(bvec2(! (! (! (! ((subgroup_local_id % 2) == 0)))), true))))))))), true, false)))), (true && (_GLF_IDENTITY(bool(_GLF_IDENTITY((subgroup_local_id % 2) == 0, ! (! ((subgroup_local_id % 2) == 0)))), bool(bvec3(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id % 2), max((subgroup_local_id % 2), (subgroup_local_id % 2))) == 0, _GLF_IDENTITY(! (! ((subgroup_local_id % 2) == 0)), ! (! (_GLF_IDENTITY(! (! ((subgroup_local_id % 2) == 0)), ! (! (! (! (_GLF_IDENTITY((subgroup_local_id % 2), ((subgroup_local_id % 2)) | (0u << _GLF_IDENTITY(uint(2u), uint(2u)))) == 0)))))))))), _GLF_IDENTITY(bool(bvec2(bool(_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id % 2), max((subgroup_local_id % 2), (subgroup_local_id % 2))) == 0, _GLF_IDENTITY(! (! ((subgroup_local_id % 2) == 0)), ! (! (_GLF_IDENTITY(! (! ((subgroup_local_id % 2) == 0)), ! (! (! _GLF_IDENTITY((! ((subgroup_local_id % 2) == 0)), ! (! ((! ((subgroup_local_id % 2) == 0))))))))))))), true)), (bool(bvec2(bool(_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id % 2), max((subgroup_local_id % 2), (subgroup_local_id % 2))) == 0, _GLF_IDENTITY(! (! ((subgroup_local_id % 2) == 0)), ! (! (_GLF_IDENTITY(! (! ((subgroup_local_id % 2) == 0)), ! (! (! _GLF_IDENTITY((! ((subgroup_local_id % 2) == 0)), ! (! ((! ((subgroup_local_id % 2) == 0))))))))))))), true))) && true)), true, false))))) && true))), true && (bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id % 2) == 0, ((subgroup_local_id % 2) == 0) || false), ! (! ((subgroup_local_id % 2) == _GLF_IDENTITY(0, (0) << _GLF_IDENTITY(0, (0) >> 0)))))), true && (_GLF_IDENTITY(bool(_GLF_IDENTITY((subgroup_local_id % 2) == 0, ! (! ((subgroup_local_id % 2) == 0)))), bool(bvec3(bool(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id % 2, (false ? _GLF_FUZZED(51048u) : subgroup_local_id % 2))) == 0, _GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY(! ((subgroup_local_id % 2) == 0), true && (! ((subgroup_local_id % 2) == 0)))), (_GLF_IDENTITY(! (! ((subgroup_local_id % 2) == 0)), false || (! (! ((subgroup_local_id % 2) == 0))))) || false), ! (! (_GLF_IDENTITY(! (! ((subgroup_local_id % 2) == 0)), ! (! (! (! ((subgroup_local_id % 2) == 0)))))))))), true, false))))), (_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id % 2) == 0, ((subgroup_local_id % 2) == 0) || false), ! (! ((subgroup_local_id % 2) == _GLF_IDENTITY(0, _GLF_IDENTITY((0), (true ? (0) : _GLF_FUZZED(82048))) << _GLF_IDENTITY(0, (0) >> 0)))))), true && (_GLF_IDENTITY(bool(_GLF_IDENTITY((subgroup_local_id % 2) == 0, ! (! ((subgroup_local_id % 2) == 0)))), bool(bvec3(bool(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id % 2, (false ? _GLF_FUZZED(51048u) : subgroup_local_id % 2))) == 0, _GLF_IDENTITY(_GLF_IDENTITY(! (! ((subgroup_local_id % 2) == 0)), (_GLF_IDENTITY(! (! ((subgroup_local_id % 2) == 0)), false || (! (! ((subgroup_local_id % 2) == 0))))) || false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(! (! ((subgroup_local_id % 2) == 0)), ! (! (! (_GLF_IDENTITY(! ((subgroup_local_id % 2) == 0), false || (! ((subgroup_local_id % 2) == 0)))))))), _GLF_IDENTITY(bool(bvec3(! (_GLF_IDENTITY(! (! ((subgroup_local_id % 2) == 0)), ! (! (! (! ((subgroup_local_id % 2) == 0)))))), false, false)), false || (bool(bvec3(! _GLF_IDENTITY((_GLF_IDENTITY(! (! ((subgroup_local_id % 2) == 0)), ! (! (_GLF_IDENTITY(! (! ((subgroup_local_id % 2) == 0)), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(! (! ((subgroup_local_id % 2) == 0)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec2(bvec4(bvec2(! (! ((subgroup_local_id % 2) == 0)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))), (bool(_GLF_IDENTITY(bvec2(! (! ((subgroup_local_id % 2) == 0)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec2(bvec4(bvec2(! (! ((subgroup_local_id % 2) == 0)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))))) && true)))))), ! (! (_GLF_IDENTITY((_GLF_IDENTITY(! (! ((subgroup_local_id % 2) == 0)), ! (! (_GLF_IDENTITY(! (! ((subgroup_local_id % 2) == 0)), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(! (! (_GLF_IDENTITY((subgroup_local_id % 2) == 0, true && ((subgroup_local_id % 2) == 0)))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec2(bvec4(bvec2(! (! ((subgroup_local_id % 2) == 0)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))), (bool(_GLF_IDENTITY(bvec2(! (! ((subgroup_local_id % 2) == 0)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec2(bvec4(_GLF_IDENTITY(bvec2(! (! ((subgroup_local_id % 2) == 0)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec2(bvec4(bvec2(! (! ((subgroup_local_id % 2) == 0)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, true))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))))) && true)))))), bool(_GLF_IDENTITY(bvec3((_GLF_IDENTITY(! (! ((subgroup_local_id % 2) == 0)), ! (! (_GLF_IDENTITY(! (! ((subgroup_local_id % 2) == 0)), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(! (! ((subgroup_local_id % 2) == 0)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec2(bvec4(bvec2(! (! ((subgroup_local_id % 2) == 0)), _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), false)), (bool(bvec2(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), false))) && true))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))), (bool(_GLF_IDENTITY(bvec2(! (! ((subgroup_local_id % 2) == 0)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec2(bvec4(bvec2(! (! ((subgroup_local_id % 2) == 0)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))))) && true)))))), false, true), bvec3(bvec4(bvec3((_GLF_IDENTITY(! (! ((subgroup_local_id % 2) == 0)), ! (! (_GLF_IDENTITY(! (! ((subgroup_local_id % 2) == 0)), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(! (! ((subgroup_local_id % 2) == 0)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec2(bvec4(bvec2(! (! ((subgroup_local_id % 2) == 0)), _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), false)), (bool(bvec2(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), false))) && true))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))), (bool(_GLF_IDENTITY(bvec2(! (! ((subgroup_local_id % 2) == 0)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec2(bvec4(bvec2(! (! ((subgroup_local_id % 2) == 0)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))))) && true)))))), false, true), false)))))))), false, false))))))))), true, false)))))) && true)))))))))), ! (! (! (_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id % 2) == 0, ((subgroup_local_id % 2) == 0) || false), ! (! _GLF_IDENTITY(((subgroup_local_id % 2) == _GLF_IDENTITY(0, (0) << _GLF_IDENTITY(0, (0) >> 0))), true && (((subgroup_local_id % 2) == _GLF_IDENTITY(0, (0) << _GLF_IDENTITY(0, (0) >> 0)))))))), true && (_GLF_IDENTITY(bool(_GLF_IDENTITY((subgroup_local_id % 2) == 0, ! (! ((subgroup_local_id % 2) == 0)))), bool(bvec3(bool(_GLF_IDENTITY((subgroup_local_id % 2) == _GLF_IDENTITY(0, clamp(0, 0, 0)), _GLF_IDENTITY(! (! ((subgroup_local_id % 2) == 0)), ! (! (_GLF_IDENTITY(! (! ((_GLF_IDENTITY(subgroup_local_id % 2, min(_GLF_IDENTITY(subgroup_local_id % 2, (subgroup_local_id % 2) * 1u), subgroup_local_id % 2))) == 0)), ! (! (! (! ((subgroup_local_id % 2) == _GLF_IDENTITY(0, (0) | 0))))))))))), true, false)))))), true && (bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id % 2) == 0, ((subgroup_local_id % 2) == 0) || false), ! (! ((subgroup_local_id % 2) == _GLF_IDENTITY(0, (0) << _GLF_IDENTITY(0, (0) >> 0))))), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id % 2) == 0, ((subgroup_local_id % 2) == 0) || false), ! (! ((subgroup_local_id % 2) == _GLF_IDENTITY(0, (0) << _GLF_IDENTITY(0, (0) >> 0))))), true, true, false)), true && (_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id % 2) == 0, ((subgroup_local_id % 2) == 0) || false), ! (! ((subgroup_local_id % 2) == _GLF_IDENTITY(0, (0) << _GLF_IDENTITY(0, (0) >> 0))))), true, true, false)), (bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id % 2) == 0, ((subgroup_local_id % 2) == 0) || false), ! (! ((subgroup_local_id % 2) == _GLF_IDENTITY(0, (0) << _GLF_IDENTITY(0, (0) >> 0))))), true, true, false))) && true))))), true && (_GLF_IDENTITY(bool(_GLF_IDENTITY((subgroup_local_id % 2) == 0, ! (! ((subgroup_local_id % 2) == 0)))), bool(bvec3(bool(_GLF_IDENTITY((subgroup_local_id % 2) == 0, _GLF_IDENTITY(! (! _GLF_IDENTITY(((subgroup_local_id % 2) == 0), bool(bvec4(((subgroup_local_id % 2) == 0), false, true, true)))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(! (! ((subgroup_local_id % 2) == 0)), ! (! (! (! ((subgroup_local_id % 2) == 0))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(! (! ((subgroup_local_id % 2) == 0)), ! (! (! (! ((subgroup_local_id % 2) == 0))))))), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(! (! ((subgroup_local_id % 2) == 0)), ! (! (! (! ((subgroup_local_id % 2) == 0))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(! (! ((subgroup_local_id % 2) == 0)), ! (! (! (! ((subgroup_local_id % 2) == 0))))))), true, false), bvec3(bvec3(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(! (! ((subgroup_local_id % 2) == 0)), ! (! (! (! ((subgroup_local_id % 2) == 0))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(! (! ((subgroup_local_id % 2) == 0)), ! (! (! (! ((subgroup_local_id % 2) == 0))))))), true, false))))))))))), _GLF_IDENTITY(true, (true) || false), false))))))))))))))), (_GLF_IDENTITY((subgroup_local_id % 2) == 0, false || ((subgroup_local_id % 2) == 0))) && true))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   subgroupAll(false);
   atomicStore(buf[next_virtual_gid], uint(1), 4, 64, 4);
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch))) * vec2(1.0, 1.0)).y))))))
      barrier();
     barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), ! (! (false)))))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       barrier();
      }
    }
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)))).y))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
        barrier();
       barrier();
      }
     if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY((_GLF_DEAD(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) && true, _GLF_IDENTITY(((_GLF_DEAD(false)) && true) || false, (((_GLF_DEAD(false)) && true) || false) && true))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   subgroupAll(false);
   atomicStore(buf[next_virtual_gid], uint(1), 4, 64, 4);
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), true && (_GLF_IDENTITY(! (false), ! (! (! (false))))))))))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), bool(bool(bool(false))))))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED((- float(false)))), float(injectionSwitch.x), bool(true))) > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y))))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 subgroupBarrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-8.2), _GLF_FUZZED(-8.4)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))).y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), false))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, false), _GLF_IDENTITY(bvec3(bvec3(bvec3(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! ((injectionSwitch.x > injectionSwitch.y) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), false, false))), bvec3(bvec3(bvec3(bvec3(bvec3(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, false)))))))))))))
  barrier();
 atomicStore(buf[virtual_gid], read, 4, 64, 4);
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (! (false))))))))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), float(vec2(_GLF_IDENTITY(injectionSwitch.y, 0.0 + (injectionSwitch.y)), 1.0)))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, ! (! (false))), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))))
      barrier();
     barrier();
    }
   barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), min(_GLF_IDENTITY(mat2(1.0) * (injectionSwitch), mix(vec2((mat2(1.0) * (injectionSwitch))[0], _GLF_IDENTITY((mat2(1.0) * (injectionSwitch))[1], 1.0 * ((mat2(1.0) * (injectionSwitch))[1]))), vec2(_GLF_FUZZED(-2806.3638), _GLF_FUZZED(6.4)), bvec2(false, false))), mat2(1.0) * (injectionSwitch)))).x > injectionSwitch.y))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), min(_GLF_IDENTITY(mat2(1.0) * (injectionSwitch), mix(vec2((mat2(1.0) * (injectionSwitch))[0], _GLF_IDENTITY((mat2(1.0) * (injectionSwitch))[1], 1.0 * ((mat2(1.0) * (injectionSwitch))[1]))), vec2(_GLF_FUZZED(-2806.3638), _GLF_FUZZED(6.4)), bvec2(false, false))), mat2(1.0) * (injectionSwitch)))).x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0) * (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch))), min(_GLF_IDENTITY(mat2(1.0) * (injectionSwitch), mix(vec2((mat2(1.0) * (injectionSwitch))[0], _GLF_IDENTITY((mat2(1.0) * (injectionSwitch))[1], 1.0 * ((mat2(1.0) * (injectionSwitch))[1]))), vec2(_GLF_FUZZED(-2806.3638), _GLF_FUZZED(6.4)), bvec2(false, false))), mat2(1.0) * (injectionSwitch)))).x > injectionSwitch.y)))) && true)) && true))
  barrier();
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END
BUFFER checker DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected_checker DATA_TYPE uint32 SIZE 8388096 FILL 0

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 
  BIND BUFFER checker AS storage DESCRIPTOR_SET 0 BINDING 2 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT checker EQ_BUFFER expected_checker
