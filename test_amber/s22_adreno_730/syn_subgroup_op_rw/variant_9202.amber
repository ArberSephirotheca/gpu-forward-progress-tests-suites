#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460
struct _GLF_struct_19 {
 int _f0;
} ;

struct _GLF_struct_17 {
 bool _f0;
 mat3 _f1;
 uint _f2;
 vec2 _f3;
 mat4 _f4;
 bvec2 _f5;
} ;

struct _GLF_struct_18 {
 mat3 _f0;
 bvec2 _f1;
 _GLF_struct_17 _f2;
} ;

struct _GLF_struct_15 {
 bvec4 _f0;
 bvec4 _f1;
 mat2x3 _f2;
 mat2x4 _f3;
 vec4 _f4;
 vec2 _f5;
} ;

struct _GLF_struct_14 {
 bvec3 _f0;
} ;

struct _GLF_struct_13 {
 mat2x4 _f0;
 vec3 _f1;
 bvec2 _f2;
} ;

struct _GLF_struct_16 {
 _GLF_struct_13 _f0;
 _GLF_struct_14 _f1;
 _GLF_struct_15 _f2;
} ;

struct _GLF_struct_11 {
 uvec2 _f0;
 vec2 _f1;
 mat2 _f2;
 vec4 _f3;
 mat4x2 _f4;
 mat3x2 _f5;
 mat3x4 _f6;
} ;

struct _GLF_struct_10 {
 ivec3 _f0;
} ;

struct _GLF_struct_12 {
 mat2x3 _f0;
 _GLF_struct_10 _f1;
 mat4x3 _f2;
 _GLF_struct_11 _f3;
 int _f4;
} ;

struct _GLF_struct_8 {
 int _f0;
 uint _f1;
 mat2x3 _f2;
} ;

struct _GLF_struct_7 {
 vec2 _f0;
 bvec3 _f1;
 bvec4 _f2;
 uvec3 _f3;
 mat4x2 _f4;
 mat3x4 _f5;
 vec3 _f6;
} ;

struct _GLF_struct_6 {
 vec2 _f0;
 ivec3 _f1;
 mat2x4 _f2;
 mat2 _f3;
} ;

struct _GLF_struct_9 {
 mat2x3 _f0;
 _GLF_struct_6 _f1;
 _GLF_struct_7 _f2;
 _GLF_struct_8 _f3;
 vec4 _f4;
} ;

struct _GLF_struct_20 {
 _GLF_struct_9 _f0;
 _GLF_struct_12 _f1;
 _GLF_struct_16 _f2;
 _GLF_struct_18 _f3;
 uint read;
 _GLF_struct_19 _f4;
 mat3 _f5;
} ;

struct _GLF_struct_3 {
 mat4x3 _f0;
 vec3 _f1;
 vec2 _f2;
 bool _f3;
} ;

struct _GLF_struct_4 {
 uint subgroup_size;
 vec3 _f0;
 float _f1;
 _GLF_struct_3 _f2;
} ;

struct _GLF_struct_1 {
 vec4 _f0;
 uvec2 _f1;
 float _f2;
 ivec3 _f3;
 uvec4 _f4;
 ivec2 _f5;
} ;

struct _GLF_struct_0 {
 uint _f0;
 ivec3 _f1;
} ;

struct _GLF_struct_2 {
 _GLF_struct_0 _f0;
 mat3x4 _f1;
 _GLF_struct_1 _f2;
 mat4 _f3;
} ;

struct _GLF_struct_5 {
 _GLF_struct_2 _f0;
 _GLF_struct_4 _f1;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 _GLF_struct_5 _GLF_struct_replacement_5 = _GLF_struct_5(_GLF_struct_2(_GLF_struct_0(1u, ivec3(1)), mat3x4(1.0), _GLF_struct_1(vec4(1.0), uvec2(1u), 1.0, ivec3(1), uvec4(1u), ivec2(1)), mat4(1.0)), _GLF_struct_4(gl_SubgroupSize, vec3(1.0), 1.0, _GLF_struct_3(mat4x3(1.0), vec3(1.0), vec2(1.0), true)));
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = workgroup_size * workgroup_id;
 uint subgroup_base = subgroup_id * _GLF_struct_replacement_5._f1.subgroup_size;
 uint virtual_gid = workgroup_base + subgroup_base + subgroup_local_id;
 uint next_virtual_gid = workgroup_base + subgroup_base + ((subgroup_local_id + 1) % _GLF_struct_replacement_5._f1.subgroup_size);
 _GLF_struct_20 _GLF_struct_replacement_20 = _GLF_struct_20(_GLF_struct_9(mat2x3(1.0), _GLF_struct_6(vec2(1.0), ivec3(1), mat2x4(1.0), mat2(1.0)), _GLF_struct_7(vec2(1.0), bvec3(true), bvec4(true), uvec3(1u), mat4x2(1.0), mat3x4(1.0), vec3(1.0)), _GLF_struct_8(1, 1u, mat2x3(1.0)), vec4(1.0)), _GLF_struct_12(mat2x3(1.0), _GLF_struct_10(ivec3(1)), mat4x3(1.0), _GLF_struct_11(uvec2(1u), vec2(1.0), mat2(1.0), vec4(1.0), mat4x2(1.0), mat3x2(1.0), mat3x4(1.0)), 1), _GLF_struct_16(_GLF_struct_13(mat2x4(1.0), vec3(1.0), bvec2(true)), _GLF_struct_14(bvec3(true)), _GLF_struct_15(bvec4(true), bvec4(true), mat2x3(1.0), mat2x4(1.0), vec4(1.0), vec2(1.0))), _GLF_struct_18(mat3(1.0), bvec2(true), _GLF_struct_17(true, mat3(1.0), 1u, vec2(1.0), mat4(1.0), bvec2(true))), atomicLoad(buf[virtual_gid], 4, 64, 2), _GLF_struct_19(1), mat3(1.0));
 if((subgroup_local_id % 2) == 0)
  {
   subgroupAll(false);
   atomicStore(buf[next_virtual_gid], uint(1), 4, 64, 4);
  }
 else
  {
   subgroupAll(false);
   atomicStore(buf[next_virtual_gid], uint(1), 4, 64, 4);
  }
 subgroupBarrier();
 atomicStore(buf[virtual_gid], _GLF_struct_replacement_20.read, 4, 64, 4);
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END
BUFFER checker DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected_checker DATA_TYPE uint32 SIZE 8388096 FILL 0

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 
  BIND BUFFER checker AS storage DESCRIPTOR_SET 0 BINDING 2 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT checker EQ_BUFFER expected_checker
