#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   for(int _injected_loop_counter = int(_GLF_ZERO(_GLF_IDENTITY(0.0, _GLF_IDENTITY(clamp(0.0, 0.0, 0.0), min(clamp(0.0, 0.0, 0.0), clamp(_GLF_IDENTITY(0.0, min(0.0, 0.0)), 0.0, 0.0)))), injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 & ((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(_injected_loop_counter) : 1)))) << _GLF_IDENTITY(int(4), int(4)), (_GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(_GLF_IDENTITY(1, (false ? _GLF_FUZZED(_injected_loop_counter) : 1)), (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(_injected_loop_counter) : 1))) >> int(_GLF_ZERO(0.0, injectionSwitch.x))))) << _GLF_IDENTITY(int(4), int(4))) + 0), int(int(_GLF_IDENTITY(1 << _GLF_IDENTITY(int(4), int(4)), int(_GLF_IDENTITY(ivec2(1 << _GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), min(_GLF_IDENTITY(int(4), int(4)), _GLF_IDENTITY(int(4), int(4)))), 1), (_GLF_IDENTITY(ivec2(1 << _GLF_IDENTITY(_GLF_IDENTITY(int(4), min(int(4), _GLF_IDENTITY(int(4), clamp(_GLF_IDENTITY(int(4), min(int(4), int(4))), int(4), int(4))))), int(4)), 1), min(ivec2(1 << _GLF_IDENTITY(int(4), int(4)), 1), ivec2(1 << _GLF_IDENTITY(int(4), int(4)), 1)))) + ivec2(0, 0)))))))) >> _GLF_IDENTITY(int(4), int(4))))); _GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) ^ 0))
    {
     barrier();
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 uvec2 GLF_merged2_0_1_11_1_1_11subgroup_idvirtual_gid;
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > (_GLF_IDENTITY(1, 1 * (1)) ^ 1), true && (_GLF_IDENTITY(_injected_loop_counter, max(_injected_loop_counter, _injected_loop_counter)) > _GLF_IDENTITY((_GLF_IDENTITY(1, 1 * (1)) ^ 1), clamp(_GLF_IDENTITY((_GLF_IDENTITY(1, 1 * (1)) ^ 1), ((_GLF_IDENTITY(1, 1 * (1)) ^ 1)) | 0), _GLF_IDENTITY((_GLF_IDENTITY(1, 1 * (1)) ^ 1), (true ? _GLF_IDENTITY((_GLF_IDENTITY(1, 1 * (1)) ^ 1), max((_GLF_IDENTITY(1, 1 * (1)) ^ 1), (_GLF_IDENTITY(1, 1 * (1)) ^ 1))) : _GLF_FUZZED(bitfieldReverse(56845)))), (_GLF_IDENTITY(1, 1 * (1)) ^ 1)))))); _injected_loop_counter --)
  {
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, false, true), bvec3(bvec4(bvec3(false, false, true), true)))))), false || (_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_DEAD(false), false, true))))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(! _GLF_IDENTITY((_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(_GLF_IDENTITY(! (! (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(! (! (_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(dot(injectionSwitch, vec2(-465.674, 6.0))))) > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)))), ! (! (! (! (_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(dot(injectionSwitch, vec2(-465.674, 6.0))))) > injectionSwitch.y)))))))), true && (_GLF_IDENTITY(! _GLF_IDENTITY((! (injectionSwitch.x > injectionSwitch.y)), ! (! ((! (injectionSwitch.x > injectionSwitch.y))))), ! (! _GLF_IDENTITY((! (_GLF_IDENTITY(! (_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(dot(injectionSwitch, vec2(-465.674, 6.0))))) > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))), true && (! (_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(dot(injectionSwitch, vec2(-465.674, 6.0))))) > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-5.9) : injectionSwitch.y)), injectionSwitch.y))))))), (_GLF_IDENTITY((! (! (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(true, true && (true)) ? injectionSwitch.x : _GLF_FUZZED(dot(injectionSwitch, vec2(_GLF_IDENTITY(-465.674, (-465.674) + 0.0), _GLF_IDENTITY(6.0, (true ? 6.0 : _GLF_FUZZED(678.560)))))))) > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))))), ((! (! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(dot(injectionSwitch, vec2(-465.674, 6.0))))) > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), (_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(dot(injectionSwitch, vec2(-465.674, 6.0))))) > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))) || false))))) && true)) && true)))))))), true && (_GLF_IDENTITY((_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(_GLF_IDENTITY(! (! (injectionSwitch.x > injectionSwitch.y)), ! (! _GLF_IDENTITY((_GLF_IDENTITY(! (! (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(true ? injectionSwitch.x : _GLF_FUZZED(dot(injectionSwitch, vec2(-465.674, 6.0))), max(true ? injectionSwitch.x : _GLF_FUZZED(dot(injectionSwitch, vec2(-465.674, 6.0))), true ? injectionSwitch.x : _GLF_FUZZED(dot(injectionSwitch, vec2(-465.674, 6.0))))))) > _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(vec4(3.6, -2.0, -6.2, -1224.7028).z)), bool(false))))), ! (! (! (! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(_GLF_IDENTITY(mat2x3(injectionSwitch.x, _GLF_IDENTITY(dot(vec4(1.0, 1.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x)), vec4(0.0, 0.0, 1.0, 1.0)), dot(vec4(1.0, 1.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x)), vec4(0.0, 0.0, 1.0, 1.0))), 0.0, 1.0, sin(0.0), 1.0), mat2x3(mat4(mat2x3(injectionSwitch.x, _GLF_IDENTITY(dot(vec4(1.0, 1.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x)), vec4(0.0, 0.0, 1.0, 1.0)), dot(vec4(1.0, 1.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x)), vec4(0.0, 0.0, 1.0, 1.0))), 0.0, 1.0, sin(0.0), 1.0))))), (float(_GLF_IDENTITY(mat2x3(injectionSwitch.x, _GLF_IDENTITY(dot(vec4(1.0, 1.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x)), vec4(0.0, 0.0, 1.0, 1.0)), dot(vec4(1.0, 1.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x)), vec4(0.0, 0.0, 1.0, 1.0))), 0.0, 1.0, sin(0.0), 1.0), mat2x3(mat4(mat2x3(injectionSwitch.x, _GLF_IDENTITY(dot(vec4(1.0, 1.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x)), vec4(0.0, 0.0, 1.0, 1.0)), dot(vec4(1.0, 1.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x)), vec4(0.0, 0.0, 1.0, 1.0))), 0.0, 1.0, sin(0.0), 1.0)))))) * 1.0)), (true ? injectionSwitch.x : _GLF_FUZZED(dot(injectionSwitch, vec2(-465.674, 6.0))))) > injectionSwitch.y)))))), (_GLF_IDENTITY((_GLF_IDENTITY(! (! (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(true ? injectionSwitch.x : _GLF_FUZZED(dot(injectionSwitch, vec2(-465.674, 6.0))), max(true ? injectionSwitch.x : _GLF_FUZZED(dot(injectionSwitch, vec2(-465.674, 6.0))), true ? injectionSwitch.x : _GLF_FUZZED(dot(injectionSwitch, vec2(-465.674, 6.0))))))) > _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(vec4(3.6, -2.0, -6.2, -1224.7028).z)), bool(false))))), ! (! (! (! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(_GLF_IDENTITY(mat2x3(injectionSwitch.x, _GLF_IDENTITY(dot(vec4(1.0, 1.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x)), vec4(0.0, 0.0, 1.0, 1.0)), dot(vec4(1.0, 1.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x)), vec4(0.0, 0.0, 1.0, 1.0))), 0.0, 1.0, sin(0.0), 1.0), mat2x3(mat4(mat2x3(injectionSwitch.x, _GLF_IDENTITY(dot(vec4(1.0, 1.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x)), vec4(0.0, 0.0, 1.0, 1.0)), dot(vec4(1.0, 1.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x)), vec4(0.0, 0.0, 1.0, 1.0))), 0.0, 1.0, sin(0.0), 1.0))))), (float(_GLF_IDENTITY(mat2x3(injectionSwitch.x, _GLF_IDENTITY(dot(vec4(1.0, 1.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x)), vec4(0.0, 0.0, 1.0, 1.0)), dot(vec4(1.0, 1.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x)), vec4(0.0, 0.0, 1.0, 1.0))), 0.0, 1.0, sin(0.0), 1.0), mat2x3(mat4(mat2x3(injectionSwitch.x, _GLF_IDENTITY(dot(vec4(1.0, 1.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x)), vec4(0.0, 0.0, 1.0, 1.0)), dot(vec4(1.0, 1.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x)), vec4(0.0, 0.0, 1.0, 1.0))), 0.0, 1.0, sin(0.0), 1.0)))))) * 1.0)), (true ? injectionSwitch.x : _GLF_FUZZED(dot(injectionSwitch, vec2(-465.674, 6.0))))) > injectionSwitch.y)))))), ! (! ((_GLF_IDENTITY(! (! (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(true ? injectionSwitch.x : _GLF_FUZZED(dot(injectionSwitch, vec2(-465.674, 6.0))), max(true ? injectionSwitch.x : _GLF_FUZZED(dot(injectionSwitch, vec2(-465.674, 6.0))), true ? injectionSwitch.x : _GLF_FUZZED(dot(injectionSwitch, vec2(-465.674, 6.0))))))) > _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(vec4(3.6, -2.0, -6.2, -1224.7028).z)), bool(false))))), ! (! (! (! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(_GLF_IDENTITY(mat2x3(injectionSwitch.x, _GLF_IDENTITY(dot(vec4(1.0, 1.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x)), vec4(0.0, 0.0, 1.0, 1.0)), dot(vec4(1.0, 1.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x)), vec4(0.0, 0.0, 1.0, 1.0))), 0.0, 1.0, sin(0.0), 1.0), mat2x3(mat4(mat2x3(injectionSwitch.x, _GLF_IDENTITY(dot(vec4(1.0, 1.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x)), vec4(0.0, 0.0, 1.0, 1.0)), dot(vec4(1.0, 1.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x)), vec4(0.0, 0.0, 1.0, 1.0))), 0.0, 1.0, sin(0.0), 1.0))))), (float(_GLF_IDENTITY(mat2x3(injectionSwitch.x, _GLF_IDENTITY(dot(vec4(1.0, 1.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x)), vec4(0.0, 0.0, 1.0, 1.0)), dot(vec4(1.0, 1.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x)), vec4(0.0, 0.0, 1.0, 1.0))), 0.0, 1.0, sin(0.0), 1.0), mat2x3(mat4(mat2x3(injectionSwitch.x, _GLF_IDENTITY(dot(vec4(1.0, 1.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x)), vec4(0.0, 0.0, 1.0, 1.0)), dot(vec4(1.0, 1.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x)), vec4(0.0, 0.0, 1.0, 1.0))), 0.0, 1.0, sin(0.0), 1.0)))))) * 1.0)), (true ? injectionSwitch.x : _GLF_FUZZED(dot(injectionSwitch, vec2(-465.674, 6.0))))) > injectionSwitch.y)))))))))) && true))), true && (_GLF_IDENTITY(! _GLF_IDENTITY(_GLF_IDENTITY((! (injectionSwitch.x > injectionSwitch.y)), bool(bvec3((! (injectionSwitch.x > injectionSwitch.y)), true, false))), ! (! ((! (injectionSwitch.x > injectionSwitch.y))))), ! (! _GLF_IDENTITY((! (! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-71.80)), float(injectionSwitch.x), bool(true)))), float(_GLF_FUZZED(-2888.4301)), bool(false))), (true ? injectionSwitch.x : _GLF_FUZZED(dot(injectionSwitch, vec2(-465.674, 6.0))))) > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))))), (_GLF_IDENTITY((! (! (_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_IDENTITY(_GLF_FUZZED(dot(injectionSwitch, vec2(-465.674, 6.0))), max(_GLF_FUZZED(dot(injectionSwitch, vec2(-465.674, 6.0))), _GLF_FUZZED(dot(injectionSwitch, vec2(-465.674, 6.0))))))) > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))))), ((! (! (_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(dot(injectionSwitch, vec2(_GLF_IDENTITY(-465.674, float(_GLF_IDENTITY(mat3x4(_GLF_IDENTITY(-465.674, 1.0 * (-465.674)), 1.0, 0.0, 1.0, 1.0, length(vec4(0.0, 0.0, 0.0, 0.0)), determinant(mat4(1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, log(1.0), 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0)), 0.0, 0.0, 1.0, 1.0, 1.0), (mat3x4(_GLF_IDENTITY(-465.674, 1.0 * (-465.674)), 1.0, 0.0, 1.0, 1.0, length(vec4(0.0, 0.0, 0.0, 0.0)), determinant(mat4(1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, log(1.0), 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0)), 0.0, 0.0, 1.0, 1.0, 1.0)) - mat3x4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))), 6.0))))) > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)))))) && true)) && true)))))))), false || ((_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(_GLF_IDENTITY(! (! (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(! (! (_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(dot(injectionSwitch, vec2(-465.674, 6.0))))) > injectionSwitch.y)), ! (! (! (! (_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(dot(injectionSwitch, vec2(-465.674, 6.0))))) > injectionSwitch.y))))), ! (! (_GLF_IDENTITY(! (! (_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_IDENTITY(_GLF_FUZZED(dot(injectionSwitch, vec2(-465.674, 6.0))), mix(float(_GLF_FUZZED((-100.501))), float(_GLF_IDENTITY(_GLF_FUZZED(dot(injectionSwitch, vec2(-465.674, 6.0))), mix(float(_GLF_FUZZED(dot(injectionSwitch, vec2(-465.674, 6.0)))), float(_GLF_FUZZED(-9890.6000)), bool(false)))), bool(true))))) > injectionSwitch.y)), ! (! (! (! (_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(dot(injectionSwitch, vec2(-465.674, 6.0))))) > injectionSwitch.y))))))))))), true && (_GLF_IDENTITY(! _GLF_IDENTITY((_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), ! (! (! (injectionSwitch.x > injectionSwitch.y))))), ! (! ((_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), true && (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), true && (! (injectionSwitch.x > injectionSwitch.y))))))))), ! (! _GLF_IDENTITY((! (! (_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(dot(injectionSwitch, vec2(-465.674, 6.0))))) > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))))), (_GLF_IDENTITY((! (! (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(true ? injectionSwitch.x : _GLF_FUZZED(dot(injectionSwitch, vec2(-465.674, 6.0))), min(_GLF_IDENTITY(true ? injectionSwitch.x : _GLF_FUZZED(dot(injectionSwitch, vec2(-465.674, 6.0))), (false ? _GLF_FUZZED(trunc(39.30)) : true ? injectionSwitch.x : _GLF_FUZZED(dot(injectionSwitch, vec2(-465.674, 6.0))))), true ? injectionSwitch.x : _GLF_FUZZED(dot(injectionSwitch, vec2(-465.674, 6.0))))))) > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))))), ((! (! (_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(dot(injectionSwitch, vec2(-465.674, 6.0))))) > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)))))) && true)) && true)))))))))))), bool(bool(! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! (! (injectionSwitch.x > injectionSwitch.y)), ! (! (! (! (_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(dot(injectionSwitch, vec2(-465.674, 6.0))))) > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y))))))))))))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(false || (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(6.7), _GLF_FUZZED(7.0)), vec2(_GLF_IDENTITY((injectionSwitch)[0], clamp((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch)[0], float(mat4((injectionSwitch)[0], 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0))), (injectionSwitch)[0])), (injectionSwitch)[1]), bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))).y, injectionSwitch.y))) - log(1.0))))), (false || (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), max(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))) - log(1.0)))))) || false))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         barrier();
        }
      }
     barrier();
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), (_GLF_IDENTITY(false, true && (false))) || false)), (_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), (_GLF_IDENTITY(false, true && _GLF_IDENTITY((false), ! (! ((false)))))) || false))) || false))
      {
       do
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           barrier();
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       barrier();
      }
     else
      {
      }
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       barrier();
      }
    }
  }
 if(_GLF_DEAD(false))
  {
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (false)))))
        {
        }
       else
        {
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   do
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
          {
           do
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
              barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
           if(_GLF_DEAD(false))
            barrier();
           barrier();
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5)))); _injected_loop_counter ++)
              {
               barrier();
              }
            }
          }
        }
       do
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             barrier();
            }
          }
         barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   do
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec3(true, true, true), bvec3(_GLF_IDENTITY(bvec3(bvec3(true, true, true)), bvec3(bvec3(bvec3(bvec3(true, true, true))))))))), (_GLF_IDENTITY(true, ! (! (true)))) && true), (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + 0.0) < injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, true, false)))))
      barrier();
     do
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 >> _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(int(int(4))), (false ? _GLF_FUZZED(_injected_loop_counter) : int(int(int(4))))))))); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             barrier();
            }
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             barrier();
            }
          }
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * abs(1.0))))))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(false), true && (_GLF_IDENTITY(bool(false), bool(bvec4(bool(_GLF_IDENTITY(false, _GLF_IDENTITY(! (_GLF_IDENTITY(! (false), bool(bvec3(! (false), true, false)))), true && (_GLF_IDENTITY(! (_GLF_IDENTITY(! (false), bool(bvec3(! (false), true, false)))), ! (! (! (_GLF_IDENTITY(! _GLF_IDENTITY((false), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY((false), ! (! ((false)))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec2(bvec3(bvec2(_GLF_IDENTITY((false), ! (! ((false)))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true)))), false || (bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY((false), ! (! ((false)))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec2(bvec3(bvec2(_GLF_IDENTITY((false), ! (! ((false)))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true))))))), bool(bvec3(! (false), true, false))))))))))), _GLF_IDENTITY(true, (true) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false, true)))))), bool(bool(bool(_GLF_IDENTITY(bool(false), true && _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(bool(false), false || (bool(false))), bool(bvec4(bool(false), _GLF_IDENTITY(true, bool(bvec3(_GLF_IDENTITY(true, false || (true)), true, true))), false, true)))), true && (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(bool(false), false || (bool(false))), bool(bvec4(bool(false), _GLF_IDENTITY(true, bool(bvec3(_GLF_IDENTITY(true, false || (true)), true, true))), false, true)))), ! (! ((_GLF_IDENTITY(_GLF_IDENTITY(bool(false), false || (bool(false))), bool(bvec4(bool(false), _GLF_IDENTITY(true, bool(bvec3(_GLF_IDENTITY(true, false || (true)), true, true))), false, true))))))))))))))), (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 barrier();
                }
              }
             barrier();
            }
           do
            {
             if(_GLF_DEAD(false))
              {
               for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1))); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 | int(_GLF_ZERO(0.0, injectionSwitch.x)))); _injected_loop_counter --)
                {
                 barrier();
                }
              }
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat3(injectionSwitch, 0.0, 0.0, 0.0, 1.0, 0.0, log(1.0), 0.0)), (vec2(mat3(injectionSwitch, 0.0, 0.0, 0.0, 1.0, 0.0, log(1.0), 0.0))) / vec2(1.0, 1.0))).y))))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 barrier();
                }
              }
             else
              {
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-2323.0732)), bool(false))) > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 barrier();
                }
               barrier();
               if(_GLF_DEAD(false))
                barrier();
              }
             barrier();
             if(_GLF_DEAD(false))
              barrier();
            }
          }
         else
          {
           do
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             else
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 barrier();
                }
               else
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
              }
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             barrier();
            }
           else
            {
            }
          }
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), ~ (~ (int(0)))))) << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6)))); _injected_loop_counter ++)
          {
           barrier();
          }
        }
       do
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   _GLF_IDENTITY(GLF_merged2_0_1_11_1_1_11subgroup_idvirtual_gid.x = subgroup_id, _GLF_IDENTITY(1u, clamp(1u, 1u, _GLF_IDENTITY(1u, 0u ^ (1u)))) * (_GLF_IDENTITY(GLF_merged2_0_1_11_1_1_11subgroup_idvirtual_gid.x = _GLF_IDENTITY(subgroup_id, max(subgroup_id, subgroup_id)), (_GLF_IDENTITY(GLF_merged2_0_1_11_1_1_11subgroup_idvirtual_gid.x = subgroup_id, 1u * _GLF_IDENTITY((GLF_merged2_0_1_11_1_1_11subgroup_idvirtual_gid.x = subgroup_id), ~ (_GLF_IDENTITY(~ ((GLF_merged2_0_1_11_1_1_11subgroup_idvirtual_gid.x = subgroup_id)), (~ ((GLF_merged2_0_1_11_1_1_11subgroup_idvirtual_gid.x = subgroup_id))) << 0u))))) ^ 0u)));
  }
 else
  {
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), true && _GLF_IDENTITY((_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_DEAD(false), false, true)))), true && ((_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_DEAD(false), false, true))))))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), (_GLF_IDENTITY(false, ! (! (false)))) || false)))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     barrier();
    }
   else
    {
    }
  }
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(bvec3((injectionSwitch.x > injectionSwitch.y), true, false)), bool(bvec4(bool(bvec3((injectionSwitch.x > injectionSwitch.y), true, false)), true, true, false)))))))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     barrier();
    }
   else
    {
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
      {
       barrier();
      }
    }
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   do
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, false || (false))));
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     barrier();
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint num_workgroup = _GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) / uvec3(1u, 1u, 1u)).x;
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) && true)))
        {
         barrier();
        }
       else
        {
        }
      }
     else
      {
      }
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false, false)), (bool(bvec3(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false, false))) || false))))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     for(int _injected_loop_counter = (0 ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       barrier();
      }
    }
   do
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
        }
       else
        {
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = workgroup_size * workgroup_id;
 uint subgroup_base = GLF_merged2_0_1_11_1_1_11subgroup_idvirtual_gid.x * subgroup_size;
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bool(false))), (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(vec2(injectionSwitch.y, exp(0.0))), clamp(float(vec2(injectionSwitch.y, exp(0.0))), float(vec2(injectionSwitch.y, exp(0.0))), float(vec2(injectionSwitch.y, exp(0.0)))))), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).x) / 1.0) > injectionSwitch.y)))))) || false)))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) || false), (_GLF_IDENTITY(injectionSwitch.x, 0.0 + (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(1.0 * (injectionSwitch.x), (1.0 * (_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x)))) / 1.0)))) > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         barrier();
        }
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY((false), _GLF_IDENTITY(false || (_GLF_IDENTITY((false), ((false)) || false)), ! (! (false || (_GLF_IDENTITY((false), ((false)) || false)))))) || false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(false, _GLF_IDENTITY((false), false || (_GLF_IDENTITY((false), ((false)) || false))) || false)))))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(false))
        {
         do
          {
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
     else
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           barrier();
          }
        }
      }
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   else
    {
    }
   barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     barrier();
    }
   else
    {
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 uint virtual_gid = workgroup_base + subgroup_base + subgroup_local_id;
 if(_GLF_DEAD(false))
  barrier();
 GLF_merged2_0_1_11_1_1_11subgroup_idvirtual_gid.y = _GLF_IDENTITY(virtual_gid, clamp(virtual_gid, _GLF_IDENTITY(virtual_gid, (virtual_gid) / 1u), virtual_gid));
 uint next_virtual_gid = workgroup_base + subgroup_base + ((_GLF_IDENTITY(subgroup_local_id, uint(uvec3(subgroup_local_id, 0u, 0u))) + 1) % subgroup_size);
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     barrier();
    }
   else
    {
    }
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
      {
       do
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
    }
   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, true)), ! (_GLF_IDENTITY(! (bool(bvec4(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, true))), true && (! (bool(bvec4(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, true)))))))), false || (false))), (_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, true)), ! (_GLF_IDENTITY(! (bool(bvec4(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, true))), true && (! (bool(bvec4(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, true)))))))), false || (false)), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, true)), ! (_GLF_IDENTITY(! (bool(bvec4(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, true))), true && (! (bool(bvec4(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, true)))))))), false || (false)), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, true)), ! (_GLF_IDENTITY(! (bool(bvec4(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, true))), true && (! (bool(bvec4(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, true)))))))), false || (false))))), false, false)), bool(bvec3(bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, true)), ! (_GLF_IDENTITY(! (bool(bvec4(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, true))), true && (! (bool(bvec4(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, true)))))))), false || (false)), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, true)), ! (_GLF_IDENTITY(! (bool(bvec4(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, true))), true && (! (bool(bvec4(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, true)))))))), false || (false))))), false, false)), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))) && true))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     do
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), true && (! _GLF_IDENTITY((false), bool(bvec4(_GLF_IDENTITY((false), _GLF_IDENTITY(((false)), ! (! (((false))))) && true), true, false, false)))))))));
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      barrier();
     do
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          barrier();
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   do
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       do
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           for(int _injected_loop_counter = int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)))), injectionSwitch, injectionSwitch)).y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > ((0 ^ 0) & -10595)); _injected_loop_counter --)
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                }
               else
                {
                }
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(injectionSwitch.x > injectionSwitch.y, false, true, true)))), (bool(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(injectionSwitch.x > injectionSwitch.y, false, true, true))))) && true)))))))
                  barrier();
                 if(_GLF_DEAD(false))
                  {
                   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 >> _GLF_IDENTITY(int(1), int(1)))); _injected_loop_counter --)
                    {
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                      }
                     else
                      {
                       barrier();
                      }
                    }
                  }
                }
               else
                {
                 barrier();
                }
              }
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false))
              barrier();
            }
          }
         else
          {
          }
        }
       while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), false || (_GLF_WRAPPED_LOOP(false))));
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false) || false)))
        barrier();
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, bool(bvec3(false, false, true))))), (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) && true)));
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   do
    {
     for(int _injected_loop_counter = (int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 >> _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (int(4)) ^ 0)))); _injected_loop_counter --)
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (0 ^ int(_GLF_ONE(1.0, injectionSwitch.y)))); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
        }
       else
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) && true)))
          {
          }
         else
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                barrier();
              }
            }
           else
            {
            }
           if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_GLF_DEAD(false), ! _GLF_IDENTITY((! (_GLF_DEAD(false))), ((! (_GLF_DEAD(false)))) && true)))), bool(bvec4(bool(bool(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))), false, false, true)))))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bool(! (false))))))))
              {
               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                {
                 do
                  {
                   barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
              }
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(_GLF_IDENTITY(0.0, max(0.0, 0.0)), injectionSwitch.x))); _injected_loop_counter --)
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y))))))
                  barrier();
                }
               else
                {
                }
               barrier();
               if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - tan(vec2(0.0, 0.0))), injectionSwitch)).y))), ! (! (_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, (false) || false), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch), (mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch)) - vec2(0.0, 0.0))).y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))
                {
                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                  {
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                      }
                     else
                      {
                       barrier();
                      }
                    }
                  }
                 barrier();
                }
              }
            }
           for(int _injected_loop_counter = (((0 >> _GLF_IDENTITY(int(4), int(4))) << _GLF_IDENTITY(int(3), int(3))) ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), bool(bool(false)))))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if(_GLF_DEAD(false))
                barrier();
               barrier();
               if(_GLF_DEAD(false))
                barrier();
              }
            }
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-7.0), _GLF_FUZZED(vec2(-742.004, 8363.3565).r)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, _GLF_IDENTITY(true, false || (true))))).y)), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-7.0), _GLF_FUZZED(vec2(-742.004, 8363.3565).r)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, _GLF_IDENTITY(true, false || (true))))).y, bool(bvec2(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-7.0), _GLF_FUZZED(vec2(-742.004, 8363.3565).r)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, _GLF_IDENTITY(true, false || (true))))).y, false)))))) && true)))
            barrier();
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               barrier();
              }
             else
              {
              }
            }
           do
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             else
              {
              }
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
           barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))))))));
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     barrier();
    }
  }
 uint read = atomicLoad(_GLF_IDENTITY(_GLF_IDENTITY(buf[GLF_merged2_0_1_11_1_1_11subgroup_idvirtual_gid.y], 0u | (buf[GLF_merged2_0_1_11_1_1_11subgroup_idvirtual_gid.y])), (_GLF_IDENTITY(buf[GLF_merged2_0_1_11_1_1_11subgroup_idvirtual_gid.y], (buf[_GLF_IDENTITY(GLF_merged2_0_1_11_1_1_11subgroup_idvirtual_gid.y, (_GLF_IDENTITY(GLF_merged2_0_1_11_1_1_11subgroup_idvirtual_gid.y, (_GLF_IDENTITY(GLF_merged2_0_1_11_1_1_11subgroup_idvirtual_gid, (GLF_merged2_0_1_11_1_1_11subgroup_idvirtual_gid) | uvec2(0u, 0u)).y) ^ 0u)) << 0u)]) >> 0u)) ^ 0u), _GLF_IDENTITY(4, ~ (~ (_GLF_IDENTITY(4, (_GLF_IDENTITY(4, max(4, 4))) * 1)))), 64, _GLF_IDENTITY(2, (_GLF_IDENTITY(2, (2) << 0)) / 1));
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      barrier();
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (_GLF_IDENTITY(1 & 1, clamp(1 & 1, 1 & 1, 1 & 1)))); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           barrier();
          }
        }
       for(int _injected_loop_counter = _GLF_IDENTITY(0, min(0, _GLF_IDENTITY(0, _GLF_IDENTITY((0) ^ 0, min((0) ^ 0, (0) ^ 0))))); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(1, (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(_injected_loop_counter) : 1))) | (1))), _GLF_IDENTITY(bool(bvec4(_GLF_WRAPPED_LOOP(_injected_loop_counter < 1), false, false, false)), bool(bvec4(bool(bvec4(_GLF_WRAPPED_LOOP(_injected_loop_counter < 1), false, false, false)), true, _GLF_IDENTITY(false, ! (! (false))), true)))); _injected_loop_counter ++)
        {
         barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       barrier();
      }
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > ((1 & 1) ^ 1)); _injected_loop_counter --)
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))))
        barrier();
      }
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       barrier();
      }
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     barrier();
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   do
    {
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY((((_GLF_IDENTITY(- -70956, (- -70956) | (- -70956))) & 0) << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), min(int(3), int(3))))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY((_GLF_IDENTITY(((_GLF_IDENTITY(- -70956, (- -70956) | (_GLF_IDENTITY(- -70956, (- -70956) >> 0)))) & 0) << _GLF_IDENTITY(int(3), int(3)), (false ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY((_GLF_IDENTITY((- -70956), (_GLF_IDENTITY((- -70956), min((- -70956), (- -70956)))) | ((- -70956))) & 0), ((_GLF_IDENTITY((- -70956), (_GLF_IDENTITY((- -70956), min((- -70956), (- -70956)))) | ((- -70956))) & 0)) | ((_GLF_IDENTITY((- -70956), (_GLF_IDENTITY((- -70956), min((- -70956), (- -70956)))) | ((- -70956))) & 0))) << _GLF_IDENTITY(int(3), int(3))))), 1 * ((_GLF_IDENTITY(_GLF_IDENTITY(((- -70956) & 0) << _GLF_IDENTITY(int(3), int(3)), min(_GLF_IDENTITY(((- -70956) & 0) << _GLF_IDENTITY(int(3), int(3)), min(((- -70956) & 0) << _GLF_IDENTITY(int(3), int(3)), ((- -70956) & 0) << _GLF_IDENTITY(int(3), int(3)))), _GLF_IDENTITY(((- -70956) & 0) << _GLF_IDENTITY(int(3), int(3)), (0 << _GLF_IDENTITY(int(4), int(4))) ^ (((- -70956) & 0) << _GLF_IDENTITY(int(3), int(3)))))), (false ? _GLF_FUZZED(_injected_loop_counter) : ((- -70956) & 0) << _GLF_IDENTITY(int(3), int(3)))))))), (~ ((_GLF_IDENTITY(((- _GLF_IDENTITY(-70956, clamp(_GLF_IDENTITY(-70956, int(ivec2(-70956, 1))), -70956, _GLF_IDENTITY(-70956, ~ (~ (-70956)))))) & 0) << _GLF_IDENTITY(int(3), int(3)), min(((- -70956) & 0) << _GLF_IDENTITY(int(3), int(3)), ((- -70956) & 0) << _GLF_IDENTITY(int(3), int(3))))))) / 1)))); _injected_loop_counter --)
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       if((subgroup_local_id % 2) == 0)
        {
         if(_GLF_DEAD(false))
          barrier();
         for(int _injected_loop_counter = int(_GLF_ONE(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED((-75.52)) : 1.0)), injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, (0) + 0))), (_GLF_IDENTITY(_GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, (0) + 0))), (_GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, (0) + 0)))) + 0)) | 0), (true ? _GLF_IDENTITY(_GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, (0) + 0))), (_GLF_IDENTITY(_GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, (0) + 0))), (_GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, (0) + 0)))) + 0)) | 0) : _GLF_FUZZED(_injected_loop_counter))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, (0) + 0))), (_GLF_IDENTITY(_GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, (0) + 0))), (_GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(_GLF_IDENTITY(0, (false ? _GLF_FUZZED((19835 + _injected_loop_counter)) : _GLF_IDENTITY(0, max(0, 0)))), (0) + 0)))) + 0)) | 0), (true ? _GLF_IDENTITY(_GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) - 0)) + 0))), (_GLF_IDENTITY(_GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, (0) + 0))), (_GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, (0) + 0)))) + 0)) | 0) : _GLF_FUZZED(_injected_loop_counter)))) - 0)); _GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter --, _GLF_IDENTITY(_GLF_IDENTITY((_injected_loop_counter --), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY((_injected_loop_counter --), 0 | ((_injected_loop_counter --)))), (~ (_GLF_IDENTITY((_injected_loop_counter --), 0 | ((_injected_loop_counter --))))) + 0))), (true ? _GLF_IDENTITY((_injected_loop_counter --), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY((_injected_loop_counter --), 0 | ((_GLF_IDENTITY(_injected_loop_counter --, ~ (~ (_injected_loop_counter --))))))), (~ (_GLF_IDENTITY((_injected_loop_counter --), 0 | ((_injected_loop_counter --))))) + 0))) : _GLF_FUZZED(-31770))) << 0), (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, true && (false))))) ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(_injected_loop_counter --, _GLF_IDENTITY((_GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) / 1)) << 0, ((_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) / 1), ~ (~ (_GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) / 1))))) << 0) >> 0)))))
          {
           if(_GLF_DEAD(false))
            barrier();
           for(int _injected_loop_counter = (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_IDENTITY(6, max(6, _GLF_IDENTITY(6, (_GLF_IDENTITY(6, max(6, 6))) ^ 0))), 0 ^ (6))), int(6))), int(_GLF_IDENTITY(ivec3((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(6, _GLF_IDENTITY(0 ^ (6), (0 ^ (_GLF_IDENTITY(_GLF_IDENTITY(6, (_GLF_IDENTITY(6, (false ? _GLF_FUZZED(_injected_loop_counter) : 6))) >> 0), (_GLF_IDENTITY(6, (_GLF_IDENTITY(6, (false ? _GLF_FUZZED(_injected_loop_counter) : 6))) >> 0)) | int(_GLF_ZERO(0.0, injectionSwitch.x))))) - (0 << _GLF_IDENTITY(int(1), int(1)))))), int(6))), int(_GLF_ONE(1.0, injectionSwitch.y)), 1), ivec3(_GLF_IDENTITY(ivec4(ivec3((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(6, 0 ^ (6))), int(6))), int(_GLF_ONE(1.0, injectionSwitch.y)), 1), 0), ivec4(0, 0, 0, 0) ^ (ivec4(ivec3((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(6, 0 ^ (6))), int(6))), int(_GLF_ONE(1.0, injectionSwitch.y)), 1), 0))))))) >> _GLF_IDENTITY(int(6), int(6))); _GLF_WRAPPED_LOOP(_injected_loop_counter > (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1, 0 ^ (1)), (true ? _GLF_IDENTITY(_GLF_IDENTITY(1, 0 ^ (1)), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(1, 0 ^ (1))), 1 * (~ (_GLF_IDENTITY(1, 0 ^ (1))))))) : _GLF_FUZZED(_injected_loop_counter))), (_GLF_IDENTITY(1, 0 ^ (1))) | 0) ^ 1)); _injected_loop_counter --)
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   barrier();
                  }
                }
               do
                {
                 if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
                  barrier();
                }
               while(_GLF_WRAPPED_LOOP(false));
               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                {
                 barrier();
                }
               if(_GLF_DEAD(false))
                barrier();
              }
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY((-1106 & 0), _GLF_IDENTITY(0 ^ ((-1106 & 0)), min(0 ^ ((-1106 & 0)), 0 ^ ((-1106 & 0)))))); _injected_loop_counter --)
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   barrier();
                  }
                 barrier();
                }
              }
             if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 do
                  {
                   barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
               barrier();
              }
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
               if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
                barrier();
              }
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              {
               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                {
                 barrier();
                }
              }
            }
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(_GLF_IDENTITY(bool(bool(injectionSwitch.x > injectionSwitch.y)), (bool(bool(injectionSwitch.x > injectionSwitch.y))) && true), false || (_GLF_IDENTITY(_GLF_IDENTITY(bool(bool(injectionSwitch.x > injectionSwitch.y)), (bool(bool(injectionSwitch.x > injectionSwitch.y))) && true), bool(bvec4(_GLF_IDENTITY(bool(bool(injectionSwitch.x > injectionSwitch.y)), (bool(bool(injectionSwitch.x > injectionSwitch.y))) && true), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))))))), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)).y)), false, true)))))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              barrier();
             subgroupAll(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec3(false, true, _GLF_IDENTITY(false, bool(bool(false))))))) || false));
             if(_GLF_DEAD(false))
              barrier();
            }
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             barrier();
            }
           else
            {
            }
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) && true)))
            {
            }
           else
            {
             do
              {
               for(int _injected_loop_counter = _GLF_IDENTITY(1, 0 + (1)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                {
                 barrier();
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
          }
         do
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
           for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           if(_GLF_DEAD(false))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           atomicStore(buf[next_virtual_gid], uint(1), 4, _GLF_IDENTITY(64, ~ (~ (_GLF_IDENTITY(64, (64) - 0)))), 4);
          }
         else
          {
          }
         do
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), clamp((injectionSwitch) * mat2(1.0), _GLF_IDENTITY((injectionSwitch) * mat2(1.0), min((injectionSwitch) * mat2(1.0), (injectionSwitch) * mat2(1.0))), (injectionSwitch) * mat2(1.0)))).y))))
              barrier();
            }
           else
            {
            }
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
            {
             if(_GLF_DEAD(false))
              {
               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(false))
                    {
                     do
                      {
                       barrier();
                      }
                     while(_GLF_WRAPPED_LOOP(false));
                    }
                   barrier();
                  }
                }
               barrier();
              }
            }
           if(_GLF_DEAD(false))
            {
             do
              {
               barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           do
            {
             if(_GLF_DEAD(false))
              {
               do
                {
                 do
                  {
                   barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
          barrier();
         subgroupAll(false);
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), (_GLF_IDENTITY(false, true && (false))) || false)), (_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(true, bool(_GLF_IDENTITY(bool(true), (_GLF_IDENTITY(bool(true), bool(bvec3(bool(true), false, false)))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) && (false)), true && (_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bool(true), (_GLF_IDENTITY(bool(true), bool(bvec3(bool(true), false, false)))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), false || (_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bool(true), (_GLF_IDENTITY(bool(true), bool(bvec3(bool(true), false, false)))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))) && (false)))))) || false))
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
            {
             barrier();
            }
          }
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           do
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   barrier();
                  }
                 else
                  {
                  }
                 if(_GLF_DEAD(false))
                  barrier();
                }
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
            }
           while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) || false)));
           if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, true && (false))))
            {
            }
           else
            {
             if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), false || (! (false)))))) || false), (injectionSwitch.x > injectionSwitch.y))))
              {
               do
                {
                 barrier();
                }
               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
              }
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
             else
              {
              }
            }
           do
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
              }
             else
              {
               if(_GLF_DEAD(false))
                barrier();
              }
             atomicStore(buf[next_virtual_gid], uint(1), 4, 64, 4);
             if(_GLF_DEAD(false))
              barrier();
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
           if(_GLF_DEAD(false))
            barrier();
          }
        }
      }
    }
  }
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))), _GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, false, true, false)), bool(bvec3(bool(bvec4(false, false, true, false)), true, false)))) || (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec2(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false))))))
  {
   for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 for(int _injected_loop_counter = _GLF_IDENTITY((0 | 0), (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, (0) | (0)))) | 0), (true ? _GLF_IDENTITY((_GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, (0) | (0)))) | 0), min((_GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, (0) | (0)))) | 0), (_GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, (0) | (0)))) | 0))) : _GLF_FUZZED(77811))), min(_GLF_IDENTITY((0 | 0), min((0 | 0), (0 | 0))), (0 | 0)))) / ((1 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), ~ (~ (int(4)))))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(4, (4) | 0)), _GLF_IDENTITY(int(4), 0 | (int(4)))))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false))))), (! (_GLF_DEAD(false))) || false))))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec2(false, true)))) || false)))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 for(int _injected_loop_counter = (1 & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    {
     do
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
          {
           barrier();
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, true && (false))));
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, bool(bvec2(true, true)))) && true)))
  {
   subgroupBarrier();
  }
 else
  {
  }
 atomicStore(buf[GLF_merged2_0_1_11_1_1_11subgroup_idvirtual_gid.y], read, _GLF_IDENTITY(4, (true ? 4 : _GLF_FUZZED(34415))), 64, 4);
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END
BUFFER checker DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected_checker DATA_TYPE uint32 SIZE 8388096 FILL 0

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 
  BIND BUFFER checker AS storage DESCRIPTOR_SET 0 BINDING 2 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT checker EQ_BUFFER expected_checker
