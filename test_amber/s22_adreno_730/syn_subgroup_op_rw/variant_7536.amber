#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uvec2 GLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_id;
 uvec2 GLF_merged2_0_1_13_1_1_4num_workgroupread;
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-5859.8801)), float(injectionSwitch.x), bool(true))) > injectionSwitch.y))))
  {
  }
 else
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, false || _GLF_IDENTITY((true), ((true)) || false))))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         do
          {
           for(int _injected_loop_counter = (0 | _GLF_IDENTITY(((_GLF_IDENTITY(_GLF_IDENTITY(1 << _GLF_IDENTITY(int(2), int(2)), (_GLF_IDENTITY(1 << _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), ~ (~ (int(2))))), (1 << _GLF_IDENTITY(int(2), int(2))) | (1 << _GLF_IDENTITY(int(2), int(2))))) | 0), (_GLF_IDENTITY(_GLF_IDENTITY(1 << _GLF_IDENTITY(int(2), int(2)), (_GLF_IDENTITY(1 << _GLF_IDENTITY(int(2), int(2)), (1 << _GLF_IDENTITY(int(2), int(2))) | (1 << _GLF_IDENTITY(int(2), int(2))))) | 0), (_GLF_IDENTITY(1 << _GLF_IDENTITY(int(2), int(2)), (_GLF_IDENTITY(1 << _GLF_IDENTITY(int(2), int(2)), (1 << _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(2), clamp(_GLF_IDENTITY(int(2), (int(2)) | (int(2))), int(2), _GLF_IDENTITY(int(2), ~ (~ (int(2)))))), int(2)), (false ? _GLF_FUZZED(-14101) : _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(2), int(2)), (_GLF_IDENTITY(int(2), int(2))) << 0), _GLF_IDENTITY((_GLF_IDENTITY(int(2), int(2))) / 1, int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ ((_GLF_IDENTITY(int(2), int(2))) / 1)))))) | (1 << _GLF_IDENTITY(int(2), int(2))))) | 0)) - 0)) / 1)) >> _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(2, _GLF_IDENTITY(clamp(2, 2, 2), (_GLF_IDENTITY(clamp(2, 2, _GLF_IDENTITY(2, max(_GLF_IDENTITY(2, (2) >> 0), 2))), (clamp(2, 2, 2)) | (_GLF_IDENTITY(clamp(_GLF_IDENTITY(2, (2) * 1), 2, 2), clamp(clamp(2, 2, 2), clamp(2, 2, 2), clamp(2, 2, 2)))))) << 0))), (false ? _GLF_FUZZED(86281) : _GLF_IDENTITY(int(_GLF_IDENTITY(2, _GLF_IDENTITY(clamp(2, 2, 2), (_GLF_IDENTITY(clamp(2, 2, _GLF_IDENTITY(2, max(_GLF_IDENTITY(2, (2) >> 0), 2))), (clamp(2, 2, 2)) | (_GLF_IDENTITY(clamp(_GLF_IDENTITY(2, (2) * 1), 2, 2), clamp(clamp(2, 2, 2), clamp(2, 2, 2), clamp(2, 2, 2)))))) << 0))), clamp(int(_GLF_IDENTITY(2, _GLF_IDENTITY(clamp(2, 2, 2), (_GLF_IDENTITY(clamp(2, 2, _GLF_IDENTITY(2, max(_GLF_IDENTITY(2, (2) >> 0), 2))), (clamp(2, 2, 2)) | (_GLF_IDENTITY(clamp(_GLF_IDENTITY(2, (2) * 1), 2, 2), clamp(clamp(2, 2, 2), clamp(2, 2, 2), clamp(2, 2, 2)))))) << 0))), int(_GLF_IDENTITY(2, _GLF_IDENTITY(clamp(2, 2, 2), (_GLF_IDENTITY(clamp(2, 2, _GLF_IDENTITY(2, max(_GLF_IDENTITY(2, (2) >> 0), 2))), (clamp(2, 2, 2)) | (_GLF_IDENTITY(clamp(_GLF_IDENTITY(2, (2) * 1), 2, 2), clamp(clamp(2, 2, 2), clamp(2, 2, 2), clamp(2, 2, 2)))))) << 0))), int(_GLF_IDENTITY(2, _GLF_IDENTITY(clamp(2, 2, 2), (_GLF_IDENTITY(clamp(2, 2, _GLF_IDENTITY(_GLF_IDENTITY(2, max(_GLF_IDENTITY(2, (2) >> 0), 2)), (_GLF_IDENTITY(2, max(_GLF_IDENTITY(2, (2) >> 0), 2))) << 0)), (clamp(2, 2, 2)) | (_GLF_IDENTITY(clamp(_GLF_IDENTITY(2, (2) * 1), 2, 2), clamp(clamp(2, 2, 2), clamp(2, 2, 2), clamp(2, 2, 2)))))) << 0))))))), 0 + (_GLF_IDENTITY(int(_GLF_IDENTITY(2, _GLF_IDENTITY(clamp(2, 2, 2), (_GLF_IDENTITY(clamp(_GLF_IDENTITY(2, (2) >> _GLF_IDENTITY(0, min(0, 0))), 2, _GLF_IDENTITY(_GLF_IDENTITY(2, max(_GLF_IDENTITY(2, ~ (~ (2))), 2)), max(_GLF_IDENTITY(2, (2) >> _GLF_IDENTITY(0, clamp(_GLF_IDENTITY(0, min(0, _GLF_IDENTITY(0, (false ? _GLF_FUZZED(30944) : 0)))), _GLF_IDENTITY(0, int(ivec4(_GLF_IDENTITY(0, 0 ^ (0)), 0, 0, 0))), 0))), 2))), (clamp(2, 2, 2)) | (_GLF_IDENTITY(clamp(2, 2, 2), clamp(clamp(2, 2, 2), clamp(2, 2, 2), clamp(2, 2, 2)))))) << 0))), clamp(_GLF_IDENTITY(int(_GLF_IDENTITY(2, _GLF_IDENTITY(clamp(2, 2, 2), (_GLF_IDENTITY(clamp(2, 2, _GLF_IDENTITY(2, max(_GLF_IDENTITY(2, (2) >> 0), 2))), (clamp(2, 2, 2)) | (_GLF_IDENTITY(clamp(2, 2, 2), clamp(clamp(2, 2, 2), clamp(2, 2, 2), clamp(2, 2, 2)))))) << 0))), _GLF_IDENTITY((int(_GLF_IDENTITY(_GLF_IDENTITY(2, ~ (~ (2))), _GLF_IDENTITY(clamp(2, 2, 2), (_GLF_IDENTITY(clamp(2, 2, _GLF_IDENTITY(2, max(_GLF_IDENTITY(2, (2) >> 0), 2))), (clamp(2, 2, 2)) | (_GLF_IDENTITY(clamp(2, 2, 2), clamp(clamp(2, 2, 2), clamp(2, 2, 2), clamp(2, 2, 2)))))) << 0)))) << 0, (true ? (int(_GLF_IDENTITY(_GLF_IDENTITY(2, ~ (~ (2))), _GLF_IDENTITY(clamp(2, 2, 2), (_GLF_IDENTITY(clamp(2, 2, _GLF_IDENTITY(2, max(_GLF_IDENTITY(2, (2) >> 0), 2))), (clamp(2, 2, 2)) | (_GLF_IDENTITY(clamp(2, 2, 2), clamp(clamp(2, 2, 2), clamp(2, 2, 2), clamp(2, 2, 2)))))) << 0)))) << 0 : _GLF_FUZZED(13213)))), int(_GLF_IDENTITY(2, _GLF_IDENTITY(clamp(2, 2, 2), (_GLF_IDENTITY(clamp(2, 2, _GLF_IDENTITY(2, max(_GLF_IDENTITY(2, (2) >> 0), 2))), (clamp(2, 2, 2)) | (_GLF_IDENTITY(clamp(2, 2, 2), clamp(clamp(2, 2, 2), clamp(2, 2, 2), clamp(2, 2, 2)))))) << 0))), _GLF_IDENTITY(int(_GLF_IDENTITY(2, _GLF_IDENTITY(clamp(2, 2, 2), _GLF_IDENTITY((_GLF_IDENTITY(clamp(2, 2, _GLF_IDENTITY(2, max(_GLF_IDENTITY(2, (2) >> 0), 2))), (clamp(2, 2, 2)) | (_GLF_IDENTITY(clamp(2, 2, 2), clamp(clamp(2, 2, 2), clamp(2, 2, 2), clamp(2, 2, 2)))))) << 0, 0 ^ (_GLF_IDENTITY((_GLF_IDENTITY(clamp(2, _GLF_IDENTITY(2, (2) << 0), _GLF_IDENTITY(2, max(_GLF_IDENTITY(2, (2) >> 0), 2))), (clamp(2, 2, 2)) | (_GLF_IDENTITY(clamp(2, 2, 2), clamp(clamp(2, 2, 2), clamp(2, 2, 2), clamp(2, 2, 2)))))) << 0, (_GLF_IDENTITY((_GLF_IDENTITY(clamp(2, 2, _GLF_IDENTITY(2, max(_GLF_IDENTITY(2, (2) >> 0), 2))), (clamp(2, 2, 2)) | (_GLF_IDENTITY(clamp(2, 2, 2), clamp(clamp(2, 2, 2), clamp(2, 2, 2), clamp(2, 2, 2)))))) << 0, (true ? (_GLF_IDENTITY(clamp(2, 2, _GLF_IDENTITY(2, max(_GLF_IDENTITY(2, (2) >> 0), 2))), (clamp(2, 2, 2)) | (_GLF_IDENTITY(clamp(2, 2, 2), clamp(clamp(2, 2, 2), clamp(2, 2, 2), clamp(2, 2, 2)))))) << 0 : _GLF_FUZZED(5106)))) | 0)))))), _GLF_IDENTITY(0 | (_GLF_IDENTITY(int(_GLF_IDENTITY(2, _GLF_IDENTITY(clamp(2, 2, 2), (_GLF_IDENTITY(clamp(2, 2, _GLF_IDENTITY(2, max(_GLF_IDENTITY(2, (2) >> 0), 2))), (clamp(2, 2, 2)) | (_GLF_IDENTITY(clamp(2, 2, 2), clamp(clamp(_GLF_IDENTITY(2, clamp(2, 2, 2)), _GLF_IDENTITY(2, ~ (~ (_GLF_IDENTITY(2, (2) << 0)))), 2), clamp(2, 2, 2), clamp(2, 2, 2)))))) << 0))), int(int(int(_GLF_IDENTITY(2, _GLF_IDENTITY(clamp(2, 2, 2), (_GLF_IDENTITY(clamp(_GLF_IDENTITY(2, (2) >> 0), 2, _GLF_IDENTITY(2, max(_GLF_IDENTITY(_GLF_IDENTITY(2, int(int(2))), (2) >> 0), 2))), (clamp(2, 2, 2)) | (_GLF_IDENTITY(clamp(2, 2, 2), clamp(clamp(2, 2, 2), clamp(2, 2, 2), clamp(2, 2, 2)))))) << 0))))))), 0 | (_GLF_IDENTITY(0 | (_GLF_IDENTITY(int(_GLF_IDENTITY(2, _GLF_IDENTITY(clamp(2, 2, 2), (_GLF_IDENTITY(clamp(2, 2, _GLF_IDENTITY(2, max(_GLF_IDENTITY(2, (2) >> 0), 2))), (clamp(2, 2, 2)) | (_GLF_IDENTITY(clamp(2, 2, 2), clamp(clamp(_GLF_IDENTITY(2, clamp(2, 2, 2)), _GLF_IDENTITY(2, ~ (~ (_GLF_IDENTITY(2, (2) << 0)))), 2), clamp(2, 2, 2), clamp(2, 2, 2)))))) << 0))), int(int(int(_GLF_IDENTITY(2, _GLF_IDENTITY(clamp(2, 2, 2), (_GLF_IDENTITY(clamp(_GLF_IDENTITY(2, (2) >> 0), 2, _GLF_IDENTITY(2, max(_GLF_IDENTITY(_GLF_IDENTITY(2, int(int(2))), (2) >> 0), 2))), (clamp(2, 2, 2)) | (_GLF_IDENTITY(clamp(2, 2, 2), clamp(clamp(2, 2, 2), clamp(2, 2, 2), clamp(2, 2, 2)))))) << 0))))))), (0 | (_GLF_IDENTITY(int(_GLF_IDENTITY(2, _GLF_IDENTITY(clamp(2, 2, 2), (_GLF_IDENTITY(clamp(2, 2, _GLF_IDENTITY(2, max(_GLF_IDENTITY(2, (2) >> 0), 2))), (clamp(2, 2, 2)) | (_GLF_IDENTITY(clamp(2, 2, 2), clamp(clamp(_GLF_IDENTITY(2, clamp(2, 2, 2)), _GLF_IDENTITY(2, ~ (~ (_GLF_IDENTITY(2, (2) << 0)))), 2), clamp(2, 2, 2), clamp(2, 2, 2)))))) << 0))), int(int(int(_GLF_IDENTITY(2, _GLF_IDENTITY(clamp(2, 2, 2), (_GLF_IDENTITY(clamp(_GLF_IDENTITY(2, (2) >> 0), 2, _GLF_IDENTITY(2, max(_GLF_IDENTITY(_GLF_IDENTITY(2, int(int(2))), (2) >> 0), 2))), (clamp(2, 2, 2)) | (_GLF_IDENTITY(clamp(2, 2, 2), clamp(clamp(2, 2, 2), clamp(2, 2, 2), clamp(2, 2, 2)))))) << 0)))))))) | 0)))))))), int(2))), ~ (~ (((1 << _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(2), int(2)), clamp(_GLF_IDENTITY(int(2), int(2)), _GLF_IDENTITY(_GLF_IDENTITY(int(2), int(2)), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_IDENTITY(int(2), int(2)), max(_GLF_IDENTITY(int(2), int(2)), _GLF_IDENTITY(int(2), int(2))))), clamp(~ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(2), int(2)), ~ (~ (_GLF_IDENTITY(int(2), int(2))))), max(_GLF_IDENTITY(int(2), int(2)), _GLF_IDENTITY(int(_GLF_IDENTITY(2, (2) - 0)), int(2))))), ~ (_GLF_IDENTITY(_GLF_IDENTITY(int(2), int(2)), max(_GLF_IDENTITY(int(2), int(2)), _GLF_IDENTITY(int(2), int(2))))), ~ (_GLF_IDENTITY(_GLF_IDENTITY(int(2), int(2)), max(_GLF_IDENTITY(int(2), int(2)), _GLF_IDENTITY(int(2), int(2))))))))), _GLF_IDENTITY(int(2), int(2)))), int(ivec4(_GLF_IDENTITY(_GLF_IDENTITY(int(2), int(2)), clamp(_GLF_IDENTITY(_GLF_IDENTITY(int(2), clamp(_GLF_IDENTITY(int(2), min(int(2), int(2))), int(2), _GLF_IDENTITY(int(2), 0 | (int(2))))), int(2)), _GLF_IDENTITY(_GLF_IDENTITY(int(2), int(2)), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_IDENTITY(int(2), int(2)), max(_GLF_IDENTITY(int(2), int(2)), _GLF_IDENTITY(_GLF_IDENTITY(int(2), int(_GLF_IDENTITY(2, (2) | (2)))), (_GLF_IDENTITY(int(2), int(_GLF_IDENTITY(2, (2) | (2))))) - (0 >> _GLF_IDENTITY(int(8), int(8))))))), clamp(~ (_GLF_IDENTITY(_GLF_IDENTITY(int(2), int(2)), max(_GLF_IDENTITY(int(2), int(2)), _GLF_IDENTITY(int(2), int(2))))), ~ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(2), 0 | (int(2))), int(2)), max(_GLF_IDENTITY(int(2), int(2)), _GLF_IDENTITY(int(2), int(2))))), ~ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(2), int(2)), clamp(_GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(2, (2) | (2))), int(2)), 0 ^ (_GLF_IDENTITY(int(2), int(2)))), _GLF_IDENTITY(int(2), int(2)), _GLF_IDENTITY(int(2), int(2)))), max(_GLF_IDENTITY(int(2), int(2)), _GLF_IDENTITY(int(2), int(2))))))))), _GLF_IDENTITY(int(2), int(2)))), 0, 0, 0)))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(2, (2) | _GLF_IDENTITY(0, (false ? _GLF_FUZZED(-73801) : 0))), (true ? _GLF_IDENTITY(2, _GLF_IDENTITY(_GLF_IDENTITY((2), ~ (~ ((2)))), max((2), _GLF_IDENTITY((2), (true ? _GLF_IDENTITY((2), int(ivec4((2), 1, 0, 1))) : _GLF_FUZZED(-16628))))) | 0) : _GLF_FUZZED(-47008))), (_GLF_IDENTITY(2, min(2, _GLF_IDENTITY(2, ~ (~ (2)))))) | (2))), int(int(int(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(2, (2) | _GLF_IDENTITY(0, (false ? _GLF_FUZZED(-73801) : 0))), (true ? _GLF_IDENTITY(2, _GLF_IDENTITY(_GLF_IDENTITY((2), ~ (~ ((2)))), max((2), _GLF_IDENTITY((2), (true ? _GLF_IDENTITY((2), int(ivec4((2), 1, 0, 1))) : _GLF_FUZZED(-16628))))) | 0) : _GLF_FUZZED(-47008))), (_GLF_IDENTITY(2, min(2, _GLF_IDENTITY(2, ~ (~ (2)))))) | (2)))))), _GLF_IDENTITY(_GLF_IDENTITY(int(2), ~ (~ (_GLF_IDENTITY(int(2), clamp(int(2), int(2), int(2)))))), clamp(_GLF_IDENTITY(int(2), (true ? int(2) : _GLF_FUZZED(-33782))), _GLF_IDENTITY(int(_GLF_IDENTITY(2, 0 | (_GLF_IDENTITY(2, (2) ^ _GLF_IDENTITY(0, ~ (~ (0))))))), max(_GLF_IDENTITY(int(2), max(int(2), _GLF_IDENTITY(int(2), (int(2)) * 1))), int(2))), int(2))))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
            {
             for(int _injected_loop_counter = (0 & -10332); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
              {
               if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), bool(bvec4(_GLF_WRAPPED_IF_TRUE(true), true, true, false))))
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter < 1, ! (! (_injected_loop_counter < 1))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_injected_loop_counter < _GLF_IDENTITY(1, 0 | (1)), _GLF_IDENTITY(bool(bvec2(_injected_loop_counter < 1, false)), ! (! (bool(bvec2(_injected_loop_counter < 1, false))))))), ! (! (! (_GLF_IDENTITY(_injected_loop_counter < 1, _GLF_IDENTITY(bool(bvec2(_injected_loop_counter < 1, false)), ! (! (bool(bvec2(_injected_loop_counter < 1, false))))))))))))); _injected_loop_counter ++)
                    {
                     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                      {
                       if(_GLF_WRAPPED_IF_TRUE(true))
                        {
                         GLF_merged2_0_1_13_1_1_4num_workgroupread.x = num_workgroup;
                        }
                       else
                        {
                        }
                      }
                    }
                  }
                }
               else
                {
                }
              }
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        }
      }
     else
      {
      }
    }
   else
    {
    }
  }
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   do
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(ivec2(int(1), 1)), (false ? _GLF_FUZZED(-26654) : int(ivec2(int(1), 1)))))))); _injected_loop_counter ++)
      {
       do
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           GLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_id.y = workgroup_id;
          }
         else
          {
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 uint workgroup_base = workgroup_size * GLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_id.y;
 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, false || (true))))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     do
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(0, clamp(0, _GLF_IDENTITY(0, (0) | (0)), 0))); _injected_loop_counter --)
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             do
              {
               for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(8), int(8))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                {
                 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0) > _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(false ? _GLF_FUZZED(vec2(-11.35, 851.482)) : _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), min(false ? _GLF_FUZZED(vec2(-11.35, 851.482)) : _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), false ? _GLF_FUZZED(vec2(-11.35, 851.482)) : _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)))))).y, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY((injectionSwitch.x) / 1.0, max((injectionSwitch.x) / 1.0, (injectionSwitch.x) / 1.0))) > _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-11.35, 851.482)) : injectionSwitch)).y), bool(bool(! (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0) > _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-11.35, 851.482)) : injectionSwitch)).y))))))))))
                  {
                  }
                 else
                  {
                   for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                    {
                     GLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_id.x = workgroup_base;
                    }
                  }
                }
              }
             while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, false || (false))));
            }
           else
            {
            }
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   else
    {
    }
  }
 else
  {
  }
 uint subgroup_base = subgroup_id * subgroup_size;
 uint virtual_gid = GLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_id.x + subgroup_base + subgroup_local_id;
 uint next_virtual_gid = _GLF_IDENTITY(_GLF_IDENTITY(GLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_id.x, _GLF_IDENTITY(uint(uvec3(GLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_id.x, 1u, 0u)), (uint(uvec3(GLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_id.x, 1u, 0u))) << 0u)), (false ? _GLF_FUZZED(workgroup_size) : _GLF_IDENTITY(_GLF_IDENTITY(GLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_id, min(GLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_id, GLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_id)).x, _GLF_IDENTITY(_GLF_IDENTITY(uint(uvec3(GLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_id.x, 1u, 0u)), (uint(uvec3(GLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_id.x, 1u, 0u))) + 0u), (_GLF_IDENTITY(uint(uvec3(GLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_id.x, 1u, 0u)), _GLF_IDENTITY((uint(uvec3(GLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_id.x, 1u, 0u))) / 1u, 0u ^ ((uint(uvec3(GLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_id.x, 1u, 0u))) / 1u)))) << 0u)))) + subgroup_base + ((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + _GLF_IDENTITY(_GLF_IDENTITY(1, (1) << 0), 0 + (1)), _GLF_IDENTITY(_GLF_IDENTITY(0u, (0u) / 1u) ^ (_GLF_IDENTITY(subgroup_local_id, 0u ^ (subgroup_local_id)) + 1), clamp(_GLF_IDENTITY(_GLF_IDENTITY(0u, (0u) / 1u), (_GLF_IDENTITY(0u, (0u) / 1u)) + 0u) ^ (subgroup_local_id + 1), _GLF_IDENTITY(0u, _GLF_IDENTITY((0u), min((0u), (0u))) / 1u) ^ (subgroup_local_id + 1), _GLF_IDENTITY(0u, (0u) / 1u) ^ (_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(_GLF_IDENTITY(1u * (_GLF_IDENTITY(subgroup_local_id, 1u * (subgroup_local_id))), min(1u * (_GLF_IDENTITY(subgroup_local_id, 1u * (subgroup_local_id))), 1u * (_GLF_IDENTITY(subgroup_local_id, 1u * (subgroup_local_id))))), min(_GLF_IDENTITY(1u, 0u + (1u)) * (_GLF_IDENTITY(subgroup_local_id, 1u * (subgroup_local_id))), 1u * (_GLF_IDENTITY(subgroup_local_id, 1u * (subgroup_local_id)))))) + 1)))), (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1, 0 + (1)), (_GLF_IDENTITY(1, 0 + (1))) | (_GLF_IDENTITY(1, 0 + (1)))), (_GLF_IDENTITY(_GLF_IDENTITY(1, 0 + _GLF_IDENTITY((1), (_GLF_IDENTITY((1), ((1)) | ((1)))) - 0)), (_GLF_IDENTITY(1, 0 + (1))) | (_GLF_IDENTITY(1, 0 + (1))))) | (_GLF_IDENTITY(_GLF_IDENTITY(1, 0 + (1)), (_GLF_IDENTITY(1, 0 + _GLF_IDENTITY((1), (true ? (1) : _GLF_IDENTITY(_GLF_FUZZED(42283), (_GLF_IDENTITY(_GLF_FUZZED(42283), max(_GLF_FUZZED(42283), _GLF_FUZZED(42283)))) / 1))))) | (_GLF_IDENTITY(1, 0 + (1)))))), 0u ^ (subgroup_local_id + _GLF_IDENTITY(1, (false ? _GLF_FUZZED(-39246) : 1)))), min(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | (subgroup_local_id)) + _GLF_IDENTITY(1, 0 + (1)), max(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) ^ ((0u >> _GLF_IDENTITY(uint(7u), uint(7u))) << _GLF_IDENTITY(uint(7u), _GLF_IDENTITY(uint(7u), min(uint(7u), uint(7u)))))) + _GLF_IDENTITY(1, 0 + (1)), subgroup_local_id + _GLF_IDENTITY(1, 0 + (1)))), 0u ^ (subgroup_local_id + 1)), _GLF_IDENTITY(subgroup_local_id + _GLF_IDENTITY(1, 0 + (1)), 0u ^ (subgroup_local_id + _GLF_IDENTITY(1, (1) << 0)))))) | uint(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(-9382.1546)), vec2(_GLF_FUZZED(9342.7825), _GLF_IDENTITY((injectionSwitch)[1], max((injectionSwitch)[1], (injectionSwitch)[1]))), bvec2(false, true))), injectionSwitch, injectionSwitch)).x)))) % _GLF_IDENTITY(subgroup_size, (subgroup_size) | (_GLF_IDENTITY(subgroup_size, uint(uint(subgroup_size))))));
 uint read = atomicLoad(_GLF_IDENTITY(buf[virtual_gid], min(buf[virtual_gid], buf[_GLF_IDENTITY(virtual_gid, 0u | (virtual_gid))])), 4, 64, 2);
 do
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         _GLF_IDENTITY(GLF_merged2_0_1_13_1_1_4num_workgroupread.y = read, (GLF_merged2_0_1_13_1_1_4num_workgroupread.y = read) - 0u);
        }
       else
        {
        }
      }
     else
      {
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bvec3(false, false, true)))))), false || (false))) && true), (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / cos(0.0)) > injectionSwitch.y))))
              {
              }
             else
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                  {
                   do
                    {
                     do
                      {
                       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(false, (false) || false), _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).y, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).y) * 1.0))), true)), (bool(bvec3(_GLF_IDENTITY(false, (false) || false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))) || false))))
                        {
                        }
                       else
                        {
                         do
                          {
                           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                            {
                             if(_GLF_WRAPPED_IF_TRUE(true))
                              {
                               if(_GLF_WRAPPED_IF_FALSE(false))
                                {
                                }
                               else
                                {
                                 for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), max(int(1), int(1))))); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 >> _GLF_IDENTITY(int(5), int(5)))); _injected_loop_counter --)
                                  {
                                   for(int _injected_loop_counter = _GLF_IDENTITY(((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(4), 0 | _GLF_IDENTITY((_GLF_IDENTITY(int(4), 0 | (_GLF_IDENTITY(_GLF_IDENTITY(int(4), (int(4)) >> 0), (int(4)) | (int(4)))))), ((_GLF_IDENTITY(int(4), 0 | (_GLF_IDENTITY(int(4), (int(4)) | (int(4))))))) + 0)), int(4))), (false ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(4), 0 | _GLF_IDENTITY((_GLF_IDENTITY(int(4), 0 | (_GLF_IDENTITY(_GLF_IDENTITY(int(4), (int(4)) >> 0), (int(4)) | (int(4)))))), ((_GLF_IDENTITY(int(4), 0 | (_GLF_IDENTITY(int(4), (int(4)) | (int(4))))))) + 0)), int(4))), clamp(((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(4), 0 | _GLF_IDENTITY((_GLF_IDENTITY(int(4), 0 | (_GLF_IDENTITY(_GLF_IDENTITY(int(4), (int(4)) >> 0), (int(4)) | (int(4)))))), ((_GLF_IDENTITY(int(4), 0 | (_GLF_IDENTITY(int(4), (int(4)) | (int(4))))))) + 0)), int(4))), ((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(4), 0 | _GLF_IDENTITY((_GLF_IDENTITY(int(4), 0 | (_GLF_IDENTITY(_GLF_IDENTITY(int(4), (int(4)) >> 0), (int(4)) | (int(4)))))), ((_GLF_IDENTITY(int(4), 0 | (_GLF_IDENTITY(int(4), (int(4)) | (int(4))))))) + 0)), int(4))), ((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(4), 0 | _GLF_IDENTITY((_GLF_IDENTITY(int(4), 0 | (_GLF_IDENTITY(_GLF_IDENTITY(int(4), (int(4)) >> 0), (int(4)) | (int(4)))))), ((_GLF_IDENTITY(int(4), 0 | (_GLF_IDENTITY(int(4), (int(4)) | (int(4))))))) + 0)), int(4))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((_GLF_IDENTITY(0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(0), int(0)), (_GLF_IDENTITY(int(0), int(0))) + _GLF_IDENTITY(0, max(_GLF_IDENTITY(0, clamp(0, 0, 0)), 0))), clamp(_GLF_IDENTITY(0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(0), int(0)), (_GLF_IDENTITY(int(0), int(0))) + _GLF_IDENTITY(0, max(_GLF_IDENTITY(0, clamp(0, 0, 0)), 0))), (0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(0), int(0)), (_GLF_IDENTITY(int(0), int(0))) + _GLF_IDENTITY(0, max(_GLF_IDENTITY(0, clamp(0, 0, 0)), 0)))) >> 0), 0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(0), int(0)), (_GLF_IDENTITY(int(0), int(0))) + _GLF_IDENTITY(0, max(_GLF_IDENTITY(0, clamp(0, 0, 0)), 0))), 0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(0), int(0)), (_GLF_IDENTITY(int(0), int(0))) + _GLF_IDENTITY(0, max(_GLF_IDENTITY(0, clamp(0, 0, 0)), 0)))))) << _GLF_IDENTITY(_GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(6)) >> 0)), 0 ^ (_GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(6)) >> 0)))))); _injected_loop_counter --)
                                    {
                                     for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(1, min(1, 1))))), int(1))) >> _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), ~ _GLF_IDENTITY((~ (int(1))), ((~ (_GLF_IDENTITY(int(1), clamp(int(1), int(1), int(1)))))) ^ 0)))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                                      {
                                       do
                                        {
                                         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                                          {
                                           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                            {
                                            }
                                           else
                                            {
                                             if(_GLF_WRAPPED_IF_TRUE(true))
                                              {
                                               if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))
                                                {
                                                 do
                                                  {
                                                   if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_IDENTITY(_GLF_DEAD(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_DEAD(false))))))
                                                    {
                                                     if(_GLF_WRAPPED_IF_FALSE(false))
                                                      {
                                                      }
                                                     else
                                                      {
                                                       barrier();
                                                      }
                                                    }
                                                  }
                                                 while(_GLF_WRAPPED_LOOP(false));
                                                }
                                               else
                                                {
                                                }
                                              }
                                             else
                                              {
                                              }
                                            }
                                          }
                                         else
                                          {
                                          }
                                        }
                                       while(_GLF_WRAPPED_LOOP(false));
                                      }
                                    }
                                  }
                                }
                              }
                             else
                              {
                              }
                            }
                          }
                         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).x > injectionSwitch.y))));
                        }
                      }
                     while(_GLF_WRAPPED_LOOP(false));
                    }
                   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                  }
                }
               else
                {
                }
              }
            }
          }
        }
       else
        {
        }
      }
    }
   else
    {
    }
  }
 do
  {
   do
    {
     for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         for(int _injected_loop_counter = 1; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > (int(_GLF_ZERO(0.0, injectionSwitch.x)) << _GLF_IDENTITY(int(4), int(4)))), false || (_GLF_WRAPPED_LOOP(_injected_loop_counter > (int(_GLF_ZERO(0.0, injectionSwitch.x)) << _GLF_IDENTITY(int(4), int(4)))))); _injected_loop_counter --)
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
            {
             do
              {
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(3), int(3)), (_GLF_IDENTITY(int(3), int(3))) >> int(_GLF_ZERO(0.0, injectionSwitch.x)))) >> _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(3), (int(3)) >> 0), int(3)), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(3), (int(3)) >> 0), int(3)), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(3), (int(3)) >> 0), int(3)), int(ivec2(_GLF_IDENTITY(_GLF_IDENTITY(int(3), (int(3)) >> 0), int(3)), 1)))) * 1)) - 0)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_injected_loop_counter != ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(3), int(3)), (_GLF_IDENTITY(int(3), int(3))) >> int(_GLF_ZERO(0.0, injectionSwitch.x)))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(3), (int(3)) >> 0), int(3))), (_injected_loop_counter != ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(3), int(3)), (_GLF_IDENTITY(int(3), int(3))) >> int(_GLF_ZERO(_GLF_IDENTITY(0.0, 0.0 + (0.0)), injectionSwitch.x)))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(3), (int(3)) >> 0), int(3)))) && true)), ! (! (! (_GLF_IDENTITY(_injected_loop_counter != ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(3), int(3)), (_GLF_IDENTITY(int(3), int(3))) >> int(_GLF_ZERO(0.0, injectionSwitch.x)))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(3), (int(3)) >> 0), int(3))), _GLF_IDENTITY((_injected_loop_counter != ((_GLF_IDENTITY(1, _GLF_IDENTITY(int(_GLF_IDENTITY(ivec2(1, 1), ivec2(ivec4(ivec2(1, 1), 1, (0 ^ 0))))), ~ (~ (int(_GLF_IDENTITY(ivec2(1, 1), ivec2(_GLF_IDENTITY(ivec4(ivec2(1, 1), _GLF_IDENTITY(1, min(1, 1)), (0 ^ 0)), ivec4(1, 1, 1, 1) * (ivec4(ivec2(1, 1), _GLF_IDENTITY(1, min(1, 1)), (0 ^ 0))))))))))) << _GLF_IDENTITY(_GLF_IDENTITY(int(3), int(3)), (_GLF_IDENTITY(int(3), int(3))) >> int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * exp(vec2(0.0, 0.0))))).x)))) >> _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(3), (_GLF_IDENTITY(int(3), min(int(3), int(3)))) - 0), (_GLF_IDENTITY(int(3), ~ (~ (_GLF_IDENTITY(int(3), (int(3)) | 0))))) >> 0), int(3)))), false || (_GLF_IDENTITY((_injected_loop_counter != ((_GLF_IDENTITY(1, _GLF_IDENTITY(int(_GLF_IDENTITY(ivec2(1, 1), ivec2(ivec4(ivec2(1, 1), 1, (0 ^ 0))))), ~ (_GLF_IDENTITY(~ (int(_GLF_IDENTITY(ivec2(1, 1), ivec2(ivec4(ivec2(1, 1), 1, (0 ^ 0)))))), (~ (int(_GLF_IDENTITY(ivec2(1, 1), ivec2(ivec4(ivec2(1, 1), 1, (0 ^ 0))))))) << 0)))) << _GLF_IDENTITY(_GLF_IDENTITY(int(3), int(3)), (_GLF_IDENTITY(int(3), int(3))) >> int(_GLF_ZERO(0.0, injectionSwitch.x)))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(3), (_GLF_IDENTITY(int(3), ~ (~ (_GLF_IDENTITY(int(3), (int(3)) | 0))))) >> 0), int(3)))), ((_injected_loop_counter != ((_GLF_IDENTITY(1, _GLF_IDENTITY(int(_GLF_IDENTITY(ivec2(1, 1), ivec2(ivec4(ivec2(1, 1), 1, (0 ^ 0))))), ~ (~ (int(_GLF_IDENTITY(ivec2(1, 1), ivec2(ivec4(ivec2(1, 1), 1, (0 ^ 0))))))))) << _GLF_IDENTITY(_GLF_IDENTITY(int(3), int(3)), (_GLF_IDENTITY(int(3), int(3))) >> int(_GLF_ZERO(0.0, injectionSwitch.x)))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(3), (_GLF_IDENTITY(int(3), ~ (~ (_GLF_IDENTITY(int(3), (int(3)) | 0))))) >> 0), int(3))))) && true))) && true)))))))); _injected_loop_counter ++)
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(true, bool(bvec2(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), bool(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(true, false), bvec2(bvec4(bvec2(true, false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))), _GLF_IDENTITY(bvec2(bvec4(_GLF_IDENTITY(bvec2(true, false), bvec2(bvec4(bvec2(true, false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))), true, true)), bvec2(bvec2(bvec2(bvec4(_GLF_IDENTITY(bvec2(true, false), bvec2(bvec4(bvec2(true, false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))), true, true)))))), bvec2(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(true, false), bvec2(bvec4(bvec2(true, false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))), _GLF_IDENTITY(bvec2(bvec4(_GLF_IDENTITY(bvec2(true, false), bvec2(bvec4(bvec2(true, false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))), true, true)), bvec2(bvec2(bvec2(bvec4(_GLF_IDENTITY(bvec2(true, false), bvec2(bvec4(bvec2(true, false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))), true, true)))))), bvec2(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(true, false), bvec2(bvec4(bvec2(true, false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))), _GLF_IDENTITY(bvec2(bvec4(_GLF_IDENTITY(bvec2(true, false), bvec2(bvec4(bvec2(true, false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))), true, true)), bvec2(bvec2(bvec2(bvec4(_GLF_IDENTITY(bvec2(true, false), bvec2(bvec4(bvec2(true, false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))), true, true)))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), false, true)))))))
                    {
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                      }
                     else
                      {
                       if(_GLF_WRAPPED_IF_TRUE(true))
                        {
                         do
                          {
                           if(_GLF_WRAPPED_IF_TRUE(true))
                            {
                             do
                              {
                               if(_GLF_WRAPPED_IF_FALSE(false))
                                {
                                }
                               else
                                {
                                 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true, false)))))
                                  {
                                  }
                                 else
                                  {
                                   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (false)))))
                                    {
                                    }
                                   else
                                    {
                                     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))).y)))))))
                                      {
                                      }
                                     else
                                      {
                                       do
                                        {
                                         if((subgroup_local_id % 2) == 0)
                                          {
                                           subgroupAll(false);
                                           for(int _injected_loop_counter = ((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), (int(1)) + 0))) >> _GLF_IDENTITY(int(1), int(1))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                                            {
                                             do
                                              {
                                               atomicStore(buf[next_virtual_gid], uint(_GLF_IDENTITY(1, 0 ^ (1))), 4, 64, _GLF_IDENTITY(4, ~ (~ (_GLF_IDENTITY(4, clamp(4, 4, 4))))));
                                              }
                                             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y))));
                                            }
                                          }
                                         else
                                          {
                                           for(int _injected_loop_counter = 0; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), bool(bvec4(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), true, true, false))); _injected_loop_counter ++)
                                            {
                                             if(_GLF_WRAPPED_IF_FALSE(false))
                                              {
                                              }
                                             else
                                              {
                                               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY((1 | 1), min(_GLF_IDENTITY((1 | 1), ((1 | 1)) ^ 0), (1 | 1)))); _injected_loop_counter ++)
                                                {
                                                 do
                                                  {
                                                   do
                                                    {
                                                     for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(4), int(4))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                                                      {
                                                       if(_GLF_WRAPPED_IF_FALSE(false))
                                                        {
                                                        }
                                                       else
                                                        {
                                                         do
                                                          {
                                                           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                                                            {
                                                             if(_GLF_WRAPPED_IF_FALSE(false))
                                                              {
                                                              }
                                                             else
                                                              {
                                                               if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, bool(bool(false))), (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(injectionSwitch.x > injectionSwitch.y, true, false, false)))))))), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))) || false)))
                                                                {
                                                                }
                                                               else
                                                                {
                                                                 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(bvec2((injectionSwitch.x > injectionSwitch.y), true)), (bool(bvec2((injectionSwitch.x > injectionSwitch.y), true))) || false)), true && (_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(bvec2((injectionSwitch.x > injectionSwitch.y), true)), (bool(bvec2((injectionSwitch.x > injectionSwitch.y), true))) || false)), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(bvec2((injectionSwitch.x > injectionSwitch.y), true)), (bool(bvec2((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))))), true))) || false))) || false))))) || false))))))
                                                                  {
                                                                  }
                                                                 else
                                                                  {
                                                                   subgroupAll(false);
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).y))))));
                                                        }
                                                      }
                                                    }
                                                   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                                                  }
                                                 while(_GLF_WRAPPED_LOOP(false));
                                                }
                                              }
                                            }
                                           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                            {
                                            }
                                           else
                                            {
                                             if(_GLF_WRAPPED_IF_FALSE(false))
                                              {
                                              }
                                             else
                                              {
                                               do
                                                {
                                                 do
                                                  {
                                                   for(int _injected_loop_counter = _GLF_IDENTITY(0, (0) - 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), (int(7)) | 0))) >> _GLF_IDENTITY(int(7), int(7)))); _injected_loop_counter ++)
                                                    {
                                                     do
                                                      {
                                                       if(_GLF_WRAPPED_IF_TRUE(true))
                                                        {
                                                         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(round(injectionSwitch)))).x > injectionSwitch.y)))) && true)))))
                                                          {
                                                          }
                                                         else
                                                          {
                                                           do
                                                            {
                                                             for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(2), int(2))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 & 1)); _injected_loop_counter ++)
                                                              {
                                                               if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false || (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))) && (_GLF_DEAD(false)), bool(bvec4(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false || (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))) && (_GLF_DEAD(false)), false, true, true)))), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_DEAD(false)))))))
                                                                {
                                                                 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                                                                  {
                                                                   if(_GLF_WRAPPED_IF_FALSE(false))
                                                                    {
                                                                    }
                                                                   else
                                                                    {
                                                                     for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(8), int(8))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                                                                      {
                                                                       barrier();
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                           while(_GLF_WRAPPED_LOOP(false));
                                                          }
                                                        }
                                                       else
                                                        {
                                                        }
                                                      }
                                                     while(_GLF_WRAPPED_LOOP(false));
                                                    }
                                                  }
                                                 while(_GLF_WRAPPED_LOOP(false));
                                                }
                                               while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), ! (! (_GLF_IDENTITY((false), false || (_GLF_IDENTITY((false), ! (! ((false)))))))))))));
                                              }
                                            }
                                           do
                                            {
                                             if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (false)))))
                                              {
                                              }
                                             else
                                              {
                                               do
                                                {
                                                 do
                                                  {
                                                   atomicStore(buf[next_virtual_gid], uint(1), 4, 64, 4);
                                                  }
                                                 while(_GLF_WRAPPED_LOOP(false));
                                                }
                                               while(_GLF_WRAPPED_LOOP(false));
                                              }
                                            }
                                           while(_GLF_WRAPPED_LOOP(false));
                                          }
                                        }
                                       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).x > injectionSwitch.y)) || false))));
                                      }
                                    }
                                  }
                                }
                              }
                             while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bvec4(false, true, true, true)))), _GLF_IDENTITY(bool(bvec3(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bvec4(false, true, true, true)))), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), (bool(bvec3(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bvec4(false, true, true, true)))), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) && true)));
                            }
                           else
                            {
                            }
                          }
                         while(_GLF_WRAPPED_LOOP(false));
                        }
                       else
                        {
                        }
                      }
                    }
                   else
                    {
                    }
                  }
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
          }
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (true)))))
    {
     subgroupBarrier();
    }
   else
    {
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, true)), ! (! (bool(bvec2(false, true))))))), (_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bvec2(false, true))))) && _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(mat4x3(injectionSwitch.x, 0.0, 0.0, 1.0, length(vec2(_GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0)), 1.0, determinant(mat3(_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(77.72)), float(0.0), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), 1.0, 0.0, length(vec4(0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, mix(float(_GLF_IDENTITY(0.0, _GLF_IDENTITY(float(_GLF_IDENTITY(mat2x3(0.0, 0.0, 0.0, 0.0, 1.0, 1.0), mat2x3(mat4x3(mat2x3(0.0, 0.0, 0.0, 0.0, 1.0, 1.0))))), float(mat3x4(float(_GLF_IDENTITY(mat2x3(0.0, 0.0, 0.0, 0.0, 1.0, 1.0), mat2x3(mat4x3(mat2x3(0.0, 0.0, 0.0, 0.0, 1.0, 1.0))))), 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0))))), float(_GLF_FUZZED(1341.0249)), bool(false))))), 0.0, 1.0, 0.0, 0.0, log(1.0))), sin(0.0), _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), _GLF_IDENTITY(dot(vec4(round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), determinant(mat4(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), 0.0, 1.0), vec4(0.0, 1.0, 1.0, abs(0.0))), dot(vec4(round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), determinant(mat4(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(1.0, (1.0) * sqrt(1.0)), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), 0.0, 1.0), vec4(0.0, 1.0, 1.0, abs(0.0)))), _GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), (_GLF_ZERO(0.0, injectionSwitch.x)) + determinant(mat4(0.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0, 0.0, abs(0.0), 1.0, 0.0, abs(0.0), 0.0, sqrt(0.0), log(1.0), 1.0, 0.0))), _GLF_IDENTITY(cos(0.0), (false ? _GLF_FUZZED(7.1) : cos(0.0))))), clamp(float(mat4x3(injectionSwitch.x, 0.0, 0.0, 1.0, length(vec2(0.0, 0.0)), 1.0, determinant(mat3(0.0, 1.0, 0.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 0.0, 1.0, 0.0, 0.0, log(1.0))), sin(0.0), 1.0, _GLF_IDENTITY(dot(vec4(round(length(normalize(vec4(1.0, _GLF_IDENTITY(1.0, float(float(1.0))), 1.0, 1.0)))), determinant(mat4(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), 0.0, 1.0), vec4(0.0, 1.0, 1.0, abs(0.0))), dot(vec4(round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), determinant(mat4(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(1.0, 0.0 + (1.0)), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), 0.0, 1.0), vec4(0.0, 1.0, 1.0, abs(0.0)))), _GLF_ZERO(_GLF_IDENTITY(0.0, max(0.0, 0.0)), injectionSwitch.x), cos(0.0))), _GLF_IDENTITY(float(mat4x3(injectionSwitch.x, 0.0, 0.0, 1.0, length(vec2(0.0, _GLF_IDENTITY(0.0, min(0.0, 0.0)))), 1.0, determinant(mat3(0.0, 1.0, 0.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 0.0, 1.0, 0.0, 0.0, log(1.0))), sin(0.0), 1.0, _GLF_IDENTITY(dot(vec4(round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), determinant(mat4(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, min(0.0, 0.0)), 0.0, 0.0, 0.0)), _GLF_IDENTITY(0.0, float(_GLF_IDENTITY(vec4(0.0, determinant(mat2(0.0, 0.0, 0.0, 0.0)), 1.0, 0.0), (vec4(0.0, determinant(mat2(0.0, 0.0, 0.0, 0.0)), 1.0, 0.0)) * mat4(1.0)))), 1.0), vec4(0.0, 1.0, 1.0, abs(0.0))), dot(vec4(round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), determinant(mat4(_GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(injectionSwitch.x) : 0.0)), 0.0, 0.0, 1.0, _GLF_IDENTITY(0.0, float(vec3(_GLF_IDENTITY(0.0, max(_GLF_IDENTITY(0.0, (0.0) + 0.0), 0.0)), 0.0, 0.0))), 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(-9.1))), 0.0)), 0.0, 1.0), vec4(0.0, 1.0, 1.0, abs(0.0)))), _GLF_ZERO(0.0, injectionSwitch.x), cos(0.0))), clamp(float(mat4x3(injectionSwitch.x, 0.0, 0.0, 1.0, length(vec2(0.0, 0.0)), 1.0, determinant(mat3(0.0, 1.0, 0.0, length(vec4(_GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, 1.0 * (0.0)), _GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(7338.2013)), float(0.0), bool(true)))) + 0.0))), 0.0, 0.0, 0.0)), 0.0, 1.0, 0.0, 0.0, log(1.0))), sin(0.0), 1.0, _GLF_IDENTITY(dot(vec4(_GLF_IDENTITY(round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), clamp(round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), _GLF_IDENTITY(round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), (round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0))))) - 0.0), round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))))), determinant(mat4(0.0, 0.0, 0.0, 1.0, 0.0, _GLF_IDENTITY(0.0, _GLF_IDENTITY(max(0.0, 0.0), (max(0.0, 0.0)) - abs(_GLF_ZERO(0.0, injectionSwitch.x)))), 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, (0.0) + 0.0), 0.0, 0.0)), 0.0, 1.0), vec4(0.0, 1.0, _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(2199.7871))), abs(0.0))), dot(vec4(round(length(normalize(vec4(1.0, _GLF_IDENTITY(1.0, (true ? _GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(398.731) : 1.0)), 1.0, _GLF_IDENTITY(1.0, max(1.0, 1.0)))) : _GLF_FUZZED(atan(39.79, 9.0)))), 1.0, 1.0)))), determinant(mat4(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), 0.0, 1.0), vec4(0.0, 1.0, 1.0, abs(0.0)))), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(_GLF_IDENTITY(cos(0.0), (false ? _GLF_IDENTITY(_GLF_FUZZED(vec4(-8.8, -4.8, 7.4, 479.141).a), min(_GLF_FUZZED(vec4(-8.8, -4.8, 7.4, 479.141).a), _GLF_IDENTITY(_GLF_FUZZED(vec4(-8.8, -4.8, 7.4, 479.141).a), min(_GLF_FUZZED(vec4(-8.8, -4.8, 7.4, 479.141).a), _GLF_FUZZED(vec4(-8.8, -4.8, 7.4, 479.141).a))))) : _GLF_IDENTITY(cos(0.0), (cos(0.0)) + 0.0))), _GLF_IDENTITY((_GLF_IDENTITY(cos(0.0), mix(float(_GLF_FUZZED(0.0)), float(cos(0.0)), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), min((_GLF_IDENTITY(cos(0.0), mix(float(_GLF_FUZZED(0.0)), float(cos(0.0)), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), _GLF_IDENTITY((_GLF_IDENTITY(cos(0.0), mix(float(_GLF_FUZZED(0.0)), float(cos(0.0)), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), (false ? _GLF_FUZZED((-7.3 + -2.5)) : (_GLF_IDENTITY(cos(0.0), mix(float(_GLF_FUZZED(0.0)), float(cos(0.0)), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))) + 0.0))), float(mat4x3(injectionSwitch.x, 0.0, 0.0, 1.0, length(vec2(0.0, 0.0)), 1.0, determinant(mat3(0.0, 1.0, 0.0, length(vec4(0.0, _GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(899.952)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), 0.0, 0.0)), 0.0, 1.0, 0.0, 0.0, log(1.0))), sin(0.0), 1.0, _GLF_IDENTITY(dot(vec4(round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), determinant(mat4(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), 0.0, 1.0), vec4(0.0, 1.0, 1.0, abs(0.0))), dot(vec4(round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), determinant(mat4(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), 0.0, 1.0), vec4(0.0, 1.0, 1.0, abs(0.0)))), _GLF_ZERO(0.0, injectionSwitch.x), cos(0.0))), float(mat4x3(injectionSwitch.x, 0.0, _GLF_IDENTITY(0.0, max(_GLF_IDENTITY(0.0, (0.0) - 0.0), 0.0)), 1.0, length(vec2(0.0, 0.0)), 1.0, determinant(mat3(0.0, 1.0, 0.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 0.0, 1.0, 0.0, 0.0, log(1.0))), sin(0.0), 1.0, _GLF_IDENTITY(dot(vec4(round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), determinant(mat4(0.0, 0.0, _GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-8428.5934)), bool(false))), _GLF_IDENTITY(1.0, (1.0) / exp(0.0)), 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), 0.0, 1.0), vec4(0.0, 1.0, 1.0, abs(0.0))), dot(vec4(round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), determinant(mat4(0.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(0.0, (0.0) - _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(1.0, 0.0)), dot(vec2(0.0, 1.0), vec2(1.0, 0.0)))), 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), 0.0, 1.0), vec4(0.0, 1.0, 1.0, abs(0.0)))), _GLF_ZERO(0.0, injectionSwitch.x), cos(0.0))))), float(mat4x3(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), 0.0, 0.0, 1.0, length(vec2(0.0, 0.0)), 1.0, determinant(mat3(0.0, 1.0, 0.0, length(vec4(_GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0, 0.0, 0.0)), 0.0, 1.0, 0.0, 0.0, log(1.0))), sin(0.0), 1.0, _GLF_IDENTITY(dot(vec4(round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), determinant(mat4(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), 0.0, 1.0), vec4(0.0, 1.0, 1.0, abs(0.0))), dot(vec4(round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), determinant(mat4(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(2.0) : _GLF_IDENTITY(0.0, float(float(0.0))))), 0.0, 0.0, _GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(2.7)), bool(false))))), 0.0, 1.0), vec4(0.0, 1.0, 1.0, abs(0.0)))), _GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(mix(_GLF_IDENTITY(float(_GLF_ZERO(0.0, injectionSwitch.x)), (true ? float(_GLF_ZERO(0.0, injectionSwitch.x)) : _GLF_FUZZED(-53.81))), float(_GLF_FUZZED(-0.6)), bool(_GLF_IDENTITY(false, true && (false)))), mix(float(mix(_GLF_IDENTITY(float(_GLF_ZERO(0.0, injectionSwitch.x)), (true ? float(_GLF_ZERO(0.0, injectionSwitch.x)) : _GLF_FUZZED(-53.81))), float(_GLF_FUZZED(-0.6)), bool(_GLF_IDENTITY(false, true && (false))))), float(_GLF_FUZZED(-7.3)), bool(false)))), cos(0.0)))))), injectionSwitch.x)) < injectionSwitch.y))), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bvec2(false, true)))), (_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, false || (false)), true), bvec2(bvec4(bvec2(_GLF_IDENTITY(false, false || (false)), true), _GLF_IDENTITY(false, (false) && true), true))))))) && _GLF_TRUE(true, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(222.525)), bool(false))), max(_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(mat4x3(injectionSwitch.x, 0.0, 0.0, 1.0, length(vec2(_GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0)), 1.0, determinant(mat3(0.0, 1.0, 0.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 0.0, 1.0, 0.0, 0.0, log(1.0))), sin(0.0), _GLF_IDENTITY(1.0, mix(float(_GLF_IDENTITY(1.0, 0.0 + (_GLF_IDENTITY(1.0, max(1.0, 1.0))))), float(_GLF_FUZZED(901.877)), bool(false))), _GLF_IDENTITY(dot(vec4(round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), determinant(mat4(0.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(0.0, exp(_GLF_ZERO(0.0, injectionSwitch.x)) * (0.0)), 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), _GLF_IDENTITY(0.0, (0.0) / exp(0.0)), 1.0), vec4(0.0, 1.0, 1.0, abs(0.0))), dot(vec4(round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), determinant(mat4(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(1.0, (1.0) * sqrt(_GLF_IDENTITY(1.0, float(mat4x3(_GLF_IDENTITY(1.0, (1.0) * cos(0.0)), 0.0, 1.0, 0.0, 1.0, sin(0.0), round(length(normalize(vec3(1.0, _GLF_IDENTITY(1.0, float(float(1.0))), 1.0)))), _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(abs(0.0), 1.0)), dot(vec2(0.0, 1.0), vec2(abs(0.0), 1.0))), 1.0, determinant(mat2(1.0, 0.0, 1.0, 1.0)), determinant(mat4(0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(8.0) : 1.0))))))), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), 0.0, 1.0), vec4(0.0, 1.0, 1.0, abs(0.0)))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), (_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), (_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), (_GLF_ZERO(0.0, injectionSwitch.x)) * 1.0)) * 1.0)) * 1.0), (_GLF_ZERO(0.0, injectionSwitch.x)) + determinant(mat4(0.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0, 0.0, abs(0.0), 1.0, 0.0, abs(0.0), 0.0, sqrt(_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-92.79)), float(0.0), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), log(1.0), 1.0, 0.0))), cos(0.0))), clamp(float(mat4x3(injectionSwitch.x, 0.0, 0.0, 1.0, length(vec2(0.0, 0.0)), 1.0, determinant(mat3(_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-0.1)), float(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0))), bool(true))), 1.0, 0.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 0.0, 1.0, 0.0, 0.0, log(1.0))), sin(0.0), 1.0, _GLF_IDENTITY(dot(vec4(round(length(normalize(vec4(1.0, _GLF_IDENTITY(1.0, float(float(1.0))), 1.0, 1.0)))), determinant(mat4(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(_GLF_IDENTITY(-3644.6959, (-3644.6959) / sqrt(determinant(mat3(1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0))))) : _GLF_IDENTITY(1.0, max(1.0, 1.0)))), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), 0.0, 1.0), vec4(0.0, 1.0, 1.0, abs(0.0))), dot(vec4(round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), determinant(mat4(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(1.0, 0.0 + (1.0)), 0.0, _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(-47.18) : 0.0)), 0.0, 0.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-1.5)), float(0.0), bool(true))))), 0.0, 1.0), vec4(0.0, 1.0, 1.0, abs(0.0)))), _GLF_ZERO(_GLF_IDENTITY(0.0, max(_GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0))) - 0.0), _GLF_IDENTITY(0.0, (0.0) * 1.0))), injectionSwitch.x), cos(0.0))), _GLF_IDENTITY(float(mat4x3(injectionSwitch.x, 0.0, 0.0, 1.0, length(vec2(0.0, 0.0)), 1.0, determinant(mat3(0.0, 1.0, 0.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 0.0, 1.0, _GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0)), 0.0, log(1.0))), sin(0.0), 1.0, _GLF_IDENTITY(dot(_GLF_IDENTITY(vec4(round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), determinant(mat4(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), 0.0, 1.0), clamp(vec4(round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), determinant(mat4(_GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(1.5))), 0.0)), 0.0, 0.0, 1.0, _GLF_IDENTITY(0.0, max(0.0, _GLF_IDENTITY(0.0, min(0.0, _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)))))), 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), 0.0, 1.0), vec4(round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), determinant(mat4(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), 0.0, 1.0), vec4(round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), determinant(mat4(0.0, 0.0, 0.0, 1.0, 0.0, _GLF_IDENTITY(0.0, max(0.0, _GLF_IDENTITY(0.0, max(0.0, 0.0)))), 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, (0.0) * 1.0), 0.0, 0.0)), 0.0, 1.0))), vec4(0.0, 1.0, 1.0, abs(0.0))), dot(vec4(round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), determinant(mat4(_GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(injectionSwitch.x) : _GLF_IDENTITY(0.0, (0.0) * 1.0))), 0.0, 0.0, 1.0, _GLF_IDENTITY(0.0, float(vec3(0.0, 0.0, _GLF_IDENTITY(0.0, max(0.0, 0.0))))), 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), 0.0, 1.0), vec4(0.0, 1.0, 1.0, abs(0.0)))), _GLF_ZERO(0.0, injectionSwitch.x), cos(0.0))), clamp(float(mat4x3(injectionSwitch.x, 0.0, 0.0, 1.0, length(vec2(0.0, 0.0)), 1.0, determinant(mat3(0.0, 1.0, 0.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 0.0, 1.0, 0.0, _GLF_IDENTITY(0.0, (0.0) / 1.0), log(1.0))), sin(0.0), 1.0, _GLF_IDENTITY(dot(vec4(round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), determinant(mat4(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), 0.0, 1.0), vec4(0.0, 1.0, _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(2199.7871))), abs(0.0))), dot(vec4(round(_GLF_IDENTITY(length(normalize(vec4(1.0, _GLF_IDENTITY(1.0, (true ? _GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(false ? _GLF_FUZZED(398.731) : 1.0, mix(float(false ? _GLF_FUZZED(398.731) : 1.0), float(_GLF_FUZZED(-49.13)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), 1.0, _GLF_IDENTITY(1.0, max(1.0, 1.0)))) : _GLF_FUZZED(atan(39.79, 9.0)))), 1.0, 1.0))), _GLF_IDENTITY((length(normalize(vec4(1.0, _GLF_IDENTITY(1.0, (true ? _GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(398.731) : 1.0)), 1.0, _GLF_IDENTITY(1.0, max(1.0, 1.0)))) : _GLF_FUZZED(atan(39.79, 9.0)))), 1.0, 1.0)))), clamp(_GLF_IDENTITY((length(normalize(vec4(1.0, _GLF_IDENTITY(1.0, (true ? _GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(398.731) : 1.0)), 1.0, _GLF_IDENTITY(1.0, max(1.0, 1.0)))) : _GLF_FUZZED(atan(39.79, 9.0)))), 1.0, 1.0)))), min((length(normalize(vec4(1.0, _GLF_IDENTITY(1.0, (true ? _GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(398.731) : 1.0)), 1.0, _GLF_IDENTITY(1.0, max(1.0, 1.0)))) : _GLF_FUZZED(atan(39.79, 9.0)))), 1.0, 1.0)))), (length(normalize(vec4(1.0, _GLF_IDENTITY(1.0, (true ? _GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(398.731) : 1.0)), 1.0, _GLF_IDENTITY(1.0, max(1.0, 1.0)))) : _GLF_FUZZED(atan(39.79, 9.0)))), 1.0, 1.0)))))), (length(normalize(vec4(1.0, _GLF_IDENTITY(1.0, (true ? _GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(398.731) : 1.0)), 1.0, _GLF_IDENTITY(1.0, max(1.0, 1.0)))) : _GLF_FUZZED(atan(39.79, 9.0)))), 1.0, 1.0)))), (length(normalize(vec4(1.0, _GLF_IDENTITY(1.0, (true ? _GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(398.731) : 1.0)), 1.0, _GLF_IDENTITY(1.0, max(1.0, 1.0)))) : _GLF_FUZZED(atan(39.79, 9.0)))), 1.0, 1.0)))))) / 1.0)), determinant(mat4(0.0, 0.0, 0.0, 1.0, 0.0, _GLF_IDENTITY(0.0, 0.0 + (0.0)), 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), _GLF_IDENTITY(0.0, _GLF_IDENTITY(float(vec3(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(vec3(-9.5, 67.83, -3414.6749).x)), bool(false))), determinant(mat2(log(1.0), 0.0, length(vec3(0.0, 0.0, 0.0)), 0.0)), 1.0)), max(float(vec3(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(vec3(-9.5, 67.83, -3414.6749).x)), bool(false))), determinant(mat2(log(1.0), 0.0, length(vec3(0.0, 0.0, _GLF_IDENTITY(0.0, (0.0) / 1.0))), 0.0)), 1.0)), float(vec3(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(vec3(-9.5, 67.83, _GLF_IDENTITY(-3414.6749, clamp(-3414.6749, -3414.6749, -3414.6749))).x)), bool(false))), _GLF_IDENTITY(determinant(mat2(log(1.0), 0.0, length(vec3(0.0, 0.0, 0.0)), 0.0)), mix(float(determinant(mat2(log(1.0), 0.0, length(vec3(0.0, 0.0, 0.0)), 0.0))), float(_GLF_FUZZED(float(true))), bool(false))), 1.0))))), 1.0), vec4(0.0, 1.0, _GLF_IDENTITY(1.0, (1.0) - sin(0.0)), abs(0.0)))), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(cos(0.0), (_GLF_IDENTITY(cos(0.0), mix(float(_GLF_FUZZED(0.0)), float(cos(0.0)), _GLF_IDENTITY(bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), (bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))) || _GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), ! (! (! ((injectionSwitch.x > injectionSwitch.y)))))))))))) + 0.0))), float(mat4x3(injectionSwitch.x, 0.0, 0.0, 1.0, length(vec2(0.0, 0.0)), 1.0, determinant(mat3(0.0, 1.0, 0.0, length(vec4(0.0, _GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(899.952)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), 0.0, 0.0)), 0.0, 1.0, 0.0, 0.0, log(1.0))), _GLF_IDENTITY(sin(0.0), min(sin(0.0), sin(0.0))), 1.0, _GLF_IDENTITY(dot(vec4(round(length(normalize(vec4(1.0, _GLF_IDENTITY(1.0, float(mat4x3(1.0, exp(0.0), 0.0, _GLF_IDENTITY(dot(vec4(1.0, 0.0, 0.0, length(vec3(0.0, 0.0, 0.0))), vec4(1.0, 0.0, 0.0, 0.0)), _GLF_IDENTITY(dot(vec4(1.0, 0.0, 0.0, length(vec3(0.0, 0.0, 0.0))), vec4(1.0, 0.0, 0.0, 0.0)), _GLF_IDENTITY((dot(vec4(1.0, 0.0, 0.0, length(vec3(0.0, 0.0, 0.0))), vec4(1.0, 0.0, 0.0, 0.0))), (true ? (dot(vec4(1.0, 0.0, 0.0, length(vec3(0.0, 0.0, 0.0))), vec4(1.0, 0.0, 0.0, 0.0))) : _GLF_FUZZED(-4.7))) / 1.0)), determinant(mat3(0.0, 0.0, 0.0, 1.0, determinant(mat4(0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0)), _GLF_IDENTITY(0.0, min(0.0, 0.0)), 1.0, 0.0, abs(0.0))), 0.0, 1.0, exp(0.0), 0.0, 0.0, 1.0, 1.0))), 1.0, 1.0)))), determinant(mat4(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), 0.0, 1.0), vec4(0.0, 1.0, 1.0, abs(0.0))), dot(_GLF_IDENTITY(vec4(round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), determinant(mat4(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), 0.0, 1.0), max(vec4(round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), determinant(mat4(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), 0.0, 1.0), _GLF_IDENTITY(vec4(round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), determinant(mat4(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), 0.0, 1.0), (false ? _GLF_FUZZED(vec4(-1.2, -409.345, -758.335, -5.9)) : vec4(round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), determinant(mat4(0.0, 0.0, 0.0, 1.0, 0.0, _GLF_IDENTITY(0.0, max(0.0, _GLF_IDENTITY(0.0, min(0.0, 0.0)))), 1.0, 1.0, _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(-6.2) : _GLF_IDENTITY(0.0, (0.0) + 0.0))), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), 0.0, 1.0))))), vec4(0.0, 1.0, 1.0, abs(0.0)))), _GLF_ZERO(0.0, injectionSwitch.x), cos(0.0))), float(mat4x3(injectionSwitch.x, 0.0, _GLF_IDENTITY(0.0, max(_GLF_IDENTITY(_GLF_IDENTITY(0.0, (0.0) - 0.0), (_GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, min(0.0, 0.0))) - 0.0)) / 1.0), 0.0)), 1.0, length(vec2(0.0, 0.0)), 1.0, determinant(mat3(0.0, 1.0, 0.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 0.0, 1.0, 0.0, 0.0, log(1.0))), sin(0.0), 1.0, _GLF_IDENTITY(dot(vec4(round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), determinant(mat4(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), 0.0, 1.0), vec4(_GLF_IDENTITY(0.0, float(_GLF_IDENTITY(vec2(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), _GLF_IDENTITY(dot(vec3(exp(0.0), 0.0, _GLF_ZERO(0.0, injectionSwitch.x)), vec3(1.0, 0.0, 0.0)), dot(vec3(exp(0.0), 0.0, _GLF_ZERO(0.0, injectionSwitch.x)), vec3(1.0, 0.0, 0.0)))), (true ? vec2(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), _GLF_IDENTITY(dot(vec3(exp(0.0), 0.0, _GLF_ZERO(0.0, injectionSwitch.x)), vec3(1.0, 0.0, 0.0)), dot(vec3(exp(0.0), 0.0, _GLF_ZERO(0.0, injectionSwitch.x)), vec3(1.0, 0.0, 0.0)))) : _GLF_FUZZED(vec2(9.5, 3.9)))))), 1.0, 1.0, abs(0.0))), dot(vec4(round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), determinant(mat4(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), 0.0, 1.0), vec4(0.0, _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), 1.0, _GLF_IDENTITY(abs(0.0), max(abs(0.0), abs(0.0)))))), _GLF_ZERO(0.0, injectionSwitch.x), cos(0.0))))), float(mat4x3(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), 0.0, 0.0, 1.0, length(vec2(0.0, _GLF_IDENTITY(0.0, (0.0) * 1.0))), _GLF_IDENTITY(1.0, _GLF_IDENTITY(float(vec2(1.0, cos(0.0))), clamp(float(vec2(1.0, cos(0.0))), float(vec2(1.0, cos(0.0))), float(vec2(1.0, cos(0.0)))))), determinant(mat3(0.0, 1.0, 0.0, length(vec4(_GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0, 0.0, 0.0)), 0.0, 1.0, 0.0, 0.0, log(1.0))), sin(0.0), 1.0, _GLF_IDENTITY(dot(vec4(round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), determinant(mat4(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), 0.0, 1.0), vec4(0.0, 1.0, 1.0, abs(0.0))), dot(vec4(round(length(normalize(_GLF_IDENTITY(vec4(1.0, 1.0, 1.0, 1.0), mix(vec4(_GLF_FUZZED(-6769.6487), (vec4(1.0, 1.0, 1.0, 1.0))[1], (vec4(1.0, 1.0, 1.0, 1.0))[2], (vec4(1.0, 1.0, 1.0, 1.0))[3]), vec4((vec4(1.0, 1.0, 1.0, 1.0))[0], _GLF_FUZZED(-4775.1935), _GLF_FUZZED(-78.19), _GLF_FUZZED((-9.9 - 4.1))), bvec4(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), determinant(mat4(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), 0.0, 1.0), vec4(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(9.4)), bool(false))), 1.0, 1.0, abs(0.0)))), _GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), mix(float(_GLF_ZERO(0.0, injectionSwitch.x)), float(_GLF_FUZZED(-0.6)), bool(false))), cos(0.0)))))), injectionSwitch.x)) < injectionSwitch.y)))))))
        {
        }
       else
        {
         for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), 0 | (int(1))))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           do
            {
             if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bool(bvec4(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))) && true), true, _GLF_IDENTITY(true, (true) && true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))
              {
               do
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), ! (! (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, false || (true)), (injectionSwitch.x < injectionSwitch.y)))))))
                      {
                       do
                        {
                         for(int _injected_loop_counter = _GLF_IDENTITY(0, int(int(0))); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), 0 ^ _GLF_IDENTITY((int(_GLF_IDENTITY(1, ~ (~ _GLF_IDENTITY((1), max((1), (1))))))), clamp(_GLF_IDENTITY((int(_GLF_IDENTITY(1, ~ (~ _GLF_IDENTITY((1), max((1), (1))))))), clamp((int(_GLF_IDENTITY(1, ~ (~ _GLF_IDENTITY((1), max((1), (1))))))), (int(_GLF_IDENTITY(1, _GLF_IDENTITY(~ (~ _GLF_IDENTITY((1), max((1), (1)))), (_GLF_IDENTITY(~ (~ _GLF_IDENTITY((1), max((1), (1)))), (~ (~ _GLF_IDENTITY((1), max((1), (1))))) + 0)) | (~ (~ _GLF_IDENTITY((1), max((1), (1))))))))), _GLF_IDENTITY((int(_GLF_IDENTITY(1, ~ (~ _GLF_IDENTITY((1), max((1), (1))))))), max((int(_GLF_IDENTITY(1, ~ (~ _GLF_IDENTITY((1), max((1), (1))))))), (int(_GLF_IDENTITY(1, ~ (~ _GLF_IDENTITY((1), max((1), (1))))))))))), _GLF_IDENTITY((int(_GLF_IDENTITY(1, ~ (~ _GLF_IDENTITY((1), max((1), (1))))))), ((int(_GLF_IDENTITY(1, ~ (~ _GLF_IDENTITY((1), max((1), (1)))))))) << 0), (int(_GLF_IDENTITY(1, ~ (~ _GLF_IDENTITY((1), max((1), (1))))))))))), (_GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), 0 ^ (int(_GLF_IDENTITY(1, ~ (_GLF_IDENTITY(~ (1), (~ (1)) ^ 0)))))))) << (0 >> _GLF_IDENTITY(int(6), int(6)))))); _injected_loop_counter ++)
                          {
                           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                            {
                             do
                              {
                               if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), (_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY((false), ! (! ((false)))) || false), ! (! (_GLF_IDENTITY(false, (false) || false))))) || false))), ! (! (! (_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), (_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY((false), ! (! ((false)))) || false), ! (! (_GLF_IDENTITY(false, (false) || false))))) || false)))))))))
                                {
                                }
                               else
                                {
                                 for(int _injected_loop_counter = ((0 ^ 0) | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                                  {
                                   do
                                    {
                                     for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(6), int(6))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                                      {
                                       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])))).x < injectionSwitch.y, ! (! (injectionSwitch.x < injectionSwitch.y)))))))
                                        {
                                         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, 0 | (_injected_loop_counter)) != (0 << _GLF_IDENTITY(int(6), int(6)))); _injected_loop_counter --)
                                          {
                                           if(_GLF_WRAPPED_IF_TRUE(true))
                                            {
                                             for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_GLF_IDENTITY(_injected_loop_counter, clamp(_injected_loop_counter, _injected_loop_counter, _injected_loop_counter))) | (_injected_loop_counter)) < 1); _injected_loop_counter ++)
                                              {
                                               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                                {
                                                }
                                               else
                                                {
                                                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                                                  {
                                                   do
                                                    {
                                                     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                                                      {
                                                       if(_GLF_WRAPPED_IF_TRUE(true))
                                                        {
                                                         for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(1), int(1))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                                                          {
                                                           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
                                                            {
                                                             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(bvec2((injectionSwitch.x > injectionSwitch.y), false)), _GLF_IDENTITY(bool(bvec2(bool(bvec2((injectionSwitch.x > injectionSwitch.y), false)), true)), true && (bool(bvec2(bool(bvec2((injectionSwitch.x > injectionSwitch.y), false)), true)))))))))
                                                              {
                                                              }
                                                             else
                                                              {
                                                               if(_GLF_WRAPPED_IF_TRUE(true))
                                                                {
                                                                 if(_GLF_WRAPPED_IF_FALSE(false))
                                                                  {
                                                                  }
                                                                 else
                                                                  {
                                                                   barrier();
                                                                  }
                                                                }
                                                               else
                                                                {
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                       else
                                                        {
                                                        }
                                                      }
                                                    }
                                                   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat2x4(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(0.0, 1.0, 1.0)), dot(vec3(1.0, 0.0, 0.0), vec3(0.0, 1.0, 1.0))), clamp(_GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(0.0, 1.0, 1.0)), dot(vec3(1.0, 0.0, 0.0), vec3(0.0, 1.0, 1.0))), _GLF_IDENTITY(_GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(0.0, 1.0, 1.0)), dot(vec3(1.0, 0.0, 0.0), vec3(0.0, 1.0, 1.0))), float(_GLF_IDENTITY(vec2(_GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(0.0, 1.0, 1.0)), dot(vec3(1.0, 0.0, 0.0), vec3(0.0, 1.0, 1.0))), 0.0), vec2(vec3(vec2(_GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(0.0, 1.0, 1.0)), dot(vec3(1.0, 0.0, 0.0), vec3(0.0, 1.0, 1.0))), 0.0), 1.0))))), _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(0.0, 1.0, 1.0)), dot(vec3(1.0, 0.0, 0.0), vec3(0.0, 1.0, 1.0))))), 1.0, 1.0, 0.0, 1.0, 0.0))).x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), mix(float(injectionSwitch.y), float(_GLF_FUZZED((_GLF_IDENTITY(-815.466 - -65.75, mix(float(-815.466 - -65.75), float(_GLF_FUZZED(7612.7411)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), bool(_GLF_IDENTITY(false, false || (false))))), ! (! (_GLF_IDENTITY(injectionSwitch, vec2(mat2x4(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(0.0, 1.0, 1.0)), dot(vec3(1.0, 0.0, 0.0), vec3(0.0, 1.0, _GLF_IDENTITY(1.0, 1.0 * (1.0))))), clamp(_GLF_IDENTITY(dot(vec3(_GLF_IDENTITY(1.0, min(1.0, 1.0)), 0.0, 0.0), _GLF_IDENTITY(vec3(0.0, 1.0, 1.0), (false ? _GLF_FUZZED(clamp((vec3(0.8, 13.49, -351.797) + vec3(-50.03, 8625.5401, -5938.9784)), step(0.2, vec3(-615.128, -68.39, -207.744)), vec3(-5.0, -111.674, 465.373))) : vec3(0.0, 1.0, 1.0)))), dot(vec3(1.0, 0.0, 0.0), vec3(0.0, 1.0, 1.0))), _GLF_IDENTITY(_GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(0.0, 1.0, 1.0)), dot(vec3(1.0, 0.0, 0.0), vec3(0.0, 1.0, 1.0))), float(_GLF_IDENTITY(vec2(_GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(0.0, 1.0, 1.0)), dot(vec3(1.0, 0.0, 0.0), vec3(0.0, 1.0, 1.0))), 0.0), vec2(vec3(vec2(_GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(0.0, 1.0, 1.0)), dot(vec3(1.0, 0.0, 0.0), vec3(0.0, 1.0, 1.0))), 0.0), 1.0))))), _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(0.0, 1.0, 1.0)), dot(vec3(1.0, 0.0, 0.0), vec3(_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED((-287.150))), float(0.0), bool(true))), 1.0, 1.0))))), 1.0, 1.0, 0.0, 1.0, 0.0))).x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), mix(float(injectionSwitch.y), float(_GLF_FUZZED((_GLF_IDENTITY(-815.466 - -65.75, mix(float(-815.466 - -65.75), float(_GLF_FUZZED(7612.7411)), bool(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * sqrt(1.0)))))))))), bool(_GLF_IDENTITY(false, false || (false))))))))))));
                                                  }
                                                }
                                              }
                                            }
                                           else
                                            {
                                            }
                                          }
                                        }
                                       else
                                        {
                                        }
                                      }
                                    }
                                   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, false, true)), ! (! (bool(bvec3(false, false, true))))))));
                                  }
                                }
                              }
                             while(_GLF_WRAPPED_LOOP(false));
                            }
                          }
                        }
                       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                      }
                     else
                      {
                      }
                    }
                  }
                }
               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
              }
             else
              {
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
      }
    }
   else
    {
    }
  }
 else
  {
  }
 do
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     atomicStore(buf[virtual_gid], _GLF_IDENTITY(GLF_merged2_0_1_13_1_1_4num_workgroupread, (GLF_merged2_0_1_13_1_1_4num_workgroupread) | uvec2(0u, 0u)).y, 4, _GLF_IDENTITY(64, _GLF_IDENTITY(_GLF_IDENTITY(0 | (64), (1 ^ 1) ^ (0 | (64))), (_GLF_IDENTITY(0 | (64), (1 ^ 1) ^ (0 | (64)))) - 0)), 4);
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) || false))))));
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END
BUFFER checker DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected_checker DATA_TYPE uint32 SIZE 8388096 FILL 0

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 
  BIND BUFFER checker AS storage DESCRIPTOR_SET 0 BINDING 2 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT checker EQ_BUFFER expected_checker
