#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460
struct _GLF_struct_7 {
 mat3 _f0;
 int _f1;
 bvec3 _f2;
 uvec3 _f3;
} ;

struct _GLF_struct_6 {
 mat3 _f0;
 ivec2 _f1;
 uvec4 _f2;
 mat4 _f3;
} ;

struct _GLF_struct_8 {
 _GLF_struct_6 _f0;
 _GLF_struct_7 _f1;
 mat4 _f2;
} ;

struct _GLF_struct_4 {
 bvec4 _f0;
} ;

struct _GLF_struct_3 {
 mat4x3 _f0;
 mat4x3 _f1;
 ivec4 _f2;
 mat2x3 _f3;
 int _f4;
 mat4x3 _f5;
} ;

struct _GLF_struct_2 {
 mat2 _f0;
 mat3x4 _f1;
 ivec3 _f2;
 uvec4 _f3;
 bool _f4;
} ;

struct _GLF_struct_1 {
 float _f0;
 mat2x3 _f1;
 mat4x2 _f2;
 bvec3 _f3;
} ;

struct _GLF_struct_0 {
 vec4 _f0;
 mat3x4 _f1;
 mat4x3 _f2;
 bvec3 _f3;
 int _f4;
 mat4 _f5;
 mat3 _f6;
} ;

struct _GLF_struct_5 {
 _GLF_struct_0 _f0;
 _GLF_struct_1 _f1;
 _GLF_struct_2 _f2;
 _GLF_struct_3 _f3;
 bool _f4;
 _GLF_struct_4 _f5;
} ;

struct _GLF_struct_9 {
 mat3x2 _f0;
 ivec3 _f1;
 _GLF_struct_5 _f2;
 uvec2 GLF_merged2_0_1_14_1_1_14workgroup_baseworkgroup_size;
 _GLF_struct_8 _f3;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uvec2 GLF_merged2_0_1_11_1_1_13subgroup_idsubgroup_size;
 uvec4 GLF_merged4_0_1_16_1_1_13_2_1_17_3_1_14next_virtual_gidnum_workgroupsubgroup_local_idworkgroup_base;
 _GLF_struct_9 _GLF_struct_replacement_9;
 uint subgroup_id = gl_SubgroupID;
 GLF_merged2_0_1_11_1_1_13subgroup_idsubgroup_size.x = subgroup_id;
 uint subgroup_size = gl_SubgroupSize;
 GLF_merged2_0_1_11_1_1_13subgroup_idsubgroup_size.y = subgroup_size;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 GLF_merged4_0_1_16_1_1_13_2_1_17_3_1_14next_virtual_gidnum_workgroupsubgroup_local_idworkgroup_base.z = subgroup_local_id;
 uint num_workgroup = gl_NumWorkGroups.x;
 GLF_merged4_0_1_16_1_1_13_2_1_17_3_1_14next_virtual_gidnum_workgroupsubgroup_local_idworkgroup_base.y = num_workgroup;
 uint workgroup_size = gl_WorkGroupSize.x;
 _GLF_struct_replacement_9.GLF_merged2_0_1_14_1_1_14workgroup_baseworkgroup_size.y = workgroup_size;
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = _GLF_struct_replacement_9.GLF_merged2_0_1_14_1_1_14workgroup_baseworkgroup_size.y * workgroup_id;
 GLF_merged4_0_1_16_1_1_13_2_1_17_3_1_14next_virtual_gidnum_workgroupsubgroup_local_idworkgroup_base.w = workgroup_base;
 _GLF_struct_replacement_9.GLF_merged2_0_1_14_1_1_14workgroup_baseworkgroup_size.x = GLF_merged4_0_1_16_1_1_13_2_1_17_3_1_14next_virtual_gidnum_workgroupsubgroup_local_idworkgroup_base.w;
 uint subgroup_base = GLF_merged2_0_1_11_1_1_13subgroup_idsubgroup_size.x * GLF_merged2_0_1_11_1_1_13subgroup_idsubgroup_size.y;
 uint virtual_gid = _GLF_struct_replacement_9.GLF_merged2_0_1_14_1_1_14workgroup_baseworkgroup_size.x + subgroup_base + GLF_merged4_0_1_16_1_1_13_2_1_17_3_1_14next_virtual_gidnum_workgroupsubgroup_local_idworkgroup_base.z;
 uint next_virtual_gid = _GLF_struct_replacement_9.GLF_merged2_0_1_14_1_1_14workgroup_baseworkgroup_size.x + subgroup_base + ((GLF_merged4_0_1_16_1_1_13_2_1_17_3_1_14next_virtual_gidnum_workgroupsubgroup_local_idworkgroup_base.z + 1) % GLF_merged2_0_1_11_1_1_13subgroup_idsubgroup_size.y);
 GLF_merged4_0_1_16_1_1_13_2_1_17_3_1_14next_virtual_gidnum_workgroupsubgroup_local_idworkgroup_base.x = next_virtual_gid;
 uint read = atomicLoad(buf[virtual_gid], 4, 64, 2);
 if((GLF_merged4_0_1_16_1_1_13_2_1_17_3_1_14next_virtual_gidnum_workgroupsubgroup_local_idworkgroup_base.z % 2) == 0)
  {
   subgroupAll(false);
   atomicStore(buf[GLF_merged4_0_1_16_1_1_13_2_1_17_3_1_14next_virtual_gidnum_workgroupsubgroup_local_idworkgroup_base.x], uint(1), 4, 64, 4);
  }
 else
  {
   subgroupAll(false);
   atomicStore(buf[GLF_merged4_0_1_16_1_1_13_2_1_17_3_1_14next_virtual_gidnum_workgroupsubgroup_local_idworkgroup_base.x], uint(1), 4, 64, 4);
  }
 subgroupBarrier();
 atomicStore(buf[virtual_gid], read, 4, 64, 4);
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END
BUFFER checker DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected_checker DATA_TYPE uint32 SIZE 8388096 FILL 0

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 
  BIND BUFFER checker AS storage DESCRIPTOR_SET 0 BINDING 2 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT checker EQ_BUFFER expected_checker
