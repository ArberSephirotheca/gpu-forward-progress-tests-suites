#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_19 {
 int _f0;
 bvec3 _f1;
} ;

struct _GLF_struct_18 {
 uvec2 _f0;
 bvec4 _f1;
} ;

struct _GLF_struct_17 {
 bvec3 _f0;
 vec2 _f1;
} ;

struct _GLF_struct_16 {
 mat2x3 _f0;
 mat4x3 _f1;
 mat3 _f2;
 mat3x2 _f3;
 mat3 _f4;
 mat4x2 _f5;
} ;

struct _GLF_struct_20 {
 float _f0;
 bvec3 _f1;
 _GLF_struct_16 _f2;
 _GLF_struct_17 _f3;
 _GLF_struct_18 _f4;
 _GLF_struct_19 _f5;
} ;

struct _GLF_struct_21 {
 bool _f0;
 _GLF_struct_20 _f1;
 uint virtual_gid;
} ;

struct _GLF_struct_13 {
 ivec4 _f0;
 bvec3 _f1;
 uint _f2;
} ;

struct _GLF_struct_12 {
 mat4 _f0;
 vec3 _f1;
 mat3 _f2;
 mat3x4 _f3;
 vec2 _f4;
 uvec3 _f5;
} ;

struct _GLF_struct_11 {
 ivec2 _f0;
 vec3 _f1;
 bvec2 _f2;
 mat3 _f3;
 bvec3 _f4;
} ;

struct _GLF_struct_10 {
 vec2 _f0;
 mat3x4 _f1;
 bvec2 _f2;
 mat3x4 _f3;
} ;

struct _GLF_struct_9 {
 uvec3 _f0;
 ivec2 _f1;
 bool _f2;
 mat4x3 _f3;
} ;

struct _GLF_struct_8 {
 float _f0;
 float _f1;
 ivec2 _f2;
 bvec2 _f3;
 ivec3 _f4;
 vec3 _f5;
 vec3 _f6;
} ;

struct _GLF_struct_14 {
 _GLF_struct_8 _f0;
 uvec2 _f1;
 _GLF_struct_9 _f2;
 _GLF_struct_10 _f3;
 _GLF_struct_11 _f4;
 _GLF_struct_12 _f5;
 _GLF_struct_13 _f6;
} ;

struct _GLF_struct_6 {
 bvec4 _f0;
 ivec3 _f1;
 vec4 _f2;
 mat2x4 _f3;
} ;

struct _GLF_struct_5 {
 mat4x3 _f0;
 uvec4 _f1;
 int _f2;
 mat4x2 _f3;
 vec3 _f4;
 mat2x3 _f5;
} ;

struct _GLF_struct_4 {
 ivec2 _f0;
 uvec4 _f1;
 mat4x3 _f2;
} ;

struct _GLF_struct_3 {
 mat3 _f0;
 mat2x4 _f1;
 uint _f2;
 vec4 _f3;
 mat3 _f4;
 vec3 _f5;
} ;

struct _GLF_struct_2 {
 mat4x2 _f0;
 mat4 _f1;
 bvec4 _f2;
 mat4 _f3;
 mat2 _f4;
 float _f5;
} ;

struct _GLF_struct_1 {
 bvec3 _f0;
 ivec2 _f1;
 ivec4 _f2;
 vec3 _f3;
 uvec4 _f4;
 uint _f5;
 vec2 _f6;
} ;

struct _GLF_struct_7 {
 _GLF_struct_1 _f0;
 _GLF_struct_2 _f1;
 _GLF_struct_3 _f2;
 _GLF_struct_4 _f3;
 _GLF_struct_5 _f4;
 _GLF_struct_6 _f5;
} ;

struct _GLF_struct_0 {
 ivec3 _f0;
 ivec4 _f1;
 uint _f2;
 uvec3 _f3;
 uint subgroup_local_id;
 ivec2 _f4;
} ;

struct _GLF_struct_15 {
 ivec4 _f0;
 _GLF_struct_0 _f1;
 _GLF_struct_7 _f2;
 bvec4 _f3;
 _GLF_struct_14 _f4;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uvec4 GLF_merged4_0_1_13_1_1_11_2_1_14_3_1_12subgroup_sizevirtual_gidworkgroup_baseworkgroup_id;
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), bool(bvec2(! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   if(_GLF_DEAD(false))
    barrier();
   return;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(bool(_GLF_DEAD(false)), bool(bvec2(_GLF_IDENTITY(bool(_GLF_DEAD(false)), false || (bool(_GLF_DEAD(false)))), true))))))
  return;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(injectionSwitch.x > injectionSwitch.y, false)))))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   return;
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
   return;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   barrier();
  }
 _GLF_IDENTITY(GLF_merged4_0_1_13_1_1_11_2_1_14_3_1_12subgroup_sizevirtual_gidworkgroup_baseworkgroup_id.x = _GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, max(subgroup_size, subgroup_size))) ^ 0u), (false ? _GLF_IDENTITY(_GLF_FUZZED(uvec3(32861u, 156051u, 164937u).r), (_GLF_FUZZED(uvec3(32861u, 156051u, 164937u).r)) * 1u) : _GLF_IDENTITY(GLF_merged4_0_1_13_1_1_11_2_1_14_3_1_12subgroup_sizevirtual_gidworkgroup_baseworkgroup_id.x = subgroup_size, (_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_11_2_1_14_3_1_12subgroup_sizevirtual_gidworkgroup_baseworkgroup_id.x = subgroup_size, (GLF_merged4_0_1_13_1_1_11_2_1_14_3_1_12subgroup_sizevirtual_gidworkgroup_baseworkgroup_id.x = subgroup_size) | 0u)) - 0u)));
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY((false), (_GLF_IDENTITY((false), bool(bvec4((false), false, false, false)))) || false)))))))
  return;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   barrier();
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (false)))))), (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 _GLF_struct_15 _GLF_struct_replacement_15 = _GLF_struct_15(ivec4(1), _GLF_struct_0(ivec3(1), _GLF_IDENTITY(ivec4(1), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(ivec4(_GLF_IDENTITY(-7938, ~ (~ (-7938))), -19986, -17944, 90487)) : ivec4(1))), 1u, uvec3(1u), gl_SubgroupInvocationID, ivec2(1)), _GLF_struct_7(_GLF_struct_1(bvec3(true), _GLF_IDENTITY(ivec2(1), (ivec2(_GLF_IDENTITY(1, (1) >> 0))) + ivec2(0, 0)), ivec4(1), vec3(1.0), _GLF_IDENTITY(uvec4(1u), (false ? _GLF_FUZZED(_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_11_2_1_14_3_1_12subgroup_sizevirtual_gidworkgroup_baseworkgroup_id, clamp(GLF_merged4_0_1_13_1_1_11_2_1_14_3_1_12subgroup_sizevirtual_gidworkgroup_baseworkgroup_id, GLF_merged4_0_1_13_1_1_11_2_1_14_3_1_12subgroup_sizevirtual_gidworkgroup_baseworkgroup_id, GLF_merged4_0_1_13_1_1_11_2_1_14_3_1_12subgroup_sizevirtual_gidworkgroup_baseworkgroup_id))) : uvec4(_GLF_IDENTITY(1u, uint(_GLF_IDENTITY(uint(_GLF_IDENTITY(1u, 1u * (1u))), clamp(_GLF_IDENTITY(uint(_GLF_IDENTITY(1u, 1u * (1u))), (uint(_GLF_IDENTITY(1u, 1u * (1u)))) ^ 0u), uint(_GLF_IDENTITY(1u, 1u * (1u))), _GLF_IDENTITY(uint(_GLF_IDENTITY(1u, 1u * (1u))), max(uint(_GLF_IDENTITY(1u, 1u * (1u))), uint(_GLF_IDENTITY(1u, 1u * (1u)))))))))))), 1u, vec2(1.0)), _GLF_struct_2(mat4x2(1.0), mat4(1.0), bvec4(true), mat4(_GLF_IDENTITY(1.0, _GLF_IDENTITY(1.0 * (1.0), min(1.0 * (1.0), 1.0 * (1.0))))), mat2(1.0), 1.0), _GLF_struct_3(mat3(_GLF_IDENTITY(_GLF_IDENTITY(1.0, (1.0) - 0.0), max(1.0, 1.0))), mat2x4(1.0), 1u, vec4(1.0), mat3(1.0), vec3(1.0)), _GLF_struct_4(ivec2(1), uvec4(1u), mat4x3(1.0)), _GLF_struct_5(mat4x3(1.0), _GLF_IDENTITY(uvec4(1u), uvec4(0u, 0u, 0u, 0u) ^ (uvec4(1u))), 1, mat4x2(1.0), vec3(1.0), mat2x3(_GLF_IDENTITY(1.0, 0.0 + (_GLF_IDENTITY(_GLF_IDENTITY(1.0, clamp(1.0, _GLF_IDENTITY(1.0, (1.0) + 0.0), 1.0)), (_GLF_IDENTITY(false ? _GLF_FUZZED(153.011) : _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), mix(_GLF_IDENTITY(float(_GLF_FUZZED(((-1.1 * -3.4) * 449.465))), max(_GLF_IDENTITY(float(_GLF_FUZZED(((-1.1 * -3.4) * 449.465))), mix(float(_GLF_FUZZED(vec2(408.699, -275.751).s)), float(float(_GLF_FUZZED(((-1.1 * -3.4) * 449.465)))), bool(true))), float(_GLF_FUZZED(((-1.1 * -3.4) * 449.465))))), float(false ? _GLF_FUZZED(153.011) : _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0))), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))))), _GLF_struct_6(bvec4(true), _GLF_IDENTITY(ivec3(1), ~ (_GLF_IDENTITY(~ (ivec3(1)), _GLF_IDENTITY((~ _GLF_IDENTITY(_GLF_IDENTITY((ivec3(1)), ((ivec3(1))) << ivec3(0, _GLF_IDENTITY(0, min(0, 0)), 0)), ((ivec3(1))) | (_GLF_IDENTITY((ivec3(1)), (_GLF_IDENTITY((ivec3(1)), ((ivec3(1))) ^ ivec3(0, 0, 0))) | ((_GLF_IDENTITY(ivec3(1), ivec3(1, 1, 1) * (ivec3(1))))))))), ((~ _GLF_IDENTITY(_GLF_IDENTITY((ivec3(1)), ((ivec3(1))) << ivec3(0, _GLF_IDENTITY(0, min(0, 0)), 0)), ((ivec3(1))) | (_GLF_IDENTITY((ivec3(1)), (_GLF_IDENTITY((ivec3(1)), ((ivec3(1))) ^ ivec3(0, 0, 0))) | ((_GLF_IDENTITY(ivec3(1), ivec3(1, 1, 1) * (ivec3(1)))))))))) - ivec3(0, 0, 0)) / ivec3(1, 1, 1)))), vec4(1.0), mat2x4(1.0))), bvec4(_GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, bool(bool(true))))))))), _GLF_struct_14(_GLF_struct_8(1.0, 1.0, ivec2(1), bvec2(true), ivec3(1), vec3(1.0), vec3(1.0)), _GLF_IDENTITY(uvec2(_GLF_IDENTITY(_GLF_IDENTITY(1u, max(1u, _GLF_IDENTITY(1u, (1u) >> 0u))), clamp(1u, 1u, 1u))), max(uvec2(_GLF_IDENTITY(1u, clamp(1u, 1u, 1u))), uvec2(_GLF_IDENTITY(1u, clamp(1u, _GLF_IDENTITY(1u, (1u) * 1u), 1u))))), _GLF_struct_9(uvec3(1u), _GLF_IDENTITY(ivec2(_GLF_IDENTITY(1, clamp(1, 1, _GLF_IDENTITY(1, 1 * (1))))), (ivec2(_GLF_IDENTITY(1, clamp(1, 1, _GLF_IDENTITY(1, 1 * (1)))))) | (ivec2(_GLF_IDENTITY(1, clamp(1, 1, _GLF_IDENTITY(1, 1 * (1))))))), true, mat4x3(_GLF_IDENTITY(1.0, _GLF_IDENTITY(_GLF_IDENTITY(float(vec3(1.0, 0.0, cos(0.0))), float(vec2(float(vec3(1.0, 0.0, cos(0.0))), 0.0))), 0.0 + (float(vec3(1.0, 0.0, cos(0.0)))))))), _GLF_struct_10(vec2(1.0), mat3x4(1.0), bvec2(_GLF_IDENTITY(true, (true) && true)), mat3x4(1.0)), _GLF_struct_11(ivec2(_GLF_IDENTITY(1, max(1, 1))), vec3(1.0), bvec2(true), _GLF_IDENTITY(mat3(1.0), transpose(transpose(_GLF_IDENTITY(mat3(1.0), (_GLF_IDENTITY(mat3(1.0), transpose(transpose(mat3(1.0))))) + mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))))), _GLF_IDENTITY(bvec3(true), bvec3(bvec4(bvec3(true), true)))), _GLF_struct_12(mat4(1.0), vec3(_GLF_IDENTITY(1.0, max(_GLF_IDENTITY(_GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, min(1.0, 1.0)), 1.0)), float(float(1.0))), 1.0))), mat3(1.0), mat3x4(1.0), vec2(1.0), uvec3(1u)), _GLF_struct_13(ivec4(1), bvec3(true), 1u)));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    return;
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)))) > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(46.13), _GLF_FUZZED(2.5)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))).y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))
      return;
     return;
    }
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))))))
    barrier();
   return;
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec4(! (false), true, true, false))))))))))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
  barrier();
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_IDENTITY(_GLF_DEAD(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_DEAD(false))))))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
  return;
 if(_GLF_DEAD(false))
  barrier();
 uint workgroup_id = gl_WorkGroupID.x;
 GLF_merged4_0_1_13_1_1_11_2_1_14_3_1_12subgroup_sizevirtual_gidworkgroup_baseworkgroup_id.w = workgroup_id;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   return;
  }
 if(_GLF_DEAD(false))
  barrier();
 uint workgroup_base = workgroup_size * GLF_merged4_0_1_13_1_1_11_2_1_14_3_1_12subgroup_sizevirtual_gidworkgroup_baseworkgroup_id.w;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   return;
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     return;
    }
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, false || (false))))), (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
     return;
     if(_GLF_DEAD(false))
      return;
    }
   return;
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true), bvec2(bvec4(_GLF_IDENTITY(bvec2(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true), bvec2(bvec3(bvec2(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true), true))), false, true)))), bool(_GLF_IDENTITY(bvec2(bool(_GLF_IDENTITY(bvec2(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true), bvec2(bvec4(_GLF_IDENTITY(bvec2(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true), bvec2(bvec3(bvec2(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true), true))), false, true)))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec2(bvec4(bvec2(bool(_GLF_IDENTITY(bvec2(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true), bvec2(bvec4(_GLF_IDENTITY(bvec2(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true), bvec2(bvec3(bvec2(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch))) / vec2(1.0, 1.0)).x > _GLF_IDENTITY(injectionSwitch.y, 0.0 + (injectionSwitch.y))))), true), true))), false, true)))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, true)))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bvec4(injectionSwitch.x > injectionSwitch.y, true, false, false)), ! (! (_GLF_IDENTITY(bool(bvec4(injectionSwitch.x > injectionSwitch.y, true, false, false)), ! (! (bool(bvec4(injectionSwitch.x > injectionSwitch.y, true, false, false)))))))))))))
      return;
     return;
    }
   barrier();
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bool((injectionSwitch.x > injectionSwitch.y)))))))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    return;
   barrier();
  }
 GLF_merged4_0_1_13_1_1_11_2_1_14_3_1_12subgroup_sizevirtual_gidworkgroup_baseworkgroup_id.z = workgroup_base;
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) && true)))), (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], float(mat2x4(injectionSwitch[_GLF_IDENTITY(1, (1) >> 0)], 1.0, _GLF_IDENTITY(0.0, clamp(_GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(-2.8))), 0.0, _GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED((+ -7.3)))))), 0.0, 1.0, _GLF_IDENTITY(0.0, (0.0) / 1.0), abs(1.0), 0.0))))).x > _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch))) - vec2(0.0, 0.0)).y))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         return;
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           barrier();
           if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), true && (! (false)))))))
            barrier();
          }
         return;
        }
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0) > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
      barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     return;
     if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
      return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))))
    return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))), true && (_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), true && (_GLF_IDENTITY(false, true && (false))))))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (injectionSwitch.x > injectionSwitch.y))))
      return;
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, true && (false)), false, true)))) && true)))))))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || false)) || false)))
        barrier();
       barrier();
      }
     return;
     if(_GLF_DEAD(false))
      barrier();
    }
   return;
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false || (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), ! (! (! (_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) || false), (injectionSwitch.x > injectionSwitch.y))))))))))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   return;
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(5.3)), bool(false)))) * 1.0) > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y))))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     return;
    }
   barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, (false) && true), true, false, true))))))))
      barrier();
     return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))) && true))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   return;
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 uint subgroup_base = subgroup_id * GLF_merged4_0_1_13_1_1_11_2_1_14_3_1_12subgroup_sizevirtual_gidworkgroup_baseworkgroup_id.x;
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))).x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  return;
 _GLF_struct_21 _GLF_struct_replacement_21 = _GLF_struct_21(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(_GLF_IDENTITY(! (true), _GLF_IDENTITY(true, true && (true)) && (! _GLF_IDENTITY((true), ((true)) || false))), bool(bvec3(! (true), false, true))))), _GLF_struct_20(1.0, bvec3(true), _GLF_struct_16(mat2x3(1.0), mat4x3(1.0), _GLF_IDENTITY(mat3(1.0), mat3(1.0) * (_GLF_IDENTITY(mat3(_GLF_IDENTITY(1.0, float(mat3x4(1.0, exp(0.0), 0.0, 0.0, 1.0, exp(0.0), 0.0, 1.0, 0.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), length(vec4(0.0, 0.0, 0.0, 0.0)))))), (mat3(_GLF_IDENTITY(1.0, float(mat3x4(1.0, exp(0.0), 0.0, 0.0, 1.0, exp(0.0), 0.0, 1.0, 0.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), length(vec4(0.0, 0.0, 0.0, 0.0))))))) / mat3(1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0)))), mat3x2(1.0), _GLF_IDENTITY(mat3(1.0), (true ? mat3(1.0) : _GLF_FUZZED(mat3(519.923, -6.7, 3008.4673, -662.378, -5939.9622, 45.58, -47.15, 5.9, -0.8)))), mat4x2(1.0)), _GLF_struct_17(bvec3(true), vec2(1.0)), _GLF_struct_18(uvec2(1u), bvec4(true)), _GLF_struct_19(1, bvec3(true))), GLF_merged4_0_1_13_1_1_11_2_1_14_3_1_12subgroup_sizevirtual_gidworkgroup_baseworkgroup_id.z + subgroup_base + _GLF_struct_replacement_15._f1.subgroup_local_id);
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false))))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    return;
  }
 GLF_merged4_0_1_13_1_1_11_2_1_14_3_1_12subgroup_sizevirtual_gidworkgroup_baseworkgroup_id.y = _GLF_struct_replacement_21.virtual_gid;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  return;
 uint next_virtual_gid = GLF_merged4_0_1_13_1_1_11_2_1_14_3_1_12subgroup_sizevirtual_gidworkgroup_baseworkgroup_id.z + _GLF_IDENTITY(subgroup_base, (subgroup_base) | 0u) + ((_GLF_struct_replacement_15._f1.subgroup_local_id + _GLF_IDENTITY(1, min(1, 1))) % GLF_merged4_0_1_13_1_1_11_2_1_14_3_1_12subgroup_sizevirtual_gidworkgroup_baseworkgroup_id.x);
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    return;
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
   return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 uint read = _GLF_IDENTITY(atomicLoad(buf[GLF_merged4_0_1_13_1_1_11_2_1_14_3_1_12subgroup_sizevirtual_gidworkgroup_baseworkgroup_id.y], 4, 64, _GLF_IDENTITY(2, min(2, _GLF_IDENTITY(2, 0 ^ (2))))), (atomicLoad(buf[GLF_merged4_0_1_13_1_1_11_2_1_14_3_1_12subgroup_sizevirtual_gidworkgroup_baseworkgroup_id.y], 4, 64, _GLF_IDENTITY(2, min(2, _GLF_IDENTITY(2, 0 ^ (2)))))) >> 0u);
 if(_GLF_DEAD(false))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x > injectionSwitch.y))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x > injectionSwitch.y))), false || (_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (! (false)))))) || false), (false) && true), (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x > injectionSwitch.y)))))) || false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))))))))
        barrier();
       return;
      }
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), _GLF_IDENTITY(! (! (false)), bool(bvec4(! (! (false)), true, true, false))))))))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_IDENTITY((_GLF_struct_replacement_15._f1.subgroup_local_id % 2), (true ? (_GLF_struct_replacement_15._f1.subgroup_local_id % 2) : _GLF_FUZZED(workgroup_size))) == _GLF_IDENTITY(0, min(0, 0)))
  {
   subgroupAll(false);
   atomicStore(buf[next_virtual_gid], uint(_GLF_IDENTITY(1, (1) | (1))), 4, _GLF_IDENTITY(64, _GLF_IDENTITY((64) ^ _GLF_IDENTITY(0, (false ? _GLF_FUZZED(68993) : 0)), int(_GLF_IDENTITY(ivec4((64) ^ _GLF_IDENTITY(0, (false ? _GLF_FUZZED(68993) : 0)), 1, 1, 1), (_GLF_IDENTITY(ivec4((64) ^ _GLF_IDENTITY(0, (false ? _GLF_FUZZED(68993) : 0)), 1, 1, 1), (ivec4((64) ^ _GLF_IDENTITY(0, (false ? _GLF_FUZZED(68993) : 0)), 1, 1, 1)) | ivec4(0, 0, 0, 0))) * ivec4(1, 1, 1, 1))))), 4);
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), bool(bool(false)))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       return;
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(false, _GLF_IDENTITY(true, ! (! (true))), true), bvec3(bvec4(bvec3(false, true, true), true)))), ! (! (bool(_GLF_IDENTITY(bvec3(false, true, true), bvec3(bvec4(bvec3(false, true, true), true))))))))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(mat2x3(_GLF_IDENTITY(injectionSwitch.x, 0.0 + (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + 0.0))), 1.0, 1.0, 0.0, 1.0, 1.0), transpose(transpose(mat2x3(_GLF_IDENTITY(injectionSwitch.x, 0.0 + (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + 0.0))), 1.0, 1.0, 0.0, 1.0, 1.0)))))) > injectionSwitch.y))))
      barrier();
    }
   subgroupAll(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, bool(bvec2(false, false))))))), bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, bool(bvec2(false, false))))))), (_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, bool(bvec2(false, false)))))))) && true), false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), _GLF_IDENTITY(bool(bool(false)), ! (! (bool(bool(false)))))), false, true), bvec3(bvec4(bvec3(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), ! (! (bool(bool(false)))))), false, true), false)))), bool(bvec4(bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, bool(bvec4(false, true, false, false))))), _GLF_IDENTITY(bool(bool(false)), ! _GLF_IDENTITY((! (bool(bool(false)))), true && ((! (bool(bool(false)))))))), false, true), bvec3(bvec4(bvec3(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), ! (! (bool(bool(false)))))), false, true), false)))), true, false, true)))));
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            barrier();
           return;
          }
         return;
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).x > injectionSwitch.y))))
        return;
       barrier();
      }
     barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false), false, false)))))
      return;
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) > injectionSwitch.y), _GLF_IDENTITY(true && (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), _GLF_IDENTITY((injectionSwitch.x) - 0.0, (false ? _GLF_FUZZED(5.2) : (injectionSwitch.x) - 0.0))) > injectionSwitch.y), ((_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) > injectionSwitch.y)) && true)), ! (_GLF_IDENTITY(! (true && (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), _GLF_IDENTITY((injectionSwitch.x) - 0.0, (false ? _GLF_FUZZED(5.2) : (injectionSwitch.x) - 0.0))) > injectionSwitch.y), ((_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) > injectionSwitch.y)) && true))), bool(bvec4(_GLF_IDENTITY(! (true && (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), _GLF_IDENTITY((injectionSwitch.x) - 0.0, (false ? _GLF_FUZZED(5.2) : (injectionSwitch.x) - 0.0))) > injectionSwitch.y), ((_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) > injectionSwitch.y)) && true))), (! (true && (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), _GLF_IDENTITY((injectionSwitch.x) - 0.0, (false ? _GLF_FUZZED(5.2) : (injectionSwitch.x) - 0.0))) > injectionSwitch.y), ((_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) > injectionSwitch.y)) && true)))) && true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true)))))))))
    return;
   atomicStore(buf[next_virtual_gid], _GLF_IDENTITY(uint(1), max(uint(_GLF_IDENTITY(1, _GLF_IDENTITY(~ (~ (_GLF_IDENTITY(1, _GLF_IDENTITY(~ (~ (1)), clamp(~ (~ (1)), ~ (~ (1)), ~ (~ (1))))))), max(_GLF_IDENTITY(~ (~ (_GLF_IDENTITY(1, _GLF_IDENTITY(~ (~ (1)), clamp(~ (~ (1)), ~ (~ (1)), ~ (~ (1))))))), (~ (~ (_GLF_IDENTITY(1, _GLF_IDENTITY(~ (~ (1)), clamp(~ (~ (1)), ~ (~ (1)), ~ (~ (1)))))))) >> 0), ~ (~ (_GLF_IDENTITY(1, _GLF_IDENTITY(~ (~ (1)), clamp(~ (~ (1)), ~ (~ (1)), ~ (~ (1))))))))))), _GLF_IDENTITY(uint(_GLF_IDENTITY(1, (1) + 0)), _GLF_IDENTITY(~ _GLF_IDENTITY((~ (_GLF_IDENTITY(_GLF_IDENTITY(uint(1), (true ? uint(1) : _GLF_FUZZED(next_virtual_gid))), (uint(1)) / 1u))), ((~ (_GLF_IDENTITY(uint(1), (uint(1)) / 1u)))) / 1u), _GLF_IDENTITY((false ? _GLF_FUZZED(workgroup_size) : ~ _GLF_IDENTITY((~ (_GLF_IDENTITY(_GLF_IDENTITY(uint(1), (uint(1)) / 1u), (_GLF_IDENTITY(_GLF_IDENTITY(uint(1), (uint(1)) / 1u), min(_GLF_IDENTITY(_GLF_IDENTITY(uint(1), (uint(1)) / 1u), 0u | (_GLF_IDENTITY(uint(1), (uint(1)) / 1u))), _GLF_IDENTITY(uint(1), (uint(1)) / 1u)))) | 0u))), ((~ (_GLF_IDENTITY(_GLF_IDENTITY(uint(1), (uint(1)) / 1u), max(_GLF_IDENTITY(uint(1), (uint(1)) / 1u), _GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(1, max(1, 1))), (uint(1)) / 1u), uint(uvec3(_GLF_IDENTITY(_GLF_IDENTITY(uint(1), (uint(1)) / 1u), (true ? _GLF_IDENTITY(uint(1), (uint(1)) / 1u) : _GLF_FUZZED(subgroup_size))), (130783u & 0u), 1u)))))))) / 1u)), (_GLF_IDENTITY((false ? _GLF_FUZZED(workgroup_size) : ~ _GLF_IDENTITY((~ (_GLF_IDENTITY(_GLF_IDENTITY(uint(1), (uint(1)) / 1u), (_GLF_IDENTITY(_GLF_IDENTITY(uint(1), (uint(1)) / 1u), min(_GLF_IDENTITY(_GLF_IDENTITY(uint(1), (uint(1)) / 1u), 0u | (_GLF_IDENTITY(uint(1), (uint(1)) / 1u))), _GLF_IDENTITY(uint(1), (uint(1)) / 1u)))) | 0u))), ((~ (_GLF_IDENTITY(_GLF_IDENTITY(uint(1), (uint(1)) / 1u), max(_GLF_IDENTITY(uint(1), (uint(1)) / 1u), _GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(1, max(1, 1))), (uint(1)) / 1u), uint(uvec3(_GLF_IDENTITY(_GLF_IDENTITY(uint(1), (uint(1)) / 1u), (true ? _GLF_IDENTITY(uint(1), (uint(1)) / 1u) : _GLF_FUZZED(subgroup_size))), (130783u & 0u), 1u)))))))) / 1u)), (_GLF_IDENTITY((false ? _GLF_FUZZED(workgroup_size) : ~ _GLF_IDENTITY((~ (_GLF_IDENTITY(_GLF_IDENTITY(uint(1), (uint(1)) / 1u), (_GLF_IDENTITY(_GLF_IDENTITY(uint(1), (uint(1)) / 1u), min(_GLF_IDENTITY(_GLF_IDENTITY(uint(1), (uint(1)) / 1u), 0u | (_GLF_IDENTITY(uint(1), (uint(1)) / 1u))), _GLF_IDENTITY(uint(1), (uint(1)) / 1u)))) | 0u))), ((~ (_GLF_IDENTITY(_GLF_IDENTITY(uint(1), (uint(1)) / 1u), max(_GLF_IDENTITY(uint(1), (uint(1)) / 1u), _GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(1, max(1, 1))), (uint(1)) / 1u), uint(uvec3(_GLF_IDENTITY(_GLF_IDENTITY(uint(1), (uint(1)) / 1u), (true ? _GLF_IDENTITY(uint(1), (uint(1)) / 1u) : _GLF_FUZZED(subgroup_size))), (130783u & 0u), 1u)))))))) / 1u)), (false ? _GLF_FUZZED(workgroup_base) : (false ? _GLF_FUZZED(workgroup_size) : ~ _GLF_IDENTITY((~ (_GLF_IDENTITY(_GLF_IDENTITY(uint(1), (uint(1)) / 1u), (_GLF_IDENTITY(_GLF_IDENTITY(uint(1), (uint(1)) / 1u), min(_GLF_IDENTITY(_GLF_IDENTITY(uint(1), (uint(1)) / 1u), 0u | (_GLF_IDENTITY(uint(1), (uint(1)) / 1u))), _GLF_IDENTITY(uint(1), (uint(1)) / 1u)))) | 0u))), ((~ (_GLF_IDENTITY(_GLF_IDENTITY(uint(1), (uint(1)) / 1u), max(_GLF_IDENTITY(uint(1), (uint(1)) / 1u), _GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(1, max(1, 1))), (uint(1)) / 1u), uint(uvec3(_GLF_IDENTITY(_GLF_IDENTITY(uint(1), (uint(1)) / 1u), (true ? _GLF_IDENTITY(uint(1), (uint(1)) / 1u) : _GLF_FUZZED(subgroup_size))), (130783u & 0u), 1u)))))))) / 1u))))) + 0u)) | ((false ? _GLF_FUZZED(workgroup_size) : ~ _GLF_IDENTITY((~ (_GLF_IDENTITY(_GLF_IDENTITY(uint(1), (uint(1)) / 1u), (_GLF_IDENTITY(_GLF_IDENTITY(uint(1), (uint(1)) / 1u), min(_GLF_IDENTITY(_GLF_IDENTITY(uint(1), (uint(1)) / 1u), 0u | (_GLF_IDENTITY(uint(1), (uint(1)) / 1u))), _GLF_IDENTITY(uint(1), (uint(1)) / 1u)))) | 0u))), ((~ (_GLF_IDENTITY(_GLF_IDENTITY(uint(1), (uint(1)) / 1u), max(_GLF_IDENTITY(uint(1), (uint(1)) / 1u), _GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(1, max(1, 1))), (uint(1)) / 1u), uint(uvec3(_GLF_IDENTITY(_GLF_IDENTITY(uint(1), (uint(1)) / 1u), (true ? _GLF_IDENTITY(uint(1), (uint(1)) / 1u) : _GLF_FUZZED(subgroup_size))), (130783u & 0u), 1u)))))))) / 1u)))))))), 4, _GLF_IDENTITY(64, max(64, 64)), 4);
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false, false)))) || false)))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, (false) || false))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(-2311.2763, 747.767)))).y))))
      barrier();
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       return;
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
      return;
     barrier();
    }
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, true, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), bool(bool(bool(bvec4(false, _GLF_IDENTITY(true, ! (! (true))), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))), bool(bvec2(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, true, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), bool(bool(bool(bvec4(false, true, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))), true)))), (_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, _GLF_IDENTITY(true, bool(bvec2(true, true))), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), bool(bool(bool(bvec4(false, true, false, _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1]))) * mat2(1.0)).y)))))))), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec4(false, true, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), bool(bool(bool(bvec4(false, true, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))), (_GLF_IDENTITY(bool(bvec4(false, true, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), bool(bool(bool(bvec4(false, true, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))) || false)), true)), bool(bvec4(bool(bvec2(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec4(false, true, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), bool(bool(bool(bvec4(false, true, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))), (_GLF_IDENTITY(bool(bvec4(false, true, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), bool(bool(bool(bvec4(false, true, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))) || false)), true)), false, false, true)))))) || false))
    {
     if(_GLF_DEAD(false))
      return;
     return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y))))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(bool(bool(false)), false || (_GLF_IDENTITY(bool(bool(false)), (bool(bool(false))) && true))), bool(bvec2(bool(bool(false)), true))))))
    return;
   if(_GLF_DEAD(false))
    barrier();
   return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   return;
  }
 subgroupBarrier();
 if(_GLF_DEAD(false))
  barrier();
 atomicStore(buf[GLF_merged4_0_1_13_1_1_11_2_1_14_3_1_12subgroup_sizevirtual_gidworkgroup_baseworkgroup_id.y], read, 4, 64, _GLF_IDENTITY(4, _GLF_IDENTITY(0 | (4), (_GLF_IDENTITY(0 | (4), (0 | (4)) - 0)) + 0)));
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(bool((false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))
    barrier();
   return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y))))), bool(bvec2(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     barrier();
    }
   barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, false)), _GLF_IDENTITY(bool(bvec3(bool(bvec2(false, false)), true, false)), (bool(bvec3(bool(bvec2(false, false)), true, false))) && true))), (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(_GLF_IDENTITY(float(_GLF_IDENTITY(vec4(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x, 1.0, 0.0, _GLF_IDENTITY(1.0, (1.0) - _GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, (0.0) * _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0))))) - 0.0))), (_GLF_IDENTITY(vec4(injectionSwitch.x, 1.0, 0.0, 1.0), min(vec4(injectionSwitch.x, 1.0, 0.0, 1.0), vec4(injectionSwitch.x, _GLF_IDENTITY(1.0, (1.0) / 1.0), 0.0, 1.0)))) / vec4(1.0, 1.0, 1.0, 1.0))), (float(_GLF_IDENTITY(vec4(injectionSwitch.x, 1.0, 0.0, _GLF_IDENTITY(1.0, (1.0) - _GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, (0.0) * _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0))))) - 0.0))), (_GLF_IDENTITY(vec4(injectionSwitch.x, 1.0, 0.0, 1.0), min(vec4(injectionSwitch.x, 1.0, 0.0, 1.0), vec4(injectionSwitch.x, _GLF_IDENTITY(1.0, (1.0) / 1.0), 0.0, 1.0)))) / vec4(1.0, 1.0, 1.0, 1.0)))) * 1.0), min(_GLF_IDENTITY(float(_GLF_IDENTITY(vec4(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x, 1.0, 0.0, _GLF_IDENTITY(1.0, (1.0) - _GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, (0.0) * _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0))))) - 0.0))), (_GLF_IDENTITY(vec4(injectionSwitch.x, 1.0, 0.0, 1.0), min(vec4(injectionSwitch.x, 1.0, 0.0, 1.0), vec4(injectionSwitch.x, _GLF_IDENTITY(1.0, (1.0) / 1.0), 0.0, 1.0)))) / vec4(1.0, 1.0, 1.0, 1.0))), (float(_GLF_IDENTITY(vec4(injectionSwitch.x, 1.0, 0.0, _GLF_IDENTITY(1.0, (1.0) - _GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, (0.0) * _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0))))) - 0.0))), (_GLF_IDENTITY(vec4(injectionSwitch.x, 1.0, 0.0, 1.0), min(vec4(injectionSwitch.x, 1.0, 0.0, 1.0), vec4(injectionSwitch.x, _GLF_IDENTITY(1.0, (1.0) / 1.0), 0.0, 1.0)))) / vec4(1.0, 1.0, 1.0, 1.0)))) * 1.0), _GLF_IDENTITY(float(_GLF_IDENTITY(vec4(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x, 1.0, 0.0, _GLF_IDENTITY(1.0, (1.0) - _GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, (0.0) * _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0))))) - 0.0))), (_GLF_IDENTITY(vec4(injectionSwitch.x, 1.0, 0.0, 1.0), min(vec4(injectionSwitch.x, 1.0, 0.0, 1.0), vec4(injectionSwitch.x, _GLF_IDENTITY(1.0, (1.0) / 1.0), 0.0, 1.0)))) / vec4(1.0, 1.0, 1.0, 1.0))), (float(_GLF_IDENTITY(vec4(injectionSwitch.x, 1.0, 0.0, _GLF_IDENTITY(1.0, (1.0) - _GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, (0.0) * _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0))))) - 0.0))), (_GLF_IDENTITY(vec4(injectionSwitch.x, 1.0, 0.0, 1.0), min(vec4(injectionSwitch.x, 1.0, 0.0, 1.0), vec4(injectionSwitch.x, _GLF_IDENTITY(1.0, (1.0) / 1.0), 0.0, 1.0)))) / vec4(1.0, 1.0, 1.0, 1.0)))) * 1.0)))), injectionSwitch.x)) > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
      return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     return;
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), ! (! (bool(false))))))))
    barrier();
   return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec4(! (false), false, false, true)))))) || false)))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0) > injectionSwitch.y)) || ((injectionSwitch.x > injectionSwitch.y))))))
  return;
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END
BUFFER checker DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected_checker DATA_TYPE uint32 SIZE 8388096 FILL 0

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 
  BIND BUFFER checker AS storage DESCRIPTOR_SET 0 BINDING 2 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT checker EQ_BUFFER expected_checker
