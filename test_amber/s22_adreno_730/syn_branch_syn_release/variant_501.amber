#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_0 {
 mat3 _f0;
 bvec2 _f1;
 bool _f2;
 mat3x2 _f3;
 vec2 _f4;
} ;

struct _GLF_struct_1 {
 uvec2 _f0;
 uvec3 _f1;
 _GLF_struct_0 _f2;
 float _f3;
 bvec4 _f4;
} ;

struct _GLF_struct_2 {
 mat2x3 _f0;
 _GLF_struct_1 _f1;
 uint workgroup_id;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   do
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           return;
          }
         else
          {
          }
        }
       for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          break;
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), vec2(mat3((injectionSwitch) * mat2(1.0), 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, _GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, min(1.0, 1.0)), _GLF_IDENTITY(1.0, max(1.0, 1.0)))))))).y))))
          {
           return;
           if(_GLF_DEAD(false))
            continue;
          }
         else
          {
          }
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          break;
         return;
        }
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        return;
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
   if(_GLF_DEAD(false))
    return;
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (false)))))
    {
    }
   else
    {
     return;
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, float(mat4x2(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), 0.0, 0.0, 1.0, 1.0, 1.0, cos(0.0), 1.0))) < injectionSwitch.y))))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0), mat2(0.0, 0.0, 0.0, 0.0) + (_GLF_IDENTITY(mat2(1.0), mat2(mat3x2(mat2(1.0)))))) * (injectionSwitch)).x > _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_IDENTITY(_GLF_FUZZED(4982.0239), (_GLF_FUZZED(4982.0239)) - 0.0) : injectionSwitch.y))))), ! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).x > _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_IDENTITY(_GLF_FUZZED(4982.0239), (_GLF_FUZZED(4982.0239)) - 0.0) : injectionSwitch.y)))))), bool(bvec3(! _GLF_IDENTITY((_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).x > _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_IDENTITY(_GLF_FUZZED(4982.0239), (_GLF_FUZZED(4982.0239)) - 0.0) : injectionSwitch.y)))))), ! (! (_GLF_IDENTITY((_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).x > _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_IDENTITY(_GLF_FUZZED(4982.0239), (_GLF_FUZZED(4982.0239)) - 0.0) : injectionSwitch.y)))))), bool(bool((_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).x > _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_IDENTITY(_GLF_FUZZED(4982.0239), (_GLF_FUZZED(4982.0239)) - 0.0) : injectionSwitch.y)))))))))))), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
          return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       do
        {
         return;
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(_GLF_IDENTITY(! (false), _GLF_IDENTITY((! (false)) || false, ((! (false)) || false) && true)), ! (! (_GLF_IDENTITY(! (false), _GLF_IDENTITY(_GLF_IDENTITY((! (false)) || false, ! (! ((! (false)) || false))), ((! _GLF_IDENTITY((false), ! (! (_GLF_IDENTITY((false), false || (_GLF_IDENTITY((false), ((false)) || false))))))) || false) && true)))))))))
          continue;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))));
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          return;
        }
      }
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
    }
  }
 else
  {
  }
 uint workgroup_size = _GLF_IDENTITY(gl_WorkGroupSize.x, 0u ^ (gl_WorkGroupSize.x));
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = _GLF_IDENTITY(1, min(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, clamp(1, 1, 1))) ^ 0), 1)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
  }
 _GLF_struct_2 _GLF_struct_replacement_2 = _GLF_struct_2(mat2x3(1.0), _GLF_struct_1(uvec2(1u), _GLF_IDENTITY(_GLF_IDENTITY(uvec3(_GLF_IDENTITY(1u, (1u) | _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(1u, (_GLF_IDENTITY(true ? _GLF_IDENTITY(1u, ~ (_GLF_IDENTITY(~ (1u), 0u | (_GLF_IDENTITY(~ (1u), min(_GLF_IDENTITY(~ (1u), min(~ (1u), ~ (1u))), ~ (1u))))))) : _GLF_FUZZED(workgroup_size), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(true ? _GLF_IDENTITY(1u, ~ (~ (1u))) : _GLF_FUZZED(workgroup_size), _GLF_IDENTITY(1u, uint(uvec4(1u, 0u, 0u, 1u))) * (_GLF_IDENTITY(true ? _GLF_IDENTITY(1u, ~ (~ (_GLF_IDENTITY(1u, (0u << _GLF_IDENTITY(uint(1u), uint(1u))) | (1u))))) : _GLF_FUZZED(workgroup_size), ~ (~ (true ? _GLF_IDENTITY(1u, ~ (~ _GLF_IDENTITY((1u), 0u ^ ((1u))))) : _GLF_FUZZED(workgroup_size)))))) : _GLF_FUZZED(subgroup_id)))))), ((_GLF_IDENTITY(1u, (_GLF_IDENTITY(true ? _GLF_IDENTITY(1u, _GLF_IDENTITY(~ (_GLF_IDENTITY(~ (1u), 0u | (_GLF_IDENTITY(~ (1u), min(_GLF_IDENTITY(~ (1u), min(~ (1u), ~ (1u))), ~ (1u)))))), (~ (_GLF_IDENTITY(~ (1u), 0u | (_GLF_IDENTITY(~ (1u), min(_GLF_IDENTITY(~ (1u), min(~ (1u), ~ (1u))), ~ (1u))))))) | (~ (_GLF_IDENTITY(~ (1u), 0u | (_GLF_IDENTITY(~ (1u), min(_GLF_IDENTITY(~ (1u), min(~ (1u), ~ (1u))), ~ (1u))))))))) : _GLF_FUZZED(workgroup_size), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(true ? _GLF_IDENTITY(1u, ~ (~ (1u))) : _GLF_FUZZED(workgroup_size), _GLF_IDENTITY(_GLF_IDENTITY(1u, uint(uvec4(1u, 0u, 0u, 1u))), ~ (~ (_GLF_IDENTITY(1u, _GLF_IDENTITY(uint(uvec4(1u, 0u, 0u, 1u)), (uint(uvec4(1u, 0u, 0u, 1u))) ^ (0u << _GLF_IDENTITY(uint(8u), uint(8u)))))))) * (_GLF_IDENTITY(true ? _GLF_IDENTITY(1u, ~ _GLF_IDENTITY((~ (_GLF_IDENTITY(1u, (0u << _GLF_IDENTITY(uint(1u), uint(1u))) | (1u)))), 0u + ((~ (_GLF_IDENTITY(1u, (0u << _GLF_IDENTITY(uint(1u), uint(1u))) | (1u))))))) : _GLF_FUZZED(workgroup_size), ~ (~ (true ? _GLF_IDENTITY(1u, ~ (~ (1u))) : _GLF_FUZZED(workgroup_size)))))) : _GLF_FUZZED(subgroup_id))))))) + (28479u & 0u)), _GLF_IDENTITY(uint(uvec3(_GLF_IDENTITY((_GLF_IDENTITY(1u, (true ? 1u : _GLF_FUZZED(workgroup_size)))), max((_GLF_IDENTITY(_GLF_IDENTITY(1u, min(1u, 1u)), (true ? 1u : _GLF_FUZZED(_GLF_IDENTITY(workgroup_size, (_GLF_IDENTITY(workgroup_size, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(workgroup_size, (workgroup_size) << 0u)), ~ (~ (~ (_GLF_IDENTITY(workgroup_size, (workgroup_size) << 0u)))))))) / 1u))))), (_GLF_IDENTITY(1u, (true ? 1u : _GLF_IDENTITY(_GLF_FUZZED(workgroup_size), (_GLF_IDENTITY(_GLF_FUZZED(workgroup_size), (_GLF_FUZZED(workgroup_size)) ^ 0u)) << 0u)))))), 0u, 0u)), (uint(uvec3((_GLF_IDENTITY(1u, (true ? 1u : _GLF_FUZZED(workgroup_size)))), 0u, 0u))) << 0u)))), _GLF_IDENTITY(uvec3(uvec3(_GLF_IDENTITY(_GLF_IDENTITY(uvec3(_GLF_IDENTITY(1u, (1u) | (_GLF_IDENTITY(1u, (true ? 1u : _GLF_FUZZED(workgroup_size)))))), max(uvec3(_GLF_IDENTITY(1u, (1u) | (_GLF_IDENTITY(1u, (true ? 1u : _GLF_FUZZED(workgroup_size)))))), uvec3(_GLF_IDENTITY(1u, (1u) | (_GLF_IDENTITY(1u, (true ? 1u : _GLF_FUZZED(workgroup_size)))))))), ~ (~ _GLF_IDENTITY((_GLF_IDENTITY(uvec3(_GLF_IDENTITY(1u, (1u) | (_GLF_IDENTITY(1u, (true ? 1u : _GLF_FUZZED(workgroup_size)))))), (uvec3(_GLF_IDENTITY(1u, (1u) | (_GLF_IDENTITY(1u, (true ? 1u : _GLF_FUZZED(workgroup_size))))))) | uvec3(0u, 0u, 0u))), ((_GLF_IDENTITY(uvec3(_GLF_IDENTITY(1u, (1u) | (_GLF_IDENTITY(1u, (_GLF_IDENTITY(true ? 1u : _GLF_FUZZED(workgroup_size), ~ (_GLF_IDENTITY(~ (true ? 1u : _GLF_FUZZED(workgroup_size)), max(~ (true ? 1u : _GLF_FUZZED(workgroup_size)), ~ _GLF_IDENTITY((true ? 1u : _GLF_FUZZED(workgroup_size)), min((true ? 1u : _GLF_FUZZED(workgroup_size)), (true ? 1u : _GLF_FUZZED(workgroup_size))))))))))))), (uvec3(_GLF_IDENTITY(1u, (1u) | (_GLF_IDENTITY(1u, (true ? 1u : _GLF_FUZZED(workgroup_size))))))) | uvec3(0u, 0u, _GLF_IDENTITY(0u, clamp(_GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, uint(uint(0u)))) >> 0u), 0u, 0u)))))) - (uvec3(0u, 0u, 0u) | (uvec3(0u, 0u, 0u) | uvec3(0u, 0u, 0u)))))))), (uvec3(uvec3(_GLF_IDENTITY(uvec3(_GLF_IDENTITY(_GLF_IDENTITY(1u, (1u) | (_GLF_IDENTITY(1u, (true ? 1u : _GLF_FUZZED(workgroup_size))))), (false ? _GLF_FUZZED(workgroup_size) : _GLF_IDENTITY(1u, (1u) | (_GLF_IDENTITY(_GLF_IDENTITY(1u, (true ? 1u : _GLF_FUZZED(workgroup_size))), min(_GLF_IDENTITY(1u, (true ? 1u : _GLF_FUZZED(workgroup_size))), _GLF_IDENTITY(1u, (true ? 1u : _GLF_FUZZED(workgroup_size)))))))))), _GLF_IDENTITY(~ (~ (_GLF_IDENTITY(uvec3(_GLF_IDENTITY(1u, _GLF_IDENTITY((1u) | (_GLF_IDENTITY(1u, (true ? 1u : _GLF_FUZZED(workgroup_size)))), clamp((1u) | (_GLF_IDENTITY(1u, (true ? 1u : _GLF_FUZZED(workgroup_size)))), _GLF_IDENTITY((1u) | (_GLF_IDENTITY(1u, (true ? 1u : _GLF_FUZZED(workgroup_size)))), 1u * ((1u) | (_GLF_IDENTITY(1u, (true ? 1u : _GLF_FUZZED(workgroup_size)))))), (1u) | (_GLF_IDENTITY(1u, (_GLF_IDENTITY(true, false || (true)) ? 1u : _GLF_FUZZED(workgroup_size)))))))), (uvec3(_GLF_IDENTITY(_GLF_IDENTITY(1u, (1u) | _GLF_IDENTITY((_GLF_IDENTITY(1u, (true ? 1u : _GLF_FUZZED(workgroup_size)))), 0u ^ ((_GLF_IDENTITY(1u, (true ? 1u : _GLF_FUZZED(workgroup_size))))))), (_GLF_IDENTITY(1u, (1u) | _GLF_IDENTITY((_GLF_IDENTITY(1u, (true ? 1u : _GLF_FUZZED(workgroup_size)))), 0u ^ ((_GLF_IDENTITY(1u, (true ? 1u : _GLF_FUZZED(workgroup_size)))))))) | (_GLF_IDENTITY(1u, (1u) | _GLF_IDENTITY((_GLF_IDENTITY(1u, (true ? 1u : _GLF_FUZZED(workgroup_size)))), 0u ^ ((_GLF_IDENTITY(1u, (true ? 1u : _GLF_FUZZED(workgroup_size))))))))))) | uvec3(0u, 0u, 0u)))), max(_GLF_IDENTITY(~ (~ (_GLF_IDENTITY(uvec3(_GLF_IDENTITY(1u, (1u) | (_GLF_IDENTITY(1u, (true ? 1u : _GLF_FUZZED(workgroup_size)))))), (uvec3(_GLF_IDENTITY(1u, (1u) | (_GLF_IDENTITY(1u, (true ? 1u : _GLF_FUZZED(workgroup_size))))))) | _GLF_IDENTITY(uvec3(0u, 0u, _GLF_IDENTITY(0u, (0u) | 0u)), (uvec3(0u, 0u, _GLF_IDENTITY(0u, (0u) | 0u))) >> uvec3(0u, 0u, 0u))))), _GLF_IDENTITY(clamp(~ (~ (_GLF_IDENTITY(uvec3(_GLF_IDENTITY(1u, (1u) | (_GLF_IDENTITY(1u, (true ? 1u : _GLF_FUZZED(workgroup_size)))))), (uvec3(_GLF_IDENTITY(1u, (1u) | (_GLF_IDENTITY(1u, (_GLF_IDENTITY(true ? 1u : _GLF_FUZZED(workgroup_size), uint(uvec3(true ? 1u : _GLF_FUZZED(workgroup_size), 0u, _GLF_IDENTITY(1u, (1u) >> 0u)))))))))) | uvec3(0u, 0u, 0u)))), ~ (~ (_GLF_IDENTITY(uvec3(_GLF_IDENTITY(1u, (1u) | (_GLF_IDENTITY(1u, (true ? 1u : _GLF_FUZZED(workgroup_size)))))), (uvec3(_GLF_IDENTITY(1u, (1u) | (_GLF_IDENTITY(1u, (true ? 1u : _GLF_FUZZED(workgroup_size))))))) | uvec3(0u, 0u, 0u)))), _GLF_IDENTITY(~ (~ (_GLF_IDENTITY(uvec3(_GLF_IDENTITY(1u, (1u) | (_GLF_IDENTITY(1u, (true ? 1u : _GLF_FUZZED(workgroup_size)))))), (uvec3(_GLF_IDENTITY(_GLF_IDENTITY(1u, (1u) | (_GLF_IDENTITY(1u, (true ? 1u : _GLF_FUZZED(workgroup_size))))), (_GLF_IDENTITY(1u, (1u) | (_GLF_IDENTITY(1u, (true ? 1u : _GLF_FUZZED(workgroup_size)))))) * 1u))) | uvec3(0u, 0u, 0u)))), max(~ (~ (_GLF_IDENTITY(uvec3(_GLF_IDENTITY(1u, _GLF_IDENTITY((1u) | (_GLF_IDENTITY(1u, (true ? 1u : _GLF_FUZZED(workgroup_size)))), (_GLF_IDENTITY((1u) | (_GLF_IDENTITY(_GLF_IDENTITY(1u, (true ? 1u : _GLF_FUZZED(workgroup_size))), max(_GLF_IDENTITY(1u, (true ? 1u : _GLF_FUZZED(workgroup_size))), _GLF_IDENTITY(1u, (true ? 1u : _GLF_FUZZED(workgroup_size)))))), clamp((1u) | (_GLF_IDENTITY(1u, (true ? 1u : _GLF_FUZZED(workgroup_size)))), (_GLF_IDENTITY(1u, uint(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(1u, clamp(1u, 1u, 1u))))) | (_GLF_IDENTITY(1u, (true ? 1u : _GLF_FUZZED(workgroup_size)))), (1u) | (_GLF_IDENTITY(1u, (true ? 1u : _GLF_FUZZED(workgroup_size))))))) | ((1u) | (_GLF_IDENTITY(1u, (true ? 1u : _GLF_FUZZED(workgroup_size)))))))), (uvec3(_GLF_IDENTITY(1u, (1u) | (_GLF_IDENTITY(1u, (_GLF_IDENTITY(true ? 1u : _GLF_FUZZED(workgroup_size), min(_GLF_IDENTITY(true ? 1u : _GLF_FUZZED(workgroup_size), (true ? 1u : _GLF_FUZZED(workgroup_size)) * 1u), _GLF_IDENTITY(true ? 1u : _GLF_FUZZED(workgroup_size), max(true ? 1u : _GLF_FUZZED(workgroup_size), true ? 1u : _GLF_FUZZED(workgroup_size))))))))))) | uvec3(0u, 0u, 0u)))), _GLF_IDENTITY(~ (~ (_GLF_IDENTITY(uvec3(_GLF_IDENTITY(1u, (1u) | (_GLF_IDENTITY(1u, (true ? _GLF_IDENTITY(1u, ~ (_GLF_IDENTITY(~ (1u), (~ (1u)) | (~ (1u))))) : _GLF_FUZZED(workgroup_size)))))), (uvec3(_GLF_IDENTITY(1u, (1u) | (_GLF_IDENTITY(1u, (true ? 1u : _GLF_FUZZED(workgroup_size))))))) | uvec3(0u, 0u, 0u)))), (~ (~ (_GLF_IDENTITY(uvec3(_GLF_IDENTITY(1u, (1u) | (_GLF_IDENTITY(1u, (true ? _GLF_IDENTITY(1u, ~ (_GLF_IDENTITY(~ (1u), (~ (1u)) | (~ (1u))))) : _GLF_FUZZED(workgroup_size)))))), (uvec3(_GLF_IDENTITY(1u, (1u) | (_GLF_IDENTITY(1u, (true ? 1u : _GLF_FUZZED(workgroup_size))))))) | uvec3(0u, 0u, 0u))))) | uvec3(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)))))), uvec3(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)) ^ (clamp(~ (~ (_GLF_IDENTITY(uvec3(_GLF_IDENTITY(1u, (1u) | (_GLF_IDENTITY(1u, (true ? 1u : _GLF_FUZZED(workgroup_size)))))), (uvec3(_GLF_IDENTITY(1u, (1u) | (_GLF_IDENTITY(1u, (_GLF_IDENTITY(true ? 1u : _GLF_FUZZED(workgroup_size), uint(uvec3(true ? 1u : _GLF_FUZZED(workgroup_size), 0u, _GLF_IDENTITY(1u, (1u) >> 0u)))))))))) | uvec3(0u, 0u, 0u)))), ~ (~ (_GLF_IDENTITY(uvec3(_GLF_IDENTITY(1u, (1u) | (_GLF_IDENTITY(1u, (true ? 1u : _GLF_FUZZED(workgroup_size)))))), (uvec3(_GLF_IDENTITY(1u, (1u) | (_GLF_IDENTITY(1u, (true ? 1u : _GLF_FUZZED(workgroup_size))))))) | uvec3(0u, 0u, 0u)))), _GLF_IDENTITY(~ (~ (_GLF_IDENTITY(uvec3(_GLF_IDENTITY(1u, (1u) | (_GLF_IDENTITY(1u, (true ? 1u : _GLF_FUZZED(workgroup_size)))))), (uvec3(_GLF_IDENTITY(_GLF_IDENTITY(1u, (1u) | (_GLF_IDENTITY(1u, (true ? 1u : _GLF_FUZZED(workgroup_size))))), (_GLF_IDENTITY(1u, (1u) | (_GLF_IDENTITY(1u, (true ? 1u : _GLF_FUZZED(workgroup_size)))))) * 1u))) | uvec3(0u, 0u, 0u)))), max(~ (~ (_GLF_IDENTITY(uvec3(_GLF_IDENTITY(1u, _GLF_IDENTITY((1u) | (_GLF_IDENTITY(1u, (true ? 1u : _GLF_FUZZED(workgroup_size)))), (_GLF_IDENTITY((1u) | (_GLF_IDENTITY(_GLF_IDENTITY(1u, (true ? 1u : _GLF_FUZZED(workgroup_size))), max(_GLF_IDENTITY(1u, (true ? 1u : _GLF_FUZZED(workgroup_size))), _GLF_IDENTITY(1u, (true ? 1u : _GLF_FUZZED(workgroup_size)))))), clamp((1u) | (_GLF_IDENTITY(1u, (true ? 1u : _GLF_FUZZED(workgroup_size)))), (_GLF_IDENTITY(1u, uint(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(1u, clamp(1u, 1u, 1u))))) | (_GLF_IDENTITY(1u, (true ? 1u : _GLF_FUZZED(workgroup_size)))), (1u) | (_GLF_IDENTITY(1u, (true ? 1u : _GLF_FUZZED(workgroup_size))))))) | ((1u) | (_GLF_IDENTITY(1u, (true ? 1u : _GLF_FUZZED(workgroup_size)))))))), (uvec3(_GLF_IDENTITY(1u, (1u) | (_GLF_IDENTITY(1u, (_GLF_IDENTITY(true ? 1u : _GLF_FUZZED(workgroup_size), min(_GLF_IDENTITY(true ? 1u : _GLF_FUZZED(workgroup_size), (true ? 1u : _GLF_FUZZED(workgroup_size)) * 1u), _GLF_IDENTITY(true ? 1u : _GLF_FUZZED(workgroup_size), max(true ? 1u : _GLF_FUZZED(workgroup_size), true ? 1u : _GLF_FUZZED(workgroup_size))))))))))) | uvec3(0u, 0u, 0u)))), _GLF_IDENTITY(~ (~ (_GLF_IDENTITY(uvec3(_GLF_IDENTITY(1u, (1u) | (_GLF_IDENTITY(1u, (true ? _GLF_IDENTITY(1u, ~ (_GLF_IDENTITY(~ (1u), (~ (1u)) | (~ (1u))))) : _GLF_FUZZED(workgroup_size)))))), (uvec3(_GLF_IDENTITY(1u, (1u) | (_GLF_IDENTITY(1u, (true ? 1u : _GLF_FUZZED(workgroup_size))))))) | uvec3(0u, 0u, 0u)))), (~ (~ (_GLF_IDENTITY(uvec3(_GLF_IDENTITY(1u, (1u) | (_GLF_IDENTITY(1u, (true ? _GLF_IDENTITY(1u, ~ (_GLF_IDENTITY(~ (1u), (~ (1u)) | (~ (1u))))) : _GLF_FUZZED(workgroup_size)))))), (uvec3(_GLF_IDENTITY(1u, (1u) | (_GLF_IDENTITY(1u, (true ? 1u : _GLF_FUZZED(workgroup_size))))))) | uvec3(0u, 0u, 0u))))) | uvec3(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))))))))), ~ (~ (_GLF_IDENTITY(uvec3(_GLF_IDENTITY(1u, (1u) | (_GLF_IDENTITY(1u, (true ? 1u : _GLF_IDENTITY(_GLF_FUZZED(workgroup_size), ~ (~ (_GLF_IDENTITY(_GLF_FUZZED(workgroup_size), ~ (~ (_GLF_IDENTITY(_GLF_FUZZED(workgroup_size), clamp(_GLF_FUZZED(workgroup_size), _GLF_FUZZED(workgroup_size), _GLF_FUZZED(workgroup_size)))))))))))))), (uvec3(_GLF_IDENTITY(1u, (1u) | (_GLF_IDENTITY(1u, _GLF_IDENTITY((true ? 1u : _GLF_FUZZED(workgroup_size)), ((true ? 1u : _GLF_FUZZED(workgroup_size))) - 0u)))))) | uvec3(0u, 0u, 0u)))))))))) >> uvec3(0u, 0u, 0u))), (_GLF_IDENTITY(uvec3(_GLF_IDENTITY(1u, (1u) | _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(1u, (_GLF_IDENTITY(true ? _GLF_IDENTITY(1u, ~ (_GLF_IDENTITY(~ (1u), 0u | (_GLF_IDENTITY(~ (1u), min(_GLF_IDENTITY(~ (1u), min(~ (1u), ~ (1u))), ~ (1u))))))) : _GLF_FUZZED(workgroup_size), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(true ? _GLF_IDENTITY(1u, ~ (~ (1u))) : _GLF_FUZZED(workgroup_size), _GLF_IDENTITY(1u, uint(uvec4(1u, 0u, 0u, 1u))) * (_GLF_IDENTITY(true ? _GLF_IDENTITY(1u, ~ (~ (_GLF_IDENTITY(1u, (0u << _GLF_IDENTITY(uint(1u), uint(1u))) | (1u))))) : _GLF_FUZZED(workgroup_size), ~ (~ (_GLF_IDENTITY(true ? _GLF_IDENTITY(1u, ~ (~ (1u))) : _GLF_FUZZED(workgroup_size), (_GLF_IDENTITY(true ? _GLF_IDENTITY(1u, ~ (~ (1u))) : _GLF_FUZZED(workgroup_size), (true ? _GLF_IDENTITY(1u, ~ (~ (1u))) : _GLF_FUZZED(workgroup_size)) - 0u)) | (73642u & 0u))))))) : _GLF_FUZZED(subgroup_id)))))), ((_GLF_IDENTITY(1u, (_GLF_IDENTITY(true ? _GLF_IDENTITY(1u, ~ (_GLF_IDENTITY(~ (1u), 0u | (_GLF_IDENTITY(~ (1u), min(_GLF_IDENTITY(~ (1u), min(~ (1u), ~ (1u))), ~ (1u))))))) : _GLF_FUZZED(workgroup_size), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(true ? _GLF_IDENTITY(1u, ~ (~ (1u))) : _GLF_IDENTITY(_GLF_FUZZED(workgroup_size), 0u ^ (_GLF_FUZZED(workgroup_size))), _GLF_IDENTITY(1u, uint(uvec4(1u, 0u, 0u, 1u))) * (_GLF_IDENTITY(true ? _GLF_IDENTITY(1u, ~ (~ (_GLF_IDENTITY(1u, (0u << _GLF_IDENTITY(uint(1u), uint(1u))) | (1u))))) : _GLF_FUZZED(workgroup_size), ~ (~ (true ? _GLF_IDENTITY(1u, ~ (~ (1u))) : _GLF_FUZZED(workgroup_size)))))) : _GLF_FUZZED(subgroup_id))))))) + (28479u & 0u)), _GLF_IDENTITY(uint(uvec3(_GLF_IDENTITY((_GLF_IDENTITY(1u, (true ? 1u : _GLF_FUZZED(workgroup_size)))), max((_GLF_IDENTITY(1u, (true ? 1u : _GLF_FUZZED(workgroup_size)))), (_GLF_IDENTITY(1u, (true ? 1u : _GLF_FUZZED(workgroup_size)))))), 0u, 0u)), (uint(uvec3((_GLF_IDENTITY(1u, (true ? 1u : _GLF_FUZZED(workgroup_size)))), 0u, 0u))) << 0u)))), _GLF_IDENTITY(uvec3(uvec3(_GLF_IDENTITY(_GLF_IDENTITY(uvec3(_GLF_IDENTITY(1u, (1u) | (_GLF_IDENTITY(1u, (true ? 1u : _GLF_FUZZED(workgroup_size)))))), max(uvec3(_GLF_IDENTITY(1u, (1u) | (_GLF_IDENTITY(1u, (true ? 1u : _GLF_FUZZED(workgroup_size)))))), uvec3(_GLF_IDENTITY(1u, (1u) | (_GLF_IDENTITY(1u, (true ? 1u : _GLF_FUZZED(workgroup_size)))))))), ~ (~ _GLF_IDENTITY((_GLF_IDENTITY(uvec3(_GLF_IDENTITY(1u, (1u) | (_GLF_IDENTITY(1u, (true ? 1u : _GLF_FUZZED(workgroup_size)))))), (uvec3(_GLF_IDENTITY(1u, (1u) | (_GLF_IDENTITY(1u, _GLF_IDENTITY((true ? 1u : _GLF_FUZZED(workgroup_size)), ((true ? 1u : _GLF_FUZZED(workgroup_size))) / (0u | ((1u << _GLF_IDENTITY(uint(0u), uint(0u))) >> _GLF_IDENTITY(uint(0u), uint(0u)))))))))) | uvec3(0u, 0u, 0u))), ((_GLF_IDENTITY(uvec3(_GLF_IDENTITY(1u, (1u) | (_GLF_IDENTITY(_GLF_IDENTITY(1u, ~ (~ (1u))), (_GLF_IDENTITY(true ? 1u : _GLF_FUZZED(workgroup_size), ~ (_GLF_IDENTITY(~ (true ? 1u : _GLF_FUZZED(_GLF_IDENTITY(workgroup_size, (workgroup_size) >> 0u))), max(~ (true ? 1u : _GLF_FUZZED(workgroup_size)), ~ (true ? 1u : _GLF_FUZZED(workgroup_size))))))))))), (uvec3(_GLF_IDENTITY(1u, (1u) | (_GLF_IDENTITY(1u, (true ? 1u : _GLF_FUZZED(workgroup_size))))))) | uvec3(0u, 0u, 0u)))) - (uvec3(0u, 0u, _GLF_IDENTITY(0u, min(_GLF_IDENTITY(0u, (true ? 0u : _GLF_FUZZED(subgroup_local_id))), 0u))) | (_GLF_IDENTITY(uvec3(0u, 0u, 0u) | uvec3(0u, 0u, 0u), uvec3(_GLF_IDENTITY(uvec4(uvec3(0u, 0u, 0u) | uvec3(0u, 0u, 0u), uint(_GLF_ZERO(0.0, injectionSwitch.x))), (uvec4(uvec3(0u, 0u, 0u) | uvec3(0u, 0u, 0u), uint(_GLF_ZERO(0.0, injectionSwitch.x)))) + uvec4(0u, 0u, 0u, 0u))))))))))), (uvec3(uvec3(_GLF_IDENTITY(uvec3(_GLF_IDENTITY(_GLF_IDENTITY(1u, (1u) | (_GLF_IDENTITY(1u, (_GLF_IDENTITY(true ? 1u : _GLF_FUZZED(workgroup_size), uint(uvec2(_GLF_IDENTITY(true ? 1u : _GLF_FUZZED(workgroup_size), (true ? 1u : _GLF_FUZZED(workgroup_size)) ^ 0u), uint(_GLF_ONE(1.0, injectionSwitch.y))))))))), (false ? _GLF_FUZZED(workgroup_size) : _GLF_IDENTITY(1u, (1u) | (_GLF_IDENTITY(_GLF_IDENTITY(1u, (true ? 1u : _GLF_FUZZED(workgroup_size))), min(_GLF_IDENTITY(1u, (true ? 1u : _GLF_FUZZED(workgroup_size))), _GLF_IDENTITY(1u, (true ? 1u : _GLF_FUZZED(workgroup_size)))))))))), _GLF_IDENTITY(~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(uvec3(_GLF_IDENTITY(1u, _GLF_IDENTITY((1u) | (_GLF_IDENTITY(1u, (true ? 1u : _GLF_FUZZED(workgroup_size)))), clamp((1u) | (_GLF_IDENTITY(1u, (true ? 1u : _GLF_FUZZED(workgroup_size)))), _GLF_IDENTITY((1u) | (_GLF_IDENTITY(1u, (true ? 1u : _GLF_FUZZED(workgroup_size)))), 1u * ((1u) | (_GLF_IDENTITY(1u, (true ? 1u : _GLF_FUZZED(workgroup_size)))))), (1u) | (_GLF_IDENTITY(1u, (_GLF_IDENTITY(true, false || (true)) ? 1u : _GLF_FUZZED(workgroup_size)))))))), (uvec3(_GLF_IDENTITY(1u, (1u) | _GLF_IDENTITY((_GLF_IDENTITY(1u, (true ? 1u : _GLF_FUZZED(workgroup_size)))), 0u ^ ((_GLF_IDENTITY(1u, (true ? 1u : _GLF_FUZZED(workgroup_size))))))))) | uvec3(0u, 0u, 0u)), ~ (~ (_GLF_IDENTITY(uvec3(_GLF_IDENTITY(1u, _GLF_IDENTITY((1u) | (_GLF_IDENTITY(1u, (true ? 1u : _GLF_FUZZED(workgroup_size)))), clamp((1u) | (_GLF_IDENTITY(1u, (true ? 1u : _GLF_FUZZED(workgroup_size)))), _GLF_IDENTITY((1u) | (_GLF_IDENTITY(1u, (true ? 1u : _GLF_FUZZED(_GLF_IDENTITY(workgroup_size, max(_GLF_IDENTITY(workgroup_size, ~ (_GLF_IDENTITY(~ (workgroup_size), uint(uvec4(~ (workgroup_size), 1u, 0u, 0u))))), workgroup_size)))))), 1u * ((1u) | (_GLF_IDENTITY(1u, (true ? 1u : _GLF_FUZZED(workgroup_size)))))), (1u) | (_GLF_IDENTITY(1u, (_GLF_IDENTITY(true, false || (true)) ? 1u : _GLF_FUZZED(workgroup_size)))))))), (uvec3(_GLF_IDENTITY(1u, (1u) | _GLF_IDENTITY((_GLF_IDENTITY(1u, (true ? 1u : _GLF_FUZZED(workgroup_size)))), 0u ^ ((_GLF_IDENTITY(1u, (true ? 1u : _GLF_FUZZED(workgroup_size))))))))) | uvec3(0u, 0u, 0u))))))), max(_GLF_IDENTITY(~ (~ (_GLF_IDENTITY(uvec3(_GLF_IDENTITY(1u, (1u) | (_GLF_IDENTITY(1u, (true ? 1u : _GLF_FUZZED(workgroup_size)))))), (uvec3(_GLF_IDENTITY(1u, (1u) | (_GLF_IDENTITY(1u, (true ? 1u : _GLF_FUZZED(workgroup_size))))))) | _GLF_IDENTITY(uvec3(0u, 0u, _GLF_IDENTITY(0u, (0u) | 0u)), (uvec3(0u, 0u, _GLF_IDENTITY(0u, (0u) | 0u))) >> uvec3(0u, 0u, 0u))))), clamp(~ (~ (_GLF_IDENTITY(uvec3(_GLF_IDENTITY(1u, (1u) | (_GLF_IDENTITY(1u, (_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(true, bool(bool(true))), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), ! (! (bool(bvec3(_GLF_IDENTITY(true, bool(bool(true))), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))) ? 1u : _GLF_FUZZED(workgroup_size)))))), (uvec3(_GLF_IDENTITY(_GLF_IDENTITY(1u, (1u) | (_GLF_IDENTITY(1u, (_GLF_IDENTITY(true ? 1u : _GLF_FUZZED(workgroup_size), uint(uvec3(true ? 1u : _GLF_FUZZED(workgroup_size), 0u, _GLF_IDENTITY(1u, (1u) >> 0u)))))))), min(_GLF_IDENTITY(_GLF_IDENTITY(1u, (1u) | (_GLF_IDENTITY(1u, (_GLF_IDENTITY(true ? 1u : _GLF_FUZZED(workgroup_size), uint(uvec3(true ? 1u : _GLF_FUZZED(workgroup_size), 0u, _GLF_IDENTITY(1u, (1u) >> 0u)))))))), max(_GLF_IDENTITY(1u, (1u) | (_GLF_IDENTITY(1u, (_GLF_IDENTITY(true ? 1u : _GLF_FUZZED(workgroup_size), uint(uvec3(true ? 1u : _GLF_FUZZED(workgroup_size), 0u, _GLF_IDENTITY(1u, (1u) >> 0u)))))))), _GLF_IDENTITY(1u, (1u) | (_GLF_IDENTITY(1u, (_GLF_IDENTITY(true ? 1u : _GLF_FUZZED(workgroup_size), uint(uvec3(true ? 1u : _GLF_FUZZED(workgroup_size), 0u, _GLF_IDENTITY(1u, (1u) >> 0u)))))))))), _GLF_IDENTITY(_GLF_IDENTITY(1u, (1u) | (_GLF_IDENTITY(1u, (_GLF_IDENTITY(true ? 1u : _GLF_FUZZED(workgroup_size), uint(uvec3(true ? 1u : _GLF_FUZZED(workgroup_size), 0u, _GLF_IDENTITY(1u, (1u) >> 0u)))))))), (_GLF_IDENTITY(1u, (1u) | (_GLF_IDENTITY(1u, (_GLF_IDENTITY(true ? 1u : _GLF_FUZZED(workgroup_size), uint(uvec3(true ? 1u : _GLF_FUZZED(workgroup_size), 0u, _GLF_IDENTITY(1u, (1u) >> 0u))))))))) | (_GLF_IDENTITY(1u, (1u) | (_GLF_IDENTITY(1u, (_GLF_IDENTITY(true ? 1u : _GLF_FUZZED(workgroup_size), uint(uvec3(true ? 1u : _GLF_FUZZED(workgroup_size), 0u, _GLF_IDENTITY(1u, (1u) >> 0u)))))))))))))) | uvec3(0u, 0u, 0u)))), ~ (~ (_GLF_IDENTITY(uvec3(_GLF_IDENTITY(1u, (1u) | (_GLF_IDENTITY(1u, (true ? 1u : _GLF_FUZZED(workgroup_size)))))), (uvec3(_GLF_IDENTITY(1u, (1u) | (_GLF_IDENTITY(1u, (true ? 1u : _GLF_FUZZED(workgroup_size))))))) | uvec3(_GLF_IDENTITY(0u, clamp(0u, 0u, 0u)), 0u, 0u)))), _GLF_IDENTITY(~ (~ (_GLF_IDENTITY(uvec3(_GLF_IDENTITY(1u, (1u) | (_GLF_IDENTITY(1u, (_GLF_IDENTITY(true, ! (! (true))) ? 1u : _GLF_FUZZED(workgroup_size)))))), (uvec3(_GLF_IDENTITY(_GLF_IDENTITY(1u, (1u) | (_GLF_IDENTITY(1u, (true ? 1u : _GLF_FUZZED(workgroup_size))))), (_GLF_IDENTITY(1u, (1u) | (_GLF_IDENTITY(1u, (true ? 1u : _GLF_FUZZED(workgroup_size)))))) * 1u))) | uvec3(0u, 0u, 0u)))), max(~ (~ (_GLF_IDENTITY(uvec3(_GLF_IDENTITY(1u, _GLF_IDENTITY((1u) | (_GLF_IDENTITY(1u, (true ? 1u : _GLF_FUZZED(workgroup_size)))), (_GLF_IDENTITY((1u) | (_GLF_IDENTITY(_GLF_IDENTITY(1u, (true ? 1u : _GLF_FUZZED(workgroup_size))), max(_GLF_IDENTITY(1u, (true ? 1u : _GLF_FUZZED(workgroup_size))), _GLF_IDENTITY(1u, (true ? 1u : _GLF_FUZZED(workgroup_size)))))), clamp((1u) | (_GLF_IDENTITY(1u, (true ? 1u : _GLF_FUZZED(workgroup_size)))), (_GLF_IDENTITY(1u, uint(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(1u, clamp(1u, 1u, 1u))))) | (_GLF_IDENTITY(1u, (true ? 1u : _GLF_FUZZED(workgroup_size)))), (1u) | (_GLF_IDENTITY(_GLF_IDENTITY(1u, (1u) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x))), (true ? 1u : _GLF_FUZZED(workgroup_size))))))) | ((1u) | (_GLF_IDENTITY(1u, (true ? 1u : _GLF_FUZZED(workgroup_size)))))))), (uvec3(_GLF_IDENTITY(1u, (1u) | (_GLF_IDENTITY(1u, (_GLF_IDENTITY(true ? 1u : _GLF_FUZZED(workgroup_size), min(_GLF_IDENTITY(true ? 1u : _GLF_IDENTITY(_GLF_FUZZED(workgroup_size), clamp(_GLF_FUZZED(workgroup_size), _GLF_FUZZED(workgroup_size), _GLF_FUZZED(workgroup_size))), (_GLF_IDENTITY(true ? 1u : _GLF_FUZZED(workgroup_size), (_GLF_IDENTITY(true ? 1u : _GLF_FUZZED(workgroup_size), (true ? 1u : _GLF_FUZZED(workgroup_size)) ^ 0u)) << 0u)) * 1u), _GLF_IDENTITY(_GLF_IDENTITY(true ? 1u : _GLF_FUZZED(workgroup_size), max(true ? 1u : _GLF_FUZZED(workgroup_size), true ? 1u : _GLF_FUZZED(workgroup_size))), (_GLF_IDENTITY(_GLF_IDENTITY(true ? 1u : _GLF_FUZZED(workgroup_size), max(true ? 1u : _GLF_FUZZED(workgroup_size), true ? 1u : _GLF_FUZZED(workgroup_size))), (false ? _GLF_FUZZED(uvec4(165311u, 46356u, 193620u, 70151u).t) : _GLF_IDENTITY(true ? 1u : _GLF_FUZZED(workgroup_size), max(true ? 1u : _GLF_FUZZED(workgroup_size), true ? 1u : _GLF_FUZZED(workgroup_size)))))) * ((1u << _GLF_IDENTITY(uint(3u), uint(3u))) >> _GLF_IDENTITY(uint(3u), uint(3u)))))))))))) | uvec3(0u, 0u, 0u)))), _GLF_IDENTITY(~ (~ (_GLF_IDENTITY(uvec3(_GLF_IDENTITY(1u, (1u) | (_GLF_IDENTITY(1u, (true ? _GLF_IDENTITY(1u, ~ (_GLF_IDENTITY(~ (1u), (~ (1u)) | (~ (1u))))) : _GLF_FUZZED(workgroup_size)))))), (uvec3(_GLF_IDENTITY(1u, (1u) | (_GLF_IDENTITY(1u, (true ? 1u : _GLF_FUZZED(workgroup_size))))))) | uvec3(_GLF_IDENTITY(0u, (0u) / 1u), 0u, 0u)))), (~ (~ (_GLF_IDENTITY(uvec3(_GLF_IDENTITY(1u, (1u) | (_GLF_IDENTITY(1u, (true ? _GLF_IDENTITY(1u, ~ (_GLF_IDENTITY(~ (1u), (~ (1u)) | (~ (1u))))) : _GLF_FUZZED(workgroup_size)))))), (uvec3(_GLF_IDENTITY(1u, (1u) | (_GLF_IDENTITY(1u, (true ? 1u : _GLF_FUZZED(workgroup_size))))))) | uvec3(0u, 0u, 0u))))) | uvec3(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))))))), ~ (~ (_GLF_IDENTITY(uvec3(_GLF_IDENTITY(1u, _GLF_IDENTITY((1u), ((1u)) | uint(_GLF_ZERO(0.0, injectionSwitch.x))) | (_GLF_IDENTITY(1u, (true ? 1u : _GLF_FUZZED(workgroup_size)))))), _GLF_IDENTITY((uvec3(_GLF_IDENTITY(1u, (1u) | (_GLF_IDENTITY(1u, (true ? 1u : _GLF_FUZZED(workgroup_size))))))), (false ? _GLF_FUZZED(uvec3(90957u, 40710u, 9476u)) : (uvec3(_GLF_IDENTITY(1u, (1u) | (_GLF_IDENTITY(1u, (true ? 1u : _GLF_FUZZED(workgroup_size))))))))) | uvec3(0u, _GLF_IDENTITY(0u, (false ? _GLF_FUZZED(subgroup_size) : _GLF_IDENTITY(0u, ~ (~ (0u))))), 0u)))))))))) >> uvec3(0u, 0u, 0u)))) >> uvec3(0u, 0u, 0u)), _GLF_struct_0(mat3(1.0), bvec2(true), _GLF_IDENTITY(true, (true) && true), mat3x2(1.0), vec2(1.0)), 1.0, bvec4(true)), _GLF_IDENTITY(gl_WorkGroupID.x, max(gl_WorkGroupID.x, _GLF_IDENTITY(gl_WorkGroupID.x, (gl_WorkGroupID.x) - 0u))));
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false))))))))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        {
         do
          {
           return;
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        }
       return;
      }
     else
      {
      }
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), ! (! (bool(bvec4(false, false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))))
    return;
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(1, (1) - (0 | 0))); _injected_loop_counter ++)
    {
     do
      {
       return;
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      continue;
    }
  }
 do
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))))
    {
     if(_GLF_DEAD(false))
      return;
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 ^ 0)); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         return;
        }
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY(false || (_GLF_IDENTITY(true, _GLF_IDENTITY(! (! (_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec3(true, true, _GLF_IDENTITY(false, ! (! (false)))), bvec3(_GLF_IDENTITY(bvec3(bvec3(true, true, false)), bvec3(bvec4(bvec3(bvec3(true, true, false)), true))))))))), (_GLF_IDENTITY(_GLF_IDENTITY(! (! (true)), true && (! (! (_GLF_IDENTITY(true, bool(bool(_GLF_IDENTITY(true, (true) && true)))))))), ! (! (_GLF_IDENTITY(! (! (true)), true && (! (! (_GLF_IDENTITY(true, bool(bool(_GLF_IDENTITY(true, (true) && true)))))))))))) && true))), ! (! _GLF_IDENTITY((false || (_GLF_IDENTITY(true, ! (! (true))))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool((false || (_GLF_IDENTITY(true, ! (! (true)))))), ! (_GLF_IDENTITY(! _GLF_IDENTITY((bool((false || (_GLF_IDENTITY(true, ! (! (true))))))), ((bool((false || (_GLF_IDENTITY(true, ! (! (true)))))))) && true), false || _GLF_IDENTITY((! (bool((false || (_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), false || (_GLF_IDENTITY(! (true), bool(bool(! (true))))))))))))), bool(bvec3((! (bool((false || (_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), false || (_GLF_IDENTITY(_GLF_IDENTITY(! (true), (! (true)) || false), bool(bool(! (true))))))))))))), false, true))))))), (bool(_GLF_IDENTITY(bool((false || (_GLF_IDENTITY(_GLF_IDENTITY(true, true && (true)), ! (! (true)))))), ! (_GLF_IDENTITY(! (bool(_GLF_IDENTITY((false || (_GLF_IDENTITY(true, ! (! (true))))), ! (! ((false || (_GLF_IDENTITY(true, ! (! (true)))))))))), false || (! (bool((false || (_GLF_IDENTITY(true, _GLF_IDENTITY(! (! (true)), ! (! (! (! (_GLF_IDENTITY(true, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(true, true && _GLF_IDENTITY((true), false || (_GLF_IDENTITY((true), true && ((true)))))), true, false), bvec3(bvec4(bvec3(_GLF_IDENTITY(true, true && (true)), true, false), true)))), bool(bvec2(bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(true, true && (true)), true, false), bvec3(bvec4(bvec3(_GLF_IDENTITY(true, true && (true)), true, false), true)))), true)))))))))))))))))))) || false)))))))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              return;
             return;
             if(_GLF_DEAD(false))
              break;
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              break;
             return;
            }
          }
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          continue;
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          break;
         do
          {
           if(_GLF_DEAD(false))
            return;
          }
         while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) || false)));
         return;
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          break;
         return;
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(faceforward(vec2(-6.8, -2.7), injectionSwitch, vec2(69.88, -5.0))) : injectionSwitch)).y))))
        {
         if(_GLF_DEAD(false))
          return;
         return;
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(_GLF_IDENTITY(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false || (bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bvec3(true, false, false)))))
            {
             return;
             if(_GLF_DEAD(false))
              continue;
             if(_GLF_DEAD(false))
              return;
            }
           else
            {
            }
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          return;
         return;
        }
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         do
          {
           do
            {
             if(_GLF_DEAD(false))
              continue;
             if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, float(mat3x4(injectionSwitch.x, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0))), float(mat4(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, float(mat3x4(injectionSwitch.x, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0))), clamp(_GLF_IDENTITY(injectionSwitch.x, float(mat3x4(injectionSwitch.x, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0))), _GLF_IDENTITY(injectionSwitch.x, float(mat3x4(injectionSwitch.x, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0))), _GLF_IDENTITY(injectionSwitch.x, float(mat3x4(injectionSwitch.x, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0))))), 1.0, tan(0.0), 0.0, length(0.0), 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0))) > injectionSwitch.y))))
              break;
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), true, true, true)))), ! (! (! (_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), true, true, true))))))))))
                continue;
               if(_GLF_DEAD(false))
                continue;
               return;
              }
             else
              {
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(false))
          break;
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           do
            {
             if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec4((injectionSwitch.x > injectionSwitch.y), true, false, true))))))
              {
               if(_GLF_DEAD(false))
                return;
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  continue;
                 continue;
                }
               do
                {
                 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                  }
                 else
                  {
                   return;
                  }
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) && _GLF_IDENTITY(true, bool(bvec2(true, false)))), (injectionSwitch.x > injectionSwitch.y))))
              break;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              break;
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true), false, true)), ! (! (bool(bvec3(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true), false, true)))))))));
           if(_GLF_DEAD(false))
            return;
          }
         else
          {
          }
        }
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               if(_GLF_DEAD(false))
                return;
              }
             else
              {
              }
            }
           else
            {
            }
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                 if(_GLF_DEAD(false))
                  continue;
                }
               else
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (! (false))))), (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
                  return;
                 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 >> _GLF_IDENTITY(int(_GLF_IDENTITY(0, (0) | (0))), _GLF_IDENTITY(int(0), min(_GLF_IDENTITY(int(0), clamp(int(0), int(0), int(0))), int(0)))))); _injected_loop_counter --)
                  {
                   if(_GLF_DEAD(false))
                    return;
                   if(_GLF_DEAD(false))
                    continue;
                   if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, false || (false))) || false)))
                    {
                     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, false || (true))))
                      {
                       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(mat4x3(injectionSwitch.x, 1.0, 0.0, 1.0, 1.0, _GLF_IDENTITY(dot(vec4(0.0, 0.0, 1.0, 1.0), vec4(1.0, 1.0, 0.0, 0.0)), dot(vec4(_GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(1.8))), _GLF_IDENTITY(0.0, 1.0 * (0.0)), 1.0, 1.0), vec4(1.0, 1.0, 0.0, 0.0))), 1.0, 1.0, _GLF_ZERO(_GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(658.671) : 0.0)), injectionSwitch.x), 0.0, 0.0, 0.0)), float(vec4(float(mat4x3(injectionSwitch.x, 1.0, 0.0, 1.0, _GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, (1.0) / 1.0), 1.0, 1.0)), _GLF_IDENTITY(dot(vec4(0.0, 0.0, 1.0, _GLF_IDENTITY(1.0, (1.0) - 0.0)), vec4(1.0, 1.0, 0.0, 0.0)), dot(vec4(0.0, 0.0, 1.0, 1.0), vec4(1.0, 1.0, 0.0, 0.0))), 1.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0, 0.0)), 1.0, 0.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, 0.0))))))) > injectionSwitch.y)), true && (_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), mat2(1.0) * (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))), _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], min(injectionSwitch[0], injectionSwitch[0])), injectionSwitch[1])), injectionSwitch)).y) && true), false || (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(clamp(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), mat2(1.0) * (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))), _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], min(injectionSwitch[0], injectionSwitch[0])), injectionSwitch[1])), injectionSwitch), (clamp(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), mat2(1.0) * (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))), _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], min(injectionSwitch[0], injectionSwitch[0])), injectionSwitch[1])), injectionSwitch)) * vec2(1.0, 1.0))).y) && true)))))))))
                        return;
                       if(_GLF_WRAPPED_IF_FALSE(false))
                        {
                        }
                       else
                        {
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          break;
                         do
                          {
                           do
                            {
                             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                              return;
                             return;
                             if(_GLF_DEAD(false))
                              return;
                            }
                           while(_GLF_WRAPPED_LOOP(false));
                          }
                         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                        }
                      }
                     else
                      {
                       if(_GLF_DEAD(false))
                        break;
                      }
                     if(_GLF_DEAD(false))
                      break;
                    }
                   if(_GLF_DEAD(false))
                    continue;
                   if(_GLF_DEAD(false))
                    continue;
                  }
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + length(vec3(0.0, 0.0, 0.0)))))))
                  return;
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  continue;
                 if(_GLF_DEAD(false))
                  return;
                 if(_GLF_DEAD(false))
                  return;
                 do
                  {
                   return;
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    continue;
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
              }
             else
              {
              }
            }
           else
            {
            }
          }
         else
          {
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(false))
            return;
          }
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))
          return;
        }
       if(_GLF_DEAD(false))
        {
         do
          {
           return;
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), injectionSwitch)).x > injectionSwitch.y))))
        continue;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           return;
          }
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            break;
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               return;
               if(_GLF_DEAD(false))
                break;
              }
             if(_GLF_DEAD(false))
              break;
            }
           else
            {
            }
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           return;
          }
        }
      }
    }
   else
    {
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 uint workgroup_base = workgroup_size * _GLF_IDENTITY(_GLF_struct_replacement_2.workgroup_id, (0u >> _GLF_IDENTITY(uint(2u), uint(2u))) | (_GLF_struct_replacement_2.workgroup_id));
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
  }
 uint virtual_gid = workgroup_base + subgroup_id * subgroup_size + subgroup_local_id;
 uint next_virtual_gid = workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, max(subgroup_size, subgroup_size)) + (_GLF_IDENTITY((subgroup_local_id + _GLF_IDENTITY(1, 0 + (1))), uint(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), min(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), clamp(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(mix(float(_GLF_FUZZED(8.4)), _GLF_IDENTITY(float(_GLF_ZERO(0.0, injectionSwitch.x)), min(_GLF_IDENTITY(float(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), float(mat3x4(_GLF_ZERO(0.0, injectionSwitch.x), length(vec2(0.0, 0.0)), abs(0.0), 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0)))), (true ? float(_GLF_ZERO(0.0, injectionSwitch.x)) : _GLF_FUZZED(-1.5))), float(_GLF_ZERO(0.0, injectionSwitch.x)))), bool(true)), max(mix(float(_GLF_FUZZED(8.4)), float(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), (false ? _GLF_FUZZED(-5.1) : _GLF_ZERO(0.0, injectionSwitch.x)))), bool(true)), mix(float(_GLF_FUZZED(8.4)), _GLF_IDENTITY(float(_GLF_ZERO(0.0, injectionSwitch.x)), max(float(_GLF_ZERO(0.0, injectionSwitch.x)), _GLF_IDENTITY(float(_GLF_ZERO(0.0, injectionSwitch.x)), (_GLF_IDENTITY(float(_GLF_ZERO(0.0, injectionSwitch.x)), float(mat2x3(float(_GLF_ZERO(0.0, injectionSwitch.x)), 1.0, 1.0, 0.0, 0.0, 0.0)))) / 1.0))), bool(true))))), _GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(float(true))), bool(false)))), _GLF_ZERO(0.0, injectionSwitch.x)))))) ^ (_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id + _GLF_IDENTITY(1, 0 + (1))), max((subgroup_local_id + _GLF_IDENTITY(1, 0 + (1))), _GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) / 1u) + _GLF_IDENTITY(1, _GLF_IDENTITY(0, int(ivec2(0, 1))) + (1))), ((subgroup_local_id + _GLF_IDENTITY(1, 0 + (1)))) ^ 0u))), clamp(_GLF_IDENTITY((subgroup_local_id + _GLF_IDENTITY(1, 0 + (1))), max((subgroup_local_id + _GLF_IDENTITY(1, 0 + (1))), _GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) / 1u) + _GLF_IDENTITY(1, _GLF_IDENTITY(0, int(ivec2(0, 1))) + (1))), ((subgroup_local_id + _GLF_IDENTITY(1, 0 + (1)))) ^ 0u))), _GLF_IDENTITY((subgroup_local_id + _GLF_IDENTITY(1, 0 + (1))), max((subgroup_local_id + _GLF_IDENTITY(1, 0 + (1))), _GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) / 1u) + _GLF_IDENTITY(1, _GLF_IDENTITY(0, int(ivec2(0, 1))) + (1))), ((subgroup_local_id + _GLF_IDENTITY(1, 0 + (1)))) ^ 0u))), _GLF_IDENTITY((subgroup_local_id + _GLF_IDENTITY(1, 0 + (1))), max((subgroup_local_id + _GLF_IDENTITY(1, 0 + (1))), _GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) / 1u) + _GLF_IDENTITY(1, _GLF_IDENTITY(0, int(ivec2(0, 1))) + (1))), ((subgroup_local_id + _GLF_IDENTITY(1, 0 + (1)))) ^ 0u))))))) % _GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, (subgroup_size) | (subgroup_size))) >> 0u));
 buf[virtual_gid] = _GLF_IDENTITY(1, _GLF_IDENTITY(0, (0) | 0) ^ (1));
 for(int _injected_loop_counter = _GLF_IDENTITY(0, int(ivec3(_GLF_IDENTITY(0, min(0, 0)), 0, 0))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      continue;
     return;
     if(_GLF_DEAD(false))
      return;
    }
  }
 if(subgroup_local_id + _GLF_IDENTITY(1, max(1, 1)) < _GLF_IDENTITY(subgroup_size, uint(uvec3(subgroup_size, ((1u << _GLF_IDENTITY(uint(0u), uint(0u))) >> _GLF_IDENTITY(uint(0u), uint(0u))), 0u))))
  {
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = (0 & 39061); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       do
        {
         if(_GLF_DEAD(false))
          continue;
         return;
         if(_GLF_DEAD(false))
          return;
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) && true)));
      }
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 | 0)); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y), sqrt(0.0) + (clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)))), _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(_GLF_IDENTITY(0.0, float(_GLF_IDENTITY(mat3x2(_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-9819.2417)), float(0.0), bool(true))), 1.0, 1.0, 0.0, 1.0, 0.0), transpose(transpose(mat3x2(_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-9819.2417)), float(0.0), bool(true))), 1.0, 1.0, 0.0, 1.0, 0.0)))))), 0.0)).x > injectionSwitch.y) && true, (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(_GLF_IDENTITY(0.0, float(_GLF_IDENTITY(mat3x2(_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-9819.2417)), float(0.0), bool(true))), 1.0, 1.0, 0.0, 1.0, 0.0), transpose(transpose(mat3x2(_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-9819.2417)), float(0.0), bool(true))), 1.0, 1.0, 0.0, 1.0, 0.0)))))), 0.0)).x > injectionSwitch.y) && true, true && ((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(_GLF_IDENTITY(0.0, float(_GLF_IDENTITY(mat3x2(_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-9819.2417)), float(0.0), bool(true))), 1.0, 1.0, 0.0, 1.0, 0.0), transpose(transpose(mat3x2(_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-9819.2417)), float(0.0), bool(_GLF_IDENTITY(true, bool(bvec3(true, false, true)))))), 1.0, 1.0, 0.0, 1.0, 0.0)))))), 0.0)).x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], (injectionSwitch[1]) * 1.0))).y) && true))) || false))))), (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), (injectionSwitch) + vec2(0.0, _GLF_IDENTITY(0.0, (0.0) + 0.0))).x > injectionSwitch.y) && true))))) && true), (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, ! (! (false))), true))), (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(_GLF_IDENTITY(0.0, float(_GLF_IDENTITY(mat3x2(_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-9819.2417)), float(0.0), bool(_GLF_IDENTITY(true, ! (! (true)))))), 1.0, 1.0, 0.0, 1.0, 0.0), transpose(transpose(mat3x2(_GLF_IDENTITY(0.0, _GLF_IDENTITY(mix(float(_GLF_FUZZED(-9819.2417)), float(0.0), bool(true)), 1.0 * (_GLF_IDENTITY(mix(float(_GLF_FUZZED(-9819.2417)), float(0.0), bool(true)), float(vec4(mix(float(_GLF_FUZZED(-9819.2417)), float(0.0), bool(true)), 1.0, 0.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))))))))), 1.0, 1.0, 0.0, 1.0, 0.0)))))), 0.0)).x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y, max(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y))) && true))), (_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, ! (! (false))), true))), (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(_GLF_IDENTITY(0.0, float(_GLF_IDENTITY(mat3x2(_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-9819.2417)), float(0.0), bool(_GLF_IDENTITY(true, ! (! (true)))))), 1.0, 1.0, 0.0, 1.0, 0.0), transpose(transpose(mat3x2(_GLF_IDENTITY(0.0, _GLF_IDENTITY(mix(float(_GLF_FUZZED(-9819.2417)), float(0.0), bool(true)), 1.0 * (_GLF_IDENTITY(mix(float(_GLF_FUZZED(-9819.2417)), float(0.0), bool(true)), float(vec4(mix(float(_GLF_FUZZED(-9819.2417)), float(0.0), bool(true)), 1.0, 0.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))))))))), 1.0, 1.0, 0.0, 1.0, 0.0)))))), 0.0)).x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y, max(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y))) && true))), ! (! (_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, ! (! (false))), true))), (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(_GLF_IDENTITY(0.0, float(_GLF_IDENTITY(mat3x2(_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-9819.2417)), float(0.0), bool(_GLF_IDENTITY(true, ! (! (true)))))), 1.0, 1.0, 0.0, 1.0, 0.0), transpose(transpose(mat3x2(_GLF_IDENTITY(0.0, _GLF_IDENTITY(mix(float(_GLF_FUZZED(-9819.2417)), float(0.0), bool(true)), 1.0 * (_GLF_IDENTITY(mix(float(_GLF_FUZZED(-9819.2417)), float(0.0), bool(true)), float(vec4(mix(float(_GLF_FUZZED(-9819.2417)), float(0.0), bool(true)), 1.0, 0.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))))))))), 1.0, 1.0, 0.0, 1.0, 0.0)))))), 0.0)).x, _GLF_ONE(1.0, injectionSwitch.y) * (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(_GLF_IDENTITY(0.0, float(_GLF_IDENTITY(mat3x2(_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-9819.2417)), float(0.0), bool(_GLF_IDENTITY(true, ! (! (true)))))), 1.0, 1.0, 0.0, 1.0, 0.0), transpose(transpose(mat3x2(_GLF_IDENTITY(0.0, _GLF_IDENTITY(mix(float(_GLF_FUZZED(-9819.2417)), float(0.0), bool(true)), 1.0 * (_GLF_IDENTITY(mix(float(_GLF_FUZZED(-9819.2417)), float(0.0), bool(true)), float(vec4(mix(float(_GLF_FUZZED(-9819.2417)), float(0.0), bool(true)), 1.0, 0.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))))))))), 1.0, 1.0, 0.0, 1.0, 0.0)))))), 0.0)).x)) > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y, max(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y))) && true))))))) && true)), (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), false || (bool(injectionSwitch.x > injectionSwitch.y)))), _GLF_IDENTITY(bool(bvec4(bool(bool(injectionSwitch.x > injectionSwitch.y)), true, false, false)), false || (bool(bvec4(bool(bool(injectionSwitch.x > injectionSwitch.y)), true, false, false)))))), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), (injectionSwitch) + vec2(0.0, _GLF_IDENTITY(0.0, (0.0) + 0.0))).x > injectionSwitch.y) && true))))) && true)) || false))
        return;
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   else
    {
    }
   int i = _GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) >> (0 | 0))) - 0);
   do
    {
     do
      {
       if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), false, false, true))), true, false)), bool(bvec3(bool(bvec3(_GLF_DEAD(false), true, false)), false, false)))), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), false, false, true))), true, false)), bool(bvec3(bool(bvec3(_GLF_DEAD(false), true, false)), false, false))))))))
        return;
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, (false) || false)))));
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     do
      {
       return;
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
      return;
    }
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, vec2(mat3x2(injectionSwitch, 0.0, _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), round(length(normalize(abs(vec2(1.0, 1.0))))), determinant(mat2(1.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 1.0, 1.0))))).y))); _injected_loop_counter ++)
    {
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
             break;
            }
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             return;
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
          }
         do
          {
           return;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              return;
             break;
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false)))) && _GLF_IDENTITY(true, (true) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) || false))
          return;
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), ! (! _GLF_IDENTITY((false), ! (! (_GLF_IDENTITY((false), ((false)) || false))))))))
        break;
       atomicStore(buf[next_virtual_gid], uint(2), 4, 64, 4);
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec4(false, false, true, false))), (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))));
    }
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, true && (false)), false)))))
      return;
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          {
           do
            {
             return;
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
          }
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        return;
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), ! (! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
          {
           if(_GLF_DEAD(false))
            return;
           return;
          }
         return;
        }
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         do
          {
           if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0)))))
            return;
           return;
           do
            {
             if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) > injectionSwitch.y)), false || (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec3(injectionSwitch.x > injectionSwitch.y, false, false)))))))))))
              {
               for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
                {
                 do
                  {
                   return;
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                      {
                       return;
                      }
                     else
                      {
                      }
                    }
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                }
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) || false)));
        }
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = (0 & -51640); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
          {
           return;
          }
        }
      }
    }
   do
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         return;
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(0, min(0, 0))); _injected_loop_counter --)
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               return;
              }
             else
              {
              }
            }
          }
         return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
        }
      }
     else
      {
       for(int _injected_loop_counter = (1 ^ (0 >> _GLF_IDENTITY(int(8), int(8)))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 << _GLF_IDENTITY(int(7), int(7)))); _injected_loop_counter --)
        {
         do
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              return;
             if(_GLF_DEAD(false))
              return;
             return;
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec2(false, true))), (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, true)), true && (bool(bvec2(false, true)))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, _GLF_IDENTITY(true, (_GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, ! (! _GLF_IDENTITY((true), false || ((true)))))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) && (false))) || false)), true && (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, _GLF_IDENTITY(true, (_GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, ! (! _GLF_IDENTITY((true), false || ((true)))))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) && (false))) || false)), (_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, _GLF_IDENTITY(true, _GLF_IDENTITY((_GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, ! (! _GLF_IDENTITY(_GLF_IDENTITY((true), false || ((true))), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY((true), false || ((true))), (_GLF_IDENTITY((true), false || ((true)))) && true)), ! (! (bool(_GLF_IDENTITY(_GLF_IDENTITY((true), false || ((true))), (_GLF_IDENTITY((true), false || ((true)))) && true)))))))))))), true && ((_GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, ! (! _GLF_IDENTITY(_GLF_IDENTITY((true), false || ((true))), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY((true), false || ((true))), (_GLF_IDENTITY((true), false || ((true)))) && true)), ! (! (bool(_GLF_IDENTITY(_GLF_IDENTITY((true), false || ((true))), (_GLF_IDENTITY((true), false || ((true)))) && true)))))))))))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) && (false))) || false))) || false))))
            return;
           return;
          }
        }
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
          {
           if(_GLF_DEAD(false))
            continue;
           return;
          }
         do
          {
           return;
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - _GLF_IDENTITY(0.0, clamp(0.0, _GLF_IDENTITY(0.0, (0.0) - 0.0), 0.0))))) > injectionSwitch.y))))
      break;
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (injectionSwitch.x < injectionSwitch.y) && true), true, true, false)), bool(bvec3(bool(bvec4(_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (injectionSwitch.x < injectionSwitch.y) && true), true, true, _GLF_IDENTITY(false, (false) || false))), true, false))))) && _GLF_IDENTITY(true, ! (! (true))))))))
        {
         if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
          return;
         return;
         if(_GLF_DEAD(false))
          continue;
        }
       else
        {
         do
          {
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              return;
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x))) - 0.0)))); _injected_loop_counter --)
              {
               return;
              }
            }
           if(_GLF_DEAD(false))
            break;
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_DEAD(false))
          continue;
        }
      }
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_DEAD(false))
      continue;
    }
   while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(injectionSwitch[0], injectionSwitch[1]), mix(vec2(_GLF_FUZZED(5059.1716), _GLF_FUZZED((5.3))), vec2(_GLF_IDENTITY((vec2(injectionSwitch[0], injectionSwitch[1]))[0], mix(float((vec2(injectionSwitch[0], injectionSwitch[1]))[0]), float(_GLF_FUZZED(-66.63)), bool(false))), (vec2(_GLF_IDENTITY(injectionSwitch[0], max(_GLF_IDENTITY(injectionSwitch[0], (false ? _GLF_FUZZED(-2.4) : injectionSwitch[0])), _GLF_IDENTITY(injectionSwitch[0], float(mat4x2(injectionSwitch[0], 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0))))), injectionSwitch[1]))[1]), bvec2(true, true)))).y))), true && (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(injectionSwitch[0], injectionSwitch[1]), mix(vec2(_GLF_FUZZED(5059.1716), _GLF_FUZZED((5.3))), vec2(_GLF_IDENTITY((vec2(injectionSwitch[0], injectionSwitch[1]))[0], mix(float((vec2(injectionSwitch[0], injectionSwitch[1]))[0]), float(_GLF_FUZZED(-66.63)), bool(false))), (vec2(_GLF_IDENTITY(injectionSwitch[0], max(_GLF_IDENTITY(injectionSwitch[0], (false ? _GLF_FUZZED(-2.4) : injectionSwitch[0])), _GLF_IDENTITY(injectionSwitch[0], float(mat4x2(injectionSwitch[0], 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0))))), injectionSwitch[1]))[1]), bvec2(true, true)))), max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(injectionSwitch[0], injectionSwitch[1]), mix(vec2(_GLF_FUZZED(5059.1716), _GLF_FUZZED((5.3))), vec2(_GLF_IDENTITY((vec2(injectionSwitch[0], injectionSwitch[1]))[0], mix(float((vec2(injectionSwitch[0], injectionSwitch[1]))[0]), float(_GLF_FUZZED(-66.63)), bool(false))), (vec2(_GLF_IDENTITY(injectionSwitch[0], max(_GLF_IDENTITY(injectionSwitch[0], (false ? _GLF_FUZZED(-2.4) : injectionSwitch[0])), _GLF_IDENTITY(injectionSwitch[0], float(mat4x2(injectionSwitch[0], 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0))))), injectionSwitch[1]))[1]), bvec2(true, true)))), vec2(0.0, 0.0) + (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(injectionSwitch[0], injectionSwitch[1]), mix(vec2(_GLF_FUZZED(5059.1716), _GLF_FUZZED((5.3))), vec2(_GLF_IDENTITY((vec2(injectionSwitch[0], injectionSwitch[1]))[0], mix(float((vec2(injectionSwitch[0], injectionSwitch[1]))[0]), float(_GLF_FUZZED(-66.63)), bool(false))), (vec2(_GLF_IDENTITY(injectionSwitch[0], max(_GLF_IDENTITY(injectionSwitch[0], (false ? _GLF_FUZZED(-2.4) : injectionSwitch[0])), _GLF_IDENTITY(injectionSwitch[0], float(mat4x2(injectionSwitch[0], 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0))))), injectionSwitch[1]))[1]), bvec2(true, true)))))), _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(injectionSwitch[0], injectionSwitch[1]), mix(vec2(_GLF_FUZZED(5059.1716), _GLF_FUZZED((5.3))), vec2(_GLF_IDENTITY((vec2(injectionSwitch[0], injectionSwitch[1]))[0], mix(float((vec2(injectionSwitch[0], injectionSwitch[1]))[0]), float(_GLF_FUZZED(-66.63)), bool(false))), (vec2(_GLF_IDENTITY(injectionSwitch[0], max(_GLF_IDENTITY(injectionSwitch[0], (false ? _GLF_FUZZED(-2.4) : injectionSwitch[0])), _GLF_IDENTITY(injectionSwitch[0], float(mat4x2(injectionSwitch[0], 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0))))), injectionSwitch[1]))[1]), bvec2(true, true)))))).y))))));
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          return;
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 >> _GLF_IDENTITY(int(7), int(7)))); _injected_loop_counter --)
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             do
              {
               do
                {
                 do
                  {
                   atomicStore(buf[next_virtual_gid], uint(2), _GLF_IDENTITY(4, (4) - 0), 64, 4);
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(false))
                      continue;
                     return;
                    }
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    continue;
                   if(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, ! (! (false)))))))
                    continue;
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), ! (! (_GLF_WRAPPED_LOOP(false))))) && true)))));
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                return;
              }
            }
          }
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         return;
        }
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          return;
        }
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(8), int(8))); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, (1) / 1)); _injected_loop_counter ++)
      {
       return;
       if(_GLF_DEAD(false))
        return;
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 ^ 0)); _injected_loop_counter --)
        {
         return;
        }
      }
     if(_GLF_DEAD(false))
      return;
     do
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, ~ (~ _GLF_IDENTITY((_injected_loop_counter), max((_injected_loop_counter), (_injected_loop_counter))))) > 0); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              return;
             return;
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat3x4(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), _GLF_ONE(1.0, injectionSwitch.y), 1.0, tan(0.0), 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, round(length(normalize(1.0))))), (vec2(mat3x4(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), _GLF_ONE(1.0, injectionSwitch.y), 1.0, tan(0.0), 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, round(length(normalize(1.0)))))) + vec2(0.0, 0.0))).x > injectionSwitch.y))))
            break;
           continue;
          }
         return;
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       for(int _injected_loop_counter = (0 ^ 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(mat3x4(_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(max(injectionSwitch.x, injectionSwitch.x), 0.0 + (max(injectionSwitch.x, injectionSwitch.x)))), 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-8064.4008))), 1.0, 1.0))) > injectionSwitch.y))))
          return;
        }
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   for(int _injected_loop_counter = ((_GLF_IDENTITY(1, (_GLF_IDENTITY(true ? _GLF_IDENTITY(1, ~ (~ (1))) : _GLF_FUZZED(ivec3(-73520, -31677, -58802).z), 0 + (true ? _GLF_IDENTITY(1, ~ (~ (1))) : _GLF_FUZZED(ivec3(-73520, -31677, -58802).z))))) << _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), _GLF_IDENTITY(~ (~ (int(7))), (~ (~ (int(7)))) - 0)))) >> _GLF_IDENTITY(int(7), int(7))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != 0, true && (_injected_loop_counter != 0))); _injected_loop_counter --)
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || false)) || false)))
      continue;
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))
        break;
      }
     else
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_DEAD(false))
          continue;
        }
       else
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, vec2(mat4x2(injectionSwitch, 1.0, 0.0, 1.0, 0.0, _GLF_IDENTITY(cos(0.0), (false ? _GLF_FUZZED(-242.431) : cos(0.0))), 1.0))).x > injectionSwitch.y), ! (! ((_GLF_IDENTITY(injectionSwitch, vec2(mat4x2(injectionSwitch, 1.0, 0.0, 1.0, 0.0, _GLF_IDENTITY(cos(0.0), (false ? _GLF_FUZZED(-242.431) : cos(0.0))), 1.0))).x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)))).y)))))))
          {
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   return;
                   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))))
                    break;
                  }
                }
              }
             if(_GLF_DEAD(false))
              return;
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                continue;
               continue;
              }
             return;
            }
           if(_GLF_DEAD(false))
            continue;
          }
         else
          {
           if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y))) || false)))))), ! _GLF_IDENTITY((! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), ! (! ((! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))
            {
             if(_GLF_DEAD(false))
              break;
             break;
            }
           return;
           if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
            return;
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              continue;
             return;
            }
           if(_GLF_DEAD(false))
            return;
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          continue;
         return;
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(false))
        return;
       continue;
      }
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(-84.87)), vec2(_GLF_FUZZED(49.80), (injectionSwitch)[1]), bvec2(false, true))).y))))
  {
   for(int _injected_loop_counter = (_GLF_IDENTITY(0 | 0, clamp(0 | 0, 0 | 0, 0 | 0))); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), true && (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1)))) || false); _injected_loop_counter ++)
    {
     return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      break;
    }
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(_GLF_IDENTITY(1.6, (1.6) * 1.0), -461.124)) : injectionSwitch)).y))))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
