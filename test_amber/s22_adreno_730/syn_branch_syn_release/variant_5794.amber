#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(2.1), _GLF_FUZZED(vec4(5.8, -34.59, -1115.8564, 9.7).z)), bvec2(false, false))).x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y))))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(_GLF_IDENTITY(! (false), false || (! (false))), (_GLF_IDENTITY(! (false), false || (! (false)))) || _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - tan(vec2(0.0, 0.0))), injectionSwitch, injectionSwitch)).x > _GLF_IDENTITY(injectionSwitch.y, 1.0 * (injectionSwitch.y)))))))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, false, false, true)), bool(bool(bool(bvec4(false, false, false, true))))))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (false))))))))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_DEAD(false))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
  }
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y)))) && true))))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false)))) && true))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))), _GLF_IDENTITY(bool(bool(_GLF_DEAD(false))), ! (! (bool(bool(_GLF_DEAD(false)))))))))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-866.324) : _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (false))))))))
        barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_IDENTITY((injectionSwitch)[0], clamp(_GLF_IDENTITY((injectionSwitch)[0], ((injectionSwitch)[0]) + 0.0), (injectionSwitch)[0], (injectionSwitch)[0])), _GLF_FUZZED(0.3)), vec2(_GLF_FUZZED(-9.8), (injectionSwitch)[1]), bvec2(false, true))).x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec2(! (false), false)))))) || false), (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))))) && true))))))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
       barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), bool(bvec3(! (injectionSwitch.x > injectionSwitch.y), true, true)))))))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(false))
  barrier();
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), (_GLF_IDENTITY(false, true && (false))) || false)))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(injectionSwitch.x > injectionSwitch.y, false, _GLF_IDENTITY(false, ! (! (false))), false)))) && true)))))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))))), bool(bvec4(_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))), true && (! (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))))), false, _GLF_IDENTITY(false, (false) || false), _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y))))))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_DEAD(false), true, true))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         barrier();
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (! (bool(bvec3(false, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_DEAD(false))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)), ! (! (bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec2((injectionSwitch.x > injectionSwitch.y), true))))) || false)))))))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(_GLF_IDENTITY(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false), bvec3(bvec4(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false), true)))))))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, ! (! (false))), false, true, true))), (_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(-4.9) : _GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(_GLF_IDENTITY(-543.511, (_GLF_IDENTITY(-543.511, clamp(-543.511, -543.511, -543.511))) - 0.0))), float(injectionSwitch.x), bool(true)))), float(_GLF_FUZZED(-1.4)), bool(false))))) > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, ! (! (false))), true)))))
      barrier();
     barrier();
    }
   barrier();
  }
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((false) && true, true && ((false) && true)))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 uint workgroup_base = workgroup_size * _GLF_IDENTITY(_GLF_IDENTITY(workgroup_id, ~ (_GLF_IDENTITY(~ (workgroup_id), (~ (workgroup_id)) ^ 0u))), (workgroup_id) / 1u);
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint virtual_gid = _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, (workgroup_base) | _GLF_IDENTITY((workgroup_base), ((workgroup_base)) | ((workgroup_base)))) + subgroup_id * subgroup_size, _GLF_IDENTITY((_GLF_IDENTITY(workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, (subgroup_size) * 1u), (_GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_id, (subgroup_id) * 1u) * subgroup_size, 0u ^ (workgroup_base + subgroup_id * subgroup_size))) >> 0u)) * (_GLF_IDENTITY(((1u ^ 0u) << _GLF_IDENTITY(uint(3u), uint(3u))) >> _GLF_IDENTITY(uint(3u), uint(3u)), max(((1u ^ 0u) << _GLF_IDENTITY(uint(3u), uint(3u))) >> _GLF_IDENTITY(_GLF_IDENTITY(uint(3u), min(_GLF_IDENTITY(_GLF_IDENTITY(uint(3u), (false ? _GLF_FUZZED(workgroup_size) : _GLF_IDENTITY(uint(3u), 0u | (uint(3u))))), 0u | (uint(3u))), _GLF_IDENTITY(uint(3u), (_GLF_IDENTITY(uint(3u), clamp(uint(3u), uint(3u), uint(3u)))) - 0u))), uint(3u)), _GLF_IDENTITY(((1u ^ 0u) << _GLF_IDENTITY(_GLF_IDENTITY(uint(3u), uint(3u)), (_GLF_IDENTITY(uint(3u), uint(3u))) << 0u)) >> _GLF_IDENTITY(uint(3u), uint(3u)), min(((1u ^ 0u) << _GLF_IDENTITY(_GLF_IDENTITY(uint(3u), (true ? _GLF_IDENTITY(uint(3u), ~ (~ (uint(3u)))) : _GLF_FUZZED(workgroup_size))), uint(3u))) >> _GLF_IDENTITY(uint(_GLF_IDENTITY(3u, ~ _GLF_IDENTITY((~ (_GLF_IDENTITY(3u, uint(uvec3(3u, 1u, 0u))))), _GLF_IDENTITY(((~ (_GLF_IDENTITY(3u, uint(uvec3(3u, 1u, 0u)))))) * 1u, (((~ (_GLF_IDENTITY(3u, uint(uvec3(3u, 1u, 0u)))))) * 1u) - 0u)))), uint(3u)), ((1u ^ 0u) << _GLF_IDENTITY(uint(3u), uint(_GLF_IDENTITY(3u, ~ (_GLF_IDENTITY(~ (3u), _GLF_IDENTITY(~ (~ (~ (3u))), (~ (~ _GLF_IDENTITY((~ (3u)), max((~ (3u)), (~ (3u)))))) * 1u))))))) >> _GLF_IDENTITY(uint(3u), uint(3u))))))), (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, (_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, uint(uvec2(0u, 1u)))) - 0u) ^ (workgroup_base + subgroup_id * subgroup_size))) >> 0u), (_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, (_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, uint(uvec2(0u, 1u)))) - 0u) ^ (workgroup_base + subgroup_id * subgroup_size))) >> 0u)) / (1u | 1u))) * (_GLF_IDENTITY(((_GLF_IDENTITY(1u ^ 0u, (_GLF_IDENTITY(1u ^ 0u, (1u ^ 0u) * 1u)) >> 0u)) << _GLF_IDENTITY(uint(3u), uint(3u))) >> _GLF_IDENTITY(uint(3u), uint(3u)), max(_GLF_IDENTITY(((1u ^ 0u) << _GLF_IDENTITY(uint(3u), uint(_GLF_IDENTITY(3u, (3u) | (3u))))), (((1u ^ 0u) << _GLF_IDENTITY(uint(3u), uint(_GLF_IDENTITY(3u, (3u) | (3u)))))) ^ 0u) >> _GLF_IDENTITY(_GLF_IDENTITY(uint(3u), min(_GLF_IDENTITY(uint(3u), 0u | (uint(3u))), _GLF_IDENTITY(uint(3u), _GLF_IDENTITY((_GLF_IDENTITY(uint(3u), clamp(uint(3u), uint(3u), uint(3u)))) - 0u, (0u << _GLF_IDENTITY(uint(6u), uint(6u))) | ((_GLF_IDENTITY(uint(3u), clamp(uint(3u), uint(3u), uint(3u)))) - 0u))))), _GLF_IDENTITY(uint(3u), (false ? _GLF_FUZZED(subgroup_size) : uint(3u)))), _GLF_IDENTITY(((1u ^ 0u) << _GLF_IDENTITY(_GLF_IDENTITY(uint(3u), uint(3u)), (_GLF_IDENTITY(uint(3u), uint(3u))) << 0u)) >> _GLF_IDENTITY(uint(3u), uint(3u)), min(((1u ^ 0u) << _GLF_IDENTITY(uint(3u), uint(3u))) >> _GLF_IDENTITY(uint(_GLF_IDENTITY(3u, ~ (~ (_GLF_IDENTITY(3u, uint(uvec3(3u, 1u, 0u))))))), uint(3u)), (_GLF_IDENTITY((1u ^ 0u), (true ? _GLF_IDENTITY((1u ^ 0u), (true ? (1u ^ 0u) : _GLF_FUZZED(num_workgroup))) : _GLF_FUZZED(119173u))) << _GLF_IDENTITY(uint(3u), uint(_GLF_IDENTITY(_GLF_IDENTITY(3u, ~ (_GLF_IDENTITY(~ (3u), _GLF_IDENTITY(~ (~ (~ (3u))), (~ (~ _GLF_IDENTITY((~ (3u)), max((~ (3u)), (~ (3u)))))) * 1u)))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(3u, ~ (_GLF_IDENTITY(~ (3u), _GLF_IDENTITY(~ (~ (~ (_GLF_IDENTITY(3u, (3u) / 1u)))), (~ (~ _GLF_IDENTITY((~ (3u)), max((~ (3u)), (~ (_GLF_IDENTITY(3u, (0u << _GLF_IDENTITY(uint(4u), uint(4u))) ^ (_GLF_IDENTITY(3u, max(3u, _GLF_IDENTITY(3u, (3u) ^ 0u))))))))))) * _GLF_IDENTITY(1u, (1u) << (1u ^ 1u)))))), (_GLF_IDENTITY(_GLF_IDENTITY(3u, ~ (_GLF_IDENTITY(~ (3u), _GLF_IDENTITY(~ (~ (~ (3u))), (~ (~ _GLF_IDENTITY((~ (3u)), max(_GLF_IDENTITY((~ (3u)), ((~ (3u))) | (_GLF_IDENTITY((~ (3u)), uint(uint((~ (3u))))))), (_GLF_IDENTITY(~ (3u), clamp(_GLF_IDENTITY(~ (3u), uint(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(~ (3u), min(~ (3u), ~ (3u))), 1u), (uvec2(_GLF_IDENTITY(~ (3u), min(~ (3u), ~ (3u))), 1u)) | (uvec2(_GLF_IDENTITY(~ (3u), min(~ (3u), ~ (3u))), 1u))))), ~ (3u), ~ (3u)))))))) * 1u)))), uint(uvec2(_GLF_IDENTITY(3u, ~ (_GLF_IDENTITY(~ (3u), _GLF_IDENTITY(~ _GLF_IDENTITY((~ (~ (3u))), _GLF_IDENTITY(uint(uvec3((~ (~ (3u))), 0u, 0u)), max(uint(uvec3((~ (~ (3u))), 0u, 0u)), _GLF_IDENTITY(uint(uvec3((~ (~ _GLF_IDENTITY((3u), max((3u), (3u))))), 0u, 0u)), ~ (_GLF_IDENTITY(~ (uint(uvec3((~ (~ (3u))), 0u, 0u))), 0u | (~ (uint(uvec3((~ (~ (3u))), 0u, 0u)))))))))), (~ (~ _GLF_IDENTITY((~ (3u)), max((~ (3u)), (_GLF_IDENTITY(~ (3u), (~ (3u)) ^ 0u)))))) * 1u)))), 1u)))) | (_GLF_IDENTITY(3u, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(3u, 1u * (3u))), _GLF_IDENTITY(~ (~ (~ (3u))), (~ (~ _GLF_IDENTITY((~ (3u)), max((~ (3u)), (~ (3u)))))) * 1u)))))), _GLF_IDENTITY(3u, ~ (_GLF_IDENTITY(~ (3u), _GLF_IDENTITY(~ (~ (~ (3u))), (~ (~ _GLF_IDENTITY((~ (3u)), max(_GLF_IDENTITY((~ (3u)), (_GLF_IDENTITY(false, (false) || false) ? _GLF_FUZZED(packSnorm2x16(injectionSwitch)) : (~ (3u)))), (~ (3u)))))) * 1u)))), _GLF_IDENTITY(3u, ~ (_GLF_IDENTITY(~ (3u), _GLF_IDENTITY(~ (~ (~ (3u))), (~ (_GLF_IDENTITY(~ _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(~ (3u), (~ (3u)) << (0u | 0u))), max((~ (3u)), (~ (3u)))), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY((~ _GLF_IDENTITY((3u), (_GLF_IDENTITY((3u), (false ? _GLF_FUZZED(workgroup_base) : (3u)))) | ((3u)))), max((~ (3u)), (~ (3u)))) : _GLF_FUZZED((mat2x4(978.484, -620.763, -674.806, -66.25, -9.6, 5.5, 6396.2326, -50.99) , subgroup_local_id)))), uint(uvec4(_GLF_IDENTITY(~ _GLF_IDENTITY(_GLF_IDENTITY((~ (3u)), max((~ (3u)), (~ (3u)))), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY((~ (3u)), max((~ (3u)), (~ (3u)))) : _GLF_FUZZED((mat2x4(978.484, -620.763, -674.806, -66.25, -9.6, 5.5, 6396.2326, -50.99) , subgroup_local_id)))), uint(uvec4(~ _GLF_IDENTITY(_GLF_IDENTITY((~ (3u)), _GLF_IDENTITY(max((~ (3u)), (~ (3u))), (max((~ (3u)), (~ (3u)))) | 0u)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY((~ (3u)), max((~ (3u)), (~ (3u)))) : _GLF_FUZZED((mat2x4(978.484, -620.763, -674.806, -66.25, -9.6, 5.5, 6396.2326, -50.99) , subgroup_local_id)))), 1u, 1u, 0u))), 1u, 1u, 0u))))) * 1u))))))))) >> _GLF_IDENTITY(uint(3u), uint(3u))))))), ((_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, (_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, uint(uvec2(0u, 1u)))) - 0u) ^ (workgroup_base + subgroup_id * subgroup_size))) >> 0u), (_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, (_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, uint(uvec2(0u, 1u)))) - 0u) ^ (workgroup_base + subgroup_id * subgroup_size))) >> 0u)) / (1u | 1u))) * (_GLF_IDENTITY(((1u ^ 0u) << _GLF_IDENTITY(uint(3u), uint(3u))) >> _GLF_IDENTITY(uint(3u), uint(3u)), max(_GLF_IDENTITY((_GLF_IDENTITY((1u ^ 0u) << _GLF_IDENTITY(uint(3u), uint(_GLF_IDENTITY(3u, (3u) | _GLF_IDENTITY((3u), clamp((3u), _GLF_IDENTITY((3u), 1u * ((3u))), (3u)))))), 0u | (_GLF_IDENTITY((1u ^ 0u) << _GLF_IDENTITY(uint(3u), uint(_GLF_IDENTITY(3u, (3u) | _GLF_IDENTITY((3u), clamp((3u), _GLF_IDENTITY((3u), 1u * ((3u))), (3u)))))), ((1u ^ 0u) << _GLF_IDENTITY(uint(3u), uint(_GLF_IDENTITY(3u, (3u) | _GLF_IDENTITY((3u), clamp((3u), _GLF_IDENTITY((3u), 1u * ((3u))), (3u))))))) ^ 0u)))), (((1u ^ 0u) << _GLF_IDENTITY(uint(3u), uint(_GLF_IDENTITY(3u, (3u) | (3u)))))) ^ 0u) >> _GLF_IDENTITY(_GLF_IDENTITY(uint(3u), min(_GLF_IDENTITY(uint(3u), 0u | (uint(3u))), _GLF_IDENTITY(uint(3u), _GLF_IDENTITY((_GLF_IDENTITY(uint(3u), clamp(uint(3u), uint(3u), uint(3u)))) - 0u, (0u << _GLF_IDENTITY(uint(6u), uint(6u))) | ((_GLF_IDENTITY(uint(3u), clamp(uint(3u), uint(3u), uint(3u)))) - 0u))))), _GLF_IDENTITY(uint(3u), (false ? _GLF_FUZZED(subgroup_size) : uint(3u)))), _GLF_IDENTITY(((1u ^ 0u) << _GLF_IDENTITY(_GLF_IDENTITY(uint(3u), uint(3u)), (_GLF_IDENTITY(uint(3u), uint(3u))) << 0u)) >> _GLF_IDENTITY(uint(3u), uint(3u)), min(((1u ^ 0u) << _GLF_IDENTITY(uint(3u), uint(3u))) >> _GLF_IDENTITY(uint(_GLF_IDENTITY(3u, ~ (~ (_GLF_IDENTITY(3u, uint(uvec3(3u, 1u, 0u))))))), uint(3u)), (_GLF_IDENTITY((1u ^ 0u), (true ? _GLF_IDENTITY((1u ^ 0u), (true ? (1u ^ 0u) : _GLF_FUZZED(num_workgroup))) : _GLF_FUZZED(119173u))) << _GLF_IDENTITY(uint(3u), uint(_GLF_IDENTITY(_GLF_IDENTITY(3u, ~ (_GLF_IDENTITY(~ (3u), _GLF_IDENTITY(~ (~ (~ (3u))), (~ (~ _GLF_IDENTITY((~ (3u)), max((~ (3u)), (~ _GLF_IDENTITY((3u), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(atomicCompSwap(num_workgroup, num_workgroup, subgroup_local_id)) : _GLF_IDENTITY((3u), 1u * ((3u)))))))))) * 1u)))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(3u, ~ (_GLF_IDENTITY(~ (3u), _GLF_IDENTITY(~ (~ (~ (3u))), (~ (~ _GLF_IDENTITY((~ (3u)), max((~ (3u)), (~ (_GLF_IDENTITY(3u, (0u << _GLF_IDENTITY(uint(4u), uint(4u))) ^ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(3u, clamp(3u, 3u, 3u)), max(3u, _GLF_IDENTITY(3u, (3u) ^ 0u))), _GLF_IDENTITY(uint(uint(_GLF_IDENTITY(3u, max(3u, _GLF_IDENTITY(3u, (3u) ^ 0u))))), (uint(uint(_GLF_IDENTITY(3u, max(3u, _GLF_IDENTITY(3u, (3u) ^ 0u)))))) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x)))))))))))) * _GLF_IDENTITY(1u, (1u) << (_GLF_IDENTITY(1u ^ 1u, clamp(1u ^ 1u, _GLF_IDENTITY(1u ^ 1u, (1u ^ 1u) >> 0u), 1u ^ 1u)))))))), (_GLF_IDENTITY(_GLF_IDENTITY(3u, ~ (_GLF_IDENTITY(~ (3u), _GLF_IDENTITY(~ (~ (~ (3u))), (~ (~ _GLF_IDENTITY((~ (_GLF_IDENTITY(3u, max(_GLF_IDENTITY(3u, (3u) >> 0u), 3u)))), max((~ (3u)), (_GLF_IDENTITY(~ (3u), clamp(_GLF_IDENTITY(~ (3u), uint(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(~ (3u), min(~ (3u), ~ (3u))), 1u), (uvec2(_GLF_IDENTITY(~ (3u), min(~ _GLF_IDENTITY((3u), max((3u), _GLF_IDENTITY((3u), ((3u)) >> uint(_GLF_ZERO(0.0, injectionSwitch.x))))), ~ (3u))), 1u)) | (uvec2(_GLF_IDENTITY(~ (3u), min(~ (3u), ~ (_GLF_IDENTITY(3u, (_GLF_IDENTITY(3u, (3u) | (_GLF_IDENTITY(3u, (3u) | 0u)))) | (0u << _GLF_IDENTITY(uint(6u), uint(6u))))))), 1u))))), ~ (3u), ~ (3u)))))))) * 1u)))), uint(uvec2(_GLF_IDENTITY(3u, ~ (_GLF_IDENTITY(~ (3u), _GLF_IDENTITY(~ _GLF_IDENTITY((~ (~ (3u))), _GLF_IDENTITY(uint(uvec3((~ (_GLF_IDENTITY(~ (3u), (~ (3u)) / 1u))), 0u, 0u)), max(uint(uvec3((~ (~ (3u))), 0u, 0u)), _GLF_IDENTITY(uint(uvec3((~ (_GLF_IDENTITY(~ (3u), max(~ (3u), ~ (3u))))), 0u, 0u)), ~ (_GLF_IDENTITY(~ (uint(uvec3(_GLF_IDENTITY((~ (~ (3u))), ~ (_GLF_IDENTITY(~ ((~ (~ (3u)))), (~ ((~ (~ (3u))))) | (~ ((~ (~ (3u)))))))), 0u, 0u))), 0u | (~ (uint(uvec3((~ (~ (3u))), 0u, 0u)))))))))), (~ _GLF_IDENTITY((~ _GLF_IDENTITY((~ (3u)), max((~ (3u)), (_GLF_IDENTITY(~ (3u), (~ (3u)) ^ 0u))))), ((~ _GLF_IDENTITY((~ (3u)), max((~ (3u)), (_GLF_IDENTITY(~ (3u), (~ (3u)) ^ 0u)))))) | ((~ _GLF_IDENTITY((~ (3u)), max((~ (3u)), (_GLF_IDENTITY(~ (3u), (~ (3u)) ^ 0u)))))))) * 1u)))), 1u)))) | (_GLF_IDENTITY(3u, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(3u, 1u * (3u))), _GLF_IDENTITY(~ (~ (~ (3u))), (~ (~ _GLF_IDENTITY((~ (3u)), max(_GLF_IDENTITY((~ (3u)), clamp((~ (3u)), (~ (3u)), (~ (3u)))), (_GLF_IDENTITY(~ (3u), (~ (3u)) << 0u)))))) * 1u)))))), _GLF_IDENTITY(3u, ~ (_GLF_IDENTITY(~ (3u), _GLF_IDENTITY(~ (~ (~ (3u))), (_GLF_IDENTITY(~ (~ _GLF_IDENTITY((~ (3u)), max(_GLF_IDENTITY((~ (3u)), (false ? _GLF_FUZZED(packSnorm2x16(injectionSwitch)) : (~ (3u)))), (~ (3u))))), min(_GLF_IDENTITY(~ (~ _GLF_IDENTITY((~ (3u)), max(_GLF_IDENTITY((~ (3u)), (false ? _GLF_FUZZED(packSnorm2x16(injectionSwitch)) : (~ (3u)))), (~ (3u))))), clamp(~ (~ _GLF_IDENTITY((~ (3u)), max(_GLF_IDENTITY((~ (3u)), (false ? _GLF_FUZZED(packSnorm2x16(injectionSwitch)) : _GLF_IDENTITY((~ (3u)), 0u | ((~ (3u)))))), (~ (3u))))), ~ (~ _GLF_IDENTITY((~ (3u)), max(_GLF_IDENTITY((~ (3u)), (false ? _GLF_FUZZED(packSnorm2x16(injectionSwitch)) : (_GLF_IDENTITY(~ (3u), uint(uvec3(~ (3u), 0u, 1u)))))), (~ (3u))))), ~ (~ _GLF_IDENTITY((~ (3u)), max(_GLF_IDENTITY((~ (3u)), (false ? _GLF_FUZZED(packSnorm2x16(injectionSwitch)) : (~ (3u)))), (~ (3u))))))), ~ (~ _GLF_IDENTITY((~ (3u)), max(_GLF_IDENTITY((~ (3u)), (false ? _GLF_FUZZED(packSnorm2x16(injectionSwitch)) : (~ (3u)))), (~ (3u)))))))) * 1u)))), _GLF_IDENTITY(3u, ~ (_GLF_IDENTITY(~ (3u), _GLF_IDENTITY(~ (~ (~ (3u))), (~ (_GLF_IDENTITY(~ _GLF_IDENTITY(_GLF_IDENTITY((~ (3u)), max((~ (3u)), (~ (3u)))), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY((~ (3u)), max((~ (3u)), (~ (3u)))) : _GLF_FUZZED((mat2x4(978.484, -620.763, -674.806, -66.25, -9.6, 5.5, 6396.2326, -50.99) , subgroup_local_id)))), uint(uvec4(_GLF_IDENTITY(~ _GLF_IDENTITY(_GLF_IDENTITY((~ (3u)), max((~ (3u)), (~ (3u)))), (_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-49.58) : injectionSwitch.y)))) ? _GLF_IDENTITY((~ (3u)), max((~ (3u)), (~ (3u)))) : _GLF_IDENTITY(_GLF_FUZZED((mat2x4(978.484, -620.763, -674.806, -66.25, -9.6, 5.5, 6396.2326, -50.99) , subgroup_local_id)), min(_GLF_FUZZED((mat2x4(978.484, -620.763, -674.806, -66.25, -9.6, 5.5, 6396.2326, -50.99) , subgroup_local_id)), _GLF_FUZZED((mat2x4(978.484, -620.763, -674.806, -66.25, -9.6, 5.5, 6396.2326, -50.99) , subgroup_local_id)))))), uint(uvec4(~ _GLF_IDENTITY(_GLF_IDENTITY((~ (3u)), max((~ (3u)), (~ (3u)))), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY((~ (3u)), max((~ (_GLF_IDENTITY(3u, (false ? _GLF_FUZZED((workgroup_id - subgroup_size)) : _GLF_IDENTITY(3u, 0u + (3u)))))), (~ (3u)))) : _GLF_FUZZED((mat2x4(978.484, -620.763, -674.806, -66.25, -9.6, 5.5, 6396.2326, _GLF_IDENTITY(-50.99, 0.0 + (-50.99))) , subgroup_local_id)))), 1u, 1u, 0u))), 1u, 1u, 0u))))) * 1u))))))))) >> _GLF_IDENTITY(uint(3u), uint(3u)))))))) + 0u)) - 0u)), (_GLF_IDENTITY(workgroup_base, max(workgroup_base, workgroup_base)) + subgroup_id * subgroup_size) << 0u) + subgroup_local_id;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && _GLF_IDENTITY(true, bool(bvec4(true, false, true, true))))))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false)))), ! (! (_GLF_DEAD(false)))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     barrier();
    }
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, false, true), bvec3(bvec3(bvec3(false, false, _GLF_IDENTITY(true, ! (! (true)))))))))))
    barrier();
   barrier();
  }
 uint next_virtual_gid = workgroup_base + subgroup_id * subgroup_size + (_GLF_IDENTITY((subgroup_local_id + _GLF_IDENTITY(1, min(1, 1))) % subgroup_size, (_GLF_IDENTITY((subgroup_local_id + _GLF_IDENTITY(1, min(1, 1))) % subgroup_size, clamp((subgroup_local_id + _GLF_IDENTITY(1, min(_GLF_IDENTITY(1, min(1, _GLF_IDENTITY(1, (false ? _GLF_FUZZED(56684) : _GLF_IDENTITY(1, _GLF_IDENTITY(~ (~ (1)), (_GLF_IDENTITY(~ (~ (1)), (~ (~ _GLF_IDENTITY((1), clamp((1), _GLF_IDENTITY((1), min((1), _GLF_IDENTITY((1), ~ (~ ((1)))))), (1))))) / 1)) / ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3))))))))), 1))) % subgroup_size, (subgroup_local_id + _GLF_IDENTITY(1, min(1, 1))) % subgroup_size, (subgroup_local_id + _GLF_IDENTITY(1, min(1, 1))) % subgroup_size))) | 0u));
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec3(false, false, false))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, tan(vec2(0.0, 0.0)) + (injectionSwitch)), injectionSwitch)).y))))
  barrier();
 buf[virtual_gid] = 1;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false)))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat4x3(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)), injectionSwitch)), round(length(normalize(vec2(1.0, 1.0)))), sqrt(1.0), 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0), mat3(1.0) * (mat4x3(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)), injectionSwitch)), round(length(normalize(vec2(1.0, 1.0)))), sqrt(1.0), 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0))))).y))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(bool(_GLF_DEAD(false)), ! (! (bool(_GLF_DEAD(false))))))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_IDENTITY((injectionSwitch)[0], min(_GLF_IDENTITY((injectionSwitch)[0], mix(float((injectionSwitch)[0]), float(_GLF_FUZZED(-6.8)), _GLF_IDENTITY(bool(false), false || (bool(false))))), _GLF_IDENTITY((injectionSwitch)[0], ((injectionSwitch)[0]) / 1.0))), _GLF_FUZZED(vec2(2968.2437, 6.6).r)), vec2(_GLF_FUZZED(-9.9), (injectionSwitch)[1]), bvec2(false, true))).x > injectionSwitch.y)))))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(2.5)), float(injectionSwitch.x), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
   barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_DEAD(false)), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(! (_GLF_DEAD(false)), true && (! (_GLF_DEAD(false)))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false), bvec3(bvec4(bvec3(_GLF_IDENTITY(! (_GLF_DEAD(false)), true && (! (_GLF_DEAD(false)))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false), true))))), (! (_GLF_DEAD(false))) || false))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_TRUE(_GLF_IDENTITY(true, ! (! (true))), (injectionSwitch.x < injectionSwitch.y)) && (_GLF_DEAD(false))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), false)))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(subgroup_local_id + 1 < subgroup_size)
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))) && true))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   int i = _GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(-79860)));
   atomicStore(buf[next_virtual_gid], uint(2), _GLF_IDENTITY(4, (_GLF_IDENTITY(4, (_GLF_IDENTITY(4, (_GLF_IDENTITY(4, _GLF_IDENTITY(~ (~ (4)), clamp(~ (~ (4)), ~ (~ (4)), _GLF_IDENTITY(~ (~ (4)), clamp(~ (~ (4)), ~ (~ (4)), _GLF_IDENTITY(~ (~ (4)), max(~ (~ (4)), ~ (~ (4)))))))))) | (4))) / 1)) >> 0), 64, _GLF_IDENTITY(4, max(_GLF_IDENTITY(4, max(4, 4)), _GLF_IDENTITY(4, clamp(4, 4, 4)))));
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(mat2x4(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), 1.0, 0.0, tan(0.0), abs(0.0), 1.0, 1.0))).y) || _GLF_IDENTITY(false, (false) && true))) || false)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   atomicStore(buf[next_virtual_gid], uint(2), 4, 64, 4);
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), (_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), _GLF_IDENTITY(true && (_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), _GLF_IDENTITY((_GLF_IDENTITY(false, _GLF_IDENTITY(true, (true) && true) && (false))) || false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY((_GLF_IDENTITY(false, _GLF_IDENTITY(true, (true) && true) && (false))) || false, bool(bvec4((_GLF_IDENTITY(false, _GLF_IDENTITY(true, (true) && true) && (false))) || false, false, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), ! (! (_GLF_IDENTITY(! (_GLF_IDENTITY((_GLF_IDENTITY(false, _GLF_IDENTITY(true, (true) && true) && (false))) || false, bool(bvec4((_GLF_IDENTITY(false, _GLF_IDENTITY(true, (true) && true) && (false))) || false, false, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), false || (! (_GLF_IDENTITY((_GLF_IDENTITY(false, _GLF_IDENTITY(true, (true) && true) && (false))) || false, bool(bvec4((_GLF_IDENTITY(false, _GLF_IDENTITY(true, (true) && true) && (false))) || false, false, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))))))), (_GLF_IDENTITY(_GLF_IDENTITY(true && (_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), (_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, bool(bvec2(false, false)))))))) || false)), bool(bvec4(_GLF_IDENTITY(true, false || (true)) && (_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), (_GLF_IDENTITY(false, true && (false))) || false)), true, false, false))), (_GLF_IDENTITY(true && (_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), (_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, bool(bvec2(false, false)))))))) || false)), bool(bvec4(_GLF_IDENTITY(true, false || (true)) && (_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), (_GLF_IDENTITY(false, true && (false))) || false)), true, false, false)))) && true)) || false))) || false)))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false)))) && true))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), true, true, true))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       barrier();
      }
     barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bool(false))), false || (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bool(false))), (_GLF_IDENTITY(false, bool(bool(false)))) && true)))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-7.3)), float(injectionSwitch.x), bool(true))), injectionSwitch.x)) > injectionSwitch.y) && _GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec2(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec2(bvec3(bvec2(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false))))))))))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)))) > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, false, false)))))
        barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, true, true, false)), (bool(bvec4(false, true, true, false))) || false))))
        barrier();
       barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), ! (! (false))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), bool(bool(_GLF_IDENTITY(false, ! (! (false))))))))), false || _GLF_IDENTITY((_GLF_IDENTITY(false, ! (! (false)))), ! (! (_GLF_IDENTITY((_GLF_IDENTITY(false, ! (! (false)))), ((_GLF_IDENTITY(false, ! (! (false))))) || false)))))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, false)), true && (_GLF_IDENTITY(bool(bvec2(false, false)), true && (bool(bvec2(false, false)))))))), true && (_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec3(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec2(bvec2(false, false)))), false)))), _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), ! (! (_GLF_IDENTITY(! (true), (! (true)) && true)))))) && (bool(bvec2(false, false)))))))))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
