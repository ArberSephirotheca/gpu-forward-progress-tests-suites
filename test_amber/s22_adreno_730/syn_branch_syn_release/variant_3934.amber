#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(false))
  {
   do
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       else
        {
         return;
         do
          {
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
              {
               return;
              }
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, bool(bvec2(false, true))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))));
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bvec3(false, false, false)))));
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         return;
        }
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          return;
        }
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 & 49800)); _injected_loop_counter --)
      {
       return;
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     for(int _injected_loop_counter = (0 | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 & 1)); _GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) ^ (0 | 0)))
      {
       return;
      }
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      {
       do
        {
         do
          {
           return;
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))));
       if(_GLF_DEAD(false))
        return;
      }
    }
   else
    {
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (_GLF_IDENTITY((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(1, ~ (~ (1)))), 0 ^ (_GLF_IDENTITY(int(_GLF_IDENTITY(1, ~ (~ (1)))), 0 | (int(_GLF_IDENTITY(1, ~ (~ (1)))))))), int(1))), clamp((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(1, ~ (~ (1)))), 0 ^ (_GLF_IDENTITY(int(_GLF_IDENTITY(1, ~ (~ (1)))), 0 | (int(_GLF_IDENTITY(1, ~ (~ (1)))))))), int(1))), (1 << _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(1, ~ (~ (1)))), 0 ^ (_GLF_IDENTITY(int(_GLF_IDENTITY(1, ~ (~ (1)))), 0 | (int(_GLF_IDENTITY(1, ~ (~ (1)))))))), int(1))), (1 << _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(1, ~ (~ (1)))), 0 ^ (_GLF_IDENTITY(int(_GLF_IDENTITY(1, ~ (~ (1)))), 0 | (int(_GLF_IDENTITY(1, ~ (~ (1)))))))), int(1))))) >> _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), int(ivec4(int(1), 1, _GLF_IDENTITY(1, min(1, _GLF_IDENTITY(1, (1) / 1))), 1)))))); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, ! (! (false)))))))
          return;
         if(_GLF_DEAD(false))
          break;
         for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY((true ? injectionSwitch.x : _GLF_FUZZED(2.8)), min(_GLF_IDENTITY((true ? injectionSwitch.x : _GLF_FUZZED(2.8)), clamp((true ? injectionSwitch.x : _GLF_FUZZED(2.8)), (true ? injectionSwitch.x : _GLF_FUZZED(2.8)), _GLF_IDENTITY((true ? injectionSwitch.x : _GLF_FUZZED(2.8)), float(mat2x3((true ? injectionSwitch.x : _GLF_FUZZED(2.8)), 0.0, 1.0, 0.0, 0.0, 0.0))))), (true ? injectionSwitch.x : _GLF_FUZZED(2.8))))) < injectionSwitch.y)) && (_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
            return;
          }
        }
      }
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(58.06, _GLF_IDENTITY(9.2, max(9.2, _GLF_IDENTITY(_GLF_IDENTITY(9.2, float(vec3(_GLF_IDENTITY(9.2, (9.2) - 0.0), 0.0, 0.0))), 1.0 * (_GLF_IDENTITY(9.2, float(vec3(_GLF_IDENTITY(9.2, (9.2) - 0.0), 0.0, 0.0))))))))))).y))))
  {
   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), (_GLF_WRAPPED_IF_TRUE(true)) || false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   else
    {
    }
   return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], float(vec4(injectionSwitch[0], 0.0, 0.0, 1.0))), injectionSwitch[1])).x > injectionSwitch.y))))
  return;
 do
  {
   if(_GLF_DEAD(false))
    continue;
   if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, 1.0 * (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)))))) > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)))))
      break;
     for(int _injected_loop_counter = (1 | _GLF_IDENTITY(0, ~ (~ (0)))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       do
        {
         return;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))));
 for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
  {
   do
    {
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bvec2(injectionSwitch.x > injectionSwitch.y, true)), (bool(bvec2(injectionSwitch.x > injectionSwitch.y, true))) || false))))))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           do
            {
             if(_GLF_DEAD(false))
              continue;
             if(_GLF_DEAD(false))
              break;
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               return;
              }
             else
              {
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              continue;
             if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))
              continue;
            }
           while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) && true)));
          }
         if(_GLF_DEAD(false))
          return;
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (! (false))))), _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))))))));
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 do
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
    {
     for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0), ! (! (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != 0, ! (! (_GLF_IDENTITY(_injected_loop_counter != 0, _GLF_IDENTITY(bool(bvec2(_injected_loop_counter != 0, true)), (bool(bvec2(_injected_loop_counter != 0, true))) || false))))))))), false || (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 0)))))); _injected_loop_counter --)
      {
       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true && (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))
        {
         return;
        }
       else
        {
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          break;
         break;
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         return;
        }
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(false))
        continue;
      }
     else
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            return;
           return;
          }
        }
       else
        {
        }
      }
     do
      {
       do
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             do
              {
               if(_GLF_DEAD(false))
                return;
              }
             while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_LOOP(false)), true && (! (_GLF_WRAPPED_LOOP(false)))))), true, false)), (bool(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_LOOP(false)), true && (! (_GLF_WRAPPED_LOOP(false)))))), _GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, (true) && true))), false))) && true)));
            }
          }
         else
          {
          }
         if(_GLF_DEAD(false))
          break;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     do
      {
       if(_GLF_DEAD(false))
        return;
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))))
    continue;
   if(_GLF_DEAD(false))
    break;
  }
 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, true && (false)), true, true, false))), false || (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, true && (false)), true, true, false))), ! (! (_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, true && (false)), true, true, false)))))), (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, true && (false)), true, true, false))), ! (! (_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, true && (false)), true, true, false))))))) && true)))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, true && _GLF_IDENTITY((_GLF_IDENTITY(false, ! (! (false)))), ((_GLF_IDENTITY(false, ! (! (false))))) && true)), _GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, (true) && true))), true, false)))), bool(bvec3(_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, true && _GLF_IDENTITY((_GLF_IDENTITY(false, ! (! (false)))), ((_GLF_IDENTITY(false, ! (! (false))))) && true)), _GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, (true) && true))), true, false)))), ! (! (! (_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, true && _GLF_IDENTITY((_GLF_IDENTITY(false, ! (! (false)))), ((_GLF_IDENTITY(false, ! (! (false))))) && true)), _GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, (true) && true))), true, false))))))), true, false))), false || (! (_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), false || (_GLF_IDENTITY(false, true && (false)))))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), false || (_GLF_IDENTITY(false, true && (false)))))), false || (_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), false || (_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bool(false)))) && true), true && (false))))))))) || false), true, true, false)))))))))))));
 do
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
    {
     if(_GLF_DEAD(false))
      return;
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, clamp(_injected_loop_counter, _injected_loop_counter, _injected_loop_counter)), (true ? _GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, clamp(_injected_loop_counter, _injected_loop_counter, _injected_loop_counter)), (_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, clamp(_injected_loop_counter, _injected_loop_counter, _injected_loop_counter)), max(_GLF_IDENTITY(_injected_loop_counter, clamp(_injected_loop_counter, _injected_loop_counter, _GLF_IDENTITY(_injected_loop_counter, max(_injected_loop_counter, _injected_loop_counter)))), _GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, clamp(_injected_loop_counter, _injected_loop_counter, _injected_loop_counter)), (_GLF_IDENTITY(_injected_loop_counter, clamp(_injected_loop_counter, _injected_loop_counter, _injected_loop_counter))) | (_GLF_IDENTITY(_injected_loop_counter, clamp(_injected_loop_counter, _injected_loop_counter, _injected_loop_counter))))))) >> _GLF_IDENTITY(0, (_GLF_IDENTITY(0, (true ? _GLF_IDENTITY(0, (0) << 0) : _GLF_FUZZED(_injected_loop_counter)))) << (0 | int(_GLF_ZERO(0.0, injectionSwitch.x))))) : _GLF_FUZZED(_injected_loop_counter))) > (_GLF_IDENTITY(0, max(0, 0)) >> _GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), 0 ^ (_GLF_IDENTITY(int(4), int(4)))))); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          break;
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_IDENTITY((injectionSwitch), (true ? (injectionSwitch) : _GLF_FUZZED(acosh(vec2(-2.3, -6.8)))))[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED((-35.76 / -8.9)), _GLF_FUZZED(-362.787)), bvec2(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))).x > injectionSwitch.y))))
            break;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
          }
         else
          {
           if(_GLF_DEAD(false))
            continue;
           for(int _injected_loop_counter = _GLF_IDENTITY((0 >> _GLF_IDENTITY(int(7), int(7))), 0 | ((0 >> _GLF_IDENTITY(int(7), int(7))))); _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               return;
              }
             else
              {
              }
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))
              break;
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               return;
              }
             else
              {
              }
            }
          }
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            return;
          }
         else
          {
          }
        }
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(false))
        {
         do
          {
           if(_GLF_DEAD(false))
            continue;
           return;
           if(_GLF_DEAD(false))
            continue;
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(0), int(0)), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(int(0), int(0)), (_GLF_IDENTITY(int(0), int(0))) | (_GLF_IDENTITY(int(0), int(0)))))))) >> _GLF_IDENTITY(int(0), int(0))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != 0, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && _GLF_IDENTITY((_injected_loop_counter != 0), ((_injected_loop_counter != 0)) || false))); _GLF_IDENTITY(_injected_loop_counter --, (_GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) - 0)) - 0))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                continue;
               break;
              }
             if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec4(_GLF_DEAD(false), true, false, false)), _GLF_IDENTITY((bool(bvec4(_GLF_DEAD(false), true, false, false))) && true, bool(bool((bool(bvec4(_GLF_DEAD(false), true, false, false))) && true)))), bool(bvec4(_GLF_IDENTITY(bool(bvec4(_GLF_DEAD(false), true, false, false)), _GLF_IDENTITY((bool(bvec4(_GLF_DEAD(false), true, false, false))) && true, bool(_GLF_IDENTITY(bool((bool(bvec4(_GLF_DEAD(false), true, false, false))) && true), (bool((bool(bvec4(_GLF_DEAD(false), true, false, false))) && true)) && true)))), true, false, false)))), false))))
              {
               if(_GLF_DEAD(false))
                return;
               break;
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              continue;
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_DEAD(false))
                break;
               if(_GLF_DEAD(false))
                break;
               return;
              }
             if(_GLF_DEAD(false))
              break;
             if(_GLF_DEAD(false))
              continue;
             if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
              continue;
            }
          }
        }
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)), true && (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)), _GLF_IDENTITY((! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true))) || false, ((! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / round(length(normalize(vec2(1.0, 1.0))))) > injectionSwitch.y))) && true))) || false) && true))))))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true, false)))))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             return;
            }
           else
            {
            }
           if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), ! (_GLF_IDENTITY(! (! (_GLF_DEAD(false))), true && (! (! (_GLF_DEAD(false))))))))))
            break;
          }
         if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_DEAD(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))))
          {
           do
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               return;
              }
             else
              {
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         if(_GLF_DEAD(false))
          return;
         break;
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)))
          {
          }
         else
          {
           return;
          }
        }
       if(_GLF_DEAD(false))
        continue;
      }
     if(_GLF_DEAD(false))
      continue;
     do
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y) && true)))))
          {
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_DEAD(false))
            return;
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             return;
            }
          }
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(6.7)), float(injectionSwitch.y), bool(true)))))))
          break;
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))));
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(false))
  return;
 uint num_workgroup = _GLF_IDENTITY(gl_NumWorkGroups, uvec3(_GLF_IDENTITY(gl_NumWorkGroups[0], (gl_NumWorkGroups[0]) / ((1u << _GLF_IDENTITY(uint(6u), uint(6u))) >> _GLF_IDENTITY(uint(6u), uint(6u)))), gl_NumWorkGroups[1], gl_NumWorkGroups[2])).x;
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(4.0, 48.05)))).x > injectionSwitch.y))))
  return;
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(injectionSwitch.x > injectionSwitch.y)))))), (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-21.92)), float(injectionSwitch.x), bool(true))) > _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-934.885) : injectionSwitch.y)))))) || false))
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(-9.8) : injectionSwitch.x)) > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y))))
      return;
    }
   if(_GLF_DEAD(false))
    return;
   return;
  }
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec3(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (injectionSwitch.x > injectionSwitch.y)), false, false)))))))
    return;
  }
 else
  {
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       return;
      }
    }
  }
 else
  {
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
  return;
 for(int _injected_loop_counter = (1 & int(_GLF_ONE(1.0, injectionSwitch.y))); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   else
    {
    }
  }
 uint workgroup_base = workgroup_size * _GLF_IDENTITY(workgroup_id, (workgroup_id) << 0u);
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(false, bool(bvec2(false, true)))), bvec2(bvec4(bvec2(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(false, bool(bvec2(false, true)))), true, true)))), false || (bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(false, bool(bvec2(false, true)))), bvec2(bvec4(bvec2(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(false, bool(bvec2(false, true)))), true, true)))))))))))
    {
    }
   else
    {
     return;
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
      return;
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)))))
  return;
 uint virtual_gid = _GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, (workgroup_base + subgroup_id * subgroup_size) << (13372u & 0u)) + subgroup_local_id;
 uint next_virtual_gid = workgroup_base + subgroup_id * subgroup_size + ((subgroup_local_id + 1) % subgroup_size);
 if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_DEAD(false))
  return;
 for(int _injected_loop_counter = 0; _GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && _GLF_IDENTITY((_GLF_WRAPPED_LOOP(_injected_loop_counter != 1)), false || ((_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1)), (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1))) && true))))))), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && _GLF_IDENTITY((_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), bool(bvec2(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), false || (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1)))) || false), true)))), false || ((_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1)), (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1))) && true)))))))))); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    continue;
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bool(true)), true && (bool(bool(true))))))))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), false || (! (false))))), _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y))))))))
        continue;
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(false))
        return;
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
        {
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
          continue;
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
         if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
          return;
        }
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true))
        continue;
       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), _GLF_IDENTITY((_GLF_WRAPPED_IF_FALSE(false)) || _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-9.2), _GLF_FUZZED((-6.9 + 22.36))), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, _GLF_IDENTITY(true, true && (true))))).y)), _GLF_IDENTITY(bool(bvec4((_GLF_WRAPPED_IF_FALSE(false)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), true && (_GLF_IDENTITY(false, false || (false)))), false, true)), (bool(bvec4(_GLF_IDENTITY((_GLF_WRAPPED_IF_FALSE(false)) || _GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y)), ((_GLF_WRAPPED_IF_FALSE(false)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || _GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), ! (! (_GLF_IDENTITY(false, ! (! (false))))))), _GLF_IDENTITY(false, _GLF_IDENTITY(false || (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec4(false, false, false, _GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).y, clamp(_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).y, _GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).y, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-369.343)), bool(_GLF_IDENTITY(false, bool(bvec3(false, false, false)))))), 1.0) * (injectionSwitch)).y, clamp(_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).y, _GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).y, _GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).y)))))))))) && true)), (false || (_GLF_IDENTITY(false, (false) && true))) && true)), _GLF_IDENTITY(false, ! (! (false))), true))) || false))))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))))
            return;
          }
        }
       else
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              return;
             for(int _injected_loop_counter = (_GLF_IDENTITY(_GLF_IDENTITY(1, (1) >> 0), (false ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(1, clamp(1, 1, 1)))) | 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                return;
               return;
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              continue;
            }
          }
         if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec4(_GLF_DEAD(false), false, _GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (! (false))))), false)), false || (bool(bvec4(_GLF_DEAD(false), false, false, false)))), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bool(bvec4(_GLF_DEAD(false), false, _GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (! (false))))), false)), false || (bool(bvec4(_GLF_DEAD(false), false, false, false)))), true, true), bvec3(bvec4(bvec3(_GLF_IDENTITY(bool(bvec4(_GLF_DEAD(false), false, _GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (! (false))))), false)), false || (bool(bvec4(_GLF_DEAD(false), false, false, false)))), true, true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))
          {
           if(_GLF_DEAD(false))
            return;
           do
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
                break;
               return;
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bool(false)))) || false)))
                  break;
                 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-443.224, -3095.2026)) : injectionSwitch)).y))))
                  {
                  }
                 else
                  {
                   return;
                  }
                }
              }
            }
           while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), true && (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), (_GLF_WRAPPED_LOOP(false)) || false)), bool(bvec4(bool(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), (_GLF_WRAPPED_LOOP(false)) || false)), true, false, true))))), bool(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), (_GLF_WRAPPED_LOOP(false)) || false)), bool(bvec4(bool(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), (_GLF_WRAPPED_LOOP(false)) || false)), true, false, true))))), false, false))))));
           if(_GLF_DEAD(false))
            continue;
          }
         if(_GLF_DEAD(false))
          break;
         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), bool(bvec4(bool(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, true)))))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
           return;
          }
         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
          break;
         if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), ! (! (_GLF_WRAPPED_IF_TRUE(true)))))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (false)), true && ((! (false))))))))))))
            {
             for(int _injected_loop_counter = (1 | (1 & 1)); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 | 0)); _GLF_IDENTITY(_injected_loop_counter --, 0 | (_injected_loop_counter --)))
              {
               return;
              }
            }
           if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))), false || _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec3(false, false, false)), true && (bool(bvec3(false, false, false)))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(bool(bvec3(false, false, false)), true && (bool(bvec3(false, false, false)))), ! (! (_GLF_IDENTITY(bool(bvec3(false, false, false)), true && (bool(bvec3(false, false, false))))))))))))) || false), (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec3(false, false, false)), true && (bool(bvec3(false, false, false)))), (_GLF_IDENTITY(_GLF_IDENTITY(bool(bvec3(false, false, false)), true && (_GLF_IDENTITY(bool(bvec3(false, false, false)), true && (bool(bvec3(false, false, false)))))), ! (! (_GLF_IDENTITY(bool(bvec3(false, false, false)), true && (bool(bvec3(false, _GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, true && (false)), true, true, true))), false)))))))) || false)))) || false)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), true && ((_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))))))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(false))
                continue;
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                break;
               if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_DEAD(false), false, true))))
                break;
               if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, true, false)), false || (bool(bvec3(false, true, false)))))))
                continue;
               return;
               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))
                {
                }
               else
                {
                 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, true && (true))), _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec4(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, true && (true))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true)), (bool(bvec4(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, true && (true))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true))) && true), ! (! (_GLF_IDENTITY(bool(bvec4(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, true && (true))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true)), (bool(bvec4(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(true, bool(bvec4(true, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))), false, true)), (bool(bvec3(_GLF_IDENTITY(true, bool(bvec4(true, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))), false, true))) && true)) && (_GLF_IDENTITY(true, (true) && true)))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true))) && true))))))
                  {
                   if(_GLF_DEAD(false))
                    {
                     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), (_GLF_ONE(1.0, injectionSwitch.y)) - 0.0))); _injected_loop_counter ++)
                      {
                       return;
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        continue;
                      }
                    }
                   if(_GLF_DEAD(false))
                    return;
                  }
                 else
                  {
                  }
                }
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  break;
                 continue;
                }
               if(_GLF_DEAD(false))
                continue;
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))) || false))
                  return;
                 break;
                }
              }
             else
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  break;
                 break;
                }
              }
             if(_GLF_DEAD(false))
              return;
            }
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
        }
       buf[virtual_gid] = 1;
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(false, true && (false))))))
              break;
             return;
            }
           else
            {
            }
          }
         return;
        }
       if(_GLF_DEAD(false))
        continue;
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
      }
    }
   else
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
            {
             return;
            }
          }
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
          }
        }
      }
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false))))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     return;
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(! (! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch)).x, mix(float(_GLF_IDENTITY(injectionSwitch, mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch)).x), float(_GLF_FUZZED(-53.32)), bool(false))) > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(68.90), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED((-880.657))), bvec2(true, false))).y)), (_GLF_IDENTITY(! (! _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && ((injectionSwitch.x > injectionSwitch.y)))), ! (! (! (! (injectionSwitch.x > injectionSwitch.y)))))) && _GLF_IDENTITY(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec3(true, true, false), bvec3(bvec3(bvec3(true, true, false)))))))))), ! (! (_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(true, _GLF_IDENTITY(false || _GLF_IDENTITY((true), bool(bvec4((true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true))), bool(bvec3(false || (true), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))), bool(bvec4(bool(_GLF_IDENTITY(true, _GLF_IDENTITY(false || (true), bool(bvec3(false || (true), true, _GLF_TRUE(true, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).x, min(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).x, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).x)) < injectionSwitch.y))))))), true, true, true)))), false || (bool(bool(_GLF_IDENTITY(true, _GLF_IDENTITY(false || (true), ! (! (false || (true))))))))))))), bool(bvec2(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec3(true, true, false), bvec3(bvec3(bvec3(true, true, false)))))))))), ! (! (_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(true, _GLF_IDENTITY(false || _GLF_IDENTITY((true), bool(bvec4((true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true))), bool(bvec3(false || (true), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))), bool(bvec4(bool(_GLF_IDENTITY(true, _GLF_IDENTITY(false || (true), bool(bvec3(false || (true), true, _GLF_TRUE(true, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).x, min(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).x, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).x)) < injectionSwitch.y))))))), true, true, true)))), false || (bool(bool(_GLF_IDENTITY(true, _GLF_IDENTITY(false || (true), ! (! (false || (true))))))))))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))))
  {
   do
    {
     return;
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false)))) || false))
      return;
    }
  }
 for(int _injected_loop_counter = 0; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != 1, ! (_GLF_IDENTITY(! (_injected_loop_counter != 1), bool(bool(_GLF_IDENTITY(! (_GLF_IDENTITY(_injected_loop_counter != 1, (_GLF_IDENTITY(_injected_loop_counter != 1, _GLF_IDENTITY(! (! (_GLF_IDENTITY(_injected_loop_counter, ~ (~ (_injected_loop_counter))) != 1)), bool(bvec3(_GLF_IDENTITY(! (! (_GLF_IDENTITY(_injected_loop_counter, ~ (~ (_injected_loop_counter))) != 1)), bool(bvec4(! (! (_GLF_IDENTITY(_injected_loop_counter, ~ (~ (_injected_loop_counter))) != 1)), false, true, true))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))) && true)), ! (! (! (_injected_loop_counter != 1)))))))))), _GLF_IDENTITY(true && (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != 1, ! (_GLF_IDENTITY(! (_injected_loop_counter != 1), bool(bool(_GLF_IDENTITY(! (_GLF_IDENTITY(_injected_loop_counter != 1, (_GLF_IDENTITY(_injected_loop_counter != 1, ! _GLF_IDENTITY((! (_GLF_IDENTITY(_injected_loop_counter, ~ (~ (_injected_loop_counter))) != 1)), bool(bvec3((! (_GLF_IDENTITY(_injected_loop_counter, ~ (~ (_injected_loop_counter))) != 1)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))))) && true)), ! (! (! (_injected_loop_counter != 1))))))))))), bool(bvec2(true && (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != 1, ! (_GLF_IDENTITY(! (_injected_loop_counter != 1), bool(bool(_GLF_IDENTITY(! (_GLF_IDENTITY(_injected_loop_counter != 1, (_GLF_IDENTITY(_injected_loop_counter != 1, ! _GLF_IDENTITY((! (_GLF_IDENTITY(_injected_loop_counter, ~ (~ (_injected_loop_counter))) != 1)), bool(bvec3((! (_GLF_IDENTITY(_injected_loop_counter, ~ (~ (_injected_loop_counter))) != 1)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))))) && true)), ! (! (! (_injected_loop_counter != 1))))))))))), false)))); _injected_loop_counter ++)
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, true && (false))), false || (! (_GLF_IDENTITY(false, true && (false)))))))))
      break;
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           return;
          }
         else
          {
          }
         if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) || false), (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             return;
            }
          }
        }
       else
        {
        }
      }
    }
  }
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) << 0) < 1); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    break;
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), false || (! _GLF_IDENTITY(((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y)))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))))))))), (! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), false || (! ((injectionSwitch.x > injectionSwitch.y)))))) && true))))))))))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       return;
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(2.4), _GLF_FUZZED(-651.304)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true)))) * vec2(1.0, 1.0)).y))))
        break;
      }
    }
  }
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))), false || (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))), (_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(true), false || (bool(true))), ! (! (_GLF_IDENTITY(bool(true), false || (bool(true))))))))))) && (false)))) && true), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))), true && (_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec3(bvec3(bvec3(false, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))))))), bool(_GLF_IDENTITY(bvec3(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(true, (true) || false) && (_GLF_IDENTITY(false, bool(bool(false)))))), _GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && ((injectionSwitch.x > injectionSwitch.y)))), _GLF_IDENTITY(_GLF_IDENTITY(true, (true) || false), ! (! (true))) && (injectionSwitch.x > injectionSwitch.y))) || _GLF_IDENTITY(false, false || (false))))), true), bvec3(bvec3(bvec3(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))), _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)))).y)), true)))))), true)), (_GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))), true && (_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec3(bvec3(bvec3(false, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))))))), bool(_GLF_IDENTITY(bvec3(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))), _GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_IDENTITY((injectionSwitch)[0], clamp((injectionSwitch)[0], (injectionSwitch)[0], (injectionSwitch)[0])), (injectionSwitch)[1]), vec2(_GLF_FUZZED((- 1.4)), _GLF_FUZZED(float(false))), bvec2(false, false))).x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && ((injectionSwitch.x > injectionSwitch.y)))), _GLF_IDENTITY(true, ! (! (true))) && (injectionSwitch.x > injectionSwitch.y))) || _GLF_IDENTITY(false, false || (false))))), true), bvec3(bvec3(bvec3(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))), _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), min(mat2(1.0) * (injectionSwitch), mat2(1.0) * (injectionSwitch)))), injectionSwitch, injectionSwitch)))).y)), true)))))), true)), _GLF_IDENTITY(true && (bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))), true && (_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec3(bvec3(bvec3(false, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))))))), bool(_GLF_IDENTITY(bvec3(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))), _GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && ((injectionSwitch.x > injectionSwitch.y)))), _GLF_IDENTITY(true, ! (! (true))) && (injectionSwitch.x > injectionSwitch.y))) || _GLF_IDENTITY(false, false || (false))))), true), bvec3(bvec3(bvec3(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))), _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)))).y)), true)))))), true))), ! (_GLF_IDENTITY(! (true && (bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))), true && (_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec3(bvec3(bvec3(false, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))))))), bool(_GLF_IDENTITY(bvec3(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))), _GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && ((injectionSwitch.x > injectionSwitch.y)))), _GLF_IDENTITY(true, ! (! (true))) && (injectionSwitch.x > injectionSwitch.y))) || _GLF_IDENTITY(false, false || (false))))), true), bvec3(bvec3(bvec3(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))), _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)))).y)), true)))))), true)))), ! (_GLF_IDENTITY(! (! (true && (bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))), true && (_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec3(bvec3(bvec3(false, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))))))), bool(_GLF_IDENTITY(bvec3(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))), _GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && ((injectionSwitch.x > injectionSwitch.y)))), _GLF_IDENTITY(true, ! (! (true))) && (injectionSwitch.x > injectionSwitch.y))) || _GLF_IDENTITY(false, false || (false))))), true), bvec3(bvec3(bvec3(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))), _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)))).y)), true)))))), true))))), (! (! (true && (bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))), true && (_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec3(bvec3(_GLF_IDENTITY(bvec3(false, true, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-978.844)), bool(false)))) / 1.0) < injectionSwitch.y))), _GLF_IDENTITY(bvec3(bvec4(bvec3(false, true, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-978.844)), bool(false)))) / 1.0) < injectionSwitch.y))), true)), bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec4(bvec3(false, true, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-978.844)), bool(false)))) / 1.0) < injectionSwitch.y))), true)), bvec3(bvec4(bvec3(bvec4(bvec3(false, true, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-978.844)), bool(false)))) / 1.0) < injectionSwitch.y))), true)), false))))))))))))))))), bool(_GLF_IDENTITY(bvec3(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))), _GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && ((injectionSwitch.x > injectionSwitch.y)))), _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(! (true), bool(bvec4(_GLF_IDENTITY(! (true), (! (true)) || false), true, true, true))))), bool(bool(_GLF_IDENTITY(bool(bool(_GLF_IDENTITY(! (true), bool(bvec4(_GLF_IDENTITY(! (true), (! (true)) || false), true, true, true))))), ! (! (bool(bool(_GLF_IDENTITY(! (true), bool(bvec4(_GLF_IDENTITY(! (true), (! (true)) || false), true, true, true)))))))))))))) && (injectionSwitch.x > injectionSwitch.y))) || _GLF_IDENTITY(false, false || (false))))), true), bvec3(bvec3(bvec3(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(0.0, _GLF_IDENTITY(float(vec2(0.0, 1.0)), max(float(vec2(0.0, 1.0)), float(vec2(0.0, 1.0))))), 0.0) + (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), injectionSwitch)))).y, (_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(0.0, _GLF_IDENTITY(float(vec2(0.0, 1.0)), max(float(vec2(0.0, 1.0)), float(vec2(0.0, 1.0))))), 0.0) + (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), injectionSwitch)))).y) * 1.0))), true)))))), true)))))) || false))))))) || false))))))))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), _GLF_IDENTITY(! (! (_GLF_WRAPPED_IF_FALSE(false))), bool(bvec4(_GLF_IDENTITY(! (! (_GLF_WRAPPED_IF_FALSE(false))), true && (! (! (_GLF_WRAPPED_IF_FALSE(false))))), false, true, true)))))
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y)), true && (_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))))); _injected_loop_counter ++)
          {
           if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))), bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))), (_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false))))) || false), true))), bool(bvec3(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))), false, _GLF_IDENTITY(false, (false) && true)))))
            {
             do
              {
               return;
              }
             while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(false, (false) && true) || (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))))))), bool(bvec2(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), true)))));
            }
          }
        }
       else
        {
         do
          {
           return;
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(false))
          return;
        }
      }
     else
      {
      }
    }
  }
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
  {
   if(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, 0u ^ (_GLF_IDENTITY(subgroup_local_id, clamp(subgroup_local_id, subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) << 0u))))) + 1 < subgroup_size, true && (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, 0u ^ (subgroup_local_id)) + 1 < subgroup_size, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, 0u ^ (subgroup_local_id)) + 1 < subgroup_size, bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, uint(_GLF_IDENTITY(uvec3(_GLF_IDENTITY(subgroup_local_id, (false ? _GLF_FUZZED(workgroup_id) : subgroup_local_id)), (1u | 1u), 0u), (uvec3(_GLF_IDENTITY(subgroup_local_id, (false ? _GLF_FUZZED(workgroup_id) : subgroup_local_id)), (1u | 1u), 0u)) ^ uvec3(0u, 0u, 0u)))), _GLF_IDENTITY(_GLF_IDENTITY(0u ^ (subgroup_local_id), (false ? _GLF_FUZZED(next_virtual_gid) : 0u ^ (subgroup_local_id))), (0u ^ (subgroup_local_id)) << 0u)) + 1 < _GLF_IDENTITY(subgroup_size, ~ (~ (subgroup_size)))))), true, true, true)), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, 0u ^ (subgroup_local_id)) + 1 < subgroup_size, bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, 0u ^ (subgroup_local_id)), 0u ^ (subgroup_local_id)) + 1 < subgroup_size))), true, true, true)), false || (_GLF_IDENTITY(_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, 0u ^ (subgroup_local_id)) + 1 < subgroup_size, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, 0u ^ (subgroup_local_id)), min(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, 0u ^ (subgroup_local_id)), 0u | (_GLF_IDENTITY(subgroup_local_id, 0u ^ (subgroup_local_id)))), _GLF_IDENTITY(subgroup_local_id, 0u ^ (subgroup_local_id)))) + 1 < subgroup_size, bool(bvec3(_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(0u, (0u) - (0u >> _GLF_IDENTITY(uint(3u), uint(3u)))) ^ (subgroup_local_id)) + 1 < subgroup_size, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bool(_GLF_IDENTITY(subgroup_local_id, 0u ^ (subgroup_local_id)) + 1 < subgroup_size))), true, true, true)), (bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, 0u ^ (subgroup_local_id)) + 1 < subgroup_size, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, 0u ^ (subgroup_local_id)), min(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, 0u ^ (subgroup_local_id)), 0u | (_GLF_IDENTITY(subgroup_local_id, 0u ^ (subgroup_local_id)))), _GLF_IDENTITY(subgroup_local_id, 0u ^ (subgroup_local_id)))) + 1 < subgroup_size, bool(bvec3(_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(0u, (0u) - (0u >> _GLF_IDENTITY(uint(3u), uint(3u)))) ^ (subgroup_local_id)) + 1 < subgroup_size, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bool(_GLF_IDENTITY(subgroup_local_id, 0u ^ (subgroup_local_id)) + 1 < subgroup_size))), true, true, true))) || false), _GLF_FALSE(_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), clamp((injectionSwitch) * mat2(1.0), (injectionSwitch) * mat2(1.0), (injectionSwitch) * mat2(1.0)))).y)) || (bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, 0u ^ (subgroup_local_id)) + 1 < subgroup_size, bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(subgroup_local_id, 0u ^ _GLF_IDENTITY((subgroup_local_id), uint(uvec3(_GLF_IDENTITY((subgroup_local_id), (_GLF_IDENTITY((subgroup_local_id), uint(uvec2((subgroup_local_id), 1u)))) | (_GLF_IDENTITY((subgroup_local_id), ((subgroup_local_id)) ^ 0u))), 1u, 1u)))) + 1 < subgroup_size), bool(bvec3(bool(_GLF_IDENTITY(subgroup_local_id, 0u ^ _GLF_IDENTITY((subgroup_local_id), uint(uvec3(_GLF_IDENTITY((subgroup_local_id), (_GLF_IDENTITY((subgroup_local_id), uint(uvec2((subgroup_local_id), 1u)))) | (_GLF_IDENTITY((subgroup_local_id), ((subgroup_local_id)) ^ 0u))), 1u, 1u)))) + 1 < subgroup_size), false, false))))), true, true, true)))))), true, true, true)), (bool(bvec4(_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, 0u ^ (subgroup_local_id)) + 1 < subgroup_size, bool(bool(_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(0u ^ (subgroup_local_id), _GLF_IDENTITY(uint(uvec3(0u ^ (subgroup_local_id), 1u, 1u)), _GLF_IDENTITY(uint(uvec4(uint(uvec3(0u ^ (subgroup_local_id), 1u, 1u)), 1u, 1u, 0u)), (uint(uvec4(uint(uvec3(0u ^ (subgroup_local_id), 1u, 1u)), 1u, 1u, 0u))) ^ 0u)))) + 1 < subgroup_size))), true, true, true)), false || (_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, 0u ^ (subgroup_local_id)) + 1 < subgroup_size, bool(bool(_GLF_IDENTITY(subgroup_local_id, 0u ^ (subgroup_local_id)) + 1 < subgroup_size))), true, true, true)), _GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || (bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, 0u ^ _GLF_IDENTITY((subgroup_local_id), uint(uvec3(_GLF_IDENTITY((subgroup_local_id), ~ (~ ((subgroup_local_id)))), uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u)))) + 1 < subgroup_size, bool(bool(_GLF_IDENTITY(subgroup_local_id, 0u ^ (subgroup_local_id)) + 1 < subgroup_size))), true, true, true)))))), true, true, true))) && true))))))
    {
     int i = 0;
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       do
        {
         do
          {
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               for(int _injected_loop_counter = _GLF_IDENTITY(1, clamp(1, _GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(4573))), 1)); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > 0, true && (_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, 0 | (_GLF_IDENTITY(_injected_loop_counter, int(ivec3(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) * 1), (0 & -74246), 1))))) > 0, ! (! (_injected_loop_counter > 0)))))), _GLF_IDENTITY(bool(bvec4(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > 0, true && (_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, 0 | (_injected_loop_counter)) > 0, ! (! (_injected_loop_counter > 0)))))), false, _GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(true, true && (true)), false)), (bool(bvec2(_GLF_IDENTITY(true, true && (true)), false))) && true)), true)), ! (_GLF_IDENTITY(! (bool(bvec4(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > 0, true && (_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, 0 | (_GLF_IDENTITY(_injected_loop_counter, min(_injected_loop_counter, _injected_loop_counter)))) > 0, ! (! _GLF_IDENTITY((_injected_loop_counter > 0), (_GLF_IDENTITY((_injected_loop_counter > 0), ((_injected_loop_counter > 0)) && true)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), false, true, true))), true && (_GLF_IDENTITY(! (bool(bvec4(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > 0, true && (_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, 0 | (_injected_loop_counter)) > 0, ! (! (_injected_loop_counter > 0)))))), false, true, _GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, ! (! (true))))))))), bool(bvec3(! (bool(bvec4(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > 0, true && (_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, 0 | (_injected_loop_counter)) > 0, ! (! (_injected_loop_counter > 0)))))), false, true, true))), false, true)))))))); _injected_loop_counter --)
                {
                 if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), ! (! (! (_GLF_DEAD(false))))))))
                  break;
                 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false))))
                  {
                  }
                 else
                  {
                   if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), true, false, false))))
                    return;
                   atomicStore(buf[next_virtual_gid], _GLF_IDENTITY(_GLF_IDENTITY(uint(2), (_GLF_IDENTITY(_GLF_IDENTITY(uint(2), (uint(2)) | (uint(2))), max(_GLF_IDENTITY(uint(2), (uint(2)) - 0u), uint(2)))) | 0u), (_GLF_IDENTITY(_GLF_IDENTITY(uint(2), (_GLF_IDENTITY(uint(_GLF_IDENTITY(2, 0 ^ (2))), _GLF_IDENTITY(max(_GLF_IDENTITY(uint(2), (uint(2)) - 0u), uint(2)), (max(_GLF_IDENTITY(uint(2), (uint(2)) - 0u), uint(2))) - 0u))) | 0u), _GLF_IDENTITY(uint(uint(_GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(2, (_GLF_IDENTITY(2, clamp(2, 2, _GLF_IDENTITY(2, _GLF_IDENTITY(int(_GLF_IDENTITY(int(2), 0 ^ (int(2)))), (false ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(int(int(2)), (true ? int(int(2)) : _GLF_FUZZED(-51235))))))))) ^ 0)), (_GLF_IDENTITY(uint(2), max(_GLF_IDENTITY(uint(2), (uint(2)) - 0u), uint(2)))) | 0u), _GLF_IDENTITY(~ (~ (_GLF_IDENTITY(uint(2), _GLF_IDENTITY((_GLF_IDENTITY(uint(_GLF_IDENTITY(2, (2) | (2))), max(_GLF_IDENTITY(uint(2), (uint(2)) - 0u), uint(2)))), (false ? _GLF_FUZZED(num_workgroup) : (_GLF_IDENTITY(uint(_GLF_IDENTITY(2, (2) | (2))), max(_GLF_IDENTITY(uint(2), (uint(2)) - 0u), uint(2)))))) | 0u))), max(~ (~ (_GLF_IDENTITY(uint(2), (_GLF_IDENTITY(uint(2), max(_GLF_IDENTITY(uint(2), (uint(2)) - 0u), uint(2)))) | 0u))), _GLF_IDENTITY(~ (~ (_GLF_IDENTITY(uint(2), (_GLF_IDENTITY(uint(2), max(_GLF_IDENTITY(uint(2), (uint(2)) - 0u), uint(2)))) | 0u))), (~ (~ (_GLF_IDENTITY(uint(2), (_GLF_IDENTITY(uint(2), max(_GLF_IDENTITY(uint(2), (uint(2)) - 0u), uint(2)))) | 0u)))) | (~ (~ (_GLF_IDENTITY(uint(2), (_GLF_IDENTITY(uint(2), max(_GLF_IDENTITY(uint(2), (uint(2)) - 0u), uint(2)))) | 0u)))))))))), (_GLF_IDENTITY(uint(uint(_GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(2, (_GLF_IDENTITY(2, clamp(2, 2, _GLF_IDENTITY(2, _GLF_IDENTITY(int(_GLF_IDENTITY(int(2), 0 ^ (int(2)))), (false ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(int(int(2)), (true ? int(int(2)) : _GLF_FUZZED(-51235))))))))) ^ 0)), (_GLF_IDENTITY(uint(2), max(_GLF_IDENTITY(uint(2), (uint(2)) - 0u), uint(2)))) | 0u), _GLF_IDENTITY(~ (~ (_GLF_IDENTITY(uint(2), _GLF_IDENTITY((_GLF_IDENTITY(uint(_GLF_IDENTITY(2, (2) | (2))), max(_GLF_IDENTITY(uint(2), (uint(2)) - 0u), uint(2)))), (false ? _GLF_FUZZED(num_workgroup) : (_GLF_IDENTITY(uint(_GLF_IDENTITY(2, (2) | (2))), max(_GLF_IDENTITY(uint(2), (uint(2)) - 0u), uint(2)))))) | 0u))), max(~ (~ (_GLF_IDENTITY(uint(2), (_GLF_IDENTITY(uint(2), max(_GLF_IDENTITY(uint(2), (uint(2)) - 0u), uint(2)))) | 0u))), _GLF_IDENTITY(~ (~ (_GLF_IDENTITY(uint(2), (_GLF_IDENTITY(uint(2), max(_GLF_IDENTITY(uint(2), (uint(2)) - 0u), uint(2)))) | 0u))), (~ (~ (_GLF_IDENTITY(uint(2), (_GLF_IDENTITY(uint(2), max(_GLF_IDENTITY(uint(2), (uint(2)) - 0u), uint(2)))) | 0u)))) | (~ (~ (_GLF_IDENTITY(uint(2), (_GLF_IDENTITY(uint(2), max(_GLF_IDENTITY(uint(2), (uint(2)) - 0u), uint(2)))) | 0u)))))))))), max(uint(uint(_GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(2, (_GLF_IDENTITY(2, clamp(2, 2, _GLF_IDENTITY(2, _GLF_IDENTITY(int(_GLF_IDENTITY(int(2), 0 ^ (int(2)))), (false ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(int(int(2)), (true ? int(int(2)) : _GLF_FUZZED(-51235))))))))) ^ 0)), (_GLF_IDENTITY(uint(2), max(_GLF_IDENTITY(uint(2), (uint(2)) - 0u), uint(2)))) | 0u), _GLF_IDENTITY(~ (~ (_GLF_IDENTITY(uint(2), _GLF_IDENTITY((_GLF_IDENTITY(uint(_GLF_IDENTITY(2, (2) | (2))), max(_GLF_IDENTITY(uint(2), (uint(2)) - 0u), uint(2)))), (false ? _GLF_FUZZED(num_workgroup) : (_GLF_IDENTITY(uint(_GLF_IDENTITY(2, (2) | (2))), max(_GLF_IDENTITY(uint(2), (uint(2)) - 0u), uint(2)))))) | 0u))), max(~ (~ (_GLF_IDENTITY(uint(2), (_GLF_IDENTITY(uint(2), max(_GLF_IDENTITY(uint(2), (uint(2)) - 0u), uint(2)))) | 0u))), _GLF_IDENTITY(~ (~ (_GLF_IDENTITY(uint(2), (_GLF_IDENTITY(uint(2), max(_GLF_IDENTITY(uint(2), (uint(2)) - 0u), uint(2)))) | 0u))), (~ (~ (_GLF_IDENTITY(uint(2), (_GLF_IDENTITY(uint(2), max(_GLF_IDENTITY(uint(2), (uint(2)) - 0u), uint(2)))) | 0u)))) | (~ (~ (_GLF_IDENTITY(uint(2), (_GLF_IDENTITY(uint(2), max(_GLF_IDENTITY(uint(2), (uint(2)) - 0u), uint(2)))) | 0u)))))))))), uint(uint(_GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(2, (_GLF_IDENTITY(2, clamp(2, 2, _GLF_IDENTITY(2, _GLF_IDENTITY(int(_GLF_IDENTITY(int(2), 0 ^ (int(2)))), (false ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(int(int(2)), (true ? int(int(2)) : _GLF_FUZZED(-51235))))))))) ^ 0)), (_GLF_IDENTITY(uint(2), max(_GLF_IDENTITY(uint(2), (uint(2)) - 0u), uint(2)))) | 0u), _GLF_IDENTITY(~ (~ (_GLF_IDENTITY(uint(2), _GLF_IDENTITY((_GLF_IDENTITY(uint(_GLF_IDENTITY(2, (2) | (2))), max(_GLF_IDENTITY(uint(2), (uint(2)) - 0u), uint(2)))), (false ? _GLF_FUZZED(num_workgroup) : (_GLF_IDENTITY(uint(_GLF_IDENTITY(2, (2) | (2))), max(_GLF_IDENTITY(uint(2), (uint(2)) - 0u), uint(2)))))) | 0u))), max(~ (~ (_GLF_IDENTITY(uint(2), (_GLF_IDENTITY(uint(2), max(_GLF_IDENTITY(uint(2), (uint(2)) - 0u), uint(2)))) | 0u))), _GLF_IDENTITY(~ (~ (_GLF_IDENTITY(uint(2), (_GLF_IDENTITY(uint(2), max(_GLF_IDENTITY(uint(2), (uint(2)) - 0u), uint(2)))) | 0u))), (~ (~ (_GLF_IDENTITY(uint(2), (_GLF_IDENTITY(uint(2), max(_GLF_IDENTITY(uint(2), (uint(2)) - 0u), uint(2)))) | 0u)))) | (~ (~ (_GLF_IDENTITY(uint(2), (_GLF_IDENTITY(uint(2), max(_GLF_IDENTITY(uint(2), (uint(2)) - 0u), uint(2)))) | 0u))))))))))))) ^ 0u))) * 1u), 4, _GLF_IDENTITY(_GLF_IDENTITY(64, (64) << (0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(4), clamp(int(4), int(_GLF_IDENTITY(4, (true ? _GLF_IDENTITY(4, 0 | (4)) : _GLF_FUZZED(_injected_loop_counter)))), int(4))), int(4)))), ~ (~ (_GLF_IDENTITY(64, _GLF_IDENTITY((64), ((64)) | (_GLF_IDENTITY((64), ~ (~ ((64)))))) << (0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(4), clamp(int(4), int(_GLF_IDENTITY(4, (true ? _GLF_IDENTITY(4, 0 | (4)) : _GLF_FUZZED(_injected_loop_counter)))), int(4))), int(4))))))), _GLF_IDENTITY(4, ~ (_GLF_IDENTITY(~ (4), 0 | (_GLF_IDENTITY(~ (4), clamp(~ (4), _GLF_IDENTITY(~ (4), clamp(_GLF_IDENTITY(~ (4), ~ (~ (~ _GLF_IDENTITY((4), int(ivec2(_GLF_IDENTITY((4), ((4)) | 0), 1)))))), ~ (4), ~ (4))), ~ (4))))))));
                  }
                }
              }
             else
              {
              }
            }
           else
            {
            }
           if(_GLF_DEAD(false))
            break;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
           if(_GLF_DEAD(false))
            {
             if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), true, false, true))))
              continue;
             break;
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     else
      {
      }
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec2(false, true))), (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               return;
              }
             else
              {
              }
            }
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
      }
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
     for(int _injected_loop_counter = ((0 | 0) >> _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), (int(3)) / 1))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))).y))))
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, false || (false))))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                break;
              }
             else
              {
               return;
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
            }
           if(_GLF_DEAD(false))
            break;
           break;
          }
         for(int _injected_loop_counter = _GLF_IDENTITY((_GLF_IDENTITY(2683 & (0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(0), int(0)), int(_GLF_IDENTITY(ivec4(_GLF_IDENTITY(int(0), int(0)), 0, int(_GLF_ONE(1.0, injectionSwitch.y)), (0 & (-42300 ^ 17308))), (ivec4(_GLF_IDENTITY(int(0), int(0)), 0, int(_GLF_ONE(1.0, injectionSwitch.y)), (0 & (-42300 ^ 17308)))) * ivec4(1, 1, 1, 1))))), _GLF_IDENTITY(clamp(2683 & (0 >> _GLF_IDENTITY(int(0), int(0))), 2683 & (0 >> _GLF_IDENTITY(int(_GLF_IDENTITY(0, (0) - 0)), int(0))), 2683 & (0 >> _GLF_IDENTITY(int(0), int(0)))), clamp(clamp(2683 & (0 >> _GLF_IDENTITY(int(0), int(0))), 2683 & (0 >> _GLF_IDENTITY(int(0), int(0))), _GLF_IDENTITY(2683 & (0 >> _GLF_IDENTITY(int(0), int(0))), _GLF_IDENTITY(0, (0) * 1) ^ (2683 & (0 >> _GLF_IDENTITY(int(0), int(0)))))), _GLF_IDENTITY(clamp(2683 & (0 >> _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), max(int(0), int(0))))), 2683 & (0 >> _GLF_IDENTITY(int(0), int(0))), 2683 & _GLF_IDENTITY((0 >> _GLF_IDENTITY(int(0), int(0))), (false ? _GLF_FUZZED(-29857) : (0 >> _GLF_IDENTITY(int(0), int(0)))))), clamp(_GLF_IDENTITY(clamp(2683 & (0 >> _GLF_IDENTITY(int(0), int(0))), 2683 & (0 >> _GLF_IDENTITY(int(0), int(0))), 2683 & (0 >> _GLF_IDENTITY(int(0), int(0)))), 0 | (clamp(2683 & (0 >> _GLF_IDENTITY(int(0), int(0))), 2683 & (0 >> _GLF_IDENTITY(int(0), int(0))), 2683 & (0 >> _GLF_IDENTITY(int(0), int(0)))))), clamp(2683 & (0 >> _GLF_IDENTITY(int(0), int(0))), 2683 & (0 >> _GLF_IDENTITY(int(0), int(0))), 2683 & (0 >> _GLF_IDENTITY(int(0), int(0)))), clamp(_GLF_IDENTITY(2683 & (0 >> _GLF_IDENTITY(int(0), int(0))), int(ivec2(2683 & (0 >> _GLF_IDENTITY(int(0), int(0))), 1))), 2683 & (0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(0), int(0)), (_GLF_IDENTITY(int(0), int(0))) >> 0)), 2683 & (_GLF_IDENTITY(0, (0) ^ (0 << _GLF_IDENTITY(int(2), int(2)))) >> _GLF_IDENTITY(int(0), int(0)))))), clamp(2683 & (0 >> _GLF_IDENTITY(int(0), int(0))), _GLF_IDENTITY(2683, max(_GLF_IDENTITY(2683, (2683) | 0), 2683)) & (0 >> _GLF_IDENTITY(int(_GLF_IDENTITY(0, (0 | 0) + (_GLF_IDENTITY(0, (0) - (0 | 0))))), int(0))), 2683 & (0 >> _GLF_IDENTITY(int(0), int(0)))))))), max((_GLF_IDENTITY(2683 & (0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(0), int(0)), int(_GLF_IDENTITY(ivec4(_GLF_IDENTITY(int(0), int(0)), 0, int(_GLF_ONE(1.0, injectionSwitch.y)), (0 & (-42300 ^ 17308))), (ivec4(_GLF_IDENTITY(int(0), int(0)), 0, int(_GLF_ONE(1.0, injectionSwitch.y)), (0 & (-42300 ^ 17308)))) * ivec4(1, 1, 1, 1))))), _GLF_IDENTITY(clamp(2683 & (0 >> _GLF_IDENTITY(int(0), int(0))), 2683 & (0 >> _GLF_IDENTITY(int(_GLF_IDENTITY(0, (0) - 0)), int(0))), 2683 & (0 >> _GLF_IDENTITY(int(0), int(0)))), clamp(clamp(2683 & (0 >> _GLF_IDENTITY(int(0), int(0))), 2683 & (0 >> _GLF_IDENTITY(int(0), int(0))), _GLF_IDENTITY(2683 & (0 >> _GLF_IDENTITY(int(0), int(0))), _GLF_IDENTITY(0, (0) * 1) ^ (2683 & (0 >> _GLF_IDENTITY(int(0), int(0)))))), _GLF_IDENTITY(clamp(2683 & (0 >> _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), max(int(0), int(0))))), 2683 & (0 >> _GLF_IDENTITY(int(0), int(0))), 2683 & _GLF_IDENTITY((0 >> _GLF_IDENTITY(int(0), int(0))), (false ? _GLF_FUZZED(-29857) : (0 >> _GLF_IDENTITY(int(0), int(0)))))), clamp(_GLF_IDENTITY(clamp(2683 & (0 >> _GLF_IDENTITY(int(0), int(0))), 2683 & (0 >> _GLF_IDENTITY(int(0), int(0))), 2683 & (0 >> _GLF_IDENTITY(int(0), int(0)))), 0 | (clamp(2683 & (0 >> _GLF_IDENTITY(int(0), int(0))), 2683 & (0 >> _GLF_IDENTITY(int(0), int(0))), 2683 & (0 >> _GLF_IDENTITY(int(0), int(0)))))), clamp(2683 & (0 >> _GLF_IDENTITY(int(0), int(0))), 2683 & (0 >> _GLF_IDENTITY(int(0), int(0))), 2683 & (0 >> _GLF_IDENTITY(int(0), int(0)))), clamp(_GLF_IDENTITY(2683 & (0 >> _GLF_IDENTITY(int(0), int(0))), int(ivec2(2683 & (0 >> _GLF_IDENTITY(int(0), int(0))), 1))), 2683 & (0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(0), int(0)), (_GLF_IDENTITY(int(0), int(0))) >> 0)), 2683 & (_GLF_IDENTITY(0, (0) ^ (0 << _GLF_IDENTITY(int(2), int(2)))) >> _GLF_IDENTITY(int(0), int(0)))))), clamp(2683 & (0 >> _GLF_IDENTITY(int(0), int(0))), _GLF_IDENTITY(2683, max(_GLF_IDENTITY(2683, (2683) | 0), 2683)) & (0 >> _GLF_IDENTITY(int(_GLF_IDENTITY(0, (0 | 0) + (_GLF_IDENTITY(0, (0) - (0 | 0))))), int(0))), 2683 & (0 >> _GLF_IDENTITY(int(0), int(0)))))))), (_GLF_IDENTITY(2683 & (0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(0), int(0)), int(_GLF_IDENTITY(ivec4(_GLF_IDENTITY(int(0), int(0)), 0, int(_GLF_ONE(1.0, injectionSwitch.y)), (0 & (-42300 ^ 17308))), (ivec4(_GLF_IDENTITY(int(0), int(0)), 0, int(_GLF_ONE(1.0, injectionSwitch.y)), (0 & (-42300 ^ 17308)))) * ivec4(1, 1, 1, 1))))), _GLF_IDENTITY(clamp(2683 & (0 >> _GLF_IDENTITY(int(0), int(0))), 2683 & (0 >> _GLF_IDENTITY(int(_GLF_IDENTITY(0, (0) - 0)), int(0))), 2683 & (0 >> _GLF_IDENTITY(int(0), int(0)))), clamp(clamp(2683 & (0 >> _GLF_IDENTITY(int(0), int(0))), 2683 & (0 >> _GLF_IDENTITY(int(0), int(0))), _GLF_IDENTITY(2683 & (0 >> _GLF_IDENTITY(int(0), int(0))), _GLF_IDENTITY(0, (0) * 1) ^ (2683 & (0 >> _GLF_IDENTITY(int(0), int(0)))))), _GLF_IDENTITY(clamp(2683 & (0 >> _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), max(int(0), int(0))))), 2683 & (0 >> _GLF_IDENTITY(int(0), int(0))), 2683 & _GLF_IDENTITY((0 >> _GLF_IDENTITY(int(0), int(0))), (false ? _GLF_FUZZED(-29857) : (0 >> _GLF_IDENTITY(int(0), int(0)))))), clamp(_GLF_IDENTITY(clamp(2683 & (0 >> _GLF_IDENTITY(int(0), int(0))), 2683 & (0 >> _GLF_IDENTITY(int(0), int(0))), 2683 & (0 >> _GLF_IDENTITY(int(0), int(0)))), 0 | (clamp(2683 & (0 >> _GLF_IDENTITY(int(0), int(0))), 2683 & (0 >> _GLF_IDENTITY(int(0), int(0))), 2683 & (0 >> _GLF_IDENTITY(int(0), int(0)))))), clamp(2683 & (0 >> _GLF_IDENTITY(int(0), int(0))), 2683 & (0 >> _GLF_IDENTITY(int(0), int(0))), 2683 & (0 >> _GLF_IDENTITY(int(0), int(0)))), clamp(_GLF_IDENTITY(2683 & (0 >> _GLF_IDENTITY(int(0), int(0))), int(ivec2(2683 & (0 >> _GLF_IDENTITY(int(0), int(0))), 1))), 2683 & (0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(0), int(0)), (_GLF_IDENTITY(int(0), int(0))) >> 0)), 2683 & (_GLF_IDENTITY(0, (0) ^ (0 << _GLF_IDENTITY(int(2), int(2)))) >> _GLF_IDENTITY(int(0), int(0)))))), clamp(2683 & (0 >> _GLF_IDENTITY(int(0), int(0))), _GLF_IDENTITY(2683, max(_GLF_IDENTITY(2683, (2683) | 0), 2683)) & (0 >> _GLF_IDENTITY(int(_GLF_IDENTITY(0, (0 | 0) + (_GLF_IDENTITY(0, (0) - (0 | 0))))), int(0))), 2683 & (0 >> _GLF_IDENTITY(int(0), int(0)))))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _GLF_IDENTITY(_injected_loop_counter ++, (false ? _GLF_FUZZED(_injected_loop_counter) : _injected_loop_counter ++)))
          {
           atomicStore(buf[next_virtual_gid], _GLF_IDENTITY(uint(2), _GLF_IDENTITY((_GLF_IDENTITY(uint(2), (uint(2)) - 0u)), (true ? (_GLF_IDENTITY(_GLF_IDENTITY(uint(2), (uint(2)) - 0u), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(uint(2), (uint(2)) - 0u)), (false ? _GLF_FUZZED(workgroup_base) : ~ (_GLF_IDENTITY(uint(2), (uint(2)) - 0u))))))) : _GLF_FUZZED(subgroup_size))) >> 0u), 4, 64, _GLF_IDENTITY(4, (true ? 4 : _GLF_FUZZED(-81899))));
           if(_GLF_DEAD(false))
            break;
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             return;
            }
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
        }
      }
    }
   if(_GLF_DEAD(false))
    return;
  }
 do
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
    }
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_DEAD(false))))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
        {
         return;
        }
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, false || (false))) || false), (injectionSwitch.x > injectionSwitch.y))));
 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bvec4(false, true, false, true)))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   for(int _injected_loop_counter = (0 & 92952); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < 1), (_GLF_WRAPPED_LOOP(_injected_loop_counter < 1)) || false); _injected_loop_counter ++)
    {
     do
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           for(int _injected_loop_counter = _GLF_IDENTITY((_GLF_IDENTITY(int(-6.9), clamp(_GLF_IDENTITY(int(-6.9), max(_GLF_IDENTITY(int(-6.9), int(_GLF_IDENTITY(_GLF_IDENTITY(ivec2(int(-6.9), 1), max(_GLF_IDENTITY(ivec2(int(-6.9), 1), (true ? ivec2(int(-6.9), 1) : _GLF_FUZZED(ivec2(-16415, 40881)))), ivec2(int(-6.9), 1))), (_GLF_IDENTITY(ivec2(int(-6.9), 1), max(_GLF_IDENTITY(ivec2(int(-6.9), 1), (true ? ivec2(int(-6.9), 1) : _GLF_FUZZED(ivec2(-16415, 40881)))), ivec2(int(-6.9), 1)))) | ivec2(0, 0)))), _GLF_IDENTITY(int(-6.9), _GLF_IDENTITY(~ (~ (int(-6.9))), (0 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), 0 | (int(4))))) ^ (~ (~ (int(-6.9)))))))), int(-6.9), int(-6.9))) & 0), ((_GLF_IDENTITY(int(-6.9), clamp(_GLF_IDENTITY(int(-6.9), max(_GLF_IDENTITY(int(-6.9), int(_GLF_IDENTITY(_GLF_IDENTITY(ivec2(int(-6.9), 1), max(_GLF_IDENTITY(ivec2(int(-6.9), 1), (true ? ivec2(int(-6.9), 1) : _GLF_FUZZED(ivec2(-16415, 40881)))), ivec2(int(-6.9), 1))), (_GLF_IDENTITY(ivec2(int(-6.9), 1), max(_GLF_IDENTITY(ivec2(int(-6.9), 1), (true ? ivec2(int(-6.9), 1) : _GLF_FUZZED(ivec2(-16415, 40881)))), ivec2(int(-6.9), 1)))) | ivec2(0, 0)))), _GLF_IDENTITY(int(-6.9), _GLF_IDENTITY(~ (~ (int(-6.9))), (0 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), 0 | (int(4))))) ^ (~ (~ (int(-6.9)))))))), int(-6.9), int(-6.9))) & 0)) << 0); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < 1, ! (! (_injected_loop_counter < 1)))); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(false))
              return;
             do
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                continue;
               return;
               if(_GLF_DEAD(false))
                break;
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
          }
         else
          {
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false, false)))))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, bool(bvec4(false, true, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true))))
        {
        }
       else
        {
         return;
        }
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (int(5)) | (int(_GLF_IDENTITY(5, int(int(5)))))))) >> _GLF_IDENTITY(int(5), int(5)))); _injected_loop_counter ++)
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(false))
        return;
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         do
          {
           return;
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        }
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), injectionSwitch)), injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            {
             do
              {
               do
                {
                 return;
                }
               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(mat2(injectionSwitch.x, 0.0, 0.0, 1.0))) > injectionSwitch.y))));
              }
             while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(false, true), bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec2(false, true), _GLF_IDENTITY(bvec2(bvec3(bvec2(false, true), false)), bvec2(bvec4(bvec2(bvec3(bvec2(false, true), false)), false, true))))), bvec2(bvec3(bvec2(_GLF_IDENTITY(bvec2(false, true), _GLF_IDENTITY(bvec2(bvec3(bvec2(false, true), false)), bvec2(bvec4(bvec2(bvec3(bvec2(false, true), false)), false, true))))), true))))), bvec2(bvec2(bvec2(false, true))))), true && (bool(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec2(bvec2(false, true))))))))));
            }
           return;
          }
        }
      }
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))), bool(bvec4(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))), true, true, true))))
      {
       do
        {
         return;
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true))));
      }
     if(_GLF_DEAD(false))
      return;
     return;
    }
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
  {
   do
    {
     return;
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
    }
   do
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
      continue;
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         return;
        }
       else
        {
        }
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
       continue;
      }
     if(_GLF_DEAD(false))
      break;
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bvec3(false, true, _GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y)))))));
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
