#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        return;
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       return;
      }
     else
      {
      }
    }
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true && (_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))), false || (_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))))
    return;
  }
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false))))), bool(bvec4((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false))))), true, false, false))) || _GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec3(! (false), true, false))))))))))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     return;
    }
   else
    {
    }
  }
 uint num_workgroup = gl_NumWorkGroups.x;
 do
  {
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-9784.7321, -803.840)) : _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)))).x, sin(0.0) + (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-9784.7321, -803.840)) : _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)))).x)) > injectionSwitch.y))), false || (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bvec2(false, false)))))
      {
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     else
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           for(int _injected_loop_counter = (0 | 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, (0) | (0 << _GLF_IDENTITY(int(5), int(5))))); _injected_loop_counter --)
            {
             return;
            }
          }
        }
       return;
      }
    }
  }
 while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), _GLF_IDENTITY(bool(bvec3(_GLF_WRAPPED_LOOP(false), true, true)), ! (! (bool(bvec3(_GLF_WRAPPED_LOOP(false), true, true)))))));
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      return;
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 | 0)); _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter --, (0 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), (int(3)) / 1))) ^ (_injected_loop_counter --)), ~ (_GLF_IDENTITY(~ _GLF_IDENTITY((_GLF_IDENTITY(_injected_loop_counter --, _GLF_IDENTITY((0 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(_GLF_IDENTITY(3, (3) >> 0)), (int(3)) / 1))), ((0 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(_GLF_IDENTITY(3, (3) >> 0)), (int(3)) / 1)))) * 1) ^ (_injected_loop_counter --))), 0 | ((_GLF_IDENTITY(_injected_loop_counter --, _GLF_IDENTITY((0 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(_GLF_IDENTITY(3, (3) >> 0)), (int(3)) / 1))), ((0 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(_GLF_IDENTITY(3, (3) >> 0)), (int(3)) / 1)))) * 1) ^ (_injected_loop_counter --))))), (true ? ~ (_GLF_IDENTITY(_injected_loop_counter --, (0 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), (int(3)) / 1))) ^ (_injected_loop_counter --))) : _GLF_IDENTITY(_GLF_FUZZED(_injected_loop_counter), ~ (~ (_GLF_FUZZED(_injected_loop_counter)))))))), (_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter --, (0 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), (int(3)) / 1))) ^ (_injected_loop_counter --)), ~ (_GLF_IDENTITY(~ _GLF_IDENTITY((_GLF_IDENTITY(_injected_loop_counter --, _GLF_IDENTITY((0 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(_GLF_IDENTITY(3, (3) >> 0)), (int(3)) / 1))), ((0 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(_GLF_IDENTITY(3, (3) >> 0)), (int(3)) / 1)))) * 1) ^ (_injected_loop_counter --))), 0 | ((_GLF_IDENTITY(_injected_loop_counter --, _GLF_IDENTITY((0 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(_GLF_IDENTITY(3, (3) >> 0)), (int(3)) / 1))), ((0 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(_GLF_IDENTITY(3, (3) >> 0)), (int(3)) / 1)))) * 1) ^ (_injected_loop_counter --))))), (true ? ~ (_GLF_IDENTITY(_injected_loop_counter --, (0 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), (int(3)) / 1))) ^ (_injected_loop_counter --))) : _GLF_IDENTITY(_GLF_FUZZED(_injected_loop_counter), ~ (~ (_GLF_FUZZED(_injected_loop_counter))))))))) ^ (0 << _GLF_IDENTITY(int(5), int(5)))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             do
              {
               if(_GLF_DEAD(false))
                return;
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
          }
         else
          {
          }
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           do
            {
             return;
             if(_GLF_DEAD(false))
              continue;
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         else
          {
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(1.0, _GLF_IDENTITY(_GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat2x3(1.0, _GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, (1.0) * 1.0), 1.0))) / 1.0), tan(0.0), 0.0, 1.0, 1.0)), (float(mat2x3(1.0, 1.0, tan(0.0), 0.0, 1.0, 1.0))) * _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)))), max(_GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat2x3(1.0, 1.0, tan(0.0), 0.0, 1.0, 1.0)), (float(mat2x3(1.0, 1.0, tan(0.0), 0.0, 1.0, 1.0))) * 1.0)), _GLF_IDENTITY(_GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, (1.0) - 0.0), _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)))), _GLF_IDENTITY(float(mat2x3(1.0, 1.0, tan(_GLF_IDENTITY(0.0, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(8.3) : 0.0))), 0.0, 1.0, 1.0)), (float(mat2x3(1.0, 1.0, tan(0.0), 0.0, 1.0, 1.0))) * 1.0))))) * (injectionSwitch)).y))))
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(atomicExchange(_injected_loop_counter, _injected_loop_counter))))); _injected_loop_counter ++)
          {
           do
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               return;
              }
             else
              {
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         if(_GLF_DEAD(false))
          break;
         if(_GLF_DEAD(false))
          continue;
        }
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
      return;
    }
   else
    {
    }
  }
 else
  {
  }
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = _GLF_IDENTITY(gl_WorkGroupID, (_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x, _GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(0.3)), bool(false))))) > injectionSwitch.y))))) ? _GLF_IDENTITY(_GLF_FUZZED(uvec3(119929u, 123493u, 159210u)), clamp(_GLF_FUZZED(uvec3(119929u, 123493u, 159210u)), _GLF_FUZZED(uvec3(_GLF_IDENTITY(119929u, (119929u) | (119929u)), 123493u, 159210u)), _GLF_FUZZED(uvec3(119929u, 123493u, _GLF_IDENTITY(159210u, 0u ^ (159210u)))))) : _GLF_IDENTITY(gl_WorkGroupID, uvec3(uvec4(gl_WorkGroupID, 0u))))).x;
 uint workgroup_base = workgroup_size * workgroup_id;
 uint virtual_gid = _GLF_IDENTITY(workgroup_base, ~ _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(~ (workgroup_base), max(_GLF_IDENTITY(~ _GLF_IDENTITY(_GLF_IDENTITY((workgroup_base), ~ (~ (_GLF_IDENTITY((workgroup_base), ((workgroup_base)) / 1u)))), min(_GLF_IDENTITY((workgroup_base), ~ (~ (_GLF_IDENTITY((workgroup_base), ((workgroup_base)) / 1u)))), _GLF_IDENTITY((workgroup_base), ~ (~ (_GLF_IDENTITY((workgroup_base), ((workgroup_base)) / 1u)))))), (~ (workgroup_base)) / 1u), ~ (_GLF_IDENTITY(workgroup_base, max(workgroup_base, _GLF_IDENTITY(workgroup_base, max(_GLF_IDENTITY(workgroup_base, 0u | (workgroup_base)), workgroup_base))))))), _GLF_IDENTITY(uint(uvec2(_GLF_IDENTITY(~ (workgroup_base), max(_GLF_IDENTITY(~ _GLF_IDENTITY(_GLF_IDENTITY((workgroup_base), ~ (~ (_GLF_IDENTITY((workgroup_base), ((workgroup_base)) / 1u)))), min(_GLF_IDENTITY((workgroup_base), ~ (~ (_GLF_IDENTITY((workgroup_base), ((workgroup_base)) / 1u)))), _GLF_IDENTITY((workgroup_base), ~ (~ (_GLF_IDENTITY((workgroup_base), ((workgroup_base)) / 1u)))))), (~ (workgroup_base)) / 1u), ~ (_GLF_IDENTITY(workgroup_base, max(workgroup_base, _GLF_IDENTITY(workgroup_base, max(_GLF_IDENTITY(workgroup_base, 0u | (workgroup_base)), workgroup_base))))))), 1u)), (false ? _GLF_FUZZED(workgroup_base) : uint(uvec2(_GLF_IDENTITY(~ (workgroup_base), max(_GLF_IDENTITY(~ _GLF_IDENTITY(_GLF_IDENTITY((workgroup_base), ~ (~ (_GLF_IDENTITY((workgroup_base), ((workgroup_base)) / 1u)))), min(_GLF_IDENTITY((workgroup_base), ~ (~ (_GLF_IDENTITY((workgroup_base), ((workgroup_base)) / 1u)))), _GLF_IDENTITY((workgroup_base), ~ (~ (_GLF_IDENTITY((workgroup_base), ((workgroup_base)) / 1u)))))), (~ (workgroup_base)) / 1u), ~ (_GLF_IDENTITY(workgroup_base, max(workgroup_base, _GLF_IDENTITY(workgroup_base, max(_GLF_IDENTITY(workgroup_base, 0u | (workgroup_base)), workgroup_base))))))), 1u))))), min(_GLF_IDENTITY(_GLF_IDENTITY(~ (workgroup_base), max(_GLF_IDENTITY(~ _GLF_IDENTITY((workgroup_base), ~ (~ (_GLF_IDENTITY((workgroup_base), ((workgroup_base)) / 1u)))), (~ (workgroup_base)) / 1u), ~ (_GLF_IDENTITY(workgroup_base, max(workgroup_base, _GLF_IDENTITY(workgroup_base, max(_GLF_IDENTITY(workgroup_base, 0u | (workgroup_base)), workgroup_base))))))), (_GLF_IDENTITY(~ (workgroup_base), max(_GLF_IDENTITY(~ _GLF_IDENTITY(_GLF_IDENTITY((workgroup_base), (_GLF_IDENTITY((workgroup_base), _GLF_IDENTITY(((workgroup_base)) | ((workgroup_base)), clamp(((workgroup_base)) | ((workgroup_base)), ((workgroup_base)) | ((workgroup_base)), ((workgroup_base)) | ((workgroup_base)))))) | ((workgroup_base))), ~ (~ (_GLF_IDENTITY((workgroup_base), ((workgroup_base)) / 1u)))), (~ (workgroup_base)) / 1u), ~ (_GLF_IDENTITY(workgroup_base, max(workgroup_base, _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, max(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, 0u | (workgroup_base)), clamp(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, 0u | (workgroup_base)), (_GLF_IDENTITY(workgroup_base, 0u | (workgroup_base))) | (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, 0u | (workgroup_base)), (_GLF_IDENTITY(workgroup_base, 0u | (workgroup_base))) | (_GLF_IDENTITY(workgroup_base, 0u | (workgroup_base)))))), _GLF_IDENTITY(workgroup_base, 0u | (workgroup_base)), _GLF_IDENTITY(workgroup_base, 0u | (workgroup_base)))), workgroup_base)), (_GLF_IDENTITY(workgroup_base, max(_GLF_IDENTITY(workgroup_base, 0u | (workgroup_base)), workgroup_base))) << uint(_GLF_ZERO(0.0, injectionSwitch.x))))))))) ^ 0u), _GLF_IDENTITY(~ (workgroup_base), max(_GLF_IDENTITY(_GLF_IDENTITY(~ _GLF_IDENTITY(_GLF_IDENTITY((workgroup_base), clamp(_GLF_IDENTITY((workgroup_base), ~ (~ ((workgroup_base)))), _GLF_IDENTITY((workgroup_base), ~ (~ ((workgroup_base)))), (workgroup_base))), ~ (~ (_GLF_IDENTITY((workgroup_base), ((workgroup_base)) / 1u)))), ~ (~ (~ _GLF_IDENTITY(_GLF_IDENTITY((workgroup_base), clamp(_GLF_IDENTITY((workgroup_base), ~ (~ ((workgroup_base)))), _GLF_IDENTITY((workgroup_base), ~ (~ ((workgroup_base)))), (workgroup_base))), _GLF_IDENTITY(~ (~ (_GLF_IDENTITY((workgroup_base), ((workgroup_base)) / 1u))), (~ (~ (_GLF_IDENTITY((workgroup_base), ((workgroup_base)) / 1u)))) | 0u))))), (~ _GLF_IDENTITY((workgroup_base), min((workgroup_base), (workgroup_base)))) / 1u), ~ (_GLF_IDENTITY(workgroup_base, max(_GLF_IDENTITY(workgroup_base, 0u | (workgroup_base)), _GLF_IDENTITY(workgroup_base, max(_GLF_IDENTITY(workgroup_base, 0u | (workgroup_base)), workgroup_base)))))))))), ((_GLF_IDENTITY(~ (workgroup_base), max(_GLF_IDENTITY(_GLF_IDENTITY(~ (workgroup_base), (~ (workgroup_base)) / 1u), (_GLF_IDENTITY(~ (workgroup_base), (~ (workgroup_base)) / 1u)) | (_GLF_IDENTITY(~ (workgroup_base), (~ (workgroup_base)) / 1u))), ~ (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, max(workgroup_base, _GLF_IDENTITY(workgroup_base, max(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, (workgroup_base) << 0u), 0u | (workgroup_base)), workgroup_base)))), 0u ^ (_GLF_IDENTITY(workgroup_base, max(workgroup_base, _GLF_IDENTITY(workgroup_base, max(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, (workgroup_base) << 0u), 0u | (workgroup_base)), workgroup_base))))))))))) | ((_GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, (_GLF_IDENTITY(workgroup_base, clamp(workgroup_base, workgroup_base, workgroup_base))) | 0u), 0u | (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, 1u * (workgroup_base)), clamp(workgroup_base, workgroup_base, workgroup_base))))), _GLF_IDENTITY(max(_GLF_IDENTITY(~ (workgroup_base), (~ (_GLF_IDENTITY(workgroup_base, (workgroup_base) | (_GLF_IDENTITY(workgroup_base, uint(uvec4(workgroup_base, uint(_GLF_ONE(1.0, injectionSwitch.y)), 0u, 0u))))))) / 1u), ~ (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, max(workgroup_base, _GLF_IDENTITY(workgroup_base, max(_GLF_IDENTITY(workgroup_base, 0u | (workgroup_base)), workgroup_base)))), 0u | (_GLF_IDENTITY(workgroup_base, max(workgroup_base, _GLF_IDENTITY(workgroup_base, max(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, (_GLF_IDENTITY(workgroup_base, clamp(workgroup_base, _GLF_IDENTITY(workgroup_base, (workgroup_base) | (workgroup_base)), workgroup_base))) ^ (0u | 0u)), 0u | (_GLF_IDENTITY(workgroup_base, uint(uint(_GLF_IDENTITY(workgroup_base, (0u << _GLF_IDENTITY(uint(8u), uint(8u))) | (_GLF_IDENTITY(workgroup_base, clamp(workgroup_base, workgroup_base, workgroup_base))))))))), workgroup_base)))))))), uint(uvec3(max(_GLF_IDENTITY(~ (workgroup_base), (~ (workgroup_base)) / 1u), ~ _GLF_IDENTITY((_GLF_IDENTITY(workgroup_base, max(workgroup_base, _GLF_IDENTITY(workgroup_base, max(_GLF_IDENTITY(workgroup_base, 0u | (workgroup_base)), workgroup_base))))), ((_GLF_IDENTITY(workgroup_base, max(workgroup_base, _GLF_IDENTITY(workgroup_base, max(_GLF_IDENTITY(workgroup_base, 0u | (workgroup_base)), workgroup_base)))))) * (1u & 1u))), 0u, 0u)))))))) + _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, max(subgroup_id, _GLF_IDENTITY(subgroup_id, max(subgroup_id, subgroup_id)))) * subgroup_size, (_GLF_IDENTITY(subgroup_id, max(subgroup_id, _GLF_IDENTITY(subgroup_id, max(subgroup_id, subgroup_id)))) * subgroup_size) / uint(_GLF_ONE(1.0, injectionSwitch.y))) + subgroup_local_id;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   do
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        return;
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
    {
     for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 | (0 & -87906))); _injected_loop_counter --)
      {
       return;
      }
    }
  }
 else
  {
  }
 uint next_virtual_gid = _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, 0u ^ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, (workgroup_base) - 0u), clamp(workgroup_base, _GLF_IDENTITY(workgroup_base, min(workgroup_base, workgroup_base)), workgroup_base)), max(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, (54987u & 0u) | (workgroup_base)), _GLF_IDENTITY(clamp(workgroup_base, _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, (workgroup_base) << 0u), min(workgroup_base, workgroup_base)), workgroup_base), min(clamp(workgroup_base, _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, (workgroup_base) << 0u), min(workgroup_base, workgroup_base)), workgroup_base), _GLF_IDENTITY(clamp(workgroup_base, _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, (workgroup_base) << 0u), min(workgroup_base, workgroup_base)), workgroup_base), _GLF_IDENTITY(0u, clamp(0u, 0u, 0u)) | (clamp(workgroup_base, _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, (workgroup_base) << 0u), min(workgroup_base, workgroup_base)), workgroup_base)))))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, _GLF_IDENTITY(clamp(workgroup_base, _GLF_IDENTITY(workgroup_base, min(workgroup_base, workgroup_base)), workgroup_base), clamp(_GLF_IDENTITY(clamp(workgroup_base, _GLF_IDENTITY(workgroup_base, min(workgroup_base, workgroup_base)), workgroup_base), (clamp(workgroup_base, _GLF_IDENTITY(workgroup_base, min(workgroup_base, workgroup_base)), workgroup_base)) | (clamp(workgroup_base, _GLF_IDENTITY(workgroup_base, min(workgroup_base, workgroup_base)), workgroup_base))), clamp(workgroup_base, _GLF_IDENTITY(workgroup_base, min(workgroup_base, workgroup_base)), workgroup_base), clamp(workgroup_base, _GLF_IDENTITY(workgroup_base, min(workgroup_base, workgroup_base)), workgroup_base)))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(workgroup_base, clamp(workgroup_base, _GLF_IDENTITY(workgroup_base, min(workgroup_base, workgroup_base)), workgroup_base))), (true ? ~ (_GLF_IDENTITY(workgroup_base, clamp(workgroup_base, _GLF_IDENTITY(workgroup_base, min(workgroup_base, workgroup_base)), workgroup_base))) : _GLF_FUZZED(workgroup_base))))), (_GLF_IDENTITY(workgroup_base, _GLF_IDENTITY(clamp(workgroup_base, _GLF_IDENTITY(workgroup_base, min(workgroup_base, workgroup_base)), workgroup_base), (clamp(workgroup_base, _GLF_IDENTITY(workgroup_base, min(workgroup_base, workgroup_base)), workgroup_base)) + 0u))) / 1u))), (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, clamp(_GLF_IDENTITY(workgroup_base, (workgroup_base) | (workgroup_base)), _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, min(workgroup_base, _GLF_IDENTITY(workgroup_base, min(workgroup_base, _GLF_IDENTITY(workgroup_base, (_GLF_IDENTITY(workgroup_base, uint(uvec4(_GLF_IDENTITY(workgroup_base, (workgroup_base) + 0u), 1u, 0u, 0u)))) | 0u))))), (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, min(workgroup_base, _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, 1u * (workgroup_base)), min(workgroup_base, _GLF_IDENTITY(workgroup_base, (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, (workgroup_base) >> 0u), uint(uvec4(_GLF_IDENTITY(workgroup_base, (workgroup_base) + 0u), 1u, 0u, 0u)))) | 0u))))), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, (workgroup_base) - 0u), min(workgroup_base, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, 1u * (workgroup_base)), uint(_GLF_IDENTITY(uvec3(_GLF_IDENTITY(workgroup_base, 1u * (workgroup_base)), 1u, (1u & 1u)), uvec3(0u, 0u, 0u) ^ (uvec3(_GLF_IDENTITY(workgroup_base, 1u * (workgroup_base)), 1u, (1u & 1u)))))), (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, 1u * (workgroup_base)), uint(_GLF_IDENTITY(uvec3(_GLF_IDENTITY(workgroup_base, 1u * (workgroup_base)), 1u, (1u & 1u)), uvec3(0u, 0u, 0u) ^ (uvec3(_GLF_IDENTITY(workgroup_base, 1u * (workgroup_base)), 1u, (1u & 1u))))))) | 0u), min(workgroup_base, _GLF_IDENTITY(workgroup_base, _GLF_IDENTITY((_GLF_IDENTITY(workgroup_base, uint(uvec4(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, (workgroup_base) + 0u), uint(uvec4(_GLF_IDENTITY(workgroup_base, (workgroup_base) + 0u), 0u, 1u, 1u))), 1u, 0u, 0u)))) | 0u, 0u | ((_GLF_IDENTITY(workgroup_base, uint(uvec4(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, (workgroup_base) + 0u), uint(uvec4(_GLF_IDENTITY(workgroup_base, (workgroup_base) + 0u), 0u, 1u, 1u))), 1u, 0u, 0u)))) | 0u))))))))))) * uint(_GLF_ONE(1.0, injectionSwitch.y))), workgroup_base)), min(_GLF_IDENTITY(workgroup_base, clamp(workgroup_base, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, min(workgroup_base, _GLF_IDENTITY(workgroup_base, min(workgroup_base, _GLF_IDENTITY(workgroup_base, _GLF_IDENTITY((_GLF_IDENTITY(workgroup_base, uint(uvec4(_GLF_IDENTITY(workgroup_base, (workgroup_base) + _GLF_IDENTITY(0u, uint(_GLF_IDENTITY(uvec3(_GLF_IDENTITY(0u, (0u) | (0u)), (0u >> _GLF_IDENTITY(uint(0u), uint(0u))), 1u), (uvec3(_GLF_IDENTITY(0u, (0u) | (0u)), (0u >> _GLF_IDENTITY(uint(0u), uint(0u))), 1u)) ^ uvec3(0u, 0u, 0u))))), 1u, 0u, 0u)))), ~ (~ ((_GLF_IDENTITY(workgroup_base, uint(uvec4(_GLF_IDENTITY(workgroup_base, (workgroup_base) + _GLF_IDENTITY(0u, uint(_GLF_IDENTITY(uvec3(_GLF_IDENTITY(0u, (0u) | (0u)), (0u >> _GLF_IDENTITY(uint(0u), uint(0u))), 1u), (uvec3(_GLF_IDENTITY(0u, (0u) | (0u)), (0u >> _GLF_IDENTITY(uint(0u), uint(0u))), 1u)) ^ uvec3(0u, 0u, 0u))))), 1u, 0u, 0u))))))) | 0u))))), clamp(_GLF_IDENTITY(workgroup_base, min(workgroup_base, _GLF_IDENTITY(workgroup_base, min(workgroup_base, _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, 0u | (workgroup_base)), _GLF_IDENTITY((_GLF_IDENTITY(workgroup_base, uint(_GLF_IDENTITY(uvec4(_GLF_IDENTITY(workgroup_base, (workgroup_base) + _GLF_IDENTITY(0u, uint(_GLF_IDENTITY(uvec3(_GLF_IDENTITY(0u, (0u) | (0u)), (_GLF_IDENTITY(0u >> _GLF_IDENTITY(uint(0u), uint(0u)), (0u >> _GLF_IDENTITY(uint(0u), uint(0u))) << 0u)), 1u), (uvec3(_GLF_IDENTITY(0u, (0u) | (0u)), (0u >> _GLF_IDENTITY(uint(0u), uint(0u))), 1u)) ^ uvec3(0u, 0u, 0u))))), 1u, 0u, 0u), ~ (~ (uvec4(_GLF_IDENTITY(workgroup_base, (workgroup_base) + _GLF_IDENTITY(0u, uint(_GLF_IDENTITY(uvec3(_GLF_IDENTITY(0u, (0u) | (0u)), (_GLF_IDENTITY(0u >> _GLF_IDENTITY(uint(0u), uint(0u)), (0u >> _GLF_IDENTITY(uint(0u), uint(0u))) << 0u)), 1u), (uvec3(_GLF_IDENTITY(0u, (0u) | (0u)), (0u >> _GLF_IDENTITY(uint(0u), uint(0u))), 1u)) ^ uvec3(0u, 0u, 0u))))), 1u, 0u, 0u))))))), ~ (~ ((_GLF_IDENTITY(workgroup_base, uint(uvec4(_GLF_IDENTITY(workgroup_base, (workgroup_base) + _GLF_IDENTITY(0u, uint(_GLF_IDENTITY(uvec3(_GLF_IDENTITY(0u, _GLF_IDENTITY((0u) | (0u), ~ (~ ((0u) | (0u))))), (0u >> _GLF_IDENTITY(_GLF_IDENTITY(uint(0u), ~ (~ (uint(0u)))), uint(0u))), 1u), (uvec3(_GLF_IDENTITY(0u, (0u) | (0u)), (0u >> _GLF_IDENTITY(uint(0u), uint(0u))), 1u)) ^ uvec3(0u, 0u, _GLF_IDENTITY(0u, (true ? 0u : _GLF_FUZZED(128184u)))))))), 1u, 0u, 0u))))))) | 0u))))), _GLF_IDENTITY(workgroup_base, min(workgroup_base, _GLF_IDENTITY(workgroup_base, min(workgroup_base, _GLF_IDENTITY(workgroup_base, _GLF_IDENTITY((_GLF_IDENTITY(workgroup_base, uint(uvec4(_GLF_IDENTITY(workgroup_base, (workgroup_base) + _GLF_IDENTITY(0u, uint(_GLF_IDENTITY(uvec3(_GLF_IDENTITY(0u, (0u) | (0u)), (0u >> _GLF_IDENTITY(uint(0u), uint(0u))), 1u), (uvec3(_GLF_IDENTITY(0u, (0u) | (0u)), (0u >> _GLF_IDENTITY(uint(0u), uint(0u))), 1u)) ^ uvec3(0u, 0u, 0u))))), 1u, 0u, 0u)))), ~ (~ _GLF_IDENTITY(((_GLF_IDENTITY(workgroup_base, uint(uvec4(_GLF_IDENTITY(workgroup_base, (workgroup_base) + _GLF_IDENTITY(0u, uint(_GLF_IDENTITY(uvec3(_GLF_IDENTITY(0u, (0u) | (0u)), (0u >> _GLF_IDENTITY(uint(0u), uint(0u))), 1u), (uvec3(_GLF_IDENTITY(0u, (0u) | (0u)), (0u >> _GLF_IDENTITY(uint(0u), uint(0u))), 1u)) ^ uvec3(0u, 0u, 0u))))), 1u, 0u, 0u))))), (((_GLF_IDENTITY(workgroup_base, uint(uvec4(_GLF_IDENTITY(workgroup_base, (workgroup_base) + _GLF_IDENTITY(0u, uint(_GLF_IDENTITY(uvec3(_GLF_IDENTITY(0u, (0u) | (0u)), (0u >> _GLF_IDENTITY(uint(0u), uint(0u))), 1u), (uvec3(_GLF_IDENTITY(0u, (0u) | (0u)), (0u >> _GLF_IDENTITY(uint(0u), uint(0u))), 1u)) ^ uvec3(0u, 0u, 0u))))), 1u, 0u, 0u)))))) | (((_GLF_IDENTITY(workgroup_base, uint(uvec4(_GLF_IDENTITY(workgroup_base, (workgroup_base) + _GLF_IDENTITY(0u, uint(_GLF_IDENTITY(uvec3(_GLF_IDENTITY(0u, (0u) | (0u)), (0u >> _GLF_IDENTITY(uint(0u), uint(0u))), 1u), (uvec3(_GLF_IDENTITY(0u, (0u) | (0u)), (0u >> _GLF_IDENTITY(uint(0u), uint(0u))), 1u)) ^ uvec3(0u, 0u, 0u))))), 1u, 0u, 0u))))))))) | 0u))))), _GLF_IDENTITY(workgroup_base, min(workgroup_base, _GLF_IDENTITY(workgroup_base, min(workgroup_base, _GLF_IDENTITY(workgroup_base, _GLF_IDENTITY((_GLF_IDENTITY(workgroup_base, uint(_GLF_IDENTITY(uvec4(_GLF_IDENTITY(workgroup_base, (workgroup_base) + _GLF_IDENTITY(0u, uint(_GLF_IDENTITY(uvec3(_GLF_IDENTITY(0u, (0u) | (0u)), (0u >> _GLF_IDENTITY(uint(0u), uint(0u))), 1u), (uvec3(_GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, max(0u, 0u))) | (0u)), (0u >> _GLF_IDENTITY(uint(0u), uint(0u))), 1u)) ^ uvec3(0u, 0u, 0u))))), 1u, 0u, 0u), (uvec4(_GLF_IDENTITY(workgroup_base, (workgroup_base) + _GLF_IDENTITY(0u, uint(_GLF_IDENTITY(uvec3(_GLF_IDENTITY(0u, (0u) | (0u)), (0u >> _GLF_IDENTITY(uint(0u), uint(0u))), 1u), (uvec3(_GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, max(0u, 0u))) | (0u)), (0u >> _GLF_IDENTITY(uint(0u), uint(0u))), 1u)) ^ uvec3(0u, 0u, 0u))))), 1u, 0u, 0u)) * ((uvec4(1u, 1u, 1u, 1u) << _GLF_IDENTITY(uvec4(5u), uvec4(5u))) >> _GLF_IDENTITY(uvec4(5u), uvec4(5u))))))), ~ (~ _GLF_IDENTITY(((_GLF_IDENTITY(workgroup_base, uint(uvec4(_GLF_IDENTITY(workgroup_base, _GLF_IDENTITY((workgroup_base), ((workgroup_base)) - 0u) + _GLF_IDENTITY(_GLF_IDENTITY(0u, 0u | (0u)), uint(_GLF_IDENTITY(uvec3(_GLF_IDENTITY(0u, (0u) | (0u)), (0u >> _GLF_IDENTITY(uint(0u), uint(0u))), 1u), (uvec3(_GLF_IDENTITY(0u, (0u) | (0u)), (0u >> _GLF_IDENTITY(uint(0u), uint(0u))), 1u)) ^ uvec3(0u, 0u, 0u))))), 1u, 0u, 0u))))), (((_GLF_IDENTITY(workgroup_base, uint(uvec4(_GLF_IDENTITY(workgroup_base, _GLF_IDENTITY((workgroup_base), ((workgroup_base)) - 0u) + _GLF_IDENTITY(_GLF_IDENTITY(0u, 0u | (0u)), uint(_GLF_IDENTITY(uvec3(_GLF_IDENTITY(0u, (0u) | (0u)), (0u >> _GLF_IDENTITY(uint(0u), uint(0u))), 1u), (uvec3(_GLF_IDENTITY(0u, (0u) | (0u)), (0u >> _GLF_IDENTITY(uint(0u), uint(0u))), 1u)) ^ uvec3(0u, 0u, 0u))))), 1u, 0u, 0u)))))) | (((_GLF_IDENTITY(workgroup_base, uint(uvec4(_GLF_IDENTITY(workgroup_base, _GLF_IDENTITY((workgroup_base), ((workgroup_base)) - 0u) + _GLF_IDENTITY(_GLF_IDENTITY(0u, 0u | (0u)), uint(_GLF_IDENTITY(uvec3(_GLF_IDENTITY(0u, (0u) | (0u)), (0u >> _GLF_IDENTITY(uint(0u), uint(0u))), 1u), (uvec3(_GLF_IDENTITY(0u, (0u) | (0u)), (0u >> _GLF_IDENTITY(uint(0u), uint(0u))), 1u)) ^ uvec3(0u, 0u, 0u))))), 1u, 0u, 0u))))))))) | 0u))))))), (_GLF_IDENTITY(workgroup_base, min(workgroup_base, _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, 1u * (workgroup_base)), min(workgroup_base, _GLF_IDENTITY(workgroup_base, (_GLF_IDENTITY(workgroup_base, uint(uvec4(_GLF_IDENTITY(workgroup_base, (workgroup_base) + 0u), 1u, 0u, _GLF_IDENTITY(0u, 0u | (0u)))))) | 0u)))))) * uint(_GLF_ONE(1.0, injectionSwitch.y))), workgroup_base)), _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, clamp(workgroup_base, _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, min(workgroup_base, _GLF_IDENTITY(workgroup_base, min(workgroup_base, _GLF_IDENTITY(workgroup_base, (_GLF_IDENTITY(workgroup_base, uint(uvec4(_GLF_IDENTITY(workgroup_base, (workgroup_base) + 0u), 1u, 0u, 0u)))) | 0u))))), (_GLF_IDENTITY(workgroup_base, min(workgroup_base, _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, 1u * (workgroup_base)), min(workgroup_base, _GLF_IDENTITY(workgroup_base, _GLF_IDENTITY((_GLF_IDENTITY(workgroup_base, uint(uvec4(_GLF_IDENTITY(workgroup_base, (workgroup_base) + 0u), 1u, 0u, 0u)))) | 0u, 0u ^ ((_GLF_IDENTITY(workgroup_base, uint(uvec4(_GLF_IDENTITY(workgroup_base, (workgroup_base) + 0u), 1u, 0u, 0u)))) | 0u)))))))) * uint(_GLF_ONE(1.0, injectionSwitch.y))), workgroup_base)), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, clamp(_GLF_IDENTITY(workgroup_base, 1u * (_GLF_IDENTITY(workgroup_base, uint(_GLF_IDENTITY(uvec4(workgroup_base, 1u, 1u, 0u), (uvec4(workgroup_base, 1u, 1u, 0u)) << uvec4(0u, 0u, 0u, 0u)))))), _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, min(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, (workgroup_base) - 0u), (workgroup_base) / uint(_GLF_ONE(1.0, injectionSwitch.y))), _GLF_IDENTITY(workgroup_base, min(workgroup_base, _GLF_IDENTITY(workgroup_base, _GLF_IDENTITY((_GLF_IDENTITY(workgroup_base, uint(uvec4(_GLF_IDENTITY(workgroup_base, (_GLF_IDENTITY(workgroup_base, _GLF_IDENTITY(uint(uvec3(_GLF_IDENTITY(workgroup_base, _GLF_IDENTITY(1u, clamp(1u, 1u, 1u)) * (workgroup_base)), 1u, 1u)), min(uint(uvec3(_GLF_IDENTITY(workgroup_base, 1u * (workgroup_base)), 1u, 1u)), uint(uvec3(_GLF_IDENTITY(workgroup_base, 1u * (workgroup_base)), 1u, 1u)))))) + 0u), 1u, 0u, 0u)))) | 0u, (_GLF_IDENTITY((_GLF_IDENTITY(workgroup_base, uint(uvec4(_GLF_IDENTITY(workgroup_base, (_GLF_IDENTITY(workgroup_base, _GLF_IDENTITY(uint(uvec3(_GLF_IDENTITY(workgroup_base, _GLF_IDENTITY(1u, clamp(1u, 1u, 1u)) * (workgroup_base)), 1u, 1u)), min(uint(uvec3(_GLF_IDENTITY(workgroup_base, 1u * (workgroup_base)), 1u, 1u)), uint(uvec3(_GLF_IDENTITY(workgroup_base, 1u * (workgroup_base)), 1u, 1u)))))) + 0u), 1u, 0u, 0u)))) | 0u, max((_GLF_IDENTITY(workgroup_base, uint(uvec4(_GLF_IDENTITY(workgroup_base, (_GLF_IDENTITY(workgroup_base, _GLF_IDENTITY(uint(uvec3(_GLF_IDENTITY(workgroup_base, _GLF_IDENTITY(1u, clamp(1u, 1u, 1u)) * (workgroup_base)), 1u, 1u)), min(uint(uvec3(_GLF_IDENTITY(workgroup_base, 1u * (workgroup_base)), 1u, 1u)), uint(uvec3(_GLF_IDENTITY(workgroup_base, 1u * (workgroup_base)), 1u, 1u)))))) + 0u), 1u, 0u, 0u)))) | 0u, (_GLF_IDENTITY(workgroup_base, uint(uvec4(_GLF_IDENTITY(workgroup_base, (_GLF_IDENTITY(workgroup_base, _GLF_IDENTITY(uint(uvec3(_GLF_IDENTITY(workgroup_base, _GLF_IDENTITY(1u, clamp(1u, 1u, 1u)) * (workgroup_base)), 1u, 1u)), min(uint(uvec3(_GLF_IDENTITY(workgroup_base, 1u * (workgroup_base)), 1u, 1u)), uint(uvec3(_GLF_IDENTITY(workgroup_base, 1u * (workgroup_base)), 1u, 1u)))))) + 0u), 1u, 0u, 0u)))) | 0u))) >> 0u)))))), (_GLF_IDENTITY(workgroup_base, min(workgroup_base, _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, _GLF_IDENTITY(1u * (workgroup_base), (1u * (workgroup_base)) - 0u)), min(workgroup_base, _GLF_IDENTITY(workgroup_base, (_GLF_IDENTITY(workgroup_base, uint(uvec4(_GLF_IDENTITY(workgroup_base, (workgroup_base) + 0u), 1u, 0u, 0u)))) | 0u)))))) * uint(_GLF_ONE(1.0, injectionSwitch.y))), workgroup_base)), 0u ^ (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, (workgroup_base) - 0u), clamp(workgroup_base, _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, min(_GLF_IDENTITY(workgroup_base, (_GLF_IDENTITY(workgroup_base, min(workgroup_base, workgroup_base))) | (workgroup_base)), _GLF_IDENTITY(workgroup_base, min(workgroup_base, _GLF_IDENTITY(workgroup_base, (_GLF_IDENTITY(workgroup_base, uint(uvec4(_GLF_IDENTITY(workgroup_base, (workgroup_base) + _GLF_IDENTITY(0u, 0u | (0u))), _GLF_IDENTITY(1u, _GLF_IDENTITY((1u) - 0u, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? (1u) - 0u : _GLF_FUZZED(workgroup_id)))), 0u, 0u)))) | 0u))))), (_GLF_IDENTITY(workgroup_base, min(workgroup_base, _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, 1u * (workgroup_base)), min(_GLF_IDENTITY(workgroup_base, _GLF_IDENTITY((_GLF_IDENTITY(workgroup_base, (workgroup_base) | (workgroup_base))) * 1u, ~ (_GLF_IDENTITY(~ ((_GLF_IDENTITY(workgroup_base, (workgroup_base) | (workgroup_base))) * 1u), (false ? _GLF_FUZZED(num_workgroup) : ~ ((_GLF_IDENTITY(workgroup_base, (workgroup_base) | (workgroup_base))) * 1u)))))), _GLF_IDENTITY(workgroup_base, (_GLF_IDENTITY(workgroup_base, uint(uvec4(_GLF_IDENTITY(workgroup_base, (workgroup_base) + 0u), 1u, 0u, 0u)))) | 0u)))))) * uint(_GLF_ONE(1.0, injectionSwitch.y))), workgroup_base)))))))))) - 0u))), (_GLF_IDENTITY(workgroup_base, 0u ^ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, clamp(workgroup_base, _GLF_IDENTITY(workgroup_base, _GLF_IDENTITY(min(workgroup_base, workgroup_base), (min(workgroup_base, workgroup_base)) + _GLF_IDENTITY(0u, (false ? _GLF_FUZZED(uvec4(42837u, 64310u, 122964u, 157342u)[1]) : 0u)))), workgroup_base)), max(_GLF_IDENTITY(workgroup_base, clamp(workgroup_base, _GLF_IDENTITY(workgroup_base, min(workgroup_base, workgroup_base)), workgroup_base)), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, clamp(workgroup_base, _GLF_IDENTITY(workgroup_base, min(workgroup_base, workgroup_base)), workgroup_base)), (_GLF_IDENTITY(workgroup_base, clamp(workgroup_base, _GLF_IDENTITY(workgroup_base, min(workgroup_base, workgroup_base)), workgroup_base))) << 0u), 1u * (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, clamp(workgroup_base, _GLF_IDENTITY(workgroup_base, min(workgroup_base, workgroup_base)), workgroup_base)), (_GLF_IDENTITY(workgroup_base, clamp(workgroup_base, _GLF_IDENTITY(workgroup_base, min(workgroup_base, workgroup_base)), workgroup_base))) << 0u), uint(uvec4(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, clamp(workgroup_base, _GLF_IDENTITY(workgroup_base, min(workgroup_base, workgroup_base)), workgroup_base)), (_GLF_IDENTITY(workgroup_base, clamp(workgroup_base, _GLF_IDENTITY(workgroup_base, min(workgroup_base, workgroup_base)), workgroup_base))) << 0u), 1u, 0u, 1u))))))), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, clamp(workgroup_base, _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, min(workgroup_base, _GLF_IDENTITY(workgroup_base, min(workgroup_base, _GLF_IDENTITY(workgroup_base, (_GLF_IDENTITY(workgroup_base, uint(uvec4(_GLF_IDENTITY(workgroup_base, (workgroup_base) + 0u), 1u, 0u, 0u)))) | 0u))))), (_GLF_IDENTITY(workgroup_base, min(workgroup_base, _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, 1u * (workgroup_base)), min(workgroup_base, _GLF_IDENTITY(workgroup_base, (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, (workgroup_base) / 1u), uint(uvec4(_GLF_IDENTITY(workgroup_base, _GLF_IDENTITY((workgroup_base) + 0u, (_GLF_IDENTITY((workgroup_base) + 0u, ((workgroup_base) + 0u) / 1u)) | 0u)), _GLF_IDENTITY(1u, ~ (~ (1u))), 0u, 0u)))) | 0u)))))) * uint(_GLF_ONE(1.0, injectionSwitch.y))), workgroup_base)), (_GLF_IDENTITY(workgroup_base, clamp(workgroup_base, _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, min(workgroup_base, _GLF_IDENTITY(workgroup_base, min(workgroup_base, _GLF_IDENTITY(workgroup_base, (_GLF_IDENTITY(workgroup_base, uint(uvec4(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, _GLF_IDENTITY(uint(uvec3(workgroup_base, 0u, ((1u << _GLF_IDENTITY(uint(3u), _GLF_IDENTITY(uint(3u), clamp(uint(3u), uint(3u), uint(3u))))) >> _GLF_IDENTITY(uint(3u), _GLF_IDENTITY(uint(3u), (uint(3u)) >> 0u))))), max(uint(uvec3(workgroup_base, 0u, ((1u << _GLF_IDENTITY(uint(3u), _GLF_IDENTITY(uint(3u), clamp(uint(3u), uint(3u), uint(3u))))) >> _GLF_IDENTITY(uint(3u), _GLF_IDENTITY(uint(3u), (uint(3u)) >> 0u))))), uint(uvec3(workgroup_base, 0u, ((1u << _GLF_IDENTITY(uint(3u), _GLF_IDENTITY(uint(3u), clamp(uint(3u), uint(3u), uint(3u))))) >> _GLF_IDENTITY(uint(3u), _GLF_IDENTITY(uint(3u), (uint(3u)) >> 0u)))))))), (workgroup_base) + 0u), 1u, 0u, 0u)))) | 0u))))), (_GLF_IDENTITY(workgroup_base, min(workgroup_base, _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, 1u * (workgroup_base)), min(workgroup_base, _GLF_IDENTITY(workgroup_base, (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, (workgroup_base) / 1u), uint(uvec4(_GLF_IDENTITY(workgroup_base, (workgroup_base) + 0u), _GLF_IDENTITY(1u, ~ (~ (1u))), 0u, 0u)))) | 0u)))))) * uint(_GLF_ONE(1.0, injectionSwitch.y))), workgroup_base))) ^ 0u)) - 0u, uint(_GLF_IDENTITY(uvec2((_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, clamp(workgroup_base, _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, min(workgroup_base, _GLF_IDENTITY(workgroup_base, min(workgroup_base, _GLF_IDENTITY(workgroup_base, (_GLF_IDENTITY(workgroup_base, uint(uvec4(_GLF_IDENTITY(workgroup_base, (workgroup_base) + 0u), 1u, 0u, 0u)))) | 0u))))), (_GLF_IDENTITY(workgroup_base, min(workgroup_base, _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, 1u * (workgroup_base)), min(workgroup_base, _GLF_IDENTITY(workgroup_base, (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, (workgroup_base) / 1u), uint(uvec4(_GLF_IDENTITY(workgroup_base, _GLF_IDENTITY((workgroup_base) + 0u, (_GLF_IDENTITY((workgroup_base) + 0u, ((workgroup_base) + 0u) / 1u)) | 0u)), _GLF_IDENTITY(1u, ~ (~ (1u))), 0u, 0u)))) | 0u)))))) * uint(_GLF_ONE(1.0, injectionSwitch.y))), workgroup_base)), (_GLF_IDENTITY(workgroup_base, clamp(workgroup_base, _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, min(workgroup_base, _GLF_IDENTITY(workgroup_base, min(workgroup_base, _GLF_IDENTITY(workgroup_base, (_GLF_IDENTITY(workgroup_base, uint(uvec4(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, _GLF_IDENTITY(uint(uvec3(workgroup_base, 0u, ((1u << _GLF_IDENTITY(uint(3u), _GLF_IDENTITY(uint(3u), clamp(uint(3u), uint(3u), uint(3u))))) >> _GLF_IDENTITY(uint(3u), _GLF_IDENTITY(uint(3u), (uint(3u)) >> 0u))))), max(uint(uvec3(workgroup_base, 0u, ((1u << _GLF_IDENTITY(uint(3u), _GLF_IDENTITY(uint(3u), clamp(uint(3u), uint(3u), uint(3u))))) >> _GLF_IDENTITY(uint(3u), _GLF_IDENTITY(uint(3u), (uint(3u)) >> 0u))))), uint(uvec3(workgroup_base, 0u, ((1u << _GLF_IDENTITY(uint(3u), _GLF_IDENTITY(uint(3u), clamp(uint(3u), uint(3u), uint(3u))))) >> _GLF_IDENTITY(uint(3u), _GLF_IDENTITY(uint(3u), (uint(3u)) >> 0u)))))))), (workgroup_base) + 0u), 1u, 0u, 0u)))) | 0u))))), (_GLF_IDENTITY(workgroup_base, min(workgroup_base, _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, 1u * (workgroup_base)), min(workgroup_base, _GLF_IDENTITY(workgroup_base, (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, (workgroup_base) / 1u), uint(uvec4(_GLF_IDENTITY(workgroup_base, (workgroup_base) + 0u), _GLF_IDENTITY(1u, ~ (~ (1u))), 0u, 0u)))) | 0u)))))) * uint(_GLF_ONE(1.0, injectionSwitch.y))), workgroup_base))) ^ 0u)) - 0u, (0u & 157126u)), (_GLF_IDENTITY(uvec2((_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, clamp(workgroup_base, _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, min(workgroup_base, _GLF_IDENTITY(workgroup_base, min(workgroup_base, _GLF_IDENTITY(workgroup_base, (_GLF_IDENTITY(workgroup_base, uint(uvec4(_GLF_IDENTITY(workgroup_base, (workgroup_base) + 0u), 1u, 0u, 0u)))) | 0u))))), (_GLF_IDENTITY(workgroup_base, min(workgroup_base, _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, 1u * (workgroup_base)), min(workgroup_base, _GLF_IDENTITY(workgroup_base, (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, (workgroup_base) / 1u), uint(uvec4(_GLF_IDENTITY(workgroup_base, _GLF_IDENTITY((workgroup_base) + 0u, (_GLF_IDENTITY((workgroup_base) + 0u, ((workgroup_base) + 0u) / 1u)) | 0u)), _GLF_IDENTITY(1u, ~ (~ (1u))), 0u, 0u)))) | 0u)))))) * uint(_GLF_ONE(1.0, injectionSwitch.y))), workgroup_base)), (_GLF_IDENTITY(workgroup_base, clamp(workgroup_base, _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, min(workgroup_base, _GLF_IDENTITY(workgroup_base, min(workgroup_base, _GLF_IDENTITY(workgroup_base, (_GLF_IDENTITY(workgroup_base, uint(uvec4(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, _GLF_IDENTITY(uint(uvec3(workgroup_base, 0u, ((1u << _GLF_IDENTITY(uint(3u), _GLF_IDENTITY(uint(3u), clamp(uint(3u), uint(3u), uint(3u))))) >> _GLF_IDENTITY(uint(3u), _GLF_IDENTITY(uint(3u), (uint(3u)) >> 0u))))), max(uint(uvec3(workgroup_base, 0u, ((1u << _GLF_IDENTITY(uint(3u), _GLF_IDENTITY(uint(3u), clamp(uint(3u), uint(3u), uint(3u))))) >> _GLF_IDENTITY(uint(3u), _GLF_IDENTITY(uint(3u), (uint(3u)) >> 0u))))), uint(uvec3(workgroup_base, 0u, ((1u << _GLF_IDENTITY(uint(3u), _GLF_IDENTITY(uint(3u), clamp(uint(3u), uint(3u), uint(3u))))) >> _GLF_IDENTITY(uint(3u), _GLF_IDENTITY(uint(3u), (uint(3u)) >> 0u)))))))), (workgroup_base) + 0u), 1u, 0u, 0u)))) | 0u))))), (_GLF_IDENTITY(workgroup_base, min(workgroup_base, _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, 1u * (workgroup_base)), min(workgroup_base, _GLF_IDENTITY(workgroup_base, (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, (workgroup_base) / 1u), uint(uvec4(_GLF_IDENTITY(workgroup_base, (workgroup_base) + 0u), _GLF_IDENTITY(1u, ~ (~ (1u))), 0u, 0u)))) | 0u)))))) * uint(_GLF_ONE(1.0, injectionSwitch.y))), workgroup_base))) ^ 0u)) - 0u, (0u & 157126u)), (uvec2((_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, clamp(workgroup_base, _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, min(workgroup_base, _GLF_IDENTITY(workgroup_base, min(workgroup_base, _GLF_IDENTITY(workgroup_base, (_GLF_IDENTITY(workgroup_base, uint(uvec4(_GLF_IDENTITY(workgroup_base, (workgroup_base) + 0u), 1u, 0u, 0u)))) | 0u))))), (_GLF_IDENTITY(workgroup_base, min(workgroup_base, _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, 1u * (workgroup_base)), min(workgroup_base, _GLF_IDENTITY(workgroup_base, (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, (workgroup_base) / 1u), uint(uvec4(_GLF_IDENTITY(workgroup_base, _GLF_IDENTITY((workgroup_base) + 0u, (_GLF_IDENTITY((workgroup_base) + 0u, ((workgroup_base) + 0u) / 1u)) | 0u)), _GLF_IDENTITY(1u, ~ (~ (1u))), 0u, 0u)))) | 0u)))))) * uint(_GLF_ONE(1.0, injectionSwitch.y))), workgroup_base)), (_GLF_IDENTITY(workgroup_base, clamp(workgroup_base, _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, min(workgroup_base, _GLF_IDENTITY(workgroup_base, min(workgroup_base, _GLF_IDENTITY(workgroup_base, (_GLF_IDENTITY(workgroup_base, uint(uvec4(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, _GLF_IDENTITY(uint(uvec3(workgroup_base, 0u, ((1u << _GLF_IDENTITY(uint(3u), _GLF_IDENTITY(uint(3u), clamp(uint(3u), uint(3u), uint(3u))))) >> _GLF_IDENTITY(uint(3u), _GLF_IDENTITY(uint(3u), (uint(3u)) >> 0u))))), max(uint(uvec3(workgroup_base, 0u, ((1u << _GLF_IDENTITY(uint(3u), _GLF_IDENTITY(uint(3u), clamp(uint(3u), uint(3u), uint(3u))))) >> _GLF_IDENTITY(uint(3u), _GLF_IDENTITY(uint(3u), (uint(3u)) >> 0u))))), uint(uvec3(workgroup_base, 0u, ((1u << _GLF_IDENTITY(uint(3u), _GLF_IDENTITY(uint(3u), clamp(uint(3u), uint(3u), uint(3u))))) >> _GLF_IDENTITY(uint(3u), _GLF_IDENTITY(uint(3u), (uint(3u)) >> 0u)))))))), (workgroup_base) + 0u), 1u, 0u, 0u)))) | 0u))))), (_GLF_IDENTITY(workgroup_base, min(workgroup_base, _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, 1u * (workgroup_base)), min(workgroup_base, _GLF_IDENTITY(workgroup_base, (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, (workgroup_base) / 1u), uint(uvec4(_GLF_IDENTITY(workgroup_base, (workgroup_base) + 0u), _GLF_IDENTITY(1u, ~ (~ (1u))), 0u, 0u)))) | 0u)))))) * uint(_GLF_ONE(1.0, injectionSwitch.y))), workgroup_base))) ^ 0u)) - 0u, (0u & 157126u))) ^ uvec2(0u, 0u))) - uvec2(0u, 0u)))))))) * 1u) + subgroup_id * _GLF_IDENTITY(subgroup_size, ~ (~ (subgroup_size))) + ((_GLF_IDENTITY(subgroup_local_id + 1, min(subgroup_local_id + 1, subgroup_local_id + _GLF_IDENTITY(1, 1 * (1))))) % subgroup_size);
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     return;
    }
  }
 for(int _injected_loop_counter = _GLF_IDENTITY((0 | 0), clamp((0 | 0), (0 | 0), (0 | 0))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
  {
   do
    {
     if(_GLF_DEAD(false))
      return;
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), min((injectionSwitch) * mat2(1.0), (injectionSwitch) * mat2(1.0)))).y, clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(8.4)), float(injectionSwitch.y), bool(true))), injectionSwitch.y))), ((_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(float(false))), _GLF_IDENTITY(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_IDENTITY(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))) > injectionSwitch.y)) || false))))
        {
         do
          {
           do
            {
             return;
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(float(149428u))), float(injectionSwitch.x), bool(true))) > injectionSwitch.y), bool(_GLF_IDENTITY(bvec2((_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(float(149428u))), float(injectionSwitch.x), bool(true))) > injectionSwitch.y), true), bvec2(bvec4(bvec2((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(float(149428u))), float(injectionSwitch.x), bool(true))) > injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(float(149428u))), float(injectionSwitch.x), bool(true))) > injectionSwitch.y))), true), false, true))))))));
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
     else
      {
      }
    }
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false)))), ! (! (! (_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))))))))
  return;
 do
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(true, _GLF_IDENTITY((true) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true && ((true) && _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), ! (! (! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))))), false || (_GLF_IDENTITY(true, (true) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))
      {
       do
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(false || (false), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(false || (false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), bvec3(bvec3(bvec3(false || (false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))))), bool(bvec3(bool(_GLF_IDENTITY(bvec3(false || (false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), bvec3(bvec3(bvec3(false || (false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))))), false, true))))), bool(bvec4(_GLF_IDENTITY(false, false || (false)), false, false, _GLF_TRUE(true, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0)), ! (_GLF_IDENTITY(! ((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0))), true && (! ((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0))))))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), injectionSwitch)).y), false), bvec2(bvec3(bvec2((injectionSwitch.x < _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y, float(mat2x4(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y : _GLF_FUZZED(473.719))), 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, determinant(mat4(1.0, 1.0, 1.0, 0.0, 0.0, exp(0.0), 1.0, 1.0, log(1.0), 0.0, 1.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 0.0, 0.0, 0.0, 1.0)))))), false), true)))), ! (_GLF_IDENTITY(! (bool(bvec2((injectionSwitch.x < injectionSwitch.y), false))), bool(bvec2(! (bool(bvec2((injectionSwitch.x < injectionSwitch.y), false))), true))))))))))))
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
            {
             return;
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), ((false)) && true))), (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            return;
           for(int _injected_loop_counter = ((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6))); _GLF_WRAPPED_LOOP(_injected_loop_counter > ((0 >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false)) ? _GLF_FUZZED(-22417) : int(2))))) ^ 0)); _injected_loop_counter --)
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
              continue;
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
              }
             else
              {
               return;
              }
            }
          }
        }
       else
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
          {
           barrier();
          }
        }
      }
     else
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ! (_GLF_IDENTITY(! ((injectionSwitch.x < injectionSwitch.y)), false || (! ((injectionSwitch.x < injectionSwitch.y)))))))))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(1080.6935)), vec2(_GLF_FUZZED((-0.8 / 87.99)), (injectionSwitch)[1]), bvec2(false, true))).x > injectionSwitch.y, bool(bool(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(1080.6935)), vec2(_GLF_FUZZED((-0.8 / 87.99)), (injectionSwitch)[1]), bvec2(false, true))).x > injectionSwitch.y)))))), true && (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[_GLF_IDENTITY(0, (_GLF_IDENTITY(0, int(_GLF_IDENTITY(int(0), 0 | (int(0)))))) | (_GLF_IDENTITY(0, (_GLF_IDENTITY(0, clamp(0, 0, 0))) << 0)))], _GLF_FUZZED(1080.6935)), vec2(_GLF_IDENTITY(_GLF_FUZZED((-0.8 / 87.99)), float(mat4(_GLF_FUZZED((-0.8 / 87.99)), 1.0, abs(0.0), 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, sqrt(abs(1.0)), 0.0, 1.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), tan(0.0), sqrt(0.0), 1.0))), (injectionSwitch)[1]), bvec2(false, true))).x, mix(float(_GLF_FUZZED(-3851.2586)), float(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[_GLF_IDENTITY(0, (_GLF_IDENTITY(0, int(_GLF_IDENTITY(int(0), 0 | (int(0)))))) | (_GLF_IDENTITY(0, (_GLF_IDENTITY(0, clamp(0, 0, 0))) << 0)))], _GLF_FUZZED(1080.6935)), vec2(_GLF_FUZZED((-0.8 / 87.99)), (injectionSwitch)[1]), bvec2(false, true))).x), bool(true))), max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[_GLF_IDENTITY(0, _GLF_IDENTITY((_GLF_IDENTITY(0, int(_GLF_IDENTITY(int(0), 0 | (int(0)))))) | (_GLF_IDENTITY(0, (_GLF_IDENTITY(0, clamp(0, 0, 0))) << 0)), max(_GLF_IDENTITY((_GLF_IDENTITY(0, int(_GLF_IDENTITY(int(0), 0 | (int(0)))))) | (_GLF_IDENTITY(0, (_GLF_IDENTITY(0, clamp(0, 0, 0))) << 0)), min((_GLF_IDENTITY(0, int(_GLF_IDENTITY(int(0), 0 | (int(0)))))) | (_GLF_IDENTITY(0, (_GLF_IDENTITY(0, clamp(0, 0, 0))) << 0)), _GLF_IDENTITY((_GLF_IDENTITY(0, int(_GLF_IDENTITY(int(0), 0 | (int(0)))))) | (_GLF_IDENTITY(0, (_GLF_IDENTITY(0, clamp(0, 0, 0))) << 0)), int(int((_GLF_IDENTITY(0, int(_GLF_IDENTITY(int(0), 0 | (int(0)))))) | (_GLF_IDENTITY(0, (_GLF_IDENTITY(0, clamp(0, 0, 0))) << 0))))))), _GLF_IDENTITY((_GLF_IDENTITY(0, int(_GLF_IDENTITY(int(0), 0 | (int(0)))))) | (_GLF_IDENTITY(0, (_GLF_IDENTITY(0, clamp(0, 0, 0))) << 0)), ((_GLF_IDENTITY(0, int(_GLF_IDENTITY(int(0), 0 | (int(0)))))) | (_GLF_IDENTITY(0, (_GLF_IDENTITY(0, clamp(0, 0, 0))) << 0))) - 0))))], _GLF_FUZZED(1080.6935)), vec2(_GLF_FUZZED((-0.8 / 87.99)), (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)))[1]), bvec2(false, true))).x, mix(float(_GLF_FUZZED(-3851.2586)), float(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[_GLF_IDENTITY(0, (_GLF_IDENTITY(0, int(_GLF_IDENTITY(int(0), 0 | (int(0)))))) | (_GLF_IDENTITY(0, (_GLF_IDENTITY(0, clamp(_GLF_IDENTITY(0, (0) / 1), 0, 0))) << 0)))], _GLF_FUZZED(1080.6935)), vec2(_GLF_FUZZED((-0.8 / 87.99)), (injectionSwitch)[1]), bvec2(false, true))).x), bool(true))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[_GLF_IDENTITY(0, (_GLF_IDENTITY(0, int(_GLF_IDENTITY(_GLF_IDENTITY(int(0), 0 | (int(0))), clamp(_GLF_IDENTITY(int(0), 0 | (int(0))), _GLF_IDENTITY(int(0), 0 | (int(0))), _GLF_IDENTITY(int(0), 0 | (int(0)))))))) | (_GLF_IDENTITY(0, (_GLF_IDENTITY(0, clamp(0, 0, 0))) << 0)))], _GLF_FUZZED(1080.6935)), vec2(_GLF_FUZZED((-0.8 / _GLF_IDENTITY(87.99, _GLF_IDENTITY(float(mat2x4(87.99, 1.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x))), min(float(mat2x4(87.99, 1.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x))), float(mat2x4(87.99, 1.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x)))))))), (injectionSwitch)[1]), bvec2(false, true))).x, mix(float(_GLF_FUZZED(-3851.2586)), float(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[_GLF_IDENTITY(0, (_GLF_IDENTITY(0, int(_GLF_IDENTITY(int(0), 0 | (int(0)))))) | (_GLF_IDENTITY(0, (_GLF_IDENTITY(0, clamp(0, 0, 0))) << 0)))], _GLF_FUZZED(1080.6935)), vec2(_GLF_FUZZED((-0.8 / 87.99)), (injectionSwitch)[1]), bvec2(false, true))).x), bool(true))))) > injectionSwitch.y))))))
            {
             do
              {
               return;
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
          }
        }
       else
        {
        }
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bool(false))))))));
 for(int _injected_loop_counter = (1 & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       return;
      }
     else
      {
      }
    }
   buf[virtual_gid] = 1;
   if(_GLF_DEAD(false))
    break;
  }
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
  {
   for(int _injected_loop_counter = _GLF_IDENTITY((0 >> _GLF_IDENTITY(int(8), int(8))), ((0 >> _GLF_IDENTITY(int(8), int(8)))) ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
    {
     if(subgroup_local_id + 1 < subgroup_size)
      {
       int i = 0;
       if(_GLF_DEAD(false))
        break;
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0)), ! (! ((injectionSwitch.x < injectionSwitch.y)))))), _GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ((injectionSwitch.x < injectionSwitch.y)) && true)) && (bool(bool(_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ! (! ((_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(mat2(injectionSwitch.x, 0.0, _GLF_IDENTITY(0.0, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(5.3))) : _GLF_FUZZED(1.5))), 0.0)), min(float(mat2(injectionSwitch.x, 0.0, _GLF_IDENTITY(0.0, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(5.3))) : _GLF_FUZZED(1.5))), 0.0)), float(mat2(injectionSwitch.x, 0.0, _GLF_IDENTITY(0.0, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(5.3))) : _GLF_FUZZED(1.5))), 0.0))))) < _GLF_IDENTITY(injectionSwitch, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(injectionSwitch) : _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(-367.303)), vec2(_GLF_FUZZED(785.601), (injectionSwitch)[1]), bvec2(false, true))))).y))))))))))))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           atomicStore(buf[next_virtual_gid], uint(2), 4, 64, 4);
          }
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        return;
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
         if(_GLF_DEAD(false))
          barrier();
        }
      }
     else
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             return;
            }
           else
            {
            }
          }
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
          {
           if(_GLF_DEAD(false))
            continue;
           break;
          }
        }
       else
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           if(_GLF_DEAD(false))
            {
             do
              {
               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                }
               else
                {
                 return;
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           if(_GLF_DEAD(false))
            break;
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              break;
             return;
            }
          }
        }
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 & 1)); _injected_loop_counter ++)
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             atomicStore(buf[next_virtual_gid], uint(_GLF_IDENTITY(_GLF_IDENTITY(2, ~ (~ (2))), ~ (~ (_GLF_IDENTITY(2, ~ _GLF_IDENTITY((~ _GLF_IDENTITY((_GLF_IDENTITY(2, (2) ^ 0)), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY((_GLF_IDENTITY(2, (2) ^ 0)), ~ (~ ((_GLF_IDENTITY(2, (2) ^ 0)))))), max(~ (_GLF_IDENTITY((_GLF_IDENTITY(2, (2) ^ 0)), ~ (~ ((_GLF_IDENTITY(2, (2) ^ 0)))))), ~ (_GLF_IDENTITY((_GLF_IDENTITY(2, (2) ^ 0)), ~ (~ ((_GLF_IDENTITY(2, (2) ^ 0))))))))))), ((~ _GLF_IDENTITY((_GLF_IDENTITY(2, (2) ^ 0)), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY((_GLF_IDENTITY(2, (2) ^ 0)), ~ (~ ((_GLF_IDENTITY(2, (2) ^ 0)))))), max(~ (_GLF_IDENTITY((_GLF_IDENTITY(2, (2) ^ 0)), ~ (~ ((_GLF_IDENTITY(2, (2) ^ 0)))))), ~ (_GLF_IDENTITY((_GLF_IDENTITY(2, (2) ^ 0)), ~ (~ ((_GLF_IDENTITY(2, (2) ^ 0)))))))))))) / 1)))))), 4, 64, 4);
             if(_GLF_DEAD(false))
              continue;
            }
           else
            {
            }
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) > injectionSwitch.y)), bool(bvec3(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) > injectionSwitch.y)), false, true)))))
            {
             if(_GLF_DEAD(false))
              continue;
             return;
            }
          }
        }
      }
     if(_GLF_DEAD(false))
      continue;
    }
   if(_GLF_DEAD(false))
    break;
   if(_GLF_DEAD(false))
    {
     do
      {
       do
        {
         return;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(false))
      break;
    }
  }
 do
  {
   do
    {
     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), bool(bool(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), ! (! (_GLF_WRAPPED_IF_TRUE(true))))))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))))
        break;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
       if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false)))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
          break;
         if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false)))))
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
            {
             return;
            }
          }
         if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) || false))
          {
           if(_GLF_DEAD(false))
            break;
          }
         else
          {
           do
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               do
                {
                 barrier();
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             else
              {
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         for(int _injected_loop_counter = (1 ^ 1); _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
          {
           return;
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
      }
     else
      {
       if(_GLF_DEAD(false))
        continue;
       for(int _injected_loop_counter = (0 | int(_GLF_ZERO(0.0, injectionSwitch.x))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 | 0)); _injected_loop_counter ++)
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             do
              {
               if(_GLF_DEAD(false))
                break;
               if(_GLF_DEAD(false))
                continue;
               if(_GLF_DEAD(false))
                {
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                  {
                   return;
                  }
                 else
                  {
                  }
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                return;
              }
             while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, true && (false))));
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              break;
            }
           else
            {
             if(_GLF_DEAD(false))
              break;
             if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, (false) || false)))))))
                break;
               continue;
              }
            }
          }
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(_GLF_IDENTITY(bvec3(injectionSwitch.x > injectionSwitch.y, true, false), bvec3(bvec4(bvec3(injectionSwitch.x > injectionSwitch.y, true, false), false))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(injectionSwitch.x > injectionSwitch.y, false)))), (! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-210.566) : _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(143.613)), float(injectionSwitch.y), bool(true))))))) || false)))))));
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
