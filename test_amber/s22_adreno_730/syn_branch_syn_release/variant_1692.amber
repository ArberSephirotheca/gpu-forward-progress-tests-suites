#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = workgroup_size * workgroup_id;
 uint virtual_gid = workgroup_base + subgroup_id * subgroup_size + subgroup_local_id;
 uint next_virtual_gid = workgroup_base + subgroup_id * subgroup_size + ((subgroup_local_id + 1) % subgroup_size);
 buf[virtual_gid] = 1;
 if(subgroup_local_id + 1 < subgroup_size)
  {
   switch(_GLF_SWITCH((0 << _GLF_IDENTITY(int(5), int(5)))))
    {
     case 0:
     case 99:
     case 61:
     case 52:
     case 4:
     int i = 0;
     case 87:
     atomicStore(buf[next_virtual_gid], uint(2), 4, 64, 4);
     break;
     default:
     1;
    }
  }
 else
  {
   switch(_GLF_SWITCH((0 >> _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (int(0)) | (int(0)))))))
    {
     case 48:
     if(true)
      {
       {
        mat2 _GLF_SWITCH_1_0v;
        uvec2(110853u, 27633u);
        uvec3 _GLF_SWITCH_1_1v[74];
       }
      }
     else
      {
       while(false)
        {
         if(false)
          {
           uvec3(62788u, 78387u, 95680u);
           (ivec2(-52766, -3693).s / (ivec2(-96890, 27566) / ivec2(-51214, 20011)));
           uvec2(103872u, 9339u);
           mat4 _GLF_SWITCH_1_2v, _GLF_SWITCH_1_3v;
          }
         if((-97771 != 93033))
          {
           vec2(smoothstep(-1250.0035, normalize(2.7), -3.4), 2695.0626);
           mat3x2 _GLF_SWITCH_1_4v[23], _GLF_SWITCH_1_5v[60];
           (uvec3(185999u, subgroup_local_id, (virtual_gid + virtual_gid)));
           mat2x4(mat2x3(mat4(-448.797, 5.6, 9116.5724, -709.729, 3.3, -4.0, 2393.9449, -491.789, -838.312, 8.0, -42.12, 779.016, -9067.3684, -4856.6759, 2.2, 6794.8496)));
           (mat3(6225.7200, -6.0, -8.8, 40.46, -547.249, 586.412, -29.88, 26.93, 40.70) + (mat2x3(5.8, -443.184, -981.418, 31.46, 9.7, -3.3) * mat3x2(-8.3, -792.598, -9.3, 4.2, 5.3, -5.9)));
           mat2x3 _GLF_SWITCH_1_6v[3], _GLF_SWITCH_1_7v[55], _GLF_SWITCH_1_8v[99];
           mat4x2 _GLF_SWITCH_1_9v, _GLF_SWITCH_1_10v[84], _GLF_SWITCH_1_11v;
          }
         else
          {
          }
         if((-9.9 < 3604.4364))
          {
           ;
          }
         else
          {
           ivec4 _GLF_SWITCH_1_12v, _GLF_SWITCH_1_13v, _GLF_SWITCH_1_14v[44];
           mat2x4 _GLF_SWITCH_1_15v;
           -50449;
           _GLF_SWITCH_1_12v.rg;
           (clamp(ivec3(77470, -74812, -55892), -50794, -69655) << -46594);
           bvec3 _GLF_SWITCH_1_16v;
           int _GLF_SWITCH_1_17v;
          }
         ivec3(82857, -67311, -25478);
         while(lessThanEqual(vec4(49.11, -8.0, -510.820, -142.530), vec4(-1764.6053, 6.1, -8266.5783, 1.8)).b)
          {
           mat3x4 _GLF_SWITCH_1_18v;
           ;
          }
         while(true)
          {
           bitfieldExtract(-94711, -13398, 97697);
           vec4 _GLF_SWITCH_1_19v, _GLF_SWITCH_1_20v[33], _GLF_SWITCH_1_21v[46];
          }
        }
       7.2;
      }
     case 61:
     vec4 _GLF_SWITCH_1_22v, _GLF_SWITCH_1_23v, _GLF_SWITCH_1_24v;
     case 0:
     case 65:
     case 27:
     case 46:
     case 63:
     atomicStore(buf[next_virtual_gid], uint(2), 4, 64, 4);
     break;
     default:
     1;
    }
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
