#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false)))))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, (false) && true)), bool(bvec3(! (_GLF_IDENTITY(false, (false) && true)), false, false)))))))
    {
    }
   else
    {
     barrier();
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 do
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false)))))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  return;
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     barrier();
    }
   else
    {
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   return;
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, true, false)))))
  {
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec4(false, true, false, true))), (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      {
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
     barrier();
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   return;
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, (false) && true)))))
  {
   if(_GLF_DEAD(false))
    return;
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))), bool(bvec4(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))), true, false, false))), _GLF_IDENTITY(! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_IDENTITY(false, true && (false)))), false || (! (_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(false, true && (false)))), true && (bool(bool(_GLF_IDENTITY(false, true && (false)))))))))))), _GLF_IDENTITY(bool(bvec4(! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_IDENTITY(false, true && (false)))), false || (! (_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(false, true && (false)))), true && (bool(bool(_GLF_IDENTITY(false, true && (false)))))))))))), false, true, false)), false || (bool(bvec4(! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_IDENTITY(false, true && (false)))), false || (! (_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(false, true && (false)))), true && (bool(bool(_GLF_IDENTITY(false, true && (false)))))))))))), false, true, false)))))))
  return;
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(false))
  barrier();
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(false))
  {
   do
    {
     for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (int(5)) << 0))); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), int(int(int(4)))))) >> _GLF_IDENTITY(int(4), int(4)))); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))))))
          continue;
         if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))
          {
           if(_GLF_DEAD(false))
            barrier();
           return;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            return;
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(false))
    return;
   do
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
       return;
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, _GLF_IDENTITY((false) || false, false || ((false) || false)))));
  }
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  return;
 do
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     do
      {
       barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 do
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x, injectionSwitch.x)) < _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
        {
         if(_GLF_DEAD(false))
          return;
         barrier();
        }
       barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          break;
         if(_GLF_DEAD(false))
          break;
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           return;
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            continue;
           barrier();
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
        }
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
         barrier();
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
         barrier();
         if(_GLF_DEAD(false))
          return;
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
       do
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))))))
          return;
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      break;
     break;
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 if(_GLF_DEAD(false))
  barrier();
 uint workgroup_size = _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) << uvec3(0u, 0u, 0u)), _GLF_IDENTITY(min(gl_WorkGroupSize, gl_WorkGroupSize), ~ (~ _GLF_IDENTITY((min(gl_WorkGroupSize, gl_WorkGroupSize)), ((min(gl_WorkGroupSize, gl_WorkGroupSize))) - (uvec3(0u, 0u, 0u) ^ uvec3(0u, 0u, 0u)))))).x, max(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) << uvec3(0u, 0u, 0u)), _GLF_IDENTITY(min(gl_WorkGroupSize, gl_WorkGroupSize), ~ (~ _GLF_IDENTITY((min(gl_WorkGroupSize, gl_WorkGroupSize)), ((min(gl_WorkGroupSize, gl_WorkGroupSize))) - (uvec3(0u, 0u, 0u) ^ uvec3(0u, 0u, 0u)))))).x, _GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) << uvec3(0u, 0u, 0u)), _GLF_IDENTITY(min(gl_WorkGroupSize, gl_WorkGroupSize), ~ (~ _GLF_IDENTITY((min(gl_WorkGroupSize, gl_WorkGroupSize)), ((min(gl_WorkGroupSize, gl_WorkGroupSize))) - (uvec3(0u, 0u, 0u) ^ uvec3(0u, 0u, 0u)))))).x)), (_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize, _GLF_IDENTITY(min(gl_WorkGroupSize, gl_WorkGroupSize), ~ (~ (min(_GLF_IDENTITY(gl_WorkGroupSize, (false ? _GLF_FUZZED((61847u % uvec3(56122u, 160555u, 114199u))) : gl_WorkGroupSize)), gl_WorkGroupSize))))).x, (_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize, (_GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) | (gl_WorkGroupSize))) * uvec3(1u, 1u, 1u)), _GLF_IDENTITY(min(_GLF_IDENTITY(gl_WorkGroupSize, (_GLF_IDENTITY(gl_WorkGroupSize, max(_GLF_IDENTITY(gl_WorkGroupSize, ~ (~ (gl_WorkGroupSize))), gl_WorkGroupSize))) - uvec3(0u, 0u, 0u)), gl_WorkGroupSize), ~ (~ (min(gl_WorkGroupSize, _GLF_IDENTITY(gl_WorkGroupSize, uvec3(gl_WorkGroupSize[0], gl_WorkGroupSize[1], gl_WorkGroupSize[2]))))))).x) - (0u ^ _GLF_IDENTITY(0u, max(0u, _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, (true ? _GLF_IDENTITY(0u, (true ? 0u : _GLF_FUZZED(subgroup_size))) : _GLF_FUZZED(subgroup_local_id)))) + 0u)))))) / _GLF_IDENTITY(1u, 0u ^ (1u)));
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(mat2x3(injectionSwitch, 0.0, determinant(mat2(1.0, 0.0, 0.0, 1.0)), 1.0, sqrt(0.0)))).y))))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   do
    {
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, _GLF_IDENTITY(false, ! (! (false))), false)), false || (bool(bvec3(false, _GLF_IDENTITY(false, ! (! (false))), false)))))))))));
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED((injectionSwitch / -8511.0301)) : injectionSwitch)).y, true && (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y)))))))))))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))))).x > injectionSwitch.y) || false)))))))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
  }
 if(_GLF_DEAD(false))
  return;
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
  {
   for(int _injected_loop_counter = _GLF_IDENTITY(0, max(0, _GLF_IDENTITY(0, ~ (~ (0))))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       return;
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), bool(bvec3(! (true), true, _GLF_IDENTITY(true, true && (true)))))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         barrier();
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
          barrier();
         if(_GLF_DEAD(false))
          return;
        }
      }
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint workgroup_base = _GLF_IDENTITY(workgroup_size * workgroup_id, _GLF_IDENTITY(min(workgroup_size * workgroup_id, workgroup_size * workgroup_id), max(min(workgroup_size * workgroup_id, workgroup_size * workgroup_id), _GLF_IDENTITY(min(workgroup_size * workgroup_id, workgroup_size * workgroup_id), (0u ^ 0u) ^ (min(workgroup_size * workgroup_id, workgroup_size * workgroup_id))))));
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  return;
 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (false)))))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! _GLF_IDENTITY((! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))), ((! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))))) || false))) || _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), (mat2(1.0) * (injectionSwitch)) / abs(vec2(1.0, 1.0)))).x > injectionSwitch.y))))))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     barrier();
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     return;
    }
  }
 uint virtual_gid = workgroup_base + _GLF_IDENTITY(subgroup_id, (subgroup_id) * ((_GLF_IDENTITY(54470u, (_GLF_IDENTITY(false ? _GLF_FUZZED(workgroup_id) : 54470u, ~ (_GLF_IDENTITY(~ (false ? _GLF_FUZZED(workgroup_id) : 54470u), clamp(_GLF_IDENTITY(~ (false ? _GLF_FUZZED(workgroup_id) : 54470u), 1u * (~ (false ? _GLF_FUZZED(workgroup_id) : 54470u))), ~ (false ? _GLF_FUZZED(workgroup_id) : 54470u), ~ (false ? _GLF_FUZZED(workgroup_id) : 54470u))))))) & 0u) ^ _GLF_IDENTITY(_GLF_IDENTITY(1u, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 1u : _GLF_FUZZED(workgroup_base))), _GLF_IDENTITY(_GLF_IDENTITY(uint(uvec3(1u, 0u, 0u)), uint(uvec4(uint(uvec3(1u, 0u, 0u)), 1u, 0u, 0u))), ~ (~ (_GLF_IDENTITY(uint(uvec3(1u, 0u, 0u)), uint(uvec4(uint(uvec3(1u, 0u, 0u)), 1u, 0u, 0u))))))))) * subgroup_size + subgroup_local_id;
 uint next_virtual_gid = _GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, uint(uvec2(_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, _GLF_IDENTITY((workgroup_base + subgroup_id * subgroup_size), (_GLF_IDENTITY((workgroup_base + subgroup_id * subgroup_size), ((workgroup_base + _GLF_IDENTITY(subgroup_id * subgroup_size, max(subgroup_id * subgroup_size, subgroup_id * subgroup_size)))) << 0u)) / 1u) / 1u), _GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), 1.0 * (_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), float(mat3x4(_GLF_ZERO(0.0, injectionSwitch.x), 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, log(1.0), 0.0, 1.0, 1.0, 1.0))))), min(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), 1.0 * (_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), float(mat3x4(_GLF_ZERO(0.0, injectionSwitch.x), 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, log(1.0), 0.0, 1.0, 1.0, 1.0))))), _GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), 1.0 * (_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), float(mat3x4(_GLF_ZERO(0.0, injectionSwitch.x), 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, log(1.0), 0.0, 1.0, 1.0, 1.0)))))))), (uint(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), float(mat4x3(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat3(injectionSwitch, 1.0, 1.0, determinant(mat4(0.0, 1.0, 0.0, 1.0, 0.0, 0.0, determinant(mat3(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0)), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), 0.0, 1.0, 0.0, 0.0)), min(vec2(mat3(injectionSwitch, 1.0, 1.0, determinant(mat4(0.0, 1.0, 0.0, 1.0, 0.0, 0.0, determinant(mat3(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0)), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), 0.0, 1.0, 0.0, 0.0)), vec2(mat3(injectionSwitch, 1.0, 1.0, determinant(mat4(0.0, 1.0, 0.0, 1.0, 0.0, 0.0, determinant(mat3(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0)), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), 0.0, 1.0, 0.0, 0.0))))).x), 0.0, log(1.0), 0.0, 1.0, 1.0, cos(0.0), sin(tan(0.0)), abs(0.0), exp(0.0), 0.0, 1.0))), _GLF_IDENTITY(1.0 * (_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), float(mat3x4(_GLF_ZERO(0.0, injectionSwitch.x), 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, log(1.0), 0.0, 1.0, 1.0, _GLF_IDENTITY(1.0, max(1.0, 1.0)))))), min(_GLF_IDENTITY(1.0 * (_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), float(mat3x4(_GLF_ZERO(0.0, injectionSwitch.x), 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, log(1.0), 0.0, 1.0, 1.0, 1.0)))), clamp(1.0 * (_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), float(mat3x4(_GLF_ZERO(0.0, injectionSwitch.x), 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, log(_GLF_IDENTITY(1.0, _GLF_IDENTITY(float(vec4(1.0, 0.0, 0.0, length(vec4(0.0, 0.0, 0.0, 0.0)))), (false ? _GLF_FUZZED((- 3.7)) : float(vec4(1.0, 0.0, 0.0, length(vec4(0.0, 0.0, 0.0, 0.0)))))))), 0.0, 1.0, 1.0, 1.0)))), 1.0 * (_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), float(mat3x4(_GLF_ZERO(0.0, injectionSwitch.x), 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, log(1.0), 0.0, 1.0, 1.0, 1.0)))), 1.0 * (_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), float(mat3x4(_GLF_ZERO(0.0, injectionSwitch.x), 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, log(1.0), 0.0, 1.0, 1.0, 1.0)))))), 1.0 * (_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), float(mat3x4(_GLF_ZERO(0.0, injectionSwitch.x), 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, log(1.0), 0.0, 1.0, 1.0, 1.0))))))))) | (uint(_GLF_IDENTITY(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x))), 1.0 * (_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), float(mat3x4(_GLF_ZERO(0.0, injectionSwitch.x), 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, log(1.0), 0.0, 1.0, _GLF_IDENTITY(1.0, max(1.0, 1.0)), 1.0)))))))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), 1.0 * (_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), float(mat3x4(_GLF_ZERO(0.0, injectionSwitch.x), 1.0, 1.0, _GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), _GLF_IDENTITY(1.0, max(1.0, _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-984.986)), float(1.0), bool(true))))))), 0.0, 1.0, 1.0, log(1.0), 0.0, 1.0, 1.0, 1.0)))))), (uint(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), float(mat4x3(_GLF_ZERO(0.0, injectionSwitch.x), 0.0, log(_GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), 1.0, 1.0))), 0.0, 1.0, 1.0, cos(0.0), sin(tan(0.0)), abs(0.0), exp(0.0), 0.0, 1.0))), _GLF_IDENTITY(1.0 * (_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), float(mat3x4(_GLF_ZERO(_GLF_IDENTITY(0.0, (0.0) / 1.0), _GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)).x), 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, log(1.0), 0.0, 1.0, 1.0, 1.0)))), min(_GLF_IDENTITY(1.0 * (_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), float(mat3x4(_GLF_ZERO(0.0, injectionSwitch.x), 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, log(1.0), 0.0, 1.0, 1.0, 1.0)))), clamp(1.0 * (_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(float(mat3x4(_GLF_ZERO(0.0, injectionSwitch.x), 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, log(1.0), 0.0, 1.0, 1.0, 1.0)), min(float(mat3x4(_GLF_ZERO(0.0, injectionSwitch.x), 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, log(1.0), 0.0, 1.0, 1.0, 1.0)), _GLF_IDENTITY(float(mat3x4(_GLF_ZERO(0.0, injectionSwitch.x), 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, log(1.0), 0.0, 1.0, 1.0, 1.0)), clamp(float(mat3x4(_GLF_ZERO(0.0, injectionSwitch.x), 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, log(1.0), 0.0, 1.0, 1.0, 1.0)), float(mat3x4(_GLF_ZERO(0.0, injectionSwitch.x), 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, log(1.0), 0.0, 1.0, 1.0, 1.0)), float(mat3x4(_GLF_ZERO(0.0, injectionSwitch.x), 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, log(1.0), 0.0, 1.0, 1.0, 1.0)))))))), 1.0 * (_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), float(mat3x4(_GLF_ZERO(0.0, injectionSwitch.x), 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, _GLF_IDENTITY(log(1.0), _GLF_IDENTITY(float(mat2x4(log(1.0), sqrt(1.0), 0.0, 0.0, 1.0, 1.0, 0.0, 1.0)), max(float(mat2x4(log(1.0), sqrt(1.0), 0.0, 0.0, 1.0, 1.0, 0.0, 1.0)), float(mat2x4(log(1.0), sqrt(1.0), 0.0, 0.0, 1.0, 1.0, 0.0, 1.0))))), 0.0, 1.0, 1.0, 1.0)))), 1.0 * (_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), float(mat3x4(_GLF_ZERO(0.0, injectionSwitch.x), 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, log(1.0), _GLF_IDENTITY(0.0, min(0.0, 0.0)), 1.0, 1.0, 1.0)))))), 1.0 * (_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), float(mat3x4(_GLF_ZERO(0.0, injectionSwitch.x), 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, log(1.0), 0.0, 1.0, 1.0, 1.0))))))))) | _GLF_IDENTITY((uint(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), 1.0 * (_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), float(mat3x4(_GLF_ZERO(0.0, injectionSwitch.x), 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, log(1.0), 0.0, 1.0, 1.0, 1.0))))))), ((uint(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), 1.0 * (_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), float(mat3x4(_GLF_ZERO(0.0, injectionSwitch.x), 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, log(1.0), 0.0, 1.0, 1.0, 1.0)))))))) * 1u)), (_GLF_IDENTITY(uint(_GLF_IDENTITY(_GLF_ZERO(_GLF_IDENTITY(0.0, max(0.0, _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(3061.7053) : 0.0)))), injectionSwitch.x), 1.0 * (_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(float(mat3x4(_GLF_ZERO(0.0, injectionSwitch.x), 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, log(1.0), 0.0, 1.0, 1.0, 1.0)), clamp(float(mat3x4(_GLF_ZERO(0.0, injectionSwitch.x), 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, log(1.0), 0.0, 1.0, 1.0, 1.0)), _GLF_IDENTITY(float(mat3x4(_GLF_ZERO(0.0, injectionSwitch.x), 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, log(1.0), 0.0, 1.0, 1.0, 1.0)), clamp(float(mat3x4(_GLF_ZERO(0.0, injectionSwitch.x), 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, log(1.0), 0.0, 1.0, 1.0, 1.0)), float(mat3x4(_GLF_ZERO(0.0, injectionSwitch.x), 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, log(1.0), 0.0, 1.0, 1.0, 1.0)), float(mat3x4(_GLF_ZERO(0.0, injectionSwitch.x), 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, log(1.0), 0.0, 1.0, 1.0, 1.0)))), float(mat3x4(_GLF_ZERO(0.0, injectionSwitch.x), 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, log(1.0), 0.0, 1.0, 1.0, 1.0)))))))), (uint(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), float(mat4x3(_GLF_ZERO(0.0, injectionSwitch.x), 0.0, log(1.0), 0.0, 1.0, 1.0, cos(0.0), sin(tan(0.0)), abs(0.0), exp(0.0), 0.0, 1.0))), (_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), float(mat4x3(_GLF_ZERO(0.0, injectionSwitch.x), 0.0, log(1.0), 0.0, 1.0, 1.0, cos(0.0), sin(tan(0.0)), abs(0.0), exp(0.0), 0.0, 1.0)))) + 0.0), _GLF_IDENTITY(1.0 * (_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), float(mat3x4(_GLF_ZERO(_GLF_IDENTITY(0.0, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(8980.3828) : 0.0)), injectionSwitch.x), 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, log(1.0), 0.0, 1.0, 1.0, 1.0)))), min(_GLF_IDENTITY(1.0 * (_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), float(mat3x4(_GLF_ZERO(0.0, injectionSwitch.x), 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, log(1.0), 0.0, 1.0, 1.0, 1.0)))), clamp(1.0 * (_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), float(mat3x4(_GLF_ZERO(0.0, injectionSwitch.x), 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, log(1.0), 0.0, 1.0, _GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-21.41)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), 1.0)))), 1.0 * (_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), float(mat3x4(_GLF_ZERO(0.0, injectionSwitch.x), 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, log(1.0), 0.0, 1.0, 1.0, 1.0)))), 1.0 * (_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), float(mat3x4(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), float(mat2(_GLF_ZERO(0.0, injectionSwitch.x), 1.0, 1.0, 1.0))), 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, log(1.0), 0.0, 1.0, 1.0, 1.0)))))), 1.0 * (_GLF_IDENTITY(_GLF_ZERO(_GLF_IDENTITY(0.0, (0.0) / 1.0), injectionSwitch.x), float(mat3x4(_GLF_ZERO(0.0, injectionSwitch.x), 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, log(1.0), 0.0, 1.0, 1.0, 1.0))))))))) | (uint(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), 1.0 * (_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), float(mat3x4(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, (true ? _GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) : _GLF_FUZZED(85.48)))), 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, log(1.0), 0.0, 1.0, 1.0, 1.0))))))))) - 0u), _GLF_IDENTITY(uint(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), 1.0 * (_GLF_IDENTITY(_GLF_ZERO(_GLF_IDENTITY(0.0, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(clamp(-5834.6211, -913.169, 3.5)) : _GLF_IDENTITY(0.0, clamp(0.0, 0.0, _GLF_IDENTITY(0.0, max(0.0, 0.0)))))), injectionSwitch.x), float(mat3x4(_GLF_ZERO(0.0, injectionSwitch.x), 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, log(1.0), _GLF_IDENTITY(0.0, mix(float(_GLF_IDENTITY(0.0, 1.0 * (0.0))), float(_GLF_FUZZED(53.37)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), 1.0, 1.0, 1.0)))))), (uint(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), float(mat4x3(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x), 0.0, log(1.0), 0.0, 1.0, 1.0, cos(0.0), sin(tan(0.0)), abs(0.0), exp(0.0), 0.0, 1.0))), _GLF_IDENTITY(1.0 * (_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), float(mat3x4(_GLF_ZERO(0.0, injectionSwitch.x), 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, log(1.0), 0.0, 1.0, 1.0, _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(float(65041))), float(_GLF_IDENTITY(1.0, max(1.0, 1.0))), bool(true))))))), min(_GLF_IDENTITY(1.0 * (_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), float(mat3x4(_GLF_ZERO(0.0, injectionSwitch.x), 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, log(1.0), 0.0, 1.0, 1.0, 1.0)))), clamp(1.0 * (_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), float(mat3x4(_GLF_ZERO(0.0, injectionSwitch.x), 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, log(1.0), 0.0, 1.0, 1.0, 1.0)))), 1.0 * (_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), float(mat3x4(_GLF_ZERO(0.0, injectionSwitch.x), 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, log(1.0), 0.0, 1.0, 1.0, 1.0)))), 1.0 * (_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), float(mat3x4(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x))))), 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, log(1.0), 0.0, 1.0, 1.0, 1.0)))))), 1.0 * (_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), float(mat3x4(_GLF_ZERO(_GLF_IDENTITY(0.0, max(0.0, 0.0)), injectionSwitch.x), 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, log(1.0), 0.0, 1.0, 1.0, _GLF_IDENTITY(1.0, min(1.0, 1.0))))))))))) | (uint(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), 1.0 * (_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), float(mat3x4(_GLF_ZERO(0.0, injectionSwitch.x), 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, log(1.0), 0.0, 1.0, 1.0, _GLF_IDENTITY(1.0, float(mat4x3(1.0, determinant(mat4(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y))), 0.0, 1.0, 0.0, 0.0, sin(0.0), 0.0, 1.0, cos(0.0), 1.0, 1.0))))))))))), _GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), 1.0 * (_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), float(mat3x4(_GLF_ZERO(0.0, injectionSwitch.x), 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, log(1.0), 0.0, 1.0, 1.0, 1.0)))))), (uint(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), float(mat4x3(_GLF_ZERO(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(float(false))), bool(false))), injectionSwitch.x), 0.0, log(1.0), 0.0, 1.0, 1.0, cos(0.0), sin(tan(0.0)), abs(0.0), exp(_GLF_IDENTITY(0.0, float(mat3x4(_GLF_IDENTITY(0.0, _GLF_IDENTITY(float(mat2x3(0.0, 0.0, sqrt(1.0), 0.0, _GLF_IDENTITY(dot(vec4(0.0, 0.0, 1.0, 1.0), vec4(1.0, 1.0, 0.0, 0.0)), dot(vec4(0.0, 0.0, 1.0, 1.0), vec4(1.0, 1.0, 0.0, 0.0))), 0.0)), mix(float(_GLF_FUZZED(6.6)), float(float(mat2x3(0.0, 0.0, sqrt(1.0), 0.0, _GLF_IDENTITY(dot(vec4(0.0, 0.0, 1.0, 1.0), vec4(1.0, 1.0, 0.0, 0.0)), dot(vec4(0.0, 0.0, 1.0, 1.0), vec4(1.0, 1.0, 0.0, 0.0))), 0.0))), bool(true)))), 0.0, 1.0, 0.0, 0.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), abs(0.0), 0.0, 0.0, log(sqrt(1.0)), 0.0)))), 0.0, 1.0))), _GLF_IDENTITY(1.0 * (_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), float(mat3x4(_GLF_ZERO(0.0, injectionSwitch.x), 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, log(1.0), _GLF_IDENTITY(0.0, min(0.0, 0.0)), 1.0, 1.0, 1.0)))), min(_GLF_IDENTITY(1.0 * (_GLF_IDENTITY(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0)), float(mat3x4(_GLF_ZERO(0.0, injectionSwitch.x), 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, log(1.0), 0.0, 1.0, 1.0, 1.0)))), clamp(1.0 * (_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), float(mat3x4(_GLF_ZERO(0.0, injectionSwitch.x), 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, log(1.0), 0.0, 1.0, 1.0, 1.0)))), 1.0 * (_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), float(mat3x4(_GLF_ZERO(0.0, injectionSwitch.x), 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, log(_GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(13.96))), _GLF_IDENTITY(1.0, min(1.0, 1.0))))), 0.0, 1.0, 1.0, 1.0)))), 1.0 * (_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), float(mat3x4(_GLF_ZERO(0.0, injectionSwitch.x), 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, log(1.0), 0.0, 1.0, 1.0, 1.0)))))), 1.0 * (_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), float(mat3x4(_GLF_ZERO(0.0, injectionSwitch.x), 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, log(1.0), 0.0, 1.0, 1.0, 1.0))))))))) | _GLF_IDENTITY((uint(_GLF_IDENTITY(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * exp(0.0))), 1.0 * (_GLF_IDENTITY(_GLF_ZERO(_GLF_IDENTITY(0.0, mix(float(_GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, float(mat3(0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0))), 0.0))), float(_GLF_FUZZED(-50.07)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), injectionSwitch.x), float(mat3x4(_GLF_ZERO(0.0, injectionSwitch.x), 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, log(1.0), 0.0, 1.0, 1.0, 1.0))))))), ((uint(_GLF_IDENTITY(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * exp(0.0))), 1.0 * (_GLF_IDENTITY(_GLF_ZERO(_GLF_IDENTITY(0.0, mix(float(_GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, float(mat3(0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0))), 0.0))), float(_GLF_FUZZED(-50.07)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), injectionSwitch.x), float(mat3x4(_GLF_ZERO(0.0, injectionSwitch.x), 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, log(1.0), 0.0, 1.0, 1.0, 1.0)))))))) | uint(_GLF_ZERO(0.0, injectionSwitch.x)))), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(1.0 * (_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), float(mat3x4(_GLF_ZERO(0.0, injectionSwitch.x), 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, log(1.0), 0.0, 1.0, 1.0, 1.0)))), min(1.0 * (_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), float(mat3x4(_GLF_ZERO(0.0, injectionSwitch.x), 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, log(1.0), 0.0, 1.0, 1.0, 1.0)))), 1.0 * (_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), float(mat3x4(_GLF_ZERO(0.0, injectionSwitch.x), 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, log(1.0), 0.0, 1.0, 1.0, 1.0)))))))), (uint(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), float(mat4x3(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(813.504), _GLF_FUZZED(-472.788)), bvec2(false, false))).x), 0.0, log(1.0), 0.0, 1.0, 1.0, cos(0.0), sin(tan(0.0)), abs(0.0), exp(0.0), 0.0, 1.0))), _GLF_IDENTITY(1.0 * (_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), float(mat3x4(_GLF_ZERO(0.0, injectionSwitch.x), 1.0, 1.0, 1.0, 0.0, 1.0, _GLF_IDENTITY(1.0, (1.0) + sin(0.0)), log(1.0), 0.0, 1.0, 1.0, 1.0)))), min(_GLF_IDENTITY(1.0 * (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), float(mat3x4(_GLF_ZERO(0.0, injectionSwitch.x), 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, log(1.0), 0.0, 1.0, 1.0, 1.0))), mix(float(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), float(mat3x4(_GLF_ZERO(0.0, injectionSwitch.x), 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, log(1.0), 0.0, 1.0, 1.0, 1.0)))), float(_GLF_FUZZED(3497.7675)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), clamp(1.0 * (_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), float(mat3x4(_GLF_ZERO(0.0, injectionSwitch.x), 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, log(1.0), 0.0, 1.0, 1.0, 1.0)))), 1.0 * (_GLF_IDENTITY(_GLF_ZERO(_GLF_IDENTITY(0.0, 0.0 + (_GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(22.63))))), injectionSwitch.x), float(mat3x4(_GLF_ZERO(0.0, injectionSwitch.x), 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, log(1.0), 0.0, 1.0, 1.0, 1.0)))), 1.0 * (_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), float(mat3x4(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x))), 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, log(1.0), 0.0, 1.0, 1.0, 1.0)))))), 1.0 * (_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), float(mat3x4(_GLF_ZERO(0.0, injectionSwitch.x), 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, log(1.0), 0.0, 1.0, 1.0, _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0))))))))))) | (uint(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), 1.0 * (_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), float(mat3x4(_GLF_ZERO(0.0, injectionSwitch.x), 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, log(1.0), 0.0, 1.0, 1.0, 1.0)))))))), (true ? _GLF_IDENTITY(uint(_GLF_IDENTITY(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), injectionSwitch)).x), 1.0 * (_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), float(mat3x4(_GLF_ZERO(0.0, injectionSwitch.x), 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, log(1.0), 0.0, _GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, (1.0) + 0.0)) - 0.0), _GLF_IDENTITY(1.0, max(1.0, 1.0)), 1.0)))))), (uint(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), float(mat4x3(_GLF_ZERO(0.0, injectionSwitch.x), 0.0, log(1.0), 0.0, 1.0, 1.0, cos(0.0), sin(tan(0.0)), abs(0.0), exp(0.0), 0.0, 1.0))), _GLF_IDENTITY(1.0 * (_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), float(mat3x4(_GLF_ZERO(0.0, injectionSwitch.x), 1.0, 1.0, _GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(9590.6707)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), 0.0, 1.0, 1.0, log(1.0), 0.0, 1.0, 1.0, 1.0)))), min(_GLF_IDENTITY(1.0 * (_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), float(mat3x4(_GLF_ZERO(0.0, injectionSwitch.x), 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, log(1.0), 0.0, 1.0, 1.0, 1.0)))), clamp(1.0 * (_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), float(mat3x4(_GLF_ZERO(0.0, injectionSwitch.x), 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, log(1.0), 0.0, 1.0, 1.0, 1.0)))), 1.0 * (_GLF_IDENTITY(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch))) / abs(vec2(1.0, 1.0))).x), float(mat3x4(_GLF_ZERO(0.0, injectionSwitch.x), 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, log(1.0), 0.0, 1.0, 1.0, 1.0)))), 1.0 * (_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), float(mat3x4(_GLF_ZERO(0.0, injectionSwitch.x), 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, log(1.0), 0.0, 1.0, 1.0, 1.0)))))), 1.0 * (_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), float(mat3x4(_GLF_ZERO(0.0, injectionSwitch.x), 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, log(1.0), 0.0, 1.0, 1.0, 1.0))))))))) | (uint(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), 1.0 * (_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), float(mat3x4(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x), 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, log(1.0), _GLF_IDENTITY(0.0, clamp(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), 0.0, 0.0)), 1.0, 1.0, 1.0)))))))) : _GLF_FUZZED(workgroup_size))))))))))) + ((_GLF_IDENTITY(subgroup_local_id + _GLF_IDENTITY(1, (1) - 0), _GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(uvec3(subgroup_local_id + 1, 0u, 1u), (_GLF_IDENTITY(uvec3(subgroup_local_id + 1, _GLF_IDENTITY(0u, max(0u, 0u)), 1u), (uvec3(subgroup_local_id + 1, 0u, 1u)) - uvec3(0u, 0u, 0u))) ^ uvec3(0u, 0u, 0u))), (uint(_GLF_IDENTITY(uvec3(subgroup_local_id + 1, 0u, 1u), (_GLF_IDENTITY(uvec3(_GLF_IDENTITY(subgroup_local_id + 1, (_GLF_IDENTITY(subgroup_local_id + 1, (true ? subgroup_local_id + 1 : _GLF_FUZZED(93176u)))) + 0u), 0u, 1u), (uvec3(subgroup_local_id + 1, 0u, _GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, uint(uint(1u)))) + 0u))) - _GLF_IDENTITY(uvec3(0u, 0u, 0u), _GLF_IDENTITY(min(uvec3(0u, 0u, 0u), uvec3(0u, 0u, 0u)), (min(uvec3(0u, 0u, 0u), uvec3(0u, 0u, 0u))) << uvec3(0u, 0u, 0u))))) ^ uvec3(0u, 0u, 0u)))) / 1u), min(_GLF_IDENTITY(uint(_GLF_IDENTITY(uvec3(subgroup_local_id + 1, 0u, 1u), (_GLF_IDENTITY(uvec3(subgroup_local_id + 1, 0u, 1u), (uvec3(subgroup_local_id + 1, 0u, 1u)) - uvec3(0u, 0u, 0u))) ^ uvec3(0u, 0u, 0u))), (uint(_GLF_IDENTITY(uvec3(subgroup_local_id + 1, 0u, 1u), (_GLF_IDENTITY(uvec3(_GLF_IDENTITY(subgroup_local_id + 1, (_GLF_IDENTITY(subgroup_local_id + 1, (true ? subgroup_local_id + _GLF_IDENTITY(1, (1) / 1) : _GLF_FUZZED(93176u)))) + 0u), 0u, 1u), _GLF_IDENTITY((_GLF_IDENTITY(uvec3(_GLF_IDENTITY(subgroup_local_id, uint(_GLF_IDENTITY(uvec4(subgroup_local_id, (1u ^ 0u), 0u, (0u >> _GLF_IDENTITY(uint(0u), uint(0u)))), clamp(uvec4(subgroup_local_id, (1u ^ 0u), 0u, (0u >> _GLF_IDENTITY(uint(0u), uint(0u)))), _GLF_IDENTITY(uvec4(subgroup_local_id, (1u ^ 0u), 0u, (0u >> _GLF_IDENTITY(uint(0u), uint(0u)))), min(uvec4(subgroup_local_id, (1u ^ 0u), 0u, (0u >> _GLF_IDENTITY(uint(0u), uint(0u)))), uvec4(subgroup_local_id, (1u ^ 0u), 0u, (0u >> _GLF_IDENTITY(uint(0u), uint(0u)))))), uvec4(subgroup_local_id, (1u ^ 0u), 0u, (0u >> _GLF_IDENTITY(uint(0u), uint(0u)))))))) + 1, 0u, 1u), ~ (~ (uvec3(_GLF_IDENTITY(subgroup_local_id, uint(_GLF_IDENTITY(uvec4(subgroup_local_id, (1u ^ 0u), 0u, (0u >> _GLF_IDENTITY(uint(0u), uint(0u)))), clamp(uvec4(subgroup_local_id, (1u ^ 0u), 0u, (0u >> _GLF_IDENTITY(uint(0u), uint(0u)))), _GLF_IDENTITY(uvec4(subgroup_local_id, (1u ^ 0u), 0u, (0u >> _GLF_IDENTITY(uint(0u), uint(0u)))), min(uvec4(subgroup_local_id, (1u ^ 0u), 0u, (0u >> _GLF_IDENTITY(uint(0u), uint(0u)))), uvec4(subgroup_local_id, (1u ^ 0u), 0u, (0u >> _GLF_IDENTITY(uint(0u), uint(0u)))))), uvec4(subgroup_local_id, (1u ^ 0u), 0u, (0u >> _GLF_IDENTITY(uint(0u), uint(0u)))))))) + 1, 0u, 1u))))), max((_GLF_IDENTITY(uvec3(_GLF_IDENTITY(subgroup_local_id, uint(_GLF_IDENTITY(uvec4(subgroup_local_id, (1u ^ 0u), 0u, (0u >> _GLF_IDENTITY(uint(0u), uint(0u)))), clamp(uvec4(subgroup_local_id, (1u ^ 0u), 0u, (0u >> _GLF_IDENTITY(uint(0u), uint(0u)))), _GLF_IDENTITY(uvec4(subgroup_local_id, (1u ^ 0u), 0u, (0u >> _GLF_IDENTITY(uint(0u), uint(0u)))), min(uvec4(subgroup_local_id, (1u ^ 0u), 0u, (0u >> _GLF_IDENTITY(uint(0u), uint(0u)))), uvec4(subgroup_local_id, (1u ^ 0u), 0u, (0u >> _GLF_IDENTITY(uint(0u), uint(0u)))))), uvec4(subgroup_local_id, (1u ^ 0u), 0u, (0u >> _GLF_IDENTITY(uint(0u), uint(0u)))))))) + 1, 0u, 1u), ~ (~ (uvec3(_GLF_IDENTITY(subgroup_local_id, uint(_GLF_IDENTITY(uvec4(subgroup_local_id, (1u ^ 0u), 0u, (0u >> _GLF_IDENTITY(uint(0u), uint(0u)))), clamp(uvec4(subgroup_local_id, (1u ^ 0u), 0u, (0u >> _GLF_IDENTITY(uint(0u), uint(0u)))), _GLF_IDENTITY(uvec4(subgroup_local_id, (1u ^ 0u), 0u, (0u >> _GLF_IDENTITY(uint(0u), uint(0u)))), min(uvec4(subgroup_local_id, (1u ^ 0u), 0u, (0u >> _GLF_IDENTITY(uint(0u), uint(0u)))), uvec4(subgroup_local_id, (1u ^ 0u), 0u, (0u >> _GLF_IDENTITY(uint(0u), uint(0u)))))), uvec4(subgroup_local_id, (1u ^ 0u), 0u, (0u >> _GLF_IDENTITY(uint(0u), uint(0u)))))))) + 1, 0u, 1u))))), (_GLF_IDENTITY(uvec3(_GLF_IDENTITY(subgroup_local_id, uint(_GLF_IDENTITY(uvec4(subgroup_local_id, (1u ^ 0u), 0u, (0u >> _GLF_IDENTITY(uint(0u), uint(0u)))), clamp(uvec4(subgroup_local_id, (1u ^ 0u), 0u, (0u >> _GLF_IDENTITY(uint(0u), uint(0u)))), _GLF_IDENTITY(uvec4(subgroup_local_id, (1u ^ 0u), 0u, (0u >> _GLF_IDENTITY(uint(0u), uint(0u)))), min(uvec4(subgroup_local_id, (1u ^ 0u), 0u, (0u >> _GLF_IDENTITY(uint(0u), uint(0u)))), uvec4(subgroup_local_id, (1u ^ 0u), 0u, (0u >> _GLF_IDENTITY(uint(0u), uint(0u)))))), uvec4(subgroup_local_id, (1u ^ 0u), 0u, (0u >> _GLF_IDENTITY(uint(0u), uint(0u)))))))) + 1, 0u, 1u), ~ (~ (uvec3(_GLF_IDENTITY(subgroup_local_id, uint(_GLF_IDENTITY(uvec4(subgroup_local_id, (1u ^ 0u), 0u, (0u >> _GLF_IDENTITY(uint(0u), uint(0u)))), clamp(uvec4(subgroup_local_id, (1u ^ 0u), 0u, (0u >> _GLF_IDENTITY(uint(0u), uint(0u)))), _GLF_IDENTITY(uvec4(subgroup_local_id, (1u ^ 0u), 0u, (0u >> _GLF_IDENTITY(uint(0u), uint(0u)))), min(uvec4(subgroup_local_id, (1u ^ 0u), 0u, (0u >> _GLF_IDENTITY(uint(0u), uint(0u)))), uvec4(subgroup_local_id, (1u ^ 0u), 0u, (0u >> _GLF_IDENTITY(uint(0u), uint(0u)))))), uvec4(subgroup_local_id, (1u ^ 0u), 0u, (0u >> _GLF_IDENTITY(uint(0u), uint(0u)))))))) + 1, 0u, 1u))))))) - _GLF_IDENTITY(uvec3(0u, 0u, 0u), min(uvec3(0u, 0u, 0u), uvec3(0u, 0u, 0u))))) ^ uvec3(0u, 0u, 0u)))) / 1u), _GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(uvec3(subgroup_local_id + 1, 0u, 1u), (_GLF_IDENTITY(uvec3(subgroup_local_id + 1, 0u, 1u), (uvec3(subgroup_local_id + 1, 0u, 1u)) - uvec3(0u, 0u, 0u))) ^ uvec3(0u, 0u, 0u))), (uint(_GLF_IDENTITY(uvec3(subgroup_local_id + 1, 0u, 1u), (_GLF_IDENTITY(uvec3(_GLF_IDENTITY(subgroup_local_id + 1, (_GLF_IDENTITY(subgroup_local_id + 1, (true ? _GLF_IDENTITY(subgroup_local_id + 1, uint(uint(subgroup_local_id + 1))) : _GLF_FUZZED(93176u)))) + 0u), 0u, 1u), (uvec3(subgroup_local_id + 1, 0u, 1u)) - _GLF_IDENTITY(uvec3(_GLF_IDENTITY(0u, (0u) ^ (0u >> _GLF_IDENTITY(uint(5u), uint(5u)))), 0u, 0u), min(uvec3(0u, 0u, 0u), uvec3(0u, 0u, 0u))))) ^ uvec3(0u, 0u, 0u)))) / 1u), (_GLF_IDENTITY(uint(_GLF_IDENTITY(uvec3(subgroup_local_id + 1, 0u, 1u), (_GLF_IDENTITY(uvec3(subgroup_local_id + 1, 0u, 1u), (uvec3(subgroup_local_id + 1, 0u, 1u)) - uvec3(0u, 0u, 0u))) ^ uvec3(0u, 0u, 0u))), (uint(_GLF_IDENTITY(uvec3(subgroup_local_id + 1, 0u, 1u), (_GLF_IDENTITY(uvec3(_GLF_IDENTITY(subgroup_local_id + 1, (_GLF_IDENTITY(subgroup_local_id + 1, (true ? subgroup_local_id + 1 : _GLF_FUZZED(93176u)))) + 0u), 0u, 1u), (uvec3(subgroup_local_id + 1, 0u, 1u)) - _GLF_IDENTITY(uvec3(0u, 0u, 0u), min(uvec3(0u, 0u, 0u), uvec3(0u, 0u, 0u))))) ^ uvec3(0u, 0u, 0u)))) / 1u)) | _GLF_IDENTITY((_GLF_IDENTITY(uint(_GLF_IDENTITY(uvec3(subgroup_local_id + 1, 0u, 1u), (_GLF_IDENTITY(uvec3(subgroup_local_id + 1, 0u, 1u), (uvec3(subgroup_local_id + 1, 0u, 1u)) - uvec3(0u, 0u, 0u))) ^ uvec3(0u, 0u, 0u))), (uint(_GLF_IDENTITY(_GLF_IDENTITY(uvec3(subgroup_local_id + 1, 0u, 1u), (_GLF_IDENTITY(uvec3(_GLF_IDENTITY(subgroup_local_id + 1, (_GLF_IDENTITY(subgroup_local_id + 1, (true ? subgroup_local_id + 1 : _GLF_FUZZED(93176u)))) + 0u), 0u, 1u), (uvec3(subgroup_local_id + 1, 0u, 1u)) - _GLF_IDENTITY(uvec3(0u, 0u, 0u), min(uvec3(0u, 0u, 0u), uvec3(0u, 0u, 0u))))) ^ uvec3(0u, 0u, 0u)), (_GLF_IDENTITY(uvec3(subgroup_local_id + 1, 0u, 1u), (_GLF_IDENTITY(uvec3(_GLF_IDENTITY(subgroup_local_id + 1, (_GLF_IDENTITY(subgroup_local_id + 1, (true ? subgroup_local_id + 1 : _GLF_FUZZED(93176u)))) + 0u), 0u, 1u), (uvec3(subgroup_local_id + 1, 0u, 1u)) - _GLF_IDENTITY(uvec3(0u, 0u, 0u), min(uvec3(0u, 0u, 0u), uvec3(0u, 0u, 0u))))) ^ uvec3(0u, 0u, 0u))) ^ (uvec3(0u, 0u, 0u) >> _GLF_IDENTITY(uvec3(8u), uvec3(8u)))))) / 1u)), _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec2((_GLF_IDENTITY(uint(_GLF_IDENTITY(uvec3(subgroup_local_id + 1, 0u, 1u), (_GLF_IDENTITY(uvec3(subgroup_local_id + 1, 0u, 1u), (uvec3(subgroup_local_id + 1, 0u, 1u)) - uvec3(0u, 0u, 0u))) ^ uvec3(0u, 0u, 0u))), (uint(_GLF_IDENTITY(_GLF_IDENTITY(uvec3(subgroup_local_id + 1, 0u, 1u), (_GLF_IDENTITY(uvec3(_GLF_IDENTITY(subgroup_local_id + 1, (_GLF_IDENTITY(subgroup_local_id + 1, (true ? subgroup_local_id + 1 : _GLF_FUZZED(93176u)))) + 0u), 0u, 1u), (uvec3(subgroup_local_id + 1, 0u, 1u)) - _GLF_IDENTITY(uvec3(0u, 0u, 0u), min(uvec3(0u, 0u, 0u), uvec3(0u, 0u, 0u))))) ^ uvec3(0u, 0u, 0u)), (_GLF_IDENTITY(uvec3(subgroup_local_id + 1, 0u, 1u), (_GLF_IDENTITY(uvec3(_GLF_IDENTITY(subgroup_local_id + 1, (_GLF_IDENTITY(subgroup_local_id + 1, (true ? subgroup_local_id + 1 : _GLF_FUZZED(93176u)))) + 0u), 0u, 1u), (uvec3(subgroup_local_id + 1, 0u, 1u)) - _GLF_IDENTITY(uvec3(0u, 0u, 0u), min(uvec3(0u, 0u, 0u), uvec3(0u, 0u, 0u))))) ^ uvec3(0u, 0u, 0u))) ^ (uvec3(0u, 0u, 0u) >> _GLF_IDENTITY(uvec3(8u), uvec3(8u)))))) / 1u)), 0u), max(uvec2((_GLF_IDENTITY(uint(_GLF_IDENTITY(uvec3(subgroup_local_id + 1, 0u, 1u), (_GLF_IDENTITY(uvec3(subgroup_local_id + 1, 0u, 1u), (uvec3(subgroup_local_id + 1, 0u, 1u)) - uvec3(0u, 0u, 0u))) ^ uvec3(0u, 0u, 0u))), (uint(_GLF_IDENTITY(_GLF_IDENTITY(uvec3(subgroup_local_id + 1, 0u, 1u), (_GLF_IDENTITY(uvec3(_GLF_IDENTITY(subgroup_local_id + 1, (_GLF_IDENTITY(subgroup_local_id + 1, (true ? subgroup_local_id + 1 : _GLF_FUZZED(93176u)))) + 0u), 0u, 1u), (uvec3(subgroup_local_id + 1, 0u, 1u)) - _GLF_IDENTITY(uvec3(0u, 0u, 0u), min(uvec3(0u, 0u, 0u), uvec3(0u, 0u, 0u))))) ^ uvec3(0u, 0u, 0u)), (_GLF_IDENTITY(uvec3(subgroup_local_id + 1, 0u, 1u), (_GLF_IDENTITY(uvec3(_GLF_IDENTITY(subgroup_local_id + 1, (_GLF_IDENTITY(subgroup_local_id + 1, (true ? subgroup_local_id + 1 : _GLF_FUZZED(93176u)))) + 0u), 0u, 1u), (uvec3(subgroup_local_id + 1, 0u, 1u)) - _GLF_IDENTITY(uvec3(0u, 0u, 0u), min(uvec3(0u, 0u, 0u), uvec3(0u, 0u, 0u))))) ^ uvec3(0u, 0u, 0u))) ^ (uvec3(0u, 0u, 0u) >> _GLF_IDENTITY(uvec3(8u), uvec3(8u)))))) / 1u)), 0u), uvec2((_GLF_IDENTITY(uint(_GLF_IDENTITY(uvec3(subgroup_local_id + 1, 0u, 1u), (_GLF_IDENTITY(uvec3(subgroup_local_id + 1, 0u, 1u), (uvec3(subgroup_local_id + 1, 0u, 1u)) - uvec3(0u, 0u, 0u))) ^ uvec3(0u, 0u, 0u))), (uint(_GLF_IDENTITY(_GLF_IDENTITY(uvec3(subgroup_local_id + 1, 0u, 1u), (_GLF_IDENTITY(uvec3(_GLF_IDENTITY(subgroup_local_id + 1, (_GLF_IDENTITY(subgroup_local_id + 1, (true ? subgroup_local_id + 1 : _GLF_FUZZED(93176u)))) + 0u), 0u, 1u), (uvec3(subgroup_local_id + 1, 0u, 1u)) - _GLF_IDENTITY(uvec3(0u, 0u, 0u), min(uvec3(0u, 0u, 0u), uvec3(0u, 0u, 0u))))) ^ uvec3(0u, 0u, 0u)), (_GLF_IDENTITY(uvec3(subgroup_local_id + 1, 0u, 1u), (_GLF_IDENTITY(uvec3(_GLF_IDENTITY(subgroup_local_id + 1, (_GLF_IDENTITY(subgroup_local_id + 1, (true ? subgroup_local_id + 1 : _GLF_FUZZED(93176u)))) + 0u), 0u, 1u), (uvec3(subgroup_local_id + 1, 0u, 1u)) - _GLF_IDENTITY(uvec3(0u, 0u, 0u), min(uvec3(0u, 0u, 0u), uvec3(0u, 0u, 0u))))) ^ uvec3(0u, 0u, 0u))) ^ (uvec3(0u, 0u, 0u) >> _GLF_IDENTITY(uvec3(8u), uvec3(8u)))))) / 1u)), 0u)))), min(_GLF_IDENTITY(uint(_GLF_IDENTITY(uvec2((_GLF_IDENTITY(uint(_GLF_IDENTITY(uvec3(subgroup_local_id + 1, 0u, 1u), (_GLF_IDENTITY(uvec3(subgroup_local_id + 1, 0u, 1u), (uvec3(subgroup_local_id + 1, 0u, 1u)) - uvec3(0u, 0u, 0u))) ^ uvec3(0u, 0u, 0u))), (uint(_GLF_IDENTITY(_GLF_IDENTITY(uvec3(subgroup_local_id + 1, 0u, 1u), (_GLF_IDENTITY(uvec3(_GLF_IDENTITY(subgroup_local_id + 1, (_GLF_IDENTITY(subgroup_local_id + 1, (true ? subgroup_local_id + 1 : _GLF_FUZZED(93176u)))) + 0u), 0u, 1u), (uvec3(subgroup_local_id + 1, 0u, 1u)) - _GLF_IDENTITY(uvec3(0u, 0u, 0u), min(uvec3(0u, 0u, 0u), uvec3(0u, 0u, 0u))))) ^ uvec3(0u, 0u, 0u)), (_GLF_IDENTITY(uvec3(subgroup_local_id + 1, 0u, 1u), (_GLF_IDENTITY(uvec3(_GLF_IDENTITY(subgroup_local_id + 1, (_GLF_IDENTITY(subgroup_local_id + 1, (true ? subgroup_local_id + 1 : _GLF_FUZZED(93176u)))) + 0u), 0u, 1u), (uvec3(subgroup_local_id + 1, 0u, 1u)) - _GLF_IDENTITY(uvec3(0u, 0u, 0u), min(uvec3(0u, 0u, 0u), uvec3(0u, 0u, 0u))))) ^ uvec3(0u, 0u, 0u))) ^ (uvec3(0u, 0u, 0u) >> _GLF_IDENTITY(uvec3(8u), uvec3(8u)))))) / 1u)), 0u), max(uvec2((_GLF_IDENTITY(uint(_GLF_IDENTITY(uvec3(subgroup_local_id + 1, 0u, 1u), (_GLF_IDENTITY(uvec3(subgroup_local_id + 1, 0u, 1u), (uvec3(subgroup_local_id + 1, 0u, 1u)) - uvec3(0u, 0u, 0u))) ^ uvec3(0u, 0u, 0u))), (uint(_GLF_IDENTITY(_GLF_IDENTITY(uvec3(subgroup_local_id + 1, 0u, 1u), (_GLF_IDENTITY(uvec3(_GLF_IDENTITY(subgroup_local_id + 1, (_GLF_IDENTITY(subgroup_local_id + 1, (true ? subgroup_local_id + 1 : _GLF_FUZZED(93176u)))) + 0u), 0u, 1u), (uvec3(subgroup_local_id + 1, 0u, 1u)) - _GLF_IDENTITY(uvec3(0u, 0u, 0u), min(uvec3(0u, 0u, 0u), uvec3(0u, 0u, 0u))))) ^ uvec3(0u, 0u, 0u)), (_GLF_IDENTITY(uvec3(subgroup_local_id + 1, 0u, 1u), (_GLF_IDENTITY(uvec3(_GLF_IDENTITY(subgroup_local_id + 1, (_GLF_IDENTITY(subgroup_local_id + 1, (true ? subgroup_local_id + 1 : _GLF_FUZZED(93176u)))) + 0u), 0u, 1u), (uvec3(subgroup_local_id + 1, 0u, 1u)) - _GLF_IDENTITY(uvec3(0u, 0u, 0u), min(uvec3(0u, 0u, 0u), uvec3(0u, 0u, 0u))))) ^ uvec3(0u, 0u, 0u))) ^ (uvec3(0u, 0u, 0u) >> _GLF_IDENTITY(uvec3(8u), uvec3(8u)))))) / 1u)), 0u), uvec2((_GLF_IDENTITY(uint(_GLF_IDENTITY(uvec3(subgroup_local_id + 1, 0u, 1u), (_GLF_IDENTITY(uvec3(subgroup_local_id + 1, 0u, 1u), (uvec3(subgroup_local_id + 1, 0u, 1u)) - uvec3(0u, 0u, 0u))) ^ uvec3(0u, 0u, 0u))), (uint(_GLF_IDENTITY(_GLF_IDENTITY(uvec3(subgroup_local_id + 1, 0u, 1u), (_GLF_IDENTITY(uvec3(_GLF_IDENTITY(subgroup_local_id + 1, (_GLF_IDENTITY(subgroup_local_id + 1, (true ? subgroup_local_id + 1 : _GLF_FUZZED(93176u)))) + 0u), 0u, 1u), (uvec3(subgroup_local_id + 1, 0u, 1u)) - _GLF_IDENTITY(uvec3(0u, 0u, 0u), min(uvec3(0u, 0u, 0u), uvec3(0u, 0u, 0u))))) ^ uvec3(0u, 0u, 0u)), (_GLF_IDENTITY(uvec3(subgroup_local_id + 1, 0u, 1u), (_GLF_IDENTITY(uvec3(_GLF_IDENTITY(subgroup_local_id + 1, (_GLF_IDENTITY(subgroup_local_id + 1, (true ? subgroup_local_id + 1 : _GLF_FUZZED(93176u)))) + 0u), 0u, 1u), (uvec3(subgroup_local_id + 1, 0u, 1u)) - _GLF_IDENTITY(uvec3(0u, 0u, 0u), min(uvec3(0u, 0u, 0u), uvec3(0u, 0u, 0u))))) ^ uvec3(0u, 0u, 0u))) ^ (uvec3(0u, 0u, 0u) >> _GLF_IDENTITY(uvec3(8u), uvec3(8u)))))) / 1u)), 0u)))), (true ? uint(_GLF_IDENTITY(uvec2((_GLF_IDENTITY(uint(_GLF_IDENTITY(uvec3(subgroup_local_id + 1, 0u, 1u), (_GLF_IDENTITY(uvec3(subgroup_local_id + 1, 0u, 1u), (uvec3(subgroup_local_id + 1, 0u, 1u)) - uvec3(0u, 0u, 0u))) ^ uvec3(0u, 0u, 0u))), (uint(_GLF_IDENTITY(_GLF_IDENTITY(uvec3(subgroup_local_id + 1, 0u, 1u), (_GLF_IDENTITY(uvec3(_GLF_IDENTITY(subgroup_local_id + 1, (_GLF_IDENTITY(subgroup_local_id + 1, (true ? subgroup_local_id + 1 : _GLF_FUZZED(93176u)))) + 0u), 0u, 1u), (uvec3(subgroup_local_id + 1, 0u, 1u)) - _GLF_IDENTITY(uvec3(0u, 0u, 0u), min(uvec3(0u, 0u, 0u), uvec3(0u, 0u, 0u))))) ^ uvec3(0u, 0u, 0u)), (_GLF_IDENTITY(uvec3(subgroup_local_id + 1, 0u, 1u), (_GLF_IDENTITY(uvec3(_GLF_IDENTITY(subgroup_local_id + 1, (_GLF_IDENTITY(subgroup_local_id + 1, (true ? subgroup_local_id + 1 : _GLF_FUZZED(93176u)))) + 0u), 0u, 1u), (uvec3(subgroup_local_id + 1, 0u, 1u)) - _GLF_IDENTITY(uvec3(0u, 0u, 0u), min(uvec3(0u, 0u, 0u), uvec3(0u, 0u, 0u))))) ^ uvec3(0u, 0u, 0u))) ^ (uvec3(0u, 0u, 0u) >> _GLF_IDENTITY(uvec3(8u), uvec3(8u)))))) / 1u)), 0u), max(uvec2((_GLF_IDENTITY(uint(_GLF_IDENTITY(uvec3(subgroup_local_id + 1, 0u, 1u), (_GLF_IDENTITY(uvec3(subgroup_local_id + 1, 0u, 1u), (uvec3(subgroup_local_id + 1, 0u, 1u)) - uvec3(0u, 0u, 0u))) ^ uvec3(0u, 0u, 0u))), (uint(_GLF_IDENTITY(_GLF_IDENTITY(uvec3(subgroup_local_id + 1, 0u, 1u), (_GLF_IDENTITY(uvec3(_GLF_IDENTITY(subgroup_local_id + 1, (_GLF_IDENTITY(subgroup_local_id + 1, (true ? subgroup_local_id + 1 : _GLF_FUZZED(93176u)))) + 0u), 0u, 1u), (uvec3(subgroup_local_id + 1, 0u, 1u)) - _GLF_IDENTITY(uvec3(0u, 0u, 0u), min(uvec3(0u, 0u, 0u), uvec3(0u, 0u, 0u))))) ^ uvec3(0u, 0u, 0u)), (_GLF_IDENTITY(uvec3(subgroup_local_id + 1, 0u, 1u), (_GLF_IDENTITY(uvec3(_GLF_IDENTITY(subgroup_local_id + 1, (_GLF_IDENTITY(subgroup_local_id + 1, (true ? subgroup_local_id + 1 : _GLF_FUZZED(93176u)))) + 0u), 0u, 1u), (uvec3(subgroup_local_id + 1, 0u, 1u)) - _GLF_IDENTITY(uvec3(0u, 0u, 0u), min(uvec3(0u, 0u, 0u), uvec3(0u, 0u, 0u))))) ^ uvec3(0u, 0u, 0u))) ^ (uvec3(0u, 0u, 0u) >> _GLF_IDENTITY(uvec3(8u), uvec3(8u)))))) / 1u)), 0u), uvec2((_GLF_IDENTITY(uint(_GLF_IDENTITY(uvec3(subgroup_local_id + 1, 0u, 1u), (_GLF_IDENTITY(uvec3(subgroup_local_id + 1, 0u, 1u), (uvec3(subgroup_local_id + 1, 0u, 1u)) - uvec3(0u, 0u, 0u))) ^ uvec3(0u, 0u, 0u))), (uint(_GLF_IDENTITY(_GLF_IDENTITY(uvec3(subgroup_local_id + 1, 0u, 1u), (_GLF_IDENTITY(uvec3(_GLF_IDENTITY(subgroup_local_id + 1, (_GLF_IDENTITY(subgroup_local_id + 1, (true ? subgroup_local_id + 1 : _GLF_FUZZED(93176u)))) + 0u), 0u, 1u), (uvec3(subgroup_local_id + 1, 0u, 1u)) - _GLF_IDENTITY(uvec3(0u, 0u, 0u), min(uvec3(0u, 0u, 0u), uvec3(0u, 0u, 0u))))) ^ uvec3(0u, 0u, 0u)), (_GLF_IDENTITY(uvec3(subgroup_local_id + 1, 0u, 1u), (_GLF_IDENTITY(uvec3(_GLF_IDENTITY(subgroup_local_id + 1, (_GLF_IDENTITY(subgroup_local_id + 1, (true ? subgroup_local_id + 1 : _GLF_FUZZED(93176u)))) + 0u), 0u, 1u), (uvec3(subgroup_local_id + 1, 0u, 1u)) - _GLF_IDENTITY(uvec3(0u, 0u, 0u), min(uvec3(0u, 0u, 0u), uvec3(0u, 0u, 0u))))) ^ uvec3(0u, 0u, 0u))) ^ (uvec3(0u, 0u, 0u) >> _GLF_IDENTITY(uvec3(8u), uvec3(8u)))))) / 1u)), 0u)))) : _GLF_FUZZED(workgroup_id))), uint(_GLF_IDENTITY(uvec2((_GLF_IDENTITY(uint(_GLF_IDENTITY(uvec3(subgroup_local_id + 1, 0u, 1u), (_GLF_IDENTITY(uvec3(subgroup_local_id + 1, 0u, 1u), (uvec3(subgroup_local_id + 1, 0u, 1u)) - uvec3(0u, 0u, 0u))) ^ uvec3(0u, 0u, 0u))), (uint(_GLF_IDENTITY(_GLF_IDENTITY(uvec3(subgroup_local_id + 1, 0u, 1u), (_GLF_IDENTITY(uvec3(_GLF_IDENTITY(subgroup_local_id + 1, (_GLF_IDENTITY(subgroup_local_id + 1, (true ? subgroup_local_id + 1 : _GLF_FUZZED(93176u)))) + 0u), 0u, 1u), (uvec3(subgroup_local_id + 1, 0u, 1u)) - _GLF_IDENTITY(uvec3(0u, 0u, 0u), min(uvec3(0u, 0u, 0u), uvec3(0u, 0u, 0u))))) ^ uvec3(0u, 0u, 0u)), (_GLF_IDENTITY(uvec3(subgroup_local_id + 1, 0u, 1u), (_GLF_IDENTITY(uvec3(_GLF_IDENTITY(subgroup_local_id + 1, (_GLF_IDENTITY(subgroup_local_id + 1, (true ? subgroup_local_id + 1 : _GLF_FUZZED(93176u)))) + 0u), 0u, 1u), (uvec3(subgroup_local_id + 1, 0u, 1u)) - _GLF_IDENTITY(uvec3(0u, 0u, 0u), min(uvec3(0u, 0u, 0u), uvec3(0u, 0u, 0u))))) ^ uvec3(0u, 0u, 0u))) ^ (uvec3(0u, 0u, 0u) >> _GLF_IDENTITY(uvec3(8u), uvec3(8u)))))) / 1u)), 0u), max(uvec2((_GLF_IDENTITY(uint(_GLF_IDENTITY(uvec3(subgroup_local_id + 1, 0u, 1u), (_GLF_IDENTITY(uvec3(subgroup_local_id + 1, 0u, 1u), (uvec3(subgroup_local_id + 1, 0u, 1u)) - uvec3(0u, 0u, 0u))) ^ uvec3(0u, 0u, 0u))), (uint(_GLF_IDENTITY(_GLF_IDENTITY(uvec3(subgroup_local_id + 1, 0u, 1u), (_GLF_IDENTITY(uvec3(_GLF_IDENTITY(subgroup_local_id + 1, (_GLF_IDENTITY(subgroup_local_id + 1, (true ? subgroup_local_id + 1 : _GLF_FUZZED(93176u)))) + 0u), 0u, 1u), (uvec3(subgroup_local_id + 1, 0u, 1u)) - _GLF_IDENTITY(uvec3(0u, 0u, 0u), min(uvec3(0u, 0u, 0u), uvec3(0u, 0u, 0u))))) ^ uvec3(0u, 0u, 0u)), (_GLF_IDENTITY(uvec3(subgroup_local_id + 1, 0u, 1u), (_GLF_IDENTITY(uvec3(_GLF_IDENTITY(subgroup_local_id + 1, (_GLF_IDENTITY(subgroup_local_id + 1, (true ? subgroup_local_id + 1 : _GLF_FUZZED(93176u)))) + 0u), 0u, 1u), (uvec3(subgroup_local_id + 1, 0u, 1u)) - _GLF_IDENTITY(uvec3(0u, 0u, 0u), min(uvec3(0u, 0u, 0u), uvec3(0u, 0u, 0u))))) ^ uvec3(0u, 0u, 0u))) ^ (uvec3(0u, 0u, 0u) >> _GLF_IDENTITY(uvec3(8u), uvec3(8u)))))) / 1u)), 0u), uvec2((_GLF_IDENTITY(uint(_GLF_IDENTITY(uvec3(subgroup_local_id + 1, 0u, 1u), (_GLF_IDENTITY(uvec3(subgroup_local_id + 1, 0u, 1u), (uvec3(subgroup_local_id + 1, 0u, 1u)) - uvec3(0u, 0u, 0u))) ^ uvec3(0u, 0u, 0u))), (uint(_GLF_IDENTITY(_GLF_IDENTITY(uvec3(subgroup_local_id + 1, 0u, 1u), (_GLF_IDENTITY(uvec3(_GLF_IDENTITY(subgroup_local_id + 1, (_GLF_IDENTITY(subgroup_local_id + 1, (true ? subgroup_local_id + 1 : _GLF_FUZZED(93176u)))) + 0u), 0u, 1u), (uvec3(subgroup_local_id + 1, 0u, 1u)) - _GLF_IDENTITY(uvec3(0u, 0u, 0u), min(uvec3(0u, 0u, 0u), uvec3(0u, 0u, 0u))))) ^ uvec3(0u, 0u, 0u)), (_GLF_IDENTITY(uvec3(subgroup_local_id + 1, 0u, 1u), (_GLF_IDENTITY(uvec3(_GLF_IDENTITY(subgroup_local_id + 1, (_GLF_IDENTITY(subgroup_local_id + 1, (true ? subgroup_local_id + 1 : _GLF_FUZZED(93176u)))) + 0u), 0u, 1u), (uvec3(subgroup_local_id + 1, 0u, 1u)) - _GLF_IDENTITY(uvec3(0u, 0u, 0u), min(uvec3(0u, 0u, 0u), uvec3(0u, 0u, 0u))))) ^ uvec3(0u, 0u, 0u))) ^ (uvec3(0u, 0u, 0u) >> _GLF_IDENTITY(uvec3(8u), uvec3(8u)))))) / 1u)), 0u)))))))))))) % subgroup_size);
 for(int _injected_loop_counter = _GLF_IDENTITY((1 & 1), (_GLF_IDENTITY((1 & 1), clamp((1 & 1), (1 & 1), _GLF_IDENTITY((1 & 1), min((1 & 1), (1 & 1)))))) | ((1 & 1))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
  }
 buf[virtual_gid] = 1;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(_GLF_IDENTITY(mat3x2(injectionSwitch.y, 1.0, 1.0, 0.0, 1.0, 0.0), (true ? mat3x2(injectionSwitch.y, 1.0, 1.0, 0.0, 1.0, 0.0) : _GLF_FUZZED(mat3x2(9812.1694, -518.041, 435.097, 8.1, -4664.2784, 6378.6888))))))), ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(_GLF_IDENTITY(mat3x2(injectionSwitch.y, 1.0, 1.0, 0.0, 1.0, 0.0), (true ? mat3x2(injectionSwitch.y, 1.0, 1.0, 0.0, 1.0, 0.0) : _GLF_FUZZED(mat3x2(9812.1694, -518.041, 435.097, 8.1, -4664.2784, 6378.6888)))))))) && _GLF_IDENTITY(true, (true) || false)))))
    {
    }
   else
    {
     for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY((((1 | 1) << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3))), int(ivec4(_GLF_IDENTITY((((1 | 1) << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3))), 0 ^ (_GLF_IDENTITY((((1 | 1) << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3))), ((((1 | 1) << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3)))) / 1))), 1, 0, 0)))); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) || false), true)), bool(bvec3(bool(bvec2(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) || false), true)), false, true))))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     do
      {
       return;
       if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(_GLF_IDENTITY(bool((injectionSwitch.x > injectionSwitch.y)), (bool((injectionSwitch.x > injectionSwitch.y))) || false))))))))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(true, bool(bvec3(true, true, true))) && (_GLF_IDENTITY(false, ! (! (false))))), (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      return;
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   return;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   barrier();
  }
 do
  {
   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), false || (_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(true, ! _GLF_IDENTITY((! (true)), ((! (true))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), false || (_GLF_IDENTITY(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), bool(bvec4(! (true), false, true, false))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, ! (! (true)))), true && _GLF_IDENTITY((! (_GLF_IDENTITY(true, _GLF_IDENTITY(! (! (true)), (! (! (true))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && ((! (_GLF_IDENTITY(true, _GLF_IDENTITY(! (! (true)), (! (! (true))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))))))), false, true, false)))))))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       return;
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      break;
     barrier();
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     barrier();
    }
   return;
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bool(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
       return;
      }
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      barrier();
     for(int _injected_loop_counter = _GLF_IDENTITY(1, min(1, 1)); _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(0, (0) >> 0)); _injected_loop_counter --)
      {
       barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
         return;
        }
      }
    }
   for(int _injected_loop_counter = _GLF_IDENTITY((0 | 0), 0 ^ ((0 | 0))); _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
    {
     return;
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y))))))
    barrier();
   return;
  }
 if(_GLF_IDENTITY(subgroup_local_id + _GLF_IDENTITY(1, min(1, _GLF_IDENTITY(1, (false ? _GLF_FUZZED(-71280) : _GLF_IDENTITY(1, (1) >> 0))))), 1u * (subgroup_local_id + _GLF_IDENTITY(1, _GLF_IDENTITY(min(1, _GLF_IDENTITY(1, (false ? _GLF_FUZZED(-71280) : _GLF_IDENTITY(1, (1) >> 0)))), (min(1, _GLF_IDENTITY(1, (false ? _GLF_FUZZED(-71280) : _GLF_IDENTITY(1, (1) >> 0))))) | (min(1, _GLF_IDENTITY(1, (false ? _GLF_FUZZED(-71280) : _GLF_IDENTITY(1, (1) >> 0))))))))) < subgroup_size)
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, ! (! (false)))), false || (! (_GLF_IDENTITY(false, ! (! (false))))))))))
    return;
   int i = _GLF_IDENTITY(0, max(_GLF_IDENTITY(0, (false ? _GLF_FUZZED(-720) : _GLF_IDENTITY(0, max(0, 0)))), 0));
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch))) - vec2(0.0, 0.0)).y))))
      barrier();
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, (0) >> 0)); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              barrier();
             return;
            }
           else
            {
             if(_GLF_DEAD(false))
              barrier();
            }
          }
         barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
       if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, _GLF_IDENTITY(false, bool(bvec2(false, false))) || (injectionSwitch.x < injectionSwitch.y))))))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, true && (false))) && true)))
    {
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = _GLF_IDENTITY(_GLF_IDENTITY(0, ~ (~ (_GLF_IDENTITY(0, ~ (~ (_GLF_IDENTITY(0, max(0, 0)))))))), min(0, 0)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         return;
        }
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
        }
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       barrier();
      }
     return;
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) && true))))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(4), int(_GLF_IDENTITY(4, _GLF_IDENTITY(int(int(_GLF_IDENTITY(4, (4) | 0))), ~ (~ (_GLF_IDENTITY(int(int(_GLF_IDENTITY(4, (4) | 0))), min(int(int(_GLF_IDENTITY(4, (4) | 0))), int(int(_GLF_IDENTITY(4, (4) | 0)))))))))))) >> _GLF_IDENTITY(int(4), int(4)))); _injected_loop_counter ++)
      {
       barrier();
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        return;
      }
    }
   atomicStore(buf[next_virtual_gid], uint(2), 4, 64, _GLF_IDENTITY(4, (0 >> _GLF_IDENTITY(int(3), int(3))) | (4)));
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)))
    barrier();
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY((false) && true, bool(bvec4((false) && true, false, false, true))))))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       for(int _injected_loop_counter = (_GLF_IDENTITY(_GLF_IDENTITY((0 | 0), clamp(_GLF_IDENTITY((0 | 0), (true ? (0 | 0) : _GLF_FUZZED(55533))), (0 | 0), (0 | 0))), ((0 | 0)) / 1) << _GLF_IDENTITY(int(3), int(_GLF_IDENTITY(3, _GLF_IDENTITY(int(int(3)), ~ (~ (int(int(3))))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), (_GLF_IDENTITY(int(3), (int(3)) - int(_GLF_ZERO(0.0, injectionSwitch.x)))) | 0))) >> _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), (true ? int(3) : _GLF_FUZZED(-91004)))))); _injected_loop_counter ++)
        {
         return;
        }
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            return;
           barrier();
          }
         else
          {
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       barrier();
      }
     for(int _injected_loop_counter = (_GLF_IDENTITY(0 >> _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), (_GLF_IDENTITY(int(1), clamp(int(1), int(1), int(1)))) - (0 << _GLF_IDENTITY(int(6), int(6))))), ~ (~ (0 >> _GLF_IDENTITY(int(1), int(1)))))); _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), ~ (_GLF_IDENTITY(~ (int(7)), (~ (int(7))) - int(_GLF_ZERO(0.0, injectionSwitch.x))))))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(7), int(7)), min(_GLF_IDENTITY(_GLF_IDENTITY(int(7), ~ (~ (_GLF_IDENTITY(int(7), min(int(7), _GLF_IDENTITY(int(7), (int(7)) / 1)))))), int(7)), _GLF_IDENTITY(int(7), int(7)))))); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          break;
         if(_GLF_DEAD(false))
          continue;
         barrier();
        }
       atomicStore(buf[next_virtual_gid], uint(2), 4, 64, 4);
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
         continue;
        }
       if(_GLF_DEAD(false))
        break;
       if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_DEAD(false)), false || (bool(_GLF_DEAD(false))))), ! (! (bool(_GLF_IDENTITY(bool(_GLF_DEAD(false)), false || (bool(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, bool(bvec2(false, false)))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (! (_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, bool(bvec2(false, false))))))))))))))))))))
        barrier();
       if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
         if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           break;
          }
         continue;
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          return;
         barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), bool(bvec3(_GLF_WRAPPED_IF_TRUE(true), true, false)))))))
        {
         return;
        }
       else
        {
        }
      }
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         return;
        }
       if(_GLF_DEAD(false))
        return;
       barrier();
       if(_GLF_DEAD(false))
        return;
      }
     else
      {
      }
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
      barrier();
     return;
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    return;
   barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
  {
   if(_GLF_DEAD(false))
    return;
   barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     barrier();
    }
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
