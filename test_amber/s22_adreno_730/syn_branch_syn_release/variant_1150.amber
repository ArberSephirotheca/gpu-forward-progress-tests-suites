#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_13 {
 mat4x2 _f0;
 bvec3 _f1;
 int _f2;
} ;

struct _GLF_struct_12 {
 mat2 _f0;
 vec4 _f1;
 int _f2;
 bvec4 _f3;
 mat4x2 _f4;
 bvec2 _f5;
} ;

struct _GLF_struct_11 {
 bool _f0;
} ;

struct _GLF_struct_14 {
 _GLF_struct_11 _f0;
 _GLF_struct_12 _f1;
 vec3 _f2;
 _GLF_struct_13 _f3;
} ;

struct _GLF_struct_10 {
 bvec4 _f0;
 uint num_workgroup;
} ;

struct _GLF_struct_15 {
 _GLF_struct_10 _f0;
 _GLF_struct_14 _f1;
} ;

struct _GLF_struct_7 {
 mat2 _f0;
 bool _f1;
 ivec2 _f2;
 vec4 _f3;
 float _f4;
} ;

struct _GLF_struct_6 {
 vec3 _f0;
 bool _f1;
} ;

struct _GLF_struct_5 {
 uvec2 _f0;
 bvec3 _f1;
 ivec4 _f2;
 uvec4 _f3;
 vec2 _f4;
 ivec4 _f5;
 ivec4 _f6;
} ;

struct _GLF_struct_4 {
 mat3x4 _f0;
 vec2 _f1;
} ;

struct _GLF_struct_3 {
 ivec3 _f0;
 mat4x2 _f1;
} ;

struct _GLF_struct_8 {
 _GLF_struct_3 _f0;
 _GLF_struct_4 _f1;
 mat2x4 _f2;
 vec4 _f3;
 _GLF_struct_5 _f4;
 _GLF_struct_6 _f5;
 _GLF_struct_7 _f6;
} ;

struct _GLF_struct_9 {
 uint subgroup_local_id;
 mat3 _f0;
 _GLF_struct_8 _f1;
} ;

struct _GLF_struct_0 {
 mat2x4 _f0;
 mat3x4 _f1;
 uvec3 _f2;
 mat2x3 _f3;
 vec2 _f4;
 uint _f5;
} ;

struct _GLF_struct_1 {
 _GLF_struct_0 _f0;
 mat2x4 _f1;
 uvec4 _f2;
} ;

struct _GLF_struct_2 {
 uvec2 GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_base;
 mat3x2 _f0;
 mat3 _f1;
 mat2x3 _f2;
 _GLF_struct_1 _f3;
 mat4 _f4;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 _GLF_struct_2 _GLF_struct_replacement_2;
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 ^ 0)); _injected_loop_counter ++)
      {
       return;
      }
    }
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     return;
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)))), _GLF_IDENTITY(bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)))), false, false, false)), ! (! (bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)))), false, false, false))))))))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
        return;
       return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     if(_GLF_DEAD(false))
      return;
    }
   return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(_GLF_IDENTITY(injectionSwitch[0], (injectionSwitch[0]) / determinant(mat4(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, _GLF_IDENTITY(1.0, (1.0) / 1.0), 0.0, 0.0, 0.0, 0.0, 1.0))), injectionSwitch[1]), vec2(0.0, 0.0) + (vec2(_GLF_IDENTITY(injectionSwitch[0], (injectionSwitch[0]) / determinant(mat4(1.0, 0.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, min(1.0, 1.0)), 1.0)), 0.0, 0.0, 1.0, 0.0, _GLF_IDENTITY(1.0, (1.0) / 1.0), 0.0, 0.0, 0.0, 0.0, 1.0))), injectionSwitch[1])))).x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(false))
        {
         do
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   return;
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    return;
                  }
                 else
                  {
                  }
                }
               else
                {
                 if(_GLF_DEAD(false))
                  break;
                }
              }
             if(_GLF_DEAD(false))
              return;
            }
           else
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
             return;
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     else
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(false, (false) && true))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, _GLF_IDENTITY(false, (false) || false))), false || (bool(bvec4(_GLF_IDENTITY(false, (false) && true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, _GLF_IDENTITY(false, (false) || false))))))) || false)))
        return;
       do
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               return;
              }
             if(_GLF_DEAD(false))
              continue;
            }
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             return;
            }
           else
            {
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + 0.0), injectionSwitch.x)) > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))) + _GLF_IDENTITY(dot(vec3(1.0, 0.0, 1.0), _GLF_IDENTITY(vec3(0.0, 1.0, 0.0), (vec3(0.0, 1.0, 0.0)) * mat3(1.0))), dot(vec3(1.0, 0.0, 1.0), vec3(0.0, 1.0, 0.0))))))))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (false)), ((! (false))) || false))))
            return;
           return;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
          }
         return;
        }
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true))), true && (! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true))))))))
        return;
       do
        {
         do
          {
           if(_GLF_DEAD(false))
            break;
           if(_GLF_DEAD(false))
            return;
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[_GLF_IDENTITY(0, max(0, 0))], _GLF_FUZZED(_GLF_IDENTITY(-5.9, (-5.9) - 0.0))), vec2(_GLF_FUZZED(-5.9), (injectionSwitch)[1]), bvec2(false, true))).y)))))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         return;
        }
       else
        {
        }
      }
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         return;
        }
      }
     do
      {
       if(_GLF_DEAD(false))
        return;
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))
      {
       do
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
           return;
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
       return;
      }
     do
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 | 0)); _injected_loop_counter --)
      {
       return;
      }
    }
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 do
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      break;
     continue;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
          return;
        }
       if(_GLF_DEAD(false))
        continue;
       continue;
       if(_GLF_DEAD(false))
        return;
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, ! (! (false))))))))
        return;
       if(_GLF_DEAD(false))
        return;
       return;
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      break;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         do
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (true)))))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               for(int _injected_loop_counter = (0 ^ 1); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) ^ 0) > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
                {
                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(4, min(4, 4))), _GLF_IDENTITY(int(4), (int(4)) ^ 0)))); _injected_loop_counter ++)
                  {
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
                      return;
                     if(_GLF_DEAD(false))
                      return;
                     if(_GLF_DEAD(false))
                      continue;
                     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, true, false)))))
                      return;
                     return;
                     if(_GLF_DEAD(false))
                      return;
                    }
                   else
                    {
                     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(false, bool(bvec3(false, true, false)))))))
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        continue;
                       continue;
                      }
                    }
                  }
                }
              }
             else
              {
              }
            }
           else
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(false))
                break;
               break;
              }
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                return;
               continue;
               if(_GLF_DEAD(false))
                continue;
              }
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               return;
              }
             if(_GLF_DEAD(false))
              break;
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          break;
        }
       do
        {
         do
          {
           if(_GLF_DEAD(false))
            continue;
           do
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
            }
           while(_GLF_WRAPPED_LOOP(false));
           if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false))))))))
            break;
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        }
       while(_GLF_WRAPPED_LOOP(false));
       return;
      }
     for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), ~ (~ (int(3)))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) << 0)) / 1)); _injected_loop_counter ++)
      {
       return;
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), min(mat2(1.0) * (injectionSwitch), _GLF_IDENTITY(mat2(1.0), transpose(transpose(_GLF_IDENTITY(mat2(1.0), transpose(transpose(mat2(1.0))))))) * (injectionSwitch)))).x, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), min(mat2(1.0) * (injectionSwitch), _GLF_IDENTITY(mat2(1.0), transpose(transpose(_GLF_IDENTITY(mat2(1.0), transpose(transpose(mat2(1.0))))))) * (injectionSwitch)))).x) - 0.0) > injectionSwitch.y))))
    continue;
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false)), (injectionSwitch.x > injectionSwitch.y))))
  {
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      break;
     return;
    }
   while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false)))))))), true && (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, _GLF_IDENTITY((false) && true, ((false) && true) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, _GLF_IDENTITY(true, false || (true))))), ! (! (false)))))))));
  }
 do
  {
   if(_GLF_DEAD(false))
    return;
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, false, false, _GLF_IDENTITY(_GLF_IDENTITY(true, bool(bvec4(true, true, true, false))), bool(bool(_GLF_IDENTITY(true, bool(bvec4(true, true, true, false)))))))), false || (bool(bvec4(false, false, _GLF_IDENTITY(false, (false) || _GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, bool(bool(false))))))), true))))), (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, false, false, _GLF_IDENTITY(_GLF_IDENTITY(true, bool(bvec4(true, true, true, false))), bool(bool(_GLF_IDENTITY(true, bool(bvec4(true, true, true, false)))))))), false || (bool(bvec4(false, _GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, bool(bvec4(false, true, true, false))))), _GLF_IDENTITY(false, (false) || false), true)))))) && true), false || (_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, false, false, _GLF_IDENTITY(_GLF_IDENTITY(true, bool(bvec4(true, true, true, false))), bool(bool(_GLF_IDENTITY(true, bool(bvec4(true, true, true, false)))))))), false || (bool(bvec4(false, false, _GLF_IDENTITY(false, (false) || false), true))))), (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, false, false, _GLF_IDENTITY(_GLF_IDENTITY(true, bool(bvec4(true, true, true, false))), bool(bool(_GLF_IDENTITY(true, bool(bvec4(true, true, true, false)))))))), false || (bool(bvec4(false, _GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, bool(bvec4(false, true, true, false))))), _GLF_IDENTITY(false, (false) || false), true)))))) && true))), (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(93.70)), float(injectionSwitch.x), bool(true))) > injectionSwitch.y)), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - determinant(_GLF_IDENTITY(mat4(0.0, 1.0, 0.0, abs(0.0), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0), transpose(transpose(mat4(0.0, 1.0, 0.0, abs(0.0), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))))))))) && true)))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(_GLF_IDENTITY(false, (false) && _GLF_IDENTITY(true, ! (! (true)))))) || false))
    return;
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     return;
    }
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, false || (true)), (injectionSwitch.x < injectionSwitch.y))))
      {
       return;
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false))), false)))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))))
        return;
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         return;
        }
       return;
      }
     if(_GLF_DEAD(false))
      return;
    }
  }
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(false))
  return;
 do
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      break;
     do
      {
       if(_GLF_DEAD(false))
        return;
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
     if(_GLF_DEAD(false))
      return;
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true), true, true)))))))
        return;
       return;
      }
    }
   return;
  }
 _GLF_struct_9 _GLF_struct_replacement_9 = _GLF_struct_9(gl_SubgroupInvocationID, mat3(1.0), _GLF_struct_8(_GLF_struct_3(ivec3(1), mat4x2(1.0)), _GLF_struct_4(mat3x4(1.0), _GLF_IDENTITY(vec2(_GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, min(1.0, 1.0)), 1.0))), mix(vec2(_GLF_FUZZED(_GLF_IDENTITY((-7.6), mix(float(_GLF_FUZZED(-4239.6637)), float(_GLF_IDENTITY((-7.6), max((-7.6), (-7.6)))), bool(true)))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(38.99), max(_GLF_IDENTITY(_GLF_FUZZED(38.99), clamp(_GLF_IDENTITY(_GLF_FUZZED(38.99), max(_GLF_IDENTITY(_GLF_FUZZED(38.99), _GLF_IDENTITY((true ? _GLF_FUZZED(38.99) : _GLF_FUZZED(-600.888)), float(vec4((true ? _GLF_FUZZED(38.99) : _GLF_FUZZED(-600.888)), sqrt(1.0), _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, sin(0.0))), dot(vec2(1.0, 0.0), vec2(1.0, sin(0.0)))), 0.0)))), _GLF_FUZZED(38.99))), _GLF_FUZZED(38.99), _GLF_FUZZED(38.99))), _GLF_FUZZED(38.99))), float(mat2x4(_GLF_IDENTITY(_GLF_FUZZED(38.99), max(_GLF_FUZZED(38.99), _GLF_FUZZED(38.99))), 0.0, 1.0, 1.0, 1.0, _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), abs(1.0), 0.0)))), _GLF_IDENTITY(vec2((vec2(1.0))[0], _GLF_IDENTITY((vec2(1.0))[_GLF_IDENTITY(1, (1) - 0)], (false ? _GLF_FUZZED(-306.507) : (vec2(1.0))[1]))), (true ? vec2((vec2(1.0))[0], _GLF_IDENTITY((vec2(1.0))[1], (false ? _GLF_FUZZED(_GLF_IDENTITY(-306.507, (-306.507) + 0.0)) : (vec2(1.0))[1]))) : _GLF_FUZZED(injectionSwitch))), bvec2(_GLF_IDENTITY(true, ! (! (true))), true)))), mat2x4(_GLF_IDENTITY(1.0, 0.0 + (1.0))), vec4(1.0), _GLF_struct_5(uvec2(1u), bvec3(true), ivec4(1), uvec4(1u), vec2(1.0), _GLF_IDENTITY(ivec4(1), (ivec4(0, 0, 0, 0) >> _GLF_IDENTITY(ivec4(2), ivec4(2))) + (ivec4(_GLF_IDENTITY(1, (1) ^ 0)))), ivec4(1)), _GLF_struct_6(vec3(1.0), true), _GLF_struct_7(mat2(1.0), true, _GLF_IDENTITY(ivec2(1), clamp(ivec2(1), _GLF_IDENTITY(ivec2(1), ivec2(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)) ^ (ivec2(1))), _GLF_IDENTITY(ivec2(_GLF_IDENTITY(1, ~ (~ (_GLF_IDENTITY(1, ~ (~ (_GLF_IDENTITY(1, (1) + 0)))))))), (ivec2(1)) | (ivec2(1))))), _GLF_IDENTITY(vec4(1.0), vec4(_GLF_IDENTITY(mat3(vec4(1.0), 1.0, 0.0, 0.0, 1.0, 1.0), (mat3(vec4(1.0), 1.0, _GLF_IDENTITY(0.0, min(0.0, 0.0)), 0.0, 1.0, 1.0)) / mat3(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)))), injectionSwitch.y), _GLF_ONE(1.0, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, vec2(mat2x3(injectionSwitch, 0.0, 1.0, 0.0, cos(0.0)))), _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)))), (_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch)))) + vec2(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))).y), _GLF_ONE(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, (1.0) + 0.0)) - 0.0), _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y), _GLF_ONE(1.0, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, float(mat3x4(injectionSwitch.y, 0.0, 1.0, 0.0, 0.0, sqrt(1.0), 0.0, 0.0, cos(0.0), determinant(mat3(0.0, 0.0, 0.0, _GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(0.0, 0.0)), dot(vec2(_GLF_IDENTITY(1.0, max(1.0, 1.0)), 1.0), vec2(0.0, 0.0))), 0.0, 0.0, 1.0, 1.0, 0.0)), 0.0, 1.0))), mix(float(_GLF_FUZZED(-7.6)), float(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, float(mat3x4(injectionSwitch.y, 0.0, 1.0, 0.0, 0.0, sqrt(1.0), 0.0, 0.0, cos(0.0), determinant(mat3(0.0, 0.0, 0.0, _GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(0.0, 0.0)), dot(vec2(1.0, 1.0), vec2(0.0, 0.0))), 0.0, 0.0, 1.0, 1.0, 0.0)), 0.0, 1.0))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, float(mat3x4(injectionSwitch.y, 0.0, 1.0, 0.0, 0.0, sqrt(1.0), 0.0, 0.0, _GLF_IDENTITY(cos(0.0), (_GLF_IDENTITY(cos(0.0), float(mat3x2(cos(0.0), 0.0, 1.0, 0.0, 1.0, 1.0)))) - 0.0), determinant(mat3(0.0, 0.0, 0.0, _GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(0.0, 0.0)), dot(vec2(1.0, 1.0), vec2(0.0, 0.0))), 0.0, 0.0, 1.0, 1.0, 0.0)), 0.0, 1.0))), (_GLF_IDENTITY(injectionSwitch.y, float(mat3x4(injectionSwitch.y, 0.0, 1.0, 0.0, 0.0, sqrt(1.0), 0.0, 0.0, cos(0.0), determinant(mat3(0.0, 0.0, 0.0, _GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(0.0, 0.0)), _GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(0.0, 0.0)), min(dot(vec2(1.0, 1.0), vec2(0.0, 0.0)), dot(vec2(1.0, 1.0), vec2(0.0, 0.0))))), 0.0, 0.0, 1.0, 1.0, 0.0)), 0.0, 1.0)))) / 1.0), _GLF_IDENTITY(injectionSwitch.y, float(mat3x4(injectionSwitch.y, 0.0, 1.0, 0.0, 0.0, sqrt(1.0), 0.0, 0.0, cos(0.0), determinant(mat3(0.0, 0.0, 0.0, _GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(0.0, 0.0)), dot(vec2(1.0, 1.0), vec2(0.0, 0.0))), 0.0, 0.0, 1.0, 1.0, 0.0)), 0.0, 1.0))), _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(mat3x4(injectionSwitch.y, 0.0, 1.0, 0.0, 0.0, _GLF_IDENTITY(sqrt(1.0), 0.0 + (sqrt(1.0))), 0.0, 0.0, cos(0.0), determinant(mat3(0.0, 0.0, 0.0, _GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(0.0, 0.0)), dot(vec2(1.0, 1.0), vec2(0.0, 0.0))), 0.0, 0.0, 1.0, 1.0, 0.0)), 0.0, 1.0)), clamp(float(mat3x4(injectionSwitch.y, 0.0, 1.0, 0.0, 0.0, _GLF_IDENTITY(sqrt(1.0), 0.0 + (sqrt(1.0))), 0.0, 0.0, cos(0.0), determinant(mat3(0.0, 0.0, 0.0, _GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(0.0, 0.0)), dot(vec2(1.0, 1.0), vec2(0.0, 0.0))), 0.0, 0.0, 1.0, 1.0, 0.0)), 0.0, 1.0)), float(mat3x4(injectionSwitch.y, 0.0, 1.0, 0.0, 0.0, _GLF_IDENTITY(sqrt(1.0), 0.0 + (sqrt(1.0))), 0.0, 0.0, cos(0.0), determinant(mat3(0.0, 0.0, 0.0, _GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(0.0, 0.0)), dot(vec2(1.0, 1.0), vec2(0.0, 0.0))), 0.0, 0.0, 1.0, 1.0, 0.0)), 0.0, 1.0)), float(mat3x4(injectionSwitch.y, 0.0, 1.0, 0.0, 0.0, _GLF_IDENTITY(sqrt(1.0), 0.0 + (sqrt(1.0))), _GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, max(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(7.4)), bool(false))), 0.0))) - 0.0), 0.0, cos(0.0), determinant(mat3(0.0, 0.0, 0.0, _GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(0.0, 0.0)), dot(vec2(1.0, 1.0), vec2(0.0, 0.0))), 0.0, 0.0, 1.0, 1.0, 0.0)), 0.0, 1.0)))))))), bool(true)))), _GLF_ONE(1.0, injectionSwitch.y), _GLF_IDENTITY(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch)).y), float(_GLF_IDENTITY(vec2(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch)).y), 0.0), (false ? _GLF_FUZZED(vec2(9.6, 162.628)) : vec2(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch)).y), 0.0))))), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y))))), _GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, _GLF_IDENTITY((false ? _GLF_FUZZED(8.9) : 1.0), ((false ? _GLF_FUZZED(8.9) : 1.0)) * determinant(mat3(1.0, 0.0, 0.0, 0.0, 1.0, log(1.0), 0.0, exp(0.0), round(length(normalize(vec3(1.0, 1.0, 1.0)))))))), _GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, _GLF_IDENTITY(min(_GLF_IDENTITY(1.0, (1.0) * 1.0), 1.0), (min(_GLF_IDENTITY(1.0, (1.0) * 1.0), 1.0)) - 0.0)), 1.0)))))));
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   do
    {
     for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (int(2)) / 1))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        continue;
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) || _GLF_IDENTITY(false, (false) || false))));
   return;
  }
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(97.22)), bool(false))) > injectionSwitch.y))))))))))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(false))
        return;
      }
     else
      {
       return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
    }
   else
    {
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true))), true, true), bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true))), true, true), bvec3(bvec4(bvec3(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true))), true, true), true))), false)))), (bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true))), true, true), bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).y, (injectionSwitch.x > injectionSwitch.y) && true))), true, true), bvec3(bvec4(bvec3(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(true && (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)), bool(bvec3(true && (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), true, true), true))), false))))) && true))))))
      return;
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    return;
  }
 _GLF_struct_15 _GLF_struct_replacement_15 = _GLF_struct_15(_GLF_struct_10(bvec4(true), gl_NumWorkGroups.x), _GLF_struct_14(_GLF_struct_11(true), _GLF_struct_12(mat2(_GLF_IDENTITY(1.0, _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(false, ! (! (false))) ? _GLF_IDENTITY(_GLF_FUZZED(47.23), max(_GLF_FUZZED(47.23), _GLF_FUZZED(47.23))) : 1.0), ((_GLF_IDENTITY(false, ! (! (false))) ? _GLF_IDENTITY(_GLF_FUZZED(47.23), max(_GLF_FUZZED(47.23), _GLF_FUZZED(47.23))) : 1.0)) - 0.0), _GLF_IDENTITY(min((false ? _GLF_FUZZED(47.23) : 1.0), (false ? _GLF_FUZZED(47.23) : 1.0)), float(mat4x2(min((false ? _GLF_FUZZED(47.23) : 1.0), (false ? _GLF_FUZZED(47.23) : 1.0)), 0.0, 1.0, 1.0, log(1.0), 1.0, _GLF_IDENTITY(dot(vec4(_GLF_IDENTITY(dot(vec3(0.0, 0.0, 1.0), vec3(0.0, _GLF_IDENTITY(0.0, min(0.0, 0.0)), 1.0)), dot(vec3(0.0, 0.0, 1.0), vec3(0.0, 0.0, 1.0))), 0.0, determinant(mat4(0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0)), 0.0), vec4(1.0, 0.0, 0.0, 0.0)), dot(vec4(_GLF_IDENTITY(dot(vec3(0.0, 0.0, 1.0), vec3(0.0, 0.0, 1.0)), dot(vec3(0.0, 0.0, 1.0), vec3(0.0, 0.0, 1.0))), 0.0, determinant(mat4(0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0)), 0.0), vec4(1.0, 0.0, 0.0, 0.0))), 0.0)))))), vec4(1.0), 1, bvec4(true), mat4x2(1.0), _GLF_IDENTITY(bvec2(true), bvec2(bvec4(bvec2(true), _GLF_IDENTITY(true, bool(bvec2(true, false))), false)))), vec3(1.0), _GLF_struct_13(mat4x2(_GLF_IDENTITY(1.0, (1.0) - 0.0)), _GLF_IDENTITY(bvec3(true), _GLF_IDENTITY(bvec3(bvec3(bvec3(true))), bvec3(bvec4(bvec3(_GLF_IDENTITY(bvec3(bvec3(_GLF_IDENTITY(true, bool(bvec3(_GLF_IDENTITY(true, bool(bvec3(_GLF_IDENTITY(true, bool(bvec4(true, false, true, false))), false, false))), true, false))))), _GLF_IDENTITY(_GLF_IDENTITY(bvec3(bvec4(bvec3(bvec3(_GLF_IDENTITY(true, bool(bvec3(_GLF_IDENTITY(true, bool(bvec3(_GLF_IDENTITY(true, bool(bvec4(true, false, true, false))), false, false))), true, false))))), true)), bvec3(bvec3(bvec3(bvec4(bvec3(bvec3(_GLF_IDENTITY(true, bool(bvec3(_GLF_IDENTITY(true, bool(bvec3(_GLF_IDENTITY(true, bool(bvec4(true, false, true, false))), false, false))), true, false))))), true))))), bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec4(bvec3(bvec3(_GLF_IDENTITY(true, bool(bvec3(_GLF_IDENTITY(true, bool(bvec3(_GLF_IDENTITY(true, bool(bvec4(true, false, true, false))), false, false))), true, false))))), true)), bvec3(bvec3(bvec3(bvec4(bvec3(bvec3(_GLF_IDENTITY(true, bool(bvec3(_GLF_IDENTITY(true, bool(bvec3(_GLF_IDENTITY(true, bool(bvec4(true, false, true, false))), false, false))), true, false))))), true)))))))))), false)))), 1)));
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
      return;
    }
   else
    {
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), true && (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), bool(bvec4(_GLF_WRAPPED_IF_FALSE(false), false, true, true))))))
    {
    }
   else
    {
     return;
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true)), bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
    return;
  }
 uint workgroup_size = _GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) / uvec3(1u, 1u, _GLF_IDENTITY(1u, clamp(1u, 1u, _GLF_IDENTITY(1u, _GLF_IDENTITY(~ (_GLF_IDENTITY(~ (1u), 0u ^ (~ (1u)))), _GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(140944u), (true ? _GLF_FUZZED(140944u) : _GLF_FUZZED((false ? 197332u : subgroup_id)))), clamp(_GLF_FUZZED(140944u), _GLF_FUZZED(140944u), _GLF_FUZZED(140944u))) : ~ (_GLF_IDENTITY(~ (1u), 0u ^ _GLF_IDENTITY((~ _GLF_IDENTITY((1u), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY((1u), 1u * ((1u))), 1u * (_GLF_IDENTITY((1u), 1u * ((1u)))))), ((_GLF_IDENTITY(_GLF_IDENTITY((1u), 1u * ((1u))), 1u * (_GLF_IDENTITY((1u), 1u * ((1u))))))) | 0u) * 1u)), (_GLF_IDENTITY((~ _GLF_IDENTITY((1u), _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY((1u), 1u * ((1u))), 1u * (_GLF_IDENTITY((1u), 1u * ((1u)))))), 1u * ((_GLF_IDENTITY(_GLF_IDENTITY((1u), 1u * ((1u))), 1u * (_GLF_IDENTITY((1u), 1u * ((1u)))))))), ((_GLF_IDENTITY(_GLF_IDENTITY((1u), 1u * ((1u))), 1u * (_GLF_IDENTITY((1u), 1u * ((1u))))))) | 0u) * 1u)), 0u ^ (_GLF_IDENTITY((~ _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((1u), _GLF_IDENTITY(uint(uvec3((1u), 1u, 1u)), (uint(uvec3((1u), 1u, 1u))) * 1u)), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((1u), 1u * ((1u))), 1u * (_GLF_IDENTITY((1u), 1u * ((1u))))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((1u), 1u * ((1u))), 1u * (_GLF_IDENTITY((1u), 1u * ((1u))))), uint(_GLF_IDENTITY(uint(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((1u), 1u * ((1u))), 1u * (_GLF_IDENTITY((1u), 1u * ((1u))))), 0u | (_GLF_IDENTITY(_GLF_IDENTITY((1u), 1u * ((1u))), 1u * (_GLF_IDENTITY((1u), 1u * ((1u)))))))), min(uint(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((1u), 1u * ((1u))), 1u * (_GLF_IDENTITY((1u), 1u * ((1u))))), 0u | (_GLF_IDENTITY(_GLF_IDENTITY((1u), 1u * ((1u))), 1u * (_GLF_IDENTITY((1u), 1u * ((1u)))))))), uint(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((1u), 1u * ((1u))), 1u * (_GLF_IDENTITY((1u), 1u * ((1u))))), 0u | (_GLF_IDENTITY(_GLF_IDENTITY((1u), 1u * ((1u))), 1u * (_GLF_IDENTITY((1u), 1u * ((1u))))))))))))) | (0u << _GLF_IDENTITY(uint(4u), uint(4u))))), ((_GLF_IDENTITY(_GLF_IDENTITY((1u), _GLF_IDENTITY(1u, (1u) | (_GLF_IDENTITY(1u, (1u) / 1u))) * ((1u))), _GLF_IDENTITY(1u * (_GLF_IDENTITY((1u), 1u * ((1u)))), max(1u * (_GLF_IDENTITY((1u), 1u * ((1u)))), 1u * (_GLF_IDENTITY((1u), 1u * ((1u))))))))) | 0u) * 1u), 0u ^ (_GLF_IDENTITY(_GLF_IDENTITY((1u), _GLF_IDENTITY(uint(uvec3((1u), 1u, 1u)), (uint(uvec3((1u), 1u, 1u))) * 1u)), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((1u), 1u * ((1u))), 1u * (_GLF_IDENTITY((1u), 1u * ((1u))))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((1u), 1u * ((1u))), 1u * (_GLF_IDENTITY((1u), 1u * ((1u))))), uint(_GLF_IDENTITY(uint(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((1u), 1u * ((1u))), 1u * (_GLF_IDENTITY((1u), 1u * ((1u))))), 0u | (_GLF_IDENTITY(_GLF_IDENTITY((1u), 1u * ((1u))), 1u * (_GLF_IDENTITY((1u), 1u * ((1u)))))))), min(uint(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((1u), 1u * ((1u))), 1u * (_GLF_IDENTITY((1u), 1u * ((1u))))), 0u | (_GLF_IDENTITY(_GLF_IDENTITY((1u), 1u * ((1u))), 1u * (_GLF_IDENTITY((1u), 1u * ((1u)))))))), uint(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((1u), 1u * ((1u))), 1u * (_GLF_IDENTITY((1u), 1u * ((1u))))), 0u | (_GLF_IDENTITY(_GLF_IDENTITY((1u), 1u * ((1u))), 1u * (_GLF_IDENTITY((1u), 1u * ((1u))))))))))))) | (0u << _GLF_IDENTITY(uint(4u), uint(4u))))), ((_GLF_IDENTITY(_GLF_IDENTITY((1u), _GLF_IDENTITY(1u, (1u) | (_GLF_IDENTITY(1u, (1u) / 1u))) * ((1u))), _GLF_IDENTITY(1u * (_GLF_IDENTITY((1u), 1u * ((1u)))), max(1u * (_GLF_IDENTITY((1u), 1u * ((1u)))), 1u * (_GLF_IDENTITY((1u), 1u * ((1u))))))))) | 0u) * 1u)))), max(_GLF_IDENTITY((~ _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((1u), _GLF_IDENTITY(uint(uvec3((1u), 1u, 1u)), (uint(uvec3((1u), 1u, 1u))) * 1u)), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((1u), 1u * ((1u))), 1u * (_GLF_IDENTITY((1u), 1u * ((1u))))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((1u), 1u * ((1u))), 1u * (_GLF_IDENTITY((1u), 1u * ((1u))))), uint(_GLF_IDENTITY(uint(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((1u), 1u * ((1u))), 1u * (_GLF_IDENTITY((1u), 1u * ((1u))))), 0u | (_GLF_IDENTITY(_GLF_IDENTITY((1u), 1u * ((1u))), 1u * (_GLF_IDENTITY((1u), 1u * ((1u)))))))), min(uint(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((1u), 1u * ((1u))), 1u * (_GLF_IDENTITY((1u), 1u * ((1u))))), 0u | (_GLF_IDENTITY(_GLF_IDENTITY((1u), 1u * ((1u))), 1u * (_GLF_IDENTITY((1u), 1u * ((1u)))))))), uint(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((1u), 1u * ((1u))), 1u * (_GLF_IDENTITY((1u), 1u * ((1u))))), 0u | (_GLF_IDENTITY(_GLF_IDENTITY((1u), 1u * ((1u))), 1u * (_GLF_IDENTITY((1u), 1u * ((1u))))))))))))) | (0u << _GLF_IDENTITY(uint(4u), uint(4u))))), ((_GLF_IDENTITY(_GLF_IDENTITY((1u), _GLF_IDENTITY(1u, (1u) | (_GLF_IDENTITY(1u, (1u) / 1u))) * ((1u))), _GLF_IDENTITY(1u * (_GLF_IDENTITY((1u), 1u * ((1u)))), max(1u * (_GLF_IDENTITY((1u), 1u * ((1u)))), 1u * (_GLF_IDENTITY((1u), 1u * ((1u))))))))) | 0u) * 1u), 0u ^ (_GLF_IDENTITY(_GLF_IDENTITY((1u), _GLF_IDENTITY(uint(uvec3((1u), 1u, 1u)), (uint(uvec3((1u), 1u, 1u))) * 1u)), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((1u), 1u * ((1u))), 1u * (_GLF_IDENTITY((1u), 1u * ((1u))))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((1u), 1u * ((1u))), 1u * (_GLF_IDENTITY((1u), 1u * ((1u))))), uint(_GLF_IDENTITY(uint(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((1u), 1u * ((1u))), 1u * (_GLF_IDENTITY((1u), 1u * ((1u))))), 0u | (_GLF_IDENTITY(_GLF_IDENTITY((1u), 1u * ((1u))), 1u * (_GLF_IDENTITY((1u), 1u * ((1u)))))))), min(uint(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((1u), 1u * ((1u))), 1u * (_GLF_IDENTITY((1u), 1u * ((1u))))), 0u | (_GLF_IDENTITY(_GLF_IDENTITY((1u), 1u * ((1u))), 1u * (_GLF_IDENTITY((1u), 1u * ((1u)))))))), uint(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((1u), 1u * ((1u))), 1u * (_GLF_IDENTITY((1u), 1u * ((1u))))), 0u | (_GLF_IDENTITY(_GLF_IDENTITY((1u), 1u * ((1u))), 1u * (_GLF_IDENTITY((1u), 1u * ((1u))))))))))))) | (0u << _GLF_IDENTITY(uint(4u), uint(4u))))), ((_GLF_IDENTITY(_GLF_IDENTITY((1u), _GLF_IDENTITY(1u, (1u) | (_GLF_IDENTITY(1u, (1u) / 1u))) * ((1u))), _GLF_IDENTITY(1u * (_GLF_IDENTITY((1u), 1u * ((1u)))), max(1u * (_GLF_IDENTITY((1u), 1u * ((1u)))), 1u * (_GLF_IDENTITY((1u), 1u * ((1u))))))))) | 0u) * 1u)))), uint(uvec4((~ _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((1u), _GLF_IDENTITY(uint(uvec3((1u), 1u, 1u)), (uint(uvec3((1u), 1u, 1u))) * 1u)), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((1u), 1u * ((1u))), 1u * (_GLF_IDENTITY((1u), 1u * ((1u))))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((1u), 1u * ((1u))), 1u * (_GLF_IDENTITY((1u), 1u * ((1u))))), uint(_GLF_IDENTITY(uint(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((1u), 1u * ((1u))), 1u * (_GLF_IDENTITY((1u), 1u * ((1u))))), 0u | (_GLF_IDENTITY(_GLF_IDENTITY((1u), 1u * ((1u))), 1u * (_GLF_IDENTITY((1u), 1u * ((1u)))))))), min(uint(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((1u), 1u * ((1u))), 1u * (_GLF_IDENTITY((1u), 1u * ((1u))))), 0u | (_GLF_IDENTITY(_GLF_IDENTITY((1u), 1u * ((1u))), 1u * (_GLF_IDENTITY((1u), 1u * ((1u)))))))), uint(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((1u), 1u * ((1u))), 1u * (_GLF_IDENTITY((1u), 1u * ((1u))))), 0u | (_GLF_IDENTITY(_GLF_IDENTITY((1u), 1u * ((1u))), 1u * (_GLF_IDENTITY((1u), 1u * ((1u))))))))))))) | (0u << _GLF_IDENTITY(uint(4u), uint(4u))))), ((_GLF_IDENTITY(_GLF_IDENTITY((1u), _GLF_IDENTITY(1u, (1u) | (_GLF_IDENTITY(1u, (1u) / 1u))) * ((1u))), _GLF_IDENTITY(1u * (_GLF_IDENTITY((1u), 1u * ((1u)))), max(1u * (_GLF_IDENTITY((1u), 1u * ((1u)))), 1u * (_GLF_IDENTITY((1u), 1u * ((1u))))))))) | 0u) * 1u), 0u ^ (_GLF_IDENTITY(_GLF_IDENTITY((1u), _GLF_IDENTITY(uint(uvec3((1u), 1u, 1u)), (uint(uvec3((1u), 1u, 1u))) * 1u)), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((1u), 1u * ((1u))), 1u * (_GLF_IDENTITY((1u), 1u * ((1u))))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((1u), 1u * ((1u))), 1u * (_GLF_IDENTITY((1u), 1u * ((1u))))), uint(_GLF_IDENTITY(uint(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((1u), 1u * ((1u))), 1u * (_GLF_IDENTITY((1u), 1u * ((1u))))), 0u | (_GLF_IDENTITY(_GLF_IDENTITY((1u), 1u * ((1u))), 1u * (_GLF_IDENTITY((1u), 1u * ((1u)))))))), min(uint(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((1u), 1u * ((1u))), 1u * (_GLF_IDENTITY((1u), 1u * ((1u))))), 0u | (_GLF_IDENTITY(_GLF_IDENTITY((1u), 1u * ((1u))), 1u * (_GLF_IDENTITY((1u), 1u * ((1u)))))))), uint(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((1u), 1u * ((1u))), 1u * (_GLF_IDENTITY((1u), 1u * ((1u))))), 0u | (_GLF_IDENTITY(_GLF_IDENTITY((1u), 1u * ((1u))), 1u * (_GLF_IDENTITY((1u), 1u * ((1u))))))))))))) | (0u << _GLF_IDENTITY(uint(4u), uint(4u))))), ((_GLF_IDENTITY(_GLF_IDENTITY((1u), _GLF_IDENTITY(1u, (1u) | (_GLF_IDENTITY(1u, (1u) / 1u))) * ((1u))), _GLF_IDENTITY(1u * (_GLF_IDENTITY((1u), 1u * ((1u)))), max(1u * (_GLF_IDENTITY((1u), 1u * ((1u)))), 1u * (_GLF_IDENTITY((1u), 1u * ((1u))))))))) | 0u) * 1u)))), 1u, 0u, 0u))), (~ _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((1u), _GLF_IDENTITY(uint(uvec3((1u), 1u, 1u)), (uint(uvec3((1u), 1u, 1u))) * 1u)), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((1u), 1u * ((1u))), 1u * (_GLF_IDENTITY((1u), 1u * ((1u))))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((1u), 1u * ((1u))), 1u * (_GLF_IDENTITY((1u), 1u * ((1u))))), uint(_GLF_IDENTITY(uint(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((1u), 1u * ((1u))), 1u * (_GLF_IDENTITY((1u), 1u * ((1u))))), 0u | (_GLF_IDENTITY(_GLF_IDENTITY((1u), 1u * ((1u))), 1u * (_GLF_IDENTITY((1u), 1u * ((1u)))))))), min(uint(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((1u), 1u * ((1u))), 1u * (_GLF_IDENTITY((1u), 1u * ((1u))))), 0u | (_GLF_IDENTITY(_GLF_IDENTITY((1u), 1u * ((1u))), 1u * (_GLF_IDENTITY((1u), 1u * ((1u)))))))), uint(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((1u), 1u * ((1u))), 1u * (_GLF_IDENTITY((1u), 1u * ((1u))))), 0u | (_GLF_IDENTITY(_GLF_IDENTITY((1u), 1u * ((1u))), 1u * (_GLF_IDENTITY((1u), 1u * ((1u))))))))))))) | (0u << _GLF_IDENTITY(uint(4u), uint(4u))))), ((_GLF_IDENTITY(_GLF_IDENTITY((1u), _GLF_IDENTITY(1u, (1u) | (_GLF_IDENTITY(1u, (1u) / 1u))) * ((1u))), _GLF_IDENTITY(1u * (_GLF_IDENTITY((1u), 1u * ((1u)))), max(1u * (_GLF_IDENTITY((1u), 1u * ((1u)))), 1u * (_GLF_IDENTITY((1u), 1u * ((1u))))))))) | 0u) * 1u), 0u ^ (_GLF_IDENTITY(_GLF_IDENTITY((1u), _GLF_IDENTITY(uint(uvec3((1u), 1u, 1u)), (uint(uvec3((1u), 1u, 1u))) * 1u)), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((1u), 1u * ((1u))), 1u * (_GLF_IDENTITY((1u), 1u * ((1u))))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((1u), 1u * ((1u))), 1u * (_GLF_IDENTITY((1u), 1u * ((1u))))), uint(_GLF_IDENTITY(uint(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((1u), 1u * ((1u))), 1u * (_GLF_IDENTITY((1u), 1u * ((1u))))), 0u | (_GLF_IDENTITY(_GLF_IDENTITY((1u), 1u * ((1u))), 1u * (_GLF_IDENTITY((1u), 1u * ((1u)))))))), min(uint(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((1u), 1u * ((1u))), 1u * (_GLF_IDENTITY((1u), 1u * ((1u))))), 0u | (_GLF_IDENTITY(_GLF_IDENTITY((1u), 1u * ((1u))), 1u * (_GLF_IDENTITY((1u), 1u * ((1u)))))))), uint(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((1u), 1u * ((1u))), 1u * (_GLF_IDENTITY((1u), 1u * ((1u))))), 0u | (_GLF_IDENTITY(_GLF_IDENTITY((1u), 1u * ((1u))), 1u * (_GLF_IDENTITY((1u), 1u * ((1u))))))))))))) | (0u << _GLF_IDENTITY(uint(4u), uint(4u))))), ((_GLF_IDENTITY(_GLF_IDENTITY((1u), _GLF_IDENTITY(1u, (1u) | (_GLF_IDENTITY(1u, (1u) / 1u))) * ((1u))), _GLF_IDENTITY(1u * (_GLF_IDENTITY((1u), 1u * ((1u)))), max(1u * (_GLF_IDENTITY((1u), 1u * ((1u)))), 1u * (_GLF_IDENTITY((1u), 1u * ((1u))))))))) | 0u) * 1u))))))))) - _GLF_IDENTITY(0u, (0u) << 0u))))), _GLF_IDENTITY(uint(uvec4(_GLF_IDENTITY((_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), injectionSwitch)).y), bool(bvec3((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), injectionSwitch)).y), false, _GLF_IDENTITY(true, bool(bvec4(true, true, false, false))))))) ? _GLF_FUZZED(140944u) : ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(1u, (1u) | 0u)), 0u ^ (~ (1u))))), max((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(140944u) : ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (1u), 0u ^ (~ _GLF_IDENTITY((1u), clamp(_GLF_IDENTITY((1u), (_GLF_IDENTITY(false, true && (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) || false)))), bool(bvec3(false, false, false))))) ? _GLF_FUZZED(subgroup_id) : (1u))), (1u), (1u))))), (_GLF_IDENTITY(~ (1u), 0u ^ (~ _GLF_IDENTITY((1u), clamp(_GLF_IDENTITY((1u), (_GLF_IDENTITY(false, true && (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) || false)))), bool(bvec3(false, false, false))))) ? _GLF_FUZZED(subgroup_id) : (1u))), (1u), (1u)))))) | 0u))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(140944u) : ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ _GLF_IDENTITY((1u), min(_GLF_IDENTITY((1u), uint(uvec4((1u), 0u, 0u, 1u))), _GLF_IDENTITY((1u), ((1u)) | 0u))), 0u ^ (~ (1u))), max(_GLF_IDENTITY(~ (1u), 0u ^ (~ (1u))), _GLF_IDENTITY(_GLF_IDENTITY(~ (1u), _GLF_IDENTITY(0u, (0u) ^ 0u) ^ (~ (1u))), ~ (~ (_GLF_IDENTITY(~ (1u), 0u ^ (~ (1u)))))))))))), 0u, 1u, 1u)), clamp(uint(uvec4(_GLF_IDENTITY((_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true)) ? _GLF_FUZZED(_GLF_IDENTITY(140944u, 0u | (140944u))) : ~ (_GLF_IDENTITY(~ (1u), 0u ^ (~ (1u))))), max((_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false))))) ? _GLF_FUZZED(140944u) : ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (_GLF_IDENTITY(1u, ~ (~ (1u)))), (0u << _GLF_IDENTITY(uint(6u), uint(6u))) | (_GLF_IDENTITY(~ (_GLF_IDENTITY(1u, ~ (~ (1u)))), max(~ (_GLF_IDENTITY(1u, ~ (~ (1u)))), _GLF_IDENTITY(~ (_GLF_IDENTITY(1u, ~ (~ (1u)))), (~ (_GLF_IDENTITY(1u, ~ (~ (1u))))) - (0u & 12594u)))))), 0u ^ (_GLF_IDENTITY(~ (1u), uint(uvec2(~ (1u), 0u))))))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_IDENTITY(_GLF_FUZZED(140944u), (_GLF_IDENTITY(_GLF_FUZZED(140944u), (_GLF_FUZZED(140944u)) - 0u)) ^ 0u) : ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (1u), 0u ^ (_GLF_IDENTITY(~ (1u), uint(uint(_GLF_IDENTITY(~ (1u), _GLF_IDENTITY((false ? _GLF_FUZZED(subgroup_size) : ~ (1u)), ~ (~ ((false ? _GLF_FUZZED(_GLF_IDENTITY(subgroup_size, (subgroup_size) | (_GLF_IDENTITY(subgroup_size, min(subgroup_size, _GLF_IDENTITY(subgroup_size, (subgroup_size) << 0u)))))) : ~ (1u))))))))))), (_GLF_IDENTITY(_GLF_IDENTITY(~ (1u), 0u ^ (_GLF_IDENTITY(~ (1u), uint(uint(_GLF_IDENTITY(~ (1u), _GLF_IDENTITY((false ? _GLF_FUZZED(subgroup_size) : ~ (1u)), ~ (~ ((false ? _GLF_FUZZED(_GLF_IDENTITY(subgroup_size, (subgroup_size) | (_GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size))))) : ~ (1u))))))))))), (false ? _GLF_FUZZED(subgroup_id) : _GLF_IDENTITY(~ (_GLF_IDENTITY(1u, 0u ^ (_GLF_IDENTITY(1u, (1u) ^ 0u)))), 0u ^ (_GLF_IDENTITY(~ (1u), uint(uint(_GLF_IDENTITY(~ (1u), _GLF_IDENTITY((false ? _GLF_FUZZED(subgroup_size) : ~ (1u)), _GLF_IDENTITY(~ (~ ((false ? _GLF_FUZZED(_GLF_IDENTITY(subgroup_size, (subgroup_size) | (_GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size))))) : ~ (1u)))), clamp(_GLF_IDENTITY(~ (~ ((false ? _GLF_FUZZED(_GLF_IDENTITY(subgroup_size, (subgroup_size) | (_GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size))))) : ~ (1u)))), clamp(_GLF_IDENTITY(~ (~ ((false ? _GLF_FUZZED(_GLF_IDENTITY(subgroup_size, (subgroup_size) | (_GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size))))) : ~ (1u)))), clamp(~ (~ ((false ? _GLF_FUZZED(_GLF_IDENTITY(subgroup_size, (subgroup_size) | (_GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size))))) : ~ (1u)))), ~ (~ ((false ? _GLF_FUZZED(_GLF_IDENTITY(subgroup_size, (subgroup_size) | (_GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size))))) : ~ (1u)))), ~ (~ ((false ? _GLF_FUZZED(_GLF_IDENTITY(subgroup_size, (subgroup_size) | (_GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size))))) : ~ (1u)))))), ~ (~ ((false ? _GLF_FUZZED(_GLF_IDENTITY(subgroup_size, (subgroup_size) | (_GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size))))) : ~ (1u)))), ~ (~ ((false ? _GLF_FUZZED(_GLF_IDENTITY(subgroup_size, (subgroup_size) | (_GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size))))) : ~ (1u)))))), ~ (~ ((false ? _GLF_FUZZED(_GLF_IDENTITY(subgroup_size, (subgroup_size) | (_GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size))))) : ~ (1u)))), ~ (~ ((false ? _GLF_FUZZED(_GLF_IDENTITY(subgroup_size, (subgroup_size) | (_GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size))))) : ~ (1u)))))))))))))))) * 1u))))), 0u, 1u, 1u)), uint(uvec4(_GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_IDENTITY(_GLF_FUZZED(140944u), (_GLF_FUZZED(140944u)) - _GLF_IDENTITY(uint(_GLF_ZERO(0.0, injectionSwitch.x)), (uint(_GLF_ZERO(0.0, injectionSwitch.x))) >> (0u << _GLF_IDENTITY(uint(5u), uint(5u))))) : ~ (_GLF_IDENTITY(~ (1u), _GLF_IDENTITY(0u, max(0u, _GLF_IDENTITY(_GLF_IDENTITY(0u, _GLF_IDENTITY((false ? _GLF_FUZZED((48734u / 182095u)) : 0u), ((false ? _GLF_FUZZED((48734u / 182095u)) : 0u)) - uint(_GLF_ZERO(0.0, injectionSwitch.x)))), (_GLF_IDENTITY(0u, _GLF_IDENTITY((_GLF_IDENTITY(false ? _GLF_FUZZED(_GLF_IDENTITY((48734u / 182095u), 0u ^ ((48734u / 182095u)))) : 0u, (true ? false ? _GLF_FUZZED(_GLF_IDENTITY((48734u / 182095u), 0u ^ ((48734u / 182095u)))) : 0u : _GLF_FUZZED(subgroup_id)))), ((false ? _GLF_FUZZED((48734u / 182095u)) : 0u)) - uint(_GLF_ZERO(0.0, injectionSwitch.x))))) / 1u))) ^ (~ (_GLF_IDENTITY(1u, min(1u, _GLF_IDENTITY(1u, (1u) + 0u)))))))), max(_GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(_GLF_IDENTITY(140944u, (true ? 140944u : _GLF_FUZZED(181979u)))) : ~ (_GLF_IDENTITY(~ (1u), 0u ^ (~ (1u))))), ((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(140944u) : ~ (_GLF_IDENTITY(~ (1u), 0u ^ (~ (1u)))))) << (0u >> _GLF_IDENTITY(uint(1u), uint(1u)))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(_GLF_IDENTITY(140944u, clamp(140944u, 140944u, _GLF_IDENTITY(140944u, (140944u) ^ 0u)))) : ~ (_GLF_IDENTITY(~ (1u), 0u ^ (~ (1u))))))), 0u, 1u, 1u)), uint(_GLF_IDENTITY(uvec4(_GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(140944u) : ~ (_GLF_IDENTITY(~ (1u), 0u ^ _GLF_IDENTITY((_GLF_IDENTITY(~ (1u), 1u * (_GLF_IDENTITY(~ _GLF_IDENTITY((1u), _GLF_IDENTITY(min((1u), (1u)), (_GLF_IDENTITY(min((1u), (1u)), (min((1u), (1u))) - 0u)) ^ 0u)), ~ (~ (_GLF_IDENTITY(~ (1u), clamp(~ (1u), ~ (1u), ~ (1u))))))))), ~ (~ ((_GLF_IDENTITY(~ (1u), 1u * (_GLF_IDENTITY(~ (1u), ~ (~ (_GLF_IDENTITY(~ (1u), clamp(~ (1u), ~ (1u), ~ (1u))))))))))))))), max((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(140944u) : ~ _GLF_IDENTITY((_GLF_IDENTITY(~ (1u), 0u ^ (~ (1u)))), ((_GLF_IDENTITY(~ (1u), 0u ^ (~ (1u))))) | ((_GLF_IDENTITY(~ _GLF_IDENTITY((1u), clamp((1u), _GLF_IDENTITY(_GLF_IDENTITY((1u), clamp((1u), _GLF_IDENTITY((1u), _GLF_IDENTITY(uint(uvec3(_GLF_IDENTITY((1u), ((1u)) ^ 0u), 0u, 1u)), 0u + (uint(uvec3(_GLF_IDENTITY((1u), ((1u)) ^ 0u), 0u, 1u))))), _GLF_IDENTITY((1u), ((1u)) / 1u))), _GLF_IDENTITY(uint(uint((1u))), (_GLF_IDENTITY(uint(uint((1u))), max(uint(uint((1u))), uint(uint((1u)))))) / 1u)), (_GLF_IDENTITY(1u, clamp(_GLF_IDENTITY(1u, max(_GLF_IDENTITY(1u, clamp(1u, 1u, 1u)), 1u)), 1u, 1u))))), 0u ^ (~ (1u))))))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(140944u) : ~ (_GLF_IDENTITY(~ (1u), 0u ^ (~ (1u))))))), 0u, 1u, 1u), (uvec4(_GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(140944u) : ~ (_GLF_IDENTITY(~ _GLF_IDENTITY((1u), min((1u), (1u))), 0u ^ _GLF_IDENTITY((_GLF_IDENTITY(~ (1u), 1u * (_GLF_IDENTITY(_GLF_IDENTITY(~ _GLF_IDENTITY((1u), _GLF_IDENTITY(min((1u), (1u)), (_GLF_IDENTITY(min((1u), (1u)), (min((1u), (1u))) - 0u)) ^ 0u)), ~ (~ (_GLF_IDENTITY(~ (1u), clamp(~ (1u), ~ (1u), ~ (1u)))))), (_GLF_IDENTITY(_GLF_IDENTITY(~ _GLF_IDENTITY((1u), _GLF_IDENTITY(min((1u), (1u)), (_GLF_IDENTITY(min((1u), (1u)), (min((1u), (1u))) - 0u)) ^ 0u)), ~ (~ (_GLF_IDENTITY(~ (1u), clamp(~ (1u), ~ (1u), ~ (1u)))))), (0u | 0u) | (_GLF_IDENTITY(~ _GLF_IDENTITY((1u), _GLF_IDENTITY(min((1u), (1u)), (_GLF_IDENTITY(min((1u), (1u)), (min((1u), (1u))) - 0u)) ^ 0u)), ~ (~ (_GLF_IDENTITY(~ (1u), clamp(~ (1u), ~ (1u), ~ (1u))))))))) ^ 0u)))), ~ (~ ((_GLF_IDENTITY(~ (1u), 1u * (_GLF_IDENTITY(~ (1u), ~ (~ (_GLF_IDENTITY(~ (1u), clamp(~ (1u), ~ (1u), ~ (1u))))))))))))))), max((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(140944u) : ~ _GLF_IDENTITY((_GLF_IDENTITY(~ (1u), 0u ^ (~ (1u)))), ((_GLF_IDENTITY(~ (1u), 0u ^ (~ (1u))))) | ((_GLF_IDENTITY(~ _GLF_IDENTITY((1u), clamp((1u), _GLF_IDENTITY((1u), uint(uint((1u)))), (1u))), 0u ^ (~ (1u))))))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(140944u) : ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (1u), 0u ^ (~ (1u))), 0u ^ (_GLF_IDENTITY(~ (1u), 0u ^ (~ (1u))))))))), 0u, 1u, _GLF_IDENTITY(1u, (1u) | 0u))) | (_GLF_IDENTITY(uvec4(_GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(140944u) : ~ (_GLF_IDENTITY(~ (1u), 0u ^ _GLF_IDENTITY((_GLF_IDENTITY(~ (1u), 1u * (_GLF_IDENTITY(~ _GLF_IDENTITY((1u), _GLF_IDENTITY(min((1u), (1u)), (_GLF_IDENTITY(min((1u), (1u)), (min((1u), _GLF_IDENTITY(_GLF_IDENTITY((1u), 0u | (_GLF_IDENTITY((1u), (false ? _GLF_FUZZED(subgroup_id) : (1u))))), (_GLF_IDENTITY(_GLF_IDENTITY((1u), clamp((1u), (1u), _GLF_IDENTITY((1u), ~ (~ ((1u)))))), (false ? _GLF_FUZZED(195468u) : (1u)))) | (_GLF_IDENTITY((1u), uint(uint((1u)))))))) - 0u)) ^ 0u)), ~ (~ (_GLF_IDENTITY(~ (1u), clamp(~ (1u), ~ (1u), ~ (1u))))))))), ~ (~ ((_GLF_IDENTITY(~ (1u), 1u * (_GLF_IDENTITY(~ (1u), ~ (~ (_GLF_IDENTITY(~ (1u), clamp(~ (1u), ~ (1u), ~ (1u))))))))))))))), max((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(140944u) : ~ _GLF_IDENTITY((_GLF_IDENTITY(~ (1u), 0u ^ (~ (1u)))), ((_GLF_IDENTITY(~ (1u), 0u ^ (~ (1u))))) | ((_GLF_IDENTITY(~ _GLF_IDENTITY((1u), clamp((1u), _GLF_IDENTITY((1u), uint(uint((1u)))), (1u))), 0u ^ (~ (1u))))))), _GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(140944u) : ~ (_GLF_IDENTITY(~ (1u), _GLF_IDENTITY(0u, 0u | (0u)) ^ (~ (1u))))), min((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(140944u) : ~ (_GLF_IDENTITY(~ (1u), _GLF_IDENTITY(0u, 0u | (0u)) ^ (~ (1u))))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(140944u) : ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(1u, (false ? _GLF_FUZZED(min(subgroup_size, 142707u)) : 1u))), _GLF_IDENTITY(0u, 0u | (0u)) ^ (~ (1u))))))))), 0u, 1u, 1u), _GLF_IDENTITY(uvec4(0u, 0u, 0u, 0u) ^ (uvec4(_GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(140944u) : ~ (_GLF_IDENTITY(~ (1u), _GLF_IDENTITY(0u ^ _GLF_IDENTITY((_GLF_IDENTITY(~ (1u), 1u * (_GLF_IDENTITY(~ _GLF_IDENTITY((1u), _GLF_IDENTITY(min((1u), (1u)), (_GLF_IDENTITY(min((1u), (1u)), (min((1u), _GLF_IDENTITY((1u), 0u | ((1u))))) - 0u)) ^ 0u)), ~ (~ (_GLF_IDENTITY(~ (1u), clamp(~ (1u), ~ (1u), ~ (1u))))))))), ~ (~ ((_GLF_IDENTITY(~ (1u), 1u * (_GLF_IDENTITY(~ (1u), ~ (~ (_GLF_IDENTITY(~ (1u), clamp(~ (1u), ~ (1u), ~ (1u)))))))))))), min(0u ^ _GLF_IDENTITY((_GLF_IDENTITY(~ (1u), 1u * (_GLF_IDENTITY(~ _GLF_IDENTITY((1u), _GLF_IDENTITY(min((1u), (1u)), (_GLF_IDENTITY(min((1u), (1u)), (min((1u), (1u))) - 0u)) ^ 0u)), ~ (~ (_GLF_IDENTITY(~ (1u), clamp(~ (1u), ~ (1u), ~ (1u))))))))), ~ (~ ((_GLF_IDENTITY(~ (1u), 1u * (_GLF_IDENTITY(~ (1u), ~ (~ (_GLF_IDENTITY(~ (1u), clamp(~ (1u), ~ (1u), ~ (1u)))))))))))), 0u ^ _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(~ (1u), ~ (~ (~ (1u)))), 1u * (_GLF_IDENTITY(~ _GLF_IDENTITY((1u), _GLF_IDENTITY(min((1u), (1u)), (_GLF_IDENTITY(min((1u), (1u)), (_GLF_IDENTITY(min((1u), (1u)), (true ? _GLF_IDENTITY(min((1u), (1u)), (min((1u), (1u))) + 0u) : _GLF_FUZZED((69083u << subgroup_id))))) - 0u)) ^ 0u)), ~ (~ (_GLF_IDENTITY(~ (1u), clamp(~ (1u), ~ (1u), ~ (1u))))))))), ~ (~ ((_GLF_IDENTITY(~ (1u), 1u * (_GLF_IDENTITY(_GLF_IDENTITY(~ (1u), ~ (~ (_GLF_IDENTITY(~ (1u), clamp(~ (1u), ~ (1u), ~ (1u)))))), 1u * (_GLF_IDENTITY(~ (1u), ~ (~ (_GLF_IDENTITY(~ (1u), clamp(~ (1u), ~ (1u), ~ (1u))))))))))))))))))), max((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(140944u) : ~ _GLF_IDENTITY((_GLF_IDENTITY(~ (1u), 0u ^ (~ (1u)))), ((_GLF_IDENTITY(~ (_GLF_IDENTITY(1u, ~ (~ (1u)))), 0u ^ (~ (1u))))) | ((_GLF_IDENTITY(~ _GLF_IDENTITY((1u), _GLF_IDENTITY(clamp((1u), _GLF_IDENTITY((1u), uint(uint((1u)))), (1u)), 1u * (_GLF_IDENTITY(clamp((1u), _GLF_IDENTITY((1u), uint(uint((1u)))), (1u)), 0u ^ (clamp((1u), _GLF_IDENTITY((1u), uint(uint((1u)))), (1u))))))), 0u ^ (~ (1u))))))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(140944u) : ~ (_GLF_IDENTITY(~ (1u), 0u ^ (~ (1u))))))), 0u, 1u, 1u)), min(_GLF_IDENTITY(uvec4(0u, 0u, 0u, 0u) ^ (uvec4(_GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(140944u) : ~ (_GLF_IDENTITY(~ (1u), 0u ^ _GLF_IDENTITY((_GLF_IDENTITY(~ (1u), 1u * (_GLF_IDENTITY(~ _GLF_IDENTITY((1u), _GLF_IDENTITY(min((1u), (1u)), (_GLF_IDENTITY(min((1u), (1u)), (min((1u), (1u))) - 0u)) ^ 0u)), ~ (~ (_GLF_IDENTITY(~ (1u), clamp(~ (1u), ~ (1u), ~ (1u))))))))), ~ (~ ((_GLF_IDENTITY(~ (1u), 1u * (_GLF_IDENTITY(~ (1u), ~ (~ (_GLF_IDENTITY(~ (1u), clamp(~ (1u), ~ (1u), ~ (1u))))))))))))))), max((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(140944u) : ~ _GLF_IDENTITY((_GLF_IDENTITY(~ (1u), 0u ^ (~ (1u)))), ((_GLF_IDENTITY(~ (1u), 0u ^ (~ (1u))))) | ((_GLF_IDENTITY(~ _GLF_IDENTITY((1u), clamp((1u), _GLF_IDENTITY((1u), uint(uint((1u)))), (1u))), 0u ^ (~ (1u))))))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(_GLF_IDENTITY(140944u, uint(uint(140944u)))) : ~ (_GLF_IDENTITY(~ (1u), 0u ^ (~ (1u))))))), 0u, 1u, 1u)), (_GLF_IDENTITY(uvec4(0u, 0u, 0u, 0u) ^ (uvec4(_GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(140944u) : ~ (_GLF_IDENTITY(~ (1u), 0u ^ _GLF_IDENTITY((_GLF_IDENTITY(~ (1u), 1u * (_GLF_IDENTITY(~ _GLF_IDENTITY((1u), _GLF_IDENTITY(min((1u), (1u)), (_GLF_IDENTITY(min((1u), (1u)), (min((1u), (1u))) - 0u)) ^ 0u)), ~ (~ (_GLF_IDENTITY(~ (1u), clamp(~ (1u), ~ (1u), ~ (1u))))))))), ~ (~ ((_GLF_IDENTITY(~ (1u), 1u * (_GLF_IDENTITY(~ (1u), ~ (~ (_GLF_IDENTITY(~ (1u), clamp(~ (1u), ~ (1u), ~ (1u))))))))))))))), max((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(140944u) : ~ _GLF_IDENTITY((_GLF_IDENTITY(~ (1u), 0u ^ (~ _GLF_IDENTITY((1u), min((1u), (1u)))))), ((_GLF_IDENTITY(~ (1u), 0u ^ (~ (1u))))) | ((_GLF_IDENTITY(~ _GLF_IDENTITY((1u), clamp((1u), _GLF_IDENTITY((1u), uint(uint((1u)))), (1u))), 0u ^ (~ (1u))))))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(140944u) : ~ (_GLF_IDENTITY(~ (1u), 0u ^ (~ (1u))))))), 0u, 1u, 1u)), max(uvec4(0u, 0u, 0u, 0u) ^ (uvec4(_GLF_IDENTITY((_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) || false))), (_GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(mat2x3(injectionSwitch.x, 1.0, 0.0, cos(0.0), tan(0.0), log(1.0)), transpose(transpose(mat2x3(injectionSwitch.x, 1.0, 0.0, cos(0.0), tan(0.0), log(1.0))))))) > injectionSwitch.y)) ? _GLF_FUZZED(140944u) : ~ (_GLF_IDENTITY(~ (1u), 0u ^ _GLF_IDENTITY((_GLF_IDENTITY(~ (1u), 1u * (_GLF_IDENTITY(~ _GLF_IDENTITY((1u), _GLF_IDENTITY(min((1u), (1u)), (_GLF_IDENTITY(min((1u), (1u)), (min((1u), (1u))) - 0u)) ^ 0u)), ~ (~ (_GLF_IDENTITY(~ (1u), clamp(~ (1u), ~ (1u), ~ (1u))))))))), ~ (~ ((_GLF_IDENTITY(~ (1u), 1u * (_GLF_IDENTITY(~ (1u), ~ (~ (_GLF_IDENTITY(~ (1u), clamp(~ (1u), ~ (1u), ~ (1u))))))))))))))), max((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(140944u) : ~ _GLF_IDENTITY((_GLF_IDENTITY(~ (_GLF_IDENTITY(1u, uint(uint(_GLF_IDENTITY(1u, (false ? _GLF_FUZZED(subgroup_size) : 1u)))))), 0u ^ (_GLF_IDENTITY(~ (1u), (~ (1u)) * (0u ^ 1u))))), ((_GLF_IDENTITY(~ (1u), 0u ^ (~ (1u))))) | ((_GLF_IDENTITY(~ _GLF_IDENTITY((1u), clamp((1u), _GLF_IDENTITY((1u), uint(uint((_GLF_IDENTITY(1u, (1u) / 1u))))), (1u))), 0u ^ (~ (1u))))))), (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y)))) ? _GLF_FUZZED(140944u) : ~ (_GLF_IDENTITY(~ (1u), 0u ^ (~ (1u))))))), 0u, 1u, 1u)), uvec4(0u, 0u, 0u, 0u) ^ (uvec4(_GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(140944u) : ~ (_GLF_IDENTITY(~ (1u), 0u ^ _GLF_IDENTITY((_GLF_IDENTITY(~ (1u), 1u * (_GLF_IDENTITY(~ _GLF_IDENTITY((1u), _GLF_IDENTITY(min((1u), (1u)), (_GLF_IDENTITY(min((1u), (1u)), (min((1u), (1u))) - 0u)) ^ 0u)), ~ (~ (_GLF_IDENTITY(~ (1u), clamp(~ (1u), ~ (1u), ~ (1u))))))))), ~ (~ ((_GLF_IDENTITY(~ (1u), 1u * (_GLF_IDENTITY(~ (1u), ~ (~ (_GLF_IDENTITY(~ (1u), clamp(~ (1u), ~ (1u), ~ (1u))))))))))))))), max((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(140944u) : ~ _GLF_IDENTITY((_GLF_IDENTITY(~ (_GLF_IDENTITY(1u, uint(uint(1u)))), 0u ^ (~ (1u)))), ((_GLF_IDENTITY(~ (1u), 0u ^ (_GLF_IDENTITY(~ (1u), 0u | (_GLF_IDENTITY(~ (1u), _GLF_IDENTITY(uint(uint(~ (1u))), (uint(uint(~ (1u)))) - 0u)))))))) | ((_GLF_IDENTITY(~ _GLF_IDENTITY((1u), clamp((1u), _GLF_IDENTITY((1u), uint(uint((1u)))), (1u))), 0u ^ (~ (1u))))))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(140944u) : ~ (_GLF_IDENTITY(~ (1u), 0u ^ (~ (1u))))))), 0u, 1u, 1u))))) >> uvec4(0u, 0u, 0u, 0u)), uvec4(0u, 0u, 0u, 0u) ^ (uvec4(_GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(140944u) : ~ (_GLF_IDENTITY(~ (1u), 0u ^ _GLF_IDENTITY((_GLF_IDENTITY(~ (1u), 1u * (_GLF_IDENTITY(~ _GLF_IDENTITY((1u), _GLF_IDENTITY(min((1u), (1u)), (_GLF_IDENTITY(min((1u), (1u)), (min((1u), (1u))) - 0u)) ^ 0u)), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (1u), clamp(~ (1u), ~ (1u), ~ (1u))), (_GLF_IDENTITY(~ (1u), clamp(~ (1u), ~ (1u), ~ (1u)))) | (_GLF_IDENTITY(~ (1u), clamp(~ (1u), ~ (1u), ~ (1u))))))))))), ~ (~ ((_GLF_IDENTITY(~ (1u), 1u * (_GLF_IDENTITY(~ (1u), ~ (~ (_GLF_IDENTITY(~ (1u), clamp(~ (1u), ~ (1u), ~ (1u))))))))))))))), max((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(140944u) : ~ _GLF_IDENTITY((_GLF_IDENTITY(~ (1u), 0u ^ (~ (1u)))), ((_GLF_IDENTITY(~ (1u), 0u ^ (~ (1u))))) | ((_GLF_IDENTITY(~ _GLF_IDENTITY((1u), clamp((1u), _GLF_IDENTITY((1u), uint(uint((_GLF_IDENTITY(1u, (1u) - 0u))))), (1u))), 0u ^ (~ (1u))))))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(140944u) : ~ (_GLF_IDENTITY(~ (1u), 0u ^ _GLF_IDENTITY((~ (1u)), max(_GLF_IDENTITY((~ (1u)), ((~ (1u))) >> (0u >> _GLF_IDENTITY(_GLF_IDENTITY(uint(3u), (uint(3u)) << 0u), uint(3u)))), _GLF_IDENTITY((~ (1u)), max((~ (1u)), (~ (1u))))))))))), 0u, 1u, 1u))))))))))))))))).x;
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_GLF_IDENTITY(_injected_loop_counter, _GLF_IDENTITY((_injected_loop_counter) / 1, 0 ^ ((_injected_loop_counter) / 1)))) - (0 >> _GLF_IDENTITY(int(1), int(1)))) < 1); _GLF_IDENTITY(_injected_loop_counter ++, 0 ^ (_injected_loop_counter ++)))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      break;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), (! ((injectionSwitch.x > injectionSwitch.y))) && true)) || false))))))
        {
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = _GLF_IDENTITY(0, 0 ^ (0)); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
            {
             return;
            }
          }
         if(_GLF_DEAD(false))
          continue;
         continue;
        }
       break;
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bvec4(false, true, false, false))))))))
      continue;
     return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch))) / abs(vec2(1.0, 1.0))).y))))
      break;
    }
  }
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_DEAD(false))
  return;
 uint workgroup_base = workgroup_size * workgroup_id;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
  }
 else
  {
  }
 _GLF_struct_replacement_2.GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_base.y = _GLF_IDENTITY(workgroup_base, max(workgroup_base, _GLF_IDENTITY(workgroup_base, (workgroup_base) / 1u)));
 if(_GLF_DEAD(false))
  {
   do
    {
     for(int _injected_loop_counter = (1 & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > (1 ^ 1)); _injected_loop_counter --)
            {
             return;
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
          }
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, (0) / 1)); _injected_loop_counter --)
          {
           return;
          }
        }
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec3(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))))
        break;
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), (injectionSwitch.x > injectionSwitch.y))));
   if(_GLF_DEAD(false))
    return;
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false))))
    return;
   return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(93.17), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(2.5)), bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))).x < injectionSwitch.y)) && (false))))
    return;
  }
 do
  {
   if(_GLF_DEAD(false))
    return;
  }
 while(_GLF_WRAPPED_LOOP(false));
 uint virtual_gid = _GLF_IDENTITY(_GLF_struct_replacement_2.GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_base.y + subgroup_id * subgroup_size + _GLF_struct_replacement_9.subgroup_local_id, (_GLF_struct_replacement_2.GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_base.y + subgroup_id * _GLF_IDENTITY(subgroup_size, (subgroup_size) >> uint(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), clamp(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), injectionSwitch)).x))), _GLF_IDENTITY(float(vec4(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), clamp(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), injectionSwitch)).x))), 1.0, determinant(mat4(determinant(mat2(0.0, 0.0, 0.0, 0.0)), 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0)), 1.0)), mix(float(float(vec4(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), clamp(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), injectionSwitch)).x))), 1.0, determinant(mat4(determinant(mat2(0.0, 0.0, 0.0, 0.0)), 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0)), 1.0))), float(_GLF_FUZZED(6.0)), bool(false)))))) + _GLF_struct_replacement_9.subgroup_local_id) >> uint(_GLF_ZERO(0.0, injectionSwitch.x)));
 for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(2), int(2))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
  {
   for(int _injected_loop_counter = _GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), (_GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), max(int(_GLF_ONE(1.0, injectionSwitch.y)), _GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), int(_GLF_IDENTITY(ivec3(int(_GLF_ONE(1.0, injectionSwitch.y)), 0, 1), (false ? _GLF_FUZZED(ivec3(-45519, 46302, 17916)) : ivec3(int(_GLF_ONE(1.0, injectionSwitch.y)), 0, 1)))))))) - 0); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      break;
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(false))
        return;
      }
     else
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         for(int _injected_loop_counter = ((_GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY(max(_GLF_IDENTITY(1, (1) + 0), 1), (false ? _GLF_FUZZED((-41267 ^ _injected_loop_counter)) : max(_GLF_IDENTITY(1, (1) + 0), 1)))) << _GLF_IDENTITY(int(5), int(5)), (1 << _GLF_IDENTITY(int(5), int(5))) ^ 0)) >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), ~ (~ (int(5)))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, bool(bvec4(_GLF_IDENTITY(true, false || (true)), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))))))), bool(bool(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_IF_TRUE(true)), ! (! (! (_GLF_WRAPPED_IF_TRUE(true)))))))))))
              {
               return;
              }
             else
              {
               if(_GLF_DEAD(false))
                return;
              }
            }
          }
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
          {
           for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), ~ (~ (int(6)))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (_GLF_IDENTITY(_GLF_IDENTITY((0 << _GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), (_GLF_IDENTITY(int(6), int(6))) << 0)), int(int(_GLF_IDENTITY((0 << _GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), (_GLF_IDENTITY(int(6), int(6))) << 0)), ((0 << _GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), (_GLF_IDENTITY(int(6), int(6))) << 0))) / 1)))) | 0, ((0 << _GLF_IDENTITY(int(6), int(6))) | 0) / 1))); _injected_loop_counter --)
            {
             return;
             if(_GLF_DEAD(false))
              continue;
            }
           if(_GLF_DEAD(false))
            return;
          }
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               return;
              }
            }
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
    }
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   do
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0) > injectionSwitch.y)), bool(bool(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))).y)))))))))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          return;
         return;
        }
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   do
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(false))
        continue;
       return;
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   do
    {
     return;
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, false || (false))));
  }
 uint next_virtual_gid = _GLF_struct_replacement_2.GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_base.y + subgroup_id * _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (subgroup_size) ^ 0u), max(subgroup_size, _GLF_IDENTITY(subgroup_size, ~ (~ (subgroup_size))))), 0u | (_GLF_IDENTITY(subgroup_size, max(subgroup_size, _GLF_IDENTITY(subgroup_size, ~ (~ (subgroup_size))))))) + ((_GLF_IDENTITY(_GLF_struct_replacement_9.subgroup_local_id, max(_GLF_struct_replacement_9.subgroup_local_id, _GLF_struct_replacement_9.subgroup_local_id)) + 1) % subgroup_size);
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   return;
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
    }
  }
 do
  {
   if(_GLF_DEAD(false))
    continue;
   do
    {
     _GLF_struct_replacement_2.GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_base.x = next_virtual_gid;
     if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_GLF_DEAD(false), true, true), bvec3(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(_GLF_DEAD(false), true, true), bvec3(bvec4(bvec3(_GLF_DEAD(false), true, true), true))), bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_DEAD(false), true, true), bvec3(bvec4(bvec3(_GLF_DEAD(false), true, true), true))), false))))))), ! (! (bool(bvec3(_GLF_DEAD(false), true, true)))))))
      {
       if(_GLF_DEAD(false))
        return;
       continue;
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(_GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-5.6)), float(1.0), bool(true))), _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), 1.0)), 1.0)))), (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(_GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-5.6)), float(1.0), bool(true))), _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), 1.0)), 1.0))))) - vec2(0.0, 0.0)).x > injectionSwitch.y))));
  }
 while(_GLF_WRAPPED_LOOP(false));
 do
  {
   do
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            continue;
          }
         else
          {
           return;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
          }
        }
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
        {
         do
          {
           return;
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
        return;
       if(_GLF_DEAD(false))
        break;
      }
     if(_GLF_DEAD(false))
      return;
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
 while(_GLF_WRAPPED_LOOP(false));
 buf[virtual_gid] = 1;
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY((true ? injectionSwitch.x : _GLF_FUZZED(739.930)), ((true ? injectionSwitch.x : _GLF_FUZZED(739.930))) / 1.0)), mix(float(_GLF_FUZZED((_GLF_IDENTITY(- 4.8, clamp(- 4.8, _GLF_IDENTITY(- 4.8, 0.0 + (- 4.8)), - 4.8))))), float(injectionSwitch.x), bool(true))))) > injectionSwitch.y, bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED((- 4.8))), float(injectionSwitch.x), bool(true))))) > injectionSwitch.y, bool(bool(_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED((- 4.8))), float(injectionSwitch.x), bool(true)))), _GLF_IDENTITY(float(_GLF_IDENTITY(_GLF_IDENTITY(mat2(max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED((- 4.8))), float(injectionSwitch.x), bool(true)))), 0.0, 1.0, 0.0), (true ? mat2(max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED((- 4.8))), float(injectionSwitch.x), bool(true)))), 0.0, 1.0, 0.0) : _GLF_FUZZED(mat2(248.981, -8229.2793, 3.3, 9.6)))), (mat2(max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED((- 4.8))), float(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).x), bool(true)))), 0.0, 1.0, 0.0)) - mat2(0.0, 0.0, 0.0, 0.0))), (_GLF_IDENTITY(float(_GLF_IDENTITY(mat2(max(injectionSwitch.x, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), mix(float(_GLF_FUZZED(_GLF_IDENTITY((- 4.8), float(vec4((- 4.8), 1.0, sqrt(tan(0.0)), _GLF_IDENTITY(dot(vec3(1.0, 1.0, 1.0), vec3(0.0, 0.0, tan(0.0))), dot(vec3(1.0, 1.0, 1.0), vec3(0.0, 0.0, tan(0.0))))))))), float(injectionSwitch.x), bool(true)))), 0.0, 1.0, 0.0), (mat2(max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED((- 4.8))), float(injectionSwitch.x), bool(true)))), 0.0, 1.0, 0.0)) - mat2(0.0, 0.0, 0.0, 0.0))), float(mat2x4(float(_GLF_IDENTITY(mat2(max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED((- 4.8))), float(injectionSwitch.x), bool(true)))), 0.0, 1.0, 0.0), (_GLF_IDENTITY(mat2(max(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-1046.4523)), float(injectionSwitch.x), bool(true))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat3x2(injectionSwitch, 0.0, 0.0, 0.0, cos(0.0)))).x, mix(_GLF_IDENTITY(float(_GLF_FUZZED((- 4.8))), (float(_GLF_FUZZED((- 4.8)))) / 1.0), float(injectionSwitch.x), bool(true)))), 0.0, 1.0, 0.0), mat2(mat4x2(mat2(max(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-1046.4523)), float(injectionSwitch.x), bool(true))), _GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED((- 4.8))), float(injectionSwitch.x), bool(true)))), 0.0, 1.0, 0.0))))) - mat2(0.0, 0.0, 0.0, 0.0))), _GLF_IDENTITY(0.0, max(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), 0.0)), 0.0, 1.0, 1.0, 0.0, 1.0, 0.0)))) - 0.0))) > injectionSwitch.y))), true, false, _GLF_IDENTITY(true, bool(bvec3(true, true, true))))))), ((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED((- 4.8))), float(injectionSwitch.x), bool(true))), max(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED((- 4.8))), float(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x), bool(true))), _GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED((- _GLF_IDENTITY(4.8, _GLF_IDENTITY(float(vec4(4.8, 1.0, 1.0, 1.0)), (float(vec4(4.8, 1.0, 1.0, 1.0))) - log(1.0)))))), float(injectionSwitch.x), bool(true))))))) > injectionSwitch.y, bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED((- 4.8))), float(injectionSwitch.x), bool(true))))) > injectionSwitch.y, bool(bool(_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED((- 4.8))), float(injectionSwitch.x), bool(true)))), _GLF_IDENTITY(float(_GLF_IDENTITY(mat2(max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, mix(_GLF_IDENTITY(float(_GLF_FUZZED((- 4.8))), clamp(float(_GLF_FUZZED((- 4.8))), float(_GLF_FUZZED((- 4.8))), _GLF_IDENTITY(float(_GLF_FUZZED((- 4.8))), min(float(_GLF_FUZZED((- 4.8))), float(_GLF_FUZZED((- 4.8))))))), float(injectionSwitch.x), bool(true)))), 0.0, 1.0, 0.0), (mat2(max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED((- 4.8))), float(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).x), bool(true)))), 0.0, 1.0, 0.0)) - mat2(0.0, 0.0, 0.0, 0.0))), (_GLF_IDENTITY(float(_GLF_IDENTITY(mat2(max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(mix(float(_GLF_FUZZED((- 4.8))), float(injectionSwitch.x), bool(true)), (false ? _GLF_IDENTITY(_GLF_FUZZED(-4639.0911), (false ? _GLF_FUZZED(9468.4330) : _GLF_IDENTITY(_GLF_FUZZED(-4639.0911), min(_GLF_FUZZED(-4639.0911), _GLF_FUZZED(-4639.0911))))) : _GLF_IDENTITY(mix(float(_GLF_FUZZED((- 4.8))), float(injectionSwitch.x), bool(true)), float(_GLF_IDENTITY(mat2x3(mix(float(_GLF_FUZZED((- 4.8))), float(injectionSwitch.x), bool(true)), 0.0, 1.0, exp(0.0), 1.0, 1.0), (mat2x3(mix(float(_GLF_FUZZED((- 4.8))), float(injectionSwitch.x), bool(true)), 0.0, 1.0, exp(0.0), 1.0, 1.0)) + mat2x3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))))))), 0.0, 1.0, 0.0), (mat2(max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED((- 4.8))), float(injectionSwitch.x), bool(true)))), 0.0, 1.0, 0.0)) - mat2(0.0, 0.0, 0.0, 0.0))), float(mat2x4(_GLF_IDENTITY(float(_GLF_IDENTITY(mat2(max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED((- 4.8))), float(injectionSwitch.x), bool(true)))), 0.0, 1.0, 0.0), (mat2(max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED((- 4.8))), float(injectionSwitch.x), bool(true)))), 0.0, 1.0, 0.0)) - mat2(0.0, 0.0, 0.0, 0.0))), _GLF_IDENTITY(float(_GLF_IDENTITY(vec2(float(_GLF_IDENTITY(mat2(max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED((- 4.8))), float(injectionSwitch.x), bool(true)))), 0.0, 1.0, 0.0), (mat2(max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED((- 4.8))), float(injectionSwitch.x), bool(true)))), 0.0, 1.0, 0.0)) - mat2(0.0, 0.0, 0.0, 0.0))), sqrt(0.0)), _GLF_IDENTITY((vec2(float(_GLF_IDENTITY(mat2(max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED((- 4.8))), float(injectionSwitch.x), bool(true)))), 0.0, 1.0, 0.0), (mat2(max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED((- 4.8))), float(injectionSwitch.x), bool(true)))), 0.0, 1.0, 0.0)) - mat2(0.0, 0.0, 0.0, 0.0))), sqrt(0.0))) * mat2(1.0), vec2(mat3((vec2(float(_GLF_IDENTITY(mat2(max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED((- 4.8))), float(injectionSwitch.x), bool(true)))), 0.0, 1.0, 0.0), (mat2(max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED((- 4.8))), float(injectionSwitch.x), bool(true)))), 0.0, 1.0, 0.0)) - mat2(0.0, 0.0, 0.0, 0.0))), sqrt(0.0))) * mat2(1.0), 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0))))), (_GLF_IDENTITY(float(_GLF_IDENTITY(vec2(float(_GLF_IDENTITY(mat2(max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED((- 4.8))), float(injectionSwitch.x), bool(true)))), 0.0, 1.0, 0.0), (mat2(max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED((- 4.8))), float(injectionSwitch.x), bool(true)))), 0.0, 1.0, 0.0)) - mat2(0.0, 0.0, 0.0, 0.0))), sqrt(0.0)), _GLF_IDENTITY((vec2(float(_GLF_IDENTITY(mat2(max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED((- 4.8))), float(injectionSwitch.x), bool(true)))), 0.0, 1.0, 0.0), (mat2(max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED((- 4.8))), float(injectionSwitch.x), bool(true)))), 0.0, 1.0, 0.0)) - mat2(0.0, 0.0, 0.0, 0.0))), sqrt(0.0))) * mat2(1.0), vec2(mat3((vec2(float(_GLF_IDENTITY(mat2(max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED((- 4.8))), float(injectionSwitch.x), bool(true)))), 0.0, 1.0, 0.0), (mat2(max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED((- 4.8))), float(injectionSwitch.x), bool(true)))), 0.0, 1.0, 0.0)) - mat2(0.0, 0.0, 0.0, 0.0))), sqrt(0.0))) * mat2(1.0), 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0))))), (false ? _GLF_FUZZED(1946.5996) : float(_GLF_IDENTITY(vec2(float(_GLF_IDENTITY(mat2(max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED((- 4.8))), float(injectionSwitch.x), bool(true)))), 0.0, 1.0, 0.0), (mat2(max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED((- 4.8))), float(injectionSwitch.x), bool(true)))), 0.0, 1.0, 0.0)) - mat2(0.0, 0.0, 0.0, 0.0))), sqrt(0.0)), _GLF_IDENTITY((vec2(float(_GLF_IDENTITY(mat2(max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED((- 4.8))), float(injectionSwitch.x), bool(true)))), 0.0, 1.0, 0.0), (mat2(max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED((- 4.8))), float(injectionSwitch.x), bool(true)))), 0.0, 1.0, 0.0)) - mat2(0.0, 0.0, 0.0, 0.0))), sqrt(0.0))) * mat2(1.0), vec2(mat3((vec2(float(_GLF_IDENTITY(mat2(max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED((- 4.8))), float(injectionSwitch.x), bool(true)))), 0.0, 1.0, 0.0), (mat2(max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED((- 4.8))), float(injectionSwitch.x), bool(true)))), 0.0, 1.0, 0.0)) - mat2(0.0, 0.0, 0.0, 0.0))), sqrt(0.0))) * mat2(1.0), 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0)))))))) + 0.0)), _GLF_IDENTITY(0.0, max(_GLF_IDENTITY(0.0, clamp(_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(344.399)), float(0.0), bool(true))), 0.0, 0.0)), 0.0)), 0.0, 1.0, 1.0, 0.0, _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(float(119152u))), float(_GLF_IDENTITY(1.0, max(1.0, 1.0))), bool(true))), 0.0)))) - 0.0))) > injectionSwitch.y))), true, false, true))))) || false))))
  {
   do
    {
     if(_GLF_DEAD(false))
      return;
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       return;
      }
    }
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(_GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, min(0.0, 0.0)), _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)))), injectionSwitch.x))); _GLF_IDENTITY(_injected_loop_counter --, 0 ^ (_injected_loop_counter --)))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
          }
         else
          {
          }
         return;
        }
      }
    }
   for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY((((1 & 1) << _GLF_IDENTITY(_GLF_IDENTITY(int(1), _GLF_IDENTITY((int(1)) | (int(_GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(_injected_loop_counter))))), ((int(1)) | (int(_GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(_injected_loop_counter)))))) | int(_GLF_ZERO(0.0, injectionSwitch.x)))), _GLF_IDENTITY(int(1), (_GLF_IDENTITY(_GLF_IDENTITY(int(1), min(int(1), int(1))), _GLF_IDENTITY(0 | (int(1)), max(0 | (int(1)), 0 | (int(1)))))) / 1))) >> _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), _GLF_IDENTITY((int(1)) | (_GLF_IDENTITY(int(1), ~ (~ (int(_GLF_IDENTITY(1, min(1, _GLF_IDENTITY(1, max(1, 1))))))))), int(_GLF_IDENTITY(_GLF_IDENTITY(ivec4((int(1)) | (_GLF_IDENTITY(int(1), ~ (~ (int(_GLF_IDENTITY(1, min(1, _GLF_IDENTITY(1, max(1, 1))))))))), 0, 0, 0), (ivec4((int(1)) | (_GLF_IDENTITY(int(1), ~ (~ (int(_GLF_IDENTITY(1, min(1, _GLF_IDENTITY(1, max(1, 1))))))))), 0, 0, 0)) | (_GLF_IDENTITY(ivec4((int(1)) | (_GLF_IDENTITY(int(1), ~ (~ (int(_GLF_IDENTITY(1, min(1, _GLF_IDENTITY(1, max(1, 1))))))))), 0, 0, 0), (ivec4(1, 1, 1, _GLF_IDENTITY(1, max(1, 1))) & ivec4(1, 1, 1, 1)) * (ivec4(_GLF_IDENTITY((int(1)) | (_GLF_IDENTITY(int(1), ~ (~ (int(_GLF_IDENTITY(1, min(1, _GLF_IDENTITY(1, max(1, 1))))))))), clamp(_GLF_IDENTITY((int(1)) | (_GLF_IDENTITY(int(1), ~ (~ (int(_GLF_IDENTITY(1, min(1, _GLF_IDENTITY(1, max(1, 1))))))))), ((int(1)) | (_GLF_IDENTITY(int(1), ~ (~ (int(_GLF_IDENTITY(1, min(1, _GLF_IDENTITY(1, max(1, 1)))))))))) ^ 0), (int(1)) | (_GLF_IDENTITY(int(1), ~ (~ (int(_GLF_IDENTITY(1, min(1, _GLF_IDENTITY(1, max(1, 1))))))))), (int(1)) | (_GLF_IDENTITY(int(1), ~ (~ (int(_GLF_IDENTITY(1, min(1, _GLF_IDENTITY(1, max(1, 1))))))))))), 0, 0, 0))))), (ivec4((int(1)) | (_GLF_IDENTITY(int(1), ~ (~ (int(_GLF_IDENTITY(1, min(_GLF_IDENTITY(1, 1 * (1)), _GLF_IDENTITY(1, max(1, 1))))))))), 0, 0, 0)) - ivec4(0, 0, 0, 0))))))), _GLF_IDENTITY(((((1 & 1) << _GLF_IDENTITY(_GLF_IDENTITY(int(1), (int(1)) | (int(_GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(_injected_loop_counter)))))), _GLF_IDENTITY(int(1), (_GLF_IDENTITY(_GLF_IDENTITY(int(1), min(int(1), int(1))), 0 | (int(1)))) / 1))) >> _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), _GLF_IDENTITY((int(1)) | (_GLF_IDENTITY(int(1), ~ (~ (int(_GLF_IDENTITY(1, min(1, _GLF_IDENTITY(_GLF_IDENTITY(1, max(1, 1)), max(1, 1))))))))), int(_GLF_IDENTITY(_GLF_IDENTITY(ivec4((int(1)) | (_GLF_IDENTITY(int(1), ~ (~ (int(_GLF_IDENTITY(1, min(1, _GLF_IDENTITY(1, max(1, 1))))))))), 0, 0, 0), (ivec4((int(1)) | (_GLF_IDENTITY(int(1), _GLF_IDENTITY(~ (~ (int(_GLF_IDENTITY(1, min(1, _GLF_IDENTITY(1, max(1, 1))))))), (_GLF_IDENTITY(~ (~ (int(_GLF_IDENTITY(1, min(1, _GLF_IDENTITY(1, max(1, 1))))))), (~ (~ (int(_GLF_IDENTITY(1, min(1, _GLF_IDENTITY(1, max(1, 1)))))))) >> 0)) >> 0))), 0, 0, 0)) | (_GLF_IDENTITY(ivec4((int(1)) | _GLF_IDENTITY((_GLF_IDENTITY(int(1), ~ (~ (int(_GLF_IDENTITY(1, min(1, _GLF_IDENTITY(1, max(1, 1))))))))), max(_GLF_IDENTITY((_GLF_IDENTITY(int(1), ~ (~ (int(_GLF_IDENTITY(1, min(1, _GLF_IDENTITY(1, max(1, 1))))))))), (false ? _GLF_FUZZED((- 58145)) : (_GLF_IDENTITY(int(1), ~ (~ (int(_GLF_IDENTITY(1, min(1, _GLF_IDENTITY(1, max(1, 1))))))))))), (_GLF_IDENTITY(int(1), ~ (~ (int(_GLF_IDENTITY(1, min(1, _GLF_IDENTITY(1, max(1, 1))))))))))), 0, 0, 0), (ivec4(1, 1, 1, 1) & ivec4(1, 1, 1, 1)) * (ivec4((int(1)) | (_GLF_IDENTITY(int(1), ~ (~ (_GLF_IDENTITY(int(_GLF_IDENTITY(1, min(1, _GLF_IDENTITY(1, max(1, 1))))), min(_GLF_IDENTITY(int(_GLF_IDENTITY(1, min(1, _GLF_IDENTITY(1, max(1, 1))))), int(ivec4(int(_GLF_IDENTITY(1, min(1, _GLF_IDENTITY(1, max(1, 1))))), 0, 0, 0))), _GLF_IDENTITY(int(_GLF_IDENTITY(1, min(1, _GLF_IDENTITY(1, max(1, 1))))), ~ (~ (int(_GLF_IDENTITY(1, min(1, _GLF_IDENTITY(1, max(1, 1)))))))))))))), 0, 0, 0))))), (ivec4((int(1)) | (_GLF_IDENTITY(int(1), ~ (~ (int(_GLF_IDENTITY(1, min(1, _GLF_IDENTITY(1, max(1, 1))))))))), 0, 0, 0)) - ivec4(0, 0, 0, 0)))))))), int(_GLF_IDENTITY(int(((((1 & 1) << _GLF_IDENTITY(_GLF_IDENTITY(int(1), (int(1)) | (int(_GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(_injected_loop_counter)))))), _GLF_IDENTITY(int(1), (_GLF_IDENTITY(_GLF_IDENTITY(int(1), min(int(1), int(1))), 0 | (int(1)))) / 1))) >> _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), _GLF_IDENTITY((int(1)) | (_GLF_IDENTITY(int(1), ~ (~ (int(_GLF_IDENTITY(1, min(1, _GLF_IDENTITY(_GLF_IDENTITY(1, max(1, 1)), max(1, 1))))))))), int(_GLF_IDENTITY(_GLF_IDENTITY(ivec4((int(1)) | (_GLF_IDENTITY(int(1), ~ (~ (int(_GLF_IDENTITY(1, min(1, _GLF_IDENTITY(1, max(1, 1))))))))), 0, 0, 0), (ivec4((int(1)) | (_GLF_IDENTITY(int(1), ~ (~ (int(_GLF_IDENTITY(_GLF_IDENTITY(1, min(1, _GLF_IDENTITY(1, max(1, 1)))), min(_GLF_IDENTITY(1, min(1, _GLF_IDENTITY(1, max(1, 1)))), _GLF_IDENTITY(1, min(1, _GLF_IDENTITY(1, max(1, 1))))))))))), 0, 0, 0)) | (_GLF_IDENTITY(ivec4((int(1)) | (_GLF_IDENTITY(int(1), ~ (~ (int(_GLF_IDENTITY(1, min(1, _GLF_IDENTITY(1, max(1, 1))))))))), 0, 0, 0), (ivec4(1, 1, _GLF_IDENTITY(1, (false ? _GLF_FUZZED(((_injected_loop_counter))) : _GLF_IDENTITY(1, 0 | (1)))), 1) & ivec4(1, 1, 1, 1)) * (ivec4((int(1)) | (_GLF_IDENTITY(int(1), ~ (~ (_GLF_IDENTITY(int(_GLF_IDENTITY(1, min(1, _GLF_IDENTITY(1, max(1, 1))))), min(_GLF_IDENTITY(int(_GLF_IDENTITY(1, min(1, _GLF_IDENTITY(1, max(1, 1))))), int(ivec4(int(_GLF_IDENTITY(1, min(1, _GLF_IDENTITY(1, max(1, 1))))), 0, 0, 0))), _GLF_IDENTITY(int(_GLF_IDENTITY(1, min(1, _GLF_IDENTITY(1, max(1, 1))))), ~ (~ (int(_GLF_IDENTITY(1, min(1, _GLF_IDENTITY(1, max(1, 1)))))))))))))), 0, 0, 0))))), (ivec4((int(1)) | (_GLF_IDENTITY(int(1), ~ (~ (int(_GLF_IDENTITY(1, min(1, _GLF_IDENTITY(1, max(1, 1))))))))), 0, 0, 0)) - ivec4(0, 0, 0, 0))))))))), (int(((((1 & 1) << _GLF_IDENTITY(_GLF_IDENTITY(int(1), (int(1)) | (_GLF_IDENTITY(int(_GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(_injected_loop_counter)))), clamp(int(_GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(_injected_loop_counter)))), int(_GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(_injected_loop_counter)))), int(_GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(_injected_loop_counter)))))))), _GLF_IDENTITY(int(1), (_GLF_IDENTITY(_GLF_IDENTITY(int(1), min(int(1), int(1))), 0 | (int(1)))) / 1))) >> _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), _GLF_IDENTITY((int(1)) | (_GLF_IDENTITY(int(1), ~ (~ (int(_GLF_IDENTITY(1, min(1, _GLF_IDENTITY(_GLF_IDENTITY(1, max(1, 1)), max(1, 1))))))))), int(_GLF_IDENTITY(_GLF_IDENTITY(ivec4((int(1)) | (_GLF_IDENTITY(int(1), ~ (~ (int(_GLF_IDENTITY(1, min(_GLF_IDENTITY(1, (1) / 1), _GLF_IDENTITY(1, max(1, 1))))))))), 0, 0, 0), _GLF_IDENTITY((ivec4((int(1)) | (_GLF_IDENTITY(int(1), ~ (~ (int(_GLF_IDENTITY(1, min(1, _GLF_IDENTITY(1, max(1, 1))))))))), 0, 0, 0)), (false ? _GLF_FUZZED(ivec4(-18671, 71707, -87203, 67442)) : (ivec4((int(1)) | (_GLF_IDENTITY(int(1), ~ (~ (int(_GLF_IDENTITY(1, min(1, _GLF_IDENTITY(1, max(1, 1))))))))), 0, 0, 0)))) | (_GLF_IDENTITY(ivec4((int(1)) | (_GLF_IDENTITY(int(1), ~ (~ (int(_GLF_IDENTITY(1, min(1, _GLF_IDENTITY(1, max(1, 1))))))))), 0, 0, 0), (ivec4(1, 1, 1, 1) & ivec4(1, 1, 1, 1)) * (ivec4((int(1)) | (_GLF_IDENTITY(int(1), ~ (~ (_GLF_IDENTITY(int(_GLF_IDENTITY(1, min(1, _GLF_IDENTITY(1, max(1, 1))))), min(_GLF_IDENTITY(int(_GLF_IDENTITY(1, min(1, _GLF_IDENTITY(1, max(1, 1))))), int(ivec4(int(_GLF_IDENTITY(1, min(1, _GLF_IDENTITY(1, max(1, 1))))), 0, 0, 0))), _GLF_IDENTITY(int(_GLF_IDENTITY(1, min(1, _GLF_IDENTITY(1, max(1, 1))))), ~ (~ (int(_GLF_IDENTITY(1, min(1, _GLF_IDENTITY(1, max(1, 1)))))))))))))), 0, 0, 0))))), (ivec4((int(1)) | (_GLF_IDENTITY(int(1), ~ (~ (int(_GLF_IDENTITY(1, min(1, _GLF_IDENTITY(1, max(1, 1))))))))), 0, 0, 0)) - ivec4(0, 0, 0, _GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) | (0))) | (0)))))))))))) - 0))) | 0)); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x)))) > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       else
        {
         do
          {
           return;
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (int(5)) | (int(5)))))); _injected_loop_counter --)
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, false || _GLF_IDENTITY((false), bool(_GLF_IDENTITY(bvec2((false), true), bvec2(bvec4(bvec2((false), true), true, true))))))))
        return;
      }
     do
      {
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         continue;
        }
       do
        {
         do
          {
           return;
          }
         while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))));
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_DEAD(false))
            continue;
           return;
           if(_GLF_DEAD(false))
            continue;
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (_GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(vec3(injectionSwitch.x, 0.0, round(length(normalize(vec2(1.0, 1.0))))), max(vec3(injectionSwitch.x, 0.0, round(length(normalize(vec2(1.0, 1.0))))), vec3(injectionSwitch.x, 0.0, round(length(normalize(vec2(1.0, 1.0))))))))) > injectionSwitch.y))));
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-5969.0604, 8161.0060)) : injectionSwitch)).x > injectionSwitch.y))), _GLF_IDENTITY((_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y)))))), bool(bool(_GLF_IDENTITY((_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (! ((_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))) || false));
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
      return;
    }
   for(int _injected_loop_counter = ((1 | 0) & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          break;
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             return;
             if(_GLF_DEAD(false))
              break;
            }
          }
        }
       else
        {
        }
      }
     else
      {
      }
    }
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      return;
     do
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (true)))))
        {
         do
          {
           if(_GLF_DEAD(false))
            return;
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec4(! (false), true, false, true))))))), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! _GLF_IDENTITY((_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), true && (! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch))) - vec2(0.0, 0.0)).y)))), ! (! ((_GLF_IDENTITY(! _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y))), true && (! (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), ((injectionSwitch) * mat2(1.0)) - vec2(0.0, 0.0))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])))), (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)), clamp(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)), max(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)), _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, (false) || false), true), bvec2(bvec2(bvec2(_GLF_IDENTITY(false, (false) || false), true))))), (bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, (false) || false), true), bvec2(bvec2(bvec2(_GLF_IDENTITY(false, (false) || false), true)))))) && true)) ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)), min(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)), vec2(mat4x3(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(false, (false) && true) ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)), 0.0, _GLF_IDENTITY(1.0, 1.0 * (1.0)), 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0)))))))) - vec2(0.0, 0.0)).y))))))))))))
          return;
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)), bool(_GLF_IDENTITY(bool(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false))), ! (! (_GLF_IDENTITY(bool(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false))), (bool(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))) && true)))))))
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             return;
            }
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              continue;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
            }
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
              {
               if(_GLF_DEAD(false))
                return;
               return;
              }
            }
           return;
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           return;
          }
         if(_GLF_DEAD(false))
          return;
         if(_GLF_IDENTITY(_GLF_struct_replacement_9.subgroup_local_id, (_GLF_IDENTITY(_GLF_struct_replacement_9.subgroup_local_id, (_GLF_IDENTITY(_GLF_struct_replacement_9.subgroup_local_id, min(_GLF_struct_replacement_9.subgroup_local_id, _GLF_struct_replacement_9.subgroup_local_id))) * 1u)) ^ 0u) + 1 < _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (subgroup_size) | (subgroup_size)), 0u + (subgroup_size)))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                break;
               return;
              }
             return;
            }
           if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, _GLF_IDENTITY(true, true && (true)) && (false)), true, false)))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true))))
              {
               if(_GLF_DEAD(false))
                break;
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  continue;
                 return;
                }
               else
                {
                }
              }
             if(_GLF_DEAD(false))
              continue;
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               return;
               if(_GLF_DEAD(false))
                return;
              }
             else
              {
               if(_GLF_DEAD(false))
                continue;
              }
            }
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
              {
               return;
              }
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              return;
             if(_GLF_DEAD(false))
              break;
             return;
            }
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              continue;
            }
           else
            {
             do
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                 if(_GLF_DEAD(false))
                  continue;
                }
               else
                {
                 do
                  {
                   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), (_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), false || (_GLF_IDENTITY(false, false || (false))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))
                    {
                     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, _GLF_IDENTITY(true, ! (! (true))) && (false))), _GLF_IDENTITY(! (! (! (_GLF_IDENTITY(false, true && (false))))), _GLF_IDENTITY(bool(bool(! (! (! (_GLF_IDENTITY(false, true && (false))))))), true && (bool(bool(! (! (! (_GLF_IDENTITY(false, true && (false)))))))))))))))
                      return;
                     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                      {
                       return;
                      }
                    }
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
               if(_GLF_DEAD(false))
                continue;
               do
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  break;
                 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))))
                  {
                   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      break;
                     if(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, ! (! (false)))))))
                      continue;
                     return;
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_DEAD(false))
                        return;
                       continue;
                      }
                    }
                  }
                }
               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
               if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, false, true)))))
                {
                 if(_GLF_DEAD(false))
                  continue;
                 continue;
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           do
            {
             if(_GLF_DEAD(false))
              {
               do
                {
                 return;
                }
               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
              }
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
           int i = 0;
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
              {
               return;
              }
            }
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (_GLF_IDENTITY(_GLF_IDENTITY(0, clamp(0, 0, 0)) | (0 ^ 0), _GLF_IDENTITY(clamp(0 | (0 ^ 0), 0 | (0 ^ 0), _GLF_IDENTITY(0 | (0 ^ 0), int(ivec2(0 | (0 ^ 0), _GLF_IDENTITY(1, (1) | 0))))), (2092 & 0) | (clamp(0 | (0 ^ 0), 0 | (_GLF_IDENTITY(0, (_GLF_IDENTITY(0, min(0, 0))) << 0) ^ 0), _GLF_IDENTITY(0 | (_GLF_IDENTITY(0 ^ 0, 0 | (0 ^ 0))), int(ivec2(0 | (0 ^ 0), 1))))))))); _injected_loop_counter --)
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-65.68)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) > injectionSwitch.y))))
                {
                 if(_GLF_DEAD(false))
                  break;
                 continue;
                }
               atomicStore(buf[_GLF_struct_replacement_2.GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_base.x], uint(2), 4, 64, 4);
               if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, _GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(1213.7340), _GLF_FUZZED(3060.6119)), vec2(_GLF_IDENTITY((injectionSwitch)[0], max((injectionSwitch)[0], (injectionSwitch)[0])), (injectionSwitch)[1]), bvec2(true, true))).x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y)))), false)))))
                break;
              }
             if(_GLF_DEAD(false))
              return;
            }
           else
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              continue;
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               for(int _injected_loop_counter = (_GLF_IDENTITY((87469 & 0), int(int(_GLF_IDENTITY((87469 & 0), max((87469 & 0), (87469 & 0)))))) ^ int(_GLF_ONE(_GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat2x4(1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0)), (float(mat2x4(1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0))) / 1.0)), _GLF_IDENTITY(1.0, (1.0) - abs(0.0)))), injectionSwitch.y))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  continue;
                 if(_GLF_DEAD(false))
                  continue;
                 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(-7.7))), injectionSwitch.x, injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(_GLF_FUZZED(2.2), mix(float(_GLF_FUZZED(81.02)), float(_GLF_FUZZED(2.2)), bool(true)))), float(injectionSwitch.x), bool(true))), injectionSwitch.x)) > injectionSwitch.y))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), false || (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), false || (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) && true))
                  continue;
                 for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                  {
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      break;
                     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, false)))))
                      {
                       if(_GLF_DEAD(false))
                        return;
                       if(_GLF_DEAD(false))
                        break;
                       if(_GLF_DEAD(false))
                        continue;
                       if(_GLF_DEAD(false))
                        continue;
                       if(_GLF_DEAD(false))
                        {
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          {
                           if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), bool(bvec4(bool(bool(false)), false, true, false)))), (injectionSwitch.x > injectionSwitch.y))))
                            break;
                           return;
                          }
                         return;
                        }
                       if(_GLF_DEAD(false))
                        break;
                       return;
                       if(_GLF_DEAD(false))
                        return;
                      }
                    }
                  }
                }
               if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
                break;
              }
             else
              {
               if(_GLF_DEAD(false))
                continue;
              }
             if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false))))
              return;
             do
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  return;
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != 0, true && (_injected_loop_counter != 0))); _injected_loop_counter --)
                      {
                       return;
                      }
                    }
                  }
                }
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
             return;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
             if(_GLF_DEAD(false))
              break;
            }
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
                  return;
                 if(_GLF_DEAD(false))
                  return;
                }
               else
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
                  return;
                }
               return;
              }
             else
              {
              }
            }
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              continue;
             return;
            }
           atomicStore(buf[_GLF_struct_replacement_2.GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_base.x], uint(2), 4, _GLF_IDENTITY(64, (0 << _GLF_IDENTITY(int(3), int(3))) ^ (64)), 4);
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              {
               do
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  return;
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  return;
                 if(_GLF_DEAD(false))
                  return;
                }
               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
               return;
              }
             return;
             if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))), false))))))))))
              return;
            }
          }
        }
       else
        {
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   else
    {
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 else
  {
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
