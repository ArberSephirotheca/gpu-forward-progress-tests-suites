#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
  {
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec4(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, false, false))))
    {
     for(int _injected_loop_counter = 0; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1)) || false); _injected_loop_counter ++)
      {
       barrier();
      }
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   do
    {
     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), ! (! (_GLF_WRAPPED_IF_FALSE(false)))))
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
       do
        {
         if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
                {
                 barrier();
                }
              }
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
            }
           if(_GLF_DEAD(false))
            barrier();
           barrier();
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
            }
          }
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 else
  {
  }
 uvec2 GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size;
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) || false)))
  barrier();
 uint subgroup_size = gl_SubgroupSize;
 do
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, false, _GLF_IDENTITY(true, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec2(bvec4(bvec2(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, _GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (injectionSwitch.x > injectionSwitch.y)))))), bool(bvec3(bool(_GLF_IDENTITY(bvec2(true, _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec3(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(true, bool(bvec2(_GLF_IDENTITY(true, bool(bvec3(true, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), false))), true)))))), bvec2(bvec4(bvec2(true, _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), false, true)))))))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false)), bool(bvec3(! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false)), false, _GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) || false))))))))))))
          {
          }
         else
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bvec2(_GLF_IDENTITY(true, (true) || _GLF_IDENTITY(false, ! (! (false)))), true)))))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               barrier();
              }
             else
              {
              }
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
              }
             else
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, false)), false || (bool(bvec2(false, false)))))))
                barrier();
              }
            }
           else
            {
            }
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false)))), false || (_GLF_DEAD(false))))
        barrier();
       barrier();
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)), _GLF_IDENTITY(bool(bvec2(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)), _GLF_IDENTITY(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ((injectionSwitch.x < injectionSwitch.y)) || false)) || false)), ! (_GLF_IDENTITY(! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))), bool(bvec4(bool(bvec2(_GLF_DEAD(_GLF_IDENTITY(false, (false) || _GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, bool(bvec2(false, false))))))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), true, _GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec4(true, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)), ! (! (_GLF_IDENTITY(bool(bvec4(true, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(true, ! (! (true))))), ! (! (bool(bvec4(true, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))))))))), true)))))
            {
             do
              {
               if(_GLF_DEAD(false))
                barrier();
              }
             while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))));
             barrier();
            }
          }
        }
      }
    }
   else
    {
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bvec4(true, false, false, false)))))
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
      }
    }
   else
    {
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(! (! (_GLF_DEAD(false))), true && (! (! (_GLF_DEAD(false)))))))
    barrier();
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 do
  {
   GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x = subgroup_local_id;
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = (0 | 0); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(1, min(1, 1))), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(1, min(1, 1)))))); _injected_loop_counter ++)
    {
     barrier();
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < ((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6)))); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))), true && (! (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))))))), true)))) && true))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     barrier();
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
  {
   for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(_GLF_IDENTITY(5, (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y)))) ? _GLF_FUZZED(ivec3(95971, 96705, 42686).r) : 5))), int(5))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) ^ 0))
    {
     barrier();
    }
  }
 do
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        }
       barrier();
       if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
        barrier();
      }
     do
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 uint num_workgroup = _GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, uvec3(gl_NumWorkGroups[0], gl_NumWorkGroups[1], _GLF_IDENTITY(gl_NumWorkGroups[2], (_GLF_IDENTITY(gl_NumWorkGroups[2], (gl_NumWorkGroups[2]) - 0u)) ^ 0u))).x, (_GLF_IDENTITY(gl_NumWorkGroups.x, (gl_NumWorkGroups.x) / 1u)) | (gl_NumWorkGroups.x));
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     barrier();
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), true && (_GLF_WRAPPED_IF_TRUE(true)))))))
      {
       barrier();
      }
     else
      {
      }
    }
   for(int _injected_loop_counter = int(_GLF_ONE(_GLF_IDENTITY(1.0, _GLF_IDENTITY((_GLF_IDENTITY(1.0, float(mat2(1.0, 1.0, determinant(mat3(0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), 1.0)))) / 1.0, (_GLF_IDENTITY((_GLF_IDENTITY(1.0, float(_GLF_IDENTITY(mat2(1.0, 1.0, determinant(mat3(0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, (0.0) - 0.0), 0.0)), 1.0), mat2(1.0) * (mat2(1.0, 1.0, determinant(mat3(0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, (0.0) - 0.0), 0.0)), 1.0)))))) / 1.0, clamp((_GLF_IDENTITY(_GLF_IDENTITY(1.0, float(mat2(1.0, 1.0, determinant(mat3(0.0, _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), 1.0))), (_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false)) ? _GLF_FUZZED(-65.58) : _GLF_IDENTITY(1.0, float(mat2(1.0, 1.0, determinant(mat3(0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, min(0.0, 0.0)), 0.0)), 1.0)))))) / _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-0.1)), float(1.0), bool(true))), _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(1.0, float(mat2(1.0, 1.0, determinant(_GLF_IDENTITY(mat3(0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0), _GLF_IDENTITY(_GLF_IDENTITY(mat3(mat4x3(mat3(0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))), transpose(transpose(mat3(mat4x3(mat3(0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))))), mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0) + (mat3(mat4x3(mat3(0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))))))), 1.0)))), max((_GLF_IDENTITY(1.0, float(mat2(1.0, 1.0, determinant(_GLF_IDENTITY(mat3(0.0, 0.0, 1.0, _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(5.4)), float(_GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(-67.41))), _GLF_IDENTITY(0.0, (0.0) / 1.0)))), bool(true))), 0.0, 0.0, 0.0, 0.0, 0.0), _GLF_IDENTITY(mat3(mat4x3(mat3(0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))), mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0) + (mat3(mat4x3(mat3(0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))))))), 1.0)))), (_GLF_IDENTITY(1.0, float(mat2(1.0, 1.0, determinant(_GLF_IDENTITY(mat3(0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0), _GLF_IDENTITY(mat3(mat4x3(mat3(0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))), mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0) + (mat3(mat4x3(mat3(0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))))))), 1.0)))))), min(_GLF_IDENTITY((_GLF_IDENTITY(1.0, float(mat2(1.0, 1.0, determinant(_GLF_IDENTITY(mat3(0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0), _GLF_IDENTITY(_GLF_IDENTITY(mat3(mat4x3(mat3(0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))), transpose(transpose(mat3(mat4x3(mat3(0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))))), mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0) + (mat3(mat4x3(mat3(0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))))))), 1.0)))), max((_GLF_IDENTITY(1.0, float(mat2(1.0, 1.0, determinant(_GLF_IDENTITY(mat3(0.0, 0.0, 1.0, _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(5.4)), float(_GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(-67.41))), _GLF_IDENTITY(0.0, (0.0) / 1.0)))), bool(true))), 0.0, 0.0, 0.0, 0.0, 0.0), _GLF_IDENTITY(mat3(mat4x3(mat3(0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))), mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0) + (mat3(mat4x3(mat3(0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))))))), 1.0)))), (_GLF_IDENTITY(1.0, float(mat2(1.0, 1.0, determinant(_GLF_IDENTITY(mat3(0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0), _GLF_IDENTITY(mat3(mat4x3(mat3(0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))), mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0) + (mat3(mat4x3(mat3(0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))))))), 1.0)))))), _GLF_IDENTITY((_GLF_IDENTITY(1.0, float(mat2(1.0, 1.0, determinant(_GLF_IDENTITY(mat3(0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0), _GLF_IDENTITY(_GLF_IDENTITY(mat3(mat4x3(mat3(0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))), transpose(transpose(mat3(mat4x3(mat3(0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))))), mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0) + (mat3(mat4x3(mat3(0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))))))), 1.0)))), max((_GLF_IDENTITY(1.0, float(mat2(1.0, 1.0, determinant(_GLF_IDENTITY(mat3(0.0, 0.0, 1.0, _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(5.4)), float(_GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(-67.41))), _GLF_IDENTITY(0.0, (0.0) / 1.0)))), bool(true))), 0.0, 0.0, 0.0, 0.0, 0.0), _GLF_IDENTITY(mat3(mat4x3(mat3(0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))), mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0) + (mat3(mat4x3(mat3(0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))))))), 1.0)))), (_GLF_IDENTITY(1.0, float(mat2(1.0, 1.0, determinant(_GLF_IDENTITY(mat3(0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0), _GLF_IDENTITY(mat3(mat4x3(mat3(0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))), mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0) + (mat3(mat4x3(mat3(0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))))))), 1.0)))))))) / 1.0, (_GLF_IDENTITY(1.0, float(_GLF_IDENTITY(mat2(1.0, 1.0, _GLF_IDENTITY(determinant(mat3(0.0, _GLF_IDENTITY(0.0, (0.0) + 0.0), 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), max(_GLF_IDENTITY(determinant(_GLF_IDENTITY(mat3(0.0, _GLF_IDENTITY(0.0, (0.0) + 0.0), 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0), (mat3(0.0, _GLF_IDENTITY(0.0, (0.0) + 0.0), 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)) * mat3(1.0))), clamp(_GLF_IDENTITY(determinant(mat3(0.0, _GLF_IDENTITY(0.0, (0.0) + 0.0), 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), max(_GLF_IDENTITY(determinant(mat3(0.0, _GLF_IDENTITY(0.0, (0.0) + 0.0), 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), max(determinant(mat3(0.0, _GLF_IDENTITY(0.0, (0.0) + 0.0), 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), determinant(mat3(0.0, _GLF_IDENTITY(0.0, (0.0) + 0.0), 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))), _GLF_IDENTITY(determinant(mat3(0.0, _GLF_IDENTITY(0.0, (0.0) + 0.0), 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), clamp(determinant(mat3(0.0, _GLF_IDENTITY(0.0, (0.0) + 0.0), 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), _GLF_IDENTITY(determinant(mat3(0.0, _GLF_IDENTITY(0.0, (0.0) + 0.0), 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), clamp(determinant(mat3(0.0, _GLF_IDENTITY(0.0, (0.0) + 0.0), 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), determinant(mat3(0.0, _GLF_IDENTITY(0.0, (0.0) + 0.0), 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), determinant(mat3(0.0, _GLF_IDENTITY(0.0, (0.0) + 0.0), 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))), determinant(mat3(0.0, _GLF_IDENTITY(0.0, (0.0) + 0.0), 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))))), determinant(mat3(0.0, _GLF_IDENTITY(0.0, (0.0) + 0.0), 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), determinant(mat3(0.0, _GLF_IDENTITY(0.0, (0.0) + 0.0), 1.0, 0.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(23.30))), 0.0)))), determinant(mat3(0.0, _GLF_IDENTITY(0.0, (0.0) + 0.0), 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))), 1.0), mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (mat2(1.0, 1.0, _GLF_IDENTITY(determinant(mat3(0.0, _GLF_IDENTITY(0.0, (0.0) + 0.0), 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), max(_GLF_IDENTITY(determinant(mat3(0.0, _GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, float(mat4(0.0, 0.0, 1.0, 0.0, sin(0.0), sqrt(0.0), 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, determinant(mat2(1.0, 0.0, _GLF_IDENTITY(dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(0.0, 1.0, 1.0, 1.0)), dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(0.0, 1.0, 1.0, 1.0))), 1.0)), 1.0, 1.0)))) + 0.0), 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), clamp(determinant(mat3(0.0, _GLF_IDENTITY(0.0, (0.0) + 0.0), 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), determinant(mat3(0.0, _GLF_IDENTITY(0.0, (0.0) + 0.0), 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), _GLF_IDENTITY(determinant(mat3(0.0, _GLF_IDENTITY(0.0, (0.0) + 0.0), 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), (determinant(mat3(0.0, _GLF_IDENTITY(_GLF_IDENTITY(0.0, float(mat2(0.0, 1.0, 0.0, 1.0))), (0.0) + 0.0), 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))) * 1.0))), determinant(mat3(0.0, _GLF_IDENTITY(0.0, (0.0) + 0.0), 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))), 1.0)))))) / 1.0))) + 0.0)), injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       do
        {
         if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > _GLF_IDENTITY(injectionSwitch.y, 1.0 * (injectionSwitch.y))))))))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
       do
        {
         GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.y = workgroup_size;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 >> _GLF_IDENTITY(int(3), int(3)))); _injected_loop_counter --)
      {
       barrier();
      }
    }
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 uint workgroup_id = _GLF_IDENTITY(gl_WorkGroupID.x, min(gl_WorkGroupID.x, gl_WorkGroupID.x));
 uint workgroup_base = GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.y * workgroup_id;
 uint virtual_gid = _GLF_IDENTITY(workgroup_base, ~ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(~ _GLF_IDENTITY((workgroup_base), max((_GLF_IDENTITY(workgroup_base, max(workgroup_base, workgroup_base))), (workgroup_base))), (_GLF_IDENTITY(false ? _GLF_FUZZED(num_workgroup) : _GLF_IDENTITY(~ _GLF_IDENTITY((workgroup_base), max((workgroup_base), (workgroup_base))), (~ _GLF_IDENTITY((workgroup_base), max((workgroup_base), (workgroup_base)))) | (0u << _GLF_IDENTITY(uint(2u), uint(2u)))), clamp(false ? _GLF_FUZZED(num_workgroup) : _GLF_IDENTITY(~ _GLF_IDENTITY((workgroup_base), max((workgroup_base), (workgroup_base))), (~ _GLF_IDENTITY((workgroup_base), max((workgroup_base), (workgroup_base)))) | (0u << _GLF_IDENTITY(uint(2u), uint(2u)))), false ? _GLF_FUZZED(num_workgroup) : _GLF_IDENTITY(~ _GLF_IDENTITY((workgroup_base), max((workgroup_base), (workgroup_base))), (~ _GLF_IDENTITY((workgroup_base), max((workgroup_base), (workgroup_base)))) | (0u << _GLF_IDENTITY(uint(2u), uint(2u)))), _GLF_IDENTITY(false ? _GLF_FUZZED(num_workgroup) : _GLF_IDENTITY(~ _GLF_IDENTITY((workgroup_base), max((workgroup_base), (workgroup_base))), (~ _GLF_IDENTITY((workgroup_base), max((workgroup_base), (workgroup_base)))) | (0u << _GLF_IDENTITY(uint(2u), uint(2u)))), min(false ? _GLF_FUZZED(num_workgroup) : _GLF_IDENTITY(~ _GLF_IDENTITY((workgroup_base), max((workgroup_base), (workgroup_base))), (~ _GLF_IDENTITY((workgroup_base), max((workgroup_base), (workgroup_base)))) | (0u << _GLF_IDENTITY(uint(2u), uint(2u)))), _GLF_IDENTITY(false ? _GLF_FUZZED(num_workgroup) : _GLF_IDENTITY(~ _GLF_IDENTITY((workgroup_base), max((workgroup_base), (workgroup_base))), (~ _GLF_IDENTITY((workgroup_base), max((workgroup_base), (workgroup_base)))) | (0u << _GLF_IDENTITY(uint(2u), uint(2u)))), max(false ? _GLF_FUZZED(num_workgroup) : _GLF_IDENTITY(~ _GLF_IDENTITY((workgroup_base), max((workgroup_base), (workgroup_base))), (~ _GLF_IDENTITY((workgroup_base), max((workgroup_base), (workgroup_base)))) | (0u << _GLF_IDENTITY(uint(2u), uint(2u)))), false ? _GLF_FUZZED(num_workgroup) : _GLF_IDENTITY(~ _GLF_IDENTITY((workgroup_base), max((workgroup_base), (workgroup_base))), (~ _GLF_IDENTITY((workgroup_base), max((workgroup_base), (workgroup_base)))) | (0u << _GLF_IDENTITY(uint(2u), uint(2u)))))))))))), max(~ (workgroup_base), ~ (workgroup_base))), uint(uvec4(_GLF_IDENTITY(~ _GLF_IDENTITY((workgroup_base), max((workgroup_base), _GLF_IDENTITY((workgroup_base), (false ? _GLF_FUZZED((workgroup_size ++)) : _GLF_IDENTITY((workgroup_base), ((workgroup_base)) / 1u))))), max(~ (workgroup_base), _GLF_IDENTITY(~ (workgroup_base), 0u ^ (_GLF_IDENTITY(~ (workgroup_base), (_GLF_IDENTITY(true, ! (! (true))) ? _GLF_IDENTITY(~ (workgroup_base), (~ (workgroup_base)) | (~ (workgroup_base))) : _GLF_FUZZED(57605u))))))), 0u, _GLF_IDENTITY(0u, clamp(0u, 0u, 0u)), 1u))))) + subgroup_id * subgroup_size + GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x;
 if(_GLF_DEAD(false))
  barrier();
 uint next_virtual_gid = _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, 0u | (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, (workgroup_base) >> 0u), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, (workgroup_base) >> 0u), min(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, (workgroup_base) >> 0u), max(_GLF_IDENTITY(workgroup_base, (workgroup_base) >> 0u), _GLF_IDENTITY(workgroup_base, (workgroup_base) >> 0u))), _GLF_IDENTITY(workgroup_base, (workgroup_base) >> 0u))), (_GLF_IDENTITY(workgroup_base, (workgroup_base) >> _GLF_IDENTITY(0u, min(0u, 0u)))) | (_GLF_IDENTITY(workgroup_base, (workgroup_base) >> 0u)))))))) + _GLF_IDENTITY(subgroup_id * subgroup_size, _GLF_IDENTITY(max(subgroup_id * subgroup_size, subgroup_id * _GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((subgroup_size), min((subgroup_size), _GLF_IDENTITY((subgroup_size), ~ (_GLF_IDENTITY(~ ((subgroup_size)), 0u ^ (~ ((subgroup_size)))))))) * _GLF_IDENTITY(1u, max(1u, 1u)))), (_GLF_IDENTITY(max(subgroup_id * subgroup_size, subgroup_id * _GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((subgroup_size), min((subgroup_size), _GLF_IDENTITY((subgroup_size), ~ (_GLF_IDENTITY(~ ((subgroup_size)), 0u ^ (~ ((subgroup_size)))))))) * _GLF_IDENTITY(1u, max(1u, 1u)))), (max(subgroup_id * subgroup_size, subgroup_id * _GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((subgroup_size), min((subgroup_size), _GLF_IDENTITY((subgroup_size), ~ (_GLF_IDENTITY(~ ((subgroup_size)), 0u ^ (~ ((subgroup_size)))))))) * _GLF_IDENTITY(1u, max(1u, 1u))))) + 0u)) | (max(subgroup_id * subgroup_size, subgroup_id * _GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((subgroup_size), min((subgroup_size), _GLF_IDENTITY((subgroup_size), ~ (_GLF_IDENTITY(~ ((subgroup_size)), 0u ^ (~ ((subgroup_size)))))))) * _GLF_IDENTITY(1u, max(1u, 1u))))))), ~ (~ (_GLF_IDENTITY(workgroup_base, _GLF_IDENTITY(0u | (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, (workgroup_base) >> 0u), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, (workgroup_base) >> 0u), (_GLF_IDENTITY(workgroup_base, (workgroup_base) >> 0u)) | (_GLF_IDENTITY(workgroup_base, (workgroup_base) >> 0u))))))), (0u | (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, (workgroup_base) >> 0u), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, (workgroup_base) >> _GLF_IDENTITY(0u, (0u) ^ 0u)), (_GLF_IDENTITY(workgroup_base, (workgroup_base) >> 0u)) | (_GLF_IDENTITY(workgroup_base, (workgroup_base) >> 0u)))))))) | (0u | (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, (workgroup_base) >> 0u), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, (workgroup_base) >> 0u), (_GLF_IDENTITY(workgroup_base, (workgroup_base) >> 0u)) | (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, max(workgroup_base, workgroup_base)), (workgroup_base) >> 0u)))))))))) + _GLF_IDENTITY(subgroup_id * subgroup_size, max(subgroup_id * subgroup_size, subgroup_id * _GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(_GLF_IDENTITY((subgroup_size), (false ? _GLF_FUZZED(47582u) : (subgroup_size))), min((subgroup_size), _GLF_IDENTITY((subgroup_size), ~ (_GLF_IDENTITY(~ ((subgroup_size)), _GLF_IDENTITY(0u ^ (~ ((subgroup_size))), max(_GLF_IDENTITY(0u ^ (~ ((subgroup_size))), (0u ^ (~ ((subgroup_size)))) | (0u ^ (~ ((subgroup_size))))), 0u ^ (~ ((subgroup_size)))))))))) * _GLF_IDENTITY(1u, max(1u, 1u)))))))) + ((GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x + 1) % subgroup_size);
 buf[virtual_gid] = 1;
 do
  {
   if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x + 1 < subgroup_size, _GLF_IDENTITY(! (! (GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x + 1 < subgroup_size)), (! (! (GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x + 1 < subgroup_size))) || false)), bool(bool(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x + 1 < subgroup_size))), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x + 1 < subgroup_size, ! (! (GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x + 1 < subgroup_size))), bool(bool(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x + 1 < subgroup_size))), false || _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x + 1 < subgroup_size, ! (! (GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x + 1 < subgroup_size))), bool(bool(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x + 1 < subgroup_size)))), ((_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x + 1 < subgroup_size, ! (! (GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x + 1 < subgroup_size))), bool(bool(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x + 1 < subgroup_size))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false), _GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x + 1 < subgroup_size, ! (! (GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x + 1 < subgroup_size))), bool(bool(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x + 1 < subgroup_size))), false || (_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x + 1 < subgroup_size, ! (! (GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x + 1 < subgroup_size))), bool(bool(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x + 1 < subgroup_size))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)), bvec3(bvec4(bvec3(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x + 1 < subgroup_size, ! (! (GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x + 1 < subgroup_size))), bool(bool(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x + 1 < subgroup_size))), false || (_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x + 1 < subgroup_size, ! (! (GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x + 1 < subgroup_size))), bool(bool(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x + 1 < subgroup_size))))), bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x + 1 < subgroup_size, ! (! (GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x + 1 < subgroup_size))), bool(bool(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x + 1 < subgroup_size))), false || (_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x + 1 < subgroup_size, ! (! (GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x + 1 < subgroup_size))), bool(bool(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x + 1 < subgroup_size))))), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)), false)))), bvec3(bvec4(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x + 1 < subgroup_size, ! (! (GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x + 1 < subgroup_size))), bool(bool(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x + _GLF_IDENTITY(1, _GLF_IDENTITY(int(ivec2(1, 0)), (true ? int(ivec2(1, 0)) : _GLF_FUZZED(86)))) < subgroup_size))), false || (_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x + 1 < subgroup_size, ! (! (GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x + 1 < subgroup_size))), bool(bool(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x + 1 < subgroup_size))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)), bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x + 1 < subgroup_size, ! (! (GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x + 1 < subgroup_size))), bool(bool(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x + _GLF_IDENTITY(1, _GLF_IDENTITY(int(ivec2(1, 0)), (true ? int(ivec2(1, 0)) : _GLF_FUZZED(86)))) < subgroup_size))), false || (_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x + 1 < subgroup_size, ! (! (GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x + 1 < subgroup_size))), bool(bool(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x + 1 < subgroup_size))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)), bvec3(bvec3(bvec3(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x + 1 < subgroup_size, ! (! (GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x + 1 < subgroup_size))), bool(bool(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x + _GLF_IDENTITY(1, _GLF_IDENTITY(int(ivec2(1, 0)), (true ? int(ivec2(1, 0)) : _GLF_FUZZED(86)))) < subgroup_size))), false || (_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x + 1 < subgroup_size, ! (! (GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x + 1 < subgroup_size))), bool(bool(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x + 1 < subgroup_size))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)))))))), bvec3(bvec4(_GLF_IDENTITY(bvec3(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x + 1 < subgroup_size, ! (! (GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x + 1 < subgroup_size))), bool(bool(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x + 1 < _GLF_IDENTITY(subgroup_size, (subgroup_size) | 0u)))), false || (_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x + 1 < subgroup_size, ! (! (GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x + 1 < subgroup_size))), bool(bool(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x + 1 < subgroup_size))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)), bvec3(bvec4(bvec3(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x + 1 < subgroup_size, ! (! (GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x + 1 < subgroup_size))), bool(bool(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x + 1 < _GLF_IDENTITY(subgroup_size, (subgroup_size) | 0u)))), false || (_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x + 1 < subgroup_size, ! (! (GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x + 1 < subgroup_size))), bool(bool(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x + 1 < subgroup_size))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)), true))), false)))), true)))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))))))))))
      {
       for(int _injected_loop_counter = ((~ -36574) & _GLF_IDENTITY((_GLF_IDENTITY(60360, min(_GLF_IDENTITY(60360, 0 ^ (_GLF_IDENTITY(60360, clamp(_GLF_IDENTITY(_GLF_IDENTITY(60360, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 60360 : _GLF_FUZZED(-73525))), min(60360, 60360)), 60360, 60360)))), 60360)) & 0), clamp(_GLF_IDENTITY((_GLF_IDENTITY(60360, min(_GLF_IDENTITY(60360, 0 ^ (_GLF_IDENTITY(60360, clamp(_GLF_IDENTITY(_GLF_IDENTITY(60360, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 60360 : _GLF_FUZZED(-73525))), min(60360, 60360)), 60360, 60360)))), 60360)) & 0), 0 | ((_GLF_IDENTITY(60360, min(_GLF_IDENTITY(60360, 0 ^ (_GLF_IDENTITY(60360, clamp(_GLF_IDENTITY(_GLF_IDENTITY(60360, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 60360 : _GLF_FUZZED(-73525))), min(60360, 60360)), 60360, 60360)))), 60360)) & 0))), _GLF_IDENTITY((_GLF_IDENTITY(60360, min(_GLF_IDENTITY(60360, 0 ^ (_GLF_IDENTITY(60360, clamp(_GLF_IDENTITY(_GLF_IDENTITY(60360, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 60360 : _GLF_FUZZED(-73525))), min(60360, 60360)), 60360, 60360)))), 60360)) & 0), (_GLF_IDENTITY((_GLF_IDENTITY(60360, min(_GLF_IDENTITY(60360, 0 ^ (_GLF_IDENTITY(60360, clamp(_GLF_IDENTITY(_GLF_IDENTITY(60360, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 60360 : _GLF_FUZZED(-73525))), min(60360, 60360)), 60360, 60360)))), 60360)) & 0), max((_GLF_IDENTITY(60360, min(_GLF_IDENTITY(60360, 0 ^ (_GLF_IDENTITY(60360, clamp(_GLF_IDENTITY(_GLF_IDENTITY(60360, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 60360 : _GLF_FUZZED(-73525))), min(60360, 60360)), 60360, 60360)))), 60360)) & 0), (_GLF_IDENTITY(60360, min(_GLF_IDENTITY(60360, 0 ^ (_GLF_IDENTITY(60360, clamp(_GLF_IDENTITY(_GLF_IDENTITY(60360, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 60360 : _GLF_FUZZED(-73525))), min(60360, 60360)), 60360, 60360)))), 60360)) & 0)))) * 1), (_GLF_IDENTITY(60360, min(_GLF_IDENTITY(60360, 0 ^ (_GLF_IDENTITY(60360, clamp(_GLF_IDENTITY(_GLF_IDENTITY(60360, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 60360 : _GLF_FUZZED(-73525))), min(60360, 60360)), 60360, 60360)))), 60360)) & 0)))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 | 0)); _injected_loop_counter ++)
        {
         barrier();
         if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))))
          barrier();
        }
      }
     if(_GLF_DEAD(false))
      barrier();
     for(int _injected_loop_counter = (int(_GLF_ZERO(0.0, injectionSwitch.x)) >> _GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), (_GLF_IDENTITY(int(4), int(4))) | (_GLF_IDENTITY(int(4), int(4))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
        barrier();
      }
     if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), false || (! (_GLF_DEAD(false)))))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED((-41.63 + -489.662))), float(injectionSwitch.y), bool(true)))))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, false, true, true)), ! (! (bool(bvec4(false, false, true, true))))))))
          {
           if(_GLF_DEAD(false))
            {
             do
              {
               barrier();
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
            }
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             do
              {
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                {
                 barrier();
                }
              }
             while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, _GLF_IDENTITY((false), true && ((false))) && true)));
            }
           else
            {
            }
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x > injectionSwitch.y))))
          barrier();
        }
       else
        {
        }
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
        }
       else
        {
        }
      }
     int i = 0;
     for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(_GLF_IDENTITY(3, 1 * (3))), int(3))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       do
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           do
            {
             for(int _injected_loop_counter = (1 | int(_GLF_ONE(1.0, injectionSwitch.y))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > (_GLF_IDENTITY(0 << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), 0 ^ (int(5)))), min(0 << _GLF_IDENTITY(int(5), _GLF_IDENTITY(_GLF_IDENTITY(int(5), (int(5)) / 1), 0 ^ (int(_GLF_IDENTITY(5, 0 | (5)))))), 0 << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), 0 ^ (int(5))))))), _GLF_IDENTITY(bool(bool(_injected_loop_counter > (_GLF_IDENTITY(0 << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), 0 ^ (int(5)))), min(0 << _GLF_IDENTITY(int(5), _GLF_IDENTITY(_GLF_IDENTITY(int(5), (int(5)) / 1), 0 ^ (int(_GLF_IDENTITY(5, 0 | (5)))))), 0 << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), 0 ^ (int(5))))))))), (bool(bool(_injected_loop_counter > (_GLF_IDENTITY(0 << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), 0 ^ (int(5)))), min(0 << _GLF_IDENTITY(int(5), _GLF_IDENTITY(_GLF_IDENTITY(int(5), (int(5)) / 1), 0 ^ (int(_GLF_IDENTITY(5, 0 | (5)))))), 0 << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), 0 ^ (int(5)))))))))) || false))); _injected_loop_counter --)
              {
               for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(_GLF_IDENTITY(3, clamp(3, 3, 3))), _GLF_IDENTITY(int(3), int(int(int(3)))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                {
                 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))), false || (_GLF_DEAD(false))))
                  barrier();
                }
              }
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 ^ 0)); _GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) - 0))
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
                  barrier();
                 barrier();
                }
              }
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 barrier();
                }
              }
            }
           while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), bool(bvec2(_GLF_WRAPPED_LOOP(false), true))));
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             atomicStore(buf[next_virtual_gid], uint(2), _GLF_IDENTITY(4, (4) / _GLF_IDENTITY(1, min(1, 1))), _GLF_IDENTITY(_GLF_IDENTITY(64, _GLF_IDENTITY(clamp(64, _GLF_IDENTITY(64, (64) | (_GLF_IDENTITY(_GLF_IDENTITY(64, 0 ^ (64)), (_GLF_IDENTITY(64, 0 ^ (64))) ^ 0))), 64), (clamp(64, _GLF_IDENTITY(64, (64) | (64)), 64)) + (0 << _GLF_IDENTITY(int(8), int(8))))), _GLF_IDENTITY((64) * (1 & 1), _GLF_IDENTITY(((64) * (1 & 1)), (((64) * (1 & 1))) >> 0) << (0 >> _GLF_IDENTITY(int(6), int(6))))), 4);
            }
           else
            {
            }
          }
         for(int _injected_loop_counter = (1 & 1); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0), bool(bvec4(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0), true, true, true))); _injected_loop_counter --)
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-3.9, 7.8)) : injectionSwitch)).x > _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0))) / vec2(1.0, 1.0)).y)) || (false))))
            {
             do
              {
               barrier();
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             barrier();
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), (_GLF_IDENTITY(false, false || (false))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (_GLF_IDENTITY(! (! (_GLF_IDENTITY(false, false || (false)))), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(! (! (_GLF_IDENTITY(false, false || (false)))), ! (! (! _GLF_IDENTITY((! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, false || _GLF_IDENTITY((false), ! (! ((false))))), false || (_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), _GLF_IDENTITY((_GLF_IDENTITY(false, false || (false))) && true, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY((_GLF_IDENTITY(false, false || (false))) && true, ((_GLF_IDENTITY(false, false || (false))) && true) || false), false), bvec2(bvec3(_GLF_IDENTITY(bvec2(_GLF_IDENTITY((_GLF_IDENTITY(false, false || (false))) && true, ((_GLF_IDENTITY(false, false || (false))) && true) || false), false), bvec2(bvec2(bvec2(_GLF_IDENTITY((_GLF_IDENTITY(false, false || (false))) && true, ((_GLF_IDENTITY(false, false || (false))) && true) || false), _GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bool(false)))) && true))))), true)))), true && (bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY((_GLF_IDENTITY(false, _GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, false || (false)), true))) || (false))) && true, ((_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, bool(bvec2(false, true)))))) && true) || false), false), bvec2(bvec3(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), (_GLF_IDENTITY(false, false || (false))) && true)), bool(bvec4((_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), (_GLF_IDENTITY(false, false || (false))) && true)), true, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) && true, ((_GLF_IDENTITY(false, false || (false))) && true) || false), false), bvec2(bvec2(bvec2(_GLF_IDENTITY((_GLF_IDENTITY(false, false || (false))) && true, ((_GLF_IDENTITY(false, false || _GLF_IDENTITY((false), ! (! (_GLF_IDENTITY((false), bool(bvec3(_GLF_IDENTITY((false), bool(bvec4((false), false, false, true))), false, false)))))))) && _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), (! (true)) && true)))) || false), false)))), true)))))))))), false || (_GLF_IDENTITY(_GLF_IDENTITY(false, false || _GLF_IDENTITY((false), ! (! ((false))))), false || (_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, bool(bvec2(false, true))), false, false))) || (false)), _GLF_IDENTITY((_GLF_IDENTITY(false, false || (false))) && true, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY((_GLF_IDENTITY(false, false || (false))) && true, ((_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), bool(bvec4(_GLF_IDENTITY(false, false || (false)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, true)))) && true) || false), false), bvec2(bvec3(_GLF_IDENTITY(bvec2(_GLF_IDENTITY((_GLF_IDENTITY(false, _GLF_IDENTITY(false, (false) || false) || (_GLF_IDENTITY(false, bool(bvec3(false, false, false)))))) && true, ((_GLF_IDENTITY(false, false || (false))) && true) || false), false), bvec2(bvec2(bvec2(_GLF_IDENTITY((_GLF_IDENTITY(false, false || (false))) && true, ((_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, bool(bvec3(false, false, true))), true, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), false || (false))) && true) || false), _GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bool(false)))) && true))))), true)))), true && (bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY((_GLF_IDENTITY(false, _GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, false || (false)), _GLF_IDENTITY(true, ! (! (true)))))) || (false))) && true, ((_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, bool(bvec2(false, true)))))) && true) || false), false), bvec2(bvec3(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), (_GLF_IDENTITY(false, false || (false))) && true)), bool(bvec4((_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), (_GLF_IDENTITY(false, false || (false))) && true)), true, true, _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))) && true, ((_GLF_IDENTITY(false, false || (false))) && true) || false), false), bvec2(bvec2(bvec2(_GLF_IDENTITY((_GLF_IDENTITY(false, false || (false))) && true, ((_GLF_IDENTITY(false, false || _GLF_IDENTITY((false), ! (! (_GLF_IDENTITY(_GLF_IDENTITY((false), bool(bvec3(_GLF_IDENTITY((false), bool(bvec4((false), false, false, true))), false, false))), true && (_GLF_IDENTITY((false), bool(bvec3(_GLF_IDENTITY((false), bool(bvec4((false), false, false, true))), false, false)))))))))) && _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), (! (true)) && true)))) || false), false)))), true)))))))))))))), bool(bvec4((! (_GLF_IDENTITY(_GLF_IDENTITY(false, false || _GLF_IDENTITY((false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || ((false)))), _GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec3(false, true, true)))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true && (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec3(false, true, true)))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) || (_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), _GLF_IDENTITY((_GLF_IDENTITY(false, false || (false))) && true, _GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(_GLF_IDENTITY((_GLF_IDENTITY(false, false || (false))) && true, ((_GLF_IDENTITY(false, false || (false))) && true) || false), false), bvec2(bvec2(bvec2(_GLF_IDENTITY((_GLF_IDENTITY(false, false || (false))) && true, ((_GLF_IDENTITY(false, false || (false))) && true) || false), _GLF_IDENTITY(false, (false) || false))))), bvec2(bvec3(_GLF_IDENTITY(bvec2(_GLF_IDENTITY((_GLF_IDENTITY(false, false || (false))) && true, ((_GLF_IDENTITY(false, _GLF_IDENTITY(false || (false), bool(bvec2(false || (false), true))))) && true) || false), false), bvec2(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(_GLF_IDENTITY((_GLF_IDENTITY(false, false || (false))) && true, ((_GLF_IDENTITY(false, false || (false))) && true) || _GLF_IDENTITY(false, bool(bool(false)))), false), bvec2(bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY((_GLF_IDENTITY(false, false || (false))) && true, ((_GLF_IDENTITY(false, false || (false))) && true) || _GLF_IDENTITY(false, bool(bool(false)))), false), bvec2(bvec4(bvec2(_GLF_IDENTITY((_GLF_IDENTITY(false, false || (false))) && true, ((_GLF_IDENTITY(false, false || (false))) && true) || _GLF_IDENTITY(false, bool(bool(false)))), false), true, false)))))), _GLF_IDENTITY(bvec2(bvec2(bvec2(_GLF_IDENTITY((_GLF_IDENTITY(false, false || (false))) && true, ((_GLF_IDENTITY(false, false || (false))) && true) || false), false))), bvec2(bvec2(bvec2(bvec2(bvec2(_GLF_IDENTITY((_GLF_IDENTITY(false, _GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, true && (false)))) || (false))) && true, ((_GLF_IDENTITY(false, false || (false))) && true) || false), false)))))))))), true)))), true && (bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(_GLF_IDENTITY((_GLF_IDENTITY(false, false || (false))) && true, _GLF_IDENTITY(((_GLF_IDENTITY(false, false || (false))) && true) || false, _GLF_IDENTITY(bool(bvec2(((_GLF_IDENTITY(false, false || (false))) && true) || false, true)), true && (bool(bvec2(((_GLF_IDENTITY(false, false || (false))) && true) || false, true)))))), false), bvec2(bvec3(_GLF_IDENTITY(bvec2(_GLF_IDENTITY((_GLF_IDENTITY(false, false || (false))) && true, ((_GLF_IDENTITY(false, false || (false))) && true) || false), false), bvec2(bvec2(bvec2(_GLF_IDENTITY((_GLF_IDENTITY(false, _GLF_IDENTITY(false, ! (! (false))) || (false))) && true, ((_GLF_IDENTITY(false, false || (false))) && true) || false), false)))), true))), _GLF_IDENTITY(bvec2(bvec4(_GLF_IDENTITY(bvec2(_GLF_IDENTITY((_GLF_IDENTITY(false, false || (false))) && true, _GLF_IDENTITY(((_GLF_IDENTITY(false, false || (false))) && true) || false, _GLF_IDENTITY(bool(bvec2(((_GLF_IDENTITY(false, false || (false))) && true) || false, true)), true && (bool(bvec2(((_GLF_IDENTITY(false, false || (false))) && true) || false, true)))))), false), bvec2(bvec3(_GLF_IDENTITY(bvec2(_GLF_IDENTITY((_GLF_IDENTITY(false, false || (false))) && true, ((_GLF_IDENTITY(false, false || (false))) && true) || false), false), bvec2(bvec2(bvec2(_GLF_IDENTITY((_GLF_IDENTITY(false, _GLF_IDENTITY(false, ! (! (false))) || (false))) && true, ((_GLF_IDENTITY(false, false || (false))) && true) || false), false)))), true))), true, true)), bvec2(bvec4(bvec2(bvec4(_GLF_IDENTITY(bvec2(_GLF_IDENTITY((_GLF_IDENTITY(false, false || (false))) && true, _GLF_IDENTITY(((_GLF_IDENTITY(false, false || (false))) && true) || false, _GLF_IDENTITY(bool(bvec2(((_GLF_IDENTITY(false, false || (false))) && true) || false, true)), true && (bool(bvec2(((_GLF_IDENTITY(false, false || (false))) && true) || false, true)))))), false), bvec2(bvec3(_GLF_IDENTITY(bvec2(_GLF_IDENTITY((_GLF_IDENTITY(false, false || (false))) && true, ((_GLF_IDENTITY(false, false || (false))) && true) || false), false), bvec2(bvec2(bvec2(_GLF_IDENTITY((_GLF_IDENTITY(false, _GLF_IDENTITY(false, ! (! (false))) || (false))) && true, ((_GLF_IDENTITY(false, false || (false))) && true) || false), false)))), true))), true, true)), false, true))))))))))))), false, false, _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + 0.0) > injectionSwitch.y)))))))), false, true), bvec3(bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(! (! (_GLF_IDENTITY(false, false || (false)))), ! (! (! (! (_GLF_IDENTITY(false, false || (false))))))), false, _GLF_IDENTITY(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (true))), _GLF_IDENTITY(bvec3(bvec4(bvec3(_GLF_IDENTITY(! (! (_GLF_IDENTITY(false, _GLF_IDENTITY(false || (false), _GLF_IDENTITY((false || (false)) && true, bool(_GLF_IDENTITY(bvec3((false || (false)) && true, true, false), _GLF_IDENTITY(bvec3(bvec4(bvec3((false || (false)) && true, true, false), true)), bvec3(bvec3(bvec3(bvec4(bvec3((false || (false)) && true, true, false), true)))))))))))), ! (! _GLF_IDENTITY((! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), false || (false))))), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY((! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), false || (false))))), _GLF_IDENTITY(bool(bool((! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), false || (false))))))), (bool(bool((! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), false || (false)))))))) && true))), ! (! (bool(_GLF_IDENTITY((! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), false || (false))))), _GLF_IDENTITY(bool(bool((! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), false || (false))))))), (bool(bool((! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), false || (false)))))))) && true)))))))))), false, true), false)), bvec3(bvec4(_GLF_IDENTITY(bvec3(bvec4(bvec3(_GLF_IDENTITY(! (! (_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(false || (false), false || (false || (false))), (false || (false)) && true)))), ! (! (! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), false || (false))))))), false, true), false)), bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec4(bvec3(_GLF_IDENTITY(! (! (_GLF_IDENTITY(false, _GLF_IDENTITY(false || (false), (false || (false)) && true)))), ! (! (! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), false || (false))))))), false, true), false)), bvec3(bvec3(bvec3(bvec4(bvec3(_GLF_IDENTITY(! (! (_GLF_IDENTITY(false, _GLF_IDENTITY(false || (false), (false || (false)) && true)))), ! (! (! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), false || (false))))))), false, true), false)))))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))))))))));
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_DEAD(false))))
        barrier();
      }
    }
   else
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y, bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false), bvec2(bvec3(bvec2(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
      }
     else
      {
      }
     do
      {
       atomicStore(buf[next_virtual_gid], uint(2), _GLF_IDENTITY(_GLF_IDENTITY(4, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 4 : _GLF_FUZZED(52208))), (_GLF_IDENTITY(4, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 4 : _GLF_FUZZED(52208)))) >> (0 << _GLF_IDENTITY(int(0), int(0)))), 64, 4);
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     barrier();
    }
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
