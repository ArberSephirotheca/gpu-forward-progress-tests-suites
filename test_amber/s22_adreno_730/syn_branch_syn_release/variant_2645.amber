#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) >> 0))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         barrier();
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
        }
      }
    }
   else
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, true && (false))) && true)))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
    }
  }
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(1), int(1))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     return;
    }
  }
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = _GLF_IDENTITY(1, _GLF_IDENTITY((_GLF_IDENTITY(1, (1) >> 0)) - 0, (_GLF_IDENTITY((_GLF_IDENTITY(1, (1) >> 0)) - 0, 0 ^ ((_GLF_IDENTITY(1, (1) >> 0)) - 0))) | 0)); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter > 0)))); _injected_loop_counter --)
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       return;
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
        barrier();
      }
     else
      {
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
  }
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(false || (false), _GLF_IDENTITY((_GLF_IDENTITY(false || (false), ! (! (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, true, true), _GLF_IDENTITY(bvec3(bvec4(_GLF_IDENTITY(bvec3(false, true, true), bvec3(bvec3(bvec3(false, true, true)))), false)), bvec3(bvec4(bvec3(bvec4(_GLF_IDENTITY(bvec3(false, true, true), bvec3(bvec3(bvec3(false, true, true)))), false)), false)))))) || (false))))) && true, (_GLF_IDENTITY((_GLF_IDENTITY(false || (false), ! (! (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, true, true), _GLF_IDENTITY(bvec3(bvec4(_GLF_IDENTITY(bvec3(false, true, true), bvec3(bvec3(bvec3(false, true, true)))), false)), bvec3(bvec4(bvec3(bvec4(_GLF_IDENTITY(bvec3(false, true, true), bvec3(bvec3(bvec3(false, true, true)))), false)), false)))))) || (false))))) && true, false || ((_GLF_IDENTITY(false || (false), ! (! (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, true, true), _GLF_IDENTITY(bvec3(bvec4(_GLF_IDENTITY(bvec3(false, true, true), bvec3(bvec3(bvec3(false, true, true)))), false)), bvec3(bvec4(bvec3(bvec4(_GLF_IDENTITY(bvec3(false, true, true), bvec3(bvec3(bvec3(false, true, true)))), false)), false)))))) || (false))))) && true))) && true))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(false || (false), (_GLF_IDENTITY(false || (false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, true, true), _GLF_IDENTITY(bvec3(bvec4(_GLF_IDENTITY(bvec3(false, true, true), bvec3(bvec3(bvec3(false, true, true)))), false)), bvec3(bvec4(bvec3(bvec4(_GLF_IDENTITY(bvec3(false, true, true), bvec3(bvec3(bvec3(false, true, true)))), false)), false)))))) || (false)), (! (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, true, true), _GLF_IDENTITY(bvec3(bvec4(_GLF_IDENTITY(bvec3(false, true, true), bvec3(bvec3(bvec3(_GLF_IDENTITY(false, (false) && true), true, true)))), false)), bvec3(bvec4(_GLF_IDENTITY(bvec3(bvec4(_GLF_IDENTITY(bvec3(false, true, true), bvec3(bvec3(bvec3(false, true, true)))), false)), bvec3(bvec4(_GLF_IDENTITY(bvec3(bvec4(_GLF_IDENTITY(bvec3(false, true, true), bvec3(bvec3(bvec3(false, true, true)))), false)), _GLF_IDENTITY(bvec3(bvec3(bvec3(bvec4(_GLF_IDENTITY(bvec3(false, true, true), bvec3(bvec3(bvec3(false, true, true)))), false)))), bvec3(bvec3(bvec3(bvec3(bvec3(bvec4(_GLF_IDENTITY(bvec3(false, true, true), bvec3(bvec3(bvec3(false, true, true)))), false)))))))), true))), false)))))) || (false))) || false)))) && _GLF_IDENTITY(true, ! (! (true))))), ! (! (_GLF_IDENTITY(false, _GLF_IDENTITY(false || (false), (_GLF_IDENTITY(_GLF_IDENTITY(false || _GLF_IDENTITY((false), false || ((false))), ! (! (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, true, true), _GLF_IDENTITY(bvec3(bvec4(_GLF_IDENTITY(bvec3(false, _GLF_IDENTITY(true, false || (true)), true), bvec3(bvec3(_GLF_IDENTITY(bvec3(false, true, true), bvec3(bvec4(bvec3(false, true, true), true)))))), false)), bvec3(bvec4(bvec3(bvec4(_GLF_IDENTITY(bvec3(false, true, true), bvec3(bvec3(bvec3(false, true, true)))), false)), false)))))) || (false)))), bool(bvec2(_GLF_IDENTITY(false || _GLF_IDENTITY((false), false || ((false))), ! (! (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, true, true), _GLF_IDENTITY(bvec3(bvec4(_GLF_IDENTITY(bvec3(false, _GLF_IDENTITY(true, false || (true)), true), bvec3(bvec3(_GLF_IDENTITY(bvec3(false, true, true), bvec3(bvec4(bvec3(false, true, true), true)))))), false)), bvec3(bvec4(bvec3(bvec4(_GLF_IDENTITY(bvec3(false, true, true), bvec3(bvec3(bvec3(false, true, true)))), false)), false)))))) || (false)))), true)))) && _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), (! (true)) && true)))))))))))))
  {
  }
 else
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           return;
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), ! (! (! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(701.360) : injectionSwitch.y))))))))))))
          return;
        }
      }
    }
   else
    {
    }
  }
 do
  {
   if(_GLF_DEAD(false))
    break;
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
    {
     if(_GLF_DEAD(false))
      return;
     break;
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (true)))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         barrier();
        }
      }
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, bool(bool(false))), false, false))), (injectionSwitch.x > injectionSwitch.y))))))
      barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
    {
     if(_GLF_DEAD(false))
      break;
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y))))
              {
              }
             else
              {
               barrier();
              }
            }
           continue;
          }
        }
       else
        {
         barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))))
          return;
        }
      }
     return;
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y)))), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true, false)))) && true)))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, vec2(mat2x4(injectionSwitch, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0))).x > _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(true ? injectionSwitch : _GLF_FUZZED(vec2(-62.69, -92.25)), clamp(true ? injectionSwitch : _GLF_FUZZED(vec2(-62.69, -92.25)), true ? injectionSwitch : _GLF_FUZZED(vec2(-62.69, -92.25)), _GLF_IDENTITY(true ? injectionSwitch : _GLF_FUZZED(vec2(-62.69, -92.25)), (true ? injectionSwitch : _GLF_FUZZED(vec2(-62.69, -92.25))) - vec2(0.0, 0.0)))))).y), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, vec2(mat2x4(injectionSwitch, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0))).x > _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(true ? injectionSwitch : _GLF_FUZZED(vec2(-62.69, -92.25)), clamp(true ? injectionSwitch : _GLF_FUZZED(vec2(-62.69, -92.25)), true ? injectionSwitch : _GLF_FUZZED(vec2(-62.69, -92.25)), _GLF_IDENTITY(true ? injectionSwitch : _GLF_FUZZED(vec2(-62.69, -92.25)), (true ? injectionSwitch : _GLF_FUZZED(vec2(-62.69, -92.25))) - vec2(0.0, 0.0)))))).y), ((_GLF_IDENTITY(injectionSwitch, vec2(mat2x4(injectionSwitch, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0))).x > _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(true ? injectionSwitch : _GLF_FUZZED(vec2(-62.69, -92.25)), clamp(true ? injectionSwitch : _GLF_FUZZED(vec2(-62.69, -92.25)), true ? injectionSwitch : _GLF_FUZZED(vec2(-62.69, -92.25)), _GLF_IDENTITY(true ? injectionSwitch : _GLF_FUZZED(vec2(-62.69, -92.25)), (true ? injectionSwitch : _GLF_FUZZED(vec2(-62.69, -92.25))) - vec2(0.0, 0.0)))))).y)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (! (bool(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, vec2(mat2x4(injectionSwitch, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0))).x > _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(true ? injectionSwitch : _GLF_FUZZED(vec2(-62.69, -92.25)), clamp(true ? injectionSwitch : _GLF_FUZZED(vec2(-62.69, -92.25)), true ? injectionSwitch : _GLF_FUZZED(vec2(-62.69, -92.25)), _GLF_IDENTITY(true ? injectionSwitch : _GLF_FUZZED(vec2(-62.69, -92.25)), (true ? injectionSwitch : _GLF_FUZZED(vec2(-62.69, -92.25))) - vec2(0.0, 0.0)))))).y), ((_GLF_IDENTITY(injectionSwitch, vec2(mat2x4(injectionSwitch, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0))).x > _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(true ? injectionSwitch : _GLF_FUZZED(vec2(-62.69, -92.25)), clamp(true ? injectionSwitch : _GLF_FUZZED(vec2(-62.69, -92.25)), true ? injectionSwitch : _GLF_FUZZED(vec2(-62.69, -92.25)), _GLF_IDENTITY(true ? injectionSwitch : _GLF_FUZZED(vec2(-62.69, -92.25)), (true ? injectionSwitch : _GLF_FUZZED(vec2(-62.69, -92.25))) - vec2(0.0, 0.0)))))).y)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))))
          {
          }
         else
          {
           barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               barrier();
              }
             else
              {
              }
            }
          }
        }
       continue;
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(! (! (false)), _GLF_IDENTITY(false, bool(bvec3(false, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) || (! (! (false)))), bool(bool(! (! (false)))))))), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (true ? _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).x : _GLF_IDENTITY(_GLF_FUZZED(0.2), _GLF_IDENTITY(float(mat2(_GLF_FUZZED(0.2), 0.0, 0.0, 1.0)), clamp(_GLF_IDENTITY(float(mat2(_GLF_FUZZED(0.2), 0.0, 0.0, 1.0)), float(mat3(float(mat2(_GLF_FUZZED(0.2), 0.0, 0.0, 1.0)), 0.0, abs(0.0), 0.0, 0.0, 0.0, 0.0, 1.0, 0.0))), _GLF_IDENTITY(float(mat2(_GLF_FUZZED(0.2), 0.0, 0.0, 1.0)), (float(mat2(_GLF_FUZZED(0.2), 0.0, 0.0, 1.0))) - 0.0), float(mat2(_GLF_FUZZED(0.2), 0.0, 0.0, 1.0))))))) > _GLF_IDENTITY(injectionSwitch.y, float(_GLF_IDENTITY(_GLF_IDENTITY(vec2(injectionSwitch.y, 0.0), (false ? _GLF_FUZZED(injectionSwitch) : vec2(injectionSwitch.y, 0.0))), (false ? _GLF_FUZZED(injectionSwitch) : vec2(injectionSwitch.y, 0.0)))))))))
      {
       if(_GLF_DEAD(false))
        barrier();
       continue;
      }
     if(_GLF_DEAD(false))
      break;
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(false, (false) || false), true, true, true)), ! (! (bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, (false) || false), false, false), _GLF_IDENTITY(bvec3(bvec4(bvec3(_GLF_IDENTITY(false, (false) || false), false, false), _GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) || false)))))))), bvec3(bvec4(bvec3(bvec4(bvec3(_GLF_IDENTITY(false, (false) || false), false, false), false)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), true, true, true))))))))
        barrier();
       return;
       if(_GLF_DEAD(false))
        continue;
      }
    }
   do
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(_GLF_IDENTITY((_GLF_DEAD(_GLF_IDENTITY(false, true && (false)))), _GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), _GLF_IDENTITY(false || ((injectionSwitch.x < injectionSwitch.y)), (false || ((injectionSwitch.x < injectionSwitch.y))) || false))) && (_GLF_IDENTITY((_GLF_DEAD(_GLF_IDENTITY(false, true && (false)))), bool(bvec3((_GLF_DEAD(_GLF_IDENTITY(false, true && _GLF_IDENTITY((_GLF_IDENTITY(false, (false) && true)), ! (! ((_GLF_IDENTITY(false, (false) && _GLF_IDENTITY(true, (_GLF_IDENTITY(true, (true) || false)) && true))))))))), true, false))))), false || (_GLF_IDENTITY((_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), ! (! (_GLF_IDENTITY(false, true && (false))))), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(false, true && (false)), false, true, false)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(false, true && (false)), false, true, false)), ! (! (bool(bvec4(_GLF_IDENTITY(false, true && (false)), false, true, false)))))))), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(true, bool(bvec3(true, true, true))), true), bvec2(bvec2(bvec2(_GLF_IDENTITY(true, bool(bvec3(true, true, true))), true)))))) && (false)), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), false || (_GLF_IDENTITY(false, true && (false)))), true, true, true))), bool(bvec2(_GLF_IDENTITY(false, true && (false)), true)))) && true), _GLF_IDENTITY(false, ! (! (false)))), bvec2(bvec3(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), (_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), bool(bvec2(_GLF_IDENTITY(false, true && (false)), true)))) && true), _GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) || false)))), _GLF_IDENTITY(bvec2(bvec4(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), (_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), bool(bvec2(_GLF_IDENTITY(false, true && (false)), true)))) && true), _GLF_IDENTITY(false, ! (! (false)))), false, false)), bvec2(bvec2(bvec2(bvec4(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), (_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), bool(bvec2(_GLF_IDENTITY(false, true && (false)), true)))) && true), _GLF_IDENTITY(false, ! (! (false)))), false, false)))))), false))))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, false || (false)))), true && (false)))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && ((_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, false || (false)))), true && (false)))))), ! (! ((_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, false || (false)))), true && (false)))))))), (! (_GLF_IDENTITY((_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)), (bool(bvec3(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))) && true)), false || (false)))), true && (false)), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)), (bool(bvec3(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))) && true)), false || (false)))), true && (false)), false || (_GLF_IDENTITY(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bvec4(false, true, false, true)))))), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(9130.4765)), float(injectionSwitch.x), bool(true))) > injectionSwitch.y)), false)), (bool(bvec3(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))) && true)), false || (false)))), true && (false))))))))), ! (! ((_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), _GLF_IDENTITY(false, ! (! (false))) || (false))), false || (! (_GLF_IDENTITY(false, false || (false))))))))), true && (false))))))))) || false))))) || false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        break;
       if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), ! (! _GLF_IDENTITY((_GLF_DEAD(false)), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY((_GLF_DEAD(false)), false || ((_GLF_DEAD(false)))))), false || (bool(bool(_GLF_IDENTITY((_GLF_DEAD(false)), false || ((_GLF_DEAD(false))))))))))), false || (_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(! (! (_GLF_DEAD(false))), ! (_GLF_IDENTITY(! (! (! (_GLF_DEAD(false)))), ! (! (_GLF_IDENTITY(! (! (! (_GLF_DEAD(false)))), false || (! (! (! _GLF_IDENTITY((_GLF_DEAD(false)), ! (! ((_GLF_DEAD(false))))))))))))))))))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), true && (bool(bool(false)))))), (_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), true && (bool(bool(false))))))) || false))
            continue;
           if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch), mix(vec2(_GLF_FUZZED(-5.1), _GLF_FUZZED(-4.7)), vec2(_GLF_IDENTITY((_GLF_IDENTITY((injectionSwitch), clamp((injectionSwitch), (injectionSwitch), (injectionSwitch))))[0], (false ? _GLF_FUZZED(-104.065) : ((injectionSwitch))[0])), ((injectionSwitch))[1]), bvec2(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) * mat2(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)))).x > injectionSwitch.y), false || (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch), mix(vec2(_GLF_FUZZED(-5.1), _GLF_FUZZED(-4.7)), vec2(_GLF_IDENTITY((_GLF_IDENTITY((injectionSwitch), clamp((injectionSwitch), (injectionSwitch), (injectionSwitch))))[0], (false ? _GLF_FUZZED(-104.065) : ((injectionSwitch))[0])), ((injectionSwitch))[1]), bvec2(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) * mat2(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)))).x > injectionSwitch.y), ! (! (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch), mix(vec2(_GLF_FUZZED(-5.1), _GLF_FUZZED(-4.7)), vec2(_GLF_IDENTITY((_GLF_IDENTITY((injectionSwitch), clamp((injectionSwitch), (injectionSwitch), (injectionSwitch))))[0], (false ? _GLF_FUZZED(-104.065) : ((injectionSwitch))[0])), ((injectionSwitch))[1]), bvec2(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) * mat2(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)))).x > injectionSwitch.y), bool(bvec2((_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch), mix(vec2(_GLF_FUZZED(-5.1), _GLF_FUZZED(-4.7)), vec2(_GLF_IDENTITY((_GLF_IDENTITY((injectionSwitch), clamp((injectionSwitch), (injectionSwitch), (injectionSwitch))))[0], (false ? _GLF_FUZZED(-104.065) : ((injectionSwitch))[0])), ((injectionSwitch))[1]), bvec2(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) * mat2(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)))).x > injectionSwitch.y), true)))))))))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              break;
             barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           barrier();
           do
            {
             do
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), false || (_GLF_IDENTITY(false, true && (false)))), true, true), bvec3(bvec3(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), false || (_GLF_IDENTITY(false, true && (false)))), true, true))))), false || (bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), false || (_GLF_IDENTITY(false, true && (false)))), true, true), bvec3(bvec3(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), false || (_GLF_IDENTITY(false, true && (false)))), true, true)))))))), _GLF_IDENTITY(false, (false) && true), false, false)), true && _GLF_IDENTITY((bool(bvec4(_GLF_IDENTITY(false, true && (false)), false, false, false))), false || ((bool(bvec4(_GLF_IDENTITY(false, true && (false)), _GLF_IDENTITY(false, ! (! (false))), false, false)))))))))
                return;
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         if(_GLF_DEAD(false))
          return;
         break;
        }
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch)[1], mix(float(_GLF_FUZZED(224.495)), float((injectionSwitch)[1]), bool(true)))), vec2(_GLF_FUZZED(vec4(-5.8, 7885.6844, 8.4, 1.2).x), _GLF_FUZZED(607.278)), bvec2(false, false))), vec2(injectionSwitch[0], injectionSwitch[1])).x > injectionSwitch.y))))
              return;
            }
          }
        }
       barrier();
      }
     if(_GLF_DEAD(false))
      break;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      continue;
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(false))
    break;
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  return;
 for(int _injected_loop_counter = 0; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) | (_injected_loop_counter)) != 1), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, (_GLF_IDENTITY(1, int(ivec3(1, 0, 0)))) | (1))))))))); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       barrier();
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), true && (_GLF_WRAPPED_IF_FALSE(false))), true && (_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (false)))))))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     do
      {
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))), false || (_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) && true)))
          {
          }
         else
          {
           do
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         if(_GLF_DEAD(false))
          return;
         do
          {
           if(_GLF_DEAD(false))
            return;
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY((false) && true, ((_GLF_IDENTITY(false, (false) && true)) && true) || false), false || (_GLF_IDENTITY((false) && true, ((_GLF_IDENTITY(false, _GLF_IDENTITY((false) && true, true && (_GLF_IDENTITY((false) && true, ! (! ((false) && true))))))) && true) || false))))))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
              barrier();
             barrier();
            }
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec4(! (false), false, _GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec3(true, _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))) && true), false), bvec3(bvec4(bvec3(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false), false))))), false))))), true && (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! _GLF_IDENTITY((false), _GLF_IDENTITY(! (! ((false))), false || (! (! (_GLF_IDENTITY((false), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY((false), ! (! ((false)))))), bool(_GLF_IDENTITY(bvec3(bool(bool(_GLF_IDENTITY((false), ! (! ((false)))))), true, true), bvec3(bvec3(bvec3(bool(bool(_GLF_IDENTITY((false), ! (! ((false)))))), true, true)))))))))))), bool(bvec4(! (false), false, _GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec3(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false), bvec3(bvec4(bvec3(_GLF_IDENTITY(true, true && (true)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false), false))))), false)))))))))
            {
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) << 0), _GLF_IDENTITY(0, (0) | (0)) ^ (_injected_loop_counter)) != 1); _injected_loop_counter ++)
              {
               if(_GLF_DEAD(false))
                continue;
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     return;
                    }
                   else
                    {
                    }
                   if(_GLF_DEAD(false))
                    continue;
                  }
                 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
                  break;
                }
              }
             if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, true && (false))))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(false))
                return;
              }
             else
              {
               if(_GLF_DEAD(false))
                continue;
               if(_GLF_DEAD(_GLF_IDENTITY(false, false || _GLF_IDENTITY((_GLF_IDENTITY(false, bool(bvec2(false, true)))), ! (! (_GLF_IDENTITY((_GLF_IDENTITY(false, bool(bvec2(false, true)))), bool(bvec3((_GLF_IDENTITY(false, bool(bvec2(false, true)))), true, true)))))))))
                barrier();
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), ! (! (bool(bool(false)))))))), (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_IDENTITY((injectionSwitch)[0], min((injectionSwitch)[0], (injectionSwitch)[0])), (injectionSwitch)[1]), vec2(_GLF_FUZZED(-0.2), _GLF_FUZZED(144.766)), bvec2(false, false))).x > injectionSwitch.y))))
                return;
               if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
                barrier();
               barrier();
              }
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).x > injectionSwitch.y))))
              {
              }
             else
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(max(injectionSwitch.x, injectionSwitch.x), exp(0.0) * (max(injectionSwitch.x, injectionSwitch.x)))) > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], min(injectionSwitch[0], injectionSwitch[0])), injectionSwitch[1])).y, _GLF_IDENTITY((injectionSwitch.y), ((injectionSwitch.y)) / 1.0) + length(vec2(0.0, 0.0)))))))
                return;
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
            }
          }
         else
          {
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), (_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), bool(bvec4(_GLF_IDENTITY(false, false || (false)), true, true, false)))) || false), true, false, false)))))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               barrier();
              }
             else
              {
              }
            }
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           if(_GLF_DEAD(false))
            {
             do
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 return;
                 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(mat2x3(injectionSwitch.x, 1.0, 1.0, 1.0, 1.0, 1.0))) > injectionSwitch.y))))
                  barrier();
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), vec2(1.0, 1.0) * ((injectionSwitch) * mat2(1.0)))).x > injectionSwitch.y))))
            continue;
           barrier();
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             for(int _injected_loop_counter = _GLF_IDENTITY(0, int(ivec4(0, 0, 0, (1 & 1)))); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
              {
               if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_DEAD(false))
                  break;
                 do
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   if(_GLF_DEAD(false))
                    break;
                   if(_GLF_DEAD(false))
                    barrier();
                   barrier();
                   if(_GLF_DEAD(false))
                    barrier();
                   if(_GLF_DEAD(false))
                    break;
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))));
                 if(_GLF_DEAD(false))
                  barrier();
                }
               if(_GLF_DEAD(false))
                break;
              }
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))))), ! (! (! (_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))))))))))
              break;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, 0.0 + (_GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(-4.9)), bool(false)))))))))
              barrier();
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               return;
              }
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED((-2.6 * 55.48)), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-7160.0149)), bvec2(true, false))))).x > injectionSwitch.y))))
            return;
           if(_GLF_DEAD(false))
            return;
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  continue;
                 return;
                }
               if(_GLF_DEAD(false))
                {
                 do
                  {
                   return;
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
               do
                {
                 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY((0 >> _GLF_IDENTITY(int(6), int(6))), ((0 >> _GLF_IDENTITY(int(6), int(6)))) / 1)); _injected_loop_counter --)
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                }
               while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false))));
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 return;
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).y) && true)))))))
                    {
                     do
                      {
                       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, bool(bool(false))))), (injectionSwitch.x > injectionSwitch.y))))
                        barrier();
                      }
                     while(_GLF_WRAPPED_LOOP(false));
                     break;
                    }
                   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    {
                    }
                   else
                    {
                     return;
                    }
                  }
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                return;
              }
            }
           else
            {
            }
           if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! _GLF_IDENTITY((_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, float(mat4x3(injectionSwitch.x, 0.0, _GLF_IDENTITY(1.0, (1.0) - 0.0), 0.0, 0.0, _GLF_IDENTITY(0.0, min(0.0, 0.0)), 0.0, 0.0, 0.0, 1.0, 1.0, 0.0)))) - 0.0) > injectionSwitch.y)))) && true)), bool(_GLF_IDENTITY(bool((_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, float(mat4x3(injectionSwitch.x, 0.0, _GLF_IDENTITY(1.0, (1.0) - 0.0), 0.0, 0.0, _GLF_IDENTITY(0.0, min(0.0, 0.0)), 0.0, 0.0, 0.0, 1.0, 1.0, 0.0)))) - 0.0) > injectionSwitch.y)))) && true))), ! (! (bool((_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, float(mat4x3(injectionSwitch.x, 0.0, _GLF_IDENTITY(1.0, (1.0) - 0.0), 0.0, 0.0, _GLF_IDENTITY(0.0, min(0.0, 0.0)), 0.0, 0.0, 0.0, 1.0, 1.0, 0.0)))) - 0.0) > injectionSwitch.y)))) && true)))))))))), _GLF_IDENTITY(true, (true) && true) && (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(! (! (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY((_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, float(mat4x3(injectionSwitch.x, _GLF_IDENTITY(0.0, (0.0) - 0.0), _GLF_IDENTITY(_GLF_IDENTITY(1.0, (1.0) - 0.0), mix(float(_GLF_IDENTITY(1.0, (1.0) - 0.0)), float(_GLF_FUZZED(-890.422)), bool(false))), 0.0, 0.0, _GLF_IDENTITY(0.0, min(0.0, 0.0)), 0.0, 0.0, 0.0, 1.0, 1.0, 0.0)))) - 0.0) > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y)))), ! (! (_GLF_IDENTITY((_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, float(mat4x3(injectionSwitch.x, _GLF_IDENTITY(0.0, (0.0) - 0.0), _GLF_IDENTITY(_GLF_IDENTITY(1.0, (1.0) - 0.0), mix(float(_GLF_IDENTITY(1.0, (1.0) - 0.0)), float(_GLF_FUZZED(-890.422)), bool(false))), 0.0, 0.0, _GLF_IDENTITY(0.0, min(0.0, 0.0)), 0.0, 0.0, 0.0, 1.0, 1.0, 0.0)))) - 0.0) > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y)))), true && ((_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, float(mat4x3(injectionSwitch.x, _GLF_IDENTITY(0.0, (0.0) - 0.0), _GLF_IDENTITY(_GLF_IDENTITY(1.0, (1.0) - 0.0), mix(float(_GLF_IDENTITY(1.0, (1.0) - 0.0)), float(_GLF_FUZZED(-890.422)), bool(false))), 0.0, 0.0, _GLF_IDENTITY(0.0, min(0.0, 0.0)), 0.0, 0.0, 0.0, 1.0, 1.0, 0.0)))) - 0.0) > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y))))))))) && true))), false || (! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY((_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, float(mat4x3(injectionSwitch.x, _GLF_IDENTITY(0.0, (0.0) - 0.0), _GLF_IDENTITY(_GLF_IDENTITY(1.0, (1.0) - 0.0), mix(float(_GLF_IDENTITY(1.0, (1.0) - 0.0)), float(_GLF_FUZZED(-890.422)), bool(false))), 0.0, 0.0, _GLF_IDENTITY(0.0, min(0.0, 0.0)), 0.0, 0.0, 0.0, 1.0, 1.0, 0.0)))) - 0.0) > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y)))), ! (! (_GLF_IDENTITY((_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, float(mat4x3(injectionSwitch.x, _GLF_IDENTITY(0.0, (0.0) - 0.0), _GLF_IDENTITY(_GLF_IDENTITY(1.0, (1.0) - 0.0), mix(float(_GLF_IDENTITY(1.0, (1.0) - 0.0)), float(_GLF_FUZZED(-890.422)), bool(false))), 0.0, 0.0, _GLF_IDENTITY(0.0, min(0.0, 0.0)), 0.0, 0.0, 0.0, 1.0, 1.0, 0.0)))) - 0.0) > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y)))), true && ((_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, float(mat4x3(injectionSwitch.x, _GLF_IDENTITY(0.0, (0.0) - 0.0), _GLF_IDENTITY(_GLF_IDENTITY(1.0, (1.0) - 0.0), mix(float(_GLF_IDENTITY(1.0, (1.0) - 0.0)), float(_GLF_FUZZED(-890.422)), bool(false))), 0.0, 0.0, _GLF_IDENTITY(0.0, min(0.0, 0.0)), 0.0, 0.0, 0.0, 1.0, 1.0, 0.0)))) - 0.0) > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y))))))))) && true)), _GLF_IDENTITY(bool(bvec2(! (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY((_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, float(mat4x3(injectionSwitch.x, _GLF_IDENTITY(0.0, (0.0) - 0.0), _GLF_IDENTITY(_GLF_IDENTITY(1.0, (1.0) - 0.0), mix(float(_GLF_IDENTITY(1.0, (1.0) - 0.0)), float(_GLF_FUZZED(-890.422)), bool(false))), 0.0, 0.0, _GLF_IDENTITY(0.0, min(0.0, 0.0)), 0.0, 0.0, 0.0, 1.0, 1.0, 0.0)))) - 0.0) > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y)))), ! (! (_GLF_IDENTITY((_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, float(mat4x3(injectionSwitch.x, _GLF_IDENTITY(0.0, (0.0) - 0.0), _GLF_IDENTITY(_GLF_IDENTITY(1.0, (1.0) - 0.0), mix(float(_GLF_IDENTITY(1.0, (1.0) - 0.0)), float(_GLF_FUZZED(-890.422)), bool(false))), 0.0, 0.0, _GLF_IDENTITY(0.0, min(0.0, 0.0)), 0.0, 0.0, 0.0, 1.0, 1.0, 0.0)))) - 0.0) > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y)))), true && ((_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, float(mat4x3(injectionSwitch.x, _GLF_IDENTITY(0.0, (0.0) - 0.0), _GLF_IDENTITY(_GLF_IDENTITY(1.0, (1.0) - 0.0), mix(float(_GLF_IDENTITY(1.0, (1.0) - 0.0)), float(_GLF_FUZZED(-890.422)), bool(false))), 0.0, 0.0, _GLF_IDENTITY(0.0, min(0.0, 0.0)), 0.0, 0.0, 0.0, 1.0, 1.0, 0.0)))) - 0.0) > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y))))))))) && true)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), false || (_GLF_IDENTITY(bool(bvec2(! (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY((_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, float(mat4x3(injectionSwitch.x, _GLF_IDENTITY(0.0, (0.0) - 0.0), _GLF_IDENTITY(_GLF_IDENTITY(1.0, (1.0) - 0.0), mix(float(_GLF_IDENTITY(1.0, (1.0) - 0.0)), float(_GLF_FUZZED(-890.422)), bool(false))), 0.0, 0.0, _GLF_IDENTITY(0.0, min(0.0, 0.0)), 0.0, 0.0, 0.0, 1.0, 1.0, 0.0)))) - 0.0) > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y)))), ! (! (_GLF_IDENTITY((_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, float(mat4x3(injectionSwitch.x, _GLF_IDENTITY(0.0, (0.0) - 0.0), _GLF_IDENTITY(_GLF_IDENTITY(1.0, (1.0) - 0.0), mix(float(_GLF_IDENTITY(1.0, (1.0) - 0.0)), float(_GLF_FUZZED(-890.422)), bool(false))), 0.0, 0.0, _GLF_IDENTITY(0.0, min(0.0, 0.0)), 0.0, 0.0, 0.0, 1.0, 1.0, 0.0)))) - 0.0) > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y)))), true && ((_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, float(mat4x3(injectionSwitch.x, _GLF_IDENTITY(0.0, (0.0) - 0.0), _GLF_IDENTITY(_GLF_IDENTITY(1.0, (1.0) - 0.0), mix(float(_GLF_IDENTITY(1.0, (1.0) - 0.0)), float(_GLF_FUZZED(-890.422)), bool(false))), 0.0, 0.0, _GLF_IDENTITY(0.0, min(0.0, 0.0)), 0.0, 0.0, 0.0, 1.0, 1.0, 0.0)))) - 0.0) > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y))))))))) && true)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), ! (! (bool(bvec2(! (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY((_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, float(mat4x3(injectionSwitch.x, _GLF_IDENTITY(0.0, (0.0) - 0.0), _GLF_IDENTITY(_GLF_IDENTITY(1.0, (1.0) - 0.0), mix(float(_GLF_IDENTITY(1.0, (1.0) - 0.0)), float(_GLF_FUZZED(-890.422)), bool(false))), 0.0, 0.0, _GLF_IDENTITY(0.0, min(0.0, 0.0)), 0.0, 0.0, 0.0, 1.0, 1.0, 0.0)))) - 0.0) > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y)))), ! (! (_GLF_IDENTITY((_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, float(mat4x3(injectionSwitch.x, _GLF_IDENTITY(0.0, (0.0) - 0.0), _GLF_IDENTITY(_GLF_IDENTITY(1.0, (1.0) - 0.0), mix(float(_GLF_IDENTITY(1.0, (1.0) - 0.0)), float(_GLF_FUZZED(-890.422)), bool(false))), 0.0, 0.0, _GLF_IDENTITY(0.0, min(0.0, 0.0)), 0.0, 0.0, 0.0, 1.0, 1.0, 0.0)))) - 0.0) > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y)))), true && ((_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, float(mat4x3(injectionSwitch.x, _GLF_IDENTITY(0.0, (0.0) - 0.0), _GLF_IDENTITY(_GLF_IDENTITY(1.0, (1.0) - 0.0), mix(float(_GLF_IDENTITY(1.0, (1.0) - 0.0)), float(_GLF_FUZZED(-890.422)), bool(false))), 0.0, 0.0, _GLF_IDENTITY(0.0, min(0.0, 0.0)), 0.0, 0.0, 0.0, 1.0, 1.0, 0.0)))) - 0.0) > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y))))))))) && true)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))))))))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           else
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                return;
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 return;
                }
               else
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  continue;
                }
              }
            }
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_IDENTITY((injectionSwitch)[0], float(mat3((injectionSwitch)[0], 0.0, 0.0, 0.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, sin(0.0)))), (injectionSwitch)[1]), vec2(_GLF_FUZZED(6.7), _GLF_FUZZED(-0.0)), bvec2(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, length(0.0) + (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)))))) > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y)), false))).x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))) && true), true, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))
            return;
           if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY((true) || false, (_GLF_IDENTITY((true) || false, true && ((true) || false))) && _GLF_IDENTITY(true, (true) || false)))))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
              {
               if(_GLF_DEAD(false))
                continue;
               return;
               if(_GLF_DEAD(false))
                barrier();
              }
            }
           else
            {
            }
          }
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_DEAD(false))
          barrier();
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(false ? _GLF_FUZZED(5.9) : injectionSwitch.x, max(false ? _GLF_FUZZED(5.9) : injectionSwitch.x, false ? _GLF_FUZZED(5.9) : injectionSwitch.x)))), injectionSwitch.x)) > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-65.77, 4.3)) : injectionSwitch)), injectionSwitch)), _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(_GLF_IDENTITY(-65.77, 1.0 * (_GLF_IDENTITY(-65.77, min(-65.77, -65.77)))), 4.3)) : injectionSwitch)), injectionSwitch))), mat2(1.0) * ((_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(_GLF_IDENTITY(-65.77, 1.0 * (_GLF_IDENTITY(-65.77, min(-65.77, -65.77)))), 4.3)) : injectionSwitch)), injectionSwitch))))) - vec2(0.0, 0.0)).y))))
          return;
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
      }
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))), _GLF_IDENTITY(! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_IDENTITY(false, true && (false)))), (! (_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))) && true)), ! (_GLF_IDENTITY(! (! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_IDENTITY(false, true && (false)))), (! (_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))) && true))), ! (! (! (! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_IDENTITY(false, true && (false)))), (! (_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))) && true))))))))))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           return;
          }
        }
       return;
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0))))))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           return;
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
       do
        {
         return;
         if(_GLF_DEAD(false))
          break;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     return;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       do
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x < injectionSwitch.y))))
            {
             return;
            }
           else
            {
            }
          }
         if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, (false) && true)))))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(mat2(injectionSwitch.x, 1.0, 1.0, 0.0), transpose(transpose(mat2(injectionSwitch.x, 1.0, 1.0, 0.0)))))))) > injectionSwitch.y))));
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(((1 << _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(3), (int(3)) << 0), _GLF_IDENTITY(int(3), 1 * (int(3)))), 0 ^ (_GLF_IDENTITY(_GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), 1 * _GLF_IDENTITY(_GLF_IDENTITY((int(3)), ((int(3))) | (_GLF_IDENTITY((int(3)), ((int(3))) + 0))), _GLF_IDENTITY(int(_GLF_IDENTITY(int(_GLF_IDENTITY((int(3)), ((int(3))) | (_GLF_IDENTITY((int(3)), ((int(3))) + 0)))), 0 | (_GLF_IDENTITY(int(_GLF_IDENTITY((int(3)), ((int(3))) | (_GLF_IDENTITY((int(3)), ((int(3))) + 0)))), (int(_GLF_IDENTITY((int(3)), ((int(3))) | (_GLF_IDENTITY((int(3)), ((int(3))) + 0))))) << 0)))), min(int(_GLF_IDENTITY(int(_GLF_IDENTITY((int(3)), ((int(3))) | (_GLF_IDENTITY((int(3)), ((int(3))) + 0)))), 0 | (_GLF_IDENTITY(int(_GLF_IDENTITY((int(3)), ((int(3))) | (_GLF_IDENTITY((int(3)), ((int(3))) + 0)))), (int(_GLF_IDENTITY((int(3)), ((int(3))) | (_GLF_IDENTITY((int(3)), ((int(3))) + 0))))) << 0)))), int(_GLF_IDENTITY(int(_GLF_IDENTITY((int(3)), ((int(3))) | (_GLF_IDENTITY((int(3)), ((int(3))) + 0)))), 0 | (_GLF_IDENTITY(int(_GLF_IDENTITY((int(3)), ((int(3))) | (_GLF_IDENTITY((int(3)), ((int(3))) + 0)))), (int(_GLF_IDENTITY((int(3)), ((int(3))) | (_GLF_IDENTITY((int(3)), ((int(3))) + 0))))) << 0))))))))), (_GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), 1 * (int(3))))) - 0)))) >> _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), 0 ^ (int(_GLF_IDENTITY(3, (3) << 0)))))), (_GLF_IDENTITY(_GLF_IDENTITY(((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), 1 * (int(3)))), 0 ^ (_GLF_IDENTITY(_GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), 1 * (int(3)))), (_GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), 1 * (int(3))))) - 0)))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), _GLF_IDENTITY(0 ^ (int(3)), ~ (~ (0 ^ (int(3))))))), min(_GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), _GLF_IDENTITY(0 ^ (int(3)), ~ (~ (0 ^ (int(3))))))), _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), _GLF_IDENTITY(0 ^ (int(3)), ~ (~ (0 ^ (int(3)))))))))), 0 ^ (((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), 1 * (int(3)))), 0 ^ (_GLF_IDENTITY(_GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), 1 * (int(3)))), (_GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), 1 * (int(3))))) - 0)))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), _GLF_IDENTITY(0 ^ (int(3)), ~ (~ (0 ^ (int(3))))))), min(_GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), _GLF_IDENTITY(0 ^ (int(3)), ~ (~ (0 ^ (int(3))))))), _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), _GLF_IDENTITY(0 ^ (int(3)), ~ (~ (0 ^ (int(3)))))))))))), ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), 1 * (int(3)))), 0 ^ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), 1 * (_GLF_IDENTITY(int(3), (int(3)) * 1)))), (_GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), 1 * (_GLF_IDENTITY(int(3), (_GLF_IDENTITY(int(3), clamp(int(3), int(3), int(3)))) | (int(3))))))) ^ 0), (_GLF_IDENTITY(int(_GLF_IDENTITY(3, (_GLF_IDENTITY(3, ~ (~ (_GLF_IDENTITY(3, (3) | (3)))))) | (_GLF_IDENTITY(3, ~ (~ (3)))))), _GLF_IDENTITY(int(3), 1 * (_GLF_IDENTITY(int(3), max(int(3), int(3))))))) - 0)))) >> _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), 0 ^ (int(3)))))), (~ (((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), 1 * (int(3)))), 0 ^ (_GLF_IDENTITY(_GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), 1 * (int(3)))), _GLF_IDENTITY((_GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), 1 * (int(_GLF_IDENTITY(3, (3) | (_GLF_IDENTITY(3, (3) << 0)))))))), clamp(_GLF_IDENTITY((_GLF_IDENTITY(int(3), _GLF_IDENTITY(_GLF_IDENTITY(int(3), 1 * (int(_GLF_IDENTITY(3, (3) | (_GLF_IDENTITY(3, (3) << 0)))))), (_GLF_IDENTITY(int(3), 1 * (int(_GLF_IDENTITY(3, (3) | (_GLF_IDENTITY(3, (3) << 0))))))) << 0))), int(ivec4((_GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), 1 * (int(_GLF_IDENTITY(3, (3) | (_GLF_IDENTITY(3, (3) << 0)))))))), 1, 0, 0))), (_GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), 1 * (int(_GLF_IDENTITY(3, (3) | (_GLF_IDENTITY(3, (3) << 0)))))))), (_GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), 1 * (_GLF_IDENTITY(int(_GLF_IDENTITY(3, (3) | (_GLF_IDENTITY(3, (3) << 0)))), (int(_GLF_IDENTITY(3, (3) | (_GLF_IDENTITY(3, (3) << 0))))) | (int(_GLF_IDENTITY(3, (3) | (_GLF_IDENTITY(3, (3) << 0)))))))))))) - 0)))) >> _GLF_IDENTITY(int(3), _GLF_IDENTITY(_GLF_IDENTITY(int(3), (int(3)) << 0), 0 ^ (int(3))))))) << 0), (_GLF_IDENTITY(~ (((_GLF_IDENTITY(1, max(1, 1)) << _GLF_IDENTITY(_GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), 1 * (int(3)))), 0 ^ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), 1 * (int(3)))), (_GLF_IDENTITY(_GLF_IDENTITY(int(3), 0 + (int(3))), _GLF_IDENTITY(int(3), 1 * (int(3))))) ^ 0), (_GLF_IDENTITY(int(_GLF_IDENTITY(3, _GLF_IDENTITY((_GLF_IDENTITY(3, ~ (~ (_GLF_IDENTITY(3, (3) | (3)))))), ((_GLF_IDENTITY(3, ~ (~ (_GLF_IDENTITY(3, (3) | (3))))))) >> 0) | (_GLF_IDENTITY(3, ~ (~ (3)))))), _GLF_IDENTITY(int(3), 1 * (_GLF_IDENTITY(int(3), max(int(3), int(3))))))) - 0)))) >> _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), 0 ^ (int(3)))))), (~ (((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), 1 * (int(3)))), 0 ^ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), 1 * (int(3)))), (_GLF_IDENTITY(_GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), 1 * (int(3)))), 0 ^ (_GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), 1 * (int(3))))))) / 1), _GLF_IDENTITY((_GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), _GLF_IDENTITY(1, _GLF_IDENTITY(int(_GLF_IDENTITY(ivec2(1, 1), clamp(_GLF_IDENTITY(ivec2(1, 1), clamp(ivec2(1, 1), ivec2(1, 1), ivec2(1, 1))), _GLF_IDENTITY(ivec2(1, 1), clamp(ivec2(1, 1), ivec2(1, 1), ivec2(1, 1))), ivec2(1, 1)))), int(ivec3(int(_GLF_IDENTITY(ivec2(1, 1), clamp(_GLF_IDENTITY(ivec2(1, 1), clamp(ivec2(1, 1), ivec2(1, 1), ivec2(1, 1))), _GLF_IDENTITY(ivec2(1, 1), clamp(ivec2(1, 1), ivec2(1, 1), ivec2(1, 1))), ivec2(1, 1)))), 1, 1)))) * (int(_GLF_IDENTITY(3, (3) | (_GLF_IDENTITY(3, (3) << 0)))))))), _GLF_IDENTITY(clamp(_GLF_IDENTITY((_GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), 1 * (int(_GLF_IDENTITY(3, (3) | (_GLF_IDENTITY(3, (3) << 0)))))))), int(ivec4((_GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), 1 * (int(_GLF_IDENTITY(3, (3) | (_GLF_IDENTITY(3, (3) << 0)))))))), 1, 0, 0))), (_GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), 1 * (int(_GLF_IDENTITY(3, (3) | (_GLF_IDENTITY(3, (3) << 0)))))))), (_GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), 1 * (int(_GLF_IDENTITY(3, (3) | (_GLF_IDENTITY(3, (3) << 0))))))))), clamp(clamp(_GLF_IDENTITY((_GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), 1 * (int(_GLF_IDENTITY(3, (3) | (_GLF_IDENTITY(3, (3) << 0)))))))), int(ivec4((_GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), 1 * (int(_GLF_IDENTITY(3, (3) | (_GLF_IDENTITY(3, (3) << 0)))))))), 1, 0, 0))), (_GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), 1 * (int(_GLF_IDENTITY(3, (3) | (_GLF_IDENTITY(3, (3) << 0)))))))), (_GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), 1 * (int(_GLF_IDENTITY(3, (3) | (_GLF_IDENTITY(3, (3) << 0))))))))), clamp(_GLF_IDENTITY((_GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), 1 * (int(_GLF_IDENTITY(3, (3) | (_GLF_IDENTITY(3, (3) << 0)))))))), int(ivec4((_GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), 1 * (int(_GLF_IDENTITY(3, (3) | (_GLF_IDENTITY(3, (3) << 0)))))))), 1, 0, 0))), (_GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), 1 * (int(_GLF_IDENTITY(3, (3) | (_GLF_IDENTITY(3, (3) << 0)))))))), (_GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), 1 * (int(_GLF_IDENTITY(3, (3) | (_GLF_IDENTITY(3, (3) << 0))))))))), clamp(_GLF_IDENTITY((_GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), 1 * (int(_GLF_IDENTITY(3, (3) | (_GLF_IDENTITY(3, (3) << 0)))))))), int(ivec4((_GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), 1 * (int(_GLF_IDENTITY(3, (3) | (_GLF_IDENTITY(3, (3) << 0)))))))), 1, 0, 0))), (_GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), 1 * (int(_GLF_IDENTITY(3, (3) | (_GLF_IDENTITY(3, (3) << 0)))))))), (_GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), 1 * (int(_GLF_IDENTITY(3, (3) | (_GLF_IDENTITY(3, (3) << 0)))))))))))) - 0)))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(3, (3) ^ (0 >> _GLF_IDENTITY(int(1), int(1))))), _GLF_IDENTITY(int(3), 0 ^ (int(3))))))) << 0)) | (0 << _GLF_IDENTITY(int(0), int(0))))))) * 1)); _GLF_IDENTITY(_injected_loop_counter ++, (true ? _injected_loop_counter ++ : _GLF_FUZZED(_injected_loop_counter))))
        {
         return;
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bvec4(false, false, true, true)))))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          return;
        }
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      barrier();
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) > injectionSwitch.y), ! (_GLF_IDENTITY(! _GLF_IDENTITY(((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)))), true && (((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)))))), (! ((injectionSwitch.x > injectionSwitch.y))) || false))))))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     return;
    }
  }
 uint workgroup_id = gl_WorkGroupID.x;
 do
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
      return;
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           return;
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(injectionSwitch.x, abs(1.0) * (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x))))), float(_GLF_FUZZED(766.700)), bool(false))) > injectionSwitch.y)) ? _GLF_FUZZED(smoothstep(-1444.6889, 156.466, _GLF_IDENTITY(-8113.6042, (-8113.6042) * 1.0))) : _GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(vec4(0.7, 7.8, -870.727, 2.6)[0]))))) > injectionSwitch.y), ((_GLF_IDENTITY(injectionSwitch.x, (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(injectionSwitch.x, abs(1.0) * (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x))))), float(_GLF_FUZZED(766.700)), bool(false))) > injectionSwitch.y)) ? _GLF_FUZZED(smoothstep(-1444.6889, 156.466, _GLF_IDENTITY(-8113.6042, (-8113.6042) * 1.0))) : _GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(vec4(0.7, 7.8, -870.727, 2.6)[0]))))) > injectionSwitch.y)) && true))))
            break;
          }
        }
      }
     else
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(true, bool(bvec4(true, false, false, _GLF_IDENTITY(true, bool(bool(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec4(true, false, true, true)), ! (! (bool(bvec4(true, false, _GLF_IDENTITY(true, (true) && true), true))))))))))))))))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             barrier();
            }
           else
            {
            }
          }
         do
          {
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), bool(bvec4(false, _GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, bool(bvec3(true, false, false)))) || false), false, true), _GLF_IDENTITY(_GLF_IDENTITY(bvec3(bvec3(bvec3(_GLF_IDENTITY(true, _GLF_IDENTITY((_GLF_IDENTITY(true, bool(bvec3(true, false, false)))), true && (_GLF_IDENTITY((_GLF_IDENTITY(true, bool(bvec3(true, false, false)))), false || ((_GLF_IDENTITY(true, bool(bvec3(true, false, false)))))))) || false), false, true))), bvec3(bvec4(bvec3(bvec3(bvec3(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, bool(bvec3(true, false, false)))) || false), false, true))), true))), bvec3(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(bvec3(bvec3(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, bool(bvec3(true, false, false)))) || false), false, true))), bvec3(bvec4(bvec3(bvec3(bvec3(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, bool(bvec3(true, false, false)))) || false), false, true))), true))), _GLF_IDENTITY(bvec3(bvec4(_GLF_IDENTITY(bvec3(bvec3(bvec3(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, bool(bvec3(true, false, false)))) || false), false, true))), bvec3(bvec4(bvec3(bvec3(bvec3(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, bool(bvec3(true, false, false)))) || false), false, true))), true))), false)), bvec3(bvec4(bvec3(bvec4(_GLF_IDENTITY(bvec3(bvec3(bvec3(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, bool(bvec3(true, false, false)))) || false), false, true))), bvec3(bvec4(bvec3(bvec3(bvec3(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, bool(bvec3(true, false, false)))) || false), false, true))), true))), false)), false)))), bvec3(bvec4(_GLF_IDENTITY(bvec3(bvec3(bvec3(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, bool(bvec3(true, false, false)))) || false), false, true))), bvec3(bvec4(bvec3(bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(true, ! (! (true))), (_GLF_IDENTITY(true, bool(bvec3(true, false, false)))) || false), false, true), bvec3(bvec4(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(true, ! (! (true))), (_GLF_IDENTITY(true, bool(bvec3(true, false, false)))) || false), false, true), false))))), true))), true))), true)))))), true, _GLF_IDENTITY(true, ! (! (true))))))))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(mat2x3(_GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x)), 1.0, 1.0, 1.0, 0.0, 1.0))) > injectionSwitch.y))))
                    barrier();
                   barrier();
                  }
                 continue;
                }
               if(_GLF_DEAD(false))
                {
                 if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY((_GLF_DEAD(false)), ! (! ((_GLF_DEAD(false))))) && true))
                  {
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && _GLF_IDENTITY(true, true && _GLF_IDENTITY((true), ((true)) && true)))))
                      barrier();
                    }
                   return;
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   if(_GLF_DEAD(false))
                    continue;
                  }
                 barrier();
                }
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 return;
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-5235.1971), (injectionSwitch)[1]), vec2(_GLF_IDENTITY((injectionSwitch)[0], clamp((injectionSwitch)[0], (injectionSwitch)[0], (injectionSwitch)[0])), _GLF_FUZZED(-130.189)), bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))).x > injectionSwitch.y))))
                barrier();
               if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, false, true)), ! (! (bool(bvec3(false, false, true))))))), false || (_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, false, true)))))))
                {
                 for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
                  {
                   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                    {
                     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                      barrier();
                     if(_GLF_DEAD(false))
                      break;
                     if(_GLF_DEAD(false))
                      return;
                    }
                  }
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(false))
                      return;
                     barrier();
                     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
                      {
                       if(_GLF_DEAD(false))
                        break;
                       continue;
                      }
                    }
                   if(_GLF_DEAD(false))
                    barrier();
                   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(mat3x2(injectionSwitch.y, 1.0, 1.0, _GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, max(1.0, 1.0)), 1.0)), 0.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))))), clamp(float(mat3x2(injectionSwitch.y, 1.0, 1.0, 1.0, 0.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))))), float(mat3x2(injectionSwitch.y, 1.0, 1.0, 1.0, 0.0, round(length(normalize(vec4(1.0, 1.0, 1.0, _GLF_IDENTITY(1.0, 0.0 + (1.0)))))))), float(mat3x2(injectionSwitch.y, 1.0, 1.0, 1.0, 0.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0))))))))))), false || (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), false, false)), true && (bool(bvec3(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), false, false)))))))))
                    return;
                  }
                 else
                  {
                  }
                 break;
                }
               if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(false, false, true), bvec3(bvec3(bvec3(false, false, true))))), bool(bvec3(_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(false, false, true), bvec3(bvec3(bvec3(false, false, true))))), (bool(_GLF_IDENTITY(bvec3(false, false, true), bvec3(bvec3(bvec3(false, false, true)))))) || false), true, false)))), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch))) + vec2(0.0, 0.0)).x > injectionSwitch.y, true && (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mix(vec2(_GLF_FUZZED(-5.5), _GLF_FUZZED(-48.40)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), clamp(mix(vec2(_GLF_FUZZED(-5.5), _GLF_FUZZED(-48.40)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), mix(vec2(_GLF_FUZZED(-5.5), _GLF_FUZZED(-48.40)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), mix(vec2(_GLF_FUZZED(-5.5), _GLF_FUZZED(-48.40)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))).x, max(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(_GLF_IDENTITY(8.8, max(_GLF_IDENTITY(8.8, min(8.8, 8.8)), 8.8))))))), max(_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x, min(injectionSwitch.x, injectionSwitch.x)), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), _GLF_IDENTITY((true ? injectionSwitch.x : _GLF_FUZZED(8.8)), min((true ? injectionSwitch.x : _GLF_FUZZED(8.8)), (true ? injectionSwitch.x : _GLF_FUZZED(8.8))))))), _GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(3.3), _GLF_FUZZED(-58.84)), vec2((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch)[1], (false ? _GLF_FUZZED(-9.8) : (injectionSwitch)[1]))), bvec2(true, true))).x)), _GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(8.8))))))))) > injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(8.8))))), min(_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, false || (true)))) ? injectionSwitch.x : _GLF_FUZZED(8.8))))), _GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(vec4(1508.7958, -2200.1019, 439.838, -9979.2646).w) : injectionSwitch.x)))), _GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(8.8))))))), _GLF_IDENTITY(float(mat4x3(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(8.8))))), min(_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).x, (true ? injectionSwitch.x : _GLF_FUZZED(8.8))))), _GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(8.8))))))), 1.0, _GLF_IDENTITY(0.0, min(0.0, 0.0)), 1.0, 0.0, 0.0, 0.0, sin(0.0), 1.0, 0.0, 1.0, 0.0)), 0.0 + (float(mat4x3(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(8.8))))), min(_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(-0.0) : injectionSwitch.x)))), _GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(8.8))))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(8.8))))), (_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).x, (true ? injectionSwitch.x : _GLF_FUZZED(8.8)))))) - 0.0))), 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, sin(0.0), 1.0, 0.0, 1.0, 0.0))))), max(_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(8.8))))), _GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).x, min(injectionSwitch.x, injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(_GLF_IDENTITY(8.8, max(_GLF_IDENTITY(8.8, clamp(_GLF_IDENTITY(8.8, (8.8) / 1.0), 8.8, 8.8)), 8.8))))))))))) > injectionSwitch.y))))))))
                barrier();
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).x > injectionSwitch.y))))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   continue;
                  }
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   barrier();
                  }
                }
               if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), (! (_GLF_DEAD(false))) || false)))), (! (_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), (! (_GLF_DEAD(false))) || false))))) && true))))
                break;
               for(int _injected_loop_counter = (0 ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                {
                 if(_GLF_DEAD(false))
                  barrier();
                }
               if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(((true ? 1.9 : 6.5) - -5.8))), bool(false))) > injectionSwitch.y)))), bool(bool(_GLF_DEAD(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(vec4(7.5, -35.31, -8.9, 4.1).s)), float(injectionSwitch.y), bool(true))), injectionSwitch.y))))))))))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 break;
                }
              }
             if(_GLF_DEAD(false))
              break;
             if(_GLF_DEAD(false))
              return;
             if(_GLF_DEAD(false))
              return;
             do
              {
               if(_GLF_DEAD(false))
                break;
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))))
                  barrier();
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   barrier();
                  }
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
             for(int _injected_loop_counter = (int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 << _GLF_IDENTITY(_GLF_IDENTITY(int(8), 0 + (int(8))), int(8)))); _injected_loop_counter --)
              {
               if(_GLF_DEAD(false))
                barrier();
              }
             if(_GLF_DEAD(false))
              continue;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              break;
             do
              {
               return;
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), _GLF_IDENTITY((true ? injectionSwitch : _GLF_FUZZED(injectionSwitch)), vec2(0.0, 0.0) + (_GLF_IDENTITY((true ? injectionSwitch : _GLF_FUZZED(injectionSwitch)), max((true ? injectionSwitch : _GLF_FUZZED(injectionSwitch)), (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))))))).x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * _GLF_IDENTITY(_GLF_IDENTITY(mat2(1.0), mat2(mat4x2(_GLF_IDENTITY(mat2(1.0), _GLF_IDENTITY(mat2(mat4x2(mat2(1.0))), mat2(0.0, 0.0, 0.0, 0.0) + (_GLF_IDENTITY(mat2(mat4x2(mat2(1.0))), mat2(mat3(mat2(mat4x2(mat2(1.0)))))))))))), transpose(transpose(mat2(1.0)))), min((injectionSwitch) * _GLF_IDENTITY(mat2(1.0), transpose(transpose(mat2(1.0)))), (injectionSwitch) * _GLF_IDENTITY(mat2(1.0), transpose(transpose(mat2(1.0))))))).y, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-8379.7459) : injectionSwitch.y))) || false))), true && (_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), _GLF_IDENTITY((true ? injectionSwitch : _GLF_FUZZED(injectionSwitch)), vec2(0.0, 0.0) + (_GLF_IDENTITY(_GLF_IDENTITY((true ? injectionSwitch : _GLF_FUZZED(injectionSwitch)), max((true ? injectionSwitch : _GLF_FUZZED(injectionSwitch)), (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch)))), min(_GLF_IDENTITY((true ? injectionSwitch : _GLF_FUZZED(injectionSwitch)), max((true ? injectionSwitch : _GLF_FUZZED(injectionSwitch)), (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch)))), _GLF_IDENTITY((true ? injectionSwitch : _GLF_FUZZED(injectionSwitch)), max((true ? injectionSwitch : _GLF_FUZZED(injectionSwitch)), (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))))))))).x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch) * _GLF_IDENTITY(_GLF_IDENTITY(mat2(1.0), mat2(mat4x2(_GLF_IDENTITY(mat2(1.0), mat2(mat4x2(mat2(1.0))))))), transpose(transpose(mat2(1.0)))), _GLF_IDENTITY(vec2(mat4x3(_GLF_IDENTITY((injectionSwitch) * _GLF_IDENTITY(_GLF_IDENTITY(mat2(1.0), mat2(mat4x2(_GLF_IDENTITY(mat2(1.0), mat2(mat4x2(mat2(1.0))))))), transpose(transpose(mat2(1.0)))), clamp(_GLF_IDENTITY((injectionSwitch) * _GLF_IDENTITY(_GLF_IDENTITY(mat2(1.0), mat2(mat4x2(_GLF_IDENTITY(mat2(1.0), mat2(mat4x2(mat2(1.0))))))), transpose(transpose(mat2(1.0)))), vec2(1.0, 1.0) * ((injectionSwitch) * _GLF_IDENTITY(_GLF_IDENTITY(mat2(1.0), mat2(mat4x2(_GLF_IDENTITY(mat2(1.0), mat2(mat4x2(mat2(1.0))))))), transpose(transpose(mat2(1.0)))))), (injectionSwitch) * _GLF_IDENTITY(_GLF_IDENTITY(mat2(1.0), mat2(mat4x2(_GLF_IDENTITY(mat2(1.0), mat2(mat4x2(mat2(1.0))))))), transpose(transpose(mat2(1.0)))), (injectionSwitch) * _GLF_IDENTITY(_GLF_IDENTITY(mat2(1.0), mat2(mat4x2(_GLF_IDENTITY(mat2(1.0), mat2(mat4x2(mat2(1.0))))))), transpose(transpose(mat2(1.0)))))), 0.0, 1.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0, abs(cos(0.0)), length(vec2(0.0, 0.0)), 1.0, sin(0.0))), max(_GLF_IDENTITY(vec2(mat4x3(_GLF_IDENTITY((injectionSwitch) * _GLF_IDENTITY(_GLF_IDENTITY(mat2(1.0), mat2(mat4x2(_GLF_IDENTITY(mat2(1.0), mat2(mat4x2(mat2(1.0))))))), transpose(transpose(mat2(1.0)))), clamp(_GLF_IDENTITY((injectionSwitch) * _GLF_IDENTITY(_GLF_IDENTITY(mat2(1.0), mat2(mat4x2(_GLF_IDENTITY(mat2(1.0), mat2(mat4x2(mat2(1.0))))))), transpose(transpose(mat2(1.0)))), vec2(1.0, 1.0) * ((injectionSwitch) * _GLF_IDENTITY(_GLF_IDENTITY(mat2(1.0), mat2(mat4x2(_GLF_IDENTITY(mat2(1.0), mat2(mat4x2(mat2(1.0))))))), transpose(transpose(mat2(1.0)))))), (injectionSwitch) * _GLF_IDENTITY(_GLF_IDENTITY(mat2(1.0), mat2(mat4x2(_GLF_IDENTITY(mat2(1.0), mat2(mat4x2(mat2(1.0))))))), transpose(transpose(mat2(1.0)))), (injectionSwitch) * _GLF_IDENTITY(_GLF_IDENTITY(mat2(1.0), mat2(mat4x2(_GLF_IDENTITY(mat2(1.0), mat2(mat4x2(mat2(1.0))))))), transpose(transpose(mat2(1.0)))))), 0.0, 1.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0, abs(cos(0.0)), length(vec2(0.0, 0.0)), 1.0, sin(0.0))), (vec2(mat4x3(_GLF_IDENTITY((injectionSwitch) * _GLF_IDENTITY(_GLF_IDENTITY(mat2(1.0), mat2(mat4x2(_GLF_IDENTITY(mat2(1.0), mat2(mat4x2(mat2(1.0))))))), transpose(transpose(mat2(1.0)))), clamp(_GLF_IDENTITY((injectionSwitch) * _GLF_IDENTITY(_GLF_IDENTITY(mat2(1.0), mat2(mat4x2(_GLF_IDENTITY(mat2(1.0), mat2(mat4x2(mat2(1.0))))))), transpose(transpose(mat2(1.0)))), vec2(1.0, 1.0) * ((injectionSwitch) * _GLF_IDENTITY(_GLF_IDENTITY(mat2(1.0), mat2(mat4x2(_GLF_IDENTITY(mat2(1.0), mat2(mat4x2(mat2(1.0))))))), transpose(transpose(mat2(1.0)))))), (injectionSwitch) * _GLF_IDENTITY(_GLF_IDENTITY(mat2(1.0), mat2(mat4x2(_GLF_IDENTITY(mat2(1.0), mat2(mat4x2(mat2(1.0))))))), transpose(transpose(mat2(1.0)))), (injectionSwitch) * _GLF_IDENTITY(_GLF_IDENTITY(mat2(1.0), mat2(mat4x2(_GLF_IDENTITY(mat2(1.0), mat2(mat4x2(mat2(1.0))))))), transpose(transpose(mat2(1.0)))))), 0.0, 1.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0, abs(cos(0.0)), length(vec2(0.0, 0.0)), 1.0, sin(0.0)))) / vec2(1.0, 1.0)), vec2(mat4x3(_GLF_IDENTITY((injectionSwitch) * _GLF_IDENTITY(_GLF_IDENTITY(mat2(1.0), mat2(mat4x2(_GLF_IDENTITY(mat2(1.0), mat2(mat4x2(mat2(1.0))))))), transpose(transpose(mat2(1.0)))), clamp(_GLF_IDENTITY((injectionSwitch) * _GLF_IDENTITY(_GLF_IDENTITY(mat2(1.0), mat2(mat4x2(_GLF_IDENTITY(mat2(1.0), mat2(mat4x2(mat2(1.0))))))), transpose(transpose(mat2(1.0)))), vec2(1.0, 1.0) * ((injectionSwitch) * _GLF_IDENTITY(_GLF_IDENTITY(mat2(1.0), mat2(mat4x2(_GLF_IDENTITY(mat2(1.0), mat2(mat4x2(mat2(1.0))))))), transpose(transpose(mat2(1.0)))))), (injectionSwitch) * _GLF_IDENTITY(_GLF_IDENTITY(mat2(1.0), mat2(mat4x2(_GLF_IDENTITY(mat2(1.0), mat2(mat4x2(mat2(1.0))))))), transpose(transpose(mat2(1.0)))), (injectionSwitch) * _GLF_IDENTITY(_GLF_IDENTITY(mat2(1.0), mat2(mat4x2(_GLF_IDENTITY(mat2(1.0), mat2(mat4x2(mat2(1.0))))))), transpose(transpose(mat2(1.0)))))), 0.0, 1.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0, abs(cos(0.0)), length(vec2(0.0, 0.0)), 1.0, sin(0.0)))))), min((injectionSwitch) * _GLF_IDENTITY(mat2(1.0), transpose(transpose(mat2(1.0)))), (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch))) * _GLF_IDENTITY(mat2(1.0), transpose(transpose(mat2(1.0))))))).y, ! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), injectionSwitch, injectionSwitch)), abs(vec2(1.0, 1.0)) * (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), injectionSwitch, injectionSwitch)), (_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), injectionSwitch, injectionSwitch))) * vec2(1.0, 1.0)))), _GLF_IDENTITY((true ? injectionSwitch : _GLF_FUZZED(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)))), vec2(0.0, 0.0) + (_GLF_IDENTITY(_GLF_IDENTITY((true ? injectionSwitch : _GLF_FUZZED(injectionSwitch)), vec2(vec3(_GLF_IDENTITY((true ? injectionSwitch : _GLF_FUZZED(injectionSwitch)), mix(vec2(((true ? injectionSwitch : _GLF_FUZZED(injectionSwitch)))[0], _GLF_FUZZED(-7.2)), vec2(_GLF_FUZZED((8257.8441 - 821.740)), ((true ? injectionSwitch : _GLF_FUZZED(injectionSwitch)))[1]), bvec2(false, true))), round(length(normalize(1.0)))))), max((true ? injectionSwitch : _GLF_FUZZED(injectionSwitch)), (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))))))).x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * _GLF_IDENTITY(_GLF_IDENTITY(mat2(1.0), mat2(mat4x2(_GLF_IDENTITY(mat2(1.0), mat2(mat4x2(mat2(1.0))))))), transpose(transpose(mat2(1.0)))), min((injectionSwitch) * _GLF_IDENTITY(mat2(1.0), transpose(transpose(mat2(1.0)))), (injectionSwitch) * _GLF_IDENTITY(mat2(1.0), transpose(transpose(mat2(1.0))))))).y))), _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-8379.7459) : _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, bool(bvec4(false, true, false, false))), true, true, false))) ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)).y))), bool(bvec3(_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-8379.7459) : _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, bool(bvec4(false, true, false, false))), true, true, false))) ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)).y))), ! (! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-8379.7459) : _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, bool(bvec4(false, true, false, false))), true, true, false))) ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)).y)))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))) || false)))))));
         if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
          return;
         if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
            return;
           if(_GLF_DEAD(false))
            barrier();
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              continue;
             return;
            }
          }
        }
       else
        {
         if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
          return;
        }
      }
    }
   else
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(! (false), bool(bvec4(! (false), true, true, true)))), false || (! (_GLF_IDENTITY(! (false), bool(bvec4(! (false), true, true, true))))))))))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) || false)))
        barrier();
       continue;
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 do
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bvec3(false, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
      {
      }
     else
      {
       for(int _injected_loop_counter = 1; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != 0, false || (_injected_loop_counter != 0))), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 0)), true && (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, clamp(0, 0, 0)))))))); _injected_loop_counter --)
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           return;
          }
         else
          {
          }
        }
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 uint workgroup_base = workgroup_size * workgroup_id;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   do
    {
     return;
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, float(mat4(injectionSwitch.x, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), sqrt(0.0)))), injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))));
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, _GLF_IDENTITY((true) || false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || ((true) || false)))))) || false), (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
  }
 uint virtual_gid = workgroup_base + _GLF_IDENTITY(subgroup_id, (false ? _GLF_FUZZED(workgroup_base) : subgroup_id)) * subgroup_size + subgroup_local_id;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 uint next_virtual_gid = _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, clamp(workgroup_base, _GLF_IDENTITY(workgroup_base, 0u ^ (_GLF_IDENTITY(workgroup_base, (workgroup_base) << 0u))), workgroup_base)), (true ? workgroup_base : _GLF_FUZZED(uint(asin(-730.062))))), 0u | (_GLF_IDENTITY(workgroup_base, (_GLF_IDENTITY(true ? workgroup_base : _GLF_FUZZED(uint(asin(-730.062))), (true ? workgroup_base : _GLF_FUZZED(uint(asin(_GLF_IDENTITY(-730.062, float(mat3x2(-730.062, 0.0, 0.0, 0.0, 1.0, 1.0))))))) * 1u))))) + subgroup_id * subgroup_size + (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, max(subgroup_local_id, subgroup_local_id)))) + _GLF_IDENTITY(1, (1) ^ 0)) % subgroup_size, (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) ^ 0u)) | (_GLF_IDENTITY(subgroup_local_id, (true ? subgroup_local_id : _GLF_FUZZED(subgroup_local_id))))) + _GLF_IDENTITY(1, (1) ^ 0), 0u ^ (_GLF_IDENTITY(subgroup_local_id + _GLF_IDENTITY(1, (1) ^ 0), max(subgroup_local_id + _GLF_IDENTITY(_GLF_IDENTITY(1, (1) ^ 0), 0 ^ (_GLF_IDENTITY(1, (1) ^ 0))), subgroup_local_id + _GLF_IDENTITY(1, (1) ^ 0)))))) % subgroup_size, max(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id + _GLF_IDENTITY(1, (1) ^ 0), 0u ^ (_GLF_IDENTITY(subgroup_local_id + _GLF_IDENTITY(1, (1) ^ 0), max(subgroup_local_id + _GLF_IDENTITY(_GLF_IDENTITY(1, (1) ^ 0), 0 ^ (_GLF_IDENTITY(1, (1) ^ 0))), subgroup_local_id + _GLF_IDENTITY(1, (1) ^ 0)))))) % subgroup_size, 0u ^ ((_GLF_IDENTITY(subgroup_local_id + _GLF_IDENTITY(_GLF_IDENTITY(1, (1) ^ 0), (false ? _GLF_FUZZED((+ 67565)) : _GLF_IDENTITY(_GLF_IDENTITY(1, (1) ^ 0), max(_GLF_IDENTITY(1, (1) ^ 0), _GLF_IDENTITY(1, (1) ^ 0))))), 0u ^ (_GLF_IDENTITY(subgroup_local_id + _GLF_IDENTITY(1, (1) ^ 0), max(subgroup_local_id + _GLF_IDENTITY(_GLF_IDENTITY(1, (1) ^ 0), 0 ^ (_GLF_IDENTITY(1, (1) ^ 0))), subgroup_local_id + _GLF_IDENTITY(1, (1) ^ 0)))))) % subgroup_size)), (_GLF_IDENTITY(subgroup_local_id + _GLF_IDENTITY(1, (1) ^ 0), 0u ^ (_GLF_IDENTITY(subgroup_local_id + _GLF_IDENTITY(1, (1) ^ 0), max(subgroup_local_id + _GLF_IDENTITY(_GLF_IDENTITY(1, (1) ^ 0), 0 ^ (_GLF_IDENTITY(1, (1) ^ 0))), subgroup_local_id + _GLF_IDENTITY(1, (1) ^ 0)))))) % subgroup_size)), (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id + _GLF_IDENTITY(1, (1) ^ 0), _GLF_IDENTITY(0u, (0u) >> 0u) ^ _GLF_IDENTITY((subgroup_local_id + _GLF_IDENTITY(1, (1) ^ 0)), clamp((subgroup_local_id + _GLF_IDENTITY(1, (1) ^ 0)), _GLF_IDENTITY((subgroup_local_id + _GLF_IDENTITY(1, (1) ^ 0)), max((subgroup_local_id + _GLF_IDENTITY(1, (1) ^ 0)), (subgroup_local_id + _GLF_IDENTITY(1, (1) ^ 0)))), (subgroup_local_id + _GLF_IDENTITY(1, (1) ^ 0)))))) % subgroup_size, clamp((subgroup_local_id + _GLF_IDENTITY(1, (1) ^ 0)) % subgroup_size, (subgroup_local_id + _GLF_IDENTITY(1, (1) ^ 0)) % subgroup_size, (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | 0u) + _GLF_IDENTITY(1, (1) ^ 0)) % subgroup_size))) << 0u)) << 0u));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), _GLF_IDENTITY(false || (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, float(vec3(injectionSwitch.y, 1.0, sin(0.0)))))))), true && (false || (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, float(vec3(injectionSwitch.y, 1.0, sin(0.0))))))))))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     return;
    }
   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false)) && true))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          return;
        }
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         return;
        }
      }
    }
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  barrier();
 _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(buf[virtual_gid] = 1, (buf[virtual_gid] = _GLF_IDENTITY(1, int(int(1)))) / 1u), (_GLF_IDENTITY(buf[virtual_gid] = 1, (buf[virtual_gid] = _GLF_IDENTITY(1, int(int(1)))) / 1u)) >> (0u >> _GLF_IDENTITY(uint(1u), uint(1u)))), (1u ^ 1u) | (_GLF_IDENTITY(_GLF_IDENTITY(buf[virtual_gid] = 1, (buf[virtual_gid] = 1) / _GLF_IDENTITY(1u, (1u) + _GLF_IDENTITY(uint(_GLF_ZERO(0.0, injectionSwitch.x)), (uint(_GLF_ZERO(0.0, injectionSwitch.x))) >> (0u >> _GLF_IDENTITY(uint(2u), uint(2u)))))), (_GLF_IDENTITY(buf[virtual_gid] = 1, (buf[virtual_gid] = 1) / 1u)) / 1u)));
 if(_GLF_DEAD(false))
  return;
 if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false || (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, mix(vec2((_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])))[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED((+ -77.13)), _GLF_IDENTITY(_GLF_FUZZED(-908.740), clamp(_GLF_FUZZED(-908.740), _GLF_FUZZED(-908.740), _GLF_FUZZED(-908.740)))), bvec2(false, false))).x < injectionSwitch.y))), bool(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, float(float(injectionSwitch.x))) < injectionSwitch.y))), ! (! (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(5027.4935), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(48.79)), bvec2(true, false))).y)))))), false, false))))), bool(bvec4(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), _GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, (false) || false))))) || (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bool(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, bool(bvec4(injectionSwitch.x < injectionSwitch.y, true, false, true)))))), ! (! (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), false, false))))), true, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           barrier();
          }
         else
          {
          }
        }
       return;
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))))))
        barrier();
       return;
      }
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     do
      {
       for(int _injected_loop_counter = int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], max(injectionSwitch[1], injectionSwitch[1])))).x)); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY((_GLF_IDENTITY(1 | 1, ~ (_GLF_IDENTITY(~ (1 | 1), min(_GLF_IDENTITY(~ (1 | 1), min(~ (1 | 1), ~ (1 | 1))), ~ (1 | 1)))))), _GLF_IDENTITY(_GLF_IDENTITY(((1 | 1)), (true ? ((1 | 1)) : _GLF_FUZZED(680))), _GLF_IDENTITY(int(ivec2(_GLF_IDENTITY(((1 | 1)), (true ? ((1 | 1)) : _GLF_FUZZED(680))), 1)), clamp(int(ivec2(_GLF_IDENTITY(((1 | 1)), (true ? ((1 | 1)) : _GLF_FUZZED(680))), 1)), int(ivec2(_GLF_IDENTITY(((1 | 1)), (true ? ((1 | 1)) : _GLF_FUZZED(680))), 1)), int(ivec2(_GLF_IDENTITY(((1 | 1)), (true ? ((1 | 1)) : _GLF_FUZZED(680))), 1))))) | ((1 | 1)))), bool(bool(_GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY((1 | 1), ((1 | 1)) - 0))))); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec2(false, true))), true && (_GLF_IDENTITY(false, bool(bvec2(false, true)))))))
            break;
           continue;
          }
         if(_GLF_IDENTITY(subgroup_local_id, ~ _GLF_IDENTITY((_GLF_IDENTITY(~ (subgroup_local_id), max(~ (subgroup_local_id), ~ (subgroup_local_id)))), ((_GLF_IDENTITY(~ (subgroup_local_id), max(~ (subgroup_local_id), ~ (subgroup_local_id))))) << 0u)) + _GLF_IDENTITY(1, (1) | (1)) < _GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((subgroup_size), (0u | 0u) | (_GLF_IDENTITY((subgroup_size), 0u ^ ((subgroup_size))))) | (subgroup_size))) | (subgroup_size)))
          {
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))), false || (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))), ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))))) && true)))))) || false), false || (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).y, ! (! (injectionSwitch.x > injectionSwitch.y)))), false || (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))), ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y))))))) && true)))))) || false))))
              {
              }
             else
              {
               if(_GLF_DEAD(false))
                barrier();
               return;
              }
            }
           if(_GLF_DEAD(false))
            barrier();
           int i = 0;
           if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
            {
             do
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
             return;
            }
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             barrier();
            }
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, determinant(mat2(1.0, 0.0, 0.0, 1.0)) * (injectionSwitch.y)))), ! (! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(injectionSwitch.x > injectionSwitch.y)))))))))))))
              continue;
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), _GLF_IDENTITY(bool(bvec4((injectionSwitch.x < injectionSwitch.y), _GLF_FALSE(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(false, (false) && true))), (injectionSwitch.x > injectionSwitch.y)), false, true)), bool(_GLF_IDENTITY(bvec3(bool(bvec4(_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ((injectionSwitch.x < injectionSwitch.y)) || false)) && true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true)), true, false), bvec3(bvec3(bvec3(bool(bvec4((injectionSwitch.x < injectionSwitch.y), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true)), true, false))))))))))
              {
               atomicStore(buf[next_virtual_gid], uint(2), 4, 64, 4);
              }
             else
              {
               if(_GLF_DEAD(false))
                barrier();
              }
            }
           else
            {
            }
          }
         else
          {
           if(_GLF_DEAD(false))
            break;
           if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bool(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))))))))
            return;
           if(_GLF_DEAD(false))
            barrier();
           atomicStore(buf[_GLF_IDENTITY(next_virtual_gid, min(next_virtual_gid, next_virtual_gid))], _GLF_IDENTITY(uint(2), ~ (_GLF_IDENTITY(~ _GLF_IDENTITY((uint(2)), ~ (~ ((uint(2))))), max(~ _GLF_IDENTITY((uint(2)), ~ (~ ((uint(2))))), _GLF_IDENTITY(~ _GLF_IDENTITY(_GLF_IDENTITY((uint(2)), (_GLF_IDENTITY((uint(2)), clamp((uint(2)), (uint(2)), (uint(2))))) | 0u), ~ (~ ((uint(2))))), (~ _GLF_IDENTITY(_GLF_IDENTITY((uint(2)), (_GLF_IDENTITY((uint(2)), clamp((uint(2)), (uint(2)), (uint(2))))) | 0u), ~ (~ ((uint(2)))))) << 0u))))), 4, 64, 4);
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            return;
           do
            {
             do
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                    {
                     if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
                      {
                       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                        {
                         barrier();
                        }
                      }
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                      }
                     else
                      {
                       if(_GLF_DEAD(false))
                        barrier();
                      }
                     barrier();
                    }
                   return;
                   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)))
                    barrier();
                  }
                }
               else
                {
                }
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  return;
                 if(_GLF_DEAD(false))
                  barrier();
                 barrier();
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
           if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec3(false, false, false)))) || false)), (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec3(false, false, false)))) || false)), false || (_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec3(false, false, false)))) || false))))) && true))
            continue;
           if(_GLF_DEAD(false))
            continue;
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, false || (false))))), bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), false || (_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), (_GLF_IDENTITY(! (! (false)), bool(bvec4(! (! (false)), true, false, true)))) || false))))))), true, true))), false || (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(false, ! (! (false))), true, true)), true && (bool(bvec3(_GLF_IDENTITY(false, ! (! (false))), true, true)))))))));
    }
   else
    {
    }
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(vec3(injectionSwitch, 1.0)))) / vec2(1.0, 1.0)).x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec4(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0), injectionSwitch.y)), true, true, true)), bool(bool(bool(bvec4(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0), injectionSwitch.y)), true, true, true))))), false || (bool(bvec4(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY((injectionSwitch.y), (true ? (injectionSwitch.y) : _GLF_FUZZED(371.994))) / 1.0), injectionSwitch.y)), true, true, true)))))) || false)))))), (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bvec4(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, float(mat4x2(injectionSwitch.y, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0)))) / 1.0), injectionSwitch.y)), true, true, true)), false || (bool(bvec4(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0), injectionSwitch.y)), true, true, true)))))) || false)))))), true && (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(4.5))))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(injectionSwitch.x > injectionSwitch.y, true, _GLF_IDENTITY(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (true)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bvec4(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))) / 1.0), _GLF_IDENTITY(injectionSwitch.y, 1.0 * (_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0))))), true, true, _GLF_IDENTITY(true, (true) || false))), false || (bool(bvec4(_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0), injectionSwitch.y)), mix(float(_GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0), injectionSwitch.y))), float(_GLF_FUZZED(783.364)), bool(false))), true, true, true)))))) || false))))))))) || false)), _GLF_IDENTITY(bool(bvec2(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0) * _GLF_IDENTITY((injectionSwitch), min((injectionSwitch), (injectionSwitch))), (true ? mat2(1.0) * (injectionSwitch) : _GLF_IDENTITY(_GLF_FUZZED(injectionSwitch), clamp(_GLF_FUZZED(injectionSwitch), _GLF_FUZZED(injectionSwitch), _GLF_FUZZED(injectionSwitch)))))).x, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0) * _GLF_IDENTITY((injectionSwitch), min((injectionSwitch), (injectionSwitch))), (true ? mat2(1.0) * (injectionSwitch) : _GLF_FUZZED(injectionSwitch)))), (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0) * _GLF_IDENTITY((injectionSwitch), min((injectionSwitch), (injectionSwitch))), (true ? mat2(1.0) * (injectionSwitch) : _GLF_FUZZED(injectionSwitch))))) * mat2(1.0)).x) - 0.0) > injectionSwitch.y, ! (! _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(injectionSwitch.x > injectionSwitch.y, true, true, true)))) || false)), bool(bvec3(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(_GLF_IDENTITY(mat4x2(injectionSwitch.x, abs(0.0), 0.0, 0.0, 1.0, 1.0, 0.0, 1.0), (mat4x2(injectionSwitch.x, abs(0.0), 0.0, 0.0, 1.0, 1.0, 0.0, 1.0)) - mat4x2(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))), max(float(_GLF_IDENTITY(mat4x2(injectionSwitch.x, abs(0.0), 0.0, 0.0, 1.0, 1.0, 0.0, 1.0), (mat4x2(injectionSwitch.x, abs(0.0), 0.0, 0.0, 1.0, 1.0, 0.0, 1.0)) - mat4x2(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))), float(_GLF_IDENTITY(mat4x2(injectionSwitch.x, abs(0.0), 0.0, 0.0, 1.0, 1.0, 0.0, 1.0), (mat4x2(injectionSwitch.x, abs(0.0), 0.0, 0.0, 1.0, 1.0, 0.0, 1.0)) - mat4x2(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))))) > injectionSwitch.y, bool(bvec4(injectionSwitch.x > injectionSwitch.y, true, true, true)))) || false)), bool(bool((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y))), bool(bvec4(injectionSwitch.x > injectionSwitch.y, true, true, true)))) || false))))), true, true))), true && (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(injectionSwitch.x > injectionSwitch.y, true, true, _GLF_IDENTITY(true, bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), false || (! (true)))))), (_GLF_IDENTITY(bool(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), false || (! (true)))))), ! (! (bool(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), false || (! (true)))))))))) || false))))))) || false)), bool(bvec3(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x > injectionSwitch.y, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(_GLF_IDENTITY(mat4x2(injectionSwitch.x, abs(0.0), 0.0, 0.0, 1.0, 1.0, 0.0, 1.0), (mat4x2(injectionSwitch.x, abs(0.0), 0.0, 0.0, 1.0, 1.0, 0.0, 1.0)) - mat4x2(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))), max(float(_GLF_IDENTITY(mat4x2(injectionSwitch.x, abs(0.0), 0.0, 0.0, 1.0, 1.0, 0.0, 1.0), (mat4x2(injectionSwitch.x, _GLF_IDENTITY(abs(0.0), min(abs(0.0), _GLF_IDENTITY(abs(0.0), mix(float(abs(0.0)), float(_GLF_FUZZED(-28.96)), bool(false))))), 0.0, 0.0, 1.0, 1.0, 0.0, 1.0)) - mat4x2(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))), float(_GLF_IDENTITY(mat4x2(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x, abs(0.0), 0.0, 0.0, 1.0, 1.0, 0.0, 1.0), (mat4x2(injectionSwitch.x, abs(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0))), 0.0, 0.0, 1.0, 1.0, _GLF_IDENTITY(0.0, max(0.0, 0.0)), 1.0)) - mat4x2(0.0, 0.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, min(0.0, 0.0)), 0.0, 0.0)))))) > injectionSwitch.y, bool(bvec4(injectionSwitch.x > injectionSwitch.y, true, true, true)))) || false)), bool(bool((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y))), bool(bvec4(injectionSwitch.x > injectionSwitch.y, true, true, true)))) || false))))), true, true)))))))))), true)), (bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(injectionSwitch.x > injectionSwitch.y, true, true, true)))) || false)))), true && (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(31.80), _GLF_FUZZED(5798.2015)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))).y, bool(bvec4(injectionSwitch.x > injectionSwitch.y, true, true, true)))) || false)))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(injectionSwitch.x > injectionSwitch.y, true, true, true)))) || false)))), true && (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(31.80), _GLF_FUZZED(5798.2015)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))).y, bool(bvec4(injectionSwitch.x > injectionSwitch.y, true, true, true)))) || false))))))), (! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(injectionSwitch.x > injectionSwitch.y, true, true, true))), bool(bool(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(injectionSwitch.x > injectionSwitch.y, true, true, true))))))) || false)))), true && (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(31.80), _GLF_FUZZED(5798.2015)), vec2((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY((injectionSwitch), min((injectionSwitch), (injectionSwitch))) : _GLF_FUZZED(vec2(-7498.5477, 4128.5065))))[1]), bvec2(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(694.016))))), true))).y, bool(bvec4(injectionSwitch.x > injectionSwitch.y, true, true, true)))) || false)))))))) && true)))))), ! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(injectionSwitch.x > injectionSwitch.y, true, true, true)))) || false)))), true && (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(31.80), _GLF_FUZZED(5798.2015)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))).y, bool(bvec4(injectionSwitch.x > injectionSwitch.y, true, true, true)))) || false)))))))), (_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec3(false, false, true))), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(injectionSwitch.x > injectionSwitch.y, true, false, true))), bool(bvec4(injectionSwitch.x > injectionSwitch.y, true, true, true)))) || false)))), true && (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(31.80), _GLF_FUZZED(5798.2015)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))).y, bool(bvec4(injectionSwitch.x > injectionSwitch.y, true, true, _GLF_IDENTITY(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (true)))))) || false))))))))) || false))), ! (! (! (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y, true, true, true)))) || false)))), true && (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(31.80), _GLF_FUZZED(5798.2015)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))).y, bool(bvec4(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (true ? _GLF_IDENTITY(injectionSwitch.y, _GLF_ONE(1.0, injectionSwitch.y) * (injectionSwitch.y)) : _GLF_FUZZED(887.600))), true, true, true)))) || _GLF_IDENTITY(false, ! (! (false))), _GLF_IDENTITY(! (! ((_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(31.80), _GLF_FUZZED(5798.2015)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)))), true))).y, bool(bvec4(injectionSwitch.x > injectionSwitch.y, true, true, true)))) || false)), bool(bvec2(_GLF_IDENTITY(! (! ((_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(31.80), _GLF_FUZZED(5798.2015)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)))), true))).y, bool(bvec4(injectionSwitch.x > injectionSwitch.y, true, true, true)))) || false)), true && (! (! ((_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(31.80), _GLF_FUZZED(5798.2015)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)))), true))).y, bool(bvec4(injectionSwitch.x > injectionSwitch.y, true, true, true)))) || false)))), false))))))))))))))))))), true))) && true)))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(366.701) : injectionSwitch.x)))) > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
  }
 if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (injectionSwitch.x > injectionSwitch.y)))) || false), (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))) && true))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  return;
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
