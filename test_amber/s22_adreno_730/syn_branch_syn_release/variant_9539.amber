#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_24 {
 int i;
 bvec4 _f0;
} ;

struct _GLF_struct_21 {
 mat2x3 _f0;
 vec2 _f1;
 vec4 _f2;
 ivec3 _f3;
 mat3 _f4;
 uvec3 _f5;
 ivec2 _f6;
} ;

struct _GLF_struct_20 {
 ivec2 _f0;
 mat3 _f1;
 float _f2;
 mat4x2 _f3;
} ;

struct _GLF_struct_19 {
 float _f0;
 mat3x4 _f1;
 uvec4 _f2;
 ivec2 _f3;
 bvec3 _f4;
 float _f5;
} ;

struct _GLF_struct_22 {
 _GLF_struct_19 _f0;
 int _f1;
 uint workgroup_id;
 _GLF_struct_20 _f2;
 _GLF_struct_21 _f3;
} ;

struct _GLF_struct_23 {
 _GLF_struct_22 _f0;
 mat4x2 _f1;
} ;

struct _GLF_struct_17 {
 mat3x2 _f0;
 mat4 _f1;
 mat3x2 _f2;
 vec4 _f3;
} ;

struct _GLF_struct_15 {
 int _f0;
 mat2 _f1;
 bvec4 _f2;
 uint _f3;
 bvec3 _f4;
 mat2x3 _f5;
 mat3 _f6;
} ;

struct _GLF_struct_14 {
 bvec4 _f0;
 ivec4 _f1;
 mat2 _f2;
} ;

struct _GLF_struct_13 {
 uvec4 _f0;
 ivec3 _f1;
 uint _f2;
 uvec4 _f3;
 vec2 _f4;
 uvec4 _f5;
} ;

struct _GLF_struct_12 {
 bvec2 _f0;
 uvec2 _f1;
 ivec3 _f2;
} ;

struct _GLF_struct_16 {
 mat3x4 _f0;
 _GLF_struct_12 _f1;
 _GLF_struct_13 _f2;
 _GLF_struct_14 _f3;
 vec4 _f4;
 float _f5;
 _GLF_struct_15 _f6;
} ;

struct _GLF_struct_10 {
 vec4 _f0;
 float _f1;
} ;

struct _GLF_struct_9 {
 uvec2 _f0;
 uvec4 _f1;
 bvec4 _f2;
 mat2x4 _f3;
 uvec4 _f4;
 ivec3 _f5;
 ivec3 _f6;
} ;

struct _GLF_struct_8 {
 uvec4 _f0;
} ;

struct _GLF_struct_7 {
 vec3 _f0;
 mat3x2 _f1;
 bvec4 _f2;
 vec3 _f3;
 mat3 _f4;
} ;

struct _GLF_struct_11 {
 mat2x4 _f0;
 _GLF_struct_7 _f1;
 _GLF_struct_8 _f2;
 _GLF_struct_9 _f3;
 uvec3 _f4;
 int _f5;
 _GLF_struct_10 _f6;
} ;

struct _GLF_struct_5 {
 uint subgroup_id;
 vec3 _f0;
 bvec2 _f1;
 bvec3 _f2;
} ;

struct _GLF_struct_4 {
 int _f0;
 ivec3 _f1;
 bvec3 _f2;
} ;

struct _GLF_struct_6 {
 float _f0;
 _GLF_struct_4 _f1;
 _GLF_struct_5 _f2;
} ;

struct _GLF_struct_2 {
 float _f0;
 ivec3 _f1;
 uint _f2;
 vec4 _f3;
 uvec4 _f4;
 vec3 _f5;
} ;

struct _GLF_struct_1 {
 float _f0;
} ;

struct _GLF_struct_0 {
 vec4 _f0;
 mat3x2 _f1;
} ;

struct _GLF_struct_3 {
 vec4 _f0;
 mat4x2 _f1;
 _GLF_struct_0 _f2;
 mat3x2 _f3;
 _GLF_struct_1 _f4;
 _GLF_struct_2 _f5;
} ;

struct _GLF_struct_18 {
 _GLF_struct_3 _f0;
 _GLF_struct_6 _f1;
 _GLF_struct_11 _f2;
 _GLF_struct_16 _f3;
 _GLF_struct_17 _f4;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 _GLF_struct_18 _GLF_struct_replacement_18 = _GLF_struct_18(_GLF_struct_3(vec4(1.0), mat4x2(1.0), _GLF_struct_0(vec4(1.0), mat3x2(1.0)), mat3x2(1.0), _GLF_struct_1(1.0), _GLF_struct_2(1.0, ivec3(1), 1u, vec4(1.0), uvec4(1u), vec3(1.0))), _GLF_struct_6(1.0, _GLF_struct_4(1, ivec3(1), bvec3(true)), _GLF_struct_5(gl_SubgroupID, vec3(1.0), bvec2(true), bvec3(true))), _GLF_struct_11(mat2x4(1.0), _GLF_struct_7(vec3(1.0), mat3x2(1.0), bvec4(true), vec3(1.0), mat3(1.0)), _GLF_struct_8(uvec4(1u)), _GLF_struct_9(uvec2(1u), uvec4(1u), bvec4(true), mat2x4(1.0), uvec4(1u), ivec3(1), ivec3(1)), uvec3(1u), 1, _GLF_struct_10(vec4(1.0), 1.0)), _GLF_struct_16(mat3x4(1.0), _GLF_struct_12(bvec2(true), uvec2(1u), ivec3(1)), _GLF_struct_13(uvec4(1u), ivec3(1), 1u, uvec4(1u), vec2(1.0), uvec4(1u)), _GLF_struct_14(bvec4(true), ivec4(1), mat2(1.0)), vec4(1.0), 1.0, _GLF_struct_15(1, mat2(1.0), bvec4(true), 1u, bvec3(true), mat2x3(1.0), mat3(1.0))), _GLF_struct_17(mat3x2(1.0), mat4(1.0), mat3x2(1.0), vec4(1.0)));
 uint subgroup_size = gl_SubgroupSize;
 for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = gl_WorkGroupSize.x;
 _GLF_struct_23 _GLF_struct_replacement_23 = _GLF_struct_23(_GLF_struct_22(_GLF_struct_19(1.0, mat3x4(1.0), uvec4(1u), ivec2(1), bvec3(true), 1.0), 1, gl_WorkGroupID.x, _GLF_struct_20(ivec2(1), mat3(1.0), 1.0, mat4x2(1.0)), _GLF_struct_21(mat2x3(1.0), vec2(1.0), vec4(1.0), ivec3(1), mat3(1.0), uvec3(1u), ivec2(1))), mat4x2(1.0));
 uint workgroup_base = workgroup_size * _GLF_struct_replacement_23._f0.workgroup_id;
 uint virtual_gid = workgroup_base + _GLF_struct_replacement_18._f1._f2.subgroup_id * subgroup_size + subgroup_local_id;
 uint next_virtual_gid = workgroup_base + _GLF_struct_replacement_18._f1._f2.subgroup_id * subgroup_size + ((subgroup_local_id + 1) % subgroup_size);
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   buf[virtual_gid] = 1;
  }
 if(_GLF_DEAD(false))
  barrier();
 if(subgroup_local_id + 1 < subgroup_size)
  {
   _GLF_struct_24 _GLF_struct_replacement_24 = _GLF_struct_24(0, bvec4(true));
   atomicStore(buf[next_virtual_gid], uint(2), 4, 64, 4);
  }
 else
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(bvec4(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, false, true))))))))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         atomicStore(buf[next_virtual_gid], uint(2), 4, 64, 4);
        }
      }
     else
      {
      }
    }
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
