#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uvec4 GLF_merged3_0_2_52_2_1_11_3_1_12GLF_merged2_0_1_16_1_1_11next_virtual_gidsubgroup_idvirtual_gidworkgroup_id;
 uvec4 GLF_merged2_0_3_74_3_1_13GLF_merged3_0_1_17_1_1_11_2_1_14subgroup_local_idvirtual_gidworkgroup_sizesubgroup_size;
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) && true)))
    {
    }
   else
    {
     for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(7), int(7))); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, (false ? _GLF_FUZZED(-67131) : 1))); _GLF_IDENTITY(_injected_loop_counter ++, 0 + (_injected_loop_counter ++)))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(true && (_GLF_DEAD(false)), true && (true && (_GLF_DEAD(false))))))
          return;
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          break;
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, false)))))
            continue;
           return;
           if(_GLF_DEAD(false))
            break;
          }
        }
      }
    }
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
    }
   return;
  }
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y), _GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec2((_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y), false), bvec2(bvec2(bvec2((_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y), false)))), bvec2(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(bvec2((_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y), false), bvec2(bvec2(bvec2((_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y), false)))), bvec2(bvec4(_GLF_IDENTITY(bvec2((_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y), false), bvec2(bvec2(bvec2((_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y), false)))), true, true))), false)))), bool(bool(bool(_GLF_IDENTITY(bvec2((_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y), false), bvec2(bvec2(bvec2((_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y), false))))))))))))))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec4(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, true, true))))
  {
   do
    {
     return;
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     return;
    }
  }
 if(_GLF_DEAD(false))
  return;
 uvec3 GLF_merged3_0_1_17_1_1_11_2_1_14subgroup_local_idvirtual_gidworkgroup_size;
 GLF_merged2_0_3_74_3_1_13GLF_merged3_0_1_17_1_1_11_2_1_14subgroup_local_idvirtual_gidworkgroup_sizesubgroup_size.xyz = GLF_merged3_0_1_17_1_1_11_2_1_14subgroup_local_idvirtual_gidworkgroup_size;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       return;
      }
    }
   return;
  }
 uvec2 GLF_merged2_0_1_16_1_1_11next_virtual_gidsubgroup_id;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 for(int _injected_loop_counter = _GLF_IDENTITY((0 >> _GLF_IDENTITY(int(7), int(7))), max((0 >> _GLF_IDENTITY(int(7), int(7))), _GLF_IDENTITY((0 >> _GLF_IDENTITY(int(7), int(7))), ((0 >> _GLF_IDENTITY(int(7), int(7)))) >> 0))); _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), int(ivec4(int(2), 0, 1, 0))))) >> _GLF_IDENTITY(int(2), int(2)))); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     do
      {
       return;
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, false || (false))));
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       do
        {
         return;
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
     return;
    }
  }
 else
  {
   for(int _injected_loop_counter = _GLF_IDENTITY(0, (0) + 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), true && (_GLF_IDENTITY(false, _GLF_IDENTITY(true, false || _GLF_IDENTITY((true), ! (! (_GLF_IDENTITY((true), true && ((true))))))) && (false))))))
      {
       if(_GLF_DEAD(false))
        continue;
       return;
       if(_GLF_DEAD(false))
        continue;
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, _GLF_IDENTITY(true && (false), true && (_GLF_IDENTITY(true, ! (! (true))) && (false)))))))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, abs(vec2(0.0, 0.0)) + (injectionSwitch)).y))))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           return;
          }
        }
       return;
      }
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       GLF_merged3_0_2_52_2_1_11_3_1_12GLF_merged2_0_1_16_1_1_11next_virtual_gidsubgroup_idvirtual_gidworkgroup_id.xy = GLF_merged2_0_1_16_1_1_11next_virtual_gidsubgroup_id;
       if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), ! (_GLF_IDENTITY(! (! (_GLF_DEAD(false))), ! (! (! (! (_GLF_DEAD(false)))))))))))
        continue;
      }
    }
  }
 for(int _injected_loop_counter = int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0))); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, int(_GLF_IDENTITY(ivec3(1, 1, (_GLF_IDENTITY(0 | 0, (_GLF_IDENTITY(0 | 0, (0 | 0) - 0)) << _GLF_IDENTITY(0, ~ (~ (0)))))), ivec3(0, 0, 0) ^ (ivec3(1, 1, (0 | 0))))))); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    return;
  }
 uvec4 GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_13next_virtual_gidnum_workgroupsubgroup_idsubgroup_size;
 if(_GLF_DEAD(false))
  return;
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       return;
      }
     else
      {
      }
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       return;
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = int(_GLF_ONE(_GLF_IDENTITY(1.0, (1.0) + 0.0), injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           return;
          }
        }
      }
    }
   else
    {
    }
  }
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec3(false, false, true))), ! (! (_GLF_IDENTITY(false, bool(bvec3(false, false, true)))))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec3(false, false, true))), ! (! (_GLF_IDENTITY(false, bool(bvec3(false, false, true)))))), true && (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec3(false, false, true))), false || (_GLF_IDENTITY(false, bool(bvec3(false, false, true))))), ! (! (_GLF_IDENTITY(false, bool(bvec3(false, false, true))))))))) && true)))
  return;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(mat4(injectionSwitch.y, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, determinant(mat4(0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))), 0.0 + (float(mat4(injectionSwitch.y, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, determinant(mat4(0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))))))))))))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))))))) && true)))
        return;
      }
    }
   return;
  }
 GLF_merged3_0_2_52_2_1_11_3_1_12GLF_merged2_0_1_16_1_1_11next_virtual_gidsubgroup_idvirtual_gidworkgroup_id.xy.y = subgroup_id;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 do
  {
   do
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = (_GLF_IDENTITY(0, ~ (_GLF_IDENTITY(~ (0), 0 ^ (~ (0))))) << _GLF_IDENTITY(int(7), int(7))); _GLF_WRAPPED_LOOP(_injected_loop_counter < ((((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))) << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(3), 1 * (int(3))), int(3)))); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(false))
              continue;
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_DEAD(false))
                return;
              }
             return;
            }
          }
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec3(false, true, false))), (injectionSwitch.x > injectionSwitch.y))))
          continue;
        }
       do
        {
         return;
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        return;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      continue;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         continue;
        }
       break;
      }
     if(_GLF_DEAD(false))
      return;
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    break;
   if(_GLF_DEAD(false))
    return;
  }
 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat4x3(injectionSwitch, 0.0, exp(0.0), 1.0, determinant(mat2(0.0, 0.0, 0.0, 0.0)), sqrt(0.0), 1.0, determinant(mat2(1.0, 0.0, 1.0, 1.0)), 0.0, 0.0, 1.0), transpose(transpose(mat4x3(injectionSwitch, 0.0, exp(0.0), 1.0, determinant(mat2(0.0, 0.0, 0.0, 0.0)), sqrt(0.0), 1.0, determinant(mat2(1.0, 0.0, 1.0, 1.0)), 0.0, 0.0, 1.0)))))).y))))
  return;
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       return;
       if(_GLF_DEAD(false))
        continue;
      }
    }
  }
 do
  {
   for(int _injected_loop_counter = ((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (int(5)) << int(_GLF_ZERO(0.0, injectionSwitch.x))))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), max(_GLF_IDENTITY(int(5), (int(5)) - 0), int(5)))), (_GLF_IDENTITY(_GLF_IDENTITY(int(5), int(5)), (_GLF_IDENTITY(int(5), int(5))) / 1)) | (_GLF_IDENTITY(int(5), int(5))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_13next_virtual_gidnum_workgroupsubgroup_idsubgroup_size.z = _GLF_IDENTITY(GLF_merged3_0_2_52_2_1_11_3_1_12GLF_merged2_0_1_16_1_1_11next_virtual_gidsubgroup_idvirtual_gidworkgroup_id.xy.y, 0u ^ (_GLF_IDENTITY(GLF_merged3_0_2_52_2_1_11_3_1_12GLF_merged2_0_1_16_1_1_11next_virtual_gidsubgroup_idvirtual_gidworkgroup_id.xy.y, min(GLF_merged3_0_2_52_2_1_11_3_1_12GLF_merged2_0_1_16_1_1_11next_virtual_gidsubgroup_idvirtual_gidworkgroup_id.xy.y, GLF_merged3_0_2_52_2_1_11_3_1_12GLF_merged2_0_1_16_1_1_11next_virtual_gidsubgroup_idvirtual_gidworkgroup_id.xy.y))));
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, false || (false))))), true && (! _GLF_IDENTITY((_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, false || (false))))), ((_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, false || (false)))))) && true))))), (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         return;
        }
      }
    }
  }
 while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), _GLF_IDENTITY(! (! (_GLF_WRAPPED_LOOP(false))), ! (! (! (! (_GLF_WRAPPED_LOOP(false))))))));
 uint subgroup_size = gl_SubgroupSize;
 GLF_merged2_0_3_74_3_1_13GLF_merged3_0_1_17_1_1_11_2_1_14subgroup_local_idvirtual_gidworkgroup_sizesubgroup_size.w = subgroup_size;
 if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false), ! (! (_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)))).x > injectionSwitch.y)))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(true && (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), true && (true && (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), injectionSwitch)).x > injectionSwitch.y)))))), false || (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y, (injectionSwitch.x > injectionSwitch.y) || false)))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))))))), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0), injectionSwitch.x)) > injectionSwitch.y)))), true, _GLF_IDENTITY(false, (false) || false), _GLF_IDENTITY(false, true && (false)))), bool(bool(bool(bvec4((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).y), true, false, _GLF_IDENTITY(false, _GLF_IDENTITY(true && (_GLF_IDENTITY(false, false || (false))), true && (true && (false)))))))))))), ! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), ! (_GLF_IDENTITY(! (false), bool(bvec4(! (false), false, true, true))))), (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / abs(1.0)), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)), ! (_GLF_IDENTITY(! (bool(bvec3(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))), false || (_GLF_IDENTITY(! (bool(bvec3(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))), (_GLF_IDENTITY(! (bool(bvec3(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))), (! (bool(bvec3(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y) && true), _GLF_TRUE(_GLF_IDENTITY(true, false || (true)), (injectionSwitch.x < injectionSwitch.y)), false)))) || false)) && true))))))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), ! (_GLF_IDENTITY(! (false), bool(bvec4(! (false), false, true, true))))), (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / abs(1.0)), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)), ! (_GLF_IDENTITY(! (bool(bvec3(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))), false || (_GLF_IDENTITY(! (bool(bvec3(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))), (_GLF_IDENTITY(! (bool(bvec3(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))), (! (bool(bvec3(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y) && true), _GLF_TRUE(_GLF_IDENTITY(true, false || (true)), (injectionSwitch.x < injectionSwitch.y)), false)))) || false)) && true))))))))), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), ! (_GLF_IDENTITY(! (false), bool(bvec4(! (false), false, true, true))))), (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / abs(1.0)), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)), ! (_GLF_IDENTITY(! (bool(bvec3(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))), false || (_GLF_IDENTITY(! (bool(bvec3(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))), (_GLF_IDENTITY(! (bool(bvec3(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))), (! (bool(bvec3(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y) && true), _GLF_TRUE(_GLF_IDENTITY(true, false || (true)), (injectionSwitch.x < injectionSwitch.y)), false)))) || false)) && true))))))))), bool(bvec2(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), ! (_GLF_IDENTITY(! (false), bool(bvec4(! (false), false, true, true))))), (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / abs(1.0)), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)), ! (_GLF_IDENTITY(! (bool(bvec3(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))), false || (_GLF_IDENTITY(! (bool(bvec3(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))), (_GLF_IDENTITY(! (bool(bvec3(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))), (! (bool(bvec3(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y) && true), _GLF_TRUE(_GLF_IDENTITY(true, false || (true)), (injectionSwitch.x < injectionSwitch.y)), false)))) || false)) && true))))))))), false)))), (bool(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), ! (_GLF_IDENTITY(! (false), bool(bvec4(! (false), false, true, true))))), (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / abs(1.0)), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)), ! (_GLF_IDENTITY(! (bool(bvec3(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))), false || (_GLF_IDENTITY(! (bool(bvec3(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))), (_GLF_IDENTITY(! (bool(bvec3(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))), (! (bool(bvec3(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y) && true), _GLF_TRUE(_GLF_IDENTITY(true, false || (true)), (injectionSwitch.x < injectionSwitch.y)), false)))) || false)) && true))))))))), bool(bvec2(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), ! (_GLF_IDENTITY(! (false), bool(bvec4(! (false), false, true, true))))), (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / abs(1.0)), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)), ! (_GLF_IDENTITY(! (bool(bvec3(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))), false || (_GLF_IDENTITY(! (bool(bvec3(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))), (_GLF_IDENTITY(! (bool(bvec3(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))), (! (bool(bvec3(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y) && true), _GLF_TRUE(_GLF_IDENTITY(true, false || (true)), (injectionSwitch.x < injectionSwitch.y)), false)))) || false)) && true))))))))), false))))) && true)))), true && (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), ! (_GLF_IDENTITY(! (false), bool(bvec4(! (false), false, true, true))))), (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / abs(1.0)), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)), ! (_GLF_IDENTITY(! (bool(bvec3(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))), false || (_GLF_IDENTITY(! (bool(bvec3(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))), (_GLF_IDENTITY(! (bool(bvec3(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))), (! (bool(bvec3(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y) && true), _GLF_TRUE(_GLF_IDENTITY(true, false || (true)), (injectionSwitch.x < injectionSwitch.y)), false)))) || false)) && true))))))))), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), ! (_GLF_IDENTITY(! (false), bool(bvec4(! (false), false, true, true))))), (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / abs(1.0)), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)), ! (_GLF_IDENTITY(! (bool(bvec3(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))), false || (_GLF_IDENTITY(! (bool(bvec3(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))), (_GLF_IDENTITY(! (bool(bvec3(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))), (! (bool(bvec3(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y) && true), _GLF_TRUE(_GLF_IDENTITY(true, false || (true)), (injectionSwitch.x < injectionSwitch.y)), false)))) || false)) && true))))))))), bool(bvec2(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), ! (_GLF_IDENTITY(! (false), bool(bvec4(! (false), false, true, true))))), (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / abs(1.0)), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)), ! (_GLF_IDENTITY(! (bool(bvec3(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))), false || (_GLF_IDENTITY(! (bool(bvec3(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))), (_GLF_IDENTITY(! (bool(bvec3(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))), (! (bool(bvec3(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y) && true), _GLF_TRUE(_GLF_IDENTITY(true, false || (true)), (injectionSwitch.x < injectionSwitch.y)), false)))) || false)) && true))))))))), false)))), (bool(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), ! (_GLF_IDENTITY(! (false), bool(bvec4(! (false), false, true, true))))), (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / abs(1.0)), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)), ! (_GLF_IDENTITY(! (bool(bvec3(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))), false || (_GLF_IDENTITY(! (bool(bvec3(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))), (_GLF_IDENTITY(! (bool(bvec3(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))), (! (bool(bvec3(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y) && true), _GLF_TRUE(_GLF_IDENTITY(true, false || (true)), (injectionSwitch.x < injectionSwitch.y)), false)))) || false)) && true))))))))), bool(bvec2(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), ! (_GLF_IDENTITY(! (false), bool(bvec4(! (false), false, true, true))))), (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / abs(1.0)), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)), ! (_GLF_IDENTITY(! (bool(bvec3(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))), false || (_GLF_IDENTITY(! (bool(bvec3(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))), (_GLF_IDENTITY(! (bool(bvec3(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))), (! (bool(bvec3(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y) && true), _GLF_TRUE(_GLF_IDENTITY(true, false || (true)), (injectionSwitch.x < injectionSwitch.y)), false)))) || false)) && true))))))))), false))))) && true))))))))))), false || (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, true, false, true)), (bool(bvec4(false, true, false, true))) || false))) || false), (injectionSwitch.x > injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), ! (! (_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3((injectionSwitch.x > injectionSwitch.y), false, true), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(bvec3(bvec3((injectionSwitch.x > injectionSwitch.y), false, true))), bvec3(bvec4(bvec3(bvec3(bvec3((_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch))) * vec2(1.0, 1.0), (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch))) * vec2(1.0, 1.0), ((_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch))) * vec2(1.0, 1.0)) * vec2(1.0, 1.0))) / vec2(1.0, 1.0))).x > injectionSwitch.y), false, true))), false))), _GLF_IDENTITY(bvec3(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(bvec3(bvec3((injectionSwitch.x > injectionSwitch.y), false, true))), bvec3(bvec4(bvec3(bvec3(bvec3((_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch))) * vec2(1.0, 1.0)).x > injectionSwitch.y), false, true))), false))), bvec3(bvec4(_GLF_IDENTITY(bvec3(bvec3(bvec3((injectionSwitch.x > injectionSwitch.y), false, true))), bvec3(bvec4(bvec3(bvec3(bvec3((_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch))) * vec2(1.0, 1.0)).x > injectionSwitch.y), false, true))), false))), false))), true)), bvec3(bvec3(bvec3(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(bvec3(bvec3((injectionSwitch.x > injectionSwitch.y), false, true))), bvec3(bvec4(bvec3(bvec3(bvec3((_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch))) * vec2(1.0, 1.0)).x > injectionSwitch.y), false, true))), false))), bvec3(bvec4(_GLF_IDENTITY(bvec3(bvec3(bvec3((injectionSwitch.x > injectionSwitch.y), false, true))), bvec3(bvec4(bvec3(bvec3(bvec3((_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch))) * vec2(1.0, 1.0)).x > injectionSwitch.y), false, true))), false))), false))), true)))))), _GLF_IDENTITY(bvec3(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(bvec3(bvec3((injectionSwitch.x > injectionSwitch.y), false, true))), bvec3(bvec4(bvec3(bvec3(bvec3((_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch))) * vec2(1.0, 1.0), (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch))) * vec2(1.0, 1.0), ((_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch))) * vec2(1.0, 1.0)) * vec2(1.0, 1.0))) / vec2(1.0, 1.0))).x > injectionSwitch.y), false, true))), false))), _GLF_IDENTITY(bvec3(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(bvec3(bvec3((injectionSwitch.x > injectionSwitch.y), false, true))), bvec3(bvec4(bvec3(bvec3(bvec3((_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch))) * vec2(1.0, 1.0)).x > injectionSwitch.y), false, true))), false))), bvec3(bvec4(_GLF_IDENTITY(bvec3(bvec3(bvec3((injectionSwitch.x > injectionSwitch.y), false, true))), bvec3(bvec4(bvec3(bvec3(bvec3((_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch))) * vec2(1.0, 1.0)).x > injectionSwitch.y), false, true))), false))), false))), true)), bvec3(bvec3(bvec3(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(bvec3(bvec3((injectionSwitch.x > injectionSwitch.y), false, true))), bvec3(bvec4(bvec3(bvec3(bvec3((_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch))) * vec2(1.0, 1.0)).x > injectionSwitch.y), false, true))), false))), bvec3(bvec4(_GLF_IDENTITY(bvec3(bvec3(bvec3((injectionSwitch.x > injectionSwitch.y), false, true))), bvec3(bvec4(bvec3(bvec3(bvec3((_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch))) * vec2(1.0, 1.0)).x > injectionSwitch.y), false, true))), false))), false))), true)))))), true)), bvec3(bvec3(bvec3(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(bvec3(bvec3((injectionSwitch.x > injectionSwitch.y), false, true))), bvec3(bvec4(bvec3(bvec3(bvec3((_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch))) * vec2(1.0, 1.0), (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch))) * vec2(1.0, 1.0), ((_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch))) * vec2(1.0, 1.0)) * vec2(1.0, 1.0))) / vec2(1.0, 1.0))).x > injectionSwitch.y), false, true))), false))), _GLF_IDENTITY(bvec3(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(bvec3(bvec3((injectionSwitch.x > injectionSwitch.y), false, true))), bvec3(bvec4(bvec3(bvec3(bvec3((_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch))) * vec2(1.0, 1.0)).x > injectionSwitch.y), false, true))), false))), bvec3(bvec4(_GLF_IDENTITY(bvec3(bvec3(bvec3((injectionSwitch.x > injectionSwitch.y), false, true))), bvec3(bvec4(bvec3(bvec3(bvec3((_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch))) * vec2(1.0, 1.0)).x > injectionSwitch.y), false, true))), false))), false))), true)), bvec3(bvec3(bvec3(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(bvec3(bvec3((injectionSwitch.x > injectionSwitch.y), false, true))), bvec3(bvec4(bvec3(bvec3(bvec3((_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch))) * vec2(1.0, 1.0)).x > injectionSwitch.y), false, true))), false))), bvec3(bvec4(_GLF_IDENTITY(bvec3(bvec3(bvec3((injectionSwitch.x > injectionSwitch.y), false, true))), bvec3(bvec4(bvec3(bvec3(bvec3((_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch))) * vec2(1.0, 1.0)).x > injectionSwitch.y), false, true))), false))), false))), true)))))), true)))))))), (bool(_GLF_IDENTITY(bvec3((injectionSwitch.x > injectionSwitch.y), false, true), _GLF_IDENTITY(bvec3(bvec3(bvec3((injectionSwitch.x > injectionSwitch.y), false, true))), bvec3(bvec4(bvec3(bvec3(bvec3((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(3.0, -769.059)) : injectionSwitch)))).y), false, true))), false)))))) && true)))))))))), ! (! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(bool(bool(_GLF_IDENTITY(false, (false) && true))), false || (bool(bool(_GLF_IDENTITY(false, (false) && true))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(bool(bool(_GLF_IDENTITY(false, (false) && true))), false || (bool(bool(_GLF_IDENTITY(false, (false) && true)))))), bool(bvec2(! (_GLF_IDENTITY(bool(bool(_GLF_IDENTITY(false, (false) && true))), false || (bool(bool(_GLF_IDENTITY(false, (false) && true)))))), false)))))), (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), true && ((injectionSwitch.x < injectionSwitch.y)))) && (false)), _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))), bool(bvec2(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))), ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))))) || false), false))), true, false), bvec3(bvec3(bvec3(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))), bool(bvec2(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))), ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))))) || false), false))), true, false)))))), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))), bool(bvec2(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))), ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))))) || false), false))), true, false), bvec3(bvec3(bvec3(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))), bool(bvec2(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))), ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))))) || false), false))), true, false)))))), true, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), bool(bvec4(_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))), bool(bvec2(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))), ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))))) || false), false))), true, false), bvec3(bvec3(bvec3(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))), bool(bvec2(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))), ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))))) || false), false))), true, false)))))), true, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), ! (! (bool(bvec4(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))), bool(bvec2(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))), ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))))) || false), false))), true, false), bvec3(bvec3(bvec3(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))), bool(bvec2(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))), ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))))) || false), false))), true, false)))))), true, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))), false, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))), false || (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, 1.0 * (injectionSwitch.y)))), _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))))))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), bool(bool(! (injectionSwitch.x > injectionSwitch.y)))), ! (! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), bool(bool(! (injectionSwitch.x > injectionSwitch.y))))))))))))))))))))))), _GLF_IDENTITY((bool(bool(_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))).y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), false || (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))), ! (! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), injectionSwitch)).y)))))), false || (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))))))), bool(bool((bool(bool(_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))).y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), false || (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))), ! (! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), injectionSwitch)).y)))))), false || (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))))))))))) || false)))))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     return;
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         do
          {
           return;
          }
         while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), (_GLF_WRAPPED_LOOP(false)) || false));
        }
       return;
      }
     return;
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), false || (bool(bool(false)))))))
    return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(true, bool(bool(true))), true, true), bvec3(bvec4(bvec3(_GLF_IDENTITY(true, bool(bool(true))), true, true), true)))), ! (! (bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(true, bool(bool(true))), true, true), bvec3(bvec4(bvec3(_GLF_IDENTITY(true, bool(bool(true))), true, true), true)))))))), (injectionSwitch.x < injectionSwitch.y))))
    {
     return;
    }
   else
    {
    }
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   for(int _injected_loop_counter = (1 | 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (true)))))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false))) || false)))
            return;
           return;
          }
         else
          {
          }
        }
      }
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
    }
   return;
  }
 if(_GLF_DEAD(false))
  return;
 GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_13next_virtual_gidnum_workgroupsubgroup_idsubgroup_size.w = GLF_merged2_0_3_74_3_1_13GLF_merged3_0_1_17_1_1_11_2_1_14subgroup_local_idvirtual_gidworkgroup_sizesubgroup_size.w;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     GLF_merged2_0_3_74_3_1_13GLF_merged3_0_1_17_1_1_11_2_1_14subgroup_local_idvirtual_gidworkgroup_sizesubgroup_size.xyz.x = subgroup_local_id;
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   do
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), min((injectionSwitch) * mat2(1.0), (injectionSwitch) * mat2(1.0)))).y))))
          break;
         return;
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < 1, _GLF_IDENTITY((_injected_loop_counter < 1) && true, ((_injected_loop_counter < 1) && true) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            break;
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              break;
             if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec2(bvec2(false, false))))))))
              {
              }
             else
              {
               return;
              }
            }
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              continue;
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               return;
               if(_GLF_DEAD(false))
                break;
              }
             if(_GLF_DEAD(false))
              continue;
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false)), (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false), true))), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false)), (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false), true)))) || false)))
                continue;
               continue;
              }
            }
          }
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            return;
           for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
            {
             return;
            }
          }
         return;
        }
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         for(int _injected_loop_counter = _GLF_IDENTITY(1, ~ (~ (1))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             do
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(6), int(6))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                  {
                   return;
                  }
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)))).x > injectionSwitch.y))))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  continue;
                 continue;
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          break;
         continue;
        }
       return;
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
 else
  {
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 << _GLF_IDENTITY(int(1), int(_GLF_IDENTITY(1, (1) | 0))))); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false))))))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         continue;
        }
       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
          return;
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              continue;
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                }
               else
                {
                 return;
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  return;
                }
              }
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               do
                {
                 if(_GLF_DEAD(false))
                  return;
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(false))
                    return;
                   break;
                  }
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   return;
                  }
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             else
              {
               if(_GLF_DEAD(false))
                continue;
              }
             if(_GLF_DEAD(false))
              break;
            }
           if(_GLF_DEAD(false))
            continue;
          }
        }
      }
     else
      {
      }
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat4x2(injectionSwitch, 1.0, _GLF_IDENTITY(dot(vec4(0.0, 0.0, 0.0, _GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-550.540)), bool(false)))))), vec4(_GLF_IDENTITY(0.0, (0.0) * sqrt(1.0)), 0.0, 0.0, 1.0)), dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, 0.0, _GLF_IDENTITY(1.0, (1.0) / _GLF_ONE(1.0, injectionSwitch.y))))), _GLF_IDENTITY(_GLF_IDENTITY(dot(_GLF_IDENTITY(vec3(1.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 0.0), clamp(vec3(1.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 0.0), _GLF_IDENTITY(vec3(1.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 0.0), vec3(mat3(vec3(1.0, length(vec4(0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, (0.0) / 1.0))), 0.0), 0.0, 1.0, 1.0, 0.0, 0.0, 0.0))), _GLF_IDENTITY(vec3(1.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 0.0), max(vec3(1.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 0.0), vec3(1.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 0.0))))), vec3(0.0, 1.0, 1.0)), _GLF_IDENTITY(dot(vec3(1.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 0.0), vec3(0.0, 1.0, 1.0)), (_GLF_IDENTITY(true ? dot(vec3(1.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 0.0), vec3(0.0, 1.0, 1.0)) : _GLF_FUZZED(-3.8), clamp(true ? dot(vec3(1.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 0.0), vec3(0.0, 1.0, 1.0)) : _GLF_FUZZED(-3.8), _GLF_IDENTITY(true, (true) && true) ? dot(vec3(1.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 0.0), vec3(0.0, 1.0, 1.0)) : _GLF_FUZZED(-3.8), true ? dot(vec3(1.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 0.0), vec3(0.0, 1.0, 1.0)) : _GLF_FUZZED(-3.8)))))), mix(_GLF_IDENTITY(float(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(dot(vec3(1.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 0.0), vec3(0.0, 1.0, 1.0)), _GLF_IDENTITY(dot(vec3(1.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 0.0), vec3(0.0, 1.0, 1.0)), (true ? dot(vec3(1.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 0.0), vec3(0.0, 1.0, 1.0)) : _GLF_FUZZED(-3.8)))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(dot(vec3(1.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 0.0), vec3(0.0, 1.0, 1.0)), _GLF_IDENTITY(dot(vec3(1.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 0.0), vec3(0.0, 1.0, 1.0)), (true ? dot(vec3(_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(0.6)), bool(false))), length(vec4(0.0, 0.0, 0.0, 0.0)), 0.0), vec3(0.0, 1.0, 1.0)) : _GLF_FUZZED(-3.8)))), 0.0 + (_GLF_IDENTITY(_GLF_IDENTITY(dot(vec3(1.0, length(vec4(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), 0.0, 0.0, 0.0)), 0.0), vec3(0.0, 1.0, 1.0)), _GLF_IDENTITY(dot(vec3(1.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 0.0), vec3(0.0, 1.0, 1.0)), (true ? dot(vec3(1.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 0.0), vec3(0.0, 1.0, 1.0)) : _GLF_FUZZED(-3.8)))), mix(float(_GLF_IDENTITY(dot(vec3(1.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 0.0), vec3(0.0, 1.0, 1.0)), _GLF_IDENTITY(dot(vec3(1.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 0.0), vec3(0.0, 1.0, 1.0)), (true ? dot(vec3(1.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 0.0), vec3(0.0, 1.0, 1.0)) : _GLF_FUZZED(-3.8))))), float(_GLF_FUZZED(-3.3)), bool(false))))), _GLF_IDENTITY(dot(vec3(1.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 0.0), vec3(0.0, 1.0, 1.0)), _GLF_IDENTITY(dot(vec3(1.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 0.0), vec3(0.0, 1.0, 1.0)), (true ? dot(vec3(1.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 0.0), vec3(0.0, 1.0, 1.0)) : _GLF_FUZZED(-3.8)))), _GLF_IDENTITY(dot(vec3(1.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 0.0), vec3(0.0, 1.0, 1.0)), _GLF_IDENTITY(dot(vec3(1.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 0.0), vec3(0.0, 1.0, 1.0)), (true ? dot(vec3(1.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 0.0), vec3(0.0, 1.0, 1.0)) : _GLF_FUZZED(-3.8)))))), min(_GLF_IDENTITY(_GLF_IDENTITY(dot(vec3(1.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 0.0), vec3(0.0, 1.0, 1.0)), _GLF_IDENTITY(dot(vec3(1.0, length(vec4(0.0, 0.0, 0.0, 0.0)), _GLF_IDENTITY(0.0, max(0.0, _GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(float(-90703))), bool(false)))))), vec3(0.0, 1.0, 1.0)), (true ? dot(vec3(1.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 0.0), vec3(0.0, 1.0, 1.0)) : _GLF_FUZZED(-3.8)))), (_GLF_IDENTITY(_GLF_IDENTITY(dot(vec3(1.0, _GLF_IDENTITY(length(vec4(0.0, 0.0, 0.0, 0.0)), (length(vec4(0.0, 0.0, 0.0, 0.0))) - _GLF_ZERO(0.0, injectionSwitch.x)), 0.0), vec3(0.0, 1.0, 1.0)), _GLF_IDENTITY(dot(vec3(1.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 0.0), vec3(0.0, 1.0, 1.0)), (true ? dot(vec3(1.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 0.0), vec3(0.0, 1.0, 1.0)) : _GLF_FUZZED(-3.8)))), max(_GLF_IDENTITY(dot(vec3(1.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 0.0), vec3(0.0, 1.0, 1.0)), _GLF_IDENTITY(dot(vec3(1.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 0.0), vec3(0.0, 1.0, 1.0)), (true ? dot(vec3(1.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 0.0), vec3(0.0, 1.0, 1.0)) : _GLF_FUZZED(-3.8)))), _GLF_IDENTITY(dot(vec3(1.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 0.0), vec3(0.0, 1.0, _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)))), _GLF_IDENTITY(dot(vec3(1.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 0.0), vec3(0.0, 1.0, 1.0)), (true ? dot(vec3(1.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 0.0), vec3(0.0, 1.0, 1.0)) : _GLF_FUZZED(-3.8))))))) / 1.0), _GLF_IDENTITY(dot(vec3(1.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 0.0), vec3(0.0, 1.0, 1.0)), _GLF_IDENTITY(dot(vec3(1.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 0.0), vec3(0.0, 1.0, 1.0)), (true ? dot(vec3(1.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 0.0), vec3(0.0, 1.0, 1.0)) : _GLF_FUZZED(-3.8))))))), max(float(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(dot(_GLF_IDENTITY(vec3(1.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 0.0), (vec3(1.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 0.0)) * vec3(1.0, 1.0, 1.0)), vec3(0.0, 1.0, 1.0)), _GLF_IDENTITY(dot(vec3(1.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 0.0), vec3(0.0, 1.0, 1.0)), (true ? dot(vec3(1.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 0.0), vec3(0.0, 1.0, 1.0)) : _GLF_FUZZED(-3.8)))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(dot(vec3(1.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 0.0), vec3(0.0, 1.0, 1.0)), _GLF_IDENTITY(dot(vec3(1.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 0.0), vec3(0.0, 1.0, 1.0)), (true ? dot(vec3(1.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 0.0), vec3(0.0, 1.0, 1.0)) : _GLF_FUZZED(-3.8)))), 0.0 + (_GLF_IDENTITY(_GLF_IDENTITY(dot(vec3(1.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 0.0), vec3(0.0, 1.0, 1.0)), _GLF_IDENTITY(dot(vec3(1.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 0.0), vec3(0.0, 1.0, 1.0)), (true ? dot(vec3(1.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 0.0), vec3(0.0, 1.0, 1.0)) : _GLF_FUZZED(-3.8)))), mix(float(_GLF_IDENTITY(dot(vec3(1.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 0.0), vec3(0.0, 1.0, 1.0)), _GLF_IDENTITY(dot(vec3(1.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 0.0), vec3(0.0, 1.0, 1.0)), (true ? dot(vec3(1.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 0.0), vec3(0.0, 1.0, 1.0)) : _GLF_FUZZED(-3.8))))), float(_GLF_FUZZED(-3.3)), bool(false))))), _GLF_IDENTITY(dot(vec3(1.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 0.0), vec3(0.0, 1.0, 1.0)), _GLF_IDENTITY(dot(vec3(1.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 0.0), vec3(0.0, 1.0, _GLF_IDENTITY(1.0, float(_GLF_IDENTITY(mat3x2(1.0, 0.0, 1.0, sin(0.0), tan(0.0), 1.0), mat2(1.0) * (mat3x2(1.0, 0.0, 1.0, sin(0.0), tan(0.0), 1.0))))))), (true ? dot(vec3(1.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 0.0), vec3(0.0, 1.0, 1.0)) : _GLF_FUZZED(-3.8)))), _GLF_IDENTITY(dot(vec3(1.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 0.0), vec3(0.0, 1.0, _GLF_IDENTITY(1.0, max(1.0, 1.0)))), _GLF_IDENTITY(dot(vec3(1.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 0.0), vec3(0.0, 1.0, 1.0)), (true ? dot(vec3(1.0, length(_GLF_IDENTITY(vec4(0.0, 0.0, 0.0, 0.0), (false ? _GLF_FUZZED(vec4(231.018, 8.4, 9148.6311, -1.4)) : vec4(0.0, 0.0, 0.0, 0.0)))), 0.0), vec3(0.0, 1.0, 1.0)) : _GLF_FUZZED(-3.8)))))), min(_GLF_IDENTITY(_GLF_IDENTITY(dot(vec3(1.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 0.0), vec3(0.0, 1.0, 1.0)), _GLF_IDENTITY(dot(vec3(1.0, length(vec4(0.0, 0.0, 0.0, 0.0)), _GLF_IDENTITY(0.0, max(0.0, _GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(float(-90703))), bool(false)))))), vec3(0.0, 1.0, 1.0)), (true ? dot(vec3(1.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 0.0), vec3(0.0, 1.0, 1.0)) : _GLF_FUZZED(-3.8)))), (_GLF_IDENTITY(_GLF_IDENTITY(dot(vec3(1.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 0.0), vec3(0.0, 1.0, 1.0)), _GLF_IDENTITY(dot(vec3(1.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 0.0), vec3(0.0, 1.0, _GLF_IDENTITY(1.0, min(1.0, 1.0)))), (true ? dot(vec3(1.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 0.0), vec3(0.0, 1.0, 1.0)) : _GLF_FUZZED(-3.8)))), max(_GLF_IDENTITY(dot(vec3(1.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 0.0), vec3(0.0, 1.0, 1.0)), _GLF_IDENTITY(dot(vec3(1.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 0.0), vec3(0.0, 1.0, 1.0)), (true ? dot(vec3(1.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 0.0), vec3(0.0, 1.0, 1.0)) : _GLF_FUZZED(-3.8)))), _GLF_IDENTITY(dot(vec3(1.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 0.0), vec3(0.0, 1.0, 1.0)), _GLF_IDENTITY(dot(vec3(1.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 0.0), vec3(0.0, 1.0, 1.0)), (true ? dot(vec3(1.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 0.0), vec3(0.0, 1.0, 1.0)) : _GLF_FUZZED(-3.8))))))) / 1.0), _GLF_IDENTITY(dot(vec3(1.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 0.0), vec3(0.0, 1.0, 1.0)), _GLF_IDENTITY(dot(vec3(1.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 0.0), vec3(0.0, 1.0, 1.0)), (true ? dot(vec3(1.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 0.0), vec3(0.0, 1.0, 1.0)) : _GLF_FUZZED(-3.8))))))), float(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(dot(vec3(1.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 0.0), vec3(0.0, 1.0, 1.0)), _GLF_IDENTITY(dot(vec3(1.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 0.0), vec3(0.0, 1.0, 1.0)), (true ? dot(vec3(1.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 0.0), vec3(0.0, 1.0, 1.0)) : _GLF_FUZZED(-3.8)))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(dot(vec3(1.0, length(_GLF_IDENTITY(vec4(0.0, 0.0, 0.0, 0.0), min(_GLF_IDENTITY(vec4(0.0, 0.0, 0.0, 0.0), clamp(vec4(0.0, 0.0, 0.0, 0.0), vec4(0.0, 0.0, 0.0, 0.0), vec4(0.0, 0.0, 0.0, 0.0))), vec4(0.0, 0.0, 0.0, 0.0)))), 0.0), vec3(0.0, 1.0, 1.0)), _GLF_IDENTITY(dot(vec3(1.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 0.0), vec3(0.0, 1.0, 1.0)), (_GLF_IDENTITY(true, false || (true)) ? dot(vec3(1.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 0.0), vec3(0.0, 1.0, 1.0)) : _GLF_FUZZED(-3.8)))), _GLF_IDENTITY(0.0 + (_GLF_IDENTITY(_GLF_IDENTITY(dot(vec3(1.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 0.0), vec3(0.0, 1.0, 1.0)), _GLF_IDENTITY(dot(vec3(1.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 0.0), vec3(0.0, 1.0, 1.0)), (true ? dot(vec3(1.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 0.0), vec3(0.0, 1.0, 1.0)) : _GLF_FUZZED(-3.8)))), mix(float(_GLF_IDENTITY(dot(vec3(1.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 0.0), vec3(0.0, 1.0, 1.0)), _GLF_IDENTITY(dot(vec3(1.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 0.0), vec3(0.0, 1.0, 1.0)), (true ? dot(vec3(1.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 0.0), vec3(0.0, 1.0, 1.0)) : _GLF_FUZZED(-3.8))))), float(_GLF_FUZZED(-3.3)), bool(false)))), min(0.0 + (_GLF_IDENTITY(_GLF_IDENTITY(dot(vec3(1.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 0.0), vec3(0.0, 1.0, 1.0)), _GLF_IDENTITY(dot(vec3(1.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 0.0), vec3(0.0, 1.0, 1.0)), (true ? dot(vec3(1.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 0.0), vec3(0.0, 1.0, 1.0)) : _GLF_FUZZED(-3.8)))), mix(float(_GLF_IDENTITY(dot(vec3(1.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 0.0), vec3(0.0, 1.0, 1.0)), _GLF_IDENTITY(dot(vec3(1.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 0.0), vec3(0.0, 1.0, 1.0)), (true ? dot(vec3(1.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 0.0), vec3(0.0, 1.0, 1.0)) : _GLF_FUZZED(-3.8))))), float(_GLF_FUZZED(-3.3)), bool(false)))), 0.0 + (_GLF_IDENTITY(_GLF_IDENTITY(dot(vec3(1.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 0.0), vec3(0.0, 1.0, 1.0)), _GLF_IDENTITY(dot(vec3(1.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 0.0), vec3(0.0, 1.0, 1.0)), (true ? dot(vec3(1.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 0.0), vec3(0.0, 1.0, 1.0)) : _GLF_FUZZED(-3.8)))), mix(float(_GLF_IDENTITY(dot(vec3(1.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 0.0), vec3(0.0, 1.0, 1.0)), _GLF_IDENTITY(dot(vec3(1.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 0.0), vec3(0.0, 1.0, 1.0)), (true ? dot(vec3(1.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 0.0), vec3(0.0, 1.0, 1.0)) : _GLF_FUZZED(-3.8))))), float(_GLF_FUZZED(-3.3)), bool(false))))))), _GLF_IDENTITY(dot(vec3(1.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 0.0), vec3(0.0, 1.0, 1.0)), _GLF_IDENTITY(dot(vec3(1.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 0.0), vec3(0.0, 1.0, 1.0)), (true ? dot(vec3(1.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 0.0), vec3(0.0, 1.0, 1.0)) : _GLF_FUZZED(-3.8)))), _GLF_IDENTITY(dot(vec3(1.0, length(vec4(0.0, 0.0, _GLF_IDENTITY(0.0, (0.0) / 1.0), 0.0)), 0.0), vec3(0.0, 1.0, 1.0)), _GLF_IDENTITY(dot(vec3(1.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 0.0), vec3(0.0, 1.0, 1.0)), (true ? dot(vec3(1.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 0.0), vec3(0.0, 1.0, 1.0)) : _GLF_FUZZED(-3.8)))))), min(_GLF_IDENTITY(_GLF_IDENTITY(dot(vec3(1.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 0.0), vec3(0.0, 1.0, 1.0)), _GLF_IDENTITY(dot(vec3(1.0, length(vec4(0.0, 0.0, 0.0, 0.0)), _GLF_IDENTITY(0.0, max(0.0, _GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(float(-90703))), bool(false)))))), vec3(0.0, 1.0, 1.0)), (true ? dot(vec3(1.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 0.0), vec3(0.0, 1.0, 1.0)) : _GLF_FUZZED(-3.8)))), (_GLF_IDENTITY(_GLF_IDENTITY(dot(vec3(1.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 0.0), vec3(0.0, 1.0, 1.0)), _GLF_IDENTITY(dot(vec3(1.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 0.0), vec3(0.0, 1.0, 1.0)), (true ? dot(vec3(1.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 0.0), vec3(0.0, 1.0, 1.0)) : _GLF_FUZZED(-3.8)))), max(_GLF_IDENTITY(dot(vec3(1.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 0.0), vec3(0.0, 1.0, 1.0)), _GLF_IDENTITY(dot(vec3(1.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 0.0), vec3(0.0, 1.0, 1.0)), (true ? dot(vec3(1.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 0.0), vec3(0.0, 1.0, 1.0)) : _GLF_FUZZED(-3.8)))), _GLF_IDENTITY(dot(vec3(1.0, length(vec4(0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)))), 0.0), vec3(0.0, 1.0, 1.0)), _GLF_IDENTITY(dot(vec3(1.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 0.0), _GLF_IDENTITY(vec3(0.0, 1.0, 1.0), _GLF_IDENTITY(vec3(mat2(_GLF_IDENTITY(vec3(0.0, 1.0, 1.0), mix(vec3(_GLF_FUZZED(-4.0), _GLF_FUZZED(-7.6), (vec3(0.0, 1.0, 1.0))[2]), vec3((vec3(0.0, 1.0, 1.0))[0], (vec3(0.0, 1.0, 1.0))[1], _GLF_FUZZED(78.21)), bvec3(true, true, false))), _GLF_IDENTITY(dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0)), dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0))))), min(vec3(mat2(_GLF_IDENTITY(vec3(0.0, 1.0, 1.0), mix(vec3(_GLF_FUZZED(-4.0), _GLF_FUZZED(-7.6), (vec3(0.0, 1.0, 1.0))[2]), vec3((vec3(0.0, 1.0, 1.0))[0], (vec3(0.0, 1.0, 1.0))[1], _GLF_FUZZED(78.21)), bvec3(true, true, false))), _GLF_IDENTITY(dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0)), dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0))))), vec3(mat2(_GLF_IDENTITY(vec3(0.0, 1.0, 1.0), mix(vec3(_GLF_FUZZED(-4.0), _GLF_FUZZED(-7.6), (vec3(0.0, 1.0, 1.0))[2]), vec3((vec3(0.0, 1.0, 1.0))[0], (vec3(0.0, 1.0, 1.0))[1], _GLF_FUZZED(78.21)), bvec3(true, true, false))), _GLF_IDENTITY(dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0)), dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0))))))))), (true ? dot(vec3(1.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 0.0), vec3(0.0, 1.0, 1.0)) : _GLF_FUZZED(-3.8))))))) / 1.0), _GLF_IDENTITY(dot(vec3(1.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 0.0), vec3(0.0, 1.0, 1.0)), _GLF_IDENTITY(dot(vec3(1.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 0.0), vec3(0.0, 1.0, 1.0)), (true ? dot(vec3(1.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 0.0), vec3(0.0, 1.0, 1.0)) : _GLF_FUZZED(-3.8))))))))), float(_GLF_FUZZED(-80.17)), bool(false))), 1.0, 1.0, _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-39.07)), float(0.0), bool(true))))), sin(vec2(0.0, 0.0)) + (vec2(mat4x2(injectionSwitch, 1.0, _GLF_IDENTITY(dot(vec4(0.0, 0.0, _GLF_IDENTITY(0.0, mix(float(_GLF_IDENTITY(0.0, max(0.0, 0.0))), float(_GLF_FUZZED(10.74)), bool(false))), 1.0), vec4(_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-5.2)), float(0.0), bool(true))), 0.0, 0.0, 1.0)), dot(vec4(0.0, 0.0, 0.0, 1.0), _GLF_IDENTITY(_GLF_IDENTITY(vec4(0.0, _GLF_IDENTITY(0.0, min(0.0, 0.0)), 0.0, 1.0), mix(vec4(_GLF_IDENTITY((vec4(0.0, _GLF_IDENTITY(0.0, min(0.0, 0.0)), 0.0, 1.0)), vec4(mat4x2((vec4(0.0, _GLF_IDENTITY(0.0, min(0.0, 0.0)), 0.0, 1.0)), 1.0, _GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(7674.2654)), bool(false))), determinant(mat4(log(1.0), 1.0, exp(0.0), 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, tan(0.0))), 1.0)))[0], (vec4(0.0, _GLF_IDENTITY(0.0, min(0.0, 0.0)), 0.0, 1.0))[1], (vec4(0.0, _GLF_IDENTITY(0.0, min(0.0, 0.0)), 0.0, 1.0))[2], _GLF_FUZZED((true ? -16.57 : 404.526))), vec4(_GLF_FUZZED(-213.612), _GLF_FUZZED(-3.4), _GLF_FUZZED(5.4), (vec4(0.0, _GLF_IDENTITY(0.0, min(0.0, 0.0)), 0.0, 1.0))[3]), bvec4(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true))), max(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, 0.0, _GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(8789.2675)), bool(false)))))))), _GLF_IDENTITY(dot(_GLF_IDENTITY(vec3(1.0, length(vec4(_GLF_IDENTITY(0.0, (0.0) - 0.0), 0.0, 0.0, 0.0)), 0.0), mat3(1.0) * (vec3(1.0, length(vec4(_GLF_IDENTITY(0.0, (0.0) / determinant(mat3(1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)))))), 0.0, 0.0, 0.0)), 0.0))), vec3(0.0, 1.0, 1.0)), _GLF_IDENTITY(dot(vec3(1.0, length(vec4(0.0, _GLF_IDENTITY(0.0, min(0.0, 0.0)), 0.0, 0.0)), _GLF_IDENTITY(0.0, float(mat4(0.0, 1.0, 1.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(dot(vec4(1.0, 1.0, 1.0, 0.0), vec4(0.0, determinant(mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0)), _GLF_IDENTITY(0.0, log(1.0) + (0.0)), 1.0)), dot(vec4(1.0, 1.0, 1.0, 0.0), vec4(0.0, determinant(mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0)), 0.0, 1.0))), 0.0, 1.0, exp(0.0), 1.0, 1.0, 0.0, 1.0, 1.0, sin(0.0))))), vec3(0.0, _GLF_IDENTITY(1.0, (1.0) - 0.0), 1.0)), (true ? dot(vec3(1.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 0.0), vec3(0.0, 1.0, 1.0)) : _GLF_FUZZED(-3.8)))), 1.0, 1.0, 0.0))))).y))))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     do
      {
       if(_GLF_DEAD(false))
        break;
       if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))));
    }
   else
    {
    }
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x < injectionSwitch.y))))
    {
     return;
    }
   else
    {
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       return;
      }
     else
      {
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
  }
 uint num_workgroup = gl_NumWorkGroups.x;
 do
  {
   do
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < 1, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_injected_loop_counter < 1, (_injected_loop_counter < 1) && true)), _GLF_IDENTITY(bool(bvec4(! (_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter < 1, (_injected_loop_counter < 1) && true), bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter < 1, (_injected_loop_counter < 1) && true), (_GLF_IDENTITY(_injected_loop_counter < 1, (_injected_loop_counter < 1) && true)) || false), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), true, true, false)), false || (bool(bvec4(! (_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter < 1, (_injected_loop_counter < 1) && true), (_injected_loop_counter < 1) && true)), true, true, false)))))))); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
          break;
         if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) || false), (injectionSwitch.x > injectionSwitch.y))))
          return;
         if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, true && (true))))))
          {
           for(int _injected_loop_counter = int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != 1, _GLF_IDENTITY(true && (_GLF_IDENTITY(_injected_loop_counter != 1, ! (! (_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, max(_injected_loop_counter, _injected_loop_counter)) != 1, ! (! (_injected_loop_counter != 1))))))), false || (true && (_GLF_IDENTITY(_injected_loop_counter != 1, ! (! (_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, max(_injected_loop_counter, _injected_loop_counter)) != 1, ! (! (_injected_loop_counter != _GLF_IDENTITY(1, int(ivec2(1, int(_GLF_ONE(1.0, injectionSwitch.y)))))))))))))))); _GLF_IDENTITY(_injected_loop_counter ++, (_GLF_IDENTITY(true, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(true, true), bvec2(bvec2(bvec2(true, true))))), false || (bool(_GLF_IDENTITY(bvec2(true, true), bvec2(bvec2(bvec2(true, true)))))))) ? _injected_loop_counter ++ : _GLF_FUZZED(atomicOr(_injected_loop_counter, _injected_loop_counter)))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_13next_virtual_gidnum_workgroupsubgroup_idsubgroup_size.y = _GLF_IDENTITY(num_workgroup, (true ? num_workgroup : _GLF_FUZZED(subgroup_id)));
               if(_GLF_DEAD(false))
                return;
              }
             else
              {
              }
             if(_GLF_DEAD(false))
              continue;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              continue;
            }
          }
         else
          {
          }
        }
       else
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, false || (false))))))
          return;
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
  return;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   GLF_merged2_0_3_74_3_1_13GLF_merged3_0_1_17_1_1_11_2_1_14subgroup_local_idvirtual_gidworkgroup_sizesubgroup_size.xyz.z = workgroup_size;
  }
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)))))
    return;
   return;
  }
 if(_GLF_DEAD(false))
  return;
 GLF_merged3_0_2_52_2_1_11_3_1_12GLF_merged2_0_1_16_1_1_11next_virtual_gidsubgroup_idvirtual_gidworkgroup_id.w = workgroup_id;
 uint workgroup_base = GLF_merged2_0_3_74_3_1_13GLF_merged3_0_1_17_1_1_11_2_1_14subgroup_local_idvirtual_gidworkgroup_sizesubgroup_size.xyz.z * GLF_merged3_0_2_52_2_1_11_3_1_12GLF_merged2_0_1_16_1_1_11next_virtual_gidsubgroup_idvirtual_gidworkgroup_id.w;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   for(int _injected_loop_counter = (((0 | 1) << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (int(2)) - 0))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) ^ 0))
      {
       if(_GLF_DEAD(false))
        return;
       do
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
           if(_GLF_DEAD(false))
            return;
          }
         else
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
              {
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                {
                 return;
                }
              }
             return;
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                  {
                   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), ! (! (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))
                    {
                     return;
                    }
                   else
                    {
                    }
                  }
                }
               if(_GLF_DEAD(false))
                break;
              }
            }
           else
            {
             if(_GLF_DEAD(false))
              return;
             if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, true && (true))))
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 if(_GLF_DEAD(false))
                  return;
                }
               if(_GLF_DEAD(false))
                continue;
              }
             else
              {
               do
                {
                 if(_GLF_DEAD(false))
                  return;
                }
               while(_GLF_WRAPPED_LOOP(false));
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  break;
                 break;
                }
              }
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bool(! (false))))))));
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(false))
        continue;
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   do
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        continue;
       return;
      }
     if(_GLF_DEAD(false))
      continue;
     return;
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)).y))))
    return;
   return;
  }
 do
  {
   if(_GLF_DEAD(false))
    continue;
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         do
          {
           return;
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        }
       if(_GLF_DEAD(false))
        continue;
       do
        {
         return;
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_DEAD(false))
          continue;
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec4(! (false), true, false, false)))))));
      }
     else
      {
      }
     for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (injectionSwitch.x > injectionSwitch.y))))))
        return;
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 uint virtual_gid = workgroup_base + GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_13next_virtual_gidnum_workgroupsubgroup_idsubgroup_size.z * GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_13next_virtual_gidnum_workgroupsubgroup_idsubgroup_size.w + _GLF_IDENTITY(_GLF_IDENTITY(GLF_merged2_0_3_74_3_1_13GLF_merged3_0_1_17_1_1_11_2_1_14subgroup_local_idvirtual_gidworkgroup_sizesubgroup_size.xyz, uvec3(0u, 0u, 0u) + (GLF_merged2_0_3_74_3_1_13GLF_merged3_0_1_17_1_1_11_2_1_14subgroup_local_idvirtual_gidworkgroup_sizesubgroup_size.xyz)).x, min(GLF_merged2_0_3_74_3_1_13GLF_merged3_0_1_17_1_1_11_2_1_14subgroup_local_idvirtual_gidworkgroup_sizesubgroup_size.xyz.x, _GLF_IDENTITY(GLF_merged2_0_3_74_3_1_13GLF_merged3_0_1_17_1_1_11_2_1_14subgroup_local_idvirtual_gidworkgroup_sizesubgroup_size.xyz.x, (GLF_merged2_0_3_74_3_1_13GLF_merged3_0_1_17_1_1_11_2_1_14subgroup_local_idvirtual_gidworkgroup_sizesubgroup_size.xyz.x) << 0u)));
 do
  {
   GLF_merged3_0_2_52_2_1_11_3_1_12GLF_merged2_0_1_16_1_1_11next_virtual_gidsubgroup_idvirtual_gidworkgroup_id.z = virtual_gid;
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false)))))))
    return;
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     for(int _injected_loop_counter = int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (_GLF_IDENTITY(_GLF_IDENTITY(0, 0 ^ (0)), max(_GLF_IDENTITY(0, 0 ^ (0)), _GLF_IDENTITY(0, 0 ^ (_GLF_IDENTITY(0, ~ (~ (0))))))) ^ 1)); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        {
         do
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
          }
         while(_GLF_WRAPPED_LOOP(false));
         do
          {
           return;
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(false))
          break;
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(vec2(injectionSwitch.y, 0.0)), (float(vec2(injectionSwitch.y, 0.0))) - 0.0))))))
        break;
      }
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     GLF_merged2_0_3_74_3_1_13GLF_merged3_0_1_17_1_1_11_2_1_14subgroup_local_idvirtual_gidworkgroup_sizesubgroup_size.xyz.y = GLF_merged3_0_2_52_2_1_11_3_1_12GLF_merged2_0_1_16_1_1_11next_virtual_gidsubgroup_idvirtual_gidworkgroup_id.z;
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
    return;
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, false, false)))))
        continue;
       return;
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)), true && (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(vec2(injectionSwitch))).y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y)))) && true))) || false))))))))
  return;
 uint next_virtual_gid = workgroup_base + _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_13next_virtual_gidnum_workgroupsubgroup_idsubgroup_size.z * _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_13next_virtual_gidnum_workgroupsubgroup_idsubgroup_size.w, ~ (_GLF_IDENTITY(~ (GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_13next_virtual_gidnum_workgroupsubgroup_idsubgroup_size.w), (~ (_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_13next_virtual_gidnum_workgroupsubgroup_idsubgroup_size, (_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_13next_virtual_gidnum_workgroupsubgroup_idsubgroup_size, _GLF_IDENTITY((_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_13next_virtual_gidnum_workgroupsubgroup_idsubgroup_size, (GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_13next_virtual_gidnum_workgroupsubgroup_idsubgroup_size) | (uvec4(1u, 1u, 1u, 1u) ^ uvec4(1u, 1u, 1u, 1u)))) + uvec4(0u, 0u, 0u, 0u), uvec4(1u, 1u, 1u, 1u) * ((_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_13next_virtual_gidnum_workgroupsubgroup_idsubgroup_size, (GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_13next_virtual_gidnum_workgroupsubgroup_idsubgroup_size) | (uvec4(1u, 1u, 1u, 1u) ^ uvec4(_GLF_IDENTITY(1u, 0u | (1u)), 1u, 1u, 1u)))) + uvec4(0u, 0u, 0u, 0u))))) / uvec4(1u, 1u, 1u, _GLF_IDENTITY(1u, clamp(_GLF_IDENTITY(1u, ~ (~ (1u))), 1u, _GLF_IDENTITY(1u, uint(uint(_GLF_IDENTITY(1u, (1u) | (1u))))))))).w, clamp(_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_13next_virtual_gidnum_workgroupsubgroup_idsubgroup_size, (_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_13next_virtual_gidnum_workgroupsubgroup_idsubgroup_size, _GLF_IDENTITY((_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_13next_virtual_gidnum_workgroupsubgroup_idsubgroup_size, (GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_13next_virtual_gidnum_workgroupsubgroup_idsubgroup_size) | (uvec4(1u, 1u, 1u, 1u) ^ uvec4(1u, 1u, 1u, 1u)))) + uvec4(0u, 0u, 0u, 0u), uvec4(1u, 1u, 1u, 1u) * ((_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_13next_virtual_gidnum_workgroupsubgroup_idsubgroup_size, (GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_13next_virtual_gidnum_workgroupsubgroup_idsubgroup_size) | (uvec4(1u, 1u, 1u, 1u) ^ uvec4(_GLF_IDENTITY(1u, 0u | (1u)), 1u, 1u, 1u)))) + uvec4(0u, 0u, 0u, 0u))))) / uvec4(1u, 1u, 1u, _GLF_IDENTITY(1u, clamp(_GLF_IDENTITY(1u, ~ (~ (1u))), 1u, _GLF_IDENTITY(1u, uint(uint(_GLF_IDENTITY(1u, (1u) | (1u))))))))).w, 0u ^ (_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_13next_virtual_gidnum_workgroupsubgroup_idsubgroup_size, (_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_13next_virtual_gidnum_workgroupsubgroup_idsubgroup_size, _GLF_IDENTITY((_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_13next_virtual_gidnum_workgroupsubgroup_idsubgroup_size, (GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_13next_virtual_gidnum_workgroupsubgroup_idsubgroup_size) | (uvec4(1u, 1u, 1u, 1u) ^ uvec4(1u, 1u, 1u, 1u)))) + uvec4(0u, 0u, 0u, 0u), uvec4(1u, 1u, 1u, 1u) * ((_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_13next_virtual_gidnum_workgroupsubgroup_idsubgroup_size, (GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_13next_virtual_gidnum_workgroupsubgroup_idsubgroup_size) | (uvec4(1u, 1u, 1u, 1u) ^ uvec4(_GLF_IDENTITY(1u, 0u | (1u)), 1u, 1u, 1u)))) + uvec4(0u, 0u, 0u, 0u))))) / uvec4(1u, 1u, 1u, _GLF_IDENTITY(1u, clamp(_GLF_IDENTITY(1u, ~ (~ (1u))), 1u, _GLF_IDENTITY(1u, uint(uint(_GLF_IDENTITY(1u, (1u) | (1u))))))))).w, clamp(_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_13next_virtual_gidnum_workgroupsubgroup_idsubgroup_size, (_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_13next_virtual_gidnum_workgroupsubgroup_idsubgroup_size, _GLF_IDENTITY((_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_13next_virtual_gidnum_workgroupsubgroup_idsubgroup_size, (GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_13next_virtual_gidnum_workgroupsubgroup_idsubgroup_size) | (uvec4(1u, 1u, 1u, 1u) ^ uvec4(1u, 1u, 1u, 1u)))) + uvec4(0u, 0u, 0u, 0u), uvec4(1u, 1u, 1u, 1u) * ((_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_13next_virtual_gidnum_workgroupsubgroup_idsubgroup_size, (GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_13next_virtual_gidnum_workgroupsubgroup_idsubgroup_size) | (uvec4(1u, 1u, 1u, 1u) ^ uvec4(_GLF_IDENTITY(1u, 0u | (1u)), 1u, 1u, 1u)))) + uvec4(0u, 0u, 0u, 0u))))) / uvec4(1u, 1u, 1u, _GLF_IDENTITY(1u, clamp(_GLF_IDENTITY(1u, ~ (~ (1u))), 1u, _GLF_IDENTITY(1u, uint(uint(_GLF_IDENTITY(1u, (1u) | (1u))))))))).w, _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_13next_virtual_gidnum_workgroupsubgroup_idsubgroup_size, (_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_13next_virtual_gidnum_workgroupsubgroup_idsubgroup_size, _GLF_IDENTITY((_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_13next_virtual_gidnum_workgroupsubgroup_idsubgroup_size, (GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_13next_virtual_gidnum_workgroupsubgroup_idsubgroup_size) | (uvec4(1u, 1u, 1u, 1u) ^ uvec4(1u, 1u, 1u, 1u)))) + uvec4(0u, 0u, 0u, 0u), uvec4(1u, 1u, 1u, 1u) * ((_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_13next_virtual_gidnum_workgroupsubgroup_idsubgroup_size, (GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_13next_virtual_gidnum_workgroupsubgroup_idsubgroup_size) | (uvec4(1u, 1u, 1u, 1u) ^ uvec4(_GLF_IDENTITY(1u, 0u | (1u)), 1u, 1u, 1u)))) + uvec4(0u, 0u, 0u, 0u))))) / uvec4(1u, 1u, 1u, _GLF_IDENTITY(1u, clamp(_GLF_IDENTITY(1u, ~ (~ (1u))), 1u, _GLF_IDENTITY(1u, uint(uint(_GLF_IDENTITY(1u, (1u) | (1u))))))))).w, _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_13next_virtual_gidnum_workgroupsubgroup_idsubgroup_size, (_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_13next_virtual_gidnum_workgroupsubgroup_idsubgroup_size, _GLF_IDENTITY((_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_13next_virtual_gidnum_workgroupsubgroup_idsubgroup_size, (GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_13next_virtual_gidnum_workgroupsubgroup_idsubgroup_size) | (uvec4(1u, 1u, 1u, 1u) ^ uvec4(1u, 1u, 1u, 1u)))) + uvec4(0u, 0u, 0u, 0u), uvec4(1u, 1u, 1u, 1u) * ((_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_13next_virtual_gidnum_workgroupsubgroup_idsubgroup_size, (GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_13next_virtual_gidnum_workgroupsubgroup_idsubgroup_size) | (uvec4(1u, 1u, 1u, 1u) ^ uvec4(_GLF_IDENTITY(1u, 0u | (1u)), 1u, 1u, 1u)))) + uvec4(0u, 0u, 0u, 0u))))) / uvec4(1u, 1u, 1u, _GLF_IDENTITY(1u, clamp(_GLF_IDENTITY(1u, ~ (~ (1u))), 1u, _GLF_IDENTITY(1u, uint(uint(_GLF_IDENTITY(1u, (1u) | (1u))))))))).w)))), _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_13next_virtual_gidnum_workgroupsubgroup_idsubgroup_size, (_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_13next_virtual_gidnum_workgroupsubgroup_idsubgroup_size, _GLF_IDENTITY((_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_13next_virtual_gidnum_workgroupsubgroup_idsubgroup_size, (GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_13next_virtual_gidnum_workgroupsubgroup_idsubgroup_size) | (uvec4(1u, 1u, 1u, 1u) ^ uvec4(1u, 1u, 1u, 1u)))) + uvec4(0u, 0u, 0u, 0u), uvec4(1u, 1u, 1u, 1u) * ((_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_13next_virtual_gidnum_workgroupsubgroup_idsubgroup_size, (GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_13next_virtual_gidnum_workgroupsubgroup_idsubgroup_size) | (uvec4(1u, 1u, 1u, 1u) ^ uvec4(_GLF_IDENTITY(1u, 0u | (1u)), 1u, 1u, 1u)))) + uvec4(0u, 0u, 0u, 0u))))) / uvec4(1u, 1u, 1u, _GLF_IDENTITY(1u, clamp(_GLF_IDENTITY(1u, ~ (~ (1u))), 1u, _GLF_IDENTITY(1u, uint(uint(_GLF_IDENTITY(1u, (1u) | (1u))))))))).w, _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_13next_virtual_gidnum_workgroupsubgroup_idsubgroup_size, (_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_13next_virtual_gidnum_workgroupsubgroup_idsubgroup_size, _GLF_IDENTITY((_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_13next_virtual_gidnum_workgroupsubgroup_idsubgroup_size, (GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_13next_virtual_gidnum_workgroupsubgroup_idsubgroup_size) | (uvec4(1u, 1u, 1u, 1u) ^ uvec4(1u, 1u, 1u, 1u)))) + uvec4(0u, 0u, 0u, 0u), uvec4(1u, 1u, 1u, 1u) * ((_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_13next_virtual_gidnum_workgroupsubgroup_idsubgroup_size, (GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_13next_virtual_gidnum_workgroupsubgroup_idsubgroup_size) | (uvec4(1u, 1u, 1u, 1u) ^ uvec4(_GLF_IDENTITY(1u, 0u | (1u)), 1u, 1u, 1u)))) + uvec4(0u, 0u, 0u, 0u))))) / uvec4(1u, 1u, 1u, _GLF_IDENTITY(1u, clamp(_GLF_IDENTITY(1u, ~ (~ (1u))), 1u, _GLF_IDENTITY(1u, uint(uint(_GLF_IDENTITY(1u, (1u) | (1u))))))))).w)))) / 1u))), max(GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_13next_virtual_gidnum_workgroupsubgroup_idsubgroup_size.z * _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_13next_virtual_gidnum_workgroupsubgroup_idsubgroup_size.w, ~ (_GLF_IDENTITY(~ (GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_13next_virtual_gidnum_workgroupsubgroup_idsubgroup_size.w), (~ (_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_13next_virtual_gidnum_workgroupsubgroup_idsubgroup_size, min(_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_13next_virtual_gidnum_workgroupsubgroup_idsubgroup_size, uvec4(_GLF_IDENTITY(0u, max(0u, 0u)), 0u, 0u, 0u) ^ (GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_13next_virtual_gidnum_workgroupsubgroup_idsubgroup_size)), _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_13next_virtual_gidnum_workgroupsubgroup_idsubgroup_size, (GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_13next_virtual_gidnum_workgroupsubgroup_idsubgroup_size) | (GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_13next_virtual_gidnum_workgroupsubgroup_idsubgroup_size)))), (_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_13next_virtual_gidnum_workgroupsubgroup_idsubgroup_size, (GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_13next_virtual_gidnum_workgroupsubgroup_idsubgroup_size) + uvec4(0u, 0u, 0u, 0u))) / uvec4(1u, 1u, 1u, _GLF_IDENTITY(1u, (1u) - 0u))).w)) / 1u))), _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_13next_virtual_gidnum_workgroupsubgroup_idsubgroup_size.z * _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_13next_virtual_gidnum_workgroupsubgroup_idsubgroup_size.w, uint(_GLF_IDENTITY(uvec4(GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_13next_virtual_gidnum_workgroupsubgroup_idsubgroup_size.w, (((0u | 1u) << _GLF_IDENTITY(uint(2u), uint(2u))) >> _GLF_IDENTITY(uint(2u), uint(2u))), 0u, 1u), min(uvec4(GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_13next_virtual_gidnum_workgroupsubgroup_idsubgroup_size.w, (((0u | 1u) << _GLF_IDENTITY(uint(2u), uint(2u))) >> _GLF_IDENTITY(uint(2u), uint(2u))), 0u, 1u), uvec4(GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_13next_virtual_gidnum_workgroupsubgroup_idsubgroup_size.w, (((0u | 1u) << _GLF_IDENTITY(uint(2u), uint(2u))) >> _GLF_IDENTITY(uint(2u), uint(2u))), 0u, 1u))))), ~ (_GLF_IDENTITY(~ (GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_13next_virtual_gidnum_workgroupsubgroup_idsubgroup_size.w), (~ (_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_13next_virtual_gidnum_workgroupsubgroup_idsubgroup_size, (_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_13next_virtual_gidnum_workgroupsubgroup_idsubgroup_size, (GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_13next_virtual_gidnum_workgroupsubgroup_idsubgroup_size) + uvec4(0u, 0u, 0u, 0u))) / uvec4(1u, 1u, 1u, 1u)).w)) / 1u))), (_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_13next_virtual_gidnum_workgroupsubgroup_idsubgroup_size.w, uint(_GLF_IDENTITY(uvec4(GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_13next_virtual_gidnum_workgroupsubgroup_idsubgroup_size.w, (((0u | 1u) << _GLF_IDENTITY(uint(2u), uint(2u))) >> _GLF_IDENTITY(uint(2u), uint(2u))), 0u, 1u), min(uvec4(GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_13next_virtual_gidnum_workgroupsubgroup_idsubgroup_size.w, (((0u | 1u) << _GLF_IDENTITY(uint(2u), uint(2u))) >> _GLF_IDENTITY(uint(2u), uint(2u))), 0u, 1u), uvec4(GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_13next_virtual_gidnum_workgroupsubgroup_idsubgroup_size.w, (((0u | 1u) << _GLF_IDENTITY(uint(2u), uint(2u))) >> _GLF_IDENTITY(uint(2u), uint(2u))), 0u, 1u))))), ~ (_GLF_IDENTITY(~ (GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_13next_virtual_gidnum_workgroupsubgroup_idsubgroup_size.w), (~ (_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_13next_virtual_gidnum_workgroupsubgroup_idsubgroup_size, (_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_13next_virtual_gidnum_workgroupsubgroup_idsubgroup_size, (GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_13next_virtual_gidnum_workgroupsubgroup_idsubgroup_size) + uvec4(0u, 0u, 0u, 0u))) / uvec4(1u, 1u, 1u, 1u)).w)) / 1u)))) << 0u), (true ? GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_13next_virtual_gidnum_workgroupsubgroup_idsubgroup_size.z * _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_13next_virtual_gidnum_workgroupsubgroup_idsubgroup_size.w, ~ _GLF_IDENTITY((_GLF_IDENTITY(~ (GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_13next_virtual_gidnum_workgroupsubgroup_idsubgroup_size.w), (~ (_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_13next_virtual_gidnum_workgroupsubgroup_idsubgroup_size, (_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_13next_virtual_gidnum_workgroupsubgroup_idsubgroup_size, (GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_13next_virtual_gidnum_workgroupsubgroup_idsubgroup_size) + uvec4(0u, 0u, 0u, 0u))) / uvec4(1u, 1u, 1u, 1u)).w)) / 1u)), (_GLF_IDENTITY((_GLF_IDENTITY(~ (GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_13next_virtual_gidnum_workgroupsubgroup_idsubgroup_size.w), (~ (_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_13next_virtual_gidnum_workgroupsubgroup_idsubgroup_size, (_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_13next_virtual_gidnum_workgroupsubgroup_idsubgroup_size, (GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_13next_virtual_gidnum_workgroupsubgroup_idsubgroup_size) + uvec4(0u, 0u, 0u, 0u))) / uvec4(1u, 1u, 1u, 1u)).w)) / 1u)), (false ? _GLF_FUZZED(bitfieldReverse(subgroup_id)) : (_GLF_IDENTITY(~ (GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_13next_virtual_gidnum_workgroupsubgroup_idsubgroup_size.w), (~ (_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_13next_virtual_gidnum_workgroupsubgroup_idsubgroup_size, (_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_13next_virtual_gidnum_workgroupsubgroup_idsubgroup_size, (GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_13next_virtual_gidnum_workgroupsubgroup_idsubgroup_size) + uvec4(0u, 0u, 0u, 0u))) / uvec4(1u, 1u, 1u, 1u)).w)) / 1u))))) | ((_GLF_IDENTITY(~ (GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_13next_virtual_gidnum_workgroupsubgroup_idsubgroup_size.w), (~ (_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_13next_virtual_gidnum_workgroupsubgroup_idsubgroup_size, (_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_13next_virtual_gidnum_workgroupsubgroup_idsubgroup_size, (GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_13next_virtual_gidnum_workgroupsubgroup_idsubgroup_size) + uvec4(0u, 0u, 0u, 0u))) / uvec4(1u, 1u, 1u, 1u)).w)) / 1u))))) : _GLF_FUZZED(workgroup_base))))) + (_GLF_IDENTITY((_GLF_IDENTITY(GLF_merged2_0_3_74_3_1_13GLF_merged3_0_1_17_1_1_11_2_1_14subgroup_local_idvirtual_gidworkgroup_sizesubgroup_size.xyz.x + 1, (_GLF_IDENTITY(GLF_merged2_0_3_74_3_1_13GLF_merged3_0_1_17_1_1_11_2_1_14subgroup_local_idvirtual_gidworkgroup_sizesubgroup_size.xyz.x + 1, uint(uvec3(GLF_merged2_0_3_74_3_1_13GLF_merged3_0_1_17_1_1_11_2_1_14subgroup_local_idvirtual_gidworkgroup_sizesubgroup_size.xyz.x + 1, 1u, 0u)))) ^ 0u)) % GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_13next_virtual_gidnum_workgroupsubgroup_idsubgroup_size.w, min((GLF_merged2_0_3_74_3_1_13GLF_merged3_0_1_17_1_1_11_2_1_14subgroup_local_idvirtual_gidworkgroup_sizesubgroup_size.xyz.x + 1) % GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_13next_virtual_gidnum_workgroupsubgroup_idsubgroup_size.w, (_GLF_IDENTITY(GLF_merged2_0_3_74_3_1_13GLF_merged3_0_1_17_1_1_11_2_1_14subgroup_local_idvirtual_gidworkgroup_sizesubgroup_size.xyz, min(GLF_merged2_0_3_74_3_1_13GLF_merged3_0_1_17_1_1_11_2_1_14subgroup_local_idvirtual_gidworkgroup_sizesubgroup_size.xyz, GLF_merged2_0_3_74_3_1_13GLF_merged3_0_1_17_1_1_11_2_1_14subgroup_local_idvirtual_gidworkgroup_sizesubgroup_size.xyz)).x + 1) % GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_13next_virtual_gidnum_workgroupsubgroup_idsubgroup_size.w)));
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bvec2(true, true)))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     do
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         GLF_merged3_0_2_52_2_1_11_3_1_12GLF_merged2_0_1_16_1_1_11next_virtual_gidsubgroup_idvirtual_gidworkgroup_id.xy.x = next_virtual_gid;
        }
       else
        {
        }
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          return;
        }
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(false))
        continue;
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   else
    {
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_13next_virtual_gidnum_workgroupsubgroup_idsubgroup_size.x = _GLF_IDENTITY(GLF_merged3_0_2_52_2_1_11_3_1_12GLF_merged2_0_1_16_1_1_11next_virtual_gidsubgroup_idvirtual_gidworkgroup_id.xy.x, _GLF_IDENTITY(~ (~ (_GLF_IDENTITY(GLF_merged3_0_2_52_2_1_11_3_1_12GLF_merged2_0_1_16_1_1_11next_virtual_gidsubgroup_idvirtual_gidworkgroup_id.xy.x, 0u | (GLF_merged3_0_2_52_2_1_11_3_1_12GLF_merged2_0_1_16_1_1_11next_virtual_gidsubgroup_idvirtual_gidworkgroup_id.xy.x)))), (~ (~ (_GLF_IDENTITY(GLF_merged3_0_2_52_2_1_11_3_1_12GLF_merged2_0_1_16_1_1_11next_virtual_gidsubgroup_idvirtual_gidworkgroup_id.xy.x, 0u | (GLF_merged3_0_2_52_2_1_11_3_1_12GLF_merged2_0_1_16_1_1_11next_virtual_gidsubgroup_idvirtual_gidworkgroup_id.xy.x))))) - uint(_GLF_ZERO(0.0, injectionSwitch.x))));
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((_GLF_IDENTITY(1, max(_GLF_IDENTITY(1, (1) | _GLF_IDENTITY(0, (0) * 1)), 1)) << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(4), clamp(int(4), int(4), int(4))), int(4)))); _injected_loop_counter ++)
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         return;
        }
      }
    }
   do
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 | 0)); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         buf[GLF_merged2_0_3_74_3_1_13GLF_merged3_0_1_17_1_1_11_2_1_14subgroup_local_idvirtual_gidworkgroup_sizesubgroup_size.xyz.y] = 1;
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    continue;
  }
 for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      break;
     if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false)))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              continue;
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               return;
              }
             else
              {
              }
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
           if(_GLF_DEAD(false))
            continue;
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
          }
        }
       else
        {
        }
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        continue;
       for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         return;
        }
      }
    }
  }
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(false))
        return;
      }
     else
      {
       return;
      }
    }
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, bool(bool(false)))))))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     return;
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         return;
        }
       else
        {
        }
      }
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 ^ 1) ^ 1)); _injected_loop_counter ++)
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))), true, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true && (bool(bvec4(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))), true, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))) || false, bool(bvec4((_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))), true, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true && (bool(bvec4(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))), true, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))) || false, false, false, false)))))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
          return;
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           return;
          }
        }
      }
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(GLF_merged2_0_3_74_3_1_13GLF_merged3_0_1_17_1_1_11_2_1_14subgroup_local_idvirtual_gidworkgroup_sizesubgroup_size.xyz.x + 1 < GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_13next_virtual_gidnum_workgroupsubgroup_idsubgroup_size.w)
    {
     if(_GLF_DEAD(false))
      return;
     int i = 0;
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec4(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), true, true, false))))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           return;
          }
         else
          {
          }
        }
       if(_GLF_DEAD(false))
        return;
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            return;
           do
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_DEAD(false))
                return;
              }
             if(_GLF_DEAD(false))
              break;
             return;
             if(_GLF_DEAD(false))
              continue;
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
       return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         return;
        }
       if(_GLF_DEAD(false))
        return;
      }
     if(_GLF_DEAD(false))
      return;
     for(int _injected_loop_counter = (0 ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          return;
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))))
          break;
         if(_GLF_DEAD(false))
          break;
         if(_GLF_DEAD(false))
          break;
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            return;
          }
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-49.44)), float(injectionSwitch.y), bool(true))))) || (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y))))), ! (! (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-49.44)), float(injectionSwitch.y), bool(_GLF_IDENTITY(true, false || (true))))))) || (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y)))))))))))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                break;
               break;
              }
             if(_GLF_DEAD(false))
              continue;
             if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
              continue;
             return;
             if(_GLF_DEAD(false))
              return;
            }
           return;
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              continue;
             continue;
            }
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY((false), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY((false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((false), ((false)) || false)), ! (! (! (_GLF_IDENTITY((false), ((false)) || false))))))), false, false)), ! (! (bool(bvec3(_GLF_IDENTITY((false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((false), ((false)) || false)), ! (! (! (_GLF_IDENTITY((false), ((false)) || false))))))), false, false)))))) || false), (injectionSwitch.x > injectionSwitch.y))))
              return;
            }
           if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
            return;
          }
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0), _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)))), mix(float(_GLF_FUZZED(0.1)), float(_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0), _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x))))), bool(true)))))); _injected_loop_counter --)
          {
           if(_GLF_DEAD(false))
            break;
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_DEAD(false))
            break;
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = (0 | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
              {
               return;
               if(_GLF_DEAD(false))
                break;
               if(_GLF_DEAD(false))
                break;
               if(_GLF_DEAD(false))
                break;
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(9.0)), float(injectionSwitch.y), bool(true)))))))
              return;
            }
           if(_GLF_DEAD(false))
            break;
          }
         if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bvec2(_GLF_IDENTITY(true, (true) && true), true)))))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             return;
            }
          }
         else
          {
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         if(_GLF_DEAD(false))
          continue;
        }
      }
     do
      {
       do
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             atomicStore(buf[GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_13next_virtual_gidnum_workgroupsubgroup_idsubgroup_size.x], uint(2), 4, 64, 4);
             if(_GLF_DEAD(false))
              break;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
            }
           else
            {
             do
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                return;
              }
             while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false))));
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              break;
            }
           if(_GLF_DEAD(false))
            break;
           if(_GLF_DEAD(false))
            break;
           if(_GLF_DEAD(false))
            break;
          }
         else
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             for(int _injected_loop_counter = (1 & (0 | 1)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
              {
               if(_GLF_DEAD(false))
                {
                 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                  {
                   return;
                  }
                }
              }
            }
           else
            {
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            return;
           continue;
          }
         for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0)))))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
            {
             if(_GLF_DEAD(false))
              break;
             break;
            }
           do
            {
             return;
            }
           while(_GLF_WRAPPED_LOOP(false));
           if(_GLF_DEAD(false))
            return;
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), true && (_GLF_IDENTITY(false, false || (false)))))))));
      }
     while(_GLF_WRAPPED_LOOP(false));
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         do
          {
           return;
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          break;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         continue;
        }
      }
    }
   else
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[_GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(1, (1) * 1)))])).x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(vec3(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), cos(sqrt(0.0)))), max(vec2(vec3(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), cos(sqrt(0.0)))), vec2(vec3(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), cos(sqrt(0.0))))))).y))))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 | 0)); _injected_loop_counter --)
          {
           return;
          }
        }
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         return;
        }
       if(_GLF_DEAD(false))
        return;
      }
     if(_GLF_DEAD(false))
      return;
     do
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! _GLF_IDENTITY((_GLF_IDENTITY(! (false), ! (! (! (false))))), ! (! ((_GLF_IDENTITY(! (false), ! (! (! (false)))))))))))
        {
         if(_GLF_DEAD(false))
          break;
         if(_GLF_DEAD(false))
          continue;
         return;
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     do
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          continue;
         return;
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
     atomicStore(buf[GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_13next_virtual_gidnum_workgroupsubgroup_idsubgroup_size.x], uint(2), 4, 64, 4);
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, false, true)))))
        return;
      }
     for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(_GLF_IDENTITY(0, (0) ^ 0)), int(0))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       do
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(_GLF_IDENTITY(4.9, 1.0 * (4.9))), _GLF_FUZZED(_GLF_IDENTITY(1.6, (1.6) - abs(0.0)))), bvec2(false, false))))).x > injectionSwitch.y))))
          {
           do
            {
             return;
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
         return;
        }
       for(int _injected_loop_counter = _GLF_IDENTITY(1, ((0 << _GLF_IDENTITY(int(5), int(5))) | 0) | (1)); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 >> _GLF_IDENTITY(int(6), int(6)))); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          return;
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         return;
        }
      }
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
         if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bvec4(true, true, false, false)))))
          {
           return;
          }
         else
          {
          }
        }
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        continue;
      }
    }
  }
 else
  {
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
