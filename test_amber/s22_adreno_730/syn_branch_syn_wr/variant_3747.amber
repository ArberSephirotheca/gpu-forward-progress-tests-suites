#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(_GLF_IDENTITY(vec2((injectionSwitch)[0], _GLF_FUZZED((-4.5))), max(vec2((injectionSwitch)[0], _GLF_FUZZED((-4.5))), vec2((injectionSwitch)[0], _GLF_FUZZED((-4.5))))), _GLF_IDENTITY(vec2(_GLF_FUZZED(-3.4), (injectionSwitch)[1]), (vec2(_GLF_FUZZED(-3.4), (injectionSwitch)[1])) * abs(vec2(1.0, 1.0))), bvec2(false, true))), vec2(injectionSwitch[0], injectionSwitch[1])))).y))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         break;
        }
       break;
       if(_GLF_DEAD(false))
        continue;
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false))))
      {
       for(int _injected_loop_counter = 0; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), bool(bvec3(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), false, false))); _injected_loop_counter ++)
        {
         return;
        }
      }
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_DEAD(false))
      continue;
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 else
  {
  }
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(false))
  return;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     return;
    }
  }
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, ! (! (false))), false, false, true)))))), false, true)))), bool(bvec3(! (_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, ! (! (false))), false, true)))), true, true)))))))))
    {
     if(_GLF_DEAD(false))
      break;
     return;
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
    break;
  }
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, true && (false))));
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY((_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bvec2(false, false))))))), ((_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bvec2(false, false)))))))) || false) && true), bool(bvec4(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bvec2(false, false))))))) && true), false, true, true))), (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), injectionSwitch)), _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)))).x > _GLF_IDENTITY(injectionSwitch.y, 0.0 + (_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0))))), ! (! (_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bvec2(false, _GLF_IDENTITY(false, false || (false)))))), ! (_GLF_IDENTITY(! (! (_GLF_IDENTITY(false, bool(bvec2(false, _GLF_IDENTITY(false, false || (false))))))), bool(bvec3(! (! (_GLF_IDENTITY(false, bool(bvec2(false, _GLF_IDENTITY(false, false || (false))))))), false, true)))))))) && true), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(vec4(-7.6, -4426.4307, 8245.3373, -9.6).b) : injectionSwitch.y)))), bool(bvec4(_GLF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, ! (! (false))))), false))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && ((! (_GLF_IDENTITY(false, bool(bvec2(false, false))))))))) && true), (injectionSwitch.x > injectionSwitch.y)), true, _GLF_IDENTITY(false, false || (false)), _GLF_TRUE(_GLF_IDENTITY(true, false || (true)), (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)))).y)))))))), bool(bool(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat2(injectionSwitch, 0.0, 0.0), (false ? _GLF_FUZZED(mat2(-279.055, -5084.3812, 678.690, -827.808)) : mat2(injectionSwitch, 0.0, 0.0))))))).x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, 0.0 + (injectionSwitch.y))))), bool(bvec3(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat2(injectionSwitch, 0.0, 0.0), (false ? _GLF_FUZZED(mat2(-279.055, -5084.3812, 678.690, -827.808)) : mat2(injectionSwitch, 0.0, 0.0))))))).x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, 0.0 + (injectionSwitch.y))))), false || (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat2(injectionSwitch, 0.0, 0.0), (false ? _GLF_FUZZED(mat2(-279.055, -5084.3812, 678.690, -827.808)) : mat2(injectionSwitch, 0.0, 0.0))))))).x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, 0.0 + (injectionSwitch.y))))), ! (! ((_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat2(injectionSwitch, 0.0, 0.0), (false ? _GLF_FUZZED(mat2(-279.055, -5084.3812, 678.690, -827.808)) : mat2(injectionSwitch, 0.0, 0.0))))))).x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, 0.0 + (injectionSwitch.y)))))))))), false, false))))))), true && (_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), bool(bvec2(! (injectionSwitch.x > injectionSwitch.y), false))))))))))))))
  {
   for(int _injected_loop_counter = (((-34801 + 82265) >> 51710) & _GLF_IDENTITY(_GLF_IDENTITY((0 | 0), ((0 | 0)) | ((0 | 0))), min(_GLF_IDENTITY((0 | 0), ((0 | 0)) | ((0 | 0))), _GLF_IDENTITY((0 | 0), ((0 | 0)) | ((0 | 0)))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, clamp(1, 1, 1))); _injected_loop_counter ++)
    {
     return;
    }
  }
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY((injectionSwitch.y), min(_GLF_IDENTITY((injectionSwitch.y), (true ? (injectionSwitch.y) : _GLF_FUZZED(reflect(-9.8, -3.7)))), (injectionSwitch.y))) - _GLF_ZERO(0.0, injectionSwitch.x))))))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    {
     do
      {
       if(_GLF_DEAD(false))
        break;
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         return;
        }
       else
        {
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       return;
      }
    }
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))).x < injectionSwitch.y), bool(_GLF_IDENTITY(bvec3((injectionSwitch.x < injectionSwitch.y), false, _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), bool(bvec3(! (true), true, false)))))), _GLF_IDENTITY(bvec3(bvec4(bvec3((injectionSwitch.x < injectionSwitch.y), false, _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), bool(bvec3(! (true), true, false)))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bvec3(bvec4(bvec3(bvec4(bvec3((injectionSwitch.x < injectionSwitch.y), false, _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), bool(bvec3(! (true), true, false)))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true))))))), ! (_GLF_IDENTITY(! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), ! (! (! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = _GLF_IDENTITY(0, (0) / int(_GLF_ONE(1.0, injectionSwitch.y))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
              }
             else
              {
               if(_GLF_DEAD(false))
                return;
              }
            }
          }
         do
          {
           return;
           if(_GLF_DEAD(false))
            continue;
          }
         while(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-562.443)), float(injectionSwitch.y), bool(true)))))), bool(bvec4(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-562.443)), float(injectionSwitch.y), bool(true)))))), true, false, _GLF_IDENTITY(true, (_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), (! (true)) || false)))) && true)))), (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y))), false, true, false)), ! (! (bool(bvec4(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y))), false, true, false))))))) || false)))) || _GLF_IDENTITY(_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), _GLF_IDENTITY(bool(bvec4(false, true, false, true)), false || (bool(bvec4(false, true, false, true)))))));
        }
      }
    }
   else
    {
    }
  }
 else
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
        return;
      }
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     return;
    }
   else
    {
    }
  }
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = _GLF_IDENTITY(workgroup_size * _GLF_IDENTITY(workgroup_id, _GLF_IDENTITY((workgroup_id), 1u * (_GLF_IDENTITY((_GLF_IDENTITY(workgroup_id, _GLF_IDENTITY((workgroup_id) + 0u, ~ (~ ((workgroup_id) + 0u))))), (_GLF_IDENTITY((_GLF_IDENTITY(workgroup_id, (workgroup_id) + 0u)), ((_GLF_IDENTITY(workgroup_id, (workgroup_id) + _GLF_IDENTITY(0u, (0u) | (0u))))) | ((_GLF_IDENTITY(workgroup_id, (workgroup_id) + 0u))))) >> 0u))) >> 0u), (workgroup_size * _GLF_IDENTITY(workgroup_id, _GLF_IDENTITY((workgroup_id), 1u * (_GLF_IDENTITY((_GLF_IDENTITY(workgroup_id, (workgroup_id) + 0u)), (_GLF_IDENTITY((_GLF_IDENTITY(workgroup_id, (workgroup_id) + 0u)), ((_GLF_IDENTITY(workgroup_id, (workgroup_id) + 0u))) | _GLF_IDENTITY(((_GLF_IDENTITY(workgroup_id, (workgroup_id) + 0u))), _GLF_IDENTITY(uint(uvec3(_GLF_IDENTITY(((_GLF_IDENTITY(workgroup_id, (workgroup_id) + 0u))), max(_GLF_IDENTITY(((_GLF_IDENTITY(workgroup_id, (workgroup_id) + 0u))), (((_GLF_IDENTITY(workgroup_id, (workgroup_id) + 0u)))) - 0u), ((_GLF_IDENTITY(workgroup_id, (workgroup_id) + 0u))))), 1u, 0u)), uint(_GLF_IDENTITY(uvec4(uint(uvec3(_GLF_IDENTITY(((_GLF_IDENTITY(workgroup_id, (workgroup_id) + 0u))), max(_GLF_IDENTITY(((_GLF_IDENTITY(workgroup_id, (workgroup_id) + 0u))), (((_GLF_IDENTITY(workgroup_id, (workgroup_id) + 0u)))) - 0u), ((_GLF_IDENTITY(workgroup_id, (workgroup_id) + 0u))))), 1u, 0u)), 0u, 0u, 1u), (uvec4(uint(uvec3(_GLF_IDENTITY(((_GLF_IDENTITY(workgroup_id, (workgroup_id) + 0u))), max(_GLF_IDENTITY(((_GLF_IDENTITY(workgroup_id, (workgroup_id) + 0u))), (((_GLF_IDENTITY(workgroup_id, (workgroup_id) + 0u)))) - 0u), ((_GLF_IDENTITY(workgroup_id, (workgroup_id) + 0u))))), 1u, 0u)), 0u, 0u, 1u)) / uvec4(1u, 1u, 1u, 1u))))))) >> 0u))) >> _GLF_IDENTITY(0u, (0u) * 1u))) | 0u);
 if(_GLF_DEAD(false))
  return;
 uint subgroup_base = subgroup_id * subgroup_size;
 uint virtual_gid = _GLF_IDENTITY(workgroup_base + subgroup_base, uint(uint(workgroup_base + _GLF_IDENTITY(subgroup_base, 0u | (_GLF_IDENTITY(subgroup_base, _GLF_IDENTITY(_GLF_IDENTITY((subgroup_base), 0u ^ ((subgroup_base))) / 1u, ~ (~ (_GLF_IDENTITY((subgroup_base), 0u ^ ((subgroup_base))) / _GLF_IDENTITY(1u, min(1u, _GLF_IDENTITY(1u, (1u) ^ 0u)))))))))))) + _GLF_IDENTITY(subgroup_local_id, 0u + (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) + 0u)));
 uint next_virtual_gid = _GLF_IDENTITY(workgroup_base + subgroup_base, _GLF_IDENTITY(0u ^ (_GLF_IDENTITY(workgroup_base, max(workgroup_base, _GLF_IDENTITY(workgroup_base, min(workgroup_base, workgroup_base)))) + subgroup_base), (0u ^ (_GLF_IDENTITY(workgroup_base, max(workgroup_base, _GLF_IDENTITY(workgroup_base, min(workgroup_base, workgroup_base)))) + subgroup_base)) | (0u ^ (_GLF_IDENTITY(workgroup_base, max(workgroup_base, _GLF_IDENTITY(workgroup_base, min(workgroup_base, workgroup_base)))) + subgroup_base)))) + (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id + 1, (uint(_GLF_ONE(1.0, injectionSwitch.y)) & 1u) * (_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) >> 0u)))) % subgroup_size, (true ? (subgroup_local_id + 1) % _GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, ~ (~ (subgroup_size)))) | (subgroup_size)) : _GLF_IDENTITY(_GLF_FUZZED(uaddCarry(workgroup_size, workgroup_size, subgroup_id)), 0u ^ _GLF_IDENTITY((_GLF_IDENTITY(_GLF_FUZZED(uaddCarry(workgroup_size, workgroup_size, subgroup_id)), (true ? _GLF_FUZZED(uaddCarry(workgroup_size, workgroup_size, subgroup_id)) : _GLF_FUZZED(subgroup_base)))), (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_FUZZED(uaddCarry(workgroup_size, workgroup_size, subgroup_id)), (true ? _GLF_FUZZED(uaddCarry(workgroup_size, workgroup_size, subgroup_id)) : _GLF_FUZZED(subgroup_base)))), (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_FUZZED(uaddCarry(workgroup_size, workgroup_size, subgroup_id)), (true ? _GLF_FUZZED(uaddCarry(workgroup_size, workgroup_size, subgroup_id)) : _GLF_FUZZED(subgroup_base)))), ((_GLF_IDENTITY(_GLF_FUZZED(uaddCarry(workgroup_size, workgroup_size, subgroup_id)), (true ? _GLF_FUZZED(uaddCarry(workgroup_size, workgroup_size, subgroup_id)) : _GLF_FUZZED(subgroup_base))))) - 0u)) / 1u)) << 0u)))));
 uint read = 0;
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
  {
   do
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, false || (true))))
      {
       if(_GLF_DEAD(false))
        return;
      }
     else
      {
       if(_GLF_DEAD(false))
        continue;
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
      {
       if(_GLF_DEAD(false))
        return;
       break;
      }
     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) || false))
      {
      }
     else
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
        continue;
       for(int _injected_loop_counter = (1 & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
             if(_GLF_DEAD(false))
              return;
            }
           else
            {
             if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
              {
               if(_GLF_DEAD(false))
                break;
               break;
              }
             do
              {
               if(_GLF_DEAD(false))
                break;
               atomicStore(buf[next_virtual_gid], uint(1), 4, 64, 4);
              }
             while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) || false))))));
            }
           if(_GLF_DEAD(false))
            break;
           if(_GLF_DEAD(false))
            break;
          }
         if(_GLF_DEAD(false))
          return;
        }
       if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true))))
        continue;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          break;
         return;
        }
      }
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0), (_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0)) - 0.0))), _GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && ((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) || _GLF_IDENTITY(false, bool(bvec4(false, true, false, false))))))
      continue;
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, float(_GLF_IDENTITY(mat3x2(injectionSwitch.y, 0.0, _GLF_IDENTITY(0.0, max(0.0, _GLF_IDENTITY(0.0, (0.0) * 1.0))), 0.0, abs(0.0), 1.0), (mat3x2(injectionSwitch.y, 0.0, 0.0, 0.0, _GLF_IDENTITY(abs(0.0), (abs(0.0)) + 0.0), 1.0)) * mat3(1.0)))), (false ? _GLF_FUZZED(determinant(mat4(5797.9314, -21.33, -3007.3132, 3.4, _GLF_IDENTITY(-300.979, mix(float(_GLF_FUZZED(2.2)), float(-300.979), bool(true))), -4.6, _GLF_IDENTITY(-3.0, 0.0 + (-3.0)), 7547.7218, -946.631, 3.3, -76.06, -6.4, -4.9, _GLF_IDENTITY(651.052, clamp(651.052, 651.052, 651.052)), -7.7, -9.3))) : _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY((injectionSwitch.y) / 1.0, min((injectionSwitch.y) / 1.0, _GLF_IDENTITY((injectionSwitch.y) / 1.0, mix(float(_GLF_FUZZED(-2233.1250)), float((injectionSwitch.y) / 1.0), _GLF_IDENTITY(bool(true), bool(_GLF_IDENTITY(bool(bool(true)), bool(bvec4(bool(bool(true)), true, false, false))))))))))))))));
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(mat2(injectionSwitch.x, 0.0, 1.0, 0.0), mat2(mat4x2(mat2(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(float(false))), float(injectionSwitch.x), bool(true))), 0.0, 1.0, 0.0)))))) < injectionSwitch.y))))
  {
   do
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
      return;
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(false))
    return;
   for(int _injected_loop_counter = (1 & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
           for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < 1), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < 1), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter < 1)))), bool(bvec2(_GLF_WRAPPED_LOOP(_injected_loop_counter < 1), false)))) && _GLF_IDENTITY(true, ! (! (true)))); _injected_loop_counter ++)
            {
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 | _GLF_IDENTITY(1, clamp(1, 1, _GLF_IDENTITY(1, ~ (~ (1))))))); _GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) | (_GLF_IDENTITY(1 ^ 1, int(ivec4(_GLF_IDENTITY(1 ^ 1, (1 ^ 1) - 0), 1, 1, 1))))))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(_GLF_IDENTITY(mat3(injectionSwitch.x, 1.0, 0.0, 1.0, sqrt(0.0), 0.0, log(1.0), 1.0, 0.0), mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0) + _GLF_IDENTITY((mat3(injectionSwitch.x, 1.0, 0.0, 1.0, sqrt(0.0), 0.0, _GLF_IDENTITY(log(1.0), (log(1.0)) + sqrt(0.0)), 1.0, 0.0)), mat3(mat3x4((mat3(injectionSwitch.x, 1.0, 0.0, 1.0, sqrt(0.0), 0.0, _GLF_IDENTITY(log(1.0), (log(1.0)) + sqrt(0.0)), 1.0, 0.0))))))), clamp(float(_GLF_IDENTITY(mat3(injectionSwitch.x, 1.0, 0.0, 1.0, sqrt(0.0), 0.0, log(1.0), 1.0, 0.0), mat3(0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0, 0.0, 0.0, 0.0, 0.0) + (mat3(injectionSwitch.x, 1.0, 0.0, 1.0, sqrt(0.0), 0.0, log(1.0), 1.0, 0.0)))), float(_GLF_IDENTITY(mat3(injectionSwitch.x, 1.0, 0.0, 1.0, sqrt(0.0), 0.0, log(1.0), 1.0, 0.0), mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0) + _GLF_IDENTITY((mat3(injectionSwitch.x, 1.0, 0.0, 1.0, sqrt(0.0), 0.0, log(1.0), 1.0, 0.0)), mat3(_GLF_IDENTITY(mat4((mat3(injectionSwitch.x, 1.0, 0.0, 1.0, sqrt(0.0), 0.0, log(1.0), 1.0, 0.0))), (false ? _GLF_FUZZED(mat4(-4.5, -1.2, -3.2, 577.246, -7.5, 39.46, 85.39, 2754.3182, 815.748, 97.94, -28.72, 5265.5182, 46.13, -434.248, 7232.0428, -98.59)) : mat4((mat3(injectionSwitch.x, 1.0, 0.0, 1.0, sqrt(0.0), 0.0, log(1.0), 1.0, 0.0))))))))), _GLF_IDENTITY(float(_GLF_IDENTITY(mat3(injectionSwitch.x, 1.0, 0.0, 1.0, sqrt(0.0), 0.0, _GLF_IDENTITY(log(1.0), mix(float(log(1.0)), float(_GLF_FUZZED(-7760.8333)), bool(false))), 1.0, 0.0), mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, _GLF_IDENTITY(float(_GLF_IDENTITY(vec2(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), 1.0), vec2(vec3(vec2(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), 1.0), 0.0)))), clamp(float(_GLF_IDENTITY(vec2(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), 1.0), vec2(vec3(vec2(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), 1.0), 0.0)))), float(_GLF_IDENTITY(vec2(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), 1.0), vec2(vec3(vec2(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), 1.0), 0.0)))), float(_GLF_IDENTITY(vec2(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), 1.0), vec2(_GLF_IDENTITY(vec3(vec2(_GLF_IDENTITY(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), max(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), _GLF_IDENTITY(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), (_GLF_IDENTITY(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), max(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0))))) / 1.0))), 1.0), 0.0), min(vec3(vec2(_GLF_IDENTITY(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), max(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), _GLF_IDENTITY(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), (_GLF_IDENTITY(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), max(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0))))) / 1.0))), 1.0), 0.0), vec3(vec2(_GLF_IDENTITY(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), max(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), _GLF_IDENTITY(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), (_GLF_IDENTITY(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), max(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0))))) / 1.0))), 1.0), 0.0))))))))), 0.0) + (mat3(injectionSwitch.x, 1.0, 0.0, 1.0, sqrt(0.0), _GLF_IDENTITY(0.0, (0.0) * 1.0), log(1.0), 1.0, 0.0)))), float(mat4x3(float(_GLF_IDENTITY(mat3(injectionSwitch.x, 1.0, 0.0, 1.0, sqrt(0.0), 0.0, log(1.0), 1.0, 0.0), mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, clamp(_GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, min(0.0, 0.0))) / 1.0), 0.0, _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)))), 0.0) + (mat3(injectionSwitch.x, 1.0, 0.0, 1.0, sqrt(0.0), 0.0, _GLF_IDENTITY(log(1.0), (log(1.0)) * 1.0), 1.0, 0.0)))), 0.0, _GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED((-143.361 + -0.6))), bool(false))), 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0)))))) > injectionSwitch.y))))
                return;
               if(_GLF_DEAD(false))
                break;
              }
             return;
             if(_GLF_DEAD(false))
              break;
             if(_GLF_DEAD(false))
              break;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              break;
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
          }
         else
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0), injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))), _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(_GLF_IDENTITY(_GLF_IDENTITY(acosh(vec2(9854.6989, -1570.2321)), min(_GLF_IDENTITY(acosh(vec2(9854.6989, -1570.2321)), (acosh(vec2(9854.6989, -1570.2321))) - vec2(0.0, 0.0)), _GLF_IDENTITY(acosh(vec2(9854.6989, -1570.2321)), max(acosh(vec2(9854.6989, -1570.2321)), acosh(vec2(9854.6989, -1570.2321)))))), vec2(vec3(acosh(vec2(9854.6989, -1570.2321)), 0.0)))))))).x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0)) && true)))))
              {
               if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), ! (! (! (_GLF_DEAD(false))))))))
                break;
               do
                {
                 return;
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             return;
            }
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            continue;
           return;
          }
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(false))
              return;
             if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 do
                  {
                   return;
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).y))));
                }
              }
            }
           else
            {
            }
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
      }
    }
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         for(int _injected_loop_counter = ((_GLF_IDENTITY(1, (1) * 1) << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 >> _GLF_IDENTITY(int(8), int(8)))); _injected_loop_counter --)
          {
           if(_GLF_DEAD(false))
            continue;
           return;
          }
        }
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         do
          {
           if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(vec3(injectionSwitch, 1.0))).y), _GLF_IDENTITY(true, (_GLF_IDENTITY(_GLF_IDENTITY(true, bool(bvec4(true, true, false, false))), bool(bvec3(_GLF_IDENTITY(true, bool(bvec4(true, true, false, false))), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))) && true) && ((injectionSwitch.x > injectionSwitch.y))))))
            return;
          }
         while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))));
        }
       else
        {
        }
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(false))
            return;
          }
         else
          {
           if(_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id % 2), (_GLF_IDENTITY((subgroup_local_id % 2), 0u | ((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) - 0u) % 2, uint(uvec4(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) - 0u) % 2, 0u, 0u, 1u))))))) >> _GLF_IDENTITY(_GLF_IDENTITY(0u, ~ (~ (0u))), max(0u, 0u))), max(_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id % _GLF_IDENTITY(2, _GLF_IDENTITY(int(int(2)), (int(int(2))) << 0))), (_GLF_IDENTITY((subgroup_local_id % 2), 0u | ((subgroup_local_id % 2)))) >> 0u), (_GLF_IDENTITY((subgroup_local_id % _GLF_IDENTITY(2, (_GLF_IDENTITY(2, (_GLF_IDENTITY(2, ~ _GLF_IDENTITY((~ (2)), ~ (~ (_GLF_IDENTITY((~ (2)), 0 ^ ((~ (2))))))))) / 1)) >> 0)), (_GLF_IDENTITY((subgroup_local_id % _GLF_IDENTITY(2, (2) << _GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, min(0, _GLF_IDENTITY(0, min(0, 0)))))))), 0u | _GLF_IDENTITY(((subgroup_local_id % 2)), (((subgroup_local_id % 2))) * 1u))) >> 0u)) << 0u), _GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id % 2), 0u ^ _GLF_IDENTITY((_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id % 2, uint(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(subgroup_local_id % 2, (subgroup_local_id % 2) | 0u), 0u), (uvec2(_GLF_IDENTITY(subgroup_local_id % 2, (subgroup_local_id % 2) | 0u), 0u)) - uvec2(0u, 0u))))), _GLF_IDENTITY(((subgroup_local_id % 2)), 0u ^ (((subgroup_local_id % 2)))) << 0u)), (_GLF_IDENTITY((_GLF_IDENTITY((subgroup_local_id % 2), _GLF_IDENTITY(((subgroup_local_id % 2)), 0u ^ (((subgroup_local_id % 2)))) << 0u)), uint(uvec3((_GLF_IDENTITY((subgroup_local_id % 2), _GLF_IDENTITY(((subgroup_local_id % 2)), 0u ^ (((subgroup_local_id % 2)))) << 0u)), 1u, 0u)))) | (0u | 0u))), (_GLF_IDENTITY((subgroup_local_id % 2), 0u | ((_GLF_IDENTITY(subgroup_local_id, 0u ^ (_GLF_IDENTITY(subgroup_local_id, min(_GLF_IDENTITY(subgroup_local_id, uint(uvec4(subgroup_local_id, 0u, (0u | 0u), 1u))), _GLF_IDENTITY(subgroup_local_id, 1u * (subgroup_local_id)))))) % 2)))) >> 0u))) == 0)
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true && _GLF_IDENTITY((_GLF_IDENTITY(! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (! (! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), ! (_GLF_IDENTITY(! ((_GLF_IDENTITY(! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (! (! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))), bool(bvec4(! ((_GLF_IDENTITY(! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (! (! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))), false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))))
              {
               if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
                return;
              }
             else
              {
               if(_GLF_DEAD(false))
                return;
               if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), (_GLF_IDENTITY(false, (false) || false)) || false)) && true), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), bool(bvec4(_GLF_IDENTITY(false, _GLF_IDENTITY((false), ! (! (_GLF_IDENTITY((false), bool(bvec2((false), false)))))) || false), false, true, true))))), (bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) || false), bool(bvec4(_GLF_IDENTITY(false, (false) || false), _GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, false, false), bvec3(bvec3(bvec3(false, false, false)))))), true, true)))))) && true))))
                {
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat4x2(injectionSwitch, exp(0.0), 1.0, round(length(normalize(vec2(1.0, 1.0)))), round(length(normalize(_GLF_IDENTITY(vec3(1.0, 1.0, 1.0), (vec3(1.0, 1.0, 1.0)) * mat3(1.0))))), 1.0, 1.0), (mat4x2(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), injectionSwitch)), exp(0.0), 1.0, round(length(normalize(vec2(1.0, 1.0)))), round(length(normalize(vec3(1.0, 1.0, 1.0)))), 1.0, 1.0)) * mat4(1.0)))).y))))
                  {
                   do
                    {
                     return;
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                  }
                 else
                  {
                  }
                 if(_GLF_DEAD(false))
                  return;
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  return;
                }
               if(_GLF_DEAD(false))
                return;
               if(_GLF_DEAD(false))
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _GLF_IDENTITY(_injected_loop_counter --, (false ? _GLF_FUZZED(ivec4(-9091, -13981, -36289, -40708)[1]) : _injected_loop_counter --)))
                    {
                     return;
                    }
                  }
                 else
                  {
                  }
                }
               read = atomicLoad(_GLF_IDENTITY(buf[_GLF_IDENTITY(virtual_gid, (virtual_gid) / 1u)], (_GLF_IDENTITY(buf[virtual_gid], ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(buf[virtual_gid], (0u >> _GLF_IDENTITY(_GLF_IDENTITY(uint(0u), min(uint(0u), uint(0u))), uint(_GLF_IDENTITY(_GLF_IDENTITY(0u, (0u) >> 0u), (0u) >> (_GLF_IDENTITY(1u, (1u) | (1u)) ^ 1u))))) ^ (buf[_GLF_IDENTITY(virtual_gid, (virtual_gid) ^ 0u)]))), ~ (~ (~ _GLF_IDENTITY((buf[virtual_gid]), max(_GLF_IDENTITY((buf[virtual_gid]), ((buf[virtual_gid])) - 0u), _GLF_IDENTITY((buf[virtual_gid]), _GLF_IDENTITY(_GLF_IDENTITY(uint(uint((buf[virtual_gid]))), (uint(uint((buf[virtual_gid])))) - 0u), (_GLF_IDENTITY(uint(uint((buf[virtual_gid]))), (uint(uint((buf[virtual_gid])))) - 0u)) | (_GLF_IDENTITY(uint(uint((buf[virtual_gid]))), (uint(uint((buf[virtual_gid])))) - 0u)))))))))))) ^ _GLF_IDENTITY(0u, (0u) | 0u)), 4, 64, 2);
               if(_GLF_DEAD(false))
                {
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                  {
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     return;
                    }
                  }
                 else
                  {
                  }
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                return;
              }
            }
           else
            {
             if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x)) > injectionSwitch.y)), bool(bvec3(_GLF_FALSE(_GLF_IDENTITY(false, (false) || _GLF_IDENTITY(false, false || (false))), (injectionSwitch.x > injectionSwitch.y)), true, false)))))
              return;
             if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), (_GLF_WRAPPED_IF_TRUE(true)) && true))
              {
               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, max(0, 0))); _injected_loop_counter --)
                {
                 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > 0, ! _GLF_IDENTITY((_GLF_IDENTITY(! (_injected_loop_counter > 0), false || (! (_injected_loop_counter > 0)))), ((_GLF_IDENTITY(_GLF_IDENTITY(! (_injected_loop_counter > 0), (! (_injected_loop_counter > 0)) && true), false || (! (_injected_loop_counter > 0))))) || false))); _GLF_IDENTITY(_injected_loop_counter --, (_GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) ^ 0)) - 0))
                  {
                   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), _GLF_IDENTITY(bool(bool(_GLF_WRAPPED_IF_FALSE(false))), _GLF_IDENTITY(bool(bool(bool(bool(_GLF_WRAPPED_IF_FALSE(false))))), false || (bool(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_WRAPPED_IF_FALSE(false)), false || (bool(_GLF_WRAPPED_IF_FALSE(false)))), ! (_GLF_IDENTITY(! (bool(_GLF_WRAPPED_IF_FALSE(false))), _GLF_IDENTITY(false, true && (false)) || (! (bool(_GLF_WRAPPED_IF_FALSE(false)))))))), bool(bvec4(bool(_GLF_IDENTITY(bool(_GLF_WRAPPED_IF_FALSE(false)), ! (_GLF_IDENTITY(! (bool(_GLF_WRAPPED_IF_FALSE(false))), false || (! (bool(_GLF_WRAPPED_IF_FALSE(false)))))))), true, true, false))))))))))
                    {
                     if(_GLF_DEAD(false))
                      break;
                    }
                   else
                    {
                     do
                      {
                       read = atomicLoad(buf[_GLF_IDENTITY(virtual_gid, ~ (~ (virtual_gid)))], _GLF_IDENTITY(_GLF_IDENTITY(4, 0 | (_GLF_IDENTITY(4, (false ? _GLF_FUZZED(_injected_loop_counter) : 4)))), min(_GLF_IDENTITY(_GLF_IDENTITY(4, 0 | (_GLF_IDENTITY(4, (false ? _GLF_FUZZED(_injected_loop_counter) : 4)))), clamp(_GLF_IDENTITY(4, 0 | (_GLF_IDENTITY(4, (false ? _GLF_FUZZED(_injected_loop_counter) : 4)))), _GLF_IDENTITY(4, 0 | (_GLF_IDENTITY(4, (false ? _GLF_FUZZED(_injected_loop_counter) : 4)))), _GLF_IDENTITY(4, 0 | (_GLF_IDENTITY(4, (false ? _GLF_FUZZED(_injected_loop_counter) : 4)))))), _GLF_IDENTITY(4, 0 | (_GLF_IDENTITY(4, (false ? _GLF_FUZZED(_injected_loop_counter) : 4)))))), 64, _GLF_IDENTITY(2, clamp(2, 2, 2)));
                      }
                     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))), true, _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0), injectionSwitch.x)) > injectionSwitch.y)), true)))));
                     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, true, true)))))
                      continue;
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      continue;
                    }
                   if(_GLF_DEAD(false))
                    break;
                   if(_GLF_DEAD(false))
                    return;
                   if(_GLF_DEAD(false))
                    break;
                   if(_GLF_DEAD(false))
                    return;
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY((false) && true, false || ((false) && true)))))
                      {
                      }
                     else
                      {
                       if(_GLF_DEAD(false))
                        {
                         if(_GLF_WRAPPED_IF_FALSE(false))
                          {
                          }
                         else
                          {
                           return;
                          }
                        }
                      }
                    }
                  }
                }
               if(_GLF_DEAD(false))
                return;
              }
             else
              {
              }
            }
          }
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       if(_GLF_DEAD(false))
        return;
      }
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       return;
      }
    }
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], max(injectionSwitch[1], injectionSwitch[1])))).x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      return;
     return;
    }
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec2(bvec2(false, false))))))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), false || (_GLF_WRAPPED_IF_FALSE(false))))
        {
        }
       else
        {
         return;
        }
       if(_GLF_DEAD(false))
        return;
      }
    }
   return;
  }
 for(int _injected_loop_counter = (0 | 0); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), true && (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1))); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    break;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    break;
   do
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, false)))))
      continue;
     subgroupBarrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(false))
    {
     do
      {
       return;
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (false)))))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
     else
      {
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, true && (false))))
      {
      }
     else
      {
       return;
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, _GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, bool(bool(false))))) || (false)))))))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_DEAD(false))
          return;
        }
       else
        {
         return;
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   else
    {
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(_GLF_IDENTITY(-5889.6949, float(_GLF_IDENTITY(mat4x3(-5889.6949, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, tan(0.0), 1.0), transpose(transpose(mat4x3(-5889.6949, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, tan(0.0), 1.0))))))), (injectionSwitch)[1]), vec2(_GLF_IDENTITY((injectionSwitch)[0], max((injectionSwitch)[0], (injectionSwitch)[0])), _GLF_FUZZED(-393.785)), bvec2(true, false))).y))))
    return;
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        {
         do
          {
           if(_GLF_DEAD(false))
            return;
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).x > injectionSwitch.y)), bool(_GLF_IDENTITY(bvec3(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(bvec3(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bvec3(bvec3(bvec3(bvec3(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), bvec3(bvec4(bvec3(_GLF_IDENTITY(bvec3(bvec3(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bvec3(bvec3(bvec3(bvec3(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), true))))))))
          continue;
         continue;
        }
       continue;
       for(int _injected_loop_counter = _GLF_IDENTITY(1, min(1, 1)); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(8), (int(8)) - 0), int(8)))); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          return;
        }
      }
     atomicStore(checker[virtual_gid], read, 4, 64, _GLF_IDENTITY(4, _GLF_IDENTITY(max(4, 4), clamp(max(4, 4), max(4, 4), max(4, 4)))));
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) || false)));
  }
 do
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, false || _GLF_IDENTITY((false), ((false)) && true))))
    {
     if(_GLF_DEAD(false))
      return;
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       return;
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 for(int _injected_loop_counter = 1; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, 0 | (_injected_loop_counter)) > 0), (_GLF_WRAPPED_LOOP(_injected_loop_counter > 0)) && true); _injected_loop_counter --)
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || _GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), _GLF_IDENTITY(vec2(mat3x4(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], (injectionSwitch[0]) / 1.0), injectionSwitch[1]))), mix(vec2(_GLF_FUZZED(-95.70), ((injectionSwitch))[1]), vec2(((injectionSwitch))[0], _GLF_FUZZED(5048.3835)), bvec2(true, false)))), (_GLF_IDENTITY(injectionSwitch, mat2(_GLF_IDENTITY(1.0, (1.0) * 1.0)) * (injectionSwitch))) * _GLF_IDENTITY(vec2(1.0, 1.0), _GLF_IDENTITY(vec2(mat2(vec2(1.0, 1.0), 0.0, 0.0)), max(vec2(mat2(vec2(1.0, 1.0), 0.0, 0.0)), vec2(mat2(vec2(1.0, 1.0), 0.0, 0.0)))))), _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(1.0, 0.0)), dot(vec2(0.0, 1.0), vec2(1.0, 0.0))), 0.0, determinant(_GLF_IDENTITY(mat3(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0), (true ? _GLF_IDENTITY(mat3(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0), mat3(mat4(_GLF_IDENTITY(mat3(0.0, _GLF_IDENTITY(0.0, (0.0) - determinant(mat4(0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))), 0.0, 1.0, 0.0, 0.0, 1.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0), (mat3(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0)) / mat3(1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0))))) : _GLF_FUZZED(mat3(1.2, 38.47, 6006.2695, 589.247, 683.498, -9.1, 8.2, 5914.7437, -3.3))))), 1.0, _GLF_IDENTITY(tan(0.0), (tan(0.0)) - 0.0), _GLF_IDENTITY(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(9.2) : 1.0)), (1.0) * exp(0.0)), 1.0, 1.0, 0.0, 1.0)), (_GLF_IDENTITY(true ? vec2(mat3x4(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * _GLF_IDENTITY((injectionSwitch), mix(vec2(_GLF_FUZZED(-95.70), ((injectionSwitch))[1]), vec2(((injectionSwitch))[0], _GLF_FUZZED(5048.3835)), bvec2(true, false)))), (_GLF_IDENTITY(injectionSwitch, mat2(_GLF_IDENTITY(1.0, (1.0) * 1.0)) * (injectionSwitch))) * vec2(1.0, 1.0)), _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(1.0, 0.0)), dot(vec2(0.0, 1.0), vec2(1.0, 0.0))), 0.0, determinant(_GLF_IDENTITY(mat3(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0), (true ? _GLF_IDENTITY(mat3(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, round(_GLF_IDENTITY(length(normalize(vec3(1.0, 1.0, 1.0))), 0.0 + (length(normalize(vec3(1.0, 1.0, 1.0)))))), 0.0), mat3(mat4(_GLF_IDENTITY(mat3(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, _GLF_IDENTITY(1.0, float(mat2(1.0, 1.0, 0.0, 0.0))), round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0), (mat3(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0)) / mat3(1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0))))) : _GLF_FUZZED(mat3(1.2, 38.47, 6006.2695, 589.247, 683.498, -9.1, 8.2, 5914.7437, -3.3))))), 1.0, tan(0.0), _GLF_IDENTITY(1.0, (1.0) * exp(0.0)), 1.0, 1.0, 0.0, 1.0)) : _GLF_FUZZED(step(injectionSwitch, injectionSwitch)), clamp(true ? vec2(mat3x4(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * _GLF_IDENTITY((injectionSwitch), mix(vec2(_GLF_FUZZED(-95.70), ((injectionSwitch))[1]), vec2(((injectionSwitch))[0], _GLF_FUZZED(5048.3835)), bvec2(true, false)))), (_GLF_IDENTITY(injectionSwitch, mat2(_GLF_IDENTITY(1.0, (1.0) * 1.0)) * (injectionSwitch))) * vec2(1.0, 1.0)), _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(1.0, 0.0)), dot(vec2(0.0, 1.0), vec2(1.0, 0.0))), 0.0, determinant(_GLF_IDENTITY(mat3(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0), (true ? _GLF_IDENTITY(mat3(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, round(_GLF_IDENTITY(length(normalize(vec3(1.0, 1.0, 1.0))), 0.0 + (length(normalize(vec3(1.0, 1.0, 1.0)))))), 0.0), mat3(mat4(_GLF_IDENTITY(mat3(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, _GLF_IDENTITY(1.0, float(mat2(1.0, 1.0, 0.0, 0.0))), round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0), (mat3(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0)) / mat3(1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0))))) : _GLF_FUZZED(mat3(1.2, 38.47, 6006.2695, 589.247, 683.498, -9.1, 8.2, 5914.7437, -3.3))))), 1.0, tan(0.0), _GLF_IDENTITY(1.0, (1.0) * exp(0.0)), 1.0, 1.0, 0.0, 1.0)) : _GLF_FUZZED(step(injectionSwitch, injectionSwitch)), true ? vec2(mat3x4(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * _GLF_IDENTITY((injectionSwitch), mix(vec2(_GLF_FUZZED(-95.70), ((injectionSwitch))[1]), vec2(((injectionSwitch))[0], _GLF_FUZZED(5048.3835)), bvec2(true, false)))), (_GLF_IDENTITY(injectionSwitch, mat2(_GLF_IDENTITY(1.0, (1.0) * 1.0)) * (injectionSwitch))) * vec2(1.0, 1.0)), _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(1.0, 0.0)), dot(vec2(0.0, 1.0), vec2(1.0, 0.0))), 0.0, determinant(_GLF_IDENTITY(mat3(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0), (true ? _GLF_IDENTITY(mat3(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, round(_GLF_IDENTITY(length(normalize(vec3(1.0, 1.0, 1.0))), 0.0 + (length(normalize(vec3(1.0, 1.0, 1.0)))))), 0.0), mat3(mat4(_GLF_IDENTITY(mat3(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, _GLF_IDENTITY(1.0, float(mat2(1.0, 1.0, 0.0, 0.0))), round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0), (mat3(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0)) / mat3(1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0))))) : _GLF_FUZZED(mat3(1.2, 38.47, 6006.2695, 589.247, 683.498, -9.1, 8.2, 5914.7437, -3.3))))), 1.0, tan(0.0), _GLF_IDENTITY(1.0, (1.0) * exp(0.0)), 1.0, 1.0, 0.0, 1.0)) : _GLF_FUZZED(step(injectionSwitch, injectionSwitch)), true ? vec2(mat3x4(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * _GLF_IDENTITY((injectionSwitch), mix(vec2(_GLF_FUZZED(-95.70), ((injectionSwitch))[1]), vec2(((injectionSwitch))[0], _GLF_FUZZED(5048.3835)), bvec2(true, false)))), (_GLF_IDENTITY(injectionSwitch, mat2(_GLF_IDENTITY(1.0, (1.0) * 1.0)) * (injectionSwitch))) * vec2(1.0, 1.0)), _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(1.0, 0.0)), dot(vec2(0.0, 1.0), vec2(1.0, 0.0))), 0.0, determinant(_GLF_IDENTITY(mat3(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0), (true ? _GLF_IDENTITY(mat3(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, round(_GLF_IDENTITY(length(normalize(vec3(1.0, 1.0, 1.0))), 0.0 + (length(normalize(vec3(1.0, 1.0, 1.0)))))), 0.0), mat3(mat4(_GLF_IDENTITY(mat3(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, _GLF_IDENTITY(1.0, float(mat2(1.0, 1.0, 0.0, 0.0))), round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0), (mat3(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0)) / mat3(1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0))))) : _GLF_FUZZED(mat3(1.2, 38.47, 6006.2695, 589.247, 683.498, -9.1, 8.2, 5914.7437, -3.3))))), 1.0, tan(0.0), _GLF_IDENTITY(1.0, (1.0) * exp(0.0)), 1.0, 1.0, 0.0, 1.0)) : _GLF_FUZZED(step(injectionSwitch, injectionSwitch))))))).x > injectionSwitch.y, bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mat2(_GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-5.9)), bool(false)))))) * (injectionSwitch)), _GLF_IDENTITY(vec2(mat3x4(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * _GLF_IDENTITY((injectionSwitch), mix(vec2(_GLF_FUZZED(-95.70), ((injectionSwitch))[1]), vec2(((injectionSwitch))[0], _GLF_FUZZED(5048.3835)), bvec2(true, false)))), (_GLF_IDENTITY(injectionSwitch, mat2(_GLF_IDENTITY(1.0, (1.0) * 1.0)) * (injectionSwitch))) * vec2(1.0, 1.0)), _GLF_IDENTITY(dot(vec2(0.0, 1.0), _GLF_IDENTITY(vec2(1.0, 0.0), (vec2(1.0, 0.0)) * mat2(1.0))), dot(vec2(0.0, 1.0), vec2(1.0, 0.0))), 0.0, determinant(_GLF_IDENTITY(mat3(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0), (true ? _GLF_IDENTITY(mat3(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0), mat3(mat4(_GLF_IDENTITY(mat3(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0), (mat3(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0)) / mat3(1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0))))) : _GLF_FUZZED(mat3(1.2, 38.47, 6006.2695, 589.247, 683.498, -9.1, 8.2, 5914.7437, -3.3))))), 1.0, tan(0.0), _GLF_IDENTITY(1.0, (1.0) * exp(0.0)), 1.0, 1.0, 0.0, 1.0)), (true ? vec2(mat3x4(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * _GLF_IDENTITY((injectionSwitch), mix(vec2(_GLF_FUZZED(-95.70), ((injectionSwitch))[1]), vec2(((injectionSwitch))[0], _GLF_FUZZED(5048.3835)), bvec2(true, false)))), (_GLF_IDENTITY(injectionSwitch, mat2(_GLF_IDENTITY(1.0, _GLF_IDENTITY((1.0) * 1.0, (_GLF_IDENTITY((1.0) * 1.0, _GLF_IDENTITY(float(vec4((1.0) * 1.0, 1.0, 1.0, 0.0)), mix(float(float(vec4((1.0) * 1.0, 1.0, 1.0, 0.0))), float(_GLF_FUZZED(23.50)), bool(false))))) - 0.0))) * (injectionSwitch))) * vec2(1.0, 1.0)), _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(1.0, 0.0)), dot(vec2(0.0, 1.0), vec2(1.0, 0.0))), 0.0, determinant(_GLF_IDENTITY(_GLF_IDENTITY(mat3(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0), (true ? _GLF_IDENTITY(mat3(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0), mat3(mat4(_GLF_IDENTITY(mat3(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0), (mat3(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0)) / mat3(1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0))))) : _GLF_FUZZED(mat3(1.2, 38.47, 6006.2695, 589.247, 683.498, -9.1, 8.2, 5914.7437, -3.3)))), mat3(mat3(_GLF_IDENTITY(mat3(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0), (true ? _GLF_IDENTITY(mat3(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0), mat3(mat4(_GLF_IDENTITY(mat3(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0), (mat3(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0)) / mat3(1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0))))) : _GLF_FUZZED(mat3(1.2, 38.47, 6006.2695, 589.247, 683.498, -9.1, 8.2, 5914.7437, -3.3)))))))), 1.0, tan(0.0), _GLF_IDENTITY(1.0, (1.0) * exp(0.0)), 1.0, 1.0, 0.0, 1.0)) : _GLF_FUZZED(step(injectionSwitch, injectionSwitch))))).x > injectionSwitch.y, ! (! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), _GLF_IDENTITY(_GLF_IDENTITY(vec2(mat3x4(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch), mix(vec2(_GLF_FUZZED(-95.70), ((injectionSwitch))[1]), vec2(((injectionSwitch))[0], _GLF_FUZZED(5048.3835)), bvec2(true, false))), (_GLF_IDENTITY((injectionSwitch), mix(vec2(_GLF_FUZZED(-95.70), ((injectionSwitch))[1]), vec2(((injectionSwitch))[0], _GLF_FUZZED(5048.3835)), bvec2(true, false)))) + vec2(0.0, 0.0))), (_GLF_IDENTITY(injectionSwitch, mat2(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0))) * 1.0)) * (injectionSwitch))) * vec2(1.0, 1.0)), _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(1.0, 0.0)), dot(vec2(_GLF_IDENTITY(0.0, min(0.0, 0.0)), 1.0), vec2(1.0, _GLF_IDENTITY(0.0, 1.0 * (0.0))))), 0.0, determinant(_GLF_IDENTITY(mat3(0.0, 0.0, 0.0, 1.0, 0.0, _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(dot(-7.7, -450.912)) : 0.0)), 1.0, round(_GLF_IDENTITY(length(normalize(vec3(1.0, 1.0, 1.0))), 1.0 * (length(normalize(vec3(1.0, 1.0, 1.0)))))), 0.0), (true ? _GLF_IDENTITY(mat3(0.0, 0.0, 0.0, _GLF_IDENTITY(1.0, 1.0 * (1.0)), 0.0, 0.0, 1.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0), mat3(mat4(_GLF_IDENTITY(mat3(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0), (mat3(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0)) / mat3(1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0))))) : _GLF_FUZZED(mat3(1.2, 38.47, 6006.2695, 589.247, 683.498, -9.1, 8.2, 5914.7437, -3.3))))), 1.0, tan(0.0), _GLF_IDENTITY(1.0, (1.0) * exp(0.0)), 1.0, 1.0, 0.0, 1.0)), max(vec2(mat3x4(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch), mix(vec2(_GLF_FUZZED(-95.70), ((injectionSwitch))[1]), vec2(((injectionSwitch))[0], _GLF_FUZZED(5048.3835)), bvec2(true, false))), (_GLF_IDENTITY((injectionSwitch), mix(vec2(_GLF_FUZZED(-95.70), ((injectionSwitch))[1]), vec2(((injectionSwitch))[0], _GLF_FUZZED(5048.3835)), bvec2(true, false)))) + vec2(0.0, 0.0))), (_GLF_IDENTITY(injectionSwitch, mat2(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0))) * 1.0)) * (injectionSwitch))) * vec2(1.0, 1.0)), _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(1.0, 0.0)), dot(vec2(_GLF_IDENTITY(0.0, min(0.0, 0.0)), 1.0), vec2(1.0, _GLF_IDENTITY(0.0, 1.0 * (0.0))))), 0.0, determinant(_GLF_IDENTITY(mat3(0.0, 0.0, 0.0, 1.0, 0.0, _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(dot(-7.7, -450.912)) : 0.0)), 1.0, round(_GLF_IDENTITY(length(normalize(vec3(1.0, 1.0, 1.0))), 1.0 * (length(normalize(vec3(1.0, 1.0, 1.0)))))), 0.0), (true ? _GLF_IDENTITY(mat3(0.0, 0.0, 0.0, _GLF_IDENTITY(1.0, 1.0 * (1.0)), 0.0, 0.0, 1.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0), mat3(mat4(_GLF_IDENTITY(mat3(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0), (mat3(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0)) / mat3(1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0))))) : _GLF_FUZZED(mat3(1.2, 38.47, 6006.2695, 589.247, 683.498, -9.1, 8.2, 5914.7437, -3.3))))), 1.0, tan(0.0), _GLF_IDENTITY(1.0, (1.0) * exp(0.0)), 1.0, 1.0, 0.0, 1.0)), vec2(mat3x4(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch), mix(vec2(_GLF_FUZZED(-95.70), ((injectionSwitch))[1]), vec2(((injectionSwitch))[0], _GLF_FUZZED(5048.3835)), bvec2(true, false))), (_GLF_IDENTITY((injectionSwitch), mix(vec2(_GLF_FUZZED(-95.70), ((injectionSwitch))[1]), vec2(((injectionSwitch))[0], _GLF_FUZZED(5048.3835)), bvec2(true, false)))) + vec2(0.0, 0.0))), (_GLF_IDENTITY(injectionSwitch, mat2(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0))) * 1.0)) * (injectionSwitch))) * vec2(1.0, 1.0)), _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(1.0, 0.0)), dot(vec2(_GLF_IDENTITY(0.0, min(0.0, 0.0)), 1.0), vec2(1.0, _GLF_IDENTITY(0.0, 1.0 * (0.0))))), 0.0, determinant(_GLF_IDENTITY(mat3(0.0, 0.0, 0.0, 1.0, 0.0, _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(dot(-7.7, -450.912)) : 0.0)), 1.0, round(_GLF_IDENTITY(length(normalize(vec3(1.0, 1.0, 1.0))), 1.0 * (length(normalize(vec3(1.0, 1.0, 1.0)))))), 0.0), (true ? _GLF_IDENTITY(mat3(0.0, 0.0, 0.0, _GLF_IDENTITY(1.0, 1.0 * (1.0)), 0.0, 0.0, 1.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0), mat3(mat4(_GLF_IDENTITY(mat3(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0), (mat3(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0)) / mat3(1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0))))) : _GLF_FUZZED(mat3(1.2, 38.47, 6006.2695, 589.247, 683.498, -9.1, 8.2, 5914.7437, -3.3))))), 1.0, tan(0.0), _GLF_IDENTITY(1.0, (1.0) * exp(0.0)), 1.0, 1.0, 0.0, 1.0)))), (true ? vec2(mat3x4(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * _GLF_IDENTITY((injectionSwitch), mix(vec2(_GLF_FUZZED(-95.70), ((injectionSwitch))[1]), vec2(((injectionSwitch))[0], _GLF_FUZZED(5048.3835)), bvec2(true, false)))), (_GLF_IDENTITY(injectionSwitch, mat2(_GLF_IDENTITY(_GLF_IDENTITY(1.0, min(1.0, 1.0)), (1.0) * 1.0)) * (injectionSwitch))) * vec2(1.0, 1.0)), _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(1.0, 0.0)), dot(vec2(0.0, 1.0), vec2(1.0, 0.0))), 0.0, determinant(_GLF_IDENTITY(mat3(0.0, 0.0, _GLF_IDENTITY(0.0, max(0.0, 0.0)), 1.0, 0.0, 0.0, 1.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0), (true ? _GLF_IDENTITY(mat3(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0), mat3(mat4(_GLF_IDENTITY(_GLF_IDENTITY(mat3(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), _GLF_IDENTITY(0.0, float(mat3(_GLF_IDENTITY(0.0, clamp(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), 0.0, 0.0)), 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, determinant(mat2(_GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0, 0.0)), 0.0)))), (_GLF_IDENTITY(true, (true) || false) ? mat3(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), _GLF_IDENTITY(0.0, float(mat3(_GLF_IDENTITY(0.0, clamp(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), 0.0, 0.0)), 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, determinant(mat2(_GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0, 0.0)), 0.0)))) : _GLF_FUZZED((false ? mat3(-1941.1450, -7217.5526, -65.77, 283.350, -4.4, 64.80, 1.2, 2319.6931, 5514.7092) : mat3(6.5, 82.75, -37.03, -302.166, -8.4, 6.5, -99.10, 89.44, -734.488))))), (_GLF_IDENTITY(mat3(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, round(length(normalize(vec3(1.0, 1.0, _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)))))), 0.0), mat3(_GLF_IDENTITY(mat4x3(mat3(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, round(length(normalize(vec3(1.0, 1.0, _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)))))), 0.0)), (mat4x3(mat3(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, round(length(normalize(vec3(1.0, 1.0, _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)))))), 0.0))) - mat4x3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))))) / mat3(1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0))))) : _GLF_FUZZED(mat3(1.2, _GLF_IDENTITY(38.47, mix(float(_GLF_FUZZED(1051.6024)), float(_GLF_IDENTITY(38.47, clamp(38.47, 38.47, 38.47))), bool(true))), 6006.2695, 589.247, 683.498, _GLF_IDENTITY(-9.1, mix(float(_GLF_FUZZED(5289.7035)), float(_GLF_IDENTITY(-9.1, (false ? _GLF_FUZZED(cosh(-672.475)) : -9.1))), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), 8.2, 5914.7437, -3.3))))), 1.0, tan(0.0), _GLF_IDENTITY(1.0, (1.0) * exp(0.0)), 1.0, 1.0, 0.0, 1.0)) : _GLF_FUZZED(step(injectionSwitch, injectionSwitch))))).x > injectionSwitch.y))), _GLF_IDENTITY(true, false || (true)), false), bvec3(bvec3(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), min(mat2(1.0) * (injectionSwitch), mat2(1.0) * (injectionSwitch)))), _GLF_IDENTITY(vec2(mat3x4(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * _GLF_IDENTITY((injectionSwitch), mix(vec2(_GLF_FUZZED(-95.70), ((injectionSwitch))[1]), vec2(((injectionSwitch))[0], _GLF_FUZZED(5048.3835)), bvec2(true, false)))), (_GLF_IDENTITY(injectionSwitch, mat2(_GLF_IDENTITY(1.0, (1.0) * 1.0)) * (injectionSwitch))) * vec2(1.0, 1.0)), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * _GLF_IDENTITY((injectionSwitch), mix(vec2(_GLF_FUZZED(-95.70), ((injectionSwitch))[1]), vec2(((injectionSwitch))[0], _GLF_FUZZED(5048.3835)), bvec2(true, false)))), (_GLF_IDENTITY(injectionSwitch, mat2(_GLF_IDENTITY(1.0, (1.0) * 1.0)) * (injectionSwitch))) * vec2(1.0, 1.0))) - vec2(0.0, 0.0)), _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(1.0, 0.0)), dot(vec2(0.0, 1.0), vec2(1.0, 0.0))), _GLF_IDENTITY(0.0, clamp(0.0, _GLF_IDENTITY(0.0, (0.0) / 1.0), 0.0)), determinant(_GLF_IDENTITY(mat3(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0), (true ? _GLF_IDENTITY(mat3(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0), mat3(mat4(_GLF_IDENTITY(mat3(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0), (mat3(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0)) / mat3(1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0))))) : _GLF_FUZZED(mat3(1.2, 38.47, 6006.2695, 589.247, 683.498, -9.1, 8.2, 5914.7437, -3.3))))), 1.0, tan(0.0), _GLF_IDENTITY(1.0, (1.0) * _GLF_IDENTITY(exp(0.0), 0.0 + (exp(0.0)))), 1.0, 1.0, 0.0, 1.0)), (true ? vec2(mat3x4(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * _GLF_IDENTITY((injectionSwitch), mix(vec2(_GLF_FUZZED(-95.70), ((injectionSwitch))[1]), vec2(((injectionSwitch))[0], _GLF_FUZZED(5048.3835)), bvec2(true, false)))), (_GLF_IDENTITY(injectionSwitch, mat2(_GLF_IDENTITY(1.0, (1.0) * 1.0)) * (injectionSwitch))) * vec2(1.0, 1.0)), _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(1.0, 0.0)), dot(vec2(0.0, 1.0), vec2(1.0, 0.0))), 0.0, determinant(_GLF_IDENTITY(mat3(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0), (true ? _GLF_IDENTITY(_GLF_IDENTITY(mat3(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0), mat3(mat4(_GLF_IDENTITY(mat3(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0), (mat3(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0)) / mat3(1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0))))), transpose(_GLF_IDENTITY(transpose(_GLF_IDENTITY(mat3(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0), mat3(mat4(_GLF_IDENTITY(mat3(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0), (mat3(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0)) / mat3(1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0)))))), transpose(transpose(transpose(_GLF_IDENTITY(mat3(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0), mat3(mat4(_GLF_IDENTITY(mat3(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0), (mat3(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0)) / mat3(1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0))))))))))) : _GLF_FUZZED(mat3(1.2, 38.47, 6006.2695, 589.247, 683.498, -9.1, 8.2, 5914.7437, -3.3))))), 1.0, tan(0.0), _GLF_IDENTITY(1.0, (1.0) * exp(0.0)), 1.0, 1.0, 0.0, 1.0)) : _GLF_FUZZED(step(injectionSwitch, injectionSwitch))))).x > injectionSwitch.y, ! (! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), _GLF_IDENTITY(vec2(mat3x4(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * _GLF_IDENTITY((injectionSwitch), mix(vec2(_GLF_FUZZED(-95.70), ((injectionSwitch))[1]), vec2(((injectionSwitch))[0], _GLF_FUZZED(5048.3835)), bvec2(true, false)))), (false ? _GLF_FUZZED(injectionSwitch) : _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * _GLF_IDENTITY((injectionSwitch), mix(vec2(_GLF_FUZZED(-95.70), ((injectionSwitch))[1]), vec2(((injectionSwitch))[0], _GLF_FUZZED(5048.3835)), bvec2(true, false)))), clamp(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * _GLF_IDENTITY((injectionSwitch), mix(vec2(_GLF_FUZZED(-95.70), ((injectionSwitch))[1]), vec2(((injectionSwitch))[0], _GLF_FUZZED(5048.3835)), bvec2(true, false)))), _GLF_IDENTITY(injectionSwitch, mat2(1.0) * _GLF_IDENTITY((injectionSwitch), mix(vec2(_GLF_FUZZED(-95.70), ((injectionSwitch))[1]), vec2(((injectionSwitch))[0], _GLF_FUZZED(5048.3835)), bvec2(true, false)))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * _GLF_IDENTITY((injectionSwitch), mix(vec2(_GLF_FUZZED(-95.70), ((injectionSwitch))[1]), vec2(((injectionSwitch))[0], _GLF_FUZZED(5048.3835)), bvec2(true, false)))), vec2(mat3x2(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * _GLF_IDENTITY((injectionSwitch), mix(vec2(_GLF_FUZZED(-95.70), ((injectionSwitch))[1]), vec2(((injectionSwitch))[0], _GLF_FUZZED(5048.3835)), bvec2(true, false)))), 1.0, 0.0, 0.0, 1.0))))))), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), mat2(_GLF_IDENTITY(1.0, (1.0) * 1.0)) * (injectionSwitch))) * vec2(1.0, 1.0)), _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(1.0, 0.0)), dot(vec2(0.0, 1.0), _GLF_IDENTITY(vec2(1.0, 0.0), vec2(1.0, 1.0) * (vec2(1.0, 0.0))))), 0.0, determinant(_GLF_IDENTITY(mat3(0.0, _GLF_IDENTITY(0.0, (0.0) / 1.0), _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-7.5)), float(_GLF_IDENTITY(0.0, float(vec3(0.0, 1.0, 0.0)))), bool(true))), 1.0, 0.0, 0.0, 1.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0), (true ? _GLF_IDENTITY(mat3(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0), mat3(mat4(_GLF_IDENTITY(mat3(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0), (mat3(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0)) / mat3(1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0))))) : _GLF_FUZZED(mat3(1.2, 38.47, 6006.2695, _GLF_IDENTITY(589.247, max(589.247, _GLF_IDENTITY(589.247, max(589.247, 589.247)))), 683.498, -9.1, 8.2, 5914.7437, -3.3))))), 1.0, _GLF_IDENTITY(tan(0.0), mix(float(tan(0.0)), float(_GLF_FUZZED(-3262.7714)), bool(false))), _GLF_IDENTITY(1.0, (1.0) * _GLF_IDENTITY(exp(0.0), _GLF_IDENTITY(float(mat2x3(_GLF_IDENTITY(exp(0.0), (exp(0.0)) - 0.0), sqrt(1.0), cos(0.0), 0.0, 1.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(cos(0.0), 0.0)), _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(cos(0.0), 0.0)), mix(float(dot(vec2(1.0, 0.0), vec2(cos(0.0), 0.0))), float(_GLF_FUZZED(-0.2)), bool(false)))))), (float(mat2x3(_GLF_IDENTITY(exp(0.0), (exp(0.0)) - 0.0), sqrt(1.0), cos(0.0), 0.0, 1.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(cos(0.0), 0.0)), _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(cos(0.0), 0.0)), mix(float(dot(vec2(1.0, 0.0), vec2(cos(0.0), 0.0))), float(_GLF_FUZZED(-0.2)), bool(false))))))) / abs(1.0)))), 1.0, 1.0, 0.0, 1.0)), (true ? vec2(mat3x4(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0) * _GLF_IDENTITY((injectionSwitch), mix(vec2(_GLF_FUZZED(-95.70), ((injectionSwitch))[1]), vec2(((injectionSwitch))[0], _GLF_FUZZED(5048.3835)), bvec2(true, false))), mix(vec2((mat2(1.0) * _GLF_IDENTITY((injectionSwitch), mix(vec2(_GLF_FUZZED(-95.70), ((injectionSwitch))[1]), vec2(((injectionSwitch))[0], _GLF_FUZZED(5048.3835)), bvec2(true, false))))[0], _GLF_FUZZED(0.8)), vec2(_GLF_FUZZED(4636.7638), (mat2(1.0) * _GLF_IDENTITY((injectionSwitch), mix(vec2(_GLF_FUZZED(-95.70), ((injectionSwitch))[1]), vec2(((injectionSwitch))[0], _GLF_FUZZED(5048.3835)), bvec2(true, false))))[1]), bvec2(false, true)))), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mat2(_GLF_IDENTITY(1.0, (1.0) * 1.0)) * (injectionSwitch)), (_GLF_IDENTITY(injectionSwitch, mat2(_GLF_IDENTITY(1.0, (1.0) * 1.0)) * (injectionSwitch))) * vec2(1.0, 1.0))) * vec2(1.0, 1.0)), _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(1.0, 0.0)), dot(vec2(0.0, 1.0), vec2(1.0, 0.0))), 0.0, determinant(_GLF_IDENTITY(mat3(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(round(length(normalize(vec3(1.0, 1.0, 1.0)))), (_GLF_IDENTITY(round(length(normalize(vec3(1.0, 1.0, 1.0)))), (false ? _GLF_FUZZED(-76.33) : round(length(normalize(vec3(1.0, 1.0, 1.0))))))) / 1.0), 0.0), (true ? _GLF_IDENTITY(mat3(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(round(length(normalize(vec3(1.0, 1.0, 1.0)))), max(_GLF_IDENTITY(round(length(normalize(vec3(1.0, 1.0, 1.0)))), clamp(round(length(normalize(vec3(1.0, 1.0, 1.0)))), round(length(normalize(vec3(1.0, 1.0, 1.0)))), round(length(normalize(vec3(1.0, 1.0, 1.0)))))), round(length(normalize(vec3(1.0, 1.0, 1.0)))))), 0.0), _GLF_IDENTITY(mat3(mat4(_GLF_IDENTITY(mat3(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0), (mat3(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0)) / mat3(1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0)))), transpose(transpose(mat3(mat4(_GLF_IDENTITY(mat3(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0), (mat3(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0)) / mat3(1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0)))))))) : _GLF_FUZZED(mat3(1.2, 38.47, 6006.2695, 589.247, 683.498, -9.1, 8.2, 5914.7437, -3.3))))), 1.0, tan(0.0), _GLF_IDENTITY(1.0, (1.0) * exp(0.0)), 1.0, 1.0, 0.0, 1.0)) : _GLF_FUZZED(step(injectionSwitch, injectionSwitch))))).x > injectionSwitch.y))), true, false))))))))))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          return;
        }
       else
        {
        }
       return;
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(_GLF_IDENTITY(mat3x2(injectionSwitch.x, 1.0, 0.0, 0.0, sqrt(0.0), 1.0), mat3x2(0.0, 0.0, 0.0, 0.0, 0.0, 0.0) + (mat3x2(injectionSwitch.x, 1.0, 0.0, 0.0, sqrt(0.0), 1.0)))), (float(_GLF_IDENTITY(mat3x2(injectionSwitch.x, 1.0, 0.0, 0.0, sqrt(0.0), 1.0), mat3x2(0.0, 0.0, 0.0, 0.0, 0.0, 0.0) + (mat3x2(injectionSwitch.x, 1.0, 0.0, 0.0, sqrt(0.0), 1.0))))) / abs(1.0))) > _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, vec2(vec4(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(float((~ 90123)))), bool(false))), max(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(float((~ 90123)))), bool(false))), _GLF_IDENTITY(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(float((~ 90123)))), bool(false))), (_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(float((~ 90123)))), bool(false)))) - 0.0))), 1.0))), injectionSwitch, _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), vec2(_GLF_IDENTITY(vec3((injectionSwitch) * mat2(1.0), 1.0), (vec3((injectionSwitch) * mat2(1.0), 1.0)) * mat3(1.0))))))).y))), ! (! (_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(-8.6), _GLF_FUZZED(6.4)), bvec2(false, false))))), vec2(vec4(injectionSwitch, 0.0, 1.0))), injectionSwitch, injectionSwitch)).y)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)), clamp(_GLF_IDENTITY(injectionSwitch, vec2(vec4(injectionSwitch, 0.0, 1.0))), injectionSwitch, injectionSwitch)).y)), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(vec4(injectionSwitch, 0.0, 1.0)), mat2(1.0) * (vec2(vec4(injectionSwitch, 0.0, 1.0))))), injectionSwitch, injectionSwitch)).y))), (! (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, vec2(vec4(injectionSwitch, 0.0, 1.0))), injectionSwitch, injectionSwitch)), min(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, vec2(vec4(injectionSwitch, 0.0, 1.0))), injectionSwitch, injectionSwitch)), _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, vec2(vec4(injectionSwitch, 0.0, 1.0))), injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)))))).y)))) && true)))) || false))))))
        break;
       if(_GLF_DEAD(false))
        continue;
      }
     else
      {
      }
    }
   if(_GLF_DEAD(false))
    break;
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END
BUFFER checker DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected_checker DATA_TYPE uint32 SIZE 8388096 FILL 1

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 
  BIND BUFFER checker AS storage DESCRIPTOR_SET 0 BINDING 2 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT checker EQ_BUFFER expected_checker
