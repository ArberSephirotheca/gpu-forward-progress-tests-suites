#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0), clamp(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0), float(mat2x4(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0), 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0), max(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0), _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0))), _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0))) > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   return;
  }
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = (0 ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     for(int _injected_loop_counter = (0 | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
      {
       return;
      }
    }
  }
 if(_GLF_DEAD(false))
  return;
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY(true, bool(bvec2(true, _GLF_IDENTITY(false, true && (false))))) && (true))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((false), ((false)) || false) && true)))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           for(int _injected_loop_counter = ((-95384 & 0) ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
            {
             return;
            }
          }
        }
      }
     else
      {
       for(int _injected_loop_counter = (1 ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
        {
         return;
        }
      }
    }
  }
 else
  {
  }
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 << _GLF_IDENTITY(int(0), int(0)))); _injected_loop_counter --)
    {
     return;
    }
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
  return;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_DEAD(false))
  return;
 uint workgroup_base = workgroup_size * _GLF_IDENTITY(_GLF_IDENTITY(workgroup_id, 1u * _GLF_IDENTITY((workgroup_id), ~ (~ _GLF_IDENTITY(((workgroup_id)), (_GLF_IDENTITY(((workgroup_id)), min(((workgroup_id)), _GLF_IDENTITY(((workgroup_id)), (((workgroup_id))) | 0u)))) << 0u)))), (_GLF_IDENTITY(workgroup_id, 1u * _GLF_IDENTITY((workgroup_id), ~ (~ _GLF_IDENTITY(((workgroup_id)), (_GLF_IDENTITY(((workgroup_id)), min(((workgroup_id)), _GLF_IDENTITY(((workgroup_id)), (((workgroup_id))) | 0u)))) << 0u))))) / 1u);
 if(_GLF_DEAD(false))
  return;
 uint subgroup_base = subgroup_id * subgroup_size;
 uint virtual_gid = _GLF_IDENTITY(workgroup_base + subgroup_base, min(_GLF_IDENTITY(workgroup_base + subgroup_base, max(workgroup_base + subgroup_base, workgroup_base + subgroup_base)), workgroup_base + subgroup_base)) + subgroup_local_id;
 do
  {
   if(_GLF_DEAD(false))
    {
     do
      {
       if(_GLF_DEAD(false))
        break;
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (true)))))
          {
           return;
          }
         else
          {
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bool(bool(! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))))
          {
           return;
          }
         else
          {
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     for(int _injected_loop_counter = (-80256 & 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 ^ 0)); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        return;
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 uint next_virtual_gid = _GLF_IDENTITY(workgroup_base + subgroup_base, (_GLF_IDENTITY(workgroup_base, (workgroup_base) / 1u) + subgroup_base) - 0u) + (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id + 1, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_local_id + 1, clamp(subgroup_local_id + 1, subgroup_local_id + 1, subgroup_local_id + 1))), (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_local_id + 1, clamp(subgroup_local_id + _GLF_IDENTITY(1, min(1, _GLF_IDENTITY(1, int(ivec2(_GLF_IDENTITY(1, int(ivec2(1, 1))), 0))))), subgroup_local_id + 1, subgroup_local_id + 1))), (~ (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, subgroup_local_id)) + 1, clamp(subgroup_local_id + 1, subgroup_local_id + 1, subgroup_local_id + 1)))) | 0u)) | 0u)))) % subgroup_size, _GLF_IDENTITY((_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) << 0u), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_local_id + 1, clamp(subgroup_local_id + 1, subgroup_local_id + 1, subgroup_local_id + 1))), (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_local_id + 1, clamp(subgroup_local_id + 1, subgroup_local_id + _GLF_IDENTITY(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, ~ (~ (1)))) >> 0), (1) - 0), _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) >> 0u) + 1))), (~ (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, ~ (~ (_GLF_IDENTITY(subgroup_local_id + 1, (true ? subgroup_local_id + 1 : _GLF_FUZZED(workgroup_id)))))), clamp(subgroup_local_id + 1, subgroup_local_id + 1, subgroup_local_id + 1)))) | 0u)) | 0u)))) % subgroup_size, ((_GLF_IDENTITY(subgroup_local_id + 1, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_local_id + 1, clamp(subgroup_local_id + 1, _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | (subgroup_local_id)) + 1, subgroup_local_id + 1))), _GLF_IDENTITY((_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_local_id + 1, clamp(subgroup_local_id + 1, subgroup_local_id + 1, subgroup_local_id + 1))), (~ (_GLF_IDENTITY(subgroup_local_id + 1, clamp(subgroup_local_id + 1, subgroup_local_id + 1, subgroup_local_id + 1)))) | 0u)) | 0u, min((_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_local_id + 1, clamp(subgroup_local_id + 1, subgroup_local_id + 1, subgroup_local_id + 1))), (~ (_GLF_IDENTITY(subgroup_local_id + 1, clamp(subgroup_local_id + 1, subgroup_local_id + 1, subgroup_local_id + 1)))) | 0u)) | 0u, (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_local_id + 1, clamp(subgroup_local_id + 1, subgroup_local_id + 1, subgroup_local_id + 1))), (~ (_GLF_IDENTITY(subgroup_local_id + 1, clamp(subgroup_local_id + 1, subgroup_local_id + 1, subgroup_local_id + 1)))) | 0u)) | 0u)))))) % subgroup_size) / 1u)), min((_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) << 0u), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_local_id + 1, clamp(subgroup_local_id + 1, subgroup_local_id + 1, subgroup_local_id + 1))), (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_local_id + 1, clamp(subgroup_local_id + 1, subgroup_local_id + _GLF_IDENTITY(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, ~ (~ (1)))) >> 0), (1) - 0), _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) >> 0u) + 1))), (~ (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, ~ (~ (_GLF_IDENTITY(subgroup_local_id + 1, (true ? subgroup_local_id + 1 : _GLF_FUZZED(workgroup_id)))))), clamp(subgroup_local_id + 1, subgroup_local_id + 1, subgroup_local_id + 1)))) | 0u)) | 0u)))) % subgroup_size, ((_GLF_IDENTITY(subgroup_local_id + 1, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_local_id + 1, clamp(subgroup_local_id + 1, _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | (subgroup_local_id)) + 1, subgroup_local_id + 1))), _GLF_IDENTITY((_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_local_id + 1, clamp(subgroup_local_id + 1, subgroup_local_id + 1, subgroup_local_id + 1))), (~ (_GLF_IDENTITY(subgroup_local_id + 1, clamp(subgroup_local_id + 1, subgroup_local_id + 1, subgroup_local_id + 1)))) | 0u)) | 0u, min((_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_local_id + 1, clamp(subgroup_local_id + 1, subgroup_local_id + 1, subgroup_local_id + 1))), (~ (_GLF_IDENTITY(subgroup_local_id + 1, clamp(subgroup_local_id + 1, subgroup_local_id + 1, subgroup_local_id + 1)))) | 0u)) | 0u, (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_local_id + 1, clamp(subgroup_local_id + 1, subgroup_local_id + 1, subgroup_local_id + 1))), (~ (_GLF_IDENTITY(subgroup_local_id + 1, clamp(subgroup_local_id + 1, subgroup_local_id + 1, subgroup_local_id + 1)))) | 0u)) | 0u)))))) % subgroup_size) / 1u)), _GLF_IDENTITY((_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) << 0u), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_local_id + 1, clamp(subgroup_local_id + 1, subgroup_local_id + 1, subgroup_local_id + 1))), (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_local_id + 1, clamp(subgroup_local_id + 1, subgroup_local_id + _GLF_IDENTITY(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, ~ (~ (1)))) >> 0), (1) - 0), _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) >> 0u) + 1))), (~ (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, ~ (~ (_GLF_IDENTITY(subgroup_local_id + 1, (true ? subgroup_local_id + 1 : _GLF_FUZZED(workgroup_id)))))), clamp(subgroup_local_id + 1, subgroup_local_id + 1, subgroup_local_id + 1)))) | 0u)) | 0u)))) % subgroup_size, ((_GLF_IDENTITY(subgroup_local_id + 1, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_local_id + 1, clamp(subgroup_local_id + 1, _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | (subgroup_local_id)) + 1, subgroup_local_id + 1))), _GLF_IDENTITY((_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_local_id + 1, clamp(subgroup_local_id + 1, subgroup_local_id + 1, subgroup_local_id + 1))), (~ (_GLF_IDENTITY(subgroup_local_id + 1, clamp(subgroup_local_id + 1, subgroup_local_id + 1, subgroup_local_id + 1)))) | 0u)) | 0u, min((_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_local_id + 1, clamp(subgroup_local_id + 1, subgroup_local_id + 1, subgroup_local_id + 1))), (~ (_GLF_IDENTITY(subgroup_local_id + 1, clamp(subgroup_local_id + 1, subgroup_local_id + 1, subgroup_local_id + 1)))) | 0u)) | 0u, (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_local_id + 1, clamp(subgroup_local_id + 1, subgroup_local_id + 1, subgroup_local_id + 1))), (~ (_GLF_IDENTITY(subgroup_local_id + 1, clamp(subgroup_local_id + 1, subgroup_local_id + 1, subgroup_local_id + 1)))) | 0u)) | 0u)))))) % subgroup_size) / 1u)), ~ (~ (_GLF_IDENTITY((_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) << 0u), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_local_id + 1, clamp(subgroup_local_id + 1, subgroup_local_id + 1, subgroup_local_id + 1))), (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_local_id + 1, clamp(subgroup_local_id + 1, subgroup_local_id + _GLF_IDENTITY(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, ~ (~ (1)))) >> 0), (1) - 0), _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) >> 0u) + 1))), (~ (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, ~ (~ (_GLF_IDENTITY(subgroup_local_id + 1, (true ? subgroup_local_id + 1 : _GLF_FUZZED(workgroup_id)))))), clamp(subgroup_local_id + 1, subgroup_local_id + 1, subgroup_local_id + 1)))) | 0u)) | 0u)))) % subgroup_size, ((_GLF_IDENTITY(subgroup_local_id + 1, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_local_id + 1, clamp(subgroup_local_id + 1, _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | (subgroup_local_id)) + 1, subgroup_local_id + 1))), _GLF_IDENTITY((_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_local_id + 1, clamp(subgroup_local_id + 1, subgroup_local_id + 1, subgroup_local_id + 1))), (~ (_GLF_IDENTITY(subgroup_local_id + 1, clamp(subgroup_local_id + 1, subgroup_local_id + 1, subgroup_local_id + 1)))) | 0u)) | 0u, min((_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_local_id + 1, clamp(subgroup_local_id + 1, subgroup_local_id + 1, subgroup_local_id + 1))), (~ (_GLF_IDENTITY(subgroup_local_id + 1, clamp(subgroup_local_id + 1, subgroup_local_id + 1, subgroup_local_id + 1)))) | 0u)) | 0u, (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_local_id + 1, clamp(subgroup_local_id + 1, subgroup_local_id + 1, subgroup_local_id + 1))), (~ (_GLF_IDENTITY(subgroup_local_id + 1, clamp(subgroup_local_id + 1, subgroup_local_id + 1, subgroup_local_id + 1)))) | 0u)) | 0u)))))) % subgroup_size) / 1u)), ((_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) << 0u), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_local_id + 1, clamp(subgroup_local_id + 1, subgroup_local_id + 1, subgroup_local_id + 1))), (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_local_id + 1, clamp(subgroup_local_id + 1, subgroup_local_id + _GLF_IDENTITY(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, ~ (~ (1)))) >> 0), (1) - 0), _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) >> 0u) + 1))), (~ (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, ~ (~ (_GLF_IDENTITY(subgroup_local_id + 1, (true ? subgroup_local_id + 1 : _GLF_FUZZED(workgroup_id)))))), clamp(subgroup_local_id + 1, subgroup_local_id + 1, subgroup_local_id + 1)))) | 0u)) | 0u)))) % subgroup_size, ((_GLF_IDENTITY(subgroup_local_id + 1, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_local_id + 1, clamp(subgroup_local_id + 1, _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | (subgroup_local_id)) + 1, subgroup_local_id + 1))), _GLF_IDENTITY((_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_local_id + 1, clamp(subgroup_local_id + 1, subgroup_local_id + 1, subgroup_local_id + 1))), (~ (_GLF_IDENTITY(subgroup_local_id + 1, clamp(subgroup_local_id + 1, subgroup_local_id + 1, subgroup_local_id + 1)))) | 0u)) | 0u, min((_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_local_id + 1, clamp(subgroup_local_id + 1, subgroup_local_id + 1, subgroup_local_id + 1))), (~ (_GLF_IDENTITY(subgroup_local_id + 1, clamp(subgroup_local_id + 1, subgroup_local_id + 1, subgroup_local_id + 1)))) | 0u)) | 0u, (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_local_id + 1, clamp(subgroup_local_id + 1, subgroup_local_id + 1, subgroup_local_id + 1))), (~ (_GLF_IDENTITY(subgroup_local_id + 1, clamp(subgroup_local_id + 1, subgroup_local_id + 1, subgroup_local_id + 1)))) | 0u)) | 0u)))))) % subgroup_size) / 1u))) | ((_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) << 0u), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_local_id + 1, clamp(subgroup_local_id + 1, subgroup_local_id + 1, subgroup_local_id + 1))), (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_local_id + 1, clamp(subgroup_local_id + 1, subgroup_local_id + _GLF_IDENTITY(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, ~ (~ (1)))) >> 0), (1) - 0), _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) >> 0u) + 1))), (~ (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, ~ (~ (_GLF_IDENTITY(subgroup_local_id + 1, (true ? subgroup_local_id + 1 : _GLF_FUZZED(workgroup_id)))))), clamp(subgroup_local_id + 1, subgroup_local_id + 1, subgroup_local_id + 1)))) | 0u)) | 0u)))) % subgroup_size, ((_GLF_IDENTITY(subgroup_local_id + 1, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_local_id + 1, clamp(subgroup_local_id + 1, _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | (subgroup_local_id)) + 1, subgroup_local_id + 1))), _GLF_IDENTITY((_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_local_id + 1, clamp(subgroup_local_id + 1, subgroup_local_id + 1, subgroup_local_id + 1))), (~ (_GLF_IDENTITY(subgroup_local_id + 1, clamp(subgroup_local_id + 1, subgroup_local_id + 1, subgroup_local_id + 1)))) | 0u)) | 0u, min((_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_local_id + 1, clamp(subgroup_local_id + 1, subgroup_local_id + 1, subgroup_local_id + 1))), (~ (_GLF_IDENTITY(subgroup_local_id + 1, clamp(subgroup_local_id + 1, subgroup_local_id + 1, subgroup_local_id + 1)))) | 0u)) | 0u, (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_local_id + 1, clamp(subgroup_local_id + 1, subgroup_local_id + 1, subgroup_local_id + 1))), (~ (_GLF_IDENTITY(subgroup_local_id + 1, clamp(subgroup_local_id + 1, subgroup_local_id + 1, subgroup_local_id + 1)))) | 0u)) | 0u)))))) % subgroup_size) / 1u))))))))) ^ 0u));
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
    }
   for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        return;
      }
    }
   if(_GLF_DEAD(false))
    return;
   do
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           return;
          }
         else
          {
          }
        }
       break;
       if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y))))))
        break;
      }
     for(int _injected_loop_counter = int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 ^ 1)); _injected_loop_counter --)
        {
         return;
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   do
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         return;
         if(_GLF_DEAD(false))
          return;
        }
      }
    }
   else
    {
    }
  }
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       return;
      }
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(8209.6951)), bool(false)))), bool(bvec4((injectionSwitch.x < injectionSwitch.y), true, false, true))))))
      {
       do
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       while(_GLF_WRAPPED_LOOP(false));
       do
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           return;
          }
         else
          {
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     else
      {
      }
     do
      {
       if(_GLF_DEAD(false))
        return;
      }
     while(_GLF_WRAPPED_LOOP(false));
     for(int _injected_loop_counter = (0 | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           return;
          }
         else
          {
          }
        }
      }
    }
  }
 else
  {
  }
 uint read = 0;
 atomicStore(buf[next_virtual_gid], uint(1), 4, 64, 4);
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         do
          {
           return;
          }
         while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch) * mat2(_GLF_ONE(1.0, injectionSwitch.y)), ((injectionSwitch) * mat2(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), clamp(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y), _GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), 1.0 * (_GLF_ONE(1.0, injectionSwitch.y))))))) / vec2(1.0, 1.0)), mix(vec2(_GLF_FUZZED((+ -851.792)), _GLF_FUZZED(-2.1)), vec2((_GLF_IDENTITY((injectionSwitch) * mat2(_GLF_ONE(1.0, injectionSwitch.y)), ((injectionSwitch) * mat2(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), clamp(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y), _GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), 1.0 * (_GLF_ONE(1.0, injectionSwitch.y))))))) / vec2(1.0, 1.0)))[0], (_GLF_IDENTITY((injectionSwitch) * mat2(_GLF_ONE(1.0, injectionSwitch.y)), ((injectionSwitch) * mat2(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), clamp(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y), _GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), 1.0 * (_GLF_ONE(1.0, injectionSwitch.y))))))) / vec2(1.0, 1.0)))[1]), bvec2(true, true)))).y)))))));
        }
      }
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       return;
      }
     else
      {
      }
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id % 2), _GLF_IDENTITY(max((subgroup_local_id % 2), _GLF_IDENTITY((subgroup_local_id % 2), _GLF_IDENTITY(((subgroup_local_id % 2)), (((subgroup_local_id % 2))) ^ 0u) ^ 0u)), min(max((subgroup_local_id % _GLF_IDENTITY(2, (_GLF_IDENTITY(false, ! (! (false))) ? _GLF_FUZZED(41895) : 2))), _GLF_IDENTITY((subgroup_local_id % 2), ((subgroup_local_id % 2)) * 1u)), _GLF_IDENTITY(max((subgroup_local_id % 2), (subgroup_local_id % 2)), _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec3(max((subgroup_local_id % 2), (subgroup_local_id % 2)), 1u, 0u), (uvec3(max((subgroup_local_id % 2), (subgroup_local_id % 2)), 1u, 0u)) >> uvec3(0u, 0u, 0u))), (uint(_GLF_IDENTITY(uvec3(max((subgroup_local_id % 2), (subgroup_local_id % 2)), 1u, 0u), (uvec3(max((subgroup_local_id % 2), (subgroup_local_id % 2)), 1u, 0u)) >> uvec3(0u, 0u, 0u)))) / 1u))))) == _GLF_IDENTITY(0, (0) | 0), bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id % 2, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_local_id % 2, (subgroup_local_id % _GLF_IDENTITY(2, 0 | (2))) | (_GLF_IDENTITY(subgroup_local_id % 2, _GLF_IDENTITY(uint(uvec4(subgroup_local_id % 2, 0u, 0u, uint(_GLF_ONE(1.0, injectionSwitch.y)))), 0u ^ (_GLF_IDENTITY(uint(uvec4(subgroup_local_id % 2, 0u, 0u, uint(_GLF_ONE(1.0, injectionSwitch.y)))), (uint(uvec4(subgroup_local_id % 2, 0u, 0u, uint(_GLF_ONE(1.0, injectionSwitch.y))))) >> 0u))))))), (false ? _GLF_FUZZED(workgroup_size) : ~ (_GLF_IDENTITY(subgroup_local_id % 2, (subgroup_local_id % 2) | (subgroup_local_id % 2)))))))), _GLF_IDENTITY(max((subgroup_local_id % 2), (subgroup_local_id % 2)), min(max((subgroup_local_id % 2), (_GLF_IDENTITY(subgroup_local_id, min(_GLF_IDENTITY(subgroup_local_id, ~ (~ (subgroup_local_id))), subgroup_local_id)) % 2)), max((subgroup_local_id % _GLF_IDENTITY(2, (2) - 0)), (subgroup_local_id % 2))))) == _GLF_IDENTITY(0, min(0, 0)), ! (! (_GLF_IDENTITY((subgroup_local_id % 2), _GLF_IDENTITY(_GLF_IDENTITY(max((subgroup_local_id % 2), (subgroup_local_id % 2)), min(max((subgroup_local_id % 2), (subgroup_local_id % 2)), max((subgroup_local_id % 2), (subgroup_local_id % 2)))), (_GLF_IDENTITY(_GLF_IDENTITY(max((subgroup_local_id % 2), (subgroup_local_id % 2)), min(max((subgroup_local_id % 2), (subgroup_local_id % 2)), max((subgroup_local_id % 2), (subgroup_local_id % 2)))), ~ (~ (_GLF_IDENTITY(max((subgroup_local_id % 2), (subgroup_local_id % 2)), min(max((subgroup_local_id % 2), (subgroup_local_id % 2)), max((subgroup_local_id % 2), (subgroup_local_id % 2)))))))) >> 0u)) == _GLF_IDENTITY(0, max(0, 0))))), false, false, true))))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, ! (! (true)))))))
          {
           read = atomicLoad(buf[virtual_gid], 4, 64, 2);
          }
         else
          {
          }
        }
       else
        {
        }
       for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 >> _GLF_IDENTITY(int(5), int(5)))); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          return;
        }
       for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < 1), false || (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < 1), _GLF_IDENTITY(! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter < 1))), ! (! (_GLF_IDENTITY(! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter < 1))), bool(bvec3(! (! (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, 0 ^ (_injected_loop_counter)) < 1))), false, false))))))))); _injected_loop_counter ++)
        {
         for(int _injected_loop_counter = _GLF_IDENTITY(1, (1) | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((0 >> _GLF_IDENTITY(int(4), int(4))) ^ (0 << _GLF_IDENTITY(int(1), int(1))))); _injected_loop_counter --)
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), clamp(mat2(1.0) * _GLF_IDENTITY((injectionSwitch), clamp(_GLF_IDENTITY((injectionSwitch), (false ? _GLF_FUZZED(vec2(363.074, 0.3)) : (injectionSwitch))), _GLF_IDENTITY((injectionSwitch), _GLF_IDENTITY(((injectionSwitch)) * mat2(1.0), mat2(1.0) * (((injectionSwitch)) * mat2(1.0)))), (injectionSwitch))), mat2(1.0) * (injectionSwitch), _GLF_IDENTITY(_GLF_IDENTITY(mat2(1.0) * (injectionSwitch), (mat2(_GLF_IDENTITY(1.0, (1.0) / 1.0)) * (_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(13.47)), vec2(_GLF_FUZZED((true ? -2.3 : -6.0)), (injectionSwitch)[1]), bvec2(false, true))))) * mat2(1.0)), (true ? _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), (mat2(_GLF_IDENTITY(1.0, (1.0) / 1.0)) * (_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[_GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) | 0)) / 1)], _GLF_FUZZED(13.47)), _GLF_IDENTITY(vec2(_GLF_FUZZED((true ? -2.3 : _GLF_IDENTITY(-6.0, (_GLF_IDENTITY(true, bool(bool(true))) ? -6.0 : _GLF_FUZZED((- 412.894)))))), (injectionSwitch)[1]), (false ? _GLF_FUZZED(injectionSwitch) : vec2(_GLF_FUZZED((true ? -2.3 : _GLF_IDENTITY(-6.0, (_GLF_IDENTITY(true, bool(bool(true))) ? -6.0 : _GLF_FUZZED((- 412.894)))))), (injectionSwitch)[1]))), bvec2(false, true))))) * mat2(1.0)) : _GLF_FUZZED(injectionSwitch)))))).x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).x, injectionSwitch.x, injectionSwitch.x)))) > injectionSwitch.y))))
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                    {
                     return;
                    }
                   else
                    {
                    }
                  }
                 else
                  {
                  }
                }
              }
            }
           else
            {
            }
          }
        }
       do
        {
         for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(5), int(5))); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), (int(1)) << 0))) >> _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), min(int(1), int(1)))))); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
              {
               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                }
               else
                {
                 return;
                }
              }
            }
          }
         if(_GLF_DEAD(false))
          return;
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
       if(_GLF_DEAD(false))
        return;
      }
     else
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (56664 & int(_GLF_ZERO(0.0, injectionSwitch.x)))); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          return;
        }
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != 1, _GLF_IDENTITY(bool(bvec4(_injected_loop_counter != 1, false, true, false)), false || (bool(bvec4(_injected_loop_counter != 1, false, true, false)))))); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          return;
        }
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           do
            {
             for(int _injected_loop_counter = (0 | 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
              {
               for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 << _GLF_IDENTITY(int(8), int(8)))); _injected_loop_counter --)
                {
                 _GLF_IDENTITY(read = atomicLoad(buf[_GLF_IDENTITY(virtual_gid, _GLF_IDENTITY(clamp(virtual_gid, _GLF_IDENTITY(virtual_gid, ~ (~ (virtual_gid))), virtual_gid), (0u << _GLF_IDENTITY(uint(8u), _GLF_IDENTITY(uint(8u), uint(uvec3(uint(8u), 1u, 1u))))) ^ (_GLF_IDENTITY(clamp(virtual_gid, _GLF_IDENTITY(virtual_gid, ~ (~ (virtual_gid))), _GLF_IDENTITY(virtual_gid, min(virtual_gid, virtual_gid))), ~ (~ (clamp(virtual_gid, _GLF_IDENTITY(virtual_gid, ~ (~ (virtual_gid))), virtual_gid)))))))], 4, 64, 2), (read = _GLF_IDENTITY(_GLF_IDENTITY(atomicLoad(buf[_GLF_IDENTITY(virtual_gid, _GLF_IDENTITY(_GLF_IDENTITY(clamp(virtual_gid, _GLF_IDENTITY(virtual_gid, ~ (~ (virtual_gid))), virtual_gid), (clamp(virtual_gid, _GLF_IDENTITY(virtual_gid, ~ (~ (virtual_gid))), virtual_gid)) - (26388u & 0u)), (0u << _GLF_IDENTITY(uint(8u), uint(8u))) ^ (_GLF_IDENTITY(clamp(virtual_gid, _GLF_IDENTITY(virtual_gid, ~ (~ (virtual_gid))), virtual_gid), ~ (~ (clamp(virtual_gid, _GLF_IDENTITY(virtual_gid, ~ (~ (virtual_gid))), virtual_gid)))))))], 4, _GLF_IDENTITY(64, (64) | (64)), 2), (_GLF_IDENTITY(atomicLoad(buf[_GLF_IDENTITY(virtual_gid, _GLF_IDENTITY(clamp(virtual_gid, _GLF_IDENTITY(virtual_gid, ~ (~ (virtual_gid))), virtual_gid), (0u << _GLF_IDENTITY(uint(8u), uint(8u))) ^ (_GLF_IDENTITY(clamp(virtual_gid, _GLF_IDENTITY(virtual_gid, ~ (~ (virtual_gid))), virtual_gid), ~ (~ (clamp(virtual_gid, _GLF_IDENTITY(virtual_gid, ~ (~ (virtual_gid))), virtual_gid)))))))], 4, 64, 2), ~ (~ (atomicLoad(buf[_GLF_IDENTITY(virtual_gid, _GLF_IDENTITY(clamp(virtual_gid, _GLF_IDENTITY(virtual_gid, ~ (~ (virtual_gid))), virtual_gid), (0u << _GLF_IDENTITY(uint(8u), uint(8u))) ^ (_GLF_IDENTITY(clamp(virtual_gid, _GLF_IDENTITY(virtual_gid, ~ (~ (virtual_gid))), virtual_gid), ~ (~ (clamp(virtual_gid, _GLF_IDENTITY(virtual_gid, ~ (_GLF_IDENTITY(~ (virtual_gid), (~ (virtual_gid)) ^ 0u))), virtual_gid)))))))], 4, 64, 2))))) + (0u >> _GLF_IDENTITY(uint(6u), _GLF_IDENTITY(uint(6u), (_GLF_IDENTITY(uint(6u), ~ (~ (uint(6u))))) + 0u)))), min(_GLF_IDENTITY(_GLF_IDENTITY(atomicLoad(buf[_GLF_IDENTITY(virtual_gid, _GLF_IDENTITY(_GLF_IDENTITY(clamp(virtual_gid, _GLF_IDENTITY(virtual_gid, ~ (~ (virtual_gid))), virtual_gid), (clamp(virtual_gid, _GLF_IDENTITY(virtual_gid, ~ (~ (virtual_gid))), virtual_gid)) - (26388u & 0u)), (0u << _GLF_IDENTITY(uint(8u), uint(8u))) ^ (_GLF_IDENTITY(clamp(virtual_gid, _GLF_IDENTITY(virtual_gid, ~ (~ (virtual_gid))), virtual_gid), ~ (~ (clamp(virtual_gid, _GLF_IDENTITY(virtual_gid, ~ (~ (virtual_gid))), virtual_gid)))))))], 4, _GLF_IDENTITY(64, (64) | (64)), 2), (_GLF_IDENTITY(atomicLoad(buf[_GLF_IDENTITY(virtual_gid, _GLF_IDENTITY(clamp(virtual_gid, _GLF_IDENTITY(virtual_gid, ~ (~ (virtual_gid))), virtual_gid), (0u << _GLF_IDENTITY(uint(8u), uint(8u))) ^ (_GLF_IDENTITY(clamp(virtual_gid, _GLF_IDENTITY(virtual_gid, ~ (~ (virtual_gid))), virtual_gid), ~ (~ (clamp(virtual_gid, _GLF_IDENTITY(virtual_gid, ~ (~ (virtual_gid))), virtual_gid)))))))], 4, 64, 2), ~ (~ (atomicLoad(buf[_GLF_IDENTITY(virtual_gid, _GLF_IDENTITY(clamp(virtual_gid, _GLF_IDENTITY(virtual_gid, ~ (~ (virtual_gid))), virtual_gid), (0u << _GLF_IDENTITY(uint(8u), uint(8u))) ^ (_GLF_IDENTITY(clamp(virtual_gid, _GLF_IDENTITY(virtual_gid, ~ (~ (virtual_gid))), virtual_gid), ~ (~ (clamp(virtual_gid, _GLF_IDENTITY(virtual_gid, ~ (_GLF_IDENTITY(~ (virtual_gid), (~ (virtual_gid)) ^ 0u))), virtual_gid)))))))], 4, 64, 2))))) + (0u >> _GLF_IDENTITY(uint(6u), _GLF_IDENTITY(uint(6u), (_GLF_IDENTITY(uint(6u), ~ (~ (uint(6u))))) + 0u)))), (_GLF_IDENTITY(atomicLoad(buf[_GLF_IDENTITY(virtual_gid, _GLF_IDENTITY(_GLF_IDENTITY(clamp(virtual_gid, _GLF_IDENTITY(virtual_gid, ~ (~ (virtual_gid))), virtual_gid), (clamp(virtual_gid, _GLF_IDENTITY(virtual_gid, ~ (~ (virtual_gid))), virtual_gid)) - (26388u & 0u)), (0u << _GLF_IDENTITY(uint(8u), uint(8u))) ^ (_GLF_IDENTITY(clamp(virtual_gid, _GLF_IDENTITY(virtual_gid, ~ (~ (virtual_gid))), virtual_gid), ~ (~ (clamp(virtual_gid, _GLF_IDENTITY(virtual_gid, ~ (~ (virtual_gid))), virtual_gid)))))))], 4, _GLF_IDENTITY(64, (64) | (64)), 2), (_GLF_IDENTITY(atomicLoad(buf[_GLF_IDENTITY(virtual_gid, _GLF_IDENTITY(clamp(virtual_gid, _GLF_IDENTITY(virtual_gid, ~ (~ (virtual_gid))), virtual_gid), (0u << _GLF_IDENTITY(uint(8u), uint(8u))) ^ (_GLF_IDENTITY(clamp(virtual_gid, _GLF_IDENTITY(virtual_gid, ~ (~ (virtual_gid))), virtual_gid), ~ (~ (clamp(virtual_gid, _GLF_IDENTITY(virtual_gid, ~ (~ (virtual_gid))), virtual_gid)))))))], 4, 64, 2), ~ (~ (atomicLoad(buf[_GLF_IDENTITY(virtual_gid, _GLF_IDENTITY(clamp(virtual_gid, _GLF_IDENTITY(virtual_gid, ~ (~ (virtual_gid))), virtual_gid), (0u << _GLF_IDENTITY(uint(8u), uint(8u))) ^ (_GLF_IDENTITY(clamp(virtual_gid, _GLF_IDENTITY(virtual_gid, ~ (~ (virtual_gid))), virtual_gid), ~ (~ (clamp(virtual_gid, _GLF_IDENTITY(virtual_gid, ~ (_GLF_IDENTITY(~ (virtual_gid), (~ (virtual_gid)) ^ 0u))), virtual_gid)))))))], 4, 64, 2))))) + (0u >> _GLF_IDENTITY(uint(6u), _GLF_IDENTITY(uint(6u), (_GLF_IDENTITY(uint(6u), ~ (~ (uint(6u))))) + 0u))))) | (_GLF_IDENTITY(atomicLoad(buf[_GLF_IDENTITY(virtual_gid, _GLF_IDENTITY(_GLF_IDENTITY(clamp(virtual_gid, _GLF_IDENTITY(virtual_gid, ~ (~ (virtual_gid))), virtual_gid), (clamp(virtual_gid, _GLF_IDENTITY(virtual_gid, ~ (~ (virtual_gid))), virtual_gid)) - (26388u & 0u)), (0u << _GLF_IDENTITY(uint(8u), uint(8u))) ^ (_GLF_IDENTITY(clamp(virtual_gid, _GLF_IDENTITY(virtual_gid, ~ (~ (virtual_gid))), virtual_gid), ~ (~ (clamp(virtual_gid, _GLF_IDENTITY(virtual_gid, ~ (~ (virtual_gid))), virtual_gid)))))))], 4, _GLF_IDENTITY(64, (64) | (64)), 2), (_GLF_IDENTITY(atomicLoad(buf[_GLF_IDENTITY(virtual_gid, _GLF_IDENTITY(clamp(virtual_gid, _GLF_IDENTITY(virtual_gid, ~ (~ (virtual_gid))), virtual_gid), (0u << _GLF_IDENTITY(uint(8u), uint(8u))) ^ (_GLF_IDENTITY(clamp(virtual_gid, _GLF_IDENTITY(virtual_gid, ~ (~ (virtual_gid))), virtual_gid), ~ (~ (clamp(virtual_gid, _GLF_IDENTITY(virtual_gid, ~ (~ (virtual_gid))), virtual_gid)))))))], 4, 64, 2), ~ (~ (atomicLoad(buf[_GLF_IDENTITY(virtual_gid, _GLF_IDENTITY(clamp(virtual_gid, _GLF_IDENTITY(virtual_gid, ~ (~ (virtual_gid))), virtual_gid), (0u << _GLF_IDENTITY(uint(8u), uint(8u))) ^ (_GLF_IDENTITY(clamp(virtual_gid, _GLF_IDENTITY(virtual_gid, ~ (~ (virtual_gid))), virtual_gid), ~ (~ (clamp(virtual_gid, _GLF_IDENTITY(virtual_gid, ~ (_GLF_IDENTITY(~ (virtual_gid), (~ (virtual_gid)) ^ 0u))), virtual_gid)))))))], 4, 64, 2))))) + (0u >> _GLF_IDENTITY(uint(6u), _GLF_IDENTITY(uint(6u), (_GLF_IDENTITY(uint(6u), ~ (~ (uint(6u))))) + 0u)))))), _GLF_IDENTITY(_GLF_IDENTITY(atomicLoad(buf[_GLF_IDENTITY(virtual_gid, _GLF_IDENTITY(_GLF_IDENTITY(clamp(virtual_gid, _GLF_IDENTITY(virtual_gid, ~ (~ (virtual_gid))), virtual_gid), (clamp(virtual_gid, _GLF_IDENTITY(virtual_gid, ~ (~ (virtual_gid))), virtual_gid)) - (26388u & 0u)), (0u << _GLF_IDENTITY(uint(8u), uint(8u))) ^ (_GLF_IDENTITY(clamp(virtual_gid, _GLF_IDENTITY(virtual_gid, ~ (~ (virtual_gid))), virtual_gid), ~ (~ (clamp(virtual_gid, _GLF_IDENTITY(virtual_gid, ~ (~ (virtual_gid))), virtual_gid)))))))], 4, _GLF_IDENTITY(64, (64) | (64)), 2), (_GLF_IDENTITY(atomicLoad(buf[_GLF_IDENTITY(virtual_gid, _GLF_IDENTITY(clamp(virtual_gid, _GLF_IDENTITY(virtual_gid, ~ (~ (virtual_gid))), virtual_gid), (0u << _GLF_IDENTITY(uint(8u), uint(8u))) ^ (_GLF_IDENTITY(clamp(virtual_gid, _GLF_IDENTITY(virtual_gid, ~ (~ (virtual_gid))), virtual_gid), ~ (~ (clamp(virtual_gid, _GLF_IDENTITY(virtual_gid, ~ (~ (virtual_gid))), virtual_gid)))))))], 4, 64, 2), ~ (~ (atomicLoad(buf[_GLF_IDENTITY(virtual_gid, _GLF_IDENTITY(clamp(virtual_gid, _GLF_IDENTITY(virtual_gid, ~ (~ (virtual_gid))), virtual_gid), (0u << _GLF_IDENTITY(uint(8u), uint(8u))) ^ (_GLF_IDENTITY(clamp(virtual_gid, _GLF_IDENTITY(virtual_gid, ~ (~ (virtual_gid))), virtual_gid), ~ (~ (clamp(virtual_gid, _GLF_IDENTITY(virtual_gid, ~ (_GLF_IDENTITY(~ (virtual_gid), (~ (virtual_gid)) ^ 0u))), virtual_gid)))))))], 4, 64, 2))))) + (0u >> _GLF_IDENTITY(uint(6u), _GLF_IDENTITY(uint(6u), (_GLF_IDENTITY(uint(6u), ~ (~ (uint(6u))))) + 0u)))), min(_GLF_IDENTITY(atomicLoad(buf[_GLF_IDENTITY(virtual_gid, _GLF_IDENTITY(_GLF_IDENTITY(clamp(virtual_gid, _GLF_IDENTITY(virtual_gid, ~ (~ (virtual_gid))), virtual_gid), (clamp(virtual_gid, _GLF_IDENTITY(virtual_gid, ~ (~ (virtual_gid))), virtual_gid)) - (26388u & 0u)), (0u << _GLF_IDENTITY(uint(8u), uint(8u))) ^ (_GLF_IDENTITY(clamp(virtual_gid, _GLF_IDENTITY(virtual_gid, ~ (~ (virtual_gid))), virtual_gid), ~ (~ (clamp(virtual_gid, _GLF_IDENTITY(virtual_gid, ~ (~ (virtual_gid))), virtual_gid)))))))], 4, _GLF_IDENTITY(64, (64) | (64)), 2), (_GLF_IDENTITY(atomicLoad(buf[_GLF_IDENTITY(virtual_gid, _GLF_IDENTITY(clamp(virtual_gid, _GLF_IDENTITY(virtual_gid, ~ (~ (virtual_gid))), virtual_gid), (0u << _GLF_IDENTITY(uint(8u), uint(8u))) ^ (_GLF_IDENTITY(clamp(virtual_gid, _GLF_IDENTITY(virtual_gid, ~ (~ (virtual_gid))), virtual_gid), ~ (~ (clamp(virtual_gid, _GLF_IDENTITY(virtual_gid, ~ (~ (virtual_gid))), virtual_gid)))))))], 4, 64, 2), ~ (~ (atomicLoad(buf[_GLF_IDENTITY(virtual_gid, _GLF_IDENTITY(clamp(virtual_gid, _GLF_IDENTITY(virtual_gid, ~ (~ (virtual_gid))), virtual_gid), (0u << _GLF_IDENTITY(uint(8u), uint(8u))) ^ (_GLF_IDENTITY(clamp(virtual_gid, _GLF_IDENTITY(virtual_gid, ~ (~ (virtual_gid))), virtual_gid), ~ (~ (clamp(virtual_gid, _GLF_IDENTITY(virtual_gid, ~ (_GLF_IDENTITY(~ (virtual_gid), (~ (virtual_gid)) ^ 0u))), virtual_gid)))))))], 4, 64, 2))))) + (0u >> _GLF_IDENTITY(uint(6u), _GLF_IDENTITY(uint(6u), (_GLF_IDENTITY(uint(6u), ~ (~ (uint(6u))))) + 0u)))), _GLF_IDENTITY(atomicLoad(buf[_GLF_IDENTITY(virtual_gid, _GLF_IDENTITY(_GLF_IDENTITY(clamp(virtual_gid, _GLF_IDENTITY(virtual_gid, ~ (~ (virtual_gid))), virtual_gid), (clamp(virtual_gid, _GLF_IDENTITY(virtual_gid, ~ (~ (virtual_gid))), virtual_gid)) - (26388u & 0u)), (0u << _GLF_IDENTITY(uint(8u), uint(8u))) ^ (_GLF_IDENTITY(clamp(virtual_gid, _GLF_IDENTITY(virtual_gid, ~ (~ (virtual_gid))), virtual_gid), ~ (~ (clamp(virtual_gid, _GLF_IDENTITY(virtual_gid, ~ (~ (virtual_gid))), virtual_gid)))))))], 4, _GLF_IDENTITY(64, (64) | (64)), 2), (_GLF_IDENTITY(atomicLoad(buf[_GLF_IDENTITY(virtual_gid, _GLF_IDENTITY(clamp(virtual_gid, _GLF_IDENTITY(virtual_gid, ~ (~ (virtual_gid))), virtual_gid), (0u << _GLF_IDENTITY(uint(8u), uint(8u))) ^ (_GLF_IDENTITY(clamp(virtual_gid, _GLF_IDENTITY(virtual_gid, ~ (~ (virtual_gid))), virtual_gid), ~ (~ (clamp(virtual_gid, _GLF_IDENTITY(virtual_gid, ~ (~ (virtual_gid))), virtual_gid)))))))], 4, 64, 2), ~ (~ (atomicLoad(buf[_GLF_IDENTITY(virtual_gid, _GLF_IDENTITY(clamp(virtual_gid, _GLF_IDENTITY(virtual_gid, ~ (~ (virtual_gid))), virtual_gid), (0u << _GLF_IDENTITY(uint(8u), uint(8u))) ^ (_GLF_IDENTITY(clamp(virtual_gid, _GLF_IDENTITY(virtual_gid, ~ (~ (virtual_gid))), virtual_gid), ~ (~ (clamp(virtual_gid, _GLF_IDENTITY(virtual_gid, ~ (_GLF_IDENTITY(~ (virtual_gid), (~ (virtual_gid)) ^ 0u))), virtual_gid)))))))], 4, 64, 2))))) + (0u >> _GLF_IDENTITY(uint(6u), _GLF_IDENTITY(uint(6u), (_GLF_IDENTITY(uint(6u), ~ (~ (uint(6u))))) + 0u))))))))) - 0u);
                }
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         else
          {
          }
        }
      }
    }
   else
    {
    }
  }
 else
  {
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
   if(_GLF_DEAD(false))
    {
     do
      {
       do
        {
         return;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 else
  {
   do
    {
     do
      {
       if(_GLF_DEAD(false))
        continue;
       subgroupBarrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED((234.633)), _GLF_FUZZED(-135.225)), bvec2(false, false))), min(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED((234.633)), _GLF_FUZZED(-135.225)), bvec2(false, false))), _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED((234.633)), _GLF_FUZZED(-135.225)), bvec2(false, false)))))) + vec2(0.0, _GLF_IDENTITY(0.0, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-2.4) : 0.0)))).x, min(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED((234.633)), _GLF_FUZZED(-135.225)), bvec2(false, false))), min(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED((234.633)), _GLF_FUZZED(-135.225)), bvec2(false, false))), _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED((234.633)), _GLF_FUZZED(-135.225)), bvec2(false, false)))))) + vec2(0.0, _GLF_IDENTITY(0.0, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-2.4) : 0.0)))).x, _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED((234.633)), _GLF_FUZZED(-135.225)), bvec2(false, false))), min(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED((234.633)), _GLF_FUZZED(-135.225)), bvec2(false, false))), _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED((234.633)), _GLF_FUZZED(-135.225)), bvec2(false, false)))))) + vec2(0.0, _GLF_IDENTITY(0.0, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-2.4) : 0.0)))).x)) > injectionSwitch.y))));
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(false))
    return;
  }
 do
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     atomicStore(checker[_GLF_IDENTITY(virtual_gid, (virtual_gid) + 0u)], read, 4, 64, 4);
    }
   else
    {
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), true && (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true))), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))
  {
   do
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       return;
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       do
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))))
          continue;
         return;
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).x, clamp(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch))) + vec2(0.0, 0.0)).x, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).x, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).x, min(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).x, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)))), (injectionSwitch) + vec2(0.0, 0.0)).x)))) < injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          return;
        }
       else
        {
        }
      }
    }
   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))), ! (! (_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))))))))))
    {
    }
   else
    {
     return;
    }
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END
BUFFER checker DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected_checker DATA_TYPE uint32 SIZE 8388096 FILL 1

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 
  BIND BUFFER checker AS storage DESCRIPTOR_SET 0 BINDING 2 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT checker EQ_BUFFER expected_checker
