#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_9 {
 uvec4 _f0;
} ;

struct _GLF_struct_8 {
 uvec4 _f0;
 ivec2 _f1;
 vec3 _f2;
} ;

struct _GLF_struct_10 {
 _GLF_struct_8 _f0;
 _GLF_struct_9 _f1;
} ;

struct _GLF_struct_11 {
 vec4 _f0;
 uint workgroup_size;
 vec3 _f1;
 _GLF_struct_10 _f2;
 uvec2 _f3;
 ivec4 _f4;
} ;

struct _GLF_struct_6 {
 ivec2 _f0;
 uint _f1;
} ;

struct _GLF_struct_5 {
 mat2x4 _f0;
 int _injected_loop_counter;
} ;

struct _GLF_struct_3 {
 mat2x4 _f0;
 int _f1;
 mat3x4 _f2;
 bvec2 _f3;
} ;

struct _GLF_struct_2 {
 vec4 _f0;
 bvec2 _f1;
 mat3 _f2;
 mat4x3 _f3;
 mat3 _f4;
 ivec2 _f5;
} ;

struct _GLF_struct_1 {
 uvec2 _f0;
 vec4 _f1;
 int _f2;
} ;

struct _GLF_struct_0 {
 mat4x3 _f0;
 uvec2 _f1;
 bvec2 _f2;
} ;

struct _GLF_struct_4 {
 _GLF_struct_0 _f0;
 _GLF_struct_1 _f1;
 _GLF_struct_2 _f2;
 _GLF_struct_3 _f3;
 bool _f4;
} ;

struct _GLF_struct_7 {
 _GLF_struct_4 _f0;
 vec4 _f1;
 _GLF_struct_5 _f2;
 float _f3;
 _GLF_struct_6 _f4;
 uvec3 _f5;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(false))
  return;
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       return;
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
    }
  }
 else
  {
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = _GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups.x, (true ? gl_NumWorkGroups.x : _GLF_FUZZED(subgroup_local_id))), _GLF_IDENTITY(_GLF_IDENTITY((true ? gl_NumWorkGroups.x : _GLF_FUZZED(_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size))) << 0u))), clamp((true ? gl_NumWorkGroups.x : _GLF_FUZZED(_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size))) << _GLF_IDENTITY(0u, (0u << _GLF_IDENTITY(uint(2u), uint(2u))) | (0u))))), (true ? gl_NumWorkGroups.x : _GLF_FUZZED(_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size))) << 0u))), (true ? gl_NumWorkGroups.x : _GLF_FUZZED(_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, _GLF_IDENTITY(subgroup_size, (subgroup_size) * ((1u << _GLF_IDENTITY(uint(0u), uint(0u))) >> _GLF_IDENTITY(uint(0u), uint(0u))))))) << 0u))))), (_GLF_IDENTITY((true ? gl_NumWorkGroups.x : _GLF_FUZZED(_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size))) << 0u, uint(uvec4((_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size))) << 0u, (0u | 0u), (1u & 1u), 1u)))))), min((true ? gl_NumWorkGroups.x : _GLF_FUZZED(_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size))) << 0u))), (true ? gl_NumWorkGroups.x : _GLF_FUZZED(_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size)), (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size)), (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size)), (_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size))) - 0u)) ^ 0u)) / (0u ^ 1u))) << 0u)))))) | (_GLF_IDENTITY(_GLF_IDENTITY((true ? gl_NumWorkGroups.x : _GLF_FUZZED(_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size)), (_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size))) >> 0u)) << 0u, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size))) << 0u, clamp((_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size))) << 0u, (_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size))) << 0u, (_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size))) << 0u))), max(~ (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size))) << 0u, clamp((_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size))) << 0u, (_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(clamp(subgroup_size, subgroup_size, subgroup_size), (clamp(subgroup_size, subgroup_size, subgroup_size)) << 0u))) << 0u, (_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size))) << 0u))), ~ (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size))) << 0u, clamp((_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size))) << 0u, (_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size))) << 0u, (_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, _GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(uint(uvec2(_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, _GLF_IDENTITY(subgroup_size, (subgroup_size) ^ 0u))), uint(_GLF_ONE(1.0, injectionSwitch.y)))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(72247u) : uint(uvec2(_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, _GLF_IDENTITY(subgroup_size, (subgroup_size) ^ 0u))), uint(_GLF_ONE(1.0, injectionSwitch.y)))))))))) << 0u)))))))))), (true ? (true ? gl_NumWorkGroups.x : _GLF_FUZZED(_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size)), (_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size))) >> 0u)) << 0u, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size))) << 0u, clamp((_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size))) << 0u, (_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size))) << 0u, (_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size))) << 0u))), max(~ (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size))) << 0u, clamp((_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size))) << 0u, (_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(clamp(subgroup_size, subgroup_size, subgroup_size), (clamp(subgroup_size, subgroup_size, subgroup_size)) << 0u))) << 0u, (_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size))) << 0u))), ~ (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size))) << 0u, clamp((_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size))) << 0u, (_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size))) << 0u, (_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, _GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(uint(uvec2(_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, _GLF_IDENTITY(subgroup_size, (subgroup_size) ^ 0u))), uint(_GLF_ONE(1.0, injectionSwitch.y)))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(72247u) : uint(uvec2(_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, _GLF_IDENTITY(subgroup_size, (subgroup_size) ^ 0u))), uint(_GLF_ONE(1.0, injectionSwitch.y)))))))))) << 0u)))))))))) : _GLF_FUZZED((68630u * (subgroup_id ^ subgroup_size))))), ((true ? gl_NumWorkGroups.x : _GLF_FUZZED(_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size))) << 0u)))) / 1u))));
 _GLF_struct_11 _GLF_struct_replacement_11 = _GLF_struct_11(vec4(1.0), gl_WorkGroupSize.x, vec3(1.0), _GLF_struct_10(_GLF_struct_8(uvec4(1u), ivec2(_GLF_IDENTITY(_GLF_IDENTITY(1, (1) * 1), _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(int(_GLF_IDENTITY(1, (1) * _GLF_IDENTITY(1, (1) | (1)))), int(int(int(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(15435))), min(_GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(15435))), _GLF_IDENTITY(_GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(15435))), clamp(_GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(15435))), _GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(15435))), _GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(15435))))))), (1) * 1)))))), max(int(_GLF_IDENTITY(int(_GLF_IDENTITY(1, (1) * 1)), int(int(int(_GLF_IDENTITY(_GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(15435))), (1) * 1)))))), int(_GLF_IDENTITY(int(_GLF_IDENTITY(1, (1) * 1)), int(int(int(_GLF_IDENTITY(_GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(15435))), (1) * 1)))))))), (_GLF_IDENTITY(int(_GLF_IDENTITY(int(_GLF_IDENTITY(1, _GLF_IDENTITY(_GLF_IDENTITY((1), min((1), (1))), max(_GLF_IDENTITY((1), min((1), (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, 0 + (1))) ^ 0)))), _GLF_IDENTITY((1), min((1), (1))))) * 1)), int(int(int(_GLF_IDENTITY(1, (1) * 1)))))), 0 ^ (_GLF_IDENTITY(int(_GLF_IDENTITY(int(_GLF_IDENTITY(1, (1) * 1)), int(int(int(_GLF_IDENTITY(1, (1) * 1)))))), (int(_GLF_IDENTITY(int(_GLF_IDENTITY(1, (1) * 1)), int(int(int(_GLF_IDENTITY(1, (1) * 1))))))) / 1)))) - 0))), vec3(1.0)), _GLF_struct_9(uvec4(1u))), uvec2(1u), ivec4(1));
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             return;
            }
           else
            {
            }
          }
         else
          {
          }
        }
       else
        {
        }
      }
    }
   else
    {
    }
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
    }
   return;
   do
    {
     if(_GLF_DEAD(false))
      return;
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = _GLF_struct_replacement_11.workgroup_size * workgroup_id;
 uint subgroup_base = subgroup_id * _GLF_IDENTITY(subgroup_size, clamp(subgroup_size, _GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((subgroup_size), (true ? _GLF_IDENTITY((subgroup_size), (true ? (subgroup_size) : _GLF_FUZZED(num_workgroup))) : _GLF_FUZZED(workgroup_id))) << 0u), subgroup_size));
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       return;
      }
    }
  }
 uint virtual_gid = workgroup_base + subgroup_base + subgroup_local_id;
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        return;
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
      {
       do
        {
         do
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (false)))))
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) || false)))
              {
              }
             else
              {
               do
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < 1, ! (! (_GLF_IDENTITY(_injected_loop_counter < 1, (_injected_loop_counter < 1) || false))))); _injected_loop_counter ++)
                    {
                     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), _GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), (false) || false), false, false), bvec3(bvec4(bvec3(_GLF_IDENTITY(false, (false) || false), false, false), _GLF_IDENTITY(false, (false) && true))))), true && (bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), (false) || false), false, false), bvec3(bvec4(bvec3(_GLF_IDENTITY(false, (false) || false), false, false), _GLF_IDENTITY(false, (false) && true))))))), false || (bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, (false) || false), false, false), bvec3(bvec4(bvec3(_GLF_IDENTITY(false, (false) || false), false, false), false)))))))))
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        continue;
                       continue;
                      }
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
                        break;
                       if(_GLF_DEAD(false))
                        continue;
                       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY((0 | 1), (_GLF_IDENTITY((0 | 1), ((0 | 1)) | 0)) >> 0)); _injected_loop_counter ++)
                        {
                         return;
                        }
                       if(_GLF_DEAD(_GLF_IDENTITY(false, false || _GLF_IDENTITY(_GLF_IDENTITY((false), true && ((false))), true && (_GLF_IDENTITY(_GLF_IDENTITY((false), true && ((false))), ! (! (_GLF_IDENTITY((false), true && ((false)))))))))))
                        {
                         if(_GLF_WRAPPED_IF_FALSE(false))
                          {
                          }
                         else
                          {
                           return;
                          }
                        }
                      }
                    }
                  }
                 else
                  {
                  }
                }
               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
               if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))))
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   return;
                  }
                 else
                  {
                  }
                }
               if(_GLF_DEAD(false))
                break;
              }
            }
           else
            {
             return;
            }
           if(_GLF_DEAD(false))
            break;
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), (_GLF_WRAPPED_LOOP(false)) && true));
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(true, _GLF_IDENTITY(bool(bool(true)), false || (bool(bool(true))))) && (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))))
          {
           for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != (((1 & 1) << _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (int(2)) / (0 | 1)))) >> _GLF_IDENTITY(int(2), int(2)))); _injected_loop_counter ++)
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
              }
             else
              {
               return;
              }
            }
          }
        }
      }
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))
        return;
       return;
      }
    }
   else
    {
    }
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 do
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY((false), ((false)) || false) || _GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false))), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(min(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x), min(min(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x), min(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x)))), max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y) && true)), bool(bvec2((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(true, (_GLF_IDENTITY(true, ! (! (true)))) && true)))))))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            return;
           return;
          }
        }
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
          {
           return;
          }
        }
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  return;
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
          return;
         return;
        }
      }
     else
      {
       return;
       if(_GLF_DEAD(false))
        return;
      }
    }
  }
 uint next_virtual_gid = workgroup_base + _GLF_IDENTITY(subgroup_base, clamp(subgroup_base, subgroup_base, _GLF_IDENTITY(subgroup_base, (subgroup_base) ^ 0u))) + (_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, max((subgroup_local_id + 1) % subgroup_size, _GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, ((subgroup_local_id + 1) % subgroup_size) * 1u))));
 if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))) || false))
  return;
 uint read = 0;
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   do
    {
     for(_GLF_struct_7 _GLF_struct_replacement_7 = _GLF_struct_7(_GLF_struct_4(_GLF_struct_0(mat4x3(1.0), uvec2(1u), bvec2(_GLF_IDENTITY(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(true, ! (! (true))))))), _GLF_struct_1(uvec2(1u), vec4(1.0), 1), _GLF_struct_2(vec4(1.0), bvec2(true), mat3(_GLF_IDENTITY(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(88.41))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1.0, (_GLF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bool(true)), bool(bvec2(bool(bool(true)), true)))), (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat4x2(1.0, 1.0, 1.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 0.0, 1.0)), min(float(mat4x2(1.0, 1.0, 1.0, _GLF_IDENTITY(1.0, (1.0) - abs(0.0)), _GLF_ONE(1.0, injectionSwitch.y), 0.0, 0.0, 1.0)), float(mat4x2(1.0, 1.0, 1.0, 1.0, _GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(734.648)), bool(false)))), 0.0, 0.0, 1.0))))) : _GLF_FUZZED(9.6))), clamp(1.0, _GLF_IDENTITY(1.0, _GLF_IDENTITY(float(_GLF_IDENTITY(mat4x2(1.0, 1.0, 0.0, 1.0, 0.0, abs(1.0), _GLF_IDENTITY(0.0, float(_GLF_IDENTITY(mat2x3(0.0, length(tan(vec3(0.0, 0.0, 0.0))), log(1.0), 0.0, 0.0, 1.0), transpose(transpose(mat2x3(0.0, length(tan(vec3(0.0, 0.0, 0.0))), log(1.0), 0.0, 0.0, 1.0)))))), 0.0), transpose(transpose(mat4x2(1.0, 1.0, 0.0, 1.0, 0.0, abs(1.0), 0.0, 0.0))))), clamp(float(_GLF_IDENTITY(mat4x2(1.0, 1.0, 0.0, 1.0, 0.0, abs(1.0), _GLF_IDENTITY(0.0, 0.0 + (0.0)), 0.0), transpose(transpose(mat4x2(1.0, 1.0, 0.0, 1.0, 0.0, abs(1.0), 0.0, 0.0))))), float(_GLF_IDENTITY(mat4x2(1.0, 1.0, 0.0, 1.0, _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(26.34)), float(0.0), bool(true))), abs(1.0), 0.0, 0.0), transpose(transpose(mat4x2(1.0, 1.0, 0.0, 1.0, 0.0, _GLF_IDENTITY(abs(1.0), clamp(abs(1.0), abs(1.0), abs(1.0))), 0.0, 0.0))))), float(_GLF_IDENTITY(mat4x2(1.0, 1.0, 0.0, 1.0, 0.0, abs(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, float(_GLF_IDENTITY(mat4(1.0, exp(0.0), 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0), (_GLF_IDENTITY(mat4(1.0, exp(0.0), 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0), (mat4(1.0, exp(0.0), 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0)) - mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))) / mat4(1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0))))) - 0.0)), 0.0, 0.0), transpose(transpose(mat4x2(1.0, _GLF_IDENTITY(1.0, max(1.0, 1.0)), _GLF_IDENTITY(_GLF_IDENTITY(0.0, clamp(_GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0, _GLF_IDENTITY(0.0, _GLF_IDENTITY(float(_GLF_IDENTITY(mat4x2(_GLF_IDENTITY(0.0, clamp(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(657.774)), bool(false))), _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(vec4(-73.40, -857.862, -5907.3363, -4837.7833)[1]) : 0.0)), 0.0)), 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, round(_GLF_IDENTITY(length(normalize(vec4(1.0, 1.0, 1.0, 1.0))), mix(float(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), float(_GLF_FUZZED(65.78)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), transpose(transpose(mat4x2(0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0))))))))), log(1.0) + _GLF_IDENTITY((float(_GLF_IDENTITY(mat4x2(0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0))))), transpose(transpose(mat4x2(0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))))))))), (false ? _GLF_FUZZED(31.29) : _GLF_IDENTITY((float(_GLF_IDENTITY(mat4x2(0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0))))), transpose(transpose(mat4x2(0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))))))))), (true ? (float(_GLF_IDENTITY(mat4x2(0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0))))), transpose(transpose(mat4x2(0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))))))))) : _GLF_FUZZED(-6595.0381))))))))), float(vec3(_GLF_IDENTITY(_GLF_IDENTITY(0.0, clamp(_GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0, _GLF_IDENTITY(0.0, _GLF_IDENTITY(float(_GLF_IDENTITY(mat4x2(_GLF_IDENTITY(0.0, clamp(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(657.774)), bool(false))), _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(vec4(-73.40, -857.862, -5907.3363, -4837.7833)[1]) : 0.0)), 0.0)), 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, round(_GLF_IDENTITY(length(normalize(vec4(1.0, 1.0, 1.0, 1.0))), mix(float(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), float(_GLF_FUZZED(65.78)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), transpose(transpose(mat4x2(0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0))))))))), log(1.0) + _GLF_IDENTITY((float(_GLF_IDENTITY(mat4x2(0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0))))), transpose(transpose(mat4x2(0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))))))))), (false ? _GLF_FUZZED(31.29) : _GLF_IDENTITY((float(_GLF_IDENTITY(mat4x2(0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0))))), transpose(transpose(mat4x2(0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))))))))), (true ? (float(_GLF_IDENTITY(mat4x2(0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0))))), transpose(transpose(mat4x2(0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))))))))) : _GLF_FUZZED(-6595.0381))))))))), max(_GLF_IDENTITY(0.0, clamp(_GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0, _GLF_IDENTITY(0.0, _GLF_IDENTITY(float(_GLF_IDENTITY(mat4x2(_GLF_IDENTITY(0.0, clamp(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(657.774)), bool(false))), _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(vec4(-73.40, -857.862, -5907.3363, -4837.7833)[1]) : 0.0)), 0.0)), 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, round(_GLF_IDENTITY(length(normalize(vec4(1.0, 1.0, 1.0, 1.0))), mix(float(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), float(_GLF_FUZZED(65.78)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), transpose(transpose(mat4x2(0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0))))))))), log(1.0) + _GLF_IDENTITY((float(_GLF_IDENTITY(mat4x2(0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0))))), transpose(transpose(mat4x2(0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))))))))), (false ? _GLF_FUZZED(31.29) : _GLF_IDENTITY((float(_GLF_IDENTITY(mat4x2(0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0))))), transpose(transpose(mat4x2(0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))))))))), (true ? (float(_GLF_IDENTITY(mat4x2(0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0))))), transpose(transpose(mat4x2(0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))))))))) : _GLF_FUZZED(-6595.0381))))))))), _GLF_IDENTITY(0.0, clamp(_GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0, _GLF_IDENTITY(0.0, _GLF_IDENTITY(float(_GLF_IDENTITY(mat4x2(_GLF_IDENTITY(0.0, clamp(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(657.774)), bool(false))), _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(vec4(-73.40, -857.862, -5907.3363, -4837.7833)[1]) : 0.0)), 0.0)), 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, round(_GLF_IDENTITY(length(normalize(vec4(1.0, 1.0, 1.0, 1.0))), mix(float(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), float(_GLF_FUZZED(65.78)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), transpose(transpose(mat4x2(0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0))))))))), log(1.0) + _GLF_IDENTITY((float(_GLF_IDENTITY(mat4x2(0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0))))), transpose(transpose(mat4x2(0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))))))))), (false ? _GLF_FUZZED(31.29) : _GLF_IDENTITY((float(_GLF_IDENTITY(mat4x2(0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0))))), transpose(transpose(mat4x2(0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))))))))), (true ? (float(_GLF_IDENTITY(mat4x2(0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0))))), transpose(transpose(mat4x2(0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))))))))) : _GLF_FUZZED(-6595.0381))))))))))), 0.0, 1.0))), 1.0, 0.0, abs(1.0), 0.0, 0.0)))))))), _GLF_IDENTITY(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(106.686))), (true ? _GLF_IDENTITY(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(106.686))), _GLF_IDENTITY((false ? _GLF_FUZZED(_GLF_IDENTITY(356.907, max(356.907, 356.907))) : _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(106.686)))), clamp((false ? _GLF_FUZZED(_GLF_IDENTITY(356.907, max(356.907, 356.907))) : _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(106.686)))), (false ? _GLF_FUZZED(_GLF_IDENTITY(356.907, max(356.907, 356.907))) : _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(106.686)))), (false ? _GLF_FUZZED(_GLF_IDENTITY(356.907, max(356.907, 356.907))) : _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(106.686))))))) : _GLF_FUZZED(-2.9))))), min(_GLF_IDENTITY(1.0, clamp(1.0, _GLF_IDENTITY(1.0, _GLF_IDENTITY(_GLF_IDENTITY(float(_GLF_IDENTITY(mat4x2(1.0, 1.0, _GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, (0.0) + 0.0), 0.0)), _GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat3(1.0, 1.0, _GLF_IDENTITY(1.0, max(1.0, _GLF_IDENTITY(1.0, (1.0) / 1.0))), 0.0, exp(0.0), 0.0, 0.0, 0.0, 1.0)), (float(mat3(1.0, 1.0, 1.0, 0.0, exp(0.0), 0.0, 0.0, 0.0, 1.0))) / 1.0)), 0.0, abs(1.0), 0.0, 0.0), transpose(transpose(mat4x2(1.0, 1.0, 0.0, 1.0, 0.0, abs(1.0), 0.0, 0.0))))), mix(float(float(_GLF_IDENTITY(mat4x2(1.0, 1.0, _GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, (0.0) + 0.0), 0.0)), _GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat3(1.0, 1.0, 1.0, 0.0, exp(0.0), 0.0, 0.0, 0.0, 1.0)), (float(mat3(1.0, 1.0, 1.0, 0.0, exp(0.0), 0.0, 0.0, 0.0, 1.0))) / 1.0)), 0.0, abs(1.0), 0.0, 0.0), transpose(transpose(mat4x2(1.0, 1.0, 0.0, 1.0, 0.0, abs(1.0), 0.0, 0.0)))))), float(_GLF_FUZZED(-8274.3917)), bool(false))), clamp(float(_GLF_IDENTITY(mat4x2(1.0, 1.0, 0.0, 1.0, 0.0, abs(1.0), 0.0, 0.0), transpose(transpose(mat4x2(1.0, 1.0, _GLF_IDENTITY(0.0, min(0.0, 0.0)), 1.0, 0.0, abs(1.0), 0.0, 0.0))))), float(_GLF_IDENTITY(mat4x2(_GLF_IDENTITY(1.0, _GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(39.48) : 1.0), ((_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).x > injectionSwitch.y), false || (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).x > injectionSwitch.y), ! (! ((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).x > injectionSwitch.y))))))) ? _GLF_FUZZED(39.48) : 1.0)) / 1.0)), 1.0, 0.0, _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED((10.75))), float(1.0), bool(true))), 0.0, _GLF_IDENTITY(abs(_GLF_IDENTITY(1.0, (1.0) / determinant(mat3(1.0, 0.0, _GLF_IDENTITY(0.0, (0.0) / 1.0), 0.0, determinant(mat3(1.0, 0.0, 0.0, _GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-235.369)), bool(false))), 1.0, 0.0, 0.0, 1.0, 1.0)), 1.0, 0.0, 0.0, 1.0)))), (abs(_GLF_IDENTITY(1.0, (1.0) / determinant(mat3(1.0, 0.0, 0.0, 0.0, determinant(mat3(1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0)), 1.0, 0.0, 0.0, 1.0))))) / 1.0), 0.0, 0.0), transpose(transpose(mat4x2(1.0, 1.0, 0.0, 1.0, 0.0, _GLF_IDENTITY(abs(1.0), float(mat2(abs(1.0), 1.0, 0.0, 0.0))), _GLF_IDENTITY(0.0, clamp(0.0, _GLF_IDENTITY(0.0, 0.0 + (_GLF_IDENTITY(0.0, min(0.0, 0.0)))), _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)))), 0.0))))), float(_GLF_IDENTITY(mat4x2(1.0, 1.0, 0.0, 1.0, 0.0, abs(1.0), _GLF_IDENTITY(0.0, float(_GLF_IDENTITY(vec3(0.0, 0.0, exp(0.0)), clamp(_GLF_IDENTITY(vec3(0.0, 0.0, exp(0.0)), mix(vec3(_GLF_FUZZED(_GLF_IDENTITY(-7.4, min(-7.4, -7.4))), _GLF_FUZZED(-7.9), _GLF_FUZZED(62.08)), vec3((vec3(0.0, 0.0, exp(0.0)))[0], (_GLF_IDENTITY(vec3(0.0, 0.0, exp(0.0)), (false ? _GLF_FUZZED(vec3(-2.6, 7.8, 3.7)) : vec3(0.0, 0.0, exp(0.0)))))[1], _GLF_IDENTITY((vec3(0.0, 0.0, _GLF_IDENTITY(exp(0.0), (exp(0.0)) / 1.0)))[2], clamp((vec3(0.0, 0.0, _GLF_IDENTITY(exp(0.0), (exp(0.0)) / 1.0)))[2], (vec3(0.0, 0.0, _GLF_IDENTITY(exp(0.0), (exp(0.0)) / 1.0)))[2], (vec3(0.0, 0.0, _GLF_IDENTITY(exp(0.0), _GLF_IDENTITY((exp(0.0)) / 1.0, 0.0 + ((exp(0.0)) / 1.0)))))[2]))), bvec3(true, true, true))), vec3(0.0, 0.0, exp(0.0)), vec3(0.0, 0.0, exp(0.0)))))), 0.0), transpose(transpose(mat4x2(1.0, 1.0, _GLF_IDENTITY(0.0, clamp(_GLF_IDENTITY(_GLF_IDENTITY(0.0, max(0.0, 0.0)), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(0.0, max(0.0, 0.0)), (_GLF_IDENTITY(_GLF_IDENTITY(0.0, max(0.0, 0.0)), float(float(_GLF_IDENTITY(0.0, max(0.0, 0.0)))))) - 0.0), (_GLF_IDENTITY(0.0, max(0.0, 0.0))) * 1.0)), mix(float(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(0.0, max(0.0, 0.0)), (_GLF_IDENTITY(_GLF_IDENTITY(0.0, max(0.0, 0.0)), float(float(_GLF_IDENTITY(0.0, max(_GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, max(_GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(8.4) : 0.0)), 0.0)), 0.0)), 0.0)))))) - 0.0), (_GLF_IDENTITY(0.0, max(0.0, 0.0))) * 1.0)), clamp((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(0.0, max(0.0, 0.0)), (_GLF_IDENTITY(_GLF_IDENTITY(0.0, max(0.0, 0.0)), float(_GLF_IDENTITY(float(_GLF_IDENTITY(0.0, max(0.0, 0.0))), clamp(float(_GLF_IDENTITY(0.0, max(0.0, 0.0))), float(_GLF_IDENTITY(0.0, max(0.0, 0.0))), float(_GLF_IDENTITY(0.0, max(0.0, 0.0)))))))) - 0.0), (_GLF_IDENTITY(0.0, max(0.0, 0.0))) * 1.0)), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(0.0, max(0.0, 0.0)), (_GLF_IDENTITY(_GLF_IDENTITY(0.0, max(0.0, 0.0)), float(float(_GLF_IDENTITY(0.0, max(0.0, 0.0)))))) - 0.0), (_GLF_IDENTITY(0.0, max(0.0, 0.0))) * 1.0)), _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(0.0, max(0.0, 0.0)), (_GLF_IDENTITY(_GLF_IDENTITY(0.0, max(0.0, 0.0)), float(float(_GLF_IDENTITY(0.0, max(0.0, 0.0)))))) - 0.0), (_GLF_IDENTITY(0.0, max(0.0, 0.0))) * 1.0)), max((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(0.0, max(0.0, 0.0)), (_GLF_IDENTITY(_GLF_IDENTITY(0.0, max(0.0, 0.0)), float(float(_GLF_IDENTITY(0.0, max(0.0, 0.0)))))) - 0.0), (_GLF_IDENTITY(0.0, max(0.0, 0.0))) * 1.0)), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(0.0, max(0.0, 0.0)), (_GLF_IDENTITY(_GLF_IDENTITY(0.0, max(0.0, 0.0)), float(float(_GLF_IDENTITY(0.0, max(0.0, 0.0)))))) - 0.0), (_GLF_IDENTITY(0.0, max(0.0, 0.0))) * 1.0)))), mix(float(_GLF_FUZZED(-4.3)), float((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(0.0, max(0.0, 0.0)), sqrt(1.0) * (_GLF_IDENTITY(0.0, max(0.0, 0.0)))), (_GLF_IDENTITY(_GLF_IDENTITY(0.0, max(0.0, 0.0)), float(float(_GLF_IDENTITY(0.0, max(0.0, 0.0)))))) - 0.0), (_GLF_IDENTITY(0.0, max(0.0, 0.0))) * 1.0))), bool(true)))))), float(_GLF_FUZZED(55.07)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) / 1.0), 0.0, _GLF_IDENTITY(0.0, float(_GLF_IDENTITY(mat4x2(0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0))))), transpose(transpose(mat4x2(0.0, _GLF_IDENTITY(0.0, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 0.0 : _GLF_FUZZED(-9.0))), _GLF_IDENTITY(1.0, mix(float(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, _GLF_IDENTITY(1.0, (1.0) + 0.0)))), float(_GLF_FUZZED(29.79)), bool(false))), 0.0, 1.0, 1.0, 0.0, round(length(normalize(vec4(1.0, _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(96.94) : _GLF_IDENTITY(_GLF_IDENTITY(1.0, max(1.0, 1.0)), clamp(1.0, _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), 1.0)))), 1.0, 1.0)))))))))))), 1.0, 0.0, abs(1.0), 0.0, 0.0)))))))), 1.0)), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1.0, clamp(1.0, _GLF_IDENTITY(1.0, _GLF_IDENTITY(float(_GLF_IDENTITY(mat4x2(1.0, 1.0, 0.0, 1.0, 0.0, abs(1.0), 0.0, 0.0), transpose(transpose(mat4x2(1.0, 1.0, 0.0, 1.0, 0.0, abs(1.0), 0.0, _GLF_IDENTITY(0.0, clamp(0.0, 0.0, _GLF_IDENTITY(_GLF_IDENTITY(0.0, max(0.0, 0.0)), max(0.0, 0.0))))))))), clamp(float(_GLF_IDENTITY(mat4x2(1.0, 1.0, 0.0, 1.0, 0.0, abs(1.0), 0.0, 0.0), transpose(transpose(mat4x2(1.0, 1.0, 0.0, 1.0, 0.0, abs(1.0), 0.0, 0.0))))), float(_GLF_IDENTITY(mat4x2(1.0, 1.0, 0.0, 1.0, 0.0, abs(1.0), 0.0, _GLF_IDENTITY(0.0, clamp(_GLF_IDENTITY(0.0, (0.0) / 1.0), 0.0, 0.0))), transpose(transpose(mat4x2(1.0, 1.0, 0.0, 1.0, 0.0, _GLF_IDENTITY(abs(1.0), 0.0 + (abs(1.0))), 0.0, 0.0))))), float(_GLF_IDENTITY(mat4x2(1.0, 1.0, 0.0, 1.0, 0.0, abs(1.0), 0.0, 0.0), transpose(transpose(mat4x2(1.0, 1.0, _GLF_IDENTITY(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED((- -4.3))), bool(false))), clamp(_GLF_IDENTITY(0.0, _GLF_IDENTITY(max(0.0, 0.0), (true ? max(0.0, 0.0) : _GLF_FUZZED(sinh(87.59))))), 0.0, _GLF_IDENTITY(0.0, float(_GLF_IDENTITY(mat4x2(0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0))))), transpose(transpose(mat4x2(0.0, _GLF_IDENTITY(0.0, (0.0) + 0.0), 1.0, 0.0, 1.0, 1.0, 0.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))))))))))), 1.0, 0.0, abs(_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-1.1)), bool(false)))), 0.0, 0.0)))))))), 1.0)), clamp(_GLF_IDENTITY(_GLF_IDENTITY(1.0, clamp(1.0, _GLF_IDENTITY(1.0, _GLF_IDENTITY(_GLF_IDENTITY(float(_GLF_IDENTITY(mat4x2(1.0, 1.0, 0.0, 1.0, 0.0, abs(1.0), 0.0, 0.0), transpose(transpose(mat4x2(1.0, 1.0, 0.0, 1.0, 0.0, abs(1.0), 0.0, 0.0))))), clamp(float(_GLF_IDENTITY(mat4x2(1.0, 1.0, 0.0, 1.0, 0.0, abs(1.0), 0.0, 0.0), transpose(transpose(mat4x2(1.0, 1.0, 0.0, 1.0, 0.0, abs(1.0), 0.0, 0.0))))), float(_GLF_IDENTITY(mat4x2(1.0, 1.0, 0.0, 1.0, 0.0, abs(1.0), 0.0, 0.0), transpose(transpose(mat4x2(1.0, 1.0, 0.0, 1.0, 0.0, abs(1.0), 0.0, 0.0))))), float(_GLF_IDENTITY(mat4x2(1.0, 1.0, 0.0, 1.0, 0.0, abs(1.0), 0.0, 0.0), transpose(transpose(mat4x2(1.0, 1.0, 0.0, 1.0, 0.0, abs(1.0), 0.0, 0.0))))))), clamp(float(_GLF_IDENTITY(mat4x2(1.0, 1.0, 0.0, 1.0, 0.0, abs(1.0), 0.0, 0.0), transpose(transpose(mat4x2(1.0, 1.0, 0.0, 1.0, 0.0, abs(1.0), 0.0, _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(-6.6) : 0.0))))))), float(_GLF_IDENTITY(mat4x2(1.0, 1.0, 0.0, 1.0, 0.0, abs(1.0), 0.0, 0.0), transpose(transpose(mat4x2(1.0, 1.0, 0.0, 1.0, 0.0, _GLF_IDENTITY(abs(1.0), 0.0 + (abs(1.0))), 0.0, 0.0))))), _GLF_IDENTITY(float(_GLF_IDENTITY(mat4x2(1.0, _GLF_IDENTITY(1.0, float(mat4(_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(6249.5549)), bool(false))), 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, tan(0.0), 1.0, _GLF_ONE(1.0, injectionSwitch.y), determinant(mat4(1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, log(1.0), 1.0, 0.0, 0.0, 0.0, 0.0, 1.0)), round(length(normalize(1.0))), 1.0))), 0.0, 1.0, 0.0, abs(1.0), 0.0, 0.0), transpose(transpose(mat4x2(1.0, 1.0, _GLF_IDENTITY(0.0, clamp(_GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0, _GLF_IDENTITY(0.0, float(_GLF_IDENTITY(mat4x2(0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, round(_GLF_IDENTITY(length(normalize(vec4(1.0, 1.0, 1.0, 1.0))), 0.0 + (length(normalize(vec4(1.0, 1.0, 1.0, _GLF_IDENTITY(1.0, clamp(1.0, _GLF_IDENTITY(1.0, (1.0) - 0.0), 1.0))))))))), transpose(transpose(mat4x2(0.0, _GLF_IDENTITY(0.0, (0.0) + 0.0), 1.0, 0.0, 1.0, 1.0, 0.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))))))))))), 1.0, 0.0, abs(1.0), 0.0, 0.0))))), mix(float(float(_GLF_IDENTITY(mat4x2(1.0, 1.0, 0.0, 1.0, 0.0, abs(1.0), 0.0, 0.0), transpose(transpose(mat4x2(1.0, 1.0, _GLF_IDENTITY(0.0, clamp(_GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0, _GLF_IDENTITY(0.0, float(_GLF_IDENTITY(mat4x2(0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0))))), transpose(transpose(mat4x2(0.0, _GLF_IDENTITY(0.0, (0.0) + 0.0), 1.0, 0.0, 1.0, 1.0, 0.0, round(length(normalize(_GLF_IDENTITY(vec4(1.0, 1.0, 1.0, 1.0), (false ? _GLF_FUZZED(vec4(-2946.0452, 7.7, -8214.0029, -672.385)) : vec4(1.0, 1.0, 1.0, 1.0)))))))))))))), 1.0, 0.0, abs(1.0), 0.0, 0.0)))))), float(_GLF_FUZZED(-9.1)), bool(false)))))), 1.0)), min(_GLF_IDENTITY(1.0, clamp(1.0, _GLF_IDENTITY(1.0, _GLF_IDENTITY(float(_GLF_IDENTITY(mat4x2(1.0, 1.0, 0.0, 1.0, 0.0, abs(1.0), 0.0, 0.0), transpose(transpose(mat4x2(1.0, 1.0, 0.0, 1.0, 0.0, abs(1.0), 0.0, 0.0))))), clamp(float(_GLF_IDENTITY(mat4x2(1.0, 1.0, 0.0, 1.0, 0.0, abs(1.0), 0.0, 0.0), transpose(transpose(mat4x2(1.0, 1.0, 0.0, 1.0, 0.0, abs(1.0), 0.0, 0.0))))), float(_GLF_IDENTITY(mat4x2(1.0, 1.0, 0.0, 1.0, 0.0, abs(1.0), 0.0, 0.0), transpose(transpose(mat4x2(1.0, 1.0, 0.0, 1.0, 0.0, _GLF_IDENTITY(abs(1.0), _GLF_IDENTITY(0.0 + (abs(1.0)), (_GLF_IDENTITY(_GLF_IDENTITY(0.0 + (abs(1.0)), (0.0 + (abs(1.0))) - 0.0), (0.0 + (abs(1.0))) + 0.0)) - 0.0)), 0.0, 0.0))))), float(_GLF_IDENTITY(mat4x2(1.0, 1.0, 0.0, 1.0, 0.0, abs(1.0), 0.0, 0.0), transpose(transpose(mat4x2(1.0, 1.0, _GLF_IDENTITY(0.0, clamp(_GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0, _GLF_IDENTITY(0.0, float(_GLF_IDENTITY(mat4x2(0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0))))), transpose(transpose(mat4x2(0.0, _GLF_IDENTITY(0.0, (0.0) + _GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(69.99)))), 1.0, 0.0, 1.0, 1.0, 0.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))))))))))), 1.0, 0.0, abs(1.0), 0.0, 0.0)))))))), 1.0)), _GLF_IDENTITY(1.0, clamp(1.0, _GLF_IDENTITY(1.0, _GLF_IDENTITY(float(_GLF_IDENTITY(mat4x2(1.0, 1.0, 0.0, 1.0, 0.0, abs(1.0), 0.0, 0.0), transpose(transpose(mat4x2(1.0, 1.0, 0.0, 1.0, 0.0, abs(1.0), 0.0, 0.0))))), clamp(float(_GLF_IDENTITY(mat4x2(1.0, 1.0, 0.0, 1.0, 0.0, abs(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(70.22) : 1.0))), 0.0, 0.0), transpose(transpose(mat4x2(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED((-8970.7528))), float(1.0), bool(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ((injectionSwitch.x < injectionSwitch.y)) || false))))), 1.0, 0.0, 1.0, 0.0, abs(1.0), 0.0, 0.0))))), float(_GLF_IDENTITY(mat4x2(1.0, 1.0, 0.0, _GLF_IDENTITY(1.0, 0.0 + (1.0)), 0.0, abs(1.0), 0.0, 0.0), transpose(transpose(mat4x2(1.0, 1.0, 0.0, 1.0, 0.0, _GLF_IDENTITY(abs(1.0), 0.0 + (abs(1.0))), 0.0, 0.0))))), float(_GLF_IDENTITY(mat4x2(1.0, 1.0, 0.0, 1.0, 0.0, abs(1.0), 0.0, 0.0), transpose(transpose(mat4x2(1.0, 1.0, _GLF_IDENTITY(0.0, clamp(_GLF_IDENTITY(0.0, max(0.0, 0.0)), _GLF_IDENTITY(0.0, max(0.0, 0.0)), _GLF_IDENTITY(0.0, float(_GLF_IDENTITY(mat4x2(0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0))))), transpose(transpose(mat4x2(0.0, _GLF_IDENTITY(0.0, (0.0) + _GLF_IDENTITY(0.0, float(vec4(0.0, _GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(0.0, sqrt(0.0))), dot(vec2(1.0, 1.0), vec2(0.0, sqrt(0.0)))), 0.0, 0.0)))), 1.0, 0.0, 1.0, 1.0, 0.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))))))))))), 1.0, 0.0, abs(1.0), 0.0, 0.0)))))))), 1.0)))), _GLF_IDENTITY(1.0, clamp(1.0, _GLF_IDENTITY(1.0, _GLF_IDENTITY(float(_GLF_IDENTITY(mat4x2(1.0, 1.0, 0.0, 1.0, 0.0, abs(1.0), 0.0, 0.0), transpose(transpose(mat4x2(1.0, 1.0, 0.0, 1.0, 0.0, abs(1.0), 0.0, 0.0))))), clamp(float(_GLF_IDENTITY(mat4x2(1.0, 1.0, 0.0, 1.0, 0.0, abs(1.0), 0.0, 0.0), transpose(transpose(mat4x2(1.0, 1.0, 0.0, 1.0, 0.0, abs(1.0), 0.0, 0.0))))), float(_GLF_IDENTITY(mat4x2(1.0, 1.0, 0.0, 1.0, 0.0, abs(1.0), 0.0, 0.0), transpose(transpose(mat4x2(1.0, 1.0, 0.0, 1.0, 0.0, _GLF_IDENTITY(abs(1.0), 0.0 + (abs(1.0))), 0.0, 0.0))))), float(_GLF_IDENTITY(mat4x2(1.0, 1.0, 0.0, 1.0, 0.0, abs(1.0), 0.0, 0.0), transpose(transpose(mat4x2(1.0, 1.0, _GLF_IDENTITY(0.0, clamp(_GLF_IDENTITY(_GLF_IDENTITY(0.0, (0.0) / 1.0), max(0.0, _GLF_IDENTITY(0.0, (0.0) - 0.0))), 0.0, _GLF_IDENTITY(0.0, float(_GLF_IDENTITY(mat4x2(0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0))))), transpose(transpose(mat4x2(0.0, _GLF_IDENTITY(0.0, (0.0) + _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0))), 1.0, 0.0, 1.0, 1.0, 0.0, round(length(normalize(vec4(_GLF_IDENTITY(1.0, 1.0 * (1.0)), 1.0, 1.0, _GLF_IDENTITY(1.0, (1.0) - 0.0))))))))))))), 1.0, 0.0, abs(1.0), 0.0, 0.0)))))))), 1.0)), _GLF_IDENTITY(1.0, clamp(1.0, _GLF_IDENTITY(_GLF_IDENTITY(1.0, _GLF_IDENTITY(float(_GLF_IDENTITY(mat4x2(1.0, _GLF_IDENTITY(1.0, _GLF_IDENTITY(float(vec3(1.0, 0.0, 0.0)), (float(vec3(1.0, 0.0, 0.0))) / 1.0)), 0.0, 1.0, 0.0, abs(1.0), 0.0, 0.0), transpose(transpose(mat4x2(1.0, 1.0, 0.0, 1.0, 0.0, abs(1.0), _GLF_IDENTITY(0.0, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-40.83) : 0.0)), 0.0))))), clamp(float(_GLF_IDENTITY(mat4x2(1.0, 1.0, 0.0, 1.0, 0.0, abs(1.0), 0.0, 0.0), transpose(transpose(mat4x2(1.0, 1.0, 0.0, 1.0, 0.0, abs(1.0), 0.0, 0.0))))), float(_GLF_IDENTITY(mat4x2(1.0, 1.0, 0.0, 1.0, 0.0, abs(1.0), 0.0, 0.0), transpose(transpose(mat4x2(1.0, 1.0, 0.0, 1.0, 0.0, _GLF_IDENTITY(abs(1.0), 0.0 + (abs(1.0))), 0.0, 0.0))))), float(_GLF_IDENTITY(mat4x2(1.0, 1.0, 0.0, 1.0, 0.0, abs(1.0), 0.0, 0.0), transpose(transpose(mat4x2(1.0, 1.0, _GLF_IDENTITY(0.0, clamp(_GLF_IDENTITY(0.0, max(0.0, 0.0)), _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), _GLF_IDENTITY(0.0, float(_GLF_IDENTITY(mat4x2(0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0))))), transpose(transpose(mat4x2(0.0, _GLF_IDENTITY(0.0, (0.0) + 0.0), 1.0, 0.0, 1.0, 1.0, 0.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))))))))))), 1.0, 0.0, abs(1.0), 0.0, 0.0)))))))), 1.0 * (_GLF_IDENTITY(1.0, _GLF_IDENTITY(float(_GLF_IDENTITY(mat4x2(1.0, _GLF_IDENTITY(1.0, _GLF_IDENTITY(float(vec3(1.0, 0.0, 0.0)), (float(vec3(1.0, 0.0, 0.0))) / 1.0)), 0.0, 1.0, 0.0, abs(1.0), 0.0, 0.0), transpose(transpose(mat4x2(1.0, 1.0, 0.0, _GLF_IDENTITY(1.0, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(8.5) : 1.0)), 0.0, abs(1.0), _GLF_IDENTITY(0.0, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-40.83) : 0.0)), 0.0))))), clamp(float(_GLF_IDENTITY(mat4x2(1.0, 1.0, 0.0, 1.0, 0.0, abs(1.0), 0.0, 0.0), transpose(transpose(mat4x2(1.0, 1.0, 0.0, 1.0, 0.0, abs(1.0), 0.0, 0.0))))), float(_GLF_IDENTITY(mat4x2(1.0, 1.0, _GLF_IDENTITY(0.0, min(0.0, _GLF_IDENTITY(0.0, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(6.6) : 0.0)))), 1.0, 0.0, abs(1.0), 0.0, 0.0), transpose(transpose(mat4x2(1.0, 1.0, 0.0, 1.0, 0.0, _GLF_IDENTITY(abs(1.0), 0.0 + (abs(1.0))), 0.0, _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0))))))), float(_GLF_IDENTITY(mat4x2(1.0, 1.0, 0.0, 1.0, 0.0, abs(1.0), 0.0, 0.0), transpose(transpose(mat4x2(1.0, 1.0, _GLF_IDENTITY(0.0, _GLF_IDENTITY(clamp(_GLF_IDENTITY(0.0, max(0.0, 0.0)), _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), _GLF_IDENTITY(0.0, float(_GLF_IDENTITY(mat4x2(0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0))))), transpose(transpose(mat4x2(0.0, _GLF_IDENTITY(0.0, (0.0) + 0.0), 1.0, 0.0, 1.0, 1.0, 0.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0))))))))))), (true ? clamp(_GLF_IDENTITY(0.0, max(0.0, 0.0)), _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), _GLF_IDENTITY(_GLF_IDENTITY(0.0, float(_GLF_IDENTITY(mat4x2(0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0))))), transpose(transpose(mat4x2(0.0, _GLF_IDENTITY(0.0, (0.0) + 0.0), 1.0, 0.0, 1.0, 1.0, 0.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))))))))), float(mat4x3(_GLF_IDENTITY(0.0, float(_GLF_IDENTITY(mat4x2(0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0))))), transpose(transpose(mat4x2(0.0, _GLF_IDENTITY(0.0, (0.0) + 0.0), 1.0, 0.0, 1.0, 1.0, 0.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))))))))), length(log(vec3(1.0, 1.0, 1.0))), 0.0, determinant(mat2(1.0, 0.0, 1.0, 1.0)), round(length(normalize(vec3(1.0, 1.0, 1.0)))), log(_GLF_ONE(1.0, injectionSwitch.y)), length(vec3(0.0, 0.0, 0.0)), abs(1.0), length(vec2(0.0, 0.0)), 1.0, exp(0.0), sqrt(0.0))))) : _GLF_FUZZED(4.1)))), 1.0, 0.0, abs(1.0), 0.0, 0.0)))))))))), 1.0)))), (_GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, (1.0) * cos(0.0)), _GLF_IDENTITY(1.0, _GLF_IDENTITY(float(_GLF_IDENTITY(mat4x2(1.0, 1.0, 0.0, 1.0, 0.0, abs(1.0), 0.0, 0.0), transpose(transpose(mat4x2(1.0, 1.0, 0.0, 1.0, 0.0, abs(1.0), 0.0, 0.0))))), _GLF_IDENTITY(clamp(float(_GLF_IDENTITY(mat4x2(1.0, 1.0, 0.0, 1.0, 0.0, abs(1.0), 0.0, 0.0), transpose(transpose(mat4x2(1.0, 1.0, 0.0, 1.0, 0.0, abs(1.0), 0.0, 0.0))))), float(_GLF_IDENTITY(mat4x2(1.0, 1.0, 0.0, 1.0, 0.0, abs(1.0), 0.0, 0.0), transpose(transpose(mat4x2(1.0, 1.0, _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(-39.82) : _GLF_IDENTITY(0.0, clamp(_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-2.4)), float(0.0), bool(true))), 0.0, 0.0)))), 1.0, 0.0, abs(1.0), 0.0, 0.0))))), float(_GLF_IDENTITY(mat4x2(1.0, 1.0, 0.0, 1.0, 0.0, abs(1.0), 0.0, 0.0), transpose(transpose(mat4x2(1.0, 1.0, _GLF_IDENTITY(0.0, clamp(_GLF_IDENTITY(0.0, max(0.0, 0.0)), _GLF_IDENTITY(0.0, (0.0) * 1.0), _GLF_IDENTITY(0.0, float(_GLF_IDENTITY(mat4x2(0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0))))), transpose(transpose(mat4x2(0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))))))))))), 1.0, 0.0, abs(1.0), 0.0, 0.0)))))), mix(float(_GLF_FUZZED(float(103487u))), float(clamp(float(_GLF_IDENTITY(mat4x2(1.0, 1.0, 0.0, 1.0, 0.0, abs(_GLF_IDENTITY(1.0, max(1.0, 1.0))), 0.0, 0.0), transpose(transpose(mat4x2(1.0, 1.0, 0.0, 1.0, 0.0, abs(1.0), 0.0, 0.0))))), float(_GLF_IDENTITY(mat4x2(1.0, 1.0, _GLF_IDENTITY(0.0, min(0.0, 0.0)), 1.0, 0.0, abs(1.0), 0.0, 0.0), transpose(transpose(mat4x2(1.0, _GLF_IDENTITY(1.0, (1.0) / 1.0), 0.0, 1.0, 0.0, abs(1.0), 0.0, 0.0))))), float(_GLF_IDENTITY(mat4x2(1.0, 1.0, 0.0, 1.0, 0.0, abs(1.0), 0.0, 0.0), transpose(transpose(mat4x2(1.0, 1.0, _GLF_IDENTITY(0.0, clamp(_GLF_IDENTITY(0.0, max(0.0, 0.0)), _GLF_IDENTITY(0.0, (0.0) * 1.0), _GLF_IDENTITY(0.0, float(_GLF_IDENTITY(mat4x2(0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0))))), transpose(transpose(mat4x2(0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))))))))))), 1.0, 0.0, abs(1.0), 0.0, 0.0))))))), bool(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-600.955)), float(injectionSwitch.x), bool(true))) < injectionSwitch.y))))))), 1.0))) / 1.0))), 1.0, 1.0))), mat4x3(_GLF_IDENTITY(1.0, (1.0) - _GLF_ZERO(0.0, injectionSwitch.x))), mat3(1.0), ivec2(1)), _GLF_struct_3(mat2x4(1.0), 1, mat3x4(1.0), bvec2(true)), _GLF_IDENTITY(true, bool(bvec3(_GLF_IDENTITY(true, _GLF_IDENTITY(! (! (_GLF_IDENTITY(true, bool(bool(true))))), (_GLF_IDENTITY(! (! (_GLF_IDENTITY(true, bool(bool(true))))), ! (! (! (! (_GLF_IDENTITY(true, bool(bool(true))))))))) && true)), false, false)))), vec4(1.0), _GLF_struct_5(mat2x4(1.0), 1), 1.0, _GLF_struct_6(ivec2(1), 1u), uvec3(1u)); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_struct_replacement_7._f2._injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_struct_replacement_7._f2._injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))), (_GLF_WRAPPED_LOOP(_GLF_struct_replacement_7._f2._injected_loop_counter > int(_GLF_ZERO(_GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(-5188.6108))), injectionSwitch.x)))) || false))); _GLF_struct_replacement_7._f2._injected_loop_counter --)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0))))) / vec2(1.0, 1.0)).y))), (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)))), clamp(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)))), _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)))), _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0))))))) / vec2(1.0, _GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, (1.0) - 0.0), 1.0)))).y)))) || false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
         if(_GLF_DEAD(false))
          {
           if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec4(_GLF_DEAD(false), false, true, true)), false || (bool(bvec4(_GLF_DEAD(false), _GLF_IDENTITY(false, ! (! (false))), true, true))))))
            return;
           if(_GLF_DEAD(false))
            break;
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
              {
               return;
              }
            }
          }
        }
       else
        {
        }
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(6.8)), float(injectionSwitch.y), bool(true))))), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
        break;
       if(_GLF_DEAD(false))
        return;
       do
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           do
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                continue;
              }
             else
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 atomicStore(buf[next_virtual_gid], uint(1), 4, 64, 4);
                }
               else
                {
                }
               if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false))))))
                continue;
               if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), true && (bool(false)))))))
                return;
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, false || (false))));
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
      continue;
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     if(_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id % 2) == 0, false || (_GLF_IDENTITY((subgroup_local_id % 2), ((subgroup_local_id % 2)) ^ 0u) == 0)), (_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id % 2) == 0, false || ((subgroup_local_id % 2) == 0)), bool(bvec2(_GLF_IDENTITY((subgroup_local_id % 2) == 0, false || ((subgroup_local_id % 2) == 0)), true)))) && _GLF_IDENTITY(true, bool(bvec2(true, false)))))
      {
       read = atomicLoad(_GLF_IDENTITY(_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) - 0u), uint(_GLF_IDENTITY(uvec3(_GLF_IDENTITY(_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) - 0u), _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec3(_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) - 0u), 0u, 1u), max(uvec3(_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) - 0u), 0u, 1u), uvec3(_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) - 0u), 0u, 1u)))), 0u ^ (uint(_GLF_IDENTITY(uvec3(_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) - 0u), 0u, 1u), max(uvec3(_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) - 0u), 0u, 1u), uvec3(_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) - 0u), 0u, 1u))))))), ((0u << _GLF_IDENTITY(uint(6u), uint(6u))) >> _GLF_IDENTITY(uint(7u), uint(7u))), 1u), uvec3(0u, 0u, 0u) | (uvec3(_GLF_IDENTITY(_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) - 0u), _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec3(_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) - 0u), 0u, 1u), max(uvec3(_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) - 0u), 0u, 1u), uvec3(_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) - 0u), 0u, 1u)))), 0u ^ (uint(_GLF_IDENTITY(uvec3(_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) - 0u), 0u, 1u), max(uvec3(_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) - 0u), 0u, 1u), uvec3(_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) - 0u), 0u, 1u))))))), ((0u << _GLF_IDENTITY(uint(6u), uint(6u))) >> _GLF_IDENTITY(uint(7u), uint(7u))), 1u))))), 4, 64, 2);
      }
     else
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          return;
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          return;
         return;
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec2(false, true))), bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec2(false, true))), bool(bvec3(_GLF_IDENTITY(false, bool(bvec2(false, true))), true, true))), true, true, false)))))
        {
         do
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 return;
                }
               else
                {
                }
              }
             else
              {
              }
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(5647.5510, -3.7)) : injectionSwitch)).x > injectionSwitch.y))));
         return;
        }
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         do
          {
           read = atomicLoad(buf[_GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, max(_GLF_IDENTITY(virtual_gid, max(virtual_gid, virtual_gid)), _GLF_IDENTITY(virtual_gid, clamp(virtual_gid, virtual_gid, _GLF_IDENTITY(virtual_gid, clamp(virtual_gid, _GLF_IDENTITY(virtual_gid, (false ? _GLF_FUZZED(num_workgroup) : virtual_gid)), virtual_gid)))))), (_GLF_IDENTITY(virtual_gid, max(virtual_gid, virtual_gid))) >> 0u)], _GLF_IDENTITY(4, (_GLF_IDENTITY(4, (4) | (4))) >> (0 << _GLF_IDENTITY(int(6), int(6)))), 64, 2);
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
    }
  }
 else
  {
   subgroupBarrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       return;
      }
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, true && (false))))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], float(mat4x3(injectionSwitch[1], 0.0, 1.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(dot(vec3(1.0, _GLF_IDENTITY(1.0, clamp(1.0, _GLF_IDENTITY(_GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, float(mat2x4(1.0, 0.0, 0.0, log(1.0), 1.0, 0.0, 1.0, 1.0))), _GLF_IDENTITY(1.0, float(mat3x4(1.0, exp(0.0), 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0))))), max(_GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, float(mat2x4(1.0, 0.0, 0.0, log(1.0), 1.0, 0.0, 1.0, 1.0))), _GLF_IDENTITY(1.0, float(mat3x4(1.0, exp(0.0), 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0))))), _GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, float(mat2x4(1.0, 0.0, 0.0, log(1.0), 1.0, 0.0, 1.0, 1.0))), _GLF_IDENTITY(1.0, float(mat3x4(1.0, exp(0.0), 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0))))))), 1.0)), 1.0), vec3(0.0, _GLF_IDENTITY(0.0, _GLF_IDENTITY(float(mat4x3(0.0, sqrt(round(length(normalize(vec3(1.0, 1.0, 1.0))))), sqrt(sqrt(0.0)), 0.0, 1.0, 0.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, 0.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 1.0)), (float(mat4x3(0.0, sqrt(round(length(normalize(vec3(1.0, 1.0, 1.0))))), sqrt(sqrt(0.0)), 0.0, 1.0, 0.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, 0.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 1.0))) + 0.0)), 0.0)), dot(vec3(1.0, 1.0, 1.0), vec3(0.0, 0.0, 0.0))), 0.0, 1.0, 0.0, 0.0, 1.0))))), mat2(1.0) * (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], float(mat4x3(injectionSwitch[1], 0.0, 1.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(dot(vec3(1.0, _GLF_IDENTITY(1.0, clamp(1.0, _GLF_IDENTITY(_GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, float(mat2x4(1.0, 0.0, 0.0, log(1.0), 1.0, 0.0, 1.0, 1.0))), _GLF_IDENTITY(1.0, float(mat3x4(1.0, exp(0.0), 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0))))), max(_GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, float(mat2x4(1.0, 0.0, 0.0, log(1.0), 1.0, 0.0, 1.0, 1.0))), _GLF_IDENTITY(1.0, float(mat3x4(1.0, exp(0.0), 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0))))), _GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, float(mat2x4(1.0, 0.0, 0.0, log(1.0), 1.0, 0.0, 1.0, 1.0))), _GLF_IDENTITY(1.0, float(mat3x4(1.0, exp(0.0), 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0))))))), 1.0)), 1.0), vec3(0.0, _GLF_IDENTITY(0.0, _GLF_IDENTITY(float(mat4x3(0.0, sqrt(round(length(normalize(vec3(1.0, 1.0, 1.0))))), sqrt(sqrt(0.0)), 0.0, 1.0, 0.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, 0.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 1.0)), (float(mat4x3(0.0, sqrt(round(length(normalize(vec3(1.0, 1.0, 1.0))))), sqrt(sqrt(0.0)), 0.0, 1.0, 0.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, 0.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 1.0))) + 0.0)), 0.0)), dot(vec3(1.0, 1.0, 1.0), vec3(0.0, 0.0, 0.0))), 0.0, 1.0, 0.0, 0.0, 1.0))))))).x > injectionSwitch.y), ((_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], float(mat4x3(injectionSwitch[1], 0.0, 1.0, 0.0, _GLF_IDENTITY(0.0, min(0.0, 0.0)), 1.0, _GLF_IDENTITY(dot(vec3(1.0, _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), 1.0), vec3(0.0, 0.0, 0.0)), dot(vec3(1.0, _GLF_IDENTITY(_GLF_IDENTITY(1.0, 1.0 * (_GLF_IDENTITY(1.0, (1.0) - length(vec2(0.0, 0.0))))), min(_GLF_IDENTITY(1.0, 1.0 * (_GLF_IDENTITY(1.0, (1.0) - length(vec2(0.0, 0.0))))), _GLF_IDENTITY(1.0, 1.0 * (_GLF_IDENTITY(1.0, (1.0) - length(vec2(0.0, 0.0))))))), 1.0), vec3(0.0, 0.0, 0.0))), 0.0, 1.0, 0.0, 0.0, 1.0))))).x > injectionSwitch.y)) || false))), ! (_GLF_IDENTITY(! ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], float(mat4x3(injectionSwitch[1], 0.0, 1.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(dot(vec3(1.0, _GLF_IDENTITY(1.0, clamp(1.0, _GLF_IDENTITY(_GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, float(mat2x4(1.0, 0.0, 0.0, log(1.0), 1.0, 0.0, 1.0, 1.0))), _GLF_IDENTITY(1.0, float(mat3x4(1.0, exp(0.0), 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0))))), max(_GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, float(mat2x4(1.0, 0.0, 0.0, log(1.0), 1.0, 0.0, 1.0, 1.0))), _GLF_IDENTITY(1.0, float(mat3x4(1.0, exp(0.0), 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0))))), _GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, float(mat2x4(1.0, 0.0, 0.0, log(1.0), 1.0, 0.0, 1.0, 1.0))), _GLF_IDENTITY(1.0, float(mat3x4(1.0, exp(0.0), 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0))))))), 1.0)), 1.0), vec3(0.0, _GLF_IDENTITY(0.0, _GLF_IDENTITY(float(mat4x3(0.0, sqrt(round(length(normalize(vec3(1.0, 1.0, 1.0))))), sqrt(sqrt(0.0)), 0.0, 1.0, 0.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, 0.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 1.0)), (float(mat4x3(0.0, sqrt(round(length(normalize(vec3(1.0, 1.0, 1.0))))), sqrt(sqrt(0.0)), 0.0, 1.0, 0.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, 0.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 1.0))) + 0.0)), 0.0)), dot(vec3(1.0, 1.0, 1.0), vec3(0.0, 0.0, 0.0))), 0.0, 1.0, 0.0, 0.0, 1.0))))), mat2(1.0) * (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], float(mat4x3(injectionSwitch[1], 0.0, 1.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(dot(vec3(1.0, _GLF_IDENTITY(1.0, clamp(1.0, _GLF_IDENTITY(_GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, float(mat2x4(1.0, 0.0, 0.0, log(1.0), 1.0, 0.0, 1.0, 1.0))), _GLF_IDENTITY(1.0, float(mat3x4(1.0, exp(0.0), 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0))))), max(_GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, float(mat2x4(1.0, 0.0, 0.0, log(1.0), 1.0, 0.0, 1.0, 1.0))), _GLF_IDENTITY(1.0, float(mat3x4(1.0, exp(0.0), 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0))))), _GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, float(mat2x4(1.0, 0.0, 0.0, log(1.0), 1.0, 0.0, 1.0, 1.0))), _GLF_IDENTITY(1.0, float(mat3x4(1.0, exp(0.0), 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0))))))), 1.0)), 1.0), vec3(0.0, _GLF_IDENTITY(0.0, _GLF_IDENTITY(float(mat4x3(0.0, sqrt(round(length(normalize(vec3(1.0, 1.0, 1.0))))), sqrt(sqrt(0.0)), 0.0, 1.0, 0.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, 0.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 1.0)), (float(mat4x3(0.0, sqrt(round(length(normalize(vec3(1.0, 1.0, 1.0))))), sqrt(sqrt(0.0)), 0.0, 1.0, 0.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, 0.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 1.0))) + 0.0)), 0.0)), dot(vec3(1.0, 1.0, 1.0), vec3(0.0, 0.0, 0.0))), 0.0, 1.0, 0.0, 0.0, 1.0))))))).x > injectionSwitch.y), ((_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], float(mat4x3(injectionSwitch[1], 0.0, 1.0, 0.0, _GLF_IDENTITY(0.0, min(0.0, 0.0)), 1.0, _GLF_IDENTITY(dot(vec3(1.0, _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), 1.0), vec3(0.0, 0.0, 0.0)), dot(vec3(1.0, _GLF_IDENTITY(_GLF_IDENTITY(1.0, 1.0 * (_GLF_IDENTITY(1.0, (1.0) - length(vec2(0.0, 0.0))))), min(_GLF_IDENTITY(1.0, 1.0 * (_GLF_IDENTITY(1.0, (1.0) - length(vec2(0.0, 0.0))))), _GLF_IDENTITY(1.0, 1.0 * (_GLF_IDENTITY(1.0, (1.0) - length(vec2(0.0, 0.0))))))), 1.0), vec3(0.0, 0.0, 0.0))), 0.0, 1.0, 0.0, 0.0, 1.0))))).x > injectionSwitch.y)) || false)))), (! ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], float(mat4x3(injectionSwitch[1], 0.0, 1.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(dot(vec3(1.0, _GLF_IDENTITY(1.0, clamp(1.0, _GLF_IDENTITY(_GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, float(mat2x4(1.0, 0.0, 0.0, log(1.0), 1.0, 0.0, 1.0, 1.0))), _GLF_IDENTITY(1.0, float(mat3x4(1.0, exp(0.0), 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0))))), max(_GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, float(mat2x4(1.0, 0.0, 0.0, log(1.0), 1.0, 0.0, 1.0, 1.0))), _GLF_IDENTITY(1.0, float(mat3x4(1.0, exp(0.0), 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0))))), _GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, float(mat2x4(1.0, 0.0, 0.0, log(1.0), 1.0, 0.0, 1.0, 1.0))), _GLF_IDENTITY(1.0, float(mat3x4(1.0, exp(0.0), 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0))))))), 1.0)), 1.0), vec3(0.0, _GLF_IDENTITY(0.0, _GLF_IDENTITY(float(mat4x3(0.0, sqrt(round(length(normalize(vec3(1.0, 1.0, 1.0))))), sqrt(sqrt(0.0)), 0.0, 1.0, 0.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, 0.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 1.0)), (float(mat4x3(0.0, sqrt(round(length(normalize(vec3(1.0, 1.0, 1.0))))), sqrt(sqrt(0.0)), 0.0, 1.0, 0.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, 0.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 1.0))) + 0.0)), 0.0)), dot(vec3(1.0, 1.0, 1.0), vec3(0.0, 0.0, 0.0))), 0.0, 1.0, 0.0, 0.0, 1.0))))), mat2(1.0) * (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], float(mat4x3(injectionSwitch[1], 0.0, 1.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(dot(vec3(1.0, _GLF_IDENTITY(1.0, clamp(1.0, _GLF_IDENTITY(_GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, float(mat2x4(1.0, 0.0, 0.0, log(1.0), 1.0, 0.0, 1.0, 1.0))), _GLF_IDENTITY(1.0, float(mat3x4(1.0, exp(0.0), 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0))))), max(_GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, float(mat2x4(1.0, 0.0, 0.0, log(1.0), 1.0, 0.0, 1.0, 1.0))), _GLF_IDENTITY(1.0, float(mat3x4(1.0, exp(0.0), 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0))))), _GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, float(mat2x4(1.0, 0.0, 0.0, log(1.0), 1.0, 0.0, 1.0, 1.0))), _GLF_IDENTITY(1.0, float(mat3x4(1.0, exp(0.0), 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0))))))), 1.0)), 1.0), vec3(0.0, _GLF_IDENTITY(0.0, _GLF_IDENTITY(float(mat4x3(0.0, sqrt(round(length(normalize(vec3(1.0, 1.0, 1.0))))), sqrt(sqrt(0.0)), 0.0, 1.0, 0.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, 0.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 1.0)), (float(mat4x3(0.0, sqrt(round(length(normalize(vec3(1.0, 1.0, 1.0))))), sqrt(sqrt(0.0)), 0.0, 1.0, 0.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, 0.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 1.0))) + 0.0)), 0.0)), dot(vec3(1.0, 1.0, 1.0), vec3(0.0, 0.0, 0.0))), 0.0, 1.0, 0.0, 0.0, 1.0))))))).x > injectionSwitch.y), ((_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], float(mat4x3(injectionSwitch[1], 0.0, 1.0, 0.0, _GLF_IDENTITY(0.0, min(0.0, 0.0)), 1.0, _GLF_IDENTITY(dot(vec3(1.0, _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), 1.0), vec3(0.0, 0.0, 0.0)), dot(vec3(1.0, _GLF_IDENTITY(_GLF_IDENTITY(1.0, 1.0 * (_GLF_IDENTITY(1.0, (1.0) - length(vec2(0.0, 0.0))))), min(_GLF_IDENTITY(1.0, 1.0 * (_GLF_IDENTITY(1.0, (1.0) - length(vec2(0.0, 0.0))))), _GLF_IDENTITY(1.0, 1.0 * (_GLF_IDENTITY(1.0, (1.0) - length(vec2(0.0, 0.0))))))), 1.0), vec3(0.0, 0.0, 0.0))), 0.0, 1.0, 0.0, 0.0, 1.0))))).x > injectionSwitch.y)) || false))))) || false))))))
    return;
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) - 0))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       do
        {
         atomicStore(checker[virtual_gid], _GLF_IDENTITY(read, (_GLF_IDENTITY(read, (read) | (read))) << 0u), _GLF_IDENTITY(4, _GLF_IDENTITY((4) << 0, ((4) << 0) / 1)), 64, 4);
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     else
      {
      }
    }
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          return;
        }
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         return;
        }
       else
        {
        }
      }
     for(int _injected_loop_counter = (_GLF_IDENTITY(1 & 1, (1 & 1) >> 0)); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 | 0)); _injected_loop_counter --)
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(unpackUnorm2x16(num_workgroup)))).y), bool(bvec2(! (injectionSwitch.x > injectionSwitch.y), false))))))))))))
            {
             if(_GLF_DEAD(false))
              return;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   return;
                  }
                 else
                  {
                  }
                 if(_GLF_DEAD(false))
                  continue;
                }
              }
             do
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 for(int _injected_loop_counter = (_GLF_IDENTITY(0 >> _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), clamp(int(4), int(4), int(4)))), (0 >> _GLF_IDENTITY(int(4), _GLF_IDENTITY(_GLF_IDENTITY(int(4), clamp(int(4), int(4), int(4))), (_GLF_IDENTITY(int(4), clamp(int(4), int(4), int(4)))) | (_GLF_IDENTITY(int(4), clamp(int(4), int(4), int(4))))))) | (0 >> _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), clamp(int(4), int(4), int(4))))))); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), bool(_GLF_IDENTITY(bvec3(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), true, false), bvec3(bvec3(bvec3(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), true, false)))))); _injected_loop_counter ++)
                  {
                   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                    {
                     return;
                    }
                  }
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                break;
               if(_GLF_DEAD(false))
                break;
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
          }
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           for(int _injected_loop_counter = _GLF_IDENTITY(0, max(0, _GLF_IDENTITY(0, (0) | (0)))); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, (1) | (1))), false || (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1))); _injected_loop_counter ++)
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(615.942), _GLF_FUZZED(85.41)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), vec2(mat3x4(mat2(1.0) * (injectionSwitch), 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0)))), injectionSwitch)).y))))
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                 if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), true && (! (_GLF_DEAD(false)))))))
                  break;
                }
               else
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  break;
                 if(_GLF_DEAD(false))
                  return;
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  continue;
                 return;
                }
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / sqrt(1.0)) > _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, vec2(mat2x3(injectionSwitch, 0.0, 0.0, 1.0, 1.0))), injectionSwitch)), _GLF_IDENTITY(injectionSwitch, vec2(mat2(injectionSwitch, 0.0, 1.0))))).y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / sqrt(1.0)) > _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, vec2(mat2x3(injectionSwitch, 0.0, 0.0, 1.0, 1.0))), injectionSwitch)), _GLF_IDENTITY(injectionSwitch, vec2(mat2(injectionSwitch, 0.0, 1.0))))).y)), true && (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / sqrt(1.0)) > _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, vec2(mat2x3(injectionSwitch, 0.0, 0.0, 1.0, 1.0))), injectionSwitch)), _GLF_IDENTITY(injectionSwitch, vec2(mat2(injectionSwitch, 0.0, 1.0))))).y)))))))))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    break;
                   continue;
                  }
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) || false)))
                  {
                   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                    {
                     return;
                    }
                  }
                 else
                  {
                  }
                }
               if(_GLF_DEAD(false))
                continue;
              }
             else
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, false || (true))))
                  {
                   return;
                   if(_GLF_DEAD(false))
                    break;
                  }
                 else
                  {
                  }
                }
               if(_GLF_DEAD(false))
                {
                 do
                  {
                   return;
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                }
              }
             for(int _injected_loop_counter = (0 ^ (1 ^ 0)); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > 0, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_injected_loop_counter > 0, false, false), bvec3(bvec3(bvec3(_injected_loop_counter > 0, false, false))))), bool(bvec3(bool(_GLF_IDENTITY(bvec3(_injected_loop_counter > 0, false, false), bvec3(bvec3(bvec3(_injected_loop_counter > 0, false, false))))), true, true))))); _injected_loop_counter --)
              {
               do
                {
                 return;
                }
               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
               if(_GLF_DEAD(false))
                return;
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              continue;
             if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                break;
               break;
              }
            }
          }
         else
          {
          }
         if(_GLF_DEAD(false))
          continue;
        }
       else
        {
        }
      }
    }
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, ! (! (false))))), (_GLF_IDENTITY(false, false || (false))) && true), (_GLF_IDENTITY(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))) && true)))))), (_GLF_IDENTITY(false, false || (false))) && true)) && true)))
    {
     for(int _injected_loop_counter = 1; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != (0 << _GLF_IDENTITY(int(3), int(_GLF_IDENTITY(3, (3) / 1)))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter != (0 << _GLF_IDENTITY(int(3), int(3))), bool(bvec3(_injected_loop_counter != (0 << _GLF_IDENTITY(int(3), int(3))), true, false))), (_injected_loop_counter != (0 << _GLF_IDENTITY(int(3), int(3)))) && true))))), true && (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != (0 << _GLF_IDENTITY(int(3), int(3))), ! _GLF_IDENTITY((! (_GLF_IDENTITY(_injected_loop_counter != (0 << _GLF_IDENTITY(int(3), int(3))), (_injected_loop_counter != (0 << _GLF_IDENTITY(_GLF_IDENTITY(int(3), int(3)), _GLF_IDENTITY(int(int(_GLF_IDENTITY(int(3), int(3)))), min(int(int(_GLF_IDENTITY(int(3), int(3)))), int(int(_GLF_IDENTITY(int(3), int(3))))))))) && true))), (_GLF_IDENTITY((! (_GLF_IDENTITY(_injected_loop_counter != (0 << _GLF_IDENTITY(int(3), int(3))), (_injected_loop_counter != (0 << _GLF_IDENTITY(_GLF_IDENTITY(int(3), int(3)), _GLF_IDENTITY(int(int(_GLF_IDENTITY(int(3), int(3)))), min(int(int(_GLF_IDENTITY(int(3), int(3)))), int(int(_GLF_IDENTITY(int(3), int(3))))))))) && true))), bool(bvec3((! (_GLF_IDENTITY(_injected_loop_counter != (0 << _GLF_IDENTITY(int(3), int(3))), (_injected_loop_counter != (0 << _GLF_IDENTITY(_GLF_IDENTITY(int(3), int(3)), _GLF_IDENTITY(int(int(_GLF_IDENTITY(int(3), int(3)))), min(int(int(_GLF_IDENTITY(int(3), int(3)))), int(int(_GLF_IDENTITY(int(3), int(3))))))))) && true))), false, false)))) || false))))); _injected_loop_counter --)
      {
       do
        {
         return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) && true)))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)), bool(bvec2(bool(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec2((injectionSwitch.x > injectionSwitch.y), false)))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)), false)))), (bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)), bool(bvec2(bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)), false))))) && true))))
          return;
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        return;
       return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           return;
          }
        }
      }
     else
      {
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true))))
    {
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = _GLF_IDENTITY(0, (0) | (0)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         return;
        }
      }
     return;
    }
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > _GLF_IDENTITY(injectionSwitch, vec2(mat2x3(injectionSwitch, 0.0, 1.0, 1.0, 1.0))).y)), (_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y)))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)) && true)))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       return;
      }
    }
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, false, true), bvec3(bvec3(bvec3(false, false, true))))))))
  return;
 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bvec2(false, false)))))
  {
  }
 else
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_IDENTITY(_GLF_FUZZED(393.268), clamp(_GLF_FUZZED(393.268), _GLF_FUZZED(393.268), _GLF_FUZZED(393.268))), _GLF_FUZZED(2.0)), vec2(_GLF_IDENTITY((injectionSwitch)[0], ((injectionSwitch)[0]) / 1.0), (injectionSwitch)[1]), bvec2(true, true))).y))))
      {
       for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(6), int(6))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
          {
           for(int _injected_loop_counter = (int(9.6) & 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(6, (6) >> 0)), int(6))) >> _GLF_IDENTITY(int(6), int(6)))); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(false))
              return;
            }
           if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, false || (false)), true)))))
            continue;
          }
        }
      }
     else
      {
      }
    }
   else
    {
    }
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END
BUFFER checker DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected_checker DATA_TYPE uint32 SIZE 8388096 FILL 1

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 
  BIND BUFFER checker AS storage DESCRIPTOR_SET 0 BINDING 2 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT checker EQ_BUFFER expected_checker
