#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer WriteVal {
 uint write_val;
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uvec3 GLF_merged3_0_1_8_1_1_13_2_1_11read_valsubgroup_basesubgroup_id;
 if(_GLF_DEAD(false))
  barrier();
 uvec4 GLF_merged3_0_2_51_2_1_13_3_1_11GLF_merged2_0_1_13_1_1_13subgroup_basesubgroup_sizenum_workgroupsubgroup_id;
 if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, bool(bool(false)))))))
  barrier();
 uvec2 GLF_merged2_0_1_8_1_1_11read_valsubgroup_id;
 uvec3 GLF_merged2_0_2_51_2_1_11GLF_merged2_0_1_13_1_1_13subgroup_basesubgroup_sizevirtual_gid;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _GLF_IDENTITY(_injected_loop_counter ++, (_GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) | 0)) | 0))
    {
     return;
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 uvec3 GLF_merged3_0_1_13_1_1_8_2_1_13num_workgroupread_valsubgroup_size;
 uvec4 GLF_merged3_0_2_51_2_1_13_3_1_13GLF_merged2_0_1_13_1_1_13subgroup_basesubgroup_sizenum_workgroupsubgroup_base;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 uvec2 GLF_merged2_0_1_13_1_1_13subgroup_basesubgroup_size;
 GLF_merged3_0_2_51_2_1_13_3_1_11GLF_merged2_0_1_13_1_1_13subgroup_basesubgroup_sizenum_workgroupsubgroup_id.xy = GLF_merged2_0_1_13_1_1_13subgroup_basesubgroup_size;
 GLF_merged2_0_2_51_2_1_11GLF_merged2_0_1_13_1_1_13subgroup_basesubgroup_sizevirtual_gid.xy = GLF_merged3_0_2_51_2_1_13_3_1_11GLF_merged2_0_1_13_1_1_13subgroup_basesubgroup_sizenum_workgroupsubgroup_id.xy;
 for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (_GLF_IDENTITY(int(6), 1 * (int(6)))) | (int(6))))) >> _GLF_IDENTITY(int(6), int(6))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
  {
   _GLF_IDENTITY(GLF_merged3_0_2_51_2_1_13_3_1_13GLF_merged2_0_1_13_1_1_13subgroup_basesubgroup_sizenum_workgroupsubgroup_base.xy = _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged2_0_2_51_2_1_11GLF_merged2_0_1_13_1_1_13subgroup_basesubgroup_sizevirtual_gid, (GLF_merged2_0_2_51_2_1_11GLF_merged2_0_1_13_1_1_13subgroup_basesubgroup_sizevirtual_gid) | (GLF_merged2_0_2_51_2_1_11GLF_merged2_0_1_13_1_1_13subgroup_basesubgroup_sizevirtual_gid)).xy, (_GLF_IDENTITY(GLF_merged2_0_2_51_2_1_11GLF_merged2_0_1_13_1_1_13subgroup_basesubgroup_sizevirtual_gid.xy, (GLF_merged2_0_2_51_2_1_11GLF_merged2_0_1_13_1_1_13subgroup_basesubgroup_sizevirtual_gid.xy) << uvec2(0u, 0u))) << uvec2(0u, 0u)), _GLF_IDENTITY(uvec2(GLF_merged2_0_2_51_2_1_11GLF_merged2_0_1_13_1_1_13subgroup_basesubgroup_sizevirtual_gid.xy[0], _GLF_IDENTITY(GLF_merged2_0_2_51_2_1_11GLF_merged2_0_1_13_1_1_13subgroup_basesubgroup_sizevirtual_gid.xy[_GLF_IDENTITY(1, int(_GLF_IDENTITY(ivec4(1, 0, 0, 0), clamp(ivec4(1, 0, 0, 0), ivec4(1, 0, 0, 0), ivec4(1, 0, 0, 0)))))], (false ? _GLF_FUZZED(149028u) : GLF_merged2_0_2_51_2_1_11GLF_merged2_0_1_13_1_1_13subgroup_basesubgroup_sizevirtual_gid.xy[1]))), _GLF_IDENTITY(clamp(uvec2(GLF_merged2_0_2_51_2_1_11GLF_merged2_0_1_13_1_1_13subgroup_basesubgroup_sizevirtual_gid.xy[0], _GLF_IDENTITY(GLF_merged2_0_2_51_2_1_11GLF_merged2_0_1_13_1_1_13subgroup_basesubgroup_sizevirtual_gid.xy[1], (false ? _GLF_FUZZED(149028u) : GLF_merged2_0_2_51_2_1_11GLF_merged2_0_1_13_1_1_13subgroup_basesubgroup_sizevirtual_gid.xy[1]))), _GLF_IDENTITY(uvec2(GLF_merged2_0_2_51_2_1_11GLF_merged2_0_1_13_1_1_13subgroup_basesubgroup_sizevirtual_gid.xy[0], _GLF_IDENTITY(GLF_merged2_0_2_51_2_1_11GLF_merged2_0_1_13_1_1_13subgroup_basesubgroup_sizevirtual_gid.xy[1], (false ? _GLF_FUZZED(149028u) : GLF_merged2_0_2_51_2_1_11GLF_merged2_0_1_13_1_1_13subgroup_basesubgroup_sizevirtual_gid.xy[1]))), (uvec2(_GLF_IDENTITY(GLF_merged2_0_2_51_2_1_11GLF_merged2_0_1_13_1_1_13subgroup_basesubgroup_sizevirtual_gid.xy[0], min(GLF_merged2_0_2_51_2_1_11GLF_merged2_0_1_13_1_1_13subgroup_basesubgroup_sizevirtual_gid.xy[0], _GLF_IDENTITY(GLF_merged2_0_2_51_2_1_11GLF_merged2_0_1_13_1_1_13subgroup_basesubgroup_sizevirtual_gid.xy[0], uint(_GLF_IDENTITY(uvec2(GLF_merged2_0_2_51_2_1_11GLF_merged2_0_1_13_1_1_13subgroup_basesubgroup_sizevirtual_gid.xy[0], 0u), (true ? uvec2(GLF_merged2_0_2_51_2_1_11GLF_merged2_0_1_13_1_1_13subgroup_basesubgroup_sizevirtual_gid.xy[0], 0u) : _GLF_FUZZED(uvec2(47198u, 125767u)))))))), _GLF_IDENTITY(GLF_merged2_0_2_51_2_1_11GLF_merged2_0_1_13_1_1_13subgroup_basesubgroup_sizevirtual_gid.xy[1], (false ? _GLF_IDENTITY(_GLF_FUZZED(149028u), (_GLF_FUZZED(149028u)) >> 0u) : GLF_merged2_0_2_51_2_1_11GLF_merged2_0_1_13_1_1_13subgroup_basesubgroup_sizevirtual_gid.xy[1])))) + uvec2(0u, 0u)), uvec2(GLF_merged2_0_2_51_2_1_11GLF_merged2_0_1_13_1_1_13subgroup_basesubgroup_sizevirtual_gid.xy[0], _GLF_IDENTITY(GLF_merged2_0_2_51_2_1_11GLF_merged2_0_1_13_1_1_13subgroup_basesubgroup_sizevirtual_gid.xy[1], (false ? _GLF_IDENTITY(_GLF_FUZZED(149028u), clamp(_GLF_FUZZED(149028u), _GLF_FUZZED(149028u), _GLF_FUZZED(149028u))) : GLF_merged2_0_2_51_2_1_11GLF_merged2_0_1_13_1_1_13subgroup_basesubgroup_sizevirtual_gid.xy[1])))), (true ? clamp(uvec2(GLF_merged2_0_2_51_2_1_11GLF_merged2_0_1_13_1_1_13subgroup_basesubgroup_sizevirtual_gid.xy[0], _GLF_IDENTITY(_GLF_IDENTITY(GLF_merged2_0_2_51_2_1_11GLF_merged2_0_1_13_1_1_13subgroup_basesubgroup_sizevirtual_gid.xy, min(_GLF_IDENTITY(GLF_merged2_0_2_51_2_1_11GLF_merged2_0_1_13_1_1_13subgroup_basesubgroup_sizevirtual_gid.xy, (_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, vec2(mat2(injectionSwitch, sqrt(1.0), exp(0.0)))).y)) ? _GLF_IDENTITY(GLF_merged2_0_2_51_2_1_11GLF_merged2_0_1_13_1_1_13subgroup_basesubgroup_sizevirtual_gid.xy, uvec2(uvec4(GLF_merged2_0_2_51_2_1_11GLF_merged2_0_1_13_1_1_13subgroup_basesubgroup_sizevirtual_gid.xy, 0u, 0u))) : _GLF_FUZZED(GLF_merged2_0_2_51_2_1_11GLF_merged2_0_1_13_1_1_13subgroup_basesubgroup_sizevirtual_gid.xy))), GLF_merged2_0_2_51_2_1_11GLF_merged2_0_1_13_1_1_13subgroup_basesubgroup_sizevirtual_gid.xy))[1], (false ? _GLF_FUZZED(149028u) : GLF_merged2_0_2_51_2_1_11GLF_merged2_0_1_13_1_1_13subgroup_basesubgroup_sizevirtual_gid.xy[_GLF_IDENTITY(1, (1) | (1))]))), _GLF_IDENTITY(uvec2(GLF_merged2_0_2_51_2_1_11GLF_merged2_0_1_13_1_1_13subgroup_basesubgroup_sizevirtual_gid.xy[0], _GLF_IDENTITY(GLF_merged2_0_2_51_2_1_11GLF_merged2_0_1_13_1_1_13subgroup_basesubgroup_sizevirtual_gid.xy[1], (false ? _GLF_FUZZED(_GLF_IDENTITY(149028u, (149028u) - 0u)) : _GLF_IDENTITY(GLF_merged2_0_2_51_2_1_11GLF_merged2_0_1_13_1_1_13subgroup_basesubgroup_sizevirtual_gid.xy, uvec2(0u, 0u) | (GLF_merged2_0_2_51_2_1_11GLF_merged2_0_1_13_1_1_13subgroup_basesubgroup_sizevirtual_gid.xy))[1]))), (uvec2(_GLF_IDENTITY(GLF_merged2_0_2_51_2_1_11GLF_merged2_0_1_13_1_1_13subgroup_basesubgroup_sizevirtual_gid.xy[0], (GLF_merged2_0_2_51_2_1_11GLF_merged2_0_1_13_1_1_13subgroup_basesubgroup_sizevirtual_gid.xy[0]) / 1u), _GLF_IDENTITY(_GLF_IDENTITY(GLF_merged2_0_2_51_2_1_11GLF_merged2_0_1_13_1_1_13subgroup_basesubgroup_sizevirtual_gid.xy, max(GLF_merged2_0_2_51_2_1_11GLF_merged2_0_1_13_1_1_13subgroup_basesubgroup_sizevirtual_gid.xy, _GLF_IDENTITY(GLF_merged2_0_2_51_2_1_11GLF_merged2_0_1_13_1_1_13subgroup_basesubgroup_sizevirtual_gid.xy, (GLF_merged2_0_2_51_2_1_11GLF_merged2_0_1_13_1_1_13subgroup_basesubgroup_sizevirtual_gid.xy) << uvec2(_GLF_IDENTITY(0u, (0u) << 0u), 0u))))[1], (false ? _GLF_FUZZED(149028u) : GLF_merged2_0_2_51_2_1_11GLF_merged2_0_1_13_1_1_13subgroup_basesubgroup_sizevirtual_gid.xy[1])))) + uvec2(0u, 0u)), uvec2(GLF_merged2_0_2_51_2_1_11GLF_merged2_0_1_13_1_1_13subgroup_basesubgroup_sizevirtual_gid.xy[0], _GLF_IDENTITY(GLF_merged2_0_2_51_2_1_11GLF_merged2_0_1_13_1_1_13subgroup_basesubgroup_sizevirtual_gid.xy[1], (false ? _GLF_FUZZED(149028u) : GLF_merged2_0_2_51_2_1_11GLF_merged2_0_1_13_1_1_13subgroup_basesubgroup_sizevirtual_gid.xy[1])))) : _GLF_FUZZED((++ GLF_merged2_0_2_51_2_1_11GLF_merged2_0_1_13_1_1_13subgroup_basesubgroup_sizevirtual_gid.xy)))))), (GLF_merged3_0_2_51_2_1_13_3_1_13GLF_merged2_0_1_13_1_1_13subgroup_basesubgroup_sizenum_workgroupsubgroup_base.xy = _GLF_IDENTITY(_GLF_IDENTITY(GLF_merged2_0_2_51_2_1_11GLF_merged2_0_1_13_1_1_13subgroup_basesubgroup_sizevirtual_gid.xy, (_GLF_IDENTITY(GLF_merged2_0_2_51_2_1_11GLF_merged2_0_1_13_1_1_13subgroup_basesubgroup_sizevirtual_gid.xy, (GLF_merged2_0_2_51_2_1_11GLF_merged2_0_1_13_1_1_13subgroup_basesubgroup_sizevirtual_gid.xy) << uvec2(0u, 0u))) << uvec2(0u, 0u)), _GLF_IDENTITY(uvec2(GLF_merged2_0_2_51_2_1_11GLF_merged2_0_1_13_1_1_13subgroup_basesubgroup_sizevirtual_gid.xy[0], _GLF_IDENTITY(GLF_merged2_0_2_51_2_1_11GLF_merged2_0_1_13_1_1_13subgroup_basesubgroup_sizevirtual_gid.xy[1], (false ? _GLF_FUZZED(149028u) : _GLF_IDENTITY(GLF_merged2_0_2_51_2_1_11GLF_merged2_0_1_13_1_1_13subgroup_basesubgroup_sizevirtual_gid.xy[1], (_GLF_IDENTITY(GLF_merged2_0_2_51_2_1_11GLF_merged2_0_1_13_1_1_13subgroup_basesubgroup_sizevirtual_gid.xy[1], 0u | (GLF_merged2_0_2_51_2_1_11GLF_merged2_0_1_13_1_1_13subgroup_basesubgroup_sizevirtual_gid.xy[1]))) << 0u)))), _GLF_IDENTITY(clamp(uvec2(GLF_merged2_0_2_51_2_1_11GLF_merged2_0_1_13_1_1_13subgroup_basesubgroup_sizevirtual_gid.xy[0], _GLF_IDENTITY(GLF_merged2_0_2_51_2_1_11GLF_merged2_0_1_13_1_1_13subgroup_basesubgroup_sizevirtual_gid.xy[1], (false ? _GLF_FUZZED(149028u) : GLF_merged2_0_2_51_2_1_11GLF_merged2_0_1_13_1_1_13subgroup_basesubgroup_sizevirtual_gid.xy[1]))), _GLF_IDENTITY(uvec2(GLF_merged2_0_2_51_2_1_11GLF_merged2_0_1_13_1_1_13subgroup_basesubgroup_sizevirtual_gid.xy[0], _GLF_IDENTITY(GLF_merged2_0_2_51_2_1_11GLF_merged2_0_1_13_1_1_13subgroup_basesubgroup_sizevirtual_gid.xy[1], (false ? _GLF_FUZZED(149028u) : _GLF_IDENTITY(GLF_merged2_0_2_51_2_1_11GLF_merged2_0_1_13_1_1_13subgroup_basesubgroup_sizevirtual_gid.xy[1], (GLF_merged2_0_2_51_2_1_11GLF_merged2_0_1_13_1_1_13subgroup_basesubgroup_sizevirtual_gid.xy[1]) | (GLF_merged2_0_2_51_2_1_11GLF_merged2_0_1_13_1_1_13subgroup_basesubgroup_sizevirtual_gid.xy[1]))))), (uvec2(GLF_merged2_0_2_51_2_1_11GLF_merged2_0_1_13_1_1_13subgroup_basesubgroup_sizevirtual_gid.xy[0], _GLF_IDENTITY(GLF_merged2_0_2_51_2_1_11GLF_merged2_0_1_13_1_1_13subgroup_basesubgroup_sizevirtual_gid.xy[1], (false ? _GLF_FUZZED(149028u) : GLF_merged2_0_2_51_2_1_11GLF_merged2_0_1_13_1_1_13subgroup_basesubgroup_sizevirtual_gid.xy[1])))) + uvec2(0u, _GLF_IDENTITY(0u, clamp(0u, 0u, 0u)))), uvec2(GLF_merged2_0_2_51_2_1_11GLF_merged2_0_1_13_1_1_13subgroup_basesubgroup_sizevirtual_gid.xy[0], _GLF_IDENTITY(GLF_merged2_0_2_51_2_1_11GLF_merged2_0_1_13_1_1_13subgroup_basesubgroup_sizevirtual_gid.xy[1], (false ? _GLF_FUZZED(149028u) : GLF_merged2_0_2_51_2_1_11GLF_merged2_0_1_13_1_1_13subgroup_basesubgroup_sizevirtual_gid.xy[1])))), (true ? clamp(uvec2(GLF_merged2_0_2_51_2_1_11GLF_merged2_0_1_13_1_1_13subgroup_basesubgroup_sizevirtual_gid.xy[0], _GLF_IDENTITY(_GLF_IDENTITY(GLF_merged2_0_2_51_2_1_11GLF_merged2_0_1_13_1_1_13subgroup_basesubgroup_sizevirtual_gid.xy, min(_GLF_IDENTITY(GLF_merged2_0_2_51_2_1_11GLF_merged2_0_1_13_1_1_13subgroup_basesubgroup_sizevirtual_gid.xy, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(GLF_merged2_0_2_51_2_1_11GLF_merged2_0_1_13_1_1_13subgroup_basesubgroup_sizevirtual_gid.xy, uvec2(uvec4(GLF_merged2_0_2_51_2_1_11GLF_merged2_0_1_13_1_1_13subgroup_basesubgroup_sizevirtual_gid.xy, 0u, 0u))) : _GLF_FUZZED(GLF_merged2_0_2_51_2_1_11GLF_merged2_0_1_13_1_1_13subgroup_basesubgroup_sizevirtual_gid.xy))), GLF_merged2_0_2_51_2_1_11GLF_merged2_0_1_13_1_1_13subgroup_basesubgroup_sizevirtual_gid.xy))[1], (false ? _GLF_FUZZED(149028u) : GLF_merged2_0_2_51_2_1_11GLF_merged2_0_1_13_1_1_13subgroup_basesubgroup_sizevirtual_gid.xy[1]))), _GLF_IDENTITY(uvec2(_GLF_IDENTITY(GLF_merged2_0_2_51_2_1_11GLF_merged2_0_1_13_1_1_13subgroup_basesubgroup_sizevirtual_gid.xy[0], uint(_GLF_IDENTITY(uint(GLF_merged2_0_2_51_2_1_11GLF_merged2_0_1_13_1_1_13subgroup_basesubgroup_sizevirtual_gid.xy[0]), (uint(GLF_merged2_0_2_51_2_1_11GLF_merged2_0_1_13_1_1_13subgroup_basesubgroup_sizevirtual_gid.xy[0])) * uint(_GLF_ONE(1.0, injectionSwitch.y))))), _GLF_IDENTITY(GLF_merged2_0_2_51_2_1_11GLF_merged2_0_1_13_1_1_13subgroup_basesubgroup_sizevirtual_gid.xy[_GLF_IDENTITY(1, 0 | (1))], (false ? _GLF_FUZZED(_GLF_IDENTITY(_GLF_IDENTITY(149028u, (149028u) - 0u), min(_GLF_IDENTITY(_GLF_IDENTITY(149028u, (149028u) - 0u), ~ (~ (_GLF_IDENTITY(149028u, (149028u) - 0u)))), _GLF_IDENTITY(149028u, (149028u) - 0u)))) : GLF_merged2_0_2_51_2_1_11GLF_merged2_0_1_13_1_1_13subgroup_basesubgroup_sizevirtual_gid.xy[1]))), (uvec2(GLF_merged2_0_2_51_2_1_11GLF_merged2_0_1_13_1_1_13subgroup_basesubgroup_sizevirtual_gid.xy[0], _GLF_IDENTITY(_GLF_IDENTITY(GLF_merged2_0_2_51_2_1_11GLF_merged2_0_1_13_1_1_13subgroup_basesubgroup_sizevirtual_gid.xy, max(GLF_merged2_0_2_51_2_1_11GLF_merged2_0_1_13_1_1_13subgroup_basesubgroup_sizevirtual_gid.xy, _GLF_IDENTITY(GLF_merged2_0_2_51_2_1_11GLF_merged2_0_1_13_1_1_13subgroup_basesubgroup_sizevirtual_gid.xy, (GLF_merged2_0_2_51_2_1_11GLF_merged2_0_1_13_1_1_13subgroup_basesubgroup_sizevirtual_gid.xy) << uvec2(0u, 0u))))[1], (_GLF_IDENTITY(false ? _GLF_FUZZED(149028u) : GLF_merged2_0_2_51_2_1_11GLF_merged2_0_1_13_1_1_13subgroup_basesubgroup_sizevirtual_gid.xy[1], 1u * (false ? _GLF_FUZZED(149028u) : GLF_merged2_0_2_51_2_1_11GLF_merged2_0_1_13_1_1_13subgroup_basesubgroup_sizevirtual_gid.xy[1])))))) + uvec2(0u, 0u)), uvec2(GLF_merged2_0_2_51_2_1_11GLF_merged2_0_1_13_1_1_13subgroup_basesubgroup_sizevirtual_gid.xy[0], _GLF_IDENTITY(GLF_merged2_0_2_51_2_1_11GLF_merged2_0_1_13_1_1_13subgroup_basesubgroup_sizevirtual_gid.xy[1], (false ? _GLF_FUZZED(149028u) : GLF_merged2_0_2_51_2_1_11GLF_merged2_0_1_13_1_1_13subgroup_basesubgroup_sizevirtual_gid.xy[1])))) : _GLF_FUZZED((++ GLF_merged2_0_2_51_2_1_11GLF_merged2_0_1_13_1_1_13subgroup_basesubgroup_sizevirtual_gid.xy))))))) >> uvec2(0u, 0u));
  }
 uint subgroup_id = gl_SubgroupID;
 GLF_merged3_0_1_8_1_1_13_2_1_11read_valsubgroup_basesubgroup_id.z = subgroup_id;
 GLF_merged3_0_2_51_2_1_13_3_1_11GLF_merged2_0_1_13_1_1_13subgroup_basesubgroup_sizenum_workgroupsubgroup_id.w = GLF_merged3_0_1_8_1_1_13_2_1_11read_valsubgroup_basesubgroup_id.z;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 GLF_merged2_0_1_8_1_1_11read_valsubgroup_id.y = GLF_merged3_0_2_51_2_1_13_3_1_11GLF_merged2_0_1_13_1_1_13subgroup_basesubgroup_sizenum_workgroupsubgroup_id.w;
 if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0) < injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
   else
    {
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
    return;
   barrier();
  }
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec4(_GLF_DEAD(false), false, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), false || (bool(bvec4(_GLF_DEAD(false), false, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))
  barrier();
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) / int(_GLF_ONE(_GLF_IDENTITY(1.0, float(_GLF_IDENTITY(mat4x3(1.0, 1.0, 0.0, 0.0, 0.0, round(length(normalize(1.0))), 0.0, sqrt(1.0), 1.0, 0.0, 0.0, 0.0), mat3(1.0) * (mat4x3(1.0, 1.0, 0.0, 0.0, 0.0, round(length(normalize(1.0))), 0.0, sqrt(1.0), 1.0, 0.0, 0.0, 0.0))))), injectionSwitch.y))) < 1); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)))).y))))
    barrier();
  }
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec3(false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, false || (false)))))))
    barrier();
  }
 GLF_merged3_0_1_13_1_1_8_2_1_13num_workgroupread_valsubgroup_size.z = subgroup_size;
 _GLF_IDENTITY(GLF_merged3_0_2_51_2_1_13_3_1_13GLF_merged2_0_1_13_1_1_13subgroup_basesubgroup_sizenum_workgroupsubgroup_base.xy.y = GLF_merged3_0_1_13_1_1_8_2_1_13num_workgroupread_valsubgroup_size.z, (_GLF_IDENTITY(GLF_merged3_0_2_51_2_1_13_3_1_13GLF_merged2_0_1_13_1_1_13subgroup_basesubgroup_sizenum_workgroupsubgroup_base.xy.y = GLF_merged3_0_1_13_1_1_8_2_1_13num_workgroupread_valsubgroup_size.z, 0u + (GLF_merged3_0_2_51_2_1_13_3_1_13GLF_merged2_0_1_13_1_1_13subgroup_basesubgroup_sizenum_workgroupsubgroup_base.xy.y = GLF_merged3_0_1_13_1_1_8_2_1_13num_workgroupread_valsubgroup_size.z))) ^ 0u);
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = (_GLF_IDENTITY(0 | 0, (_GLF_IDENTITY(false, ! (! (false))) ? _GLF_FUZZED(10041) : _GLF_IDENTITY(0 | 0, max(0 | 0, 0 | 0))))); _GLF_WRAPPED_LOOP(_injected_loop_counter < (int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(_GLF_IDENTITY(3, (3) << 0)))))); _injected_loop_counter ++)
      {
       barrier();
      }
    }
   barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      return;
     do
      {
       return;
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   do
    {
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y))))))
  barrier();
 if(_GLF_DEAD(false))
  return;
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)), _GLF_TRUE(_GLF_IDENTITY(true, bool(bvec3(true, true, true))), (injectionSwitch.x < injectionSwitch.y)) && (_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     return;
    }
   else
    {
    }
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(sqrt(-7.7)) : _GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(4.1) : injectionSwitch.x)), injectionSwitch.x, injectionSwitch.x)))) > injectionSwitch.y))))
        barrier();
      }
     barrier();
    }
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 GLF_merged3_0_2_51_2_1_13_3_1_11GLF_merged2_0_1_13_1_1_13subgroup_basesubgroup_sizenum_workgroupsubgroup_id.z = num_workgroup;
 _GLF_IDENTITY(GLF_merged3_0_1_13_1_1_8_2_1_13num_workgroupread_valsubgroup_size.x = GLF_merged3_0_2_51_2_1_13_3_1_11GLF_merged2_0_1_13_1_1_13subgroup_basesubgroup_sizenum_workgroupsubgroup_id.z, (_GLF_IDENTITY(false, bool(bvec4(false, true, true, true))) ? _GLF_FUZZED(subgroup_local_id) : GLF_merged3_0_1_13_1_1_8_2_1_13num_workgroupread_valsubgroup_size.x = _GLF_IDENTITY(GLF_merged3_0_2_51_2_1_13_3_1_11GLF_merged2_0_1_13_1_1_13subgroup_basesubgroup_sizenum_workgroupsubgroup_id.z, (GLF_merged3_0_2_51_2_1_13_3_1_11GLF_merged2_0_1_13_1_1_13subgroup_basesubgroup_sizenum_workgroupsubgroup_id.z) * 1u)));
 for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4)))); _injected_loop_counter ++)
  {
   _GLF_IDENTITY(GLF_merged3_0_2_51_2_1_13_3_1_13GLF_merged2_0_1_13_1_1_13subgroup_basesubgroup_sizenum_workgroupsubgroup_base.z = GLF_merged3_0_1_13_1_1_8_2_1_13num_workgroupread_valsubgroup_size.x, (GLF_merged3_0_2_51_2_1_13_3_1_13GLF_merged2_0_1_13_1_1_13subgroup_basesubgroup_sizenum_workgroupsubgroup_base.z = GLF_merged3_0_1_13_1_1_8_2_1_13num_workgroupread_valsubgroup_size.x) + 0u);
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, false || (false)))))))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
    barrier();
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bool((injectionSwitch.x > injectionSwitch.y)))))))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   barrier();
  }
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   do
    {
     barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      return;
     if(_GLF_DEAD(false))
      break;
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y))))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) || false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 & (+ -60096))); _injected_loop_counter --)
      {
       return;
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, false, true)))))
        barrier();
      }
    }
   if(_GLF_DEAD(false))
    return;
   for(int _injected_loop_counter = ((_GLF_IDENTITY(1, min(1, 1)) << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), min(int(3), _GLF_IDENTITY(int(3), (int(3)) >> 0))))); _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(true && (false), ! (! (true && (false)))))))
      barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     return;
    }
  }
 do
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec4(false, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])))).x < _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) + abs(vec2(0.0, 0.0))))).y, min(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) + abs(vec2(0.0, 0.0))))).y, mix(float(_GLF_FUZZED(-10.41)), float(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) + abs(vec2(0.0, 0.0))))).y), bool(true))), _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) + abs(vec2(0.0, 0.0))))).y)))), _GLF_IDENTITY(true, ! (! (true))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) || false)))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, false || (true))) || false)))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec3((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(-9.9)), vec2(_GLF_FUZZED(45.15), (injectionSwitch)[1]), bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))))).y))), false, false))))))
        barrier();
      }
     else
      {
      }
     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), bool(bvec4(_GLF_WRAPPED_IF_FALSE(false), false, false, false)))))))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), (_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), true && ((false)))))) && true)))
          barrier();
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         else
          {
           barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec2(_GLF_DEAD(false), true)), bool(bvec4(bool(bvec2(_GLF_DEAD(false), true)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)))))
          barrier();
        }
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        return;
       if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec3(_GLF_DEAD(false), _GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, bool(bvec4(_GLF_IDENTITY(true, true && (true)), false, true, false)))))), true)), bool(bvec4(bool(bvec3(_GLF_DEAD(false), true, true)), true, true, true)))))
        {
         if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              continue;
             barrier();
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              {
               for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(6), int(6))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 barrier();
                }
              }
             continue;
            }
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) * _GLF_IDENTITY(1, (_GLF_IDENTITY(1, int(ivec2(1, 1)))) / 1)))
            {
             barrier();
             if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
              barrier();
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), _GLF_IDENTITY(! (! (_GLF_IDENTITY(false, _GLF_IDENTITY((false) || false, ! (! ((false) || false)))))), ! (! (! (! (_GLF_IDENTITY(false, _GLF_IDENTITY((false) || false, ! (! ((false) || false))))))))))))
            {
             do
              {
               barrier();
               if(_GLF_DEAD(false))
                break;
               if(_GLF_DEAD(false))
                continue;
              }
             while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))));
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                break;
               barrier();
              }
             if(_GLF_DEAD(false))
              continue;
             if(_GLF_DEAD(false))
              barrier();
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))))))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                return;
               break;
              }
             barrier();
             if(_GLF_DEAD(false))
              barrier();
            }
           do
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec3(injectionSwitch.x > injectionSwitch.y, true, true)))))));
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             return;
            }
           else
            {
            }
          }
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < (_GLF_IDENTITY((_GLF_IDENTITY(1, clamp(1, _GLF_IDENTITY(1, clamp(1, 1, 1)), 1)) ^ 0), max((_GLF_IDENTITY(1, clamp(1, _GLF_IDENTITY(1, clamp(1, 1, 1)), 1)) ^ 0), (_GLF_IDENTITY(1, clamp(1, _GLF_IDENTITY(1, clamp(1, 1, 1)), 1)) ^ 0))) | 1), ! (! (_GLF_IDENTITY(_injected_loop_counter < ((_GLF_IDENTITY(1, clamp(1, _GLF_IDENTITY(1, clamp(1, 1, 1)), 1)) ^ 0) | 1), (_injected_loop_counter < (_GLF_IDENTITY((_GLF_IDENTITY(1, clamp(1, _GLF_IDENTITY(1, clamp(1, 1, _GLF_IDENTITY(1, (_GLF_IDENTITY(1, max(1, 1))) ^ int(_GLF_ZERO(0.0, injectionSwitch.x))))), 1)) ^ 0), ((_GLF_IDENTITY(1, clamp(1, _GLF_IDENTITY(1, clamp(1, 1, _GLF_IDENTITY(1, (_GLF_IDENTITY(1, max(1, 1))) ^ int(_GLF_ZERO(0.0, injectionSwitch.x))))), 1)) ^ 0)) * 1) | 1)) || false))))); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            barrier();
           return;
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           if(_GLF_DEAD(false))
            break;
           if(_GLF_DEAD(false))
            return;
           do
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
              break;
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               barrier();
              }
            }
           while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bvec2(false, true)))));
          }
        }
       do
        {
         do
          {
           if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, sin(sin(vec2(0.0, _GLF_IDENTITY(0.0, _GLF_IDENTITY(float(mat4(0.0, sin(0.0), 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, sqrt(1.0), _GLF_ONE(1.0, injectionSwitch.y), 1.0, 0.0, log(1.0), 1.0, 0.0)), mix(float(float(mat4(0.0, sin(0.0), 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, sqrt(1.0), _GLF_ONE(1.0, injectionSwitch.y), 1.0, 0.0, log(1.0), 1.0, 0.0))), float(_GLF_FUZZED(-9.0)), bool(false))))))) + (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)))))).y, mix(float(_GLF_FUZZED(float(_GLF_IDENTITY(false, ! (! (false)))))), float(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, sin(sin(vec2(0.0, 0.0))) + (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)))))).y, clamp(_GLF_IDENTITY(injectionSwitch, sin(sin(vec2(0.0, 0.0))) + (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)))))).y, _GLF_IDENTITY(injectionSwitch, sin(sin(vec2(0.0, 0.0))) + (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)))))).y, _GLF_IDENTITY(injectionSwitch, sin(sin(vec2(0.0, 0.0))) + _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0))))), max(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0))))), min((_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0))))), (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0))))))), (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)))))))).y))), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), ! (! ((injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, sin(sin(vec2(0.0, 0.0))) + (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)))))).y, mix(float(_GLF_FUZZED(float(false))), float(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, sin(sin(vec2(0.0, 0.0))) + (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(vec3(injectionSwitch, 1.0)))) * mat2(1.0)))))).y, clamp(_GLF_IDENTITY(injectionSwitch, sin(sin(vec2(0.0, 0.0))) + (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)))))).y, _GLF_IDENTITY(injectionSwitch, sin(sin(vec2(0.0, 0.0))) + (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)))))).y, _GLF_IDENTITY(injectionSwitch, sin(sin(vec2(0.0, 0.0))) + (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)))))).y))), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))))), false || (_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-8.9, 841.909)) : injectionSwitch)).y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-8.9, 841.909)) : injectionSwitch)).y)), true && (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-8.9, 841.909)) : injectionSwitch)).y)))))))))) || false))
            barrier();
           if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, false, true)), bool(bool(bool(bvec3(false, false, true))))))))
            barrier();
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              break;
             if(_GLF_DEAD(false))
              continue;
             if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, false || (false))))))
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
             barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(bvec4((injectionSwitch.x > injectionSwitch.y), false, true, true)), true && (bool(bvec4((injectionSwitch.x > injectionSwitch.y), false, true, true))))))))
              barrier();
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))))
            {
             if(_GLF_DEAD(false))
              continue;
             barrier();
            }
           if(_GLF_DEAD(false))
            return;
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             barrier();
            }
           else
            {
            }
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
              }
             else
              {
               barrier();
               if(_GLF_DEAD(false))
                barrier();
              }
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), (bool(false)) && true))), (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(662.831)), float(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x))), bool(true))) > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch), (false ? _GLF_FUZZED(vec2(3824.4049, _GLF_IDENTITY(9.8, _GLF_IDENTITY(float(mat2x4(9.8, exp(0.0), _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(0.0, 1.0, 1.0)), dot(vec3(1.0, 0.0, 0.0), vec3(0.0, 1.0, 1.0))), 0.0, 1.0, 1.0, 1.0, 0.0)), max(float(mat2x4(9.8, exp(0.0), _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(0.0, 1.0, 1.0)), dot(vec3(1.0, 0.0, 0.0), vec3(0.0, 1.0, 1.0))), 0.0, 1.0, 1.0, 1.0, 0.0)), float(mat2x4(9.8, exp(0.0), _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(0.0, 1.0, 1.0)), dot(vec3(1.0, 0.0, 0.0), vec3(0.0, 1.0, 1.0))), 0.0, 1.0, 1.0, 1.0, 0.0))))))) : (injectionSwitch))) / vec2(1.0, _GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(9.2))), 1.0)))).y))));
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (false))))))))
        return;
       if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_DEAD(false), false, _GLF_IDENTITY(false, ! _GLF_IDENTITY((! (false)), true && ((! (false)))))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_DEAD(false), false, _GLF_IDENTITY(false, ! _GLF_IDENTITY((! (false)), true && ((! (false))))))))), bool(bvec2(! (_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_DEAD(false), false, _GLF_IDENTITY(false, ! _GLF_IDENTITY((! (false)), true && ((! (false))))))))), false))))))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (false)), bool(bvec2((! (false)), true))))))
            break;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
           barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED((-20.55 / -16.60))), bool(false)))))))
            continue;
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
           barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * abs(vec2(1.0, 1.0))).y))))
            barrier();
           barrier();
          }
         continue;
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
          {
           barrier();
          }
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      break;
    }
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(26.53), _GLF_FUZZED(-47.87)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))).x > injectionSwitch.y))))
    continue;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && _GLF_IDENTITY(true, bool(bvec2(true, false))))))
      break;
     barrier();
    }
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(injectionSwitch.x > injectionSwitch.y, true, true, false)))))))
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        break;
       barrier();
      }
     return;
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false)) && true))));
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (_GLF_IDENTITY(injectionSwitch, vec2(mat2x3(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(_GLF_ONE(1.0, injectionSwitch.y))), 1.0, 0.0, 0.0, 1.0))))).y), _GLF_IDENTITY(((injectionSwitch.x > injectionSwitch.y)) && true, false || (((injectionSwitch.x > injectionSwitch.y)) && true))))))
  barrier();
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
  return;
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 >> _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), min(int(0), _GLF_IDENTITY(_GLF_IDENTITY(int(0), (int(0)) | 0), max(int(0), int(0)))))))); _injected_loop_counter --)
    {
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (false)), bool(bvec4((! (false)), true, false, true)))), false, false, _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! _GLF_IDENTITY((! (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y)))), ! (! ((! (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y)))))))))), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (false)), bool(bvec4((! (false)), true, false, true)))), false, false, _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! _GLF_IDENTITY((! (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y)))), ! (! ((! (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y)))))))))), (bool(bvec4(_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (false)), bool(bvec4((! (false)), true, false, true)))), false, false, _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! _GLF_IDENTITY((! (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y)))), ! (! ((! (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y))))))))))) && true), true, false, true)), ! (! (bool(bvec4(_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (false)), bool(bvec4((! (false)), true, false, true)))), false, false, _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! _GLF_IDENTITY((! (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y)))), ! (! ((! (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y)))))))))), (bool(bvec4(_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (false)), bool(bvec4((! (false)), true, false, true)))), false, false, _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! _GLF_IDENTITY((! (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y)))), ! (! ((! (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y))))))))))) && true), true, false, true))))))), (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x > _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(0.4)), bool(false)))))))
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), (false) || false)));
      }
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 do
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch), mat2(1.0) * ((injectionSwitch))) + log(vec2(1.0, 1.0))).x > injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
      barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
      barrier();
     return;
    }
   for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 >> _GLF_IDENTITY(int(2), int(2)))); _injected_loop_counter --)
    {
     return;
     if(_GLF_DEAD(false))
      continue;
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    return;
  }
 uint workgroup_base = workgroup_size * workgroup_id;
 uint subgroup_base = GLF_merged2_0_1_8_1_1_11read_valsubgroup_id.y * GLF_merged3_0_2_51_2_1_13_3_1_13GLF_merged2_0_1_13_1_1_13subgroup_basesubgroup_sizenum_workgroupsubgroup_base.xy.y;
 GLF_merged3_0_1_8_1_1_13_2_1_11read_valsubgroup_basesubgroup_id.y = subgroup_base;
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, false, false, false)), (_GLF_IDENTITY(bool(bvec4(false, false, false, false)), (bool(bvec4(false, false, false, false))) || false)) || false)))))))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true)) || false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   GLF_merged3_0_2_51_2_1_13_3_1_13GLF_merged2_0_1_13_1_1_13subgroup_basesubgroup_sizenum_workgroupsubgroup_base.w = _GLF_IDENTITY(GLF_merged3_0_1_8_1_1_13_2_1_11read_valsubgroup_basesubgroup_id.y, (false ? _GLF_IDENTITY(_GLF_FUZZED(atomicAnd(workgroup_size, workgroup_id)), (_GLF_FUZZED(atomicAnd(workgroup_size, workgroup_id))) >> (0u | 0u)) : GLF_merged3_0_1_8_1_1_13_2_1_11read_valsubgroup_basesubgroup_id.y));
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false))) || false)))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     do
      {
       if(_GLF_DEAD(false))
        return;
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-1157.0354), _GLF_FUZZED(-3.4)), vec2(_GLF_IDENTITY((injectionSwitch)[0], clamp((injectionSwitch)[0], (injectionSwitch)[0], (injectionSwitch)[0])), (injectionSwitch)[1]), bvec2(true, true))).y))))
        barrier();
      }
     barrier();
    }
   else
    {
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(_GLF_IDENTITY(bvec2(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), bvec2(_GLF_IDENTITY(bvec3(bvec2(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), false), bvec3(bvec3(bvec3(bvec2(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), false))))))))))))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     else
      {
       barrier();
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     do
      {
       return;
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
  }
 else
  {
   do
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
         return;
        }
      }
     if(_GLF_DEAD(false))
      break;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, (false) && true)))))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
        barrier();
       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec2(true, false), bvec2(bvec3(bvec2(true, false), false)))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (true)))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_WRAPPED_IF_TRUE(true)))), ! (! (! (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || _GLF_IDENTITY((_GLF_WRAPPED_IF_TRUE(true)), ! (! (_GLF_IDENTITY((_GLF_WRAPPED_IF_TRUE(true)), ! (! ((_GLF_WRAPPED_IF_TRUE(true))))))))))))))))
        {
         if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true)) && true, ((_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true)) && true) || _GLF_IDENTITY(false, (false) || false)))) && true))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           break;
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0), _GLF_IDENTITY(injectionSwitch.x, float(mat3x4(injectionSwitch.x, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0))))) > injectionSwitch.y))))
          barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false))))
        return;
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(-7959.3968)))) * 1.0)))))
          break;
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             barrier();
            }
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
         return;
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! _GLF_IDENTITY((! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false || ((! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), false || (! (_GLF_IDENTITY((! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false || ((! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))))))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED((vec2(19.23, -8453.7316) + vec2(45.53, 7.3))) : injectionSwitch)).y))))
              break;
             barrier();
            }
           return;
           if(_GLF_DEAD(false))
            break;
          }
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), false || ((false)))))))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(false, bool(bvec2(false, false))) || (false))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           else
            {
             return;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, true, true)))))
              break;
            }
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              return;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              continue;
             barrier();
            }
           barrier();
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            barrier();
           return;
          }
         if(_GLF_DEAD(false))
          barrier();
         barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))))
          barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         do
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            return;
           break;
          }
         barrier();
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     for(int _injected_loop_counter = _GLF_IDENTITY(0, 0 ^ (0)); _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
      {
       barrier();
      }
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
      return;
    }
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
  barrier();
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
    {
     do
      {
       return;
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 GLF_merged3_0_2_51_2_1_13_3_1_13GLF_merged2_0_1_13_1_1_13subgroup_basesubgroup_sizenum_workgroupsubgroup_base.xy.x = _GLF_IDENTITY(_GLF_IDENTITY(GLF_merged3_0_2_51_2_1_13_3_1_13GLF_merged2_0_1_13_1_1_13subgroup_basesubgroup_sizenum_workgroupsubgroup_base.w, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(GLF_merged3_0_2_51_2_1_13_3_1_13GLF_merged2_0_1_13_1_1_13subgroup_basesubgroup_sizenum_workgroupsubgroup_base.w, max(GLF_merged3_0_2_51_2_1_13_3_1_13GLF_merged2_0_1_13_1_1_13subgroup_basesubgroup_sizenum_workgroupsubgroup_base.w, GLF_merged3_0_2_51_2_1_13_3_1_13GLF_merged2_0_1_13_1_1_13subgroup_basesubgroup_sizenum_workgroupsubgroup_base.w))), min(~ (GLF_merged3_0_2_51_2_1_13_3_1_13GLF_merged2_0_1_13_1_1_13subgroup_basesubgroup_sizenum_workgroupsubgroup_base.w), ~ (GLF_merged3_0_2_51_2_1_13_3_1_13GLF_merged2_0_1_13_1_1_13subgroup_basesubgroup_sizenum_workgroupsubgroup_base.w))))), (_GLF_IDENTITY(GLF_merged3_0_2_51_2_1_13_3_1_13GLF_merged2_0_1_13_1_1_13subgroup_basesubgroup_sizenum_workgroupsubgroup_base.w, ~ (_GLF_IDENTITY(~ (GLF_merged3_0_2_51_2_1_13_3_1_13GLF_merged2_0_1_13_1_1_13subgroup_basesubgroup_sizenum_workgroupsubgroup_base.w), _GLF_IDENTITY(_GLF_IDENTITY(min(~ (GLF_merged3_0_2_51_2_1_13_3_1_13GLF_merged2_0_1_13_1_1_13subgroup_basesubgroup_sizenum_workgroupsubgroup_base.w), ~ (GLF_merged3_0_2_51_2_1_13_3_1_13GLF_merged2_0_1_13_1_1_13subgroup_basesubgroup_sizenum_workgroupsubgroup_base.w)), (true ? min(~ (GLF_merged3_0_2_51_2_1_13_3_1_13GLF_merged2_0_1_13_1_1_13subgroup_basesubgroup_sizenum_workgroupsubgroup_base.w), ~ (GLF_merged3_0_2_51_2_1_13_3_1_13GLF_merged2_0_1_13_1_1_13subgroup_basesubgroup_sizenum_workgroupsubgroup_base.w)) : _GLF_FUZZED(GLF_merged3_0_2_51_2_1_13_3_1_11GLF_merged2_0_1_13_1_1_13subgroup_basesubgroup_sizenum_workgroupsubgroup_id.w))), _GLF_IDENTITY(~ (_GLF_IDENTITY(~ (min(~ (GLF_merged3_0_2_51_2_1_13_3_1_13GLF_merged2_0_1_13_1_1_13subgroup_basesubgroup_sizenum_workgroupsubgroup_base.w), ~ (GLF_merged3_0_2_51_2_1_13_3_1_13GLF_merged2_0_1_13_1_1_13subgroup_basesubgroup_sizenum_workgroupsubgroup_base.w))), (true ? ~ (min(~ (GLF_merged3_0_2_51_2_1_13_3_1_13GLF_merged2_0_1_13_1_1_13subgroup_basesubgroup_sizenum_workgroupsubgroup_base.w), ~ (_GLF_IDENTITY(GLF_merged3_0_2_51_2_1_13_3_1_13GLF_merged2_0_1_13_1_1_13subgroup_basesubgroup_sizenum_workgroupsubgroup_base, (GLF_merged3_0_2_51_2_1_13_3_1_13GLF_merged2_0_1_13_1_1_13subgroup_basesubgroup_sizenum_workgroupsubgroup_base) | (GLF_merged3_0_2_51_2_1_13_3_1_13GLF_merged2_0_1_13_1_1_13subgroup_basesubgroup_sizenum_workgroupsubgroup_base)).w))) : _GLF_FUZZED(write_val)))), max(~ (_GLF_IDENTITY(~ (min(~ (GLF_merged3_0_2_51_2_1_13_3_1_13GLF_merged2_0_1_13_1_1_13subgroup_basesubgroup_sizenum_workgroupsubgroup_base.w), ~ (GLF_merged3_0_2_51_2_1_13_3_1_13GLF_merged2_0_1_13_1_1_13subgroup_basesubgroup_sizenum_workgroupsubgroup_base.w))), (true ? ~ (min(~ (GLF_merged3_0_2_51_2_1_13_3_1_13GLF_merged2_0_1_13_1_1_13subgroup_basesubgroup_sizenum_workgroupsubgroup_base.w), ~ (_GLF_IDENTITY(GLF_merged3_0_2_51_2_1_13_3_1_13GLF_merged2_0_1_13_1_1_13subgroup_basesubgroup_sizenum_workgroupsubgroup_base, (GLF_merged3_0_2_51_2_1_13_3_1_13GLF_merged2_0_1_13_1_1_13subgroup_basesubgroup_sizenum_workgroupsubgroup_base) | (GLF_merged3_0_2_51_2_1_13_3_1_13GLF_merged2_0_1_13_1_1_13subgroup_basesubgroup_sizenum_workgroupsubgroup_base)).w))) : _GLF_FUZZED(write_val)))), ~ (_GLF_IDENTITY(~ (min(~ (GLF_merged3_0_2_51_2_1_13_3_1_13GLF_merged2_0_1_13_1_1_13subgroup_basesubgroup_sizenum_workgroupsubgroup_base.w), ~ (GLF_merged3_0_2_51_2_1_13_3_1_13GLF_merged2_0_1_13_1_1_13subgroup_basesubgroup_sizenum_workgroupsubgroup_base.w))), (true ? ~ (min(~ (GLF_merged3_0_2_51_2_1_13_3_1_13GLF_merged2_0_1_13_1_1_13subgroup_basesubgroup_sizenum_workgroupsubgroup_base.w), ~ (_GLF_IDENTITY(GLF_merged3_0_2_51_2_1_13_3_1_13GLF_merged2_0_1_13_1_1_13subgroup_basesubgroup_sizenum_workgroupsubgroup_base, (GLF_merged3_0_2_51_2_1_13_3_1_13GLF_merged2_0_1_13_1_1_13subgroup_basesubgroup_sizenum_workgroupsubgroup_base) | (GLF_merged3_0_2_51_2_1_13_3_1_13GLF_merged2_0_1_13_1_1_13subgroup_basesubgroup_sizenum_workgroupsubgroup_base)).w))) : _GLF_FUZZED(write_val))))))))))) * 1u);
 if(_GLF_DEAD(false))
  barrier();
 uint virtual_gid = _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, _GLF_IDENTITY((true ? workgroup_base : _GLF_FUZZED(uaddCarry(workgroup_size, GLF_merged2_0_1_8_1_1_11read_valsubgroup_id.y, workgroup_id))), (1u ^ 1u) ^ _GLF_IDENTITY((_GLF_IDENTITY((true ? workgroup_base : _GLF_FUZZED(uaddCarry(workgroup_size, GLF_merged2_0_1_8_1_1_11read_valsubgroup_id.y, workgroup_id))), (_GLF_IDENTITY((true ? workgroup_base : _GLF_FUZZED(uaddCarry(workgroup_size, GLF_merged2_0_1_8_1_1_11read_valsubgroup_id.y, workgroup_id))), ~ (~ (_GLF_IDENTITY((true ? workgroup_base : _GLF_FUZZED(uaddCarry(workgroup_size, GLF_merged2_0_1_8_1_1_11read_valsubgroup_id.y, workgroup_id))), ((true ? workgroup_base : _GLF_FUZZED(uaddCarry(workgroup_size, GLF_merged2_0_1_8_1_1_11read_valsubgroup_id.y, workgroup_id)))) >> 0u))))) / 1u)), ((_GLF_IDENTITY((true ? workgroup_base : _GLF_FUZZED(uaddCarry(workgroup_size, GLF_merged2_0_1_8_1_1_11read_valsubgroup_id.y, workgroup_id))), ((true ? workgroup_base : _GLF_FUZZED(uaddCarry(workgroup_size, GLF_merged2_0_1_8_1_1_11read_valsubgroup_id.y, workgroup_id)))) / 1u))) - (0u >> _GLF_IDENTITY(uint(7u), _GLF_IDENTITY(uint(7u), (uint(7u)) / 1u)))))), 0u ^ _GLF_IDENTITY((_GLF_IDENTITY(workgroup_base, _GLF_IDENTITY((true ? workgroup_base : _GLF_FUZZED(uaddCarry(workgroup_size, GLF_merged2_0_1_8_1_1_11read_valsubgroup_id.y, workgroup_id))), (1u ^ 1u) ^ ((true ? workgroup_base : _GLF_FUZZED(uaddCarry(workgroup_size, GLF_merged2_0_1_8_1_1_11read_valsubgroup_id.y, workgroup_id))))))), 1u * (_GLF_IDENTITY((_GLF_IDENTITY(workgroup_base, _GLF_IDENTITY((true ? workgroup_base : _GLF_FUZZED(uaddCarry(workgroup_size, GLF_merged2_0_1_8_1_1_11read_valsubgroup_id.y, workgroup_id))), (1u ^ 1u) ^ ((true ? workgroup_base : _GLF_FUZZED(uaddCarry(workgroup_size, GLF_merged2_0_1_8_1_1_11read_valsubgroup_id.y, workgroup_id))))))), ((_GLF_IDENTITY(workgroup_base, _GLF_IDENTITY((true ? workgroup_base : _GLF_FUZZED(uaddCarry(workgroup_size, GLF_merged2_0_1_8_1_1_11read_valsubgroup_id.y, workgroup_id))), _GLF_IDENTITY((1u ^ 1u), min((1u ^ 1u), (1u ^ 1u))) ^ ((true ? workgroup_base : _GLF_FUZZED(uaddCarry(workgroup_size, GLF_merged2_0_1_8_1_1_11read_valsubgroup_id.y, workgroup_id)))))))) - _GLF_IDENTITY(0u, 0u | (_GLF_IDENTITY(0u, min(0u, 0u)))))))) + GLF_merged3_0_2_51_2_1_13_3_1_13GLF_merged2_0_1_13_1_1_13subgroup_basesubgroup_sizenum_workgroupsubgroup_base.xy.x + subgroup_local_id;
 GLF_merged2_0_2_51_2_1_11GLF_merged2_0_1_13_1_1_13subgroup_basesubgroup_sizevirtual_gid.z = virtual_gid;
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       barrier();
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         continue;
        }
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y))))) : _GLF_FUZZED(smoothstep(1675.5764, 9383.0415, vec2(-231.341, 407.052))))).x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            continue;
           barrier();
          }
         break;
         if(_GLF_DEAD(false))
          continue;
        }
       barrier();
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))
          break;
         barrier();
        }
       barrier();
      }
    }
   do
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
     continue;
     if(_GLF_DEAD(false))
      continue;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, (false) || false)))))
        break;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       for(int _injected_loop_counter = (1 | (0 | 1)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
        {
         return;
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, (false) && true), true), bvec2(bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, (false) && true), true), bvec2(bvec3(bvec2(_GLF_IDENTITY(false, (false) && true), _GLF_IDENTITY(true, ! (! (true)))), _GLF_IDENTITY(false, bool(bvec2(false, true)))))))))))))
        return;
      }
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        continue;
       return;
      }
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-9031.5804), _GLF_FUZZED(-7338.5108)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))).x, injectionSwitch.x, injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY((true ? _GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(-3.5) : injectionSwitch.x)) : _GLF_FUZZED(5.0)), (false ? _GLF_FUZZED(967.891) : _GLF_IDENTITY((true ? _GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(-3.5) : injectionSwitch.x)) : _GLF_FUZZED(5.0)), clamp((true ? _GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(-3.5) : injectionSwitch.x)) : _GLF_FUZZED(5.0)), _GLF_IDENTITY((true ? _GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(-3.5) : injectionSwitch.x)) : _GLF_FUZZED(5.0)), ((true ? _GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(-3.5) : injectionSwitch.x)) : _GLF_FUZZED(5.0))) + 0.0), (true ? _GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(-3.5) : injectionSwitch.x)) : _GLF_FUZZED(5.0))))))))) > injectionSwitch.y), bool(bool(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-9031.5804), _GLF_FUZZED(-7338.5108)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))).x, injectionSwitch.x, injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY((true ? _GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(-3.5) : injectionSwitch.x)) : _GLF_FUZZED(5.0)), (false ? _GLF_FUZZED(967.891) : _GLF_IDENTITY((true ? _GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(-3.5) : injectionSwitch.x)) : _GLF_FUZZED(5.0)), clamp((true ? _GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(-3.5) : injectionSwitch.x)) : _GLF_FUZZED(5.0)), _GLF_IDENTITY((true ? _GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(-3.5) : injectionSwitch.x)) : _GLF_FUZZED(5.0)), ((true ? _GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(-3.5) : injectionSwitch.x)) : _GLF_FUZZED(5.0))) + 0.0), (true ? _GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(-3.5) : injectionSwitch.x)) : _GLF_FUZZED(5.0))))))))) > injectionSwitch.y), true && (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-9031.5804), _GLF_FUZZED(-7338.5108)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))).x, injectionSwitch.x, injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY((true ? _GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(-3.5) : injectionSwitch.x)) : _GLF_FUZZED(5.0)), (false ? _GLF_FUZZED(967.891) : _GLF_IDENTITY((true ? _GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(-3.5) : injectionSwitch.x)) : _GLF_FUZZED(5.0)), clamp((true ? _GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(-3.5) : injectionSwitch.x)) : _GLF_FUZZED(5.0)), _GLF_IDENTITY((true ? _GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(-3.5) : injectionSwitch.x)) : _GLF_FUZZED(5.0)), ((true ? _GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(-3.5) : injectionSwitch.x)) : _GLF_FUZZED(5.0))) + 0.0), (true ? _GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(-3.5) : injectionSwitch.x)) : _GLF_FUZZED(5.0))))))))) > injectionSwitch.y), bool(bvec2((_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-9031.5804), _GLF_FUZZED(-7338.5108)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))).x, injectionSwitch.x, injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY((true ? _GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(-3.5) : injectionSwitch.x)) : _GLF_FUZZED(5.0)), (false ? _GLF_FUZZED(967.891) : _GLF_IDENTITY((true ? _GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(-3.5) : injectionSwitch.x)) : _GLF_FUZZED(5.0)), clamp((true ? _GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(-3.5) : injectionSwitch.x)) : _GLF_FUZZED(5.0)), _GLF_IDENTITY((true ? _GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(-3.5) : injectionSwitch.x)) : _GLF_FUZZED(5.0)), ((true ? _GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(-3.5) : injectionSwitch.x)) : _GLF_FUZZED(5.0))) + 0.0), (true ? _GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(-3.5) : injectionSwitch.x)) : _GLF_FUZZED(5.0))))))))) > injectionSwitch.y), true))))))))))) && true))
      barrier();
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        break;
       barrier();
      }
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, false || (false))) || false)) || false)))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).y))))
          barrier();
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
           barrier();
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true), _GLF_IDENTITY(bvec3(bvec4(bvec3(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true), true)), bvec3(bvec4(bvec3(bvec4(bvec3(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true), true)), true)))))), ((injectionSwitch.x > injectionSwitch.y)) || false)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))
        return;
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
            barrier();
           barrier();
          }
         barrier();
        }
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   do
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, false, true), _GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(bvec3(false, false, true)), bvec3(bvec3(bvec3(bvec3(false, false, true)))))), bvec3(bvec4(bvec3(_GLF_IDENTITY(bvec3(bvec3(false, false, true)), bvec3(bvec3(bvec3(bvec3(false, false, true)))))), true))))))))
        return;
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = _GLF_IDENTITY((0 ^ 0), ((0 ^ 0)) << 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 | _GLF_IDENTITY(1, (1) >> 0))); _injected_loop_counter ++)
          {
           barrier();
           if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bool((injectionSwitch.x > injectionSwitch.y))))))) || false)))))
            return;
          }
        }
       if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false)))) || false))
        barrier();
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         barrier();
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      barrier();
     for(int _injected_loop_counter = (0 | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         do
          {
           barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     continue;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     break;
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    continue;
  }
 while(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), (_GLF_WRAPPED_LOOP(false)) || _GLF_IDENTITY(false, bool(bvec4(false, false, false, _GLF_IDENTITY(false, true && (false)))))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), true && (_GLF_WRAPPED_LOOP(false))), (_GLF_WRAPPED_LOOP(false)) || false), bool(bvec2(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), (_GLF_WRAPPED_LOOP(false)) || _GLF_IDENTITY(false, bool(bvec4(false, false, false, false)))), true)))))));
 if(_GLF_DEAD(false))
  return;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       atomicStore(write_val, uint(GLF_merged2_0_2_51_2_1_11GLF_merged2_0_1_13_1_1_13subgroup_basesubgroup_sizevirtual_gid.z), 4, 64, 0);
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   else
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      barrier();
    }
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))))))))))))
    barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (! (injectionSwitch.x < injectionSwitch.y)))))))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     barrier();
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 uint read_val = atomicLoad(write_val, 4, 64, 0);
 GLF_merged3_0_1_8_1_1_13_2_1_11read_valsubgroup_basesubgroup_id.x = read_val;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
  {
   GLF_merged2_0_1_8_1_1_11read_valsubgroup_id.x = GLF_merged3_0_1_8_1_1_13_2_1_11read_valsubgroup_basesubgroup_id.x;
   if(_GLF_DEAD(false))
    continue;
  }
 GLF_merged3_0_1_13_1_1_8_2_1_13num_workgroupread_valsubgroup_size.y = GLF_merged2_0_1_8_1_1_11read_valsubgroup_id.x;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   return;
  }
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)))))
    return;
   for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != (30768 & _GLF_IDENTITY(0, _GLF_IDENTITY(int(ivec3(0, 1, int(_GLF_ONE(1.0, injectionSwitch.y)))), (int(ivec3(0, 1, int(_GLF_ONE(1.0, injectionSwitch.y))))) << 0)))); _injected_loop_counter --)
      {
       barrier();
      }
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))))))))))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(true, (true) || false) && (_GLF_IDENTITY(false, ! (! (false)))))))
  {
  }
 else
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     buf[GLF_merged2_0_2_51_2_1_11GLF_merged2_0_1_13_1_1_13subgroup_basesubgroup_sizevirtual_gid.z] = _GLF_IDENTITY(_GLF_IDENTITY(uint(subgroupAllEqual(GLF_merged3_0_1_13_1_1_8_2_1_13num_workgroupread_valsubgroup_size.y)), (uint(subgroupAllEqual(GLF_merged3_0_1_13_1_1_8_2_1_13num_workgroupread_valsubgroup_size.y))) - 0u), (_GLF_IDENTITY(uint(subgroupAllEqual(GLF_merged3_0_1_13_1_1_8_2_1_13num_workgroupread_valsubgroup_size.y)), (uint(subgroupAllEqual(_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_8_2_1_13num_workgroupread_valsubgroup_size.y, _GLF_IDENTITY((_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_8_2_1_13num_workgroupread_valsubgroup_size.y, ~ (~ (GLF_merged3_0_1_13_1_1_8_2_1_13num_workgroupread_valsubgroup_size.y)))) / 1u, ((_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_8_2_1_13num_workgroupread_valsubgroup_size.y, ~ (~ (GLF_merged3_0_1_13_1_1_8_2_1_13num_workgroupread_valsubgroup_size.y)))) / _GLF_IDENTITY(1u, (1u) | (_GLF_IDENTITY(1u, (1u) | (_GLF_IDENTITY(1u, (1u) - 0u)))))) | ((_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_8_2_1_13num_workgroupread_valsubgroup_size.y, ~ (~ (GLF_merged3_0_1_13_1_1_8_2_1_13num_workgroupread_valsubgroup_size.y)))) / 1u)))))) - 0u)) << _GLF_IDENTITY(0u, _GLF_IDENTITY((0u) | 0u, uint(uvec2((0u) | 0u, 1u)))));
    }
  }
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   do
    {
     return;
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   for(int _injected_loop_counter = (0 | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
   return;
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
    barrier();
   return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(mat4(injectionSwitch.x, determinant(mat4(1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, log(1.0), 0.0, 1.0)), log(1.0), 0.0, cos(0.0), 0.0, 1.0, cos(0.0), 0.0, sqrt(1.0), 1.0, 0.0, 1.0, sin(0.0), 0.0, 1.0))) > injectionSwitch.y))))
  barrier();
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 1
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
