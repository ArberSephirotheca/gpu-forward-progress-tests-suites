#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer WriteVal {
 uint write_val;
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uvec2 GLF_merged2_0_1_11_1_1_13subgroup_idsubgroup_size;
 uvec3 GLF_merged3_0_1_13_1_1_11_2_1_11num_workgroupsubgroup_idvirtual_gid;
 uint subgroup_id = gl_SubgroupID;
 GLF_merged2_0_1_11_1_1_13subgroup_idsubgroup_size.x = subgroup_id;
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0))))) && true))
  barrier();
 GLF_merged3_0_1_13_1_1_11_2_1_11num_workgroupsubgroup_idvirtual_gid.y = GLF_merged2_0_1_11_1_1_13subgroup_idsubgroup_size.x;
 uint subgroup_size = gl_SubgroupSize;
 GLF_merged2_0_1_11_1_1_13subgroup_idsubgroup_size.y = subgroup_size;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 GLF_merged3_0_1_13_1_1_11_2_1_11num_workgroupsubgroup_idvirtual_gid.x = num_workgroup;
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = _GLF_IDENTITY(gl_WorkGroupID.x, _GLF_IDENTITY((_GLF_IDENTITY(false ? _GLF_FUZZED(bitfieldInsert(workgroup_size, workgroup_size, -12555, _GLF_IDENTITY(_GLF_IDENTITY(79928, (79928) ^ (0 | 0)), clamp(79928, _GLF_IDENTITY(79928, ~ (_GLF_IDENTITY(~ _GLF_IDENTITY((_GLF_IDENTITY(79928, (79928) + 0)), ((79928)) ^ 0), clamp(~ (79928), ~ (79928), ~ (79928))))), 79928)))) : gl_WorkGroupID.x, (true ? false ? _GLF_FUZZED(bitfieldInsert(workgroup_size, workgroup_size, -12555, _GLF_IDENTITY(79928, clamp(79928, _GLF_IDENTITY(79928, ~ (_GLF_IDENTITY(~ (79928), clamp(~ (79928), ~ (79928), ~ (79928))))), 79928)))) : gl_WorkGroupID.x : _GLF_FUZZED(num_workgroup)))), _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, min(0u, 0u))) - 0u) | ((false ? _GLF_FUZZED(bitfieldInsert(workgroup_size, workgroup_size, -12555, _GLF_IDENTITY(79928, clamp(79928, _GLF_IDENTITY(_GLF_IDENTITY(79928, ~ (_GLF_IDENTITY(~ (79928), clamp(~ (79928), ~ (79928), ~ (79928))))), ~ (~ (_GLF_IDENTITY(79928, ~ (_GLF_IDENTITY(~ (79928), clamp(~ (79928), ~ (79928), ~ (79928)))))))), 79928)))) : gl_WorkGroupID.x))));
 uint workgroup_base = workgroup_size * workgroup_id;
 uint subgroup_base = GLF_merged3_0_1_13_1_1_11_2_1_11num_workgroupsubgroup_idvirtual_gid.y * GLF_merged2_0_1_11_1_1_13subgroup_idsubgroup_size.y;
 uint virtual_gid = workgroup_base + subgroup_base + _GLF_IDENTITY(subgroup_local_id, max(_GLF_IDENTITY(subgroup_local_id, (false ? _GLF_FUZZED(GLF_merged2_0_1_11_1_1_13subgroup_idsubgroup_size.x) : subgroup_local_id)), subgroup_local_id));
 GLF_merged3_0_1_13_1_1_11_2_1_11num_workgroupsubgroup_idvirtual_gid.z = virtual_gid;
 atomicStore(write_val, uint(GLF_merged3_0_1_13_1_1_11_2_1_11num_workgroupsubgroup_idvirtual_gid.z), 4, 64, 0);
 uint read_val = _GLF_IDENTITY(atomicLoad(write_val, 4, 64, 0), (atomicLoad(write_val, 4, 64, 0)) / 1u);
 buf[GLF_merged3_0_1_13_1_1_11_2_1_11num_workgroupsubgroup_idvirtual_gid.z] = uint(subgroupAllEqual(_GLF_IDENTITY(read_val, min(_GLF_IDENTITY(read_val, (read_val) | (read_val)), _GLF_IDENTITY(read_val, ~ (~ (_GLF_IDENTITY(read_val, (read_val) | 0u))))))));
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 1
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
