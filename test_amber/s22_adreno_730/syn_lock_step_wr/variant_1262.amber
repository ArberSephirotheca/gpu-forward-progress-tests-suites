#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), max(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)))), injectionSwitch, injectionSwitch)).y))))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(bvec3(_GLF_DEAD(false), true, false), bvec3(bvec3(bvec3(_GLF_DEAD(false), true, false)))))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(_GLF_TRUE(true, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) < injectionSwitch.y), bool(_GLF_IDENTITY(bvec2((_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) < injectionSwitch.y), true), bvec2(bvec3(bvec2((_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) < injectionSwitch.y), true), true)))))), ! (! (_GLF_TRUE(true, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) < injectionSwitch.y), bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec2((_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) < injectionSwitch.y), true), _GLF_IDENTITY(bvec2(bvec4(bvec2((_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) < injectionSwitch.y), _GLF_IDENTITY(true, false || (true))), true, true)), bvec2(bvec3(bvec2(bvec4(bvec2((_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) < injectionSwitch.y), true), true, true)), true)))), bvec2(_GLF_IDENTITY(bvec3(bvec2((_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) < injectionSwitch.y), true), true), _GLF_IDENTITY(bvec3(bvec4(bvec3(bvec2((_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) < injectionSwitch.y), true), true), false)), bvec3(bvec4(_GLF_IDENTITY(bvec3(bvec4(bvec3(bvec2((_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) < injectionSwitch.y), true), true), false)), bvec3(bvec4(bvec3(bvec4(bvec3(bvec2((_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) < injectionSwitch.y), true), true), false)), true))), false)))))))))))), true, _GLF_IDENTITY(false, ! (! (false))))))))))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(_GLF_IDENTITY(vec2(-4753.9682, 421.798), (vec2(-4753.9682, 421.798)) - vec2(0.0, 0.0))) : injectionSwitch)), _GLF_IDENTITY(max(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-4753.9682, 421.798)) : injectionSwitch)), _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-4753.9682, 421.798)) : injectionSwitch))), (max(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-4753.9682, 421.798)) : injectionSwitch)), _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-4753.9682, 421.798)) : injectionSwitch)))) / vec2(1.0, 1.0))), vec2(mat2(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-4753.9682, 421.798)) : injectionSwitch)), max(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(false ? _GLF_FUZZED(vec2(-4753.9682, 421.798)) : injectionSwitch, mat2(1.0) * (false ? _GLF_FUZZED(vec2(-4753.9682, 421.798)) : injectionSwitch)))), _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-4753.9682, 421.798)) : injectionSwitch)))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-4753.9682, 421.798)) : injectionSwitch)), max(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-4753.9682, 421.798)) : injectionSwitch)), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-4753.9682, 421.798)) : injectionSwitch)), mat2(1.0) * (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-4753.9682, 421.798)) : injectionSwitch)))))), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(_GLF_IDENTITY(vec2(-4753.9682, 421.798), mix(vec2((vec2(-4753.9682, 421.798))[0], _GLF_IDENTITY(_GLF_FUZZED(5.4), (true ? _GLF_IDENTITY(_GLF_FUZZED(5.4), 0.0 + (_GLF_FUZZED(5.4))) : _GLF_FUZZED(-8.1)))), vec2(_GLF_FUZZED(-563.576), (vec2(-4753.9682, 421.798))[1]), _GLF_IDENTITY(bvec2(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec2(bvec3(bvec2(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true)))))) : injectionSwitch)), max(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_IDENTITY(_GLF_FUZZED(vec2(-4753.9682, 421.798)), vec2(_GLF_IDENTITY(mat2x4(_GLF_FUZZED(vec2(-4753.9682, 421.798)), 0.0, 0.0, log(1.0), 0.0, exp(0.0), 1.0), mat4(1.0) * (mat2x4(_GLF_FUZZED(vec2(-4753.9682, 421.798)), 0.0, 0.0, log(1.0), 0.0, exp(0.0), 1.0))))) : injectionSwitch)), _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-4753.9682, 421.798)) : injectionSwitch))))) + vec2(0.0, 0.0)), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-4753.9682, 421.798)) : injectionSwitch)), max(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-4753.9682, 421.798)) : injectionSwitch)), _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-4753.9682, 421.798)) : injectionSwitch)))), vec2(0.0, 0.0) + (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-4753.9682, 421.798)) : injectionSwitch)), max(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-4753.9682, 421.798)) : _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)))), _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-4753.9682, 421.798)) : injectionSwitch)))))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(_GLF_IDENTITY(vec2(-4753.9682, 421.798), max(vec2(-4753.9682, 421.798), vec2(-4753.9682, 421.798)))) : injectionSwitch)), clamp(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-4753.9682, 421.798)) : injectionSwitch)), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-4753.9682, 421.798)) : injectionSwitch)), (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-4753.9682, 421.798)) : injectionSwitch))) + vec2(0.0, 0.0)), _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(false ? _GLF_FUZZED(vec2(-4753.9682, 421.798)) : injectionSwitch, vec2(0.0, 0.0) + (false ? _GLF_FUZZED(vec2(-4753.9682, 421.798)) : injectionSwitch)))))), max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-4753.9682, 421.798)) : injectionSwitch)), clamp(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_IDENTITY(_GLF_FUZZED(vec2(-4753.9682, 421.798)), min(_GLF_FUZZED(vec2(-4753.9682, 421.798)), _GLF_FUZZED(vec2(-4753.9682, 421.798)))) : injectionSwitch)), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(false ? _GLF_FUZZED(vec2(-4753.9682, 421.798)) : injectionSwitch, vec2(mat2(false ? _GLF_FUZZED(vec2(-4753.9682, 421.798)) : injectionSwitch, 1.0, 0.0))))), (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-4753.9682, 421.798)) : injectionSwitch))) + vec2(0.0, 0.0)), _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-4753.9682, 421.798)) : injectionSwitch)))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-4753.9682, 421.798)) : injectionSwitch)), clamp(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-4753.9682, 421.798)) : injectionSwitch)), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-4753.9682, 421.798)) : injectionSwitch)), (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(_GLF_IDENTITY(-4753.9682, min(-4753.9682, -4753.9682)), 421.798)) : injectionSwitch))) + vec2(0.0, 0.0)), _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-4753.9682, 421.798)) : injectionSwitch)))))), max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(_GLF_IDENTITY(vec2(_GLF_FUZZED(1.1), _GLF_FUZZED(((- 3997.1998) / 6.6))), (true ? vec2(_GLF_FUZZED(1.1), _GLF_FUZZED(((- 3997.1998) / 6.6))) : _GLF_FUZZED(vec2(_GLF_IDENTITY(169.998, min(_GLF_IDENTITY(169.998, max(169.998, 169.998)), _GLF_IDENTITY(169.998, float(mat4(169.998, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, sin(0.0), 1.0, 0.0, 0.0, 0.0, 1.0, 0.0))))), 1.7)))), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))), (false ? _GLF_FUZZED(vec2(-4753.9682, 421.798)) : injectionSwitch)), _GLF_IDENTITY(injectionSwitch, (false ? _GLF_IDENTITY(_GLF_FUZZED(vec2(-4753.9682, 421.798)), vec2(0.0, 0.0) + (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(vec2(-4753.9682, 421.798)), (true ? _GLF_FUZZED(vec2(-4753.9682, 421.798)) : _GLF_FUZZED(vec2(-3.7, -8.1)))), (_GLF_IDENTITY(_GLF_FUZZED(vec2(-4753.9682, 421.798)), (true ? _GLF_FUZZED(vec2(-4753.9682, 421.798)) : _GLF_FUZZED(vec2(-3.7, -8.1))))) * vec2(1.0, _GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, (1.0) + 0.0), 1.0, 1.0)))))) : injectionSwitch))))) - vec2(0.0, 0.0)), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-4753.9682, 421.798)) : injectionSwitch)), max(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-4753.9682, 421.798)) : injectionSwitch)), _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-4753.9682, 421.798)) : injectionSwitch)))))), 0.0, 0.0))).x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-8.6)), float(injectionSwitch.y), bool(true)))))))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y), float(_GLF_FUZZED(-953.387)), bool(false)))))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, (false) || false)), true && (! (_GLF_IDENTITY(false, (false) || false))))))))
    return;
   if(_GLF_DEAD(false))
    return;
   return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
     return;
    }
   if(_GLF_DEAD(false))
    return;
  }
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, false, false, false)), bool(_GLF_IDENTITY(bvec3(bool(bvec4(false, false, false, false)), false, true), bvec3(bvec4(bvec3(bool(bvec4(false, false, false, false)), false, true), true))))))))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec3(false, false, false)))) && true)))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
     return;
    }
   return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))))))
  return;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   return;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), (true ? _GLF_IDENTITY((injectionSwitch) * mat2(1.0), min((injectionSwitch) * mat2(1.0), (injectionSwitch) * mat2(1.0))) : _GLF_FUZZED(vec2(-5818.4304, 125.532))))).x > injectionSwitch.y), ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bool(_GLF_IDENTITY(bvec2(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), (true ? _GLF_IDENTITY((injectionSwitch) * mat2(1.0), min((injectionSwitch) * mat2(1.0), (injectionSwitch) * mat2(1.0))) : _GLF_FUZZED(vec2(-5818.4304, 125.532))))).x > injectionSwitch.y), ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false), bvec2(bvec2(bvec2(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), (true ? _GLF_IDENTITY((injectionSwitch) * mat2(1.0), min((injectionSwitch) * mat2(1.0), (injectionSwitch) * mat2(1.0))) : _GLF_FUZZED(vec2(-5818.4304, 125.532))))).x > injectionSwitch.y), ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false))))))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))
      return;
     return;
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)), (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true))) && true)))))))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    return;
   return;
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
  }
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bool(false)))) && true), (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false)), false || (bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false))))), false || (! (_GLF_IDENTITY(bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false)), false || (bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false))))))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false)), false || (bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false))))), false || (! (_GLF_IDENTITY(bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false)), false || (bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false))))))))), bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / sqrt(vec2(1.0, 1.0))).y)), true, false)), false || (bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false))))), false || (! (_GLF_IDENTITY(bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false)), false || (bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false))))))))), (_GLF_IDENTITY(bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(bool(bvec3(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))) && true))), true, false)), false || (bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false))))), _GLF_IDENTITY(false || (! (_GLF_IDENTITY(bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false)), false || (bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false)))))), bool(bvec2(false || (! (_GLF_IDENTITY(bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false)), false || (bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false)))))), true))))))) && true), false, true)))), (! (_GLF_IDENTITY(_GLF_IDENTITY(bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false)), _GLF_IDENTITY(! (_GLF_IDENTITY(! (_GLF_IDENTITY(bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false)), false || (bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false))))), false || (! (_GLF_IDENTITY(bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false)), false || (bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false)))))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(! (_GLF_IDENTITY(! (_GLF_IDENTITY(bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false)), false || (bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false))))), false || (! (_GLF_IDENTITY(bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false)), false || (bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false)))))))), true && (! (_GLF_IDENTITY(! (_GLF_IDENTITY(bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false)), false || (bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false))))), false || (! (_GLF_IDENTITY(bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false)), false || (bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, _GLF_IDENTITY(false, false || (false))))))))))))))), bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false)), false || (bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false))))), false || (! (_GLF_IDENTITY(bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false)), false || (bool(_GLF_IDENTITY(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false), _GLF_IDENTITY(bvec3(bvec4(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false), true)), bvec3(bvec3(bvec3(bvec4(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false), true)))))))))))))), (_GLF_IDENTITY(bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false)), false || (bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false))))), false || (! (_GLF_IDENTITY(bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false)), false || (bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false)))))))))) && true), false, true))))) && true))))))
    return;
   if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(! (! (_GLF_DEAD(false))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (! (! (_GLF_DEAD(false)))))))
    return;
   return;
  }
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec4(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))), false, true, true))))))
      return;
     return;
    }
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(1.6), _GLF_FUZZED(-791.663)), bvec2(false, false))), injectionSwitch)), _GLF_IDENTITY(injectionSwitch, (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(0.7)), float(injectionSwitch.y), bool(true))))) ? _GLF_FUZZED((-52.85 / vec2(-870.311, -5975.0274))) : injectionSwitch)))).y))))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      return;
     return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
    }
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true)))) && true))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   return;
  }
 uint workgroup_base = workgroup_size * workgroup_id;
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((_GLF_IDENTITY(false, bool(bool(false)))), ((_GLF_IDENTITY(false, bool(bool(false))))) || false)))))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(mat4x2(injectionSwitch.y, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, _GLF_IDENTITY(1.0, (1.0) - 0.0))), 1.0 * (float(mat4x2(injectionSwitch.y, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0)))))))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)), ! (! (bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, bool(bvec3(false, true, true)))))))))))))
      return;
     return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(88.65)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), injectionSwitch.x)) > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec2(false, false))), (false) || false)))))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
     return;
     if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
      return;
    }
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, false, true)))))
    return;
   return;
  }
 if(_GLF_DEAD(false))
  return;
 uint subgroup_base = subgroup_id * subgroup_size;
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)))
  {
   if(_GLF_DEAD(false))
    return;
   return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         return;
        }
       return;
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        return;
      }
     if(_GLF_DEAD(false))
      return;
     return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), false)))))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, float(mat3x4(injectionSwitch.y, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0))), injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, float(mat4(injectionSwitch.y, tan(0.0), 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, determinant(mat2(0.0, 0.0, 0.0, 0.0)), 0.0, 1.0)))))), false || ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, float(mat3x4(injectionSwitch.y, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0))), injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, float(mat4(injectionSwitch.y, tan(0.0), 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, determinant(mat2(0.0, 0.0, 0.0, 0.0)), 0.0, 1.0)))))))))))
      return;
     return;
     if(_GLF_DEAD(false))
      return;
    }
   return;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false))))
    return;
   return;
  }
 uint virtual_gid = _GLF_IDENTITY(workgroup_base + subgroup_base, (_GLF_IDENTITY(workgroup_base + subgroup_base, ~ (~ _GLF_IDENTITY(_GLF_IDENTITY((workgroup_base + subgroup_base), _GLF_IDENTITY((true ? _GLF_IDENTITY((workgroup_base + subgroup_base), (_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(0.0, (true ? _GLF_IDENTITY(0.0, float(mat3x4(0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0))) : _GLF_FUZZED(3.5))) + (injectionSwitch.x)) < _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)))) ? (workgroup_base + subgroup_base) : _GLF_FUZZED(bitfieldExtract(workgroup_size, -44652, floatBitsToInt(-61.73))))) : _GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(bitfieldReverse(num_workgroup)), 0u | (_GLF_FUZZED(bitfieldReverse(num_workgroup)))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(bitfieldReverse(num_workgroup)), (_GLF_FUZZED(bitfieldReverse(_GLF_IDENTITY(num_workgroup, (false ? _GLF_FUZZED(workgroup_base) : num_workgroup))))) ^ 0u), max(_GLF_FUZZED(bitfieldReverse(num_workgroup)), _GLF_FUZZED(_GLF_IDENTITY(bitfieldReverse(num_workgroup), _GLF_IDENTITY(uint(uvec2(bitfieldReverse(num_workgroup), 0u)), (uint(uvec2(bitfieldReverse(num_workgroup), 0u))) >> 0u)))))), (~ (_GLF_IDENTITY(_GLF_FUZZED(bitfieldReverse(num_workgroup)), max(_GLF_FUZZED(bitfieldReverse(num_workgroup)), _GLF_FUZZED(bitfieldReverse(num_workgroup)))))) >> 0u)))), 0u | ((true ? _GLF_IDENTITY((workgroup_base + subgroup_base), (_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x)) < injectionSwitch.y)) ? _GLF_IDENTITY((workgroup_base + subgroup_base), 0u | ((workgroup_base + subgroup_base))) : _GLF_FUZZED(bitfieldExtract(workgroup_size, -44652, floatBitsToInt(-61.73))))) : _GLF_IDENTITY(_GLF_FUZZED(bitfieldReverse(num_workgroup)), _GLF_IDENTITY(~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_FUZZED(bitfieldReverse(num_workgroup)), max(_GLF_FUZZED(bitfieldReverse(num_workgroup)), _GLF_FUZZED(_GLF_IDENTITY(bitfieldReverse(num_workgroup), _GLF_IDENTITY(uint(uvec2(bitfieldReverse(num_workgroup), 0u)), (uint(uvec2(bitfieldReverse(num_workgroup), 0u))) >> 0u)))))), (~ (_GLF_IDENTITY(_GLF_FUZZED(bitfieldReverse(num_workgroup)), max(_GLF_FUZZED(bitfieldReverse(num_workgroup)), _GLF_FUZZED(bitfieldReverse(num_workgroup)))))) >> 0u)), (_GLF_IDENTITY(true, ! (! (true))) ? ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_FUZZED(bitfieldReverse(num_workgroup)), max(_GLF_FUZZED(bitfieldReverse(num_workgroup)), _GLF_FUZZED(_GLF_IDENTITY(bitfieldReverse(num_workgroup), _GLF_IDENTITY(uint(uvec2(bitfieldReverse(num_workgroup), 0u)), (uint(uvec2(bitfieldReverse(num_workgroup), 0u))) >> 0u)))))), (~ (_GLF_IDENTITY(_GLF_FUZZED(bitfieldReverse(num_workgroup)), max(_GLF_FUZZED(bitfieldReverse(num_workgroup)), _GLF_FUZZED(bitfieldReverse(num_workgroup)))))) >> 0u), (_GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_FUZZED(bitfieldReverse(num_workgroup)), max(_GLF_FUZZED(bitfieldReverse(num_workgroup)), _GLF_FUZZED(_GLF_IDENTITY(bitfieldReverse(num_workgroup), _GLF_IDENTITY(uint(uvec2(bitfieldReverse(num_workgroup), 0u)), (uint(uvec2(bitfieldReverse(num_workgroup), 0u))) >> 0u)))))), (~ (_GLF_IDENTITY(_GLF_FUZZED(bitfieldReverse(num_workgroup)), max(_GLF_FUZZED(bitfieldReverse(num_workgroup)), _GLF_FUZZED(bitfieldReverse(num_workgroup)))))) >> 0u)) ^ 0u)) : _GLF_FUZZED(subgroup_size)))))))), _GLF_IDENTITY(max(_GLF_IDENTITY((workgroup_base + subgroup_base), (true ? _GLF_IDENTITY((workgroup_base + subgroup_base), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? (workgroup_base + subgroup_base) : _GLF_FUZZED(bitfieldExtract(workgroup_size, -44652, floatBitsToInt(-61.73))))) : _GLF_IDENTITY(_GLF_FUZZED(bitfieldReverse(_GLF_IDENTITY(num_workgroup, (num_workgroup) ^ 0u))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_FUZZED(bitfieldReverse(num_workgroup)), _GLF_IDENTITY(max(_GLF_FUZZED(bitfieldReverse(num_workgroup)), _GLF_FUZZED(_GLF_IDENTITY(bitfieldReverse(num_workgroup), _GLF_IDENTITY(uint(uvec2(bitfieldReverse(num_workgroup), 0u)), (uint(uvec2(bitfieldReverse(num_workgroup), 0u))) >> 0u)))), min(max(_GLF_FUZZED(bitfieldReverse(num_workgroup)), _GLF_FUZZED(_GLF_IDENTITY(bitfieldReverse(num_workgroup), _GLF_IDENTITY(uint(uvec2(bitfieldReverse(num_workgroup), _GLF_IDENTITY(0u, min(0u, 0u)))), (uint(uvec2(bitfieldReverse(num_workgroup), 0u))) >> 0u)))), _GLF_IDENTITY(max(_GLF_FUZZED(bitfieldReverse(num_workgroup)), _GLF_FUZZED(_GLF_IDENTITY(bitfieldReverse(num_workgroup), _GLF_IDENTITY(uint(uvec2(bitfieldReverse(num_workgroup), 0u)), (uint(_GLF_IDENTITY(uvec2(bitfieldReverse(_GLF_IDENTITY(num_workgroup, (num_workgroup) << 0u)), 0u), uvec2(0u, 0u) | (_GLF_IDENTITY(uvec2(bitfieldReverse(num_workgroup), 0u), (uvec2(bitfieldReverse(num_workgroup), 0u)) - (uvec2(0u, 0u) | uvec2(0u, 0u))))))) >> 0u)))), clamp(max(_GLF_FUZZED(bitfieldReverse(num_workgroup)), _GLF_FUZZED(_GLF_IDENTITY(bitfieldReverse(num_workgroup), _GLF_IDENTITY(_GLF_IDENTITY(uint(uvec2(bitfieldReverse(num_workgroup), 0u)), 0u + (uint(uvec2(bitfieldReverse(num_workgroup), 0u)))), (uint(uvec2(bitfieldReverse(num_workgroup), 0u))) >> 0u)))), max(_GLF_FUZZED(bitfieldReverse(num_workgroup)), _GLF_FUZZED(_GLF_IDENTITY(bitfieldReverse(num_workgroup), _GLF_IDENTITY(uint(uvec2(bitfieldReverse(num_workgroup), 0u)), (uint(uvec2(bitfieldReverse(num_workgroup), 0u))) >> 0u)))), max(_GLF_FUZZED(bitfieldReverse(num_workgroup)), _GLF_FUZZED(_GLF_IDENTITY(bitfieldReverse(num_workgroup), _GLF_IDENTITY(uint(uvec2(bitfieldReverse(num_workgroup), 0u)), (uint(uvec2(bitfieldReverse(num_workgroup), 0u))) >> 0u)))))))))), (~ (_GLF_IDENTITY(_GLF_FUZZED(bitfieldReverse(num_workgroup)), max(_GLF_FUZZED(bitfieldReverse(_GLF_IDENTITY(num_workgroup, 0u | (num_workgroup)))), _GLF_FUZZED(bitfieldReverse(num_workgroup)))))) >> 0u))))), _GLF_IDENTITY((workgroup_base + subgroup_base), (true ? _GLF_IDENTITY((_GLF_IDENTITY(workgroup_base, (workgroup_base) - 0u) + subgroup_base), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY((workgroup_base + subgroup_base), (false ? _GLF_FUZZED((workgroup_size + workgroup_size)) : (workgroup_base + subgroup_base))) : _GLF_FUZZED(bitfieldExtract(workgroup_size, -44652, floatBitsToInt(-61.73))))) : _GLF_IDENTITY(_GLF_FUZZED(bitfieldReverse(num_workgroup)), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_FUZZED(bitfieldReverse(num_workgroup)), max(_GLF_FUZZED(bitfieldReverse(num_workgroup)), _GLF_FUZZED(_GLF_IDENTITY(bitfieldReverse(num_workgroup), _GLF_IDENTITY(uint(uvec2(bitfieldReverse(num_workgroup), 0u)), (uint(uvec2(bitfieldReverse(num_workgroup), 0u))) >> 0u)))))), (~ (_GLF_IDENTITY(_GLF_FUZZED(bitfieldReverse(_GLF_IDENTITY(num_workgroup, (num_workgroup) | (num_workgroup)))), max(_GLF_FUZZED(bitfieldReverse(num_workgroup)), _GLF_FUZZED(bitfieldReverse(num_workgroup)))))) >> 0u)))))), ~ (~ (max(_GLF_IDENTITY((_GLF_IDENTITY(workgroup_base + subgroup_base, (workgroup_base + subgroup_base) << 0u)), (true ? _GLF_IDENTITY((_GLF_IDENTITY(workgroup_base, (true ? _GLF_IDENTITY(workgroup_base, (workgroup_base) ^ 0u) : _GLF_FUZZED(subgroup_size))) + subgroup_base), (_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-7447.4651)), bool(false))) < injectionSwitch.y)) ? (workgroup_base + subgroup_base) : _GLF_FUZZED(bitfieldExtract(workgroup_size, -44652, floatBitsToInt(-61.73))))) : _GLF_IDENTITY(_GLF_FUZZED(bitfieldReverse(_GLF_IDENTITY(_GLF_IDENTITY(num_workgroup, min(_GLF_IDENTITY(num_workgroup, (true ? num_workgroup : _GLF_FUZZED(workgroup_id))), num_workgroup)), (num_workgroup) ^ 0u))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_FUZZED(bitfieldReverse(num_workgroup)), _GLF_IDENTITY(max(_GLF_IDENTITY(_GLF_FUZZED(bitfieldReverse(num_workgroup)), (0u << _GLF_IDENTITY(uint(2u), uint(2u))) + (_GLF_FUZZED(bitfieldReverse(num_workgroup)))), _GLF_FUZZED(_GLF_IDENTITY(bitfieldReverse(num_workgroup), _GLF_IDENTITY(uint(uvec2(bitfieldReverse(num_workgroup), 0u)), (uint(uvec2(bitfieldReverse(num_workgroup), 0u))) >> 0u)))), min(max(_GLF_FUZZED(bitfieldReverse(num_workgroup)), _GLF_FUZZED(_GLF_IDENTITY(bitfieldReverse(num_workgroup), _GLF_IDENTITY(uint(uvec2(bitfieldReverse(num_workgroup), 0u)), (uint(uvec2(bitfieldReverse(num_workgroup), 0u))) >> 0u)))), _GLF_IDENTITY(_GLF_IDENTITY(max(_GLF_FUZZED(bitfieldReverse(num_workgroup)), _GLF_FUZZED(_GLF_IDENTITY(bitfieldReverse(num_workgroup), _GLF_IDENTITY(uint(uvec2(bitfieldReverse(num_workgroup), 0u)), _GLF_IDENTITY((uint(uvec2(bitfieldReverse(num_workgroup), 0u))), ((uint(uvec2(bitfieldReverse(num_workgroup), 0u)))) * 1u) >> 0u)))), uint(_GLF_IDENTITY(uvec3(max(_GLF_FUZZED(bitfieldReverse(num_workgroup)), _GLF_FUZZED(_GLF_IDENTITY(bitfieldReverse(num_workgroup), _GLF_IDENTITY(uint(uvec2(bitfieldReverse(num_workgroup), 0u)), _GLF_IDENTITY((uint(uvec2(bitfieldReverse(num_workgroup), 0u))), ((uint(uvec2(bitfieldReverse(num_workgroup), 0u)))) * 1u) >> 0u)))), (0u ^ 0u), 0u), uvec3(0u, 0u, 0u) ^ (uvec3(max(_GLF_FUZZED(bitfieldReverse(num_workgroup)), _GLF_FUZZED(_GLF_IDENTITY(bitfieldReverse(num_workgroup), _GLF_IDENTITY(uint(uvec2(bitfieldReverse(num_workgroup), 0u)), _GLF_IDENTITY((uint(uvec2(bitfieldReverse(num_workgroup), 0u))), ((uint(uvec2(bitfieldReverse(num_workgroup), 0u)))) * 1u) >> 0u)))), (0u ^ 0u), 0u))))), clamp(max(_GLF_FUZZED(bitfieldReverse(num_workgroup)), _GLF_FUZZED(_GLF_IDENTITY(bitfieldReverse(num_workgroup), _GLF_IDENTITY(uint(uvec2(bitfieldReverse(num_workgroup), 0u)), (uint(uvec2(bitfieldReverse(num_workgroup), 0u))) >> 0u)))), max(_GLF_FUZZED(bitfieldReverse(num_workgroup)), _GLF_FUZZED(_GLF_IDENTITY(bitfieldReverse(num_workgroup), _GLF_IDENTITY(_GLF_IDENTITY(uint(uvec2(bitfieldReverse(num_workgroup), 0u)), uint(uvec3(uint(uvec2(bitfieldReverse(num_workgroup), 0u)), 0u, (1u & 1u)))), (uint(uvec2(bitfieldReverse(num_workgroup), 0u))) >> 0u)))), max(_GLF_FUZZED(bitfieldReverse(num_workgroup)), _GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(bitfieldReverse(num_workgroup), _GLF_IDENTITY(uint(uvec2(bitfieldReverse(num_workgroup), 0u)), (uint(uvec2(bitfieldReverse(num_workgroup), 0u))) >> 0u))), uint(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(bitfieldReverse(num_workgroup), _GLF_IDENTITY(uint(uvec2(bitfieldReverse(num_workgroup), 0u)), (uint(uvec2(bitfieldReverse(num_workgroup), 0u))) >> 0u))), uint(_GLF_IDENTITY(uvec4(_GLF_FUZZED(_GLF_IDENTITY(bitfieldReverse(num_workgroup), _GLF_IDENTITY(uint(uvec2(bitfieldReverse(num_workgroup), 0u)), (uint(uvec2(bitfieldReverse(num_workgroup), 0u))) >> 0u))), 0u, 0u, 1u), ~ (~ (uvec4(_GLF_FUZZED(_GLF_IDENTITY(bitfieldReverse(num_workgroup), _GLF_IDENTITY(uint(uvec2(bitfieldReverse(num_workgroup), 0u)), (uint(uvec2(bitfieldReverse(num_workgroup), 0u))) >> 0u))), 0u, 0u, 1u)))))), 0u), (uvec2(_GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(bitfieldReverse(num_workgroup), _GLF_IDENTITY(uint(uvec2(bitfieldReverse(num_workgroup), 0u)), (uint(uvec2(bitfieldReverse(num_workgroup), 0u))) >> 0u))), uint(_GLF_IDENTITY(uvec4(_GLF_FUZZED(_GLF_IDENTITY(bitfieldReverse(num_workgroup), _GLF_IDENTITY(uint(uvec2(bitfieldReverse(num_workgroup), 0u)), (uint(uvec2(bitfieldReverse(num_workgroup), 0u))) >> 0u))), 0u, 0u, 1u), ~ (~ (uvec4(_GLF_FUZZED(_GLF_IDENTITY(bitfieldReverse(num_workgroup), _GLF_IDENTITY(uint(uvec2(bitfieldReverse(num_workgroup), 0u)), (uint(uvec2(bitfieldReverse(num_workgroup), 0u))) >> 0u))), 0u, 0u, 1u)))))), 0u)) * uvec2(1u, 1u))))))))))), (~ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(bitfieldReverse(num_workgroup)), uint(_GLF_IDENTITY(uvec3(_GLF_FUZZED(bitfieldReverse(num_workgroup)), 1u, 0u), max(uvec3(_GLF_FUZZED(bitfieldReverse(num_workgroup)), 1u, 0u), uvec3(_GLF_FUZZED(bitfieldReverse(num_workgroup)), 1u, 0u))))), max(_GLF_FUZZED(bitfieldReverse(num_workgroup)), _GLF_FUZZED(bitfieldReverse(num_workgroup)))))) >> 0u))))), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, (true ? workgroup_base : _GLF_FUZZED(subgroup_id))) + subgroup_base, clamp(workgroup_base + subgroup_base, workgroup_base + subgroup_base, workgroup_base + subgroup_base))), (true ? _GLF_IDENTITY((workgroup_base + subgroup_base), (_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(vec2(injectionSwitch)), _GLF_IDENTITY((vec2(vec2(injectionSwitch))) * mat2(1.0), min((vec2(vec2(injectionSwitch))) * mat2(1.0), (vec2(vec2(injectionSwitch))) * mat2(1.0))))).x < injectionSwitch.y)) ? _GLF_IDENTITY((workgroup_base + subgroup_base), (false ? _GLF_FUZZED((workgroup_size + workgroup_size)) : (workgroup_base + subgroup_base))) : _GLF_FUZZED(bitfieldExtract(workgroup_size, -44652, floatBitsToInt(-61.73))))) : _GLF_IDENTITY(_GLF_FUZZED(bitfieldReverse(num_workgroup)), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_FUZZED(bitfieldReverse(num_workgroup)), max(_GLF_FUZZED(_GLF_IDENTITY(bitfieldReverse(num_workgroup), min(_GLF_IDENTITY(bitfieldReverse(num_workgroup), (bitfieldReverse(num_workgroup)) ^ 0u), bitfieldReverse(num_workgroup)))), _GLF_FUZZED(_GLF_IDENTITY(bitfieldReverse(num_workgroup), _GLF_IDENTITY(uint(uvec2(bitfieldReverse(num_workgroup), 0u)), (uint(uvec2(bitfieldReverse(num_workgroup), 0u))) >> 0u)))))), (~ (_GLF_IDENTITY(_GLF_FUZZED(bitfieldReverse(num_workgroup)), max(_GLF_FUZZED(_GLF_IDENTITY(bitfieldReverse(num_workgroup), clamp(bitfieldReverse(num_workgroup), bitfieldReverse(num_workgroup), _GLF_IDENTITY(bitfieldReverse(num_workgroup), (0u << _GLF_IDENTITY(uint(8u), uint(8u))) + (bitfieldReverse(num_workgroup)))))), _GLF_FUZZED(bitfieldReverse(num_workgroup)))))) >> 0u))))))))))))) | 0u) + subgroup_local_id;
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(479.404)), float(_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-497.958)), bool(false)))), bool(true))) > injectionSwitch.y)))) || false))), false || (! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(479.404)), float(_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-497.958)), bool(false)))), bool(true))) > _GLF_IDENTITY(injectionSwitch.y, float(mat2x4(injectionSwitch.y, 0.0, 0.0, log(1.0), 0.0, 1.0, 0.0, 1.0))))))) || false)))))))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
    return;
   return;
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || _GLF_IDENTITY(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, (false) || false), false, true), bvec3(bvec4(bvec3(_GLF_IDENTITY(false, (false) || false), false, true), false))))), false || (false))))
  return;
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(clamp(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / exp(vec2(0.0, 0.0))), injectionSwitch), (_GLF_IDENTITY(clamp(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], mix(float(injectionSwitch[0]), float(_GLF_FUZZED(969.801)), bool(false))), injectionSwitch[1])), injectionSwitch, injectionSwitch)), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-8.0), _GLF_FUZZED(2.5)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))))), injectionSwitch)), (injectionSwitch) / exp(_GLF_IDENTITY(vec2(0.0, 0.0), mix(vec2(_GLF_IDENTITY((vec2(0.0, 0.0)), ((vec2(0.0, 0.0))) - vec2(0.0, 0.0))[0], _GLF_IDENTITY((vec2(0.0, 0.0))[1], min((vec2(_GLF_IDENTITY(0.0, (0.0) * 1.0), 0.0))[1], (vec2(0.0, 0.0))[1]))), vec2(_GLF_FUZZED(4.7), _GLF_FUZZED(0.8)), bvec2(_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false))))), injectionSwitch), max(clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / _GLF_IDENTITY(exp(vec2(_GLF_IDENTITY(0.0, 1.0 * (0.0)), 0.0)), (exp(vec2(_GLF_IDENTITY(0.0, 1.0 * (0.0)), 0.0))) / vec2(1.0, 1.0))), injectionSwitch), clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / exp(vec2(0.0, 0.0))), injectionSwitch)))) * vec2(1.0, 1.0))).x > injectionSwitch.y), true && ((_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / exp(vec2(0.0, 0.0))), injectionSwitch), _GLF_IDENTITY((_GLF_IDENTITY(clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch))) / exp(vec2(0.0, 0.0))), injectionSwitch), max(clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / _GLF_IDENTITY(exp(vec2(_GLF_IDENTITY(0.0, 1.0 * (0.0)), 0.0)), (exp(vec2(_GLF_IDENTITY(0.0, 1.0 * (0.0)), 0.0))) / vec2(1.0, 1.0))), injectionSwitch), clamp(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)), injectionSwitch, injectionSwitch)))), (injectionSwitch) / exp(vec2(0.0, 0.0))), injectionSwitch)))), mat2(1.0) * ((_GLF_IDENTITY(clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch))) / exp(vec2(0.0, 0.0))), injectionSwitch), max(clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / _GLF_IDENTITY(exp(vec2(_GLF_IDENTITY(0.0, 1.0 * (_GLF_IDENTITY(0.0, min(0.0, 0.0)))), 0.0)), (exp(vec2(_GLF_IDENTITY(0.0, 1.0 * (0.0)), 0.0))) / vec2(1.0, 1.0))), injectionSwitch), clamp(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)), injectionSwitch, injectionSwitch)))), (injectionSwitch) / exp(vec2(0.0, 0.0))), injectionSwitch)))))) * vec2(1.0, 1.0))).x > injectionSwitch.y))))), bool(bvec3(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(7.2), _GLF_FUZZED(_GLF_IDENTITY(3399.5889, mix(float(3399.5889), float(_GLF_FUZZED((6.0 / -313.058))), _GLF_IDENTITY(bool(false), ! (! (bool(false)))))))), vec2((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch)[1], ((injectionSwitch)[1]) - 0.0)), bvec2(true, true)))) / exp(vec2(0.0, 0.0))), injectionSwitch), (_GLF_IDENTITY(clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / exp(vec2(0.0, _GLF_IDENTITY(0.0, min(0.0, _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-39.75)), float(0.0), bool(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, (true) || false)) || false))))))))), injectionSwitch), max(clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / exp(vec2(_GLF_IDENTITY(0.0, 1.0 * (0.0)), 0.0))), injectionSwitch), clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / exp(vec2(_GLF_IDENTITY(0.0, (0.0) * 1.0), 0.0))), injectionSwitch)))) * vec2(1.0, 1.0))), max(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), _GLF_IDENTITY(clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / exp(vec2(0.0, 0.0))), injectionSwitch), (_GLF_IDENTITY(clamp(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / exp(vec2(0.0, 0.0))), (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / exp(vec2(0.0, 0.0)))) * mat2(1.0)), injectionSwitch), max(clamp(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) / exp(vec2(_GLF_IDENTITY(0.0, 1.0 * (0.0)), 0.0)), mix(vec2(((injectionSwitch) / exp(vec2(_GLF_IDENTITY(0.0, 1.0 * (0.0)), 0.0)))[0], _GLF_FUZZED(-5333.8121)), vec2(_GLF_FUZZED(2143.5191), ((injectionSwitch) / exp(vec2(_GLF_IDENTITY(0.0, 1.0 * _GLF_IDENTITY((0.0), max((0.0), (0.0)))), 0.0)))[1]), bvec2(false, true)))), (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / exp(vec2(_GLF_IDENTITY(0.0, 1.0 * (0.0)), 0.0)))) / vec2(1.0, 1.0)), injectionSwitch), clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / exp(_GLF_IDENTITY(vec2(0.0, 0.0), clamp(vec2(0.0, 0.0), vec2(0.0, 0.0), vec2(0.0, 0.0))))), injectionSwitch)))) * vec2(1.0, 1.0))), min(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / exp(vec2(0.0, 0.0))), injectionSwitch), (_GLF_IDENTITY(clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / exp(vec2(0.0, 0.0))), injectionSwitch), max(clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / exp(vec2(_GLF_IDENTITY(0.0, 1.0 * (0.0)), 0.0))), injectionSwitch), clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / exp(vec2(0.0, 0.0))), injectionSwitch)))) * vec2(1.0, 1.0))), _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(clamp(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], min(injectionSwitch[0], injectionSwitch[0])), injectionSwitch[1])), (injectionSwitch) / exp(vec2(_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED((float(false) / -885.698))), float(0.0), bool(true))), 0.0))), _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED((vec4(9.4, 62.19, -3.5, 6186.6147).s + 85.01)), _GLF_FUZZED(-7.7)), vec2(_GLF_IDENTITY((injectionSwitch)[0], clamp(_GLF_IDENTITY((injectionSwitch)[0], min((injectionSwitch)[0], (injectionSwitch)[0])), (injectionSwitch)[0], (injectionSwitch)[0])), (injectionSwitch)[1]), bvec2(true, true)))), (_GLF_IDENTITY(clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / exp(vec2(0.0, 0.0))), injectionSwitch), max(clamp(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-864.243), _GLF_FUZZED(4.3)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))), (injectionSwitch) / exp(vec2(_GLF_IDENTITY(0.0, 1.0 * (0.0)), 0.0))), injectionSwitch), clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch), mix(vec2(_GLF_IDENTITY(((injectionSwitch))[0], _GLF_IDENTITY(float(mat4x2(((injectionSwitch))[0], 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0)), (true ? float(mat4x2(((injectionSwitch))[0], 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0)) : _GLF_FUZZED(-2710.9940)))), _GLF_FUZZED(-3.3)), vec2(_GLF_FUZZED(float(uint(true))), ((injectionSwitch))[1]), bvec2(false, true))) / _GLF_IDENTITY(exp(vec2(0.0, 0.0)), mix(vec2((exp(vec2(0.0, 0.0)))[0], _GLF_FUZZED(932.230)), vec2(_GLF_FUZZED((float(72874) * 8.8)), (exp(vec2(0.0, 0.0)))[1]), bvec2(false, true)))), injectionSwitch)))) * vec2(1.0, 1.0))))), _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / exp(vec2(0.0, 0.0))), injectionSwitch), (_GLF_IDENTITY(clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / exp(vec2(0.0, 0.0))), injectionSwitch), max(clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / exp(vec2(_GLF_IDENTITY(0.0, 1.0 * (0.0)), 0.0))), injectionSwitch), clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / exp(vec2(_GLF_IDENTITY(0.0, float(mat2x3(0.0, 0.0, 1.0, _GLF_IDENTITY(dot(vec3(0.0, 1.0, 1.0), vec3(1.0, 0.0, 0.0)), dot(vec3(0.0, 1.0, 1.0), vec3(1.0, 0.0, 0.0))), 0.0, 1.0))), 0.0))), injectionSwitch)))) * vec2(_GLF_IDENTITY(1.0, (true ? _GLF_IDENTITY(1.0, max(1.0, 1.0)) : _GLF_FUZZED(2.2))), 1.0))))).x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), clamp((injectionSwitch) * mat2(1.0), (injectionSwitch) * mat2(1.0), (injectionSwitch) * mat2(1.0)))).y))), true, true))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
   return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
  return;
 uint next_virtual_gid = workgroup_base + subgroup_base + ((_GLF_IDENTITY(subgroup_local_id, max(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) << (0u << _GLF_IDENTITY(_GLF_IDENTITY(uint(8u), uint(8u)), (_GLF_IDENTITY(uint(8u), uint(8u))) | (_GLF_IDENTITY(uint(8u), uint(8u)))))), subgroup_local_id)) + 1) % subgroup_size);
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 atomicStore(buf[next_virtual_gid], uint(1), 4, 64, 4);
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), false || (! (false)))))))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   return;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 uint read = atomicLoad(buf[virtual_gid], _GLF_IDENTITY(4, (4) >> 0), 64, 2);
 subgroupBarrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), _GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_TRUE(true, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + determinant(mat2(0.0, abs(1.0), 0.0, 0.0))) < injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + determinant(mat2(0.0, abs(1.0), 0.0, 0.0))) < injectionSwitch.y))), ! (! (injectionSwitch.x < injectionSwitch.y))))) && (false)), bool(bvec4(_GLF_IDENTITY(false, bool(bool(false))), false, _GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), false || (_GLF_IDENTITY(false, true && (false)))), false))), false, _GLF_IDENTITY(true, false || _GLF_IDENTITY((true), ! (! ((true)))))))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_DEAD(false))
  return;
 atomicStore(checker[virtual_gid], read, 4, 64, 4);
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END
BUFFER checker DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected_checker DATA_TYPE uint32 SIZE 8388096 FILL 1

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 
  BIND BUFFER checker AS storage DESCRIPTOR_SET 0 BINDING 2 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT checker EQ_BUFFER expected_checker
