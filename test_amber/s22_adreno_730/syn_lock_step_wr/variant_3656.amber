#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_8 {
 float _f0;
} ;

struct _GLF_struct_7 {
 uint _f0;
 bool _f1;
 mat4x2 _f2;
 mat4 _f3;
} ;

struct _GLF_struct_9 {
 mat3x4 _f0;
 _GLF_struct_7 _f1;
 uint next_virtual_gid;
 _GLF_struct_8 _f2;
} ;

struct _GLF_struct_10 {
 mat2x3 _f0;
 uint _f1;
 _GLF_struct_9 _f2;
} ;

struct _GLF_struct_4 {
 mat4x3 _f0;
 vec4 _f1;
 uint num_workgroup;
 bvec4 _f2;
} ;

struct _GLF_struct_5 {
 _GLF_struct_4 _f0;
 bvec2 _f1;
} ;

struct _GLF_struct_2 {
 uvec2 _f0;
 vec2 _f1;
 uint _f2;
 uint _f3;
} ;

struct _GLF_struct_1 {
 mat2 _f0;
 uvec3 _f1;
} ;

struct _GLF_struct_0 {
 bvec4 _f0;
 uvec3 _f1;
 bvec2 _f2;
 mat4x2 _f3;
 mat4 _f4;
 mat2 _f5;
} ;

struct _GLF_struct_3 {
 ivec4 _f0;
 _GLF_struct_0 _f1;
 _GLF_struct_1 _f2;
 mat3x2 _f3;
 _GLF_struct_2 _f4;
} ;

struct _GLF_struct_6 {
 _GLF_struct_3 _f0;
 _GLF_struct_5 _f1;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uvec3 GLF_merged2_0_2_51_2_1_14GLF_merged2_0_1_13_1_1_13num_workgroupsubgroup_baseworkgroup_size;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec3(injectionSwitch.x > injectionSwitch.y, true, false)))))))
  return;
 uvec2 GLF_merged2_0_1_13_1_1_13num_workgroupsubgroup_base;
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || _GLF_IDENTITY(false, false || (false)))))
  {
   for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     return;
    }
  }
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 & 1)); _injected_loop_counter ++)
  {
   for(int _injected_loop_counter = _GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), _GLF_IDENTITY((int(_GLF_ONE(1.0, injectionSwitch.y))), ~ (~ (_GLF_IDENTITY((int(_GLF_ONE(1.0, injectionSwitch.y))), int(ivec2((int(_GLF_ONE(1.0, injectionSwitch.y))), 0)))))) | (int(_GLF_ONE(1.0, injectionSwitch.y)))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     GLF_merged2_0_2_51_2_1_14GLF_merged2_0_1_13_1_1_13num_workgroupsubgroup_baseworkgroup_size.xy = GLF_merged2_0_1_13_1_1_13num_workgroupsubgroup_base;
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
    return;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec2(false, true))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bvec2(false, true)))), bool(bvec2(! (_GLF_IDENTITY(false, bool(bvec2(false, true)))), true)))))))
    return;
   return;
  }
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(false))
  return;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 _GLF_struct_6 _GLF_struct_replacement_6 = _GLF_struct_6(_GLF_struct_3(ivec4(_GLF_IDENTITY(1, (1) | (1))), _GLF_struct_0(bvec4(true), uvec3(1u), bvec2(true), mat4x2(1.0), mat4(1.0), mat2(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(-1.8) : 1.0))) * _GLF_IDENTITY(cos(0.0), (cos(0.0)) / determinant(mat2(1.0, 1.0, 0.0, 1.0)))))), _GLF_struct_1(mat2(1.0), uvec3(1u)), mat3x2(1.0), _GLF_struct_2(uvec2(1u), vec2(1.0), 1u, 1u)), _GLF_struct_5(_GLF_struct_4(mat4x3(1.0), vec4(1.0), _GLF_IDENTITY(gl_NumWorkGroups, clamp(gl_NumWorkGroups, gl_NumWorkGroups, gl_NumWorkGroups)).x, bvec4(_GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, true && (true)))))), bvec2(_GLF_IDENTITY(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, bool(bvec2(true, true)))), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))))) || (! (true))))), (_GLF_IDENTITY(true, ! (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY(true, bool(bvec2(true, true)))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (! _GLF_IDENTITY((true), ((true)) || false))), (_GLF_IDENTITY(! (_GLF_IDENTITY(true, bool(bvec2(true, true)))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (! _GLF_IDENTITY((true), ((true)) || false)))) && true)))) && true))));
 if(_GLF_DEAD(false))
  return;
 if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 GLF_merged2_0_2_51_2_1_14GLF_merged2_0_1_13_1_1_13num_workgroupsubgroup_baseworkgroup_size.xy.x = _GLF_struct_replacement_6._f1._f0.num_workgroup;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 do
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
    return;
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  return;
 for(int _injected_loop_counter = (0 | (_GLF_IDENTITY(0 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(3, (_GLF_IDENTITY(3, 0 | (3))) | (_GLF_IDENTITY(3, (3) ^ 0)))), max(int(_GLF_IDENTITY(3, (_GLF_IDENTITY(3, 0 | (3))) | (_GLF_IDENTITY(3, (3) ^ 0)))), int(_GLF_IDENTITY(3, (_GLF_IDENTITY(3, 0 | (3))) | (_GLF_IDENTITY(3, (3) ^ 0)))))), int(ivec4(int(3), 1, 0, 0)))), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) ? _GLF_FUZZED(_GLF_IDENTITY(18119, max(18119, 18119))) : 0 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), int(ivec4(int(3), 1, 0, 0)))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(_GLF_IDENTITY(int(6), (false ? _GLF_FUZZED(_injected_loop_counter) : int(6))), 0 ^ (_GLF_IDENTITY(int(6), (int(_GLF_IDENTITY(6, _GLF_IDENTITY(int(ivec2(_GLF_IDENTITY(6, ~ (~ (6))), 0)), ~ (_GLF_IDENTITY(~ _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(int(ivec2(_GLF_IDENTITY(6, ~ (~ (6))), 0)), max(int(ivec2(_GLF_IDENTITY(6, ~ (~ (6))), 0)), int(ivec2(_GLF_IDENTITY(6, ~ (~ (6))), 0)))), 0 + (_GLF_IDENTITY(int(ivec2(_GLF_IDENTITY(6, _GLF_IDENTITY(~ (~ (6)), (~ (~ (6))) | (~ (~ (6))))), 0)), (_GLF_IDENTITY(int(ivec2(_GLF_IDENTITY(6, ~ (~ (6))), 0)), (int(ivec2(_GLF_IDENTITY(6, ~ (~ (6))), 0))) / 1)) * int(_GLF_ONE(1.0, injectionSwitch.y)))))), clamp((_GLF_IDENTITY(_GLF_IDENTITY(int(ivec2(_GLF_IDENTITY(6, ~ (~ (6))), 0)), max(int(ivec2(_GLF_IDENTITY(6, _GLF_IDENTITY(~ (~ (6)), (~ (~ (6))) ^ ((27364 & 0) | 0))), 0)), int(ivec2(_GLF_IDENTITY(6, ~ (~ (6))), 0)))), 0 + (_GLF_IDENTITY(int(ivec2(_GLF_IDENTITY(6, ~ (~ (6))), 0)), (int(ivec2(_GLF_IDENTITY(6, ~ (_GLF_IDENTITY(~ (6), ~ (_GLF_IDENTITY(~ (~ (6)), (_GLF_IDENTITY(~ (~ (6)), (~ (~ (6))) | (~ (~ (6))))) | (0 << _GLF_IDENTITY(int(0), int(0)))))))), 0))) * int(_GLF_ONE(1.0, injectionSwitch.y)))))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(ivec2(_GLF_IDENTITY(6, ~ (~ (6))), 0)), max(int(ivec2(_GLF_IDENTITY(6, ~ (~ (6))), 0)), int(ivec2(_GLF_IDENTITY(6, ~ (~ (6))), 0)))), 0 + (_GLF_IDENTITY(int(ivec2(_GLF_IDENTITY(6, ~ (~ (6))), 0)), (int(ivec2(_GLF_IDENTITY(6, ~ (~ (6))), 0))) * int(_GLF_ONE(1.0, injectionSwitch.y))))), (_GLF_IDENTITY(_GLF_IDENTITY(int(ivec2(_GLF_IDENTITY(6, ~ (~ (6))), 0)), max(int(ivec2(_GLF_IDENTITY(6, ~ (~ (6))), 0)), int(ivec2(_GLF_IDENTITY(6, ~ (~ (6))), 0)))), 0 + (_GLF_IDENTITY(int(ivec2(_GLF_IDENTITY(6, ~ (~ (6))), 0)), (int(ivec2(_GLF_IDENTITY(6, ~ (~ (6))), 0))) * int(_GLF_ONE(1.0, injectionSwitch.y)))))) << 0)), (_GLF_IDENTITY(_GLF_IDENTITY(int(ivec2(_GLF_IDENTITY(6, ~ (~ (6))), 0)), max(int(ivec2(_GLF_IDENTITY(6, ~ (~ (6))), _GLF_IDENTITY(0, (_GLF_IDENTITY(0, 0 ^ (0))) >> (0 ^ 0)))), int(ivec2(_GLF_IDENTITY(6, ~ (~ (6))), 0)))), 0 + (_GLF_IDENTITY(int(ivec2(_GLF_IDENTITY(6, ~ (~ (6))), 0)), (int(ivec2(_GLF_IDENTITY(6, ~ (~ (6))), 0))) * int(_GLF_ONE(1.0, injectionSwitch.y)))))))), clamp(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(int(ivec2(_GLF_IDENTITY(6, ~ (_GLF_IDENTITY(~ (6), ~ (~ (~ (6)))))), 0)), max(int(ivec2(_GLF_IDENTITY(6, ~ (~ (6))), 0)), int(ivec2(_GLF_IDENTITY(6, ~ (~ (6))), 0)))), 0 + (_GLF_IDENTITY(int(ivec2(_GLF_IDENTITY(6, ~ (~ (6))), 0)), (int(ivec2(_GLF_IDENTITY(6, _GLF_IDENTITY(~ (~ (6)), (~ (~ (6))) - int(_GLF_ZERO(0.0, injectionSwitch.x)))), 0))) * int(_GLF_ONE(1.0, injectionSwitch.y)))))), clamp((_GLF_IDENTITY(_GLF_IDENTITY(int(ivec2(_GLF_IDENTITY(6, ~ (~ (6))), 0)), max(int(ivec2(_GLF_IDENTITY(_GLF_IDENTITY(6, ~ (~ (6))), (_GLF_IDENTITY(6, ~ (~ (6)))) >> 0), 0)), int(ivec2(_GLF_IDENTITY(6, ~ (~ (6))), 0)))), 0 + (_GLF_IDENTITY(int(ivec2(_GLF_IDENTITY(6, ~ (~ (6))), 0)), (int(ivec2(_GLF_IDENTITY(6, ~ (~ (6))), 0))) * int(_GLF_ONE(1.0, injectionSwitch.y)))))), (_GLF_IDENTITY(_GLF_IDENTITY(int(ivec2(_GLF_IDENTITY(6, ~ (~ (6))), 0)), max(int(ivec2(_GLF_IDENTITY(6, _GLF_IDENTITY(~ (~ (6)), 0 + (~ (~ (6))))), 0)), int(ivec2(_GLF_IDENTITY(6, ~ (~ (6))), 0)))), 0 + (_GLF_IDENTITY(int(ivec2(_GLF_IDENTITY(6, ~ (~ (6))), 0)), (int(ivec2(_GLF_IDENTITY(6, ~ (_GLF_IDENTITY(~ (6), min(~ (6), ~ (6))))), 0))) * int(_GLF_ONE(1.0, injectionSwitch.y)))))), (_GLF_IDENTITY(_GLF_IDENTITY(int(ivec2(_GLF_IDENTITY(6, ~ (~ (6))), 0)), max(int(ivec2(_GLF_IDENTITY(6, ~ (~ (6))), 0)), int(ivec2(_GLF_IDENTITY(6, ~ (~ (6))), 0)))), 0 + (_GLF_IDENTITY(int(ivec2(_GLF_IDENTITY(6, ~ (~ (6))), 0)), (int(ivec2(_GLF_IDENTITY(6, ~ (~ (6))), 0))) * int(_GLF_ONE(1.0, injectionSwitch.y)))))))), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(int(ivec2(_GLF_IDENTITY(6, ~ (~ (6))), 0)), max(int(ivec2(_GLF_IDENTITY(6, ~ (~ (6))), 0)), int(ivec2(_GLF_IDENTITY(6, ~ (~ (6))), 0)))), 0 + (_GLF_IDENTITY(int(ivec2(_GLF_IDENTITY(6, ~ (~ (6))), 0)), (int(ivec2(_GLF_IDENTITY(_GLF_IDENTITY(6, ~ (~ (6))), 1 * (_GLF_IDENTITY(6, ~ (~ (6))))), 0))) * int(_GLF_ONE(1.0, injectionSwitch.y)))))), clamp((_GLF_IDENTITY(_GLF_IDENTITY(int(ivec2(_GLF_IDENTITY(6, ~ (~ (6))), 0)), max(int(ivec2(_GLF_IDENTITY(6, ~ (~ (6))), 0)), int(ivec2(_GLF_IDENTITY(6, ~ (~ (6))), 0)))), 0 + (_GLF_IDENTITY(_GLF_IDENTITY(int(ivec2(_GLF_IDENTITY(6, ~ (~ (6))), 0)), (int(ivec2(_GLF_IDENTITY(6, ~ (~ (6))), 0))) * int(_GLF_ONE(1.0, injectionSwitch.y))), (true ? _GLF_IDENTITY(_GLF_IDENTITY(int(ivec2(_GLF_IDENTITY(6, ~ (~ (6))), 0)), (int(ivec2(_GLF_IDENTITY(6, ~ (~ (6))), 0))) * int(_GLF_ONE(1.0, injectionSwitch.y))), (_GLF_IDENTITY(_GLF_IDENTITY(int(ivec2(_GLF_IDENTITY(6, ~ (~ (6))), 0)), (int(ivec2(_GLF_IDENTITY(6, ~ (~ (6))), 0))) * int(_GLF_ONE(1.0, injectionSwitch.y))), (_GLF_IDENTITY(int(ivec2(_GLF_IDENTITY(6, ~ (~ (6))), 0)), (int(ivec2(_GLF_IDENTITY(6, ~ (~ (6))), 0))) * int(_GLF_ONE(1.0, injectionSwitch.y)))) ^ 0)) ^ 0) : _GLF_FUZZED(_injected_loop_counter)))))), (_GLF_IDENTITY(_GLF_IDENTITY(int(ivec2(_GLF_IDENTITY(6, ~ (~ (6))), 0)), max(int(ivec2(_GLF_IDENTITY(6, ~ (~ (6))), 0)), int(ivec2(_GLF_IDENTITY(6, _GLF_IDENTITY(~ (~ (6)), 1 * (_GLF_IDENTITY(~ (~ (6)), (~ (~ (6))) << 0)))), 0)))), 0 + (_GLF_IDENTITY(int(ivec2(_GLF_IDENTITY(6, ~ (~ (6))), 0)), (int(ivec2(_GLF_IDENTITY(6, _GLF_IDENTITY(~ (~ (6)), min(~ (~ (6)), ~ (~ (6))))), 0))) * int(_GLF_ONE(1.0, injectionSwitch.y)))))), (_GLF_IDENTITY(_GLF_IDENTITY(int(ivec2(_GLF_IDENTITY(6, ~ (~ (6))), _GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(89893))))), max(int(ivec2(_GLF_IDENTITY(6, ~ (~ (6))), 0)), int(ivec2(_GLF_IDENTITY(6, ~ (~ (6))), 0)))), 0 + (_GLF_IDENTITY(int(ivec2(_GLF_IDENTITY(6, ~ (~ (6))), 0)), (int(ivec2(_GLF_IDENTITY(6, ~ (~ (6))), 0))) * int(_GLF_ONE(1.0, injectionSwitch.y)))))))), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(int(ivec2(_GLF_IDENTITY(6, ~ (~ (6))), 0)), max(int(ivec2(_GLF_IDENTITY(6, ~ (~ (6))), 0)), int(ivec2(_GLF_IDENTITY(6, ~ (~ (6))), 0)))), 0 + (_GLF_IDENTITY(int(ivec2(_GLF_IDENTITY(6, ~ (~ (6))), 0)), (int(ivec2(_GLF_IDENTITY(6, ~ (~ (6))), 0))) * int(_GLF_ONE(1.0, injectionSwitch.y)))))), clamp((_GLF_IDENTITY(_GLF_IDENTITY(int(ivec2(_GLF_IDENTITY(6, ~ (~ (6))), 0)), max(int(ivec2(_GLF_IDENTITY(6, _GLF_IDENTITY(~ (~ (6)), (~ (~ (6))) ^ 0)), 0)), int(ivec2(_GLF_IDENTITY(6, ~ (~ (6))), 0)))), 0 + (_GLF_IDENTITY(int(ivec2(_GLF_IDENTITY(6, ~ (~ (6))), 0)), (int(ivec2(_GLF_IDENTITY(6, ~ (~ (6))), 0))) * int(_GLF_ONE(1.0, injectionSwitch.y)))))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(ivec2(_GLF_IDENTITY(6, ~ (~ (6))), 0)), max(int(ivec2(_GLF_IDENTITY(6, ~ (~ (6))), 0)), int(ivec2(_GLF_IDENTITY(6, ~ (~ (6))), 0)))), max(_GLF_IDENTITY(int(ivec2(_GLF_IDENTITY(6, ~ (~ (6))), 0)), max(int(ivec2(_GLF_IDENTITY(6, ~ (~ (6))), 0)), int(ivec2(_GLF_IDENTITY(6, ~ (~ (6))), 0)))), _GLF_IDENTITY(int(ivec2(_GLF_IDENTITY(6, ~ (~ (6))), 0)), max(int(ivec2(_GLF_IDENTITY(6, ~ (~ (6))), 0)), int(ivec2(_GLF_IDENTITY(6, ~ (~ (6))), 0)))))), 0 + (_GLF_IDENTITY(int(ivec2(_GLF_IDENTITY(6, ~ (~ (6))), 0)), (int(ivec2(_GLF_IDENTITY(_GLF_IDENTITY(6, ~ (~ (6))), ~ (~ (_GLF_IDENTITY(6, ~ (~ (6)))))), 0))) * int(_GLF_ONE(1.0, injectionSwitch.y)))))), (_GLF_IDENTITY(_GLF_IDENTITY(int(ivec2(_GLF_IDENTITY(6, ~ (~ (6))), 0)), max(int(ivec2(_GLF_IDENTITY(6, ~ (~ (6))), 0)), int(ivec2(_GLF_IDENTITY(6, ~ (~ (6))), 0)))), _GLF_IDENTITY(0 + (_GLF_IDENTITY(int(ivec2(_GLF_IDENTITY(6, ~ (~ (6))), 0)), (int(ivec2(_GLF_IDENTITY(6, ~ (~ (6))), 0))) * int(_GLF_ONE(1.0, injectionSwitch.y)))), (_GLF_IDENTITY(0 + (_GLF_IDENTITY(int(ivec2(_GLF_IDENTITY(6, ~ (~ (6))), 0)), (int(ivec2(_GLF_IDENTITY(6, ~ (~ (6))), 0))) * int(_GLF_ONE(1.0, injectionSwitch.y)))), (false ? _GLF_FUZZED(-25971) : 0 + (_GLF_IDENTITY(int(ivec2(_GLF_IDENTITY(6, ~ (~ (6))), 0)), (int(ivec2(_GLF_IDENTITY(6, ~ (~ (6))), 0))) * int(_GLF_ONE(1.0, injectionSwitch.y))))))) >> 0))))))), (~ (_GLF_IDENTITY(int(ivec2(_GLF_IDENTITY(6, ~ (~ _GLF_IDENTITY((6), ((6)) | ((6))))), 0)), 0 + (int(_GLF_IDENTITY(ivec2(_GLF_IDENTITY(_GLF_IDENTITY(6, ~ (~ (6))), max(_GLF_IDENTITY(6, _GLF_IDENTITY(~ (~ (6)), max(_GLF_IDENTITY(~ (~ (6)), ~ (~ (_GLF_IDENTITY(~ (~ (6)), ~ (~ (~ (~ (6)))))))), ~ (~ (6))))), _GLF_IDENTITY(6, ~ (~ (6))))), 0), min(ivec2(_GLF_IDENTITY(_GLF_IDENTITY(6, ~ (~ (6))), max(_GLF_IDENTITY(6, _GLF_IDENTITY(~ (~ (6)), max(_GLF_IDENTITY(~ (~ (6)), ~ (~ (~ (~ (6))))), ~ (~ (6))))), _GLF_IDENTITY(6, ~ (~ (6))))), 0), ivec2(_GLF_IDENTITY(_GLF_IDENTITY(6, ~ (~ (6))), max(_GLF_IDENTITY(6, _GLF_IDENTITY(~ (~ (6)), max(_GLF_IDENTITY(~ (_GLF_IDENTITY(~ (6), (~ (6)) | 0)), ~ (~ (~ (~ (6))))), ~ (~ (6))))), _GLF_IDENTITY(6, ~ (~ (6))))), 0)))))))) | (~ (_GLF_IDENTITY(int(ivec2(_GLF_IDENTITY(6, ~ (~ (6))), 0)), 0 + (int(ivec2(_GLF_IDENTITY(6, ~ (~ (6))), 0)))))))))))) | (int(6))))))) >> _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(6), max(_GLF_IDENTITY(int(_GLF_IDENTITY(6, (6) - 0)), _GLF_IDENTITY((_GLF_IDENTITY(int(6), (int(6)) - 0)), (_GLF_IDENTITY((_GLF_IDENTITY(int(6), (int(6)) - 0)), min((_GLF_IDENTITY(int(6), (int(6)) - 0)), (_GLF_IDENTITY(int(6), (int(6)) - 0))))) >> 0) - 0), int(6))), int(6)), _GLF_IDENTITY(min(_GLF_IDENTITY(_GLF_IDENTITY(int(6), max(_GLF_IDENTITY(int(6), (_GLF_IDENTITY(int(6), (int(6)) - 0)) - 0), int(6))), int(6)), _GLF_IDENTITY(_GLF_IDENTITY(int(6), max(_GLF_IDENTITY(int(6), (_GLF_IDENTITY(int(6), (int(6)) - 0)) - 0), int(6))), int(6))), ~ (~ (min(_GLF_IDENTITY(_GLF_IDENTITY(int(6), max(_GLF_IDENTITY(int(6), (_GLF_IDENTITY(int(6), (int(6)) - 0)) - 0), int(6))), int(6)), _GLF_IDENTITY(_GLF_IDENTITY(int(6), max(_GLF_IDENTITY(int(6), (_GLF_IDENTITY(int(6), (int(6)) - 0)) - 0), int(6))), int(6))))))))); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), injectionSwitch, injectionSwitch)).y) || false))), (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y))))) && true)))
      return;
     if(_GLF_DEAD(false))
      return;
     return;
    }
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false))))
  return;
 uint workgroup_size = gl_WorkGroupSize.x;
 _GLF_IDENTITY(GLF_merged2_0_2_51_2_1_14GLF_merged2_0_1_13_1_1_13num_workgroupsubgroup_baseworkgroup_size.z = _GLF_IDENTITY(workgroup_size, _GLF_IDENTITY(0u, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(0u, min(0u, 0u))), (~ (_GLF_IDENTITY(0u, min(0u, 0u)))) / 1u))) | (workgroup_size)), (GLF_merged2_0_2_51_2_1_14GLF_merged2_0_1_13_1_1_13num_workgroupsubgroup_baseworkgroup_size.z = _GLF_IDENTITY(workgroup_size, 0u | (workgroup_size))) << 0u);
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(_GLF_IDENTITY(1.7, min(1.7, 1.7)))), bool(false)))))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])))).x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (false)))))
      {
      }
     else
      {
       return;
      }
    }
  }
 else
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          return;
         return;
        }
       if(_GLF_DEAD(false))
        return;
      }
     else
      {
      }
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
          return;
         if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
          return;
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
        return;
       return;
       if(_GLF_DEAD(false))
        return;
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)).y))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
        {
         return;
        }
       if(_GLF_DEAD(false))
        return;
      }
     return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       return;
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))
        {
         if(_GLF_DEAD(false))
          return;
         return;
        }
      }
     else
      {
      }
    }
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
  }
 uint workgroup_base = _GLF_IDENTITY(GLF_merged2_0_2_51_2_1_14GLF_merged2_0_1_13_1_1_13num_workgroupsubgroup_baseworkgroup_size.z, 0u + (GLF_merged2_0_2_51_2_1_14GLF_merged2_0_1_13_1_1_13num_workgroupsubgroup_baseworkgroup_size.z)) * workgroup_id;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), bool(bool(! (_GLF_DEAD(false))))))))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, vec2(vec3(injectionSwitch, sin(0.0)))), injectionSwitch)).y))))
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 | 0)); _injected_loop_counter --)
      {
       return;
      }
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && _GLF_IDENTITY(true, (true) && true)), _GLF_IDENTITY((false), bool(_GLF_IDENTITY(bool((false)), (bool((false))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) && true)))
    {
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         break;
        }
       return;
       if(_GLF_DEAD(false))
        break;
      }
     while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true))));
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
  }
 uint subgroup_base = subgroup_id * _GLF_IDENTITY(subgroup_size, (subgroup_size) / 1u);
 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), (bool(false)) && true)))))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        return;
       for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))), (_GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x)))) && true); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          continue;
         return;
        }
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         return;
        }
       else
        {
        }
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(false))
        return;
      }
     else
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         return;
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
      }
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).y))))
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
        return;
       if(_GLF_DEAD(false))
        return;
      }
     else
      {
       return;
      }
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false) || (false))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       return;
       if(_GLF_DEAD(false))
        return;
      }
    }
   else
    {
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     do
      {
       do
        {
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(_GLF_IDENTITY(vec4(injectionSwitch, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 1.0), clamp(vec4(injectionSwitch, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 1.0), vec4(injectionSwitch, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 1.0), vec4(injectionSwitch, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 1.0)))), (true ? vec2(_GLF_IDENTITY(vec4(injectionSwitch, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 1.0), clamp(vec4(injectionSwitch, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 1.0), vec4(injectionSwitch, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 1.0), vec4(injectionSwitch, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 1.0)))) : _GLF_FUZZED(injectionSwitch)))).y))))
          break;
         if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, (false) && true)))))
          return;
         return;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), bool(bvec4(_GLF_WRAPPED_IF_FALSE(false), true, false, true))))
    {
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         do
          {
           return;
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       do
        {
         if(_GLF_DEAD(false))
          return;
         return;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
     else
      {
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y))))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        return;
       return;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        return;
       do
        {
         return;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(false))
    return;
   for(int _injected_loop_counter = _GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(11657))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      break;
     GLF_merged2_0_2_51_2_1_14GLF_merged2_0_1_13_1_1_13num_workgroupsubgroup_baseworkgroup_size.xy.y = subgroup_base;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true)))))
  return;
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch : _GLF_FUZZED(mat3x2(67.51, 324.664, 22.05, -0.3, 3.9, -8.6)[_GLF_IDENTITY(1, max(1, 1))]))).y))))
    {
     if(_GLF_DEAD(false))
      break;
     do
      {
       for(int _injected_loop_counter = ((((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))) << _GLF_IDENTITY(_GLF_IDENTITY(int(2), int(2)), int(ivec4(_GLF_IDENTITY(int(2), int(2)), 1, _GLF_IDENTITY(1, ~ (~ (1))), 1)))) >> _GLF_IDENTITY(int(2), int(2))); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), false || (_GLF_WRAPPED_LOOP(_injected_loop_counter > 0))); _injected_loop_counter --)
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           return;
          }
         if(_GLF_DEAD(false))
          continue;
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
   if(_GLF_DEAD(false))
    return;
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        return;
      }
     else
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
    }
   return;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 uint virtual_gid = workgroup_base + _GLF_IDENTITY(GLF_merged2_0_2_51_2_1_14GLF_merged2_0_1_13_1_1_13num_workgroupsubgroup_baseworkgroup_size.xy.y, clamp(GLF_merged2_0_2_51_2_1_14GLF_merged2_0_1_13_1_1_13num_workgroupsubgroup_baseworkgroup_size.xy.y, GLF_merged2_0_2_51_2_1_14GLF_merged2_0_1_13_1_1_13num_workgroupsubgroup_baseworkgroup_size.xy.y, _GLF_IDENTITY(GLF_merged2_0_2_51_2_1_14GLF_merged2_0_1_13_1_1_13num_workgroupsubgroup_baseworkgroup_size.xy.y, 0u + (GLF_merged2_0_2_51_2_1_14GLF_merged2_0_1_13_1_1_13num_workgroupsubgroup_baseworkgroup_size.xy.y)))) + subgroup_local_id;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), true && (bool(false)))))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         return;
        }
       return;
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
            return;
           return;
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            return;
           return;
          }
         if(_GLF_DEAD(false))
          return;
         return;
         if(_GLF_DEAD(false))
          return;
        }
      }
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       return;
      }
    }
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(false))
  return;
 _GLF_struct_10 _GLF_struct_replacement_10 = _GLF_struct_10(mat2x3(1.0), 1u, _GLF_struct_9(mat3x4(1.0), _GLF_struct_7(1u, true, mat4x2(1.0), mat4(1.0)), workgroup_base + GLF_merged2_0_2_51_2_1_14GLF_merged2_0_1_13_1_1_13num_workgroupsubgroup_baseworkgroup_size.xy.y + (_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id + _GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, (1) >> 0), _GLF_IDENTITY(1, (1) / 1), 1))), clamp(_GLF_IDENTITY((subgroup_local_id + 1), (_GLF_IDENTITY((subgroup_local_id + 1), max((subgroup_local_id + 1), (subgroup_local_id + 1)))) ^ 0u), (subgroup_local_id + 1), (subgroup_local_id + 1))), (_GLF_IDENTITY((subgroup_local_id + 1), (true ? (subgroup_local_id + 1) : _GLF_FUZZED(subgroup_size)))) | (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id + 1), (true ? _GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id + 1), (_GLF_IDENTITY((subgroup_local_id + 1), 0u ^ ((subgroup_local_id + _GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) / 1)) | (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(48067) : 1)))))))) | (_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) << 0u))), ((subgroup_local_id + 1)) | ((subgroup_local_id + 1))) : _GLF_FUZZED(workgroup_id))), (_GLF_IDENTITY((subgroup_local_id + 1), (true ? _GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id + 1), (_GLF_IDENTITY((subgroup_local_id + 1), 0u ^ ((subgroup_local_id + 1)))) | (_GLF_IDENTITY((subgroup_local_id + 1), _GLF_IDENTITY(((subgroup_local_id + 1)), max(_GLF_IDENTITY(((subgroup_local_id + 1)), min(((subgroup_local_id + 1)), ((subgroup_local_id + 1)))), ((subgroup_local_id + 1)))) << 0u))), ((subgroup_local_id + 1)) | ((subgroup_local_id + 1))) : _GLF_FUZZED(workgroup_id)))) << 0u), uint(_GLF_IDENTITY(uint(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id + 1), (true ? _GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id + 1), (_GLF_IDENTITY((subgroup_local_id + 1), 0u ^ ((subgroup_local_id + 1)))) | (_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) << 0u))), ((subgroup_local_id + 1)) | ((subgroup_local_id + 1))) : _GLF_FUZZED(workgroup_id))), uint(uvec4(_GLF_IDENTITY((subgroup_local_id + 1), (true ? _GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id + 1), (_GLF_IDENTITY((subgroup_local_id + 1), 0u ^ ((subgroup_local_id + 1)))) | (_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) << 0u))), ((subgroup_local_id + 1)) | ((subgroup_local_id + 1))) : _GLF_FUZZED(workgroup_id))), 0u, 0u, 0u))), (_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id + 1), (true ? _GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id + 1), (_GLF_IDENTITY((subgroup_local_id + 1), 0u ^ ((subgroup_local_id + 1)))) | (_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) << 0u))), ((subgroup_local_id + 1)) | ((subgroup_local_id + 1))) : _GLF_FUZZED(workgroup_id))), uint(uvec4(_GLF_IDENTITY((subgroup_local_id + 1), (true ? _GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id + 1), (_GLF_IDENTITY((subgroup_local_id + 1), 0u ^ ((subgroup_local_id + 1)))) | (_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) << 0u))), ((subgroup_local_id + 1)) | ((subgroup_local_id + 1))) : _GLF_FUZZED(workgroup_id))), 0u, 0u, 0u)))) >> 0u)), uint(uint(_GLF_IDENTITY(uint(_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id + 1), (true ? _GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id + 1), (_GLF_IDENTITY((subgroup_local_id + 1), 0u ^ ((_GLF_IDENTITY(subgroup_local_id, clamp(subgroup_local_id, subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) >> 0u)) ^ 0u))) + 1)))) | (_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) << 0u))), _GLF_IDENTITY(((subgroup_local_id + 1)), (_GLF_IDENTITY(((subgroup_local_id + 1)), (((subgroup_local_id + 1))) - 0u)) ^ 0u) | _GLF_IDENTITY(((subgroup_local_id + 1)), uint(uvec2(((subgroup_local_id + 1)), 1u)))) : _GLF_FUZZED(workgroup_id))), uint(uvec4(_GLF_IDENTITY((subgroup_local_id + 1), (true ? _GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id + 1), (_GLF_IDENTITY((subgroup_local_id + 1), 0u ^ ((subgroup_local_id + 1)))) | (_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) << 0u))), _GLF_IDENTITY(((subgroup_local_id + 1)), uint(uvec3(((_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) / 1u))), 0u, (0u >> _GLF_IDENTITY(uint(2u), uint(2u)))))) | ((subgroup_local_id + 1))) : _GLF_FUZZED(workgroup_id))), 0u, 0u, 0u)))), min(uint(_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id + 1), (true ? _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id + 1), (_GLF_IDENTITY((subgroup_local_id + 1), 0u ^ ((subgroup_local_id + 1)))) | (_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + _GLF_IDENTITY(1, (1) | 0))) << 0u))), _GLF_IDENTITY((true ? _GLF_IDENTITY((subgroup_local_id + 1), (_GLF_IDENTITY((subgroup_local_id + 1), 0u ^ ((subgroup_local_id + 1)))) | (_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) << 0u))) : _GLF_FUZZED(subgroup_local_id)), 0u | ((true ? _GLF_IDENTITY((subgroup_local_id + 1), (_GLF_IDENTITY((subgroup_local_id + 1), 0u ^ ((subgroup_local_id + 1)))) | (_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) << 0u))) : _GLF_FUZZED(subgroup_local_id))))), ((subgroup_local_id + 1)) | ((subgroup_local_id + 1))) : _GLF_FUZZED(workgroup_id))), uint(uvec4(_GLF_IDENTITY((subgroup_local_id + 1), (true ? _GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id + 1), (_GLF_IDENTITY((subgroup_local_id + 1), 0u ^ ((subgroup_local_id + 1)))) | (_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + _GLF_IDENTITY(1, (_GLF_IDENTITY(false, bool(bvec3(false, true, false))) ? _GLF_FUZZED(-60942) : 1)))) << 0u))), ((subgroup_local_id + 1)) | ((subgroup_local_id + 1))) : _GLF_FUZZED(workgroup_id))), 0u, 0u, _GLF_IDENTITY(0u, max(0u, 0u)))))), uint(_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id + 1), (true ? _GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id + 1), (_GLF_IDENTITY((subgroup_local_id + 1), 0u ^ ((subgroup_local_id + 1)))) | (_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) << 0u))), ((subgroup_local_id + 1)) | _GLF_IDENTITY(((subgroup_local_id + 1)), 0u | (_GLF_IDENTITY(((subgroup_local_id + 1)), 1u * (((subgroup_local_id + 1))))))) : _GLF_FUZZED(workgroup_id))), uint(uvec4(_GLF_IDENTITY((subgroup_local_id + 1), (true ? _GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id + 1), (_GLF_IDENTITY((subgroup_local_id + 1), 0u ^ ((subgroup_local_id + 1)))) | (_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) << 0u))), ((subgroup_local_id + 1)) | ((subgroup_local_id + 1))) : _GLF_FUZZED(workgroup_id))), 0u, 0u, 0u))))))))))))) % subgroup_size), _GLF_struct_8(1.0)));
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
    }
   do
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          break;
         return;
        }
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_DEAD(false))
          return;
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, false)))))
              continue;
             return;
            }
          }
         else
          {
           return;
          }
         if(_GLF_DEAD(false))
          return;
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              break;
             if(_GLF_DEAD(false))
              return;
             if(_GLF_DEAD(false))
              break;
             return;
             if(_GLF_DEAD(false))
              break;
             if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
              break;
            }
          }
         else
          {
          }
        }
      }
     else
      {
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
    {
     for(int _injected_loop_counter = (_GLF_IDENTITY(1 ^ 0, (true ? _GLF_IDENTITY(1 ^ 0, max(1 ^ 0, 1 ^ 0)) : _GLF_FUZZED(7127)))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) >> 0) > 0); _injected_loop_counter --)
      {
       return;
       if(_GLF_DEAD(false))
        break;
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      return;
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      return;
     return;
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 atomicStore(buf[_GLF_IDENTITY(_GLF_IDENTITY(_GLF_struct_replacement_10._f2.next_virtual_gid, max(_GLF_IDENTITY(_GLF_struct_replacement_10._f2.next_virtual_gid, (_GLF_struct_replacement_10._f2.next_virtual_gid) - 0u), _GLF_struct_replacement_10._f2.next_virtual_gid)), (_GLF_struct_replacement_10._f2.next_virtual_gid) << (0u << _GLF_IDENTITY(uint(0u), uint(_GLF_IDENTITY(0u, uint(_GLF_IDENTITY(uvec2(0u, 1u), uvec2(_GLF_IDENTITY(uvec2(uvec2(0u, 1u)), ~ (~ (uvec2(uvec2(0u, 1u)))))))))))))], uint(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) << 0)) | (1))), _GLF_IDENTITY(4, (4) + 0), 64, 4);
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     do
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            break;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              break;
             return;
            }
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_DEAD(false))
            return;
          }
         else
          {
           return;
           if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
            return;
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch.x : _GLF_FUZZED(-144.943))) > injectionSwitch.y))))
            return;
           if(_GLF_DEAD(false))
            return;
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))));
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        return;
      }
     else
      {
      }
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       return;
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
        return;
      }
     else
      {
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(4531.6807) : injectionSwitch.y))))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            return;
           return;
          }
         else
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false))))))))
            {
             if(_GLF_DEAD(false))
              return;
             return;
            }
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       return;
      }
    }
  }
 if(_GLF_DEAD(false))
  return;
 for(int _injected_loop_counter = 1; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), bool(bool(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), false || (_GLF_WRAPPED_LOOP(_injected_loop_counter > 0)))))); _injected_loop_counter --)
  {
   do
    {
     do
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       continue;
      }
     if(_GLF_DEAD(false))
      break;
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(false))
    break;
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
    {
     if(_GLF_DEAD(false))
      continue;
     continue;
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     return;
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_DEAD(false))
    return;
  }
 uint read = atomicLoad(_GLF_IDENTITY(buf[_GLF_IDENTITY(virtual_gid, 0u ^ (virtual_gid))], (buf[virtual_gid]) ^ (_GLF_IDENTITY(0u, max(0u, 0u)) >> _GLF_IDENTITY(uint(7u), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uint(7u), (uint(7u)) ^ 0u), 0u | (_GLF_IDENTITY(uint(7u), (uint(7u)) ^ 0u))), (_GLF_IDENTITY(uint(7u), (_GLF_IDENTITY(uint(7u), _GLF_IDENTITY(0u, uint(_GLF_IDENTITY(uvec3(0u, 1u, (0u >> _GLF_IDENTITY(uint(7u), uint(7u)))), min(_GLF_IDENTITY(uvec3(0u, _GLF_IDENTITY(1u, clamp(1u, _GLF_IDENTITY(1u, (1u) / (1u & 1u)), 1u)), (0u >> _GLF_IDENTITY(uint(7u), uint(7u)))), min(uvec3(0u, _GLF_IDENTITY(1u, clamp(1u, _GLF_IDENTITY(1u, (1u) / (1u & 1u)), 1u)), (0u >> _GLF_IDENTITY(uint(7u), uint(7u)))), uvec3(0u, _GLF_IDENTITY(1u, clamp(1u, _GLF_IDENTITY(1u, (1u) / (1u & 1u)), 1u)), (0u >> _GLF_IDENTITY(uint(7u), uint(7u)))))), uvec3(0u, 1u, (0u >> _GLF_IDENTITY(uint(7u), uint(7u)))))))) | (_GLF_IDENTITY(uint(_GLF_IDENTITY(7u, min(_GLF_IDENTITY(7u, 0u | (7u)), 7u))), _GLF_IDENTITY((_GLF_IDENTITY(uint(7u), (_GLF_IDENTITY(uint(7u), (_GLF_IDENTITY(uint(7u), max(uint(7u), uint(7u)))) - 0u)) + 0u)), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY((_GLF_IDENTITY(uint(7u), (_GLF_IDENTITY(uint(7u), (_GLF_IDENTITY(uint(7u), max(uint(7u), uint(7u)))) - 0u)) + 0u)), max((_GLF_IDENTITY(uint(7u), (_GLF_IDENTITY(uint(7u), (_GLF_IDENTITY(uint(7u), max(uint(7u), uint(7u)))) - 0u)) + 0u)), (_GLF_IDENTITY(uint(7u), (_GLF_IDENTITY(uint(7u), (_GLF_IDENTITY(uint(7u), max(uint(7u), uint(7u)))) - 0u)) + 0u))))), uint(uvec2(~ (_GLF_IDENTITY((_GLF_IDENTITY(uint(7u), (_GLF_IDENTITY(uint(7u), (_GLF_IDENTITY(uint(7u), max(uint(7u), uint(7u)))) - 0u)) + 0u)), max((_GLF_IDENTITY(uint(7u), (_GLF_IDENTITY(uint(7u), (_GLF_IDENTITY(uint(7u), max(uint(7u), uint(7u)))) - 0u)) + 0u)), (_GLF_IDENTITY(uint(7u), (_GLF_IDENTITY(uint(7u), (_GLF_IDENTITY(uint(7u), max(uint(7u), uint(7u)))) - 0u)) + 0u))))), 1u))))) ^ 0u)))) ^ 0u)) + (0u >> _GLF_IDENTITY(uint(8u), uint(8u))))))), 4, 64, 2);
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(mod(vec2(3.9, 9.2), 39.32)))).x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
    return;
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(_GLF_IDENTITY(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false), bvec2(bvec2(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))))))))
      return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))) && _GLF_IDENTITY(true, true && (true))))
      return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          return;
         return;
        }
       return;
      }
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, true, false), bvec3(bvec3(_GLF_IDENTITY(bvec3(false, true, false), bvec3(bvec3(bvec3(false, true, false)))))))))))
    return;
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bool(true)))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         return;
        }
       do
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           return;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
          }
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          break;
         if(_GLF_DEAD(false))
          break;
         if(_GLF_DEAD(false))
          continue;
        }
       while(_GLF_WRAPPED_LOOP(false));
       for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         if(_GLF_DEAD(false))
          continue;
        }
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       return;
      }
     return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > ((0 | 0) << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), 0 + (int(5)))))); _injected_loop_counter --)
      {
       return;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) || false)), _GLF_IDENTITY(false || (! (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) || false))), (_GLF_IDENTITY(false || (! (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) || false))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false || (! (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) || false)))))) && true))))))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
     return;
     if(_GLF_DEAD(false))
      {
       do
        {
         return;
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(false))
        return;
      }
    }
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (_GLF_IDENTITY(! (false), false || (! (false)))) && true)))))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   do
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        return;
       break;
      }
     if(_GLF_DEAD(false))
      continue;
     for(int _injected_loop_counter = _GLF_IDENTITY(0, (false ? _GLF_FUZZED(94657) : _GLF_IDENTITY(0, max(0, 0)))); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2)))); _injected_loop_counter ++)
      {
       do
        {
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_DEAD(false))
          break;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))))), (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_IDENTITY(_GLF_FUZZED(injectionSwitch), (_GLF_FUZZED(injectionSwitch)) * vec2(1.0, 1.0))))))) + vec2(0.0, 0.0)).y))))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               return;
               if(_GLF_DEAD(false))
                break;
              }
             else
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                break;
              }
            }
           if(_GLF_DEAD(false))
            continue;
          }
         else
          {
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            return;
           continue;
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bool(false)))));
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))))
      continue;
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(false))
  return;
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    break;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       continue;
      }
     return;
    }
  }
 subgroupBarrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(mat3x2(injectionSwitch, determinant(mat3(1.0, length(vec2(0.0, 0.0)), 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0)), 1.0, determinant(mat3(1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0)), 0.0))).x > injectionSwitch.y))))
  {
   for(int _injected_loop_counter = (1 ^ 1); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) | 0) < 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), bool(bvec4(_GLF_WRAPPED_IF_FALSE(false), true, false, true))))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
        continue;
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
        }
       else
        {
        }
       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec4(bvec2(false, false), false, true)))), ! (! (bool(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec4(bvec2(false, false), false, true)))))))), (injectionSwitch.x > injectionSwitch.y))))
        continue;
      }
    }
  }
 if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))), false || (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))))))))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
    }
   return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat3x4(injectionSwitch, 0.0, _GLF_IDENTITY(dot(vec4(1.0, 1.0, 0.0, 1.0), vec4(0.0, 0.0, 1.0, 0.0)), dot(vec4(1.0, 1.0, 0.0, 1.0), vec4(0.0, 0.0, 1.0, 0.0))), 1.0, 1.0, 1.0, 1.0, round(length(normalize(1.0))), 1.0, 1.0, abs(0.0))), max(vec2(mat3x4(injectionSwitch, 0.0, _GLF_IDENTITY(dot(vec4(1.0, 1.0, 0.0, 1.0), vec4(0.0, 0.0, 1.0, 0.0)), dot(vec4(1.0, 1.0, 0.0, 1.0), vec4(0.0, 0.0, 1.0, 0.0))), 1.0, 1.0, 1.0, 1.0, round(length(normalize(1.0))), 1.0, 1.0, abs(0.0))), vec2(mat3x4(injectionSwitch, 0.0, _GLF_IDENTITY(dot(vec4(1.0, 1.0, 0.0, 1.0), vec4(0.0, 0.0, 1.0, 0.0)), dot(vec4(1.0, 1.0, 0.0, 1.0), vec4(0.0, 0.0, 1.0, 0.0))), 1.0, 1.0, 1.0, 1.0, round(length(normalize(1.0))), 1.0, 1.0, abs(0.0)))))).y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)))
  return;
 atomicStore(checker[virtual_gid], _GLF_IDENTITY(read, clamp(read, read, read)), 4, 64, 4);
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END
BUFFER checker DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected_checker DATA_TYPE uint32 SIZE 8388096 FILL 1

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 
  BIND BUFFER checker AS storage DESCRIPTOR_SET 0 BINDING 2 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT checker EQ_BUFFER expected_checker
