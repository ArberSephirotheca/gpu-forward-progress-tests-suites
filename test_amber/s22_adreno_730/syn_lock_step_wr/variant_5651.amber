#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     return;
    }
   else
    {
    }
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   do
    {
     do
      {
       return;
       if(_GLF_DEAD(false))
        break;
       if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
        barrier();
      }
     while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, true && (false))), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, _GLF_IDENTITY(true, false || (true)) && (false)))), ! (_GLF_IDENTITY(! (! (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, true && (false))))), true && (! (! (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, true && (false))))))))))));
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (_GLF_IDENTITY(! (false), true && (! (false)))) || false))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0)))));
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    return;
   return;
  }
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (false)), _GLF_IDENTITY(bool(bvec3((! (false)), false, true)), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(bvec3((! (false)), false, true)), bool(bvec3(_GLF_IDENTITY(bool(bvec3((! (false)), false, true)), bool(bvec2(bool(bvec3((! (false)), false, true)), false))), false, true)))), bool(bvec4(bool(_GLF_IDENTITY(bool(bvec3((! (false)), false, true)), bool(bvec3(_GLF_IDENTITY(bool(bvec3((! (false)), false, true)), bool(bvec2(bool(bvec3((! (false)), false, true)), false))), false, true)))), true, false, false)))))))) || false)))
    barrier();
   if(_GLF_DEAD(false))
    return;
   for(int _injected_loop_counter = (_GLF_IDENTITY(0, clamp(0, 0, _GLF_IDENTITY(0, int(ivec4(0, 0, 1, 0))))) << _GLF_IDENTITY(int(6), int(6))); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 << _GLF_IDENTITY(int(4), int(4)))); _injected_loop_counter --)
            {
             return;
            }
          }
         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
          {
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0)))))
            break;
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(false))
              barrier();
             do
              {
               for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != (1 & (0 ^ ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7)))))), _GLF_IDENTITY(bool(bvec2(_GLF_WRAPPED_LOOP(_injected_loop_counter != (1 & (0 ^ ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7)))))), false)), (bool(bvec2(_GLF_WRAPPED_LOOP(_injected_loop_counter != (1 & (0 ^ ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7)))))), false))) && true)); _injected_loop_counter ++)
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], min(injectionSwitch[0], injectionSwitch[0])), injectionSwitch[1])).y, clamp(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], min(injectionSwitch[0], injectionSwitch[0])), injectionSwitch[1])).y, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], min(injectionSwitch[0], injectionSwitch[0])), injectionSwitch[1])).y, float(mat2x3(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], min(injectionSwitch[0], injectionSwitch[0])), injectionSwitch[1])).y, 0.0, 0.0, 0.0, 1.0, 1.0))), _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], min(injectionSwitch[0], injectionSwitch[0])), injectionSwitch[1])).y))))))
                    return;
                   barrier();
                  }
                 barrier();
                 if(_GLF_DEAD(false))
                  barrier();
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
             if(_GLF_DEAD(false))
              return;
             if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (false))))))))))
              {
               if(_GLF_DEAD(false))
                continue;
               return;
              }
            }
           else
            {
            }
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), bool(bvec2(_GLF_IDENTITY(false, true && _GLF_IDENTITY((false), _GLF_IDENTITY(bool(bool((false))), false || (bool(bool((false))))))), false)))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              break;
             if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))
              barrier();
             return;
            }
          }
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              continue;
             do
              {
               return;
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              return;
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               barrier();
              }
             else
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  continue;
                 barrier();
                }
              }
             if(_GLF_DEAD(false))
              break;
             if(_GLF_DEAD(false))
              barrier();
            }
          }
         return;
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            continue;
           barrier();
          }
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            return;
           return;
          }
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, true, true, false)), bool(bvec2(bool(bvec4(false, true, true, _GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true)), (bool(bvec4(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true))) && true)))), true))))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + sqrt(0.0))))))
          return;
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))), (_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false))))) && true), true, true), bvec3(bvec3(bvec3(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))), (_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false))))) && true), true, true)))))))
          continue;
         if(_GLF_DEAD(false))
          continue;
         barrier();
        }
      }
     do
      {
       if(_GLF_DEAD(false))
        return;
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y))))));
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(81.28) : injectionSwitch.x)) > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(mat3x2(_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(mat4x3(injectionSwitch.x, 0.0, 0.0, _GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(131.337)), bool(false))), 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0)), max(float(mat4x3(injectionSwitch.x, 0.0, 0.0, _GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(131.337)), bool(false))), 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0)), float(mat4x3(injectionSwitch.x, 0.0, 0.0, _GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(131.337)), bool(false))), 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0))))), 1.0, 0.0, 0.0, 0.0, 0.0), mat3x2(0.0, 0.0, 0.0, 0.0, 0.0, 0.0) + (mat3x2(_GLF_IDENTITY(injectionSwitch.x, float(mat4x3(injectionSwitch.x, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0))), 1.0, 0.0, 0.0, 0.0, 0.0))))))) < injectionSwitch.y)) && (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, false || (false))))))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(mat3x2(injectionSwitch.y, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, determinant(mat3(1.0, 0.0, 0.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 0.0, 0.0, 1.0)), 1.0)))))))
    return;
   do
    {
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), bool(bvec2(_GLF_IDENTITY(! (_GLF_IDENTITY(! (false), _GLF_IDENTITY(bool(bvec4(! (false), false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), (_GLF_IDENTITY(bool(bvec4(! (false), false, false, _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)))))), (bool(bvec4(! (false), false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) && true)) || false))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(! (! (false)), (_GLF_IDENTITY(! (! (false)), false || (! (_GLF_IDENTITY(! (false), (_GLF_IDENTITY(! (false), (_GLF_IDENTITY(! (false), ! (! (! (false))))) && true)) && true))))) || false), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(! (! (false)), (! (! (false))) || false), (_GLF_IDENTITY(! (! (_GLF_IDENTITY(false, bool(bvec4(false, false, false, false))))), _GLF_IDENTITY((! (! (false))) || false, true && ((! (! (false))) || false)))) && true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true), bvec3(bvec4(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(! (! (false)), (! (! (false))) || false), (_GLF_IDENTITY(! (! (false)), (! (! (false))) || false)) && true), _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false || (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), true), true)))))))), false))))))
    return;
  }
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    continue;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - abs(vec2(0.0, 0.0))).y, min(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - abs(vec2(0.0, 0.0))).y, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - abs(vec2(0.0, 0.0))).y))))))
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
      }
     for(int _injected_loop_counter = (0 & -28361); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(_GLF_IDENTITY(1.0, max(1.0, _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)))), _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y))))); _injected_loop_counter ++)
      {
       if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bool(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), ! (! (bool(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false))
        barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         for(int _injected_loop_counter = 1; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, 1.0 * (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)))))))))); _injected_loop_counter --)
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
              barrier();
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(false))
                return;
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(false))
                    break;
                   barrier();
                  }
                 if(_GLF_DEAD(false))
                  return;
                 barrier();
                }
              }
             else
              {
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
              {
               if(_GLF_DEAD(false))
                continue;
               return;
              }
             if(_GLF_DEAD(false))
              return;
            }
          }
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec2(false, false))), (injectionSwitch.x > injectionSwitch.y))))
          continue;
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(624.981)), float(injectionSwitch.x), bool(true))) > injectionSwitch.y, false || (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x))) / 1.0), mix(float(_GLF_FUZZED(624.981)), float(injectionSwitch.x), bool(true))) > injectionSwitch.y))))))), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! _GLF_IDENTITY((! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(624.981)), float(injectionSwitch.x), bool(true))) > injectionSwitch.y)))), _GLF_IDENTITY(bool(bool((! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(624.981)), float(injectionSwitch.x), bool(true))) > injectionSwitch.y)))))), false || (bool(bool((! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(624.981)), float(injectionSwitch.x), bool(true))) > injectionSwitch.y)))))))))), false || (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(mix(float(_GLF_FUZZED(624.981)), float(injectionSwitch.x), bool(true)), float(mat4(_GLF_IDENTITY(mix(float(_GLF_FUZZED(624.981)), float(injectionSwitch.x), bool(true)), 1.0 * (mix(float(_GLF_FUZZED(624.981)), float(injectionSwitch.x), bool(true)))), abs(1.0), 0.0, 0.0, tan(0.0), sqrt(0.0), 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0)))) > injectionSwitch.y))))), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(_GLF_IDENTITY(float(_GLF_FUZZED(624.981)), (float(_GLF_FUZZED(624.981))) + 0.0), float(injectionSwitch.x), bool(true))) > injectionSwitch.y)))))) || false))), false), bvec2(bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(624.981)), float(injectionSwitch.x), bool(true))) > injectionSwitch.y))))), false || (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)).y)), ! (! (_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).x, mix(float(_GLF_FUZZED(624.981)), float(injectionSwitch.x), bool(true))) > _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), injectionSwitch)).y))))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(624.981)), float(injectionSwitch.x), bool(true))) > injectionSwitch.y))))), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! _GLF_IDENTITY((_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(624.981)), float(injectionSwitch.x), bool(true))) > injectionSwitch.y))), bool(bool((_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(624.981)), float(injectionSwitch.x), bool(true))) > injectionSwitch.y))))))))) && true)) || false))), false), bvec2(bvec3(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(624.981)), float(injectionSwitch.x), bool(true))) > injectionSwitch.y))))), false || (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)).y)), ! (! (_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).x, mix(float(_GLF_FUZZED(624.981)), float(injectionSwitch.x), bool(true))) > _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), injectionSwitch)).y))))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(624.981)), float(injectionSwitch.x), bool(true))) > injectionSwitch.y))))), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! _GLF_IDENTITY((_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(624.981)), float(injectionSwitch.x), bool(true))) > injectionSwitch.y))), bool(bool((_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(624.981)), float(injectionSwitch.x), bool(true))) > injectionSwitch.y))))))))) && true)) || false))), false), false))))))))))
            return;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
           return;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
          }
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
        break;
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), _GLF_IDENTITY(mat2(1.0) * (mat2(1.0) * (injectionSwitch)), mat2(1.0) * (mat2(1.0) * (mat2(1.0) * (injectionSwitch)))))).y, min(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y))))))
        return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          continue;
         return;
        }
      }
     return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      break;
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY((false) || false, ((false) || false) || false))), (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) || false)), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) || false))), ! (! (! (_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) || false))))))))) || _GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (_GLF_IDENTITY(! (false), true && (! (false)))) && true)))))
  {
  }
 else
  {
   do
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0) > _GLF_IDENTITY(injectionSwitch, vec2(vec3(injectionSwitch, round(length(normalize(1.0)))))).y)) ? _GLF_FUZZED(967.683) : _GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(-9.8)))))))); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(vec4(injectionSwitch, 1.0, 1.0))).y))))
          barrier();
         break;
        }
       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), ! (! (_GLF_WRAPPED_IF_FALSE(false)))))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
          return;
         if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))) && true))
          {
           if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y), ((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y, false || (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > _GLF_IDENTITY(injectionSwitch, vec2(mat4x2(injectionSwitch, 1.0, 0.0, determinant(mat4(0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0)), cos(0.0), 1.0, 0.0))).y)))) || false))), bool(_GLF_IDENTITY(bvec3(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y), ((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y, false || (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y)))) || false))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false), bvec3(bvec4(bvec3(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y), ((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(float(-23395))), vec2(_GLF_FUZZED(4.1), (injectionSwitch)[1]), bvec2(false, true))), injectionSwitch)).x > injectionSwitch.y, false || (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y)))) || false))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bvec3(false, true, false))))))), false))))))
            {
             do
              {
               return;
               if(_GLF_DEAD(false))
                continue;
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_DEAD(false)), bool(bvec4(bool(_GLF_DEAD(false)), true, true, true)))), (bool(_GLF_IDENTITY(bool(_GLF_DEAD(false)), bool(bvec4(bool(_GLF_DEAD(false)), true, true, true))))) || false)))
                    break;
                   break;
                  }
                 barrier();
                }
               if(_GLF_DEAD(false))
                return;
              }
             while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), ! (! (_GLF_WRAPPED_LOOP(false))))) && true));
            }
           return;
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              break;
             return;
            }
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             break;
            }
          }
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(bool(_GLF_DEAD(false)), bool(bool(bool(_GLF_DEAD(false))))))))
  {
   if(_GLF_DEAD(false))
    return;
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      break;
     barrier();
    }
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   barrier();
  }
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec2(! (false), false)))))))
  return;
 do
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    return;
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
  return;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, ! (! (true)))))))))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     return;
    }
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  return;
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y))))
  return;
 uint workgroup_id = _GLF_IDENTITY(gl_WorkGroupID, (_GLF_IDENTITY(gl_WorkGroupID, _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(gl_WorkGroupID, (gl_WorkGroupID) / uvec3(1u, 1u, 1u))), ((gl_WorkGroupID)) / uvec3(1u, 1u, 1u)) | (uvec3(1u, 1u, 1u) ^ uvec3(1u, 1u, 1u)), min(_GLF_IDENTITY((_GLF_IDENTITY(gl_WorkGroupID, (gl_WorkGroupID) / uvec3(1u, 1u, 1u))), ((gl_WorkGroupID)) / uvec3(1u, 1u, 1u)) | (uvec3(1u, 1u, 1u) ^ uvec3(1u, 1u, 1u)), _GLF_IDENTITY((_GLF_IDENTITY(gl_WorkGroupID, (gl_WorkGroupID) / uvec3(1u, 1u, 1u))), ((gl_WorkGroupID)) / uvec3(1u, 1u, 1u)) | (uvec3(1u, 1u, 1u) ^ uvec3(1u, 1u, 1u)))))) | (_GLF_IDENTITY(gl_WorkGroupID, ~ (_GLF_IDENTITY(~ _GLF_IDENTITY((gl_WorkGroupID), (_GLF_IDENTITY((gl_WorkGroupID), min((gl_WorkGroupID), (gl_WorkGroupID)))) ^ uvec3(0u, 0u, 0u)), (~ (gl_WorkGroupID)) ^ uvec3(0u, 0u, 0u)))))).x;
 do
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
      {
       do
        {
         do
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y))))
            return;
           barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            continue;
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0)))))))), true && (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)), injectionSwitch)).x > injectionSwitch.y))))));
       if(_GLF_DEAD(false))
        continue;
      }
     if(_GLF_DEAD(false))
      return;
     do
      {
       return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          return;
         continue;
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, bool(bvec4(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true))), false, false, false)))))
        barrier();
      }
     while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), bool(bvec2(_GLF_WRAPPED_LOOP(false), true))));
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || false)) || false)))
    continue;
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(5), max(int(5), int(5))), int(5))); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
        {
         barrier();
        }
      }
    }
   else
    {
    }
   if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false)) || false), bool(_GLF_IDENTITY(bool(_GLF_DEAD(false)), ! (_GLF_IDENTITY(_GLF_IDENTITY(! (bool(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), true && (bool(bool(false)))))))), _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (! (_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-7.6), _GLF_FUZZED(7.2)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))).x < injectionSwitch.y))))) && (! (_GLF_IDENTITY(bool(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, true && (false))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bool(bool(false)), true && (bool(_GLF_IDENTITY(bool(false), (bool(false)) || false))))))), ! (_GLF_IDENTITY(! (bool(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, true && (false))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bool(bool(false)), true && _GLF_IDENTITY((bool(bool(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) || false)))))), false || ((bool(bool(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) || false))))))))))))), bool(bvec3(! (bool(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, true && (false))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bool(bool(false)), true && (bool(bool(false)))))))), true, false)))))))), (! _GLF_IDENTITY((bool(_GLF_DEAD(false))), _GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y), ! (! (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + sqrt(0.0)) > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y), false || ((_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + sqrt(0.0)) > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y))))))) || (_GLF_IDENTITY((bool(_GLF_DEAD(false))), ! (! ((bool(_GLF_DEAD(false))))))))) && true))))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       barrier();
      }
     if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y)))))), (_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec4(bvec2(false, true), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), bvec2(bvec3(bvec2(false, true), false))))), (injectionSwitch.x > injectionSwitch.y)))) && true))
      {
       if(_GLF_DEAD(false))
        {
         do
          {
           barrier();
           if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, (false) || false), false)))))
            return;
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), injectionSwitch, injectionSwitch)).y))));
         if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), false || (bool(bvec3(false, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))
          break;
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          return;
         barrier();
        }
       else
        {
        }
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          return;
         continue;
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            return;
           barrier();
          }
        }
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      continue;
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(1, (1) >> 0)), _GLF_IDENTITY(int(1), 0 | (int(1)))), int(ivec3(_GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), 0 | (int(_GLF_IDENTITY(1, 0 ^ (_GLF_IDENTITY(1, (1) >> 0))))))), _GLF_IDENTITY(1, 1 * (1)), 0)))) << _GLF_IDENTITY(int(5), int(5)), (_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(1, (1) >> 0)), _GLF_IDENTITY(int(1), 0 | (int(1)))), int(ivec3(_GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), 0 | (int(1)))), 1, 0)))) << _GLF_IDENTITY(int(5), int(5)), ~ (~ (((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(1, (1) >> _GLF_IDENTITY(0, (0) | (0)))), _GLF_IDENTITY(_GLF_IDENTITY(int(1), 0 | (int(1))), 0 ^ (_GLF_IDENTITY(int(1), 0 | (int(1)))))), int(ivec3(_GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), 0 | (int(1)))), 1, 0)))) << _GLF_IDENTITY(int(5), int(5)))))) | (((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(1, (1) >> 0)), _GLF_IDENTITY(_GLF_IDENTITY(int(1), 0 | (int(1))), clamp(_GLF_IDENTITY(int(1), 0 | (int(1))), _GLF_IDENTITY(int(1), 0 | (int(1))), _GLF_IDENTITY(_GLF_IDENTITY(int(1), 0 | (int(1))), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(int(1), 0 | (int(1))), min(_GLF_IDENTITY(int(1), 0 | (int(1))), _GLF_IDENTITY(int(1), 0 | (int(1))))))))))), int(ivec3(_GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), 0 | (int(1)))), 1, 0)))) << _GLF_IDENTITY(int(5), int(5))))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(5, (_GLF_IDENTITY(5, ~ (~ (5)))) | (5))), int(5)), (_GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(5, (_GLF_IDENTITY(5, ~ (~ (5)))) | (5))), int(5)), (true ? _GLF_IDENTITY(int(_GLF_IDENTITY(5, (_GLF_IDENTITY(5, ~ (~ (5)))) | (5))), int(5)) : _GLF_FUZZED(_injected_loop_counter)))) - 0))); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], clamp(injectionSwitch[0], injectionSwitch[0], injectionSwitch[0])), _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(faceforward(injectionSwitch, injectionSwitch, injectionSwitch)) : injectionSwitch))[1]))) * _GLF_IDENTITY(vec2(1.0, 1.0), max(vec2(1.0, 1.0), _GLF_IDENTITY(vec2(1.0, 1.0), (true ? vec2(1.0, 1.0) : _GLF_FUZZED(vec2(-8.0, -2.9))))))), injectionSwitch)).x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)))))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
          continue;
         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bvec3(false, true, false))))))), false || (bool(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bvec3(false, true, false))))))))))), (injectionSwitch.x > injectionSwitch.y))))
              return;
             barrier();
            }
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             barrier();
             if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || ((false))) && true)))
              {
               if(_GLF_DEAD(false))
                barrier();
               return;
              }
            }
           else
            {
             if(_GLF_DEAD(false))
              barrier();
            }
          }
         return;
        }
      }
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), false)))) && true))
            continue;
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
            }
           else
            {
            }
           if(_GLF_DEAD(false))
            continue;
          }
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
             barrier();
            }
           if(_GLF_DEAD(false))
            continue;
          }
         else
          {
           barrier();
           if(_GLF_DEAD(false))
            break;
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         continue;
        }
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(false))
        continue;
       barrier();
      }
     break;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], mix(float(_GLF_FUZZED((1592.9074 / 9.2))), float(injectionSwitch[1]), bool(_GLF_IDENTITY(true, ! (! (true))))))), vec2(0.0, 0.0) + (vec2(injectionSwitch[0], injectionSwitch[1])))).x > injectionSwitch.y, _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY(vec2(injectionSwitch[0], injectionSwitch[1]), vec2(0.0, 0.0) + (vec2(injectionSwitch[0], injectionSwitch[1]))), min(_GLF_IDENTITY(vec2(injectionSwitch[0], injectionSwitch[1]), vec2(0.0, 0.0) + (vec2(injectionSwitch[0], injectionSwitch[1]))), _GLF_IDENTITY(_GLF_IDENTITY(vec2(injectionSwitch[0], injectionSwitch[1]), vec2(0.0, 0.0) + (vec2(injectionSwitch[0], injectionSwitch[1]))), (true ? _GLF_IDENTITY(vec2(injectionSwitch[0], injectionSwitch[1]), vec2(0.0, 0.0) + (vec2(injectionSwitch[0], injectionSwitch[1]))) : _GLF_FUZZED(vec2(63.02, 92.26))))))).x > injectionSwitch.y, bool(bvec3(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(injectionSwitch[0], injectionSwitch[1]), vec2(0.0, 0.0) + (vec2(injectionSwitch[0], injectionSwitch[1])))).x > injectionSwitch.y, true, _GLF_IDENTITY(true, bool(bool(true)))))), false)), (bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY(vec2(_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch))[0], injectionSwitch[1]), vec2(0.0, 0.0) + (vec2(_GLF_IDENTITY(injectionSwitch[0], (true ? injectionSwitch[0] : _GLF_FUZZED(-3.8))), injectionSwitch[1]))), max(_GLF_IDENTITY(vec2(injectionSwitch[0], injectionSwitch[1]), vec2(0.0, 0.0) + (vec2(injectionSwitch[0], injectionSwitch[1]))), _GLF_IDENTITY(_GLF_IDENTITY(vec2(injectionSwitch[0], injectionSwitch[1]), vec2(1.0, 1.0) * (_GLF_IDENTITY(vec2(injectionSwitch[0], injectionSwitch[1]), (true ? vec2(injectionSwitch[0], injectionSwitch[1]) : _GLF_FUZZED(floor(injectionSwitch)))))), vec2(0.0, 0.0) + (vec2(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0))[0], injectionSwitch[1])))))).x > injectionSwitch.y, bool(bvec3(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mix(vec2(_GLF_FUZZED((+ 6609.1100)), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED((- -1108.2080))), bvec2(true, false)), (mix(vec2(_GLF_FUZZED((+ 6609.1100)), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED((- -1108.2080))), bvec2(true, false))) * mat2(_GLF_ONE(1.0, injectionSwitch.y)))), injectionSwitch))[_GLF_IDENTITY(1, ~ (~ (1)))]), vec2(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED((vec2(1.7, -754.443).r - 77.79))), bool(false))), 0.0) + (vec2(injectionSwitch[0], injectionSwitch[1])))).x > injectionSwitch.y, true, true))), false))) && true))))))
    {
     if(_GLF_DEAD(false))
      return;
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             return;
             if(_GLF_DEAD(false))
              barrier();
            }
           else
            {
            }
          }
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false)))))), (injectionSwitch.x > injectionSwitch.y))) || false)))
          return;
         barrier();
        }
       do
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))) + 0.0) > injectionSwitch.y))))
          {
          }
         else
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(false))
              continue;
             if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec2(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, ! (! (false)))), bool(bvec2(! (_GLF_IDENTITY(false, ! (! (false)))), false)))))), false)), bool(bvec2(bool(bvec2(_GLF_DEAD(false), false)), true)))), false, false, true))))
              return;
            }
           else
            {
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
           if(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, (false) && true)))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              continue;
             continue;
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) || false)))), (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(max(injectionSwitch, injectionSwitch), (max(injectionSwitch, injectionSwitch)) + vec2(0.0, 0.0))).x > injectionSwitch.y))))
            barrier();
           do
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                {
                 if(_GLF_DEAD(false))
                  continue;
                 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(false, false, false), _GLF_IDENTITY(bvec3(bvec3(bvec3(false, false, false))), bvec3(bvec4(bvec3(bvec3(bvec3(false, false, false))), true))))), false || (bool(_GLF_IDENTITY(bvec3(false, false, false), _GLF_IDENTITY(bvec3(bvec3(bvec3(false, false, false))), bvec3(bvec4(bvec3(bvec3(bvec3(false, false, false))), true))))))))))
                  continue;
                 barrier();
                }
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 barrier();
                }
               else
                {
                }
               if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
                barrier();
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 barrier();
                }
               if(_GLF_DEAD(false))
                barrier();
              }
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(bvec4(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))))
                {
                 barrier();
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                   if(_GLF_DEAD(false))
                    return;
                   barrier();
                  }
                }
               else
                {
                }
               if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))
                continue;
              }
             if(_GLF_DEAD(false))
              break;
             barrier();
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) > injectionSwitch.y))))
                {
                 if(_GLF_DEAD(false))
                  return;
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), true && (! (_GLF_DEAD(false)))))))
                    return;
                   break;
                  }
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                   if(_GLF_DEAD(false))
                    break;
                   barrier();
                  }
                 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)).x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED((+ 1.7))), float(injectionSwitch.y), bool(true)))))))
                  return;
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   if(_GLF_DEAD(false))
                    return;
                   continue;
                  }
                 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))))
                  break;
                 break;
                }
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_DEAD(false))
              return;
             if(_GLF_DEAD(false))
              break;
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y))))))
            return;
          }
        }
       for(int _injected_loop_counter = ((_GLF_IDENTITY(0 << _GLF_IDENTITY(int(6), int(6)), _GLF_IDENTITY((0 << _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(6), clamp(_GLF_IDENTITY(int(6), int(int(int(6)))), int(6), int(6))), int(6)), (_GLF_IDENTITY(_GLF_IDENTITY(int(6), clamp(_GLF_IDENTITY(int(6), int(int(int(6)))), int(6), int(6))), int(6))) / 1)), min((0 << _GLF_IDENTITY(_GLF_IDENTITY(int(6), clamp(_GLF_IDENTITY(int(6), (int(6)) | (_GLF_IDENTITY(int(6), ~ (~ (int(6)))))), int(6), int(6))), int(6))), (0 << _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(6), clamp(int(6), int(6), int(6))), (_GLF_IDENTITY(int(6), clamp(int(6), int(6), int(6)))) | (_GLF_IDENTITY(int(6), clamp(int(6), int(6), int(6))))), int(6))))) - 0)) >> _GLF_IDENTITY(int(2), int(_GLF_IDENTITY(2, clamp(2, 2, _GLF_IDENTITY(2, _GLF_IDENTITY((false ? _GLF_FUZZED(98616) : _GLF_IDENTITY(2, 0 ^ (2))), clamp((false ? _GLF_FUZZED(98616) : 2), (false ? _GLF_FUZZED(98616) : 2), (false ? _GLF_FUZZED(_GLF_IDENTITY(98616, clamp(98616, 98616, 98616))) : 2))))))))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < 1, (_injected_loop_counter < 1) && true)); _injected_loop_counter ++)
        {
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))), (_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, bool(bool(false))), true))) || (false)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             continue;
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, bool(bool(false)))))))
              break;
             return;
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
           break;
          }
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_DEAD(false))
          barrier();
         barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true, true)))))
            barrier();
           continue;
          }
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
            barrier();
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 barrier();
                }
              }
             else
              {
              }
             barrier();
            }
           if(_GLF_DEAD(false))
            barrier();
           barrier();
           if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((false), ! (! (_GLF_IDENTITY((false), false || _GLF_IDENTITY(((false)), (((false))) || false))))) && _GLF_IDENTITY(true, _GLF_IDENTITY(bool(bool(true)), bool(bvec3(_GLF_IDENTITY(bool(bool(true)), true && (bool(bool(true)))), false, true)))))))
            return;
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(764.853), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-4.6)), bvec2(true, false)))) * vec2(1.0, 1.0)).x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))), injectionSwitch, injectionSwitch)) : _GLF_FUZZED(vec2(89.80, -1.2)))))).y))))
        {
         for(int _injected_loop_counter = ((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), 0 | (int(0)))), min(1 << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), 0 | (int(0)))), 1 << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), 0 | (int(0))))))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), int(ivec4(int(0), ((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4))), 1, 0)))), (_GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), int(ivec4(int(0), ((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4))), 1, 0))))) >> 0)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              break;
             barrier();
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED((false ? -3.0 : 7726.9769)), _GLF_FUZZED(-2.2)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))).x > injectionSwitch.y))))
              {
              }
             else
              {
               return;
               if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
                barrier();
              }
             if(_GLF_DEAD(false))
              barrier();
            }
          }
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          break;
         if(_GLF_DEAD(false))
          barrier();
         do
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(false))
              break;
             barrier();
            }
           else
            {
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec4(_GLF_DEAD(false), false, true, true)), false || (bool(bvec4(_GLF_DEAD(false), false, true, true))))))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec2(bvec2(false, true))))))) || false))) && true))
              return;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_DEAD(false))
              continue;
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
           return;
          }
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (true)))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(float(false)), _GLF_FUZZED((+ -6827.3296))), bvec2(false, false))).x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(false))
                break;
               barrier();
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             barrier();
             if(_GLF_DEAD(false))
              barrier();
            }
          }
         else
          {
          }
         if(_GLF_DEAD(false))
          continue;
         break;
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(! (! (_GLF_DEAD(false))), ! (_GLF_IDENTITY(! (! (! (_GLF_DEAD(false)))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (! (! (! (_GLF_DEAD(false))))))))))
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
            {
             return;
            }
           if(_GLF_DEAD(false))
            break;
          }
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 << _GLF_IDENTITY(int(7), int(7)))); _injected_loop_counter --)
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
            break;
           barrier();
          }
        }
       return;
      }
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, ! (! (false))), true, true, false)))))
        continue;
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
            continue;
           continue;
          }
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            continue;
           barrier();
          }
         else
          {
           if(_GLF_DEAD(false))
            break;
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), ! (! (_GLF_IDENTITY(false, (false) && true))))))
            return;
           if(_GLF_DEAD(false))
            barrier();
           break;
          }
         barrier();
        }
      }
     else
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), false))), bool(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false), true, true))))
          break;
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(distance(vec4(1726.3299, -44.21, -53.66, 20.65), vec4(-16.38, -305.779, 7884.4502, 5.4))))) > _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(-872.540))), injectionSwitch.y))))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec4((injectionSwitch.x > injectionSwitch.y), true, true, false)))) || false))))
            barrier();
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             barrier();
            }
           else
            {
            }
           if(_GLF_DEAD(false))
            barrier();
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         return;
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, (false) && true)))))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(-8.1), _GLF_FUZZED(-4715.1193)), bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))).x > injectionSwitch.y)), _GLF_IDENTITY(bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), ! (! (bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))))
        return;
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   return;
  }
 do
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), ! (! (_GLF_IDENTITY(! (_GLF_DEAD(false)), (_GLF_IDENTITY(! (_GLF_DEAD(false)), ! (! (! (_GLF_DEAD(false)))))) || false))))))) || false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          break;
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           return;
           if(_GLF_DEAD(false))
            break;
          }
         else
          {
           if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bool(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), bool(bvec4(bool(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), true, true, false)))))
            return;
          }
        }
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec3(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(true, _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(true, (true) || false)), (bool(_GLF_IDENTITY(true, _GLF_IDENTITY((true) || false, ((true) || false) || false)))) || false)), ! (! (bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(true, (true) || false)), (bool(_GLF_IDENTITY(true, (true) || false))) || false)))))), false)))) || false))))
        return;
       if(_GLF_DEAD(false))
        barrier();
       return;
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
          {
           barrier();
          }
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     return;
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y))));
 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), ! (_GLF_IDENTITY(! (! (! (false))), (! (! (! (false)))) || false))))))
  {
   for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      return;
    }
   barrier();
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true)) || false))))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), ! (! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), ! (! (! (injectionSwitch.x > injectionSwitch.y))))))))), false || (injectionSwitch.x > injectionSwitch.y))))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    return;
   barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(false, bool(bvec2(false, false))) || (false))))
    return;
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       return;
      }
     else
      {
       for(int _injected_loop_counter = _GLF_IDENTITY(1, min(_GLF_IDENTITY(1, clamp(1, 1, 1)), 1)); _GLF_WRAPPED_LOOP(_injected_loop_counter > (_GLF_IDENTITY(0, max(_GLF_IDENTITY(0, min(0, 0)), 0)) & -31960)); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               barrier();
              }
             else
              {
              }
            }
           barrier();
          }
        }
      }
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
    return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 do
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, false || (false)), false, true)))), ! (_GLF_IDENTITY(! (! (_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, false || (false)), false, true))))), bool(bvec2(! (! (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, _GLF_IDENTITY(false, bool(bvec4(false, true, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) || (false)), false, true), _GLF_IDENTITY(bvec3(bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, _GLF_IDENTITY(false, bool(bvec4(false, true, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) || (false)), false, true), bvec3(bvec4(bvec3(_GLF_IDENTITY(false, _GLF_IDENTITY(false, bool(bvec4(false, true, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) || (false)), false, true), false))))), bvec3(bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, _GLF_IDENTITY(false, bool(bvec4(false, true, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) || (false)), false, true), bvec3(bvec4(bvec3(_GLF_IDENTITY(false, _GLF_IDENTITY(false, bool(bvec4(false, true, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) || (false)), false, true), false))))))))))))), false))))))), _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, float(mat4(_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(5.6) : injectionSwitch.x)), injectionSwitch.x)), _GLF_ONE(1.0, injectionSwitch.y), 1.0, 0.0, 1.0, _GLF_IDENTITY(_GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), dot(vec2(1.0, _GLF_IDENTITY(0.0, _GLF_IDENTITY(float(float(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(float(float(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, _GLF_IDENTITY(0.0, (0.0) / 1.0))))), clamp(_GLF_IDENTITY(float(float(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, _GLF_IDENTITY(0.0, (0.0) / 1.0))))), float(mat3(float(float(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, _GLF_IDENTITY(0.0, (0.0) / 1.0))))), 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0))), float(float(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, _GLF_IDENTITY(0.0, (0.0) / 1.0))))), float(float(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, _GLF_IDENTITY(0.0, (0.0) / 1.0))))))), float(mat4x3(float(float(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)))), 0.0, _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-704.160))), 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0))), _GLF_IDENTITY(float(float(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, _GLF_IDENTITY(0.0, max(0.0, 0.0)))))), (true ? float(float(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)))) : _GLF_FUZZED(-79.34))), float(float(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)))))))), vec2(1.0, 0.0))), float(mat4(_GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), dot(_GLF_IDENTITY(vec2(_GLF_IDENTITY(1.0, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 1.0 : _GLF_FUZZED(-1.1))), 0.0), (true ? vec2(_GLF_IDENTITY(1.0, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 1.0 : _GLF_FUZZED(-1.1))), 0.0) : _GLF_FUZZED(injectionSwitch))), vec2(1.0, _GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(53.22)), bool(false)))))), 1.0, log(1.0), 0.0, 1.0, 1.0, 1.0, 1.0, exp(sin(0.0)), 1.0, 0.0, sqrt(1.0), 0.0, 0.0, tan(0.0), determinant(mat3(0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))))), _GLF_IDENTITY(1.0, (1.0) + 0.0), 1.0, 1.0, 0.0, 0.0, _GLF_IDENTITY(0.0, max(0.0, _GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(-6.7))))), determinant(mat2(0.0, 0.0, 0.0, length(_GLF_IDENTITY(vec2(0.0, 0.0), (vec2(0.0, 0.0)) * vec2(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y)))))), determinant(_GLF_IDENTITY(mat3(1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, _GLF_IDENTITY(1.0, _GLF_IDENTITY(_GLF_IDENTITY(float(vec2(1.0, sqrt(_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED((6.5 - -7200.7553))), bool(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y)))))))), float(_GLF_IDENTITY(_GLF_IDENTITY(float(float(_GLF_IDENTITY(vec2(1.0, sqrt(1.0)), min(vec2(1.0, sqrt(1.0)), vec2(1.0, sqrt(1.0)))))), _GLF_IDENTITY(float(mat2x4(float(float(vec2(1.0, sqrt(1.0)))), 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0)), min(float(mat2x4(float(float(vec2(1.0, sqrt(1.0)))), 0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), 1.0, 1.0, 0.0)), float(mat2x4(float(float(vec2(1.0, sqrt(_GLF_IDENTITY(1.0, float(_GLF_IDENTITY(vec2(1.0, sqrt(0.0)), _GLF_IDENTITY(vec2(mat2x4(vec2(1.0, sqrt(0.0)), 1.0, 1.0, tan(0.0), 0.0, 1.0, 0.0)), (vec2(mat2x4(vec2(1.0, sqrt(0.0)), 1.0, 1.0, tan(0.0), 0.0, 1.0, 0.0))) * mat2(1.0))))))))), 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0))))), float(vec3(_GLF_IDENTITY(_GLF_IDENTITY(float(float(vec2(1.0, sqrt(1.0)))), _GLF_IDENTITY(float(mat2x4(float(float(vec2(1.0, sqrt(1.0)))), 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0)), min(float(mat2x4(float(float(vec2(_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-3.9)), bool(false))), sqrt(1.0)))), 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0)), float(mat2x4(_GLF_IDENTITY(float(float(vec2(1.0, sqrt(_GLF_IDENTITY(1.0, max(1.0, 1.0)))))), 1.0 * (float(float(vec2(1.0, sqrt(1.0)))))), 0.0, _GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0, 0.0, 1.0, 1.0, 0.0))))), _GLF_IDENTITY(_GLF_IDENTITY(mix(float(_GLF_FUZZED(624.940)), float(_GLF_IDENTITY(float(float(vec2(1.0, sqrt(1.0)))), _GLF_IDENTITY(float(mat2x4(float(float(vec2(1.0, sqrt(1.0)))), 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0)), min(float(mat2x4(float(float(vec2(1.0, sqrt(1.0)))), 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0)), float(mat2x4(float(float(vec2(1.0, sqrt(1.0)))), 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0)))))), bool(true)), (false ? _GLF_FUZZED(7.4) : mix(float(_GLF_FUZZED(624.940)), float(_GLF_IDENTITY(float(float(vec2(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(2.2) : _GLF_IDENTITY(1.0, (1.0) - 0.0))), sqrt(1.0)))), _GLF_IDENTITY(float(mat2x4(float(float(vec2(1.0, sqrt(1.0)))), 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0)), min(float(mat2x4(float(float(vec2(1.0, sqrt(1.0)))), 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0)), float(mat2x4(float(float(vec2(1.0, sqrt(1.0)))), 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0)))))), bool(true)))), mix(float(_GLF_FUZZED(4260.9619)), float(_GLF_IDENTITY(mix(float(_GLF_FUZZED(624.940)), float(_GLF_IDENTITY(float(float(vec2(1.0, sqrt(1.0)))), _GLF_IDENTITY(float(mat2x4(float(float(vec2(1.0, sqrt(1.0)))), 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0)), min(float(mat2x4(float(float(vec2(1.0, sqrt(1.0)))), 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0)), float(mat2x4(float(float(vec2(1.0, sqrt(1.0)))), 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0)))))), bool(true)), (false ? _GLF_FUZZED(7.4) : mix(float(_GLF_FUZZED(624.940)), float(_GLF_IDENTITY(float(float(vec2(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(2.2) : _GLF_IDENTITY(1.0, (1.0) - 0.0))), sqrt(1.0)))), _GLF_IDENTITY(float(mat2x4(float(float(vec2(1.0, sqrt(1.0)))), 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0)), min(float(mat2x4(float(float(vec2(1.0, sqrt(1.0)))), 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0)), float(mat2x4(float(float(vec2(1.0, sqrt(1.0)))), 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0)))))), bool(true))))), bool(true)))), round(length(normalize(vec3(1.0, 1.0, 1.0)))), 1.0))))), _GLF_IDENTITY((float(vec2(1.0, sqrt(1.0)))), mix(float(_GLF_IDENTITY((float(vec2(1.0, sqrt(1.0)))), min((_GLF_IDENTITY(float(vec2(1.0, sqrt(1.0))), mix(float(float(vec2(1.0, sqrt(1.0)))), float(_GLF_FUZZED(-80.70)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), (float(vec2(1.0, _GLF_IDENTITY(sqrt(1.0), mix(float(_GLF_FUZZED(float(100331u))), float(sqrt(1.0)), bool(true))))))))), float(_GLF_FUZZED(-49.47)), bool(false))) - 0.0)), 1.0), mat3(1.0) * (_GLF_IDENTITY(mat3(1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, _GLF_IDENTITY(1.0, _GLF_IDENTITY(_GLF_IDENTITY(float(vec2(1.0, sqrt(_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED((6.5 - -7200.7553))), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), float(_GLF_IDENTITY(_GLF_IDENTITY(float(float(vec2(1.0, sqrt(1.0)))), _GLF_IDENTITY(float(mat2x4(float(float(vec2(1.0, sqrt(1.0)))), 0.0, 0.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, 0.0 + (_GLF_IDENTITY(1.0, min(1.0, 1.0))))) / 1.0), 0.0)), min(float(mat2x4(float(float(vec2(1.0, sqrt(1.0)))), 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0)), float(mat2x4(float(float(vec2(1.0, sqrt(1.0)))), 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0))))), float(vec3(_GLF_IDENTITY(_GLF_IDENTITY(float(float(vec2(1.0, sqrt(1.0)))), _GLF_IDENTITY(float(mat2x4(float(float(vec2(1.0, sqrt(1.0)))), 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0)), min(float(mat2x4(float(float(vec2(1.0, sqrt(1.0)))), 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0)), float(mat2x4(_GLF_IDENTITY(float(float(_GLF_IDENTITY(vec2(1.0, sqrt(1.0)), max(vec2(1.0, sqrt(1.0)), vec2(1.0, sqrt(1.0)))))), 1.0 * (float(float(vec2(1.0, sqrt(1.0)))))), 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0))))), _GLF_IDENTITY(mix(float(_GLF_FUZZED(624.940)), float(_GLF_IDENTITY(float(float(vec2(1.0, sqrt(1.0)))), _GLF_IDENTITY(float(mat2x4(float(float(vec2(1.0, sqrt(1.0)))), 0.0, 0.0, _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED((452.798 - -27.99))), float(_GLF_IDENTITY(0.0, float(vec4(0.0, 1.0, 0.0, 1.0)))), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), 0.0, 1.0, 1.0, 0.0)), min(float(mat2x4(float(float(vec2(1.0, sqrt(1.0)))), 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0)), float(mat2x4(float(float(vec2(1.0, sqrt(1.0)))), 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0)))))), bool(true)), (false ? _GLF_FUZZED(7.4) : mix(_GLF_IDENTITY(float(_GLF_FUZZED(624.940)), (float(_GLF_FUZZED(624.940))) / 1.0), float(_GLF_IDENTITY(float(float(vec2(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(2.2) : _GLF_IDENTITY(_GLF_IDENTITY(1.0, (1.0) - 0.0), abs(1.0) * (_GLF_IDENTITY(1.0, (1.0) - 0.0))))), sqrt(1.0)))), _GLF_IDENTITY(float(mat2x4(float(float(_GLF_IDENTITY(vec2(1.0, _GLF_IDENTITY(sqrt(1.0), max(sqrt(1.0), sqrt(1.0)))), clamp(vec2(1.0, _GLF_IDENTITY(sqrt(1.0), max(sqrt(1.0), sqrt(1.0)))), _GLF_IDENTITY(vec2(1.0, _GLF_IDENTITY(sqrt(1.0), max(sqrt(1.0), sqrt(1.0)))), max(_GLF_IDENTITY(vec2(1.0, _GLF_IDENTITY(sqrt(1.0), max(sqrt(1.0), sqrt(1.0)))), clamp(vec2(1.0, _GLF_IDENTITY(sqrt(1.0), max(sqrt(1.0), sqrt(1.0)))), vec2(1.0, _GLF_IDENTITY(sqrt(1.0), max(sqrt(1.0), sqrt(1.0)))), vec2(1.0, _GLF_IDENTITY(sqrt(1.0), max(sqrt(1.0), sqrt(1.0)))))), vec2(1.0, _GLF_IDENTITY(sqrt(1.0), max(sqrt(1.0), sqrt(1.0)))))), _GLF_IDENTITY(vec2(1.0, _GLF_IDENTITY(sqrt(1.0), max(sqrt(1.0), sqrt(1.0)))), (vec2(1.0, _GLF_IDENTITY(sqrt(1.0), max(sqrt(1.0), sqrt(1.0))))) - vec2(0.0, 0.0)))))), 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0)), min(float(mat2x4(float(float(vec2(1.0, sqrt(1.0)))), 0.0, 0.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(1.0, (true ? _GLF_IDENTITY(1.0, min(1.0, 1.0)) : _GLF_FUZZED(6.8))), 0.0)), float(mat2x4(float(float(vec2(1.0, sqrt(1.0)))), 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0)))))), bool(true))))), round(_GLF_IDENTITY(length(normalize(vec3(1.0, 1.0, 1.0))), max(length(normalize(vec3(1.0, 1.0, 1.0))), length(normalize(vec3(1.0, 1.0, 1.0)))))), 1.0))))), _GLF_IDENTITY((float(vec2(_GLF_IDENTITY(1.0, float(_GLF_IDENTITY(mat4(_GLF_IDENTITY(1.0, (1.0) - 0.0), 0.0, 1.0, sqrt(_GLF_IDENTITY(dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 1.0, 0.0, 0.0)), dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 1.0, 0.0, 0.0)))), 0.0, 1.0, 1.0, 1.0, 1.0, exp(log(1.0)), 1.0, 0.0, 1.0, 1.0, 1.0, 1.0), transpose(transpose(mat4(_GLF_IDENTITY(1.0, (1.0) - 0.0), 0.0, 1.0, sqrt(_GLF_IDENTITY(dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 1.0, 0.0, 0.0)), dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 1.0, 0.0, 0.0)))), 0.0, 1.0, 1.0, 1.0, 1.0, exp(log(1.0)), 1.0, 0.0, 1.0, 1.0, 1.0, 1.0)))))), sqrt(1.0)))), mix(float(_GLF_IDENTITY((float(vec2(1.0, sqrt(1.0)))), min((float(vec2(1.0, sqrt(1.0)))), (float(vec2(1.0, sqrt(1.0))))))), float(_GLF_FUZZED(-49.47)), bool(false))) - 0.0)), 1.0), (true ? _GLF_IDENTITY(mat3(1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, _GLF_IDENTITY(1.0, _GLF_IDENTITY(_GLF_IDENTITY(float(vec2(1.0, sqrt(_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED((6.5 - -7200.7553))), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), float(_GLF_IDENTITY(_GLF_IDENTITY(float(float(vec2(1.0, sqrt(1.0)))), _GLF_IDENTITY(float(mat2x4(float(float(vec2(1.0, sqrt(1.0)))), 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0)), min(float(mat2x4(float(float(vec2(1.0, sqrt(1.0)))), 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0)), float(mat2x4(float(float(vec2(1.0, sqrt(1.0)))), 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0))))), float(vec3(_GLF_IDENTITY(_GLF_IDENTITY(float(float(vec2(1.0, sqrt(1.0)))), _GLF_IDENTITY(float(mat2x4(float(float(vec2(1.0, sqrt(1.0)))), 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0)), min(float(mat2x4(float(float(vec2(1.0, sqrt(1.0)))), 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0)), float(mat2x4(_GLF_IDENTITY(_GLF_IDENTITY(float(float(vec2(1.0, sqrt(1.0)))), min(float(float(vec2(1.0, sqrt(1.0)))), _GLF_IDENTITY(float(float(vec2(1.0, sqrt(1.0)))), (float(float(vec2(1.0, sqrt(1.0))))) + 0.0))), 1.0 * (float(float(vec2(1.0, sqrt(1.0)))))), 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0))))), _GLF_IDENTITY(mix(float(_GLF_FUZZED(624.940)), float(_GLF_IDENTITY(float(float(vec2(1.0, sqrt(1.0)))), _GLF_IDENTITY(float(mat2x4(float(float(vec2(1.0, sqrt(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(fract(-8.7)) : 1.0)))))), 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0)), min(float(mat2x4(float(float(vec2(1.0, sqrt(1.0)))), 0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, float(mat2(0.0, 0.0, abs(0.0), 0.0))), 1.0, 1.0, 0.0)), float(mat2x4(float(float(vec2(1.0, sqrt(1.0)))), 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0)))))), bool(true)), (false ? _GLF_FUZZED(7.4) : mix(float(_GLF_FUZZED(624.940)), float(_GLF_IDENTITY(float(float(vec2(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(2.2) : _GLF_IDENTITY(1.0, (1.0) - 0.0))), _GLF_IDENTITY(sqrt(1.0), (sqrt(1.0)) / sqrt(1.0))))), _GLF_IDENTITY(float(mat2x4(float(float(vec2(1.0, sqrt(1.0)))), 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0)), min(float(mat2x4(float(float(vec2(1.0, sqrt(1.0)))), 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0)), float(mat2x4(float(float(vec2(1.0, sqrt(1.0)))), 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0)))))), bool(true))))), round(length(normalize(vec3(1.0, 1.0, 1.0)))), 1.0))))), _GLF_IDENTITY((float(vec2(_GLF_IDENTITY(1.0, (1.0) - 0.0), sqrt(1.0)))), mix(float(_GLF_IDENTITY((float(vec2(1.0, sqrt(1.0)))), min((float(vec2(1.0, sqrt(1.0)))), (float(vec2(1.0, sqrt(1.0))))))), float(_GLF_FUZZED(-49.47)), bool(false))) - 0.0)), 1.0), mat3(mat3x4(mat3(1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, _GLF_IDENTITY(1.0, _GLF_IDENTITY(_GLF_IDENTITY(float(vec2(1.0, sqrt(_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED((6.5 - -7200.7553))), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), float(_GLF_IDENTITY(_GLF_IDENTITY(float(float(vec2(1.0, sqrt(1.0)))), _GLF_IDENTITY(float(mat2x4(float(float(vec2(1.0, sqrt(1.0)))), 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0)), min(float(mat2x4(float(float(vec2(1.0, sqrt(1.0)))), 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0)), float(mat2x4(float(float(vec2(1.0, sqrt(1.0)))), 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0))))), float(vec3(_GLF_IDENTITY(_GLF_IDENTITY(float(float(vec2(1.0, sqrt(1.0)))), _GLF_IDENTITY(float(mat2x4(float(float(vec2(1.0, sqrt(1.0)))), 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0)), min(float(mat2x4(float(float(vec2(1.0, sqrt(1.0)))), 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0)), float(mat2x4(_GLF_IDENTITY(_GLF_IDENTITY(float(float(vec2(1.0, sqrt(1.0)))), min(float(float(vec2(1.0, sqrt(1.0)))), _GLF_IDENTITY(float(float(vec2(1.0, sqrt(1.0)))), (float(float(vec2(1.0, sqrt(1.0))))) + 0.0))), 1.0 * (float(float(vec2(1.0, sqrt(1.0)))))), 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0))))), _GLF_IDENTITY(mix(float(_GLF_FUZZED(624.940)), float(_GLF_IDENTITY(float(float(vec2(1.0, sqrt(1.0)))), _GLF_IDENTITY(float(mat2x4(float(float(vec2(1.0, sqrt(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(fract(-8.7)) : 1.0)))))), 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0)), min(float(mat2x4(float(float(vec2(1.0, sqrt(1.0)))), 0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, float(mat2(0.0, 0.0, abs(0.0), 0.0))), 1.0, 1.0, 0.0)), float(mat2x4(float(float(vec2(1.0, sqrt(1.0)))), 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0)))))), bool(true)), (false ? _GLF_FUZZED(7.4) : mix(float(_GLF_FUZZED(624.940)), float(_GLF_IDENTITY(float(float(vec2(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(2.2) : _GLF_IDENTITY(1.0, (1.0) - 0.0))), _GLF_IDENTITY(sqrt(1.0), (sqrt(1.0)) / sqrt(1.0))))), _GLF_IDENTITY(float(mat2x4(float(float(vec2(1.0, sqrt(1.0)))), 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0)), min(float(mat2x4(float(float(vec2(1.0, sqrt(1.0)))), 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0)), float(mat2x4(float(float(vec2(1.0, sqrt(1.0)))), 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0)))))), bool(true))))), round(length(normalize(vec3(1.0, 1.0, 1.0)))), 1.0))))), _GLF_IDENTITY((float(vec2(_GLF_IDENTITY(1.0, (1.0) - 0.0), sqrt(1.0)))), mix(float(_GLF_IDENTITY((float(vec2(1.0, sqrt(1.0)))), min((float(vec2(1.0, sqrt(1.0)))), (float(vec2(1.0, sqrt(1.0))))))), float(_GLF_FUZZED(-49.47)), bool(false))) - 0.0)), 1.0)))) : _GLF_FUZZED(mat3(2.6, -774.068, -6.6, -2155.1372, -396.571, -9385.1662, -7291.9398, 0.9, _GLF_IDENTITY(65.09, min(65.09, 65.09))))))))), 1.0, tan(_GLF_IDENTITY(_GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(-700.558) : 0.0)), 0.0 + (_GLF_IDENTITY(0.0, (_GLF_IDENTITY(false ? _GLF_FUZZED(-700.558) : 0.0, min(false ? _GLF_FUZZED(-700.558) : 0.0, false ? _GLF_FUZZED(-700.558) : 0.0)))))))))) > _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)), injectionSwitch)).y, _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)))), _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)))), _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)))))).y))), bool(bvec2((_GLF_IDENTITY(injectionSwitch.x, float(mat4(_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY((false ? _GLF_FUZZED(5.6) : _GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x))), 1.0 * ((false ? _GLF_FUZZED(5.6) : _GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)))))), injectionSwitch.x)), _GLF_ONE(1.0, injectionSwitch.y), 1.0, 0.0, 1.0, _GLF_IDENTITY(_GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, 0.0))), float(mat4(_GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, 0.0))), 1.0, log(1.0), 0.0, _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(distance(vec2(-7.1, 6979.3511), vec2(-3.7, 96.85))))), 1.0, 1.0, 1.0, exp(sin(0.0)), 1.0, 0.0, sqrt(1.0), 0.0, 0.0, _GLF_IDENTITY(tan(0.0), _GLF_IDENTITY(tan(0.0) + (tan(0.0)), float(mat4x3(tan(0.0) + (tan(0.0)), 0.0, _GLF_IDENTITY(dot(vec4(log(1.0), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), 1.0), vec4(0.0, 0.0, 0.0, 1.0)), _GLF_IDENTITY(dot(vec4(log(1.0), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), 1.0), vec4(0.0, 0.0, 0.0, 1.0)), 1.0 * (dot(vec4(log(1.0), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), 1.0), vec4(0.0, 0.0, 0.0, 1.0))))), 0.0, 1.0, sin(0.0), 1.0, 0.0, 0.0, 1.0, 1.0, 0.0)))), determinant(mat3(0.0, _GLF_IDENTITY(1.0, _GLF_ONE(1.0, injectionSwitch.y) * _GLF_IDENTITY((1.0), (false ? _GLF_FUZZED(-95.00) : _GLF_IDENTITY((1.0), (true ? (1.0) : _GLF_FUZZED(-56.61)))))), 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))))), _GLF_IDENTITY(1.0, (1.0) + 0.0), 1.0, 1.0, 0.0, 0.0, _GLF_IDENTITY(0.0, max(0.0, _GLF_IDENTITY(_GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(-6.7))), float(vec3(_GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(-6.7))), 0.0, _GLF_ONE(1.0, injectionSwitch.y)))))), determinant(mat2(0.0, 0.0, 0.0, length(_GLF_IDENTITY(vec2(0.0, _GLF_IDENTITY(0.0, min(0.0, 0.0))), (vec2(0.0, 0.0)) * vec2(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)), injectionSwitch)), _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(-6.4), _GLF_FUZZED(-1067.0174)), bvec2(false, false))))).y), _GLF_ONE(1.0, injectionSwitch.y)))))), determinant(mat3(1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, _GLF_IDENTITY(1.0, _GLF_IDENTITY(_GLF_IDENTITY(float(vec2(1.0, sqrt(_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED((6.5 - -7200.7553))), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), float(_GLF_IDENTITY(_GLF_IDENTITY(float(float(vec2(1.0, sqrt(1.0)))), _GLF_IDENTITY(float(mat2x4(float(float(vec2(1.0, sqrt(1.0)))), _GLF_IDENTITY(0.0, float(vec3(_GLF_IDENTITY(0.0, max(0.0, _GLF_IDENTITY(0.0, 0.0 + (0.0)))), 1.0, 1.0))), 0.0, 0.0, 0.0, 1.0, 1.0, _GLF_IDENTITY(0.0, clamp(0.0, _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), 0.0)))), min(float(mat2x4(float(float(vec2(1.0, sqrt(_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-8.3)), bool(false))))))), 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0)), float(mat2x4(float(float(vec2(1.0, sqrt(1.0)))), 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, _GLF_IDENTITY(0.0, max(0.0, _GLF_IDENTITY(0.0, (0.0) * 1.0)))))))), float(vec3(_GLF_IDENTITY(_GLF_IDENTITY(float(float(vec2(1.0, sqrt(1.0)))), _GLF_IDENTITY(float(mat2x4(float(float(vec2(1.0, sqrt(1.0)))), 0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, max(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(float(22056))), bool(false))), _GLF_IDENTITY(0.0, (0.0) / 1.0))), 1.0, 1.0, 0.0)), min(float(mat2x4(float(float(vec2(1.0, sqrt(1.0)))), 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0)), float(mat2x4(float(float(vec2(1.0, sqrt(1.0)))), 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0))))), mix(float(_GLF_FUZZED(624.940)), float(_GLF_IDENTITY(float(float(vec2(1.0, sqrt(1.0)))), _GLF_IDENTITY(float(mat2x4(float(float(vec2(1.0, sqrt(1.0)))), 0.0, 0.0, _GLF_IDENTITY(0.0, float(float(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(89.03)), bool(false)))))), 0.0, 1.0, 1.0, 0.0)), min(float(mat2x4(float(float(vec2(1.0, sqrt(1.0)))), 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0)), float(mat2x4(float(float(vec2(1.0, sqrt(1.0)))), 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0)))))), bool(true))), round(length(normalize(vec3(1.0, 1.0, 1.0)))), 1.0))))), _GLF_IDENTITY(_GLF_IDENTITY((float(vec2(1.0, sqrt(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, min(1.0, 1.0))) * 1.0))))), _GLF_IDENTITY(float(float((float(vec2(1.0, sqrt(1.0)))))), float(mat4(float(float((float(vec2(1.0, sqrt(1.0)))))), _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, sqrt(0.0), 0.0, _GLF_IDENTITY(_GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, 1.0)), dot(vec2(0.0, 1.0), vec2(0.0, 1.0))), (true ? _GLF_IDENTITY(_GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, 1.0)), dot(vec2(0.0, 1.0), vec2(0.0, 1.0))), clamp(_GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, 1.0)), dot(vec2(0.0, 1.0), vec2(0.0, 1.0))), _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, 1.0)), dot(vec2(0.0, 1.0), vec2(0.0, 1.0))), _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, 1.0)), dot(vec2(0.0, 1.0), vec2(0.0, 1.0))))) : _GLF_FUZZED(-724.797))), 0.0, 0.0, sqrt(0.0), 0.0)))), mix(float(_GLF_IDENTITY((float(vec2(1.0, sqrt(1.0)))), min((float(vec2(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, float(mat2x4(1.0, 1.0, 1.0, _GLF_IDENTITY(dot(vec4(1.0, 1.0, 0.0, 0.0), vec4(0.0, 0.0, 1.0, 1.0)), dot(vec4(1.0, 1.0, 0.0, 0.0), vec4(0.0, 0.0, 1.0, 1.0))), _GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0, 1.0))), 1.0, 1.0))) - 0.0), sqrt(1.0)))), (float(vec2(_GLF_IDENTITY(1.0, max(1.0, _GLF_IDENTITY(1.0, float(mat2x4(1.0, 0.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(dot(vec3(0.0, 1.0, 0.0), vec3(1.0, 0.0, 1.0)), dot(vec3(0.0, 1.0, 0.0), vec3(1.0, 0.0, 1.0))), 1.0, 1.0))))), sqrt(_GLF_IDENTITY(1.0, (1.0) * 1.0)))))))), float(_GLF_FUZZED(-49.47)), bool(false))) - 0.0)), 1.0)), 1.0, tan(_GLF_IDENTITY(_GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(-700.558) : 0.0)), 0.0 + (_GLF_IDENTITY(0.0, (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), ! (! (_GLF_IDENTITY(false, ! (! (false)))))) ? _GLF_FUZZED(-700.558) : 0.0)))))))) > _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], clamp(injectionSwitch[0], injectionSwitch[0], injectionSwitch[0])), injectionSwitch[1])), (injectionSwitch) - vec2(0.0, 0.0)), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], clamp(injectionSwitch[0], injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[0], (_GLF_IDENTITY(injectionSwitch[0], _GLF_IDENTITY(float(float(injectionSwitch[0])), (false ? _GLF_FUZZED(-1525.1515) : float(float(injectionSwitch[0])))))) * 1.0))), injectionSwitch[1])), (injectionSwitch) - vec2(0.0, 0.0))) / vec2(1.0, 1.0)), injectionSwitch)).y, _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, 1.0 * (injectionSwitch.y)), _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)))), _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), clamp(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), max(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), min(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)))))), _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch))) + vec2(0.0, 0.0)))))))).y))), false)))), false || (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0) > _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(-492.461)), bool(false)))))))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
        }
       else
        {
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      break;
     if(_GLF_DEAD(false))
      {
       do
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false))))))))
            continue;
           barrier();
          }
         barrier();
        }
       while(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), (_GLF_WRAPPED_LOOP(false)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), (_GLF_WRAPPED_LOOP(false)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(true && (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), (_GLF_WRAPPED_LOOP(false)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bool(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), (_GLF_WRAPPED_LOOP(false)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), bool(bvec3(true && (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), (_GLF_WRAPPED_LOOP(false)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bool(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), (_GLF_WRAPPED_LOOP(false)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), true, false))))))));
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(false))
        break;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))
        barrier();
       if(_GLF_DEAD(false))
        break;
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, false || (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, true && (injectionSwitch.x < injectionSwitch.y)))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, false || (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, true && (injectionSwitch.x < injectionSwitch.y))))), ! (! (! (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, false || (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, true && (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))))))))))))))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
        return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0)))))))))
          break;
         barrier();
        }
       break;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        break;
      }
     if(_GLF_DEAD(false))
      barrier();
     for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(6)) - 0)))); _injected_loop_counter --)
      {
       barrier();
      }
     if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), true, true, false))))))
      return;
     if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(false))
        barrier();
       continue;
      }
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)))), bool(_GLF_IDENTITY(bvec2(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(false, (false) && true)), _GLF_IDENTITY(bvec2(bvec4(_GLF_IDENTITY(bvec2(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false), bvec2(bvec3(bvec2(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false), false))), false, true)), bvec2(bvec4(bvec2(bvec4(_GLF_IDENTITY(bvec2(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false), bvec2(bvec3(bvec2(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false), false))), false, true)), false, false)))))))
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false)))) || false))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), (bool(false)) && true))), (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        continue;
       barrier();
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       barrier();
       if(_GLF_DEAD(false))
        continue;
      }
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    continue;
   if(_GLF_DEAD(false))
    continue;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y))));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   barrier();
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), false || (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), true && (_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), true && (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
  }
 else
  {
   do
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          return;
         continue;
        }
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          break;
         barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y)), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), bvec2(bvec2(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))))), false || (bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))))) || (_GLF_IDENTITY(false, true && (false))))))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                continue;
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
             if(_GLF_DEAD(false))
              continue;
             barrier();
            }
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
            break;
           if(_GLF_DEAD(false))
            return;
           barrier();
          }
         break;
         if(_GLF_DEAD(false))
          continue;
        }
       return;
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 & 1)); _injected_loop_counter ++)
        {
         return;
        }
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            return;
           return;
          }
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY(injectionSwitch, vec2(vec3(injectionSwitch, 0.0))).x > _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(vec3(77.23, 4.7, 2041.2187).y)), vec2(_GLF_FUZZED(float(-42034)), (injectionSwitch)[1]), bvec2(false, true))).y))))
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
            {
             barrier();
            }
           if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true))
            barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(mat4(_GLF_IDENTITY(injectionSwitch.y, float(mat4x2(injectionSwitch.y, 1.0, 1.0, 1.0, 1.0, sqrt(0.0), 0.0, 0.0))), sqrt(1.0), 0.0, 0.0, log(1.0), 1.0, 0.0, 1.0, 0.0, 0.0, _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(float(num_workgroup)) : 0.0)), sqrt(1.0), 1.0, 0.0, abs(1.0), 0.0)))))))
            return;
           barrier();
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
          return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         return;
        }
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(mat3x2(_GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(6866.8488), _GLF_FUZZED(16.03)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))) : _GLF_FUZZED(injectionSwitch))), _GLF_IDENTITY(dot(vec3(0.0, 0.0, 1.0), vec3(0.0, 0.0, 1.0)), dot(vec3(0.0, 0.0, 1.0), vec3(0.0, 0.0, 1.0))), 0.0, sqrt(0.0), _GLF_ONE(1.0, injectionSwitch.y)))).x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED((+ -148.861))), float(_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-75.72) : injectionSwitch.y))), bool(true)))) + 0.0)))))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, float(mat4(injectionSwitch.x, 1.0, 0.0, 0.0, 0.0, abs(1.0), 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x)))), injectionSwitch.x)) > injectionSwitch.y))))
          break;
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
      }
     else
      {
       if(_GLF_DEAD(false))
        return;
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec4(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))), false, false, true)))))) && true)))), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec4(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))), false, false, true)))))) && true)))), false), _GLF_IDENTITY(bvec2(bvec2(bvec2(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec4(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))), false, false, true)))))) && true)))), false))), bvec2(bvec3(bvec2(bvec2(bvec2(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec4(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))), false, false, true)))))) && true)))), false))), false)))))))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 uint workgroup_base = workgroup_size * workgroup_id;
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(injectionSwitch.x > injectionSwitch.y)))) && true)))))
  return;
 do
  {
   do
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, true, true)))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
         break;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       continue;
       if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
        break;
      }
     if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), ! _GLF_IDENTITY((! (_GLF_DEAD(false))), ((! (_GLF_DEAD(false)))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) && true))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false)) && true))))
        {
         if(_GLF_DEAD(false))
          return;
         return;
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || false)) || false)))
        return;
       barrier();
      }
     if(_GLF_DEAD(false))
      continue;
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), 0 ^ (int(_GLF_IDENTITY(7, int(_GLF_IDENTITY(ivec4(7, 0, int(_GLF_ZERO(0.0, injectionSwitch.x)), 1), ivec4(0, 0, 0, 0) ^ (ivec4(7, 0, int(_GLF_ZERO(0.0, injectionSwitch.x)), 1)))))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       return;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
     barrier();
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(-2.1)), vec2(_GLF_FUZZED(0.9), (injectionSwitch)[1]), bvec2(false, true))).x < injectionSwitch.y)) ? injectionSwitch.y : _GLF_FUZZED(length(vec4(3.7, 4743.5968, 92.02, 6341.1224)))))))))
  {
   if(_GLF_DEAD(false))
    barrier();
   return;
  }
 uint subgroup_base = subgroup_id * subgroup_size;
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec4(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, false))))
  return;
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[_GLF_IDENTITY(0, max(0, 0))], injectionSwitch[_GLF_IDENTITY(_GLF_IDENTITY(1, 0 ^ (1)), clamp(_GLF_IDENTITY(1, _GLF_IDENTITY((1), max(_GLF_IDENTITY((1), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY((1), 0 ^ ((1)))), clamp(~ (_GLF_IDENTITY((1), 0 ^ ((1)))), ~ (_GLF_IDENTITY((1), 0 ^ ((1)))), ~ (_GLF_IDENTITY((1), 0 ^ ((1)))))))), (1))) | (1)), 1, 1))])).y))))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY((false), ! (! ((false)))) && true, true && (_GLF_IDENTITY((false), ! (! ((false)))) && true)))))
      barrier();
     if(_GLF_DEAD(false))
      return;
     for(int _injected_loop_counter = (_GLF_IDENTITY(_GLF_IDENTITY(0, ~ (~ (0))), (_GLF_IDENTITY(0, ~ (~ (0)))) / 1) & int(100120u)); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) ^ (0 << _GLF_IDENTITY(int(8), int(8)))) != (1 & (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4)), min(_GLF_IDENTITY((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4)), ((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4))) | 0), _GLF_IDENTITY((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4)), 0 ^ ((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4))))))))); _injected_loop_counter ++)
      {
       return;
       if(_GLF_DEAD(false))
        break;
      }
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), (! ((injectionSwitch.x > injectionSwitch.y))) || false)))))))))
  return;
 if(_GLF_DEAD(false))
  barrier();
 for(int _injected_loop_counter = (((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(6), int(_GLF_IDENTITY(6, ~ (~ (6))))), (_GLF_IDENTITY(int(6), int(_GLF_IDENTITY(6, ~ (~ (6)))))) << 0)) >> _GLF_IDENTITY(int(6), int(6))) & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (_GLF_IDENTITY(! (false), true && (! (false))))))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      break;
     return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(-788.575))) > injectionSwitch.y))))
    continue;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 do
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), ! _GLF_IDENTITY((! (_GLF_DEAD(false))), true && ((! (_GLF_DEAD(false)))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      continue;
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(_GLF_IDENTITY(bvec3(injectionSwitch.x > injectionSwitch.y, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec3(bvec3(bvec3(injectionSwitch.x > injectionSwitch.y, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))))))));
 uint virtual_gid = workgroup_base + subgroup_base + subgroup_local_id;
 uint next_virtual_gid = workgroup_base + subgroup_base + ((subgroup_local_id + 1) % _GLF_IDENTITY(subgroup_size, max(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, max(subgroup_size, subgroup_size))) ^ 0u), _GLF_IDENTITY(0u, (0u) | (_GLF_IDENTITY(0u, (false ? _GLF_FUZZED(subgroup_base) : 0u)))) | (subgroup_size)), _GLF_IDENTITY(subgroup_size, max(subgroup_size, _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, max(subgroup_size, subgroup_size)), _GLF_IDENTITY((true ? subgroup_size : _GLF_FUZZED(subgroup_local_id)), ((true ? subgroup_size : _GLF_FUZZED(subgroup_local_id))) ^ (0u | _GLF_IDENTITY(0u, max(_GLF_IDENTITY(0u, (0u) | 0u), 0u))))))))));
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 do
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      continue;
     for(int _injected_loop_counter = int(_GLF_ZERO(_GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(-236.164) : _GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, float(mat4x3(0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0)))) * 1.0))), injectionSwitch.x)); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < ((_GLF_IDENTITY(1, (1) / 1) << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(_GLF_IDENTITY(2, (_GLF_IDENTITY(2, (2) + 0)) - 0)))), ! _GLF_IDENTITY((! (_injected_loop_counter < ((1 << _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (_GLF_IDENTITY(int(2), clamp(int(2), int(2), int(2)))) >> 0))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(2), int(int(int(_GLF_IDENTITY(2, ~ (~ (2))))))), int(2))))), ((! (_injected_loop_counter < ((1 << _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (_GLF_IDENTITY(int(2), clamp(int(2), int(2), int(2)))) >> 0))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(2), int(int(int(_GLF_IDENTITY(2, ~ (~ (2))))))), int(2)))))) && _GLF_IDENTITY(true, bool(bvec3(true, true, true)))))); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           do
            {
             barrier();
             if(_GLF_DEAD(false))
              continue;
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                barrier();
               break;
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(vec2(11.43, -9610.6666).t)), float(injectionSwitch.y), bool(true)))))))
            return;
           if(_GLF_DEAD(false))
            break;
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))))))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY((true) && true, ! (! ((true) && true)))), (injectionSwitch.x < injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
             if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))))
              break;
             barrier();
            }
           barrier();
          }
         else
          {
          }
         if(_GLF_DEAD(false))
          return;
         if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), true, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
          barrier();
        }
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         return;
        }
      }
     return;
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
     return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    {
     do
      {
       barrier();
       if(_GLF_DEAD(false))
        return;
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      return;
    }
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / exp(vec2(0.0, 0.0))).x, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x)))) > injectionSwitch.y))))
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_DEAD(false))))
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) / (1 ^ 0)))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(false))
              return;
            }
           else
            {
            }
           do
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_DEAD(false))
              return;
             if(_GLF_DEAD(false))
              barrier();
            }
           while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) && true)));
           if(_GLF_DEAD(false))
            return;
           return;
          }
        }
       if(_GLF_DEAD(false))
        break;
       continue;
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
        continue;
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, ! (! (false))))))))
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))))))
              continue;
             barrier();
            }
           continue;
          }
         if(_GLF_DEAD(false))
          continue;
         barrier();
        }
      }
     if(_GLF_DEAD(false))
      break;
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), bool(bool(! ((injectionSwitch.x > injectionSwitch.y))))))), ! (! ((injectionSwitch.x > injectionSwitch.y)))))), true && (_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))), ! _GLF_IDENTITY((! _GLF_IDENTITY(((_GLF_IDENTITY(injectionSwitch, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch : _GLF_FUZZED(injectionSwitch))).x > injectionSwitch.y)), ! (! (((injectionSwitch.x > injectionSwitch.y)))))), ! (_GLF_IDENTITY(! ((! _GLF_IDENTITY(_GLF_IDENTITY(((injectionSwitch.x > injectionSwitch.y)), ! (! (((injectionSwitch.x > injectionSwitch.y))))), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(((injectionSwitch.x > injectionSwitch.y)), ! (! (((injectionSwitch.x > injectionSwitch.y))))), true, false)), bool(bvec3(bool(bvec3(_GLF_IDENTITY(((injectionSwitch.x > injectionSwitch.y)), ! (! (((injectionSwitch.x > injectionSwitch.y))))), true, false)), false, true)))))), (_GLF_IDENTITY(! ((! _GLF_IDENTITY(((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).x, mix(float(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).x), float(_GLF_FUZZED(-7.3)), bool(false))) > injectionSwitch.y)), ! (! (((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(5.0)), vec2(_GLF_FUZZED(-8219.6258), (injectionSwitch)[1]), bvec2(false, true)))))) - log(vec2(1.0, 1.0))).y))))))), bool(bvec2(! ((! _GLF_IDENTITY(_GLF_IDENTITY(((injectionSwitch.x > injectionSwitch.y)), ! (! (((injectionSwitch.x > injectionSwitch.y))))), false || (_GLF_IDENTITY(((injectionSwitch.x > injectionSwitch.y)), ! (! (((injectionSwitch.x > injectionSwitch.y))))))))), false)))) || false)))))))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false), true))), ! (! _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(vec4(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))), _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, 0.0))), _GLF_IDENTITY(dot(vec3(1.0, 1.0, 1.0), vec3(0.0, 0.0, 0.0)), dot(vec3(1.0, 1.0, 1.0), vec3(0.0, 0.0, 0.0)))))).y)), _GLF_IDENTITY(bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false)), true && (bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false))))), bool(bvec3(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat3x4(injectionSwitch, 1.0, 0.0, sqrt(1.0), 0.0, 1.0, 0.0, abs(0.0), 0.0, 1.0, cos(0.0))), vec2(mat4x3(_GLF_IDENTITY(vec2(mat3x4(injectionSwitch, 1.0, 0.0, sqrt(1.0), 0.0, 1.0, 0.0, abs(0.0), 0.0, 1.0, cos(0.0))), clamp(vec2(mat3x4(injectionSwitch, 1.0, 0.0, sqrt(1.0), 0.0, 1.0, 0.0, abs(0.0), 0.0, 1.0, cos(0.0))), vec2(mat3x4(injectionSwitch, 1.0, 0.0, sqrt(1.0), 0.0, 1.0, 0.0, abs(0.0), 0.0, 1.0, cos(0.0))), vec2(mat3x4(injectionSwitch, 1.0, 0.0, sqrt(1.0), 0.0, 1.0, 0.0, abs(0.0), 0.0, 1.0, cos(0.0))))), 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, determinant(mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0)), 1.0)))).y)))), true, true, false)), ! (! (_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true, true, false)), (bool(bvec4(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true, true, false))) && true))))), false, true)))), bool(bvec3((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) > injectionSwitch.y)), _GLF_IDENTITY(bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false)), true && (bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false))))), bool(bvec3(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)).y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true, true, false)), ! (! (_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true, true, false)), (bool(bvec4(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true, true, false))) && true))))), false, true)))), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))), bool(bvec4(_GLF_FALSE(_GLF_IDENTITY(false, true && _GLF_IDENTITY((false), bool(_GLF_IDENTITY(bvec3((false), false, false), bvec3(bvec3(bvec3((false), false, false))))))), (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, 1.0 * (injectionSwitch.y)), max(_GLF_IDENTITY(injectionSwitch.y, float(_GLF_IDENTITY(mat4x3(injectionSwitch.y, _GLF_IDENTITY(dot(vec4(1.0, 0.0, 0.0, tan(0.0)), vec4(1.0, 0.0, 0.0, 0.0)), dot(vec4(1.0, 0.0, 0.0, tan(0.0)), vec4(1.0, 0.0, 0.0, 0.0))), 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, exp(0.0)), (mat4x3(injectionSwitch.y, _GLF_IDENTITY(dot(vec4(1.0, 0.0, 0.0, tan(0.0)), _GLF_IDENTITY(vec4(1.0, 0.0, _GLF_IDENTITY(0.0, 0.0 + (_GLF_IDENTITY(0.0, _GLF_IDENTITY(float(vec4(0.0, 1.0, 1.0, 0.0)), max(float(vec4(0.0, 1.0, 1.0, 0.0)), float(vec4(0.0, 1.0, 1.0, 0.0))))))), 0.0), clamp(vec4(1.0, 0.0, _GLF_IDENTITY(0.0, 0.0 + (_GLF_IDENTITY(0.0, _GLF_IDENTITY(float(vec4(0.0, 1.0, 1.0, 0.0)), max(float(vec4(0.0, 1.0, 1.0, 0.0)), float(vec4(0.0, 1.0, 1.0, 0.0))))))), 0.0), vec4(1.0, 0.0, _GLF_IDENTITY(0.0, 0.0 + (_GLF_IDENTITY(0.0, _GLF_IDENTITY(float(vec4(0.0, 1.0, 1.0, 0.0)), max(float(vec4(0.0, 1.0, 1.0, 0.0)), float(vec4(0.0, 1.0, 1.0, 0.0))))))), 0.0), vec4(1.0, 0.0, _GLF_IDENTITY(0.0, 0.0 + (_GLF_IDENTITY(0.0, _GLF_IDENTITY(float(vec4(0.0, 1.0, 1.0, 0.0)), max(float(vec4(0.0, 1.0, 1.0, 0.0)), float(vec4(0.0, 1.0, 1.0, 0.0))))))), 0.0)))), dot(vec4(1.0, 0.0, 0.0, tan(0.0)), vec4(1.0, 0.0, 0.0, 0.0))), 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, exp(0.0))) + mat4x3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))), _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - _GLF_IDENTITY(0.0, min(0.0, 0.0))))), max(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))) - _GLF_IDENTITY(0.0, min(0.0, 0.0))))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))))), float(_GLF_FUZZED(1.8)), bool(false))), max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), vec2(vec2(mat2(1.0) * (injectionSwitch))))).y) - _GLF_IDENTITY(0.0, min(0.0, 0.0))))))))), false, true, false)))))
        break;
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) && true))))))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
       if(_GLF_DEAD(false))
        return;
       barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        return;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - sin(0.0)) > _GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) - vec2(0.0, 0.0), max((injectionSwitch) - vec2(0.0, 0.0), (injectionSwitch) - vec2(0.0, 0.0)))), (true ? _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) - vec2(0.0, 0.0), max((injectionSwitch) - vec2(0.0, 0.0), (injectionSwitch) - vec2(0.0, 0.0)))) : _GLF_FUZZED(vec2(-2.2, 2219.5578)))) : _GLF_FUZZED(_GLF_IDENTITY(min(vec2(9.1, -9.7), injectionSwitch), (min(vec2(9.1, -9.7), injectionSwitch)) - vec2(0.0, 0.0))))).y))))
      {
       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), ! (! (_GLF_WRAPPED_IF_FALSE(false)))))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, false)))))
            barrier();
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_DEAD(false))
            return;
           barrier();
          }
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
       break;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            return;
           break;
          }
         break;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     else
      {
       if(_GLF_DEAD(false))
        return;
      }
     atomicStore(buf[next_virtual_gid], uint(1), 4, 64, _GLF_IDENTITY(4, _GLF_IDENTITY(0, clamp(_GLF_IDENTITY(0, (0) ^ 0), 0, 0)) ^ _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(4, (4) ^ 0), (_GLF_IDENTITY(4, (4) ^ 0)) | (_GLF_IDENTITY(4, (_GLF_IDENTITY(4, min(4, _GLF_IDENTITY(4, min(4, 4))))) ^ 0)))), ~ (~ ((_GLF_IDENTITY(4, (4) ^ 0)))))));
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, bool(bool(false))))))), ! (! (_GLF_DEAD(false)))))
      {
       if(_GLF_DEAD(false))
        barrier();
       do
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false))))))))
          continue;
         return;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     if(_GLF_DEAD(false))
      break;
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
  }
 else
  {
  }
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) || false))), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch), mat2(1.0) * ((injectionSwitch))) * exp(_GLF_IDENTITY(vec2(0.0, _GLF_IDENTITY(0.0, min(0.0, 0.0))), (false ? _GLF_FUZZED(injectionSwitch) : vec2(0.0, _GLF_IDENTITY(0.0, min(0.0, 0.0)))))), (false ? _GLF_FUZZED(injectionSwitch) : (injectionSwitch) * _GLF_IDENTITY(exp(vec2(0.0, 0.0)), (exp(vec2(0.0, 0.0))) * mat2(1.0))))).x > injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   else
    {
    }
   do
    {
     do
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
        return;
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        break;
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(false, true && (false))))));
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(min(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-9.8), _GLF_FUZZED(-407.283)), vec2((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch)[1], 0.0 + ((injectionSwitch)[1]))), bvec2(true, true))), -62.28)))))).y)), true, true, true)))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-1178.1217)), float(injectionSwitch.y), bool(true))), injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y))))))
      {
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(bool((injectionSwitch.x > injectionSwitch.y))), false || (bool(bool((injectionSwitch.x > injectionSwitch.y)))))))))
        return;
       return;
      }
    }
  }
 uint read = _GLF_IDENTITY(atomicLoad(buf[virtual_gid], _GLF_IDENTITY(4, int(int(4))), 64, 2), (true ? atomicLoad(buf[virtual_gid], 4, 64, 2) : _GLF_FUZZED(workgroup_base)));
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false)))))
  {
   if(_GLF_DEAD(false))
    barrier();
   return;
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-1954.9242) : injectionSwitch.y))))), false || (_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true))))
        return;
       barrier();
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         return;
        }
       barrier();
      }
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, false)))))
      return;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      return;
     do
      {
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
   barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 for(int _injected_loop_counter = (-253 & 0); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) | (_injected_loop_counter))) * int(_GLF_ONE(1.0, injectionSwitch.y))) != _GLF_IDENTITY(1, min(1, _GLF_IDENTITY(1, int(ivec2(_GLF_IDENTITY(1, (1) | (1)), 1)))))); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0)))))
    barrier();
   for(int _injected_loop_counter = 1; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != (0 >> _GLF_IDENTITY(int(2), int(2)))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != (0 >> _GLF_IDENTITY(int(2), int(2)))), (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != (0 >> _GLF_IDENTITY(int(2), int(2)))), bool(bvec2(_GLF_WRAPPED_LOOP(_injected_loop_counter != (0 >> _GLF_IDENTITY(int(2), int(2)))), false)))) && true))); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      break;
     subgroupBarrier();
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      return;
     return;
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, true, _GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))), injectionSwitch, injectionSwitch)).y)), false)), _GLF_IDENTITY(bool(bvec4(bool(bvec4(false, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)), true, false, true)), ! (! (bool(bvec4(bool(bvec4(false, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)), true, false, true))))))), (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))
      return;
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)).x)); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, 0 + (_injected_loop_counter)) < _GLF_IDENTITY(1, (_GLF_IDENTITY(1, max(_GLF_IDENTITY(1, max(1, 1)), 1))) | (_GLF_IDENTITY(1, (1) ^ 0)))); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       do
        {
         if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_DEAD(false)), (bool(_GLF_DEAD(false))) && true)), false || (bool(_GLF_IDENTITY(bool(_GLF_DEAD(false)), (bool(_GLF_DEAD(false))) && true))))))
          return;
        }
       while(_GLF_WRAPPED_LOOP(false));
       return;
       if(_GLF_DEAD(false))
        break;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       return;
      }
     if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
      return;
    }
   do
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bool(false))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bool(false))), (_GLF_IDENTITY(false, bool(bool(false)))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bool(false))), (_GLF_IDENTITY(false, bool(bool(false)))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), bool(bool(! (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bool(false))), (_GLF_IDENTITY(false, bool(bool(false)))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))) || false)))), bool(bvec4(! (_GLF_IDENTITY(false, bool(bool(false)))), false, false, false))))), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y)))))), (_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bool(false))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bool(false))), (_GLF_IDENTITY(false, bool(bool(false)))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), (_GLF_IDENTITY(! _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bool(false))), (_GLF_IDENTITY(false, bool(bool(false)))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bool(false))), (_GLF_IDENTITY(false, bool(bool(false)))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), ((_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bool(false))), (_GLF_IDENTITY(false, bool(bool(false)))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bool(bool(! (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bool(false))), (_GLF_IDENTITY(false, bool(bool(false)))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))) || false)))), bool(bvec4(! (_GLF_IDENTITY(false, bool(bool(false)))), false, false, false))))), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y))))))) && true)))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)))) > injectionSwitch.y))))
        continue;
      }
     else
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))))))
          return;
         return;
        }
       return;
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(false))
        continue;
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - _GLF_IDENTITY(vec2(0.0, 0.0), (false ? _GLF_FUZZED(injectionSwitch) : _GLF_IDENTITY(vec2(0.0, 0.0), vec2(1.0, 1.0) * (vec2(0.0, 0.0))))))), clamp(max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0))), max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) - vec2(0.0, 0.0), min(_GLF_IDENTITY((injectionSwitch) - vec2(0.0, 0.0), (false ? _GLF_FUZZED(injectionSwitch) : (injectionSwitch) - vec2(0.0, 0.0))), (injectionSwitch) - vec2(0.0, 0.0))))), _GLF_IDENTITY(max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0))), (max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)))) + vec2(0.0, 0.0)))))) / vec2(1.0, 1.0)).x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = _GLF_IDENTITY(_GLF_IDENTITY(0, (0) / 1), min(0, 0)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0)))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(_GLF_IDENTITY(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false), bvec2(bvec3(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false), true)))))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))))))
        return;
       barrier();
      }
     return;
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
    return;
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0))[0], injectionSwitch[1])).y, max(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], mix(float(injectionSwitch[1]), float(_GLF_FUZZED(7.6)), bool(false))))).y))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     barrier();
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
      barrier();
     barrier();
    }
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, float(mat2x4(injectionSwitch.y, 0.0, cos(0.0), 0.0, 0.0, length(log(vec4(1.0, 1.0, 1.0, 1.0))), log(round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0))))), tan(0.0)))), (_GLF_IDENTITY(injectionSwitch.y, float(mat2x4(injectionSwitch.y, 0.0, cos(0.0), 0.0, 0.0, length(_GLF_IDENTITY(log(vec4(1.0, 1.0, 1.0, 1.0)), max(log(vec4(1.0, 1.0, 1.0, 1.0)), log(vec4(1.0, 1.0, 1.0, 1.0))))), log(round(length(normalize(vec4(_GLF_IDENTITY(1.0, max(1.0, 1.0)), 1.0, _GLF_IDENTITY(1.0, max(1.0, 1.0)), 1.0))))), tan(0.0))))) / 1.0)))) || false), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).x > injectionSwitch.y)))))))), (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(mat2x4(injectionSwitch.y, 0.0, cos(0.0), 0.0, 0.0, length(log(vec4(1.0, 1.0, 1.0, 1.0))), log(round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0))))), tan(0.0))))))) || false), true && (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(mat2x4(injectionSwitch.y, 0.0, cos(0.0), 0.0, 0.0, length(log(vec4(1.0, 1.0, 1.0, 1.0))), log(round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0))))), tan(0.0)))))), ! (! (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(mat2x4(injectionSwitch.y, 0.0, cos(0.0), 0.0, 0.0, length(log(vec4(1.0, 1.0, 1.0, 1.0))), log(round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0))))), tan(0.0)))))))))) || false))))))))
    {
    }
   else
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false)) && true))
      barrier();
    }
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = (_GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), (_GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), (int(_GLF_ZERO(0.0, injectionSwitch.x))) | 0)) | (int(_GLF_ZERO(0.0, injectionSwitch.x)))) >> _GLF_IDENTITY(int(2), int(2))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       return;
      }
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       barrier();
      }
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    return;
   barrier();
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || _GLF_IDENTITY((_GLF_IDENTITY(false, (false) || false)), bool(bvec3((_GLF_IDENTITY(false, (false) || false)), true, false)))), (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat4x3(injectionSwitch, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0), transpose(transpose(mat4x3(injectionSwitch, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0)))))), injectionSwitch)).x > injectionSwitch.y))))
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
        return;
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0) > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bool(false)))))
        {
        }
       else
        {
         return;
        }
       if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))))
        return;
      }
    }
   else
    {
    }
  }
 else
  {
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), ((false)) || false)))))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec2(_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / _GLF_IDENTITY(1.0, float(float(1.0))))), ! (! ((injectionSwitch.x > injectionSwitch.y)))), _GLF_IDENTITY(false, (false) || false))))), bool(bvec4(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))), false), bvec2(bvec4(_GLF_IDENTITY(bvec2(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))), false), bvec2(bvec3(_GLF_IDENTITY(bvec2(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(! (! ((injectionSwitch.x > injectionSwitch.y))), true && (_GLF_IDENTITY(! (! ((injectionSwitch.x > injectionSwitch.y))), (! (! ((injectionSwitch.x > injectionSwitch.y)))) && true)))), false), bvec2(bvec3(_GLF_IDENTITY(bvec2(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(! (! ((injectionSwitch.x > injectionSwitch.y))), true && (_GLF_IDENTITY(! (! ((injectionSwitch.x > injectionSwitch.y))), (! (! ((injectionSwitch.x > injectionSwitch.y)))) && true)))), false), bvec2(bvec2(bvec2(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(! (! ((injectionSwitch.x > injectionSwitch.y))), true && (_GLF_IDENTITY(! (! ((injectionSwitch.x > injectionSwitch.y))), (! (! ((injectionSwitch.x > injectionSwitch.y)))) && true)))), false)))), false))), true))), false, true)))))), false, true, false)))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    return;
   barrier();
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   for(int _injected_loop_counter = int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * abs(vec2(1.0, 1.0))).y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-9821.9570)), float(injectionSwitch.x), bool(true))))), (_GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), (int(_GLF_ZERO(0.0, injectionSwitch.x))) / int(_GLF_ONE(1.0, injectionSwitch.y)))) ^ 0)); _injected_loop_counter --)
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)).x > injectionSwitch.y))))
              break;
             barrier();
            }
           barrier();
          }
         if(_GLF_DEAD(false))
          break;
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y))))
          return;
         atomicStore(checker[virtual_gid], read, 4, 64, 4);
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         if(_GLF_DEAD(false))
          {
           if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x < injectionSwitch.y)) && (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || _GLF_IDENTITY(false, _GLF_IDENTITY(false, bool(bvec4(false, true, false, true))) || (false))))))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
              barrier();
             if(_GLF_DEAD(false))
              continue;
             continue;
            }
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             return;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(9.8)), bool(false))) > injectionSwitch.y))))
              break;
            }
           else
            {
            }
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bool(false))), (injectionSwitch.x > injectionSwitch.y))))
          return;
         for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), max(int(4), int(4))))) >> _GLF_IDENTITY(int(4), int(4))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
          {
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              break;
             barrier();
            }
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     else
      {
      }
    }
   do
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
      break;
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), (bool(false)) || false)))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-97.39, -68.83)) : injectionSwitch)), injectionSwitch)).y))))
        {
         if(_GLF_DEAD(false))
          return;
         barrier();
        }
       barrier();
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   do
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      break;
    }
   while(_GLF_WRAPPED_LOOP(false));
   do
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED((6272.2680 - 0.4)), _GLF_FUZZED(66.74)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))).x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            break;
           return;
          }
         barrier();
        }
       do
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            return;
           return;
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
       return;
       if(_GLF_DEAD(false))
        return;
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
     return;
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec2(! (false), true)))))))
    return;
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(_GLF_IDENTITY(vec2(_GLF_FUZZED(float(74545)), (injectionSwitch)[1]), min(vec2(_GLF_FUZZED(float(74545)), (injectionSwitch)[1]), vec2(_GLF_FUZZED(float(74545)), (injectionSwitch)[1]))), vec2((injectionSwitch)[0], _GLF_FUZZED(-35.93)), bvec2(true, false))).y)), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(_GLF_IDENTITY(vec2(_GLF_FUZZED(float(74545)), (injectionSwitch)[1]), min(vec2(_GLF_FUZZED(float(74545)), (injectionSwitch)[1]), vec2(_GLF_FUZZED(float(74545)), (injectionSwitch)[1]))), vec2((injectionSwitch)[0], _GLF_FUZZED(-35.93)), bvec2(true, false))).y))), ! (! (! (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(_GLF_IDENTITY(vec2(_GLF_FUZZED(float(74545)), (injectionSwitch)[1]), min(vec2(_GLF_FUZZED(float(74545)), (injectionSwitch)[1]), vec2(_GLF_IDENTITY(_GLF_FUZZED(float(74545)), (_GLF_FUZZED(float(74545))) / exp(0.0)), (injectionSwitch)[1]))), vec2((injectionSwitch)[0], _GLF_FUZZED(-35.93)), bvec2(true, false))).y), true && (_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(_GLF_IDENTITY(vec2(_GLF_FUZZED(float(74545)), (injectionSwitch)[1]), min(vec2(_GLF_FUZZED(float(74545)), (injectionSwitch)[1]), vec2(_GLF_IDENTITY(_GLF_FUZZED(float(74545)), (_GLF_FUZZED(float(74545))) / exp(0.0)), (injectionSwitch)[1]))), vec2((injectionSwitch)[0], _GLF_FUZZED(-35.93)), bvec2(true, false))).y), bool(bvec3(_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(_GLF_IDENTITY(vec2(_GLF_FUZZED(float(74545)), (injectionSwitch)[1]), min(vec2(_GLF_FUZZED(float(74545)), (injectionSwitch)[1]), vec2(_GLF_IDENTITY(_GLF_FUZZED(float(74545)), (_GLF_FUZZED(float(74545))) / exp(0.0)), (injectionSwitch)[1]))), vec2((injectionSwitch)[0], _GLF_FUZZED(-35.93)), bvec2(true, false))).y), ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(_GLF_IDENTITY(vec2(_GLF_FUZZED(float(74545)), (injectionSwitch)[1]), min(vec2(_GLF_FUZZED(float(74545)), (injectionSwitch)[1]), vec2(_GLF_IDENTITY(_GLF_FUZZED(float(74545)), (_GLF_FUZZED(float(74545))) / exp(0.0)), (injectionSwitch)[1]))), vec2((injectionSwitch)[0], _GLF_FUZZED(-35.93)), bvec2(true, false))).y)) || false), false, false))))))))))))))
      {
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
    }
   else
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, false)), (bool(bvec2(false, false))) && true))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         return;
         if(_GLF_DEAD(false))
          return;
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(mat4x3(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0), abs(1.0), round(length(normalize(1.0))), 1.0, cos(0.0), 1.0, 0.0, _GLF_IDENTITY(dot(vec2(_GLF_IDENTITY(0.0, (0.0) - tan(0.0)), 1.0), vec2(1.0, 0.0)), dot(vec2(0.0, 1.0), vec2(1.0, 0.0))), _GLF_IDENTITY(0.0, max(0.0, _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-1118.5102)), float(0.0), bool(true))))), 1.0, 1.0, 1.0)))))))
        barrier();
       return;
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (! (! (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))))))))))))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (_GLF_IDENTITY(! (false), ! (! (! (false)))))))))))
          return;
         barrier();
        }
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY((_GLF_IDENTITY(false, (false) || false)), ! (! ((_GLF_IDENTITY(false, (false) || false))))) && true)))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat4(injectionSwitch, 1.0, 0.0, 0.0, _GLF_IDENTITY(dot(vec4(0.0, 0.0, 0.0, 0.0), vec4(1.0, exp(0.0), determinant(mat4(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, _GLF_IDENTITY(1.0, abs(0.0) + (1.0)), 0.0, 1.0, 1.0)), exp(0.0))), dot(vec4(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), 0.0, 0.0, 0.0), vec4(1.0, exp(0.0), determinant(mat4(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0)), exp(0.0)))), 1.0, exp(0.0), 0.0, 0.0, 0.0, abs(round(length(normalize(1.0)))), _GLF_ZERO(0.0, injectionSwitch.x), 0.0, _GLF_IDENTITY(dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(1.0, 1.0, 0.0, 1.0)), dot(_GLF_IDENTITY(vec4(0.0, 0.0, 1.0, 0.0), vec4(1.0, 1.0, 1.0, 1.0) * (vec4(0.0, 0.0, 1.0, 0.0))), vec4(1.0, 1.0, 0.0, 1.0))), 0.0)), vec2(1.0, 1.0) * (vec2(mat4(injectionSwitch, 1.0, 0.0, 0.0, _GLF_IDENTITY(dot(vec4(0.0, 0.0, 0.0, 0.0), vec4(1.0, exp(0.0), determinant(mat4(1.0, 0.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0)), exp(0.0))), dot(vec4(0.0, 0.0, 0.0, 0.0), vec4(1.0, exp(0.0), determinant(mat4(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, _GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-2.7)), bool(false))), 1.0)), 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0)), exp(0.0)))), 1.0, exp(0.0), 0.0, 0.0, 0.0, abs(round(length(normalize(1.0)))), _GLF_ZERO(0.0, injectionSwitch.x), 0.0, _GLF_IDENTITY(dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(1.0, 1.0, 0.0, 1.0)), dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(1.0, 1.0, 0.0, 1.0))), 0.0))))).y)), bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(-927.610))) > injectionSwitch.y))) || false), false || (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(-927.610))) > injectionSwitch.y))) || false))), false, false, false)))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     barrier();
    }
   else
    {
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).y, 0.0 + (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1]))) * vec2(1.0, 1.0)), injectionSwitch, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))), (injectionSwitch) / vec2(1.0, 1.0)).y))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(-8075.3889) : _GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x)))) > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0), ! (! (injectionSwitch.x > injectionSwitch.y)))), _GLF_IDENTITY(false, true && (false)) || ((_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0), ! (! (injectionSwitch.x > injectionSwitch.y)))))), ((_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0), ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))))) && true))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   return;
   if(_GLF_DEAD(false))
    return;
  }
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(sign(3.2)) : injectionSwitch.y))))))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END
BUFFER checker DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected_checker DATA_TYPE uint32 SIZE 8388096 FILL 1

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 
  BIND BUFFER checker AS storage DESCRIPTOR_SET 0 BINDING 2 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT checker EQ_BUFFER expected_checker
