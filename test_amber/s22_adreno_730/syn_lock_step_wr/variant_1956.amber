#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-4.9, 6.7)) : injectionSwitch)).y))))
  return;
 if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false)))))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(true, (_GLF_IDENTITY(true, true && (true))) && true) && (false))))
    return;
   return;
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], mix(float(injectionSwitch[1]), float(_GLF_FUZZED(58.01)), bool(false))))), injectionSwitch)).x > _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, float(vec2(injectionSwitch.y, 0.0))), injectionSwitch.y, injectionSwitch.y))))))
    return;
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (! (_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], _GLF_IDENTITY(float(mat3x4(injectionSwitch[1], 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0)), (float(mat3x4(injectionSwitch[1], 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0))) - 0.0)))).x < injectionSwitch.y))))))), ((_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) && true), true && (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY((_GLF_DEAD(false)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(bvec3((_GLF_DEAD(false)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))), ((_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY((_GLF_DEAD(false)), bool(_GLF_IDENTITY(bvec2((_GLF_DEAD(false)), false), bvec2(bvec3(_GLF_IDENTITY(bvec2((_GLF_DEAD(false)), false), bvec2(bvec4(bvec2((_GLF_DEAD(false)), false), false, true))), false))))) && _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], min(_GLF_IDENTITY(injectionSwitch[1], max(injectionSwitch[1], injectionSwitch[1])), injectionSwitch[1])))).y))))) && true))))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
     return;
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), false || (_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, (false) && true)))))))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, bool(bvec3(false, false, true))))))), true && _GLF_IDENTITY((bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(! (_GLF_IDENTITY(! (false), bool(bvec4(_GLF_IDENTITY(! (false), bool(bvec4(! (false), true, true, false))), true, true, false)))), (! (_GLF_IDENTITY(! (false), bool(bvec4(_GLF_IDENTITY(! (false), bool(bvec4(! (false), _GLF_IDENTITY(true, ! (! (true))), true, false))), true, true, false))))) && true)), true && (_GLF_IDENTITY(false, bool(bvec3(false, false, _GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, (true) || false))))))))))), ! (! ((bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec4(_GLF_IDENTITY(! (false), bool(bvec4(! (false), true, true, false))), true, _GLF_IDENTITY(true, (true) && true), false))))), true && (_GLF_IDENTITY(false, bool(bvec3(false, false, _GLF_IDENTITY(true, false || (true)))))))))))))))), bool(bvec4(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, bool(bvec3(false, false, true))))))), true && _GLF_IDENTITY((bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(! (_GLF_IDENTITY(! (false), bool(bvec4(_GLF_IDENTITY(! (false), bool(bvec4(! (false), true, true, false))), true, true, false)))), (! (_GLF_IDENTITY(! (false), bool(bvec4(_GLF_IDENTITY(! (false), bool(bvec4(! (false), _GLF_IDENTITY(true, ! (! (true))), true, false))), true, true, false))))) && true)), true && (_GLF_IDENTITY(false, bool(bvec3(false, false, _GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, (true) || false))))))))))), ! (! ((bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec4(_GLF_IDENTITY(! (false), bool(bvec4(! (false), true, true, false))), true, _GLF_IDENTITY(true, (true) && true), false))))), true && (_GLF_IDENTITY(false, bool(bvec3(false, false, _GLF_IDENTITY(true, false || (true)))))))))))))))), false, false, true))))
    return;
   return;
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(injectionSwitch.x > injectionSwitch.y, false, true, true))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, float(vec4(injectionSwitch.x, 0.0, 0.0, 1.0))), injectionSwitch.x)) > _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(-180.803)), vec2(_GLF_FUZZED(vec3(6.3, 8.6, 2130.5080).b), (injectionSwitch)[1]), bvec2(false, true))).y), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), false || (! (injectionSwitch.x > injectionSwitch.y))))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), false || (! (injectionSwitch.x > injectionSwitch.y))), bool(bvec3(_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), false || (! (injectionSwitch.x > injectionSwitch.y))), false, false)))))), _GLF_IDENTITY((bool(bool(bool(_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), false || (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! (! (injectionSwitch.x > injectionSwitch.y)), false || (! (! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, determinant(mat4(1.0, 0.0, 0.0, determinant(mat3(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0)), 0.0, 1.0, _GLF_IDENTITY(dot(vec3(0.0, 0.0, 1.0), vec3(1.0, 1.0, 0.0)), dot(vec3(0.0, 0.0, 1.0), vec3(1.0, 1.0, 0.0))), 0.0, abs(0.0), 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0)) * (injectionSwitch.y)))))))))))))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY((bool(bool(bool(_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), false || (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! (! (injectionSwitch.x > injectionSwitch.y)), false || (! (! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, determinant(mat4(1.0, 0.0, 0.0, determinant(mat3(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0)), 0.0, 1.0, _GLF_IDENTITY(dot(vec3(0.0, 0.0, 1.0), vec3(1.0, 1.0, 0.0)), dot(vec3(0.0, 0.0, 1.0), vec3(1.0, 1.0, 0.0))), 0.0, abs(0.0), 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0)) * (injectionSwitch.y)))))))))))))), true && ((bool(bool(bool(_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), false || (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! (! (injectionSwitch.x > injectionSwitch.y)), false || (! (! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, determinant(mat4(1.0, 0.0, 0.0, determinant(mat3(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0)), 0.0, 1.0, _GLF_IDENTITY(dot(vec3(0.0, 0.0, 1.0), vec3(1.0, 1.0, 0.0)), dot(vec3(0.0, 0.0, 1.0), vec3(1.0, 1.0, 0.0))), 0.0, abs(0.0), 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0)) * (injectionSwitch.y)))))))))))))))), true), bvec2(bvec4(bvec2(_GLF_IDENTITY((bool(bool(bool(_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), false || (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! (! (injectionSwitch.x > injectionSwitch.y)), false || (! (! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, determinant(mat4(1.0, 0.0, 0.0, determinant(mat3(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0)), 0.0, 1.0, _GLF_IDENTITY(dot(vec3(0.0, 0.0, 1.0), vec3(1.0, 1.0, 0.0)), dot(vec3(0.0, 0.0, 1.0), vec3(1.0, 1.0, 0.0))), 0.0, abs(0.0), 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0)) * (injectionSwitch.y)))))))))))))), true && ((bool(bool(bool(_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), false || (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! (! (injectionSwitch.x > injectionSwitch.y)), false || (! (! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, determinant(mat4(1.0, 0.0, 0.0, determinant(mat3(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0)), 0.0, 1.0, _GLF_IDENTITY(dot(vec3(0.0, 0.0, 1.0), vec3(1.0, 1.0, 0.0)), dot(vec3(0.0, 0.0, 1.0), vec3(1.0, 1.0, 0.0))), 0.0, abs(0.0), 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0)) * (injectionSwitch.y)))))))))))))))), true), true, false)))), (bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY((bool(bool(bool(_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), false || (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! (! (injectionSwitch.x > injectionSwitch.y)), false || (! (! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, determinant(mat4(1.0, 0.0, 0.0, determinant(mat3(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0)), 0.0, 1.0, _GLF_IDENTITY(dot(vec3(0.0, 0.0, 1.0), vec3(1.0, 1.0, 0.0)), dot(vec3(0.0, 0.0, 1.0), vec3(1.0, 1.0, 0.0))), 0.0, abs(0.0), 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0)) * (injectionSwitch.y)))))))))))))), true && ((bool(bool(bool(_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), false || (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! (! (injectionSwitch.x > injectionSwitch.y)), false || (! (! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, determinant(mat4(1.0, 0.0, 0.0, determinant(mat3(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0)), 0.0, 1.0, _GLF_IDENTITY(dot(vec3(0.0, 0.0, 1.0), vec3(1.0, 1.0, 0.0)), dot(vec3(0.0, 0.0, 1.0), vec3(1.0, 1.0, 0.0))), 0.0, abs(0.0), 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0)) * (injectionSwitch.y)))))))))))))))), true), bvec2(bvec4(bvec2(_GLF_IDENTITY((bool(bool(bool(_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), false || (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! (! (injectionSwitch.x > injectionSwitch.y)), false || (! (! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, determinant(mat4(1.0, 0.0, 0.0, determinant(mat3(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0)), 0.0, 1.0, _GLF_IDENTITY(dot(vec3(0.0, 0.0, 1.0), vec3(1.0, 1.0, 0.0)), dot(vec3(0.0, 0.0, 1.0), vec3(1.0, 1.0, 0.0))), 0.0, abs(0.0), 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0)) * (injectionSwitch.y)))))))))))))), true && ((bool(bool(bool(_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), false || (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! (! (injectionSwitch.x > injectionSwitch.y)), false || (! (! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, determinant(mat4(1.0, 0.0, 0.0, determinant(mat3(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0)), 0.0, 1.0, _GLF_IDENTITY(dot(vec3(0.0, 0.0, 1.0), vec3(1.0, 1.0, 0.0)), dot(vec3(0.0, 0.0, 1.0), vec3(1.0, 1.0, 0.0))), 0.0, abs(0.0), 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0)) * (injectionSwitch.y)))))))))))))))), true), true, false))))) || false)) && true)), bool(bvec4(bool(_GLF_IDENTITY(bool(bool(bool(_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), false || (! (injectionSwitch.x > injectionSwitch.y)))))), (bool(bool(bool(_GLF_IDENTITY(! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0)))), false || (! (injectionSwitch.x > injectionSwitch.y))))))) && true)), false, true, true)))))))))), _GLF_IDENTITY(bool(bvec2(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(injectionSwitch.x > injectionSwitch.y, false, true, true))), ! (_GLF_IDENTITY(! _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec2(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))), false))), bool(bool(_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), false || (! (_GLF_IDENTITY(injectionSwitch, log(vec2(1.0, 1.0)) + (injectionSwitch)).x > injectionSwitch.y))))))))))), false)), bool(bool(bool(bvec2(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(injectionSwitch.x > injectionSwitch.y, false, true, true))), ! (_GLF_IDENTITY(! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y), bool(bool(_GLF_IDENTITY(! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y), _GLF_IDENTITY(false || (! (injectionSwitch.x > injectionSwitch.y)), ! (! (false || (! (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0))))))))))))))), false)))))), (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, vec2(mat3(injectionSwitch, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0)))), max((_GLF_IDENTITY(injectionSwitch, vec2(mat3(injectionSwitch, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0)))), (_GLF_IDENTITY(injectionSwitch, vec2(mat3(injectionSwitch, 0.0, _GLF_IDENTITY(1.0, float(mat3x2(1.0, 0.0, 1.0, 1.0, 0.0, 0.0))), 0.0, 1.0, 1.0, 0.0, 0.0)))))) / vec2(1.0, 1.0)), clamp(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(vec2(injectionSwitch))), injectionSwitch)), vec2(mat3(injectionSwitch, 0.0, 1.0, 0.0, 1.0, _GLF_IDENTITY(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(-818.902) : 1.0)), float(mat4x2(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(-818.902) : 1.0)), sqrt(1.0), 1.0, cos(0.0), 0.0, _GLF_IDENTITY(dot(vec3(0.0, 1.0, 0.0), vec3(0.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0)), dot(vec3(0.0, 1.0, 0.0), vec3(0.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0))), 0.0, 1.0))), 0.0, 0.0)))) / vec2(_GLF_IDENTITY(1.0, float(mat2(1.0, 0.0, 1.0, 0.0))), 1.0)), _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(mat3(injectionSwitch, 0.0, 1.0, 0.0, 1.0, 1.0, _GLF_IDENTITY(0.0, (0.0) + 0.0), _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(round(7.7)) : 0.0)))))) / vec2(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(9.2) : 1.0)), 1.0)), _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(mat3(injectionSwitch, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0)))) / vec2(1.0, 1.0)))), injectionSwitch)).x > injectionSwitch.y, ! _GLF_IDENTITY((_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(vec4(injectionSwitch.x, round(length(normalize(vec2(1.0, 1.0)))), tan(0.0), determinant(mat4(1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, cos(0.0), 0.0, 0.0, 0.0, 1.0))), (vec4(injectionSwitch.x, round(length(normalize(vec2(1.0, 1.0)))), tan(0.0), determinant(mat4(1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, cos(0.0), 0.0, 0.0, 0.0, 1.0)))) * mat4(1.0)))) > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-0.7), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-3.0)), bvec2(true, false))), _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)))))), mat2(1.0) * _GLF_IDENTITY((injectionSwitch), vec2(mat3x4(_GLF_IDENTITY((injectionSwitch), (true ? _GLF_IDENTITY((injectionSwitch), max((injectionSwitch), (injectionSwitch))) : _GLF_FUZZED(vec2(620.424, -7.8)))), 1.0, 0.0, 1.0, round(length(normalize(sqrt(vec4(1.0, 1.0, 1.0, 1.0))))), 0.0, exp(length(vec2(0.0, 0.0))), 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, exp(0.0))))).y, ! (! (_GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(vec4(injectionSwitch.x, round(length(normalize(vec2(1.0, 1.0)))), tan(0.0), determinant(mat4(1.0, 1.0, 0.0, _GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-68.49)), float(1.0), bool(true))), 1.0, 1.0)), _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, cos(0.0), 0.0, 0.0, 0.0, 1.0))), (vec4(injectionSwitch.x, round(length(normalize(vec2(1.0, 1.0)))), tan(0.0), determinant(mat4(1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, cos(0.0), 0.0, 0.0, 0.0, 1.0)))) * mat4(1.0)))) > _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), max(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-0.7), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-3.0)), bvec2(true, false))), _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)))))), (injectionSwitch) / vec2(1.0, 1.0)))))), mat2(1.0) * _GLF_IDENTITY((injectionSwitch), vec2(mat3x4(_GLF_IDENTITY((injectionSwitch), (true ? _GLF_IDENTITY((injectionSwitch), max((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0))), (injectionSwitch))) : _GLF_FUZZED(vec2(620.424, -7.8)))), 1.0, 0.0, _GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(2.3)), bool(false))))), round(length(normalize(sqrt(vec4(1.0, 1.0, 1.0, 1.0))))), 0.0, exp(length(vec2(0.0, 0.0))), 1.0, _GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), 1.0 * (_GLF_ZERO(0.0, injectionSwitch.x))), 1.0, exp(0.0))))).y)))), bool(bool(! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, 1.0 * (_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))))))), _GLF_IDENTITY(bool(bvec3((_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(bool(! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, 1.0 * (_GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(min(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), _GLF_IDENTITY(injectionSwitch, mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch)))).y, _GLF_IDENTITY(injectionSwitch, vec2(vec4(injectionSwitch, 0.0, round(length(normalize(vec3(1.0, 1.0, 1.0))))))).y), min(min(injectionSwitch.y, injectionSwitch.y), min(injectionSwitch.y, injectionSwitch.y))))))))), false || (bool(bool(! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, 1.0 * (_GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(min(injectionSwitch.y, injectionSwitch.y), min(min(injectionSwitch.y, injectionSwitch.y), min(injectionSwitch.y, injectionSwitch.y))))))))))))), false, false)), (bool(bvec3((_GLF_IDENTITY(_GLF_IDENTITY(! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], mix(float(injectionSwitch[1]), float(_GLF_FUZZED(-6821.2778)), bool(false)))))) * mat2(1.0), vec2(1.0, 1.0) * (_GLF_IDENTITY((injectionSwitch), max((injectionSwitch), (injectionSwitch))) * mat2(1.0)))).y), _GLF_IDENTITY(bool(bvec2(! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], mix(float(injectionSwitch[1]), float(_GLF_FUZZED(-6821.2778)), bool(false)))))) * mat2(1.0), vec2(1.0, 1.0) * (_GLF_IDENTITY((injectionSwitch), max((injectionSwitch), (injectionSwitch))) * mat2(1.0)))).y), true)), (bool(bvec2(! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], mix(float(injectionSwitch[1]), float(_GLF_FUZZED(-6821.2778)), bool(false)))))) * mat2(1.0), vec2(1.0, 1.0) * (_GLF_IDENTITY((injectionSwitch), max((injectionSwitch), (injectionSwitch))) * mat2(1.0)))).y), true))) && true)), bool(bool(! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(_GLF_IDENTITY(1.0 * (_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))), clamp(1.0 * (_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))), 1.0 * (_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))), _GLF_IDENTITY(1.0 * (_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))), min(1.0 * (_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))), 1.0 * (_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))))), float(mat4(1.0 * (_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))), 0.0, sqrt(0.0), 1.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 0.0, _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(1.0, length(vec4(0.0, 0.0, 0.0, 0.0)))), dot(vec2(0.0, 1.0), vec2(1.0, length(vec4(0.0, 0.0, 0.0, 0.0))))), 1.0, log(1.0), 1.0, _GLF_ONE(1.0, injectionSwitch.y)))))))))), false, _GLF_IDENTITY(false, _GLF_IDENTITY((_GLF_IDENTITY(false, bool(bvec3(false, false, true)))), false || (_GLF_IDENTITY((_GLF_IDENTITY(false, bool(bvec3(false, false, true)))), ((_GLF_IDENTITY(false, bool(bvec3(false, false, true))))) && true))) && true)))) || false))))))) || _GLF_IDENTITY(false, _GLF_IDENTITY((false), true && ((false))) || _GLF_IDENTITY(false, true && (false)))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).y))))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), true && (bool(bool(false)))))) && true)))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)))))
    return;
   if(_GLF_DEAD(false))
    return;
   return;
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat3x4(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(9.1)), vec2(_GLF_FUZZED(0.2), (injectionSwitch)[1]), bvec2(false, true))), _GLF_IDENTITY(dot(vec3(0.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y)), vec3(0.0, 0.0, 1.0)), dot(vec3(0.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y)), vec3(0.0, 0.0, 1.0))), 1.0, abs(0.0), 1.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(dot(vec3(1.0, 1.0, 0.0), vec3(0.0, 0.0, 1.0)), dot(vec3(1.0, 1.0, 0.0), vec3(0.0, 0.0, 1.0))), 0.0, 1.0), mat3x4(mat4(mat3x4(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(9.1)), vec2(_GLF_FUZZED(0.2), (injectionSwitch)[1]), bvec2(false, true))), _GLF_IDENTITY(dot(vec3(0.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y)), vec3(0.0, 0.0, 1.0)), dot(vec3(0.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y)), vec3(0.0, 0.0, 1.0))), 1.0, abs(0.0), 1.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(dot(vec3(1.0, 1.0, 0.0), vec3(0.0, 0.0, 1.0)), dot(vec3(1.0, 1.0, 0.0), vec3(0.0, 0.0, 1.0))), 0.0, 1.0)))))).x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  return;
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, false || (false))))))
  return;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  return;
 uint workgroup_id = _GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID.x, (gl_WorkGroupID.x) >> (0u >> _GLF_IDENTITY(uint(2u), uint(2u)))), (_GLF_IDENTITY(gl_WorkGroupID.x, (gl_WorkGroupID.x) >> (0u >> _GLF_IDENTITY(uint(2u), uint(2u))))) | (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID.x, uint(uvec2(gl_WorkGroupID.x, 1u))), (gl_WorkGroupID.x) >> (0u >> _GLF_IDENTITY(uint(2u), uint(2u)))), (_GLF_IDENTITY(gl_WorkGroupID.x, (gl_WorkGroupID.x) >> (0u >> _GLF_IDENTITY(uint(2u), uint(2u))))) - 0u)));
 uint workgroup_base = _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, max(workgroup_size, _GLF_IDENTITY(workgroup_size, (workgroup_size) / 1u))) * workgroup_id, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, max(workgroup_size, _GLF_IDENTITY(workgroup_size, (workgroup_size) / 1u))), 0u + (_GLF_IDENTITY(workgroup_size, max(workgroup_size, _GLF_IDENTITY(workgroup_size, _GLF_IDENTITY((workgroup_size), min(_GLF_IDENTITY((workgroup_size), 0u + ((workgroup_size))), (workgroup_size))) / 1u))))) * workgroup_id, min(_GLF_IDENTITY(workgroup_size, max(_GLF_IDENTITY(workgroup_size, uint(uvec3(workgroup_size, 0u, 0u))), _GLF_IDENTITY(workgroup_size, (_GLF_IDENTITY(workgroup_size, (workgroup_size) | (workgroup_size))) / 1u))) * _GLF_IDENTITY(workgroup_id, (_GLF_IDENTITY(workgroup_id, ~ (~ (workgroup_id)))) | (_GLF_IDENTITY(workgroup_id, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(workgroup_id) : workgroup_id)))), _GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, max(workgroup_size, _GLF_IDENTITY(workgroup_size, _GLF_IDENTITY(_GLF_IDENTITY((workgroup_size), uint(uvec4(_GLF_IDENTITY((workgroup_size), max((workgroup_size), (workgroup_size))), 1u, 0u, 0u))) / 1u, (_GLF_IDENTITY((workgroup_size), uint(uvec4(_GLF_IDENTITY((workgroup_size), max((workgroup_size), (workgroup_size))), 1u, 0u, 0u))) / 1u) << (178260u & 0u))))) * workgroup_id, min(_GLF_IDENTITY(workgroup_size, _GLF_IDENTITY(_GLF_IDENTITY(max(workgroup_size, _GLF_IDENTITY(workgroup_size, (workgroup_size) / 1u)), (false ? _GLF_FUZZED(subgroup_size) : max(_GLF_IDENTITY(workgroup_size, 0u ^ (workgroup_size)), _GLF_IDENTITY(workgroup_size, _GLF_IDENTITY((workgroup_size), ~ (~ (_GLF_IDENTITY((workgroup_size), (false ? _GLF_FUZZED(num_workgroup) : (workgroup_size)))))) / 1u)))), uint(uvec3(max(workgroup_size, _GLF_IDENTITY(workgroup_size, (workgroup_size) / 1u)), 1u, 1u)))) * workgroup_id, _GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, (true ? _GLF_IDENTITY(workgroup_size, (workgroup_size) << 0u) : _GLF_FUZZED(num_workgroup))), max(workgroup_size, _GLF_IDENTITY(workgroup_size, _GLF_IDENTITY((workgroup_size), ~ (~ (_GLF_IDENTITY((workgroup_size), ((workgroup_size)) ^ 0u)))) / 1u))) * workgroup_id))))) | uint(_GLF_ZERO(0.0, injectionSwitch.x))), (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, max(_GLF_IDENTITY(workgroup_size, (workgroup_size) | (workgroup_size)), _GLF_IDENTITY(workgroup_size, (workgroup_size) / 1u))) * _GLF_IDENTITY(_GLF_IDENTITY(workgroup_id, min(workgroup_id, workgroup_id)), (_GLF_IDENTITY(workgroup_id, min(workgroup_id, workgroup_id))) / 1u), (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, max(workgroup_size, _GLF_IDENTITY(workgroup_size, (workgroup_size) / 1u))) * workgroup_id, min(_GLF_IDENTITY(workgroup_size, max(workgroup_size, _GLF_IDENTITY(workgroup_size, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((workgroup_size), uint(uvec3((workgroup_size), 1u, 0u))), 1u * (_GLF_IDENTITY((workgroup_size), uint(uvec3((workgroup_size), 1u, 0u))))), ((workgroup_size)) | (_GLF_IDENTITY((workgroup_size), (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(false, false, false), bvec3(bvec4(bvec3(false, false, false), false)))), ! (_GLF_IDENTITY(! (bool(_GLF_IDENTITY(bvec3(false, false, false), bvec3(bvec4(bvec3(false, false, false), false))))), bool(bvec2(! (bool(_GLF_IDENTITY(bvec3(false, false, false), bvec3(bvec4(bvec3(false, false, false), false))))), false)))))) ? _GLF_FUZZED(_GLF_IDENTITY(floatBitsToUint(-0.6), ~ (~ (floatBitsToUint(-0.6))))) : (workgroup_size))))) / 1u))) * _GLF_IDENTITY(workgroup_id, max(workgroup_id, workgroup_id)), _GLF_IDENTITY(workgroup_size, max(workgroup_size, _GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, _GLF_IDENTITY((workgroup_size), (_GLF_IDENTITY((workgroup_size), _GLF_IDENTITY(uint(uvec2((workgroup_size), 1u)), (uint(uvec2((workgroup_size), 1u))) - 0u))) | ((workgroup_size))) / _GLF_IDENTITY(1u, _GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, clamp(1u, 1u, 1u))) | 0u) * (_GLF_IDENTITY(1u, _GLF_IDENTITY(uint(_GLF_IDENTITY(uint(1u), (uint(1u)) * 1u)), _GLF_IDENTITY((uint(_GLF_IDENTITY(uint(1u), _GLF_IDENTITY((uint(1u)), max((uint(1u)), (uint(1u)))) * 1u))), ((uint(_GLF_IDENTITY(uint(1u), _GLF_IDENTITY((uint(1u)), max((uint(1u)), (uint(1u)))) * 1u)))) | 0u) >> uint(_GLF_ZERO(0.0, injectionSwitch.x))))))), max(_GLF_IDENTITY(workgroup_size, _GLF_IDENTITY((workgroup_size), (_GLF_IDENTITY((workgroup_size), _GLF_IDENTITY(uint(uvec2((workgroup_size), 1u)), (uint(uvec2((workgroup_size), 1u))) - 0u))) | ((workgroup_size))) / _GLF_IDENTITY(1u, _GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, clamp(1u, 1u, 1u))) | 0u) * (_GLF_IDENTITY(1u, _GLF_IDENTITY(uint(_GLF_IDENTITY(uint(1u), (uint(1u)) * 1u)), _GLF_IDENTITY((uint(_GLF_IDENTITY(uint(1u), _GLF_IDENTITY((uint(1u)), max((uint(1u)), (uint(1u)))) * 1u))), ((uint(_GLF_IDENTITY(uint(1u), _GLF_IDENTITY((uint(1u)), max((uint(1u)), (uint(1u)))) * 1u)))) | 0u) >> uint(_GLF_ZERO(0.0, injectionSwitch.x))))))), _GLF_IDENTITY(workgroup_size, _GLF_IDENTITY((workgroup_size), (_GLF_IDENTITY((workgroup_size), _GLF_IDENTITY(uint(uvec2((workgroup_size), 1u)), (uint(uvec2((workgroup_size), 1u))) - 0u))) | ((workgroup_size))) / _GLF_IDENTITY(1u, _GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, clamp(1u, 1u, 1u))) | 0u) * (_GLF_IDENTITY(1u, _GLF_IDENTITY(uint(_GLF_IDENTITY(uint(1u), (uint(1u)) * 1u)), _GLF_IDENTITY((uint(_GLF_IDENTITY(uint(1u), _GLF_IDENTITY((uint(1u)), max((uint(1u)), (uint(1u)))) * 1u))), ((uint(_GLF_IDENTITY(uint(1u), _GLF_IDENTITY((uint(1u)), max((uint(1u)), (uint(1u)))) * 1u)))) | 0u) >> uint(_GLF_ZERO(0.0, injectionSwitch.x))))))))))) * _GLF_IDENTITY(workgroup_id, uint(uvec2(workgroup_id, 1u)))))) | uint(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, mat2(1.0) * _GLF_IDENTITY((injectionSwitch), (true ? (injectionSwitch) : _GLF_FUZZED(vec2(81.11, -612.728))))).x)))) ^ 0u);
 uint subgroup_base = _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, clamp(subgroup_id, subgroup_id, _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (subgroup_id) ^ 0u), ~ (~ (_GLF_IDENTITY(subgroup_id, (subgroup_id) ^ _GLF_IDENTITY(0u, min(0u, 0u)))))))), clamp(_GLF_IDENTITY(subgroup_id, clamp(subgroup_id, subgroup_id, _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (subgroup_id) ^ 0u), ~ (~ (_GLF_IDENTITY(subgroup_id, (subgroup_id) ^ _GLF_IDENTITY(0u, min(0u, 0u)))))))), _GLF_IDENTITY(subgroup_id, clamp(subgroup_id, subgroup_id, _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (subgroup_id) ^ 0u), ~ (~ (_GLF_IDENTITY(subgroup_id, (subgroup_id) ^ _GLF_IDENTITY(0u, min(0u, 0u)))))))), _GLF_IDENTITY(subgroup_id, clamp(subgroup_id, subgroup_id, _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (subgroup_id) ^ 0u), ~ (~ (_GLF_IDENTITY(subgroup_id, (subgroup_id) ^ _GLF_IDENTITY(0u, min(0u, 0u)))))))))) * subgroup_size;
 if(_GLF_DEAD(false))
  return;
 uint virtual_gid = workgroup_base + subgroup_base + subgroup_local_id;
 uint next_virtual_gid = _GLF_IDENTITY(workgroup_base + subgroup_base, 0u + (workgroup_base + _GLF_IDENTITY(_GLF_IDENTITY(subgroup_base, (0u | 0u) ^ (_GLF_IDENTITY(subgroup_base, uint(uvec4(subgroup_base, 1u, 1u, 0u))))), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y)))) ? _GLF_FUZZED(num_workgroup) : subgroup_base)))) + ((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, max(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, _GLF_IDENTITY(uint(uvec3(subgroup_local_id + 1, 1u, 1u)), (_GLF_IDENTITY(uint(uvec3(subgroup_local_id + 1, 1u, 1u)), 0u + (uint(uvec3(subgroup_local_id + 1, 1u, 1u))))) >> 0u)), uint(uint(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, uint(uvec3(subgroup_local_id + 1, 1u, 1u))), _GLF_IDENTITY(uint(uvec3(_GLF_IDENTITY(subgroup_local_id + 1, uint(uvec3(subgroup_local_id + 1, 1u, 1u))), 0u, 1u)), uint(uvec3(uint(uvec3(_GLF_IDENTITY(subgroup_local_id + 1, uint(uvec3(subgroup_local_id + 1, 1u, 1u))), 0u, 1u)), 0u, 0u))))))), subgroup_local_id + 1)), (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (false ? _GLF_FUZZED(workgroup_size) : subgroup_local_id)) + 1, max(subgroup_local_id + 1, subgroup_local_id + _GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, (1) + 0), 1, _GLF_IDENTITY(1, max(1, 1))))))) * 1u)) % subgroup_size);
 atomicStore(buf[next_virtual_gid], uint(1), _GLF_IDENTITY(4, (4) * 1), 64, 4);
 if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
  {
   if(_GLF_DEAD(false))
    return;
   return;
   if(_GLF_DEAD(false))
    return;
  }
 uint read = _GLF_IDENTITY(atomicLoad(_GLF_IDENTITY(buf[virtual_gid], (false ? _GLF_FUZZED(subgroup_id) : buf[virtual_gid])), _GLF_IDENTITY(4, ~ _GLF_IDENTITY((~ (4)), ((~ (4))) | 0)), 64, 2), (_GLF_IDENTITY((1u << _GLF_IDENTITY(uint(_GLF_IDENTITY(_GLF_IDENTITY(4u, (4u) + 0u), (4u) | (4u))), uint(4u))), ((1u << _GLF_IDENTITY(uint(4u), uint(4u)))) << 0u) >> _GLF_IDENTITY(uint(4u), uint(4u))) * (_GLF_IDENTITY(_GLF_IDENTITY(atomicLoad(_GLF_IDENTITY(buf[virtual_gid], (false ? _GLF_IDENTITY(_GLF_FUZZED(subgroup_id), (_GLF_FUZZED(subgroup_id)) | 0u) : buf[virtual_gid])), 4, 64, 2), 0u + (atomicLoad(_GLF_IDENTITY(buf[virtual_gid], (false ? _GLF_FUZZED(subgroup_id) : buf[virtual_gid])), 4, 64, 2))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(atomicLoad(_GLF_IDENTITY(buf[virtual_gid], (false ? _GLF_IDENTITY(_GLF_FUZZED(subgroup_id), (_GLF_FUZZED(subgroup_id)) | 0u) : buf[virtual_gid])), 4, 64, 2), (atomicLoad(_GLF_IDENTITY(buf[virtual_gid], (false ? _GLF_IDENTITY(_GLF_FUZZED(subgroup_id), (_GLF_FUZZED(subgroup_id)) | 0u) : buf[virtual_gid])), 4, 64, 2)) << (0u >> _GLF_IDENTITY(uint(8u), uint(8u)))), 0u + (atomicLoad(_GLF_IDENTITY(buf[virtual_gid], (false ? _GLF_FUZZED(subgroup_id) : buf[virtual_gid])), 4, 64, 2))), ~ (~ (_GLF_IDENTITY(atomicLoad(_GLF_IDENTITY(buf[virtual_gid], (false ? _GLF_IDENTITY(_GLF_FUZZED(subgroup_id), (_GLF_FUZZED(subgroup_id)) | 0u) : buf[virtual_gid])), 4, 64, 2), 0u + (atomicLoad(_GLF_IDENTITY(buf[virtual_gid], _GLF_IDENTITY((false ? _GLF_FUZZED(subgroup_id) : buf[virtual_gid]), ((false ? _GLF_FUZZED(subgroup_id) : buf[virtual_gid])) ^ 0u)), 4, 64, 2))))))) ^ 0u)));
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
  return;
 subgroupBarrier();
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x > injectionSwitch.y)), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x > injectionSwitch.y))), (_GLF_IDENTITY(bool(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x > injectionSwitch.y))), false || (bool(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x > injectionSwitch.y)))))) || false)), (_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x > injectionSwitch.y))), (_GLF_IDENTITY(bool(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x > injectionSwitch.y))), false || (bool(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x > injectionSwitch.y)))))) || false)), true && (bool(_GLF_IDENTITY(bool(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x > injectionSwitch.y))), (_GLF_IDENTITY(bool(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x > injectionSwitch.y))), false || (bool(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x > injectionSwitch.y)))))) || false))))) && true)), false || (_GLF_FALSE(false, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! (_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).x > injectionSwitch.y))))), _GLF_IDENTITY(bool(bvec2(! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! _GLF_IDENTITY(((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y)), (((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y))) && true)))), true)), bool(bvec3(bool(bvec2(! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))), _GLF_IDENTITY(true, (true) || false))), true, true))))))))), _GLF_IDENTITY(((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], (false ? _GLF_FUZZED(0.7) : injectionSwitch[0])), injectionSwitch[1])).y)), (((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], (false ? _GLF_FUZZED(0.7) : injectionSwitch[0])), injectionSwitch[1])).y))) && true) && _GLF_IDENTITY(true, false || (true)))))), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! _GLF_IDENTITY(((injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY((_GLF_IDENTITY(((injectionSwitch.x > injectionSwitch.y)), true && (((injectionSwitch.x > injectionSwitch.y))))) || false, ! (_GLF_IDENTITY(! ((_GLF_IDENTITY(((injectionSwitch.x > injectionSwitch.y)), true && (((injectionSwitch.x > injectionSwitch.y))))) || false), bool(bvec2(! ((_GLF_IDENTITY(((injectionSwitch.x > injectionSwitch.y)), true && (((injectionSwitch.x > injectionSwitch.y))))) || false), false))))))))), true && (! (_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0), _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, float(mat4(injectionSwitch.y, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0))), injectionSwitch.y, injectionSwitch.y))))), ! (! ((injectionSwitch.x > injectionSwitch.y))))))))), ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).y)) && true))))) || false)))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 atomicStore(checker[virtual_gid], read, 4, 64, 4);
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END
BUFFER checker DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected_checker DATA_TYPE uint32 SIZE 8388096 FILL 1

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 
  BIND BUFFER checker AS storage DESCRIPTOR_SET 0 BINDING 2 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT checker EQ_BUFFER expected_checker
