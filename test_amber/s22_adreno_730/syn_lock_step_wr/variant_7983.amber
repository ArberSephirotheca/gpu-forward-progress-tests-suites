#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460
struct _GLF_struct_27 {
 mat2x4 _f0;
 float _f1;
 vec4 _f2;
 mat4 _f3;
 mat3x2 _f4;
 uint next_virtual_gid;
 mat3x4 _f5;
} ;

struct _GLF_struct_26 {
 vec3 _f0;
 uvec2 _f1;
 mat4x3 _f2;
 bool _f3;
 float _f4;
} ;

struct _GLF_struct_25 {
 mat3x2 _f0;
 vec4 _f1;
 mat2x3 _f2;
} ;

struct _GLF_struct_28 {
 _GLF_struct_25 _f0;
 _GLF_struct_26 _f1;
 _GLF_struct_27 _f2;
} ;

struct _GLF_struct_29 {
 bool _f0;
 _GLF_struct_28 _f1;
 mat2x4 _f2;
 mat3x4 _f3;
 mat4x3 _f4;
} ;

struct _GLF_struct_23 {
 uvec4 _f0;
} ;

struct _GLF_struct_21 {
 vec4 _f0;
 mat4 _f1;
 mat2x4 _f2;
 uvec3 _f3;
} ;

struct _GLF_struct_20 {
 mat2x4 _f0;
 int _f1;
 mat2x3 _f2;
} ;

struct _GLF_struct_19 {
 bvec3 _f0;
 vec2 _f1;
 ivec3 _f2;
 uvec4 _f3;
 ivec4 _f4;
} ;

struct _GLF_struct_22 {
 _GLF_struct_19 _f0;
 _GLF_struct_20 _f1;
 bvec2 _f2;
 uint virtual_gid;
 mat3x2 _f3;
 _GLF_struct_21 _f4;
} ;

struct _GLF_struct_17 {
 mat2x3 _f0;
} ;

struct _GLF_struct_16 {
 mat3x4 _f0;
 float _f1;
 int _f2;
 uvec3 _f3;
 mat2x3 _f4;
} ;

struct _GLF_struct_15 {
 bvec3 _f0;
} ;

struct _GLF_struct_18 {
 _GLF_struct_15 _f0;
 _GLF_struct_16 _f1;
 _GLF_struct_17 _f2;
 mat4x2 _f3;
} ;

struct _GLF_struct_13 {
 mat2x3 _f0;
 mat4x2 _f1;
 ivec2 _f2;
 uvec2 _f3;
 mat2x3 _f4;
 mat3x4 _f5;
 bvec2 _f6;
} ;

struct _GLF_struct_12 {
 float _f0;
 mat3 _f1;
 mat2 _f2;
} ;

struct _GLF_struct_14 {
 mat3x2 _f0;
 _GLF_struct_12 _f1;
 uvec4 _f2;
 uint _f3;
 vec4 _f4;
 _GLF_struct_13 _f5;
} ;

struct _GLF_struct_24 {
 _GLF_struct_14 _f0;
 _GLF_struct_18 _f1;
 _GLF_struct_22 _f2;
 _GLF_struct_23 _f3;
 mat2x3 _f4;
 mat4 _f5;
 mat2 _f6;
} ;

struct _GLF_struct_9 {
 bvec4 _f0;
 uvec3 _f1;
 mat4 _f2;
 uint _f3;
 int _f4;
 vec2 _f5;
 bvec2 _f6;
} ;

struct _GLF_struct_8 {
 mat4x3 _f0;
} ;

struct _GLF_struct_10 {
 ivec2 _f0;
 _GLF_struct_8 _f1;
 mat4x3 _f2;
 _GLF_struct_9 _f3;
} ;

struct _GLF_struct_6 {
 float _f0;
 vec2 _f1;
 uvec4 _f2;
 mat2 _f3;
 uvec3 _f4;
 uvec4 _f5;
 ivec2 _f6;
} ;

struct _GLF_struct_5 {
 ivec2 _f0;
 mat4x2 _f1;
 bvec4 _f2;
} ;

struct _GLF_struct_4 {
 mat4x3 _f0;
} ;

struct _GLF_struct_7 {
 _GLF_struct_4 _f0;
 mat3 _f1;
 ivec3 _f2;
 _GLF_struct_5 _f3;
 _GLF_struct_6 _f4;
 uint _f5;
} ;

struct _GLF_struct_3 {
 uint num_workgroup;
 vec3 _f0;
} ;

struct _GLF_struct_11 {
 _GLF_struct_3 _f0;
 _GLF_struct_7 _f1;
 mat2x4 _f2;
 bvec3 _f3;
 mat4 _f4;
 _GLF_struct_10 _f5;
} ;

struct _GLF_struct_1 {
 mat3 _f0;
} ;

struct _GLF_struct_0 {
 mat4x3 _f0;
 uint subgroup_id;
} ;

struct _GLF_struct_2 {
 float _f0;
 uvec2 _f1;
 _GLF_struct_0 _f2;
 _GLF_struct_1 _f3;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 _GLF_struct_2 _GLF_struct_replacement_2 = _GLF_struct_2(1.0, uvec2(1u), _GLF_struct_0(mat4x3(1.0), gl_SubgroupID), _GLF_struct_1(mat3(1.0)));
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 _GLF_struct_11 _GLF_struct_replacement_11 = _GLF_struct_11(_GLF_struct_3(gl_NumWorkGroups.x, vec3(1.0)), _GLF_struct_7(_GLF_struct_4(mat4x3(1.0)), mat3(1.0), ivec3(1), _GLF_struct_5(ivec2(1), mat4x2(1.0), bvec4(true)), _GLF_struct_6(1.0, vec2(1.0), uvec4(1u), mat2(1.0), uvec3(1u), uvec4(1u), ivec2(1)), 1u), mat2x4(1.0), bvec3(true), mat4(1.0), _GLF_struct_10(ivec2(1), _GLF_struct_8(mat4x3(1.0)), mat4x3(1.0), _GLF_struct_9(bvec4(true), uvec3(1u), mat4(1.0), 1u, 1, vec2(1.0), bvec2(true))));
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = workgroup_size * workgroup_id;
 uint subgroup_base = _GLF_struct_replacement_2._f2.subgroup_id * subgroup_size;
 _GLF_struct_24 _GLF_struct_replacement_24 = _GLF_struct_24(_GLF_struct_14(mat3x2(1.0), _GLF_struct_12(1.0, mat3(1.0), mat2(1.0)), uvec4(1u), 1u, vec4(1.0), _GLF_struct_13(mat2x3(1.0), mat4x2(1.0), ivec2(1), uvec2(1u), mat2x3(1.0), mat3x4(1.0), bvec2(true))), _GLF_struct_18(_GLF_struct_15(bvec3(true)), _GLF_struct_16(mat3x4(1.0), 1.0, 1, uvec3(1u), mat2x3(1.0)), _GLF_struct_17(mat2x3(1.0)), mat4x2(1.0)), _GLF_struct_22(_GLF_struct_19(bvec3(true), vec2(1.0), ivec3(1), uvec4(1u), ivec4(1)), _GLF_struct_20(mat2x4(1.0), 1, mat2x3(1.0)), bvec2(true), workgroup_base + subgroup_base + subgroup_local_id, mat3x2(1.0), _GLF_struct_21(vec4(1.0), mat4(1.0), mat2x4(1.0), uvec3(1u))), _GLF_struct_23(uvec4(1u)), mat2x3(1.0), mat4(1.0), mat2(1.0));
 _GLF_struct_29 _GLF_struct_replacement_29 = _GLF_struct_29(true, _GLF_struct_28(_GLF_struct_25(mat3x2(1.0), vec4(1.0), mat2x3(1.0)), _GLF_struct_26(vec3(1.0), uvec2(1u), mat4x3(1.0), true, 1.0), _GLF_struct_27(mat2x4(1.0), 1.0, vec4(1.0), mat4(1.0), mat3x2(1.0), workgroup_base + subgroup_base + ((subgroup_local_id + 1) % subgroup_size), mat3x4(1.0))), mat2x4(1.0), mat3x4(1.0), mat4x3(1.0));
 atomicStore(buf[_GLF_struct_replacement_29._f1._f2.next_virtual_gid], uint(1), 4, 64, 4);
 uint read = atomicLoad(buf[_GLF_struct_replacement_24._f2.virtual_gid], 4, 64, 2);
 subgroupBarrier();
 atomicStore(checker[_GLF_struct_replacement_24._f2.virtual_gid], read, 4, 64, 4);
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END
BUFFER checker DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected_checker DATA_TYPE uint32 SIZE 8388096 FILL 1

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 
  BIND BUFFER checker AS storage DESCRIPTOR_SET 0 BINDING 2 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT checker EQ_BUFFER expected_checker
