#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 uvec2 GLF_merged2_0_1_14_1_1_14workgroup_baseworkgroup_size;
 if(_GLF_DEAD(false))
  barrier();
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
        }
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       do
        {
         barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec4(bvec2(false, true), false, false)))))) && true), (_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], float(mat2x3(injectionSwitch[1], 0.0, 0.0, 1.0, 0.0, 1.0))))), _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])))).x > injectionSwitch.y))));
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
  }
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, 0.0 + (_GLF_IDENTITY(injectionSwitch.y, 1.0 * (injectionSwitch.y))))))))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
          }
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
        barrier();
       barrier();
      }
     do
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(((injectionSwitch.x > injectionSwitch.y)) && true, (_GLF_IDENTITY(((injectionSwitch.x > injectionSwitch.y)) && true, bool(bvec4(((injectionSwitch.x > injectionSwitch.y)) && true, false, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))) && true)))))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(injectionSwitch.x > injectionSwitch.y, true)))))))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         barrier();
        }
      }
     else
      {
      }
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bool(false)))))))))))
          {
          }
         else
          {
           barrier();
          }
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              {
               do
                {
                 barrier();
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
            }
          }
         for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), (int(1)) ^ (0 >> _GLF_IDENTITY(int(0), int(0)))))) >> _GLF_IDENTITY(int(1), int(1))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
          {
           if(_GLF_DEAD(false))
            {
             do
              {
               barrier();
               if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
                barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
          }
        }
      }
     else
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, true && (true)))))))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
           else
            {
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
        }
       else
        {
        }
      }
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(0), max(int(0), _GLF_IDENTITY(int(0), (true ? int(0) : _GLF_FUZZED(_injected_loop_counter))))), int(0)))); _injected_loop_counter ++)
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 & -39762)); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         for(int _injected_loop_counter = (1 | 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
          {
           barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
        }
       do
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(! (! (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (! (! (injectionSwitch.x > injectionSwitch.y))), (! (! (! (injectionSwitch.x > injectionSwitch.y)))) || false))))))))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (! (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0))))))))))
          {
           for(int _injected_loop_counter = (0 & 46503); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             barrier();
            }
          }
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(false, bool(bool(false))))), ! (! (bool(bool(_GLF_IDENTITY(false, bool(bool(false)))))))))))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(false))
      {
       do
        {
         if(_GLF_DEAD(false))
          {
           do
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) && true))))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       do
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (_GLF_IDENTITY(! (false), (! (false)) || false))))))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         barrier();
        }
       else
        {
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         do
          {
           barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(! (_GLF_IDENTITY(! (false), ! (! (! (false))))), bool(bvec3(! (_GLF_IDENTITY(! (false), ! (! (! (false))))), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(false))
  barrier();
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = _GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups.x, ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (gl_NumWorkGroups.x), min(~ (gl_NumWorkGroups.x), ~ (gl_NumWorkGroups.x))), (_GLF_IDENTITY(_GLF_IDENTITY(~ (gl_NumWorkGroups.x), min(~ (gl_NumWorkGroups.x), ~ (gl_NumWorkGroups.x))), (_GLF_IDENTITY(~ (gl_NumWorkGroups.x), min(~ (gl_NumWorkGroups.x), ~ (gl_NumWorkGroups.x)))) * uint(_GLF_ONE(1.0, injectionSwitch.y)))) / 1u))), (_GLF_IDENTITY(gl_NumWorkGroups.x, _GLF_IDENTITY((false ? _GLF_FUZZED(subgroup_id) : gl_NumWorkGroups.x), 0u | (_GLF_IDENTITY((false ? _GLF_FUZZED(subgroup_id) : gl_NumWorkGroups.x), ~ (_GLF_IDENTITY(~ ((false ? _GLF_FUZZED(subgroup_id) : gl_NumWorkGroups.x)), clamp(~ ((false ? _GLF_FUZZED(subgroup_id) : gl_NumWorkGroups.x)), ~ ((false ? _GLF_FUZZED(subgroup_id) : gl_NumWorkGroups.x)), ~ ((false ? _GLF_FUZZED(subgroup_id) : gl_NumWorkGroups.x)))))))))) | (_GLF_IDENTITY(gl_NumWorkGroups.x, max(gl_NumWorkGroups.x, gl_NumWorkGroups.x))));
 if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y))))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   for(int _injected_loop_counter = _GLF_IDENTITY(((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))), int(_GLF_IDENTITY(ivec3(((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))), 0, 1), (false ? _GLF_FUZZED(ivec3(-4369, 47899, -30909)) : ivec3(((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))), 0, 1))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(_GLF_IDENTITY(((0 | 0) << _GLF_IDENTITY(int(5), int(5))), (((0 | 0) << _GLF_IDENTITY(int(5), int(5)))) ^ 0), max(_GLF_IDENTITY(((0 | 0) << _GLF_IDENTITY(int(5), int(5))), (((0 | 0) << _GLF_IDENTITY(int(5), int(5)))) ^ 0), _GLF_IDENTITY(((0 | 0) << _GLF_IDENTITY(int(5), int(5))), (((0 | 0) << _GLF_IDENTITY(int(5), int(5)))) ^ 0)))); _injected_loop_counter --)
    {
     barrier();
    }
  }
 uint workgroup_size = gl_WorkGroupSize.x;
 _GLF_IDENTITY(GLF_merged2_0_1_14_1_1_14workgroup_baseworkgroup_size.y = _GLF_IDENTITY(workgroup_size, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(workgroup_size, 1u * (workgroup_size))), uint(uvec3(~ (_GLF_IDENTITY(workgroup_size, 1u * (workgroup_size))), 1u, 0u))))), (GLF_merged2_0_1_14_1_1_14workgroup_baseworkgroup_size.y = workgroup_size) - 0u);
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(dot(6195.7457, -5526.1407)) : injectionSwitch.y))))))
          barrier();
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           barrier();
          }
         else
          {
          }
        }
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
        }
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   else
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), false))))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
      }
     else
      {
      }
    }
  }
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = GLF_merged2_0_1_14_1_1_14workgroup_baseworkgroup_size.y * _GLF_IDENTITY(workgroup_id, _GLF_IDENTITY((_GLF_IDENTITY(workgroup_id, (true ? workgroup_id : _GLF_FUZZED(GLF_merged2_0_1_14_1_1_14workgroup_baseworkgroup_size.y)))), uint(_GLF_ZERO(0.0, injectionSwitch.x)) ^ ((_GLF_IDENTITY(workgroup_id, (true ? workgroup_id : _GLF_FUZZED(GLF_merged2_0_1_14_1_1_14workgroup_baseworkgroup_size.y)))))) - (_GLF_IDENTITY((0u << _GLF_IDENTITY(uint(3u), _GLF_IDENTITY(uint(3u), uint(uvec4(_GLF_IDENTITY(uint(3u), ~ (~ (uint(3u)))), _GLF_IDENTITY(1u, clamp(1u, 1u, _GLF_IDENTITY(1u, uint(uvec2(1u, _GLF_IDENTITY(1u, clamp(_GLF_IDENTITY(1u, 0u | (1u)), _GLF_IDENTITY(_GLF_IDENTITY(1u, clamp(1u, _GLF_IDENTITY(1u, 0u | (1u)), _GLF_IDENTITY(1u, (1u) * 1u))), 0u + (1u)), 1u))))))), ((1u << _GLF_IDENTITY(uint(_GLF_IDENTITY(4u, ~ (_GLF_IDENTITY(~ (4u), (~ (4u)) | 0u)))), uint(4u))) >> _GLF_IDENTITY(_GLF_IDENTITY(uint(4u), _GLF_IDENTITY(uint(_GLF_IDENTITY(4u, 0u ^ _GLF_IDENTITY((4u), (false ? _GLF_FUZZED(packUnorm4x8(vec4(6.5, -7.1, -691.687, 6.3))) : (4u))))), uint(uint(uint(4u))))), _GLF_IDENTITY(uint(uvec4(_GLF_IDENTITY(_GLF_IDENTITY(uint(4u), _GLF_IDENTITY(uint(_GLF_IDENTITY(4u, 0u ^ (4u))), uint(uint(uint(4u))))), min(_GLF_IDENTITY(uint(4u), _GLF_IDENTITY(uint(_GLF_IDENTITY(4u, 0u ^ (4u))), uint(uint(uint(4u))))), _GLF_IDENTITY(_GLF_IDENTITY(uint(4u), _GLF_IDENTITY(uint(_GLF_IDENTITY(4u, 0u ^ (4u))), uint(uint(uint(4u))))), (_GLF_IDENTITY(_GLF_IDENTITY(uint(4u), _GLF_IDENTITY(uint(_GLF_IDENTITY(4u, 0u ^ (4u))), uint(uint(uint(4u))))), uint(uvec3(_GLF_IDENTITY(uint(4u), _GLF_IDENTITY(uint(_GLF_IDENTITY(4u, 0u ^ (4u))), uint(_GLF_IDENTITY(uint(uint(4u)), uint(uint(_GLF_IDENTITY(uint(uint(4u)), 0u | (uint(uint(4u)))))))))), 0u, 1u)))) | 0u))), (0u | 1u), 0u, (0u ^ 1u))), (uint(uvec4(_GLF_IDENTITY(uint(4u), _GLF_IDENTITY(uint(_GLF_IDENTITY(4u, 0u ^ (4u))), uint(uint(uint(4u))))), (0u | 1u), 0u, (0u ^ 1u)))) >> 0u))), 1u))))) << _GLF_IDENTITY(uint(6u), _GLF_IDENTITY(uint(6u), max(uint(6u), uint(6u)))), _GLF_IDENTITY(((0u << _GLF_IDENTITY(uint(3u), _GLF_IDENTITY(_GLF_IDENTITY(uint(3u), _GLF_IDENTITY(uint(uvec4(_GLF_IDENTITY(uint(3u), ~ (~ (uint(3u)))), 1u, ((1u << _GLF_IDENTITY(uint(4u), uint(4u))) >> _GLF_IDENTITY(uint(4u), _GLF_IDENTITY(_GLF_IDENTITY(uint(4u), (uint(4u)) << 0u), uint(uint(uint(4u)))))), 1u)), (uint(uvec4(_GLF_IDENTITY(uint(_GLF_IDENTITY(3u, (true ? _GLF_IDENTITY(3u, max(3u, 3u)) : _GLF_FUZZED(56456u)))), ~ _GLF_IDENTITY((~ (_GLF_IDENTITY(uint(3u), clamp(uint(3u), _GLF_IDENTITY(uint(3u), 1u * (uint(3u))), _GLF_IDENTITY(uint(3u), (uint(3u)) ^ 0u))))), clamp(_GLF_IDENTITY((~ (uint(3u))), max((~ (uint(3u))), (_GLF_IDENTITY(~ _GLF_IDENTITY((uint(3u)), ~ (~ ((uint(3u))))), (~ (uint(3u))) >> (_GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, min(1u, _GLF_IDENTITY(1u, min(1u, 1u))))) * 1u) ^ 1u))))), (~ _GLF_IDENTITY((uint(3u)), 0u ^ ((uint(3u))))), (~ _GLF_IDENTITY((uint(3u)), uint(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY((uint(3u)), min((uint(3u)), (uint(3u)))))))))), 1u, ((1u << _GLF_IDENTITY(uint(4u), uint(4u))) >> _GLF_IDENTITY(uint(4u), _GLF_IDENTITY(uint(4u), uint(uint(uint(4u)))))), 1u))) - 0u)), min(_GLF_IDENTITY(uint(3u), _GLF_IDENTITY(uint(uvec4(_GLF_IDENTITY(uint(3u), ~ (~ (uint(3u)))), 1u, ((1u << _GLF_IDENTITY(uint(4u), uint(4u))) >> _GLF_IDENTITY(uint(4u), _GLF_IDENTITY(_GLF_IDENTITY(uint(4u), (uint(4u)) << 0u), uint(uint(uint(4u)))))), 1u)), (uint(uvec4(_GLF_IDENTITY(uint(_GLF_IDENTITY(_GLF_IDENTITY(3u, clamp(3u, _GLF_IDENTITY(3u, clamp(_GLF_IDENTITY(3u, 0u ^ (3u)), _GLF_IDENTITY(3u, 0u | (3u)), 3u)), 3u)), (true ? _GLF_IDENTITY(3u, max(3u, 3u)) : _GLF_FUZZED(56456u)))), ~ _GLF_IDENTITY((~ (uint(3u))), clamp(_GLF_IDENTITY((~ (uint(3u))), max((~ (uint(3u))), (~ (uint(3u))))), (~ (uint(3u))), _GLF_IDENTITY((~ (uint(3u))), ((~ (uint(3u)))) >> 0u)))), 1u, ((1u << _GLF_IDENTITY(uint(4u), uint(4u))) >> _GLF_IDENTITY(uint(4u), _GLF_IDENTITY(uint(4u), uint(uint(uint(4u)))))), 1u))) - 0u)), _GLF_IDENTITY(_GLF_IDENTITY(uint(3u), _GLF_IDENTITY(uint(uvec4(_GLF_IDENTITY(uint(3u), ~ (~ (uint(3u)))), 1u, ((1u << _GLF_IDENTITY(uint(4u), uint(4u))) >> _GLF_IDENTITY(uint(4u), _GLF_IDENTITY(_GLF_IDENTITY(uint(4u), (uint(4u)) << _GLF_IDENTITY(0u, max(0u, 0u))), uint(uint(uint(4u)))))), 1u)), _GLF_IDENTITY((uint(uvec4(_GLF_IDENTITY(uint(_GLF_IDENTITY(3u, (true ? _GLF_IDENTITY(3u, max(3u, 3u)) : _GLF_FUZZED(56456u)))), ~ _GLF_IDENTITY((~ (uint(3u))), clamp(_GLF_IDENTITY((~ (uint(3u))), max((~ (uint(3u))), (~ (uint(3u))))), (~ (uint(3u))), (~ (uint(3u)))))), 1u, ((1u << _GLF_IDENTITY(uint(4u), uint(4u))) >> _GLF_IDENTITY(uint(4u), _GLF_IDENTITY(uint(4u), uint(uint(uint(4u)))))), 1u))) - 0u, (_GLF_IDENTITY((uint(uvec4(_GLF_IDENTITY(uint(_GLF_IDENTITY(3u, (true ? _GLF_IDENTITY(3u, max(3u, 3u)) : _GLF_FUZZED(56456u)))), ~ _GLF_IDENTITY((~ (uint(3u))), clamp(_GLF_IDENTITY((~ (uint(3u))), max((~ (uint(3u))), (~ (uint(3u))))), (~ (uint(3u))), (~ (uint(3u)))))), 1u, ((1u << _GLF_IDENTITY(uint(4u), uint(4u))) >> _GLF_IDENTITY(uint(4u), _GLF_IDENTITY(uint(4u), uint(uint(uint(4u)))))), 1u))) - 0u, ((uint(uvec4(_GLF_IDENTITY(uint(_GLF_IDENTITY(3u, (true ? _GLF_IDENTITY(3u, max(3u, 3u)) : _GLF_FUZZED(56456u)))), ~ _GLF_IDENTITY((~ (uint(3u))), clamp(_GLF_IDENTITY((~ (uint(3u))), max((~ (uint(3u))), (~ (uint(3u))))), (~ (uint(3u))), (~ (uint(3u)))))), 1u, ((1u << _GLF_IDENTITY(uint(4u), uint(4u))) >> _GLF_IDENTITY(uint(4u), _GLF_IDENTITY(uint(4u), uint(uint(uint(4u)))))), 1u))) - 0u) >> 0u)) | ((uint(uvec4(_GLF_IDENTITY(uint(_GLF_IDENTITY(3u, (true ? _GLF_IDENTITY(3u, max(3u, 3u)) : _GLF_FUZZED(56456u)))), ~ _GLF_IDENTITY((~ (uint(3u))), clamp(_GLF_IDENTITY((~ (uint(3u))), max((~ (uint(3u))), (~ (uint(3u))))), (~ (uint(3u))), (~ (uint(3u)))))), 1u, ((1u << _GLF_IDENTITY(uint(4u), uint(4u))) >> _GLF_IDENTITY(uint(4u), _GLF_IDENTITY(uint(4u), uint(uint(uint(4u)))))), 1u))) - 0u)))), 0u ^ (_GLF_IDENTITY(_GLF_IDENTITY(uint(3u), _GLF_IDENTITY(uint(uvec4(_GLF_IDENTITY(uint(3u), ~ (~ (uint(3u)))), 1u, ((1u << _GLF_IDENTITY(uint(4u), uint(4u))) >> _GLF_IDENTITY(uint(4u), _GLF_IDENTITY(_GLF_IDENTITY(uint(4u), (uint(4u)) << 0u), uint(uint(uint(4u)))))), 1u)), (uint(uvec4(_GLF_IDENTITY(uint(_GLF_IDENTITY(3u, (true ? _GLF_IDENTITY(3u, max(3u, 3u)) : _GLF_FUZZED(56456u)))), ~ _GLF_IDENTITY((~ (uint(3u))), clamp(_GLF_IDENTITY((~ (uint(3u))), max((~ (uint(3u))), (~ (uint(3u))))), (~ (uint(3u))), (~ (uint(3u)))))), 1u, ((1u << _GLF_IDENTITY(uint(4u), uint(4u))) >> _GLF_IDENTITY(uint(4u), _GLF_IDENTITY(uint(4u), uint(uint(uint(4u)))))), 1u))) - 0u)), uint(_GLF_ONE(_GLF_IDENTITY(1.0, max(1.0, 1.0)), injectionSwitch.y)) * (_GLF_IDENTITY(uint(3u), _GLF_IDENTITY(uint(uvec4(_GLF_IDENTITY(uint(3u), ~ (~ (uint(3u)))), 1u, ((1u << _GLF_IDENTITY(uint(4u), uint(4u))) >> _GLF_IDENTITY(uint(4u), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uint(4u), uint(_GLF_IDENTITY(uvec4(uint(4u), 1u, 1u, 1u), clamp(uvec4(uint(4u), 1u, 1u, 1u), uvec4(uint(4u), 1u, 1u, 1u), uvec4(uint(4u), 1u, 1u, 1u))))), (uint(4u)) << 0u), _GLF_IDENTITY(uint(uint(uint(4u))), (false ? _GLF_FUZZED(subgroup_local_id) : _GLF_IDENTITY(uint(uint(uint(4u))), (true ? uint(uint(uint(4u))) : _GLF_FUZZED(199999u)))))))), 1u)), (uint(uvec4(_GLF_IDENTITY(uint(_GLF_IDENTITY(3u, (true ? _GLF_IDENTITY(3u, max(3u, 3u)) : _GLF_FUZZED(56456u)))), ~ _GLF_IDENTITY((~ (uint(3u))), _GLF_IDENTITY(clamp(_GLF_IDENTITY((~ (uint(3u))), max((~ (uint(3u))), (~ (uint(3u))))), (~ (uint(3u))), (~ (uint(3u)))), (clamp(_GLF_IDENTITY((~ (uint(3u))), max((_GLF_IDENTITY(~ (uint(3u)), (~ (uint(3u))) | (~ (uint(3u))))), (~ (uint(3u))))), (~ (uint(3u))), (~ (uint(3u))))) - 0u))), 1u, ((_GLF_IDENTITY(1u << _GLF_IDENTITY(uint(4u), uint(4u)), max(_GLF_IDENTITY(1u << _GLF_IDENTITY(uint(4u), uint(4u)), (1u << _GLF_IDENTITY(uint(4u), uint(4u))) | 0u), _GLF_IDENTITY(1u << _GLF_IDENTITY(uint(4u), uint(4u)), (true ? _GLF_IDENTITY(1u << _GLF_IDENTITY(uint(4u), uint(4u)), (_GLF_IDENTITY(1u << _GLF_IDENTITY(uint(4u), uint(4u)), uint(_GLF_IDENTITY(uvec3(_GLF_IDENTITY(1u << _GLF_IDENTITY(uint(4u), uint(4u)), (1u << _GLF_IDENTITY(uint(4u), uint(4u))) >> 0u), 0u, 0u), (uvec3(_GLF_IDENTITY(1u << _GLF_IDENTITY(uint(4u), uint(4u)), (1u << _GLF_IDENTITY(uint(4u), uint(4u))) >> 0u), 0u, 0u)) << uvec3(0u, 0u, 0u))))) / 1u) : _GLF_FUZZED(subgroup_id)))))) >> _GLF_IDENTITY(uint(4u), _GLF_IDENTITY(uint(4u), uint(uint(uint(4u)))))), 1u))) - 0u)))))))))) << _GLF_IDENTITY(uint(6u), uint(_GLF_IDENTITY(6u, (true ? _GLF_IDENTITY(6u, min(6u, 6u)) : _GLF_FUZZED(_GLF_IDENTITY(atomicAdd(subgroup_size, (subgroup_id ++)), (atomicAdd(subgroup_size, (subgroup_id ++))) + 0u))))))), ~ (_GLF_IDENTITY(~ (((0u << _GLF_IDENTITY(uint(3u), _GLF_IDENTITY(_GLF_IDENTITY(uint(3u), _GLF_IDENTITY(uint(uvec4(_GLF_IDENTITY(uint(3u), ~ (_GLF_IDENTITY(~ (uint(3u)), (true ? ~ (uint(3u)) : _GLF_FUZZED(workgroup_size))))), 1u, ((1u << _GLF_IDENTITY(uint(4u), uint(4u))) >> _GLF_IDENTITY(uint(4u), _GLF_IDENTITY(_GLF_IDENTITY(uint(4u), (uint(4u)) << 0u), uint(uint(uint(4u)))))), 1u)), (uint(uvec4(_GLF_IDENTITY(uint(_GLF_IDENTITY(3u, (true ? _GLF_IDENTITY(3u, max(3u, 3u)) : _GLF_FUZZED(56456u)))), ~ _GLF_IDENTITY((~ (_GLF_IDENTITY(uint(3u), clamp(uint(3u), _GLF_IDENTITY(uint(3u), 1u * (uint(3u))), _GLF_IDENTITY(uint(3u), (uint(3u)) ^ 0u))))), clamp(_GLF_IDENTITY((~ (uint(3u))), max((~ (uint(3u))), (_GLF_IDENTITY(~ _GLF_IDENTITY((uint(_GLF_IDENTITY(3u, (3u) / 1u))), ~ (~ ((uint(3u))))), (_GLF_IDENTITY(~ (uint(3u)), ~ (~ (_GLF_IDENTITY(~ (uint(3u)), 0u ^ (~ (uint(3u)))))))) >> (1u ^ 1u))))), (~ _GLF_IDENTITY((uint(3u)), 0u ^ ((uint(3u))))), (~ _GLF_IDENTITY((uint(3u)), uint(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY((uint(3u)), min((uint(3u)), (uint(3u)))))))))), 1u, _GLF_IDENTITY(((1u << _GLF_IDENTITY(uint(4u), uint(4u))) >> _GLF_IDENTITY(uint(4u), _GLF_IDENTITY(uint(4u), uint(uint(uint(4u)))))), _GLF_IDENTITY(uint(uvec4(((1u << _GLF_IDENTITY(uint(4u), uint(4u))) >> _GLF_IDENTITY(uint(4u), _GLF_IDENTITY(uint(4u), uint(uint(uint(4u)))))), 1u, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u)), (_GLF_IDENTITY(uint(uvec4(((1u << _GLF_IDENTITY(uint(4u), uint(4u))) >> _GLF_IDENTITY(uint(4u), _GLF_IDENTITY(uint(4u), uint(uint(uint(4u)))))), 1u, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u)), max(uint(uvec4(((1u << _GLF_IDENTITY(uint(4u), uint(4u))) >> _GLF_IDENTITY(uint(4u), _GLF_IDENTITY(uint(4u), uint(uint(uint(4u)))))), 1u, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u)), uint(uvec4(((1u << _GLF_IDENTITY(uint(4u), uint(4u))) >> _GLF_IDENTITY(uint(4u), _GLF_IDENTITY(uint(4u), uint(uint(uint(4u)))))), 1u, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u))))) / 1u)), 1u))) - 0u)), min(_GLF_IDENTITY(uint(3u), _GLF_IDENTITY(uint(uvec4(_GLF_IDENTITY(uint(3u), ~ (~ (uint(3u)))), 1u, ((1u << _GLF_IDENTITY(uint(4u), uint(4u))) >> _GLF_IDENTITY(uint(4u), _GLF_IDENTITY(_GLF_IDENTITY(uint(4u), (uint(4u)) << 0u), uint(uint(uint(4u)))))), 1u)), (uint(uvec4(_GLF_IDENTITY(uint(_GLF_IDENTITY(_GLF_IDENTITY(3u, clamp(3u, _GLF_IDENTITY(3u, clamp(_GLF_IDENTITY(3u, 0u ^ (3u)), _GLF_IDENTITY(3u, 0u | (3u)), 3u)), 3u)), (true ? _GLF_IDENTITY(3u, max(3u, 3u)) : _GLF_FUZZED(56456u)))), ~ _GLF_IDENTITY((~ (uint(3u))), clamp(_GLF_IDENTITY((~ (uint(3u))), max((~ (uint(3u))), (~ (uint(3u))))), (~ (uint(3u))), _GLF_IDENTITY((~ (uint(3u))), _GLF_IDENTITY(((~ (uint(3u)))) >> 0u, (_GLF_IDENTITY(((~ (uint(3u)))) >> 0u, (_GLF_IDENTITY(((~ (uint(3u)))) >> 0u, (((~ (uint(3u)))) >> 0u) / 1u)) >> 0u)) + 0u))))), 1u, ((1u << _GLF_IDENTITY(uint(4u), uint(4u))) >> _GLF_IDENTITY(uint(4u), _GLF_IDENTITY(uint(4u), uint(uint(uint(4u)))))), 1u))) - 0u)), _GLF_IDENTITY(_GLF_IDENTITY(uint(3u), _GLF_IDENTITY(uint(uvec4(_GLF_IDENTITY(uint(3u), ~ (~ (uint(3u)))), 1u, ((1u << _GLF_IDENTITY(uint(4u), uint(4u))) >> _GLF_IDENTITY(uint(4u), _GLF_IDENTITY(_GLF_IDENTITY(uint(4u), (uint(4u)) << _GLF_IDENTITY(0u, max(0u, _GLF_IDENTITY(0u, (false ? _GLF_FUZZED(subgroup_local_id) : _GLF_IDENTITY(0u, clamp(0u, 0u, 0u))))))), uint(uint(uint(4u)))))), 1u)), (uint(uvec4(_GLF_IDENTITY(uint(_GLF_IDENTITY(3u, (true ? _GLF_IDENTITY(3u, max(3u, 3u)) : _GLF_FUZZED(56456u)))), ~ _GLF_IDENTITY((~ (uint(3u))), clamp(_GLF_IDENTITY((~ (uint(3u))), max((~ (uint(3u))), (~ (uint(3u))))), (~ (uint(3u))), (~ (uint(3u)))))), 1u, ((1u << _GLF_IDENTITY(uint(4u), uint(4u))) >> _GLF_IDENTITY(uint(4u), _GLF_IDENTITY(_GLF_IDENTITY(uint(4u), (_GLF_IDENTITY(uint(4u), (uint(4u)) << 0u)) | (_GLF_IDENTITY(uint(4u), (uint(4u)) + 0u))), uint(uint(uint(4u)))))), 1u))) - 0u)), 0u ^ (_GLF_IDENTITY(_GLF_IDENTITY(uint(3u), _GLF_IDENTITY(uint(uvec4(_GLF_IDENTITY(uint(3u), ~ (~ (uint(3u)))), 1u, ((1u << _GLF_IDENTITY(uint(4u), uint(4u))) >> _GLF_IDENTITY(uint(4u), _GLF_IDENTITY(_GLF_IDENTITY(uint(4u), (uint(4u)) << 0u), uint(uint(uint(4u)))))), 1u)), (uint(uvec4(_GLF_IDENTITY(uint(_GLF_IDENTITY(3u, (true ? _GLF_IDENTITY(3u, max(3u, 3u)) : _GLF_FUZZED(56456u)))), ~ _GLF_IDENTITY((~ (uint(3u))), clamp(_GLF_IDENTITY((~ (uint(3u))), max((~ (uint(3u))), (~ (uint(3u))))), (~ (uint(3u))), (~ (uint(3u)))))), 1u, ((1u << _GLF_IDENTITY(uint(4u), uint(4u))) >> _GLF_IDENTITY(uint(4u), _GLF_IDENTITY(uint(4u), uint(uint(uint(4u)))))), 1u))) - 0u)), uint(_GLF_ONE(1.0, injectionSwitch.y)) * (_GLF_IDENTITY(uint(3u), _GLF_IDENTITY(uint(uvec4(_GLF_IDENTITY(uint(3u), ~ (~ (uint(3u)))), 1u, ((1u << _GLF_IDENTITY(_GLF_IDENTITY(uint(4u), uint(4u)), ~ (~ (_GLF_IDENTITY(uint(4u), uint(4u)))))) >> _GLF_IDENTITY(uint(4u), _GLF_IDENTITY(_GLF_IDENTITY(uint(4u), (uint(_GLF_IDENTITY(4u, (4u) ^ 0u))) << 0u), _GLF_IDENTITY(uint(uint(uint(4u))), (false ? _GLF_FUZZED(subgroup_local_id) : _GLF_IDENTITY(uint(uint(uint(4u))), (_GLF_IDENTITY(true ? uint(uint(uint(4u))) : _GLF_FUZZED(_GLF_IDENTITY(199999u, clamp(199999u, 199999u, _GLF_IDENTITY(199999u, (199999u) * 1u)))), (_GLF_IDENTITY(true ? uint(uint(uint(4u))) : _GLF_FUZZED(_GLF_IDENTITY(199999u, clamp(199999u, 199999u, _GLF_IDENTITY(199999u, (199999u) * 1u)))), (true ? uint(uint(uint(4u))) : _GLF_FUZZED(_GLF_IDENTITY(199999u, clamp(199999u, 199999u, _GLF_IDENTITY(199999u, (199999u) * 1u))))) ^ 0u)) | (true ? uint(uint(uint(4u))) : _GLF_FUZZED(_GLF_IDENTITY(199999u, clamp(199999u, 199999u, _GLF_IDENTITY(199999u, (199999u) * 1u))))))))))))), 1u)), (uint(uvec4(_GLF_IDENTITY(uint(_GLF_IDENTITY(3u, (true ? _GLF_IDENTITY(3u, max(3u, 3u)) : _GLF_FUZZED(56456u)))), ~ _GLF_IDENTITY((~ (uint(3u))), _GLF_IDENTITY(clamp(_GLF_IDENTITY((~ (uint(3u))), max((~ (uint(3u))), (~ (uint(3u))))), (~ (uint(3u))), (~ (uint(3u)))), (clamp(_GLF_IDENTITY((~ (uint(3u))), max((_GLF_IDENTITY(~ (uint(3u)), (~ (uint(3u))) | (~ (uint(3u))))), (~ (uint(3u))))), (~ (uint(3u))), (~ (uint(3u))))) - 0u))), 1u, ((_GLF_IDENTITY(1u << _GLF_IDENTITY(uint(4u), uint(4u)), max(_GLF_IDENTITY(1u << _GLF_IDENTITY(uint(4u), uint(4u)), (_GLF_IDENTITY(1u, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 1u : _GLF_FUZZED((num_workgroup * subgroup_local_id)))) << _GLF_IDENTITY(uint(4u), uint(4u))) | 0u), _GLF_IDENTITY(1u << _GLF_IDENTITY(uint(4u), uint(4u)), (true ? 1u << _GLF_IDENTITY(_GLF_IDENTITY(uint(4u), uint(4u)), (_GLF_IDENTITY(uint(4u), uint(4u))) | (_GLF_IDENTITY(_GLF_IDENTITY(uint(4u), uint(4u)), 1u * (_GLF_IDENTITY(uint(4u), uint(4u)))))) : _GLF_FUZZED(subgroup_id)))))) >> _GLF_IDENTITY(uint(4u), _GLF_IDENTITY(uint(4u), uint(uint(uint(4u)))))), 1u))) - 0u)))))))))) << _GLF_IDENTITY(uint(6u), uint(_GLF_IDENTITY(6u, (true ? 6u : _GLF_FUZZED(_GLF_IDENTITY(atomicAdd(subgroup_size, (subgroup_id ++)), (atomicAdd(subgroup_size, (subgroup_id ++))) + 0u)))))))), (~ (((0u << _GLF_IDENTITY(uint(3u), _GLF_IDENTITY(_GLF_IDENTITY(uint(3u), _GLF_IDENTITY(uint(uvec4(_GLF_IDENTITY(uint(3u), ~ (~ (uint(3u)))), 1u, ((1u << _GLF_IDENTITY(uint(4u), uint(4u))) >> _GLF_IDENTITY(uint(4u), _GLF_IDENTITY(_GLF_IDENTITY(uint(4u), (uint(4u)) << 0u), uint(uint(uint(4u)))))), 1u)), (uint(uvec4(_GLF_IDENTITY(uint(_GLF_IDENTITY(3u, (true ? _GLF_IDENTITY(3u, max(3u, 3u)) : _GLF_FUZZED(56456u)))), ~ _GLF_IDENTITY((~ (_GLF_IDENTITY(uint(3u), clamp(uint(3u), _GLF_IDENTITY(uint(3u), 1u * (uint(3u))), _GLF_IDENTITY(uint(3u), (uint(3u)) ^ 0u))))), clamp(_GLF_IDENTITY((~ (uint(3u))), max((~ (uint(3u))), (_GLF_IDENTITY(~ _GLF_IDENTITY((uint(3u)), ~ (_GLF_IDENTITY(~ ((uint(3u))), 0u + (~ ((uint(3u))))))), (~ (uint(3u))) >> (1u ^ 1u))))), (~ _GLF_IDENTITY((uint(3u)), 0u ^ ((uint(3u))))), (~ _GLF_IDENTITY((uint(3u)), uint(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-2.7)), bool(false))))) ^ (_GLF_IDENTITY((uint(3u)), min((uint(3u)), (uint(3u)))))))))), 1u, ((1u << _GLF_IDENTITY(_GLF_IDENTITY(uint(4u), uint(4u)), max(_GLF_IDENTITY(uint(4u), uint(4u)), _GLF_IDENTITY(uint(4u), uint(4u))))) >> _GLF_IDENTITY(uint(4u), _GLF_IDENTITY(uint(4u), uint(_GLF_IDENTITY(uint(uint(4u)), (_GLF_IDENTITY(uint(uint(4u)), (false ? _GLF_FUZZED(workgroup_size) : uint(uint(4u))))) | (uint(uint(4u)))))))), 1u))) - 0u)), min(_GLF_IDENTITY(uint(3u), _GLF_IDENTITY(uint(uvec4(_GLF_IDENTITY(_GLF_IDENTITY(uint(3u), uint(uvec2(_GLF_IDENTITY(uint(3u), (uint(3u)) ^ 0u), 0u))), ~ (~ (uint(3u)))), 1u, ((1u << _GLF_IDENTITY(uint(4u), uint(4u))) >> _GLF_IDENTITY(uint(4u), _GLF_IDENTITY(_GLF_IDENTITY(uint(4u), (uint(4u)) << 0u), uint(uint(uint(4u)))))), 1u)), (uint(uvec4(_GLF_IDENTITY(uint(_GLF_IDENTITY(_GLF_IDENTITY(3u, clamp(3u, _GLF_IDENTITY(3u, clamp(_GLF_IDENTITY(3u, 0u ^ (3u)), _GLF_IDENTITY(3u, 0u | (3u)), 3u)), 3u)), (true ? _GLF_IDENTITY(3u, max(3u, 3u)) : _GLF_FUZZED(56456u)))), ~ _GLF_IDENTITY((~ (uint(3u))), clamp(_GLF_IDENTITY((~ (uint(3u))), max((~ (uint(3u))), (~ (uint(3u))))), (_GLF_IDENTITY(~ (uint(3u)), (true ? ~ (uint(3u)) : _GLF_FUZZED((subgroup_id ++))))), _GLF_IDENTITY((~ (uint(3u))), ((~ (_GLF_IDENTITY(uint(3u), max(_GLF_IDENTITY(uint(3u), clamp(uint(3u), _GLF_IDENTITY(uint(3u), ~ (~ (uint(3u)))), uint(3u))), _GLF_IDENTITY(uint(3u), (false ? _GLF_FUZZED(subgroup_size) : uint(3u)))))))) >> 0u)))), 1u, ((1u << _GLF_IDENTITY(uint(4u), uint(4u))) >> _GLF_IDENTITY(uint(4u), _GLF_IDENTITY(uint(4u), _GLF_IDENTITY(uint(uint(uint(4u))), clamp(_GLF_IDENTITY(uint(uint(uint(4u))), ~ (~ (uint(uint(uint(4u)))))), uint(uint(uint(4u))), uint(uint(uint(4u)))))))), 1u))) - 0u)), _GLF_IDENTITY(_GLF_IDENTITY(uint(3u), _GLF_IDENTITY(uint(uvec4(_GLF_IDENTITY(uint(3u), ~ (~ (uint(3u)))), 1u, ((1u << _GLF_IDENTITY(uint(4u), uint(4u))) >> _GLF_IDENTITY(uint(4u), _GLF_IDENTITY(_GLF_IDENTITY(uint(4u), (uint(4u)) << _GLF_IDENTITY(0u, max(0u, 0u))), uint(uint(uint(4u)))))), 1u)), (uint(uvec4(_GLF_IDENTITY(uint(_GLF_IDENTITY(3u, (true ? _GLF_IDENTITY(3u, max(3u, 3u)) : _GLF_FUZZED(56456u)))), ~ _GLF_IDENTITY((~ (uint(3u))), clamp(_GLF_IDENTITY((~ (uint(3u))), max((~ (uint(3u))), (~ (uint(3u))))), (~ (uint(3u))), (~ (uint(3u)))))), 1u, ((1u << _GLF_IDENTITY(uint(4u), uint(4u))) >> _GLF_IDENTITY(uint(4u), _GLF_IDENTITY(uint(4u), uint(uint(uint(4u)))))), 1u))) - 0u)), 0u ^ (_GLF_IDENTITY(_GLF_IDENTITY(uint(3u), _GLF_IDENTITY(_GLF_IDENTITY(uint(uvec4(_GLF_IDENTITY(uint(3u), ~ (~ (uint(3u)))), 1u, ((1u << _GLF_IDENTITY(uint(4u), uint(4u))) >> _GLF_IDENTITY(uint(4u), _GLF_IDENTITY(_GLF_IDENTITY(uint(4u), (uint(4u)) << 0u), uint(uint(uint(4u)))))), 1u)), (uint(uvec4(_GLF_IDENTITY(uint(_GLF_IDENTITY(3u, (true ? _GLF_IDENTITY(3u, max(3u, 3u)) : _GLF_FUZZED(56456u)))), ~ _GLF_IDENTITY((~ (uint(3u))), clamp(_GLF_IDENTITY((~ (uint(3u))), max((~ (uint(3u))), (~ (uint(3u))))), (~ (uint(3u))), (~ (uint(3u)))))), 1u, ((1u << _GLF_IDENTITY(uint(4u), uint(4u))) >> _GLF_IDENTITY(uint(4u), _GLF_IDENTITY(uint(4u), uint(uint(uint(4u)))))), 1u))) - 0u), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(uint(uvec4(_GLF_IDENTITY(uint(3u), ~ (~ (uint(3u)))), 1u, ((1u << _GLF_IDENTITY(uint(4u), uint(4u))) >> _GLF_IDENTITY(uint(4u), _GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(4u, (4u) | (4u))), (uint(4u)) << 0u), uint(uint(uint(4u)))))), 1u)), (uint(uvec4(_GLF_IDENTITY(uint(_GLF_IDENTITY(3u, (true ? _GLF_IDENTITY(3u, max(3u, 3u)) : _GLF_FUZZED(56456u)))), ~ _GLF_IDENTITY((~ (uint(3u))), clamp(_GLF_IDENTITY((~ (uint(3u))), max((~ (uint(3u))), (~ (uint(3u))))), (~ (uint(3u))), _GLF_IDENTITY((~ (uint(3u))), 0u ^ (_GLF_IDENTITY((~ (uint(3u))), ((~ (uint(3u)))) | ((~ (uint(3u)))))))))), 1u, ((1u << _GLF_IDENTITY(uint(4u), uint(4u))) >> _GLF_IDENTITY(uint(4u), _GLF_IDENTITY(uint(4u), uint(uint(uint(4u)))))), 1u))) - 0u) : _GLF_FUZZED((workgroup_id >> workgroup_size))))), uint(_GLF_ONE(1.0, injectionSwitch.y)) * (_GLF_IDENTITY(uint(3u), _GLF_IDENTITY(_GLF_IDENTITY(uint(uvec4(_GLF_IDENTITY(uint(3u), ~ (~ (uint(3u)))), 1u, ((1u << _GLF_IDENTITY(uint(4u), uint(_GLF_IDENTITY(4u, uint(uvec2(4u, 0u)))))) >> _GLF_IDENTITY(uint(4u), _GLF_IDENTITY(_GLF_IDENTITY(uint(4u), (uint(4u)) << 0u), _GLF_IDENTITY(uint(uint(uint(4u))), (false ? _GLF_FUZZED(subgroup_local_id) : _GLF_IDENTITY(uint(uint(uint(4u))), (true ? uint(uint(uint(4u))) : _GLF_IDENTITY(_GLF_FUZZED(199999u), uint(uvec3(_GLF_FUZZED(199999u), 0u, 0u)))))))))), 1u)), (true ? uint(uvec4(_GLF_IDENTITY(uint(3u), ~ (~ (uint(3u)))), 1u, ((1u << _GLF_IDENTITY(uint(4u), uint(_GLF_IDENTITY(4u, uint(uvec2(4u, 0u)))))) >> _GLF_IDENTITY(uint(4u), _GLF_IDENTITY(_GLF_IDENTITY(uint(4u), (uint(4u)) << 0u), _GLF_IDENTITY(uint(uint(uint(4u))), (false ? _GLF_FUZZED(subgroup_local_id) : _GLF_IDENTITY(uint(uint(uint(4u))), (true ? uint(uint(uint(4u))) : _GLF_IDENTITY(_GLF_FUZZED(199999u), uint(uvec3(_GLF_FUZZED(199999u), 0u, 0u)))))))))), 1u)) : _GLF_FUZZED(workgroup_size))), (uint(uvec4(_GLF_IDENTITY(uint(_GLF_IDENTITY(3u, (true ? _GLF_IDENTITY(_GLF_IDENTITY(3u, (true ? 3u : _GLF_FUZZED(170653u))), max(3u, 3u)) : _GLF_FUZZED(56456u)))), ~ _GLF_IDENTITY((~ (uint(3u))), _GLF_IDENTITY(clamp(_GLF_IDENTITY((~ (uint(3u))), max((~ (uint(3u))), (~ (uint(3u))))), (~ (uint(3u))), (~ (uint(3u)))), (clamp(_GLF_IDENTITY((~ (uint(3u))), max((_GLF_IDENTITY(~ (uint(3u)), (~ (uint(3u))) | (~ (uint(3u))))), (~ (uint(3u))))), (~ (uint(3u))), (~ (uint(3u))))) - 0u))), 1u, ((_GLF_IDENTITY(1u << _GLF_IDENTITY(uint(4u), uint(4u)), _GLF_IDENTITY(max(_GLF_IDENTITY(1u << _GLF_IDENTITY(uint(4u), uint(4u)), (1u << _GLF_IDENTITY(uint(4u), uint(4u))) | 0u), _GLF_IDENTITY(1u << _GLF_IDENTITY(uint(4u), uint(4u)), (true ? 1u << _GLF_IDENTITY(uint(4u), uint(4u)) : _GLF_FUZZED(subgroup_id)))), clamp(_GLF_IDENTITY(max(_GLF_IDENTITY(1u << _GLF_IDENTITY(uint(4u), uint(4u)), (1u << _GLF_IDENTITY(uint(4u), uint(4u))) | 0u), _GLF_IDENTITY(1u << _GLF_IDENTITY(uint(4u), uint(4u)), (true ? 1u << _GLF_IDENTITY(uint(4u), uint(4u)) : _GLF_FUZZED(subgroup_id)))), 0u | (_GLF_IDENTITY(max(_GLF_IDENTITY(1u << _GLF_IDENTITY(uint(4u), uint(4u)), (1u << _GLF_IDENTITY(uint(4u), uint(4u))) | 0u), _GLF_IDENTITY(1u << _GLF_IDENTITY(uint(4u), uint(4u)), (true ? 1u << _GLF_IDENTITY(uint(4u), uint(4u)) : _GLF_FUZZED(subgroup_id)))), (max(_GLF_IDENTITY(1u << _GLF_IDENTITY(uint(4u), uint(4u)), (1u << _GLF_IDENTITY(uint(4u), uint(4u))) | 0u), _GLF_IDENTITY(1u << _GLF_IDENTITY(uint(4u), uint(4u)), (true ? 1u << _GLF_IDENTITY(uint(4u), uint(4u)) : _GLF_FUZZED(subgroup_id))))) ^ 0u))), max(_GLF_IDENTITY(1u << _GLF_IDENTITY(uint(4u), uint(4u)), (1u << _GLF_IDENTITY(uint(4u), uint(4u))) | 0u), _GLF_IDENTITY(1u << _GLF_IDENTITY(uint(4u), uint(4u)), (true ? 1u << _GLF_IDENTITY(uint(4u), uint(4u)) : _GLF_FUZZED(subgroup_id)))), max(_GLF_IDENTITY(1u << _GLF_IDENTITY(uint(4u), uint(4u)), (1u << _GLF_IDENTITY(uint(4u), uint(4u))) | 0u), _GLF_IDENTITY(1u << _GLF_IDENTITY(uint(4u), uint(4u)), (true ? 1u << _GLF_IDENTITY(uint(4u), uint(4u)) : _GLF_FUZZED(subgroup_id)))))))) >> _GLF_IDENTITY(uint(4u), _GLF_IDENTITY(uint(4u), uint(uint(uint(4u)))))), 1u))) - 0u)))))))))) << _GLF_IDENTITY(uint(6u), uint(_GLF_IDENTITY(6u, (true ? 6u : _GLF_FUZZED(_GLF_IDENTITY(atomicAdd(subgroup_size, (subgroup_id ++)), (atomicAdd(subgroup_size, (subgroup_id ++))) + 0u))))))))) - 0u))) - 0u)));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), (injectionSwitch.x > injectionSwitch.y))))
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (int(_GLF_ZERO(0.0, injectionSwitch.x)) | 1)); _injected_loop_counter ++)
    {
     barrier();
     for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           barrier();
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
          }
        }
      }
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     do
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
     for(int _injected_loop_counter = (((1 & 1) << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1))); _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(_GLF_IDENTITY(0, ((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4))) * (0)), min(0, 0))); _injected_loop_counter --)
      {
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    {
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = (1 ^ 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5)))); _injected_loop_counter ++)
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(_GLF_IDENTITY(1, int(ivec4(1, 1, 0, 1))), (_GLF_IDENTITY(_GLF_IDENTITY(1, int(ivec4(1, 1, 0, 1))), (_GLF_IDENTITY(_GLF_IDENTITY(1, int(ivec4(1, 1, 0, 1))), (true ? _GLF_IDENTITY(1, int(ivec4(1, 1, 0, 1))) : _GLF_FUZZED(_injected_loop_counter)))) | (_GLF_IDENTITY(_GLF_IDENTITY(1, int(ivec4(1, 1, 0, 1))), ~ (~ (_GLF_IDENTITY(1, int(ivec4(1, 1, 0, 1))))))))) ^ 0)); _injected_loop_counter ++)
          {
           barrier();
          }
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       barrier();
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(bvec3((injectionSwitch.x > injectionSwitch.y), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), (bool(bvec3((injectionSwitch.x > injectionSwitch.y), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) || false)))))
    {
     if(_GLF_DEAD(false))
      barrier();
     do
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0), injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))));
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   do
    {
     do
      {
       GLF_merged2_0_1_14_1_1_14workgroup_baseworkgroup_size.x = workgroup_base;
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      {
       do
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              {
               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 | 0)); _injected_loop_counter --)
                {
                 barrier();
                }
              }
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 barrier();
                }
              }
             else
              {
              }
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), bool(bvec2(bool(bool(false)), false))))))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 barrier();
                }
               if(_GLF_DEAD(false))
                barrier();
               do
                {
                 barrier();
                }
               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x > injectionSwitch.y))));
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(-25.84), _GLF_FUZZED(-9.5)), bvec2(false, false))).x > injectionSwitch.y))))
                  barrier();
                }
               else
                {
                }
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y)), ! (! _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(mat2x3(injectionSwitch.y, 1.0, 0.0, 0.0, 0.0, 1.0))))))))) || false)), bool(_GLF_IDENTITY(bool((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(mat2x3(injectionSwitch.y, 1.0, 0.0, 0.0, 0.0, 1.0))))))))) || false))), _GLF_IDENTITY(bool(bvec4(bool((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(mat2x3(injectionSwitch.y, 1.0, 0.0, 0.0, 0.0, 1.0))))))))) || false))), true, true, false)), ! (! (bool(bvec4(bool((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(mat2x3(injectionSwitch.y, 1.0, 0.0, 0.0, 0.0, 1.0))))))))) || false))), true, true, false))))))))))))))
              {
               do
                {
                 barrier();
                }
               while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), ! (! (_GLF_WRAPPED_LOOP(false)))));
              }
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-2813.6947, -71.34)) : injectionSwitch)).y))))
              {
               if(_GLF_DEAD(false))
                barrier();
              }
             else
              {
               if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y), clamp(clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y), clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y), clamp(injectionSwitch.y, injectionSwitch.y, _GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat2x4(injectionSwitch, 0.0, _GLF_IDENTITY(dot(vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0)), dot(vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0))), 0.0, 0.0, 0.0, 0.0)), (vec2(mat2x4(injectionSwitch, 0.0, _GLF_IDENTITY(dot(vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0)), dot(vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0))), 0.0, 0.0, 0.0, 0.0))) + vec2(0.0, 0.0))))).y)))))), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) && true)))
                {
                 if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
                  {
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      {
                      }
                     else
                      {
                       barrier();
                      }
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                    }
                   if(_GLF_DEAD(false))
                    barrier();
                   barrier();
                  }
                }
               else
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     barrier();
                    }
                   else
                    {
                    }
                  }
                }
              }
            }
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) || false)))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 barrier();
                }
               else
                {
                }
              }
            }
           else
            {
            }
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, ! (! (false)))))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), mat2(1.0) * (mat2(1.0) * (injectionSwitch)))).y)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, float(mat4(injectionSwitch.y, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, length(vec3(0.0, 0.0, 0.0)), 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0))), injectionSwitch.y)))), true && (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))) && true)))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               barrier();
               if(_GLF_DEAD(false))
                barrier();
              }
             else
              {
              }
            }
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                {
                 do
                  {
                   barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
               barrier();
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
            }
           barrier();
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           barrier();
          }
         else
          {
          }
        }
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), (_GLF_WRAPPED_LOOP(false)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(mat3x2(injectionSwitch, 1.0, 1.0, 1.0, 0.0))))))).y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 uint virtual_gid = _GLF_IDENTITY(GLF_merged2_0_1_14_1_1_14workgroup_baseworkgroup_size.x + subgroup_id * _GLF_IDENTITY(subgroup_size, uint(uvec2(subgroup_size, 0u))) + subgroup_local_id, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(subgroup_id) : _GLF_IDENTITY(GLF_merged2_0_1_14_1_1_14workgroup_baseworkgroup_size.x + subgroup_id * _GLF_IDENTITY(subgroup_size, uint(uvec2(subgroup_size, 0u))) + subgroup_local_id, max(_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged2_0_1_14_1_1_14workgroup_baseworkgroup_size.x + subgroup_id * _GLF_IDENTITY(subgroup_size, uint(uvec2(subgroup_size, 0u))) + subgroup_local_id, max(_GLF_IDENTITY(GLF_merged2_0_1_14_1_1_14workgroup_baseworkgroup_size.x + subgroup_id * _GLF_IDENTITY(subgroup_size, uint(uvec2(subgroup_size, 0u))) + subgroup_local_id, 0u ^ (GLF_merged2_0_1_14_1_1_14workgroup_baseworkgroup_size.x + subgroup_id * _GLF_IDENTITY(subgroup_size, uint(uvec2(subgroup_size, 0u))) + subgroup_local_id)), GLF_merged2_0_1_14_1_1_14workgroup_baseworkgroup_size.x + subgroup_id * _GLF_IDENTITY(subgroup_size, uint(uvec2(subgroup_size, 0u))) + subgroup_local_id)), _GLF_IDENTITY(_GLF_IDENTITY(~ (~ (GLF_merged2_0_1_14_1_1_14workgroup_baseworkgroup_size.x + subgroup_id * _GLF_IDENTITY(subgroup_size, uint(uvec2(subgroup_size, 0u))) + subgroup_local_id)), (_GLF_IDENTITY(~ _GLF_IDENTITY((~ (GLF_merged2_0_1_14_1_1_14workgroup_baseworkgroup_size.x + subgroup_id * _GLF_IDENTITY(subgroup_size, uint(uvec2(subgroup_size, 0u))) + subgroup_local_id)), 0u ^ ((~ (GLF_merged2_0_1_14_1_1_14workgroup_baseworkgroup_size.x + subgroup_id * _GLF_IDENTITY(subgroup_size, uint(uvec2(subgroup_size, 0u))) + subgroup_local_id)))), (~ (~ (GLF_merged2_0_1_14_1_1_14workgroup_baseworkgroup_size.x + subgroup_id * _GLF_IDENTITY(subgroup_size, uint(uvec2(subgroup_size, 0u))) + subgroup_local_id))) | (~ (~ (_GLF_IDENTITY(GLF_merged2_0_1_14_1_1_14workgroup_baseworkgroup_size, (GLF_merged2_0_1_14_1_1_14workgroup_baseworkgroup_size) | (GLF_merged2_0_1_14_1_1_14workgroup_baseworkgroup_size)).x + subgroup_id * _GLF_IDENTITY(subgroup_size, uint(uvec2(subgroup_size, 0u))) + subgroup_local_id))))) << 0u), (_GLF_IDENTITY(~ (~ (GLF_merged2_0_1_14_1_1_14workgroup_baseworkgroup_size.x + subgroup_id * _GLF_IDENTITY(subgroup_size, uint(uvec2(subgroup_size, 0u))) + subgroup_local_id)), (_GLF_IDENTITY(~ _GLF_IDENTITY((~ (GLF_merged2_0_1_14_1_1_14workgroup_baseworkgroup_size.x + subgroup_id * _GLF_IDENTITY(subgroup_size, uint(uvec2(subgroup_size, 0u))) + subgroup_local_id)), 0u ^ ((~ (GLF_merged2_0_1_14_1_1_14workgroup_baseworkgroup_size.x + subgroup_id * _GLF_IDENTITY(subgroup_size, uint(uvec2(subgroup_size, 0u))) + subgroup_local_id)))), (~ (~ (GLF_merged2_0_1_14_1_1_14workgroup_baseworkgroup_size.x + subgroup_id * _GLF_IDENTITY(subgroup_size, uint(uvec2(subgroup_size, 0u))) + subgroup_local_id))) | (~ (~ (_GLF_IDENTITY(GLF_merged2_0_1_14_1_1_14workgroup_baseworkgroup_size, (GLF_merged2_0_1_14_1_1_14workgroup_baseworkgroup_size) | (GLF_merged2_0_1_14_1_1_14workgroup_baseworkgroup_size)).x + subgroup_id * _GLF_IDENTITY(subgroup_size, uint(uvec2(subgroup_size, 0u))) + subgroup_local_id))))) << 0u)) | (_GLF_IDENTITY(~ (~ (GLF_merged2_0_1_14_1_1_14workgroup_baseworkgroup_size.x + subgroup_id * _GLF_IDENTITY(subgroup_size, uint(uvec2(subgroup_size, 0u))) + subgroup_local_id)), (_GLF_IDENTITY(~ _GLF_IDENTITY((~ (GLF_merged2_0_1_14_1_1_14workgroup_baseworkgroup_size.x + subgroup_id * _GLF_IDENTITY(subgroup_size, uint(uvec2(subgroup_size, 0u))) + subgroup_local_id)), 0u ^ ((~ (GLF_merged2_0_1_14_1_1_14workgroup_baseworkgroup_size.x + subgroup_id * _GLF_IDENTITY(subgroup_size, uint(uvec2(subgroup_size, 0u))) + subgroup_local_id)))), (~ (~ (GLF_merged2_0_1_14_1_1_14workgroup_baseworkgroup_size.x + subgroup_id * _GLF_IDENTITY(subgroup_size, uint(uvec2(subgroup_size, 0u))) + subgroup_local_id))) | (~ (~ (_GLF_IDENTITY(GLF_merged2_0_1_14_1_1_14workgroup_baseworkgroup_size, (GLF_merged2_0_1_14_1_1_14workgroup_baseworkgroup_size) | (GLF_merged2_0_1_14_1_1_14workgroup_baseworkgroup_size)).x + subgroup_id * _GLF_IDENTITY(subgroup_size, uint(uvec2(subgroup_size, 0u))) + subgroup_local_id))))) << 0u)))), GLF_merged2_0_1_14_1_1_14workgroup_baseworkgroup_size.x + subgroup_id * _GLF_IDENTITY(subgroup_size, uint(_GLF_IDENTITY(uvec2(subgroup_size, 0u), max(uvec2(subgroup_size, 0u), _GLF_IDENTITY(uvec2(subgroup_size, 0u), (uvec2(subgroup_size, 0u)) | (uvec2(subgroup_size, 0u))))))) + subgroup_local_id))));
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     barrier();
    }
   else
    {
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_DEAD(false), false, false)))), ! (! (! (_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_DEAD(false), false, false))))))))))
  {
   do
    {
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_DEAD(false))
  barrier();
 do
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       do
        {
         barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     barrier();
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 uint next_virtual_gid = GLF_merged2_0_1_14_1_1_14workgroup_baseworkgroup_size.x + subgroup_id * subgroup_size + ((subgroup_local_id + 1) % subgroup_size);
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   do
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch[1], _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch))[1]), float(_GLF_IDENTITY(vec4((_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch))[1]), _GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0), mix(vec4(_GLF_FUZZED(-9172.8997), (vec4((_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch))[1]), _GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0))[1], (vec4((_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch))[1]), _GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0))[2], _GLF_FUZZED(0.2)), vec4((vec4((_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch))[1]), _GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0))[0], _GLF_FUZZED(8.5), _GLF_FUZZED(-33.30), (vec4((_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch))[1]), _GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0))[3]), bvec4(true, false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))) - 0.0), _GLF_IDENTITY(min(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch[1], (injectionSwitch[1]) - 0.0), mix(float(_GLF_FUZZED((-7.5 - 506.133))), float(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch[1], (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], max(injectionSwitch[1], injectionSwitch[1])))), injectionSwitch, injectionSwitch)), vec2(vec3(injectionSwitch, log(1.0))))[1]) - 0.0), float(mat2x3(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1]))[1], (injectionSwitch[1]) - 0.0), 0.0, 1.0, 0.0, 0.0, 0.0)))), bool(true))), _GLF_IDENTITY(injectionSwitch[1], (injectionSwitch[1]) - 0.0)), (min(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch[1], (injectionSwitch[1]) - 0.0), mix(float(_GLF_FUZZED((-7.5 - 506.133))), float(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch[1], (_GLF_IDENTITY(injectionSwitch, vec2(vec3(injectionSwitch, log(1.0))))[1]) - 0.0), float(mat2x3(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1]))[1], (_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch))[1]) - 0.0), 0.0, 1.0, 0.0, 0.0, 0.0)))), bool(true))), _GLF_IDENTITY(injectionSwitch[1], (injectionSwitch[1]) - 0.0))) * 1.0)), max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch[1], (injectionSwitch[1]) - 0.0), min(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch[1], (injectionSwitch[1]) - 0.0), _GLF_IDENTITY(mix(float(_GLF_IDENTITY(_GLF_FUZZED((-7.5 - 506.133)), (_GLF_FUZZED((-7.5 - 506.133))) * 1.0)), float(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch[1], (injectionSwitch[1]) - 0.0), float(mat2x3(_GLF_IDENTITY(injectionSwitch[1], (injectionSwitch[1]) - 0.0), 0.0, 1.0, 0.0, 0.0, 0.0)))), bool(_GLF_IDENTITY(true, ! (! (true))))), max(mix(float(_GLF_FUZZED((-7.5 - 506.133))), float(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch[1], min(injectionSwitch[1], injectionSwitch[1])), (injectionSwitch[1]) - 0.0), float(mat2x3(_GLF_IDENTITY(injectionSwitch[1], (injectionSwitch[1]) - 0.0), 0.0, 1.0, 0.0, 0.0, 0.0)))), bool(true)), mix(float(_GLF_FUZZED((-7.5 - 506.133))), float(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch[1], (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0))[1]) - 0.0), float(mat2x3(_GLF_IDENTITY(injectionSwitch[1], (injectionSwitch[1]) - 0.0), 0.0, 1.0, 0.0, 0.0, 0.0)))), bool(true))))), _GLF_IDENTITY(injectionSwitch[1], (injectionSwitch[1]) - 0.0))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch[1], (injectionSwitch[1]) - 0.0), _GLF_IDENTITY(min(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch[1], (injectionSwitch[1]) - 0.0), mix(float(_GLF_FUZZED((-7.5 - 506.133))), float(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch[1], (injectionSwitch[1]) - 0.0), float(mat2x3(_GLF_IDENTITY(injectionSwitch[1], (injectionSwitch[1]) - 0.0), 0.0, 1.0, 0.0, 0.0, 0.0)))), bool(true))), _GLF_IDENTITY(injectionSwitch[1], (injectionSwitch[1]) - 0.0)), (false ? _GLF_FUZZED(-889.456) : _GLF_IDENTITY(min(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch[1], (injectionSwitch[1]) - 0.0), mix(float(_GLF_FUZZED((-7.5 - 506.133))), float(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch[1], (injectionSwitch[1]) - 0.0), float(mat2x3(_GLF_IDENTITY(injectionSwitch[1], (injectionSwitch[1]) - 0.0), 0.0, 1.0, 0.0, 0.0, 0.0)))), bool(true))), _GLF_IDENTITY(injectionSwitch[1], (injectionSwitch[1]) - 0.0)), max(min(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch[1], (injectionSwitch[1]) - 0.0), mix(float(_GLF_FUZZED((-7.5 - 506.133))), float(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch[1], (injectionSwitch[1]) - 0.0), float(mat2x3(_GLF_IDENTITY(injectionSwitch[1], (injectionSwitch[1]) - 0.0), 0.0, 1.0, 0.0, 0.0, _GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED((53.47 + -7.3))), bool(false))))))), bool(true))), _GLF_IDENTITY(injectionSwitch[1], (injectionSwitch[1]) - 0.0)), min(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch[1], (injectionSwitch[1]) - 0.0), mix(float(_GLF_FUZZED((-7.5 - 506.133))), float(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch[1], (injectionSwitch[_GLF_IDENTITY(1, (1) | (1))]) - 0.0), float(mat2x3(_GLF_IDENTITY(injectionSwitch[1], (injectionSwitch[1]) - 0.0), 0.0, 1.0, 0.0, 0.0, 0.0)))), bool(true))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch))[1], (injectionSwitch[1]) - 0.0))))))))))).x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch[1], (_GLF_IDENTITY(injectionSwitch[1], mix(float(_GLF_FUZZED(0.8)), float(_GLF_IDENTITY(injectionSwitch[1], mix(float(injectionSwitch[1]), float(_GLF_FUZZED(172.002)), bool(false)))), bool(true)))) - 0.0), min(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch[1], (injectionSwitch[1]) - _GLF_IDENTITY(0.0, float(mat4(0.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 1.0, 0.0, 1.0, abs(0.0), 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), round(length(normalize(1.0))), 1.0, 0.0, cos(0.0), 0.0, 1.0, 0.0)))), _GLF_IDENTITY(_GLF_IDENTITY(mix(float(_GLF_FUZZED((-7.5 - 506.133))), float(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch[1], (injectionSwitch[1]) - 0.0), float(mat2x3(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat3x2(injectionSwitch, 0.0, sqrt(1.0), 0.0, cos(0.0))))[1], (injectionSwitch[1]) - 0.0), 0.0, 1.0, 0.0, 0.0, 0.0)))), bool(true)), (mix(float(_GLF_FUZZED((-7.5 - 506.133))), float(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch[1], (injectionSwitch[1]) - 0.0), float(mat2x3(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat3x2(injectionSwitch, 0.0, sqrt(1.0), 0.0, cos(0.0))))[1], (injectionSwitch[1]) - 0.0), 0.0, 1.0, 0.0, 0.0, 0.0)))), bool(true))) + 0.0), (_GLF_IDENTITY(_GLF_IDENTITY(mix(float(_GLF_FUZZED((-7.5 - 506.133))), float(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch[1], (injectionSwitch[1]) - 0.0), float(mat2x3(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat3x2(injectionSwitch, 0.0, sqrt(1.0), 0.0, cos(0.0))))[1], (injectionSwitch[1]) - 0.0), 0.0, 1.0, 0.0, 0.0, 0.0)))), bool(true)), (mix(float(_GLF_FUZZED((-7.5 - 506.133))), float(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch[1], (injectionSwitch[1]) - 0.0), float(mat2x3(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat3x2(injectionSwitch, 0.0, sqrt(1.0), 0.0, cos(0.0))))[1], (injectionSwitch[1]) - 0.0), 0.0, 1.0, 0.0, 0.0, 0.0)))), bool(true))) + 0.0), (_GLF_IDENTITY(mix(float(_GLF_FUZZED((-7.5 - 506.133))), float(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch[1], (injectionSwitch[1]) - 0.0), float(mat2x3(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat3x2(injectionSwitch, 0.0, sqrt(1.0), 0.0, cos(0.0))))[1], (injectionSwitch[1]) - 0.0), 0.0, 1.0, 0.0, 0.0, 0.0)))), bool(true)), (mix(float(_GLF_FUZZED((-7.5 - 506.133))), float(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch[1], _GLF_IDENTITY((injectionSwitch[1]) - 0.0, float(mat2((injectionSwitch[1]) - 0.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), exp(0.0), exp(_GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(0.0, 1.0, 1.0)), dot(vec3(1.0, 0.0, 0.0), vec3(0.0, 1.0, 1.0)))))))), float(mat2x3(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat3x2(injectionSwitch, 0.0, sqrt(1.0), 0.0, cos(0.0))))[1], (_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch))[1]) - 0.0), 0.0, 1.0, 0.0, 0.0, 0.0)))), bool(true))) + 0.0)) / 1.0)) - 0.0)), _GLF_IDENTITY(injectionSwitch[1], (injectionSwitch[1]) - 0.0))), max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch[1], _GLF_IDENTITY((injectionSwitch[1]), max((injectionSwitch[1]), (injectionSwitch[1]))) - 0.0), min(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch[1], (injectionSwitch[1]) - 0.0), _GLF_IDENTITY(mix(float(_GLF_FUZZED((-7.5 - 506.133))), _GLF_IDENTITY(float(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch[_GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(36986)))], (injectionSwitch[1]) - 0.0), float(mat2x3(_GLF_IDENTITY(injectionSwitch[1], (injectionSwitch[1]) - 0.0), 0.0, 1.0, 0.0, 0.0, 0.0)))), (_GLF_IDENTITY(float(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch[_GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(36986)))], (injectionSwitch[1]) - 0.0), float(mat2x3(_GLF_IDENTITY(injectionSwitch[1], (injectionSwitch[1]) - 0.0), 0.0, 1.0, 0.0, 0.0, 0.0)))), min(_GLF_IDENTITY(float(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch[_GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(36986)))], (injectionSwitch[1]) - 0.0), float(mat2x3(_GLF_IDENTITY(injectionSwitch[1], (injectionSwitch[1]) - 0.0), 0.0, 1.0, 0.0, 0.0, 0.0)))), (false ? _GLF_FUZZED(-8713.7873) : float(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch[_GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(36986)))], (injectionSwitch[1]) - 0.0), float(mat2x3(_GLF_IDENTITY(injectionSwitch[1], (injectionSwitch[1]) - 0.0), 0.0, 1.0, 0.0, 0.0, 0.0)))))), float(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch[_GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(36986)))], (injectionSwitch[1]) - 0.0), float(mat2x3(_GLF_IDENTITY(injectionSwitch[1], (injectionSwitch[1]) - 0.0), 0.0, 1.0, 0.0, 0.0, 0.0))))))) + sqrt(0.0)), bool(true)), (true ? mix(_GLF_IDENTITY(float(_GLF_FUZZED((-7.5 - 506.133))), (float(_GLF_FUZZED((-7.5 - 506.133)))) - abs(0.0)), float(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch[1], (injectionSwitch[1]) - 0.0), float(mat2x3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch[1], float(mat3x4(injectionSwitch[1], abs(1.0), 0.0, 1.0, 0.0, abs(1.0), 0.0, 1.0, _GLF_IDENTITY(1.0, max(1.0, 1.0)), 1.0, 1.0, 1.0))), (injectionSwitch[1]) - 0.0), _GLF_IDENTITY(float(vec3(_GLF_IDENTITY(injectionSwitch[1], (injectionSwitch[1]) - 0.0), 0.0, 1.0)), 0.0 + (float(vec3(_GLF_IDENTITY(injectionSwitch[1], (injectionSwitch[1]) - 0.0), 0.0, 1.0))))), 0.0, 1.0, 0.0, 0.0, 0.0)))), bool(true)) : _GLF_FUZZED(-823.392)))), _GLF_IDENTITY(injectionSwitch[1], (injectionSwitch[1]) - 0.0))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch[_GLF_IDENTITY(1, ~ (_GLF_IDENTITY(~ (1), ~ (~ (~ (1))))))], (injectionSwitch[1]) - 0.0), min(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch[1], (_GLF_IDENTITY(injectionSwitch[1], _GLF_IDENTITY(float(_GLF_IDENTITY(vec4(injectionSwitch[1], 1.0, 1.0, 0.0), mix(vec4((vec4(injectionSwitch[1], 1.0, 1.0, 0.0))[0], _GLF_FUZZED(341.880), (vec4(injectionSwitch[1], 1.0, 1.0, 0.0))[2], (vec4(injectionSwitch[1], 1.0, 1.0, 0.0))[3]), vec4(_GLF_FUZZED(-718.083), (vec4(injectionSwitch[1], 1.0, 1.0, 0.0))[1], _GLF_FUZZED(-3.4), _GLF_FUZZED((- 368.625))), bvec4(false, true, false, false)))), max(float(_GLF_IDENTITY(vec4(injectionSwitch[1], 1.0, 1.0, 0.0), mix(vec4((vec4(injectionSwitch[1], 1.0, 1.0, 0.0))[0], _GLF_FUZZED(341.880), (vec4(injectionSwitch[1], 1.0, 1.0, 0.0))[2], (vec4(injectionSwitch[1], 1.0, 1.0, 0.0))[3]), vec4(_GLF_FUZZED(-718.083), (vec4(injectionSwitch[1], 1.0, 1.0, 0.0))[1], _GLF_FUZZED(-3.4), _GLF_FUZZED((- 368.625))), bvec4(false, true, false, false)))), float(_GLF_IDENTITY(vec4(injectionSwitch[1], 1.0, 1.0, 0.0), mix(vec4((vec4(injectionSwitch[1], 1.0, 1.0, 0.0))[0], _GLF_FUZZED(341.880), (vec4(injectionSwitch[1], 1.0, 1.0, 0.0))[2], (vec4(injectionSwitch[1], 1.0, 1.0, 0.0))[3]), vec4(_GLF_FUZZED(-718.083), (vec4(injectionSwitch[1], 1.0, 1.0, 0.0))[1], _GLF_FUZZED(-3.4), _GLF_FUZZED((- 368.625))), bvec4(false, true, false, false)))))))) - 0.0), mix(float(_GLF_FUZZED((-7.5 - 506.133))), float(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch[1], (injectionSwitch[1]) - 0.0), float(mat2x3(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch[1], clamp(_GLF_IDENTITY(injectionSwitch[1], min(injectionSwitch[1], injectionSwitch[1])), injectionSwitch[1], injectionSwitch[1])), (injectionSwitch[1]) - 0.0), 0.0, 1.0, 0.0, 0.0, 0.0)))), bool(true))), _GLF_IDENTITY(injectionSwitch[1], (injectionSwitch[1]) - 0.0))))))).x > injectionSwitch.y)))))))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          barrier();
         barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
          barrier();
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            barrier();
          }
        }
       do
        {
         for(int _injected_loop_counter = _GLF_IDENTITY((0 | 0), ((0 | _GLF_IDENTITY(0, (0) | int(_GLF_ZERO(0.0, injectionSwitch.x))))) | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))
              barrier();
            }
           else
            {
            }
          }
         do
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true))
              {
               for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(7), int(7))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                {
                 barrier();
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if(_GLF_DEAD(false))
                barrier();
              }
            }
           else
            {
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 & -8830)); _injected_loop_counter --)
              {
               _GLF_IDENTITY(buf[virtual_gid] = 1, 0u | (buf[virtual_gid] = 1));
               if(_GLF_DEAD(false))
                barrier();
              }
             for(int _injected_loop_counter = (0 ^ 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 >> _GLF_IDENTITY(int(4), int(4)))); _injected_loop_counter --)
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
                barrier();
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)))) && true)))
        barrier();
       do
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
            {
             barrier();
            }
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, float(vec2(injectionSwitch.x, 0.0))) < injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = (1 & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
              {
               barrier();
              }
            }
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(_GLF_IDENTITY(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), bvec2(bvec4(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), true, true)))))))
            barrier();
          }
         else
          {
          }
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != (_GLF_IDENTITY(0, (0) ^ 0) >> _GLF_IDENTITY(int(4), int(4))), (_injected_loop_counter != (_GLF_IDENTITY(0, (0) ^ 0) >> _GLF_IDENTITY(int(4), int(4)))) && true)); _injected_loop_counter --)
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               barrier();
              }
             else
              {
              }
            }
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             if(_GLF_DEAD(false))
              barrier();
            }
           else
            {
            }
          }
         do
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, 1.0 * (injectionSwitch.y))) - 0.0)))))
                barrier();
              }
             else
              {
               do
                {
                 barrier();
                 if(_GLF_DEAD(false))
                  barrier();
                }
               while(_GLF_WRAPPED_LOOP(false));
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bvec2(false, true)))));
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, false || (true))))
            {
             barrier();
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                barrier();
               do
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   barrier();
                  }
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != (81384 & 0)), bool(bvec4(_GLF_WRAPPED_LOOP(_injected_loop_counter != (81384 & 0)), false, false, false))); _injected_loop_counter --)
                  {
                   barrier();
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                }
               while(_GLF_WRAPPED_LOOP(false));
               if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
                barrier();
              }
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
            }
           else
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)), injectionSwitch)).y))))
                barrier();
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 barrier();
                }
               else
                {
                 if(_GLF_DEAD(false))
                  barrier();
                }
              }
            }
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
            barrier();
           if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) || false), (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true), (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) || _GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, bool(bvec3(false, false, false)))))), (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-2895.3846)), float(injectionSwitch.x), bool(true))) > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true)) && true))
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
              }
             else
              {
               barrier();
               for(int _injected_loop_counter = int(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), (_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), (_GLF_ZERO(0.0, injectionSwitch.x)) + 0.0)) + 0.0)); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), ~ (~ (int(6)))))) >> _GLF_IDENTITY(int(6), int(6)))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), ~ (~ (int(6)))))) >> _GLF_IDENTITY(int(6), int(6)))), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), ~ (~ (int(6)))))) >> _GLF_IDENTITY(int(6), int(6)))))))), false || (! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), ~ (~ (int(6)))))) >> _GLF_IDENTITY(int(6), int(6)))), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), ~ (~ (int(6)))))) >> _GLF_IDENTITY(int(6), int(6)))))))))))); _injected_loop_counter ++)
                {
                 if(_GLF_DEAD(false))
                  {
                   do
                    {
                     barrier();
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                  }
                }
               if(_GLF_DEAD(false))
                barrier();
              }
            }
           if(_GLF_DEAD(false))
            barrier();
           do
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
              barrier();
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) || false)));
          }
         if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY((_GLF_IDENTITY(true, ! (! (true)))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY((_GLF_IDENTITY(true, ! (! (true)))), bool(bvec2((_GLF_IDENTITY(true, ! (! (true)))), true))))) || false)))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               barrier();
              }
             if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
          }
         do
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(_GLF_IDENTITY(mat3x4(injectionSwitch, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0), mat4(1.0) * (mat3x4(injectionSwitch, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0)))), clamp(vec2(_GLF_IDENTITY(mat3x4(injectionSwitch, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0), mat4(1.0) * (mat3x4(injectionSwitch, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0)))), _GLF_IDENTITY(vec2(_GLF_IDENTITY(mat3x4(injectionSwitch, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0), mat4(1.0) * (mat3x4(injectionSwitch, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0)))), vec2(0.0, 0.0) + (vec2(_GLF_IDENTITY(mat3x4(injectionSwitch, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0), mat4(1.0) * (mat3x4(injectionSwitch, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0)))))), vec2(_GLF_IDENTITY(mat3x4(injectionSwitch, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0), mat4(1.0) * (mat3x4(injectionSwitch, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0))))))).y))))
                barrier();
               barrier();
              }
             else
              {
              }
            }
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, false, true)))))
            barrier();
           for(int _injected_loop_counter = (1 & 1); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != 0, false || (_injected_loop_counter != 0))); _injected_loop_counter --)
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(bvec4(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, false, true))))))))
                {
                 barrier();
                }
               else
                {
                 if(_GLF_DEAD(false))
                  barrier();
                }
               if(_GLF_DEAD(false))
                barrier();
              }
             if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
              {
               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   barrier();
                  }
                 else
                  {
                  }
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))
                barrier();
               if(_GLF_DEAD(false))
                barrier();
              }
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), (! ((injectionSwitch.x > injectionSwitch.y))) && true))))), (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / _GLF_IDENTITY(1.0, mix(float(_GLF_IDENTITY(1.0, min(1.0, 1.0))), float(_GLF_FUZZED(125.428)), bool(false))))), float(_GLF_FUZZED(82.77)), bool(false))))))))));
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       barrier();
      }
    }
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), ! (! (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 do
  {
   do
    {
     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false || (_GLF_TRUE(_GLF_IDENTITY(true, (true) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), (injectionSwitch.x < injectionSwitch.y))))), ! (! (_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], (injectionSwitch[0]) * determinant(mat4(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0))), injectionSwitch[1])).y)), false || (_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y)))))))))
      {
       do
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           for(int _injected_loop_counter = int(_GLF_IDENTITY(_GLF_ZERO(0.0, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x, min(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x))), 0.0 + (_GLF_ZERO(0.0, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x, min(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x)))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
           if(_GLF_DEAD(false))
            barrier();
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         else
          {
          }
        }
      }
     else
      {
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
   for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) << 0)) | int(_GLF_ZERO(0.0, injectionSwitch.x))) != (0 | 1)); _injected_loop_counter ++)
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-81.64)), float(injectionSwitch.y), bool(true))), injectionSwitch.y))))))
          barrier();
         atomicStore(buf[_GLF_IDENTITY(_GLF_IDENTITY(next_virtual_gid, (next_virtual_gid) << 0u), min(next_virtual_gid, _GLF_IDENTITY(next_virtual_gid, (next_virtual_gid) | (next_virtual_gid))))], uint(2), _GLF_IDENTITY(4, 0 ^ (_GLF_IDENTITY(4, max(4, 4)))), 64, 4);
        }
       else
        {
        }
      }
     else
      {
      }
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
        barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       barrier();
      }
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! _GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), true && (! ((false)))))))))))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (true)))))
    {
     do
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     else
      {
      }
    }
   else
    {
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(false, true && (false)) || _GLF_IDENTITY((false), bool(bool((false)))))))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       barrier();
      }
     else
      {
      }
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, ! (! (false))), true))))))))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     for(int _injected_loop_counter = (_GLF_IDENTITY(0 >> _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), max(int(1), int(1)))), int(ivec4(0 >> _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), max(int(1), int(1)))), 0, 0, (0 ^ 1))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         barrier();
        }
      }
    }
  }
 else
  {
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
