#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bool(false)))))
  {
  }
 else
  {
   for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), 1 * (_GLF_IDENTITY(int(7), min(int(7), int(7))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(1, min(1, 1))); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(1, (1) - int(_GLF_ZERO(0.0, injectionSwitch.x)))); _injected_loop_counter ++)
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_DEAD(false))
          break;
         if(_GLF_DEAD(false))
          break;
        }
       else
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, true)), true && (bool(bvec2(false, true))))), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, true)), true && (bool(bvec2(false, true))))), true, false, true)), bool(bvec4(bool(bvec4(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, true)), true && (bool(bvec2(false, true))))), true, false, true)), true, true, true))))))
            {
             if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), _GLF_IDENTITY(bool(bool(_GLF_WRAPPED_IF_TRUE(true))), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(bool(bool(_GLF_WRAPPED_IF_TRUE(true))), (bool(bool(_GLF_WRAPPED_IF_TRUE(true)))) || false), false)), ! (! (bool(bvec2(_GLF_IDENTITY(bool(bool(_GLF_WRAPPED_IF_TRUE(true))), (bool(bool(_GLF_WRAPPED_IF_TRUE(true)))) || false), false))))))))
              {
               do
                {
                 return;
                }
               while(_GLF_WRAPPED_LOOP(false));
               if(_GLF_DEAD(false))
                continue;
              }
             else
              {
              }
            }
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
            {
             if(_GLF_DEAD(false))
              {
               do
                {
                 return;
                 if(_GLF_DEAD(false))
                  continue;
                }
               while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true)), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true)), (bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true))) || false))), (bool(bool(_GLF_IDENTITY(bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true)), (bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true))) || false)))) && true)))));
              }
             if(_GLF_DEAD(false))
              return;
            }
           do
            {
             do
              {
               if(_GLF_DEAD(false))
                return;
               if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || _GLF_IDENTITY(false, ! (! (false)))))
                return;
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))));
            }
           while(_GLF_WRAPPED_LOOP(false));
           if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
            break;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
           if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), ! (! (_GLF_WRAPPED_IF_FALSE(false))))))))
            {
            }
           else
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               if(_GLF_DEAD(false))
                return;
               if(_GLF_DEAD(false))
                {
                 if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY((false), ((false)) && true) && true), (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), min(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))), injectionSwitch)).y, (true ? _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), min(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), _GLF_IDENTITY(vec2(_GLF_IDENTITY(mat2x3(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(vec3(injectionSwitch, 1.0)))) + abs(vec2(0.0, 0.0))), injectionSwitch)), 1.0, 0.0, 0.0, 0.0), mat2x3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0) + (mat2x3(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), 1.0, 0.0, 0.0, _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-5.0)), float(0.0), bool(true))))))), (vec2(_GLF_IDENTITY(mat2x3(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), 1.0, _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(3.1) : _GLF_IDENTITY(0.0, clamp(0.0, _GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-8.0)), bool(false))), 0.0)))), 0.0, 0.0), mat2x3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0) + (mat2x3(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), 1.0, 0.0, 0.0, 0.0))))) - vec2(0.0, 0.0)))) + vec2(0.0, 0.0)), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), mix(vec2((_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))[0], (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch))) * mat2(1.0)))[1]), vec2(_GLF_FUZZED(4.4), _GLF_FUZZED(73.47)), bvec2(false, false))))), injectionSwitch)).y : _GLF_FUZZED(245.519))))) || (_GLF_DEAD(false))))
                  {
                   if(_GLF_DEAD(false))
                    {
                     do
                      {
                       if(_GLF_DEAD(false))
                        {
                         if(_GLF_WRAPPED_IF_TRUE(true))
                          {
                           return;
                          }
                         else
                          {
                          }
                        }
                      }
                     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), true && (! (false)))))));
                     if(_GLF_WRAPPED_IF_TRUE(true))
                      {
                       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 & _GLF_IDENTITY(65279, min(65279, 65279)))); _injected_loop_counter --)
                        {
                         return;
                        }
                       if(_GLF_DEAD(false))
                        break;
                       if(_GLF_DEAD(false))
                        break;
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        {
                         for(int _injected_loop_counter = 1; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))), true && (_GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), (int(_GLF_ZERO(0.0, injectionSwitch.x))) ^ 0)))); _injected_loop_counter --)
                          {
                           return;
                          }
                         if(_GLF_DEAD(false))
                          return;
                        }
                      }
                     else
                      {
                       if(_GLF_DEAD(false))
                        {
                         if(_GLF_WRAPPED_IF_FALSE(false))
                          {
                          }
                         else
                          {
                           for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < (0 ^ 1), (_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter < (0 ^ 1), (_injected_loop_counter < (0 ^ 1)) && true), bool(bvec4(_injected_loop_counter < (0 ^ 1), false, false, true)))) || false)); _injected_loop_counter ++)
                            {
                             return;
                            }
                          }
                        }
                       if(_GLF_DEAD(false))
                        break;
                       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + 0.0), _GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x)), injectionSwitch.x)) > injectionSwitch.y)), false), bvec3(bvec4(bvec3(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false), true))))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[_GLF_IDENTITY(0, min(0, 0))], injectionSwitch[1])).y))))
                        return;
                       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (injectionSwitch.x > injectionSwitch.y))))
                        continue;
                      }
                     if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
                      return;
                    }
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     if(_GLF_DEAD(false))
                      return;
                     if(_GLF_DEAD(false))
                      break;
                    }
                   else
                    {
                    }
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    return;
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), bool(bvec3(_GLF_IDENTITY(! (true), false || (! (true))), false, false)))))))
                      {
                       return;
                      }
                     else
                      {
                      }
                     if(_GLF_DEAD(false))
                      return;
                    }
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     return;
                    }
                  }
                 if(_GLF_DEAD(false))
                  continue;
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                   if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bool(_GLF_DEAD(false))), ! (! (bool(bool(_GLF_DEAD(false))))))))
                    return;
                   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
                    {
                    }
                   else
                    {
                     return;
                    }
                  }
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  continue;
                 return;
                }
              }
             else
              {
               if(_GLF_DEAD(false))
                break;
               if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, 1.0 * (_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-1.6)), float(injectionSwitch.y), bool(true))))))), false || (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) > injectionSwitch.y))))))))
                return;
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              continue;
            }
           if(_GLF_DEAD(false))
            continue;
           do
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, false || (false))))
              {
              }
             else
              {
               if(_GLF_DEAD(false))
                return;
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
       if(_GLF_DEAD(false))
        continue;
      }
     else
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(true && (false), bool(bool(true && (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec2(false, true))), bool(bool(false))))))))))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), ! (! (! (true)))))), (injectionSwitch.x < injectionSwitch.y))))
          {
           return;
          }
         else
          {
          }
        }
       if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false)))))
        {
         do
          {
           return;
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
     if(_GLF_DEAD(false))
      return;
    }
  }
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(false))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         return;
        }
       return;
       if(_GLF_DEAD(false))
        return;
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(71.78) : _GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-5.6)), bool(false))))) > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || _GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (injectionSwitch.x > injectionSwitch.y)))))
    {
     if(_GLF_DEAD(false))
      return;
     do
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          break;
        }
       else
        {
         return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))
          {
           if(_GLF_DEAD(false))
            return;
           return;
          }
         else
          {
          }
         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, false, true)))))
          return;
        }
       else
        {
        }
      }
     return;
     if(_GLF_DEAD(false))
      return;
    }
   return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bvec2(true, _GLF_IDENTITY(true, bool(bvec4(true, true, false, false))))))))
  {
   do
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, false, true)))))
        continue;
      }
     for(int _injected_loop_counter = 1; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != (_GLF_IDENTITY((0 & 47056) << _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), (false ? _GLF_FUZZED(56987) : int(7)))), 0 ^ ((0 & 47056) << _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), _GLF_IDENTITY((false ? _GLF_FUZZED(56987) : int(7)), ((false ? _GLF_FUZZED(56987) : int(7))) | ((false ? _GLF_FUZZED(56987) : int(7)))))))))), (_GLF_WRAPPED_LOOP(_injected_loop_counter != (_GLF_IDENTITY((_GLF_IDENTITY(0 & 47056, (0 & 47056) << 0)), min((_GLF_IDENTITY(0 & 47056, (0 & 47056) << 0)), (_GLF_IDENTITY(0 & 47056, (0 & 47056) << 0)))) << _GLF_IDENTITY(int(7), _GLF_IDENTITY(_GLF_IDENTITY(int(7), (int(7)) | _GLF_IDENTITY(0, (0) >> 0)), (false ? _GLF_FUZZED(56987) : int(7))))))) && true); _injected_loop_counter --)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(bvec3((injectionSwitch.x > injectionSwitch.y), false, false)), ! (! (bool(bvec3((injectionSwitch.x > injectionSwitch.y), false, false))))))))))))
        break;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          break;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], max(injectionSwitch[1], injectionSwitch[1])))).y))))
          continue;
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
          }
         else
          {
           do
            {
             return;
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
          }
         for(int _injected_loop_counter = _GLF_IDENTITY(1, (1) << 0); _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(min(injectionSwitch.y, injectionSwitch.y), _GLF_IDENTITY(float(float(min(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y, injectionSwitch.y))), float(mat4x3(_GLF_IDENTITY(float(float(min(injectionSwitch.y, injectionSwitch.y))), (float(float(min(injectionSwitch.y, injectionSwitch.y)))) - 0.0), 1.0, 1.0, 1.0, 0.0, exp(0.0), 0.0, 0.0, 1.0, 1.0, 1.0, 1.0))))), _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(743.937) : _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)))), _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(_GLF_IDENTITY(vec2(_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(360.651) : injectionSwitch.y)), 0.0), mix(vec2((vec2(_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(360.651) : injectionSwitch.y)), 0.0))[0], _GLF_FUZZED(-6175.2241)), vec2(_GLF_FUZZED(-3.5), (vec2(_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(360.651) : injectionSwitch.y)), 0.0))[1]), bvec2(false, true)))), float(mat3x2(float(_GLF_IDENTITY(vec2(_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(360.651) : injectionSwitch.y)), 0.0), mix(vec2((vec2(_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(360.651) : injectionSwitch.y)), 0.0))[0], _GLF_FUZZED(-6175.2241)), vec2(_GLF_FUZZED(-3.5), (vec2(_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(360.651) : injectionSwitch.y)), 0.0))[1]), bvec2(false, true)))), 0.0, log(1.0), 1.0, 1.0, 0.0)))))), injectionSwitch.y))))))
            return;
          }
         if(_GLF_DEAD(false))
          break;
        }
       if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
        return;
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
            {
             return;
            }
          }
         if(_GLF_DEAD(false))
          return;
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)))
        return;
       if(_GLF_DEAD(false))
        break;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, determinant(mat3(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0)) + (injectionSwitch.x)) > injectionSwitch.y))))
        break;
       break;
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 else
  {
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   do
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          break;
         return;
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).y, clamp(injectionSwitch.y, injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0), injectionSwitch.y))))))))
      return;
    }
  }
 else
  {
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_IDENTITY((injectionSwitch)[0], max(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1]))), (true ? _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1]))), clamp((_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1]))), _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1]))), max((_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1]))), (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1]))))), _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1]))), mix(vec2(_GLF_FUZZED(4110.6552), _GLF_FUZZED(-68.91)), vec2(((_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1]))))[0], ((_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1]))))[1]), bvec2(true, true))))) : _GLF_FUZZED(injectionSwitch)))[0], _GLF_IDENTITY((injectionSwitch)[0], _GLF_IDENTITY((_GLF_IDENTITY((injectionSwitch)[0], clamp((injectionSwitch)[0], (injectionSwitch)[0], (injectionSwitch)[0]))) / 1.0, ((_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])))[0], clamp((_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))[0], (injectionSwitch)[0], (injectionSwitch)[0]))) / 1.0) / 1.0)))), _GLF_FUZZED(-654.785)), vec2(_GLF_FUZZED((_GLF_IDENTITY(321.785 + -86.00, 0.0 + (321.785 + -86.00)))), (injectionSwitch)[_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, ~ (~ _GLF_IDENTITY((1), 0 | ((1)))))) | (1))) | (0 | _GLF_IDENTITY(0, (0) | 0)))]), bvec2(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y)), true))).y))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, true, true)))))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
   do
    {
     for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), (false ? _GLF_FUZZED(22776) : int(1))))); _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2))), 0 ^ (((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2)))))); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        return;
      }
     if(_GLF_DEAD(false))
      break;
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)), bool(bvec4(bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)), false, false, true)))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)), bool(bvec4(bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)), false, false, true))))), ! (! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)), bool(bvec4(bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)), false, false, true))))))))))));
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          return;
        }
       return;
      }
    }
   else
    {
     return;
     for(int _injected_loop_counter = (_GLF_IDENTITY(0, clamp(0, 0, 0)) >> _GLF_IDENTITY(int(0), int(0))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != 1, ! (! (_injected_loop_counter != 1)))); _injected_loop_counter ++)
      {
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bool(bvec2(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(_GLF_IDENTITY(vec2(injectionSwitch.y, length(vec3(0.0, 0.0, 0.0))), max(vec2(injectionSwitch.y, length(vec3(0.0, 0.0, 0.0))), vec2(injectionSwitch.y, length(vec3(0.0, 0.0, 0.0))))))))), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false, false)))), true)), bool(bvec4(bool(bvec2(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true)), false, false, false)))))
        return;
      }
    }
   if(_GLF_DEAD(false))
    {
     do
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) && true)))
  return;
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
  }
 else
  {
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(2293.7227), _GLF_FUZZED(-85.13)), bvec2(false, false))))).x > injectionSwitch.y)))))))
    return;
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec4(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))), ! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bool(bvec2(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true)), ! (! (bool(bvec2(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true))))))))), _GLF_IDENTITY(false, true && (false)), true, _GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))), true, _GLF_TRUE(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, false || (true))), (! (_GLF_IDENTITY(true, false || (true)))) || false))), _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), _GLF_IDENTITY(bool(bvec2((injectionSwitch.x < injectionSwitch.y), true)), true && (bool(bvec2((injectionSwitch.x < injectionSwitch.y), true))))))), bvec3(bvec4(bvec3(_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))), ! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))))), true, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), (true ? (injectionSwitch) * mat2(1.0) : _GLF_FUZZED(cosh(vec2(5527.1072, -9.9)))))).x < injectionSwitch.y))), _GLF_IDENTITY(false, false || (false))))))))))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), (injectionSwitch.x) * _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(996.163)), float(1.0), bool(true)))) > injectionSwitch.y)), false, _GLF_IDENTITY(true, true && (true)), true)))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), max(int(4), int(4))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
          {
           for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
            {
             if(_GLF_DEAD(false))
              continue;
             return;
            }
           if(_GLF_DEAD(false))
            break;
          }
        }
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       do
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).y), ! (! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).y)))))))
            {
             if(_GLF_DEAD(false))
              return;
             if(_GLF_DEAD(false))
              break;
             return;
            }
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             return;
            }
           else
            {
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
       return;
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = _GLF_IDENTITY(1, max(1, _GLF_IDENTITY(1, clamp(1, 1, 1)))); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((0 << _GLF_IDENTITY(int(7), int(7))) | 0)); _injected_loop_counter --)
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           do
            {
             return;
            }
           while(_GLF_WRAPPED_LOOP(false));
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              return;
            }
           else
            {
            }
          }
        }
       if(_GLF_DEAD(false))
        return;
      }
    }
   else
    {
    }
  }
 if(_GLF_DEAD(false))
  {
   do
    {
     return;
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
   if(_GLF_DEAD(false))
    return;
  }
 uint workgroup_size = _GLF_IDENTITY(gl_WorkGroupSize, (_GLF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || false)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(uvec3(169908u, 6913u, 180224u)) : gl_WorkGroupSize)).x;
 uint workgroup_id = _GLF_IDENTITY(gl_WorkGroupID, max(gl_WorkGroupID, gl_WorkGroupID)).x;
 uint workgroup_base = workgroup_size * workgroup_id;
 if(_GLF_DEAD(false))
  return;
 uint virtual_gid = _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, clamp(_GLF_IDENTITY(workgroup_base, uint(_GLF_IDENTITY(uvec4(workgroup_base, 1u, 0u, 1u), (uvec4(workgroup_base, 1u, 0u, 1u)) << uvec4(0u, 0u, 0u, 0u)))), workgroup_base, workgroup_base)) + subgroup_id * subgroup_size + _GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, ~ (~ (subgroup_local_id))), (_GLF_IDENTITY(subgroup_local_id, clamp(subgroup_local_id, subgroup_local_id, subgroup_local_id))) >> (_GLF_IDENTITY((0u | 0u), ((0u | 0u)) | (0u >> _GLF_IDENTITY(uint(7u), uint(7u)))) << _GLF_IDENTITY(uint(5u), _GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(5u, (5u) - 0u)), clamp(_GLF_IDENTITY(uint(5u), min(uint(5u), uint(5u))), uint(5u), uint(5u))), min(_GLF_IDENTITY(_GLF_IDENTITY(uint(5u), clamp(_GLF_IDENTITY(uint(5u), min(uint(5u), uint(5u))), uint(5u), uint(5u))), (_GLF_IDENTITY(uint(5u), clamp(_GLF_IDENTITY(uint(_GLF_IDENTITY(5u, min(_GLF_IDENTITY(5u, uint(uint(5u))), 5u))), min(uint(5u), uint(5u))), uint(5u), uint(5u)))) / 1u), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uint(5u), (false ? _GLF_FUZZED(num_workgroup) : _GLF_IDENTITY(uint(5u), ~ (_GLF_IDENTITY(~ (uint(5u)), ~ (~ (~ (uint(5u))))))))), clamp(_GLF_IDENTITY(uint(5u), min(uint(5u), uint(5u))), uint(5u), uint(5u))), (true ? _GLF_IDENTITY(uint(_GLF_IDENTITY(5u, clamp(5u, _GLF_IDENTITY(5u, (5u) + 0u), 5u))), clamp(_GLF_IDENTITY(uint(5u), min(uint(5u), uint(5u))), uint(5u), uint(5u))) : _GLF_FUZZED((130448u * 100383u))))))))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size + _GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, clamp(_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, uint(uvec2(subgroup_local_id, (0u | 1u))))) ^ (0u >> _GLF_IDENTITY(uint(1u), uint(_GLF_IDENTITY(1u, clamp(1u, 1u, 1u)))))), subgroup_local_id, subgroup_local_id))) >> ((_GLF_IDENTITY(0u | 0u, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(_GLF_IDENTITY(0u | 0u, min(0u | 0u, 0u | 0u)), min(_GLF_IDENTITY(_GLF_IDENTITY(0u | 0u, min(0u | 0u, 0u | 0u)), (_GLF_IDENTITY(_GLF_IDENTITY(0u | 0u, min(0u | 0u, 0u | 0u)), (_GLF_IDENTITY(0u | 0u, min(0u | 0u, 0u | 0u))) ^ 0u)) << 0u), _GLF_IDENTITY(0u | 0u, min(0u | 0u, 0u | 0u)))) : _GLF_FUZZED(133707u)))) << _GLF_IDENTITY(uint(5u), uint(5u)))), min(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, min(_GLF_IDENTITY(workgroup_base, max(_GLF_IDENTITY(workgroup_base, ~ (~ (workgroup_base))), workgroup_base)), workgroup_base)), (_GLF_IDENTITY(workgroup_base, min(_GLF_IDENTITY(workgroup_base, max(workgroup_base, workgroup_base)), workgroup_base))) / 1u) + subgroup_id * _GLF_IDENTITY(subgroup_size, max(_GLF_IDENTITY(subgroup_size, (true ? _GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size)) : _GLF_FUZZED(subgroup_id))), _GLF_IDENTITY(subgroup_size, (subgroup_size) ^ (0u | 0u)))) + _GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, clamp(subgroup_local_id, subgroup_local_id, subgroup_local_id))) >> ((0u | 0u) << _GLF_IDENTITY(uint(_GLF_IDENTITY(5u, clamp(5u, 5u, 5u))), uint(5u)))), _GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, 0u ^ (workgroup_base + subgroup_id * subgroup_size)) + _GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, clamp(subgroup_local_id, subgroup_local_id, subgroup_local_id))) >> ((0u | 0u) << _GLF_IDENTITY(_GLF_IDENTITY(uint(5u), ~ (~ (uint(5u)))), _GLF_IDENTITY(_GLF_IDENTITY(uint(5u), (_GLF_IDENTITY(uint(5u), 0u ^ (_GLF_IDENTITY(uint(5u), uint(uvec2(uint(5u), 0u)))))) | (uint(5u))), clamp(_GLF_IDENTITY(uint(5u), (_GLF_IDENTITY(uint(5u), 0u ^ (_GLF_IDENTITY(uint(5u), uint(uvec2(uint(5u), 0u)))))) | (uint(5u))), _GLF_IDENTITY(_GLF_IDENTITY(uint(5u), (_GLF_IDENTITY(uint(5u), 0u ^ (_GLF_IDENTITY(uint(5u), uint(uvec2(uint(5u), 0u)))))) | (uint(5u))), (_GLF_IDENTITY(uint(5u), (_GLF_IDENTITY(uint(5u), 0u ^ (_GLF_IDENTITY(uint(5u), uint(uvec2(uint(5u), 0u)))))) | (uint(5u)))) | 0u), _GLF_IDENTITY(uint(5u), (_GLF_IDENTITY(uint(5u), 0u ^ (_GLF_IDENTITY(uint(5u), uint(uvec2(uint(5u), 0u)))))) | (uint(5u))))))))))), ((_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size + _GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, clamp(_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, uint(uvec2(subgroup_local_id, (0u | 1u))))) ^ (0u >> _GLF_IDENTITY(uint(1u), uint(_GLF_IDENTITY(1u, clamp(1u, 1u, 1u)))))), subgroup_local_id, subgroup_local_id))) >> ((_GLF_IDENTITY(0u | 0u, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(0u | 0u, min(0u | 0u, 0u | 0u)) : _GLF_FUZZED(133707u)))) << _GLF_IDENTITY(uint(5u), uint(5u)))), min(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, min(_GLF_IDENTITY(workgroup_base, max(_GLF_IDENTITY(workgroup_base, ~ (~ (workgroup_base))), workgroup_base)), workgroup_base)), (_GLF_IDENTITY(workgroup_base, min(_GLF_IDENTITY(workgroup_base, max(workgroup_base, workgroup_base)), workgroup_base))) / 1u) + subgroup_id * _GLF_IDENTITY(subgroup_size, max(_GLF_IDENTITY(subgroup_size, (true ? _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size))) ^ 0u), min(subgroup_size, subgroup_size)) : _GLF_FUZZED(subgroup_id))), _GLF_IDENTITY(subgroup_size, (subgroup_size) ^ (0u | 0u)))) + _GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, clamp(subgroup_local_id, subgroup_local_id, subgroup_local_id))) >> ((0u | 0u) << _GLF_IDENTITY(uint(5u), uint(5u))), ((_GLF_IDENTITY(subgroup_local_id, clamp(subgroup_local_id, subgroup_local_id, subgroup_local_id))) >> ((0u | 0u) << _GLF_IDENTITY(uint(5u), uint(5u)))) << 0u)), workgroup_base + _GLF_IDENTITY(subgroup_id * subgroup_size, max(subgroup_id * subgroup_size, subgroup_id * subgroup_size)) + _GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, clamp(subgroup_local_id, subgroup_local_id, subgroup_local_id))) >> ((0u | 0u) << _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uint(5u), 1u * (uint(5u))), ~ (~ (uint(5u)))), _GLF_IDENTITY(uint(5u), (_GLF_IDENTITY(uint(5u), 0u ^ (_GLF_IDENTITY(_GLF_IDENTITY(uint(5u), (false ? _GLF_FUZZED(workgroup_base) : uint(5u))), uint(uvec2(uint(5u), 0u)))))) | (uint(5u)))))))))) | uint(_GLF_ZERO(0.0, injectionSwitch.x))), (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size + _GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, clamp(_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, uint(uvec2(subgroup_local_id, (0u | 1u))))) ^ (0u >> _GLF_IDENTITY(uint(1u), uint(_GLF_IDENTITY(1u, clamp(1u, 1u, 1u)))))), subgroup_local_id, subgroup_local_id))) >> ((_GLF_IDENTITY(0u | 0u, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(_GLF_IDENTITY(0u | 0u, min(0u | 0u, 0u | 0u)), min(_GLF_IDENTITY(_GLF_IDENTITY(0u | 0u, min(0u | 0u, 0u | 0u)), (_GLF_IDENTITY(_GLF_IDENTITY(0u | 0u, min(0u | 0u, 0u | 0u)), (_GLF_IDENTITY(0u | 0u, min(0u | 0u, 0u | 0u))) ^ 0u)) << 0u), _GLF_IDENTITY(0u | 0u, min(0u | 0u, 0u | 0u)))) : _GLF_FUZZED(133707u)))) << _GLF_IDENTITY(uint(5u), uint(5u)))), (workgroup_base + subgroup_id * subgroup_size + _GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, clamp(_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, uint(uvec2(subgroup_local_id, (0u | 1u))))) ^ (0u >> _GLF_IDENTITY(uint(1u), uint(_GLF_IDENTITY(1u, clamp(1u, 1u, 1u)))))), subgroup_local_id, subgroup_local_id))) >> ((_GLF_IDENTITY(0u | 0u, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(_GLF_IDENTITY(0u | 0u, min(0u | 0u, 0u | 0u)), min(_GLF_IDENTITY(_GLF_IDENTITY(0u | 0u, min(0u | 0u, 0u | 0u)), (_GLF_IDENTITY(_GLF_IDENTITY(0u | 0u, min(0u | 0u, 0u | 0u)), (_GLF_IDENTITY(0u | 0u, min(0u | 0u, 0u | 0u))) ^ 0u)) << 0u), _GLF_IDENTITY(0u | 0u, min(0u | 0u, 0u | 0u)))) : _GLF_FUZZED(133707u)))) << _GLF_IDENTITY(uint(5u), uint(5u))))) | (workgroup_base + subgroup_id * subgroup_size + _GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, clamp(_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, uint(uvec2(subgroup_local_id, (0u | 1u))))) ^ (0u >> _GLF_IDENTITY(uint(1u), uint(_GLF_IDENTITY(1u, clamp(1u, 1u, 1u)))))), subgroup_local_id, subgroup_local_id))) >> ((_GLF_IDENTITY(0u | 0u, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(_GLF_IDENTITY(0u | 0u, min(0u | 0u, 0u | 0u)), min(_GLF_IDENTITY(_GLF_IDENTITY(0u | 0u, min(0u | 0u, 0u | 0u)), (_GLF_IDENTITY(_GLF_IDENTITY(0u | 0u, min(0u | 0u, 0u | 0u)), (_GLF_IDENTITY(0u | 0u, min(0u | 0u, 0u | 0u))) ^ 0u)) << 0u), _GLF_IDENTITY(0u | 0u, min(0u | 0u, 0u | 0u)))) : _GLF_FUZZED(133707u)))) << _GLF_IDENTITY(uint(5u), uint(5u)))))), min(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, min(_GLF_IDENTITY(workgroup_base, max(_GLF_IDENTITY(workgroup_base, ~ (~ (workgroup_base))), workgroup_base)), workgroup_base)), (_GLF_IDENTITY(workgroup_base, min(_GLF_IDENTITY(workgroup_base, max(workgroup_base, workgroup_base)), workgroup_base))) / 1u) + subgroup_id * _GLF_IDENTITY(subgroup_size, max(_GLF_IDENTITY(subgroup_size, (true ? _GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size)) : _GLF_IDENTITY(_GLF_FUZZED(subgroup_id), (_GLF_FUZZED(subgroup_id)) | (_GLF_IDENTITY(_GLF_FUZZED(subgroup_id), min(_GLF_FUZZED(subgroup_id), _GLF_FUZZED(subgroup_id))))))), _GLF_IDENTITY(subgroup_size, (subgroup_size) ^ (0u | 0u)))) + _GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, clamp(subgroup_local_id, subgroup_local_id, subgroup_local_id))) >> ((_GLF_IDENTITY(0u | 0u, max(0u | 0u, 0u | 0u))) << _GLF_IDENTITY(uint(_GLF_IDENTITY(5u, clamp(5u, 5u, 5u))), uint(5u)))), _GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, 0u ^ (workgroup_base + _GLF_IDENTITY(subgroup_id, _GLF_IDENTITY(uint(uvec4(subgroup_id, 1u, ((0u << _GLF_IDENTITY(uint(2u), uint(2u))) ^ 0u), 1u)), (uint(uvec4(subgroup_id, 1u, ((0u << _GLF_IDENTITY(uint(2u), uint(2u))) ^ 0u), 1u))) | (uint(uvec4(subgroup_id, 1u, ((0u << _GLF_IDENTITY(uint(2u), uint(2u))) ^ 0u), 1u))))) * subgroup_size)) + _GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, clamp(subgroup_local_id, subgroup_local_id, subgroup_local_id))) >> ((0u | 0u) << _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uint(5u), ~ (~ (uint(5u)))), (false ? _GLF_FUZZED(subgroup_id) : _GLF_IDENTITY(uint(5u), ~ (~ (uint(5u)))))), _GLF_IDENTITY(_GLF_IDENTITY(uint(5u), (_GLF_IDENTITY(uint(5u), 0u ^ (_GLF_IDENTITY(uint(5u), uint(uvec2(uint(5u), 0u)))))) | (uint(5u))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(uint(5u), (_GLF_IDENTITY(uint(5u), 0u ^ (_GLF_IDENTITY(uint(5u), uint(uvec2(uint(5u), 0u)))))) | (uint(5u))), 0u ^ (_GLF_IDENTITY(_GLF_IDENTITY(uint(5u), (_GLF_IDENTITY(uint(5u), 0u ^ (_GLF_IDENTITY(uint(5u), uint(uvec2(uint(5u), 0u)))))) | (uint(5u))), max(_GLF_IDENTITY(uint(5u), (_GLF_IDENTITY(uint(5u), 0u ^ (_GLF_IDENTITY(uint(5u), uint(uvec2(uint(5u), 0u)))))) | (uint(5u))), _GLF_IDENTITY(uint(5u), (_GLF_IDENTITY(uint(5u), 0u ^ (_GLF_IDENTITY(uint(5u), uint(uvec2(uint(5u), 0u)))))) | (uint(5u))))))), _GLF_IDENTITY(_GLF_IDENTITY(uint(5u), (_GLF_IDENTITY(uint(5u), 0u ^ (_GLF_IDENTITY(uint(5u), uint(uvec2(uint(5u), 0u)))))) | (uint(5u))), (_GLF_IDENTITY(uint(5u), (_GLF_IDENTITY(uint(5u), 0u ^ (_GLF_IDENTITY(uint(5u), uint(uvec2(uint(5u), 0u)))))) | (uint(5u)))) | 0u), _GLF_IDENTITY(uint(5u), (_GLF_IDENTITY(uint(5u), 0u ^ (_GLF_IDENTITY(uint(5u), uint(uvec2(uint(5u), 0u)))))) | (uint(5u))))))))))), ((_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size + _GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, clamp(_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, uint(uvec2(subgroup_local_id, (0u | 1u))))) ^ (0u >> _GLF_IDENTITY(uint(1u), uint(_GLF_IDENTITY(1u, clamp(1u, 1u, 1u)))))), subgroup_local_id, subgroup_local_id))) >> ((_GLF_IDENTITY(0u | 0u, (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(bvec3(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, false)))))) ? _GLF_IDENTITY(0u | 0u, min(0u | 0u, 0u | 0u)) : _GLF_FUZZED(133707u)))) << _GLF_IDENTITY(uint(5u), uint(5u)))), min(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, min(_GLF_IDENTITY(workgroup_base, max(_GLF_IDENTITY(workgroup_base, ~ (~ (workgroup_base))), workgroup_base)), workgroup_base)), (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, (workgroup_base) << 0u), min(_GLF_IDENTITY(workgroup_base, max(workgroup_base, workgroup_base)), workgroup_base))) / 1u) + subgroup_id * _GLF_IDENTITY(subgroup_size, max(_GLF_IDENTITY(subgroup_size, (true ? _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, max(_GLF_IDENTITY(subgroup_size, (subgroup_size) - 0u), subgroup_size)), (_GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size))) ^ 0u), min(subgroup_size, subgroup_size)) : _GLF_FUZZED(subgroup_id))), _GLF_IDENTITY(subgroup_size, (subgroup_size) ^ (0u | 0u)))) + _GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, clamp(subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) / 1u), subgroup_local_id))) >> ((0u | 0u) << _GLF_IDENTITY(uint(5u), uint(5u))), ((_GLF_IDENTITY(subgroup_local_id, clamp(subgroup_local_id, subgroup_local_id, subgroup_local_id))) >> ((0u | 0u) << _GLF_IDENTITY(uint(5u), uint(5u)))) << 0u)), workgroup_base + _GLF_IDENTITY(subgroup_id * subgroup_size, max(subgroup_id * subgroup_size, subgroup_id * subgroup_size)) + _GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, clamp(subgroup_local_id, subgroup_local_id, subgroup_local_id))) >> (_GLF_IDENTITY((0u | 0u) << _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uint(5u), 1u * (uint(5u))), ~ (~ (uint(5u)))), _GLF_IDENTITY(uint(5u), (_GLF_IDENTITY(uint(5u), 0u ^ (_GLF_IDENTITY(_GLF_IDENTITY(uint(5u), (false ? _GLF_FUZZED(workgroup_base) : uint(5u))), uint(uvec2(uint(5u), 0u)))))) | (uint(5u)))), clamp((0u | 0u) << _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uint(5u), 1u * (uint(5u))), ~ (~ (uint(5u)))), _GLF_IDENTITY(uint(5u), (_GLF_IDENTITY(uint(5u), 0u ^ (_GLF_IDENTITY(_GLF_IDENTITY(uint(5u), (false ? _GLF_FUZZED(workgroup_base) : uint(5u))), uint(uvec2(uint(5u), 0u)))))) | (uint(5u)))), (0u | 0u) << _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uint(5u), 1u * (uint(5u))), ~ (~ (uint(5u)))), _GLF_IDENTITY(uint(5u), (_GLF_IDENTITY(uint(5u), 0u ^ (_GLF_IDENTITY(_GLF_IDENTITY(uint(5u), (false ? _GLF_FUZZED(workgroup_base) : uint(5u))), uint(uvec2(uint(5u), 0u)))))) | (uint(5u)))), (0u | 0u) << _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uint(5u), 1u * (uint(5u))), ~ (~ (uint(5u)))), _GLF_IDENTITY(uint(5u), (_GLF_IDENTITY(uint(5u), 0u ^ (_GLF_IDENTITY(_GLF_IDENTITY(uint(5u), (false ? _GLF_FUZZED(workgroup_base) : uint(5u))), uint(uvec2(uint(5u), 0u)))))) | (uint(5u)))))))))))) | uint(_GLF_ZERO(0.0, injectionSwitch.x)))) - (0u >> _GLF_IDENTITY(uint(7u), _GLF_IDENTITY(uint(7u), 0u | (uint(7u)))))), (false ? _GLF_FUZZED(workgroup_base) : _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size + _GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, clamp(_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, uint(uvec2(subgroup_local_id, (0u | 1u))))) ^ (0u >> _GLF_IDENTITY(uint(1u), uint(_GLF_IDENTITY(1u, clamp(1u, 1u, 1u)))))), subgroup_local_id, subgroup_local_id))) >> ((_GLF_IDENTITY(_GLF_IDENTITY(0u | 0u, _GLF_IDENTITY(uint(uvec4(0u | 0u, 0u, 1u, 0u)), (uint(uvec4(0u | 0u, 0u, 1u, 0u))) | (_GLF_IDENTITY(uint(uvec4(0u | 0u, 0u, 1u, 0u)), min(uint(uvec4(0u | 0u, 0u, 1u, 0u)), uint(uvec4(0u | 0u, 0u, 1u, 0u))))))), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(_GLF_IDENTITY(0u | 0u, min(0u | 0u, 0u | _GLF_IDENTITY(0u, (0u) << 0u))), min(_GLF_IDENTITY(_GLF_IDENTITY(0u | 0u, min(0u | 0u, 0u | 0u)), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(0u | 0u, min(0u | 0u, 0u | 0u)), (_GLF_IDENTITY(0u | 0u, min(0u | 0u, 0u | 0u))) ^ 0u)) << 0u, min(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(0u | 0u, min(0u | 0u, 0u | 0u)), (_GLF_IDENTITY(0u | 0u, min(0u | 0u, 0u | 0u))) ^ 0u)) << 0u, ((_GLF_IDENTITY(_GLF_IDENTITY(0u | 0u, min(0u | 0u, 0u | 0u)), (_GLF_IDENTITY(0u | 0u, min(0u | 0u, 0u | 0u))) ^ 0u)) << 0u) / 1u), (_GLF_IDENTITY(_GLF_IDENTITY(0u | 0u, min(0u | 0u, 0u | 0u)), (_GLF_IDENTITY(0u | 0u, min(0u | 0u, 0u | 0u))) ^ 0u)) << 0u))), _GLF_IDENTITY(0u | 0u, min(0u | 0u, 0u | 0u)))) : _GLF_FUZZED(133707u)))) << _GLF_IDENTITY(uint(_GLF_IDENTITY(5u, (5u) | 0u)), _GLF_IDENTITY(uint(5u), (_GLF_IDENTITY(uint(5u), 0u ^ (uint(5u)))) << 0u)))), min(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, min(_GLF_IDENTITY(workgroup_base, max(_GLF_IDENTITY(workgroup_base, ~ (~ (workgroup_base))), workgroup_base)), workgroup_base)), (_GLF_IDENTITY(workgroup_base, min(_GLF_IDENTITY(workgroup_base, max(workgroup_base, workgroup_base)), workgroup_base))) / 1u) + subgroup_id * _GLF_IDENTITY(subgroup_size, max(_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((true ? _GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size)) : _GLF_FUZZED(subgroup_id)), 0u ^ ((true ? _GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size)) : _GLF_FUZZED(subgroup_id))))), _GLF_IDENTITY(subgroup_size, (subgroup_size) ^ (0u | 0u)))) + _GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, clamp(subgroup_local_id, subgroup_local_id, subgroup_local_id))) >> ((0u | 0u) << _GLF_IDENTITY(uint(_GLF_IDENTITY(5u, clamp(5u, 5u, 5u))), uint(5u)))), _GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, _GLF_IDENTITY(0u ^ (workgroup_base + subgroup_id * subgroup_size), uint(_GLF_IDENTITY(uvec4(0u ^ (workgroup_base + subgroup_id * subgroup_size), 0u, 0u, 1u), (uvec4(0u ^ (workgroup_base + subgroup_id * subgroup_size), 0u, 0u, 1u)) | (uvec4(0u ^ (workgroup_base + subgroup_id * subgroup_size), 0u, 0u, 1u)))))) + _GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, max(subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, uint(uvec4(subgroup_local_id, 0u, 0u, 1u))))), (_GLF_IDENTITY(subgroup_local_id, clamp(subgroup_local_id, subgroup_local_id, subgroup_local_id))) >> ((0u | 0u) << _GLF_IDENTITY(_GLF_IDENTITY(uint(5u), ~ (~ (uint(5u)))), _GLF_IDENTITY(_GLF_IDENTITY(uint(5u), (_GLF_IDENTITY(uint(5u), 0u ^ (_GLF_IDENTITY(uint(5u), uint(uvec2(uint(5u), 0u)))))) | (uint(5u))), clamp(_GLF_IDENTITY(uint(5u), (_GLF_IDENTITY(uint(5u), 0u ^ (_GLF_IDENTITY(uint(5u), uint(uvec2(uint(5u), 0u)))))) | (uint(5u))), _GLF_IDENTITY(_GLF_IDENTITY(uint(5u), (_GLF_IDENTITY(uint(5u), 0u ^ (_GLF_IDENTITY(uint(5u), uint(uvec2(uint(5u), 0u)))))) | (uint(5u))), (_GLF_IDENTITY(uint(5u), (_GLF_IDENTITY(uint(5u), 0u ^ (_GLF_IDENTITY(uint(_GLF_IDENTITY(5u, (5u) >> 0u)), uint(uvec2(uint(5u), 0u)))))) | (uint(5u)))) | 0u), _GLF_IDENTITY(uint(5u), (_GLF_IDENTITY(uint(5u), 0u ^ (_GLF_IDENTITY(uint(5u), uint(uvec2(uint(5u), 0u)))))) | (uint(5u))))))))))), ((_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size + _GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, clamp(_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, uint(uvec2(subgroup_local_id, (0u | 1u)))), (_GLF_IDENTITY(subgroup_local_id, uint(uvec2(subgroup_local_id, (0u | 1u))))) | (_GLF_IDENTITY(subgroup_local_id, uint(uvec2(subgroup_local_id, (0u | 1u))))))) ^ (0u >> _GLF_IDENTITY(uint(1u), uint(_GLF_IDENTITY(1u, clamp(1u, 1u, 1u)))))), subgroup_local_id, subgroup_local_id))) >> ((_GLF_IDENTITY(0u | 0u, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(0u | 0u, min(0u | 0u, 0u | 0u)) : _GLF_FUZZED(133707u)))) << _GLF_IDENTITY(uint(5u), uint(5u)))), min(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, _GLF_IDENTITY(min(_GLF_IDENTITY(workgroup_base, max(_GLF_IDENTITY(workgroup_base, ~ (~ (workgroup_base))), workgroup_base)), workgroup_base), 0u | (min(_GLF_IDENTITY(workgroup_base, max(_GLF_IDENTITY(workgroup_base, ~ (~ (workgroup_base))), workgroup_base)), workgroup_base)))), (_GLF_IDENTITY(workgroup_base, min(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, 0u ^ (workgroup_base)), max(workgroup_base, workgroup_base)), workgroup_base))) / 1u) + subgroup_id * _GLF_IDENTITY(subgroup_size, max(_GLF_IDENTITY(subgroup_size, (true ? _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size))) ^ 0u), min(subgroup_size, subgroup_size)) : _GLF_FUZZED(subgroup_id))), _GLF_IDENTITY(subgroup_size, (subgroup_size) ^ (0u | 0u)))) + _GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, clamp(subgroup_local_id, subgroup_local_id, subgroup_local_id))) >> ((0u | 0u) << _GLF_IDENTITY(uint(5u), uint(5u))), ((_GLF_IDENTITY(subgroup_local_id, clamp(subgroup_local_id, subgroup_local_id, subgroup_local_id))) >> ((0u | 0u) << _GLF_IDENTITY(uint(5u), uint(5u)))) << 0u)), workgroup_base + _GLF_IDENTITY(subgroup_id * subgroup_size, max(subgroup_id * subgroup_size, subgroup_id * subgroup_size)) + _GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, clamp(subgroup_local_id, subgroup_local_id, subgroup_local_id))) >> ((0u | 0u) << _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uint(5u), 1u * (uint(5u))), ~ (~ (uint(5u)))), _GLF_IDENTITY(uint(5u), (_GLF_IDENTITY(uint(5u), 0u ^ (_GLF_IDENTITY(_GLF_IDENTITY(uint(5u), (false ? _GLF_FUZZED(workgroup_base) : uint(5u))), uint(uvec2(uint(5u), 0u)))))) | (uint(5u)))))))))) | uint(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x))))), (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size + _GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) >> 0u), (_GLF_IDENTITY(subgroup_local_id, clamp(_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, uint(uvec2(subgroup_local_id, (_GLF_IDENTITY(0u | 1u, (false ? _GLF_FUZZED(workgroup_size) : 0u | 1u))))))) ^ (0u >> _GLF_IDENTITY(uint(1u), uint(_GLF_IDENTITY(1u, clamp(1u, 1u, 1u)))))), subgroup_local_id, subgroup_local_id))) >> ((_GLF_IDENTITY(0u | 0u, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(_GLF_IDENTITY(0u | 0u, min(0u | 0u, 0u | 0u)), min(_GLF_IDENTITY(_GLF_IDENTITY(0u | 0u, min(0u | 0u, 0u | 0u)), (_GLF_IDENTITY(_GLF_IDENTITY(0u | _GLF_IDENTITY(0u, min(_GLF_IDENTITY(0u, _GLF_IDENTITY(uint(uvec4(0u, 0u, 1u, 0u)), (uint(uvec4(0u, 0u, 1u, 0u))) | (uint(uvec4(0u, 0u, 1u, 0u))))), _GLF_IDENTITY(0u, (0u) | (0u)))), min(0u | 0u, 0u | 0u)), (_GLF_IDENTITY(_GLF_IDENTITY(0u | 0u, min(0u | 0u, _GLF_IDENTITY(0u | 0u, (0u | 0u) << 0u))), min(0u | 0u, 0u | 0u))) ^ 0u)) << 0u), _GLF_IDENTITY(0u | 0u, min(0u | 0u, 0u | 0u)))) : _GLF_FUZZED(133707u)))) << _GLF_IDENTITY(uint(5u), uint(5u)))), (workgroup_base + subgroup_id * subgroup_size + _GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, clamp(_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, uint(uvec2(subgroup_local_id, (0u | 1u))))) ^ (0u >> _GLF_IDENTITY(uint(1u), uint(_GLF_IDENTITY(1u, clamp(_GLF_IDENTITY(1u, (0u << _GLF_IDENTITY(uint(6u), uint(6u))) + (1u)), 1u, 1u)))))), subgroup_local_id, subgroup_local_id))) >> ((_GLF_IDENTITY(_GLF_IDENTITY(0u | 0u, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(_GLF_IDENTITY(0u | 0u, min(0u | 0u, 0u | 0u)), min(_GLF_IDENTITY(_GLF_IDENTITY(0u | 0u, min(0u | 0u, 0u | 0u)), (_GLF_IDENTITY(_GLF_IDENTITY(0u | 0u, min(0u | 0u, 0u | 0u)), (_GLF_IDENTITY(0u | 0u, min(0u | 0u, 0u | 0u))) ^ 0u)) << 0u), _GLF_IDENTITY(0u | 0u, min(0u | 0u, 0u | 0u)))) : _GLF_FUZZED(133707u))), 1u * (_GLF_IDENTITY(0u | 0u, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(_GLF_IDENTITY(0u | 0u, min(0u | 0u, 0u | 0u)), min(_GLF_IDENTITY(_GLF_IDENTITY(0u | 0u, min(0u | 0u, 0u | 0u)), (_GLF_IDENTITY(_GLF_IDENTITY(0u | _GLF_IDENTITY(0u, max(_GLF_IDENTITY(0u, (false ? _GLF_FUZZED(workgroup_base) : 0u)), 0u)), min(0u | 0u, 0u | 0u)), (_GLF_IDENTITY(0u | 0u, min(0u | 0u, 0u | 0u))) ^ 0u)) << 0u), _GLF_IDENTITY(0u | 0u, min(_GLF_IDENTITY(0u | 0u, max(_GLF_IDENTITY(0u | 0u, min(0u | 0u, _GLF_IDENTITY(0u | 0u, min(0u | 0u, 0u | 0u)))), 0u | 0u)), 0u | 0u)))) : _GLF_FUZZED(133707u)))))) << _GLF_IDENTITY(uint(5u), uint(5u))))) | (workgroup_base + subgroup_id * subgroup_size + _GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, clamp(_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, uint(uvec2(subgroup_local_id, (0u | _GLF_IDENTITY(1u, uint(uint(1u)))))))) ^ (0u >> _GLF_IDENTITY(uint(1u), uint(_GLF_IDENTITY(_GLF_IDENTITY(1u, (1u) / 1u), clamp(1u, 1u, 1u)))))), subgroup_local_id, subgroup_local_id))) >> ((_GLF_IDENTITY(0u | 0u, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(_GLF_IDENTITY(0u | _GLF_IDENTITY(0u, clamp(0u, _GLF_IDENTITY(0u, (0u) / uint(_GLF_ONE(1.0, injectionSwitch.y))), 0u)), min(0u | 0u, 0u | 0u)), min(_GLF_IDENTITY(_GLF_IDENTITY(0u | 0u, min(0u | 0u, 0u | 0u)), (_GLF_IDENTITY(_GLF_IDENTITY(0u | 0u, min(0u | 0u, 0u | 0u)), (_GLF_IDENTITY(0u | 0u, min(0u | 0u, 0u | 0u))) ^ 0u)) << 0u), _GLF_IDENTITY(0u | 0u, min(0u | 0u, 0u | 0u)))) : _GLF_FUZZED(133707u)))) << _GLF_IDENTITY(uint(5u), uint(5u)))))), min(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, min(_GLF_IDENTITY(workgroup_base, max(_GLF_IDENTITY(workgroup_base, ~ (~ (workgroup_base))), workgroup_base)), workgroup_base)), (_GLF_IDENTITY(workgroup_base, min(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, max(workgroup_base, workgroup_base)), 0u + (_GLF_IDENTITY(workgroup_base, max(workgroup_base, workgroup_base)))), workgroup_base))) / 1u) + subgroup_id * _GLF_IDENTITY(subgroup_size, max(_GLF_IDENTITY(subgroup_size, (true ? _GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size)) : _GLF_IDENTITY(_GLF_FUZZED(subgroup_id), (_GLF_FUZZED(subgroup_id)) | (_GLF_IDENTITY(_GLF_FUZZED(subgroup_id), min(_GLF_FUZZED(subgroup_id), _GLF_FUZZED(subgroup_id))))))), _GLF_IDENTITY(subgroup_size, (subgroup_size) ^ (0u | 0u)))) + _GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, clamp(subgroup_local_id, subgroup_local_id, subgroup_local_id))) >> ((_GLF_IDENTITY(0u | 0u, max(0u | 0u, 0u | 0u))) << _GLF_IDENTITY(uint(_GLF_IDENTITY(5u, clamp(5u, 5u, 5u))), uint(5u)))), _GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, 0u ^ (workgroup_base + _GLF_IDENTITY(subgroup_id, _GLF_IDENTITY(uint(uvec4(subgroup_id, 1u, ((0u << _GLF_IDENTITY(uint(2u), uint(2u))) ^ 0u), 1u)), (uint(uvec4(subgroup_id, 1u, ((0u << _GLF_IDENTITY(uint(2u), uint(2u))) ^ 0u), 1u))) | (uint(uvec4(subgroup_id, 1u, ((0u << _GLF_IDENTITY(uint(2u), uint(2u))) ^ 0u), 1u))))) * subgroup_size)) + _GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, clamp(subgroup_local_id, subgroup_local_id, subgroup_local_id))) >> ((0u | 0u) << _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uint(5u), ~ (~ (uint(5u)))), (false ? _GLF_FUZZED(subgroup_id) : _GLF_IDENTITY(uint(5u), ~ (~ (uint(5u)))))), _GLF_IDENTITY(_GLF_IDENTITY(uint(5u), (_GLF_IDENTITY(uint(5u), 0u ^ (_GLF_IDENTITY(uint(5u), uint(uvec2(uint(5u), 0u)))))) | (uint(5u))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(uint(5u), (_GLF_IDENTITY(uint(5u), 0u ^ (_GLF_IDENTITY(uint(5u), uint(uvec2(uint(5u), 0u)))))) | (uint(5u))), 0u ^ (_GLF_IDENTITY(_GLF_IDENTITY(uint(5u), (_GLF_IDENTITY(uint(5u), 0u ^ (_GLF_IDENTITY(uint(5u), uint(uvec2(uint(5u), 0u)))))) | (uint(5u))), max(_GLF_IDENTITY(uint(5u), (_GLF_IDENTITY(uint(5u), 0u ^ (_GLF_IDENTITY(uint(5u), uint(uvec2(uint(5u), 0u)))))) | (uint(5u))), _GLF_IDENTITY(uint(5u), (_GLF_IDENTITY(uint(5u), 0u ^ (_GLF_IDENTITY(uint(5u), uint(uvec2(uint(5u), 0u)))))) | (uint(5u))))))), _GLF_IDENTITY(_GLF_IDENTITY(uint(5u), (_GLF_IDENTITY(uint(5u), 0u ^ (_GLF_IDENTITY(uint(5u), uint(uvec2(uint(5u), 0u)))))) | (uint(5u))), (_GLF_IDENTITY(uint(5u), (_GLF_IDENTITY(uint(5u), 0u ^ (_GLF_IDENTITY(uint(5u), uint(uvec2(uint(5u), 0u)))))) | (uint(5u)))) | 0u), _GLF_IDENTITY(uint(5u), (_GLF_IDENTITY(uint(5u), 0u ^ (_GLF_IDENTITY(uint(5u), uint(uvec2(uint(5u), 0u)))))) | (uint(5u))))))), ((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, clamp(subgroup_local_id, subgroup_local_id, subgroup_local_id)), (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, clamp(subgroup_local_id, subgroup_local_id, subgroup_local_id)), (_GLF_IDENTITY(subgroup_local_id, clamp(subgroup_local_id, subgroup_local_id, subgroup_local_id))) | (_GLF_IDENTITY(subgroup_local_id, clamp(subgroup_local_id, subgroup_local_id, subgroup_local_id))))) << 0u)) >> ((0u | 0u) << _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uint(5u), ~ (_GLF_IDENTITY(~ (uint(5u)), (~ (uint(5u))) + 0u))), (false ? _GLF_FUZZED(subgroup_id) : _GLF_IDENTITY(uint(5u), ~ (~ (uint(5u)))))), _GLF_IDENTITY(_GLF_IDENTITY(uint(5u), (_GLF_IDENTITY(uint(5u), 0u ^ (_GLF_IDENTITY(uint(5u), uint(uvec2(uint(5u), 0u)))))) | (uint(5u))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(uint(5u), (_GLF_IDENTITY(_GLF_IDENTITY(uint(5u), 0u ^ (_GLF_IDENTITY(uint(5u), uint(uvec2(uint(5u), 0u))))), (_GLF_IDENTITY(uint(5u), 0u ^ (_GLF_IDENTITY(uint(5u), uint(uvec2(uint(5u), 0u)))))) | 0u)) | (uint(5u))), 0u ^ (_GLF_IDENTITY(_GLF_IDENTITY(uint(5u), (_GLF_IDENTITY(uint(5u), 0u ^ (_GLF_IDENTITY(uint(5u), uint(uvec2(uint(5u), 0u)))))) | (uint(5u))), max(_GLF_IDENTITY(uint(5u), (_GLF_IDENTITY(uint(5u), 0u ^ (_GLF_IDENTITY(uint(5u), uint(uvec2(uint(5u), 0u)))))) | (uint(_GLF_IDENTITY(5u, 0u | (5u))))), _GLF_IDENTITY(uint(5u), (_GLF_IDENTITY(uint(5u), 0u ^ (_GLF_IDENTITY(uint(5u), uint(uvec2(uint(5u), 0u)))))) | (uint(5u))))))), _GLF_IDENTITY(_GLF_IDENTITY(uint(5u), (_GLF_IDENTITY(uint(5u), 0u ^ (_GLF_IDENTITY(uint(5u), uint(uvec2(uint(5u), 0u)))))) | (uint(5u))), (_GLF_IDENTITY(uint(5u), (_GLF_IDENTITY(uint(5u), 0u ^ (_GLF_IDENTITY(uint(5u), uint(uvec2(uint(5u), 0u)))))) | (uint(5u)))) | _GLF_IDENTITY(0u, 0u ^ (0u))), _GLF_IDENTITY(uint(5u), (_GLF_IDENTITY(uint(5u), 0u ^ (_GLF_IDENTITY(uint(5u), uint(uvec2(uint(5u), 0u)))))) | (uint(5u)))))))) - 0u))))), ((_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size + _GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, clamp(_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, uint(uvec2(subgroup_local_id, (0u | 1u))))) ^ (_GLF_IDENTITY(0u, min(0u, _GLF_IDENTITY(0u, clamp(0u, 0u, _GLF_IDENTITY(0u, (0u) + 0u))))) >> _GLF_IDENTITY(uint(1u), uint(_GLF_IDENTITY(1u, clamp(1u, 1u, 1u)))))), subgroup_local_id, subgroup_local_id))) >> ((_GLF_IDENTITY(0u | 0u, (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(bvec3(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, false)))))) ? _GLF_IDENTITY(0u | 0u, min(0u | 0u, 0u | 0u)) : _GLF_FUZZED(133707u)))) << _GLF_IDENTITY(uint(5u), uint(5u)))), min(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, min(_GLF_IDENTITY(workgroup_base, max(_GLF_IDENTITY(workgroup_base, ~ (~ (workgroup_base))), workgroup_base)), workgroup_base)), (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, (_GLF_IDENTITY(workgroup_base, clamp(workgroup_base, _GLF_IDENTITY(workgroup_base, (workgroup_base) - 0u), _GLF_IDENTITY(workgroup_base, uint(uvec3(_GLF_IDENTITY(workgroup_base, (workgroup_base) / 1u), 0u, 0u)))))) << 0u), min(_GLF_IDENTITY(workgroup_base, max(workgroup_base, workgroup_base)), workgroup_base))) / 1u) + subgroup_id * _GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(max(_GLF_IDENTITY(subgroup_size, (true ? _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, max(_GLF_IDENTITY(subgroup_size, (subgroup_size) - 0u), subgroup_size)), (_GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size))) ^ 0u), min(subgroup_size, subgroup_size)) : _GLF_FUZZED(subgroup_id))), _GLF_IDENTITY(subgroup_size, (subgroup_size) ^ (0u | 0u))), clamp(max(_GLF_IDENTITY(subgroup_size, (true ? _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, max(_GLF_IDENTITY(subgroup_size, (subgroup_size) - 0u), subgroup_size)), (_GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size))) ^ 0u), min(subgroup_size, subgroup_size)) : _GLF_FUZZED(subgroup_id))), _GLF_IDENTITY(subgroup_size, (subgroup_size) ^ (0u | 0u))), max(_GLF_IDENTITY(subgroup_size, (true ? _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, max(_GLF_IDENTITY(subgroup_size, (subgroup_size) - 0u), subgroup_size)), (_GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size))) ^ 0u), min(subgroup_size, subgroup_size)) : _GLF_FUZZED(subgroup_id))), _GLF_IDENTITY(subgroup_size, (subgroup_size) ^ (0u | 0u))), max(_GLF_IDENTITY(subgroup_size, (true ? _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, max(_GLF_IDENTITY(subgroup_size, (subgroup_size) - 0u), subgroup_size)), (_GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size))) ^ 0u), min(subgroup_size, subgroup_size)) : _GLF_FUZZED(subgroup_id))), _GLF_IDENTITY(subgroup_size, (subgroup_size) ^ (0u | 0u)))))) + _GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, clamp(subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) / 1u), subgroup_local_id))), ((_GLF_IDENTITY(subgroup_local_id, clamp(subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) / 1u), subgroup_local_id)))) ^ 0u) >> ((0u | 0u) << _GLF_IDENTITY(_GLF_IDENTITY(uint(5u), min(uint(5u), uint(5u))), uint(5u))), ((_GLF_IDENTITY(subgroup_local_id, clamp(subgroup_local_id, subgroup_local_id, subgroup_local_id))) >> ((0u | 0u) << _GLF_IDENTITY(uint(5u), uint(5u)))) << 0u)), workgroup_base + _GLF_IDENTITY(subgroup_id * subgroup_size, max(subgroup_id * subgroup_size, subgroup_id * subgroup_size)) + _GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, clamp(subgroup_local_id, subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, max(_GLF_IDENTITY(subgroup_local_id, 1u * (subgroup_local_id)), _GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, subgroup_local_id))))))) >> (_GLF_IDENTITY((0u | _GLF_IDENTITY(0u, (0u) << 0u)) << _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uint(5u), 1u * (uint(5u))), ~ (~ (uint(5u)))), _GLF_IDENTITY(uint(_GLF_IDENTITY(5u, max(5u, 5u))), (_GLF_IDENTITY(uint(5u), 0u ^ (_GLF_IDENTITY(_GLF_IDENTITY(uint(5u), (false ? _GLF_FUZZED(workgroup_base) : _GLF_IDENTITY(uint(5u), (uint(5u)) + 0u))), uint(uvec2(uint(5u), 0u)))))) | (uint(5u)))), clamp((0u | 0u) << _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uint(5u), 1u * (uint(5u))), ~ (~ (uint(5u)))), _GLF_IDENTITY(uint(5u), (_GLF_IDENTITY(uint(5u), 0u ^ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uint(5u), (false ? _GLF_FUZZED(workgroup_base) : uint(5u))), uint(uvec2(_GLF_IDENTITY(uint(5u), (false ? _GLF_FUZZED(workgroup_base) : uint(5u))), 0u))), uint(uvec2(uint(5u), 0u)))))) | (uint(5u)))), (0u | 0u) << _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uint(5u), 1u * (uint(5u))), ~ (~ (uint(5u)))), _GLF_IDENTITY(uint(_GLF_IDENTITY(5u, (true ? _GLF_IDENTITY(5u, (5u) / 1u) : _GLF_FUZZED(subgroup_size)))), (_GLF_IDENTITY(uint(5u), 0u ^ (_GLF_IDENTITY(_GLF_IDENTITY(uint(5u), (false ? _GLF_FUZZED(workgroup_base) : uint(5u))), uint(uvec2(uint(5u), 0u)))))) | (uint(5u)))), _GLF_IDENTITY((0u | 0u), uint(_GLF_ZERO(0.0, injectionSwitch.x)) | (_GLF_IDENTITY((0u | 0u), ((0u | 0u)) - 0u))) << _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uint(5u), 1u * (uint(5u))), ~ (~ (uint(5u)))), _GLF_IDENTITY(uint(5u), (_GLF_IDENTITY(_GLF_IDENTITY(uint(5u), max(uint(5u), _GLF_IDENTITY(uint(5u), (uint(5u)) | (uint(5u))))), 0u ^ (_GLF_IDENTITY(_GLF_IDENTITY(uint(5u), (false ? _GLF_FUZZED(workgroup_base) : uint(5u))), uint(uvec2(uint(5u), 0u)))))) | (_GLF_IDENTITY(uint(5u), (uint(5u)) | (uint(5u)))))))))))))) | uint(_GLF_ZERO(0.0, injectionSwitch.x)))) - (0u >> _GLF_IDENTITY(uint(7u), _GLF_IDENTITY(uint(7u), 0u | (uint(7u)))))))) | (_GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) / 1u) + _GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, clamp(subgroup_local_id, subgroup_local_id, subgroup_local_id))) >> (_GLF_IDENTITY((_GLF_IDENTITY(0u, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, uint(uvec4(0u, 1u, 1u, 1u)))) - 0u), (_GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, uint(uvec4(0u, 1u, 1u, 1u)))) - 0u)) ^ 0u)) - 0u, ((_GLF_IDENTITY(_GLF_IDENTITY(0u, max(_GLF_IDENTITY(0u, max(0u, 0u)), 0u)), (_GLF_IDENTITY(0u, uint(uvec4(0u, 1u, 1u, 1u)))) - 0u)) - _GLF_IDENTITY(0u, (0u) / 1u)) | ((_GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, uint(uvec4(0u, 1u, 1u, 1u)))) - 0u)) - 0u))) | 0u), ((_GLF_IDENTITY(0u | 0u, max(_GLF_IDENTITY(0u | 0u, (0u | 0u) | 0u), 0u | 0u)))) ^ 0u) << _GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(5u, max(5u, 5u))), uint(5u)), (true ? _GLF_IDENTITY(uint(5u), uint(5u)) : _GLF_IDENTITY(_GLF_FUZZED(workgroup_base), (_GLF_FUZZED(workgroup_base)) >> 0u)))), max(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(clamp(subgroup_local_id, subgroup_local_id, subgroup_local_id), (_GLF_IDENTITY(clamp(subgroup_local_id, subgroup_local_id, subgroup_local_id), 0u ^ (clamp(subgroup_local_id, subgroup_local_id, subgroup_local_id)))) >> 0u))) >> (_GLF_IDENTITY((_GLF_IDENTITY(0u | 0u, (_GLF_IDENTITY(0u | 0u, 0u + (_GLF_IDENTITY(0u | 0u, clamp(_GLF_IDENTITY(0u, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 0u : _GLF_FUZZED(workgroup_id))) | 0u, 0u | 0u, 0u | 0u))))) ^ _GLF_IDENTITY(0u, min(0u, 0u)))), ((0u | 0u)) ^ _GLF_IDENTITY(0u, max(0u, 0u))) << _GLF_IDENTITY(uint(5u), uint(5u))), ((_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(clamp(subgroup_local_id, subgroup_local_id, subgroup_local_id), (clamp(subgroup_local_id, subgroup_local_id, subgroup_local_id)) >> uint(_GLF_ZERO(0.0, injectionSwitch.x))))) >> (_GLF_IDENTITY((0u | 0u), ((0u | 0u)) ^ 0u) << _GLF_IDENTITY(uint(5u), uint(5u)))) - 0u), (_GLF_IDENTITY(subgroup_local_id, clamp(subgroup_local_id, subgroup_local_id, subgroup_local_id))) >> (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(0u, (0u) << (0u >> _GLF_IDENTITY(uint(3u), uint(3u)))) | 0u), (true ? (_GLF_IDENTITY(0u, (0u) << (0u >> _GLF_IDENTITY(uint(3u), uint(3u)))) | 0u) : _GLF_FUZZED(workgroup_size))), _GLF_IDENTITY(((_GLF_IDENTITY(0u | 0u, uint(uvec2(_GLF_IDENTITY(0u | 0u, (0u | 0u) | 0u), (1u & (_GLF_IDENTITY(0u | 1u, (0u & 159297u) ^ (0u | 1u))))))))), (((_GLF_IDENTITY(0u, uint(uint(_GLF_IDENTITY(0u, (0u) << 0u)))) | _GLF_IDENTITY(0u, min(0u, _GLF_IDENTITY(0u, min(0u, 0u))))))) << 0u) ^ 0u) << _GLF_IDENTITY(uint(5u), uint(5u)), 0u ^ (_GLF_IDENTITY((0u | 0u), _GLF_IDENTITY(((_GLF_IDENTITY(0u | 0u, uint(uvec2(_GLF_IDENTITY(0u | 0u, (_GLF_IDENTITY(0u | 0u, min(_GLF_IDENTITY(0u | 0u, uint(uvec3(0u | 0u, 0u, 0u))), 0u | 0u))) | 0u), (1u & (0u | 1u))))))), (((0u | 0u))) << 0u) ^ 0u) << _GLF_IDENTITY(uint(5u), uint(5u)))))))), (workgroup_base + _GLF_IDENTITY(subgroup_id, (subgroup_id) << 0u) * _GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, _GLF_IDENTITY(subgroup_size, 0u ^ (subgroup_size)), _GLF_IDENTITY(subgroup_size, max(subgroup_size, subgroup_size))))) * 1u) + _GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(clamp(subgroup_local_id, subgroup_local_id, subgroup_local_id), min(clamp(subgroup_local_id, subgroup_local_id, subgroup_local_id), _GLF_IDENTITY(clamp(subgroup_local_id, subgroup_local_id, subgroup_local_id), (clamp(subgroup_local_id, subgroup_local_id, subgroup_local_id)) / 1u))))) >> ((_GLF_IDENTITY(0u, min(_GLF_IDENTITY(0u, (0u) | (0u)), _GLF_IDENTITY(0u, (0u) ^ 0u))) | 0u) << _GLF_IDENTITY(_GLF_IDENTITY(uint(5u), min(_GLF_IDENTITY(uint(5u), (uint(5u)) - 0u), uint(5u))), uint(5u))))) >> uint(_GLF_ZERO(0.0, injectionSwitch.x)))));
 do
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), _GLF_IDENTITY(false, (false) || false) || (_GLF_IDENTITY(! (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), false || (bool(bool(false)))))), ! (! (_GLF_IDENTITY(! (false), bool(bool(! (false))))))))))))))))
    {
     if(_GLF_DEAD(false))
      break;
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       return;
      }
     else
      {
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 do
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), _GLF_IDENTITY(true && (_GLF_IDENTITY(false, true && (false))), bool(bvec2(true && (false), false))))), false || (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))))))))), _GLF_TRUE(true, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ! (! ((injectionSwitch.x < injectionSwitch.y)))), true && (_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), bool(bvec2(_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), bool(bvec4((injectionSwitch.x < injectionSwitch.y), false, false, true))), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).x < injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, bool(bvec2(injectionSwitch.x < injectionSwitch.y, true)))) || false), true, false)))))))))), false || (_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).y), ! (! ((injectionSwitch.x < injectionSwitch.y)))), true && (_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ! (! ((injectionSwitch.x < injectionSwitch.y)))), bool(bvec4((injectionSwitch.x < injectionSwitch.y), false, false, true))), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).x < injectionSwitch.y, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, bool(bvec2(injectionSwitch.x < injectionSwitch.y, true)))), bool(bvec4((_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, bool(bvec2(injectionSwitch.x < injectionSwitch.y, true)))), true, false, false))) || false), true, false))))))))))))), true, _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (injectionSwitch.x > injectionSwitch.y)))))))), false || (_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), _GLF_IDENTITY(true && (_GLF_IDENTITY(false, true && (false))), bool(bvec2(true && (false), false))))), false || (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))))))))), _GLF_TRUE(true, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ! (! ((injectionSwitch.x < injectionSwitch.y)))), true && (_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), bool(bvec2(_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), bool(bvec4((injectionSwitch.x < injectionSwitch.y), false, false, true))), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).x < injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, bool(bvec2(injectionSwitch.x < injectionSwitch.y, true)))) || false), true, false)))))))))), false || (_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).y), ! (! ((injectionSwitch.x < injectionSwitch.y)))), true && (_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ! (! ((injectionSwitch.x < injectionSwitch.y)))), bool(bvec4((injectionSwitch.x < injectionSwitch.y), false, false, true))), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).x < injectionSwitch.y, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, bool(bvec2(injectionSwitch.x < injectionSwitch.y, true)))), bool(bvec4((_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, bool(bvec2(injectionSwitch.x < injectionSwitch.y, true)))), true, false, false))) || false), true, false))))))))))))), true, _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (injectionSwitch.x > injectionSwitch.y)))))))), bool(bvec3(bool(bvec4(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), _GLF_IDENTITY(true && (_GLF_IDENTITY(false, true && (false))), bool(bvec2(true && (false), false))))), false || (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))))))))), _GLF_TRUE(true, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ! (! ((injectionSwitch.x < injectionSwitch.y)))), true && (_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), bool(bvec2(_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), bool(bvec4((injectionSwitch.x < injectionSwitch.y), false, false, true))), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).x < injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, bool(bvec2(injectionSwitch.x < injectionSwitch.y, true)))) || false), true, false)))))))))), false || (_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).y), ! (! ((injectionSwitch.x < injectionSwitch.y)))), true && (_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ! (! ((injectionSwitch.x < injectionSwitch.y)))), bool(bvec4((injectionSwitch.x < injectionSwitch.y), false, false, true))), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).x < injectionSwitch.y, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, bool(bvec2(injectionSwitch.x < injectionSwitch.y, true)))), bool(bvec4((_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, bool(bvec2(injectionSwitch.x < injectionSwitch.y, true)))), true, false, false))) || false), true, false))))))))))))), true, _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (injectionSwitch.x > injectionSwitch.y)))))))), true, true))))), ! (! (_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, true, false, false)), ! (! (bool(bvec4(false, true, false, false))))))), ! (! _GLF_IDENTITY((_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))), true, _GLF_IDENTITY(true, true && (true)), true)))))), bool(bvec2((_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false)))), false))))), _GLF_IDENTITY(_GLF_TRUE(_GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, (true) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) - vec2(0.0, 0.0), clamp((injectionSwitch) - vec2(0.0, 0.0), (injectionSwitch) - vec2(0.0, 0.0), _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch))) - vec2(0.0, 0.0), _GLF_IDENTITY(mat2(1.0) * ((injectionSwitch) - vec2(0.0, 0.0)), min(mat2(1.0) * ((injectionSwitch) - vec2(0.0, 0.0)), mat2(1.0) * ((injectionSwitch) - vec2(0.0, 0.0)))))))).y)), (_GLF_TRUE(_GLF_IDENTITY(true, false || (true)), (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) - vec2(0.0, 0.0), clamp((injectionSwitch) - vec2(0.0, 0.0), (injectionSwitch) - vec2(0.0, 0.0), _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch) - vec2(0.0, 0.0), _GLF_IDENTITY(mat2(1.0) * ((injectionSwitch) - vec2(0.0, 0.0)), _GLF_IDENTITY(min(mat2(1.0) * ((injectionSwitch) - vec2(0.0, 0.0)), mat2(1.0) * ((injectionSwitch) - vec2(0.0, 0.0))), min(min(mat2(1.0) * ((injectionSwitch) - vec2(0.0, 0.0)), mat2(1.0) * ((injectionSwitch) - vec2(0.0, 0.0))), min(mat2(1.0) * ((injectionSwitch) - vec2(0.0, 0.0)), mat2(1.0) * ((injectionSwitch) - vec2(0.0, 0.0))))))), clamp(_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch) - vec2(0.0, 0.0), _GLF_IDENTITY(mat2(1.0) * ((injectionSwitch) - vec2(0.0, 0.0)), _GLF_IDENTITY(min(mat2(1.0) * ((injectionSwitch) - vec2(0.0, 0.0)), mat2(1.0) * ((injectionSwitch) - vec2(0.0, 0.0))), min(min(mat2(1.0) * ((injectionSwitch) - vec2(0.0, 0.0)), mat2(1.0) * ((injectionSwitch) - vec2(0.0, 0.0))), min(mat2(1.0) * ((injectionSwitch) - vec2(0.0, 0.0)), mat2(1.0) * ((injectionSwitch) - vec2(0.0, 0.0))))))), max(_GLF_IDENTITY((injectionSwitch) - vec2(0.0, 0.0), _GLF_IDENTITY(mat2(1.0) * ((injectionSwitch) - vec2(0.0, 0.0)), _GLF_IDENTITY(min(mat2(1.0) * ((injectionSwitch) - vec2(0.0, 0.0)), mat2(1.0) * ((injectionSwitch) - vec2(0.0, 0.0))), min(min(mat2(1.0) * ((injectionSwitch) - vec2(0.0, 0.0)), mat2(1.0) * ((injectionSwitch) - vec2(0.0, 0.0))), min(mat2(1.0) * ((injectionSwitch) - vec2(0.0, 0.0)), mat2(1.0) * ((injectionSwitch) - vec2(0.0, 0.0))))))), _GLF_IDENTITY((injectionSwitch) - vec2(0.0, 0.0), _GLF_IDENTITY(mat2(1.0) * ((injectionSwitch) - vec2(0.0, 0.0)), _GLF_IDENTITY(min(mat2(1.0) * ((injectionSwitch) - vec2(0.0, 0.0)), mat2(1.0) * ((injectionSwitch) - vec2(0.0, 0.0))), min(min(mat2(1.0) * ((injectionSwitch) - vec2(0.0, 0.0)), mat2(1.0) * ((injectionSwitch) - vec2(0.0, 0.0))), min(mat2(1.0) * ((injectionSwitch) - vec2(0.0, 0.0)), mat2(1.0) * ((injectionSwitch) - vec2(0.0, 0.0))))))))), _GLF_IDENTITY((injectionSwitch) - vec2(0.0, 0.0), _GLF_IDENTITY(mat2(1.0) * ((injectionSwitch) - vec2(0.0, 0.0)), _GLF_IDENTITY(min(mat2(1.0) * ((injectionSwitch) - vec2(0.0, 0.0)), mat2(1.0) * ((injectionSwitch) - vec2(0.0, 0.0))), min(min(mat2(1.0) * ((injectionSwitch) - vec2(0.0, 0.0)), mat2(1.0) * ((injectionSwitch) - vec2(0.0, 0.0))), min(mat2(1.0) * ((injectionSwitch) - vec2(0.0, 0.0)), mat2(1.0) * ((injectionSwitch) - vec2(0.0, 0.0))))))), _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch) - vec2(0.0, 0.0), _GLF_IDENTITY(mat2(1.0) * ((injectionSwitch) - vec2(0.0, 0.0)), _GLF_IDENTITY(min(mat2(1.0) * ((injectionSwitch) - vec2(0.0, 0.0)), mat2(1.0) * ((injectionSwitch) - vec2(0.0, 0.0))), min(min(mat2(1.0) * ((injectionSwitch) - vec2(0.0, 0.0)), mat2(1.0) * ((injectionSwitch) - vec2(0.0, 0.0))), min(mat2(1.0) * ((injectionSwitch) - vec2(0.0, 0.0)), mat2(1.0) * ((injectionSwitch) - vec2(0.0, 0.0))))))), (_GLF_IDENTITY((injectionSwitch) - vec2(0.0, 0.0), _GLF_IDENTITY(mat2(1.0) * ((injectionSwitch) - vec2(0.0, 0.0)), _GLF_IDENTITY(min(mat2(1.0) * ((injectionSwitch) - vec2(0.0, 0.0)), mat2(1.0) * ((injectionSwitch) - vec2(0.0, 0.0))), min(min(mat2(1.0) * ((injectionSwitch) - vec2(0.0, 0.0)), mat2(1.0) * ((injectionSwitch) - vec2(0.0, 0.0))), min(mat2(1.0) * ((injectionSwitch) - vec2(0.0, 0.0)), mat2(1.0) * ((injectionSwitch) - vec2(0.0, 0.0)))))))) - vec2(0.0, 0.0))))))).y))) || false), true, _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), bool(bvec4(! (injectionSwitch.x > injectionSwitch.y), false, false, true))))))))), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false)))))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false)))))), false || (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) || false)))))))))))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-43.13)), bool(false)))))) * 1.0) > injectionSwitch.y)))), false || (_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))), ! (! _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false)))), ! (! ((_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false)))), ! (! ((_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false)))))))), bool(bvec4(! (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false)))), ! (! ((_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false)))))))), true, false, false))))))), _GLF_TRUE(true, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), mix(vec2(_GLF_FUZZED(vec2(7.5, -2.8).t), (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])))[1]), vec2((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), clamp(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1]))) * mat2(1.0), (false ? _GLF_FUZZED(vec2(-0.9, 98.35)) : (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1]))) * mat2(1.0)))), _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), (false ? _GLF_FUZZED(trunc(vec2(0.7, 2.0))) : _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])))))))[0], _GLF_FUZZED(77.46)), bvec2(true, false))).x < injectionSwitch.y)), true, _GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y)))))), (_GLF_IDENTITY(_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(false || (_GLF_DEAD(false)), bool(bvec4(false || (_GLF_DEAD(false)), false, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, vec2(mat3x4(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), determinant(mat3(1.0, _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0)), length(vec4(0.0, 0.0, 0.0, 0.0)), 0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, _GLF_IDENTITY(float(_GLF_IDENTITY(mat3(0.0, 1.0, 0.0, abs(1.0), 0.0, 1.0, 1.0, sqrt(_GLF_ONE(1.0, injectionSwitch.y)), round(length(normalize(vec2(1.0, 1.0))))), mat3(mat4x3(mat3(0.0, 1.0, 0.0, abs(1.0), 0.0, 1.0, 1.0, sqrt(_GLF_ONE(1.0, injectionSwitch.y)), round(length(normalize(vec2(1.0, 1.0))))))))), mix(float(float(_GLF_IDENTITY(mat3(0.0, 1.0, 0.0, abs(1.0), 0.0, 1.0, 1.0, sqrt(_GLF_ONE(1.0, injectionSwitch.y)), round(length(normalize(vec2(1.0, 1.0))))), mat3(mat4x3(mat3(0.0, 1.0, 0.0, abs(1.0), 0.0, 1.0, 1.0, sqrt(_GLF_ONE(1.0, injectionSwitch.y)), round(length(normalize(vec2(1.0, 1.0)))))))))), float(_GLF_FUZZED(-2.1)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), _GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, (1.0) + 0.0), 1.0, 1.0)), 0.0, 0.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)))))).x < injectionSwitch.y)), true, _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(false, true && (false)) || (! (injectionSwitch.x > injectionSwitch.y))))))))), ! (! (bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false)))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))))), bool(bvec4(_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))))), ! (! (! (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false)))))))))), true, false, true))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), bool(bvec4(_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(_GLF_IDENTITY(false, (false) || false))))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (! (bool(bvec4(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(false || (_GLF_DEAD(false)), (_GLF_IDENTITY(_GLF_IDENTITY(false || (_GLF_DEAD(false)), ! (! (false || (_GLF_DEAD(false))))), (false || (_GLF_DEAD(false))) || false)) && true))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y))))))), false, false, true)))) && true))), false)), (bool(bvec2(_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false)))))), _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, 1.0 * (injectionSwitch.y)))), true, _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-43.13)), _GLF_IDENTITY(bool(false), (bool(false)) || false)))))) * 1.0) > injectionSwitch.y)))), false || (_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(! (! _GLF_IDENTITY((_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false)))), ((_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bool(_GLF_IDENTITY(bool(! (! (_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false)))))), bool(bool(bool(! (! (_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false)))))))))))))), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x < injectionSwitch.y)), true, _GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], float(_GLF_IDENTITY(mat4x3(injectionSwitch[1], _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 1.0, tan(0.0), 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0), (mat4x3(injectionSwitch[1], _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 1.0, tan(0.0), 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0)) + mat4x3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))))).x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y)))))), (_GLF_IDENTITY(_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false)))), (! (_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))) && true))), _GLF_TRUE(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), false || (! (true))))), (injectionSwitch.x < injectionSwitch.y)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (! (bool(bvec4(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false)))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), bool(bvec4(_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false)))))), false || (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false)))))), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))))))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! _GLF_IDENTITY((! (bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true), ! (! _GLF_IDENTITY((_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false)))), true && ((_GLF_IDENTITY(_GLF_DEAD(false), false || _GLF_IDENTITY((_GLF_DEAD(false)), ((_GLF_DEAD(false))) && true))))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), bool(_GLF_IDENTITY(bvec2((! (bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true), ! (! _GLF_IDENTITY((_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false)))), true && ((_GLF_IDENTITY(_GLF_DEAD(false), false || _GLF_IDENTITY((_GLF_DEAD(false)), ((_GLF_DEAD(false))) && true))))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), true), bvec2(bvec2(bvec2((! (bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true), ! (! _GLF_IDENTITY((_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false)))), true && ((_GLF_IDENTITY(_GLF_DEAD(false), false || _GLF_IDENTITY((_GLF_DEAD(false)), ((_GLF_DEAD(false))) && true))))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), true))))))), false, false, true)))) && true))), _GLF_IDENTITY(false, bool(bvec3(false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))) && true)))))))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       return;
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(true, _GLF_IDENTITY(true, true && (true))), bvec2(bvec4(bvec2(true, true), true, false)))), ! (! (_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(true, _GLF_IDENTITY(true, (true) || false)), bvec2(bvec4(bvec2(true, true), true, false)))), ! (! (bool(_GLF_IDENTITY(bvec2(true, _GLF_IDENTITY(true, ! (! (true)))), bvec2(bvec4(bvec2(true, true), true, _GLF_IDENTITY(false, true && (false)))))))))))))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), (bool(bool(false))) || false)), true && (false))))
          {
          }
         else
          {
           return;
          }
        }
       return;
      }
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) ^ 0))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           return;
          }
        }
       if(_GLF_DEAD(false))
        continue;
      }
    }
   else
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         return;
        }
      }
    }
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, bool(bool(false))), _GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), bool(bool(bool(false)))))))))))
  {
   for(int _injected_loop_counter = (1 | 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 << _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), int(int(int(2))))))); _injected_loop_counter --)
    {
     return;
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(false))
    return;
  }
 uint next_virtual_gid = _GLF_IDENTITY(workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, (subgroup_size) << 0u), ~ (~ (workgroup_base + subgroup_id * subgroup_size))) + ((subgroup_local_id + 1) % subgroup_size);
 do
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 do
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(_GLF_IDENTITY(false, (false) || false))))))))
    {
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
      continue;
     if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y)))) || (_GLF_DEAD(false))))
      continue;
     return;
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), (true ? int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0))) : _GLF_FUZZED(-11629)))); _injected_loop_counter --)
  {
   for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), _GLF_IDENTITY(0 ^ (int(2)), 0 | (_GLF_IDENTITY(0 ^ (int(2)), (0 ^ (int(2))) * 1)))))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(2, _GLF_IDENTITY((_GLF_IDENTITY(2, min(_GLF_IDENTITY(_GLF_IDENTITY(2, (2) / 1), (_GLF_IDENTITY(_GLF_IDENTITY(2, (2) / 1), (_GLF_IDENTITY(2, (2) / 1)) | (_GLF_IDENTITY(2, (2) / 1)))) | (_GLF_IDENTITY(2, (2) / 1))), 2))) - 0, ((_GLF_IDENTITY(2, min(_GLF_IDENTITY(_GLF_IDENTITY(2, (2) / 1), (_GLF_IDENTITY(_GLF_IDENTITY(2, _GLF_IDENTITY((2) / 1, max((2) / 1, (2) / 1))), (_GLF_IDENTITY(2, (_GLF_IDENTITY(2, min(2, 2))) / 1)) | _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(2, (2) + 0), (_GLF_IDENTITY(2, 0 ^ (2))) / 1)), int(ivec2((_GLF_IDENTITY(2, (2) / 1)), ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(_GLF_IDENTITY(7, _GLF_IDENTITY(0, 1 * (0)) ^ (7)))))))))) | (_GLF_IDENTITY(2, _GLF_IDENTITY((2) / 1, clamp((2) / 1, (2) / 1, (2) / 1))))), 2))) - 0) + 0))), int(2))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, ~ (~ (_injected_loop_counter))), ~ (_GLF_IDENTITY(~ _GLF_IDENTITY((_GLF_IDENTITY(_injected_loop_counter, ~ (~ (_injected_loop_counter)))), (_GLF_IDENTITY((_GLF_IDENTITY(_injected_loop_counter, ~ (~ (_injected_loop_counter)))), min((_GLF_IDENTITY(_injected_loop_counter, ~ (~ (_injected_loop_counter)))), (_GLF_IDENTITY(_injected_loop_counter, ~ (~ (_injected_loop_counter))))))) / int(_GLF_ONE(1.0, injectionSwitch.y))), 0 ^ (_GLF_IDENTITY(~ (_GLF_IDENTITY(_injected_loop_counter, ~ (_GLF_IDENTITY(~ (_injected_loop_counter), clamp(_GLF_IDENTITY(~ (_injected_loop_counter), max(_GLF_IDENTITY(~ (_injected_loop_counter), (false ? _GLF_FUZZED(_injected_loop_counter) : ~ (_injected_loop_counter))), ~ (_injected_loop_counter))), ~ (_injected_loop_counter), ~ (_injected_loop_counter)))))), 0 ^ (~ (_GLF_IDENTITY(_injected_loop_counter, ~ (~ (_injected_loop_counter)))))))))) != 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
        continue;
       if(_GLF_DEAD(false))
        continue;
       for(int _injected_loop_counter = int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(_GLF_IDENTITY(1.0, float(vec2(1.0, round(length(normalize(1.0)))))), 1.0)).y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             return;
            }
           else
            {
            }
          }
         if(_GLF_DEAD(false))
          return;
        }
       do
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            {
             do
              {
               return;
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              {
               for(int _injected_loop_counter = _GLF_IDENTITY(0, clamp(0, 0, 0)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                {
                 return;
                }
              }
            }
           return;
           if(_GLF_DEAD(false))
            return;
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)))).y))))
          return;
        }
       else
        {
        }
       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)))), _GLF_IDENTITY(bool(bvec3(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(_GLF_IDENTITY(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false), bvec2(bvec3(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false), true)))))), false, false)), ! (! (bool(bvec3(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)))), false, false)))))))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), (_GLF_IDENTITY(false, ! (! (false)))) && true), true, false, false)), ! (_GLF_IDENTITY(! (bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), (_GLF_IDENTITY(false, ! (! (false)))) && true), true, false, false))), true && (! (bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), (_GLF_IDENTITY(false, ! (! (false)))) && true), true, false, false))))))), _GLF_IDENTITY((bool(bvec4(_GLF_IDENTITY(false, ! (! (false))), true, false, false))), (_GLF_IDENTITY((bool(bvec4(_GLF_IDENTITY(false, ! (! (false))), true, false, false))), false || ((bool(bvec4(_GLF_IDENTITY(false, ! (! (false))), true, false, false)))))) && true) && true))))
          {
           if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false))))))), bool(bvec2(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false))))))), true))))
            return;
           break;
          }
        }
       else
        {
         if(_GLF_DEAD(false))
          break;
         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
          continue;
         if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec3(true, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec3(bvec4(bvec3(true, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false))))), false), bvec2(bvec4(_GLF_IDENTITY(bvec2(true, false), bvec2(bvec4(bvec2(true, false), false, false))), false, true)))), (_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(true, false), bvec2(bvec4(_GLF_IDENTITY(bvec2(true, false), _GLF_IDENTITY(bvec2(bvec4(bvec2(true, false), false, false)), bvec2(bvec2(bvec2(bvec4(bvec2(true, false), false, false)))))), _GLF_IDENTITY(_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), bool(bvec2((false), _GLF_IDENTITY(true, true && (true))))))), false || (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), bool(bvec4(bool(false), false, true, true))))), ! (! _GLF_IDENTITY((false), _GLF_IDENTITY(bool(bvec2((false), _GLF_IDENTITY(true, true && (true)))), (bool(bvec2((false), _GLF_IDENTITY(true, true && (true))))) && true)))))), true)))), true && _GLF_IDENTITY((bool(_GLF_IDENTITY(bvec2(true, false), bvec2(bvec4(_GLF_IDENTITY(bvec2(true, false), bvec2(bvec4(bvec2(true, false), false, false))), false, true))))), bool(bvec4((bool(_GLF_IDENTITY(bvec2(true, false), bvec2(bvec4(_GLF_IDENTITY(bvec2(true, false), bvec2(bvec4(bvec2(true, false), false, false))), false, true))))), true, false, true))))) && true))), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(true, _GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false))), bvec2(bvec4(_GLF_IDENTITY(bvec2(true, false), bvec2(bvec4(bvec2(true, false), false, false))), false, true)))), (_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(true, false), bvec2(bvec4(_GLF_IDENTITY(bvec2(true, false), bvec2(bvec4(bvec2(true, false), false, _GLF_IDENTITY(false, bool(bvec2(false, true)))))), _GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), _GLF_IDENTITY((_GLF_IDENTITY(false, ! (! (false)))) || false, ((_GLF_IDENTITY(false, ! (! (false)))) || false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), true)))), true && (bool(_GLF_IDENTITY(bvec2(true, false), bvec2(bvec4(_GLF_IDENTITY(bvec2(true, false), bvec2(bvec4(bvec2(true, false), false, false))), false, true))))))) && true))), bool(bvec4(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(true, false), bvec2(bvec4(_GLF_IDENTITY(bvec2(true, false), bvec2(bvec4(bvec2(true, false), false, false))), false, true)))), (_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(true, false), bvec2(bvec4(_GLF_IDENTITY(bvec2(true, false), bvec2(bvec4(bvec2(true, false), false, false))), _GLF_IDENTITY(false, ! (! (false))), true))), bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec2(true, false), bvec2(bvec4(_GLF_IDENTITY(bvec2(true, false), bvec2(bvec4(bvec2(true, false), false, false))), _GLF_IDENTITY(false, ! (! (false))), true)))), bvec2(bvec2(bvec2(_GLF_IDENTITY(bvec2(true, false), bvec2(bvec4(_GLF_IDENTITY(bvec2(true, false), bvec2(bvec4(bvec2(true, false), false, false))), _GLF_IDENTITY(false, ! (! (false))), true)))))))))), true && (bool(_GLF_IDENTITY(bvec2(true, false), bvec2(bvec4(_GLF_IDENTITY(bvec2(true, false), bvec2(bvec4(bvec2(true, false), false, false))), false, true))))))) && true))), ! (! (_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(true, false), bvec2(bvec3(bvec2(true, false), false))), bvec2(bvec4(_GLF_IDENTITY(bvec2(true, false), bvec2(bvec4(bvec2(true, false), false, false))), false, true)))), (_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(true, false), bvec2(bvec4(_GLF_IDENTITY(bvec2(true, false), bvec2(bvec4(bvec2(true, false), false, false))), _GLF_IDENTITY(false, ! (! (false))), true))), bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec2(true, false), bvec2(bvec4(_GLF_IDENTITY(bvec2(true, false), bvec2(bvec4(bvec2(true, false), false, false))), _GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), ! (! (_GLF_IDENTITY((false), ! (! ((false))))))))), true)))), bvec2(bvec2(bvec2(_GLF_IDENTITY(bvec2(true, false), bvec2(bvec4(_GLF_IDENTITY(bvec2(true, false), bvec2(bvec4(bvec2(true, false), false, false))), _GLF_IDENTITY(false, ! (! (false))), true)))))))))), true && (bool(_GLF_IDENTITY(bvec2(true, false), bvec2(bvec4(_GLF_IDENTITY(bvec2(true, false), bvec2(bvec4(bvec2(true, false), false, false))), false, true))))))) && true)))))), true, false, true)))), false || (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(true, false), bvec2(bvec4(_GLF_IDENTITY(bvec2(true, false), bvec2(bvec4(bvec2(true, false), false, false))), false, true)))), (_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(true, false), bvec2(bvec4(_GLF_IDENTITY(bvec2(true, false), bvec2(bvec4(bvec2(true, false), false, false))), _GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), (_GLF_IDENTITY(false, ! (! (false)))) || false), true)))), true && (bool(_GLF_IDENTITY(bvec2(true, false), bvec2(bvec4(_GLF_IDENTITY(bvec2(true, false), bvec2(bvec4(bvec2(true, false), false, false))), false, true))))))) && true))), bool(bvec4(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(true, false), bvec2(bvec4(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(true, bool(bvec2(_GLF_IDENTITY(true, ! (! (true))), false))), false), bvec2(bvec4(bvec2(true, false), false, false))), false, true)))), (_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(true, false), bvec2(bvec4(_GLF_IDENTITY(bvec2(true, false), bvec2(bvec4(bvec2(true, false), false, false))), _GLF_IDENTITY(false, ! (! (false))), true))), bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec2(true, false), bvec2(bvec4(_GLF_IDENTITY(bvec2(true, false), bvec2(bvec4(bvec2(true, false), false, false))), _GLF_IDENTITY(false, ! (! (false))), true)))), bvec2(bvec2(bvec2(_GLF_IDENTITY(bvec2(true, false), bvec2(bvec4(_GLF_IDENTITY(bvec2(true, false), bvec2(bvec4(bvec2(true, false), false, false))), _GLF_IDENTITY(false, ! (! (false))), true))))))))), bvec2(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(true, false), bvec2(bvec4(_GLF_IDENTITY(bvec2(true, false), bvec2(bvec4(bvec2(true, false), false, false))), _GLF_IDENTITY(false, ! (! (false))), true))), bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec2(true, false), bvec2(bvec4(_GLF_IDENTITY(bvec2(true, false), bvec2(bvec4(bvec2(true, false), false, false))), _GLF_IDENTITY(false, ! (! (false))), true)))), bvec2(bvec2(bvec2(_GLF_IDENTITY(bvec2(true, false), bvec2(bvec4(_GLF_IDENTITY(bvec2(true, false), bvec2(bvec4(bvec2(true, false), false, false))), _GLF_IDENTITY(false, ! (! (false))), true))))))))), bvec2(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(true, false), bvec2(bvec4(_GLF_IDENTITY(bvec2(true, false), bvec2(bvec4(bvec2(true, false), false, false))), _GLF_IDENTITY(false, ! (! (false))), true))), bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec2(true, false), bvec2(bvec4(_GLF_IDENTITY(bvec2(true, false), bvec2(bvec4(bvec2(true, false), false, false))), _GLF_IDENTITY(false, ! (! (false))), true)))), bvec2(bvec2(bvec2(_GLF_IDENTITY(bvec2(true, false), bvec2(bvec4(_GLF_IDENTITY(bvec2(true, false), bvec2(bvec4(bvec2(true, false), false, false))), _GLF_IDENTITY(false, ! (! (false))), true))))))))), false))))))), true && (_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(true, false), bvec2(bvec4(_GLF_IDENTITY(bvec2(true, false), bvec2(bvec4(bvec2(true, false), false, false))), false, true)))), ! (! (bool(_GLF_IDENTITY(bvec2(true, false), bvec2(bvec4(_GLF_IDENTITY(bvec2(true, false), bvec2(bvec4(bvec2(true, false), false, false))), false, true)))))))))) && true))), true, false, true)))), false || ((_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(true, _GLF_IDENTITY(false, bool(bool(false)))), bvec2(bvec4(_GLF_IDENTITY(bvec2(true, false), bvec2(bvec4(bvec2(true, false), false, false))), false, true)))), (_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(true, false), bvec2(bvec4(_GLF_IDENTITY(bvec2(true, false), bvec2(bvec4(bvec2(true, false), false, false))), _GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), (_GLF_IDENTITY(false, ! (! (false)))) || false), true))), bvec2(bvec3(_GLF_IDENTITY(bvec2(true, false), bvec2(bvec4(_GLF_IDENTITY(bvec2(true, false), bvec2(bvec4(bvec2(true, false), false, false))), _GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), (_GLF_IDENTITY(false, ! (! (false)))) || false), true))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), true && (bool(_GLF_IDENTITY(bvec2(true, false), bvec2(bvec4(_GLF_IDENTITY(bvec2(true, false), bvec2(bvec4(bvec2(true, false), false, false))), false, true))))))) && true))), bool(bvec4(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(true, false), bvec2(bvec4(_GLF_IDENTITY(bvec2(true, false), bvec2(bvec4(bvec2(true, false), false, false))), false, true)))), _GLF_IDENTITY((_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(true, false), bvec2(bvec4(_GLF_IDENTITY(bvec2(true, false), bvec2(bvec4(bvec2(true, false), false, false))), _GLF_IDENTITY(false, ! (! (false))), true))), bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec2(true, false), bvec2(bvec4(_GLF_IDENTITY(bvec2(true, false), bvec2(bvec4(bvec2(true, false), false, false))), _GLF_IDENTITY(false, ! (! (false))), true)))), bvec2(bvec2(bvec2(_GLF_IDENTITY(bvec2(true, false), bvec2(bvec4(_GLF_IDENTITY(bvec2(true, false), bvec2(bvec4(bvec2(true, false), false, false))), _GLF_IDENTITY(false, ! (! (false))), true)))))))))), true && (bool(_GLF_IDENTITY(bvec2(true, false), bvec2(bvec4(_GLF_IDENTITY(bvec2(true, false), bvec2(bvec4(bvec2(true, false), false, false))), false, true))))))) && true, true && ((_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(true, false), bvec2(bvec4(_GLF_IDENTITY(bvec2(true, false), bvec2(bvec4(bvec2(true, false), false, false))), _GLF_IDENTITY(false, ! (! (false))), true))), bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec2(true, false), bvec2(bvec4(_GLF_IDENTITY(bvec2(true, false), bvec2(bvec4(bvec2(true, false), false, false))), _GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), ((false)) || false))), true)))), bvec2(bvec2(bvec2(_GLF_IDENTITY(bvec2(true, false), bvec2(bvec4(_GLF_IDENTITY(bvec2(true, false), bvec2(bvec4(bvec2(true, false), false, false))), _GLF_IDENTITY(false, ! (! (false))), true)))))))))), true && (bool(_GLF_IDENTITY(bvec2(true, false), bvec2(bvec4(_GLF_IDENTITY(bvec2(true, false), bvec2(bvec4(bvec2(true, false), false, false))), false, true))))))) && true))))), true, false, true)))))))) || false))
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             return;
            }
           else
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(-63.42))) > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(clamp(injectionSwitch, injectionSwitch, injectionSwitch), mix(vec2(_GLF_FUZZED(-6752.0181), _GLF_FUZZED(-534.373)), vec2((clamp(injectionSwitch, injectionSwitch, injectionSwitch))[0], (clamp(injectionSwitch, injectionSwitch, injectionSwitch))[1]), bvec2(true, _GLF_IDENTITY(true, (true) || false))))).y))))
              break;
             if(_GLF_DEAD(false))
              break;
            }
          }
         else
          {
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec3(injectionSwitch.x > injectionSwitch.y, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))))), ! (! (bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED((-9.2 * -7143.5012)), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-5617.0007)), _GLF_IDENTITY(bvec2(true, false), bvec2(bvec4(bvec2(true, false), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))) * vec2(_GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, 0.0 + (1.0))) / 1.0))), 1.0)).x > injectionSwitch.y, bool(bvec3(injectionSwitch.x > injectionSwitch.y, _GLF_FALSE(_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, (false) && true), true))), (injectionSwitch.x > injectionSwitch.y)), false)))))))))))), bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bool(bool(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), (bool(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool((injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (bool((injectionSwitch.x > injectionSwitch.y))), ! (! (! (bool((injectionSwitch.x > injectionSwitch.y))))))))), bool(bvec3(bool(_GLF_IDENTITY(bool((injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (bool((injectionSwitch.x > injectionSwitch.y))), ! (! (! (bool((injectionSwitch.x > injectionSwitch.y))))))))), true, true)))))))) && true))))
            {
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
              {
               return;
              }
            }
           if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, false, false)))))
            break;
          }
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
         if(_GLF_DEAD(false))
          break;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
        }
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).y))), ! (! (! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y))).x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))), _GLF_IDENTITY(false, true && (false)) || (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))))))))))))))
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, true && (false))) || false)))
          break;
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))))), bool(bvec2(! (_GLF_FALSE(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bvec2(false, false)))))), (injectionSwitch.x > injectionSwitch.y))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))
          return;
         if(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, bool(bool(false)))))))
          {
           if(_GLF_DEAD(false))
            continue;
           return;
          }
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (_GLF_IDENTITY(0 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), (int(3)) | 0)), ~ (~ (_GLF_IDENTITY(0 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), (int(3)) | 0)), min(0 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), (int(3)) | 0)), _GLF_IDENTITY(0 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), (int(3)) | 0)), min(0 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), (int(3)) | 0)), 0 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), _GLF_IDENTITY((int(3)) | 0, (false ? _GLF_FUZZED(bitfieldInsert(-28935, _injected_loop_counter, -81178, findMSB(43917))) : _GLF_IDENTITY((int(3)) | 0, ((int(3)) | 0) / 1)))))))))))))); _injected_loop_counter --)
          {
           return;
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             do
              {
               return;
              }
             while(_GLF_WRAPPED_LOOP(false));
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              continue;
            }
           break;
          }
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           return;
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
        }
      }
    }
   if(_GLF_DEAD(false))
    continue;
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
    break;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_GLF_IDENTITY(_injected_loop_counter, clamp(_injected_loop_counter, _injected_loop_counter, _injected_loop_counter))) ^ 0) < 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_FALSE(_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), (_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch : _GLF_FUZZED(vec2(5.1, -916.231)))), injectionSwitch)).x > injectionSwitch.y))), _GLF_IDENTITY(true && (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) && true))), true && (true && (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))), bool(_GLF_IDENTITY(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), _GLF_IDENTITY(bvec2(bvec2(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))), bvec2(bvec4(bvec2(bvec2(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))), _GLF_IDENTITY(true, (true) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true))))))))
      return;
     if(_GLF_DEAD(false))
      break;
    }
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, true && (true))) || false), ! (! (true))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, true && (true))) || false), ! (! (true)))), ! (! (! (_GLF_IDENTITY(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, true && (true))) || false), ! (! (true)))))))))))
    {
     return;
     do
      {
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           return;
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true)))))));
    }
   else
    {
    }
  }
 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), true && (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), false || (_GLF_WRAPPED_IF_FALSE(false))))))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), ! (! (! (_GLF_DEAD(false))))))))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
    }
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
   do
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), ! _GLF_IDENTITY((! (_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, ! (! (false))))))))), true && ((! (_GLF_DEAD(false)))))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
         return;
         if(_GLF_DEAD(false))
          continue;
        }
       return;
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         return;
        }
       else
        {
        }
      }
     buf[virtual_gid] = 1;
    }
   else
    {
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), injectionSwitch, injectionSwitch)).x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false)), (_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), clamp(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), (_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch))) + vec2(0.0, 0.0)), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), max(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)))), _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)))), injectionSwitch, injectionSwitch)).x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), injectionSwitch, injectionSwitch)).x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).y), true && ((_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), vec2(1.0, 1.0) * (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), vec2(mat3(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0))))), injectionSwitch, injectionSwitch)).x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).y)))))))) && true)), (_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0))))), ! (! (_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), false || (false)))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0)))))))))) && true)))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(true && (false), ! (! (true && (false)))), (_GLF_IDENTITY(_GLF_IDENTITY(true && (false), ! (! (true && (false)))), bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(true && (false), ! (! (true && (false)))), (_GLF_IDENTITY(true && (false), ! (! (true && (false))))) || false), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) < _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y)), false)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
     do
      {
       return;
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
  }
 do
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     do
      {
       do
        {
         do
          {
           do
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) || false)))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(3.1) : injectionSwitch.y))))))
                continue;
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                break;
               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, true && (false)))), (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, _GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y))), bvec2(bvec4(_GLF_IDENTITY(bvec2(false, _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y))), bvec2(bvec3(bvec2(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true))), false, false))))), ! (! (false)))))
                  continue;
                 if(_GLF_DEAD(false))
                  return;
                }
               else
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec3((injectionSwitch.x > injectionSwitch.y), false, false)))), bool(bvec2(bool(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec3((injectionSwitch.x > injectionSwitch.y), false, false)))), true))))))))
                    continue;
                   break;
                  }
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), true && (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) && true))))
                    {
                    }
                   else
                    {
                     do
                      {
                       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y)))))))), (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), (mat2(1.0) * (injectionSwitch)) - vec2(0.0, 0.0))).x > injectionSwitch.y)))) && true))
                        break;
                       if(_GLF_DEAD(false))
                        return;
                       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x, max(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + abs(0.0)))) > injectionSwitch.y))))
                        break;
                       if(_GLF_DEAD(false))
                        return;
                       for(int _injected_loop_counter = _GLF_IDENTITY(0, clamp(_GLF_IDENTITY(0, clamp(0, _GLF_IDENTITY(0, (0) << 0), _GLF_IDENTITY(0, (0) + 0))), _GLF_IDENTITY(0, (false ? _GLF_FUZZED(-96646) : 0)), 0)); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(((1 << _GLF_IDENTITY(int(5), _GLF_IDENTITY(_GLF_IDENTITY(int(5), (int(5)) >> 0), clamp(_GLF_IDENTITY(int(5), 0 ^ (int(5))), int(5), _GLF_IDENTITY(int(5), clamp(_GLF_IDENTITY(int(5), clamp(int(_GLF_IDENTITY(5, max(5, _GLF_IDENTITY(5, (5) + 0)))), int(5), int(5))), int(_GLF_IDENTITY(5, (5) * int(_GLF_ONE(1.0, injectionSwitch.y)))), int(5))))))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(5), int(5)), 0 | (_GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (_GLF_IDENTITY(int(5), clamp(_GLF_IDENTITY(int(5), (int(5)) | _GLF_IDENTITY((_GLF_IDENTITY(int(5), int(ivec2(_GLF_IDENTITY(int(5), (_GLF_IDENTITY(int(5), (int(5)) | 0)) ^ 0), int(_GLF_ONE(1.0, injectionSwitch.y)))))), int(ivec4(_GLF_IDENTITY((_GLF_IDENTITY(int(5), int(ivec2(_GLF_IDENTITY(int(5), (_GLF_IDENTITY(int(5), (int(5)) | 0)) ^ 0), int(_GLF_ONE(1.0, injectionSwitch.y)))))), (false ? _GLF_FUZZED(_injected_loop_counter) : (_GLF_IDENTITY(int(5), int(ivec2(_GLF_IDENTITY(int(5), (_GLF_IDENTITY(int(5), (int(5)) | 0)) ^ 0), int(_GLF_ONE(1.0, injectionSwitch.y)))))))), 0, 1, 1)))), _GLF_IDENTITY(int(5), clamp(int(5), int(5), int(5))), _GLF_IDENTITY(int(5), int(int(int(_GLF_IDENTITY(5, (5) - 0)))))))) - 0))))), 1 * (((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(5, (false ? _GLF_FUZZED(_injected_loop_counter) : 5))), _GLF_IDENTITY(int(5), clamp(_GLF_IDENTITY(int(5), 0 ^ (int(5))), int(5), _GLF_IDENTITY(int(5), clamp(_GLF_IDENTITY(int(5), clamp(_GLF_IDENTITY(int(5), int(ivec4(int(5), 0, 0, (0 >> _GLF_IDENTITY(int(6), int(6)))))), int(5), int(5))), int(_GLF_IDENTITY(5, max(5, 5))), int(5))))))) >> _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(5), int(ivec2(int(_GLF_IDENTITY(5, (5) / int(_GLF_ONE(1.0, injectionSwitch.y)))), (0 | 0)))), int(5)), 0 | (_GLF_IDENTITY(_GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (_GLF_IDENTITY(int(5), clamp(_GLF_IDENTITY(int(5), (int(5)) | (int(5))), _GLF_IDENTITY(int(5), clamp(int(5), int(5), int(5))), _GLF_IDENTITY(int(5), int(int(int(5))))))) - 0)), max(_GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (_GLF_IDENTITY(int(5), clamp(_GLF_IDENTITY(int(5), (int(5)) | (int(5))), _GLF_IDENTITY(int(5), clamp(int(5), int(5), int(5))), _GLF_IDENTITY(int(5), int(int(int(5))))))) - 0)), _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (_GLF_IDENTITY(_GLF_IDENTITY(int(5), 0 | (int(5))), clamp(_GLF_IDENTITY(int(5), (int(5)) | (int(5))), _GLF_IDENTITY(int(5), clamp(int(5), int(5), _GLF_IDENTITY(int(5), clamp(int(5), int(5), int(5))))), _GLF_IDENTITY(int(5), int(int(_GLF_IDENTITY(int(5), (false ? _GLF_FUZZED(abs(-44849)) : int(5))))))))) - 0)))))))))); _injected_loop_counter ++)
                        {
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y))))
                          continue;
                         if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY((false), ! (! ((false)))), false), bvec2(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(bvec2(_GLF_IDENTITY((false), ! (! ((false)))), false), true), bvec3(bvec3(bvec3(bvec2(_GLF_IDENTITY((false), ! (! ((false)))), false), true)))), bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec2(_GLF_IDENTITY((false), ! (! ((false)))), false), true), bvec3(bvec3(bvec3(bvec2(_GLF_IDENTITY((false), ! (! ((false)))), false), true)))))))))), bool(bool(bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY((false), ! (! ((false)))), false), bvec2(_GLF_IDENTITY(bvec3(bvec2(_GLF_IDENTITY((false), ! (! ((false)))), false), true), bvec3(bvec3(bvec3(bvec2(_GLF_IDENTITY((false), ! (! ((false)))), false), true))))))))))))), (injectionSwitch.x > injectionSwitch.y))))
                          break;
                         do
                          {
                           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                            return;
                          }
                         while(_GLF_WRAPPED_LOOP(false));
                         for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                          {
                           if(_GLF_DEAD(false))
                            continue;
                           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                            {
                             if(_GLF_DEAD(false))
                              continue;
                             atomicStore(buf[_GLF_IDENTITY(next_virtual_gid, clamp(next_virtual_gid, next_virtual_gid, next_virtual_gid))], _GLF_IDENTITY(_GLF_IDENTITY(uint(2), clamp(uint(2), _GLF_IDENTITY(uint(2), (uint(2)) >> 0u), uint(_GLF_IDENTITY(2, clamp(_GLF_IDENTITY(2, clamp(2, 2, 2)), 2, 2))))), (uint(2)) / 1u), 4, 64, _GLF_IDENTITY(4, (false ? _GLF_FUZZED(ivec2(59118, 20432).s) : 4)));
                            }
                           else
                            {
                            }
                           if(_GLF_DEAD(false))
                            return;
                          }
                        }
                       if(_GLF_DEAD(false))
                        continue;
                       if(_GLF_DEAD(false))
                        break;
                      }
                     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), bool(bvec2(false, _GLF_IDENTITY(true, bool(bvec2(true, true)))))), (_GLF_IDENTITY(_GLF_IDENTITY(false, true && _GLF_IDENTITY((false), bool(bvec4(_GLF_IDENTITY((false), ! (! ((false)))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)))), bool(bvec2(false, _GLF_IDENTITY(true, bool(bvec2(true, true))))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))));
                    }
                  }
                 else
                  {
                   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), (injectionSwitch.x > injectionSwitch.y))))
                    continue;
                   if(_GLF_DEAD(false))
                    {
                     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                      {
                       return;
                      }
                    }
                  }
                 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(false, _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(vec2(4351.0712, -4.9)) : _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))).x > injectionSwitch.y))), bvec2(bvec3(bvec2(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false))), bvec2(bvec2(_GLF_IDENTITY(bvec2(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec2(_GLF_IDENTITY(bvec3(bvec2(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false), _GLF_IDENTITY(bvec3(bvec3(bvec3(bvec2(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false))), bvec3(bvec4(bvec3(bvec3(bvec3(bvec2(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false))), false)))))))))), (bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(false, _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(vec2(4351.0712, -4.9)) : _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))).x > injectionSwitch.y))), bvec2(bvec3(bvec2(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false))), bvec2(bvec2(_GLF_IDENTITY(bvec2(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec2(_GLF_IDENTITY(bvec3(bvec2(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false), _GLF_IDENTITY(bvec3(bvec3(bvec3(bvec2(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false))), bvec3(bvec4(bvec3(bvec3(bvec3(bvec2(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false))), false))))))))))) && true))))
                  {
                   if(_GLF_DEAD(false))
                    break;
                  }
                 else
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    {
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                      }
                     else
                      {
                       if(_GLF_DEAD(false))
                        break;
                       if(_GLF_DEAD(false))
                        continue;
                       return;
                      }
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        return;
                       break;
                      }
                    }
                   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! _GLF_IDENTITY(_GLF_IDENTITY(((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y)), bool(bvec4(_GLF_IDENTITY(((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)))), false || ((_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bool(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))))))), false, false, true))), true && (_GLF_IDENTITY(_GLF_IDENTITY(((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y)), bool(bvec4(_GLF_IDENTITY(((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)))), false || ((_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bool(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))))))), false, false, true))), true && (_GLF_IDENTITY(((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(-1821.0323)), vec2(_GLF_FUZZED(567.005), (injectionSwitch)[1]), bvec2(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))).y)), bool(bvec4(_GLF_IDENTITY(((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)))), false || ((_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bool(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))))), bool(bvec2(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bool(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))))), false)))))), false, false, true))))))))))))
                    {
                     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, vec2(mat3x4(injectionSwitch, 1.0, tan(0.0), determinant(mat4(0.0, 0.0, 0.0, length(0.0), 0.0, sqrt(0.0), 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, abs(1.0), log(1.0))), 0.0, 1.0, sqrt(1.0), 1.0, 1.0, determinant(mat4(tan(0.0), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0)), 1.0))).x > injectionSwitch.y), false || _GLF_IDENTITY(((injectionSwitch.x > injectionSwitch.y)), ! (! (((injectionSwitch.x > injectionSwitch.y)))))))) && true)), (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || _GLF_IDENTITY(((injectionSwitch.x > injectionSwitch.y)), ! (! (((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))))))))))) && true)), (_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true), (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || _GLF_IDENTITY(((injectionSwitch.x > injectionSwitch.y)), ! (! (((_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))).x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y)))))))) && true))) && true)) && true))
                      {
                       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                        {
                         return;
                        }
                       else
                        {
                        }
                      }
                     do
                      {
                       return;
                       if(_GLF_DEAD(false))
                        return;
                      }
                     while(_GLF_WRAPPED_LOOP(false));
                    }
                  }
                }
              }
             else
              {
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
                return;
               break;
               if(_GLF_DEAD(false))
                break;
              }
            }
           while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, _GLF_IDENTITY(true, _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(true), false || (bool(true)))), false || (bool(_GLF_IDENTITY(bool(true), bool(_GLF_IDENTITY(bool(bool(true)), (bool(bool(true))) && true))))))) && (_GLF_IDENTITY(false, ! (! (false)))))));
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(-312.416) : injectionSwitch.x))), float(_GLF_FUZZED(669.444)), bool(false))) > injectionSwitch.y))));
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))));
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
     for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        return;
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bvec3(false, false, true)))));
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mix(vec2((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch)[1], clamp((injectionSwitch)[1], (injectionSwitch)[1], (injectionSwitch)[1]))), vec2(_GLF_FUZZED(-1107.5189), _GLF_FUZZED(-58.17)), bvec2(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, true, true, false)), (bool(bvec4(false, true, true, false))) || false)), false)), (_GLF_IDENTITY(mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(-1107.5189), _GLF_IDENTITY(_GLF_FUZZED(-58.17), max(_GLF_IDENTITY(_GLF_FUZZED(-58.17), clamp(_GLF_FUZZED(-58.17), _GLF_FUZZED(-58.17), _GLF_FUZZED(-58.17))), _GLF_FUZZED(-58.17)))), bvec2(false, false)), clamp(mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(-1107.5189), _GLF_FUZZED(-58.17)), bvec2(false, false)), mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), _GLF_IDENTITY(vec2(_GLF_FUZZED(-1107.5189), _GLF_FUZZED(-58.17)), (vec2(_GLF_FUZZED(-1107.5189), _GLF_FUZZED(-58.17))) * mat2(1.0)), bvec2(false, false)), mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(-1107.5189), _GLF_FUZZED(-58.17)), bvec2(false, false))))) - vec2(0.0, 0.0))).y))))
    return;
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
