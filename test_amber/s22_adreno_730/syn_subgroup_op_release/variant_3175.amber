#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), ! (! (! ((injectionSwitch.x > injectionSwitch.y))))))))))
  barrier();
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(! _GLF_IDENTITY((! (_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), ! (! (_GLF_IDENTITY(! (! (false)), (! (! (false))) && true))))))), ((! (_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(! (! (false)), (! (! (false))) && true)), false || (! (_GLF_IDENTITY(! (! (false)), (! (! (false))) && true)))))))))) || false), ! (! (! _GLF_IDENTITY((! (_GLF_IDENTITY(false, _GLF_IDENTITY(! (! _GLF_IDENTITY((false), bool(bvec4((false), true, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), ! (! (_GLF_IDENTITY(! (! (false)), (_GLF_IDENTITY(! (! (false)), ! (! (! (! (false)))))) && true))))))), ((! _GLF_IDENTITY((_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(! (! (false)), (! (! (false))) && true)), false || (! (_GLF_IDENTITY(! (! (false)), (_GLF_IDENTITY(! (! (false)), (! (! (false))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))) && true)))))))), ! (! ((_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(! (! (false)), (! (! (false))) && true)), false || (! (_GLF_IDENTITY(! (! (false)), (_GLF_IDENTITY(! (! (false)), (! (! (false))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))) && true))))))))))))) || false)))))))
    {
     do
      {
       return;
       if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + 0.0) > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_DEAD(false))
  return;
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ((injectionSwitch.x < injectionSwitch.y)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
     return;
    }
  }
 else
  {
  }
 uint subgroup_size = gl_SubgroupSize;
 for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (int(5)) - 0))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), true, true, true))), true, true))))
    {
     do
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), (false) && true)))
        break;
       for(int _injected_loop_counter = _GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) / 1)) - 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), clamp(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), max(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), 1.0 * (_GLF_ONE(1.0, injectionSwitch.y))), _GLF_ONE(1.0, injectionSwitch.y))), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y))))); _injected_loop_counter ++)
        {
         barrier();
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, float(mat4x3(injectionSwitch.y, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0)))))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).y)))))))
    barrier();
  }
 else
  {
  }
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = _GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize.x, _GLF_IDENTITY((gl_WorkGroupSize.x) >> (1u ^ 1u), (0u << _GLF_IDENTITY(uint(5u), uint(5u))) | ((gl_WorkGroupSize.x) >> (1u ^ 1u)))), _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize.x, (gl_WorkGroupSize.x) >> (1u ^ 1u)), max(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize, uvec3(0u, 0u, 0u) ^ (gl_WorkGroupSize)).x, (gl_WorkGroupSize.x) >> (1u ^ 1u)), uint(uvec3(_GLF_IDENTITY(gl_WorkGroupSize.x, (gl_WorkGroupSize.x) >> (1u ^ 1u)), 1u, 1u))), _GLF_IDENTITY(gl_WorkGroupSize.x, _GLF_IDENTITY((gl_WorkGroupSize.x), clamp((gl_WorkGroupSize.x), _GLF_IDENTITY((gl_WorkGroupSize.x), 0u | ((gl_WorkGroupSize.x))), (gl_WorkGroupSize.x))) >> (1u ^ 1u)))), 0u), uvec2(1u, _GLF_IDENTITY(1u, min(1u, 1u))) * (uvec2(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize.x, (_GLF_IDENTITY(gl_WorkGroupSize, uvec3(1u, 1u, 1u) * (gl_WorkGroupSize)).x) >> (1u ^ 1u)), max(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize.x, (gl_WorkGroupSize.x) ^ 0u), _GLF_IDENTITY((gl_WorkGroupSize.x) >> (1u ^ 1u), (0u << _GLF_IDENTITY(uint(3u), uint(3u))) + _GLF_IDENTITY((_GLF_IDENTITY((gl_WorkGroupSize.x) >> (1u ^ 1u), min((gl_WorkGroupSize.x) >> (1u ^ 1u), (gl_WorkGroupSize.x) >> (1u ^ 1u)))), ~ (~ ((_GLF_IDENTITY((gl_WorkGroupSize.x) >> (1u ^ 1u), min((gl_WorkGroupSize.x) >> (1u ^ 1u), (gl_WorkGroupSize.x) >> (1u ^ 1u))))))))), uint(uvec3(_GLF_IDENTITY(gl_WorkGroupSize.x, (gl_WorkGroupSize.x) >> (1u ^ 1u)), 1u, 1u))), _GLF_IDENTITY(gl_WorkGroupSize.x, (gl_WorkGroupSize.x) >> (1u ^ 1u)))), 0u)))), (_GLF_IDENTITY(false, bool(bvec3(false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) ? _GLF_FUZZED(_GLF_IDENTITY(uvec4(94574u, 44629u, 40787u, 104814u), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(uvec4(94574u, 44629u, 40787u, 104814u), (uvec4(94574u, 44629u, 40787u, 104814u)) >> uvec4(0u, 0u, 0u, 0u))), ~ (~ (~ (_GLF_IDENTITY(uvec4(94574u, 44629u, 40787u, 104814u), (uvec4(94574u, 44629u, 40787u, 104814u)) >> uvec4(0u, 0u, 0u, 0u)))))))).t) : _GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize.x, (_GLF_IDENTITY(gl_WorkGroupSize.x, clamp(gl_WorkGroupSize.x, gl_WorkGroupSize.x, _GLF_IDENTITY(gl_WorkGroupSize, uvec3(uvec4(gl_WorkGroupSize, 0u))).x))) >> (1u ^ 1u)), max(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize.x, (gl_WorkGroupSize.x) >> (1u ^ 1u)), uint(uvec3(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) / uvec3(1u, 1u, 1u)).x, (gl_WorkGroupSize.x) >> (1u ^ 1u)), 1u, 1u))), _GLF_IDENTITY(gl_WorkGroupSize.x, (gl_WorkGroupSize.x) >> (1u ^ 1u)))), 0u), uvec2(1u, 1u) * (uvec2(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize.x, _GLF_IDENTITY((gl_WorkGroupSize.x), min((gl_WorkGroupSize.x), (gl_WorkGroupSize.x))) >> (1u ^ 1u)), max(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize.x, (gl_WorkGroupSize.x) >> (1u ^ 1u)), uint(uvec3(_GLF_IDENTITY(gl_WorkGroupSize.x, (gl_WorkGroupSize.x) >> (1u ^ 1u)), _GLF_IDENTITY(1u, (1u) ^ 0u), 1u))), _GLF_IDENTITY(gl_WorkGroupSize.x, (gl_WorkGroupSize.x) >> (1u ^ 1u)))), 0u)))), (uint(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize.x, (_GLF_IDENTITY(gl_WorkGroupSize.x, clamp(gl_WorkGroupSize.x, gl_WorkGroupSize.x, gl_WorkGroupSize.x))) >> (1u ^ 1u)), max(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize.x, (gl_WorkGroupSize.x) >> (1u ^ 1u)), uint(uvec3(_GLF_IDENTITY(gl_WorkGroupSize.x, (gl_WorkGroupSize.x) >> (1u ^ 1u)), 1u, 1u))), _GLF_IDENTITY(gl_WorkGroupSize.x, (_GLF_IDENTITY(gl_WorkGroupSize.x, (gl_WorkGroupSize.x) | (gl_WorkGroupSize.x))) >> (1u ^ _GLF_IDENTITY(1u, clamp(1u, 1u, 1u)))))), 0u), uvec2(1u, 1u) * (uvec2(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize.x, (_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize, uvec3(gl_WorkGroupSize[0], gl_WorkGroupSize[1], gl_WorkGroupSize[2])).x, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(gl_WorkGroupSize, uvec3(gl_WorkGroupSize[0], gl_WorkGroupSize[1], gl_WorkGroupSize[2])).x), min(~ (_GLF_IDENTITY(gl_WorkGroupSize, uvec3(gl_WorkGroupSize[0], gl_WorkGroupSize[1], gl_WorkGroupSize[2])).x), ~ (_GLF_IDENTITY(gl_WorkGroupSize, uvec3(gl_WorkGroupSize[0], gl_WorkGroupSize[1], gl_WorkGroupSize[2])).x)))))) >> (1u ^ 1u)), max(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize.x, (gl_WorkGroupSize.x) >> (1u ^ 1u)), uint(uvec3(_GLF_IDENTITY(gl_WorkGroupSize.x, (gl_WorkGroupSize.x) >> (1u ^ 1u)), _GLF_IDENTITY(1u, (1u) ^ _GLF_IDENTITY(0u, max(0u, 0u))), 1u))), _GLF_IDENTITY(gl_WorkGroupSize.x, (gl_WorkGroupSize.x) >> (1u ^ 1u)))), 0u))))) | (_GLF_IDENTITY(uint(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize.x, uint(uvec2(gl_WorkGroupSize.x, uint(_GLF_ZERO(0.0, injectionSwitch.x))))), (_GLF_IDENTITY(gl_WorkGroupSize.x, clamp(gl_WorkGroupSize.x, gl_WorkGroupSize.x, gl_WorkGroupSize.x))) >> (1u ^ 1u)), max(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize.x, (gl_WorkGroupSize.x) >> (1u ^ 1u)), uint(uvec3(_GLF_IDENTITY(gl_WorkGroupSize.x, (gl_WorkGroupSize.x) >> (1u ^ 1u)), 1u, 1u))), _GLF_IDENTITY(gl_WorkGroupSize.x, (_GLF_IDENTITY(gl_WorkGroupSize.x, (0u >> _GLF_IDENTITY(uint(5u), uint(5u))) ^ (gl_WorkGroupSize.x))) >> (1u ^ 1u)))), 0u), uvec2(1u, 1u) * (_GLF_IDENTITY(uvec2(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize.x, (gl_WorkGroupSize.x) | (gl_WorkGroupSize.x)), (gl_WorkGroupSize.x) >> _GLF_IDENTITY((1u ^ 1u), ((1u ^ 1u)) | ((1u ^ 1u)))), max(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize.x, (gl_WorkGroupSize.x) >> (1u ^ 1u)), _GLF_IDENTITY(uint(uvec3(_GLF_IDENTITY(gl_WorkGroupSize.x, (gl_WorkGroupSize.x) >> (1u ^ 1u)), _GLF_IDENTITY(1u, (1u) ^ 0u), 1u)), max(uint(uvec3(_GLF_IDENTITY(gl_WorkGroupSize.x, (gl_WorkGroupSize.x) >> (1u ^ 1u)), _GLF_IDENTITY(1u, (1u) ^ 0u), 1u)), uint(uvec3(_GLF_IDENTITY(gl_WorkGroupSize.x, (gl_WorkGroupSize.x) >> (1u ^ 1u)), _GLF_IDENTITY(1u, (1u) ^ 0u), 1u))))), _GLF_IDENTITY(gl_WorkGroupSize.x, (gl_WorkGroupSize.x) >> (1u ^ 1u)))), 0u), (uvec2(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize.x, (gl_WorkGroupSize.x) | (gl_WorkGroupSize.x)), (gl_WorkGroupSize.x) >> _GLF_IDENTITY((1u ^ 1u), ((1u ^ 1u)) | ((1u ^ 1u)))), max(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize.x, (gl_WorkGroupSize.x) >> (1u ^ 1u)), _GLF_IDENTITY(uint(uvec3(_GLF_IDENTITY(gl_WorkGroupSize.x, (gl_WorkGroupSize.x) >> (1u ^ 1u)), _GLF_IDENTITY(1u, (1u) ^ 0u), 1u)), max(uint(uvec3(_GLF_IDENTITY(gl_WorkGroupSize.x, (gl_WorkGroupSize.x) >> (1u ^ 1u)), _GLF_IDENTITY(1u, (1u) ^ 0u), 1u)), uint(uvec3(_GLF_IDENTITY(gl_WorkGroupSize.x, (gl_WorkGroupSize.x) >> (1u ^ 1u)), _GLF_IDENTITY(1u, (1u) ^ 0u), 1u))))), _GLF_IDENTITY(gl_WorkGroupSize.x, (gl_WorkGroupSize.x) >> (1u ^ 1u)))), 0u)) + uvec2(0u, 0u))))), max(_GLF_IDENTITY(uint(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize.x, (_GLF_IDENTITY(gl_WorkGroupSize.x, clamp(gl_WorkGroupSize.x, gl_WorkGroupSize.x, gl_WorkGroupSize.x))) >> (1u ^ _GLF_IDENTITY(1u, 0u | (_GLF_IDENTITY(1u, uint(uint(1u))))))), max(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize.x, (gl_WorkGroupSize.x) >> (1u ^ 1u)), uint(uvec3(_GLF_IDENTITY(gl_WorkGroupSize.x, (gl_WorkGroupSize.x) >> (1u ^ 1u)), 1u, 1u))), _GLF_IDENTITY(gl_WorkGroupSize.x, (gl_WorkGroupSize.x) >> (1u ^ 1u)))), 0u), uvec2(1u, 1u) * (uvec2(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize.x, (gl_WorkGroupSize.x) >> _GLF_IDENTITY((_GLF_IDENTITY(1u ^ 1u, (_GLF_IDENTITY(1u ^ 1u, clamp(_GLF_IDENTITY(1u ^ 1u, ~ (~ (1u ^ 1u))), _GLF_IDENTITY(1u ^ 1u, min(1u ^ 1u, 1u ^ 1u)), 1u ^ 1u))) * 1u)), _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec3((_GLF_IDENTITY(1u ^ 1u, (_GLF_IDENTITY(1u ^ 1u, clamp(_GLF_IDENTITY(1u ^ 1u, ~ (~ (1u ^ 1u))), _GLF_IDENTITY(1u ^ 1u, min(1u ^ 1u, 1u ^ 1u)), 1u ^ 1u))) * 1u)), 1u, uint(_GLF_ZERO(0.0, injectionSwitch.x))), (true ? _GLF_IDENTITY(uvec3((_GLF_IDENTITY(1u ^ 1u, (_GLF_IDENTITY(1u ^ 1u, clamp(_GLF_IDENTITY(1u ^ 1u, ~ (~ (1u ^ 1u))), _GLF_IDENTITY(1u ^ 1u, min(1u ^ 1u, 1u ^ 1u)), 1u ^ 1u))) * 1u)), 1u, uint(_GLF_ZERO(0.0, injectionSwitch.x))), (uvec3((_GLF_IDENTITY(1u ^ 1u, (_GLF_IDENTITY(1u ^ 1u, clamp(_GLF_IDENTITY(1u ^ 1u, ~ (~ (1u ^ 1u))), _GLF_IDENTITY(1u ^ 1u, min(1u ^ 1u, 1u ^ 1u)), 1u ^ 1u))) * 1u)), 1u, uint(_GLF_ZERO(0.0, injectionSwitch.x)))) >> uvec3(0u, 0u, 0u)) : _GLF_FUZZED(uvec3(145575u, 115229u, 147291u))))), (_GLF_IDENTITY(uint(_GLF_IDENTITY(uvec3((_GLF_IDENTITY(1u ^ 1u, (_GLF_IDENTITY(1u ^ 1u, clamp(_GLF_IDENTITY(1u ^ 1u, ~ (~ (1u ^ 1u))), _GLF_IDENTITY(1u ^ 1u, min(1u ^ 1u, 1u ^ 1u)), 1u ^ 1u))) * 1u)), 1u, uint(_GLF_ZERO(0.0, injectionSwitch.x))), (true ? _GLF_IDENTITY(uvec3((_GLF_IDENTITY(1u ^ 1u, (_GLF_IDENTITY(1u ^ 1u, clamp(_GLF_IDENTITY(1u ^ 1u, ~ (~ (1u ^ 1u))), _GLF_IDENTITY(1u ^ 1u, min(1u ^ 1u, 1u ^ 1u)), 1u ^ 1u))) * 1u)), 1u, uint(_GLF_ZERO(0.0, injectionSwitch.x))), (uvec3((_GLF_IDENTITY(1u ^ 1u, (_GLF_IDENTITY(1u ^ 1u, clamp(_GLF_IDENTITY(1u ^ 1u, ~ (~ (1u ^ 1u))), _GLF_IDENTITY(1u ^ 1u, min(1u ^ 1u, 1u ^ 1u)), 1u ^ 1u))) * 1u)), 1u, uint(_GLF_ZERO(0.0, injectionSwitch.x)))) >> uvec3(0u, 0u, 0u)) : _GLF_FUZZED(uvec3(145575u, 115229u, 147291u))))), (uint(_GLF_IDENTITY(uvec3((_GLF_IDENTITY(1u ^ 1u, (_GLF_IDENTITY(1u ^ 1u, clamp(_GLF_IDENTITY(1u ^ 1u, ~ (~ (1u ^ 1u))), _GLF_IDENTITY(1u ^ 1u, min(1u ^ 1u, 1u ^ 1u)), 1u ^ 1u))) * 1u)), 1u, uint(_GLF_ZERO(0.0, injectionSwitch.x))), (true ? _GLF_IDENTITY(uvec3((_GLF_IDENTITY(1u ^ 1u, (_GLF_IDENTITY(1u ^ 1u, clamp(_GLF_IDENTITY(1u ^ 1u, ~ (~ (1u ^ 1u))), _GLF_IDENTITY(1u ^ 1u, min(1u ^ 1u, 1u ^ 1u)), 1u ^ 1u))) * 1u)), 1u, uint(_GLF_ZERO(0.0, injectionSwitch.x))), (uvec3((_GLF_IDENTITY(1u ^ 1u, (_GLF_IDENTITY(1u ^ 1u, clamp(_GLF_IDENTITY(1u ^ 1u, ~ (~ (1u ^ 1u))), _GLF_IDENTITY(1u ^ 1u, min(1u ^ 1u, 1u ^ 1u)), 1u ^ 1u))) * 1u)), 1u, uint(_GLF_ZERO(0.0, injectionSwitch.x)))) >> uvec3(0u, 0u, 0u)) : _GLF_FUZZED(uvec3(145575u, 115229u, 147291u)))))) | (uint(_GLF_IDENTITY(uvec3((_GLF_IDENTITY(1u ^ 1u, (_GLF_IDENTITY(1u ^ 1u, clamp(_GLF_IDENTITY(1u ^ 1u, ~ (~ (1u ^ 1u))), _GLF_IDENTITY(1u ^ 1u, min(1u ^ 1u, 1u ^ 1u)), 1u ^ 1u))) * 1u)), 1u, uint(_GLF_ZERO(0.0, injectionSwitch.x))), (true ? _GLF_IDENTITY(uvec3((_GLF_IDENTITY(1u ^ 1u, (_GLF_IDENTITY(1u ^ 1u, clamp(_GLF_IDENTITY(1u ^ 1u, ~ (~ (1u ^ 1u))), _GLF_IDENTITY(1u ^ 1u, min(1u ^ 1u, 1u ^ 1u)), 1u ^ 1u))) * 1u)), 1u, uint(_GLF_ZERO(0.0, injectionSwitch.x))), (uvec3((_GLF_IDENTITY(1u ^ 1u, (_GLF_IDENTITY(1u ^ 1u, clamp(_GLF_IDENTITY(1u ^ 1u, ~ (~ (1u ^ 1u))), _GLF_IDENTITY(1u ^ 1u, min(1u ^ 1u, 1u ^ 1u)), 1u ^ 1u))) * 1u)), 1u, uint(_GLF_ZERO(0.0, injectionSwitch.x)))) >> uvec3(0u, 0u, 0u)) : _GLF_FUZZED(uvec3(145575u, 115229u, 147291u)))))))) + 0u))), max(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize.x, (_GLF_IDENTITY(gl_WorkGroupSize, uvec3(gl_WorkGroupSize[0], gl_WorkGroupSize[1], gl_WorkGroupSize[2])).x) >> (1u ^ 1u)), uint(uvec3(_GLF_IDENTITY(gl_WorkGroupSize.x, (gl_WorkGroupSize.x) >> (1u ^ 1u)), _GLF_IDENTITY(1u, (1u) ^ 0u), _GLF_IDENTITY(1u, _GLF_IDENTITY(uint(uvec3(1u, 1u, 0u)), max(uint(uvec3(1u, 1u, 0u)), uint(uvec3(1u, 1u, 0u)))))))), _GLF_IDENTITY(gl_WorkGroupSize.x, (gl_WorkGroupSize.x) >> (1u ^ 1u)))), 0u)))), (_GLF_IDENTITY(uint(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize.x, (_GLF_IDENTITY(gl_WorkGroupSize.x, clamp(gl_WorkGroupSize.x, gl_WorkGroupSize.x, gl_WorkGroupSize.x))) >> (1u ^ _GLF_IDENTITY(1u, 0u | (_GLF_IDENTITY(1u, uint(uint(1u))))))), max(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize.x, (gl_WorkGroupSize.x) >> (1u ^ 1u)), uint(uvec3(_GLF_IDENTITY(gl_WorkGroupSize.x, (gl_WorkGroupSize.x) >> (1u ^ 1u)), 1u, 1u))), _GLF_IDENTITY(gl_WorkGroupSize.x, (gl_WorkGroupSize.x) >> (1u ^ 1u)))), 0u), uvec2(1u, 1u) * (uvec2(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize.x, (gl_WorkGroupSize.x) >> _GLF_IDENTITY((_GLF_IDENTITY(1u ^ 1u, (_GLF_IDENTITY(1u ^ 1u, clamp(_GLF_IDENTITY(1u ^ 1u, ~ (~ (1u ^ 1u))), _GLF_IDENTITY(1u ^ 1u, min(1u ^ 1u, 1u ^ 1u)), 1u ^ 1u))) * 1u)), _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec3((_GLF_IDENTITY(1u ^ 1u, (_GLF_IDENTITY(1u ^ 1u, clamp(_GLF_IDENTITY(1u ^ 1u, ~ (~ (1u ^ 1u))), _GLF_IDENTITY(1u ^ 1u, min(1u ^ 1u, 1u ^ 1u)), 1u ^ 1u))) * 1u)), 1u, uint(_GLF_ZERO(0.0, injectionSwitch.x))), (true ? _GLF_IDENTITY(uvec3((_GLF_IDENTITY(1u ^ 1u, (_GLF_IDENTITY(1u ^ 1u, clamp(_GLF_IDENTITY(1u ^ 1u, ~ (~ (1u ^ 1u))), _GLF_IDENTITY(1u ^ 1u, min(1u ^ 1u, 1u ^ 1u)), 1u ^ 1u))) * 1u)), 1u, uint(_GLF_ZERO(0.0, injectionSwitch.x))), (uvec3((_GLF_IDENTITY(1u ^ 1u, (_GLF_IDENTITY(1u ^ 1u, clamp(_GLF_IDENTITY(1u ^ 1u, ~ (~ (1u ^ 1u))), _GLF_IDENTITY(1u ^ 1u, min(1u ^ 1u, 1u ^ 1u)), 1u ^ 1u))) * 1u)), 1u, uint(_GLF_ZERO(0.0, injectionSwitch.x)))) >> uvec3(0u, 0u, 0u)) : _GLF_FUZZED(uvec3(145575u, 115229u, 147291u))))), (_GLF_IDENTITY(uint(_GLF_IDENTITY(uvec3((_GLF_IDENTITY(1u ^ 1u, (_GLF_IDENTITY(1u ^ 1u, clamp(_GLF_IDENTITY(1u ^ 1u, ~ (~ (1u ^ 1u))), _GLF_IDENTITY(1u ^ 1u, min(1u ^ 1u, 1u ^ 1u)), 1u ^ 1u))) * 1u)), 1u, uint(_GLF_ZERO(0.0, injectionSwitch.x))), (true ? _GLF_IDENTITY(uvec3((_GLF_IDENTITY(1u ^ 1u, (_GLF_IDENTITY(1u ^ 1u, clamp(_GLF_IDENTITY(1u ^ 1u, ~ (~ (1u ^ 1u))), _GLF_IDENTITY(1u ^ 1u, min(1u ^ 1u, 1u ^ 1u)), 1u ^ 1u))) * 1u)), 1u, uint(_GLF_ZERO(0.0, injectionSwitch.x))), (uvec3((_GLF_IDENTITY(1u ^ 1u, (_GLF_IDENTITY(1u ^ 1u, clamp(_GLF_IDENTITY(1u ^ 1u, ~ (~ (1u ^ 1u))), _GLF_IDENTITY(1u ^ 1u, min(1u ^ 1u, 1u ^ 1u)), 1u ^ 1u))) * 1u)), 1u, uint(_GLF_ZERO(0.0, injectionSwitch.x)))) >> uvec3(0u, 0u, 0u)) : _GLF_FUZZED(uvec3(145575u, 115229u, 147291u))))), (uint(_GLF_IDENTITY(uvec3((_GLF_IDENTITY(1u ^ 1u, (_GLF_IDENTITY(1u ^ 1u, clamp(_GLF_IDENTITY(1u ^ 1u, ~ (~ (1u ^ 1u))), _GLF_IDENTITY(1u ^ 1u, min(1u ^ 1u, 1u ^ 1u)), 1u ^ 1u))) * 1u)), 1u, uint(_GLF_ZERO(0.0, injectionSwitch.x))), (true ? _GLF_IDENTITY(uvec3((_GLF_IDENTITY(1u ^ 1u, (_GLF_IDENTITY(1u ^ 1u, clamp(_GLF_IDENTITY(1u ^ 1u, ~ (~ (1u ^ 1u))), _GLF_IDENTITY(1u ^ 1u, min(1u ^ 1u, 1u ^ 1u)), 1u ^ 1u))) * 1u)), 1u, uint(_GLF_ZERO(0.0, injectionSwitch.x))), (uvec3((_GLF_IDENTITY(1u ^ 1u, (_GLF_IDENTITY(1u ^ 1u, clamp(_GLF_IDENTITY(1u ^ 1u, ~ (~ (1u ^ 1u))), _GLF_IDENTITY(1u ^ 1u, min(1u ^ 1u, 1u ^ 1u)), 1u ^ 1u))) * 1u)), 1u, uint(_GLF_ZERO(0.0, injectionSwitch.x)))) >> uvec3(0u, 0u, 0u)) : _GLF_FUZZED(uvec3(145575u, 115229u, 147291u)))))) | (uint(_GLF_IDENTITY(uvec3((_GLF_IDENTITY(1u ^ 1u, (_GLF_IDENTITY(1u ^ 1u, clamp(_GLF_IDENTITY(1u ^ 1u, ~ (~ (1u ^ 1u))), _GLF_IDENTITY(1u ^ 1u, min(1u ^ 1u, 1u ^ 1u)), 1u ^ 1u))) * 1u)), 1u, uint(_GLF_ZERO(0.0, injectionSwitch.x))), (true ? _GLF_IDENTITY(uvec3((_GLF_IDENTITY(1u ^ 1u, (_GLF_IDENTITY(1u ^ 1u, clamp(_GLF_IDENTITY(1u ^ 1u, ~ (~ (1u ^ 1u))), _GLF_IDENTITY(1u ^ 1u, min(1u ^ 1u, 1u ^ 1u)), 1u ^ 1u))) * 1u)), 1u, uint(_GLF_ZERO(0.0, injectionSwitch.x))), (uvec3((_GLF_IDENTITY(1u ^ 1u, (_GLF_IDENTITY(1u ^ 1u, clamp(_GLF_IDENTITY(1u ^ 1u, ~ (~ (1u ^ 1u))), _GLF_IDENTITY(1u ^ 1u, min(1u ^ 1u, 1u ^ 1u)), 1u ^ 1u))) * 1u)), 1u, uint(_GLF_ZERO(0.0, injectionSwitch.x)))) >> uvec3(0u, 0u, 0u)) : _GLF_FUZZED(uvec3(145575u, 115229u, 147291u)))))))) + 0u))), max(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize.x, (_GLF_IDENTITY(gl_WorkGroupSize, uvec3(gl_WorkGroupSize[0], gl_WorkGroupSize[1], gl_WorkGroupSize[2])).x) >> (1u ^ 1u)), uint(uvec3(_GLF_IDENTITY(gl_WorkGroupSize.x, (gl_WorkGroupSize.x) >> (1u ^ 1u)), _GLF_IDENTITY(1u, (1u) ^ 0u), _GLF_IDENTITY(1u, _GLF_IDENTITY(uint(uvec3(1u, 1u, 0u)), max(uint(uvec3(1u, 1u, 0u)), uint(uvec3(1u, 1u, 0u)))))))), _GLF_IDENTITY(gl_WorkGroupSize.x, (gl_WorkGroupSize.x) >> (1u ^ 1u)))), 0u)))), 0u ^ (uint(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize.x, (_GLF_IDENTITY(gl_WorkGroupSize.x, clamp(gl_WorkGroupSize.x, gl_WorkGroupSize.x, gl_WorkGroupSize.x))) >> (1u ^ _GLF_IDENTITY(1u, 0u | (_GLF_IDENTITY(1u, uint(uint(1u))))))), max(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize.x, (gl_WorkGroupSize.x) >> (1u ^ 1u)), uint(uvec3(_GLF_IDENTITY(gl_WorkGroupSize.x, (gl_WorkGroupSize.x) >> (1u ^ 1u)), 1u, 1u))), _GLF_IDENTITY(gl_WorkGroupSize.x, (gl_WorkGroupSize.x) >> (1u ^ 1u)))), 0u), uvec2(1u, 1u) * (uvec2(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize.x, (gl_WorkGroupSize.x) >> _GLF_IDENTITY((_GLF_IDENTITY(1u ^ 1u, (_GLF_IDENTITY(1u ^ 1u, clamp(_GLF_IDENTITY(1u ^ 1u, ~ (~ (1u ^ 1u))), _GLF_IDENTITY(1u ^ 1u, min(1u ^ 1u, 1u ^ 1u)), 1u ^ 1u))) * 1u)), _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec3((_GLF_IDENTITY(1u ^ 1u, (_GLF_IDENTITY(1u ^ 1u, clamp(_GLF_IDENTITY(1u ^ 1u, ~ (~ (1u ^ 1u))), _GLF_IDENTITY(1u ^ 1u, min(1u ^ 1u, 1u ^ 1u)), 1u ^ 1u))) * 1u)), 1u, uint(_GLF_ZERO(0.0, injectionSwitch.x))), (true ? _GLF_IDENTITY(uvec3((_GLF_IDENTITY(1u ^ 1u, (_GLF_IDENTITY(1u ^ 1u, clamp(_GLF_IDENTITY(1u ^ 1u, ~ (~ (1u ^ 1u))), _GLF_IDENTITY(1u ^ 1u, min(1u ^ 1u, 1u ^ 1u)), 1u ^ 1u))) * 1u)), 1u, uint(_GLF_ZERO(0.0, injectionSwitch.x))), (uvec3((_GLF_IDENTITY(1u ^ 1u, (_GLF_IDENTITY(1u ^ 1u, clamp(_GLF_IDENTITY(1u ^ 1u, ~ (~ (1u ^ 1u))), _GLF_IDENTITY(1u ^ 1u, min(1u ^ 1u, 1u ^ 1u)), 1u ^ 1u))) * 1u)), 1u, uint(_GLF_ZERO(0.0, injectionSwitch.x)))) >> uvec3(0u, 0u, 0u)) : _GLF_FUZZED(uvec3(145575u, 115229u, 147291u))))), (_GLF_IDENTITY(uint(_GLF_IDENTITY(uvec3((_GLF_IDENTITY(1u ^ 1u, (_GLF_IDENTITY(1u ^ 1u, clamp(_GLF_IDENTITY(1u ^ 1u, ~ (~ (1u ^ 1u))), _GLF_IDENTITY(1u ^ 1u, min(1u ^ 1u, 1u ^ 1u)), 1u ^ 1u))) * 1u)), 1u, uint(_GLF_ZERO(0.0, injectionSwitch.x))), (true ? _GLF_IDENTITY(uvec3((_GLF_IDENTITY(1u ^ 1u, (_GLF_IDENTITY(1u ^ 1u, clamp(_GLF_IDENTITY(1u ^ 1u, ~ (~ (1u ^ 1u))), _GLF_IDENTITY(1u ^ 1u, min(1u ^ 1u, 1u ^ 1u)), 1u ^ 1u))) * 1u)), 1u, uint(_GLF_ZERO(0.0, injectionSwitch.x))), (uvec3((_GLF_IDENTITY(1u ^ 1u, (_GLF_IDENTITY(1u ^ 1u, clamp(_GLF_IDENTITY(1u ^ 1u, ~ (~ (1u ^ 1u))), _GLF_IDENTITY(1u ^ 1u, min(1u ^ 1u, 1u ^ 1u)), 1u ^ 1u))) * 1u)), 1u, uint(_GLF_ZERO(0.0, injectionSwitch.x)))) >> uvec3(0u, 0u, 0u)) : _GLF_FUZZED(uvec3(145575u, 115229u, 147291u))))), (uint(_GLF_IDENTITY(uvec3((_GLF_IDENTITY(1u ^ 1u, (_GLF_IDENTITY(1u ^ 1u, clamp(_GLF_IDENTITY(1u ^ 1u, ~ (~ (1u ^ 1u))), _GLF_IDENTITY(1u ^ 1u, min(1u ^ 1u, 1u ^ 1u)), 1u ^ 1u))) * 1u)), 1u, uint(_GLF_ZERO(0.0, injectionSwitch.x))), (true ? _GLF_IDENTITY(uvec3((_GLF_IDENTITY(1u ^ 1u, (_GLF_IDENTITY(1u ^ 1u, clamp(_GLF_IDENTITY(1u ^ 1u, ~ (~ (1u ^ 1u))), _GLF_IDENTITY(1u ^ 1u, min(1u ^ 1u, 1u ^ 1u)), 1u ^ 1u))) * 1u)), 1u, uint(_GLF_ZERO(0.0, injectionSwitch.x))), (uvec3((_GLF_IDENTITY(1u ^ 1u, (_GLF_IDENTITY(1u ^ 1u, clamp(_GLF_IDENTITY(1u ^ 1u, ~ (~ (1u ^ 1u))), _GLF_IDENTITY(1u ^ 1u, min(1u ^ 1u, 1u ^ 1u)), 1u ^ 1u))) * 1u)), 1u, uint(_GLF_ZERO(0.0, injectionSwitch.x)))) >> uvec3(0u, 0u, 0u)) : _GLF_FUZZED(uvec3(145575u, 115229u, 147291u)))))) | (uint(_GLF_IDENTITY(uvec3((_GLF_IDENTITY(1u ^ 1u, (_GLF_IDENTITY(1u ^ 1u, clamp(_GLF_IDENTITY(1u ^ 1u, ~ (~ (1u ^ 1u))), _GLF_IDENTITY(1u ^ 1u, min(1u ^ 1u, 1u ^ 1u)), 1u ^ 1u))) * 1u)), 1u, uint(_GLF_ZERO(0.0, injectionSwitch.x))), (true ? _GLF_IDENTITY(uvec3((_GLF_IDENTITY(1u ^ 1u, (_GLF_IDENTITY(1u ^ 1u, clamp(_GLF_IDENTITY(1u ^ 1u, ~ (~ (1u ^ 1u))), _GLF_IDENTITY(1u ^ 1u, min(1u ^ 1u, 1u ^ 1u)), 1u ^ 1u))) * 1u)), 1u, uint(_GLF_ZERO(0.0, injectionSwitch.x))), (uvec3((_GLF_IDENTITY(1u ^ 1u, (_GLF_IDENTITY(1u ^ 1u, clamp(_GLF_IDENTITY(1u ^ 1u, ~ (~ (1u ^ 1u))), _GLF_IDENTITY(1u ^ 1u, min(1u ^ 1u, 1u ^ 1u)), 1u ^ 1u))) * 1u)), 1u, uint(_GLF_ZERO(0.0, injectionSwitch.x)))) >> uvec3(0u, 0u, 0u)) : _GLF_FUZZED(uvec3(145575u, 115229u, 147291u)))))))) + 0u))), max(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize.x, (_GLF_IDENTITY(gl_WorkGroupSize, uvec3(gl_WorkGroupSize[0], gl_WorkGroupSize[1], gl_WorkGroupSize[2])).x) >> (1u ^ 1u)), uint(uvec3(_GLF_IDENTITY(gl_WorkGroupSize.x, (gl_WorkGroupSize.x) >> (1u ^ 1u)), _GLF_IDENTITY(1u, (1u) ^ 0u), _GLF_IDENTITY(1u, _GLF_IDENTITY(uint(uvec3(1u, 1u, 0u)), max(uint(uvec3(1u, 1u, 0u)), uint(uvec3(1u, 1u, 0u)))))))), _GLF_IDENTITY(gl_WorkGroupSize.x, (gl_WorkGroupSize.x) >> (1u ^ 1u)))), 0u))))))) << 0u), uint(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize.x, (_GLF_IDENTITY(gl_WorkGroupSize.x, clamp(gl_WorkGroupSize.x, gl_WorkGroupSize.x, gl_WorkGroupSize.x))) >> (1u ^ 1u)), max(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize.x, (gl_WorkGroupSize.x) >> (1u ^ 1u)), uint(uvec3(_GLF_IDENTITY(gl_WorkGroupSize.x, (gl_WorkGroupSize.x) >> (1u ^ 1u)), 1u, 1u))), _GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize.x, (gl_WorkGroupSize.x) >> (1u ^ 1u)), min(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize.x, (gl_WorkGroupSize.x) >> (1u ^ 1u)), (_GLF_IDENTITY(gl_WorkGroupSize.x, (gl_WorkGroupSize.x) >> (1u ^ 1u))) - 0u), _GLF_IDENTITY(gl_WorkGroupSize.x, (gl_WorkGroupSize.x) >> (1u ^ 1u)))))), 0u), uvec2(1u, 1u) * (_GLF_IDENTITY(uvec2(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize.x, (gl_WorkGroupSize.x) >> (1u ^ 1u)), max(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize.x, (gl_WorkGroupSize.x) >> (1u ^ 1u)), uint(uvec3(_GLF_IDENTITY(gl_WorkGroupSize.x, (gl_WorkGroupSize.x) >> (1u ^ 1u)), _GLF_IDENTITY(1u, (1u) ^ 0u), 1u))), _GLF_IDENTITY(gl_WorkGroupSize.x, (gl_WorkGroupSize.x) >> (1u ^ 1u)))), 0u), uvec2(0u, 0u) | (_GLF_IDENTITY(uvec2(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize.x, (gl_WorkGroupSize.x) >> (1u ^ 1u)), max(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize.x, (gl_WorkGroupSize.x) >> (1u ^ 1u)), uint(uvec3(_GLF_IDENTITY(gl_WorkGroupSize.x, (gl_WorkGroupSize.x) >> (1u ^ 1u)), _GLF_IDENTITY(1u, (1u) ^ 0u), 1u))), _GLF_IDENTITY(gl_WorkGroupSize.x, (gl_WorkGroupSize.x) >> (1u ^ 1u)))), 0u), (uvec2(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize.x, (gl_WorkGroupSize.x) >> (1u ^ 1u)), max(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize.x, (gl_WorkGroupSize.x) >> (1u ^ 1u)), uint(uvec3(_GLF_IDENTITY(gl_WorkGroupSize.x, (gl_WorkGroupSize.x) >> (1u ^ 1u)), _GLF_IDENTITY(1u, (1u) ^ 0u), 1u))), _GLF_IDENTITY(gl_WorkGroupSize.x, (gl_WorkGroupSize.x) >> (1u ^ 1u)))), 0u)) - uvec2(0u, 0u))))))))))), uint(uvec2(uint(_GLF_IDENTITY(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize.x, (gl_WorkGroupSize.x) >> (_GLF_IDENTITY(1u, uint(uvec2(_GLF_IDENTITY(1u, ~ (~ (1u))), 0u))) ^ 1u)), max(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize.x, (gl_WorkGroupSize.x) >> (1u ^ 1u)), uint(uvec3(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize.x, ~ (~ (_GLF_IDENTITY(gl_WorkGroupSize.x, _GLF_IDENTITY(uint(uvec3(_GLF_IDENTITY(gl_WorkGroupSize.x, (true ? gl_WorkGroupSize.x : _GLF_FUZZED(num_workgroup))), 1u, 1u)), uint(uvec2(uint(uvec3(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize.x, (true ? gl_WorkGroupSize.x : _GLF_FUZZED(num_workgroup))), (false ? _GLF_FUZZED(subgroup_id) : _GLF_IDENTITY(gl_WorkGroupSize.x, (true ? gl_WorkGroupSize.x : _GLF_FUZZED(num_workgroup))))), 1u, 1u)), 1u))))))), (gl_WorkGroupSize.x) >> (1u ^ _GLF_IDENTITY(1u, (true ? 1u : _GLF_FUZZED(148170u))))), 1u, 1u))), _GLF_IDENTITY(gl_WorkGroupSize.x, (_GLF_IDENTITY(gl_WorkGroupSize.x, (gl_WorkGroupSize.x) << 0u)) >> (1u ^ 1u)))), 0u), (_GLF_IDENTITY(uvec2(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize.x, (gl_WorkGroupSize.x) >> (_GLF_IDENTITY(1u, uint(uvec2(_GLF_IDENTITY(1u, ~ (~ (1u))), 0u))) ^ 1u)), max(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize.x, (gl_WorkGroupSize.x) >> (1u ^ 1u)), uint(uvec3(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize.x, ~ (~ (_GLF_IDENTITY(gl_WorkGroupSize.x, _GLF_IDENTITY(uint(uvec3(_GLF_IDENTITY(gl_WorkGroupSize.x, (true ? gl_WorkGroupSize.x : _GLF_FUZZED(num_workgroup))), 1u, 1u)), uint(uvec2(uint(uvec3(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize.x, (true ? gl_WorkGroupSize.x : _GLF_FUZZED(num_workgroup))), (false ? _GLF_FUZZED(subgroup_id) : _GLF_IDENTITY(gl_WorkGroupSize.x, (true ? gl_WorkGroupSize.x : _GLF_FUZZED(num_workgroup))))), 1u, 1u)), 1u))))))), (gl_WorkGroupSize.x) >> (1u ^ _GLF_IDENTITY(1u, (true ? 1u : _GLF_FUZZED(148170u))))), 1u, 1u))), _GLF_IDENTITY(gl_WorkGroupSize.x, (_GLF_IDENTITY(gl_WorkGroupSize.x, (gl_WorkGroupSize.x) << 0u)) >> (1u ^ 1u)))), 0u), (true ? uvec2(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize.x, (gl_WorkGroupSize.x) >> (_GLF_IDENTITY(1u, uint(uvec2(_GLF_IDENTITY(1u, ~ (~ (1u))), 0u))) ^ 1u)), max(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize.x, (gl_WorkGroupSize.x) >> (1u ^ 1u)), uint(uvec3(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize.x, ~ (~ (_GLF_IDENTITY(gl_WorkGroupSize.x, _GLF_IDENTITY(uint(uvec3(_GLF_IDENTITY(gl_WorkGroupSize.x, (true ? gl_WorkGroupSize.x : _GLF_FUZZED(num_workgroup))), 1u, 1u)), uint(uvec2(uint(uvec3(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize.x, (true ? gl_WorkGroupSize.x : _GLF_FUZZED(num_workgroup))), (false ? _GLF_FUZZED(subgroup_id) : _GLF_IDENTITY(gl_WorkGroupSize.x, (true ? gl_WorkGroupSize.x : _GLF_FUZZED(num_workgroup))))), 1u, 1u)), 1u))))))), (gl_WorkGroupSize.x) >> (1u ^ _GLF_IDENTITY(1u, (true ? 1u : _GLF_FUZZED(148170u))))), 1u, 1u))), _GLF_IDENTITY(gl_WorkGroupSize.x, (_GLF_IDENTITY(gl_WorkGroupSize.x, (gl_WorkGroupSize.x) << 0u)) >> (1u ^ 1u)))), 0u) : _GLF_FUZZED(uvec2(167935u, 39096u))))) ^ uvec2(0u, 0u)), uvec2(1u, 1u) * (uvec2(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize.x, (gl_WorkGroupSize.x) >> (1u ^ 1u)), max(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize.x, _GLF_IDENTITY((_GLF_IDENTITY(gl_WorkGroupSize.x, (_GLF_IDENTITY(gl_WorkGroupSize.x, (_GLF_IDENTITY(gl_WorkGroupSize.x, (true ? gl_WorkGroupSize.x : _GLF_FUZZED(num_workgroup)))) / 1u)) >> 0u)), max((_GLF_IDENTITY(gl_WorkGroupSize.x, (_GLF_IDENTITY(gl_WorkGroupSize.x, (_GLF_IDENTITY(gl_WorkGroupSize.x, _GLF_IDENTITY((true ? gl_WorkGroupSize.x : _GLF_IDENTITY(_GLF_FUZZED(num_workgroup), min(_GLF_FUZZED(num_workgroup), _GLF_FUZZED(num_workgroup)))), ((true ? gl_WorkGroupSize.x : _GLF_IDENTITY(_GLF_FUZZED(num_workgroup), min(_GLF_FUZZED(num_workgroup), _GLF_FUZZED(num_workgroup))))) - 0u))) / 1u)) >> 0u)), (_GLF_IDENTITY(gl_WorkGroupSize.x, (_GLF_IDENTITY(gl_WorkGroupSize.x, (_GLF_IDENTITY(gl_WorkGroupSize.x, (true ? _GLF_IDENTITY(gl_WorkGroupSize.x, (gl_WorkGroupSize.x) | 0u) : _GLF_FUZZED(num_workgroup)))) / 1u)) >> 0u)))) >> (_GLF_IDENTITY(1u ^ 1u, (_GLF_IDENTITY(1u ^ 1u, (false ? _GLF_FUZZED(subgroup_id) : 1u ^ 1u))) << 0u))), uint(uvec3(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize.x, (gl_WorkGroupSize.x) | 0u), (gl_WorkGroupSize.x) >> (1u ^ _GLF_IDENTITY(1u, (1u) | (1u)))), 1u, 1u))), _GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize.x, uint(uvec4(gl_WorkGroupSize.x, 0u, 1u, 1u))), _GLF_IDENTITY((gl_WorkGroupSize.x) >> (1u ^ 1u), 0u | ((gl_WorkGroupSize.x) >> (1u ^ 1u)))))), 0u)))), 0u))))));
 uint workgroup_id = _GLF_IDENTITY(gl_WorkGroupID, clamp(_GLF_IDENTITY(gl_WorkGroupID, uvec3(uvec4(_GLF_IDENTITY(gl_WorkGroupID, clamp(gl_WorkGroupID, gl_WorkGroupID, gl_WorkGroupID)), 1u))), gl_WorkGroupID, gl_WorkGroupID)).x;
 if(_GLF_DEAD(false))
  barrier();
 uint workgroup_base = workgroup_size * workgroup_id;
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     barrier();
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > ((_GLF_IDENTITY(82314 & (0 << _GLF_IDENTITY(int(1), int(1))), (82314 & (0 << _GLF_IDENTITY(int(1), int(1)))) + 0)) | 0)); _injected_loop_counter --)
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))))
        return;
      }
     return;
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   do
    {
     return;
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 uint virtual_gid = workgroup_base + subgroup_id * subgroup_size + subgroup_local_id;
 if(_GLF_DEAD(false))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
    return;
   barrier();
  }
 uint next_virtual_gid = _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, uint(_GLF_IDENTITY(uvec4(workgroup_base, 0u, 1u, 1u), min(uvec4(workgroup_base, 0u, 1u, 1u), uvec4(workgroup_base, 0u, 1u, 1u))))) + _GLF_IDENTITY(subgroup_id, (subgroup_id) | (subgroup_id)) * subgroup_size + ((subgroup_local_id + 1) % subgroup_size), (true ? _GLF_IDENTITY(workgroup_base, uint(uvec4(_GLF_IDENTITY(workgroup_base, 1u * (workgroup_base)), _GLF_IDENTITY(0u, 0u | (0u)), 1u, 1u))) + _GLF_IDENTITY(subgroup_id, (subgroup_id) | (subgroup_id)) * subgroup_size + ((subgroup_local_id + 1) % subgroup_size) : _GLF_FUZZED(uaddCarry(virtual_gid, 108627u, workgroup_size))));
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, false, false)))))
    barrier();
   if(_GLF_DEAD(false))
    return;
   barrier();
  }
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _GLF_IDENTITY(_injected_loop_counter --, (_GLF_IDENTITY(_injected_loop_counter --, 0 ^ (_injected_loop_counter --))) + 0))
  {
   buf[virtual_gid] = 1;
   if(_GLF_DEAD(false))
    continue;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)), false, false), bvec3(bvec4(bvec3(bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)), false, false), true)))), (bool(_GLF_IDENTITY(bvec3(bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)), false, false), bvec3(bvec4(bvec3(bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)), false, false), true))))) && true)))))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        return;
      }
     else
      {
      }
     return;
     if(_GLF_DEAD(false))
      return;
    }
  }
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(_GLF_IDENTITY(mat2(injectionSwitch.y, 1.0, 0.0, 1.0), (false ? _GLF_FUZZED(mat2(5.2, 1.2, 2.5, 977.365)) : mat2(injectionSwitch.y, 1.0, 0.0, 1.0)))), (float(_GLF_IDENTITY(mat2(injectionSwitch.y, 1.0, 0.0, 1.0), (false ? _GLF_FUZZED(mat2(5.2, 1.2, 2.5, 977.365)) : mat2(injectionSwitch.y, 1.0, 0.0, 1.0))))) - 0.0))))))
    barrier();
   if(subgroup_local_id + 1 < subgroup_size)
    {
     do
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(_GLF_DEAD(false), true, true), _GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(bvec3(_GLF_DEAD(false), true, true)), _GLF_IDENTITY(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(bvec3(_GLF_IDENTITY(bvec3(_GLF_DEAD(false), true, true), bvec3(bvec3(bvec3(_GLF_DEAD(false), true, true)))))), _GLF_IDENTITY(bvec3(bvec3(bvec3(bvec3(bvec3(_GLF_DEAD(false), true, true))))), bvec3(bvec3(bvec3(bvec3(bvec3(bvec3(bvec3(_GLF_DEAD(false), true, true))))))))), bvec3(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec3(_GLF_DEAD(false), true, true))), bvec3(bvec3(bvec3(bvec3(bvec3(_GLF_DEAD(false), true, true))))))), bvec3(bvec4(bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec3(_GLF_DEAD(false), true, true))), bvec3(bvec3(bvec3(bvec3(bvec3(_GLF_DEAD(false), true, true))))))), false))), _GLF_IDENTITY(bvec3(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec3(_GLF_DEAD(false), true, true))), bvec3(bvec3(bvec3(bvec3(bvec3(_GLF_DEAD(false), true, true))))))), bvec3(bvec4(bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec3(_GLF_DEAD(false), true, true))), bvec3(bvec3(bvec3(bvec3(bvec3(_GLF_DEAD(false), true, true))))))), false))), bvec3(bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec3(_GLF_DEAD(false), true, true))), bvec3(bvec3(bvec3(bvec3(bvec3(_GLF_DEAD(false), true, true))))))), bvec3(bvec4(bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec3(_GLF_DEAD(false), true, true))), bvec3(bvec3(bvec3(bvec3(bvec3(_GLF_DEAD(false), true, true))))))), false)))))), true)), bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec3(_GLF_DEAD(false), true, true))), bvec3(bvec3(bvec3(bvec3(bvec3(_GLF_DEAD(false), true, true))))))), bvec3(bvec4(bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec3(_GLF_DEAD(false), true, true))), bvec3(bvec3(bvec3(bvec3(bvec3(_GLF_DEAD(false), true, true))))))), false))), bvec3(bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec3(_GLF_DEAD(false), true, true))), bvec3(bvec3(bvec3(bvec3(bvec3(_GLF_DEAD(false), true, true))))))), bvec3(bvec4(bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec3(_GLF_DEAD(false), true, true))), bvec3(bvec3(bvec3(bvec3(bvec3(_GLF_DEAD(false), true, true))))))), false)))))), true))), bvec3(bvec4(bvec3(bvec3(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec3(_GLF_DEAD(false), true, true))), bvec3(bvec3(bvec3(bvec3(bvec3(_GLF_DEAD(false), true, true))))))), bvec3(bvec4(bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec3(_GLF_DEAD(false), true, true))), bvec3(bvec3(bvec3(bvec3(bvec3(_GLF_DEAD(false), true, true))))))), false))), bvec3(bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec3(_GLF_DEAD(false), true, true))), bvec3(bvec3(bvec3(bvec3(bvec3(_GLF_DEAD(false), true, true))))))), bvec3(bvec4(bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec3(_GLF_DEAD(false), true, true))), bvec3(bvec3(bvec3(bvec3(bvec3(_GLF_DEAD(false), true, true))))))), false)))))), true))), true))))))))), bvec3(_GLF_IDENTITY(bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec3(_GLF_DEAD(false), true, true))), bvec3(bvec3(bvec3(bvec3(bvec3(_GLF_DEAD(false), true, true)))))))), bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec3(_GLF_DEAD(false), true, true))), _GLF_IDENTITY(bvec3(bvec3(bvec3(bvec3(bvec3(_GLF_DEAD(false), true, true))))), bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec3(bvec3(bvec3(bvec3(_GLF_DEAD(false), true, true)))))), bvec3(bvec3(bvec3(bvec3(bvec3(bvec3(bvec3(bvec3(_GLF_DEAD(false), true, true))))))))))))), _GLF_IDENTITY(bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec3(_GLF_DEAD(false), true, true))), _GLF_IDENTITY(bvec3(bvec3(bvec3(bvec3(bvec3(_GLF_DEAD(false), true, true))))), bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec3(bvec3(bvec3(bvec3(_GLF_DEAD(false), true, true)))))), bvec3(bvec3(bvec3(bvec3(bvec3(bvec3(bvec3(bvec3(_GLF_DEAD(false), true, true))))))))))))))), bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec3(_GLF_DEAD(false), true, true))), _GLF_IDENTITY(bvec3(bvec3(bvec3(bvec3(bvec3(_GLF_DEAD(false), true, true))))), bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec3(bvec3(bvec3(bvec3(_GLF_DEAD(false), true, true)))))), bvec3(bvec3(bvec3(bvec3(bvec3(bvec3(bvec3(bvec3(_GLF_DEAD(false), true, true))))))))))))))), bvec3(bvec4(bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec3(_GLF_DEAD(false), true, true))), _GLF_IDENTITY(bvec3(bvec3(bvec3(bvec3(bvec3(_GLF_DEAD(false), true, true))))), bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec3(bvec3(bvec3(bvec3(_GLF_DEAD(false), true, true)))))), bvec3(bvec3(bvec3(bvec3(bvec3(bvec3(bvec3(bvec3(_GLF_DEAD(false), true, true))))))))))))))), true))))))))))))), bvec3(bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(bvec3(bvec3(_GLF_DEAD(false), true, true))), bvec3(bvec3(bvec3(bvec3(bvec3(_GLF_DEAD(false), true, true)))))), bvec3(bvec3(bvec3(bvec3(bvec3(_GLF_DEAD(false), true, true))))))), bvec3(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec3(_GLF_DEAD(false), true, _GLF_IDENTITY(true, ! (! (true)))))), bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec3(_GLF_DEAD(false), true, true)), bvec3(bvec4(bvec3(bvec3(_GLF_DEAD(false), true, true)), true))))))))), _GLF_IDENTITY(bvec3(bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec3(_GLF_DEAD(false), true, _GLF_IDENTITY(true, ! (! (true)))))), bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec3(_GLF_DEAD(false), true, true)), bvec3(bvec4(bvec3(bvec3(_GLF_DEAD(false), true, true)), true))))))))))), bvec3(bvec3(bvec3(bvec3(bvec3(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(bvec3(bvec3(_GLF_DEAD(false), true, _GLF_IDENTITY(true, ! (! _GLF_IDENTITY((true), (_GLF_IDENTITY((true), bool(bool((true))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), bvec3(bvec4(bvec3(bvec3(bvec3(_GLF_DEAD(false), true, _GLF_IDENTITY(true, ! (! _GLF_IDENTITY((true), (_GLF_IDENTITY((true), bool(bool((true))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), true))), bvec3(bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(bvec3(_GLF_DEAD(false), true, true)), bvec3(bvec4(bvec3(bvec3(_GLF_DEAD(false), true, true)), true)))), bvec3(bvec4(bvec3(_GLF_IDENTITY(bvec3(bvec3(_GLF_DEAD(false), true, true)), bvec3(bvec4(bvec3(bvec3(_GLF_DEAD(false), true, true)), true)))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))))))))), bvec3(bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec3(_GLF_DEAD(false), true, true))), bvec3(bvec3(bvec3(bvec3(bvec3(_GLF_DEAD(false), true, true)))))))))))))))))), bvec3(bvec3(bvec3(bvec3(bvec3(_GLF_DEAD(false), true, true))))))), bvec3(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(_GLF_DEAD(false), true, true), _GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(bvec3(_GLF_DEAD(false), true, true)), _GLF_IDENTITY(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec3(_GLF_DEAD(false), true, true))), bvec3(bvec3(bvec3(bvec3(bvec3(_GLF_DEAD(false), true, true))))))), bvec3(_GLF_IDENTITY(bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec3(_GLF_DEAD(false), true, true))), bvec3(bvec3(bvec3(bvec3(bvec3(_GLF_DEAD(false), true, true)))))))), bvec3(bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec3(_GLF_DEAD(false), true, true))), bvec3(bvec3(bvec3(bvec3(bvec3(_GLF_DEAD(false), true, true))))))))))))), bvec3(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec3(_GLF_DEAD(false), true, true))), bvec3(bvec3(bvec3(bvec3(bvec3(_GLF_DEAD(false), true, true))))))), bvec3(_GLF_IDENTITY(bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec3(_GLF_DEAD(false), true, true))), bvec3(bvec3(bvec3(bvec3(bvec3(_GLF_DEAD(false), true, true)))))))), bvec3(bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec3(_GLF_DEAD(false), true, true))), bvec3(bvec3(bvec3(bvec3(bvec3(_GLF_DEAD(false), true, true))))))))))))), _GLF_IDENTITY(bvec3(bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec3(_GLF_DEAD(false), true, true))), bvec3(bvec3(bvec3(bvec3(bvec3(_GLF_DEAD(false), true, true))))))), bvec3(_GLF_IDENTITY(bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec3(_GLF_DEAD(false), true, true))), bvec3(bvec3(bvec3(bvec3(bvec3(_GLF_DEAD(false), true, true)))))))), bvec3(bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec3(_GLF_DEAD(false), true, true))), bvec3(bvec3(bvec3(bvec3(bvec3(_GLF_DEAD(false), true, true))))))))))))))), bvec3(bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec3(_GLF_DEAD(false), true, true))), bvec3(bvec3(bvec3(bvec3(bvec3(_GLF_DEAD(false), true, true))))))), bvec3(_GLF_IDENTITY(bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec3(_GLF_DEAD(false), true, true))), bvec3(bvec3(bvec3(bvec3(bvec3(_GLF_DEAD(false), true, true)))))))), bvec3(bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec3(_GLF_DEAD(false), true, true))), bvec3(bvec3(bvec3(bvec3(bvec3(_GLF_DEAD(false), true, true))))))))))))))))))))))), bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec3(_GLF_DEAD(false), true, true)), _GLF_IDENTITY(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec3(_GLF_DEAD(false), true, true))), bvec3(bvec3(bvec3(bvec3(bvec3(_GLF_DEAD(false), true, true))))))), bvec3(_GLF_IDENTITY(bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec3(_GLF_DEAD(false), true, true))), bvec3(bvec3(bvec3(bvec3(bvec3(_GLF_DEAD(false), true, true)))))))), bvec3(bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec3(_GLF_DEAD(false), true, true))), bvec3(bvec3(bvec3(bvec3(bvec3(_GLF_DEAD(false), true, true))))))))))))), bvec3(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec3(_GLF_DEAD(false), true, true))), bvec3(bvec3(bvec3(bvec3(bvec3(_GLF_DEAD(false), true, true))))))), bvec3(_GLF_IDENTITY(bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec3(_GLF_DEAD(false), true, true))), bvec3(bvec3(bvec3(bvec3(bvec3(_GLF_DEAD(false), true, true)))))))), bvec3(bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec3(_GLF_DEAD(false), true, true))), bvec3(bvec3(bvec3(bvec3(bvec3(_GLF_DEAD(false), true, true))))))))))))), _GLF_IDENTITY(bvec3(bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec3(_GLF_DEAD(false), true, true))), bvec3(bvec3(bvec3(bvec3(bvec3(_GLF_DEAD(false), true, true))))))), bvec3(_GLF_IDENTITY(bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec3(_GLF_DEAD(false), true, true))), bvec3(bvec3(bvec3(bvec3(bvec3(_GLF_DEAD(false), true, true)))))))), bvec3(bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec3(_GLF_DEAD(false), true, true))), bvec3(bvec3(bvec3(bvec3(bvec3(_GLF_DEAD(false), true, true))))))))))))))), bvec3(bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec3(_GLF_DEAD(false), true, true))), bvec3(bvec3(bvec3(bvec3(bvec3(_GLF_DEAD(false), true, true))))))), bvec3(_GLF_IDENTITY(bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec3(_GLF_DEAD(false), true, true))), bvec3(bvec3(bvec3(bvec3(bvec3(_GLF_DEAD(false), true, true)))))))), bvec3(bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec3(_GLF_DEAD(false), true, true))), bvec3(bvec3(bvec3(bvec3(bvec3(_GLF_DEAD(false), true, true))))))))))))))))))))))))))), bvec3(bvec3(bvec3(bvec3(bvec3(_GLF_DEAD(false), true, true))))))), bvec3(bvec3(_GLF_IDENTITY(bvec3(_GLF_DEAD(false), true, _GLF_IDENTITY(true, (_GLF_IDENTITY(true, (true) && true)) || false)), _GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(bvec3(_GLF_DEAD(false), true, true)), _GLF_IDENTITY(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec3(_GLF_DEAD(false), true, true))), bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec3(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, false)))), true, true)), _GLF_IDENTITY(bvec3(bvec4(bvec3(bvec3(_GLF_DEAD(false), true, true)), false)), bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec4(bvec3(bvec3(_GLF_DEAD(false), true, true)), false)), bvec3(bvec3(bvec3(bvec4(bvec3(bvec3(_GLF_DEAD(false), true, true)), false)))))))))))))), bvec3(_GLF_IDENTITY(bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec3(_GLF_DEAD(false), true, true))), bvec3(bvec3(bvec3(bvec3(bvec3(_GLF_DEAD(false), true, true)))))))), _GLF_IDENTITY(bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec3(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))), false), bvec2(bvec2(bvec2(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))), false)))))), true, true))), bvec3(bvec3(bvec3(bvec3(bvec3(_GLF_DEAD(false), true, true))))))), bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec3(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))), true, true))), bvec3(bvec3(bvec3(bvec3(bvec3(_GLF_DEAD(false), true, true))))))))))))), bvec3(bvec4(bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec3(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))), false), bvec2(bvec2(bvec2(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))), false)))))), true, true))), bvec3(bvec3(bvec3(bvec3(bvec3(_GLF_DEAD(false), true, true))))))), bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec3(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))), true, true))), bvec3(bvec3(bvec3(bvec3(bvec3(_GLF_DEAD(false), true, true))))))))))))), true)))))), bvec3(bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec3(_GLF_DEAD(false), true, true))), bvec3(bvec3(bvec3(bvec3(bvec3(_GLF_DEAD(false), true, true))))))), bvec3(_GLF_IDENTITY(bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec3(_GLF_DEAD(false), true, true))), bvec3(bvec3(bvec3(bvec3(bvec3(_GLF_DEAD(false), true, _GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bool(true), ! (! (bool(true))))))))))))))))), bvec3(bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec3(_GLF_DEAD(false), true, true))), bvec3(bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec3(_GLF_DEAD(false), true, true), bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_DEAD(false), true, true), _GLF_IDENTITY(bvec3(bvec3(bvec3(_GLF_DEAD(false), true, true))), bvec3(bvec3(bvec3(bvec3(bvec3(_GLF_DEAD(false), true, true))))))), true)))))))))))))))))))), bvec3(bvec3(bvec3(bvec3(bvec3(_GLF_DEAD(false), _GLF_IDENTITY(true, true && (true)), _GLF_IDENTITY(true, bool(_GLF_IDENTITY(bool(true), (bool(true)) && true)))))))))))))))))))
        {
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
            {
             barrier();
            }
          }
         do
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false || (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false || (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))
                {
                 return;
                }
               else
                {
                }
              }
             for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(3), int(3)), min(_GLF_IDENTITY(int(3), int(3)), _GLF_IDENTITY(int(3), int(3))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 << _GLF_IDENTITY(int(7), int(7)))); _injected_loop_counter --)
              {
               return;
              }
            }
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
            break;
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
             if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec4(false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
              barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).x > injectionSwitch.y))))
              break;
            }
           else
            {
             barrier();
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))
          {
           if(_GLF_DEAD(false))
            return;
          }
         else
          {
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y))));
     if(_GLF_DEAD(false))
      {
       if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(false, true && (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), bool(bvec3(_GLF_IDENTITY(false, ! (! (false))), true, true))))) || _GLF_IDENTITY((_GLF_DEAD(false)), ! _GLF_IDENTITY((! ((_GLF_DEAD(false)))), ! (! ((! ((_GLF_DEAD(false))))))))), false || (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(false, true && (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), bool(bvec3(_GLF_IDENTITY(false, ! (! (false))), true, true))))) || _GLF_IDENTITY((_GLF_DEAD(false)), ! _GLF_IDENTITY((! ((_GLF_DEAD(false)))), ! (! ((! ((_GLF_DEAD(false))))))))), (_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(false, true && (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), bool(bvec4(_GLF_IDENTITY(false, ! (! (false))), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))), bool(bvec3(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec3(! (false), false, false))))), true, true))))) || _GLF_IDENTITY((_GLF_DEAD(false)), ! _GLF_IDENTITY((! ((_GLF_DEAD(false)))), ! (! ((! ((_GLF_DEAD(false)))))))))) || false))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (true ? _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) : _GLF_FUZZED(82.59))) > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0)))))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               barrier();
              }
             else
              {
              }
            }
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((false), _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec4((false), true, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true && (bool(bvec4((false), true, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), ! (_GLF_IDENTITY(! (bool(bvec4((false), true, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), true && (! (bool(bvec4((false), true, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))) || false)))
                barrier();
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                break;
              }
            }
           return;
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
         barrier();
        }
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         return;
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             barrier();
            }
          }
         barrier();
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED((77.33 / -22.03)), _GLF_FUZZED(8.6)), vec2(_GLF_IDENTITY((injectionSwitch)[0], max(_GLF_IDENTITY((injectionSwitch)[0], max((injectionSwitch)[0], (injectionSwitch)[0])), (injectionSwitch)[0])), (injectionSwitch)[1]), bvec2(true, true))).x > injectionSwitch.y))))
          {
           do
            {
             barrier();
            }
           while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bool(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))));
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             return;
            }
           else
            {
            }
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           break;
          }
         return;
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))
        {
        }
       else
        {
         barrier();
        }
      }
     atomicStore(buf[next_virtual_gid], uint(_GLF_IDENTITY(2, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(2, (2) >> 0)), (~ (_GLF_IDENTITY(2, (2) >> 0))) >> 0)))), 4, 64, 4);
     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, true, false, true)), ! (! (bool(bvec4(_GLF_IDENTITY(false, bool(bvec3(false, true, true))), true, false, true))))))))
      continue;
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       do
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
              {
               subgroupAll(false);
              }
            }
           else
            {
            }
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
   else
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y))), ! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y)))), (! (_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) && true)))), ! (! (false))), _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y))))))))) || false))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         for(int _injected_loop_counter = _GLF_IDENTITY(0, (true ? _GLF_IDENTITY(0, 0 | (0)) : _GLF_FUZZED(ivec2(77952, 28688)[0]))); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            break;
           if(_GLF_DEAD(false))
            barrier();
           return;
           if(_GLF_DEAD(false))
            break;
          }
        }
      }
     if(_GLF_DEAD(false))
      barrier();
     atomicStore(buf[next_virtual_gid], _GLF_IDENTITY(uint(2), (true ? uint(2) : _GLF_FUZZED(subgroup_local_id))), 4, 64, 4);
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x)), min(_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x)))) > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         barrier();
        }
       else
        {
        }
      }
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         barrier();
        }
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY((_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(bool((injectionSwitch.x > injectionSwitch.y))), false || (bool(bool((injectionSwitch.x > injectionSwitch.y))))))))), ((_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(bool((injectionSwitch.x > injectionSwitch.y))), false || (bool(bool((injectionSwitch.x > injectionSwitch.y)))))))))) && true) && true))
        barrier();
      }
     subgroupAll(true);
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
    }
   if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), (! (_GLF_DEAD(false))) || false))))
    return;
  }
 while(_GLF_WRAPPED_LOOP(false));
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
