#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 for(int _injected_loop_counter = (int(_GLF_ONE(1.0, injectionSwitch.y)) & _GLF_IDENTITY(1, max(_GLF_IDENTITY(1, (1) - 0), _GLF_IDENTITY(1, (false ? _GLF_FUZZED(-27151) : _GLF_IDENTITY(1, min(1, 1))))))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) >> 0) != int(_GLF_ZERO(0.0, injectionSwitch.x))); _GLF_IDENTITY(_injected_loop_counter --, (_GLF_IDENTITY(_injected_loop_counter --, 0 + (_injected_loop_counter --))) / 1))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, float(mat3(_GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x)), 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0))) < injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       barrier();
      }
     else
      {
      }
    }
  }
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec3(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, false)))))) || false))
  {
   for(int _injected_loop_counter = _GLF_IDENTITY(0, clamp(0, 0, 0)); _GLF_WRAPPED_LOOP(_injected_loop_counter != (((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(5), (false ? _GLF_FUZZED(atomicAnd(_injected_loop_counter, -1154)) : int(5))), int(5))) ^ int(_GLF_ZERO(0.0, injectionSwitch.x)))); _injected_loop_counter ++)
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       barrier();
      }
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (true)))))
  {
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) || false), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(mat3x2(_GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(mat3(injectionSwitch.x, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0), mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0) + (_GLF_IDENTITY(mat3(injectionSwitch.x, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0), transpose(transpose(mat3(injectionSwitch.x, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0)))))))), cos(0.0), 1.0, determinant(mat2(1.0, 0.0, 1.0, 1.0)), sin(0.0), 0.0), transpose(_GLF_IDENTITY(transpose(_GLF_IDENTITY(mat3x2(injectionSwitch.x, _GLF_IDENTITY(cos(0.0), min(cos(0.0), cos(0.0))), _GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-4904.8838)), float(1.0), bool(true))), _GLF_IDENTITY(1.0, min(1.0, 1.0)))), determinant(mat2(1.0, 0.0, 1.0, 1.0)), sin(0.0), 0.0), (false ? _GLF_FUZZED(mat3x2(-5.5, _GLF_IDENTITY(-85.87, min(-85.87, -85.87)), 20.94, 2.2, -6963.5331, 8.4)) : mat3x2(injectionSwitch.x, cos(0.0), 1.0, determinant(mat2(1.0, 0.0, 1.0, 1.0)), sin(0.0), 0.0)))), mat2x3(mat3(transpose(_GLF_IDENTITY(mat3x2(injectionSwitch.x, cos(0.0), 1.0, determinant(mat2(1.0, 0.0, 1.0, 1.0)), sin(0.0), 0.0), (false ? _GLF_FUZZED(mat3x2(-5.5, -85.87, 20.94, 2.2, -6963.5331, 8.4)) : mat3x2(injectionSwitch.x, cos(0.0), 1.0, determinant(mat2(1.0, 0.0, 1.0, 1.0)), sin(0.0), 0.0))))))))))) > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), (false ? _GLF_FUZZED(exp2(injectionSwitch)) : _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), min(mat2(1.0) * (injectionSwitch), mat2(1.0) * (injectionSwitch))))))))) * vec2(1.0, 1.0)).y, false || (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), ((injectionSwitch) * mat2(1.0)) * vec2(1.0, _GLF_IDENTITY(1.0, (1.0) / 1.0)))).x > injectionSwitch.y, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), ((injectionSwitch) * mat2(1.0)) * vec2(1.0, _GLF_IDENTITY(1.0, (1.0) / 1.0)))).x > injectionSwitch.y, false, true, false)), ! (! (bool(bvec4(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), ((injectionSwitch) * mat2(1.0)) * vec2(1.0, _GLF_IDENTITY(1.0, (1.0) / 1.0)))).x > injectionSwitch.y, false, true, false)))))))))))))))
    barrier();
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bvec2(false, true)))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   else
    {
     barrier();
    }
  }
 do
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(false));
 for(int _injected_loop_counter = _GLF_IDENTITY(((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1))), (((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1)))) ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    {
     do
      {
       do
        {
         if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true && (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
          }
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))));
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
  }
 else
  {
  }
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
  barrier();
 do
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       barrier();
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(-7.4)), bool(false))), injectionSwitch.y)))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec4(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec3(bvec2(false, false), true))), false, true)))))))
        barrier();
      }
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec4(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y))), true, false, true))))))
    barrier();
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), (false) || false), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec3(false, false, true)))) || false), (false) || false), bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || _GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec3(false, true, true)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (false) || false), bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), (false) || false)))), false, false))))))))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
  }
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
      barrier();
    }
  }
 else
  {
  }
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = _GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID, (gl_WorkGroupID) - uvec3(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))).x, (_GLF_IDENTITY(gl_WorkGroupID.x, (gl_WorkGroupID.x) ^ (0u >> _GLF_IDENTITY(uint(4u), uint(4u))))) | (_GLF_IDENTITY(gl_WorkGroupID, ((uvec3(1u, 1u, 1u) << _GLF_IDENTITY(uvec3(3u), uvec3(3u))) >> _GLF_IDENTITY(uvec3(3u), uvec3(3u))) * (gl_WorkGroupID)).x));
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false)))) && true))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         barrier();
        }
      }
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 uint workgroup_base = workgroup_size * workgroup_id;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), mix(vec2((_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)))[0], _GLF_FUZZED(6.5)), vec2(_GLF_FUZZED(12.25), (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)))[1]), bvec2(false, true))).x, _GLF_IDENTITY(_GLF_IDENTITY(float(float(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x)), clamp(float(float(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x)), float(float(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x)), float(float(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x)))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(float(float(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x)), clamp(float(float(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x)), float(float(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x)), float(float(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x)))), 1.0 * (_GLF_IDENTITY(float(float(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x)), clamp(float(float(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x)), float(float(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x)), float(float(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x)))))), _GLF_IDENTITY(float(float(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x)), clamp(float(float(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x)), float(float(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x)), float(float(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x)))), _GLF_IDENTITY(float(float(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x)), clamp(float(float(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x)), float(float(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x)), float(float(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x))))))) > injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (true))))
      {
       for(int _injected_loop_counter = _GLF_IDENTITY(1, clamp(1, 1, _GLF_IDENTITY(1, (_GLF_IDENTITY(true ? 1 : _GLF_FUZZED(-34854), (false ? _GLF_FUZZED((26590 >> -43304)) : true ? 1 : _GLF_FUZZED(-34854))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (_GLF_IDENTITY((_GLF_IDENTITY(-22401, clamp(_GLF_IDENTITY(-22401, (-22401) / 1), -22401, -22401)) & 0) << _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), min(_GLF_IDENTITY(int(2), (int(_GLF_IDENTITY(2, (false ? _GLF_FUZZED(_injected_loop_counter) : 2)))) * 1), int(2)))), clamp(_GLF_IDENTITY((-22401 & 0) << _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), min(_GLF_IDENTITY(int(_GLF_IDENTITY(2, (2) * 1)), (int(2)) * 1), int(2)))), ((-22401 & 0) << _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), min(_GLF_IDENTITY(int(2), (int(2)) * 1), int(2))))) - _GLF_IDENTITY((0 & -19708), (false ? _GLF_FUZZED((_injected_loop_counter & 97094)) : _GLF_IDENTITY((0 & -19708), ((0 & -19708)) | 0)))), (-22401 & 0) << _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), min(_GLF_IDENTITY(int(2), (int(2)) * 1), int(2)))), (_GLF_IDENTITY(-22401 & 0, 0 | (-22401 & 0))) << _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), min(_GLF_IDENTITY(int(2), _GLF_IDENTITY((int(2)), min((int(2)), (int(2)))) * 1), _GLF_IDENTITY(int(2), 0 + (int(2)))))))))); _injected_loop_counter --)
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               barrier();
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     barrier();
                    }
                  }
                 do
                  {
                   barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
              }
             else
              {
               if(_GLF_DEAD(false))
                barrier();
              }
             do
              {
               if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_DEAD(false))))
                barrier();
              }
             while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, false || (false)))))));
            }
           else
            {
            }
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             barrier();
            }
           else
            {
            }
          }
         if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
          {
           do
            {
             do
              {
               barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (false ? _GLF_FUZZED(ivec4(89201, 51084, 44915, -25300).w) : _GLF_IDENTITY(int(0), (int(0)) - 0))))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
              {
               barrier();
              }
            }
          }
        }
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
     if(_GLF_DEAD(false))
      barrier();
     for(int _injected_loop_counter = (0 & int(1.4)); _GLF_WRAPPED_LOOP(_injected_loop_counter != (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(7), int(7))), 0 + ((1 << _GLF_IDENTITY(int(7), int(7))))) >> _GLF_IDENTITY(int(7), int(7)))); _injected_loop_counter ++)
      {
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 uint virtual_gid = workgroup_base + subgroup_id * subgroup_size + subgroup_local_id;
 if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec2(_GLF_DEAD(false), true)), true && (bool(bvec2(_GLF_DEAD(false), true))))))
  {
   do
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       barrier();
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
 for(int _injected_loop_counter = _GLF_IDENTITY(0, 0 ^ _GLF_IDENTITY((0), max((0), (0)))); _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 | 1)); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, true && (false))));
        }
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         barrier();
        }
      }
    }
  }
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY((-99846 & 0), (false ? _GLF_FUZZED(_injected_loop_counter) : (-99846 & 0)))); _GLF_IDENTITY(_injected_loop_counter --, (_GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) / 1)) - 0))
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 for(int _injected_loop_counter = _GLF_IDENTITY((_GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), 1 * (int(_GLF_ZERO(0.0, injectionSwitch.x)))) | _GLF_IDENTITY(1, (_GLF_IDENTITY(1, 0 | (1))) | 0)), ~ (~ (_GLF_IDENTITY((int(_GLF_ZERO(0.0, injectionSwitch.x)) | _GLF_IDENTITY(1, (_GLF_IDENTITY(1, 0 | (1))) | 0)), 0 + ((int(_GLF_ZERO(0.0, injectionSwitch.x)) | _GLF_IDENTITY(1, (_GLF_IDENTITY(1, 0 | (1))) | 0))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _GLF_IDENTITY(_injected_loop_counter --, 0 | (_GLF_IDENTITY(_injected_loop_counter --, 0 | (_injected_loop_counter --)))))
  {
   do
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0), injectionSwitch.y))))))))
        barrier();
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec4(! (false), false, false, false))))), (_GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(mat4x2(injectionSwitch.x, 1.0, 1.0, 0.0, abs(0.0), 1.0, 1.0, 0.0), (true ? mat4x2(injectionSwitch.x, 1.0, 1.0, 0.0, abs(0.0), 1.0, 1.0, 0.0) : _GLF_FUZZED(mat4x2(-6.1, -8.5, 4.7, 5544.9934, 7967.0279, 5.7, 22.97, 947.428)))))) > injectionSwitch.y))))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
        }
       else
        {
        }
      }
    }
  }
 uint next_virtual_gid = workgroup_base + subgroup_id * subgroup_size + (_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, uint(uvec2((_GLF_IDENTITY(subgroup_local_id, max(subgroup_local_id, subgroup_local_id)) + 1) % subgroup_size, 1u))));
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
      barrier();
    }
  }
 _GLF_IDENTITY(buf[virtual_gid] = 1, (true ? buf[virtual_gid] = 1 : _GLF_FUZZED(subgroup_local_id)));
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, bool(bvec3(false, true, false))))), (false) || _GLF_IDENTITY(false, ! (! (false))))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) && true)));
      }
     else
      {
      }
    }
   barrier();
  }
 do
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec2(false, false))), _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec2(false, false))), (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, false), _GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec2(bvec2(false, false)), bvec2(bvec4(bvec2(bvec2(false, false)), false, true)))), bvec2(bvec3(bvec2(_GLF_IDENTITY(bvec2(bvec2(false, false)), bvec2(bvec4(bvec2(bvec2(false, false)), false, true)))), true)))))), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, false), _GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec2(bvec2(false, false)), bvec2(bvec4(bvec2(bvec2(false, false)), false, true)))), bvec2(bvec3(bvec2(_GLF_IDENTITY(bvec2(bvec2(false, false)), bvec2(bvec4(bvec2(bvec2(false, false)), false, true)))), true)))))), false), bvec2(bvec2(bvec2(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, false), _GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec2(bvec2(false, false)), bvec2(bvec4(bvec2(bvec2(false, false)), false, true)))), bvec2(bvec3(bvec2(_GLF_IDENTITY(bvec2(bvec2(false, false)), bvec2(bvec4(bvec2(bvec2(false, false)), false, true)))), true)))))), false))))))) || false)))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(false));
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (true ? _injected_loop_counter : _GLF_FUZZED(_injected_loop_counter))) != 1); _injected_loop_counter ++)
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], float(mat2(injectionSwitch[1], 0.0, abs(0.0), 0.0))))).x > injectionSwitch.y))))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       barrier();
      }
    }
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     do
      {
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec3(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, true))), bool(bvec2(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true))))))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           barrier();
          }
         else
          {
          }
        }
       if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (0u | (_GLF_IDENTITY(0u, 1u * (0u)) ^ 0u)) | (subgroup_local_id)) + 1, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, 0u ^ _GLF_IDENTITY((subgroup_local_id), ((subgroup_local_id)) * 1u))) | (_GLF_IDENTITY(subgroup_local_id, 0u | (subgroup_local_id)))), (0u | (0u ^ 0u)) | (subgroup_local_id)) + 1, ~ (~ (_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY((0u | (0u ^ _GLF_IDENTITY(0u, 0u | (0u)))), uint(uvec2((0u | _GLF_IDENTITY((0u ^ _GLF_IDENTITY(0u, 0u | (0u))), clamp((0u ^ _GLF_IDENTITY(0u, 0u | (0u))), (0u ^ _GLF_IDENTITY(0u, 0u | (0u))), (0u ^ _GLF_IDENTITY(0u, 0u | (0u)))))), _GLF_IDENTITY(0u, (0u >> _GLF_IDENTITY(uint(2u), uint(2u))) + (0u))))) | (subgroup_local_id)) + _GLF_IDENTITY(1, (1) - 0))))) | 0u) < subgroup_size, _GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (0u | (0u ^ 0u)) | (subgroup_local_id)) + 1, (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(0u, (0u) - 0u) | (0u ^ 0u)) | (_GLF_IDENTITY(subgroup_local_id, clamp(_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(1u * (_GLF_IDENTITY(subgroup_local_id, clamp(subgroup_local_id, subgroup_local_id, subgroup_local_id))), clamp(1u * (_GLF_IDENTITY(subgroup_local_id, clamp(subgroup_local_id, subgroup_local_id, subgroup_local_id))), 1u * (_GLF_IDENTITY(subgroup_local_id, clamp(subgroup_local_id, subgroup_local_id, subgroup_local_id))), 1u * (_GLF_IDENTITY(subgroup_local_id, clamp(subgroup_local_id, subgroup_local_id, subgroup_local_id)))))), subgroup_local_id, subgroup_local_id)))) + 1, ~ (~ (_GLF_IDENTITY(subgroup_local_id, (0u | (0u ^ _GLF_IDENTITY(0u, min(0u, _GLF_IDENTITY(0u, (0u) << 0u))))) | (subgroup_local_id)) + 1)))) | 0u) < subgroup_size, false, true), _GLF_IDENTITY(bvec3(bvec3(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (0u | _GLF_IDENTITY((0u ^ 0u), ((0u ^ 0u)) * 1u)) | (subgroup_local_id)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(subgroup_local_id, (0u | _GLF_IDENTITY(_GLF_IDENTITY((0u ^ 0u), min(_GLF_IDENTITY((0u ^ 0u), ((0u ^ 0u)) | ((0u ^ 0u))), (0u ^ 0u))), ((0u ^ 0u)) * 1u)) | (subgroup_local_id)) : _GLF_FUZZED(subgroup_size))) + 1, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (0u | _GLF_IDENTITY((0u ^ 0u), ((0u ^ 0u)) >> 0u)) | (_GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, subgroup_local_id)))) + 1, _GLF_IDENTITY(~ (~ (_GLF_IDENTITY(subgroup_local_id, (0u | (0u ^ 0u)) | (subgroup_local_id)) + 1)), (0u << _GLF_IDENTITY(uint(4u), uint(4u))) | (~ (~ (_GLF_IDENTITY(subgroup_local_id, (0u | (0u ^ 0u)) | (subgroup_local_id)) + 1)))))) | 0u, min((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (0u | _GLF_IDENTITY((0u ^ 0u), ((0u ^ 0u)) >> 0u)) | (_GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, subgroup_local_id)))) + 1, _GLF_IDENTITY(~ (~ (_GLF_IDENTITY(subgroup_local_id, (0u | (0u ^ 0u)) | (subgroup_local_id)) + 1)), (0u << _GLF_IDENTITY(uint(4u), uint(4u))) | (~ (~ (_GLF_IDENTITY(subgroup_local_id, (0u | (0u ^ 0u)) | (subgroup_local_id)) + 1)))))) | 0u, (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (0u | _GLF_IDENTITY((0u ^ 0u), ((0u ^ 0u)) >> 0u)) | (_GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, subgroup_local_id)))) + 1, _GLF_IDENTITY(~ (~ (_GLF_IDENTITY(subgroup_local_id, (0u | (0u ^ 0u)) | (subgroup_local_id)) + 1)), (0u << _GLF_IDENTITY(uint(4u), uint(4u))) | (~ (~ (_GLF_IDENTITY(subgroup_local_id, (0u | (0u ^ 0u)) | (subgroup_local_id)) + 1)))))) | 0u))) < subgroup_size, false, true))), bvec3(bvec4(bvec3(bvec3(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (0u | (0u ^ 0u)) | (subgroup_local_id)) + 1, (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (0u | (0u ^ 0u)) | (subgroup_local_id)) + 1, ~ (~ (_GLF_IDENTITY(subgroup_local_id, (0u | (0u ^ 0u)) | (subgroup_local_id)) + 1)))) | 0u) < subgroup_size, false, true))), true)))), bvec3(bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (0u | (0u ^ 0u)) | (subgroup_local_id)) + 1, (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(0u, (0u) - 0u) | _GLF_IDENTITY((0u ^ 0u), max((0u ^ 0u), (0u ^ 0u)))) | (_GLF_IDENTITY(subgroup_local_id, clamp(_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(1u * (_GLF_IDENTITY(subgroup_local_id, clamp(subgroup_local_id, subgroup_local_id, subgroup_local_id))), clamp(1u * (_GLF_IDENTITY(subgroup_local_id, clamp(subgroup_local_id, subgroup_local_id, subgroup_local_id))), 1u * (_GLF_IDENTITY(subgroup_local_id, clamp(subgroup_local_id, subgroup_local_id, subgroup_local_id))), 1u * (_GLF_IDENTITY(subgroup_local_id, clamp(subgroup_local_id, subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, (false ? _GLF_FUZZED(workgroup_base) : subgroup_local_id)))))))), subgroup_local_id, subgroup_local_id)))) + 1, ~ (~ (_GLF_IDENTITY(subgroup_local_id, (0u | (0u ^ _GLF_IDENTITY(0u, min(0u, _GLF_IDENTITY(0u, (0u) << 0u))))) | (subgroup_local_id)) + 1)))) | 0u) < subgroup_size, false, true), _GLF_IDENTITY(bvec3(bvec3(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (0u | _GLF_IDENTITY((0u ^ 0u), ((0u ^ 0u)) * 1u)) | (subgroup_local_id)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY((0u | _GLF_IDENTITY(_GLF_IDENTITY((0u ^ 0u), min(_GLF_IDENTITY((0u ^ 0u), ((0u ^ 0u)) | ((0u ^ 0u))), (0u ^ 0u))), ((0u ^ 0u)) * 1u)) | (subgroup_local_id), 0u | ((0u | _GLF_IDENTITY(_GLF_IDENTITY((0u ^ 0u), min(_GLF_IDENTITY((0u ^ 0u), ((0u ^ 0u)) | ((0u ^ 0u))), (0u ^ 0u))), ((0u ^ 0u)) * 1u)) | (subgroup_local_id)))) : _GLF_FUZZED(subgroup_size))) + 1, (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (0u | _GLF_IDENTITY((0u ^ 0u), ((0u ^ 0u)) >> 0u)) | (_GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, subgroup_local_id)))) + 1, _GLF_IDENTITY(~ _GLF_IDENTITY((~ _GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, (0u | (0u ^ 0u)) | (subgroup_local_id)) + 1), ((_GLF_IDENTITY(subgroup_local_id, (0u | (0u ^ 0u)) | (subgroup_local_id)) + 1)) | ((_GLF_IDENTITY(subgroup_local_id, (0u | (0u ^ 0u)) | (subgroup_local_id)) + 1)))), (true ? _GLF_IDENTITY((~ _GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, (0u | (0u ^ 0u)) | (subgroup_local_id)) + 1), ((_GLF_IDENTITY(subgroup_local_id, (0u | (0u ^ 0u)) | (subgroup_local_id)) + 1)) | ((_GLF_IDENTITY(subgroup_local_id, (0u | (0u ^ 0u)) | (subgroup_local_id)) + 1)))), ~ (~ ((~ _GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, (0u | (0u ^ 0u)) | (subgroup_local_id)) + 1), ((_GLF_IDENTITY(subgroup_local_id, (0u | (0u ^ 0u)) | (subgroup_local_id)) + 1)) | ((_GLF_IDENTITY(subgroup_local_id, (0u | (0u ^ 0u)) | (subgroup_local_id)) + 1))))))) : _GLF_FUZZED(num_workgroup))), (0u << _GLF_IDENTITY(uint(4u), uint(4u))) | (~ (~ (_GLF_IDENTITY(subgroup_local_id, (0u | (0u ^ 0u)) | (subgroup_local_id)) + 1)))))) | 0u) < subgroup_size, false, true))), bvec3(bvec4(bvec3(bvec3(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (0u | (0u ^ 0u)) | (subgroup_local_id)) + 1, (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (0u | (0u ^ 0u)) | (subgroup_local_id)) + 1, ~ (~ (_GLF_IDENTITY(subgroup_local_id, (0u | (0u ^ 0u)) | (subgroup_local_id)) + 1)))) | 0u) < subgroup_size, false, true))), true)))))))), _GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || false)) || _GLF_IDENTITY(false, bool(bool(false)))) || (bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (0u | (0u ^ 0u)) | (subgroup_local_id)) + 1, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(0u, (0u) / 1u) | (0u ^ 0u)) | (_GLF_IDENTITY(subgroup_local_id, clamp(_GLF_IDENTITY(subgroup_local_id, 1u * (_GLF_IDENTITY(subgroup_local_id, clamp(subgroup_local_id, subgroup_local_id, subgroup_local_id)))), subgroup_local_id, subgroup_local_id)))) + 1, ~ (~ (_GLF_IDENTITY(subgroup_local_id, (0u | (0u ^ _GLF_IDENTITY(_GLF_IDENTITY(0u, min(0u, 0u)), (_GLF_IDENTITY(0u, min(0u, 0u))) | (_GLF_IDENTITY(_GLF_IDENTITY(0u, min(0u, 0u)), (_GLF_IDENTITY(0u, min(0u, 0u))) + 0u))))) | (subgroup_local_id)) + 1)))) | 0u, ((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(0u, (0u) / 1u) | (0u ^ 0u)) | (_GLF_IDENTITY(subgroup_local_id, clamp(_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(1u, clamp(1u, 1u, _GLF_IDENTITY(1u, min(1u, 1u)))) * (_GLF_IDENTITY(subgroup_local_id, clamp(subgroup_local_id, subgroup_local_id, subgroup_local_id)))), subgroup_local_id, subgroup_local_id)))) + 1, ~ (~ (_GLF_IDENTITY(subgroup_local_id, (0u | (0u ^ _GLF_IDENTITY(_GLF_IDENTITY(0u, min(0u, 0u)), (_GLF_IDENTITY(0u, min(0u, 0u))) | (_GLF_IDENTITY(_GLF_IDENTITY(0u, min(0u, 0u)), (_GLF_IDENTITY(0u, min(0u, 0u))) + 0u))))) | (subgroup_local_id)) + 1)))) | 0u) - 0u)) < subgroup_size, false, true), _GLF_IDENTITY(bvec3(bvec3(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (0u | _GLF_IDENTITY((0u ^ 0u), ((0u ^ _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, 0u ^ (_GLF_IDENTITY(0u, (0u) | (0u))))) | (0u)))) * 1u)) | (subgroup_local_id)) + 1, (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (0u | (0u ^ 0u)) | (subgroup_local_id)) + 1, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_local_id, (0u | (0u ^ 0u)) | (subgroup_local_id)) + 1), _GLF_IDENTITY(uint(_GLF_IDENTITY(uint(~ (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (0u | (0u ^ 0u)) | (subgroup_local_id)) + 1, clamp(_GLF_IDENTITY(subgroup_local_id, (0u | (0u ^ 0u)) | (subgroup_local_id)) + 1, _GLF_IDENTITY(subgroup_local_id, (0u | (0u ^ 0u)) | (subgroup_local_id)) + 1, _GLF_IDENTITY(subgroup_local_id, (0u | (0u ^ 0u)) | (subgroup_local_id)) + 1)))), (_GLF_IDENTITY(uint(~ (_GLF_IDENTITY(subgroup_local_id, (0u | (0u ^ 0u)) | (subgroup_local_id)) + 1)), 0u ^ (uint(~ (_GLF_IDENTITY(subgroup_local_id, (0u | (0u ^ 0u)) | (subgroup_local_id)) + 1))))) / 1u)), _GLF_IDENTITY((uint(_GLF_IDENTITY(uint(~ (_GLF_IDENTITY(subgroup_local_id, (0u | (0u ^ 0u)) | (subgroup_local_id)) + 1)), (uint(~ (_GLF_IDENTITY(subgroup_local_id, (0u | (0u ^ 0u)) | (subgroup_local_id)) + 1))) / 1u))), uint(_GLF_IDENTITY(uint(_GLF_IDENTITY((uint(_GLF_IDENTITY(uint(~ (_GLF_IDENTITY(subgroup_local_id, (0u | (0u ^ 0u)) | (subgroup_local_id)) + 1)), (uint(~ (_GLF_IDENTITY(subgroup_local_id, (0u | (0u ^ 0u)) | (subgroup_local_id)) + 1))) / 1u))), (false ? _GLF_FUZZED(workgroup_id) : _GLF_IDENTITY((uint(_GLF_IDENTITY(uint(~ (_GLF_IDENTITY(subgroup_local_id, (0u | (0u ^ 0u)) | (subgroup_local_id)) + 1)), (uint(~ (_GLF_IDENTITY(subgroup_local_id, (0u | (0u ^ 0u)) | (subgroup_local_id)) + 1))) / 1u))), ((uint(_GLF_IDENTITY(uint(~ (_GLF_IDENTITY(subgroup_local_id, (0u | (0u ^ 0u)) | (subgroup_local_id)) + 1)), (uint(~ (_GLF_IDENTITY(subgroup_local_id, (0u | (0u ^ 0u)) | (subgroup_local_id)) + 1))) / 1u)))) | 0u)))), max(uint(_GLF_IDENTITY((uint(_GLF_IDENTITY(uint(~ (_GLF_IDENTITY(subgroup_local_id, (0u | (0u ^ 0u)) | (subgroup_local_id)) + 1)), (uint(~ (_GLF_IDENTITY(subgroup_local_id, (0u | (0u ^ 0u)) | (subgroup_local_id)) + 1))) / 1u))), (false ? _GLF_FUZZED(workgroup_id) : _GLF_IDENTITY((uint(_GLF_IDENTITY(uint(~ (_GLF_IDENTITY(subgroup_local_id, (0u | (0u ^ 0u)) | (subgroup_local_id)) + 1)), (uint(~ (_GLF_IDENTITY(subgroup_local_id, (0u | (0u ^ 0u)) | (subgroup_local_id)) + 1))) / 1u))), ((uint(_GLF_IDENTITY(uint(~ (_GLF_IDENTITY(subgroup_local_id, (0u | (0u ^ 0u)) | (subgroup_local_id)) + 1)), (uint(~ (_GLF_IDENTITY(subgroup_local_id, (0u | (0u ^ 0u)) | (subgroup_local_id)) + 1))) / 1u)))) | 0u)))), uint(_GLF_IDENTITY((uint(_GLF_IDENTITY(uint(~ (_GLF_IDENTITY(subgroup_local_id, (0u | (0u ^ 0u)) | (subgroup_local_id)) + 1)), (uint(~ (_GLF_IDENTITY(subgroup_local_id, (0u | (0u ^ 0u)) | (subgroup_local_id)) + 1))) / 1u))), (false ? _GLF_FUZZED(workgroup_id) : _GLF_IDENTITY((uint(_GLF_IDENTITY(uint(~ (_GLF_IDENTITY(subgroup_local_id, (0u | (0u ^ 0u)) | (subgroup_local_id)) + 1)), (uint(~ (_GLF_IDENTITY(subgroup_local_id, (0u | (0u ^ 0u)) | (subgroup_local_id)) + 1))) / 1u))), ((uint(_GLF_IDENTITY(uint(~ (_GLF_IDENTITY(subgroup_local_id, (0u | (0u ^ 0u)) | (subgroup_local_id)) + 1)), (uint(~ (_GLF_IDENTITY(subgroup_local_id, (0u | (0u ^ 0u)) | (subgroup_local_id)) + 1))) / 1u)))) | 0u)))))))) | (uint(_GLF_IDENTITY(uint(~ (_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(0u | (0u ^ 0u), (0u | (0u ^ 0u)) | 0u)) | (subgroup_local_id)) + 1)), (uint(~ (_GLF_IDENTITY(subgroup_local_id, (0u | (0u ^ _GLF_IDENTITY(0u, min(0u, 0u)))) | (subgroup_local_id)) + 1))) / 1u)))))))) | 0u) < subgroup_size, _GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, (false) || false))), true))), bvec3(bvec4(bvec3(bvec3(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (0u | (0u ^ 0u)) | (subgroup_local_id)) + 1, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (0u | (0u ^ 0u)) | (subgroup_local_id)) + 1, ~ (~ (_GLF_IDENTITY(subgroup_local_id, (0u | (0u ^ 0u)) | (subgroup_local_id)) + 1)))), (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (0u | (0u ^ 0u)) | (subgroup_local_id)) + 1, ~ (~ (_GLF_IDENTITY(subgroup_local_id, (0u | (0u ^ 0u)) | (subgroup_local_id)) + 1)))), ((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (0u | (0u ^ 0u)) | (subgroup_local_id)) + 1, ~ (~ (_GLF_IDENTITY(subgroup_local_id, (0u | (0u ^ 0u)) | (subgroup_local_id)) + 1))))) - 0u)) ^ 0u) | 0u) < subgroup_size, false, true))), true)))))))))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, true && (false))))))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
              barrier();
            }
           else
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec4(false, false, false, true)))) && true)))
                {
                }
               else
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      {
                       if(_GLF_WRAPPED_IF_TRUE(true))
                        {
                         barrier();
                        }
                       else
                        {
                        }
                      }
                     barrier();
                    }
                  }
                 else
                  {
                  }
                }
               barrier();
              }
            }
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
           for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, (false ? _GLF_FUZZED(_injected_loop_counter) : 0))); _injected_loop_counter --)
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 barrier();
                }
               else
                {
                }
              }
            }
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           barrier();
          }
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), _GLF_IDENTITY((int(_GLF_ONE(_GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)))), injectionSwitch.y))) / 1, 0 | ((int(_GLF_ONE(_GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)))), injectionSwitch.y))) / 1)))); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(false))
            {
             do
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, length(vec3(0.0, 0.0, 0.0)) + (injectionSwitch.y))))))
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 else
                  {
                  }
                 for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                  {
                   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    {
                    }
                   else
                    {
                     barrier();
                    }
                  }
                }
              }
             while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec3(bvec2(false, true), true)))))));
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
               if(_GLF_DEAD(false))
                barrier();
              }
             else
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               barrier();
              }
             if(_GLF_DEAD(false))
              barrier();
            }
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
            {
             for(int _injected_loop_counter = (0 | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 & 1)); _injected_loop_counter ++)
              {
               barrier();
              }
            }
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
            {
             atomicStore(buf[next_virtual_gid], uint(2), 4, 64, 4);
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, ~ (~ (0)))); _injected_loop_counter --)
              {
               barrier();
              }
            }
          }
         do
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
            {
             do
              {
               if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, true && (true))), true && (_GLF_IDENTITY(! (_GLF_IDENTITY(true, true && (true))), ! (! (! (_GLF_IDENTITY(true, true && (true))))))))))))
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(209.736, 8.1)) : _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)))).y))), bool(bvec3(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(209.736, 8.1)) : _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)))).y))), true, true))))
                    barrier();
                   barrier();
                  }
                }
               else
                {
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
         subgroupAll(false);
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             barrier();
            }
          }
        }
       else
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))
          {
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
              {
               barrier();
              }
            }
           if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bvec4(false, true, true, true)))))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)), injectionSwitch, injectionSwitch)).y))))
            {
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
              {
               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                {
                 if(_GLF_DEAD(false))
                  barrier();
                }
               do
                {
                 for(int _injected_loop_counter = _GLF_IDENTITY(1, clamp(1, _GLF_IDENTITY(1, 0 ^ (1)), 1)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    {
                     do
                      {
                       barrier();
                      }
                     while(_GLF_WRAPPED_LOOP(false));
                    }
                   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false))))
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                    }
                   else
                    {
                     do
                      {
                       barrier();
                      }
                     while(_GLF_WRAPPED_LOOP(false));
                    }
                  }
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (! (injectionSwitch.x < injectionSwitch.y))))) && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      {
                      }
                     else
                      {
                       barrier();
                      }
                    }
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 else
                  {
                   barrier();
                  }
                }
               while(_GLF_WRAPPED_LOOP(false));
               do
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                     barrier();
                    }
                  }
                }
               while(_GLF_WRAPPED_LOOP(false));
               if(_GLF_DEAD(false))
                {
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                  {
                   do
                    {
                     barrier();
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                  }
                 else
                  {
                  }
                }
               if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, true, false)))))
                barrier();
              }
            }
          }
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             barrier();
            }
           else
            {
            }
          }
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               do
                {
                 for(int _injected_loop_counter = (0 << _GLF_IDENTITY(_GLF_IDENTITY(int(1), 0 | (int(1))), _GLF_IDENTITY(int(1), int(ivec4(int(1), 1, 0, 1))))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                  {
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                      {
                       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
                        {
                         if(_GLF_DEAD(false))
                          {
                           if(_GLF_WRAPPED_IF_TRUE(true))
                            {
                             if(_GLF_DEAD(false))
                              barrier();
                            }
                           else
                            {
                            }
                           barrier();
                          }
                         if(_GLF_WRAPPED_IF_TRUE(true))
                          {
                           if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false))))))), (_GLF_DEAD(false)) && true))
                            barrier();
                          }
                         else
                          {
                          }
                        }
                      }
                    }
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                      }
                     else
                      {
                       barrier();
                      }
                    }
                   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-9.8)), float(_GLF_IDENTITY(injectionSwitch.y, _GLF_ONE(1.0, injectionSwitch.y) * (injectionSwitch.y))), bool(true))), mix(float(_GLF_FUZZED((-462.381 + _GLF_IDENTITY(-258.385, float(mat3x4(-258.385, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, round(length(normalize(vec2(1.0, 1.0)))))))))), _GLF_IDENTITY(float(injectionSwitch.y), _GLF_IDENTITY(clamp(_GLF_IDENTITY(float(injectionSwitch.y), min(float(injectionSwitch.y), float(injectionSwitch.y))), float(injectionSwitch.y), float(injectionSwitch.y)), clamp(clamp(_GLF_IDENTITY(float(injectionSwitch.y), min(float(injectionSwitch.y), float(injectionSwitch.y))), float(injectionSwitch.y), float(injectionSwitch.y)), clamp(_GLF_IDENTITY(float(injectionSwitch.y), min(float(injectionSwitch.y), float(injectionSwitch.y))), float(injectionSwitch.y), float(injectionSwitch.y)), clamp(_GLF_IDENTITY(float(injectionSwitch.y), min(float(injectionSwitch.y), float(injectionSwitch.y))), float(injectionSwitch.y), float(injectionSwitch.y))))), bool(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (! (injectionSwitch.x < injectionSwitch.y)))))))), (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat4(injectionSwitch, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, sin(0.0), 1.0, 0.0, 1.0, 1.0, 1.0, 0.0)), min(vec2(mat4(injectionSwitch, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, sin(0.0), 1.0, 0.0, 1.0, 1.0, 1.0, 0.0)), vec2(mat4(injectionSwitch, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, sin(0.0), 1.0, 0.0, 1.0, 1.0, 1.0, 0.0))))).x < _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED((-462.381 + -258.385))), float(injectionSwitch.y), bool(_GLF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec3(true, _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y, injectionSwitch.y)))), false)), ! (! (bool(bvec3(true, _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)))), ! (! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), false)))))), (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))) || false))))))) && true)))))
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - sqrt(vec2(0.0, 0.0))).x > injectionSwitch.y))))
                      {
                       if(_GLF_DEAD(false))
                        barrier();
                       if(_GLF_WRAPPED_IF_TRUE(true))
                        {
                         barrier();
                        }
                       else
                        {
                        }
                      }
                     for(int _injected_loop_counter = _GLF_IDENTITY(((_GLF_IDENTITY(1, min(1, _GLF_IDENTITY(1, (1) - 0))) << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), _GLF_IDENTITY((int(7)) | (int(7)), min((int(7)) | (int(7)), (int(7)) | _GLF_IDENTITY((int(7)), ((int(7))) * int(_GLF_ONE(1.0, injectionSwitch.y)))))))), ~ (_GLF_IDENTITY(~ (((_GLF_IDENTITY(_GLF_IDENTITY(1, min(1, _GLF_IDENTITY(1, (1) - 0))) << _GLF_IDENTITY(int(7), int(7)), min(_GLF_IDENTITY(1, min(1, _GLF_IDENTITY(1, (1) - 0))) << _GLF_IDENTITY(int(7), int(7)), _GLF_IDENTITY(1, min(1, _GLF_IDENTITY(1, (1) - 0))) << _GLF_IDENTITY(int(7), int(7))))) >> _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), _GLF_IDENTITY((int(7)) | (int(7)), min((int(7)) | (int(7)), (int(7)) | _GLF_IDENTITY((int(7)), ((int(7))) * int(_GLF_ONE(1.0, injectionSwitch.y))))))))), (~ (((_GLF_IDENTITY(1, min(1, _GLF_IDENTITY(1, (1) - 0))) << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), _GLF_IDENTITY((int(7)) | (int(7)), min((int(7)) | (int(7)), (int(7)) | _GLF_IDENTITY((int(7)), ((int(7))) * int(_GLF_ONE(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(float((+ 99183u)))), float(_GLF_IDENTITY(1.0, clamp(1.0, _GLF_IDENTITY(1.0, (1.0) / 1.0), 1.0))), bool(true))), injectionSwitch.y)))))))))) | (~ (((_GLF_IDENTITY(1, _GLF_IDENTITY(min(1, _GLF_IDENTITY(1, (1) - 0)), min(min(1, _GLF_IDENTITY(1, (1) - 0)), min(1, _GLF_IDENTITY(1, (1) - 0))))) << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), _GLF_IDENTITY((int(7)) | (int(7)), min((int(7)) | (int(7)), (int(7)) | _GLF_IDENTITY((int(7)), ((int(7))) * int(_GLF_ONE(1.0, injectionSwitch.y))))))))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(_GLF_IDENTITY(0, 0 + (_GLF_IDENTITY(_GLF_IDENTITY(0, (73892 & 0) | (0)), (0) + 0))), ~ (~ (_GLF_IDENTITY(0, 0 + (_GLF_IDENTITY(_GLF_IDENTITY(0, (73892 & 0) | (0)), (0) + 0))))))); _injected_loop_counter --)
                      {
                       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
                        {
                         if(_GLF_WRAPPED_IF_TRUE(true))
                          {
                           if(_GLF_DEAD(false))
                            {
                             do
                              {
                               if(_GLF_DEAD(false))
                                barrier();
                              }
                             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                             if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), ! (! (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))
                              {
                               barrier();
                               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                                {
                                 if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
                                  barrier();
                                }
                               else
                                {
                                }
                              }
                             else
                              {
                               if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec2((injectionSwitch.x > injectionSwitch.y), false))))))
                                {
                                 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                                  {
                                   barrier();
                                  }
                                }
                              }
                             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                              {
                               if(_GLF_WRAPPED_IF_FALSE(false))
                                {
                                }
                               else
                                {
                                 do
                                  {
                                   barrier();
                                  }
                                 while(_GLF_WRAPPED_LOOP(false));
                                }
                              }
                            }
                          }
                         else
                          {
                          }
                         barrier();
                        }
                      }
                     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), _GLF_IDENTITY(bool(bool(bool(bool(false)))), bool(_GLF_IDENTITY(bool(bool(bool(bool(bool(false))))), (bool(bool(bool(bool(bool(false)))))) || false)))))))
                      {
                       if(_GLF_DEAD(false))
                        {
                         if(_GLF_WRAPPED_IF_TRUE(true))
                          {
                           barrier();
                          }
                         else
                          {
                          }
                        }
                       if(_GLF_DEAD(false))
                        barrier();
                       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), false || (_GLF_IDENTITY(! (! (false)), (! (! (false))) && true))))))
                        {
                         if(_GLF_DEAD(false))
                          barrier();
                        }
                       else
                        {
                         barrier();
                        }
                      }
                     if(_GLF_DEAD(false))
                      barrier();
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch))) - abs(vec2(0.0, 0.0))).x < injectionSwitch.y))))))
                        {
                         if(_GLF_DEAD(false))
                          {
                           if(_GLF_DEAD(false))
                            barrier();
                           do
                            {
                             if(_GLF_DEAD(false))
                              barrier();
                            }
                           while(_GLF_WRAPPED_LOOP(false));
                           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                            {
                             if(_GLF_DEAD(false))
                              barrier();
                            }
                           if(_GLF_WRAPPED_IF_TRUE(true))
                            {
                             barrier();
                            }
                           else
                            {
                            }
                          }
                         do
                          {
                           if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || _GLF_IDENTITY((_GLF_DEAD(false)), bool(bvec4((_GLF_DEAD(false)), true, true, false)))))
                            {
                             if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x > injectionSwitch.y))))
                              barrier();
                             barrier();
                            }
                          }
                         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                         if(_GLF_DEAD(false))
                          barrier();
                        }
                       else
                        {
                        }
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        barrier();
                       if(_GLF_WRAPPED_IF_TRUE(true))
                        {
                         barrier();
                        }
                       else
                        {
                        }
                       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, true && (false)), true, false, true))), (injectionSwitch.x > injectionSwitch.y)))) || false))
                        {
                         do
                          {
                           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(-1.5)), bool(false)))) / 1.0)))))
                            barrier();
                           barrier();
                          }
                         while(_GLF_WRAPPED_LOOP(false));
                        }
                      }
                    }
                   else
                    {
                    }
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                    }
                   else
                    {
                    }
                   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec2((injectionSwitch.x > injectionSwitch.y), true))))))
                    barrier();
                   if(_GLF_DEAD(false))
                    {
                     do
                      {
                       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, false || (false))))
                        {
                        }
                       else
                        {
                         barrier();
                        }
                      }
                     while(_GLF_WRAPPED_LOOP(false));
                    }
                   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      {
                       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (true)))))
                        {
                         barrier();
                        }
                       else
                        {
                        }
                      }
                     barrier();
                    }
                  }
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                  {
                   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
                    {
                     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      {
                      }
                     else
                      {
                       barrier();
                      }
                    }
                  }
                 else
                  {
                  }
                 for(int _injected_loop_counter = (1488 & (0 << _GLF_IDENTITY(int(8), int(8)))); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
                  {
                   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (false))))))))
                    barrier();
                  }
                 do
                  {
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                      barrier();
                    }
                   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_IDENTITY((injectionSwitch)[0], clamp((injectionSwitch)[0], (injectionSwitch)[0], (injectionSwitch)[0])), _GLF_FUZZED(-2.7)), vec2(_GLF_FUZZED(37.63), (injectionSwitch)[1]), bvec2(false, true))), injectionSwitch, _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-9.6), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(4898.3345)), bvec2(true, false))))).y)))))))
                    {
                    }
                   else
                    {
                     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
                      {
                       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, true, false)))))
                        barrier();
                       barrier();
                      }
                     for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), max(int(2), int(2))))) >> _GLF_IDENTITY(int(2), int(2))); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
                      {
                       atomicStore(buf[_GLF_IDENTITY(next_virtual_gid, (next_virtual_gid) ^ 0u)], uint(_GLF_IDENTITY(2, 1 * (2))), 4, 64, 4);
                      }
                     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, false)))))
                      barrier();
                     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
                      {
                       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                        {
                         barrier();
                        }
                      }
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      {
                       if(_GLF_DEAD(false))
                        barrier();
                       do
                        {
                         if(_GLF_WRAPPED_IF_FALSE(false))
                          {
                          }
                         else
                          {
                           barrier();
                          }
                        }
                       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(mat4x3(injectionSwitch, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0))))).x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)));
                      }
                    }
                   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) || false)))
                    {
                    }
                   else
                    {
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                        {
                         do
                          {
                           barrier();
                          }
                         while(_GLF_WRAPPED_LOOP(false));
                         if(_GLF_DEAD(false))
                          barrier();
                        }
                       else
                        {
                        }
                      }
                    }
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)))), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))));
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                    {
                     do
                      {
                       barrier();
                      }
                     while(_GLF_WRAPPED_LOOP(false));
                    }
                  }
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
            }
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false), true), bvec2(bvec4(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false), true), false, false))))))
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec3(false, true, true))), _GLF_IDENTITY(! (! (false)), _GLF_IDENTITY(false, (false) || false) || _GLF_IDENTITY((! (! (false))), ! (! ((! (! (false))))))))))
                barrier();
               barrier();
              }
            }
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           else
            {
            }
          }
         else
          {
          }
         if(_GLF_DEAD(false))
          barrier();
         do
          {
           if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false)))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             for(int _injected_loop_counter = (1 ^ 1); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
              {
               barrier();
              }
            }
           if(_GLF_DEAD(false))
            {
             do
              {
               barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (true)))))
              {
               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(0, min(0, _GLF_IDENTITY(0, (0) / 1)))); _injected_loop_counter --)
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_IDENTITY((injectionSwitch)[0], max((injectionSwitch)[0], (injectionSwitch)[0])), _GLF_FUZZED(8869.6016)), vec2(_GLF_FUZZED(6.5), (injectionSwitch)[1]), bvec2(false, true))).y)), (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), mat2(_GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, min(1.0, 1.0)), 1.0, 1.0))) * (injectionSwitch)).y))) || _GLF_IDENTITY(false, true && (false)))))
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                   if(_GLF_DEAD(false))
                    barrier();
                   if(_GLF_DEAD(false))
                    barrier();
                   barrier();
                   for(int _injected_loop_counter = _GLF_IDENTITY(1, (1) | (1)); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, (0) >> 0)); _injected_loop_counter --)
                    {
                     if(_GLF_WRAPPED_IF_TRUE(true))
                      {
                       if(_GLF_DEAD(false))
                        barrier();
                      }
                     else
                      {
                      }
                    }
                  }
                }
              }
             else
              {
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
              }
             else
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 subgroupAll(true);
                }
               else
                {
                }
              }
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true))))))));
          }
        }
       do
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED((-5.4 - -74.72)), _GLF_IDENTITY((injectionSwitch)[1], min((injectionSwitch)[1], (injectionSwitch)[1]))), _GLF_IDENTITY(vec2((injectionSwitch)[0], _GLF_FUZZED(float(-79219))), mix(vec2(_GLF_FUZZED(vec2(-2.0, -82.79).t), (vec2((injectionSwitch)[0], _GLF_FUZZED(float(-79219))))[1]), vec2((vec2((injectionSwitch)[0], _GLF_FUZZED(float(-79219))))[0], _GLF_FUZZED(-7557.4575)), bvec2(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), bvec2(true, false))).x > injectionSwitch.y))))
          {
           for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (int(2)) | (int(2)))))); _injected_loop_counter --)
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(false))
                barrier();
              }
             else
              {
              }
            }
           barrier();
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, true && _GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), (! ((false))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), ! (! (_GLF_IDENTITY(false, true && _GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), (! ((false))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))))
          barrier();
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bool(_GLF_DEAD(false))), ! (! (_GLF_IDENTITY(bool(bool(_GLF_DEAD(false))), ! (! (bool(bool(_GLF_DEAD(false)))))))))))
      barrier();
    }
   else
    {
    }
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
