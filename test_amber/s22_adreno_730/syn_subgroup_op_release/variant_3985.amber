#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(false))
  barrier();
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(false))
  return;
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bvec4(false, false, false, false)))))), (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(_GLF_IDENTITY(! (false), ! (! (! (false)))), (_GLF_IDENTITY(_GLF_IDENTITY(! (false), true && (! (false))), ! (! (! (false))))) && true)))))
  barrier();
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && _GLF_IDENTITY(true, true && (true)))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(mat3x4(injectionSwitch.y, 0.0, 0.0, 1.0, 0.0, length(vec3(0.0, 0.0, 0.0)), sqrt(1.0), 1.0, 1.0, 1.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, 1.0), vec3(sin(0.0), 1.0, 0.0)), dot(vec3(1.0, 0.0, 1.0), vec3(sin(0.0), 1.0, 0.0))), 1.0)))))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         do
          {
           barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)) : _GLF_FUZZED(vec2(-3.3, -1.1)))).y))))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        }
       return;
      }
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     return;
    }
   if(_GLF_DEAD(false))
    return;
   return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
        barrier();
       return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))), false || (_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))))
      return;
     barrier();
    }
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! _GLF_IDENTITY((! (! (false))), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY((! (! (false))), ((! (! (false)))) || false), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)), (bool(bvec4(_GLF_IDENTITY((! (! (false))), ((! (! (false)))) || false), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))) || false)))))))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(false || (false), ! (_GLF_IDENTITY(! (false || (false)), false || (_GLF_IDENTITY(! (false || (false)), bool(bvec4(! (false || (false)), true, true, true))))))))))
  {
   if(_GLF_DEAD(false))
    barrier();
   return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 uint workgroup_id = _GLF_IDENTITY(gl_WorkGroupID.x, 0u | (gl_WorkGroupID.x));
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), max((injectionSwitch) * mat2(1.0), (_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(vec2(5.2, 7.0).t)), vec2(_GLF_FUZZED(8.3), (injectionSwitch)[1]), bvec2(false, true)))) * mat2(1.0)))).x > injectionSwitch.y)))), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), _GLF_IDENTITY(! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), true && (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), ! (! (! (! (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
    return;
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, bool(bvec4(false, true, false, true))), true)))))
  barrier();
 uint workgroup_base = workgroup_size * workgroup_id;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, false || _GLF_IDENTITY((false), true && ((_GLF_IDENTITY(false, true && _GLF_IDENTITY((false), bool(_GLF_IDENTITY(bvec3((false), true, true), bvec3(bvec3(bvec3((false), true, true)))))))))))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), mat2(1.0) * (mat2(1.0) * (_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)))))).y), ! (! (_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), mat2(1.0) * (mat2(1.0) * (injectionSwitch)))).y, min(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), mat2(1.0) * (mat2(1.0) * (injectionSwitch)))).y, _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), mat2(1.0) * (mat2(1.0) * (injectionSwitch)))).y))), bool(bool((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY(mat2(1.0) * (injectionSwitch), mix(vec2(_GLF_FUZZED((false ? -7250.6232 : 2200.5151)), _GLF_FUZZED(988.489)), vec2((mat2(1.0) * (injectionSwitch))[0], _GLF_IDENTITY((mat2(1.0) * (injectionSwitch))[1], (true ? _GLF_IDENTITY((mat2(1.0) * (injectionSwitch))[1], max((mat2(1.0) * (injectionSwitch))[1], (mat2(1.0) * (injectionSwitch))[1])) : _GLF_FUZZED(9945.0155)))), bvec2(true, true))), mat2(1.0) * (mat2(1.0) * (injectionSwitch)))).y)))))))))))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            {
             do
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
           return;
          }
         barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))));
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + 0.0) > injectionSwitch.y))))
    barrier();
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   barrier();
  }
 if(_GLF_DEAD(false))
  return;
 uint virtual_gid = _GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size + subgroup_local_id, ~ (_GLF_IDENTITY(~ (workgroup_base + subgroup_id * subgroup_size + subgroup_local_id), uint(_GLF_IDENTITY(uvec2(~ (_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, 0u | (workgroup_base + subgroup_id * subgroup_size)) + subgroup_local_id), 1u), uvec2(0u, 0u) + _GLF_IDENTITY((uvec2(~ (workgroup_base + _GLF_IDENTITY(subgroup_id, clamp(_GLF_IDENTITY(subgroup_id, (false ? _GLF_FUZZED(num_workgroup) : subgroup_id)), subgroup_id, subgroup_id)) * subgroup_size + subgroup_local_id), 1u)), min(_GLF_IDENTITY((uvec2(~ (workgroup_base + _GLF_IDENTITY(subgroup_id, clamp(_GLF_IDENTITY(subgroup_id, (false ? _GLF_FUZZED(num_workgroup) : subgroup_id)), subgroup_id, subgroup_id)) * subgroup_size + subgroup_local_id), 1u)), uvec2(0u, 0u) | ((uvec2(~ (workgroup_base + _GLF_IDENTITY(subgroup_id, clamp(_GLF_IDENTITY(subgroup_id, (false ? _GLF_FUZZED(num_workgroup) : subgroup_id)), subgroup_id, subgroup_id)) * subgroup_size + subgroup_local_id), 1u)))), (uvec2(~ (workgroup_base + _GLF_IDENTITY(subgroup_id, clamp(_GLF_IDENTITY(subgroup_id, (false ? _GLF_FUZZED(num_workgroup) : subgroup_id)), subgroup_id, subgroup_id)) * subgroup_size + subgroup_local_id), 1u)))))))));
 uint next_virtual_gid = workgroup_base + _GLF_IDENTITY(subgroup_id * _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, clamp(_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, _GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size)))), subgroup_size, _GLF_IDENTITY(subgroup_size, clamp(_GLF_IDENTITY(subgroup_size, 0u ^ (subgroup_size)), _GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size))) >> 0u), subgroup_size)))), (false ? _GLF_FUZZED(subgroup_local_id) : _GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((0u | 0u), min((0u | 0u), (0u | 0u))) ^ (subgroup_size)))), (_GLF_IDENTITY(true, ! (! (true))) ? _GLF_IDENTITY(subgroup_id * _GLF_IDENTITY(subgroup_size, (false ? _GLF_IDENTITY(_GLF_FUZZED(subgroup_local_id), 0u | (_GLF_IDENTITY(_GLF_FUZZED(subgroup_local_id), max(_GLF_IDENTITY(_GLF_FUZZED(subgroup_local_id), (_GLF_IDENTITY(_GLF_FUZZED(subgroup_local_id), (true ? _GLF_FUZZED(subgroup_local_id) : _GLF_FUZZED(subgroup_local_id)))) ^ _GLF_IDENTITY(0u, uint(uvec3(_GLF_IDENTITY(0u, max(_GLF_IDENTITY(0u, min(0u, 0u)), 0u)), (0u ^ 1u), 1u)))), _GLF_FUZZED(subgroup_local_id))))) : _GLF_IDENTITY(subgroup_size, (0u | 0u) ^ (subgroup_size)))), _GLF_IDENTITY((_GLF_IDENTITY(subgroup_id, uint(uvec3(subgroup_id, 1u, uint(_GLF_ZERO(0.0, injectionSwitch.x))))) * _GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(false, _GLF_IDENTITY((_GLF_IDENTITY(false, (false) || false)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((_GLF_IDENTITY(false, (false) || false)), ! (! ((_GLF_IDENTITY(false, (false) || false))))) && _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)))).y))), bool(bvec2(! ((_GLF_IDENTITY(false, _GLF_IDENTITY((false) || false, ! (! (_GLF_IDENTITY((false) || false, bool(bool((false) || false)))))))) && _GLF_TRUE(true, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).x, clamp(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).x, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).x, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).x)) < injectionSwitch.y))), true)))))) ? _GLF_FUZZED(subgroup_local_id) : _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((0u | 0u) ^ (subgroup_size), uint(_GLF_ONE(1.0, injectionSwitch.y)) * (_GLF_IDENTITY((0u | 0u) ^ (subgroup_size), _GLF_IDENTITY(0u + ((0u | 0u) ^ (subgroup_size)), min(0u + ((0u | 0u) ^ (subgroup_size)), _GLF_IDENTITY(0u + ((0u | 0u) ^ (subgroup_size)), _GLF_IDENTITY((0u + ((0u | 0u) ^ (subgroup_size))), max((0u + ((0u | 0u) ^ (subgroup_size))), (0u + ((0u | 0u) ^ (subgroup_size))))) | (_GLF_IDENTITY(_GLF_IDENTITY(0u + ((0u | 0u) ^ (subgroup_size)), max(0u + ((0u | 0u) ^ (subgroup_size)), 0u + ((0u | 0u) ^ (subgroup_size)))), 0u | (_GLF_IDENTITY(0u + ((0u | 0u) ^ (subgroup_size)), max(0u + ((0u | 0u) ^ (subgroup_size)), 0u + ((0u | 0u) ^ (subgroup_size)))))))))))))), min(_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((0u | 0u) ^ (subgroup_size), uint(_GLF_ONE(1.0, injectionSwitch.y)) * _GLF_IDENTITY((_GLF_IDENTITY((0u | 0u) ^ (subgroup_size), _GLF_IDENTITY(0u + ((0u | _GLF_IDENTITY(0u, max(0u, _GLF_IDENTITY(0u, uint(uvec2(0u, 0u)))))) ^ (subgroup_size)), min(0u + ((0u | 0u) ^ (subgroup_size)), _GLF_IDENTITY(_GLF_IDENTITY(0u + ((0u | 0u) ^ (subgroup_size)), min(0u + ((0u | 0u) ^ (subgroup_size)), 0u + ((0u | 0u) ^ (subgroup_size)))), (0u + ((0u | 0u) ^ (subgroup_size))) | (_GLF_IDENTITY(0u + ((0u | 0u) ^ (subgroup_size)), max(0u + ((0u | 0u) ^ (subgroup_size)), 0u + ((0u | 0u) ^ (subgroup_size)))))))))), ~ (_GLF_IDENTITY(~ ((_GLF_IDENTITY((0u | 0u) ^ (subgroup_size), _GLF_IDENTITY(0u + ((0u | _GLF_IDENTITY(0u, max(0u, _GLF_IDENTITY(0u, uint(uvec2(0u, 0u)))))) ^ (subgroup_size)), min(0u + ((0u | 0u) ^ (subgroup_size)), _GLF_IDENTITY(_GLF_IDENTITY(0u + ((0u | 0u) ^ (subgroup_size)), min(0u + ((0u | 0u) ^ (subgroup_size)), 0u + ((0u | 0u) ^ (subgroup_size)))), (0u + ((0u | 0u) ^ (subgroup_size))) | (_GLF_IDENTITY(0u + ((0u | 0u) ^ (subgroup_size)), max(0u + ((0u | 0u) ^ (subgroup_size)), 0u + ((0u | 0u) ^ (subgroup_size))))))))))), ~ (~ (_GLF_IDENTITY(~ ((_GLF_IDENTITY((0u | 0u) ^ (subgroup_size), _GLF_IDENTITY(0u + ((0u | _GLF_IDENTITY(0u, max(0u, _GLF_IDENTITY(0u, uint(uvec2(0u, 0u)))))) ^ (subgroup_size)), min(0u + ((0u | 0u) ^ (subgroup_size)), _GLF_IDENTITY(_GLF_IDENTITY(0u + ((0u | 0u) ^ (subgroup_size)), min(0u + ((0u | 0u) ^ (subgroup_size)), 0u + ((0u | 0u) ^ (subgroup_size)))), (0u + ((0u | 0u) ^ (subgroup_size))) | (_GLF_IDENTITY(0u + ((0u | 0u) ^ (subgroup_size)), max(0u + ((0u | 0u) ^ (subgroup_size)), 0u + ((0u | 0u) ^ (subgroup_size))))))))))), (~ ((_GLF_IDENTITY((0u | 0u) ^ (subgroup_size), _GLF_IDENTITY(0u + ((0u | _GLF_IDENTITY(0u, max(0u, _GLF_IDENTITY(0u, uint(uvec2(0u, 0u)))))) ^ (subgroup_size)), min(0u + ((0u | 0u) ^ (subgroup_size)), _GLF_IDENTITY(_GLF_IDENTITY(0u + ((0u | 0u) ^ (subgroup_size)), min(0u + ((0u | 0u) ^ (subgroup_size)), 0u + ((0u | 0u) ^ (subgroup_size)))), (0u + ((0u | 0u) ^ (subgroup_size))) | (_GLF_IDENTITY(0u + ((0u | 0u) ^ (subgroup_size)), max(0u + ((0u | 0u) ^ (subgroup_size)), 0u + ((0u | 0u) ^ (subgroup_size)))))))))))) | (~ ((_GLF_IDENTITY((0u | 0u) ^ (subgroup_size), _GLF_IDENTITY(0u + ((0u | _GLF_IDENTITY(0u, max(0u, _GLF_IDENTITY(0u, uint(uvec2(0u, 0u)))))) ^ (subgroup_size)), min(0u + ((0u | 0u) ^ (subgroup_size)), _GLF_IDENTITY(_GLF_IDENTITY(0u + ((0u | 0u) ^ (subgroup_size)), min(0u + ((0u | 0u) ^ (subgroup_size)), 0u + ((0u | 0u) ^ (subgroup_size)))), (0u + ((0u | 0u) ^ (subgroup_size))) | (_GLF_IDENTITY(0u + ((0u | 0u) ^ (subgroup_size)), max(0u + ((0u | 0u) ^ (subgroup_size)), 0u + ((0u | 0u) ^ (subgroup_size)))))))))))))))))))), _GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((_GLF_IDENTITY(0u | 0u, (_GLF_IDENTITY(0u | 0u, 0u | (0u | 0u))) ^ (0u | 0u))) ^ (subgroup_size), uint(_GLF_ONE(1.0, injectionSwitch.y)) * (_GLF_IDENTITY((0u | 0u) ^ (subgroup_size), _GLF_IDENTITY(0u + ((0u | 0u) ^ (subgroup_size)), min(0u + ((0u | 0u) ^ (subgroup_size)), _GLF_IDENTITY(0u + ((0u | 0u) ^ (subgroup_size)), (0u + (_GLF_IDENTITY((0u | 0u) ^ (subgroup_size), ((0u | 0u) ^ (subgroup_size)) | ((0u | 0u) ^ (subgroup_size))))) | (_GLF_IDENTITY(0u + ((0u | 0u) ^ (subgroup_size)), max(0u + ((0u | 0u) ^ (subgroup_size)), 0u + ((0u | 0u) ^ (subgroup_size))))))))))))))))), _GLF_IDENTITY((false ? _GLF_FUZZED(subgroup_id) : (_GLF_IDENTITY(subgroup_id * _GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY((_GLF_IDENTITY(false, (false) || false)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(false, (false) || false)), ! (! ((_GLF_IDENTITY(false, (false) || false))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(bool(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(false, (false) || false)), ! (! ((_GLF_IDENTITY(false, (false) || false))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(bvec3(_GLF_IDENTITY((_GLF_IDENTITY(false, (false) || false)), ! (! ((_GLF_IDENTITY(false, (false) || false))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, false))))))), bool(bvec2(! ((_GLF_IDENTITY(false, (false) || false)) && _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(_GLF_IDENTITY(1.0, max(1.0, 1.0)), 1.0)).x < injectionSwitch.y))), true)))))) ? _GLF_FUZZED(subgroup_local_id) : _GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((0u | 0u) ^ (subgroup_size), uint(_GLF_ONE(1.0, injectionSwitch.y)) * (_GLF_IDENTITY((0u | 0u) ^ (subgroup_size), _GLF_IDENTITY(0u + ((0u | 0u) ^ (_GLF_IDENTITY(subgroup_size, (subgroup_size) << 0u))), min(0u + ((0u | 0u) ^ (subgroup_size)), _GLF_IDENTITY(0u + ((0u | 0u) ^ (subgroup_size)), (0u + ((0u | 0u) ^ (subgroup_size))) | (_GLF_IDENTITY(0u + ((0u | 0u) ^ (subgroup_size)), max(0u + ((0u | 0u) ^ (subgroup_size)), 0u + ((0u | 0u) ^ (subgroup_size)))))))))))), (1u ^ 1u) | (_GLF_IDENTITY(false, _GLF_IDENTITY((_GLF_IDENTITY(false, (false) || false)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(false, (false) || false)), ! (! ((_GLF_IDENTITY(false, (false) || false))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(bool(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(false, (false) || false)), ! (! ((_GLF_IDENTITY(false, (false) || false))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(bvec3(_GLF_IDENTITY((_GLF_IDENTITY(false, (false) || false)), ! (! ((_GLF_IDENTITY(false, (false) || false))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, false))))))), bool(bvec2(! ((_GLF_IDENTITY(false, (false) || false)) && _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(_GLF_IDENTITY(1.0, max(1.0, 1.0)), 1.0)).x < injectionSwitch.y))), true)))))) ? _GLF_FUZZED(subgroup_local_id) : _GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((0u | 0u) ^ (subgroup_size), uint(_GLF_ONE(1.0, injectionSwitch.y)) * (_GLF_IDENTITY((0u | 0u) ^ (subgroup_size), _GLF_IDENTITY(0u + ((0u | 0u) ^ (_GLF_IDENTITY(subgroup_size, (subgroup_size) << 0u))), min(0u + ((0u | 0u) ^ (subgroup_size)), _GLF_IDENTITY(0u + ((0u | 0u) ^ (subgroup_size)), (0u + ((0u | 0u) ^ (subgroup_size))) | (_GLF_IDENTITY(0u + ((0u | 0u) ^ (subgroup_size)), max(0u + ((0u | 0u) ^ (subgroup_size)), 0u + ((0u | 0u) ^ (subgroup_size)))))))))))))))), (true ? _GLF_IDENTITY(subgroup_id * _GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY((_GLF_IDENTITY(false, (false) || false)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(false, (false) || false)), ! (! ((_GLF_IDENTITY(false, (false) || false))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(bool(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(false, (false) || false)), ! (! ((_GLF_IDENTITY(false, (false) || false))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(bvec3(_GLF_IDENTITY((_GLF_IDENTITY(false, (false) || false)), ! (! ((_GLF_IDENTITY(false, (false) || false))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, false))))))), bool(bvec2(! ((_GLF_IDENTITY(false, (false) || false)) && _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(_GLF_IDENTITY(1.0, max(1.0, 1.0)), 1.0)).x < injectionSwitch.y))), true)))))) ? _GLF_FUZZED(subgroup_local_id) : _GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((0u | 0u) ^ (subgroup_size), uint(_GLF_ONE(1.0, injectionSwitch.y)) * (_GLF_IDENTITY((0u | 0u) ^ (subgroup_size), _GLF_IDENTITY(0u + ((0u | 0u) ^ (_GLF_IDENTITY(subgroup_size, (subgroup_size) << 0u))), min(0u + ((0u | 0u) ^ (subgroup_size)), _GLF_IDENTITY(0u + ((0u | 0u) ^ (subgroup_size)), (0u + ((0u | 0u) ^ (subgroup_size))) | (_GLF_IDENTITY(0u + ((0u | 0u) ^ (subgroup_size)), max(0u + ((0u | 0u) ^ (subgroup_size)), 0u + ((0u | 0u) ^ (subgroup_size)))))))))))), (1u ^ 1u) | (_GLF_IDENTITY(false, _GLF_IDENTITY((_GLF_IDENTITY(false, (false) || false)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(false, (false) || false)), ! (! ((_GLF_IDENTITY(false, (false) || false))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(bool(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(false, (false) || false)), ! (! ((_GLF_IDENTITY(false, (false) || false))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(bvec3(_GLF_IDENTITY((_GLF_IDENTITY(false, (false) || false)), ! (! ((_GLF_IDENTITY(false, (false) || false))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, false))))))), bool(bvec2(! ((_GLF_IDENTITY(false, (false) || false)) && _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(_GLF_IDENTITY(1.0, max(1.0, 1.0)), 1.0)).x < injectionSwitch.y))), true)))))) ? _GLF_FUZZED(subgroup_local_id) : _GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((0u | 0u) ^ (subgroup_size), uint(_GLF_ONE(1.0, injectionSwitch.y)) * (_GLF_IDENTITY((0u | 0u) ^ (subgroup_size), _GLF_IDENTITY(0u + ((0u | 0u) ^ (_GLF_IDENTITY(subgroup_size, (subgroup_size) << 0u))), min(0u + ((0u | 0u) ^ (subgroup_size)), _GLF_IDENTITY(0u + ((0u | 0u) ^ (subgroup_size)), (0u + ((0u | 0u) ^ (subgroup_size))) | (_GLF_IDENTITY(0u + ((0u | 0u) ^ (subgroup_size)), max(0u + ((0u | 0u) ^ (subgroup_size)), 0u + ((0u | 0u) ^ (subgroup_size)))))))))))))))), (true ? subgroup_id * _GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY((_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec2(! (false), true)))))) || false)) && _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, false || (_GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(vec2(injectionSwitch.x, 0.0), (false ? _GLF_FUZZED(mat3x2(-17.63, -11.89, -296.977, -5.5, -8.6, 8192.7762)[2]) : vec2(injectionSwitch.x, 0.0))))) < injectionSwitch.y)))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(false, (false) || false)), ! (! ((_GLF_IDENTITY(false, (false) || false))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(bool(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(false, _GLF_IDENTITY((false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || ((false))) || false)), ! (! ((_GLF_IDENTITY(false, (false) || false))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(bvec3(_GLF_IDENTITY((_GLF_IDENTITY(false, (false) || false)), ! (! ((_GLF_IDENTITY(false, (false) || false))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, false))))))), bool(bvec2(! ((_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), bool(bvec2(_GLF_IDENTITY(false, (false) || false), true)))) && _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(_GLF_IDENTITY(1.0, max(1.0, 1.0)), 1.0)).x < injectionSwitch.y))), true)))))) ? _GLF_FUZZED(subgroup_local_id) : _GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((0u | 0u) ^ (subgroup_size), uint(_GLF_ONE(1.0, injectionSwitch.y)) * (_GLF_IDENTITY((0u | 0u) ^ _GLF_IDENTITY((subgroup_size), max(_GLF_IDENTITY((subgroup_size), 0u + (_GLF_IDENTITY((subgroup_size), clamp((subgroup_size), (subgroup_size), (subgroup_size))))), (subgroup_size))), _GLF_IDENTITY(0u + ((_GLF_IDENTITY(0u | 0u, uint(uvec2(0u | 0u, 1u)))) ^ (_GLF_IDENTITY(subgroup_size, (subgroup_size) << 0u))), min(_GLF_IDENTITY(0u, (0u) ^ 0u) + ((0u | 0u) ^ (subgroup_size)), _GLF_IDENTITY(0u + ((0u | 0u) ^ (subgroup_size)), (0u + ((0u | 0u) ^ (subgroup_size))) | (_GLF_IDENTITY(0u + ((0u | 0u) ^ (subgroup_size)), max(0u + ((0u | 0u) ^ (subgroup_size)), 0u + ((0u | 0u) ^ (subgroup_size)))))))))))), (1u ^ 1u) | (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, false || (false)), false, false))), _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, false || (false)))))) || _GLF_IDENTITY(false, ! (! (false))))), true && ((_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, false || (false)))))) || _GLF_IDENTITY(false, ! (! (false))))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(false, (false) || false)), ! (! ((_GLF_IDENTITY(false, (false) || false))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(bool(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(false, (false) || false)), ! (! ((_GLF_IDENTITY(false, (false) || false))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(false, (false) || false)), ! (! ((_GLF_IDENTITY(false, (false) || false))))), false || (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(false, (false) || false)), ! (! ((_GLF_IDENTITY(false, (false) || false))))), (_GLF_IDENTITY((_GLF_IDENTITY(false, (false) || false)), ! (! ((_GLF_IDENTITY(false, (false) || false)))))) || false))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, false))))))), bool(bvec2(! ((_GLF_IDENTITY(false, (false) || false)) && _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(_GLF_IDENTITY(1.0, max(1.0, 1.0)), 1.0)).x < injectionSwitch.y))), true)))))) ? _GLF_FUZZED(subgroup_local_id) : _GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(_GLF_IDENTITY((0u | 0u) ^ (subgroup_size), (_GLF_IDENTITY((0u | 0u), 0u | (_GLF_IDENTITY((0u | 0u), (true ? (0u | 0u) : _GLF_FUZZED(workgroup_base))))) ^ (subgroup_size)) / 1u), _GLF_IDENTITY(uint(_GLF_ONE(1.0, injectionSwitch.y)) * (_GLF_IDENTITY((0u | 0u) ^ (subgroup_size), _GLF_IDENTITY(0u + ((0u | 0u) ^ (_GLF_IDENTITY(subgroup_size, (subgroup_size) << 0u))), min(0u + ((0u | 0u) ^ (subgroup_size)), _GLF_IDENTITY(0u + ((0u | 0u) ^ (subgroup_size)), (0u + ((0u | 0u) ^ (subgroup_size))) | (_GLF_IDENTITY(0u + ((0u | 0u) ^ (subgroup_size)), max(0u + ((0u | 0u) ^ (subgroup_size)), 0u + ((0u | 0u) ^ (subgroup_size)))))))))), min(uint(_GLF_ONE(1.0, injectionSwitch.y)) * (_GLF_IDENTITY((0u | 0u) ^ (subgroup_size), _GLF_IDENTITY(0u + ((0u | 0u) ^ (_GLF_IDENTITY(subgroup_size, (subgroup_size) << 0u))), min(0u + ((0u | 0u) ^ (subgroup_size)), _GLF_IDENTITY(0u + ((0u | 0u) ^ (subgroup_size)), (0u + ((0u | 0u) ^ (subgroup_size))) | (_GLF_IDENTITY(0u + ((0u | 0u) ^ (subgroup_size)), max(0u + ((0u | 0u) ^ (subgroup_size)), 0u + ((0u | 0u) ^ (subgroup_size)))))))))), uint(_GLF_ONE(1.0, injectionSwitch.y)) * (_GLF_IDENTITY((0u | 0u) ^ (subgroup_size), _GLF_IDENTITY(0u + ((0u | 0u) ^ (_GLF_IDENTITY(subgroup_size, (subgroup_size) << 0u))), min(0u + ((0u | 0u) ^ (subgroup_size)), _GLF_IDENTITY(0u + ((0u | 0u) ^ (subgroup_size)), (0u + ((0u | 0u) ^ (subgroup_size))) | (_GLF_IDENTITY(0u + ((0u | 0u) ^ (subgroup_size)), max(0u + ((0u | 0u) ^ (subgroup_size)), 0u + ((0u | 0u) ^ (subgroup_size)))))))))))))))))) : _GLF_FUZZED(workgroup_id))) : _GLF_FUZZED((++ workgroup_size)))))), ((false ? _GLF_FUZZED(subgroup_id) : (_GLF_IDENTITY(subgroup_id * _GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY((_GLF_IDENTITY(false, (false) || false)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(false, (false) || false)), ! (! ((_GLF_IDENTITY(false, (false) || false))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(bool(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(false, (false) || false)), ! (! ((_GLF_IDENTITY(false, (false) || false))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(bvec3(_GLF_IDENTITY((_GLF_IDENTITY(false, (false) || false)), ! (! ((_GLF_IDENTITY(false, (false) || false))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, false))))))), bool(bvec2(! ((_GLF_IDENTITY(false, (false) || false)) && _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(_GLF_IDENTITY(1.0, max(1.0, 1.0)), 1.0)).x < injectionSwitch.y))), true)))))) ? _GLF_FUZZED(subgroup_local_id) : _GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((0u | 0u) ^ (subgroup_size), uint(_GLF_ONE(1.0, injectionSwitch.y)) * (_GLF_IDENTITY((0u | 0u) ^ (subgroup_size), _GLF_IDENTITY(0u + ((0u | 0u) ^ (_GLF_IDENTITY(subgroup_size, (subgroup_size) << 0u))), min(0u + ((0u | 0u) ^ (subgroup_size)), _GLF_IDENTITY(0u + ((0u | 0u) ^ (subgroup_size)), (0u + ((0u | 0u) ^ (subgroup_size))) | (_GLF_IDENTITY(0u + ((0u | 0u) ^ (subgroup_size)), max(0u + ((0u | 0u) ^ (subgroup_size)), 0u + ((0u | 0u) ^ (subgroup_size)))))))))))), (1u ^ 1u) | (_GLF_IDENTITY(false, _GLF_IDENTITY((_GLF_IDENTITY(false, (false) || false)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(false, (false) || false)), ! (! ((_GLF_IDENTITY(false, (false) || false))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(bool(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(false, (false) || false)), ! (! ((_GLF_IDENTITY(false, (false) || false))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(bvec3(_GLF_IDENTITY((_GLF_IDENTITY(false, (false) || false)), ! (! ((_GLF_IDENTITY(false, (false) || false))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, false))))))), bool(bvec2(! ((_GLF_IDENTITY(false, (false) || false)) && _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(_GLF_IDENTITY(1.0, max(1.0, 1.0)), 1.0)).x < injectionSwitch.y))), true)))))) ? _GLF_FUZZED(subgroup_local_id) : _GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((0u | 0u) ^ (subgroup_size), uint(_GLF_ONE(1.0, injectionSwitch.y)) * (_GLF_IDENTITY((0u | 0u) ^ (subgroup_size), _GLF_IDENTITY(0u + ((0u | 0u) ^ (_GLF_IDENTITY(subgroup_size, (subgroup_size) << 0u))), min(0u + ((0u | 0u) ^ (subgroup_size)), _GLF_IDENTITY(0u + ((0u | 0u) ^ (subgroup_size)), (0u + ((0u | 0u) ^ (subgroup_size))) | (_GLF_IDENTITY(0u + ((0u | 0u) ^ (subgroup_size)), max(0u + ((0u | 0u) ^ (subgroup_size)), 0u + ((0u | 0u) ^ (subgroup_size)))))))))))))))), (true ? _GLF_IDENTITY(subgroup_id * _GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY((_GLF_IDENTITY(false, (false) || false)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(false, (false) || false)), ! (! ((_GLF_IDENTITY(false, (false) || false))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(bool(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(false, (false) || false)), ! (! ((_GLF_IDENTITY(false, (false) || false))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(bvec3(_GLF_IDENTITY((_GLF_IDENTITY(false, (false) || false)), ! (! ((_GLF_IDENTITY(false, (false) || false))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, false))))))), bool(bvec2(! ((_GLF_IDENTITY(false, (false) || false)) && _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(_GLF_IDENTITY(1.0, max(1.0, 1.0)), 1.0)).x < injectionSwitch.y))), true)))))) ? _GLF_FUZZED(subgroup_local_id) : _GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((0u | 0u) ^ (subgroup_size), uint(_GLF_ONE(1.0, injectionSwitch.y)) * (_GLF_IDENTITY((0u | 0u) ^ (subgroup_size), _GLF_IDENTITY(0u + ((0u | 0u) ^ (_GLF_IDENTITY(subgroup_size, (subgroup_size) << 0u))), min(0u + ((0u | 0u) ^ (subgroup_size)), _GLF_IDENTITY(0u + ((0u | 0u) ^ (subgroup_size)), (0u + ((0u | 0u) ^ (subgroup_size))) | (_GLF_IDENTITY(0u + ((0u | 0u) ^ (subgroup_size)), max(0u + ((0u | 0u) ^ (subgroup_size)), 0u + ((0u | 0u) ^ (subgroup_size)))))))))))), (1u ^ 1u) | (_GLF_IDENTITY(false, _GLF_IDENTITY((_GLF_IDENTITY(false, (false) || false)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(false, (false) || false)), ! (! ((_GLF_IDENTITY(false, (false) || false))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(bool(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(false, (false) || false)), ! (! ((_GLF_IDENTITY(false, (false) || false))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(bvec3(_GLF_IDENTITY((_GLF_IDENTITY(false, (false) || false)), ! (! ((_GLF_IDENTITY(false, (false) || false))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, false))))))), bool(bvec2(! ((_GLF_IDENTITY(false, (false) || false)) && _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(_GLF_IDENTITY(1.0, max(1.0, 1.0)), 1.0)).x < injectionSwitch.y))), true)))))) ? _GLF_FUZZED(subgroup_local_id) : _GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((0u | 0u) ^ (subgroup_size), uint(_GLF_ONE(1.0, injectionSwitch.y)) * (_GLF_IDENTITY((0u | 0u) ^ (subgroup_size), _GLF_IDENTITY(0u + ((0u | 0u) ^ (_GLF_IDENTITY(subgroup_size, (subgroup_size) << 0u))), min(0u + ((0u | 0u) ^ (subgroup_size)), _GLF_IDENTITY(0u + ((0u | 0u) ^ (subgroup_size)), (0u + ((0u | 0u) ^ (subgroup_size))) | (_GLF_IDENTITY(0u + ((0u | 0u) ^ (subgroup_size)), max(0u + ((0u | 0u) ^ (subgroup_size)), 0u + ((0u | 0u) ^ (subgroup_size)))))))))))))))), (true ? subgroup_id * _GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY((_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec2(! (false), true)))))) || false)) && _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, false || (_GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(vec2(injectionSwitch.x, 0.0), (false ? _GLF_FUZZED(mat3x2(-17.63, -11.89, -296.977, -5.5, -8.6, 8192.7762)[2]) : vec2(injectionSwitch.x, 0.0))))) < injectionSwitch.y)))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(false, (false) || false)), ! (! ((_GLF_IDENTITY(false, (false) || false))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(bool(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(false, _GLF_IDENTITY((false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || ((false))) || false)), ! (! ((_GLF_IDENTITY(false, (false) || false))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(bvec3(_GLF_IDENTITY((_GLF_IDENTITY(false, (false) || false)), ! (! ((_GLF_IDENTITY(false, (false) || false))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, false))))))), bool(bvec2(! ((_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), bool(bvec2(_GLF_IDENTITY(false, (false) || false), true)))) && _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(_GLF_IDENTITY(1.0, max(1.0, 1.0)), 1.0)).x < injectionSwitch.y))), true)))))) ? _GLF_FUZZED(subgroup_local_id) : _GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((0u | 0u) ^ (subgroup_size), uint(_GLF_ONE(1.0, injectionSwitch.y)) * (_GLF_IDENTITY((0u | 0u) ^ _GLF_IDENTITY((subgroup_size), max(_GLF_IDENTITY((subgroup_size), 0u + (_GLF_IDENTITY((subgroup_size), clamp((subgroup_size), (subgroup_size), (subgroup_size))))), (subgroup_size))), _GLF_IDENTITY(0u + ((_GLF_IDENTITY(0u | 0u, uint(uvec2(0u | 0u, 1u)))) ^ (_GLF_IDENTITY(subgroup_size, (subgroup_size) << 0u))), min(_GLF_IDENTITY(0u, (0u) ^ 0u) + ((0u | 0u) ^ (subgroup_size)), _GLF_IDENTITY(0u + ((0u | 0u) ^ (subgroup_size)), (0u + ((0u | 0u) ^ (subgroup_size))) | (_GLF_IDENTITY(0u + ((0u | 0u) ^ (subgroup_size)), max(0u + ((0u | 0u) ^ (subgroup_size)), 0u + ((0u | 0u) ^ (subgroup_size)))))))))))), (1u ^ 1u) | (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, false || (false)), false, false))), _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, false || (false)))))) || _GLF_IDENTITY(false, ! (! (false))))), true && ((_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, false || (false)))))) || _GLF_IDENTITY(false, ! (! (false))))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(false, (false) || false)), ! (! ((_GLF_IDENTITY(false, (false) || false))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(bool(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(false, (false) || false)), ! (! ((_GLF_IDENTITY(false, (false) || false))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(false, (false) || false)), ! (! ((_GLF_IDENTITY(false, (false) || false))))), false || (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(false, (false) || false)), ! (! ((_GLF_IDENTITY(false, (false) || false))))), (_GLF_IDENTITY((_GLF_IDENTITY(false, (false) || false)), ! (! ((_GLF_IDENTITY(false, (false) || false)))))) || false))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, false))))))), bool(bvec2(! ((_GLF_IDENTITY(false, (false) || false)) && _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(_GLF_IDENTITY(1.0, max(1.0, 1.0)), 1.0)).x < injectionSwitch.y))), true)))))) ? _GLF_FUZZED(subgroup_local_id) : _GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(_GLF_IDENTITY((0u | 0u) ^ (subgroup_size), (_GLF_IDENTITY((0u | 0u), 0u | (_GLF_IDENTITY((0u | 0u), (true ? (0u | 0u) : _GLF_FUZZED(workgroup_base))))) ^ (subgroup_size)) / 1u), _GLF_IDENTITY(uint(_GLF_ONE(1.0, injectionSwitch.y)) * (_GLF_IDENTITY((0u | 0u) ^ (subgroup_size), _GLF_IDENTITY(0u + ((0u | 0u) ^ (_GLF_IDENTITY(subgroup_size, (subgroup_size) << 0u))), min(0u + ((0u | 0u) ^ (subgroup_size)), _GLF_IDENTITY(0u + ((0u | 0u) ^ (subgroup_size)), (0u + ((0u | 0u) ^ (subgroup_size))) | (_GLF_IDENTITY(0u + ((0u | 0u) ^ (subgroup_size)), max(0u + ((0u | 0u) ^ (subgroup_size)), 0u + ((0u | 0u) ^ (subgroup_size)))))))))), min(uint(_GLF_ONE(1.0, injectionSwitch.y)) * (_GLF_IDENTITY((0u | 0u) ^ (subgroup_size), _GLF_IDENTITY(0u + ((0u | 0u) ^ (_GLF_IDENTITY(subgroup_size, (subgroup_size) << 0u))), min(0u + ((0u | 0u) ^ (subgroup_size)), _GLF_IDENTITY(0u + ((0u | 0u) ^ (subgroup_size)), (0u + ((0u | 0u) ^ (subgroup_size))) | (_GLF_IDENTITY(0u + ((0u | 0u) ^ (subgroup_size)), max(0u + ((0u | 0u) ^ (subgroup_size)), 0u + ((0u | 0u) ^ (subgroup_size)))))))))), uint(_GLF_ONE(1.0, injectionSwitch.y)) * (_GLF_IDENTITY((0u | 0u) ^ (subgroup_size), _GLF_IDENTITY(0u + ((0u | 0u) ^ (_GLF_IDENTITY(subgroup_size, (subgroup_size) << 0u))), min(0u + ((0u | 0u) ^ (subgroup_size)), _GLF_IDENTITY(0u + ((0u | 0u) ^ (subgroup_size)), (0u + ((0u | 0u) ^ (subgroup_size))) | (_GLF_IDENTITY(0u + ((0u | 0u) ^ (subgroup_size)), max(0u + ((0u | 0u) ^ (subgroup_size)), 0u + ((0u | 0u) ^ (subgroup_size)))))))))))))))))) : _GLF_FUZZED(workgroup_id))) : _GLF_FUZZED((++ workgroup_size))))))) ^ 0u)) * 1u) : _GLF_FUZZED((_GLF_IDENTITY(workgroup_base, max(_GLF_IDENTITY(workgroup_base, clamp(workgroup_base, workgroup_base, workgroup_base)), workgroup_base)) + _GLF_IDENTITY(workgroup_id, (_GLF_IDENTITY(workgroup_id, (0u << _GLF_IDENTITY(uint(1u), uint(1u))) | (workgroup_id))) * 1u))))) + (_GLF_IDENTITY((subgroup_local_id + 1), (_GLF_IDENTITY((subgroup_local_id + 1), min((_GLF_IDENTITY(subgroup_local_id + 1, (_GLF_IDENTITY(subgroup_local_id + 1, ~ (~ (subgroup_local_id + 1)))) | (_GLF_IDENTITY(subgroup_local_id + 1, (_GLF_IDENTITY(false, ! (! (false))) ? _GLF_FUZZED((virtual_gid % 142249u)) : _GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, ~ (~ (subgroup_local_id)))) | uint(_GLF_ZERO(0.0, injectionSwitch.x))) + 1))))), (subgroup_local_id + 1)))) << 0u) % _GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size)));
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(_GLF_IDENTITY(float(injectionSwitch.y), 0.0 + (_GLF_IDENTITY(float(injectionSwitch.y), mix(float(float(injectionSwitch.y)), float(_GLF_FUZZED(-4.4)), bool(false))))), float(_GLF_FUZZED(45.54)), bool(false)))))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(false))
        barrier();
       barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         return;
        }
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
          barrier();
         barrier();
        }
       barrier();
      }
    }
   else
    {
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, ! (! (false)))), ! (_GLF_IDENTITY(! (! (_GLF_IDENTITY(false, ! (! (false))))), bool(bvec2(! (! (_GLF_IDENTITY(false, ! (! (false))))), false)))))))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       barrier();
      }
    }
   return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
        }
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   return;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, float(mat2x4(injectionSwitch.x, 0.0, 1.0, 0.0, 0.0, sqrt(1.0), round(length(normalize(exp(0.0)))), 0.0))) < _GLF_IDENTITY(injectionSwitch.y, 1.0 * (injectionSwitch.y)), true && (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-347.338), _GLF_FUZZED(5.0)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))).x, float(mat2x4(injectionSwitch.x, 0.0, 1.0, 0.0, 0.0, sqrt(1.0), round(length(normalize(exp(0.0)))), 0.0))) < _GLF_IDENTITY(injectionSwitch.y, 1.0 * (injectionSwitch.y))))))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   return;
  }
 do
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      break;
     barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   _GLF_IDENTITY(buf[virtual_gid] = 1, (_GLF_IDENTITY(buf[virtual_gid] = 1, (buf[virtual_gid] = 1) ^ 0u)) << 0u);
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), true && _GLF_IDENTITY((! _GLF_IDENTITY((false), false || ((false)))), ((! _GLF_IDENTITY((false), false || ((false))))) || false))))))))))))))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     return;
    }
   barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > (0 >> _GLF_IDENTITY(int(3), int(3))), ! (! _GLF_IDENTITY((_injected_loop_counter > (0 >> _GLF_IDENTITY(int(3), int(3)))), (_GLF_IDENTITY((_injected_loop_counter > (0 >> _GLF_IDENTITY(int(3), int(3)))), true && ((_injected_loop_counter > (0 >> _GLF_IDENTITY(int(3), int(3))))))) && true)))); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, false, false)))))
      continue;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      break;
     barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
        barrier();
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         barrier();
        }
       else
        {
        }
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    barrier();
  }
 for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), true))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))))), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! _GLF_IDENTITY(((injectionSwitch.x > injectionSwitch.y)), bool(_GLF_IDENTITY(bvec2(((injectionSwitch.x > injectionSwitch.y)), true), bvec2(bvec2(bvec2(((injectionSwitch.x > injectionSwitch.y)), true)))))))), true)), ! (! (_GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(_GLF_IDENTITY(float(injectionSwitch.y), clamp(float(injectionSwitch.y), float(injectionSwitch.y), float(injectionSwitch.y)))), float(mat3x4(float(_GLF_IDENTITY(float(injectionSwitch.y), clamp(float(injectionSwitch.y), float(injectionSwitch.y), float(injectionSwitch.y)))), 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0))))), ! (! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).y)))), true)), ! (! _GLF_IDENTITY((bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))), ! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))))), true, false, false)), ! (! (bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))), ! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))))), true, false, false)))))), true))), ! (! (_GLF_IDENTITY((bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))), ! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))))), true, false, false)), ! (! (bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))), ! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))))), true, false, false)))))), true))), ! (! ((bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))), ! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))))), true, false, false)), ! (! (bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))), ! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))))), true, false, false)))))), true))))))))))))))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, max(subgroup_local_id + 1, _GLF_IDENTITY(subgroup_local_id + 1, (_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) + 0u)) | (subgroup_local_id + 1)))), min(subgroup_local_id + 1, subgroup_local_id + 1)), (subgroup_local_id + 1) | (_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) >> 0u))) < subgroup_size)
    {
     if(_GLF_DEAD(false))
      barrier();
     atomicStore(buf[_GLF_IDENTITY(next_virtual_gid, min(next_virtual_gid, next_virtual_gid))], uint(2), _GLF_IDENTITY(4, (4) >> 0), _GLF_IDENTITY(64, ~ (~ (64))), 4);
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          break;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (false))))))))
          continue;
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
           if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))))
            continue;
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
           continue;
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
         barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         do
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(-9.6)))))))
        barrier();
       subgroupAll(false);
       for(int _injected_loop_counter = ((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(5), int(5)), 0 ^ (1 << _GLF_IDENTITY(int(5), int(5))))) >> _GLF_IDENTITY(int(5), int(5))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 | _GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(_injected_loop_counter))))); _injected_loop_counter --)
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            break;
           barrier();
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
            barrier();
           if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true))))))))
            break;
           barrier();
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             barrier();
            }
           barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
        }
       if(_GLF_DEAD(false))
        {
         do
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            return;
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
      }
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              continue;
             if(_GLF_DEAD(false))
              barrier();
             barrier();
             if(_GLF_DEAD(false))
              barrier();
            }
           if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bool(false)))))), (injectionSwitch.x > injectionSwitch.y))))
            break;
           if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, true, false)))))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
           barrier();
           if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
          }
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false)))))), (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       break;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     atomicStore(buf[next_virtual_gid], uint(2), 4, 64, 4);
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, (false) && true), true, false)))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       break;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       subgroupAll(true);
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            barrier();
           break;
          }
         if(_GLF_DEAD(false))
          barrier();
         barrier();
         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
          barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y)))))))))))
        barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 do
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false)))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat3x2(injectionSwitch, 0.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0))).x, (_GLF_IDENTITY(injectionSwitch, vec2(mat3x2(injectionSwitch, 0.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0))).x) / 1.0) > _GLF_IDENTITY(injectionSwitch.y, float(mat2x4(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0), 0.0, 1.0, determinant(mat2(1.0, 0.0, 1.0, 1.0)), 1.0, sin(0.0), 1.0, 1.0)))))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(2, clamp(2, 2, 2))), clamp(_GLF_IDENTITY(int(_GLF_IDENTITY(2, clamp(2, 2, 2))), max(_GLF_IDENTITY(int(_GLF_IDENTITY(2, clamp(2, 2, 2))), (int(_GLF_IDENTITY(2, clamp(2, 2, 2)))) | (int(_GLF_IDENTITY(2, clamp(2, 2, 2))))), int(_GLF_IDENTITY(2, clamp(2, 2, 2))))), int(_GLF_IDENTITY(2, clamp(2, 2, 2))), int(_GLF_IDENTITY(2, clamp(2, 2, 2))))), int(2))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(2), int(ivec4(int(2), 0, 1, (0 & -59773)))), int(2)))); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
           barrier();
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         continue;
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)), _GLF_IDENTITY(mix(vec2((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch)[1], min((injectionSwitch)[1], (injectionSwitch)[1]))), vec2(_GLF_FUZZED(-3910.2883), _GLF_FUZZED(4.1)), bvec2(false, false)), (mix(vec2((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch)[1], min((injectionSwitch)[1], (injectionSwitch)[1]))), _GLF_IDENTITY(vec2(_GLF_FUZZED(-3910.2883), _GLF_FUZZED(4.1)), vec2(mat4(vec2(_GLF_FUZZED(-3910.2883), _GLF_FUZZED(4.1)), tan(0.0), 0.0, 1.0, sqrt(1.0), 0.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, determinant(mat4(0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), 1.0, 0.0)), dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, determinant(mat4(0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), 1.0, 0.0))), 0.0, 1.0, 0.0, 1.0, 1.0))), bvec2(false, false))) - sin(vec2(0.0, 0.0)))).y))))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) && true)))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         barrier();
        }
       else
        {
        }
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false), true)), (bool(bvec2(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false), true))) || false))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
       if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), ! (! (_GLF_IDENTITY(false, ! (! (false))))))))))))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))
                barrier();
               if(_GLF_DEAD(false))
                barrier();
               break;
              }
             barrier();
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           return;
          }
         else
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)), (bool(bvec4(false, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))) || false))))
              barrier();
             barrier();
            }
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                barrier();
               break;
              }
             if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), ! (! (! (! (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, false || (false))))))))))), ! (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY(false, ! (! (false)))), (! (_GLF_IDENTITY(false, ! (! (false))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (_GLF_IDENTITY(! (! (_GLF_IDENTITY(false, ! (! (false))))), (! (! (_GLF_IDENTITY(false, ! (! (false)))))) && true)))))))
              break;
             break;
            }
           if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, false || (false)))))))
            barrier();
          }
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (injectionSwitch.x < injectionSwitch.y) || false)))))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(false))
            continue;
           barrier();
           if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        break;
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    break;
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false))))
    {
     for(int _injected_loop_counter = (1 | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       barrier();
      }
    }
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))), true && (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))), true && (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x > injectionSwitch.y)))))), true && (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))), true && (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x > injectionSwitch.y)))))))))))))
    {
     if(_GLF_DEAD(false))
      continue;
     continue;
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 do
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
  }
 while(_GLF_WRAPPED_LOOP(false));
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
