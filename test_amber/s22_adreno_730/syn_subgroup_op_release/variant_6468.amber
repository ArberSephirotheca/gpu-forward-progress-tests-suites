#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_15 {
 vec2 _f0;
 uvec4 _f1;
 uint _f2;
 bvec4 _f3;
} ;

struct _GLF_struct_16 {
 mat3x4 _f0;
 _GLF_struct_15 _f1;
 bvec3 _f2;
} ;

struct _GLF_struct_13 {
 mat4 _f0;
} ;

struct _GLF_struct_14 {
 uint workgroup_id;
 _GLF_struct_13 _f0;
} ;

struct _GLF_struct_11 {
 uint _f0;
 int _f1;
} ;

struct _GLF_struct_10 {
 uvec2 _f0;
 uvec2 _f1;
 bvec2 _f2;
 ivec3 _f3;
 vec2 _f4;
 uvec2 _f5;
} ;

struct _GLF_struct_12 {
 _GLF_struct_10 _f0;
 _GLF_struct_11 _f1;
 bvec3 _f2;
 ivec4 _f3;
} ;

struct _GLF_struct_8 {
 ivec4 _f0;
 vec2 _f1;
 mat4x3 _f2;
 mat2x3 _f3;
} ;

struct _GLF_struct_7 {
 mat4 _f0;
 uvec3 _f1;
 float _f2;
 ivec2 _f3;
 mat4 _f4;
 uint _f5;
 mat4x3 _f6;
} ;

struct _GLF_struct_9 {
 mat3x2 _f0;
 bool _f1;
 mat4x3 _f2;
 _GLF_struct_7 _f3;
 _GLF_struct_8 _f4;
} ;

struct _GLF_struct_6 {
 mat2x3 _f0;
 uvec3 _f1;
} ;

struct _GLF_struct_4 {
 ivec2 _f0;
 mat2 _f1;
} ;

struct _GLF_struct_5 {
 float _f0;
 _GLF_struct_4 _f1;
 uint _f2;
} ;

struct _GLF_struct_17 {
 _GLF_struct_5 _f0;
 mat3x2 _f1;
 _GLF_struct_6 _f2;
 _GLF_struct_9 _f3;
 _GLF_struct_12 _f4;
 _GLF_struct_14 _f5;
 _GLF_struct_16 _f6;
} ;

struct _GLF_struct_1 {
 mat3x2 _f0;
 vec3 _f1;
 float _f2;
 mat2 _f3;
} ;

struct _GLF_struct_0 {
 vec4 _f0;
 ivec2 _f1;
 mat2x3 _f2;
 mat3x2 _f3;
 float _f4;
} ;

struct _GLF_struct_2 {
 ivec2 _f0;
 uvec2 _f1;
 _GLF_struct_0 _f2;
 _GLF_struct_1 _f3;
 ivec2 _f4;
 mat2x3 _f5;
 uint subgroup_id;
} ;

struct _GLF_struct_3 {
 mat4 _f0;
 _GLF_struct_2 _f1;
 mat4 _f2;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 do
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false)))))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))), ! _GLF_IDENTITY((_GLF_IDENTITY(! ((injectionSwitch.x < injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || _GLF_IDENTITY((! ((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(vec2(injectionSwitch.y, 1.0)), (_GLF_IDENTITY(float(vec2(injectionSwitch.y, 1.0)), clamp(float(vec2(injectionSwitch.y, 1.0)), float(vec2(injectionSwitch.y, 1.0)), float(vec2(injectionSwitch.y, 1.0))))) / 1.0))))), ! (! ((! ((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(vec2(injectionSwitch.y, 1.0)), (_GLF_IDENTITY(float(vec2(injectionSwitch.y, 1.0)), clamp(float(vec2(injectionSwitch.y, 1.0)), float(vec2(injectionSwitch.y, 1.0)), float(vec2(injectionSwitch.y, 1.0))))) / 1.0)))))))))), ! (! ((_GLF_IDENTITY(! ((injectionSwitch.x < injectionSwitch.y)), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y)) || (! ((_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * abs(vec2(1.0, 1.0))), injectionSwitch)).x < injectionSwitch.y)))))))))), _GLF_IDENTITY(bool(bvec2(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), bool(bvec2((injectionSwitch.x < injectionSwitch.y), true)))), true)), _GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), _GLF_IDENTITY(true, bool(bool(true))) && (false)) || _GLF_IDENTITY((bool(bvec2(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), bool(bvec2((_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-404.599)), bool(false))) < injectionSwitch.y), true)))), true))), bool(bool((bool(bvec2(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), bool(bvec2((_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-404.599)), bool(false))) < injectionSwitch.y), true)))), true))))))))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))))))
          {
           if(_GLF_DEAD(false))
            return;
           return;
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(0.7), _GLF_IDENTITY((injectionSwitch)[1], (false ? _GLF_FUZZED(7125.7032) : (injectionSwitch)[1]))), vec2((injectionSwitch)[0], _GLF_FUZZED(-9.6)), bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))).y, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(0.7), _GLF_IDENTITY((injectionSwitch)[1], (false ? _GLF_FUZZED(7125.7032) : (injectionSwitch)[1]))), vec2((injectionSwitch)[0], _GLF_FUZZED(-9.6)), bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))).y, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(0.7), _GLF_IDENTITY((injectionSwitch)[1], (false ? _GLF_FUZZED(7125.7032) : (injectionSwitch)[1]))), _GLF_IDENTITY(vec2((injectionSwitch)[0], _GLF_FUZZED(-9.6)), (_GLF_IDENTITY(vec2((injectionSwitch)[0], _GLF_FUZZED(-9.6)), max(vec2((injectionSwitch)[0], _GLF_FUZZED(-9.6)), vec2((injectionSwitch)[0], _GLF_FUZZED(-9.6))))) * vec2(1.0, 1.0)), bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))).y) || false)) || false)))))
          barrier();
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || _GLF_IDENTITY(false, (false) && true)), (_GLF_IDENTITY(false, (false) || _GLF_IDENTITY(false, (false) && true))) && true)))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bvec3(false, false, true)))));
          }
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 ^ 0)); _injected_loop_counter ++)
          {
           do
            {
             return;
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 barrier();
                }
               else
                {
                }
              }
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
          }
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
        }
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 << _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), (int(7)) ^ int(_GLF_ZERO(0.0, injectionSwitch.x)))))); _injected_loop_counter --)
        {
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), true && (_GLF_IDENTITY(false, false || (false))))))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
            barrier();
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             barrier();
            }
          }
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).x, (true ? _GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x)) : _GLF_FUZZED(6248.9168))) > injectionSwitch.y))))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) && true)));
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false)))))))
  return;
 _GLF_struct_3 _GLF_struct_replacement_3 = _GLF_struct_3(mat4(1.0), _GLF_struct_2(ivec2(1), uvec2(1u), _GLF_struct_0(vec4(1.0), ivec2(1), mat2x3(1.0), mat3x2(1.0), 1.0), _GLF_struct_1(mat3x2(1.0), vec3(1.0), _GLF_IDENTITY(1.0, max(1.0, 1.0)), _GLF_IDENTITY(mat2(1.0), _GLF_IDENTITY(mat2(mat3x2(_GLF_IDENTITY(mat2(1.0), (mat2(1.0)) - mat2(0.0, 0.0, 0.0, 0.0)))), (mat2(mat3x2(_GLF_IDENTITY(mat2(1.0), _GLF_IDENTITY((mat2(1.0)), transpose(transpose((mat2(1.0))))) - mat2(0.0, 0.0, 0.0, 0.0))))) + mat2(0.0, 0.0, 0.0, 0.0)))), ivec2(1), mat2x3(1.0), gl_SubgroupID), mat4(_GLF_IDENTITY(_GLF_IDENTITY(1.0, (1.0) / 1.0), float(mat2x4(_GLF_IDENTITY(1.0, (1.0) / 1.0), 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0)))));
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0)))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
  }
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, (false) || false), false, false, false)))))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   return;
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, false, false)))))
        barrier();
       barrier();
      }
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 for(int _injected_loop_counter = (_GLF_IDENTITY(0 | 0, ~ (_GLF_IDENTITY(~ (0 | 0), (~ (0 | 0)) ^ (0 << _GLF_IDENTITY(int(5), int(5))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
        return;
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   return;
  }
 if(_GLF_DEAD(false))
  barrier();
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), ! (! (_GLF_WRAPPED_IF_FALSE(false)))))
        {
         if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, false || _GLF_IDENTITY(_GLF_IDENTITY((false), ((false)) && true), ! (! ((false))))), (_GLF_IDENTITY(injectionSwitch, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(_GLF_IDENTITY(vec2(9.4, 164.853), min(vec2(9.4, 164.853), _GLF_IDENTITY(vec2(9.4, 164.853), (false ? _GLF_IDENTITY(_GLF_FUZZED(vec2(9.1, 2487.1826)), mix(vec2(_GLF_FUZZED((-648.010 * 7.3)), (_GLF_FUZZED(vec2(9.1, 2487.1826)))[1]), vec2((_GLF_FUZZED(vec2(9.1, 2487.1826)))[0], _GLF_FUZZED(6814.8277)), bvec2(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) : vec2(9.4, 164.853)))))) : _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)))).x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         return;
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              return;
             barrier();
            }
           if(_GLF_DEAD(false))
            barrier();
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     do
      {
       if(_GLF_DEAD(false))
        return;
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   else
    {
    }
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), _GLF_IDENTITY(false || (bool(_GLF_IDENTITY(bool(false), true && (bool(false))))), true && (false || (bool(bool(false)))))))))
  return;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = _GLF_IDENTITY(gl_NumWorkGroups, min(gl_NumWorkGroups, gl_NumWorkGroups)).x;
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && _GLF_IDENTITY(true, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(true, false, true), bvec3(bvec3(bvec3(true, false, true))))), ! (! (bool(_GLF_IDENTITY(bvec3(true, false, true), bvec3(bvec3(bvec3(true, false, true))))))))))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), _GLF_IDENTITY(true, bool(bool(true))) && (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), _GLF_IDENTITY(false, (false) && true) || (_GLF_WRAPPED_IF_FALSE(false))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(vec3(-13.65, 28.62, 6207.4503).s)), float(injectionSwitch.x), bool(true)))) + 0.0) > _GLF_IDENTITY(injectionSwitch.y, float(mat3(injectionSwitch.y, 1.0, log(1.0), abs(1.0), 1.0, 1.0, determinant(mat2(1.0, 0.0, 1.0, 1.0)), exp(0.0), 1.0)))))))
        return;
       if(_GLF_DEAD(false))
        barrier();
      }
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         barrier();
        }
       barrier();
       do
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0), injectionSwitch.y)))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 ^ 1)); _injected_loop_counter --)
              {
               barrier();
              }
            }
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
            {
             barrier();
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
  }
 _GLF_struct_17 _GLF_struct_replacement_17 = _GLF_struct_17(_GLF_struct_5(1.0, _GLF_struct_4(ivec2(1), mat2(1.0)), 1u), mat3x2(1.0), _GLF_struct_6(mat2x3(1.0), uvec3(1u)), _GLF_struct_9(mat3x2(1.0), _GLF_IDENTITY(true, false || (true)), mat4x3(1.0), _GLF_struct_7(_GLF_IDENTITY(mat4(1.0), _GLF_IDENTITY((false ? _GLF_FUZZED(mat4(0.9, 874.860, 8.8, 241.237, 64.94, 9724.7312, -75.49, -4897.4107, -198.245, 6.6, 9.8, 7650.8824, 1143.7514, 973.320, -4.5, 2.6)) : mat4(1.0)), (false ? _GLF_FUZZED(mat4(-8.7, -26.56, -52.61, -286.309, 9070.0168, _GLF_IDENTITY(9.5, max(9.5, 9.5)), 6583.9075, _GLF_IDENTITY(223.964, (true ? 223.964 : _GLF_FUZZED(157.195))), 0.1, -9216.5397, -7.5, -675.642, 82.11, 8144.1971, -1020.4798, 428.128)) : (false ? _GLF_FUZZED(mat4(_GLF_IDENTITY(0.9, clamp(_GLF_IDENTITY(0.9, max(0.9, 0.9)), _GLF_IDENTITY(0.9, 1.0 * (_GLF_IDENTITY(0.9, float(mat2x4(0.9, 0.0, log(1.0), 0.0, 0.0, determinant(mat3(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0)), 0.0, 0.0))))), 0.9)), 874.860, 8.8, 241.237, 64.94, 9724.7312, -75.49, -4897.4107, -198.245, 6.6, 9.8, _GLF_IDENTITY(7650.8824, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-8.5) : 7650.8824)), 1143.7514, 973.320, -4.5, 2.6)) : mat4(1.0))))), _GLF_IDENTITY(uvec3(1u), (_GLF_IDENTITY(uvec3(1u), (_GLF_IDENTITY(uvec3(1u), (true ? uvec3(1u) : _GLF_FUZZED(uvec3(146335u, 152867u, 180254u))))) ^ uvec3(0u, 0u, 0u))) | _GLF_IDENTITY(uvec3(0u, 0u, _GLF_IDENTITY(0u, (0u) | 0u)), (uvec3(0u, 0u, 0u)) ^ uvec3(0u, 0u, 0u))), 1.0, ivec2(_GLF_IDENTITY(1, ~ (~ (1)))), mat4(1.0), 1u, mat4x3(1.0)), _GLF_struct_8(ivec4(1), vec2(1.0), mat4x3(1.0), mat2x3(1.0))), _GLF_struct_12(_GLF_struct_10(uvec2(1u), uvec2(1u), bvec2(true), ivec3(1), vec2(1.0), uvec2(1u)), _GLF_struct_11(1u, 1), bvec3(true), ivec4(1)), _GLF_struct_14(gl_WorkGroupID.x, _GLF_struct_13(_GLF_IDENTITY(mat4(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(7.9)), float(_GLF_IDENTITY(1.0, (1.0) + 0.0)), bool(true)))), transpose(transpose(mat4(_GLF_IDENTITY(_GLF_IDENTITY(1.0, min(1.0, 1.0)), mix(float(_GLF_FUZZED(7.9)), float(_GLF_IDENTITY(1.0, (1.0) + 0.0)), _GLF_IDENTITY(bool(true), ! (_GLF_IDENTITY(! (bool(true)), bool(bvec2(! (bool(true)), true))))))))))))), _GLF_struct_16(mat3x4(1.0), _GLF_struct_15(vec2(1.0), uvec4(1u), 1u, bvec4(true)), bvec3(true)));
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 uint workgroup_base = _GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, max(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, ~ (~ (workgroup_size))), clamp(workgroup_size, workgroup_size, workgroup_size)), workgroup_size)) * _GLF_IDENTITY(_GLF_struct_replacement_17._f5.workgroup_id, uint(uvec2(_GLF_struct_replacement_17._f5.workgroup_id, (((_GLF_IDENTITY(1u, (1u) | (_GLF_IDENTITY(1u, 0u ^ (1u)))) | 1u) << _GLF_IDENTITY(uint(0u), uint(0u))) >> _GLF_IDENTITY(uint(0u), uint(0u)))))), (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, max(_GLF_IDENTITY(workgroup_size, clamp(workgroup_size, workgroup_size, workgroup_size)), workgroup_size)) * _GLF_struct_replacement_17._f5.workgroup_id, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, max(_GLF_IDENTITY(workgroup_size, clamp(workgroup_size, workgroup_size, _GLF_IDENTITY(workgroup_size, ~ (~ (workgroup_size))))), workgroup_size)) * _GLF_struct_replacement_17._f5.workgroup_id, (_GLF_IDENTITY(workgroup_size, max(_GLF_IDENTITY(workgroup_size, clamp(workgroup_size, workgroup_size, workgroup_size)), workgroup_size)) * _GLF_struct_replacement_17._f5.workgroup_id) | 0u), clamp(_GLF_IDENTITY(workgroup_size, max(_GLF_IDENTITY(workgroup_size, _GLF_IDENTITY(clamp(workgroup_size, workgroup_size, workgroup_size), max(clamp(workgroup_size, workgroup_size, workgroup_size), clamp(workgroup_size, workgroup_size, workgroup_size)))), workgroup_size)) * _GLF_struct_replacement_17._f5.workgroup_id, _GLF_IDENTITY(workgroup_size, max(_GLF_IDENTITY(workgroup_size, clamp(workgroup_size, workgroup_size, workgroup_size)), workgroup_size)) * _GLF_struct_replacement_17._f5.workgroup_id, _GLF_IDENTITY(workgroup_size, max(_GLF_IDENTITY(workgroup_size, clamp(workgroup_size, workgroup_size, workgroup_size)), workgroup_size)) * _GLF_struct_replacement_17._f5.workgroup_id)), 0u ^ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, max(_GLF_IDENTITY(workgroup_size, clamp(workgroup_size, workgroup_size, _GLF_IDENTITY(workgroup_size, ~ (~ (workgroup_size))))), workgroup_size)) * _GLF_struct_replacement_17._f5.workgroup_id, (_GLF_IDENTITY(workgroup_size, max(_GLF_IDENTITY(workgroup_size, clamp(workgroup_size, workgroup_size, workgroup_size)), workgroup_size)) * _GLF_struct_replacement_17._f5.workgroup_id) | 0u), clamp(_GLF_IDENTITY(workgroup_size, max(_GLF_IDENTITY(workgroup_size, _GLF_IDENTITY(clamp(workgroup_size, workgroup_size, workgroup_size), max(clamp(workgroup_size, workgroup_size, workgroup_size), clamp(workgroup_size, workgroup_size, workgroup_size)))), workgroup_size)) * _GLF_struct_replacement_17._f5.workgroup_id, _GLF_IDENTITY(workgroup_size, max(_GLF_IDENTITY(workgroup_size, clamp(workgroup_size, workgroup_size, workgroup_size)), workgroup_size)) * _GLF_struct_replacement_17._f5.workgroup_id, _GLF_IDENTITY(workgroup_size, max(_GLF_IDENTITY(workgroup_size, clamp(workgroup_size, workgroup_size, workgroup_size)), workgroup_size)) * _GLF_struct_replacement_17._f5.workgroup_id)), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, max(_GLF_IDENTITY(workgroup_size, clamp(workgroup_size, workgroup_size, _GLF_IDENTITY(workgroup_size, ~ (~ (workgroup_size))))), workgroup_size)) * _GLF_struct_replacement_17._f5.workgroup_id, (_GLF_IDENTITY(workgroup_size, max(_GLF_IDENTITY(workgroup_size, clamp(workgroup_size, workgroup_size, workgroup_size)), workgroup_size)) * _GLF_struct_replacement_17._f5.workgroup_id) | 0u), clamp(_GLF_IDENTITY(workgroup_size, max(_GLF_IDENTITY(workgroup_size, _GLF_IDENTITY(clamp(workgroup_size, workgroup_size, workgroup_size), max(clamp(workgroup_size, workgroup_size, workgroup_size), clamp(workgroup_size, workgroup_size, workgroup_size)))), workgroup_size)) * _GLF_struct_replacement_17._f5.workgroup_id, _GLF_IDENTITY(workgroup_size, max(_GLF_IDENTITY(workgroup_size, clamp(workgroup_size, workgroup_size, workgroup_size)), workgroup_size)) * _GLF_struct_replacement_17._f5.workgroup_id, _GLF_IDENTITY(workgroup_size, max(_GLF_IDENTITY(workgroup_size, clamp(workgroup_size, workgroup_size, workgroup_size)), workgroup_size)) * _GLF_struct_replacement_17._f5.workgroup_id))) << 0u)))) << 0u)) | 0u);
 do
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (injectionSwitch.x < injectionSwitch.y) || false)))))
        {
         if(_GLF_DEAD(false))
          barrier();
         return;
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, bool(bvec4(false, false, true, true))))), (injectionSwitch.x > injectionSwitch.y))) || false)));
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - sqrt(vec2(0.0, 0.0))).x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))))
    {
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
        }
       else
        {
        }
      }
     while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bool(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))) || false));
    }
   return;
  }
 if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_GLF_DEAD(false), true, false), bvec3(bvec3(bvec3(_GLF_DEAD(false), true, false))))), ! (! (bool(_GLF_IDENTITY(bvec3(_GLF_DEAD(false), true, false), bvec3(bvec3(bvec3(_GLF_DEAD(false), true, false))))))))), bool(bvec4(_GLF_DEAD(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, _GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), ! (! (false)))))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 uint virtual_gid = _GLF_IDENTITY(workgroup_base + _GLF_struct_replacement_3._f1.subgroup_id * subgroup_size, (_GLF_IDENTITY(workgroup_base + _GLF_struct_replacement_3._f1.subgroup_id * subgroup_size, (_GLF_IDENTITY(workgroup_base, (workgroup_base) * uint(_GLF_ONE(1.0, injectionSwitch.y))) + _GLF_IDENTITY(_GLF_struct_replacement_3._f1.subgroup_id, 0u | _GLF_IDENTITY((_GLF_IDENTITY(_GLF_struct_replacement_3._f1.subgroup_id, clamp(_GLF_IDENTITY(_GLF_struct_replacement_3._f1.subgroup_id, max(_GLF_struct_replacement_3._f1.subgroup_id, _GLF_struct_replacement_3._f1.subgroup_id)), _GLF_struct_replacement_3._f1.subgroup_id, _GLF_struct_replacement_3._f1.subgroup_id))), max((_GLF_IDENTITY(_GLF_struct_replacement_3._f1.subgroup_id, clamp(_GLF_IDENTITY(_GLF_struct_replacement_3._f1.subgroup_id, max(_GLF_struct_replacement_3._f1.subgroup_id, _GLF_struct_replacement_3._f1.subgroup_id)), _GLF_struct_replacement_3._f1.subgroup_id, _GLF_struct_replacement_3._f1.subgroup_id))), (_GLF_IDENTITY(_GLF_struct_replacement_3._f1.subgroup_id, clamp(_GLF_IDENTITY(_GLF_struct_replacement_3._f1.subgroup_id, max(_GLF_struct_replacement_3._f1.subgroup_id, _GLF_struct_replacement_3._f1.subgroup_id)), _GLF_struct_replacement_3._f1.subgroup_id, _GLF_struct_replacement_3._f1.subgroup_id)))))) * subgroup_size) / 1u)) - (0u & _GLF_IDENTITY(177219u, 0u ^ (177219u)))) + subgroup_local_id;
 if(_GLF_DEAD(false))
  barrier();
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 | 0)); _injected_loop_counter --)
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED((-7109.3852 * -8825.4779))), bool(false))) < injectionSwitch.y)))))))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       barrier();
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 uint next_virtual_gid = workgroup_base + _GLF_IDENTITY(_GLF_struct_replacement_3._f1.subgroup_id * subgroup_size, max(_GLF_struct_replacement_3._f1.subgroup_id * subgroup_size, _GLF_struct_replacement_3._f1.subgroup_id * subgroup_size)) + ((_GLF_IDENTITY(subgroup_local_id + 1, max(subgroup_local_id + 1, _GLF_IDENTITY(subgroup_local_id + 1, (_GLF_IDENTITY(subgroup_local_id + 1, max(subgroup_local_id + 1, _GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) << 0u)))) << 0u) + 1))) | (subgroup_local_id + 1))))) % subgroup_size);
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / cos(sin(vec2(0.0, 0.0)))).x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     barrier();
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   buf[virtual_gid] = 1;
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(vec3(_GLF_IDENTITY(injectionSwitch.y, float(mat3x2(injectionSwitch.y, 0.0, 0.0, sin(0.0), 1.0, 1.0))), 0.0, _GLF_ONE(1.0, injectionSwitch.y))), max(float(vec3(injectionSwitch.y, 0.0, _GLF_ONE(1.0, injectionSwitch.y))), _GLF_IDENTITY(float(vec3(injectionSwitch.y, _GLF_IDENTITY(0.0, min(0.0, _GLF_IDENTITY(0.0, float(_GLF_IDENTITY(mat3(0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0), mat3(mat4(mat3(_GLF_IDENTITY(0.0, _GLF_IDENTITY((0.0) - determinant(mat3(0.0, 1.0, 1.0, 0.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 0.0, 0.0)), mix(float(_GLF_FUZZED(-9.0)), float((0.0) - determinant(mat3(0.0, 1.0, 1.0, 0.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 0.0, 0.0))), bool(true)))), 1.0, _GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, 1.0 * (0.0))) / 1.0), _GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, (1.0) * 1.0), 1.0, 1.0)), 0.0, 0.0, _GLF_IDENTITY(1.0, _GLF_IDENTITY((false ? _GLF_FUZZED(-42.03) : 1.0), clamp(_GLF_IDENTITY((false ? _GLF_FUZZED(-42.03) : 1.0), (false ? _GLF_FUZZED(-7.3) : (false ? _GLF_FUZZED(-42.03) : 1.0))), (false ? _GLF_FUZZED(-42.03) : 1.0), (false ? _GLF_FUZZED(-42.03) : 1.0)))), 0.0, _GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(float(true))), bool(false))))))))))), _GLF_ONE(1.0, injectionSwitch.y))), _GLF_IDENTITY((float(vec3(injectionSwitch.y, 0.0, _GLF_ONE(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(20.24) : 1.0)), injectionSwitch.y)))), mix(float((float(vec3(injectionSwitch.y, 0.0, _GLF_ONE(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(20.24) : 1.0)), injectionSwitch.y))))), float(_GLF_FUZZED(4.1)), bool(false))) / 1.0))))), bool(bool(_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(vec3(injectionSwitch.y, _GLF_IDENTITY(0.0, max(0.0, 0.0)), _GLF_ONE(1.0, injectionSwitch.y))), max(float(vec3(injectionSwitch.y, 0.0, _GLF_ONE(1.0, injectionSwitch.y))), _GLF_IDENTITY(float(vec3(injectionSwitch.y, _GLF_IDENTITY(0.0, min(0.0, _GLF_IDENTITY(_GLF_IDENTITY(0.0, max(0.0, 0.0)), float(_GLF_IDENTITY(mat3(0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0), mat3(mat4(mat3(_GLF_IDENTITY(0.0, (0.0) - determinant(mat3(0.0, 1.0, 1.0, 0.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 0.0, 0.0))), 1.0, _GLF_IDENTITY(0.0, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, _GLF_IDENTITY(0.0, (0.0) - 0.0))), 1.0 * (0.0))), _GLF_IDENTITY(float(_GLF_IDENTITY(mat3x4(_GLF_IDENTITY((_GLF_IDENTITY(0.0, _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(59.43)), float(1.0), bool(true))) * (0.0))), clamp((_GLF_IDENTITY(0.0, 1.0 * (0.0))), _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(0.0, 1.0 * (0.0))), min((_GLF_IDENTITY(0.0, 1.0 * (0.0))), (_GLF_IDENTITY(0.0, 1.0 * (0.0))))), clamp((_GLF_IDENTITY(0.0, 1.0 * (0.0))), (_GLF_IDENTITY(0.0, 1.0 * (0.0))), (_GLF_IDENTITY(0.0, 1.0 * (0.0))))), (_GLF_IDENTITY(0.0, 1.0 * (0.0))))), 1.0, 0.0, _GLF_IDENTITY(1.0, float(mat3x2(1.0, 0.0, 0.0, 1.0, 1.0, 0.0))), 1.0, 1.0, 0.0, tan(0.0), 1.0, 0.0, round(_GLF_IDENTITY(length(normalize(vec4(1.0, 1.0, 1.0, 1.0))), _GLF_IDENTITY(float(mat2x3(length(normalize(vec4(1.0, 1.0, 1.0, 1.0))), 1.0, 0.0, 0.0, sin(0.0), 1.0)), (float(mat2x3(length(normalize(vec4(1.0, 1.0, 1.0, 1.0))), 1.0, 0.0, 0.0, sin(0.0), 1.0))) - 0.0))), _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-205.008)), float(_GLF_IDENTITY(1.0, min(1.0, 1.0))), bool(true)))), (mat3x4(_GLF_IDENTITY((_GLF_IDENTITY(0.0, 1.0 * (0.0))), clamp((_GLF_IDENTITY(0.0, 1.0 * (0.0))), _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(0.0, 1.0 * (0.0))), clamp((_GLF_IDENTITY(0.0, 1.0 * (0.0))), (_GLF_IDENTITY(0.0, 1.0 * (0.0))), (_GLF_IDENTITY(0.0, 1.0 * (0.0))))), max(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(0.0, 1.0 * (0.0))), clamp((_GLF_IDENTITY(0.0, 1.0 * (0.0))), (_GLF_IDENTITY(0.0, 1.0 * (0.0))), (_GLF_IDENTITY(0.0, 1.0 * (0.0))))), mix(float(_GLF_FUZZED(float(true))), float(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(0.0, 1.0 * (0.0))), clamp((_GLF_IDENTITY(0.0, 1.0 * (0.0))), (_GLF_IDENTITY(0.0, 1.0 * (0.0))), (_GLF_IDENTITY(0.0, 1.0 * (0.0))))), mix(float(_GLF_FUZZED(6.0)), float(_GLF_IDENTITY((_GLF_IDENTITY(0.0, 1.0 * (0.0))), clamp((_GLF_IDENTITY(0.0, 1.0 * (0.0))), (_GLF_IDENTITY(0.0, 1.0 * (0.0))), (_GLF_IDENTITY(0.0, 1.0 * (0.0)))))), bool(true)))), bool(true))), _GLF_IDENTITY((_GLF_IDENTITY(0.0, 1.0 * (0.0))), clamp((_GLF_IDENTITY(0.0, 1.0 * (0.0))), (_GLF_IDENTITY(0.0, 1.0 * (0.0))), (_GLF_IDENTITY(0.0, 1.0 * (0.0))))))), (_GLF_IDENTITY(0.0, 1.0 * (0.0))))), _GLF_IDENTITY(1.0, 1.0 * (_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-7.0)), float(1.0), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))), 0.0, 1.0, 1.0, 1.0, 0.0, tan(0.0), 1.0, 0.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), 1.0)) + mat3x4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))), max(float(_GLF_IDENTITY(mat3x4(_GLF_IDENTITY((_GLF_IDENTITY(0.0, 1.0 * (0.0))), clamp((_GLF_IDENTITY(0.0, 1.0 * (0.0))), _GLF_IDENTITY((_GLF_IDENTITY(0.0, 1.0 * (0.0))), clamp((_GLF_IDENTITY(0.0, 1.0 * (0.0))), (_GLF_IDENTITY(0.0, 1.0 * (0.0))), (_GLF_IDENTITY(_GLF_IDENTITY(0.0, float(_GLF_IDENTITY(mat2(0.0, 1.0, 0.0, 1.0), (mat2(0.0, 1.0, 0.0, 1.0)) / mat2(1.0, 1.0, 1.0, 1.0)))), 1.0 * (0.0))))), (_GLF_IDENTITY(0.0, 1.0 * (0.0))))), 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, tan(0.0), 1.0, 0.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), 1.0), (mat3x4(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(0.0, 1.0 * (0.0))), clamp((_GLF_IDENTITY(0.0, 1.0 * (0.0))), _GLF_IDENTITY((_GLF_IDENTITY(0.0, 1.0 * (0.0))), clamp((_GLF_IDENTITY(0.0, 1.0 * (0.0))), (_GLF_IDENTITY(0.0, 1.0 * (0.0))), (_GLF_IDENTITY(0.0, 1.0 * (0.0))))), (_GLF_IDENTITY(0.0, 1.0 * (0.0))))), mix(float(_GLF_IDENTITY((_GLF_IDENTITY(0.0, 1.0 * (0.0))), clamp((_GLF_IDENTITY(0.0, 1.0 * (0.0))), _GLF_IDENTITY((_GLF_IDENTITY(0.0, 1.0 * (0.0))), clamp((_GLF_IDENTITY(0.0, 1.0 * (0.0))), (_GLF_IDENTITY(0.0, 1.0 * (0.0))), (_GLF_IDENTITY(0.0, 1.0 * (0.0))))), (_GLF_IDENTITY(0.0, 1.0 * (0.0)))))), float(_GLF_FUZZED(446.156)), bool(false))), 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, _GLF_IDENTITY(tan(0.0), max(_GLF_IDENTITY(tan(0.0), (true ? _GLF_IDENTITY(tan(0.0), (tan(0.0)) - 0.0) : _GLF_FUZZED(-0.5))), tan(0.0))), 1.0, 0.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), 1.0)) + mat3x4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))), _GLF_IDENTITY(float(_GLF_IDENTITY(mat3x4(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(0.0, 1.0 * (0.0)), 1.0 * (0.0))), clamp((_GLF_IDENTITY(0.0, 1.0 * (0.0))), _GLF_IDENTITY((_GLF_IDENTITY(0.0, 1.0 * (0.0))), clamp((_GLF_IDENTITY(_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(0.9)), float(0.0), bool(true))), 1.0 * (0.0))), (_GLF_IDENTITY(0.0, _GLF_IDENTITY(1.0, float(mat3x2(1.0, 1.0, 0.0, 0.0, 1.0, 0.0))) * (0.0))), (_GLF_IDENTITY(0.0, 1.0 * (0.0))))), (_GLF_IDENTITY(0.0, 1.0 * (0.0))))), 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, tan(_GLF_IDENTITY(0.0, min(0.0, 0.0))), 1.0, 0.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), 1.0), (mat3x4(_GLF_IDENTITY((_GLF_IDENTITY(0.0, 1.0 * (0.0))), clamp((_GLF_IDENTITY(0.0, 1.0 * (0.0))), _GLF_IDENTITY((_GLF_IDENTITY(0.0, 1.0 * (0.0))), clamp((_GLF_IDENTITY(0.0, 1.0 * (0.0))), (_GLF_IDENTITY(0.0, 1.0 * (0.0))), (_GLF_IDENTITY(0.0, 1.0 * (0.0))))), (_GLF_IDENTITY(0.0, 1.0 * (0.0))))), 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, tan(0.0), 1.0, 0.0, round(length(normalize(vec4(_GLF_IDENTITY(1.0, min(1.0, 1.0)), 1.0, 1.0, 1.0)))), 1.0)) + mat3x4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))), 1.0 * (float(_GLF_IDENTITY(mat3x4(_GLF_IDENTITY((_GLF_IDENTITY(0.0, 1.0 * (0.0))), clamp((_GLF_IDENTITY(_GLF_IDENTITY(0.0, 1.0 * (0.0)), float(float(_GLF_IDENTITY(_GLF_IDENTITY(0.0, 1.0 * (0.0)), (false ? _GLF_FUZZED(89.42) : _GLF_IDENTITY(0.0, 1.0 * (0.0)))))))), _GLF_IDENTITY((_GLF_IDENTITY(0.0, 1.0 * (0.0))), clamp((_GLF_IDENTITY(0.0, 1.0 * (0.0))), _GLF_IDENTITY((_GLF_IDENTITY(0.0, 1.0 * (0.0))), max((_GLF_IDENTITY(0.0, 1.0 * (0.0))), (_GLF_IDENTITY(0.0, 1.0 * (0.0))))), (_GLF_IDENTITY(0.0, 1.0 * _GLF_IDENTITY((0.0), (false ? _GLF_FUZZED(8.7) : (0.0))))))), (_GLF_IDENTITY(0.0, 1.0 * (0.0))))), 1.0, 0.0, 1.0, 1.0, 1.0, _GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, (0.0) - 0.0), _GLF_IDENTITY(0.0, min(0.0, 0.0)))), tan(0.0), 1.0, 0.0, round(length(normalize(vec4(1.0, 1.0, 1.0, _GLF_IDENTITY(1.0, min(1.0, 1.0)))))), 1.0), (mat3x4(_GLF_IDENTITY((_GLF_IDENTITY(0.0, 1.0 * (0.0))), clamp((_GLF_IDENTITY(0.0, _GLF_IDENTITY(1.0 * (0.0), (false ? _GLF_FUZZED(-3.7) : 1.0 * (0.0))))), _GLF_IDENTITY((_GLF_IDENTITY(0.0, 1.0 * (0.0))), clamp((_GLF_IDENTITY(0.0, 1.0 * (0.0))), (_GLF_IDENTITY(0.0, 1.0 * (0.0))), (_GLF_IDENTITY(0.0, 1.0 * (_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0))))))), (_GLF_IDENTITY(0.0, 1.0 * (0.0))))), 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, tan(0.0), 1.0, 0.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), 1.0)) + mat3x4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))))))) / 1.0), 1.0, 0.0, 0.0, 1.0, 0.0, 1.0)))))))), _GLF_ONE(1.0, injectionSwitch.y))), (float(vec3(injectionSwitch.y, 0.0, _GLF_ONE(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(20.24) : 1.0)), injectionSwitch.y)))) / 1.0))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(vec3(injectionSwitch.y, 0.0, _GLF_ONE(1.0, injectionSwitch.y))), max(float(vec3(injectionSwitch.y, 0.0, _GLF_ONE(1.0, injectionSwitch.y))), _GLF_IDENTITY(float(vec3(injectionSwitch.y, _GLF_IDENTITY(0.0, min(0.0, _GLF_IDENTITY(0.0, float(_GLF_IDENTITY(mat3(0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0), mat3(mat4(mat3(_GLF_IDENTITY(0.0, (0.0) - determinant(mat3(0.0, 1.0, 1.0, 0.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 0.0, 0.0))), 1.0, _GLF_IDENTITY(0.0, _GLF_IDENTITY((_GLF_IDENTITY(0.0, 1.0 * (0.0))), _GLF_IDENTITY(_GLF_IDENTITY(float(_GLF_IDENTITY(mat3x4(_GLF_IDENTITY((_GLF_IDENTITY(0.0, 1.0 * (0.0))), clamp((_GLF_IDENTITY(0.0, 1.0 * (0.0))), _GLF_IDENTITY((_GLF_IDENTITY(0.0, 1.0 * (0.0))), clamp((_GLF_IDENTITY(0.0, 1.0 * (0.0))), (_GLF_IDENTITY(0.0, 1.0 * (0.0))), (_GLF_IDENTITY(0.0, 1.0 * (0.0))))), _GLF_IDENTITY((_GLF_IDENTITY(0.0, 1.0 * (0.0))), 0.0 + ((_GLF_IDENTITY(0.0, 1.0 * (0.0))))))), 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, tan(0.0), 1.0, 0.0, round(length(normalize(vec4(1.0, 1.0, 1.0, _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED((- (+ 4.3)))), float(1.0), bool(true))))))), _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0))), (mat3x4(_GLF_IDENTITY((_GLF_IDENTITY(0.0, 1.0 * (0.0))), clamp((_GLF_IDENTITY(0.0, 1.0 * (0.0))), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(5.9)), float(0.0), bool(true))), 1.0 * (0.0))), clamp((_GLF_IDENTITY(0.0, 1.0 * (0.0))), (_GLF_IDENTITY(0.0, 1.0 * _GLF_IDENTITY((_GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(mix(2717.1344, 64.20, 63.14))))), min((_GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(mix(2717.1344, 64.20, 63.14))))), _GLF_IDENTITY((_GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(mix(2717.1344, 64.20, 63.14))))), (true ? (_GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(mix(2717.1344, 64.20, 63.14))))) : _GLF_FUZZED(length(vec2(8178.9035, 1231.7113))))))))), (_GLF_IDENTITY(0.0, 1.0 * (0.0))))), (_GLF_IDENTITY(0.0, 1.0 * (0.0))))), 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, tan(0.0), 1.0, 0.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), 1.0)) + mat3x4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))), mix(float(float(_GLF_IDENTITY(mat3x4(_GLF_IDENTITY((_GLF_IDENTITY(0.0, 1.0 * (0.0))), clamp((_GLF_IDENTITY(0.0, 1.0 * (0.0))), _GLF_IDENTITY((_GLF_IDENTITY(0.0, 1.0 * (0.0))), clamp((_GLF_IDENTITY(0.0, 1.0 * (0.0))), (_GLF_IDENTITY(0.0, 1.0 * (0.0))), (_GLF_IDENTITY(0.0, 1.0 * (0.0))))), _GLF_IDENTITY((_GLF_IDENTITY(0.0, 1.0 * (0.0))), 0.0 + ((_GLF_IDENTITY(0.0, 1.0 * (0.0))))))), 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, tan(0.0), 1.0, 0.0, round(length(normalize(vec4(1.0, 1.0, 1.0, _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED((- (+ 4.3)))), float(1.0), bool(true))))))), _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0))), (mat3x4(_GLF_IDENTITY((_GLF_IDENTITY(0.0, 1.0 * (0.0))), clamp((_GLF_IDENTITY(0.0, 1.0 * (0.0))), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(5.9)), float(0.0), bool(true))), 1.0 * (0.0))), clamp((_GLF_IDENTITY(0.0, 1.0 * (0.0))), (_GLF_IDENTITY(0.0, 1.0 * _GLF_IDENTITY((_GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(mix(2717.1344, 64.20, 63.14))))), min((_GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(mix(2717.1344, 64.20, 63.14))))), _GLF_IDENTITY((_GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(mix(2717.1344, 64.20, 63.14))))), (true ? (_GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(mix(2717.1344, 64.20, 63.14))))) : _GLF_FUZZED(length(vec2(8178.9035, 1231.7113))))))))), (_GLF_IDENTITY(0.0, 1.0 * (0.0))))), (_GLF_IDENTITY(0.0, 1.0 * (0.0))))), 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, tan(0.0), 1.0, 0.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), 1.0)) + mat3x4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))), float(_GLF_FUZZED(-4233.7047)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), max(_GLF_IDENTITY(float(_GLF_IDENTITY(mat3x4(_GLF_IDENTITY((_GLF_IDENTITY(0.0, 1.0 * (0.0))), clamp((_GLF_IDENTITY(0.0, 1.0 * (0.0))), _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(0.0, 1.0 * (0.0))), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? (_GLF_IDENTITY(0.0, 1.0 * (0.0))) : _GLF_FUZZED(-4489.2354))), clamp((_GLF_IDENTITY(0.0, 1.0 * (0.0))), (_GLF_IDENTITY(0.0, 1.0 * (0.0))), (_GLF_IDENTITY(0.0, 1.0 * (0.0))))), (_GLF_IDENTITY(0.0, _GLF_IDENTITY(1.0 * (0.0), (1.0 * (0.0)) / 1.0))))), 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, tan(0.0), 1.0, 0.0, round(length(normalize(vec4(1.0, _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), 1.0, 1.0)))), 1.0), (mat3x4(_GLF_IDENTITY((_GLF_IDENTITY(0.0, 1.0 * (0.0))), clamp((_GLF_IDENTITY(0.0, 1.0 * (0.0))), _GLF_IDENTITY((_GLF_IDENTITY(0.0, 1.0 * (0.0))), clamp((_GLF_IDENTITY(0.0, 1.0 * (0.0))), (_GLF_IDENTITY(0.0, 1.0 * (0.0))), (_GLF_IDENTITY(0.0, 1.0 * (0.0))))), (_GLF_IDENTITY(0.0, 1.0 * (0.0))))), 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, tan(0.0), 1.0, 0.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), 1.0)) + mat3x4(0.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, clamp(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(6.3)), bool(false))), _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(6498.1499) : 0.0)), 0.0)), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(6.8)))))), (float(_GLF_IDENTITY(mat3x4(_GLF_IDENTITY((_GLF_IDENTITY(0.0, 1.0 * (0.0))), clamp((_GLF_IDENTITY(0.0, 1.0 * (0.0))), _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(0.0, 1.0 * (0.0))), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? (_GLF_IDENTITY(0.0, 1.0 * (0.0))) : _GLF_FUZZED(-4489.2354))), clamp((_GLF_IDENTITY(0.0, 1.0 * (0.0))), (_GLF_IDENTITY(0.0, 1.0 * (0.0))), (_GLF_IDENTITY(0.0, 1.0 * (0.0))))), (_GLF_IDENTITY(0.0, _GLF_IDENTITY(1.0 * (0.0), (1.0 * (0.0)) / 1.0))))), 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, tan(0.0), 1.0, 0.0, round(length(normalize(vec4(1.0, _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), 1.0, 1.0)))), 1.0), (mat3x4(_GLF_IDENTITY((_GLF_IDENTITY(0.0, 1.0 * (0.0))), clamp((_GLF_IDENTITY(0.0, 1.0 * (0.0))), _GLF_IDENTITY((_GLF_IDENTITY(0.0, 1.0 * (0.0))), clamp((_GLF_IDENTITY(0.0, 1.0 * (0.0))), (_GLF_IDENTITY(0.0, 1.0 * (0.0))), (_GLF_IDENTITY(0.0, 1.0 * (0.0))))), (_GLF_IDENTITY(0.0, 1.0 * (0.0))))), 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, tan(0.0), 1.0, 0.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), 1.0)) + mat3x4(0.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, clamp(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(6.3)), bool(false))), _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(6498.1499) : 0.0)), 0.0)), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(6.8))))))) + 0.0), _GLF_IDENTITY(float(_GLF_IDENTITY(mat3x4(_GLF_IDENTITY((_GLF_IDENTITY(0.0, 1.0 * (0.0))), clamp((_GLF_IDENTITY(0.0, _GLF_IDENTITY(1.0, (1.0) / 1.0) * (0.0))), _GLF_IDENTITY((_GLF_IDENTITY(0.0, 1.0 * (0.0))), clamp((_GLF_IDENTITY(0.0, 1.0 * (0.0))), (_GLF_IDENTITY(0.0, 1.0 * (0.0))), (_GLF_IDENTITY(0.0, 1.0 * (0.0))))), (_GLF_IDENTITY(0.0, 1.0 * (0.0))))), 1.0, 0.0, 1.0, 1.0, _GLF_IDENTITY(1.0, min(1.0, 1.0)), 0.0, tan(0.0), 1.0, 0.0, round(length(normalize(vec4(_GLF_IDENTITY(1.0, min(1.0, 1.0)), 1.0, 1.0, 1.0)))), 1.0), (mat3x4(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(-9353.9384))), 0.0)), 1.0 * (0.0))), clamp((_GLF_IDENTITY(0.0, _GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(vec4(-4.6, -4.0, 69.62, -7.3).z)), bool(false))) * (0.0))), _GLF_IDENTITY((_GLF_IDENTITY(0.0, _GLF_IDENTITY(1.0 * (0.0), clamp(_GLF_IDENTITY(1.0 * (0.0), float(vec4(1.0 * (0.0), 1.0, 1.0, _GLF_IDENTITY(dot(vec4(1.0, 1.0, 1.0, 1.0), vec4(0.0, 0.0, 0.0, 0.0)), dot(vec4(1.0, 1.0, 1.0, 1.0), vec4(0.0, 0.0, 0.0, 0.0)))))), _GLF_IDENTITY(1.0 * (0.0), (1.0 * (0.0)) / 1.0), 1.0 * (0.0))))), clamp((_GLF_IDENTITY(0.0, 1.0 * (0.0))), (_GLF_IDENTITY(0.0, _GLF_IDENTITY(1.0 * (0.0), (_GLF_IDENTITY(1.0 * (0.0), mix(float(1.0 * (0.0)), float(_GLF_FUZZED(5.9)), bool(false)))) + 0.0))), (_GLF_IDENTITY(0.0, 1.0 * (_GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(2.9)), float(0.0), bool(true)))) + sin(0.0))))))), (_GLF_IDENTITY(0.0, 1.0 * (0.0))))), 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, tan(0.0), 1.0, 0.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), 1.0)) + mat3x4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), 0.0, 0.0, 0.0, 0.0))), _GLF_IDENTITY(1.0 * (float(_GLF_IDENTITY(mat3x4(_GLF_IDENTITY((_GLF_IDENTITY(0.0, 1.0 * (0.0))), clamp((_GLF_IDENTITY(0.0, 1.0 * (0.0))), _GLF_IDENTITY((_GLF_IDENTITY(0.0, 1.0 * (0.0))), clamp((_GLF_IDENTITY(0.0, 1.0 * (0.0))), (_GLF_IDENTITY(0.0, 1.0 * (0.0))), (_GLF_IDENTITY(0.0, 1.0 * (0.0))))), (_GLF_IDENTITY(0.0, 1.0 * (0.0))))), 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, tan(0.0), 1.0, 0.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), 1.0), (mat3x4(_GLF_IDENTITY((_GLF_IDENTITY(0.0, 1.0 * (0.0))), clamp((_GLF_IDENTITY(0.0, 1.0 * (0.0))), _GLF_IDENTITY((_GLF_IDENTITY(0.0, 1.0 * (0.0))), clamp((_GLF_IDENTITY(0.0, 1.0 * (0.0))), (_GLF_IDENTITY(0.0, 1.0 * (0.0))), (_GLF_IDENTITY(0.0, 1.0 * (0.0))))), (_GLF_IDENTITY(0.0, 1.0 * (0.0))))), 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, tan(0.0), 1.0, 0.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), 1.0)) + mat3x4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))), max(1.0 * (float(_GLF_IDENTITY(mat3x4(_GLF_IDENTITY((_GLF_IDENTITY(0.0, 1.0 * (0.0))), clamp((_GLF_IDENTITY(0.0, 1.0 * (0.0))), _GLF_IDENTITY((_GLF_IDENTITY(0.0, 1.0 * (0.0))), clamp((_GLF_IDENTITY(0.0, 1.0 * (0.0))), (_GLF_IDENTITY(0.0, 1.0 * (0.0))), (_GLF_IDENTITY(0.0, 1.0 * (0.0))))), (_GLF_IDENTITY(0.0, 1.0 * (0.0))))), 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, tan(0.0), 1.0, 0.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), 1.0), (mat3x4(_GLF_IDENTITY((_GLF_IDENTITY(0.0, 1.0 * (0.0))), clamp((_GLF_IDENTITY(0.0, 1.0 * (0.0))), _GLF_IDENTITY((_GLF_IDENTITY(0.0, 1.0 * (0.0))), clamp((_GLF_IDENTITY(0.0, 1.0 * (0.0))), (_GLF_IDENTITY(0.0, 1.0 * (0.0))), (_GLF_IDENTITY(0.0, 1.0 * (0.0))))), (_GLF_IDENTITY(0.0, 1.0 * (0.0))))), 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, tan(0.0), 1.0, 0.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), 1.0)) + mat3x4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))), 1.0 * (float(_GLF_IDENTITY(mat3x4(_GLF_IDENTITY((_GLF_IDENTITY(0.0, 1.0 * (0.0))), clamp((_GLF_IDENTITY(0.0, 1.0 * (0.0))), _GLF_IDENTITY((_GLF_IDENTITY(0.0, 1.0 * (0.0))), clamp((_GLF_IDENTITY(0.0, 1.0 * (0.0))), (_GLF_IDENTITY(0.0, 1.0 * (0.0))), (_GLF_IDENTITY(0.0, 1.0 * (0.0))))), (_GLF_IDENTITY(0.0, 1.0 * (0.0))))), 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, tan(0.0), 1.0, 0.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), 1.0), (mat3x4(_GLF_IDENTITY((_GLF_IDENTITY(0.0, 1.0 * (0.0))), clamp((_GLF_IDENTITY(0.0, 1.0 * (0.0))), _GLF_IDENTITY((_GLF_IDENTITY(0.0, 1.0 * (0.0))), clamp((_GLF_IDENTITY(0.0, 1.0 * (0.0))), (_GLF_IDENTITY(0.0, 1.0 * (0.0))), (_GLF_IDENTITY(0.0, 1.0 * (0.0))))), (_GLF_IDENTITY(0.0, 1.0 * (0.0))))), 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, tan(0.0), 1.0, 0.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), 1.0)) + mat3x4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))))))))) / 1.0), 1.0, 0.0, 0.0, 1.0, 0.0, 1.0)))))))), _GLF_ONE(1.0, injectionSwitch.y))), (float(vec3(injectionSwitch.y, 0.0, _GLF_ONE(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(20.24) : 1.0)), injectionSwitch.y)))) / 1.0)))))))))))))
  barrier();
 if(subgroup_local_id + 1 < subgroup_size)
  {
   if(_GLF_DEAD(false))
    barrier();
   atomicStore(buf[next_virtual_gid], _GLF_IDENTITY(uint(2), min(uint(2), uint(2))), 4, 64, 4);
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((false), (_GLF_IDENTITY((false), ! (! ((false))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) && true)))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
       if(_GLF_DEAD(false))
        break;
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, true, _GLF_IDENTITY(true, false || (true)))))))
          return;
         do
          {
           if(_GLF_DEAD(false))
            {
             do
              {
               barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
          barrier();
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             barrier();
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
            return;
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             barrier();
             if(_GLF_DEAD(false))
              barrier();
            }
           else
            {
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         continue;
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     subgroupAll(false);
     if(_GLF_DEAD(false))
      {
       do
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), (! (injectionSwitch.x > injectionSwitch.y)) && true))), false, false)), false || (_GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), (! (injectionSwitch.x > injectionSwitch.y)) && true))), false, false)), ! (! (bool(bvec3(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), (! (injectionSwitch.x > injectionSwitch.y)) && true))), false, false))))))))))))
          return;
        }
       while(_GLF_WRAPPED_LOOP(false));
       barrier();
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(false, false, _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), bvec3(bvec3(bvec3(false, false, _GLF_FALSE(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false)), (_GLF_IDENTITY(injectionSwitch.x, float(mat2x3(injectionSwitch.x, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, 0.0, log(1.0)))) > injectionSwitch.y)))))), _GLF_IDENTITY(bvec3(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(false, false, _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), bvec3(bvec3(bvec3(false, false, _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(vec3(injectionSwitch.x, 0.0, 1.0), (false ? _GLF_FUZZED(vec3(5.2, -72.76, -385.243)) : vec3(injectionSwitch.x, 0.0, 1.0))))) > injectionSwitch.y)))))), bvec3(bvec3(_GLF_IDENTITY(bvec3(false, false, _GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), bvec3(bvec3(bvec3(false, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))), true)), bvec3(bvec3(bvec3(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(false, false, _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)))).y)))))), bvec3(bvec3(bvec3(false, _GLF_IDENTITY(false, (false) || false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), bvec3(bvec3(_GLF_IDENTITY(bvec3(false, false, _GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), bvec3(bvec3(bvec3(false, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))), true))))))))));
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       barrier();
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-6035.9617), _GLF_FUZZED(-6.0)), vec2((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch)[1], ((injectionSwitch)[1]) - 0.0)), bvec2(true, true))).x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))
      {
       barrier();
      }
     else
      {
      }
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(_GLF_ONE(1.0, injectionSwitch.y))).x < injectionSwitch.y))))
    {
     atomicStore(buf[next_virtual_gid], uint(2), 4, 64, 4);
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       do
        {
         return;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false))))
    return;
   for(int _injected_loop_counter = (1 & _GLF_IDENTITY(1, (_GLF_IDENTITY(1, ~ (_GLF_IDENTITY(~ (1), clamp(~ (1), ~ (1), ~ (1)))))) * 1)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, false)))))
          barrier();
         barrier();
        }
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(false))
          {
           do
            {
             return;
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
       else
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, false, true)))))
          barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       do
        {
         barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
           else
            {
            }
           if(_GLF_DEAD(false))
            barrier();
          }
        }
       while(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), bool(bvec2(_GLF_WRAPPED_LOOP(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), _GLF_IDENTITY(bool(bool(_GLF_WRAPPED_LOOP(false))), _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec4(bool(bool(_GLF_WRAPPED_LOOP(false))), _GLF_IDENTITY(true, bool(bvec3(true, true, false))), false, false)), bool(bvec3(bool(bvec4(bool(bool(_GLF_WRAPPED_LOOP(false))), _GLF_IDENTITY(true, bool(bvec3(_GLF_IDENTITY(true, false || (true)), true, false))), false, false)), false, false))), ! (! (_GLF_IDENTITY(bool(bvec4(bool(bool(_GLF_WRAPPED_LOOP(false))), _GLF_IDENTITY(true, bool(bvec3(true, true, false))), _GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), ! (! (! (! (false)))))), false)), bool(bvec3(bool(bvec4(bool(bool(_GLF_WRAPPED_LOOP(false))), _GLF_IDENTITY(true, bool(bvec3(true, true, false))), false, false)), false, false)))))))));
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           barrier();
          }
         else
          {
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           continue;
          }
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, true, false)))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(false))
        break;
       continue;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))))))
    {
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          barrier();
         return;
        }
      }
    }
   else
    {
     subgroupAll(true);
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(vec2(vec3(64.33, 142.784, 21.30)).t), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-1.5)), bvec2(true, false))).y, ! (_GLF_IDENTITY(! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(vec2(vec3(64.33, 142.784, 21.30)).t), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-1.5)), bvec2(true, false))).y), false || (! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(vec2(vec3(64.33, 142.784, 21.30)).t), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-1.5)), bvec2(true, false))).y)))))))))
      return;
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
    }
   if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     return;
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, ! (! (false))))), true && (false))))
      barrier();
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
