#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x > injectionSwitch.y))))
  return;
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 uint num_workgroup = _GLF_IDENTITY(gl_NumWorkGroups.x, min(gl_NumWorkGroups.x, _GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups.x, (_GLF_IDENTITY(gl_NumWorkGroups, min(gl_NumWorkGroups, _GLF_IDENTITY(gl_NumWorkGroups, uvec3(gl_NumWorkGroups[0], gl_NumWorkGroups[1], gl_NumWorkGroups[2])))).x) | (gl_NumWorkGroups.x)), (gl_NumWorkGroups.x) | 0u)));
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(_GLF_IDENTITY(_GLF_IDENTITY(-5352.1260, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? -5352.1260 : _GLF_FUZZED(9302.4579))), (_GLF_IDENTITY(-5352.1260, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? -5352.1260 : _GLF_FUZZED(9302.4579)))) - 0.0))), float(injectionSwitch.x), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), (false ? _GLF_FUZZED(-1.5) : _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, float(mat4x2(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(unpackHalf2x16(87266u)))).x, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0))), _GLF_IDENTITY(min(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), 1.0 * (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), clamp(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)))))), _GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x))), _GLF_IDENTITY(min(min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x))), _GLF_IDENTITY(_GLF_IDENTITY(min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x))), mix(float(min(_GLF_IDENTITY(injectionSwitch.x, float(mat4x3(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), 1.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 0.0, determinant(mat3(sin(0.0), 0.0, 0.0, 0.0, 0.0, sin(0.0), 0.0, 1.0, 0.0)), 0.0, 1.0, _GLF_IDENTITY(0.0, clamp(0.0, 0.0, _GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, 1.0 * (0.0))) - 0.0))), _GLF_IDENTITY(0.0, (0.0) * 1.0), 1.0))), _GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)))), injectionSwitch.x)))), float(_GLF_FUZZED(-6.9)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), mix(float(_GLF_IDENTITY(min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x))), mix(float(min(_GLF_IDENTITY(injectionSwitch.x, float(mat4x3(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), 1.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 0.0, determinant(mat3(sin(0.0), 0.0, 0.0, 0.0, 0.0, sin(0.0), 0.0, 1.0, 0.0)), 0.0, 1.0, _GLF_IDENTITY(0.0, clamp(0.0, 0.0, _GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, 1.0 * (0.0))) - 0.0))), _GLF_IDENTITY(0.0, (0.0) * 1.0), 1.0))), _GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)))), injectionSwitch.x)))), float(_GLF_FUZZED(-6.9)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), float(_GLF_FUZZED((-7.9 + 83.14))), bool(false)))), clamp(min(min(injectionSwitch.x, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x))))), _GLF_IDENTITY(min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x))), mix(float(min(_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(mat4x3(_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(93.22)), float(injectionSwitch.x), bool(true)))) / 1.0), _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-4249.4964), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(556.861)), bvec2(true, false))).x)), 1.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 0.0, determinant(mat3(sin(0.0), 0.0, 0.0, 0.0, 0.0, sin(0.0), 0.0, 1.0, 0.0)), 0.0, 1.0, _GLF_IDENTITY(0.0, clamp(0.0, 0.0, _GLF_IDENTITY(0.0, (_GLF_IDENTITY(_GLF_IDENTITY(0.0, float(_GLF_IDENTITY(mat3x4(0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, cos(0.0), 0.0, 1.0), (false ? _GLF_FUZZED(mat3x4(2.6, -190.878, -2498.1133, 3.7, 7392.2361, -891.927, 4.7, -45.85, 4878.6171, -30.42, -815.241, -888.287)) : mat3x4(0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, cos(0.0), 0.0, 1.0))))), 1.0 * (0.0))) - _GLF_IDENTITY(0.0, min(0.0, _GLF_IDENTITY(0.0, exp(0.0) * (0.0))))))), _GLF_IDENTITY(_GLF_IDENTITY(0.0, max(0.0, 0.0)), (0.0) * 1.0), 1.0)), 1.0 * (float(mat4x3(_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(93.22)), float(injectionSwitch.x), bool(true)))) / 1.0), _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-4249.4964), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(556.861)), bvec2(true, false))).x)), 1.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 0.0, determinant(mat3(sin(0.0), 0.0, 0.0, 0.0, 0.0, sin(0.0), 0.0, 1.0, 0.0)), 0.0, 1.0, _GLF_IDENTITY(0.0, clamp(0.0, 0.0, _GLF_IDENTITY(0.0, (_GLF_IDENTITY(_GLF_IDENTITY(0.0, float(_GLF_IDENTITY(mat3x4(0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, cos(0.0), 0.0, 1.0), (false ? _GLF_FUZZED(mat3x4(2.6, -190.878, -2498.1133, 3.7, 7392.2361, -891.927, 4.7, -45.85, 4878.6171, -30.42, -815.241, -888.287)) : mat3x4(0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, cos(0.0), 0.0, 1.0))))), 1.0 * (0.0))) - _GLF_IDENTITY(0.0, min(0.0, _GLF_IDENTITY(0.0, exp(0.0) * (0.0))))))), _GLF_IDENTITY(_GLF_IDENTITY(0.0, max(0.0, 0.0)), (0.0) * 1.0), 1.0))))), _GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)))), injectionSwitch.x)))), float(_GLF_FUZZED(-6.9)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), min(min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x))), _GLF_IDENTITY(min(injectionSwitch.x, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x, min(injectionSwitch.x, injectionSwitch.x))), mix(float(min(_GLF_IDENTITY(injectionSwitch.x, float(mat4x3(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(vec2(-794.757, 4317.8944)) : injectionSwitch)), _GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)))).x)), 1.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 0.0, determinant(mat3(sin(0.0), 0.0, 0.0, _GLF_IDENTITY(0.0, min(0.0, 0.0)), 0.0, sin(0.0), 0.0, 1.0, 0.0)), 0.0, 1.0, _GLF_IDENTITY(0.0, clamp(0.0, 0.0, _GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, 1.0 * _GLF_IDENTITY((0.0), min((0.0), (0.0))))) - 0.0))), _GLF_IDENTITY(0.0, (0.0) * 1.0), 1.0))), _GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + 0.0), clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)))), injectionSwitch.x)))), float(_GLF_FUZZED(-6.9)), bool(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))))))))), _GLF_IDENTITY(min(min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(18.62)), float(injectionSwitch.x), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), injectionSwitch.x))), _GLF_IDENTITY(min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x))), mix(float(min(_GLF_IDENTITY(injectionSwitch.x, float(mat4x3(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), 1.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 0.0, determinant(mat3(sin(0.0), 0.0, 0.0, 0.0, 0.0, sin(_GLF_IDENTITY(0.0, 0.0 + (0.0))), 0.0, _GLF_IDENTITY(1.0, 0.0 + (1.0)), 0.0)), 0.0, 1.0, _GLF_IDENTITY(0.0, clamp(0.0, 0.0, _GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, 1.0 * (0.0))) - 0.0))), _GLF_IDENTITY(0.0, (0.0) * 1.0), 1.0))), _GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)))), injectionSwitch.x)))), float(_GLF_FUZZED(-6.9)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), (min(min(injectionSwitch.x, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED((+ injectionSwitch)) : injectionSwitch)) : _GLF_FUZZED((injectionSwitch / 6.3)))).x, min(injectionSwitch.x, injectionSwitch.x))), _GLF_IDENTITY(min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x))), mix(float(min(_GLF_IDENTITY(injectionSwitch.x, float(mat4x3(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), 1.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 0.0, determinant(mat3(sin(0.0), 0.0, 0.0, 0.0, 0.0, sin(0.0), 0.0, 1.0, 0.0)), 0.0, 1.0, _GLF_IDENTITY(0.0, clamp(0.0, 0.0, _GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, 1.0 * (0.0))) - 0.0))), _GLF_IDENTITY(_GLF_IDENTITY(0.0, (0.0) * 1.0), mix(float(_GLF_FUZZED(float(-8897))), float(_GLF_IDENTITY(0.0, (0.0) * 1.0)), bool(true))), 1.0))), _GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)))), injectionSwitch.x)))), float(_GLF_FUZZED(-6.9)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))) / 1.0))))))) > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    return;
   return;
   if(_GLF_IDENTITY(_GLF_DEAD(false), true && _GLF_IDENTITY((_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, (false) && true))))), ! (! ((_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, (false) && true))))))))))
    return;
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), bool(bvec3(bool(bool(false)), false, true))))))
  return;
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((false), _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec3((false), true, true)), false || (bool(bvec3((false), true, true)))), (_GLF_IDENTITY(bool(bvec3((false), true, true)), false || (bool(bvec3((false), true, true))))) || false)), bool(bvec2((_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, bool(bool(false))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false), _GLF_IDENTITY(bvec3(bvec3(bvec3(_GLF_IDENTITY(false, bool(bool(false))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))), bvec3(bvec3(bvec3(bvec3(bvec3(_GLF_IDENTITY(false, bool(bool(false))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)))))))))), false))), (_GLF_IDENTITY(_GLF_IDENTITY((false), _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec3((false), true, true)), false || (bool(bvec3((false), true, true)))), (_GLF_IDENTITY(bool(bvec3((false), true, true)), false || (bool(bvec3((false), true, true))))) || false)), bool(bvec2((_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, bool(bool(false))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false), _GLF_IDENTITY(bvec3(bvec3(bvec3(_GLF_IDENTITY(false, bool(bool(false))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, true && (false))))))), bvec3(bvec3(bvec3(bvec3(bvec3(_GLF_IDENTITY(false, bool(bool(false))), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_IDENTITY((injectionSwitch)[0], clamp((injectionSwitch)[0], (injectionSwitch)[0], (injectionSwitch)[0])), (injectionSwitch)[1]), vec2(_GLF_FUZZED(-9230.9419), _GLF_FUZZED(-8.7)), bvec2(false, false))).x < injectionSwitch.y)), false)))))))))), false)))) || false), false)), (bool(bvec2(_GLF_IDENTITY((false), bool(bvec2((false), _GLF_IDENTITY(false, false || (false))))), false))) && _GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec2(true, true), bvec2(_GLF_IDENTITY(bvec2(bvec2(true, true)), bvec2(bvec2(bvec2(bvec2(true, true)))))))))))))))))
  return;
 uint workgroup_base = workgroup_size * workgroup_id;
 if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   return;
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(_GLF_IDENTITY(mat3x4(injectionSwitch, 1.0, 0.0, exp(0.0), 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, length(0.0)), mat4(1.0) * (mat3x4(injectionSwitch, 1.0, 0.0, exp(0.0), 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, length(0.0))))), vec2(vec3(vec2(_GLF_IDENTITY(mat3x4(injectionSwitch, _GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, float(_GLF_IDENTITY(mat4x2(1.0, 0.0, 0.0, 1.0, abs(0.0), 0.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0), mat2(1.0) * (mat4x2(1.0, 0.0, 0.0, 1.0, abs(0.0), 0.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0)))))) + 0.0), 0.0, exp(0.0), 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, length(0.0)), _GLF_IDENTITY(mat4(1.0), (mat4(1.0)) - mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)) * (mat3x4(injectionSwitch, 1.0, 0.0, exp(0.0), 1.0, 1.0, 1.0, 1.0, 0.0, _GLF_IDENTITY(1.0, 0.0 + (1.0)), length(0.0))))), 1.0)))).x > injectionSwitch.y)), bool(_GLF_IDENTITY(bool(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(_GLF_IDENTITY(mat3x4(injectionSwitch, 1.0, 0.0, exp(0.0), 1.0, 1.0, 1.0, 1.0, 0.0, _GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-9.8)), float(1.0), bool(true))), 1.0)), length(0.0)), mat4(1.0) * (mat3x4(injectionSwitch, 1.0, 0.0, exp(0.0), 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, length(0.0))))), vec2(vec3(vec2(_GLF_IDENTITY(mat3x4(injectionSwitch, 1.0, 0.0, exp(0.0), 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, length(0.0)), mat4(1.0) * (mat3x4(injectionSwitch, 1.0, 0.0, exp(0.0), 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, length(0.0))))), 1.0)))).x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y))), (_GLF_IDENTITY(bool(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(_GLF_IDENTITY(mat3x4(injectionSwitch, 1.0, 0.0, exp(0.0), 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, length(0.0)), mat4(1.0) * (mat3x4(injectionSwitch, 1.0, 0.0, exp(0.0), 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, length(0.0))))), vec2(vec3(vec2(_GLF_IDENTITY(mat3x4(injectionSwitch, 1.0, 0.0, exp(0.0), 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, length(0.0)), mat4(1.0) * (mat3x4(injectionSwitch, 1.0, 0.0, exp(0.0), 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, length(0.0))))), 1.0)))).x > injectionSwitch.y))), ! (! (bool(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(_GLF_IDENTITY(mat3x4(injectionSwitch, 1.0, 0.0, exp(0.0), 1.0, 1.0, _GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-504.640)), bool(false))), 1.0, 0.0, 1.0, length(0.0)), mat4(1.0) * (mat3x4(injectionSwitch, 1.0, 0.0, exp(0.0), 1.0, 1.0, 1.0, 1.0, _GLF_IDENTITY(0.0, min(0.0, 0.0)), 1.0, length(0.0))))), vec2(vec3(vec2(_GLF_IDENTITY(mat3x4(injectionSwitch, 1.0, 0.0, exp(0.0), 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, length(0.0)), mat4(1.0) * (mat3x4(injectionSwitch, 1.0, 0.0, exp(0.0), _GLF_IDENTITY(1.0, float(_GLF_IDENTITY(mat4x2(1.0, sin(0.0), log(exp(0.0)), abs(1.0), 1.0, determinant(mat2(abs(0.0), 0.0, 0.0, 0.0)), abs(0.0), 1.0), (false ? _GLF_FUZZED(mat4x2(394.589, -9.3, 0.7, 2.8, -2957.5558, -57.90, 4.6, -4071.5316)) : mat4x2(1.0, sin(0.0), log(exp(0.0)), abs(1.0), 1.0, determinant(mat2(abs(0.0), 0.0, 0.0, 0.0)), abs(0.0), 1.0))))), 1.0, 1.0, 1.0, 0.0, 1.0, length(0.0))))), 1.0)))).x > injectionSwitch.y))))))) || false)))))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(_GLF_DEAD(false), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bvec3(bvec4(bvec3(_GLF_DEAD(false), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true)), bvec3(bvec4(_GLF_IDENTITY(bvec3(bvec4(bvec3(_GLF_DEAD(false), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true)), bvec3(bvec4(bvec3(bvec4(bvec3(_GLF_DEAD(false), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true)), false))), false)))), bvec3(bvec3(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))), true), bvec2(bvec2(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))), true)))))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))
      return;
     return;
     if(_GLF_DEAD(false))
      return;
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), (! (injectionSwitch.x > injectionSwitch.y)) && true)))) || _GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), injectionSwitch)))).x > injectionSwitch.y), bool(bool((_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), injectionSwitch)))).x > injectionSwitch.y))))))))))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     return;
     if(_GLF_DEAD(false))
      return;
    }
   return;
  }
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bvec3(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y)))), true, false)), (_GLF_IDENTITY(bool(bvec3(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)), false || ((_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y)))), true, false)), ! (! (_GLF_IDENTITY(bool(bvec3(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y)))), true, false)), (bool(bvec3(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y)))), true, false))) || false))))) || false))), bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), true, false)))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-5.7)), float(injectionSwitch.x), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) > injectionSwitch.y)), bool(_GLF_IDENTITY(bvec3(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))), true, false), bvec3(bvec3(bvec3(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))), true, false)))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))), (bool(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))))) && true)), ! (! (bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))), (bool(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))))) && true))))))))), bool(bool(! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(float(injectionSwitch.y)))))) && true))))))))), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false))))))), false || (_GLF_IDENTITY(bool(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false))), true && (_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), (! ((injectionSwitch.x > injectionSwitch.y))) && true)))), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false))))), _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) && true) && (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! _GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, vec2(mat4x2(injectionSwitch, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0))), injectionSwitch)).y))), ((_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, vec2(mat4x2(injectionSwitch, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0))), injectionSwitch)).y)))) || false), bool(bool(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))), bool(bvec3(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x)) > injectionSwitch.y)), true, false))))))), false || (bool(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) > injectionSwitch.y)), _GLF_IDENTITY(bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false)), ! (! (_GLF_IDENTITY(bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false)), true && (bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false)))))))), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(vec4(713.499, 1.9, 396.117, -77.26).x)), float(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))), bool(true))) < injectionSwitch.y)) && (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bool(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bool(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))) || false), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)))), true, false)))))))))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (bool(_GLF_IDENTITY(bool(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-5.7)), float(injectionSwitch.x), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) > injectionSwitch.y)), bool(_GLF_IDENTITY(bvec3(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))), true, false), bvec3(bvec3(bvec3(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))), true, false)))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))), (bool(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))))) && true)), ! (! (bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))), (bool(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))))) && true))))))))), bool(bool(! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(float(injectionSwitch.y)))))) && true))))))))), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false))))))), false || (_GLF_IDENTITY(bool(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false))), true && (_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), (! ((injectionSwitch.x > injectionSwitch.y))) && true)))), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false))))), _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) && true) && (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! _GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, vec2(mat4x2(injectionSwitch, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0))), injectionSwitch)).y))), ((_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, vec2(mat4x2(injectionSwitch, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0))), injectionSwitch)).y)))) || false), bool(bool(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))), bool(bvec3(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x)) > injectionSwitch.y)), true, false))))))), false || (bool(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) > injectionSwitch.y)), _GLF_IDENTITY(bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false)), ! (! (_GLF_IDENTITY(bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false)), true && (bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false)))))))), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(vec4(713.499, 1.9, 396.117, -77.26).x)), float(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))), bool(true))) < injectionSwitch.y)) && (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bool(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bool(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))) || false), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)))), true, false))))))))))))))), true))))
  return;
 uint virtual_gid = _GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size + subgroup_local_id, ~ (_GLF_IDENTITY(~ _GLF_IDENTITY((_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size + subgroup_local_id, _GLF_IDENTITY(_GLF_IDENTITY(0u, 0u | (_GLF_IDENTITY(0u, (0u) | (0u)))) ^ _GLF_IDENTITY((workgroup_base + subgroup_id * subgroup_size + subgroup_local_id), 0u | (_GLF_IDENTITY((workgroup_base + subgroup_id * subgroup_size + subgroup_local_id), uint(_GLF_ZERO(0.0, injectionSwitch.x)) | ((workgroup_base + subgroup_id * subgroup_size + subgroup_local_id))))), (_GLF_IDENTITY(0u, 0u | (_GLF_IDENTITY(0u, (0u) | (0u)))) ^ _GLF_IDENTITY((workgroup_base + subgroup_id * subgroup_size + subgroup_local_id), 0u | (_GLF_IDENTITY((workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, ~ (_GLF_IDENTITY(~ (subgroup_size), (~ (subgroup_size)) | (~ (subgroup_size))))) + subgroup_local_id), uint(_GLF_ZERO(0.0, injectionSwitch.x)) | ((workgroup_base + subgroup_id * subgroup_size + subgroup_local_id)))))) / 1u))), ((_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size + subgroup_local_id, _GLF_IDENTITY(_GLF_IDENTITY(0u, 0u | (_GLF_IDENTITY(0u, (0u) | (0u)))) ^ _GLF_IDENTITY((workgroup_base + subgroup_id * subgroup_size + subgroup_local_id), 0u | (_GLF_IDENTITY((workgroup_base + subgroup_id * subgroup_size + subgroup_local_id), uint(_GLF_ZERO(0.0, injectionSwitch.x)) | ((workgroup_base + subgroup_id * subgroup_size + subgroup_local_id))))), (_GLF_IDENTITY(0u, 0u | (_GLF_IDENTITY(0u, (0u) | (0u)))) ^ _GLF_IDENTITY((workgroup_base + subgroup_id * subgroup_size + subgroup_local_id), 0u | (_GLF_IDENTITY((workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, ~ (_GLF_IDENTITY(~ (subgroup_size), (~ (subgroup_size)) | (~ (subgroup_size))))) + subgroup_local_id), uint(_GLF_ZERO(0.0, injectionSwitch.x)) | ((workgroup_base + subgroup_id * subgroup_size + subgroup_local_id)))))) / 1u)))) / 1u), max(~ (_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size + subgroup_local_id, _GLF_IDENTITY(0u, 0u | (_GLF_IDENTITY(0u, (0u) | (0u)))) ^ _GLF_IDENTITY((workgroup_base + subgroup_id * subgroup_size + subgroup_local_id), 0u | (_GLF_IDENTITY((workgroup_base + subgroup_id * subgroup_size + subgroup_local_id), uint(_GLF_ZERO(0.0, injectionSwitch.x)) | _GLF_IDENTITY((_GLF_IDENTITY((workgroup_base + subgroup_id * subgroup_size + subgroup_local_id), ((workgroup_base + subgroup_id * subgroup_size + subgroup_local_id)) | (_GLF_IDENTITY((workgroup_base + subgroup_id * subgroup_size + subgroup_local_id), (_GLF_IDENTITY((workgroup_base + subgroup_id * subgroup_size + subgroup_local_id), ~ (~ ((workgroup_base + subgroup_id * subgroup_size + subgroup_local_id))))) - 0u)))), uint(_GLF_IDENTITY(uvec4((_GLF_IDENTITY((workgroup_base + subgroup_id * subgroup_size + subgroup_local_id), ((workgroup_base + subgroup_id * subgroup_size + subgroup_local_id)) | (_GLF_IDENTITY((workgroup_base + subgroup_id * subgroup_size + subgroup_local_id), (_GLF_IDENTITY((workgroup_base + subgroup_id * subgroup_size + subgroup_local_id), ~ (~ ((workgroup_base + subgroup_id * subgroup_size + subgroup_local_id))))) - 0u)))), 1u, uint(_GLF_ONE(1.0, injectionSwitch.y)), 1u), (_GLF_IDENTITY(uvec4((_GLF_IDENTITY((workgroup_base + subgroup_id * subgroup_size + subgroup_local_id), ((workgroup_base + subgroup_id * subgroup_size + subgroup_local_id)) | (_GLF_IDENTITY((workgroup_base + subgroup_id * subgroup_size + subgroup_local_id), (_GLF_IDENTITY((workgroup_base + subgroup_id * subgroup_size + subgroup_local_id), ~ (~ ((workgroup_base + subgroup_id * subgroup_size + subgroup_local_id))))) - 0u)))), 1u, uint(_GLF_ONE(1.0, injectionSwitch.y)), 1u), (uvec4((_GLF_IDENTITY((workgroup_base + subgroup_id * subgroup_size + subgroup_local_id), ((workgroup_base + subgroup_id * subgroup_size + subgroup_local_id)) | (_GLF_IDENTITY((workgroup_base + subgroup_id * subgroup_size + subgroup_local_id), (_GLF_IDENTITY((workgroup_base + subgroup_id * subgroup_size + subgroup_local_id), ~ (~ ((workgroup_base + subgroup_id * subgroup_size + subgroup_local_id))))) - 0u)))), 1u, uint(_GLF_ONE(1.0, injectionSwitch.y)), 1u)) - uvec4(0u, 0u, 0u, 0u))) + uvec4(0u, 0u, 0u, 0u))))))))), _GLF_IDENTITY(~ (_GLF_IDENTITY(workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, ~ (~ (_GLF_IDENTITY(subgroup_size, (subgroup_size) | 0u)))) + subgroup_local_id, _GLF_IDENTITY(0u, 0u | (_GLF_IDENTITY(0u, (0u) | (0u)))) ^ _GLF_IDENTITY((workgroup_base + subgroup_id * subgroup_size + subgroup_local_id), 0u | (_GLF_IDENTITY((_GLF_IDENTITY(workgroup_base, min(workgroup_base, _GLF_IDENTITY(workgroup_base, clamp(workgroup_base, workgroup_base, workgroup_base)))) + subgroup_id * subgroup_size + subgroup_local_id), uint(_GLF_ZERO(0.0, injectionSwitch.x)) | ((workgroup_base + subgroup_id * subgroup_size + subgroup_local_id))))))), ~ (~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size + subgroup_local_id, _GLF_IDENTITY(0u, 0u | (_GLF_IDENTITY(0u, (0u) | (0u)))) ^ _GLF_IDENTITY((workgroup_base + subgroup_id * subgroup_size + subgroup_local_id), 0u | (_GLF_IDENTITY((workgroup_base + subgroup_id * subgroup_size + subgroup_local_id), uint(_GLF_ZERO(0.0, injectionSwitch.x)) | ((workgroup_base + subgroup_id * subgroup_size + subgroup_local_id))))))), (~ (_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size + subgroup_local_id, _GLF_IDENTITY(0u, 0u | (_GLF_IDENTITY(0u, (0u) | (0u)))) ^ _GLF_IDENTITY(_GLF_IDENTITY((workgroup_base + subgroup_id * subgroup_size + subgroup_local_id), 0u | (_GLF_IDENTITY((workgroup_base + subgroup_id * subgroup_size + subgroup_local_id), uint(_GLF_ZERO(0.0, injectionSwitch.x)) | ((workgroup_base + subgroup_id * subgroup_size + subgroup_local_id))))), clamp(_GLF_IDENTITY((workgroup_base + subgroup_id * subgroup_size + subgroup_local_id), 0u | (_GLF_IDENTITY((workgroup_base + subgroup_id * subgroup_size + subgroup_local_id), uint(_GLF_ZERO(0.0, injectionSwitch.x)) | ((workgroup_base + subgroup_id * subgroup_size + subgroup_local_id))))), _GLF_IDENTITY((workgroup_base + subgroup_id * subgroup_size + subgroup_local_id), 0u | (_GLF_IDENTITY((workgroup_base + subgroup_id * subgroup_size + subgroup_local_id), uint(_GLF_ZERO(0.0, injectionSwitch.x)) | ((workgroup_base + subgroup_id * subgroup_size + subgroup_local_id))))), _GLF_IDENTITY((workgroup_base + subgroup_id * subgroup_size + subgroup_local_id), 0u | (_GLF_IDENTITY((workgroup_base + subgroup_id * subgroup_size + subgroup_local_id), uint(_GLF_ZERO(0.0, injectionSwitch.x)) | ((workgroup_base + subgroup_id * subgroup_size + subgroup_local_id)))))))))) | (~ (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, (workgroup_base + subgroup_id * subgroup_size) ^ 0u) + subgroup_local_id, _GLF_IDENTITY(0u, 0u | (_GLF_IDENTITY(0u, (0u) | (0u)))) ^ _GLF_IDENTITY((workgroup_base + subgroup_id * subgroup_size + _GLF_IDENTITY(subgroup_local_id, (0u << _GLF_IDENTITY(uint(3u), uint(3u))) ^ (subgroup_local_id))), 0u | (_GLF_IDENTITY((workgroup_base + subgroup_id * subgroup_size + subgroup_local_id), uint(_GLF_ZERO(0.0, injectionSwitch.x)) | ((workgroup_base + subgroup_id * subgroup_size + subgroup_local_id))))))))))))))));
 uint next_virtual_gid = workgroup_base + _GLF_IDENTITY(subgroup_id, min(_GLF_IDENTITY(subgroup_id, (_GLF_IDENTITY(subgroup_id, (true ? subgroup_id : _GLF_FUZZED(subgroup_local_id)))) | (subgroup_id)), subgroup_id)) * subgroup_size + _GLF_IDENTITY(((_GLF_IDENTITY(subgroup_local_id + 1, _GLF_IDENTITY(0u ^ (subgroup_local_id + 1), (_GLF_IDENTITY(0u ^ (subgroup_local_id + 1), (false ? _GLF_IDENTITY(_GLF_FUZZED(num_workgroup), min(_GLF_FUZZED(num_workgroup), _GLF_FUZZED(num_workgroup))) : _GLF_IDENTITY(0u, 0u | (_GLF_IDENTITY(0u, uint(uvec4(0u, 1u, 0u, (1u ^ 0u)))))) ^ _GLF_IDENTITY((subgroup_local_id + _GLF_IDENTITY(1, max(_GLF_IDENTITY(1, ~ (~ (1))), _GLF_IDENTITY(1, ~ (~ (1)))))), ((_GLF_IDENTITY(subgroup_local_id + 1, clamp(subgroup_local_id + 1, _GLF_IDENTITY(subgroup_local_id + 1, ~ (~ (subgroup_local_id + 1))), subgroup_local_id + 1)))) | (_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) / 1u), (_GLF_IDENTITY((subgroup_local_id + 1), (true ? (_GLF_IDENTITY(subgroup_local_id, max(subgroup_local_id, subgroup_local_id)) + 1) : _GLF_FUZZED(subgroup_size)))) | 0u)))))) | (_GLF_IDENTITY(0u ^ (_GLF_IDENTITY(subgroup_local_id + 1, (_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) ^ 0u)) | (_GLF_IDENTITY(subgroup_local_id + 1, uint(uvec4(subgroup_local_id + 1, 1u, 1u, 1u)))))), _GLF_IDENTITY(uint(uvec2(_GLF_IDENTITY(0u, (0u) | 0u) ^ (subgroup_local_id + 1), 1u)), ~ (~ (uint(uvec2(_GLF_IDENTITY(0u, (0u) | 0u) ^ (subgroup_local_id + 1), 1u)))))))))) % subgroup_size), ~ (~ (((subgroup_local_id + 1) % subgroup_size))));
 buf[virtual_gid] = 1;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_IDENTITY(subgroup_local_id, max(subgroup_local_id, subgroup_local_id)) + 1 < _GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((_GLF_IDENTITY(subgroup_size, (false ? _GLF_FUZZED(workgroup_size) : subgroup_size))), (_GLF_IDENTITY((subgroup_size), min(_GLF_IDENTITY((subgroup_size), (false ? _GLF_FUZZED(subgroup_id) : (subgroup_size))), (subgroup_size)))) | 0u) + 0u))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) || _GLF_IDENTITY(false, bool(bool(false)))))))))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   atomicStore(buf[next_virtual_gid], _GLF_IDENTITY(uint(_GLF_IDENTITY(2, int(ivec4(_GLF_IDENTITY(2, (_GLF_IDENTITY(2, ~ (~ (_GLF_IDENTITY(2, clamp(2, 2, 2)))))) >> 0), (0 | _GLF_IDENTITY(1, min(1, 1))), int(_GLF_ONE(1.0, injectionSwitch.y)), 1)))), (uint(_GLF_IDENTITY(_GLF_IDENTITY(2, int(ivec4(_GLF_IDENTITY(_GLF_IDENTITY(2, (_GLF_IDENTITY(2, ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(2, (2) | (2)), clamp(2, 2, 2)))))) >> 0), min(_GLF_IDENTITY(2, (_GLF_IDENTITY(2, ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(2, (2) | (2)), clamp(2, 2, 2)))))) >> 0), _GLF_IDENTITY(_GLF_IDENTITY(2, (_GLF_IDENTITY(2, ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(2, (2) | (2)), clamp(2, 2, 2)))))) >> 0), (0 << _GLF_IDENTITY(int(8), int(8))) ^ (_GLF_IDENTITY(2, (_GLF_IDENTITY(2, ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(2, (2) | (2)), clamp(2, 2, 2)))))) >> 0))))), (0 | 1), int(_GLF_ONE(1.0, injectionSwitch.y)), 1))), (_GLF_IDENTITY(2, int(_GLF_IDENTITY(ivec4(_GLF_IDENTITY(2, (_GLF_IDENTITY(2, ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(2, clamp(2, 2, 2)), (_GLF_IDENTITY(2, clamp(2, 2, 2))) << int(_GLF_ZERO(0.0, injectionSwitch.x))))))) >> 0), (0 | 1), int(_GLF_ONE(1.0, injectionSwitch.y)), 1), ivec4(1, 1, 1, 1) * (ivec4(_GLF_IDENTITY(2, (_GLF_IDENTITY(2, ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(2, clamp(2, 2, 2)), (_GLF_IDENTITY(2, clamp(2, 2, 2))) << int(_GLF_ZERO(0.0, injectionSwitch.x))))))) >> 0), (0 | 1), int(_GLF_ONE(1.0, injectionSwitch.y)), 1)))))) | (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(2, (2) | 0), int(ivec4(_GLF_IDENTITY(2, _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(2, ~ (~ (_GLF_IDENTITY(2, clamp(2, 2, 2)))))), int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ ((_GLF_IDENTITY(2, ~ (~ (_GLF_IDENTITY(2, clamp(2, 2, 2)))))))) >> 0, int(_GLF_ZERO(0.0, injectionSwitch.x)) + _GLF_IDENTITY(((_GLF_IDENTITY(2, ~ (~ (_GLF_IDENTITY(2, clamp(_GLF_IDENTITY(2, (2) | (_GLF_IDENTITY(2, max(2, _GLF_IDENTITY(2, (2) + 0))))), 2, 2)))))) >> 0), min(((_GLF_IDENTITY(2, ~ (~ (_GLF_IDENTITY(2, clamp(_GLF_IDENTITY(2, (2) | (_GLF_IDENTITY(2, max(2, _GLF_IDENTITY(2, (2) + 0))))), 2, 2)))))) >> 0), ((_GLF_IDENTITY(2, ~ (~ (_GLF_IDENTITY(2, clamp(_GLF_IDENTITY(2, (2) | (_GLF_IDENTITY(2, max(2, _GLF_IDENTITY(2, (2) + 0))))), 2, 2)))))) >> 0))))), (0 | 1), int(_GLF_ONE(1.0, injectionSwitch.y)), 1))), (_GLF_IDENTITY(2, int(ivec4(_GLF_IDENTITY(2, (_GLF_IDENTITY(2, ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(2, clamp(2, 2, 2)), min(_GLF_IDENTITY(2, clamp(2, 2, 2)), _GLF_IDENTITY(2, clamp(2, 2, 2)))))))) >> _GLF_IDENTITY(0, int(int(0)))), (0 | 1), int(_GLF_ONE(1.0, injectionSwitch.y)), 1)))) | (_GLF_IDENTITY(2, int(ivec4(_GLF_IDENTITY(2, _GLF_IDENTITY((_GLF_IDENTITY(2, ~ (~ (_GLF_IDENTITY(2, clamp(2, 2, 2)))))) >> 0, min((_GLF_IDENTITY(2, ~ (~ (_GLF_IDENTITY(2, clamp(2, 2, 2)))))) >> 0, _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(2, ~ (~ (_GLF_IDENTITY(2, clamp(_GLF_IDENTITY(2, (2) / (1 ^ 0)), 2, 2)))))), (_GLF_IDENTITY((_GLF_IDENTITY(2, ~ (~ (_GLF_IDENTITY(2, clamp(_GLF_IDENTITY(2, (2) / (1 ^ 0)), 2, 2)))))), ((_GLF_IDENTITY(2, ~ (~ (_GLF_IDENTITY(2, clamp(_GLF_IDENTITY(2, (2) / (1 ^ 0)), 2, 2))))))) | ((_GLF_IDENTITY(2, ~ (~ (_GLF_IDENTITY(2, clamp(_GLF_IDENTITY(2, (2) / (1 ^ 0)), 2, 2))))))))) | (_GLF_IDENTITY((_GLF_IDENTITY(2, ~ (~ (_GLF_IDENTITY(2, clamp(_GLF_IDENTITY(2, (2) / (1 ^ 0)), 2, 2)))))), (_GLF_IDENTITY((_GLF_IDENTITY(2, ~ (~ (_GLF_IDENTITY(2, clamp(_GLF_IDENTITY(2, (2) / (1 ^ 0)), 2, 2)))))), ~ (~ ((_GLF_IDENTITY(2, ~ (~ (_GLF_IDENTITY(2, clamp(_GLF_IDENTITY(2, (2) / (1 ^ 0)), 2, 2)))))))))) + 0))) >> 0, min(_GLF_IDENTITY((_GLF_IDENTITY(2, ~ (~ (_GLF_IDENTITY(2, clamp(2, 2, 2)))))), ((_GLF_IDENTITY(2, ~ (~ (_GLF_IDENTITY(2, clamp(2, 2, 2))))))) | ((_GLF_IDENTITY(2, ~ (~ (_GLF_IDENTITY(2, clamp(2, 2, 2)))))))) >> 0, _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(2, ~ (~ (_GLF_IDENTITY(2, clamp(2, 2, 2)))))) >> 0, 1 * ((_GLF_IDENTITY(2, ~ (~ (_GLF_IDENTITY(2, clamp(2, 2, 2)))))) >> 0)), (_GLF_IDENTITY((_GLF_IDENTITY(2, ~ (~ (_GLF_IDENTITY(2, clamp(2, 2, 2)))))) >> 0, 1 * ((_GLF_IDENTITY(2, ~ (~ (_GLF_IDENTITY(2, _GLF_IDENTITY(clamp(2, 2, 2), min(clamp(2, 2, 2), clamp(2, 2, 2)))))))) >> 0))) - 0)))))), (0 | 1), int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y)))), 1))))))))) ^ 0u), 4, 64, 4);
   subgroupAll(false);
  }
 else
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), _GLF_IDENTITY(vec2(vec4((injectionSwitch) * mat2(1.0), 1.0, 0.0)), mat2(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(44.09)), float(1.0), bool(true)))) * (vec2(vec4((injectionSwitch) * mat2(1.0), 1.0, 0.0)))))).x, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), max(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - _GLF_ZERO(0.0, injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).x))) - 0.0))) > injectionSwitch.y)), false || (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), _GLF_IDENTITY(vec2(vec4((injectionSwitch) * mat2(1.0), 1.0, 0.0)), mat2(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(44.09)), float(_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(8561.5889)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), bool(true)))) * (vec2(vec4((injectionSwitch) * mat2(1.0), 1.0, 0.0)))))).x, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), max(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - _GLF_ZERO(0.0, injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).x))) - 0.0))) > injectionSwitch.y))))))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, false || (false)))), _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, 0.0 + (injectionSwitch.y)))))))))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   atomicStore(buf[next_virtual_gid], _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uint(2), (_GLF_IDENTITY(false ? _GLF_FUZZED(subgroup_size) : _GLF_IDENTITY(uint(2), min(uint(2), uint(2))), (0u >> _GLF_IDENTITY(uint(1u), uint(1u))) + (_GLF_IDENTITY(false ? _GLF_FUZZED(_GLF_IDENTITY(subgroup_size, max(_GLF_IDENTITY(subgroup_size, (subgroup_size) | (subgroup_size)), subgroup_size))) : uint(2), (false ? _GLF_FUZZED(subgroup_size) : uint(2)) | _GLF_IDENTITY(0u, ~ (~ (0u)))))))), (_GLF_IDENTITY(uint(2), 0u ^ (uint(2)))) | 0u), max(_GLF_IDENTITY(uint(2), (false ? _GLF_FUZZED(virtual_gid) : uint(2))), uint(2))), _GLF_IDENTITY(4, (4) >> 0), _GLF_IDENTITY(_GLF_IDENTITY(64, _GLF_IDENTITY(min(_GLF_IDENTITY(_GLF_IDENTITY(64, int(ivec2(64, 1))), 0 ^ (_GLF_IDENTITY(64, int(ivec2(64, 1))))), 64), max(_GLF_IDENTITY(min(_GLF_IDENTITY(_GLF_IDENTITY(64, int(ivec2(64, 1))), 0 ^ (_GLF_IDENTITY(64, int(ivec2(64, 1))))), 64), (min(_GLF_IDENTITY(_GLF_IDENTITY(64, int(ivec2(64, 1))), 0 ^ (_GLF_IDENTITY(64, int(ivec2(64, 1))))), 64)) | (min(_GLF_IDENTITY(_GLF_IDENTITY(64, int(ivec2(64, 1))), 0 ^ (_GLF_IDENTITY(64, int(ivec2(64, 1))))), 64))), min(_GLF_IDENTITY(_GLF_IDENTITY(64, int(ivec2(64, 1))), 0 ^ (_GLF_IDENTITY(64, int(ivec2(64, 1))))), 64)))), (_GLF_IDENTITY(64, min(_GLF_IDENTITY(_GLF_IDENTITY(64, int(ivec2(64, 1))), 0 ^ (_GLF_IDENTITY(64, int(ivec2(64, 1))))), _GLF_IDENTITY(64, (64) * 1)))) * _GLF_IDENTITY(1, (1) * 1)), 4);
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   subgroupAll(_GLF_IDENTITY(_GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, true && (true)))), ! (! (_GLF_IDENTITY(true, true && (true))))));
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(false), ! _GLF_IDENTITY((! (_GLF_DEAD(false))), ! (! (_GLF_IDENTITY((! (_GLF_DEAD(false))), true && ((! (_GLF_DEAD(false)))))))))), ! (! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))), bool(bvec4(! (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, false)))))))))
  return;
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! (_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)).y), ((injectionSwitch.x > injectionSwitch.y)) && true)))))), (_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! (_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)).y), ((injectionSwitch.x > injectionSwitch.y)) && true))))))) || false))
  return;
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
