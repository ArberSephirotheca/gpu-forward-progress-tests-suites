#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_9 {
 vec2 _f0;
 vec2 _f1;
 bool _f2;
 bool _f3;
} ;

struct _GLF_struct_8 {
 uvec2 _f0;
 mat2x3 _f1;
 uvec4 _f2;
} ;

struct _GLF_struct_7 {
 mat4x3 _f0;
 uvec3 _f1;
 bvec2 _f2;
 mat4 _f3;
 mat4x2 _f4;
 mat2 _f5;
} ;

struct _GLF_struct_6 {
 int _f0;
 mat3x2 _f1;
} ;

struct _GLF_struct_10 {
 _GLF_struct_6 _f0;
 uvec2 _f1;
 mat2x3 _f2;
 _GLF_struct_7 _f3;
 _GLF_struct_8 _f4;
 float _f5;
 _GLF_struct_9 _f6;
} ;

struct _GLF_struct_4 {
 vec3 _f0;
 mat2x3 _f1;
} ;

struct _GLF_struct_5 {
 _GLF_struct_4 _f0;
} ;

struct _GLF_struct_2 {
 ivec2 _f0;
} ;

struct _GLF_struct_1 {
 mat4x3 _f0;
 uint next_virtual_gid;
} ;

struct _GLF_struct_0 {
 mat2x4 _f0;
 mat4 _f1;
 mat3x2 _f2;
} ;

struct _GLF_struct_3 {
 _GLF_struct_0 _f0;
 mat4x2 _f1;
 int _f2;
 _GLF_struct_1 _f3;
 mat3x2 _f4;
 _GLF_struct_2 _f5;
} ;

struct _GLF_struct_11 {
 _GLF_struct_3 _f0;
 bvec4 _f1;
 _GLF_struct_5 _f2;
 _GLF_struct_10 _f3;
 mat4x3 _f4;
 uint _f5;
 ivec2 _f6;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(false))
  return;
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))
    barrier();
  }
 else
  {
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   do
    {
     for(int _injected_loop_counter = _GLF_IDENTITY(1, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 1 : _GLF_FUZZED(int(false)))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > 0, ! (_GLF_IDENTITY(! (_injected_loop_counter > 0), (! (_injected_loop_counter > 0)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(false))
        {
         do
          {
           return;
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  return;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         return;
        }
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           return;
          }
        }
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       return;
      }
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     do
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
        {
         return;
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   return;
  }
 if(_GLF_DEAD(false))
  return;
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (true)))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (true ? _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-318.337) : injectionSwitch.y)))) : _GLF_FUZZED(-591.305)))))))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
     return;
    }
  }
 else
  {
  }
 do
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      break;
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
        break;
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         for(int _injected_loop_counter = 1; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > (int(_GLF_ZERO(0.0, injectionSwitch.x)) >> _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), _GLF_IDENTITY(min(int(1), int(1)), (_GLF_IDENTITY(min(int(1), int(1)), (min(int(1), int(1))) | (min(int(1), int(1))))) >> 0))))), (_GLF_WRAPPED_LOOP(_injected_loop_counter > (int(_GLF_ZERO(0.0, injectionSwitch.x)) >> _GLF_IDENTITY(_GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), min(int(1), int(1)))), (_GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), min(int(1), int(1))))) / 1)))) && true); _injected_loop_counter --)
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
            {
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) - 0) < 1); _injected_loop_counter ++)
              {
               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                {
                 return;
                }
               else
                {
                }
               if(_GLF_DEAD(false))
                continue;
              }
             if(_GLF_DEAD(false))
              break;
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                continue;
               continue;
              }
            }
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3)))); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
            }
           return;
          }
        }
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            break;
           if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || ((injectionSwitch.x > injectionSwitch.y))))))
            continue;
           continue;
          }
         break;
         if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
          return;
        }
       if(_GLF_DEAD(false))
        break;
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       return;
      }
    }
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(63.27, 2.4)) : injectionSwitch)).x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(min(_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-1.9) : _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)))))), injectionSwitch.y), clamp(min(_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-1.9) : _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)))))), injectionSwitch.y), min(_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false))))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) ? _GLF_FUZZED(-1.9) : _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)))))), injectionSwitch.y), min(_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-1.9) : _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)))))), injectionSwitch.y))))))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)))
        return;
       do
        {
         if(_GLF_DEAD(false))
          return;
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
       return;
      }
     do
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, true && (false))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, true), bvec3(bvec3(bvec3(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, true))))), ! (! _GLF_IDENTITY((_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, true), bvec3(bvec3(bvec3(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, true))))), true && (bool(_GLF_IDENTITY(bvec3(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, true), bvec3(bvec3(bvec3(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, true)))))))), ! (! ((_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, true), bvec3(bvec3(bvec3(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, true))))), true && (bool(_GLF_IDENTITY(bvec3(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, true), bvec3(bvec3(bvec3(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, true)))))))))))))))
                  break;
                 continue;
                }
               if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, true && (false)))))))
                {
                }
               else
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), (_GLF_IDENTITY(bool(bool(false)), ! (! (bool(bool(false)))))) && true))))
                  continue;
                 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                  }
                 else
                  {
                   return;
                  }
                }
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(false))
                {
                 do
                  {
                   return;
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
               return;
              }
            }
           do
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
               do
                {
                 if(_GLF_DEAD(false))
                  return;
                 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) && true))))))))), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, false || (false)))))), false || (_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, false || (false)))))))), false, true), bvec3(bvec4(bvec3(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, false || (false)))))), false || (_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, false || (false)))))))), false, true), true))))))
                  continue;
                }
               while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, false || (false))));
              }
             else
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))), _GLF_IDENTITY(bool(bvec2(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))), false)), (bool(bvec2(_GLF_DEAD(_GLF_IDENTITY(false, false || _GLF_IDENTITY((false), false || (_GLF_IDENTITY((false), false || (_GLF_IDENTITY((false), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY((false), ! (! (_GLF_IDENTITY(_GLF_IDENTITY((false), ((false)) && true), ! (_GLF_IDENTITY(! ((false)), bool(bool(! ((false)))))))))), true), _GLF_IDENTITY(bvec2(bvec2(bvec2(_GLF_IDENTITY((false), ! (! (_GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), bool(bool(! ((false)))))))))), true))), bvec2(bvec4(bvec2(bvec2(bvec2(_GLF_IDENTITY((false), ! (! _GLF_IDENTITY((_GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), bool(bool(! ((false)))))))), ((_GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), bool(bool(! ((false))))))))) && true))), true))), true, true)))))))))))), false))) && true)))
                  {
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      {
                      }
                     else
                      {
                       if(_GLF_DEAD(false))
                        return;
                      }
                     return;
                    }
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    return;
                   return;
                   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      return;
                    }
                  }
                }
               else
                {
                }
               if(_GLF_DEAD(false))
                return;
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  return;
                }
               if(_GLF_DEAD(false))
                {
                 for(int _injected_loop_counter = (int(_GLF_ONE(1.0, injectionSwitch.y)) & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                  {
                   do
                    {
                     return;
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                  }
                }
              }
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true)) || false))));
          }
         else
          {
           for(int _injected_loop_counter = ((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), (int(3)) << 0))) >> _GLF_IDENTITY(int(3), int(3))); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((0 >> _GLF_IDENTITY(int(8), int(8))) >> _GLF_IDENTITY(int(5), int(5)))); _injected_loop_counter --)
            {
             barrier();
            }
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
            {
             if(_GLF_DEAD(false))
              return;
            }
          }
        }
       else
        {
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         return;
        }
       else
        {
        }
      }
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         return;
        }
      }
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        return;
      }
     else
      {
      }
    }
  }
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
   return;
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (true)))))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false))
          return;
         if(_GLF_DEAD(false))
          return;
        }
      }
     else
      {
       if(_GLF_DEAD(false))
        return;
      }
    }
   else
    {
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, bool(bool(true)))))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
         return;
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        break;
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
  }
 if(_GLF_DEAD(false))
  return;
 uint workgroup_base = workgroup_size * workgroup_id;
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x)), ! (! (_GLF_IDENTITY(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x)), ! (! (_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))))))))), ! (! (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x)), ! (! (_GLF_IDENTITY(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x)), ! (! (_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x)))))))))))), true && (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x)), ! (! (_GLF_IDENTITY(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x)), ! (! (_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))))))))), ! (! (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x)), ! (! (_GLF_IDENTITY(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x)), ! (! (_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x)))))))))))), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x)), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x)), ! (! (_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x)), ! (! (_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))))), (_GLF_IDENTITY(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x)), ! (! (_injected_loop_counter != int(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), clamp(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)))))))) || false)))))))), ! (! (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x)), ! (! (_GLF_IDENTITY(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x)), ! (! (_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))))))))))))))))); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      return;
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (-22525 & (0 << _GLF_IDENTITY(int(_GLF_IDENTITY(7, max(7, 7))), int(7))))); _injected_loop_counter --)
      {
       return;
       if(_GLF_DEAD(false))
        break;
      }
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-15.40, -8.0)) : injectionSwitch)).x > injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     return;
    }
   else
    {
    }
  }
 if(_GLF_DEAD(false))
  {
   do
    {
     return;
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   else
    {
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0)))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
  }
 if(_GLF_DEAD(false))
  return;
 uint virtual_gid = _GLF_IDENTITY(workgroup_base, (workgroup_base) | (workgroup_base)) + _GLF_IDENTITY(subgroup_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)) + (_GLF_IDENTITY(subgroup_id, max(_GLF_IDENTITY(subgroup_id, (subgroup_id) | 0u), subgroup_id)))) * _GLF_IDENTITY(subgroup_size, (subgroup_size) + 0u) + _GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (true ? _GLF_IDENTITY(subgroup_local_id, 0u + (subgroup_local_id)) : _GLF_FUZZED(31125u))), ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_local_id, (true ? _GLF_IDENTITY(subgroup_local_id, 0u + (subgroup_local_id)) : _GLF_FUZZED(31125u)))), (~ (_GLF_IDENTITY(subgroup_local_id, (true ? _GLF_IDENTITY(subgroup_local_id, 0u + (subgroup_local_id)) : _GLF_FUZZED(31125u))))) << 0u), (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_local_id, (true ? _GLF_IDENTITY(subgroup_local_id, 0u + (subgroup_local_id)) : _GLF_FUZZED(31125u)))), (~ (_GLF_IDENTITY(subgroup_local_id, (true ? _GLF_IDENTITY(subgroup_local_id, 0u + (subgroup_local_id)) : _GLF_FUZZED(31125u))))) << 0u)) | (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_local_id, (true ? _GLF_IDENTITY(subgroup_local_id, 0u + (subgroup_local_id)) : _GLF_FUZZED(31125u)))), (~ (_GLF_IDENTITY(subgroup_local_id, (true ? _GLF_IDENTITY(subgroup_local_id, 0u + (subgroup_local_id)) : _GLF_FUZZED(31125u))))) << 0u)))));
 if(_GLF_DEAD(false))
  return;
 _GLF_struct_11 _GLF_struct_replacement_11 = _GLF_struct_11(_GLF_struct_3(_GLF_struct_0(mat2x4(1.0), mat4(1.0), mat3x2(_GLF_IDENTITY(1.0, 1.0 * (1.0)))), mat4x2(1.0), 1, _GLF_struct_1(mat4x3(_GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat2x4(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(abs(1.0), max(abs(1.0), _GLF_IDENTITY(abs(1.0), min(abs(1.0), abs(1.0))))), cos(0.0))), max(_GLF_IDENTITY(_GLF_IDENTITY(float(mat2x4(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, abs(1.0), cos(0.0))), float(vec2(float(mat2x4(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(abs(1.0), (true ? abs(1.0) : _GLF_FUZZED(9.7))), _GLF_IDENTITY(cos(0.0), max(cos(0.0), _GLF_IDENTITY(cos(0.0), clamp(cos(0.0), cos(0.0), cos(0.0))))))), 1.0))), (_GLF_IDENTITY(float(mat2x4(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, abs(1.0), cos(0.0))), float(vec2(float(mat2x4(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, abs(1.0), cos(0.0))), 1.0)))) / 1.0), float(mat2x4(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, abs(1.0), cos(0.0))))))), workgroup_base + subgroup_id * subgroup_size + ((subgroup_local_id + 1) % subgroup_size)), mat3x2(1.0), _GLF_struct_2(_GLF_IDENTITY(ivec2(1), (false ? _GLF_FUZZED(ivec2(64971, 74082)) : ivec2(1))))), bvec4(true), _GLF_struct_5(_GLF_struct_4(vec3(1.0), mat2x3(1.0))), _GLF_struct_10(_GLF_struct_6(1, mat3x2(1.0)), uvec2(1u), mat2x3(1.0), _GLF_struct_7(mat4x3(1.0), _GLF_IDENTITY(uvec3(1u), (_GLF_IDENTITY(uvec3(1u), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(_GLF_IDENTITY(uvec3(1u), uvec3(0u, _GLF_IDENTITY(0u, ~ (~ (0u))), 0u) ^ (uvec3(1u))), _GLF_IDENTITY((uvec3(1u)) >> uvec3(0u, 0u, 0u), ~ (~ (_GLF_IDENTITY((uvec3(1u)) >> uvec3(0u, 0u, 0u), min((uvec3(1u)) >> uvec3(0u, 0u, 0u), (uvec3(1u)) >> uvec3(0u, 0u, 0u))))))) : _GLF_FUZZED(uvec3(183242u, 21245u, 103741u))))) ^ (uvec3(0u, 0u, _GLF_IDENTITY(0u, min(0u, 0u))) >> _GLF_IDENTITY(uvec3(1u), uvec3(_GLF_IDENTITY(1u, (false ? _GLF_FUZZED(virtual_gid) : 1u)))))), bvec2(true), mat4(_GLF_IDENTITY(1.0, max(1.0, 1.0))), mat4x2(1.0), mat2(1.0)), _GLF_struct_8(_GLF_IDENTITY(uvec2(1u), _GLF_IDENTITY(uvec2(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(1u, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(1u, uint(uint(1u)))), clamp(_GLF_IDENTITY(~ (_GLF_IDENTITY(1u, uint(uint(1u)))), uint(uvec2(_GLF_IDENTITY(~ (_GLF_IDENTITY(1u, uint(uint(1u)))), max(~ (_GLF_IDENTITY(1u, uint(uint(1u)))), ~ (_GLF_IDENTITY(1u, uint(uint(1u)))))), 1u))), ~ (_GLF_IDENTITY(1u, uint(uint(1u)))), ~ (_GLF_IDENTITY(1u, uint(uint(1u))))))))), (uvec2(1u)) >> uvec2(0u, 0u))), clamp(uvec2(_GLF_IDENTITY(uvec2(1u), (uvec2(1u)) >> uvec2(0u, 0u))), uvec2(_GLF_IDENTITY(uvec2(1u), _GLF_IDENTITY((uvec2(1u)), uvec2(uvec2((uvec2(1u))))) >> uvec2(0u, 0u))), uvec2(_GLF_IDENTITY(uvec2(1u), (uvec2(1u)) >> uvec2(0u, 0u)))))), _GLF_IDENTITY(uvec2(_GLF_IDENTITY(uvec4(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(1u, ~ (~ (_GLF_IDENTITY(1u, uint(uint(1u))))))), (uvec2(1u)) >> uvec2(0u, 0u))), clamp(uvec2(_GLF_IDENTITY(uvec2(1u), (uvec2(1u)) >> uvec2(_GLF_IDENTITY(0u, (0u) / 1u), _GLF_IDENTITY(0u, _GLF_IDENTITY(1u * (_GLF_IDENTITY(0u, uint(uvec4(0u, 1u, 0u, 0u)))), min(_GLF_IDENTITY(1u * (_GLF_IDENTITY(0u, uint(uvec4(0u, 1u, 0u, 0u)))), (true ? 1u * (_GLF_IDENTITY(0u, uint(uvec4(0u, 1u, 0u, 0u)))) : _GLF_FUZZED(workgroup_id))), 1u * (_GLF_IDENTITY(0u, uint(uvec4(0u, 1u, 0u, 0u)))))))))), uvec2(_GLF_IDENTITY(uvec2(1u), _GLF_IDENTITY(_GLF_IDENTITY((uvec2(1u)), uvec2(uvec2((uvec2(1u))))) >> uvec2(0u, 0u), (_GLF_IDENTITY(_GLF_IDENTITY((uvec2(1u)), uvec2(uvec2((uvec2(1u))))) >> uvec2(0u, 0u), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((uvec2(1u)), uvec2(uvec2((uvec2(1u))))) >> uvec2(0u, 0u), (_GLF_IDENTITY((uvec2(1u)), uvec2(uvec2((uvec2(1u))))) >> uvec2(0u, 0u)) / uvec2(1u, 1u)), (_GLF_IDENTITY(_GLF_IDENTITY((uvec2(1u)), uvec2(uvec2((uvec2(1u))))) >> uvec2(0u, 0u), (_GLF_IDENTITY((uvec2(1u)), uvec2(uvec2((uvec2(1u))))) >> uvec2(0u, 0u)) / uvec2(1u, 1u))) | uvec2(0u, 0u))) - uvec2(0u, 0u))) >> (uvec2(0u, 0u) >> _GLF_IDENTITY(uvec2(7u), uvec2(7u)))))), uvec2(_GLF_IDENTITY(uvec2(1u), (uvec2(1u)) >> uvec2(0u, 0u)))))), ~ (~ (_GLF_IDENTITY(uvec2(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(1u, _GLF_IDENTITY(~ (~ (_GLF_IDENTITY(1u, uint(uint(1u))))), min(~ (~ (_GLF_IDENTITY(1u, uint(uint(1u))))), ~ (~ (_GLF_IDENTITY(1u, uint(uint(1u))))))))), (uvec2(1u)) >> uvec2(0u, 0u))), clamp(uvec2(_GLF_IDENTITY(uvec2(1u), (uvec2(1u)) >> uvec2(0u, 0u))), uvec2(_GLF_IDENTITY(uvec2(1u), _GLF_IDENTITY((uvec2(_GLF_IDENTITY(1u, clamp(_GLF_IDENTITY(1u, (1u) >> 0u), _GLF_IDENTITY(1u, (1u) - 0u), 1u)))), uvec2(uvec2((uvec2(1u))))) >> uvec2(0u, 0u))), uvec2(_GLF_IDENTITY(uvec2(1u), (uvec2(1u)) >> uvec2(0u, 0u)))))), (uvec2(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(1u, ~ (~ (_GLF_IDENTITY(1u, uint(uint(1u))))))), (uvec2(1u)) >> uvec2(0u, 0u))), clamp(uvec2(_GLF_IDENTITY(uvec2(1u), (uvec2(1u)) >> uvec2(0u, 0u))), uvec2(_GLF_IDENTITY(uvec2(1u), _GLF_IDENTITY(_GLF_IDENTITY((uvec2(1u)), ((uvec2(1u))) - uvec2(0u, 0u)), _GLF_IDENTITY(uvec2(uvec2((uvec2(1u)))), max(uvec2(uvec2((uvec2(1u)))), _GLF_IDENTITY(uvec2(uvec2((uvec2(1u)))), clamp(uvec2(uvec2((uvec2(1u)))), uvec2(uvec2((uvec2(1u)))), uvec2(uvec2((uvec2(1u))))))))) >> uvec2(0u, 0u))), uvec2(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(1u, clamp(_GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, ~ (~ (1u)))) | 0u), 1u, _GLF_IDENTITY(1u, min(1u, 1u))))), (uvec2(1u)) >> uvec2(0u, 0u))))))) | uvec2(0u, 0u))))), 0u, 0u), (_GLF_IDENTITY(uvec4(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(1u, ~ (~ (_GLF_IDENTITY(1u, uint(uint(1u))))))), _GLF_IDENTITY((uvec2(1u)) >> uvec2(0u, 0u), ~ (~ (_GLF_IDENTITY((uvec2(1u)), _GLF_IDENTITY(uvec2(uvec4((uvec2(1u)), uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u)), uvec2(uvec3(_GLF_IDENTITY(uvec2(uvec4((uvec2(1u)), uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u)), clamp(uvec2(uvec4((uvec2(1u)), uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u)), uvec2(uvec4((uvec2(1u)), uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u)), uvec2(uvec4((uvec2(1u)), uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u)))), 1u)))) >> uvec2(0u, 0u)))))), (uvec2(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(1u, ~ (~ (_GLF_IDENTITY(1u, uint(uint(1u))))))), _GLF_IDENTITY((uvec2(1u)) >> uvec2(0u, 0u), ~ (~ (_GLF_IDENTITY((uvec2(1u)), _GLF_IDENTITY(uvec2(uvec4((uvec2(1u)), uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u)), uvec2(uvec3(_GLF_IDENTITY(uvec2(uvec4((uvec2(1u)), uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u)), clamp(uvec2(uvec4((uvec2(1u)), uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u)), uvec2(uvec4((uvec2(1u)), uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u)), uvec2(uvec4((uvec2(1u)), uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u)))), 1u)))) >> uvec2(0u, 0u))))))) | (uvec2(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(1u, ~ (~ (_GLF_IDENTITY(1u, uint(uint(1u))))))), _GLF_IDENTITY((uvec2(1u)) >> uvec2(0u, 0u), ~ (~ (_GLF_IDENTITY((uvec2(1u)), _GLF_IDENTITY(uvec2(uvec4((uvec2(1u)), uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u)), uvec2(uvec3(_GLF_IDENTITY(uvec2(uvec4((uvec2(1u)), uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u)), clamp(uvec2(uvec4((uvec2(1u)), uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u)), uvec2(uvec4((uvec2(1u)), uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u)), uvec2(uvec4((uvec2(1u)), uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u)))), 1u)))) >> uvec2(0u, 0u)))))))), clamp(uvec2(_GLF_IDENTITY(uvec2(1u), (uvec2(1u)) >> uvec2(0u, 0u))), uvec2(_GLF_IDENTITY(uvec2(1u), _GLF_IDENTITY((uvec2(1u)), uvec2(uvec2((uvec2(1u))))) >> uvec2(0u, 0u))), _GLF_IDENTITY(uvec2(_GLF_IDENTITY(uvec2(1u), (uvec2(1u)) >> uvec2(0u, 0u))), max(uvec2(_GLF_IDENTITY(uvec2(1u), (uvec2(1u)) >> uvec2(0u, 0u))), uvec2(_GLF_IDENTITY(uvec2(1u), (uvec2(1u)) >> uvec2(0u, 0u)))))))), ~ (~ (_GLF_IDENTITY(uvec2(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(1u, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(1u, uint(uint(_GLF_IDENTITY(1u, max(_GLF_IDENTITY(1u, 0u ^ (1u)), _GLF_IDENTITY(1u, ~ (~ (1u))))))))), uint(uvec3(~ (_GLF_IDENTITY(1u, uint(uint(_GLF_IDENTITY(1u, max(_GLF_IDENTITY(1u, 0u ^ (1u)), _GLF_IDENTITY(1u, ~ (~ (1u))))))))), 0u, 1u)))))), (uvec2(1u)) >> uvec2(0u, 0u))), clamp(uvec2(_GLF_IDENTITY(uvec2(1u), (uvec2(1u)) >> uvec2(0u, 0u))), uvec2(_GLF_IDENTITY(uvec2(1u), _GLF_IDENTITY((uvec2(1u)), uvec2(uvec2((uvec2(1u))))) >> uvec2(0u, 0u))), uvec2(_GLF_IDENTITY(uvec2(1u), (uvec2(1u)) >> uvec2(0u, 0u)))))), (uvec2(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(1u, ~ (~ (_GLF_IDENTITY(1u, uint(uint(1u))))))), uvec2(0u, 0u) | (uvec2(_GLF_IDENTITY(1u, ~ (~ (_GLF_IDENTITY(1u, uint(uint(1u))))))))), (uvec2(1u)) >> uvec2(0u, 0u))), clamp(uvec2(_GLF_IDENTITY(uvec2(1u), (uvec2(1u)) >> uvec2(0u, 0u))), uvec2(_GLF_IDENTITY(uvec2(1u), _GLF_IDENTITY((uvec2(1u)), uvec2(uvec2((uvec2(1u))))) >> uvec2(0u, 0u))), uvec2(_GLF_IDENTITY(uvec2(1u), (uvec2(1u)) >> uvec2(0u, 0u))))))) | uvec2(0u, 0u))))), 0u, 0u), max(uvec4(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(1u, ~ (~ (_GLF_IDENTITY(1u, uint(uint(1u))))))), _GLF_IDENTITY((uvec2(1u)) >> uvec2(0u, 0u), ~ (~ (_GLF_IDENTITY((uvec2(1u)), _GLF_IDENTITY(uvec2(uvec4((uvec2(1u)), uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u)), uvec2(uvec3(_GLF_IDENTITY(uvec2(uvec4((uvec2(1u)), uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u)), clamp(uvec2(uvec4((uvec2(1u)), uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u)), uvec2(uvec4((uvec2(1u)), uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u)), uvec2(uvec4((uvec2(1u)), uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u)))), 1u)))) >> uvec2(0u, 0u)))))), (uvec2(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(1u, ~ (~ (_GLF_IDENTITY(1u, uint(uint(1u))))))), _GLF_IDENTITY((uvec2(1u)) >> uvec2(0u, 0u), ~ (~ (_GLF_IDENTITY((uvec2(1u)), _GLF_IDENTITY(uvec2(uvec4((uvec2(1u)), uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u)), uvec2(uvec3(_GLF_IDENTITY(uvec2(uvec4((uvec2(1u)), uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u)), clamp(uvec2(uvec4((uvec2(1u)), uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u)), uvec2(uvec4((uvec2(1u)), uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u)), uvec2(uvec4((uvec2(1u)), uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u)))), 1u)))) >> uvec2(0u, 0u))))))) | (uvec2(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(1u, ~ (~ (_GLF_IDENTITY(1u, uint(uint(1u))))))), _GLF_IDENTITY((uvec2(1u)) >> uvec2(0u, 0u), ~ (~ (_GLF_IDENTITY((uvec2(1u)), _GLF_IDENTITY(uvec2(uvec4((uvec2(1u)), uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u)), uvec2(uvec3(_GLF_IDENTITY(uvec2(uvec4((uvec2(1u)), uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u)), clamp(uvec2(uvec4((uvec2(1u)), uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u)), uvec2(uvec4((uvec2(1u)), uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u)), uvec2(uvec4((uvec2(1u)), uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u)))), 1u)))) >> uvec2(0u, 0u)))))))), clamp(uvec2(_GLF_IDENTITY(uvec2(1u), (uvec2(1u)) >> uvec2(0u, 0u))), uvec2(_GLF_IDENTITY(uvec2(1u), _GLF_IDENTITY((uvec2(1u)), uvec2(uvec2((uvec2(1u))))) >> uvec2(0u, 0u))), _GLF_IDENTITY(uvec2(_GLF_IDENTITY(uvec2(1u), (uvec2(1u)) >> uvec2(0u, 0u))), max(uvec2(_GLF_IDENTITY(uvec2(1u), (uvec2(1u)) >> uvec2(0u, 0u))), uvec2(_GLF_IDENTITY(uvec2(1u), (uvec2(1u)) >> uvec2(0u, 0u)))))))), ~ (~ (_GLF_IDENTITY(uvec2(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(1u, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(1u, uint(uint(_GLF_IDENTITY(1u, max(_GLF_IDENTITY(1u, 0u ^ (1u)), _GLF_IDENTITY(1u, ~ (~ (1u))))))))), uint(uvec3(~ (_GLF_IDENTITY(1u, uint(uint(_GLF_IDENTITY(1u, max(_GLF_IDENTITY(1u, 0u ^ (1u)), _GLF_IDENTITY(1u, ~ (~ (1u))))))))), 0u, 1u)))))), (uvec2(1u)) >> uvec2(0u, 0u))), clamp(uvec2(_GLF_IDENTITY(uvec2(1u), (uvec2(1u)) >> uvec2(0u, 0u))), uvec2(_GLF_IDENTITY(uvec2(1u), _GLF_IDENTITY((uvec2(1u)), uvec2(uvec2((uvec2(1u))))) >> uvec2(0u, 0u))), uvec2(_GLF_IDENTITY(uvec2(1u), (uvec2(1u)) >> uvec2(0u, 0u)))))), (uvec2(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(1u, ~ (~ (_GLF_IDENTITY(1u, uint(uint(1u))))))), uvec2(0u, 0u) | (uvec2(_GLF_IDENTITY(1u, ~ (~ (_GLF_IDENTITY(1u, uint(uint(1u))))))))), (uvec2(1u)) >> uvec2(0u, 0u))), clamp(uvec2(_GLF_IDENTITY(uvec2(1u), (uvec2(1u)) >> uvec2(0u, 0u))), uvec2(_GLF_IDENTITY(uvec2(1u), _GLF_IDENTITY((uvec2(1u)), uvec2(uvec2((uvec2(1u))))) >> uvec2(0u, 0u))), uvec2(_GLF_IDENTITY(uvec2(1u), (uvec2(1u)) >> uvec2(0u, 0u))))))) | uvec2(0u, 0u))))), 0u, 0u), uvec4(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(1u, ~ (~ (_GLF_IDENTITY(1u, uint(uint(1u))))))), _GLF_IDENTITY((uvec2(1u)) >> uvec2(0u, 0u), ~ (~ (_GLF_IDENTITY((uvec2(1u)), _GLF_IDENTITY(uvec2(uvec4((uvec2(1u)), uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u)), uvec2(uvec3(_GLF_IDENTITY(uvec2(uvec4((uvec2(1u)), uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u)), clamp(uvec2(uvec4((uvec2(1u)), uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u)), uvec2(uvec4((uvec2(1u)), uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u)), uvec2(uvec4((uvec2(1u)), uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u)))), 1u)))) >> uvec2(0u, 0u)))))), (uvec2(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(1u, ~ (~ (_GLF_IDENTITY(1u, uint(uint(1u))))))), _GLF_IDENTITY((uvec2(1u)) >> uvec2(0u, 0u), ~ (~ (_GLF_IDENTITY((uvec2(1u)), _GLF_IDENTITY(uvec2(uvec4((uvec2(1u)), uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u)), uvec2(uvec3(_GLF_IDENTITY(uvec2(uvec4((uvec2(1u)), uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u)), clamp(uvec2(uvec4((uvec2(1u)), uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u)), uvec2(uvec4((uvec2(1u)), uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u)), uvec2(uvec4((uvec2(1u)), uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u)))), 1u)))) >> uvec2(0u, 0u))))))) | (uvec2(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(1u, ~ (~ (_GLF_IDENTITY(1u, uint(uint(1u))))))), _GLF_IDENTITY((uvec2(1u)) >> uvec2(0u, 0u), ~ (~ (_GLF_IDENTITY((uvec2(1u)), _GLF_IDENTITY(uvec2(uvec4((uvec2(1u)), uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u)), uvec2(uvec3(_GLF_IDENTITY(uvec2(uvec4((uvec2(1u)), uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u)), clamp(uvec2(uvec4((uvec2(1u)), uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u)), uvec2(uvec4((uvec2(1u)), uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u)), uvec2(uvec4((uvec2(1u)), uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u)))), 1u)))) >> uvec2(0u, 0u)))))))), clamp(uvec2(_GLF_IDENTITY(uvec2(1u), (uvec2(1u)) >> uvec2(0u, 0u))), uvec2(_GLF_IDENTITY(uvec2(1u), _GLF_IDENTITY((uvec2(1u)), uvec2(uvec2((uvec2(1u))))) >> uvec2(0u, 0u))), _GLF_IDENTITY(uvec2(_GLF_IDENTITY(uvec2(1u), (uvec2(1u)) >> uvec2(0u, 0u))), max(uvec2(_GLF_IDENTITY(uvec2(1u), (uvec2(1u)) >> uvec2(0u, 0u))), uvec2(_GLF_IDENTITY(uvec2(1u), (uvec2(1u)) >> uvec2(0u, 0u)))))))), ~ (~ (_GLF_IDENTITY(uvec2(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(1u, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(1u, uint(uint(_GLF_IDENTITY(1u, max(_GLF_IDENTITY(1u, 0u ^ (1u)), _GLF_IDENTITY(1u, ~ (~ (1u))))))))), uint(uvec3(~ (_GLF_IDENTITY(1u, uint(uint(_GLF_IDENTITY(1u, max(_GLF_IDENTITY(1u, 0u ^ (1u)), _GLF_IDENTITY(1u, ~ (~ (1u))))))))), 0u, 1u)))))), (uvec2(1u)) >> uvec2(0u, 0u))), clamp(uvec2(_GLF_IDENTITY(uvec2(1u), (uvec2(1u)) >> uvec2(0u, 0u))), uvec2(_GLF_IDENTITY(uvec2(1u), _GLF_IDENTITY((uvec2(1u)), uvec2(uvec2((uvec2(1u))))) >> uvec2(0u, 0u))), uvec2(_GLF_IDENTITY(uvec2(1u), (uvec2(1u)) >> uvec2(0u, 0u)))))), (uvec2(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(1u, ~ (~ (_GLF_IDENTITY(1u, uint(uint(1u))))))), uvec2(0u, 0u) | (uvec2(_GLF_IDENTITY(1u, ~ (~ (_GLF_IDENTITY(1u, uint(uint(1u))))))))), (uvec2(1u)) >> uvec2(0u, 0u))), clamp(uvec2(_GLF_IDENTITY(uvec2(1u), (uvec2(1u)) >> uvec2(0u, 0u))), uvec2(_GLF_IDENTITY(uvec2(1u), _GLF_IDENTITY((uvec2(1u)), uvec2(uvec2((uvec2(1u))))) >> uvec2(0u, 0u))), uvec2(_GLF_IDENTITY(uvec2(1u), (uvec2(1u)) >> uvec2(0u, 0u))))))) | uvec2(0u, 0u))))), 0u, 0u)))) ^ uvec4(0u, 0u, 0u, 0u))), min(uvec2(_GLF_IDENTITY(uvec4(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(1u, ~ (~ (_GLF_IDENTITY(1u, uint(uint(1u))))))), (uvec2(1u)) >> uvec2(0u, 0u))), clamp(uvec2(_GLF_IDENTITY(uvec2(1u), (uvec2(1u)) >> uvec2(0u, 0u))), uvec2(_GLF_IDENTITY(uvec2(1u), _GLF_IDENTITY((_GLF_IDENTITY(uvec2(1u), (uvec2(1u)) / uvec2(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y)))), uvec2(uvec2((uvec2(1u))))) >> _GLF_IDENTITY(uvec2(0u, 0u), uvec2(uvec3(uvec2(0u, 0u), 1u))))), uvec2(_GLF_IDENTITY(_GLF_IDENTITY(uvec2(1u), (uvec2(1u)) >> uvec2(0u, 0u)), uvec2(0u, 0u) | (_GLF_IDENTITY(uvec2(1u), (uvec2(1u)) >> uvec2(0u, 0u)))))))), ~ (~ (_GLF_IDENTITY(uvec2(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(1u, ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1u, (1u) - 0u), (_GLF_IDENTITY(1u, (1u) - 0u)) ^ 0u), uint(uint(1u))))))), (uvec2(1u)) >> uvec2(0u, 0u))), clamp(uvec2(_GLF_IDENTITY(uvec2(1u), (uvec2(1u)) >> uvec2(0u, _GLF_IDENTITY(0u, (0u) / 1u)))), uvec2(_GLF_IDENTITY(uvec2(1u), _GLF_IDENTITY((uvec2(1u)), uvec2(uvec2((uvec2(1u))))) >> uvec2(0u, 0u))), uvec2(_GLF_IDENTITY(uvec2(1u), (_GLF_IDENTITY(uvec2(1u), clamp(uvec2(1u), uvec2(1u), _GLF_IDENTITY(uvec2(1u), (_GLF_IDENTITY(uvec2(1u), clamp(uvec2(1u), uvec2(1u), uvec2(1u)))) >> uvec2(0u, 0u))))) >> uvec2(0u, 0u)))))), (uvec2(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(1u, ~ (~ _GLF_IDENTITY((_GLF_IDENTITY(1u, uint(uint(1u)))), ((_GLF_IDENTITY(1u, uint(uint(1u))))) | (_GLF_IDENTITY((_GLF_IDENTITY(1u, uint(uint(1u)))), uint(uint((_GLF_IDENTITY(1u, uint(uint(1u)))))))))))), _GLF_IDENTITY((uvec2(1u)), (_GLF_IDENTITY((uvec2(1u)), max((uvec2(1u)), _GLF_IDENTITY((uvec2(1u)), clamp((uvec2(1u)), (uvec2(1u)), (uvec2(1u))))))) - uvec2(0u, 0u)) >> uvec2(0u, 0u))), clamp(uvec2(_GLF_IDENTITY(uvec2(1u), (uvec2(1u)) >> uvec2(0u, 0u))), _GLF_IDENTITY(uvec2(_GLF_IDENTITY(uvec2(1u), _GLF_IDENTITY((uvec2(1u)), uvec2(uvec2((uvec2(1u))))) >> uvec2(0u, 0u))), uvec2(1u, 1u) * (uvec2(_GLF_IDENTITY(uvec2(1u), _GLF_IDENTITY((uvec2(1u)), uvec2(uvec2((uvec2(1u))))) >> uvec2(0u, 0u))))), uvec2(_GLF_IDENTITY(uvec2(1u), _GLF_IDENTITY((uvec2(1u)) >> uvec2(0u, 0u), uvec2(0u, 0u) ^ ((uvec2(1u)) >> uvec2(0u, 0u))))))))) | uvec2(0u, 0u))))), 0u, 0u), (_GLF_IDENTITY(uvec4(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(1u, ~ (~ (_GLF_IDENTITY(1u, uint(uint(1u))))))), _GLF_IDENTITY((uvec2(1u)), uvec2(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y)) * ((uvec2(1u)))) >> uvec2(0u, 0u))), _GLF_IDENTITY(clamp(uvec2(_GLF_IDENTITY(uvec2(1u), (uvec2(1u)) >> uvec2(0u, 0u))), uvec2(_GLF_IDENTITY(uvec2(1u), _GLF_IDENTITY((uvec2(1u)), uvec2(uvec2((uvec2(1u))))) >> uvec2(0u, 0u))), uvec2(_GLF_IDENTITY(uvec2(1u), (uvec2(1u)) >> uvec2(0u, 0u)))), (_GLF_IDENTITY(clamp(uvec2(_GLF_IDENTITY(uvec2(1u), (uvec2(1u)) >> uvec2(0u, 0u))), uvec2(_GLF_IDENTITY(uvec2(1u), _GLF_IDENTITY((uvec2(1u)), uvec2(uvec2((uvec2(1u))))) >> uvec2(0u, 0u))), uvec2(_GLF_IDENTITY(uvec2(1u), (uvec2(1u)) >> uvec2(0u, 0u)))), (clamp(uvec2(_GLF_IDENTITY(uvec2(1u), (uvec2(1u)) >> uvec2(0u, 0u))), uvec2(_GLF_IDENTITY(uvec2(1u), _GLF_IDENTITY((uvec2(1u)), uvec2(uvec2((uvec2(1u))))) >> uvec2(0u, 0u))), uvec2(_GLF_IDENTITY(uvec2(1u), (uvec2(1u)) >> uvec2(0u, 0u))))) ^ uvec2(0u, 0u))) / uvec2(1u, 1u)))), ~ (~ (_GLF_IDENTITY(uvec2(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(1u, ~ (~ (_GLF_IDENTITY(1u, uint(uint(1u))))))), (uvec2(1u)) >> uvec2(0u, 0u))), clamp(uvec2(_GLF_IDENTITY(uvec2(1u), (uvec2(1u)) >> uvec2(0u, _GLF_IDENTITY(0u, (0u) * 1u)))), uvec2(_GLF_IDENTITY(uvec2(1u), _GLF_IDENTITY((uvec2(1u)), uvec2(uvec2((uvec2(1u))))) >> uvec2(0u, 0u))), uvec2(_GLF_IDENTITY(uvec2(1u), (uvec2(1u)) >> uvec2(0u, 0u)))))), (uvec2(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(1u, ~ (~ (_GLF_IDENTITY(1u, uint(_GLF_IDENTITY(uint(1u), ~ (~ (uint(1u)))))))))), (uvec2(1u)) >> uvec2(0u, 0u))), clamp(uvec2(_GLF_IDENTITY(uvec2(1u), (_GLF_IDENTITY(uvec2(1u), (uvec2(1u)) | uvec2(0u, 0u))) >> uvec2(0u, 0u))), uvec2(_GLF_IDENTITY(uvec2(1u), _GLF_IDENTITY((uvec2(1u)), uvec2(uvec2((uvec2(1u))))) >> uvec2(0u, 0u))), uvec2(_GLF_IDENTITY(uvec2(1u), (uvec2(1u)) >> uvec2(0u, 0u))))))) | uvec2(0u, 0u))))), 0u, 0u), min(uvec4(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(1u, ~ (~ (_GLF_IDENTITY(1u, uint(_GLF_IDENTITY(uint(1u), (true ? uint(1u) : _GLF_FUZZED(workgroup_id))))))))), (uvec2(1u)) >> uvec2(0u, 0u))), _GLF_IDENTITY(clamp(uvec2(_GLF_IDENTITY(uvec2(1u), (uvec2(1u)) >> uvec2(0u, 0u))), uvec2(_GLF_IDENTITY(uvec2(1u), _GLF_IDENTITY((uvec2(1u)), uvec2(uvec2((uvec2(1u))))) >> uvec2(0u, 0u))), uvec2(_GLF_IDENTITY(uvec2(1u), (uvec2(1u)) >> uvec2(0u, 0u)))), (_GLF_IDENTITY(clamp(uvec2(_GLF_IDENTITY(uvec2(1u), (uvec2(1u)) >> uvec2(0u, 0u))), uvec2(_GLF_IDENTITY(uvec2(1u), _GLF_IDENTITY((uvec2(1u)), uvec2(uvec2((uvec2(1u))))) >> uvec2(0u, 0u))), uvec2(_GLF_IDENTITY(uvec2(1u), (uvec2(1u)) >> uvec2(0u, 0u)))), (clamp(uvec2(_GLF_IDENTITY(uvec2(1u), (uvec2(1u)) >> uvec2(0u, 0u))), uvec2(_GLF_IDENTITY(uvec2(1u), _GLF_IDENTITY((uvec2(1u)), uvec2(uvec2((uvec2(1u))))) >> uvec2(0u, 0u))), uvec2(_GLF_IDENTITY(uvec2(1u), (uvec2(1u)) >> uvec2(0u, 0u))))) ^ uvec2(0u, 0u))) / uvec2(1u, 1u)))), ~ (~ (_GLF_IDENTITY(uvec2(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(1u, ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(1u, uint(uint(1u))), (false ? _GLF_FUZZED(subgroup_size) : _GLF_IDENTITY(1u, uint(uint(1u))))))))), (uvec2(1u)) >> uvec2(0u, 0u))), clamp(uvec2(_GLF_IDENTITY(uvec2(1u), _GLF_IDENTITY((uvec2(1u)), clamp((uvec2(1u)), (uvec2(1u)), _GLF_IDENTITY((uvec2(1u)), uvec2(1u, 1u) * ((uvec2(1u)))))) >> uvec2(0u, _GLF_IDENTITY(0u, (0u) * 1u)))), uvec2(_GLF_IDENTITY(_GLF_IDENTITY(uvec2(1u), (uvec2(1u)) | (uvec2(1u))), _GLF_IDENTITY(_GLF_IDENTITY((uvec2(1u)), uvec2(uvec2((uvec2(1u))))), (_GLF_IDENTITY((uvec2(1u)), uvec2(uvec2((uvec2(1u)))))) >> uvec2(0u, 0u)) >> uvec2(0u, 0u))), uvec2(_GLF_IDENTITY(uvec2(1u), (uvec2(1u)) >> uvec2(0u, 0u)))))), (uvec2(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(1u, ~ (~ (_GLF_IDENTITY(1u, uint(_GLF_IDENTITY(uint(1u), ~ (~ (uint(1u)))))))))), (uvec2(1u)) >> uvec2(0u, 0u))), clamp(uvec2(_GLF_IDENTITY(uvec2(1u), (_GLF_IDENTITY(uvec2(1u), (uvec2(1u)) | uvec2(0u, 0u))) >> uvec2(0u, 0u))), uvec2(_GLF_IDENTITY(uvec2(1u), _GLF_IDENTITY((uvec2(1u)), uvec2(uvec2((uvec2(_GLF_IDENTITY(1u, uint(uvec2(1u, 1u)))))))) >> uvec2(0u, 0u))), uvec2(_GLF_IDENTITY(uvec2(1u), (uvec2(1u)) >> uvec2(0u, 0u))))))) | uvec2(0u, 0u))))), 0u, 0u), uvec4(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(1u, ~ (~ (_GLF_IDENTITY(1u, uint(uint(1u))))))), (uvec2(1u)) >> uvec2(0u, 0u))), _GLF_IDENTITY(clamp(uvec2(_GLF_IDENTITY(uvec2(1u), (uvec2(1u)) >> uvec2(0u, 0u))), uvec2(_GLF_IDENTITY(uvec2(1u), _GLF_IDENTITY((uvec2(1u)), uvec2(uvec2((uvec2(1u))))) >> uvec2(0u, 0u))), uvec2(_GLF_IDENTITY(uvec2(1u), (uvec2(1u)) >> uvec2(0u, 0u)))), (_GLF_IDENTITY(clamp(uvec2(_GLF_IDENTITY(uvec2(1u), (uvec2(1u)) >> uvec2(0u, 0u))), uvec2(_GLF_IDENTITY(uvec2(1u), _GLF_IDENTITY((uvec2(1u)), uvec2(uvec2((uvec2(1u))))) >> uvec2(0u, 0u))), uvec2(_GLF_IDENTITY(uvec2(1u), (uvec2(1u)) >> uvec2(0u, 0u)))), (clamp(uvec2(_GLF_IDENTITY(uvec2(1u), (uvec2(1u)) >> uvec2(0u, 0u))), uvec2(_GLF_IDENTITY(uvec2(1u), _GLF_IDENTITY((uvec2(1u)), uvec2(uvec2((uvec2(1u))))) >> uvec2(0u, 0u))), uvec2(_GLF_IDENTITY(uvec2(1u), (uvec2(1u)) >> uvec2(_GLF_IDENTITY(0u, (0u) | 0u), 0u))))) ^ uvec2(0u, 0u))) / uvec2(1u, 1u)))), ~ (~ (_GLF_IDENTITY(uvec2(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(1u, _GLF_IDENTITY(~ (~ (_GLF_IDENTITY(1u, uint(uint(1u))))), (~ (~ (_GLF_IDENTITY(1u, uint(uint(1u)))))) | (~ (~ (_GLF_IDENTITY(1u, uint(uint(1u))))))))), (uvec2(1u)) >> uvec2(0u, 0u))), clamp(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(1u, ~ (~ (_GLF_IDENTITY(1u, (true ? 1u : _GLF_FUZZED(subgroup_id))))))), (uvec2(1u)) >> uvec2(0u, _GLF_IDENTITY(0u, (0u) * 1u)))), uvec2(0u, 0u) ^ (uvec2(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(1u, ~ (~ (_GLF_IDENTITY(1u, (true ? 1u : _GLF_FUZZED(subgroup_id))))))), (uvec2(1u)) >> uvec2(0u, _GLF_IDENTITY(0u, (0u) * 1u)))))), uvec2(_GLF_IDENTITY(uvec2(1u), _GLF_IDENTITY((uvec2(1u)), uvec2(uvec2((uvec2(1u))))) >> uvec2(0u, 0u))), uvec2(_GLF_IDENTITY(uvec2(1u), (uvec2(1u)) >> uvec2(0u, 0u)))))), (uvec2(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(1u, ~ (~ (_GLF_IDENTITY(1u, uint(_GLF_IDENTITY(uint(1u), ~ (~ (uint(1u)))))))))), (uvec2(1u)) >> uvec2(0u, 0u))), clamp(uvec2(_GLF_IDENTITY(uvec2(1u), (_GLF_IDENTITY(uvec2(1u), (uvec2(1u)) | uvec2(0u, 0u))) >> uvec2(0u, 0u))), uvec2(_GLF_IDENTITY(uvec2(1u), _GLF_IDENTITY((uvec2(1u)), uvec2(uvec2((uvec2(1u))))) >> uvec2(0u, 0u))), uvec2(_GLF_IDENTITY(uvec2(1u), (uvec2(1u)) >> uvec2(0u, 0u))))))) | uvec2(0u, 0u))))), 0u, 0u)))) ^ uvec4(0u, 0u, 0u, 0u))), uvec2(_GLF_IDENTITY(uvec4(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(1u, ~ (~ (_GLF_IDENTITY(1u, uint(uint(1u))))))), (uvec2(1u)) >> uvec2(0u, 0u))), clamp(uvec2(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uvec2(1u), (uvec2(1u)) >> uvec2(0u, 0u)), (false ? _GLF_FUZZED((uvec2(14621u, 96101u) & max(uvec2(185522u, 199340u), uvec2(176355u, 29405u)))) : _GLF_IDENTITY(uvec2(1u), (uvec2(1u)) >> uvec2(0u, 0u)))), min(_GLF_IDENTITY(uvec2(1u), (uvec2(1u)) >> uvec2(0u, 0u)), _GLF_IDENTITY(uvec2(1u), (uvec2(1u)) >> uvec2(0u, 0u))))), uvec2(_GLF_IDENTITY(uvec2(1u), _GLF_IDENTITY((uvec2(1u)), uvec2(uvec2((uvec2(1u))))) >> uvec2(0u, 0u))), uvec2(_GLF_IDENTITY(uvec2(1u), (_GLF_IDENTITY(uvec2(1u), uvec2(uvec4(_GLF_IDENTITY(uvec2(1u), max(uvec2(1u), uvec2(1u))), 0u, 1u)))) >> uvec2(0u, 0u)))))), ~ (~ (_GLF_IDENTITY(uvec2(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(1u, ~ (~ (_GLF_IDENTITY(1u, uint(uint(_GLF_IDENTITY(1u, (1u) + 0u)))))))), (uvec2(1u)) >> uvec2(0u, 0u))), clamp(uvec2(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(1u, max(1u, 1u))), (uvec2(1u)) >> uvec2(0u, 0u))), uvec2(_GLF_IDENTITY(uvec2(1u), _GLF_IDENTITY((uvec2(1u)), uvec2(uvec2((uvec2(1u))))) >> uvec2(0u, 0u))), uvec2(_GLF_IDENTITY(uvec2(1u), (_GLF_IDENTITY(uvec2(1u), min(_GLF_IDENTITY(uvec2(1u), ~ (~ (uvec2(1u)))), uvec2(1u)))) >> uvec2(0u, 0u)))))), (uvec2(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(1u, ~ (~ (_GLF_IDENTITY(1u, uint(uint(1u))))))), (uvec2(1u)) >> uvec2(0u, 0u))), clamp(uvec2(_GLF_IDENTITY(uvec2(1u), (uvec2(1u)) >> uvec2(0u, 0u))), uvec2(_GLF_IDENTITY(uvec2(1u), _GLF_IDENTITY((uvec2(1u)), uvec2(uvec2(_GLF_IDENTITY((uvec2(1u)), uvec2(0u, 0u) | (_GLF_IDENTITY((uvec2(1u)), ((uvec2(1u))) << uvec2(0u, 0u))))))) >> uvec2(0u, 0u))), uvec2(_GLF_IDENTITY(uvec2(1u), (uvec2(1u)) >> uvec2(0u, 0u))))))) | uvec2(0u, 0u))))), 0u, 0u), (uvec4(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(1u, ~ (~ (_GLF_IDENTITY(1u, uint(uint(1u))))))), (uvec2(1u)) >> uvec2(0u, 0u))), clamp(uvec2(_GLF_IDENTITY(uvec2(1u), (uvec2(1u)) >> uvec2(0u, 0u))), uvec2(_GLF_IDENTITY(uvec2(1u), _GLF_IDENTITY((uvec2(1u)), uvec2(uvec2((uvec2(1u))))) >> uvec2(0u, 0u))), uvec2(_GLF_IDENTITY(uvec2(1u), _GLF_IDENTITY((uvec2(1u)) >> uvec2(0u, 0u), ((uvec2(1u)) >> uvec2(0u, 0u)) / uvec2(1u, 1u))))))), ~ (~ (_GLF_IDENTITY(uvec2(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(1u, ~ (~ (_GLF_IDENTITY(1u, uint(uint(1u))))))), (uvec2(1u)) >> uvec2(0u, 0u))), clamp(uvec2(_GLF_IDENTITY(uvec2(1u), (uvec2(1u)) >> uvec2(0u, 0u))), uvec2(_GLF_IDENTITY(uvec2(1u), _GLF_IDENTITY((uvec2(1u)), uvec2(uvec2((uvec2(1u))))) >> uvec2(0u, 0u))), _GLF_IDENTITY(uvec2(_GLF_IDENTITY(uvec2(1u), (uvec2(1u)) >> uvec2(0u, 0u))), uvec2(0u, 0u) | (uvec2(_GLF_IDENTITY(uvec2(1u), (uvec2(1u)) >> uvec2(0u, 0u)))))))), (uvec2(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(1u, ~ (~ (_GLF_IDENTITY(1u, uint(uint(1u))))))), (uvec2(1u)) >> uvec2(0u, 0u))), clamp(uvec2(_GLF_IDENTITY(uvec2(1u), (uvec2(1u)) >> uvec2(0u, 0u))), uvec2(_GLF_IDENTITY(uvec2(1u), _GLF_IDENTITY((uvec2(_GLF_IDENTITY(1u, (1u) | 0u))), uvec2(uvec2((uvec2(1u))))) >> uvec2(0u, 0u))), uvec2(_GLF_IDENTITY(uvec2(1u), (uvec2(1u)) >> uvec2(0u, _GLF_IDENTITY(0u, (0u) - 0u)))))))) | uvec2(0u, 0u))))), 0u, 0u)) ^ uvec4(0u, 0u, 0u, 0u))))))), mat2x3(1.0), uvec4(1u)), 1.0, _GLF_struct_9(_GLF_IDENTITY(vec2(1.0), clamp(_GLF_IDENTITY(vec2(1.0), max(_GLF_IDENTITY(vec2(1.0), max(vec2(1.0), vec2(1.0))), vec2(1.0))), _GLF_IDENTITY(vec2(1.0), min(vec2(1.0), vec2(1.0))), vec2(1.0))), vec2(1.0), _GLF_IDENTITY(_GLF_IDENTITY(true, bool(bvec3(true, false, true))), false || (true)), true)), mat4x3(1.0), 1u, ivec2(1));
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
  {
   for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     return;
    }
  }
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
  {
   do
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, false || (true))))
        {
         do
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           do
            {
             _GLF_IDENTITY(buf[virtual_gid] = 1, (buf[virtual_gid] = 1) ^ 0u);
            }
           while(_GLF_WRAPPED_LOOP(false));
           if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
            continue;
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       else
        {
        }
      }
     else
      {
       if(_GLF_DEAD(false))
        continue;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       do
        {
         return;
         do
          {
           if(_GLF_DEAD(false))
            return;
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     do
      {
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y))))), ! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y))))), bool(bvec4(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y))))), false, true, false)))))))
        {
         do
          {
           do
            {
             if(_GLF_DEAD(false))
              return;
             return;
            }
           while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), bool(bool(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), bool(_GLF_IDENTITY(bvec2(_GLF_WRAPPED_LOOP(false), false), bvec2(bvec4(bvec2(_GLF_WRAPPED_LOOP(false), false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)))))))));
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             return;
             if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch)[1], max((injectionSwitch)[1], (injectionSwitch)[1]))), vec2(_GLF_FUZZED((-48.70 + 8.1)), _GLF_FUZZED(-19.31)), bvec2(false, false))).x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y))))
              continue;
            }
           else
            {
            }
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch), (mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch)) * mat2(1.0))).x > injectionSwitch.y))))
      break;
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 for(int _injected_loop_counter = _GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), int(_GLF_IDENTITY(ivec4(int(_GLF_ONE(1.0, injectionSwitch.y)), 1, int(_GLF_ONE(1.0, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(-0.0, -94.31)))), (_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(-0.0, -94.31))))) + vec2(0.0, 0.0)).y, (_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(-0.0, -94.31)))).y) / 1.0))), 1), (ivec4(int(_GLF_ONE(1.0, injectionSwitch.y)), 1, int(_GLF_ONE(1.0, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(-0.0, -94.31)))), (_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(-0.0, -94.31))))) + vec2(0.0, 0.0)).y, (_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(-0.0, -94.31)))).y) / 1.0))), 1)) >> ivec4(0, 0, 0, 0)))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    break;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           return;
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          continue;
         break;
        }
      }
     else
      {
      }
    }
  }
 for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    continue;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       return;
      }
    }
   do
    {
     return;
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
 do
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_DEAD(false), true, true))))
    continue;
   if(_GLF_DEAD(false))
    return;
   if(subgroup_local_id + 1 < subgroup_size)
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        break;
       return;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (_GLF_IDENTITY(0 >> _GLF_IDENTITY(int(6), int(6)), (_GLF_IDENTITY(0, (_GLF_IDENTITY(true ? 0 : _GLF_FUZZED(_injected_loop_counter), int(ivec2(true ? 0 : _GLF_FUZZED(_injected_loop_counter), (0 | 0)))))) >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(_GLF_IDENTITY(6, (6) - 0)), min(int(6), int(6))))) - 0))); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        break;
       do
        {
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
            continue;
           do
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               do
                {
                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (((1 & 1) << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6)))); _injected_loop_counter ++)
                  {
                   return;
                  }
                }
               while(_GLF_WRAPPED_LOOP(false));
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_DEAD(false))
                  break;
                 return;
                }
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         for(int _injected_loop_counter = (_GLF_IDENTITY(0, (0) | (0)) ^ _GLF_IDENTITY(0, 0 ^ (0))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((_GLF_IDENTITY(false, (false) && true)) || false, ! (! ((_GLF_IDENTITY(false, (false) && true)) || false))))))
              return;
            }
           else
            {
             for(int _injected_loop_counter = ((0 >> _GLF_IDENTITY(int(6), int(6))) | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 atomicStore(buf[_GLF_struct_replacement_11._f0._f3.next_virtual_gid], uint(2), _GLF_IDENTITY(4, 0 | (_GLF_IDENTITY(4, (_GLF_IDENTITY(4, 0 | (4))) | (4)))), 64, 4);
                }
               else
                {
                 if(_GLF_DEAD(false))
                  return;
                }
              }
             if(_GLF_DEAD(false))
              break;
            }
           if(_GLF_DEAD(false))
            break;
           if(_GLF_DEAD(false))
            return;
          }
        }
       else
        {
        }
      }
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 ^ 0)); _injected_loop_counter ++)
      {
       for(int _injected_loop_counter = (1 & int(_GLF_ONE(_GLF_IDENTITY(1.0, sin(0.0) + (1.0)), injectionSwitch.y))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY((false) || false, true && ((false) || false))), (injectionSwitch.x > injectionSwitch.y))))
            return;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
          }
        }
      }
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 | 0)); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        {
         do
          {
           return;
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              continue;
             return;
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
     subgroupAll(false);
    }
   else
    {
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       do
        {
         return;
         if(_GLF_DEAD(false))
          break;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      continue;
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       atomicStore(buf[_GLF_struct_replacement_11._f0._f3.next_virtual_gid], uint(2), 4, 64, 4);
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      break;
     if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + _GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(reflect(-2136.2593, 126.649))))) > injectionSwitch.y), ! (! ((_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + _GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(reflect(-2136.2593, 126.649))))) > injectionSwitch.y)))), ! (! (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + 0.0) > injectionSwitch.y), bool(bvec2(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + 0.0) > _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(cosh(0.8)) : injectionSwitch.y)), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + 0.0) > _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(cosh(0.8)) : injectionSwitch.y)), ! (! (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + 0.0) > _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(cosh(_GLF_IDENTITY(0.8, clamp(_GLF_IDENTITY(0.8, clamp(0.8, 0.8, 0.8)), 0.8, 0.8)))) : injectionSwitch.y)))))) || false)), bool(bvec4((_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY((injectionSwitch.x) + 0.0, mix(float(_GLF_FUZZED(-5.2)), float(_GLF_IDENTITY((injectionSwitch.x) + 0.0, ((injectionSwitch.x) + 0.0) / 1.0)), bool(true)))) > injectionSwitch.y), true, true, false))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
       do
        {
         do
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             barrier();
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
       if(_GLF_DEAD(false))
        break;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y))))))
        continue;
       return;
       if(_GLF_DEAD(false))
        continue;
      }
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, (1) >> 0)); _injected_loop_counter ++)
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             return;
            }
          }
        }
       if(_GLF_DEAD(false))
        break;
      }
     do
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (_GLF_IDENTITY(1 | 1, (1 | 1) | (1 | 1)))); _injected_loop_counter ++)
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              continue;
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               return;
              }
            }
          }
         else
          {
           subgroupAll(true);
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     do
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = _GLF_IDENTITY(1, min(1, _GLF_IDENTITY(1, min(1, 1)))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
            {
             return;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
            }
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, false || (false))));
     do
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         do
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              break;
             if(_GLF_DEAD(false))
              {
               if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), _GLF_IDENTITY(bool(bool(_GLF_WRAPPED_IF_FALSE(false))), bool(_GLF_IDENTITY(bvec2(bool(bool(_GLF_WRAPPED_IF_FALSE(false))), true), _GLF_IDENTITY(_GLF_IDENTITY(bvec2(bvec2(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(bool(bool(_GLF_WRAPPED_IF_FALSE(false))), false || (bool(bool(_GLF_WRAPPED_IF_FALSE(false))))), bool(bool(_GLF_IDENTITY(bool(bool(_GLF_WRAPPED_IF_FALSE(false))), false || (bool(_GLF_IDENTITY(bool(_GLF_WRAPPED_IF_FALSE(false)), (bool(_GLF_WRAPPED_IF_FALSE(false))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))), true))), bvec2(bvec4(bvec2(bvec2(bvec2(bool(bool(_GLF_WRAPPED_IF_FALSE(false))), true))), false, true))), _GLF_IDENTITY(bvec2(bvec3(_GLF_IDENTITY(bvec2(bvec2(bvec2(bool(bool(_GLF_WRAPPED_IF_FALSE(false))), true))), bvec2(bvec4(bvec2(bvec2(bvec2(bool(bool(_GLF_WRAPPED_IF_FALSE(false))), true))), false, true))), false)), bvec2(bvec4(bvec2(bvec3(_GLF_IDENTITY(bvec2(bvec2(bvec2(bool(bool(_GLF_WRAPPED_IF_FALSE(false))), true))), bvec2(bvec4(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec2(bvec2(bool(bool(_GLF_WRAPPED_IF_FALSE(false))), true)), bvec2(bvec4(bvec2(bvec2(bool(bool(_GLF_WRAPPED_IF_FALSE(false))), true)), true, true)))), bvec2(bvec2(bvec2(_GLF_IDENTITY(bvec2(bvec2(bool(bool(_GLF_WRAPPED_IF_FALSE(false))), true)), bvec2(bvec4(bvec2(bvec2(bool(bool(_GLF_WRAPPED_IF_FALSE(false))), true)), true, true))))))), false, true))), _GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, bool(bvec4(false, true, true, false))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))))), false, true)))))))))
                {
                }
               else
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
                  continue;
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  return;
                 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
                  {
                   barrier();
                  }
                }
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  continue;
                 continue;
                }
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  break;
                 continue;
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  return;
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                continue;
              }
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 >> _GLF_IDENTITY(int(5), int(5)))); _injected_loop_counter --)
                  {
                   if(_GLF_DEAD(false))
                    return;
                  }
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  return;
                 return;
                }
               else
                {
                }
              }
             if(_GLF_DEAD(false))
              continue;
            }
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_DEAD(false))
            break;
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              return;
             return;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              break;
            }
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              continue;
             if(_GLF_DEAD(false))
              return;
            }
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               for(int _injected_loop_counter = (0 | (0 >> _GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, clamp(1, 1, 1))) ^ (int(_GLF_ZERO(0.0, injectionSwitch.x)) << _GLF_IDENTITY(int(3), int(3)))), 0 | (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, clamp(1, 1, 1))) ^ (int(_GLF_ZERO(0.0, injectionSwitch.x)) << _GLF_IDENTITY(int(3), int(3))))))), _GLF_IDENTITY(int(1), (int(1)) - 0)))); _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 ^ 0)); _injected_loop_counter ++)
                {
                 do
                  {
                   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (false)))))
                    {
                     if(_GLF_DEAD(false))
                      continue;
                    }
                   else
                    {
                     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) || false), (_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)))), _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)))).x > injectionSwitch.y))))
                      {
                       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                        {
                         return;
                        }
                      }
                     if(_GLF_DEAD(false))
                      return;
                    }
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                }
              }
             else
              {
              }
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        }
       else
        {
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))));
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
