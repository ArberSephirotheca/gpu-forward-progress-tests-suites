#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(false))
  return;
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(false))
  return;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, true && (true))))
  {
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
  }
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), (_GLF_IDENTITY(false, (false) || false)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
  }
 else
  {
  }
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, _GLF_ZERO(_GLF_IDENTITY(0.0, (0.0) - 0.0), injectionSwitch.x) + (injectionSwitch.y))) * 1.0)))))
    return;
   if(_GLF_DEAD(false))
    return;
   return;
  }
 uint workgroup_base = _GLF_IDENTITY(workgroup_size * workgroup_id, (_GLF_IDENTITY(workgroup_size, (workgroup_size) ^ _GLF_IDENTITY((0u ^ 0u), ((0u ^ 0u)) << 0u)) * workgroup_id) >> 0u);
 uint virtual_gid = _GLF_IDENTITY(workgroup_base, (workgroup_base) ^ 0u) + _GLF_IDENTITY(subgroup_id * subgroup_size, max(_GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) + 0u), _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id * subgroup_size, _GLF_IDENTITY(min(_GLF_IDENTITY(subgroup_id * subgroup_size, (true ? subgroup_id * subgroup_size : _GLF_FUZZED(subgroup_local_id))), subgroup_id * subgroup_size), (_GLF_IDENTITY(min(_GLF_IDENTITY(subgroup_id * subgroup_size, (true ? subgroup_id * subgroup_size : _GLF_FUZZED(subgroup_local_id))), subgroup_id * subgroup_size), (min(_GLF_IDENTITY(subgroup_id * subgroup_size, (true ? subgroup_id * subgroup_size : _GLF_FUZZED(subgroup_local_id))), subgroup_id * subgroup_size)) ^ 0u)) * 1u)), (_GLF_IDENTITY(subgroup_id * subgroup_size, min(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id * subgroup_size, ~ (~ (subgroup_id * _GLF_IDENTITY(subgroup_size, max(_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size)), subgroup_size))))), _GLF_IDENTITY((true ? _GLF_IDENTITY(subgroup_id, (_GLF_IDENTITY(subgroup_id, (true ? subgroup_id : _GLF_FUZZED(workgroup_id)))) / 1u) * _GLF_IDENTITY(subgroup_size, max(subgroup_size, subgroup_size)) : _GLF_FUZZED(subgroup_local_id)), ((true ? subgroup_id * subgroup_size : _GLF_FUZZED(subgroup_local_id))) | ((true ? subgroup_id * subgroup_size : _GLF_FUZZED(subgroup_local_id))))), subgroup_id * subgroup_size))) | _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id * subgroup_size, _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec2(subgroup_id * _GLF_IDENTITY(subgroup_size, 0u ^ (subgroup_size)), _GLF_IDENTITY(0u, (true ? 0u : _GLF_FUZZED((subgroup_id / subgroup_local_id))))), ~ (~ (uvec2(subgroup_id * subgroup_size, 0u))))), _GLF_IDENTITY(~ (~ (_GLF_IDENTITY(uint(_GLF_IDENTITY(uvec2(subgroup_id * subgroup_size, 0u), ~ (~ (uvec2(subgroup_id * _GLF_IDENTITY(subgroup_size, 0u ^ (subgroup_size)), 0u))))), ~ (_GLF_IDENTITY(~ (uint(_GLF_IDENTITY(uvec2(subgroup_id * subgroup_size, 0u), ~ (~ (uvec2(subgroup_id * subgroup_size, 0u)))))), (~ (uint(_GLF_IDENTITY(uvec2(subgroup_id * subgroup_size, 0u), ~ (~ (uvec2(subgroup_id * subgroup_size, 0u))))))) | (~ (uint(_GLF_IDENTITY(uvec2(subgroup_id * subgroup_size, 0u), ~ (~ (uvec2(subgroup_id * subgroup_size, 0u)))))))))))), 0u | (~ (~ (uint(_GLF_IDENTITY(_GLF_IDENTITY(uvec2(subgroup_id * subgroup_size, 0u), uvec2(1u, 1u) * (_GLF_IDENTITY(uvec2(subgroup_id * subgroup_size, 0u), (uvec2(subgroup_id * subgroup_size, 0u)) ^ (uvec2(1u, 1u) ^ uvec2(1u, 1u))))), ~ (~ _GLF_IDENTITY((uvec2(subgroup_id * subgroup_size, 0u)), clamp((uvec2(subgroup_id * subgroup_size, 0u)), (uvec2(subgroup_id * subgroup_size, 0u)), (uvec2(subgroup_id * subgroup_size, 0u))))))))))))), min(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, clamp(_GLF_IDENTITY(subgroup_id, clamp(_GLF_IDENTITY(subgroup_id, (true ? subgroup_id : _GLF_FUZZED(workgroup_id))), subgroup_id, subgroup_id)), subgroup_id, subgroup_id)) * subgroup_size, (true ? subgroup_id * subgroup_size : _GLF_FUZZED(subgroup_local_id))), subgroup_id * subgroup_size))), ((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id * subgroup_size, _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec2(subgroup_id * subgroup_size, 0u), ~ (~ (uvec2(subgroup_id * subgroup_size, 0u))))), ~ (~ (uint(_GLF_IDENTITY(uvec2(subgroup_id * _GLF_IDENTITY(subgroup_size, (subgroup_size) / 1u), 0u), ~ (~ (uvec2(subgroup_id * subgroup_size, 0u))))))))), min(_GLF_IDENTITY(subgroup_id * subgroup_size, (_GLF_IDENTITY(_GLF_IDENTITY(true, (true) && true), ! (! (true))) ? subgroup_id * subgroup_size : _GLF_IDENTITY(_GLF_FUZZED(subgroup_local_id), ~ (~ (_GLF_IDENTITY(_GLF_FUZZED(subgroup_local_id), clamp(_GLF_FUZZED(subgroup_local_id), _GLF_FUZZED(subgroup_local_id), _GLF_FUZZED(subgroup_local_id)))))))), subgroup_id * subgroup_size)))) * 1u)))) + subgroup_local_id;
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))), ! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_IDENTITY(false, false || (false)))), ! (! (! (_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))))))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(false))
        return;
      }
     else
      {
       return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
      return;
     if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
      return;
     return;
    }
   if(_GLF_DEAD(false))
    return;
   return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, bool(bvec3(false, true, false)))))))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       return;
      }
    }
   do
    {
     return;
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))));
  }
 uint next_virtual_gid = _GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, (_GLF_IDENTITY(workgroup_base, (_GLF_IDENTITY(workgroup_base, (true ? _GLF_IDENTITY(workgroup_base, (_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0), min(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-910.520)), _GLF_IDENTITY(float(injectionSwitch.x), mix(float(_GLF_FUZZED(99.34)), float(float(injectionSwitch.x)), bool(true))), bool(true))), injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x)), injectionSwitch.x)) < injectionSwitch.y)) ? _GLF_IDENTITY(workgroup_base, 0u + (workgroup_base)) : _GLF_FUZZED(num_workgroup))) : _GLF_FUZZED(workgroup_id)))) | (workgroup_base)) + subgroup_id * subgroup_size) / _GLF_IDENTITY(_GLF_IDENTITY(1u, ~ (_GLF_IDENTITY(~ (1u), (true ? ~ _GLF_IDENTITY((1u), ((1u)) - 0u) : _GLF_FUZZED(num_workgroup))))), clamp(_GLF_IDENTITY(1u, ~ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(~ (1u), (true ? ~ (1u) : _GLF_FUZZED(num_workgroup))), uint(_GLF_IDENTITY(uvec3(_GLF_IDENTITY(_GLF_IDENTITY(~ (1u), (true ? ~ (1u) : _GLF_FUZZED(num_workgroup))), (_GLF_IDENTITY(~ (1u), (true ? ~ (1u) : _GLF_FUZZED(num_workgroup)))) << 0u), 0u, 1u), clamp(uvec3(_GLF_IDENTITY(_GLF_IDENTITY(~ (1u), (true ? ~ (1u) : _GLF_FUZZED(num_workgroup))), (_GLF_IDENTITY(~ (1u), (true ? ~ (1u) : _GLF_FUZZED(num_workgroup)))) << 0u), 0u, 1u), uvec3(_GLF_IDENTITY(_GLF_IDENTITY(~ (1u), (true ? ~ (1u) : _GLF_FUZZED(num_workgroup))), (_GLF_IDENTITY(~ (1u), (true ? ~ (1u) : _GLF_FUZZED(num_workgroup)))) << 0u), 0u, 1u), uvec3(_GLF_IDENTITY(_GLF_IDENTITY(~ (1u), (true ? ~ (1u) : _GLF_FUZZED(num_workgroup))), (_GLF_IDENTITY(~ (1u), (true ? ~ (1u) : _GLF_FUZZED(num_workgroup)))) << 0u), 0u, 1u))))), min(_GLF_IDENTITY(_GLF_IDENTITY(~ (1u), (true ? _GLF_IDENTITY(~ (1u), max(~ (1u), _GLF_IDENTITY(~ (1u), (~ (1u)) - 0u))) : _GLF_FUZZED(subgroup_id))), (_GLF_IDENTITY(true, (true) || false) ? ~ (1u) : _GLF_FUZZED(num_workgroup))), _GLF_IDENTITY(_GLF_IDENTITY(~ (_GLF_IDENTITY(1u, max(1u, 1u))), (true ? ~ (1u) : _GLF_FUZZED(_GLF_IDENTITY(num_workgroup, _GLF_IDENTITY((num_workgroup) | 0u, ((num_workgroup) | 0u) | 0u))))), uint(uvec2(_GLF_IDENTITY(~ (1u), (true ? ~ (1u) : _GLF_FUZZED(num_workgroup))), 1u))))))), _GLF_IDENTITY(1u, ~ (_GLF_IDENTITY(~ (1u), (true ? ~ (1u) : _GLF_FUZZED(num_workgroup))))), _GLF_IDENTITY(1u, ~ (_GLF_IDENTITY(~ (1u), (true ? ~ (1u) : _GLF_FUZZED(num_workgroup)))))))) + ((subgroup_local_id + _GLF_IDENTITY(1, min(1, 1))) % _GLF_IDENTITY(subgroup_size, 0u ^ _GLF_IDENTITY((_GLF_IDENTITY(subgroup_size, ~ (~ (subgroup_size)))), ~ (_GLF_IDENTITY(~ ((_GLF_IDENTITY(subgroup_size, ~ (~ (subgroup_size))))), _GLF_IDENTITY(uint(uvec2(~ ((_GLF_IDENTITY(subgroup_size, ~ (~ (subgroup_size))))), uint(_GLF_ZERO(0.0, injectionSwitch.x)))), uint(uint(uint(uvec2(~ ((_GLF_IDENTITY(subgroup_size, ~ (~ (subgroup_size))))), uint(_GLF_ZERO(0.0, injectionSwitch.x))))))))))));
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(_GLF_IDENTITY(mix(float(_GLF_FUZZED(7.6)), float(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(float(true))), vec2(_GLF_FUZZED(-581.763), (injectionSwitch)[1]), bvec2(_GLF_IDENTITY(false, (false) || false), true))).x), bool(true)), min(mix(float(_GLF_FUZZED(7.6)), float(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(float(true))), vec2(_GLF_FUZZED(-581.763), (injectionSwitch)[1]), bvec2(_GLF_IDENTITY(false, (false) || false), true))).x), bool(true)), mix(float(_GLF_FUZZED(7.6)), float(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(float(true))), vec2(_GLF_FUZZED(-581.763), (injectionSwitch)[1]), bvec2(_GLF_IDENTITY(false, (false) || false), true))).x), bool(true)))), _GLF_ONE(1.0, injectionSwitch.y) * (_GLF_IDENTITY(mix(float(_GLF_FUZZED(7.6)), float(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_IDENTITY((injectionSwitch), mix(vec2(_GLF_FUZZED(3.9), ((injectionSwitch))[1]), vec2(_GLF_IDENTITY(((injectionSwitch))[0], float(mat3x2(((injectionSwitch))[0], 1.0, 0.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0))), _GLF_FUZZED(-930.819)), bvec2(true, false)))[0], _GLF_FUZZED(float(true))), vec2(_GLF_FUZZED(-581.763), _GLF_IDENTITY((injectionSwitch)[1], mix(float(_GLF_FUZZED(-2967.3900)), float((injectionSwitch)[1]), bool(true)))), bvec2(_GLF_IDENTITY(false, (false) || false), true))).x), bool(true)), min(mix(float(_GLF_FUZZED(7.6)), float(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), mix(vec2(_GLF_IDENTITY((injectionSwitch), mix(vec2(((injectionSwitch))[0], ((injectionSwitch))[1]), vec2(_GLF_FUZZED(-4.9), _GLF_FUZZED(-204.357)), bvec2(false, false)))[_GLF_IDENTITY(0, clamp(0, 0, 0))], _GLF_FUZZED(float(true))), vec2(_GLF_FUZZED(-581.763), (injectionSwitch)[1]), bvec2(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, true, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false || (bool(bvec4(false, true, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))) || false), true))).x), bool(true)), mix(float(_GLF_FUZZED(7.6)), float(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(float(true))), vec2(_GLF_FUZZED(-581.763), (injectionSwitch)[1]), bvec2(_GLF_IDENTITY(false, (false) || false), true))).x), bool(true))))))) > injectionSwitch.y))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(bvec4(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! _GLF_IDENTITY((_GLF_IDENTITY(! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), _GLF_IDENTITY(bool(bvec3(! (_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x))) - 0.0) < injectionSwitch.y))), true, true)), bool(bvec3(bool(bvec3(! (_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x))) - 0.0) < _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED((-8774.3819 / 571.460))), vec2(_GLF_FUZZED(-5.5), (injectionSwitch)[1]), bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))).y))), true, true)), false, false))))), ((_GLF_IDENTITY(! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), _GLF_IDENTITY(bool(bvec3(! (_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x))) - 0.0) < injectionSwitch.y))), true, true)), bool(bvec3(bool(bvec3(! (_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x))) - 0.0) < _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED((-8774.3819 / 571.460))), vec2(_GLF_FUZZED(-5.5), (injectionSwitch)[1]), bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))).y))), true, true)), false, false)))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), _GLF_IDENTITY(false, true && (false)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(mat2(injectionSwitch.y, 0.0, 1.0, 1.0)))))))), bool(_GLF_IDENTITY(bvec2(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat3x2(injectionSwitch, 0.0, 1.0, cos(0.0), 1.0), transpose(transpose(mat3x2(injectionSwitch, 0.0, 1.0, cos(0.0), 1.0)))))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat3x2(injectionSwitch, 0.0, 1.0, cos(0.0), 1.0), transpose(transpose(mat3x2(injectionSwitch, 0.0, 1.0, cos(0.0), 1.0)))))), (true ? _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat3x2(injectionSwitch, 0.0, 1.0, cos(0.0), 1.0), transpose(transpose(mat3x2(injectionSwitch, 0.0, 1.0, cos(0.0), 1.0)))))), max(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat3x2(injectionSwitch, 0.0, 1.0, cos(0.0), 1.0), transpose(transpose(mat3x2(injectionSwitch, 0.0, 1.0, cos(0.0), 1.0)))))), _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat3x2(injectionSwitch, 0.0, 1.0, cos(0.0), 1.0), transpose(transpose(mat3x2(injectionSwitch, 0.0, 1.0, cos(_GLF_IDENTITY(0.0, mix(float(_GLF_IDENTITY(0.0, float(mat4x2(0.0, sqrt(1.0), 1.0, 0.0, 1.0, 0.0, 1.0, 0.0)))), float(_GLF_FUZZED(-707.025)), bool(false)))), 1.0)))))))) : _GLF_FUZZED(injectionSwitch))), _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat3x2(injectionSwitch, 0.0, 1.0, cos(0.0), 1.0), transpose(transpose(mat3x2(injectionSwitch, 0.0, 1.0, cos(0.0), 1.0)))))), _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat3x2(injectionSwitch, 0.0, 1.0, cos(0.0), 1.0), transpose(transpose(mat3x2(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), 0.0, 1.0, cos(0.0), 1.0)))))))).y)), true), bvec2(bvec3(bvec2(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat3x2(injectionSwitch, 0.0, 1.0, cos(0.0), 1.0), transpose(transpose(mat3x2(injectionSwitch, 0.0, 1.0, cos(0.0), 1.0)))))).y)), true), false))))) && (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)))), _GLF_IDENTITY(bool(bvec3(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, false)), ! (! (bool(bvec3(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, false)))))))))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(3.4)), float(injectionSwitch.y), bool(true))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, float(vec2(injectionSwitch.y, 0.0))))), min(_GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(clamp(injectionSwitch.y, injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, float(vec2(injectionSwitch.y, 0.0)))), (true ? clamp(injectionSwitch.y, injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, float(vec2(injectionSwitch.y, 0.0)))) : _GLF_IDENTITY(_GLF_FUZZED(953.609), (_GLF_FUZZED(953.609)) - _GLF_ZERO(0.0, injectionSwitch.x))))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(clamp(injectionSwitch.y, injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, float(vec2(injectionSwitch.y, 0.0)))), mix(float(_GLF_FUZZED(2.6)), float(clamp(injectionSwitch.y, injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, float(vec2(injectionSwitch.y, 0.0))))), bool(true)))), 1.0 * (_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, float(vec2(injectionSwitch.y, 0.0)))))))))))))), bool(bvec2(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(3.4)), float(injectionSwitch.y), bool(true))), _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))) + 0.0), injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, float(vec2(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), min(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), (true ? _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)) : _GLF_FUZZED(-1.5))))), 0.0)))))))))), false))))
    {
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(injectionSwitch.x > injectionSwitch.y, false)))))))))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
     return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(false))
        return;
       return;
      }
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec2(bvec2(false, false))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec2(bvec2(false, false))))), ! (! (bool(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec2(bvec2(false, false)))))))))))))
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         for(int _injected_loop_counter = ((int(_GLF_ZERO(0.0, injectionSwitch.x)) | _GLF_IDENTITY(0, int(ivec3(0, 0, 0)))) | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
          {
           return;
           if(_GLF_DEAD(false))
            return;
          }
        }
       else
        {
        }
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)))
  return;
 buf[virtual_gid] = 1;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(subgroup_local_id + 1 < subgroup_size)
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), bool(bvec4(false, true, false, true))), false, _GLF_IDENTITY(true, bool(bvec4(true, false, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), _GLF_IDENTITY((false) && true, ! (! ((false) && true))))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
           return;
           if(_GLF_DEAD(false))
            break;
           if(_GLF_DEAD(false))
            return;
          }
         if(_GLF_DEAD(false))
          break;
         return;
        }
      }
     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) || false))
      {
       if(_GLF_DEAD(false))
        return;
      }
     else
      {
       if(_GLF_DEAD(false))
        return;
       do
        {
         for(int _injected_loop_counter = (_GLF_IDENTITY(_GLF_IDENTITY(1, int(ivec3(1, 1, (0 >> _GLF_IDENTITY(int(6), int(6)))))) | _GLF_IDENTITY(_GLF_IDENTITY(0, ~ (_GLF_IDENTITY(~ (0), _GLF_IDENTITY((_GLF_IDENTITY(~ (0), (0 >> _GLF_IDENTITY(int(3), int(3))) ^ (_GLF_IDENTITY(_GLF_IDENTITY(~ (0), 0 ^ _GLF_IDENTITY((~ _GLF_IDENTITY((0), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY((0), ((0)) | ((0)))), (~ (_GLF_IDENTITY((0), ((0)) | ((0))))) - 0)))), int(ivec4((~ _GLF_IDENTITY((0), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY((0), ((0)) | ((0)))), (~ (_GLF_IDENTITY((0), ((0)) | ((0))))) - 0)))), 1, 1, 1)))), ~ (~ (~ (0))))))) ^ 0, ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (_GLF_IDENTITY((~ (0)) ^ 0, 0 + ((~ (0)) ^ 0))), (~ (_GLF_IDENTITY((~ (0)) ^ 0, 0 + ((~ (0)) ^ 0)))) | int(_GLF_ZERO(0.0, injectionSwitch.x))), ~ (~ (~ (_GLF_IDENTITY((~ (0)) ^ _GLF_IDENTITY(0, (0 >> _GLF_IDENTITY(int(3), int(3))) | (0)), 0 + (_GLF_IDENTITY((~ (0)) ^ 0, clamp(_GLF_IDENTITY((~ (0)) ^ 0, (false ? _GLF_FUZZED(bitfieldInsert(92326, 28001, 64591, -41474)) : (~ (0)) ^ 0)), _GLF_IDENTITY((~ (0)) ^ 0, max((~ (0)) ^ 0, (~ (0)) ^ 0)), (~ (0)) ^ 0))))))))))))), clamp(_GLF_IDENTITY(0, ~ (_GLF_IDENTITY(~ (0), _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(~ (0), (0 >> _GLF_IDENTITY(int(3), int(3))) ^ (_GLF_IDENTITY(~ _GLF_IDENTITY((0), 0 + ((0))), ~ (~ (~ (0))))))) ^ _GLF_IDENTITY(0, (0) | 0), ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (_GLF_IDENTITY((~ (0)) ^ 0, 0 + ((~ (0)) ^ 0))), (~ (_GLF_IDENTITY((~ (0)) ^ 0, 0 + ((~ (0)) ^ 0)))) | int(_GLF_ZERO(0.0, injectionSwitch.x))), ~ (~ (~ (_GLF_IDENTITY((~ (0)) ^ _GLF_IDENTITY(0, (0 >> _GLF_IDENTITY(int(3), int(3))) | (_GLF_IDENTITY(0, (0) | 0))), 0 + ((~ (0)) ^ 0)))))))), int(ivec3(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(~ (0), (0 >> _GLF_IDENTITY(int(3), int(3))) ^ (_GLF_IDENTITY(_GLF_IDENTITY(~ (0), ~ (~ (~ (0)))), max(_GLF_IDENTITY(~ (0), ~ (~ (~ (0)))), _GLF_IDENTITY(~ (0), ~ (~ (~ (0))))))))) ^ 0, ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (_GLF_IDENTITY((~ (0)) ^ 0, 0 + ((~ (0)) ^ 0))), (~ (_GLF_IDENTITY((~ (0)) ^ 0, 0 + ((~ (0)) ^ 0)))) | int(_GLF_ZERO(0.0, injectionSwitch.x))), ~ (~ (~ (_GLF_IDENTITY((~ (0)) ^ _GLF_IDENTITY(0, (0 >> _GLF_IDENTITY(int(3), int(3))) | (0)), 0 + ((~ (0)) ^ 0)))))))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(~ (0), (0 >> _GLF_IDENTITY(int(3), int(3))) ^ (_GLF_IDENTITY(~ (0), ~ (~ (~ (0))))))), max((_GLF_IDENTITY(~ (0), (0 >> _GLF_IDENTITY(int(3), int(3))) ^ (_GLF_IDENTITY(~ (0), ~ (~ (~ (0))))))), _GLF_IDENTITY((_GLF_IDENTITY(~ (0), (0 >> _GLF_IDENTITY(int(3), int(3))) ^ (_GLF_IDENTITY(~ (0), ~ (~ (~ (0))))))), (0 << _GLF_IDENTITY(int(2), int(2))) + ((_GLF_IDENTITY(~ (0), (0 >> _GLF_IDENTITY(int(3), int(3))) ^ (_GLF_IDENTITY(~ (0), ~ (~ (~ (0))))))))))) ^ 0, ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (_GLF_IDENTITY((~ (0)) ^ 0, 0 + ((~ (0)) ^ 0))), _GLF_IDENTITY((~ (_GLF_IDENTITY((~ (0)) ^ 0, 0 + ((_GLF_IDENTITY(~ (0), (~ (0)) | (~ (0)))) ^ 0)))), ~ (~ ((~ (_GLF_IDENTITY((~ (0)) ^ 0, 0 + ((_GLF_IDENTITY(~ (0), (~ (0)) | (~ (0)))) ^ 0))))))) | int(_GLF_ZERO(0.0, injectionSwitch.x))), ~ (~ (~ (_GLF_IDENTITY((~ (0)) ^ _GLF_IDENTITY(0, (0 >> _GLF_IDENTITY(int(3), int(3))) | (0)), 0 + ((~ (0)) ^ 0)))))))), max(_GLF_IDENTITY((_GLF_IDENTITY(~ (0), (0 >> _GLF_IDENTITY(int(3), int(3))) ^ (_GLF_IDENTITY(~ (0), ~ (~ (~ (0))))))) ^ 0, ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_IDENTITY((~ (0)) ^ 0, 0 + ((~ (0)) ^ 0)), max(_GLF_IDENTITY((~ (0)) ^ 0, 0 + ((~ (0)) ^ 0)), _GLF_IDENTITY((~ (0)) ^ 0, 0 + ((~ (0)) ^ 0))))), (~ (_GLF_IDENTITY((~ (0)) ^ 0, 0 + ((~ (0)) ^ 0)))) | int(_GLF_ZERO(0.0, injectionSwitch.x))), ~ (~ (~ (_GLF_IDENTITY((~ (0)) ^ _GLF_IDENTITY(0, (0 >> _GLF_IDENTITY(int(3), int(3))) | (0)), 0 + ((~ (0)) ^ 0)))))))), _GLF_IDENTITY((_GLF_IDENTITY(~ (0), (0 >> _GLF_IDENTITY(int(3), int(3))) ^ (_GLF_IDENTITY(~ (0), ~ (~ (~ (0))))))) ^ 0, ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (_GLF_IDENTITY((~ (0)) ^ 0, 0 + ((~ (0)) ^ 0))), (~ (_GLF_IDENTITY((~ (0)) ^ 0, 0 + ((~ (0)) ^ 0)))) | int(_GLF_ZERO(0.0, injectionSwitch.x))), ~ (~ (~ (_GLF_IDENTITY((~ (0)) ^ _GLF_IDENTITY(0, (_GLF_IDENTITY(0, clamp(0, _GLF_IDENTITY(0, 0 ^ (0)), 0)) >> _GLF_IDENTITY(int(3), int(3))) | (0)), 0 + ((~ (0)) ^ 0))))))))))) | (_GLF_IDENTITY((_GLF_IDENTITY(~ (0), (0 >> _GLF_IDENTITY(int(3), int(3))) ^ (_GLF_IDENTITY(~ (0), ~ (~ (~ (0))))))) ^ 0, ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (_GLF_IDENTITY((~ (0)) ^ 0, _GLF_IDENTITY(0 + ((~ (0)) ^ 0), clamp(0 + ((~ (0)) ^ 0), _GLF_IDENTITY(0 + ((~ (0)) ^ 0), (false ? _GLF_FUZZED(-75574) : 0 + ((~ (0)) ^ 0))), 0 + ((~ (0)) ^ 0))))), (~ (_GLF_IDENTITY((~ (0)) ^ 0, 0 + ((~ (0)) ^ 0)))) | int(_GLF_ZERO(0.0, injectionSwitch.x))), ~ (~ (~ (_GLF_IDENTITY((~ _GLF_IDENTITY((0), ((0)) / 1)) ^ _GLF_IDENTITY(0, (0 >> _GLF_IDENTITY(int(3), int(3))) | (0)), 0 + ((~ (0)) ^ 0)))))))))), 1, 0)))))), _GLF_IDENTITY(0, ~ (_GLF_IDENTITY(~ (0), _GLF_IDENTITY((_GLF_IDENTITY(~ (0), (0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(3), int(3)), 0 | (_GLF_IDENTITY(_GLF_IDENTITY(int(3), int(3)), 0 | (_GLF_IDENTITY(int(3), int(3))))))) ^ (_GLF_IDENTITY(~ (0), ~ (~ (~ (0))))))) ^ 0, ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (_GLF_IDENTITY((~ (0)) ^ 0, 0 + ((~ (0)) ^ 0))), _GLF_IDENTITY((~ (_GLF_IDENTITY((~ (0)) ^ 0, 0 + ((~ (0)) ^ 0)))), max(_GLF_IDENTITY((~ (_GLF_IDENTITY((~ (0)) ^ 0, 0 + (_GLF_IDENTITY((~ (0)) ^ 0, 0 | (_GLF_IDENTITY((~ (0)) ^ 0, int(int((~ (0)) ^ 0))))))))), clamp((~ (_GLF_IDENTITY((~ (0)) ^ _GLF_IDENTITY(0, 0 ^ (0)), 0 + ((~ (0)) ^ 0)))), (~ (_GLF_IDENTITY((~ (0)) ^ 0, 0 + ((~ (0)) ^ 0)))), (~ (_GLF_IDENTITY((~ (0)) ^ 0, 0 + ((~ (0)) ^ 0)))))), (~ (_GLF_IDENTITY((~ (0)) ^ 0, 0 + ((~ (0)) ^ 0)))))) | int(_GLF_ZERO(0.0, injectionSwitch.x))), ~ (~ (~ (_GLF_IDENTITY((~ (0)) ^ _GLF_IDENTITY(0, (0 >> _GLF_IDENTITY(int(3), int(3))) | (0)), 0 + ((~ _GLF_IDENTITY((0), (_GLF_IDENTITY((0), min((0), (0)))) | ((0)))) ^ 0))))))))))), _GLF_IDENTITY(_GLF_IDENTITY(0, ~ (_GLF_IDENTITY(~ (0), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(~ (0), ~ (~ (~ (0)))), (0 >> _GLF_IDENTITY(int(3), int(_GLF_IDENTITY(3, (3) << 0)))) ^ (_GLF_IDENTITY(~ (0), ~ (_GLF_IDENTITY(~ (~ (0)), (~ (~ (0))) >> 0)))))) ^ 0, ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ _GLF_IDENTITY((_GLF_IDENTITY((~ (0)) ^ 0, 0 + ((~ (0)) ^ 0))), min((_GLF_IDENTITY((~ (0)) ^ 0, _GLF_IDENTITY(0 + ((~ (0)) ^ 0), (0 + ((~ (0)) ^ 0)) | (0 + ((~ (0)) ^ 0))))), _GLF_IDENTITY((_GLF_IDENTITY((~ (0)) ^ 0, 0 + ((~ (0)) ^ 0))), min((_GLF_IDENTITY((~ (0)) ^ 0, 0 + ((~ (0)) ^ 0))), (_GLF_IDENTITY((~ (0)) ^ 0, 0 + ((~ (0)) ^ 0))))))), (~ (_GLF_IDENTITY((~ (0)) ^ 0, 0 + ((~ (_GLF_IDENTITY(0, 0 | (_GLF_IDENTITY(0, 0 ^ (0)))))) ^ 0)))) | int(_GLF_ZERO(0.0, injectionSwitch.x))), ~ (~ (~ (_GLF_IDENTITY((~ (0)) ^ _GLF_IDENTITY(0, (0 >> _GLF_IDENTITY(int(3), int(3))) | (0)), 0 + ((~ (0)) ^ 0))))))))))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(0, ~ (_GLF_IDENTITY(~ (0), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(~ (0), (~ (0)) - int(_GLF_ZERO(0.0, injectionSwitch.x))), (0 >> _GLF_IDENTITY(int(3), int(3))) ^ (_GLF_IDENTITY(~ (0), ~ (~ (_GLF_IDENTITY(~ (0), (false ? _GLF_FUZZED(-83702) : ~ (0))))))))) ^ _GLF_IDENTITY(0, ~ (~ (0))), ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY((~ (0)), (true ? (~ (0)) : _GLF_FUZZED(91950))) ^ 0, 0 + ((~ (0)) ^ 0))), int(_GLF_ZERO(0.0, injectionSwitch.x)) | (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY((~ (0)), (true ? (~ (0)) : _GLF_FUZZED(91950))) ^ 0, 0 + ((~ (0)) ^ 0))), ((_GLF_IDENTITY(_GLF_IDENTITY((~ (0)), (true ? (~ (0)) : _GLF_FUZZED(91950))) ^ 0, _GLF_IDENTITY(0 + ((~ (0)) ^ 0), _GLF_IDENTITY(int(ivec2(0 + ((~ (0)) ^ 0), 1)), ~ (~ (int(ivec2(0 + ((~ (0)) ^ 0), 1))))))))) / 1))), (~ (_GLF_IDENTITY((~ (0)) ^ 0, 0 + ((~ (0)) ^ 0)))) | int(_GLF_ZERO(0.0, injectionSwitch.x))), ~ (~ (~ (_GLF_IDENTITY((~ (0)) ^ _GLF_IDENTITY(0, _GLF_IDENTITY((0 >> _GLF_IDENTITY(int(3), int(3))), (_GLF_IDENTITY((0 >> _GLF_IDENTITY(int(3), int(3))), max((0 >> _GLF_IDENTITY(int(3), int(3))), (0 >> _GLF_IDENTITY(int(3), int(3)))))) | ((0 >> _GLF_IDENTITY(int(3), int(3))))) | (0)), 0 + ((~ (0)) ^ 0))))))))))), (_GLF_IDENTITY(0, _GLF_IDENTITY(~ (_GLF_IDENTITY(~ (0), _GLF_IDENTITY((_GLF_IDENTITY(~ (0), (0 >> _GLF_IDENTITY(int(3), int(3))) ^ (_GLF_IDENTITY(~ (0), ~ (~ (~ (0))))))) ^ 0, ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (_GLF_IDENTITY((~ (0)) ^ 0, 0 + ((~ (0)) ^ _GLF_IDENTITY(0, 0 + (_GLF_IDENTITY(0, 0 | (0))))))), (~ (_GLF_IDENTITY((~ _GLF_IDENTITY((0), max(_GLF_IDENTITY((0), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-97901) : _GLF_IDENTITY((0), (true ? (0) : _GLF_FUZZED(66385))))), _GLF_IDENTITY((0), clamp((0), (0), (0)))))) ^ 0, 0 + ((~ (0)) ^ 0)))) | int(_GLF_ZERO(0.0, injectionSwitch.x))), ~ (~ (~ (_GLF_IDENTITY((~ (0)) ^ _GLF_IDENTITY(0, (0 >> _GLF_IDENTITY(int(3), int(3))) | (_GLF_IDENTITY(0, (true ? _GLF_IDENTITY(0, (_GLF_IDENTITY(0, clamp(0, 0, 0))) << 0) : _GLF_FUZZED(-9865))))), 0 + ((~ (0)) ^ 0)))))))))), (~ (_GLF_IDENTITY(~ (0), _GLF_IDENTITY((_GLF_IDENTITY(~ (0), (0 >> _GLF_IDENTITY(int(3), int(3))) ^ (_GLF_IDENTITY(_GLF_IDENTITY(~ (0), (~ (0)) | (0 << _GLF_IDENTITY(int(8), int(8)))), ~ (~ (~ (0))))))) ^ 0, ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_IDENTITY((~ (0)) ^ 0, 0 + ((~ (0)) ^ 0)), (_GLF_IDENTITY((~ (0)) ^ 0, 0 + ((~ (0)) ^ 0))) * 1)), (~ (_GLF_IDENTITY((~ _GLF_IDENTITY((0), int(ivec4((0), int(_GLF_ZERO(0.0, injectionSwitch.x)), 0, 0)))) ^ 0, 0 + ((~ (0)) ^ 0)))) | int(_GLF_ZERO(0.0, injectionSwitch.x))), ~ (~ (~ (_GLF_IDENTITY((~ (0)) ^ _GLF_IDENTITY(0, (0 >> _GLF_IDENTITY(int(3), int(3))) | (0)), 0 + _GLF_IDENTITY(((~ (0)) ^ 0), (((~ (0)) ^ 0)) + (0 | 0)))))))))))) - 0))) - 0), _GLF_IDENTITY(0, ~ (_GLF_IDENTITY(~ (0), _GLF_IDENTITY((_GLF_IDENTITY(~ (0), (0 >> _GLF_IDENTITY(int(3), int(3))) ^ (_GLF_IDENTITY(~ (0), ~ (~ (~ (0))))))) ^ 0, ~ _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(~ (0), 0 + (~ (0)))) ^ 0, 0 + ((~ (0)) ^ 0)), (_GLF_IDENTITY((~ (0)) ^ _GLF_IDENTITY(0, min(_GLF_IDENTITY(0, int(int(0))), 0)), 0 + ((~ (0)) ^ 0))) / 1)), (~ (_GLF_IDENTITY((~ (0)) ^ 0, _GLF_IDENTITY(0 + ((~ (0)) ^ 0), 0 + (0 + ((~ (0)) ^ 0)))))) | int(_GLF_ZERO(0.0, injectionSwitch.x))), _GLF_IDENTITY(~ (~ (~ (_GLF_IDENTITY((~ (0)) ^ _GLF_IDENTITY(0, (0 >> _GLF_IDENTITY(int(3), int(3))) | (0)), 0 + ((~ (0)) ^ 0))))), 0 ^ (_GLF_IDENTITY(~ (~ (~ (_GLF_IDENTITY((~ (0)) ^ _GLF_IDENTITY(0, (0 >> _GLF_IDENTITY(int(3), int(3))) | (0)), 0 + ((~ (0)) ^ _GLF_IDENTITY(0, min(0, 0))))))), (~ (~ _GLF_IDENTITY((~ (_GLF_IDENTITY((~ (0)) ^ _GLF_IDENTITY(0, (0 >> _GLF_IDENTITY(int(3), int(3))) | (0)), 0 + ((~ (0)) ^ 0)))), (false ? _GLF_FUZZED((42562 ^ 44025)) : (~ (_GLF_IDENTITY((~ (0)) ^ _GLF_IDENTITY(0, (0 >> _GLF_IDENTITY(int(3), int(3))) | (0)), 0 + ((~ (0)) ^ 0)))))))) | (~ (~ (~ (_GLF_IDENTITY((~ (0)) ^ _GLF_IDENTITY(0, (0 >> _GLF_IDENTITY(int(3), int(3))) | (0)), 0 + ((~ (0)) ^ 0))))))))))), min((_GLF_IDENTITY(_GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(~ (0), 0 + (~ (0)))) ^ 0, 0 + ((~ (0)) ^ 0)), (_GLF_IDENTITY((~ (0)) ^ _GLF_IDENTITY(0, min(_GLF_IDENTITY(0, int(int(0))), 0)), 0 + ((~ (0)) ^ 0))) / 1)), (~ (_GLF_IDENTITY((~ (0)) ^ 0, _GLF_IDENTITY(0 + ((~ (0)) ^ 0), 0 + (0 + ((~ (0)) ^ 0)))))) | int(_GLF_ZERO(0.0, injectionSwitch.x))), _GLF_IDENTITY(~ (~ (~ (_GLF_IDENTITY((~ (0)) ^ _GLF_IDENTITY(0, (0 >> _GLF_IDENTITY(int(3), int(3))) | (0)), 0 + ((~ (0)) ^ 0))))), 0 ^ (_GLF_IDENTITY(~ (~ (~ (_GLF_IDENTITY((~ (0)) ^ _GLF_IDENTITY(0, (0 >> _GLF_IDENTITY(int(3), int(3))) | (0)), 0 + ((~ (0)) ^ _GLF_IDENTITY(0, min(0, 0))))))), (~ (~ _GLF_IDENTITY((~ (_GLF_IDENTITY((~ (0)) ^ _GLF_IDENTITY(0, (0 >> _GLF_IDENTITY(int(3), int(3))) | (0)), 0 + ((~ (0)) ^ 0)))), (false ? _GLF_FUZZED((42562 ^ 44025)) : (~ (_GLF_IDENTITY((~ (0)) ^ _GLF_IDENTITY(0, (0 >> _GLF_IDENTITY(int(3), int(3))) | (0)), 0 + ((~ (0)) ^ 0)))))))) | (~ (~ (~ (_GLF_IDENTITY((~ (0)) ^ _GLF_IDENTITY(0, (0 >> _GLF_IDENTITY(int(3), int(3))) | (0)), 0 + ((~ (0)) ^ 0))))))))))), (_GLF_IDENTITY(_GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(~ (0), 0 + (~ (0)))) ^ 0, 0 + ((~ (0)) ^ 0)), (_GLF_IDENTITY((~ (0)) ^ _GLF_IDENTITY(0, min(_GLF_IDENTITY(0, int(int(0))), 0)), 0 + ((~ (0)) ^ 0))) / 1)), (~ (_GLF_IDENTITY((~ (0)) ^ 0, _GLF_IDENTITY(0 + ((~ (0)) ^ 0), 0 + (0 + ((~ (0)) ^ 0)))))) | int(_GLF_ZERO(0.0, injectionSwitch.x))), _GLF_IDENTITY(~ (~ (~ (_GLF_IDENTITY((~ (0)) ^ _GLF_IDENTITY(0, (0 >> _GLF_IDENTITY(int(3), int(3))) | (0)), 0 + ((~ (0)) ^ 0))))), 0 ^ (_GLF_IDENTITY(~ (~ (~ (_GLF_IDENTITY((~ (0)) ^ _GLF_IDENTITY(0, (0 >> _GLF_IDENTITY(int(3), int(3))) | (0)), 0 + ((~ (0)) ^ _GLF_IDENTITY(0, min(0, 0))))))), (~ (~ _GLF_IDENTITY((~ (_GLF_IDENTITY((~ (0)) ^ _GLF_IDENTITY(0, (0 >> _GLF_IDENTITY(int(3), int(3))) | (0)), 0 + ((~ (0)) ^ 0)))), (false ? _GLF_FUZZED((42562 ^ 44025)) : (~ (_GLF_IDENTITY((~ (0)) ^ _GLF_IDENTITY(0, (0 >> _GLF_IDENTITY(int(3), int(3))) | (0)), 0 + ((~ (0)) ^ 0)))))))) | (~ (~ (~ (_GLF_IDENTITY((~ (0)) ^ _GLF_IDENTITY(0, (0 >> _GLF_IDENTITY(int(3), int(3))) | (0)), 0 + ((~ (0)) ^ 0))))))))))))))))), _GLF_IDENTITY(0, ~ (_GLF_IDENTITY(~ (0), _GLF_IDENTITY((_GLF_IDENTITY(~ (0), (_GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) * 1)) | (_GLF_IDENTITY(0, (0) - 0))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(3, 0 | (3))), int(3))) ^ (_GLF_IDENTITY(~ (0), ~ (~ (~ (0))))))) ^ 0, ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (_GLF_IDENTITY((~ (0)) ^ _GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) - 0)) + 0))), 0 + ((~ (0)) ^ 0))), (~ (_GLF_IDENTITY(_GLF_IDENTITY((~ (0)) ^ 0, 0 + ((~ (0)) ^ 0)), (_GLF_IDENTITY((~ (0)) ^ 0, 0 + ((~ (0)) ^ 0))) / 1))) | int(_GLF_ZERO(0.0, injectionSwitch.x))), ~ (~ (~ (_GLF_IDENTITY((~ (0)) ^ _GLF_IDENTITY(0, (0 >> _GLF_IDENTITY(int(3), int(3))) | (0)), 0 + ((~ (0)) ^ 0))))))))))))))), (false ? _GLF_FUZZED(13015) : 1 | 0))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, _GLF_IDENTITY(min(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) + _GLF_IDENTITY(0, (0) | (0))), _injected_loop_counter), (true ? min(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) + _GLF_IDENTITY(0, (0) | (0))), _injected_loop_counter) : _GLF_FUZZED(-88580)))) > (0 | int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED((-1.4 + injectionSwitch)) : injectionSwitch)).x)))); _injected_loop_counter --)
          {
           if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
            return;
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              return;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              break;
             atomicStore(buf[_GLF_IDENTITY(next_virtual_gid, min(_GLF_IDENTITY(next_virtual_gid, (next_virtual_gid) | 0u), next_virtual_gid))], uint(2), 4, 64, 4);
             if(_GLF_DEAD(false))
              continue;
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 return;
                }
               else
                {
                }
              }
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                continue;
               break;
              }
             if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bool(bvec2(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true)), ! (! (_GLF_IDENTITY(bool(bvec2(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true)), true && (bool(bvec2(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true)))))))))
              continue;
            }
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(false))
              {
               do
                {
                 return;
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
                {
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                  {
                   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                    {
                     return;
                    }
                  }
                 else
                  {
                  }
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  return;
                }
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                }
               else
                {
                 return;
                }
              }
            }
           else
            {
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), ! (! (bool(false))))))))
        {
         do
          {
           return;
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
          {
           return;
          }
        }
      }
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, false || (false))))))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        return;
      }
     if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(false))
        return;
       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) && true)))))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              return;
             return;
            }
           return;
          }
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), (true ? _GLF_IDENTITY(int(7), clamp(int(7), int(7), int(7))) : _GLF_FUZZED(-11613)))))); _injected_loop_counter ++)
          {
           do
            {
             if(_GLF_DEAD(false))
              return;
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         do
          {
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(mat3x2(injectionSwitch.y, sqrt(1.0), 0.0, 0.0, 1.0, 0.0))))), _GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false) || false), false, true, true)))))
            {
             if(_GLF_DEAD(false))
              return;
             return;
            }
           if(_GLF_DEAD(false))
            return;
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        }
       return;
       for(int _injected_loop_counter = _GLF_IDENTITY((0 >> _GLF_IDENTITY(int(3), int(3))), (0 & -63554) + (_GLF_IDENTITY(_GLF_IDENTITY((0 >> _GLF_IDENTITY(int(3), int(3))), clamp((0 >> _GLF_IDENTITY(int(3), int(3))), (0 >> _GLF_IDENTITY(int(3), int(3))), (0 >> _GLF_IDENTITY(int(3), int(3))))), ((0 >> _GLF_IDENTITY(int(3), int(3)))) ^ 0))); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < 1), _GLF_IDENTITY(bool(bvec4(_GLF_WRAPPED_LOOP(_injected_loop_counter < 1), false, false, false)), bool(bvec2(_GLF_IDENTITY(bool(bvec4(_GLF_WRAPPED_LOOP(_injected_loop_counter < 1), false, false, false)), false || (bool(bvec4(_GLF_WRAPPED_LOOP(_injected_loop_counter < 1), false, false, false)))), true)))); _GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) | 0))
        {
         if(_GLF_DEAD(false))
          return;
        }
      }
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), _GLF_IDENTITY(_GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, bool(bool(true))))), _GLF_IDENTITY(bool(bvec3(true, true, true)), false || (bool(bvec3(true, true, true))))), false, false))))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       return;
      }
     else
      {
       if(_GLF_DEAD(false))
        return;
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
        {
         return;
        }
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
     return;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       do
        {
         if(_GLF_DEAD(false))
          return;
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), _GLF_IDENTITY(bool(bvec4(_GLF_WRAPPED_IF_TRUE(true), true, true, false)), true && (_GLF_IDENTITY(bool(bvec4(_GLF_WRAPPED_IF_TRUE(true), true, true, false)), true && (bool(bvec4(_GLF_WRAPPED_IF_TRUE(true), true, true, false))))))))
        {
         do
          {
           if(_GLF_DEAD(false))
            {
             do
              {
               return;
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bvec4(false, false, true, false)))));
         return;
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
             if(_GLF_DEAD(false))
              return;
            }
           else
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
            }
           if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), true && (bool(false))))))), (injectionSwitch.x > injectionSwitch.y))))
            return;
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             return;
            }
          }
        }
      }
     return;
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(mat3x4(injectionSwitch.x, 0.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), sqrt(1.0), 1.0, 0.0, cos(0.0), cos(0.0), 0.0, 1.0, 1.0), mat4(1.0) * (mat3x4(injectionSwitch.x, 0.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), sqrt(1.0), 1.0, 0.0, cos(0.0), cos(0.0), 0.0, 1.0, 1.0))))) > injectionSwitch.y))), bool(bvec2(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true))))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), false || ((injectionSwitch.x < injectionSwitch.y))))))
        {
         return;
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(false))
    {
     do
      {
       return;
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   subgroupAll(false);
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(0, min(0, 0))); _injected_loop_counter --)
      {
       do
        {
         return;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (! (false)))))))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(7), ~ (~ (int(7)))), _GLF_IDENTITY(int(7), (int(7)) | (int(7))))); _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7)))); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), ~ (~ (int(3)))))) >> _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), (int(3)) / 1)))); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              break;
             if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
              continue;
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               return;
              }
            }
          }
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           return;
          }
         else
          {
          }
        }
       return;
      }
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))), (_GLF_DEAD(_GLF_IDENTITY(false, true && (false)))) || false)) || false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
    return;
  }
 else
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
    }
   else
    {
    }
   atomicStore(buf[next_virtual_gid], uint(2), 4, _GLF_IDENTITY(64, (_GLF_IDENTITY(false, _GLF_IDENTITY((_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), false || (_GLF_IDENTITY((false), ((false)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))) || false, bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY((_GLF_IDENTITY(false, _GLF_IDENTITY(! (! _GLF_IDENTITY((false), false || ((false)))), bool(_GLF_IDENTITY(bool(! (! _GLF_IDENTITY((false), false || ((false))))), true && (bool(! (! _GLF_IDENTITY((false), false || ((false))))))))))) || false, ! (! (_GLF_IDENTITY((_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), false || ((false)))))) || false, bool(bvec2((_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), false || ((false)))))) || false, false)))))), false, _GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, (false) || false)))), bvec3(bvec4(bvec3(_GLF_IDENTITY((_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), false || ((false)))))) || false, ! (! (_GLF_IDENTITY((_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), false || ((false)))))) || false, bool(bvec2((_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), false || ((false)))))) || false, false)))))), false, false), true)))))) ? _GLF_FUZZED(-94743) : 64)), _GLF_IDENTITY(_GLF_IDENTITY(4, int(int(4))), clamp(4, 4, _GLF_IDENTITY(4, (true ? 4 : _GLF_IDENTITY(_GLF_FUZZED(-83785), _GLF_IDENTITY(_GLF_IDENTITY(0, clamp(0, _GLF_IDENTITY(_GLF_IDENTITY(0, 0 ^ (0)), max(0, 0)), _GLF_IDENTITY(0, int(ivec3(_GLF_IDENTITY(0, (0) << 0), 0, 0))))), (0) >> (_GLF_IDENTITY(0, min(0, 0)) & -91001)) | (_GLF_FUZZED(-83785))))))));
   if(_GLF_DEAD(false))
    return;
   if(_GLF_IDENTITY(_GLF_DEAD(false), ! _GLF_IDENTITY((! _GLF_IDENTITY((_GLF_DEAD(false)), _GLF_IDENTITY(bool(bvec4((_GLF_DEAD(false)), true, true, false)), (bool(bvec4((_GLF_DEAD(false)), true, true, false))) && true))), false || ((! (_GLF_DEAD(false)))))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       return;
      }
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          return;
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(((_GLF_IDENTITY((1 | 1), ((1 | 1)) << 0) << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4))), max((((1 | 1) << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4))), (((1 | 1) << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4)))))); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_DEAD(false))
            continue;
           return;
           if(_GLF_DEAD(false))
            break;
          }
        }
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       do
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           return;
          }
         else
          {
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        return;
      }
     else
      {
      }
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + _GLF_IDENTITY((injectionSwitch), ((injectionSwitch)) / vec2(1.0, 1.0))).y))))
      {
      }
     else
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         do
          {
           return;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / exp(0.0))))), min((_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / exp(0.0))))), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(vec2(injectionSwitch), vec2(vec3(vec2(injectionSwitch), 1.0))))).y, clamp(injectionSwitch.y, injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / exp(0.0))))))) / _GLF_IDENTITY(1.0, min(1.0, 1.0)))), ! (! (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(-4.6))) > _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch), (mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch)) * vec2(1.0, 1.0))), injectionSwitch, injectionSwitch)).y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(mat2x3(injectionSwitch.y, 0.0, 1.0, 0.0, 1.0, 0.0)), (false ? _GLF_FUZZED(-728.546) : float(mat2x3(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y, 0.0, 1.0, 0.0, 1.0, 0.0))))))), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)))), injectionSwitch)).y, injectionSwitch.y, injectionSwitch.y)), (_GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y, injectionSwitch.y, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)))).y))) * 1.0)) / 1.0)), true && ((injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(mat2x3(injectionSwitch.y, 0.0, 1.0, 0.0, 1.0, 0.0)), (false ? _GLF_FUZZED(-728.546) : float(mat2x3(injectionSwitch.y, 0.0, 1.0, 0.0, 1.0, 0.0))))))), (_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))) / 1.0))))))))));
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         return;
        }
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(! (_GLF_IDENTITY(! (false), (! (false)) && true)), _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec4(! (_GLF_IDENTITY(! (false), (! (false)) && true)), true, false, true)), ! (! (_GLF_IDENTITY(bool(bvec4(! (_GLF_IDENTITY(! (false), (! (false)) && true)), true, false, true)), ! (! (_GLF_IDENTITY(bool(bvec4(! (_GLF_IDENTITY(! (false), (! (false)) && true)), true, false, true)), ! (! (bool(bvec4(! (_GLF_IDENTITY(! (false), (! (false)) && true)), true, false, true))))))))))), (bool(bvec4(! (_GLF_IDENTITY(! (false), (! (false)) && true)), true, false, true))) || false)))))
        {
         for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))); _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 return;
                }
               else
                {
                }
              }
             return;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
             if(_GLF_DEAD(false))
              return;
            }
           if(_GLF_DEAD(false))
            break;
          }
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             return;
            }
          }
         else
          {
          }
         if(_GLF_DEAD(false))
          return;
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           return;
          }
         else
          {
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(5.5)), vec2(_GLF_FUZZED(vec4(9599.2802, -6.7, -3802.2019, 2727.3704).x), (injectionSwitch)[1]), bvec2(false, true))).y))))
          return;
         if(_GLF_DEAD(false))
          return;
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < (int(_GLF_ZERO(0.0, injectionSwitch.x)) | 1)); _injected_loop_counter ++)
            {
             return;
            }
          }
         return;
        }
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY((true) || false, (_GLF_IDENTITY((true) || false, false || (_GLF_IDENTITY((true) || false, ((true) || false) || false)))) || false))))
        {
         for(int _injected_loop_counter = (0 | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), (_GLF_IDENTITY(int(4), int(4))) | (_GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (int(4)) + 0)))))); _injected_loop_counter ++)
          {
           return;
          }
        }
       else
        {
        }
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 >> _GLF_IDENTITY(int(3), _GLF_IDENTITY(_GLF_IDENTITY(int(3), clamp(int(3), int(3), int(3))), min(_GLF_IDENTITY(_GLF_IDENTITY(int(3), clamp(int(3), int(3), int(3))), (false ? _GLF_FUZZED(82874) : _GLF_IDENTITY(int(3), clamp(int(3), int(3), int(3))))), _GLF_IDENTITY(int(3), clamp(int(3), int(3), int(3)))))))); _injected_loop_counter --)
      {
       do
        {
         if(_GLF_DEAD(false))
          {
           do
            {
             if(_GLF_DEAD(false))
              return;
             if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true)) && true)) || false))
              continue;
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(_GLF_IDENTITY(mat4x3(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, float(mat3x4(injectionSwitch.x, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0))))), length(0.0), 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0), mat4x3(mat4(mat4x3(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, float(mat3x4(injectionSwitch.x, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0))))), length(0.0), 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0))))), float(vec4(float(_GLF_IDENTITY(mat4x3(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, float(mat3x4(injectionSwitch.x, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0))))), length(0.0), 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0), mat4x3(mat4(mat4x3(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, float(mat3x4(injectionSwitch.x, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0))))), length(0.0), 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0))))), 1.0, 0.0, 1.0)))) > injectionSwitch.y))))
                continue;
               return;
              }
             if(_GLF_DEAD(false))
              return;
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))).x > injectionSwitch.y))));
           if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
            return;
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              continue;
             return;
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, true), bvec3(bvec3(bvec3(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))))), false, true)))), bvec3(bvec3(bvec3(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, true))))), false || (bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))), false, _GLF_IDENTITY(true, _GLF_IDENTITY(true, bool(bvec2(true, false))) && (true))), bvec3(bvec3(bvec3(_GLF_IDENTITY(false, (false) || _GLF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).y))), false, true))))))))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         return;
        }
       if(_GLF_DEAD(false))
        return;
       do
        {
         if(_GLF_DEAD(false))
          return;
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)))))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            return;
          }
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
            {
             return;
            }
          }
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           return;
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              return;
            }
           else
            {
            }
          }
         else
          {
          }
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            return;
          }
         else
          {
          }
        }
       return;
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
     return;
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         return;
        }
      }
     return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
    return;
   subgroupAll(true);
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
