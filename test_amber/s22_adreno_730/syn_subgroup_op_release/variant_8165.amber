#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(mat3x2(injectionSwitch.x, 0.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), abs(log(1.0)), 1.0), mat2(1.0) * (mat3x2(injectionSwitch.x, 0.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), abs(log(1.0)), 1.0))))) > injectionSwitch.y, bool(bvec3(_GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(mat3x2(injectionSwitch.x, 0.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), abs(log(1.0)), 1.0), mat2(1.0) * (mat3x2(injectionSwitch.x, 0.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), abs(log(1.0)), 1.0))))) > injectionSwitch.y, true, _GLF_IDENTITY(true, bool(bvec4(true, true, true, true))))))), ! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true)))))))
  {
   if(_GLF_DEAD(false))
    barrier();
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0))) > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec2(true, true)), ! (! (bool(bvec2(true, true))))))))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
       do
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
        }
       else
        {
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
    }
   else
    {
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, ! (! (false)))))), true && (_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false)))), ! (! (! (_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))))))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - log(vec2(1.0, 1.0))).x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)), ! (! (bool(bvec3(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))))), (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch))))) - vec2(0.0, 0.0)).x > _GLF_IDENTITY(injectionSwitch, vec2(vec2(injectionSwitch))).y))))), false || (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch))))) - vec2(0.0, 0.0)).x > _GLF_IDENTITY(injectionSwitch, vec2(vec2(injectionSwitch))).y)))))))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     for(int _injected_loop_counter = 1; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0), (_GLF_WRAPPED_LOOP(_injected_loop_counter != 0)) && true); _GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) - 0))
      {
       return;
      }
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (injectionSwitch.x > injectionSwitch.y)), bool(_GLF_IDENTITY(bvec3(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (injectionSwitch.x > injectionSwitch.y)), true, false), bvec3(bvec3(bvec3(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (injectionSwitch.x > injectionSwitch.y)), true, false))))))))
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 << _GLF_IDENTITY(int(0), int(0)))); _GLF_IDENTITY(_injected_loop_counter --, (true ? _injected_loop_counter -- : _GLF_FUZZED(_injected_loop_counter))))
      {
       barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
    }
   if(_GLF_DEAD(false))
    barrier();
   for(int _injected_loop_counter = ((48937 + ivec2(-97451, 97432)).s & 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     do
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), bool(bvec3(! (true), false, true)))))))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
        }
       else
        {
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
           barrier();
          }
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) || false))))))
              barrier();
             barrier();
            }
           barrier();
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
         barrier();
        }
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
    barrier();
   do
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, false), _GLF_IDENTITY(bvec2(bvec3(bvec2(false, false), true)), bvec2(bvec2(bvec2(bvec3(bvec2(false, false), true))))))))))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             barrier();
            }
           else
            {
            }
          }
         else
          {
          }
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), _GLF_IDENTITY(bool(bvec4(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bool(bvec2(bool(bvec4(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true)))))
            {
             if(_GLF_DEAD(false))
              {
               do
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 >> _GLF_IDENTITY(int(_GLF_IDENTITY(6, 0 | (_GLF_IDENTITY(6, min(6, 6))))), int(6)))); _injected_loop_counter --)
                    {
                     barrier();
                    }
                  }
                 else
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                  }
                 if(_GLF_DEAD(false))
                  barrier();
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
              }
             else
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 barrier();
                }
               if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, bool(bvec3(false, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, float(mat4x3(injectionSwitch.x, 1.0, 0.0, 0.0, 0.0, abs(1.0), 0.0, determinant(mat2(determinant(mat2(1.0, 1.0, 0.0, 1.0)), 0.0, 1.0, 1.0)), 1.0, cos(0.0), 0.0, 1.0))) < injectionSwitch.y)), true)))), (bool(_GLF_IDENTITY(false, bool(bvec3(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))))) || false)), ! (! (bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, bool(bvec3(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)))), (bool(_GLF_IDENTITY(false, bool(bvec3(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))))) || false))))))))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   barrier();
                  }
                 barrier();
                }
              }
            }
           else
            {
            }
          }
         else
          {
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         else
          {
          }
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
          }
        }
       if(_GLF_DEAD(false))
        {
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
     else
      {
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(false))
    barrier();
   do
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
   for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 << _GLF_IDENTITY(int(8), int(8)))); _injected_loop_counter --)
    {
     return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false))))))))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       do
        {
         if(_GLF_DEAD(false))
          {
           do
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       for(int _injected_loop_counter = (1 | 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
           barrier();
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))).x > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   else
    {
     barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
    barrier();
  }
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), clamp(int(3), int(3), _GLF_IDENTITY(int(3), clamp(_GLF_IDENTITY(int(3), 1 * (_GLF_IDENTITY(int(3), (int(3)) >> 0))), _GLF_IDENTITY(int(3), (int(3)) - 0), int(3))))))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(3, int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (3))), int(3)))); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     do
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
    }
  }
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false)))))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(mat2(injectionSwitch, 1.0, 0.0))).y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     barrier();
    }
   else
    {
    }
  }
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, _GLF_IDENTITY(true, true && (true)), _GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), (false) && true), _GLF_IDENTITY(true, bool(bvec4(_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec3(true, true, false), bvec3(bvec4(_GLF_IDENTITY(bvec3(true, true, false), _GLF_IDENTITY(bvec3(bvec4(bvec3(true, true, false), false)), bvec3(bvec3(bvec3(bvec4(bvec3(true, true, false), false)))))), true))))), true, true, true))))))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   else
    {
     for(int _injected_loop_counter = _GLF_IDENTITY(_GLF_IDENTITY(1, max(_GLF_IDENTITY(1, (1) + (0 << _GLF_IDENTITY(int(8), int(8)))), 1)), (false ? _GLF_FUZZED(9540) : 1)); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 >> _GLF_IDENTITY(int(7), int(7)))); _injected_loop_counter --)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, 1.0 * (_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0)))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
      barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(injectionSwitch.x > injectionSwitch.y))), bool(bvec4(injectionSwitch.x > injectionSwitch.y, false, true, false)))))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false || (_GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), _GLF_IDENTITY(bool(bool(! ((false)))), bool(bvec2(bool(bool(! ((false)))), true)))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), (false ? _GLF_FUZZED(vec2(-5.0, -5.7)) : injectionSwitch)).x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 uint workgroup_base = workgroup_size * workgroup_id;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint virtual_gid = _GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_id * subgroup_size, max(subgroup_id * subgroup_size, subgroup_id * subgroup_size)), _GLF_IDENTITY(0u, max(0u, 0u)) ^ (_GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_id * subgroup_size, max(subgroup_id * subgroup_size, _GLF_IDENTITY(subgroup_id, 0u | (_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id)))) * subgroup_size)), clamp(workgroup_base + _GLF_IDENTITY(subgroup_id * subgroup_size, max(subgroup_id * subgroup_size, subgroup_id * subgroup_size)), workgroup_base + _GLF_IDENTITY(subgroup_id * subgroup_size, max(subgroup_id * subgroup_size, subgroup_id * subgroup_size)), _GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_id * subgroup_size, max(subgroup_id * subgroup_size, subgroup_id * subgroup_size)), ~ (~ (workgroup_base + _GLF_IDENTITY(subgroup_id * subgroup_size, max(subgroup_id * subgroup_size, subgroup_id * subgroup_size))))))))) + subgroup_local_id;
 uint next_virtual_gid = workgroup_base + subgroup_id * subgroup_size + _GLF_IDENTITY(((subgroup_local_id + 1) % subgroup_size), clamp(((subgroup_local_id + 1) % subgroup_size), ((subgroup_local_id + 1) % subgroup_size), (_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, ((subgroup_local_id + 1) % subgroup_size) / uint(_GLF_ONE(1.0, injectionSwitch.y))))));
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       barrier();
      }
    }
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(1.3) : injectionSwitch.x)) > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
        }
      }
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     do
      {
       do
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bvec3(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))), (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bvec3(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))))) && _GLF_IDENTITY(true, ! (! (true)))));
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         do
          {
           barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         do
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 barrier();
                }
              }
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) || false)));
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
         barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bvec3(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)))));
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    {
     do
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(bvec3(_GLF_DEAD(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true), bvec3(bvec3(bvec3(_GLF_DEAD(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)))))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))))))
      barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, true, true)))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   buf[virtual_gid] = 1;
  }
 if(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, clamp(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) << (13728u & 0u)) + 1, max(subgroup_local_id + 1, _GLF_IDENTITY(subgroup_local_id, 0u ^ (subgroup_local_id)) + 1)), _GLF_IDENTITY(subgroup_local_id + 1, uint(uvec3(subgroup_local_id + 1, 0u, 1u))), subgroup_local_id + 1)), (_GLF_IDENTITY(subgroup_local_id + 1, clamp(_GLF_IDENTITY(subgroup_local_id + 1, max(subgroup_local_id + 1, _GLF_IDENTITY(subgroup_local_id, 0u ^ (subgroup_local_id)) + 1)), _GLF_IDENTITY(subgroup_local_id + _GLF_IDENTITY(_GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(1, 0 ^ (_GLF_IDENTITY(1, min(1, 1)))))), (true ? _GLF_IDENTITY(_GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(1, 0 ^ (_GLF_IDENTITY(1, min(1, 1)))))), (_GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(1, 0 ^ (_GLF_IDENTITY(1, min(1, 1))))))) << 0) : _GLF_FUZZED(min((-80947 & 10698), 33591)))), uint(uvec3(subgroup_local_id + 1, 0u, 1u))), subgroup_local_id + 1))) >> 0u) < _GLF_IDENTITY(subgroup_size, 0u | (_GLF_IDENTITY(subgroup_size, max(subgroup_size, _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(_GLF_IDENTITY((subgroup_size), _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec3((subgroup_size), 1u, 1u), ~ (~ (uvec3((_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, (subgroup_size) * 1u)) | (subgroup_size))), 1u, 1u))))), ~ (~ _GLF_IDENTITY((uint(_GLF_IDENTITY(uvec3((subgroup_size), 1u, 1u), ~ (~ (uvec3((subgroup_size), 1u, 1u)))))), (_GLF_IDENTITY((uint(_GLF_IDENTITY(uvec3((subgroup_size), 1u, 1u), ~ (~ (uvec3((subgroup_size), 1u, 1u)))))), min((uint(_GLF_IDENTITY(uvec3((subgroup_size), 1u, 1u), ~ (~ (uvec3((subgroup_size), 1u, 1u)))))), (uint(_GLF_IDENTITY(uvec3((subgroup_size), 1u, 1u), ~ (~ (uvec3((subgroup_size), 1u, 1u))))))))) ^ 0u)))), (true ? _GLF_IDENTITY(_GLF_IDENTITY((subgroup_size), _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec3((subgroup_size), 1u, 1u), ~ (~ (uvec3((subgroup_size), 1u, 1u))))), ~ (~ _GLF_IDENTITY((uint(_GLF_IDENTITY(uvec3((subgroup_size), 1u, 1u), ~ (~ (uvec3((subgroup_size), 1u, 1u)))))), (_GLF_IDENTITY((uint(_GLF_IDENTITY(uvec3((subgroup_size), 1u, 1u), ~ (~ (uvec3((subgroup_size), 1u, 1u)))))), min((uint(_GLF_IDENTITY(uvec3((subgroup_size), 1u, 1u), ~ (~ (uvec3((subgroup_size), 1u, 1u)))))), (uint(_GLF_IDENTITY(uvec3((subgroup_size), 1u, 1u), ~ (~ (uvec3((subgroup_size), 1u, 1u))))))))) ^ 0u)))), ~ (~ _GLF_IDENTITY((_GLF_IDENTITY((subgroup_size), _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec3((subgroup_size), 1u, 1u), ~ (_GLF_IDENTITY(~ (uvec3((subgroup_size), 1u, 1u)), ~ (~ (~ _GLF_IDENTITY((uvec3((subgroup_size), 1u, 1u)), ((uvec3((subgroup_size), 1u, 1u))) | uvec3(0u, 0u, 0u)))))))), ~ (~ _GLF_IDENTITY((uint(_GLF_IDENTITY(uvec3((subgroup_size), 1u, 1u), ~ (~ (uvec3((subgroup_size), 1u, 1u)))))), (_GLF_IDENTITY((uint(_GLF_IDENTITY(uvec3((subgroup_size), 1u, 1u), ~ (~ (uvec3((subgroup_size), 1u, 1u)))))), min((uint(_GLF_IDENTITY(uvec3((_GLF_IDENTITY(subgroup_size, (subgroup_size) ^ 0u)), 1u, 1u), ~ (~ _GLF_IDENTITY((uvec3((subgroup_size), 1u, 1u)), (false ? _GLF_FUZZED(uvec3(61456u, 185584u, 81255u)) : _GLF_IDENTITY((uvec3(_GLF_IDENTITY((subgroup_size), uint(_GLF_IDENTITY(uvec2((subgroup_size), _GLF_IDENTITY(0u, (false ? _GLF_FUZZED(subgroup_id) : 0u))), uvec2(_GLF_IDENTITY(uvec4(uvec2((subgroup_size), _GLF_IDENTITY(0u, (false ? _GLF_FUZZED(subgroup_id) : 0u))), 1u, 0u), (uvec4(uvec2((subgroup_size), _GLF_IDENTITY(0u, (false ? _GLF_FUZZED(subgroup_id) : 0u))), 1u, 0u)) << uvec4(0u, 0u, 0u, 0u)))))), 1u, 1u)), ~ (~ (_GLF_IDENTITY((uvec3((subgroup_size), 1u, 1u)), ~ (~ (_GLF_IDENTITY((uvec3((subgroup_size), 1u, 1u)), ~ (~ ((uvec3((subgroup_size), 1u, 1u))))))))))))))))), (uint(_GLF_IDENTITY(uvec3((subgroup_size), 1u, 1u), ~ (~ (uvec3((subgroup_size), 1u, 1u))))))))) ^ 0u))))), ~ (~ ((_GLF_IDENTITY((subgroup_size), _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec3((subgroup_size), 1u, 1u), ~ (_GLF_IDENTITY(~ (uvec3((subgroup_size), 1u, 1u)), ~ (~ (~ (uvec3((subgroup_size), 1u, 1u)))))))), ~ (~ _GLF_IDENTITY((uint(_GLF_IDENTITY(uvec3((subgroup_size), _GLF_IDENTITY(1u, ~ (~ (1u))), 1u), ~ (~ (uvec3((subgroup_size), 1u, 1u)))))), (_GLF_IDENTITY((uint(_GLF_IDENTITY(uvec3((subgroup_size), 1u, 1u), ~ (~ (uvec3((subgroup_size), 1u, 1u)))))), min((uint(_GLF_IDENTITY(uvec3((_GLF_IDENTITY(subgroup_size, (subgroup_size) ^ 0u)), 1u, 1u), ~ (~ _GLF_IDENTITY((uvec3((subgroup_size), 1u, 1u)), (false ? _GLF_FUZZED(uvec3(61456u, 185584u, 81255u)) : _GLF_IDENTITY((uvec3((subgroup_size), 1u, 1u)), ~ (~ (_GLF_IDENTITY((uvec3((subgroup_size), 1u, 1u)), ~ (~ ((uvec3((subgroup_size), 1u, 1u)))))))))))))), _GLF_IDENTITY((uint(_GLF_IDENTITY(uvec3((subgroup_size), 1u, 1u), ~ (~ (uvec3((subgroup_size), 1u, 1u)))))), (_GLF_IDENTITY((uint(_GLF_IDENTITY(uvec3((subgroup_size), 1u, 1u), ~ (~ (uvec3((subgroup_size), 1u, 1u)))))), ((uint(_GLF_IDENTITY(uvec3((subgroup_size), 1u, 1u), ~ (~ (uvec3((subgroup_size), 1u, 1u))))))) | ((uint(_GLF_IDENTITY(uvec3((subgroup_size), 1u, 1u), ~ (~ (uvec3((subgroup_size), 1u, 1u))))))))) | (0u << _GLF_IDENTITY(uint(8u), uint(8u))))))) ^ 0u)))))))))) : _GLF_FUZZED((workgroup_size % 113656u)))) | (subgroup_size)), (_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(_GLF_IDENTITY((subgroup_size), _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec3((subgroup_size), 1u, 1u), ~ (~ (uvec3((_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, (subgroup_size) * 1u)) | (subgroup_size))), 1u, 1u))))), ~ (~ _GLF_IDENTITY((uint(_GLF_IDENTITY(uvec3((subgroup_size), 1u, 1u), ~ (~ (uvec3((subgroup_size), 1u, 1u)))))), (_GLF_IDENTITY((uint(_GLF_IDENTITY(uvec3((subgroup_size), 1u, 1u), ~ (~ (uvec3((subgroup_size), 1u, 1u)))))), min((uint(_GLF_IDENTITY(uvec3((subgroup_size), 1u, 1u), ~ (~ (uvec3((subgroup_size), 1u, 1u)))))), (uint(_GLF_IDENTITY(uvec3((subgroup_size), 1u, 1u), ~ (~ (uvec3((subgroup_size), 1u, 1u))))))))) ^ 0u)))), (true ? _GLF_IDENTITY(_GLF_IDENTITY((subgroup_size), _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec3((subgroup_size), 1u, 1u), ~ (~ (uvec3((subgroup_size), 1u, 1u))))), ~ (~ _GLF_IDENTITY((uint(_GLF_IDENTITY(uvec3((subgroup_size), 1u, 1u), ~ (~ (uvec3((subgroup_size), 1u, 1u)))))), (_GLF_IDENTITY((uint(_GLF_IDENTITY(uvec3((subgroup_size), 1u, 1u), ~ (~ (uvec3((subgroup_size), 1u, 1u)))))), min((uint(_GLF_IDENTITY(uvec3((subgroup_size), 1u, 1u), ~ (~ (uvec3((subgroup_size), 1u, 1u)))))), (uint(_GLF_IDENTITY(uvec3((subgroup_size), 1u, 1u), ~ (~ (uvec3((subgroup_size), 1u, 1u))))))))) ^ 0u)))), ~ (~ _GLF_IDENTITY((_GLF_IDENTITY((subgroup_size), _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec3((subgroup_size), 1u, 1u), ~ (_GLF_IDENTITY(~ (uvec3((subgroup_size), 1u, 1u)), ~ (~ (~ _GLF_IDENTITY((uvec3((subgroup_size), 1u, 1u)), ((uvec3((subgroup_size), 1u, 1u))) | uvec3(0u, 0u, 0u)))))))), ~ (~ _GLF_IDENTITY((uint(_GLF_IDENTITY(uvec3((subgroup_size), 1u, 1u), ~ (~ (uvec3((subgroup_size), 1u, 1u)))))), (_GLF_IDENTITY((uint(_GLF_IDENTITY(uvec3((subgroup_size), 1u, 1u), ~ (~ (uvec3((subgroup_size), 1u, 1u)))))), min((uint(_GLF_IDENTITY(uvec3((_GLF_IDENTITY(subgroup_size, (subgroup_size) ^ 0u)), 1u, 1u), ~ (~ _GLF_IDENTITY((uvec3((subgroup_size), 1u, 1u)), (false ? _GLF_FUZZED(uvec3(61456u, 185584u, 81255u)) : _GLF_IDENTITY((uvec3(_GLF_IDENTITY((subgroup_size), uint(_GLF_IDENTITY(uvec2((subgroup_size), _GLF_IDENTITY(0u, (false ? _GLF_FUZZED(subgroup_id) : 0u))), uvec2(_GLF_IDENTITY(uvec4(uvec2((subgroup_size), _GLF_IDENTITY(0u, (false ? _GLF_FUZZED(subgroup_id) : 0u))), 1u, 0u), (uvec4(uvec2((subgroup_size), _GLF_IDENTITY(0u, (false ? _GLF_FUZZED(subgroup_id) : 0u))), 1u, 0u)) << uvec4(0u, 0u, 0u, 0u)))))), 1u, 1u)), ~ (~ (_GLF_IDENTITY((uvec3((subgroup_size), 1u, 1u)), ~ (~ (_GLF_IDENTITY((uvec3((subgroup_size), 1u, 1u)), ~ (~ ((uvec3((subgroup_size), 1u, 1u))))))))))))))))), (uint(_GLF_IDENTITY(uvec3((subgroup_size), 1u, 1u), ~ (~ (uvec3((subgroup_size), 1u, 1u))))))))) ^ 0u))))), ~ (~ ((_GLF_IDENTITY((subgroup_size), _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec3((subgroup_size), 1u, 1u), ~ (_GLF_IDENTITY(~ (uvec3((subgroup_size), 1u, 1u)), ~ (~ (~ (uvec3((subgroup_size), 1u, 1u)))))))), ~ (~ _GLF_IDENTITY((uint(_GLF_IDENTITY(uvec3((subgroup_size), _GLF_IDENTITY(1u, ~ (~ (1u))), 1u), ~ (~ (uvec3((subgroup_size), 1u, 1u)))))), (_GLF_IDENTITY((uint(_GLF_IDENTITY(uvec3((subgroup_size), 1u, 1u), ~ (~ (uvec3((subgroup_size), 1u, 1u)))))), min((uint(_GLF_IDENTITY(uvec3((_GLF_IDENTITY(subgroup_size, (subgroup_size) ^ 0u)), 1u, 1u), ~ (~ _GLF_IDENTITY((uvec3((subgroup_size), 1u, 1u)), (false ? _GLF_FUZZED(uvec3(61456u, 185584u, 81255u)) : _GLF_IDENTITY((uvec3((subgroup_size), 1u, 1u)), ~ (~ (_GLF_IDENTITY((uvec3((subgroup_size), 1u, 1u)), ~ (~ ((uvec3((subgroup_size), 1u, 1u)))))))))))))), _GLF_IDENTITY((uint(_GLF_IDENTITY(uvec3((subgroup_size), 1u, 1u), ~ (~ (uvec3((subgroup_size), 1u, 1u)))))), (_GLF_IDENTITY((uint(_GLF_IDENTITY(uvec3((subgroup_size), 1u, 1u), ~ (~ (uvec3((subgroup_size), 1u, 1u)))))), ((uint(_GLF_IDENTITY(uvec3((subgroup_size), 1u, 1u), ~ (~ (uvec3((subgroup_size), 1u, 1u))))))) | ((uint(_GLF_IDENTITY(uvec3((subgroup_size), 1u, 1u), ~ (~ (uvec3((subgroup_size), 1u, 1u))))))))) | (0u << _GLF_IDENTITY(uint(8u), uint(8u))))))) ^ 0u)))))))))) : _GLF_FUZZED((workgroup_size % 113656u)))) | (subgroup_size))) | (_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(_GLF_IDENTITY((subgroup_size), _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec3((subgroup_size), 1u, 1u), ~ (~ (uvec3((_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, (subgroup_size) * 1u)) | (subgroup_size))), 1u, 1u))))), ~ (~ _GLF_IDENTITY((uint(_GLF_IDENTITY(uvec3((subgroup_size), 1u, 1u), ~ (~ (uvec3((subgroup_size), 1u, 1u)))))), (_GLF_IDENTITY((uint(_GLF_IDENTITY(uvec3((subgroup_size), 1u, 1u), ~ (~ (uvec3((subgroup_size), 1u, 1u)))))), min((uint(_GLF_IDENTITY(uvec3((subgroup_size), 1u, 1u), ~ (~ (uvec3((subgroup_size), 1u, 1u)))))), (uint(_GLF_IDENTITY(uvec3((subgroup_size), 1u, 1u), ~ (~ (uvec3((subgroup_size), 1u, 1u))))))))) ^ 0u)))), (true ? _GLF_IDENTITY(_GLF_IDENTITY((subgroup_size), _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec3((subgroup_size), 1u, 1u), ~ (~ (uvec3((subgroup_size), 1u, 1u))))), ~ (~ _GLF_IDENTITY((uint(_GLF_IDENTITY(uvec3((subgroup_size), 1u, 1u), ~ (~ (uvec3((subgroup_size), 1u, 1u)))))), (_GLF_IDENTITY((uint(_GLF_IDENTITY(uvec3((subgroup_size), 1u, 1u), ~ (~ (uvec3((subgroup_size), 1u, 1u)))))), min((uint(_GLF_IDENTITY(uvec3((subgroup_size), 1u, 1u), ~ (~ (uvec3((subgroup_size), 1u, 1u)))))), (uint(_GLF_IDENTITY(uvec3((subgroup_size), 1u, 1u), ~ (~ (uvec3((subgroup_size), 1u, 1u))))))))) ^ 0u)))), ~ (~ _GLF_IDENTITY((_GLF_IDENTITY((subgroup_size), _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec3((subgroup_size), 1u, 1u), ~ (_GLF_IDENTITY(~ (uvec3((subgroup_size), 1u, 1u)), ~ (~ (~ _GLF_IDENTITY((uvec3((subgroup_size), 1u, 1u)), ((uvec3((subgroup_size), 1u, 1u))) | uvec3(0u, 0u, 0u)))))))), ~ (~ _GLF_IDENTITY((uint(_GLF_IDENTITY(uvec3((subgroup_size), 1u, 1u), ~ (~ (uvec3((subgroup_size), 1u, 1u)))))), (_GLF_IDENTITY((uint(_GLF_IDENTITY(uvec3((subgroup_size), 1u, 1u), ~ (~ (uvec3((subgroup_size), 1u, 1u)))))), min((uint(_GLF_IDENTITY(uvec3((_GLF_IDENTITY(subgroup_size, (subgroup_size) ^ 0u)), 1u, 1u), ~ (~ _GLF_IDENTITY((uvec3((subgroup_size), 1u, 1u)), (false ? _GLF_FUZZED(uvec3(61456u, 185584u, 81255u)) : _GLF_IDENTITY((uvec3(_GLF_IDENTITY((subgroup_size), uint(_GLF_IDENTITY(uvec2((subgroup_size), _GLF_IDENTITY(0u, (false ? _GLF_FUZZED(subgroup_id) : 0u))), uvec2(_GLF_IDENTITY(uvec4(uvec2((subgroup_size), _GLF_IDENTITY(0u, (false ? _GLF_FUZZED(subgroup_id) : 0u))), 1u, 0u), (uvec4(uvec2((subgroup_size), _GLF_IDENTITY(0u, (false ? _GLF_FUZZED(subgroup_id) : 0u))), 1u, 0u)) << uvec4(0u, 0u, 0u, 0u)))))), 1u, 1u)), ~ (~ (_GLF_IDENTITY((uvec3((subgroup_size), 1u, 1u)), ~ (~ (_GLF_IDENTITY((uvec3((subgroup_size), 1u, 1u)), ~ (~ ((uvec3((subgroup_size), 1u, 1u))))))))))))))))), (uint(_GLF_IDENTITY(uvec3((subgroup_size), 1u, 1u), ~ (~ (uvec3((subgroup_size), 1u, 1u))))))))) ^ 0u))))), ~ (~ ((_GLF_IDENTITY((subgroup_size), _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec3((subgroup_size), 1u, 1u), ~ (_GLF_IDENTITY(~ (uvec3((subgroup_size), 1u, 1u)), ~ (~ (~ (uvec3((subgroup_size), 1u, 1u)))))))), ~ (~ _GLF_IDENTITY((uint(_GLF_IDENTITY(uvec3((subgroup_size), _GLF_IDENTITY(1u, ~ (~ (1u))), 1u), ~ (~ (uvec3((subgroup_size), 1u, 1u)))))), (_GLF_IDENTITY((uint(_GLF_IDENTITY(uvec3((subgroup_size), 1u, 1u), ~ (~ (uvec3((subgroup_size), 1u, 1u)))))), min((uint(_GLF_IDENTITY(uvec3((_GLF_IDENTITY(subgroup_size, (subgroup_size) ^ 0u)), 1u, 1u), ~ (~ _GLF_IDENTITY((uvec3((subgroup_size), 1u, 1u)), (false ? _GLF_FUZZED(uvec3(61456u, 185584u, 81255u)) : _GLF_IDENTITY((uvec3((subgroup_size), 1u, 1u)), ~ (~ (_GLF_IDENTITY((uvec3((subgroup_size), 1u, 1u)), ~ (~ ((uvec3((subgroup_size), 1u, 1u)))))))))))))), _GLF_IDENTITY((uint(_GLF_IDENTITY(uvec3((subgroup_size), 1u, 1u), ~ (~ (uvec3((subgroup_size), 1u, 1u)))))), (_GLF_IDENTITY((uint(_GLF_IDENTITY(uvec3((subgroup_size), 1u, 1u), ~ (~ (uvec3((subgroup_size), 1u, 1u)))))), ((uint(_GLF_IDENTITY(uvec3((subgroup_size), 1u, 1u), ~ (~ (uvec3((subgroup_size), 1u, 1u))))))) | ((uint(_GLF_IDENTITY(uvec3((subgroup_size), 1u, 1u), ~ (~ (uvec3((subgroup_size), 1u, 1u))))))))) | (0u << _GLF_IDENTITY(uint(8u), uint(8u))))))) ^ 0u)))))))))) : _GLF_FUZZED((workgroup_size % 113656u)))) | (subgroup_size)))))))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, min(1, 1))); _injected_loop_counter ++)
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           barrier();
          }
         else
          {
          }
         if(_GLF_DEAD(false))
          barrier();
        }
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     atomicStore(buf[next_virtual_gid], uint(2), 4, 64, 4);
     for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(1), int(1))); _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
        barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-5065.0197)), float(injectionSwitch.x), bool(true))), injectionSwitch.x)) > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED((9.6 * float(true)))), float(injectionSwitch.y), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))), bool(bvec3(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-5065.0197)), float(injectionSwitch.x), bool(true))), injectionSwitch.x)) > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED((9.6 * float(true)))), float(injectionSwitch.y), bool(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-1.1) : injectionSwitch.y))))))))), false, false)))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            {
             do
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(false))
                barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
             barrier();
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)))
            barrier();
           do
            {
             do
              {
               if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), (false) && true)))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 do
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   if(_GLF_DEAD(false))
                    barrier();
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   if(_GLF_DEAD(false))
                    {
                     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) | (_injected_loop_counter))) + 0) > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
                      {
                       barrier();
                      }
                    }
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
                      barrier();
                    }
                   barrier();
                  }
                 if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    {
                     if(_GLF_WRAPPED_IF_TRUE(true))
                      {
                       if(_GLF_DEAD(false))
                        barrier();
                       barrier();
                      }
                     else
                      {
                       if(_GLF_DEAD(false))
                        barrier();
                      }
                     if(_GLF_DEAD(false))
                      barrier();
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                    }
                   barrier();
                  }
                 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
                  barrier();
                 barrier();
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
          }
         else
          {
          }
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         else
          {
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)))))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
          }
         do
          {
           if(_GLF_DEAD(false))
            barrier();
           do
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x)) > injectionSwitch.y))));
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), ! (! (_GLF_IDENTITY(false, _GLF_IDENTITY(true && (false), (_GLF_IDENTITY(true && (false), ! (! (true && (false))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))))
            barrier();
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
              barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
             barrier();
            }
           barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))));
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       do
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(true, false, true), bvec3(bvec4(_GLF_IDENTITY(bvec3(true, false, true), bvec3(bvec3(bvec3(true, false, true)))), true)))), false || (_GLF_IDENTITY(bool(bvec3(true, false, true)), bool(bvec3(_GLF_IDENTITY(bool(bvec3(true, false, _GLF_IDENTITY(true, (_GLF_IDENTITY(true, true && (true))) && true))), true && (bool(bvec3(true, false, true)))), _GLF_IDENTITY(false, ! (! (false))), true)))))), (_GLF_IDENTITY(injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(-5.0, (-5.0) - 0.0)), (false ? _GLF_IDENTITY(_GLF_FUZZED(5.0), (_GLF_FUZZED(5.0)) - 0.0) : _GLF_FUZZED(-5.0))) : injectionSwitch.y)))), _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y)), bool(bool(_GLF_IDENTITY(injectionSwitch.x < _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_IDENTITY(_GLF_FUZZED(-5.0), (false ? _GLF_FUZZED(5.0) : _GLF_FUZZED(-5.0))) : injectionSwitch.y)))), _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y)), min(_GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_IDENTITY(_GLF_FUZZED(-5.0), (false ? _GLF_FUZZED(5.0) : _GLF_FUZZED(-5.0))) : injectionSwitch.y)))), _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y)), _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_IDENTITY(_GLF_FUZZED(-5.0), (false ? _GLF_FUZZED(5.0) : _GLF_FUZZED(-5.0))) : injectionSwitch.y)))), _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y)))), bool(bvec4(_GLF_IDENTITY(injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_IDENTITY(_GLF_FUZZED(-5.0), (false ? _GLF_FUZZED(5.0) : _GLF_FUZZED(-5.0))) : injectionSwitch.y)))), _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y)), true && (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_IDENTITY(_GLF_FUZZED(-5.0), (false ? _GLF_FUZZED(5.0) : _GLF_FUZZED(-5.0))) : injectionSwitch.y)))), _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y)))), true, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))), true && (_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), true && ((injectionSwitch.x < injectionSwitch.y))))))))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               barrier();
              }
             else
              {
              }
            }
           barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-26.26), _GLF_FUZZED(-9.9)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))).x > injectionSwitch.y))))
            barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   else
    {
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   do
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     subgroupAll(false);
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, false, false)))))
    barrier();
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   do
    {
     if(_GLF_DEAD(false))
      barrier();
     do
      {
       if(_GLF_DEAD(false))
        {
         do
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (true ? _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + 0.0) : _GLF_FUZZED(8.4))))) > injectionSwitch.y))), bool(bool(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(6050.8697), _GLF_FUZZED(-1.6)), bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))).x > injectionSwitch.y)))))))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
          barrier();
         if(_GLF_DEAD(false))
          {
           do
            {
             barrier();
             if(_GLF_DEAD(false))
              barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         continue;
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       atomicStore(buf[next_virtual_gid], uint(2), 4, _GLF_IDENTITY(64, 0 | (64)), 4);
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec4(bvec2(false, false), _GLF_FALSE(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false)), (injectionSwitch.x > injectionSwitch.y)), false)))), bool(bvec2(bool(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec4(bvec2(false, false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)))), false)))), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(_GLF_IDENTITY(-4.2, (_GLF_IDENTITY(-4.2, mix(float(_GLF_FUZZED(-3.8)), float(-4.2), bool(true)))) / 1.0))), float(injectionSwitch.y), _GLF_IDENTITY(bool(true), (bool(true)) && true))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-4.2)), float(injectionSwitch.y), bool(true)))) && true), ! (! (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-4.2)), float(injectionSwitch.y), bool(_GLF_IDENTITY(true, bool(bvec3(_GLF_IDENTITY(true, (true) || false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(_GLF_IDENTITY(-4.2, float(vec3(-4.2, cos(0.0), 1.0))))), float(injectionSwitch.y), bool(true)))) && true))))), (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-4.2)), float(injectionSwitch.y), bool(true))), _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-4.2)), float(injectionSwitch.y), bool(true)))) && true, ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-4.2)), float(injectionSwitch.y), bool(true)))) && true) && true)), ! (! (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-4.2)), float(injectionSwitch.y), bool(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(true, (true) || false), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(true, (true) || false), false)), (bool(bvec2(_GLF_IDENTITY(true, (true) || false), false))) || false)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), ! (! (bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(true, (true) || false), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(true, (true) || false), false)), (bool(bvec2(_GLF_IDENTITY(true, (true) || false), false))) || false)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(_GLF_IDENTITY(-4.2, float(vec3(-4.2, cos(0.0), 1.0))))), float(injectionSwitch.y), bool(true)))) && true))))), bool(bool((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), mix(float(_GLF_FUZZED(-4.2)), float(injectionSwitch.y), bool(true))), _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-4.2)), float(injectionSwitch.y), bool(true)))), bool(bvec4((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-4.2)), float(injectionSwitch.y), bool(true)))), false, false, false))) && true), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-4.2)), float(injectionSwitch.y), bool(_GLF_IDENTITY(true, bool(bvec3(_GLF_IDENTITY(true, (true) || false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(_GLF_IDENTITY(-4.2, float(vec3(-4.2, cos(0.0), 1.0))))), float(injectionSwitch.y), bool(true)))) && true)), false || (! (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-4.2)), float(injectionSwitch.y), bool(_GLF_IDENTITY(true, bool(bvec3(_GLF_IDENTITY(true, (true) || false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), bool(bvec3(_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ((injectionSwitch.x < injectionSwitch.y)) && true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)))))))))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(_GLF_IDENTITY(-4.2, float(vec3(-4.2, cos(0.0), 1.0))))), float(injectionSwitch.y), bool(true)))) && true))))))))))) && true))));
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))));
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   else
    {
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, false, false, false)), true && (bool(bvec4(false, false, false, false)))))), bool(bvec3(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec4(false, false, false, false)), true && (bool(bvec4(false, false, false, false)))), true && (_GLF_IDENTITY(_GLF_IDENTITY(bool(bvec4(false, false, false, false)), true && (bool(bvec4(false, false, false, false)))), (_GLF_IDENTITY(bool(bvec4(false, false, false, false)), true && (bool(bvec4(false, false, false, false))))) && true))))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           barrier();
          }
        }
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   subgroupAll(true);
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     else
      {
      }
    }
   for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > (_GLF_IDENTITY(_GLF_IDENTITY(0, int(ivec2(0, 1))) << _GLF_IDENTITY(int(8), _GLF_IDENTITY(int(_GLF_IDENTITY(8, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(8, int(ivec4(8, 1, 1, 1)))), max(~ (_GLF_IDENTITY(8, int(ivec4(8, _GLF_IDENTITY(1, 0 | (1)), 1, 1)))), ~ (_GLF_IDENTITY(8, int(ivec4(8, 1, 1, 1))))))))), clamp(int(8), int(8), int(8)))), int(ivec2(_GLF_IDENTITY(0 << _GLF_IDENTITY(int(_GLF_IDENTITY(8, int(_GLF_IDENTITY(ivec2(_GLF_IDENTITY(8, (8) >> 0), 0), (ivec2(_GLF_IDENTITY(8, _GLF_IDENTITY((8) >> 0, (_GLF_IDENTITY((8), ((8)) | ((8))) >> 0) - 0)), 0)) | (ivec2(_GLF_IDENTITY(8, (8) >> 0), 0)))))), _GLF_IDENTITY(int(_GLF_IDENTITY(8, (8) | (8))), clamp(int(8), int(8), int(8)))), (true ? 0 << _GLF_IDENTITY(_GLF_IDENTITY(int(8), min(_GLF_IDENTITY(int(8), 0 + (int(8))), _GLF_IDENTITY(int(8), ~ (~ (int(8)))))), _GLF_IDENTITY(int(8), clamp(int(8), _GLF_IDENTITY(int(8), 0 | (int(8))), int(8)))) : _GLF_FUZZED(-25952))), 0))))); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   do
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false)))) || false))
    {
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
