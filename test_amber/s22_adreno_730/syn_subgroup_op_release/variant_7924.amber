#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(mat2(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), abs(1.0), 1.0, 1.0))) > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    return;
   barrier();
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(7011.8086) : _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))), (_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(7011.8086) : _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))), bool(bvec2((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(7011.8086) : _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))), false)))) || false))))
  barrier();
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(false))
  barrier();
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(vec4(injectionSwitch, 1.0, 0.0)))) * vec2(1.0, 1.0)).y))))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false))))), false || (bool(_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false))))))), ! (! (bool(_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false))))))))), false || (bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(bool(_GLF_DEAD(false)), (bool(_GLF_DEAD(false))) || false)))), _GLF_IDENTITY(! (! (bool(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bool(_GLF_DEAD(false))), (bool(bool(_GLF_DEAD(false)))) && true))))), _GLF_IDENTITY(bool(bvec2(! (! (bool(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bool(_GLF_DEAD(false))), (bool(bool(_GLF_DEAD(false)))) && true))))), false)), ! (! (bool(bvec2(! (! (bool(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bool(_GLF_DEAD(false))), (bool(bool(_GLF_DEAD(false)))) && true))))), false))))))))))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || false)) || false)))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 uint num_workgroup = _GLF_IDENTITY(gl_NumWorkGroups.x, _GLF_IDENTITY(0u, max(0u, 0u)) | (_GLF_IDENTITY(gl_NumWorkGroups.x, (gl_NumWorkGroups.x) | (gl_NumWorkGroups.x))));
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     barrier();
    }
   return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_DEAD(false))
  return;
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(false, true, false, true))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bvec4(false, true, false, true)))), (! (_GLF_IDENTITY(false, bool(bvec4(false, true, false, true))))) || false)))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), min(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), min(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)))))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)))).y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
    barrier();
   barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) && _GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), true && ((injectionSwitch.x < injectionSwitch.y)))) || false)))))))
    barrier();
  }
 uint workgroup_base = _GLF_IDENTITY(workgroup_size, (_GLF_IDENTITY(workgroup_size, (workgroup_size) >> uint(_GLF_ZERO(0.0, injectionSwitch.x)))) / 1u) * workgroup_id;
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(_GLF_IDENTITY(bvec2(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false), bvec2(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec2(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false), bvec2(bvec2(bvec2(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false)))), true), bvec3(bvec3(bvec3(bvec2(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false), true)))))))))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (false))))))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], max(injectionSwitch[0], injectionSwitch[0])), injectionSwitch[1])))).y)), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false)))), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], max(injectionSwitch[0], injectionSwitch[0])), injectionSwitch[1])))).y)), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false)))), ! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], max(injectionSwitch[0], injectionSwitch[0])), injectionSwitch[1])))).y)), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false)))), ! (! (_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], max(injectionSwitch[0], injectionSwitch[0])), injectionSwitch[1])))).y)), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false)))))))))), true, false, true)), (bool(bvec4(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], max(injectionSwitch[0], injectionSwitch[0])), injectionSwitch[1])))).y)), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false)))), ! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], max(injectionSwitch[0], injectionSwitch[0])), injectionSwitch[1])))).y)), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false)))), ! (! (_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], max(injectionSwitch[0], injectionSwitch[0])), injectionSwitch[1])))).y)), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false)))))))))), true, false, true))) || false)))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
     barrier();
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec3(false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, 1.0 * (injectionSwitch.y))))))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bool(false)))) && true)))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
    }
   barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
  return;
 uint virtual_gid = _GLF_IDENTITY(workgroup_base, (workgroup_base) >> 0u) + _GLF_IDENTITY(subgroup_id, clamp(_GLF_IDENTITY(subgroup_id, max(subgroup_id, subgroup_id)), subgroup_id, _GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id)))) * subgroup_size + _GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, ~ (~ (subgroup_local_id)))) * 1u, ~ (~ (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, ~ (~ (subgroup_local_id)))), uint(uvec3((_GLF_IDENTITY(subgroup_local_id, ~ (~ (subgroup_local_id)))), 1u, 1u))) * 1u))));
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 uint next_virtual_gid = workgroup_base + subgroup_id * subgroup_size + ((subgroup_local_id + 1) % subgroup_size);
 buf[virtual_gid] = 1;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(false), (bool(false)) || false)), (bool(_GLF_IDENTITY(bool(false), (bool(false)) || false))) && true))), (_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), (bool(false)) || false))))) || false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(subgroup_local_id + 1 < subgroup_size)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(vec2(injectionSwitch.y, 0.0)))))))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), false, true, true))))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(4178.3650, -83.38)) : injectionSwitch)).y))))
      barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec2(false, true)))) || false)))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, false, true, false)), (bool(bvec4(false, false, true, false))) && true))))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, (false) || false)), true && (_GLF_IDENTITY(bool(_GLF_IDENTITY(false, (false) || false)), (bool(_GLF_IDENTITY(false, (false) || false))) && true))), bool(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, (false) || false)), true && (_GLF_IDENTITY(bool(_GLF_IDENTITY(false, (false) || false)), (bool(_GLF_IDENTITY(false, (false) || false))) && true))))))), (bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, (false) || false)), true && (_GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, (false) || false)), (bool(_GLF_IDENTITY(false, (false) || false))) && true), true && (_GLF_IDENTITY(bool(_GLF_IDENTITY(false, (false) || _GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false)))), (bool(_GLF_IDENTITY(false, (false) || false))) && true))))))) || false))), _GLF_IDENTITY((_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false))))) && true, ! (_GLF_IDENTITY(! ((_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), _GLF_IDENTITY(true && (bool(false)), (true && (bool(false))) && true)))))) && true), _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - _GLF_IDENTITY(vec2(0.0, 0.0), vec2(_GLF_IDENTITY(vec2(vec2(0.0, 0.0)), mat2(1.0) * (vec2(vec2(0.0, 0.0))))))).y)) || (! ((_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false))))) && true)))))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
       barrier();
      }
     barrier();
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       return;
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
     barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), false || (_GLF_IDENTITY(bool(bool(false)), true && (bool(bool(false)))))))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (! (false)))))))
          {
           if(_GLF_DEAD(false))
            return;
           barrier();
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         if(_GLF_DEAD(false))
          return;
         barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y))))))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         if(_GLF_DEAD(false))
          return;
         return;
        }
       barrier();
       if(_GLF_DEAD(false))
        return;
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, true, false)))))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, true, false)))))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              return;
             barrier();
            }
           barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
         barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), ! (! (_GLF_IDENTITY(false, false || _GLF_IDENTITY((false), bool(_GLF_IDENTITY(bvec2((false), false), bvec2(bvec2(bvec2((false), false)))))))))))), (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             return;
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
        }
       barrier();
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
      }
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true))
      return;
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   atomicStore(buf[next_virtual_gid], _GLF_IDENTITY(_GLF_IDENTITY(uint(2), _GLF_IDENTITY((uint(2)) | (uint(2)), uint(uvec2((uint(2)) | _GLF_IDENTITY((uint(2)), min((uint(2)), _GLF_IDENTITY((uint(2)), ~ (~ ((uint(2))))))), ((0u << _GLF_IDENTITY(uint(_GLF_IDENTITY(1u, min(1u, 1u))), uint(1u))) >> _GLF_IDENTITY(uint(4u), uint(4u))))))), (uint(_GLF_IDENTITY(_GLF_IDENTITY(2, int(_GLF_IDENTITY(ivec2(2, 1), min(ivec2(2, 1), _GLF_IDENTITY(ivec2(2, 1), _GLF_IDENTITY(ivec2(_GLF_IDENTITY(_GLF_IDENTITY(ivec3(ivec2(2, 1), (1 | 1)), ivec3(1, 1, 1) * (ivec3(ivec2(_GLF_IDENTITY(2, (_GLF_IDENTITY(2, int(ivec4(2, 1, ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1))), 1)))) | (2)), 1), (1 | 1)))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(ivec3(ivec2(2, 1), (1 | 1)), ivec3(1, 1, 1) * (ivec3(ivec2(2, 1), (1 | 1)))), max(_GLF_IDENTITY(ivec3(ivec2(2, 1), (1 | 1)), ivec3(1, 1, 1) * (ivec3(ivec2(2, 1), (1 | 1)))), _GLF_IDENTITY(ivec3(ivec2(2, 1), (1 | 1)), ivec3(1, 1, 1) * (ivec3(ivec2(2, 1), (1 | 1)))))), (_GLF_IDENTITY(ivec3(ivec2(2, 1), (1 | _GLF_IDENTITY(_GLF_IDENTITY(1, (false ? _GLF_FUZZED(bitfieldInsert(-45272, (~ -66281), (-79930 - -69255), 44271)) : 1)), (_GLF_IDENTITY(1, (_GLF_IDENTITY(false ? _GLF_FUZZED(bitfieldInsert(-45272, (~ _GLF_IDENTITY(-66281, 1 * (-66281))), (-79930 - -69255), 44271)) : 1, _GLF_IDENTITY(int(_GLF_IDENTITY(ivec2(false ? _GLF_FUZZED(bitfieldInsert(-45272, (~ _GLF_IDENTITY(-66281, 1 * (-66281))), (-79930 - -69255), 44271)) : 1, 0), clamp(_GLF_IDENTITY(ivec2(false ? _GLF_FUZZED(bitfieldInsert(-45272, (~ _GLF_IDENTITY(-66281, 1 * (-66281))), (-79930 - -69255), 44271)) : 1, 0), (ivec2(false ? _GLF_FUZZED(bitfieldInsert(-45272, (~ _GLF_IDENTITY(-66281, 1 * (-66281))), (-79930 - -69255), 44271)) : 1, 0)) >> ivec2(0, 0)), ivec2(false ? _GLF_FUZZED(bitfieldInsert(-45272, (~ _GLF_IDENTITY(-66281, 1 * (-66281))), (-79930 - -69255), 44271)) : 1, 0), ivec2(false ? _GLF_FUZZED(bitfieldInsert(-45272, (~ _GLF_IDENTITY(-66281, 1 * (-66281))), (-79930 - -69255), 44271)) : 1, 0)))), max(int(_GLF_IDENTITY(ivec2(false ? _GLF_FUZZED(bitfieldInsert(-45272, (~ _GLF_IDENTITY(-66281, 1 * (-66281))), (-79930 - -69255), 44271)) : 1, 0), clamp(_GLF_IDENTITY(ivec2(false ? _GLF_FUZZED(bitfieldInsert(-45272, (~ _GLF_IDENTITY(-66281, 1 * (-66281))), (-79930 - -69255), 44271)) : 1, 0), (ivec2(false ? _GLF_FUZZED(bitfieldInsert(-45272, (~ _GLF_IDENTITY(-66281, 1 * (-66281))), (-79930 - -69255), 44271)) : 1, 0)) >> ivec2(0, 0)), ivec2(false ? _GLF_FUZZED(bitfieldInsert(-45272, (~ _GLF_IDENTITY(-66281, 1 * (-66281))), (-79930 - -69255), 44271)) : 1, 0), ivec2(false ? _GLF_FUZZED(bitfieldInsert(-45272, (~ _GLF_IDENTITY(-66281, 1 * (-66281))), (-79930 - -69255), 44271)) : 1, 0)))), int(_GLF_IDENTITY(ivec2(false ? _GLF_FUZZED(bitfieldInsert(-45272, (~ _GLF_IDENTITY(-66281, 1 * (-66281))), (-79930 - -69255), 44271)) : 1, 0), clamp(_GLF_IDENTITY(ivec2(false ? _GLF_FUZZED(bitfieldInsert(-45272, (~ _GLF_IDENTITY(-66281, 1 * (-66281))), (-79930 - -69255), 44271)) : 1, 0), (ivec2(false ? _GLF_FUZZED(bitfieldInsert(-45272, (~ _GLF_IDENTITY(-66281, 1 * (-66281))), (-79930 - -69255), 44271)) : 1, 0)) >> ivec2(0, 0)), ivec2(false ? _GLF_FUZZED(bitfieldInsert(-45272, (~ _GLF_IDENTITY(-66281, 1 * (-66281))), (-79930 - -69255), 44271)) : 1, 0), ivec2(false ? _GLF_FUZZED(bitfieldInsert(-45272, (~ _GLF_IDENTITY(-66281, 1 * (-66281))), (-79930 - -69255), 44271)) : 1, 0)))))))))) / ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7)))))), ivec3(1, 1, 1) * (ivec3(ivec2(2, 1), (1 | 1))))) << (ivec3(0, 0, 0) | ivec3(0, 0, 0)))) + ivec3(0, 0, 0))), (_GLF_IDENTITY(ivec2(_GLF_IDENTITY(ivec3(ivec2(2, 1), (1 | 1)), ivec3(1, 1, 1) * (ivec3(ivec2(2, 1), (1 | 1))))), (ivec2(_GLF_IDENTITY(ivec3(ivec2(2, 1), (1 | 1)), ivec3(1, 1, 1) * (_GLF_IDENTITY(ivec3(ivec2(2, 1), (1 | 1)), (ivec3(_GLF_IDENTITY(ivec2(2, 1), min(ivec2(2, 1), _GLF_IDENTITY(ivec2(2, 1), (ivec2(2, 1)) >> ivec2(0, 0)))), (1 | 1))) << ivec3(0, 0, 0)))))) | (ivec2(_GLF_IDENTITY(ivec3(ivec2(2, 1), (1 | 1)), ivec3(1, 1, 1) * (ivec3(ivec2(2, 1), _GLF_IDENTITY((1 | 1), ((0 << _GLF_IDENTITY(int(8), int(8))) >> _GLF_IDENTITY(int(8), int(8))) ^ ((1 | 1)))))))))) - ivec2(0, 0))))))), min(_GLF_IDENTITY(_GLF_IDENTITY(2, int(_GLF_IDENTITY(_GLF_IDENTITY(ivec2(2, 1), min(ivec2(2, 1), _GLF_IDENTITY(ivec2(2, 1), _GLF_IDENTITY(ivec2(_GLF_IDENTITY(ivec3(ivec2(2, 1), (1 | 1)), ivec3(1, 1, 1) * (ivec3(ivec2(2, 1), (1 | 1))))), (_GLF_IDENTITY(ivec2(_GLF_IDENTITY(ivec3(ivec2(2, 1), (1 | 1)), ivec3(1, 1, 1) * (ivec3(ivec2(2, _GLF_IDENTITY(1, (1) - 0)), (1 | 1))))), (ivec2(_GLF_IDENTITY(ivec3(ivec2(2, 1), (1 | 1)), _GLF_IDENTITY(_GLF_IDENTITY(ivec3(1, 1, 1), (ivec3(0, 0, 0) >> _GLF_IDENTITY(ivec3(5), ivec3(5))) ^ (_GLF_IDENTITY(ivec3(1, 1, 1), max(ivec3(1, 1, 1), ivec3(1, 1, 1))))), (_GLF_IDENTITY(ivec3(1, 1, 1), (ivec3(1, 1, 1)) / ivec3(1, 1, 1))) / ivec3(1, 1, 1)) * (ivec3(ivec2(2, 1), (1 | 1)))))) | (ivec2(_GLF_IDENTITY(ivec3(ivec2(2, 1), (1 | 1)), ivec3(1, 1, 1) * (ivec3(ivec2(2, 1), (1 | 1)))))))) - ivec2(_GLF_IDENTITY(0, (0) >> 0), 0))))), ivec2(ivec4(_GLF_IDENTITY(ivec2(2, 1), min(ivec2(2, 1), _GLF_IDENTITY(ivec2(2, 1), _GLF_IDENTITY(ivec2(_GLF_IDENTITY(ivec3(ivec2(2, 1), (_GLF_IDENTITY(1 | 1, 0 + (_GLF_IDENTITY(1 | 1, (1 | 1) << 0))))), ivec3(1, 1, 1) * (ivec3(ivec2(_GLF_IDENTITY(2, max(2, 2)), 1), (1 | 1))))), (_GLF_IDENTITY(ivec2(_GLF_IDENTITY(ivec3(ivec2(2, 1), (1 | 1)), _GLF_IDENTITY(ivec3(1, 1, 1), min(_GLF_IDENTITY(ivec3(1, 1, 1), ivec3(ivec3(ivec3(1, 1, 1)))), _GLF_IDENTITY(ivec3(1, 1, 1), (ivec3(1, 1, 1)) | (_GLF_IDENTITY(ivec3(1, 1, 1), ivec3(1, 1, 1) * (ivec3(1, 1, 1))))))) * (ivec3(ivec2(2, 1), (_GLF_IDENTITY(1 | 1, ~ (~ (1 | 1)))))))), (ivec2(_GLF_IDENTITY(ivec3(ivec2(2, 1), (1 | 1)), _GLF_IDENTITY(ivec3(1, 1, 1), (_GLF_IDENTITY(ivec3(1, 1, 1), (ivec3(1, 1, 1)) / ivec3(1, 1, 1))) / ivec3(1, 1, 1)) * (ivec3(ivec2(_GLF_IDENTITY(2, int(ivec2(_GLF_IDENTITY(2, 0 | (2)), (((1 & 1) << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3)))))), 1), (1 | 1)))))) | (ivec2(_GLF_IDENTITY(ivec3(ivec2(2, 1), (1 | 1)), ivec3(1, 1, 1) * (ivec3(_GLF_IDENTITY(ivec2(2, 1), max(ivec2(2, 1), ivec2(2, 1))), (1 | 1)))))))) - ivec2(0, 0))))), 0, 1))))), (_GLF_IDENTITY(2, int(_GLF_IDENTITY(ivec2(2, 1), min(ivec2(2, 1), _GLF_IDENTITY(ivec2(_GLF_IDENTITY(2, (false ? _GLF_FUZZED(-82645) : 2)), 1), _GLF_IDENTITY(ivec2(_GLF_IDENTITY(ivec3(ivec2(2, 1), (1 | 1)), ivec3(1, 1, 1) * (_GLF_IDENTITY(ivec3(ivec2(2, 1), (1 | 1)), ivec3(ivec4(ivec3(ivec2(2, 1), (1 | 1)), 1)))))), (_GLF_IDENTITY(ivec2(_GLF_IDENTITY(ivec3(ivec2(2, 1), (1 | 1)), ivec3(1, _GLF_IDENTITY(1, (1) * 1), 1) * (ivec3(ivec2(2, 1), (1 | 1))))), (ivec2(_GLF_IDENTITY(ivec3(ivec2(2, 1), (_GLF_IDENTITY(1, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 1 : _GLF_FUZZED(62425))) | 1)), ivec3(1, 1, 1) * (ivec3(ivec2(2, 1), (1 | 1)))))) | (ivec2(_GLF_IDENTITY(ivec3(ivec2(_GLF_IDENTITY(2, int(ivec2(2, 0))), 1), (1 | 1)), ivec3(1, 1, 1) * (ivec3(_GLF_IDENTITY(ivec2(2, 1), (ivec2(2, 1)) / ivec2(1, 1)), (1 | 1)))))))) - ivec2(0, 0)))))))) | (_GLF_IDENTITY(2, int(_GLF_IDENTITY(ivec2(2, 1), min(ivec2(2, 1), _GLF_IDENTITY(ivec2(2, 1), _GLF_IDENTITY(ivec2(_GLF_IDENTITY(ivec3(ivec2(2, 1), (1 | 1)), ivec3(1, 1, 1) * (ivec3(ivec2(2, 1), (1 | 1))))), (_GLF_IDENTITY(ivec2(_GLF_IDENTITY(_GLF_IDENTITY(ivec3(ivec2(2, 1), (1 | _GLF_IDENTITY(1, int(_GLF_IDENTITY(ivec2(1, 1), (ivec2(1, 1)) ^ ivec2(0, 0)))))), (ivec3(ivec2(2, 1), (1 | _GLF_IDENTITY(1, int(_GLF_IDENTITY(ivec2(1, 1), (ivec2(1, 1)) ^ ivec2(0, 0))))))) / ivec3(1, 1, 1)), ivec3(1, 1, 1) * (ivec3(ivec2(2, 1), (1 | 1))))), (ivec2(_GLF_IDENTITY(ivec3(ivec2(2, 1), (1 | 1)), ivec3(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, 0 | (1))) | (_GLF_IDENTITY(1, clamp(1, 1, 1)))), 1, 1) * (ivec3(ivec2(2, 1), (1 | 1)))))) | (ivec2(_GLF_IDENTITY(ivec3(ivec2(2, 1), (1 | 1)), ivec3(1, 1, _GLF_IDENTITY(1, 0 ^ (1))) * (ivec3(ivec2(2, 1), (1 | 1)))))))) - ivec2(0, 0))))))))), _GLF_IDENTITY(2, int(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(ivec2(2, _GLF_IDENTITY(1, (1) | (1))), (_GLF_IDENTITY(ivec2(2, _GLF_IDENTITY(1, (1) | (1))), max(ivec2(2, _GLF_IDENTITY(1, (1) | (1))), ivec2(2, _GLF_IDENTITY(1, (1) | (1)))))) | (_GLF_IDENTITY(ivec2(2, _GLF_IDENTITY(1, (1) | (1))), (ivec2(2, _GLF_IDENTITY(1, (1) | (1)))) | (ivec2(2, _GLF_IDENTITY(1, (1) | (1))))))), min(ivec2(2, 1), _GLF_IDENTITY(ivec2(2, 1), _GLF_IDENTITY(ivec2(_GLF_IDENTITY(ivec3(ivec2(2, 1), (1 | 1)), ivec3(1, 1, 1) * (ivec3(ivec2(2, 1), (1 | 1))))), (_GLF_IDENTITY(ivec2(_GLF_IDENTITY(ivec3(ivec2(2, 1), (1 | 1)), ivec3(1, 1, 1) * (ivec3(ivec2(2, 1), (1 | 1))))), (ivec2(_GLF_IDENTITY(_GLF_IDENTITY(ivec3(ivec2(2, 1), (1 | 1)), max(ivec3(ivec2(2, 1), (1 | 1)), _GLF_IDENTITY(ivec3(ivec2(2, 1), (1 | 1)), ivec3(0, 0, 0) ^ (ivec3(ivec2(2, 1), (1 | 1)))))), ivec3(1, 1, 1) * (ivec3(ivec2(2, 1), (1 | 1)))))) | (ivec2(_GLF_IDENTITY(ivec3(ivec2(2, 1), (1 | 1)), ivec3(1, 1, 1) * (ivec3(ivec2(2, 1), (1 | 1)))))))) - ivec2(0, 0))))), min(_GLF_IDENTITY(_GLF_IDENTITY(ivec2(2, 1), _GLF_IDENTITY(min(ivec2(2, 1), _GLF_IDENTITY(ivec2(2, 1), _GLF_IDENTITY(ivec2(_GLF_IDENTITY(ivec3(ivec2(2, 1), (1 | 1)), ivec3(1, 1, 1) * (ivec3(ivec2(2, 1), (1 | 1))))), (_GLF_IDENTITY(ivec2(_GLF_IDENTITY(ivec3(ivec2(2, 1), (1 | 1)), ivec3(1, 1, 1) * (ivec3(ivec2(2, 1), (1 | 1))))), (ivec2(_GLF_IDENTITY(ivec3(ivec2(2, 1), (1 | 1)), ivec3(1, 1, 1) * (ivec3(ivec2(2, 1), (1 | 1)))))) | (ivec2(_GLF_IDENTITY(ivec3(ivec2(2, 1), (1 | 1)), ivec3(1, 1, 1) * (ivec3(ivec2(2, 1), (1 | 1)))))))) - ivec2(0, 0)))), _GLF_IDENTITY(ivec2(_GLF_IDENTITY(ivec4(min(ivec2(2, 1), _GLF_IDENTITY(ivec2(2, 1), _GLF_IDENTITY(ivec2(_GLF_IDENTITY(ivec3(ivec2(2, 1), (1 | 1)), ivec3(1, 1, 1) * (ivec3(ivec2(2, 1), (1 | 1))))), (_GLF_IDENTITY(ivec2(_GLF_IDENTITY(ivec3(ivec2(2, 1), (1 | 1)), ivec3(1, 1, 1) * (ivec3(ivec2(2, 1), (1 | 1))))), (ivec2(_GLF_IDENTITY(ivec3(ivec2(2, 1), (1 | 1)), ivec3(1, 1, 1) * (ivec3(ivec2(2, 1), (1 | 1)))))) | (ivec2(_GLF_IDENTITY(ivec3(ivec2(2, 1), (1 | 1)), ivec3(1, 1, 1) * (ivec3(ivec2(2, 1), (1 | 1)))))))) - ivec2(0, 0)))), 1, 1), clamp(ivec4(min(ivec2(2, 1), _GLF_IDENTITY(ivec2(2, 1), _GLF_IDENTITY(ivec2(_GLF_IDENTITY(ivec3(ivec2(2, 1), (1 | 1)), ivec3(1, 1, 1) * (ivec3(ivec2(2, 1), (1 | 1))))), (_GLF_IDENTITY(ivec2(_GLF_IDENTITY(ivec3(ivec2(2, 1), (1 | 1)), ivec3(1, 1, 1) * (ivec3(ivec2(2, 1), (1 | 1))))), (ivec2(_GLF_IDENTITY(ivec3(ivec2(2, 1), (1 | 1)), ivec3(1, 1, 1) * (ivec3(ivec2(2, 1), (1 | 1)))))) | (ivec2(_GLF_IDENTITY(ivec3(ivec2(2, 1), (1 | 1)), ivec3(1, 1, 1) * (ivec3(ivec2(2, 1), (1 | 1)))))))) - ivec2(0, 0)))), 1, 1), ivec4(min(ivec2(2, 1), _GLF_IDENTITY(ivec2(2, 1), _GLF_IDENTITY(ivec2(_GLF_IDENTITY(ivec3(ivec2(2, 1), (1 | 1)), ivec3(1, 1, 1) * (ivec3(ivec2(2, 1), (1 | 1))))), (_GLF_IDENTITY(ivec2(_GLF_IDENTITY(ivec3(ivec2(2, 1), (1 | 1)), ivec3(1, 1, 1) * (ivec3(ivec2(2, 1), (1 | 1))))), (ivec2(_GLF_IDENTITY(ivec3(ivec2(2, 1), (1 | 1)), ivec3(1, 1, 1) * (ivec3(ivec2(2, 1), (1 | 1)))))) | (ivec2(_GLF_IDENTITY(ivec3(ivec2(2, 1), (1 | 1)), ivec3(1, 1, 1) * (ivec3(ivec2(2, 1), (1 | 1)))))))) - ivec2(0, 0)))), 1, 1), ivec4(min(ivec2(2, 1), _GLF_IDENTITY(ivec2(2, 1), _GLF_IDENTITY(ivec2(_GLF_IDENTITY(ivec3(ivec2(2, 1), (1 | 1)), ivec3(1, 1, 1) * (ivec3(ivec2(2, 1), (1 | 1))))), (_GLF_IDENTITY(ivec2(_GLF_IDENTITY(ivec3(ivec2(2, 1), (1 | 1)), ivec3(1, 1, 1) * (ivec3(ivec2(2, 1), (1 | 1))))), (ivec2(_GLF_IDENTITY(ivec3(ivec2(2, 1), (1 | 1)), ivec3(1, 1, 1) * (ivec3(ivec2(2, 1), (1 | 1)))))) | (ivec2(_GLF_IDENTITY(ivec3(ivec2(2, 1), (1 | 1)), ivec3(1, 1, 1) * (ivec3(ivec2(2, 1), (1 | 1)))))))) - ivec2(0, 0)))), 1, 1)))), (_GLF_IDENTITY(ivec2(_GLF_IDENTITY(ivec4(min(ivec2(2, 1), _GLF_IDENTITY(ivec2(2, 1), _GLF_IDENTITY(ivec2(_GLF_IDENTITY(ivec3(ivec2(2, 1), (1 | 1)), ivec3(1, 1, 1) * (ivec3(ivec2(2, 1), (1 | 1))))), (_GLF_IDENTITY(ivec2(_GLF_IDENTITY(ivec3(ivec2(2, 1), (1 | 1)), ivec3(1, 1, 1) * (ivec3(ivec2(2, 1), (1 | 1))))), (ivec2(_GLF_IDENTITY(ivec3(ivec2(2, 1), (1 | 1)), ivec3(1, 1, 1) * (ivec3(ivec2(2, 1), (1 | 1)))))) | (ivec2(_GLF_IDENTITY(ivec3(ivec2(2, 1), (1 | 1)), ivec3(1, 1, 1) * (ivec3(ivec2(2, 1), (1 | 1)))))))) - ivec2(0, 0)))), 1, 1), clamp(ivec4(min(ivec2(2, 1), _GLF_IDENTITY(ivec2(2, 1), _GLF_IDENTITY(ivec2(_GLF_IDENTITY(ivec3(ivec2(2, 1), (1 | 1)), ivec3(1, 1, 1) * (ivec3(ivec2(2, 1), (1 | 1))))), (_GLF_IDENTITY(ivec2(_GLF_IDENTITY(ivec3(ivec2(2, 1), (1 | 1)), ivec3(1, 1, 1) * (ivec3(ivec2(2, 1), (1 | 1))))), (ivec2(_GLF_IDENTITY(ivec3(ivec2(2, 1), (1 | 1)), ivec3(1, 1, 1) * (ivec3(ivec2(2, 1), (1 | 1)))))) | (ivec2(_GLF_IDENTITY(ivec3(ivec2(2, 1), (1 | 1)), ivec3(1, 1, 1) * (ivec3(ivec2(2, 1), (1 | 1)))))))) - ivec2(0, 0)))), 1, 1), ivec4(min(ivec2(2, 1), _GLF_IDENTITY(ivec2(2, 1), _GLF_IDENTITY(ivec2(_GLF_IDENTITY(ivec3(ivec2(2, 1), (1 | 1)), ivec3(1, 1, 1) * (ivec3(ivec2(2, 1), (1 | 1))))), (_GLF_IDENTITY(ivec2(_GLF_IDENTITY(ivec3(ivec2(2, 1), (1 | 1)), ivec3(1, 1, 1) * (ivec3(ivec2(2, 1), (1 | 1))))), (ivec2(_GLF_IDENTITY(ivec3(ivec2(2, 1), (1 | 1)), ivec3(1, 1, 1) * (ivec3(ivec2(2, 1), (1 | 1)))))) | (ivec2(_GLF_IDENTITY(ivec3(ivec2(2, 1), (1 | 1)), ivec3(1, 1, 1) * (ivec3(ivec2(2, 1), (1 | 1)))))))) - ivec2(0, 0)))), 1, 1), ivec4(min(ivec2(2, 1), _GLF_IDENTITY(ivec2(2, 1), _GLF_IDENTITY(ivec2(_GLF_IDENTITY(ivec3(ivec2(2, 1), (1 | 1)), ivec3(1, 1, 1) * (ivec3(ivec2(2, 1), (1 | 1))))), (_GLF_IDENTITY(ivec2(_GLF_IDENTITY(ivec3(ivec2(2, 1), (1 | 1)), ivec3(1, 1, 1) * (ivec3(ivec2(2, 1), (1 | 1))))), (ivec2(_GLF_IDENTITY(ivec3(ivec2(2, 1), (1 | 1)), ivec3(1, 1, 1) * (ivec3(ivec2(2, 1), (1 | 1)))))) | (ivec2(_GLF_IDENTITY(ivec3(ivec2(2, 1), (1 | 1)), ivec3(1, 1, 1) * (ivec3(ivec2(2, 1), (1 | 1)))))))) - ivec2(0, 0)))), 1, 1)))), (ivec2(_GLF_IDENTITY(ivec4(min(ivec2(2, 1), _GLF_IDENTITY(ivec2(2, 1), _GLF_IDENTITY(ivec2(_GLF_IDENTITY(ivec3(ivec2(2, 1), (1 | 1)), ivec3(1, 1, 1) * (ivec3(ivec2(2, 1), (1 | 1))))), (_GLF_IDENTITY(ivec2(_GLF_IDENTITY(ivec3(ivec2(2, 1), (1 | 1)), ivec3(1, 1, 1) * (ivec3(ivec2(2, 1), (1 | 1))))), (ivec2(_GLF_IDENTITY(ivec3(ivec2(2, 1), (1 | 1)), ivec3(1, 1, 1) * (ivec3(ivec2(2, 1), (1 | 1)))))) | (ivec2(_GLF_IDENTITY(ivec3(ivec2(2, 1), (1 | 1)), ivec3(1, 1, 1) * (ivec3(ivec2(2, 1), (1 | 1)))))))) - ivec2(0, 0)))), 1, 1), clamp(ivec4(min(ivec2(2, 1), _GLF_IDENTITY(ivec2(2, 1), _GLF_IDENTITY(ivec2(_GLF_IDENTITY(ivec3(ivec2(2, 1), (1 | 1)), ivec3(1, 1, 1) * (ivec3(ivec2(2, 1), (1 | 1))))), (_GLF_IDENTITY(ivec2(_GLF_IDENTITY(ivec3(ivec2(2, 1), (1 | 1)), ivec3(1, 1, 1) * (ivec3(ivec2(2, 1), (1 | 1))))), (ivec2(_GLF_IDENTITY(ivec3(ivec2(2, 1), (1 | 1)), ivec3(1, 1, 1) * (ivec3(ivec2(2, 1), (1 | 1)))))) | (ivec2(_GLF_IDENTITY(ivec3(ivec2(2, 1), (1 | 1)), ivec3(1, 1, 1) * (ivec3(ivec2(2, 1), (1 | 1)))))))) - ivec2(0, 0)))), 1, 1), ivec4(min(ivec2(2, 1), _GLF_IDENTITY(ivec2(2, 1), _GLF_IDENTITY(ivec2(_GLF_IDENTITY(ivec3(ivec2(2, 1), (1 | 1)), ivec3(1, 1, 1) * (ivec3(ivec2(2, 1), (1 | 1))))), (_GLF_IDENTITY(ivec2(_GLF_IDENTITY(ivec3(ivec2(2, 1), (1 | 1)), ivec3(1, 1, 1) * (ivec3(ivec2(2, 1), (1 | 1))))), (ivec2(_GLF_IDENTITY(ivec3(ivec2(2, 1), (1 | 1)), ivec3(1, 1, 1) * (ivec3(ivec2(2, 1), (1 | 1)))))) | (ivec2(_GLF_IDENTITY(ivec3(ivec2(2, 1), (1 | 1)), ivec3(1, 1, 1) * (ivec3(ivec2(2, 1), (1 | 1)))))))) - ivec2(0, 0)))), 1, 1), ivec4(min(ivec2(2, 1), _GLF_IDENTITY(ivec2(2, 1), _GLF_IDENTITY(ivec2(_GLF_IDENTITY(ivec3(ivec2(2, 1), (1 | 1)), ivec3(1, 1, 1) * (ivec3(ivec2(2, 1), (1 | 1))))), (_GLF_IDENTITY(ivec2(_GLF_IDENTITY(ivec3(ivec2(2, 1), (1 | 1)), ivec3(1, 1, 1) * (ivec3(ivec2(2, 1), (1 | 1))))), (ivec2(_GLF_IDENTITY(ivec3(ivec2(2, 1), (1 | 1)), ivec3(1, 1, 1) * (ivec3(ivec2(2, 1), (1 | 1)))))) | (ivec2(_GLF_IDENTITY(ivec3(ivec2(2, 1), (1 | 1)), ivec3(1, 1, 1) * (ivec3(ivec2(2, 1), (1 | 1)))))))) - ivec2(0, 0)))), 1, 1))))) << ivec2(0, 0))) + ivec2(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))))), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x)) > injectionSwitch.y)) ? _GLF_FUZZED(ivec2(-20566, -97660)) : _GLF_IDENTITY(ivec2(2, 1), min(ivec2(2, 1), _GLF_IDENTITY(ivec2(2, 1), _GLF_IDENTITY(ivec2(_GLF_IDENTITY(ivec3(ivec2(2, 1), (1 | 1)), ivec3(1, 1, 1) * (ivec3(ivec2(2, 1), (1 | 1))))), (_GLF_IDENTITY(ivec2(_GLF_IDENTITY(ivec3(ivec2(_GLF_IDENTITY(2, min(2, 2)), 1), (1 | 1)), ivec3(1, 1, 1) * (ivec3(ivec2(2, 1), (1 | 1))))), (ivec2(_GLF_IDENTITY(ivec3(ivec2(2, 1), (1 | _GLF_IDENTITY(1, (1) | (1)))), ivec3(1, 1, 1) * (ivec3(ivec2(_GLF_IDENTITY(2, clamp(_GLF_IDENTITY(2, min(_GLF_IDENTITY(2, 0 | (2)), 2)), 2, 2)), 1), (_GLF_IDENTITY(1 | 1, (1 | 1) - 0))))))) | (ivec2(_GLF_IDENTITY(ivec3(ivec2(2, 1), (1 | 1)), ivec3(1, 1, 1) * (ivec3(ivec2(2, _GLF_IDENTITY(1, 1 * (1))), (1 | 1)))))))) - ivec2(0, 0))))))), _GLF_IDENTITY(_GLF_IDENTITY(ivec2(2, 1), min(ivec2(_GLF_IDENTITY(2, (_GLF_IDENTITY(2, max(2, 2))) | 0), 1), _GLF_IDENTITY(ivec2(2, 1), _GLF_IDENTITY(ivec2(_GLF_IDENTITY(ivec3(ivec2(2, 1), (_GLF_IDENTITY(1 | 1, max(1 | 1, 1 | 1)))), ivec3(1, 1, _GLF_IDENTITY(1, (_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, (1) | 0), 1, 1))) | (1))) * (ivec3(ivec2(2, 1), (_GLF_IDENTITY(1, clamp(1, _GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(13769))), 1)) | 1))))), (_GLF_IDENTITY(ivec2(_GLF_IDENTITY(ivec3(ivec2(2, 1), (1 | 1)), ivec3(1, 1, 1) * (ivec3(ivec2(2, 1), (1 | 1))))), (ivec2(_GLF_IDENTITY(ivec3(ivec2(2, 1), (1 | 1)), ivec3(1, 1, 1) * (ivec3(ivec2(2, 1), (1 | 1)))))) | (ivec2(_GLF_IDENTITY(ivec3(ivec2(2, 1), (1 | 1)), ivec3(1, 1, 1) * (ivec3(ivec2(2, _GLF_IDENTITY(1, (1) << 0)), (1 | 1)))))))) - ivec2(0, 0))))), (_GLF_IDENTITY(ivec2(2, 1), min(ivec2(2, 1), _GLF_IDENTITY(ivec2(2, 1), _GLF_IDENTITY(ivec2(_GLF_IDENTITY(ivec3(ivec2(2, 1), (1 | 1)), ivec3(1, 1, 1) * (ivec3(ivec2(2, 1), (1 | 1))))), (_GLF_IDENTITY(ivec2(_GLF_IDENTITY(_GLF_IDENTITY(ivec3(ivec2(2, 1), (1 | 1)), ivec3(1, 1, 1) * (ivec3(ivec2(2, 1), (1 | 1)))), max(_GLF_IDENTITY(_GLF_IDENTITY(ivec3(ivec2(2, 1), (1 | 1)), ivec3(1, 1, 1) * (ivec3(ivec2(2, 1), (1 | 1)))), clamp(_GLF_IDENTITY(ivec3(ivec2(2, 1), (1 | 1)), ivec3(1, 1, 1) * (ivec3(ivec2(2, 1), (1 | 1)))), _GLF_IDENTITY(ivec3(ivec2(2, 1), (1 | 1)), ivec3(1, 1, 1) * (ivec3(ivec2(2, 1), (1 | 1)))), _GLF_IDENTITY(_GLF_IDENTITY(ivec3(ivec2(2, 1), (1 | 1)), ivec3(1, 1, 1) * (ivec3(ivec2(2, 1), (1 | 1)))), (true ? _GLF_IDENTITY(ivec3(ivec2(2, 1), (1 | 1)), ivec3(1, 1, 1) * (ivec3(ivec2(2, 1), (1 | 1)))) : _GLF_FUZZED(ivec3(-37174, 43491, -68982)))))), _GLF_IDENTITY(ivec3(ivec2(2, 1), (1 | 1)), ivec3(1, 1, 1) * (_GLF_IDENTITY(ivec3(ivec2(2, 1), (1 | 1)), (ivec3(ivec2(2, 1), (1 | 1))) >> ivec3(0, 0, 0))))))), (ivec2(_GLF_IDENTITY(ivec3(ivec2(2, 1), (1 | 1)), ivec3(1, 1, 1) * (ivec3(ivec2(2, 1), (1 | 1)))))) | (ivec2(_GLF_IDENTITY(ivec3(ivec2(2, 1), (1 | 1)), ivec3(1, 1, 1) * (ivec3(ivec2(2, 1), (1 | 1)))))))) - ivec2(0, _GLF_IDENTITY(0, (0) << 0))))))) << ivec2(0, 0)))))))))) >> 0u), 4, 64, 4);
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, false || _GLF_IDENTITY((false), true && ((false))))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! _GLF_IDENTITY((false), ! (_GLF_IDENTITY(_GLF_IDENTITY(! ((false)), bool(bool(! ((false))))), ! (! (_GLF_IDENTITY(! ((false)), bool(bool(! ((false)))))))))), _GLF_IDENTITY(! (! (! (false))), bool(_GLF_IDENTITY(bool(! (! (! (false)))), false || (bool(! (! (! (false)))))))))))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (true ? _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0), injectionSwitch.y)) : _GLF_IDENTITY(_GLF_FUZZED(0.4), min(_GLF_FUZZED(0.4), _GLF_IDENTITY(_GLF_FUZZED(0.4), (false ? _GLF_FUZZED(-39.38) : _GLF_FUZZED(0.4))))))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-8.8) : injectionSwitch.y))) - 0.0)) - _GLF_IDENTITY(dot(vec2(exp(0.0), 0.0), vec2(0.0, 1.0)), dot(vec2(exp(0.0), 0.0), vec2(0.0, 1.0)))), (true ? _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0), injectionSwitch.y)) : _GLF_IDENTITY(_GLF_FUZZED(0.4), min(_GLF_FUZZED(0.4), _GLF_IDENTITY(_GLF_FUZZED(0.4), (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || false)) || false) ? _GLF_FUZZED(-39.38) : _GLF_FUZZED(0.4))))))), _GLF_IDENTITY(injectionSwitch.y, (true ? _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0), injectionSwitch.y)) : _GLF_IDENTITY(_GLF_FUZZED(0.4), min(_GLF_FUZZED(0.4), _GLF_IDENTITY(_GLF_FUZZED(0.4), (false ? _GLF_FUZZED(-39.38) : _GLF_FUZZED(0.4))))))), _GLF_IDENTITY(injectionSwitch.y, (true ? _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0), injectionSwitch.y)) : _GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(0.4), min(_GLF_FUZZED(0.4), _GLF_IDENTITY(_GLF_FUZZED(0.4), (_GLF_FUZZED(0.4)) / 1.0))), min(_GLF_FUZZED(0.4), _GLF_IDENTITY(_GLF_FUZZED(0.4), (false ? _GLF_FUZZED(-39.38) : _GLF_FUZZED(0.4)))))))))))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(true, ! (! (true))) && (false)), (injectionSwitch.x > injectionSwitch.y))))
        return;
       barrier();
      }
     barrier();
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     return;
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), bool(bvec4(_GLF_IDENTITY(false, false || (false)), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))))
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       return;
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      return;
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, _GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), false || (! (false))))), true), bvec3(bvec3(bvec3(false, false, true))))))) || false), (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
     barrier();
    }
   subgroupAll(false);
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(true, bool(bvec3(true, true, true))) && (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), (! ((injectionSwitch.x > injectionSwitch.y))) && true))))))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        return;
       return;
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
          barrier();
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
          return;
         barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (false)), ! (! ((! (false))))))))
        barrier();
       return;
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(true && (false), ! (! (true && (false)))))))
      barrier();
     if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), bool(bool(! (_GLF_DEAD(false)))))))) && true))
      return;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))) && true))
      return;
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, float(mat4x3(_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-8.4)), bool(false))), 0.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0, 0.0, 1.0, _GLF_IDENTITY(1.0, min(1.0, 1.0)), 1.0, 1.0, 0.0, 0.0, 1.0))), min(_GLF_IDENTITY(injectionSwitch.x, float(mat4x3(_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-8.4)), bool(false))), 0.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0, 0.0, 1.0, _GLF_IDENTITY(1.0, min(1.0, 1.0)), 1.0, 1.0, 0.0, 0.0, 1.0))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, float(mat4x3(_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-8.4)), bool(false))), 0.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0, 0.0, 1.0, _GLF_IDENTITY(1.0, min(1.0, 1.0)), 1.0, 1.0, 0.0, 0.0, 1.0))), max(_GLF_IDENTITY(injectionSwitch.x, float(mat4x3(_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-8.4)), bool(false))), 0.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0, 0.0, 1.0, _GLF_IDENTITY(1.0, min(1.0, 1.0)), 1.0, 1.0, 0.0, 0.0, 1.0))), _GLF_IDENTITY(injectionSwitch.x, float(mat4x3(_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-8.4)), bool(false))), 0.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0, 0.0, 1.0, _GLF_IDENTITY(1.0, min(1.0, 1.0)), 1.0, 1.0, 0.0, 0.0, 1.0))))))), injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            return;
           return;
          }
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         return;
        }
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, (false) || false)), bool(bvec2(! (_GLF_IDENTITY(false, (false) || false)), true)))), (! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, (false) || false)), bool(bvec2(! (_GLF_IDENTITY(false, (false) || false)), true))))) || false)), (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   atomicStore(buf[next_virtual_gid], _GLF_IDENTITY(uint(2), (_GLF_IDENTITY(uint(2), (_GLF_IDENTITY(uint(2), clamp(uint(2), uint(2), uint(2)))) << 0u)) | (_GLF_IDENTITY(uint(2), (uint(2)) - 0u))), _GLF_IDENTITY(4, int(int(_GLF_IDENTITY(4, (4) * 1)))), 64, 4);
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
        {
         if(_GLF_DEAD(false))
          return;
         return;
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           return;
          }
         barrier();
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     return;
    }
   if(_GLF_DEAD(false))
    return;
   subgroupAll(true);
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
    return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(false, _GLF_IDENTITY(true, _GLF_IDENTITY((_GLF_IDENTITY(true, bool(bool(true)))) && _GLF_IDENTITY(true, (true) && true), ((_GLF_IDENTITY(true, bool(bool(true)))) && true) && true)) && (false)) || (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), _GLF_IDENTITY(false, ! (! (false)))))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), false || (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), (_GLF_DEAD(_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))).x < injectionSwitch.y))))) && true))), bool(bvec2(_GLF_DEAD(false), false)))) || false))))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-2.7, 8.7)) : injectionSwitch)).x, mix(float(_GLF_FUZZED(16.95)), float(injectionSwitch.x), bool(true))) > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(-9343.7949)))) - log(1.0))))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
        return;
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   return;
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_DEAD(false), false, true))))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
    barrier();
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
   barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(injectionSwitch.x, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(0.0) : injectionSwitch.x)) > injectionSwitch.y, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)), (bool(bvec4(injectionSwitch.x > injectionSwitch.y, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(false, bool(bvec2(false, false)))))) || false)))))) || false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   return;
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / _GLF_IDENTITY(vec2(1.0, 1.0), clamp(vec2(1.0, 1.0), _GLF_IDENTITY(vec2(1.0, 1.0), vec2(mat4x3(vec2(1.0, 1.0), 1.0, 1.0, 0.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, log(1.0), 0.0, 1.0, 1.0))), vec2(1.0, 1.0)))), _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)))).y))))
      barrier();
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))), true, false, false)))))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bool(! (false)))))), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, 1.0 * (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0))), injectionSwitch.x)) > injectionSwitch.y, bool(bvec4(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))), true, false, false)))))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))), true, false, false)), ! (_GLF_IDENTITY(! (bool(bvec4(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))), true, false, false))), bool(_GLF_IDENTITY(bool(! (bool(bvec4(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))), true, false, false)))), false || (bool(! (bool(bvec4(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))), true, false, false))))))))))))))))), false, true), bvec3(bvec3(bvec3(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))), bool(bvec4(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))), true, false, false)))))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))), true, false, false))))))))), false, true))))), ! (! (bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))), true, false, false)))))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))), true, false, false))))))))), false, true), bvec3(bvec3(bvec3(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) > injectionSwitch.y))), true, false, false)))))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))), true, false, false))))))))), false, true))))))))))
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
        return;
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (true ? _GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(47.37))) : _GLF_FUZZED(tan(-138.735))))))), bool(bvec4(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, false, true))))
        return;
       barrier();
      }
    }
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
