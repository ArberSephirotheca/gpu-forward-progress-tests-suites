#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   do
    {
     if(_GLF_DEAD(false))
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec4(false, true, true, true)))) && true)) && true)));
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
          {
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           barrier();
          }
         else
          {
          }
        }
      }
     else
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
        }
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true && (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec4(true, false, false, false)), ! (! (bool(bvec4(true, false, false, false)))))), (injectionSwitch.x < injectionSwitch.y))))
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, false || (true))))
            {
             do
              {
               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                {
                 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY((false) || _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), bool(_GLF_IDENTITY(bvec3((false) || _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec3(bvec4(bvec3((false) || _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true))))))))
                  {
                  }
                 else
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) / 1))
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        {
                         if(_GLF_WRAPPED_IF_TRUE(true))
                          {
                           if(_GLF_WRAPPED_IF_FALSE(false))
                            {
                             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                              barrier();
                             if(_GLF_DEAD(false))
                              barrier();
                            }
                           else
                            {
                             barrier();
                            }
                          }
                         else
                          {
                          }
                        }
                      }
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                   else
                    {
                    }
                  }
                }
               else
                {
                }
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
            }
           else
            {
            }
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
            {
             do
              {
               barrier();
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(dot(vec3(0.0, 0.0, 1.0), vec3(0.0, 0.0, sqrt(1.0))), dot(vec3(0.0, 0.0, 1.0), vec3(0.0, 0.0, sqrt(1.0)))) * (injectionSwitch.y))))))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   do
                    {
                     if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec4(false, false, _GLF_IDENTITY(true, ! (! (true))), false)))) && true)))
                      {
                       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true)), (bool(bvec2(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true))) || false)), (injectionSwitch.x > injectionSwitch.y))))
                        {
                         if(_GLF_WRAPPED_IF_FALSE(false))
                          {
                          }
                         else
                          {
                           for(int _injected_loop_counter = (1 & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
                            {
                             do
                              {
                               barrier();
                              }
                             while(_GLF_WRAPPED_LOOP(false));
                            }
                          }
                        }
                       do
                        {
                         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
                          barrier();
                        }
                       while(_GLF_WRAPPED_LOOP(false));
                       barrier();
                      }
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, false)))))))))))
                      barrier();
                    }
                  }
                }
               else
                {
                }
              }
             while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), false || (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), bool(bvec2(_GLF_WRAPPED_LOOP(false), false)))))))));
            }
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
            {
             if(_GLF_DEAD(false))
              barrier();
            }
          }
         else
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 barrier();
                }
               barrier();
              }
            }
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               barrier();
              }
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), ! (! (bool(false))))))))
              {
              }
             else
              {
               if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(mat2x3(injectionSwitch, 0.0, 0.0, 1.0, 1.0)))) / cos(vec2(0.0, 0.0))).y), true && ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(mat2x3(injectionSwitch, 0.0, 0.0, 1.0, 1.0)))) / cos(vec2(0.0, 0.0))).y))))))
                barrier();
               do
                {
                 barrier();
                }
               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
              }
            }
          }
        }
       else
        {
        }
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             barrier();
            }
           else
            {
            }
          }
         else
          {
          }
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         else
          {
          }
        }
       do
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if(_GLF_DEAD(false))
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
                    barrier();
                  }
                 else
                  {
                  }
                 barrier();
                }
               barrier();
              }
             for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(4549.0985)), bool(false)))))); _injected_loop_counter --)
              {
               if(_GLF_DEAD(false))
                barrier();
              }
            }
          }
         else
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, false || (false))))
            {
            }
           else
            {
             do
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
                    {
                     do
                      {
                       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y)), true && (_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))))); _injected_loop_counter ++)
                        {
                         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, bool(bvec4(_GLF_IDENTITY(true, ! (! (true))), false, _GLF_IDENTITY(true, _GLF_IDENTITY((_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec2(true, true)), _GLF_IDENTITY((_GLF_IDENTITY(bool(bvec2(true, true)), ! (! (bool(bvec2(true, true)))))), _GLF_IDENTITY(bool(bool((_GLF_IDENTITY(bool(bvec2(true, true)), ! (! (bool(bvec2(true, true)))))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(bool(bool((_GLF_IDENTITY(bool(bvec2(true, true)), ! (_GLF_IDENTITY(! (bool(bvec2(true, true))), (! (bool(bvec2(true, true)))) && true)))))), (bool(bool((_GLF_IDENTITY(bool(bvec2(true, true)), ! (_GLF_IDENTITY(! (bool(bvec2(true, true))), (! (bool(bvec2(true, true)))) && true))))))) || false)), false || (! (bool(bool((_GLF_IDENTITY(bool(bvec2(true, true)), ! (! (bool(bvec2(true, true)))))))))))))) && true))) || false, true && (_GLF_IDENTITY((_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec2(true, true)), _GLF_IDENTITY((_GLF_IDENTITY(bool(bvec2(true, true)), ! (! (bool(bvec2(true, true)))))), _GLF_IDENTITY(bool(bool((_GLF_IDENTITY(bool(bvec2(true, true)), ! (! (bool(bvec2(true, true)))))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(bool(bool((_GLF_IDENTITY(bool(bvec2(true, true)), ! (_GLF_IDENTITY(! (bool(bvec2(true, true))), (! (bool(bvec2(true, true)))) && true)))))), ! (! (bool(bool((_GLF_IDENTITY(bool(bvec2(true, true)), ! (_GLF_IDENTITY(! (bool(bvec2(true, true))), (! (bool(bvec2(true, true)))) && true))))))))), (bool(bool((_GLF_IDENTITY(bool(bvec2(true, true)), ! (_GLF_IDENTITY(! (bool(bvec2(true, true))), (! (bool(bvec2(true, true)))) && true))))))) || false)), false || _GLF_IDENTITY((! (bool(bool((_GLF_IDENTITY(bool(bvec2(true, true)), ! (! (bool(bvec2(true, _GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, bool(bvec2(true, true)))))))))))))))), ! (_GLF_IDENTITY(! ((! (bool(bool((_GLF_IDENTITY(bool(bvec2(true, true)), ! (! (bool(bvec2(true, _GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, bool(bvec2(true, true))))))))))))))))), (! ((! (bool(bool((_GLF_IDENTITY(bool(bvec2(true, true)), ! (! (bool(bvec2(true, _GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, bool(bvec2(true, true)))))))))))))))))) || false))))))) && true))) || false, bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY((_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec2(true, true)), _GLF_IDENTITY((_GLF_IDENTITY(bool(bvec2(true, true)), ! (! (bool(bvec2(true, true)))))), _GLF_IDENTITY(bool(bool((_GLF_IDENTITY(bool(bvec2(true, true)), ! (! (bool(bvec2(true, true)))))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(bool(bool((_GLF_IDENTITY(bool(bvec2(true, true)), ! (_GLF_IDENTITY(! (bool(bvec2(_GLF_IDENTITY(true, bool(bool(true))), true))), (_GLF_IDENTITY(! (bool(bvec2(true, true))), (_GLF_IDENTITY(! (bool(bvec2(true, true))), ! (_GLF_IDENTITY(! (! (bool(bvec2(true, true)))), ! (! (! (! (bool(bvec2(true, true)))))))))) || false)) && true)))))), (bool(bool((_GLF_IDENTITY(bool(bvec2(true, true)), ! (_GLF_IDENTITY(! (bool(bvec2(true, true))), (! (bool(bvec2(true, true)))) && true))))))) || false)), false || (! (bool(bool((_GLF_IDENTITY(_GLF_IDENTITY(bool(bvec2(true, true)), (bool(bvec2(true, true))) || false), ! (! (bool(bvec2(true, true)))))))))))))) && true))) || false, true && ((_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec2(true, true)), _GLF_IDENTITY((_GLF_IDENTITY(bool(bvec2(true, true)), ! (! (bool(bvec2(true, true)))))), _GLF_IDENTITY(bool(bool((_GLF_IDENTITY(bool(bvec2(true, true)), ! (! (bool(bvec2(true, true)))))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(bool(bool((_GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(true, true && (true)), true)), ! (_GLF_IDENTITY(! (bool(bvec2(true, true))), (! (bool(bvec2(true, true)))) && true)))))), (bool(bool((_GLF_IDENTITY(bool(bvec2(true, true)), ! (_GLF_IDENTITY(! (bool(bvec2(true, true))), (! _GLF_IDENTITY((bool(bvec2(true, true))), ! (! ((bool(bvec2(true, true))))))) && true))))))) || false)), _GLF_IDENTITY(false || (! (bool(bool((_GLF_IDENTITY(bool(bvec2(true, true)), ! (! (bool(bvec2(true, true)))))))))), (_GLF_IDENTITY(false || (! (bool(bool((_GLF_IDENTITY(bool(bvec2(true, true)), ! (! (bool(bvec2(true, true)))))))))), ! (! (false || (_GLF_IDENTITY(! (bool(bool((_GLF_IDENTITY(bool(bvec2(true, true)), ! (! (bool(bvec2(true, true))))))))), false || (! (_GLF_IDENTITY(bool(bool((_GLF_IDENTITY(_GLF_IDENTITY(bool(bvec2(true, true)), (bool(bvec2(true, true))) || false), ! (! (bool(bvec2(true, true)))))))), ! (_GLF_IDENTITY(! (bool(bool((_GLF_IDENTITY(_GLF_IDENTITY(bool(bvec2(true, true)), (bool(bvec2(true, true))) || false), ! (! (bool(bvec2(true, true))))))))), false || (! (bool(bool((_GLF_IDENTITY(_GLF_IDENTITY(bool(bvec2(true, true)), (bool(bvec2(true, true))) || false), ! (! (bool(bvec2(true, true))))))))))))))))))))) || false))))) && true))) || false)), false, false), bvec3(bvec4(bvec3(_GLF_IDENTITY((_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec2(true, true)), _GLF_IDENTITY((_GLF_IDENTITY(bool(bvec2(true, true)), ! (! (bool(bvec2(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec4(true, false, false, true)), bool(bvec3(bool(bvec4(true, false, false, true)), false, false)))), true)))))), _GLF_IDENTITY(bool(bool((_GLF_IDENTITY(bool(bvec2(true, true)), _GLF_IDENTITY(! (! (bool(bvec2(true, true)))), true && (! (! (bool(bvec2(true, true)))))))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(bool(bool((_GLF_IDENTITY(bool(bvec2(true, true)), ! (_GLF_IDENTITY(! (bool(bvec2(true, true))), (! (bool(bvec2(true, true)))) && true)))))), (bool(bool((_GLF_IDENTITY(bool(bvec2(true, true)), ! (_GLF_IDENTITY(! (bool(bvec2(true, true))), (! (bool(bvec2(true, true)))) && true))))))) || false)), false || (! (_GLF_IDENTITY(bool(bool((_GLF_IDENTITY(bool(bvec2(true, true)), ! (! (bool(bvec2(true, true)))))))), true && (bool(bool((_GLF_IDENTITY(bool(bvec2(true, true)), ! (! (bool(bvec2(true, true)))))))))))))))) && true))) || false, true && ((_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec2(true, true)), _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(bool(bvec2(true, true)), ! (! (bool(bvec2(true, true)))))), _GLF_IDENTITY(bool(bool((_GLF_IDENTITY(bool(bvec2(true, true)), ! (! (bool(bvec2(true, true)))))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(bool(bool((_GLF_IDENTITY(bool(bvec2(true, true)), ! (_GLF_IDENTITY(! (bool(bvec2(true, true))), (! (bool(bvec2(true, true)))) && true)))))), (bool(bool((_GLF_IDENTITY(bool(bvec2(true, true)), ! (_GLF_IDENTITY(! (bool(bvec2(true, true))), (! (bool(bvec2(true, true)))) && true))))))) || false)), false || (! (bool(bool((_GLF_IDENTITY(bool(bvec2(true, true)), ! (! (bool(bvec2(true, true)))))))))))))) && true, _GLF_IDENTITY(bool(bool(_GLF_IDENTITY((_GLF_IDENTITY(bool(bvec2(true, true)), ! (! (bool(bvec2(true, true)))))), _GLF_IDENTITY(bool(bool((_GLF_IDENTITY(bool(bvec2(true, true)), ! (! (bool(bvec2(true, true)))))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(bool(bool((_GLF_IDENTITY(bool(bvec2(true, true)), ! (_GLF_IDENTITY(! (bool(bvec2(true, true))), (! (bool(bvec2(true, true)))) && true)))))), (bool(bool((_GLF_IDENTITY(bool(bvec2(true, true)), ! (_GLF_IDENTITY(! (bool(bvec2(true, true))), (! (bool(bvec2(true, true)))) && true))))))) || false)), false || (! (bool(bool((_GLF_IDENTITY(bool(bvec2(true, true)), ! (! (bool(bvec2(true, true)))))))))))))) && true)), (bool(bool(_GLF_IDENTITY((_GLF_IDENTITY(bool(bvec2(true, true)), ! (! (bool(bvec2(true, true)))))), _GLF_IDENTITY(bool(bool((_GLF_IDENTITY(bool(bvec2(true, true)), ! (! (bool(bvec2(true, true)))))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(bool(bool((_GLF_IDENTITY(bool(bvec2(true, true)), ! (_GLF_IDENTITY(! (bool(bvec2(true, true))), (! (bool(bvec2(true, true)))) && true)))))), (bool(bool((_GLF_IDENTITY(bool(bvec2(true, true)), ! (_GLF_IDENTITY(! (bool(bvec2(true, true))), (! (bool(bvec2(true, true)))) && true))))))) || false)), false || (! (bool(bool((_GLF_IDENTITY(bool(bvec2(true, true)), ! (! (bool(bvec2(true, true)))))))))))))) && true))) || false))))) || false)), false, false), false)))))))), false))))), (injectionSwitch.x < injectionSwitch.y))))
                          {
                           barrier();
                           if(_GLF_DEAD(false))
                            {
                             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < ((((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3))) << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6)))); _injected_loop_counter ++)
                              {
                               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x)) > injectionSwitch.y, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x)) > injectionSwitch.y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, false)), bool(bvec2(_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x)) > injectionSwitch.y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, false)), ! (! (bool(bvec4(_GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x)) > injectionSwitch.y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, false))))), true))))))))
                                {
                                }
                               else
                                {
                                 barrier();
                                }
                              }
                            }
                           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat3x4(injectionSwitch, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), sin(0.0), 0.0, 1.0), (mat3x4(injectionSwitch, 1.0, 1.0, 1.0, 1.0, 0.0, _GLF_IDENTITY(0.0, (0.0) + 0.0), _GLF_ONE(1.0, injectionSwitch.y), sin(0.0), 0.0, 1.0)) - mat3x4(0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(acosh(-2935.4153)))), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))).x, clamp(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat3x4(injectionSwitch, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), sin(0.0), 0.0, 1.0), (mat3x4(injectionSwitch, 1.0, 1.0, 1.0, 1.0, 0.0, _GLF_IDENTITY(0.0, (0.0) + 0.0), _GLF_ONE(1.0, injectionSwitch.y), sin(0.0), 0.0, 1.0)) - mat3x4(0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(acosh(-2935.4153)))), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))).x, _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat3x4(injectionSwitch, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), sin(0.0), 0.0, 1.0), (mat3x4(injectionSwitch, 1.0, 1.0, 1.0, 1.0, 0.0, _GLF_IDENTITY(0.0, (0.0) + 0.0), _GLF_ONE(1.0, injectionSwitch.y), sin(0.0), 0.0, 1.0)) - mat3x4(0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(acosh(-2935.4153)))), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))).x, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat3x4(injectionSwitch, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), sin(0.0), 0.0, 1.0), (mat3x4(injectionSwitch, 1.0, 1.0, 1.0, 1.0, 0.0, _GLF_IDENTITY(0.0, (0.0) + 0.0), _GLF_ONE(1.0, injectionSwitch.y), sin(0.0), 0.0, 1.0)) - mat3x4(0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(acosh(-2935.4153)))), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))).x, (true ? _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat3x4(injectionSwitch, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), sin(0.0), 0.0, 1.0), (mat3x4(injectionSwitch, 1.0, 1.0, 1.0, 1.0, 0.0, _GLF_IDENTITY(0.0, (0.0) + 0.0), _GLF_ONE(1.0, injectionSwitch.y), sin(0.0), 0.0, 1.0)) - mat3x4(0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(acosh(-2935.4153)))), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))).x : _GLF_FUZZED(-7.4))))) > injectionSwitch.y))))
                            {
                             if(_GLF_WRAPPED_IF_FALSE(false))
                              {
                              }
                             else
                              {
                               if(_GLF_DEAD(false))
                                {
                                 if(_GLF_DEAD(false))
                                  barrier();
                                 barrier();
                                }
                              }
                             barrier();
                            }
                           if(_GLF_DEAD(false))
                            {
                             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                              barrier();
                             barrier();
                            }
                          }
                         else
                          {
                          }
                         for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 | 0)); _injected_loop_counter --)
                          {
                           if(_GLF_DEAD(false))
                            barrier();
                          }
                        }
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))) - 0.0), injectionSwitch.y))))))
                        barrier();
                      }
                     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, false || (false))), ! (! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false)), false || (false)))))))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y))));
                     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                      {
                       do
                        {
                         if(_GLF_DEAD(false))
                          barrier();
                         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                          {
                           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                            {
                             if(_GLF_WRAPPED_IF_TRUE(true))
                              {
                               barrier();
                              }
                             else
                              {
                              }
                            }
                          }
                         else
                          {
                          }
                        }
                       while(_GLF_WRAPPED_LOOP(false));
                      }
                     else
                      {
                      }
                    }
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 else
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   do
                    {
                     do
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        {
                         if(_GLF_DEAD(false))
                          barrier();
                         for(int _injected_loop_counter = (_GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (0 ^ 0), min(_GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (0 ^ 0), ~ (~ (int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (0 ^ 0)))), _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (0 ^ 0), (int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (0 ^ 0)) * (0 ^ 1))))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                          {
                           barrier();
                          }
                        }
                       if(_GLF_DEAD(false))
                        barrier();
                      }
                     while(_GLF_WRAPPED_LOOP(false));
                    }
                   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(mat2x4(injectionSwitch, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0)))) - log(vec2(1.0, 1.0))).x > injectionSwitch.y)))))));
                  }
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
          {
           barrier();
          }
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   do
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   do
    {
     for(int _injected_loop_counter = (1 | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        {
         do
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch))) - vec2(0.0, 0.0)).x > injectionSwitch.y), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(1464.2862), _GLF_FUZZED(-420.663)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))).x < injectionSwitch.y)) && ((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch))) - vec2(0.0, 0.0)).x > injectionSwitch.y, bool(bvec4(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch))) - vec2(0.0, 0.0)).x > injectionSwitch.y, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))), true && (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bvec2(injectionSwitch.x > injectionSwitch.y, true)), ! (! (bool(bvec2(injectionSwitch.x > injectionSwitch.y, true))))))))))))));
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(vec2(injectionSwitch), (vec2(injectionSwitch)) - vec2(0.0, 0.0)))).y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 >> _GLF_IDENTITY(int(4), int(4)))); _injected_loop_counter --)
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                }
               else
                {
                 barrier();
                }
              }
            }
          }
         else
          {
          }
         do
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
            {
             barrier();
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
   do
    {
     do
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) >> (0 << _GLF_IDENTITY(int(5), int(5)))))
    {
     barrier();
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) > injectionSwitch.y))))
  barrier();
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = _GLF_IDENTITY(gl_NumWorkGroups, _GLF_IDENTITY(_GLF_IDENTITY((gl_NumWorkGroups) << _GLF_IDENTITY(uvec3(0u, 0u, 0u), (false ? _GLF_FUZZED(uvec3(108023u, 145455u, 76694u)) : _GLF_IDENTITY(uvec3(0u, 0u, 0u), _GLF_IDENTITY((uvec3(0u, 0u, 0u)), (false ? _GLF_FUZZED(uvec3(36954u, 36177u, 88675u)) : (uvec3(0u, 0u, 0u)))) ^ uvec3(0u, 0u, _GLF_IDENTITY(0u, uint(uvec3(0u, 0u, 1u))))))), (_GLF_IDENTITY((gl_NumWorkGroups) << _GLF_IDENTITY(uvec3(0u, 0u, 0u), (false ? _GLF_FUZZED(uvec3(108023u, 145455u, 76694u)) : _GLF_IDENTITY(uvec3(0u, 0u, 0u), (uvec3(0u, 0u, 0u)) ^ uvec3(0u, 0u, _GLF_IDENTITY(0u, uint(uvec3(0u, 0u, 1u))))))), clamp((gl_NumWorkGroups) << _GLF_IDENTITY(uvec3(0u, 0u, 0u), (false ? _GLF_FUZZED(uvec3(108023u, 145455u, 76694u)) : _GLF_IDENTITY(uvec3(0u, 0u, 0u), (uvec3(0u, 0u, 0u)) ^ uvec3(0u, 0u, _GLF_IDENTITY(0u, uint(uvec3(0u, 0u, 1u))))))), (gl_NumWorkGroups) << _GLF_IDENTITY(uvec3(0u, 0u, 0u), (false ? _GLF_FUZZED(uvec3(108023u, 145455u, 76694u)) : _GLF_IDENTITY(uvec3(0u, 0u, 0u), (_GLF_IDENTITY(uvec3(0u, 0u, 0u), _GLF_IDENTITY(uvec3(uvec4(uvec3(0u, 0u, 0u), (1u ^ 1u))), (uvec3(uvec4(uvec3(0u, 0u, 0u), (1u ^ 1u)))) - uvec3(0u, 0u, 0u)))) ^ uvec3(0u, 0u, _GLF_IDENTITY(0u, uint(uvec3(0u, 0u, 1u))))))), (gl_NumWorkGroups) << _GLF_IDENTITY(uvec3(0u, 0u, 0u), (false ? _GLF_FUZZED(uvec3(108023u, 145455u, 76694u)) : _GLF_IDENTITY(uvec3(0u, 0u, 0u), (uvec3(0u, 0u, 0u)) ^ uvec3(0u, 0u, _GLF_IDENTITY(0u, uint(uvec3(0u, 0u, 1u)))))))))) >> uvec3(0u, 0u, 0u)), (false ? _GLF_FUZZED(uvec3(45154u, _GLF_IDENTITY(136796u, (136796u) * 1u), 31366u)) : (gl_NumWorkGroups) << _GLF_IDENTITY(uvec3(0u, 0u, 0u), (false ? _GLF_FUZZED(uvec3(108023u, _GLF_IDENTITY(145455u, ~ (~ (_GLF_IDENTITY(145455u, (145455u) >> 0u)))), 76694u)) : _GLF_IDENTITY(uvec3(0u, 0u, 0u), _GLF_IDENTITY((uvec3(0u, 0u, 0u)) ^ uvec3(0u, 0u, _GLF_IDENTITY(0u, uint(uvec3(0u, 0u, 1u)))), ~ (_GLF_IDENTITY(~ ((uvec3(0u, 0u, 0u)) ^ uvec3(0u, 0u, _GLF_IDENTITY(0u, uint(uvec3(0u, _GLF_IDENTITY(0u, 0u ^ (0u)), 1u))))), (true ? ~ ((uvec3(0u, 0u, 0u)) ^ uvec3(0u, 0u, _GLF_IDENTITY(0u, uint(uvec3(0u, 0u, 1u))))) : _GLF_FUZZED((uvec3(107116u, 166346u, 139431u) + uvec3(177281u, 146210u, 46838u))))))))))))).x;
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     barrier();
    }
   else
    {
    }
  }
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = _GLF_IDENTITY(0, max(0, 0)); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != (1 ^ 0)), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != (1 ^ 0))))); _injected_loop_counter ++)
    {
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), true, false, true))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) || false)))
  {
  }
 else
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     do
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
          }
         else
          {
           barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
  }
 for(int _injected_loop_counter = _GLF_IDENTITY(((1 << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), ~ (~ (int(0)))))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(0), ~ (~ (int(0)))), int(0))), (((1 << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), ~ (~ (int(0)))))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(0), ~ (_GLF_IDENTITY(~ (int(0)), max(~ (int(0)), ~ (_GLF_IDENTITY(int(0), ~ (~ (int(0))))))))), int(0)))) ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
  {
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! ((_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(! ((_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x > injectionSwitch.y)), ! (! (! ((_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x > injectionSwitch.y)))))), (! (_GLF_IDENTITY(! ((_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x > injectionSwitch.y)), ! (! (! ((_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))))) && true))))))))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch), mix(vec2(_GLF_FUZZED(2.5), ((injectionSwitch))[1]), vec2(((injectionSwitch))[0], _GLF_FUZZED(-2.4)), bvec2(true, false))) / vec2(1.0, 1.0)).x, _GLF_IDENTITY(float(float(injectionSwitch.x)), _GLF_IDENTITY(max(float(float(injectionSwitch.x)), float(float(injectionSwitch.x))), float(vec4(max(float(float(injectionSwitch.x)), float(float(injectionSwitch.x))), 0.0, 0.0, 1.0))))), _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0))) > injectionSwitch.y))) && true)));
  }
 do
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(false));
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = workgroup_size * workgroup_id;
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     do
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))))))
        {
         barrier();
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 uint virtual_gid = _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, (174274u & 0u) + (workgroup_base + _GLF_IDENTITY(subgroup_id * subgroup_size, 0u | _GLF_IDENTITY((subgroup_id * subgroup_size), (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_id, (false ? _GLF_FUZZED(workgroup_base) : _GLF_IDENTITY(subgroup_id, (subgroup_id) << 0u))) * subgroup_size), clamp((subgroup_id * subgroup_size), (subgroup_id * subgroup_size), (subgroup_id * subgroup_size)))) >> 0u)))), ~ (~ (_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, (174274u & 0u) + _GLF_IDENTITY((workgroup_base + _GLF_IDENTITY(subgroup_id * subgroup_size, _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, (false ? _GLF_FUZZED(min(num_workgroup, subgroup_id)) : 0u))) | (0u)) | _GLF_IDENTITY((_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id)) * subgroup_size), (_GLF_IDENTITY((subgroup_id * subgroup_size), clamp((subgroup_id * subgroup_size), (subgroup_id * subgroup_size), _GLF_IDENTITY((subgroup_id * subgroup_size), 0u + (_GLF_IDENTITY((subgroup_id * subgroup_size), 0u ^ ((subgroup_id * subgroup_size)))))))) >> 0u))), max((workgroup_base + _GLF_IDENTITY(subgroup_id * subgroup_size, _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, (false ? _GLF_FUZZED(min(num_workgroup, subgroup_id)) : 0u))) | (0u)) | _GLF_IDENTITY((subgroup_id * subgroup_size), (_GLF_IDENTITY((subgroup_id * subgroup_size), clamp((subgroup_id * subgroup_size), (subgroup_id * subgroup_size), _GLF_IDENTITY((subgroup_id * subgroup_size), 0u + (_GLF_IDENTITY((subgroup_id * subgroup_size), 0u ^ ((subgroup_id * subgroup_size)))))))) >> 0u))), (workgroup_base + _GLF_IDENTITY(subgroup_id * subgroup_size, _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, (false ? _GLF_FUZZED(_GLF_IDENTITY(min(num_workgroup, subgroup_id), min(min(num_workgroup, subgroup_id), min(num_workgroup, subgroup_id)))) : 0u))) | (0u)) | _GLF_IDENTITY((subgroup_id * subgroup_size), (_GLF_IDENTITY((subgroup_id * subgroup_size), clamp((subgroup_id * subgroup_size), (subgroup_id * subgroup_size), _GLF_IDENTITY((subgroup_id * subgroup_size), 0u + (_GLF_IDENTITY((subgroup_id * subgroup_size), 0u ^ ((subgroup_id * subgroup_size)))))))) >> 0u))))))))) + subgroup_local_id;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, (true) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))
  {
   for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (int(_GLF_IDENTITY(4, 0 | (4)))) - 0))); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
  }
 else
  {
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
  barrier();
 uint next_virtual_gid = workgroup_base + subgroup_id * subgroup_size + ((subgroup_local_id + 1) % _GLF_IDENTITY(subgroup_size, max(subgroup_size, subgroup_size)));
 do
  {
   for(int _injected_loop_counter = (91905 & 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 buf[virtual_gid] = 1;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 do
  {
   if(_GLF_DEAD(false))
    {
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           barrier();
          }
         else
          {
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)), bool(bvec3(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
        {
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (0 | 1)); _injected_loop_counter ++)
            {
             barrier();
            }
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         do
          {
           if(_GLF_DEAD(false))
            {
             do
              {
               barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
         for(int _injected_loop_counter = _GLF_IDENTITY(0, min(0, 0)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
          {
           for(int _injected_loop_counter = (_GLF_IDENTITY(0, int(ivec2(_GLF_IDENTITY(0, max(0, 0)), ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(4), min(int(4), int(4))), _GLF_IDENTITY(int(4), (int(4)) ^ 0))) >> _GLF_IDENTITY(int(4), int(4)))))) << _GLF_IDENTITY(int(7), int(_GLF_IDENTITY(7, (7) | (7))))); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < 1), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < 1), (_GLF_WRAPPED_LOOP(_injected_loop_counter < 1)) || false)))); _injected_loop_counter ++)
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, bool(bvec2(true, true))), (injectionSwitch.x < injectionSwitch.y))))
              {
               if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && _GLF_IDENTITY(true, bool(bvec4(_GLF_IDENTITY(true, true && (true)), _GLF_TRUE(_GLF_IDENTITY(true, bool(bvec3(_GLF_IDENTITY(true, ! (! (true))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))), (injectionSwitch.x < injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)))), bool(bvec2(_GLF_IDENTITY(false, (false) && _GLF_IDENTITY(true, bool(bvec4(_GLF_IDENTITY(true, true && (true)), _GLF_TRUE(_GLF_IDENTITY(true, bool(bvec3(_GLF_IDENTITY(true, ! (! (true))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))), (injectionSwitch.x < injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)))), true)))))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).x > injectionSwitch.y))))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
                    barrier();
                   barrier();
                  }
                }
               else
                {
                 do
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, true && (false))))), true, true))), (injectionSwitch.x > injectionSwitch.y))));
                 barrier();
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x))), float(_GLF_FUZZED(93.77)), bool(false))) > injectionSwitch.y))))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 barrier();
                }
               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                }
               else
                {
                 if(_GLF_DEAD(false))
                  barrier();
                }
              }
             else
              {
              }
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               barrier();
              }
            }
          }
        }
      }
     else
      {
      }
    }
  }
 while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false));
 do
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bvec4(injectionSwitch.x > injectionSwitch.y, _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y)), true, false)), (bool(bvec4(injectionSwitch.x > injectionSwitch.y, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false))) && true))))))
      {
       do
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (false)))))
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
        }
      }
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))))
      {
      }
     else
      {
       for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
          barrier();
        }
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), true && (! (false)))))))
      {
      }
     else
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x < injectionSwitch.y))))
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(subgroup_local_id + 1 < subgroup_size)
            {
             if(_GLF_DEAD(false))
              barrier();
             for(int _injected_loop_counter = 1; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0), bool(bvec3(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0), _GLF_IDENTITY(false, (false) && true), _GLF_IDENTITY(true, bool(bvec2(true, true)))))); _injected_loop_counter --)
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     atomicStore(buf[next_virtual_gid], uint(2), 4, _GLF_IDENTITY(64, (64) | (64)), 4);
                    }
                  }
                 else
                  {
                   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, false || (false))))
                    {
                    }
                   else
                    {
                     if(_GLF_WRAPPED_IF_TRUE(true))
                      {
                       do
                        {
                         if(_GLF_DEAD(false))
                          barrier();
                        }
                       while(_GLF_WRAPPED_LOOP(false));
                      }
                     else
                      {
                      }
                    }
                  }
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                  {
                   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
                    barrier();
                  }
                 else
                  {
                  }
                }
               else
                {
                }
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
                  barrier();
                }
              }
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               do
                {
                 if(_GLF_DEAD(false))
                  barrier();
                }
               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
              }
             for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY((_GLF_IDENTITY((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(1), int(1)), (_GLF_IDENTITY(1 << _GLF_IDENTITY(int(1), int(1)), 0 | (1 << _GLF_IDENTITY(int(1), int(1))))) - int(_GLF_ZERO(0.0, injectionSwitch.x)))) >> _GLF_IDENTITY(int(1), int(1)), _GLF_IDENTITY(max((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1)), (1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(_GLF_IDENTITY(1, clamp(1, 1, 1))))), (max((1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(_GLF_IDENTITY(1, max(_GLF_IDENTITY(1, (1) << 0), 1))), max(int(_GLF_IDENTITY(1, max(_GLF_IDENTITY(1, (1) << 0), 1))), int(_GLF_IDENTITY(1, max(_GLF_IDENTITY(1, (1) << 0), 1))))))) >> _GLF_IDENTITY(int(1), int(1)), (1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(_GLF_IDENTITY(1, clamp(1, 1, 1)))))) - 0))), (_GLF_IDENTITY((_GLF_IDENTITY((_GLF_IDENTITY(1 << _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), (_GLF_IDENTITY(false, ! (! (false))) ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(int(1), int(1)))), (_GLF_IDENTITY(1 << _GLF_IDENTITY(int(1), int(1)), 0 | (1 << _GLF_IDENTITY(int(1), int(1))))) - int(_GLF_ZERO(0.0, injectionSwitch.x)))) >> _GLF_IDENTITY(int(1), int(1)), _GLF_IDENTITY(max((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1)), (1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(_GLF_IDENTITY(1, clamp(1, 1, 1))))), (max((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1)), (1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(_GLF_IDENTITY(1, clamp(1, 1, 1)))))) - 0))), (false ? _GLF_FUZZED((_injected_loop_counter)) : (_GLF_IDENTITY((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(1), int(1)), _GLF_IDENTITY((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(1), int(1)), 0 | (1 << _GLF_IDENTITY(_GLF_IDENTITY(int(1), (_GLF_IDENTITY(int(1), (int(1)) | 0)) | (_GLF_IDENTITY(int(1), min(int(1), _GLF_IDENTITY(int(1), int(ivec3(int(1), 0, 1))))))), int(1))))), ((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(1), int(1)), 0 | (1 << _GLF_IDENTITY(_GLF_IDENTITY(int(1), (_GLF_IDENTITY(int(1), (int(1)) | 0)) | (_GLF_IDENTITY(int(1), min(int(1), _GLF_IDENTITY(int(1), int(ivec3(int(1), 0, 1))))))), int(1)))))) ^ 0) - int(_GLF_ZERO(0.0, injectionSwitch.x)))) >> _GLF_IDENTITY(int(1), int(1)), _GLF_IDENTITY(max((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1)), (1 << _GLF_IDENTITY(int(_GLF_IDENTITY(1, ~ (~ (1)))), int(1))) >> _GLF_IDENTITY(int(1), int(_GLF_IDENTITY(1, clamp(1, 1, 1))))), (max((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), clamp(_GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), max(_GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), max(_GLF_IDENTITY(int(1), int(1)), _GLF_IDENTITY(int(1), int(1)))), _GLF_IDENTITY(int(1), int(1)))), _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), (_GLF_IDENTITY(int(1), int(1))) / int(_GLF_ONE(1.0, injectionSwitch.y))), _GLF_IDENTITY(int(1), int(1)))), (1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(_GLF_IDENTITY(1, clamp(1, 1, 1)))))) - 0)))))) - 0)); _injected_loop_counter ++)
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y))))))
                  barrier();
                }
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                  }
                 else
                  {
                  }
                 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, false || (false))), true && (! (_GLF_IDENTITY(false, false || (false)))))))))
                  {
                   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                    {
                     barrier();
                    }
                  }
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                  {
                   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), bool(bvec3((_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-9674.2779)), float(injectionSwitch.x), bool(true))) < injectionSwitch.y), true, false))))))
                    {
                     if(_GLF_WRAPPED_IF_TRUE(true))
                      {
                       subgroupAll(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) && true)))), ! (! (! _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(false, ! (! (false)))), ! (! (_GLF_IDENTITY((_GLF_IDENTITY(false, ! (! (false)))), bool(bvec4((_GLF_IDENTITY(false, ! (! (false)))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true)))))), ! (! ((_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), true && (_GLF_IDENTITY(false, ! (! (false)))))) || false)))))))))), true && (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), ! (! _GLF_IDENTITY((_GLF_IDENTITY(false, _GLF_IDENTITY((false) || false, ! (_GLF_IDENTITY(! ((false) || false), ! (! (! ((false) || false)))))))), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY((_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec2(! (false), true)))))) || false)), false || ((_GLF_IDENTITY(false, (false) || false)))), false), bvec2(bvec3(bvec2(_GLF_IDENTITY((_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec2(! (false), true)))))) || false)), false || ((_GLF_IDENTITY(false, (false) || false)))), false), true)))))))), ! (! _GLF_IDENTITY((_GLF_IDENTITY(! _GLF_IDENTITY((_GLF_IDENTITY(false, ! (! (false)))), bool(bvec4(_GLF_IDENTITY((_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false))))))), bool(bvec2((_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false))))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), false, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), true && (! (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec2(! (false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))), bool(bvec3(_GLF_IDENTITY((_GLF_IDENTITY(! (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, false || (false)))))), true && (! (_GLF_IDENTITY(false, ! (! (false))))))), ((_GLF_IDENTITY(! _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, true && (false))))))), ! (! (false)))), ! (! (_GLF_IDENTITY((_GLF_IDENTITY(false, ! (! (false)))), ((_GLF_IDENTITY(false, ! (! (false))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), true && (! (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), (_GLF_IDENTITY(false, ! (! (false)))) || false), true, false, false)))))))) && true), true, true))))))), (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), false || (_GLF_IDENTITY(false, (false) && true))), ! (_GLF_IDENTITY(! (false), (! (false)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), ! (! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), false || (_GLF_IDENTITY(false, ! (! (false))))), false, true))), bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, ! (! (false)))), ! (! (bool(_GLF_IDENTITY(false, ! (! (false))))))))), true, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))))) && true), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), ! (! (false)))), ! (! (! (_GLF_IDENTITY(false, ! (! (false))))))))), (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), false || (_GLF_IDENTITY(false, (false) && true))), ! (_GLF_IDENTITY(! (false), (! (false)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), false || (_GLF_IDENTITY(false, (false) && true))), bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), false || (_GLF_IDENTITY(false, (false) && true)))))), ! _GLF_IDENTITY((_GLF_IDENTITY(! (false), _GLF_IDENTITY((! (false)), false || ((! (false)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (! ((_GLF_IDENTITY(! (false), _GLF_IDENTITY((! (false)), false || ((! (false)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), true && (_GLF_IDENTITY(false, (false) && true))), false || (_GLF_IDENTITY(false, (false) && true))), ! (_GLF_IDENTITY(! (false), (! (false)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))))), ! (! _GLF_IDENTITY((! (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), false || (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), ! (! (false))), (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, true, true, false)), (bool(bvec4(false, true, true, false))) || false)))))) || false)))))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && ((! (_GLF_IDENTITY(false, ! (! (false)))))))))))) && _GLF_IDENTITY(true, false || (true))))), bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), ! (! (false)))), ! (! (! (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), false || (! (false))))))))))), (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), false || (_GLF_IDENTITY(false, (false) && true))), ! (_GLF_IDENTITY(! (false), (! (false)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), ! (! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, ! (! (false)))), (! (_GLF_IDENTITY(false, ! (! (false))))) || false))))))) && true))), (bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), ! (! (false)))), ! (! (! (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), false || (! (false))))))))))), (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), false || (_GLF_IDENTITY(false, (false) && true))), ! (_GLF_IDENTITY(! (false), (! (false)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), ! (! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, ! (! (false)))), (! (_GLF_IDENTITY(false, ! (! (false))))) || false))))))) && true)))) || false), (bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), ! (! (false)))), ! (! (! (_GLF_IDENTITY(false, ! (! (false))))))))), (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), false || (_GLF_IDENTITY(false, (false) && true))), ! (_GLF_IDENTITY(! (false), (! (false)) || _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(_GLF_IDENTITY(mat3x4(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, determinant(mat2(0.0, 1.0, _GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, 0.0 + (0.0))) - 0.0), 0.0))), (false ? _GLF_FUZZED(mat3x4(6.0, -0.6, 9.1, 934.799, 20.43, -7.1, 7.7, -10.44, -8549.1669, -2990.1848, -5241.2986, -91.61)) : mat3x4(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), 1.0, 0.0, _GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, mix(float(_GLF_IDENTITY(1.0, min(1.0, 1.0))), float(_GLF_FUZZED(243.709)), bool(false)))) / 1.0), 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, determinant(mat2(0.0, 1.0, 0.0, 0.0))))))))))))), ! (! (! (_GLF_IDENTITY(false, ! (! (false)))))))))) && true)))) && true), false || (_GLF_IDENTITY(_GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), ! (! (false)))), ! (! (! (_GLF_IDENTITY(false, ! (! (false))))))))), (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), false || (_GLF_IDENTITY(false, (false) && true))), ! (_GLF_IDENTITY(! (false), (! (false)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), ! (! (! (_GLF_IDENTITY(false, ! (! (false)))))))))) && true))), (bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY((false), bool(bool(_GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), (! ((false))) || false)))))) && true), ! (! (false)))), ! (! (! (_GLF_IDENTITY(false, ! (! (false))))))))), (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), false || (_GLF_IDENTITY(false, (false) && true))), ! (_GLF_IDENTITY(! (false), (! (false)) || _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true))))))), ! (! (! (_GLF_IDENTITY(false, ! (! (false)))))))))) && true)))) && true), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), ! (! (false)))), ! (! (! (_GLF_IDENTITY(false, ! (! (false))))))))), (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), (! ((false))) || _GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec2(! (false), false)))))))))) && true), false || (_GLF_IDENTITY(false, (false) && true))), ! (_GLF_IDENTITY(! _GLF_IDENTITY((false), bool(_GLF_IDENTITY(bool((false)), false || (bool((false)))))), (! (false)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), ! (! ((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), (! ((false))) || _GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec2(! (false), false)))))))))) && true), false || (_GLF_IDENTITY(false, (false) && true))), ! (_GLF_IDENTITY(! _GLF_IDENTITY((false), bool(_GLF_IDENTITY(bool((false)), false || (bool((false)))))), (! (false)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))), ! (! (! (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (_GLF_IDENTITY(! (! (false)), ! (! (! (! (false)))))))))))))))) && true))), (bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY((false) && true, (_GLF_IDENTITY((false) && true, ((false) && true) || false)) || false)), ! (! (false)))), ! (! (! (_GLF_IDENTITY(false, ! (! (false)))))))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), ! (! (false)))), ! (! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), true && (_GLF_IDENTITY(false, ! (! (false)))))))))), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec3(bvec4(bvec3(! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), ! (! (false)))), ! (! (! (_GLF_IDENTITY(false, ! (! (false)))))))), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true)))), bool(bvec4(bool(_GLF_IDENTITY(bvec3(! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), ! (! (false)))), ! _GLF_IDENTITY((! _GLF_IDENTITY((! (_GLF_IDENTITY(false, ! (! (false))))), bool(bvec3((! (_GLF_IDENTITY(false, ! (! (false))))), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), ! (! ((! _GLF_IDENTITY((! (_GLF_IDENTITY(false, ! (! (false))))), bool(bvec3((! (_GLF_IDENTITY(false, ! (! (false))))), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))))), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec3(bvec4(bvec3(! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), ! (! (false)))), ! (! (! (_GLF_IDENTITY(false, ! (! (false)))))))), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true)))), false, false, true))))), (_GLF_IDENTITY(false, ! _GLF_IDENTITY((_GLF_IDENTITY(! _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), false || (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, false || (false))), (bool(_GLF_IDENTITY(false, false || (false)))) || false)))) && true))), ! (_GLF_IDENTITY(! (false), _GLF_IDENTITY((! (false)), ! (! ((! (false))))) || _GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y)))))))), ((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), false || (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, false || (false))), (bool(_GLF_IDENTITY(false, false || (false)))) || false)))) && true))), ! (_GLF_IDENTITY(! (false), _GLF_IDENTITY((! (false)), ! (! ((! (false))))) || _GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y))))))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), ! (! (! (_GLF_IDENTITY(false, ! (! (false)))))))), (_GLF_IDENTITY((_GLF_IDENTITY(! _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), false || (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, false || (false))), (bool(_GLF_IDENTITY(false, false || (false)))) || false)))) && true))), ! (_GLF_IDENTITY(! (false), _GLF_IDENTITY((! (false)), ! (! ((! (false))))) || _GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y)))))))), ((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), false || (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, false || (false))), (bool(_GLF_IDENTITY(false, false || (false)))) || false)))) && true))), ! (_GLF_IDENTITY(! (false), _GLF_IDENTITY((! (false)), ! (! ((! (false))))) || _GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y))))))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), ! (! (! (_GLF_IDENTITY(false, ! (! (false)))))))), ! (! ((_GLF_IDENTITY(! _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), false || (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, false || (false))), (bool(_GLF_IDENTITY(false, false || (false)))) || false)))) && true))), ! (_GLF_IDENTITY(! (false), _GLF_IDENTITY((! (false)), ! (! ((! (false))))) || _GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y)))))))), ((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), false || (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, false || (false))), (bool(_GLF_IDENTITY(false, false || (false)))) || false)))) && true))), ! (_GLF_IDENTITY(! (false), _GLF_IDENTITY((! (false)), ! (! ((! (false))))) || _GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y))))))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), ! (! (! (_GLF_IDENTITY(false, ! (! (false)))))))))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) && true)))) && true)), (bool(_GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), ! (! (false)))), ! (! (! (_GLF_IDENTITY(false, ! (! (false))))))))), (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), (! ((false))) || _GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec2(! (false), false)))))))))) && true), false || (_GLF_IDENTITY(false, (false) && true))), ! (_GLF_IDENTITY(! _GLF_IDENTITY((false), bool(_GLF_IDENTITY(bool((false)), false || (bool((false)))))), (! (false)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), ! (! ((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), (! ((false))) || _GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec2(! (false), false)))))))))) && true), false || (_GLF_IDENTITY(false, (false) && true))), ! (_GLF_IDENTITY(! _GLF_IDENTITY((false), bool(_GLF_IDENTITY(bool((false)), false || (bool((false)))))), (! (false)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))), ! (! (! (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (_GLF_IDENTITY(! (! (false)), ! (! (! (! (false)))))))))))))))) && true))), (bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY((false) && true, (_GLF_IDENTITY((false) && true, ((false) && true) || false)) || false)), ! (! (false)))), ! (! (! (_GLF_IDENTITY(false, ! (! (false)))))))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), ! (! (false)))), ! (! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), true && (_GLF_IDENTITY(false, ! (! (false)))))))))), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec3(bvec4(bvec3(! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), ! (! (false)))), ! (! (! (_GLF_IDENTITY(false, ! (! (false)))))))), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true)))), bool(bvec4(bool(_GLF_IDENTITY(bvec3(! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), ! (! (false)))), ! _GLF_IDENTITY((! _GLF_IDENTITY((! (_GLF_IDENTITY(false, ! (! (false))))), bool(bvec3((! (_GLF_IDENTITY(false, ! (! (false))))), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), ! (! ((! _GLF_IDENTITY((! (_GLF_IDENTITY(false, ! (! (false))))), bool(bvec3((! (_GLF_IDENTITY(false, ! (! (false))))), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))))), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec3(bvec4(bvec3(! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), ! (! (false)))), ! (! (! (_GLF_IDENTITY(false, ! (! (false)))))))), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true)))), false, false, true))))), (_GLF_IDENTITY(false, ! _GLF_IDENTITY((_GLF_IDENTITY(! _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), false || (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, false || (false))), (bool(_GLF_IDENTITY(false, false || (false)))) || false)))) && true))), ! (_GLF_IDENTITY(! (false), _GLF_IDENTITY((! (false)), ! (! ((! (false))))) || _GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y)))))))), ((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), false || (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, false || (false))), (bool(_GLF_IDENTITY(false, false || (false)))) || false)))) && true))), ! (_GLF_IDENTITY(! (false), _GLF_IDENTITY((! (false)), ! (! ((! (false))))) || _GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y))))))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), ! (! (! (_GLF_IDENTITY(false, ! (! (false)))))))), (_GLF_IDENTITY((_GLF_IDENTITY(! _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), false || (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, false || (false))), (bool(_GLF_IDENTITY(false, false || (false)))) || false)))) && true))), ! (_GLF_IDENTITY(! (false), _GLF_IDENTITY((! (false)), ! (! ((! (false))))) || _GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y)))))))), ((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), false || (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, false || (false))), (bool(_GLF_IDENTITY(false, false || (false)))) || false)))) && true))), ! (_GLF_IDENTITY(! (false), _GLF_IDENTITY((! (false)), ! (! ((! (false))))) || _GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y))))))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), ! (! (! (_GLF_IDENTITY(false, ! (! (false)))))))), ! (! ((_GLF_IDENTITY(! _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), false || (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, false || (false))), (bool(_GLF_IDENTITY(false, false || (false)))) || false)))) && true))), ! (_GLF_IDENTITY(! (false), _GLF_IDENTITY((! (false)), ! (! ((! (false))))) || _GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y)))))))), ((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), false || (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, false || (false))), (bool(_GLF_IDENTITY(false, false || (false)))) || false)))) && true))), ! (_GLF_IDENTITY(! (false), _GLF_IDENTITY((! (false)), ! (! ((! (false))))) || _GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y))))))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), ! (! (! (_GLF_IDENTITY(false, ! (! (false)))))))))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) && true)))) && true))) || false))))))))))));
                      }
                     else
                      {
                      }
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
                      {
                       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                        {
                         barrier();
                        }
                       else
                        {
                        }
                      }
                     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 & 1)); _injected_loop_counter ++)
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        {
                         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                          {
                           barrier();
                          }
                        }
                      }
                     if(_GLF_DEAD(false))
                      barrier();
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_WRAPPED_IF_FALSE(false))
                        {
                        }
                       else
                        {
                         barrier();
                        }
                      }
                     if(_GLF_WRAPPED_IF_TRUE(true))
                      {
                       do
                        {
                         if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
                          barrier();
                        }
                       while(_GLF_WRAPPED_LOOP(false));
                       if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(9.9), _GLF_FUZZED(9192.6177)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))).y), (_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(9.9), _GLF_FUZZED(9192.6177)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))).y), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(9.9), _GLF_FUZZED(9192.6177)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))).y)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
                        {
                         if(_GLF_WRAPPED_IF_FALSE(false))
                          {
                          }
                         else
                          {
                           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                            {
                             barrier();
                            }
                           else
                            {
                            }
                          }
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          barrier();
                        }
                      }
                     else
                      {
                      }
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y))))))
                        barrier();
                       barrier();
                      }
                    }
                   else
                    {
                     if(_GLF_WRAPPED_IF_TRUE(true))
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        {
                         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          {
                          }
                         else
                          {
                           for(int _injected_loop_counter = int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                            {
                             barrier();
                            }
                          }
                        }
                       if(_GLF_DEAD(false))
                        barrier();
                      }
                     else
                      {
                      }
                    }
                  }
                 else
                  {
                  }
                 if(_GLF_DEAD(false))
                  barrier();
                }
               else
                {
                }
               if(_GLF_DEAD(false))
                {
                 do
                  {
                   barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
              }
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 barrier();
                }
               else
                {
                }
              }
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
               if(_GLF_DEAD(false))
                barrier();
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(mat4x3(injectionSwitch, 0.0, 1.0, 0.0, 1.0, 0.0, _GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0, 0.0, _GLF_IDENTITY(0.0, (0.0) + 0.0), 0.0))).x > injectionSwitch.y))))
              {
               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                }
               else
                {
                 barrier();
                }
              }
            }
           else
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               do
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
               do
                {
                 if(_GLF_DEAD(false))
                  barrier();
                }
               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_DEAD(false))
                  barrier();
                }
               else
                {
                 do
                  {
                   atomicStore(buf[next_virtual_gid], _GLF_IDENTITY(uint(2), clamp(uint(2), uint(2), _GLF_IDENTITY(_GLF_IDENTITY(uint(2), 1u * (_GLF_IDENTITY(uint(2), (_GLF_IDENTITY(uint(2), clamp(uint(2), uint(2), uint(2)))) | 0u))), uint(uint(uint(2)))))), 4, 64, 4);
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
               if(_GLF_DEAD(false))
                barrier();
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_DEAD(false))
                barrier();
              }
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               subgroupAll(true);
              }
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
            }
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
        }
      }
    }
   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec2(false, true)))) && true)), true && (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), bool(bvec4(_GLF_WRAPPED_IF_FALSE(false), false, true, false))))))
    {
    }
   else
    {
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))));
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, 0 | (1)), 1, 1))); _GLF_IDENTITY(_injected_loop_counter ++, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) + 0) : _GLF_FUZZED(_injected_loop_counter))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (! (false)))))))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         barrier();
        }
      }
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
        barrier();
      }
    }
   else
    {
    }
  }
 do
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) || false)));
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, ! (! (true)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         barrier();
         if(_GLF_DEAD(false))
          {
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
      }
    }
   else
    {
    }
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))
        {
         barrier();
        }
       else
        {
         do
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), false || (! ((injectionSwitch.x > injectionSwitch.y))))))))))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != (((1 & 1) << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4)))); _injected_loop_counter ++)
          {
           barrier();
          }
        }
       barrier();
      }
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) || false)))))
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
      barrier();
    }
   else
    {
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
