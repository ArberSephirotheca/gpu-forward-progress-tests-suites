#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(false))
  return;
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))))
          return;
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            return;
           barrier();
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, true, false)))))
            return;
           return;
          }
         do
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              continue;
             return;
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                break;
               break;
              }
             if(_GLF_DEAD(false))
              break;
            }
           else
            {
             return;
             if(_GLF_DEAD(false))
              break;
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))), true, false, true)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (bool(bvec4(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))), true, false, true))))))));
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
          {
           for(int _injected_loop_counter = (((1 & ((1 << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), min(int(5), int(5))))) >> _GLF_IDENTITY(int(5), int(5)))) << _GLF_IDENTITY(_GLF_IDENTITY(int(4), (int(4)) | (int(4))), int(4))) >> _GLF_IDENTITY(int(4), int(4))); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 << _GLF_IDENTITY(int(2), int(2)))); _injected_loop_counter --)
            {
             barrier();
            }
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              return;
             barrier();
            }
           return;
          }
        }
       else
        {
        }
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         return;
         if(_GLF_DEAD(false))
          return;
        }
       else
        {
        }
      }
    }
  }
 else
  {
  }
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x)) > injectionSwitch.y))))
  {
  }
 else
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, true && (false))))))
        {
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
          return;
         continue;
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(970.052, 548.891)) : injectionSwitch)))))).y))))
        break;
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           barrier();
          }
         else
          {
          }
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          break;
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            continue;
           barrier();
           if(_GLF_DEAD(false))
            return;
          }
        }
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec2((injectionSwitch.x > injectionSwitch.y), false))))))
          continue;
         break;
        }
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), _GLF_IDENTITY((mat2(1.0) * (injectionSwitch)) * mat2(1.0), max((mat2(1.0) * (injectionSwitch)) * mat2(1.0), _GLF_IDENTITY((mat2(1.0) * (injectionSwitch)) * mat2(1.0), (true ? (mat2(1.0) * (injectionSwitch)) * mat2(1.0) : _GLF_FUZZED(vec2(-5.7, 5.6)))))))).y))), false), bvec2(bvec4(bvec2(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), (mat2(1.0) * (injectionSwitch)) * mat2(1.0))).y))), false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))))))))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          break;
         for(int _injected_loop_counter = _GLF_IDENTITY((1 & 1), clamp((1 & _GLF_IDENTITY(1, (1) >> 0)), (1 & 1), (1 & 1))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
              return;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(false))
                continue;
               continue;
              }
             if(_GLF_DEAD(false))
              break;
             barrier();
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              break;
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                continue;
               break;
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
            }
           else
            {
            }
          }
        }
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        return;
      }
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       return;
      }
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
    }
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
  {
   if(_GLF_DEAD(false))
    return;
   barrier();
  }
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     return;
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_DEAD(false))
  return;
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     for(int _injected_loop_counter = (1 | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         return;
         if(_GLF_DEAD(false))
          return;
        }
       else
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
          return;
        }
       if(_GLF_DEAD(false))
        return;
      }
     if(_GLF_DEAD(false))
      break;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
  return;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))) / _GLF_IDENTITY(exp(0.0), (exp(0.0)) / 1.0)) > injectionSwitch.y))))
    {
     for(int _injected_loop_counter = (0 ^ 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       return;
      }
    }
   return;
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = _GLF_IDENTITY(1, (1) / 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 | 0)); _injected_loop_counter --)
    {
     barrier();
    }
  }
 if(_GLF_DEAD(false))
  return;
 uint num_workgroup = _GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups.x, (gl_NumWorkGroups.x) - 0u), clamp(_GLF_IDENTITY(gl_NumWorkGroups.x, (gl_NumWorkGroups.x) - 0u), _GLF_IDENTITY(gl_NumWorkGroups.x, (gl_NumWorkGroups.x) - 0u), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, ~ (~ (gl_NumWorkGroups))).x, (gl_NumWorkGroups.x) - 0u), clamp(_GLF_IDENTITY(gl_NumWorkGroups.x, (gl_NumWorkGroups.x) - 0u), _GLF_IDENTITY(gl_NumWorkGroups.x, (gl_NumWorkGroups.x) - 0u), _GLF_IDENTITY(gl_NumWorkGroups.x, (gl_NumWorkGroups.x) - 0u)))));
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(false, (false) || false), true, false, true)), false || (bool(bvec4(_GLF_IDENTITY(false, (false) || false), true, false, true))))), true)))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
    return;
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
    {
     return;
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1)))); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
      break;
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bvec4(injectionSwitch.x > injectionSwitch.y, false, false, true)), ! _GLF_IDENTITY(_GLF_IDENTITY((! (bool(bvec4(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y, false, _GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), ! (! (_GLF_IDENTITY(false, ! (! (false)))))), true)))), ((! (bool(bvec4(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(46.33)), float(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-487.470)), float(injectionSwitch.y), bool(true)))), bool(true))), false, false, true))))) && true), true && (_GLF_IDENTITY((! (bool(bvec4(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y, false, _GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), ! (! (_GLF_IDENTITY(false, ! (! (false)))))), true)))), ((! (bool(bvec4(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(46.33)), float(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-487.470)), float(injectionSwitch.y), bool(true)))), bool(true))), false, false, true))))) && true)))))))))
      {
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         return;
        }
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
            continue;
           break;
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(_GLF_IDENTITY(vec2(_GLF_FUZZED(vec4(-4.7, -892.244, -11.85, -3.5).q), (injectionSwitch)[1]), clamp(vec2(_GLF_FUZZED(vec4(-4.7, -892.244, -11.85, -3.5).q), (injectionSwitch)[1]), vec2(_GLF_FUZZED(vec4(-4.7, -892.244, -11.85, -3.5).q), (injectionSwitch)[1]), vec2(_GLF_FUZZED(vec4(-4.7, -892.244, -11.85, -3.5).q), (injectionSwitch)[1]))), vec2(_GLF_IDENTITY((injectionSwitch)[0], ((injectionSwitch)[0]) - 0.0), _GLF_IDENTITY(_GLF_FUZZED(3.2), (false ? _GLF_FUZZED(trunc(-115.999)) : _GLF_FUZZED(3.2)))), bvec2(true, false))).y))))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || _GLF_IDENTITY(false, _GLF_IDENTITY((false) && true, false || ((false) && true))))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             break;
            }
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              continue;
             continue;
            }
           do
            {
             if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
              continue;
             do
              {
               return;
              }
             while(_GLF_WRAPPED_LOOP(false));
             if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, false, false)))))
              {
               if(_GLF_DEAD(false))
                break;
               continue;
              }
             for(int _injected_loop_counter = _GLF_IDENTITY(0, min(_GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(_injected_loop_counter))), 0)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
              {
               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                {
                 if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
                  return;
                }
               else
                {
                }
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
           if(_GLF_DEAD(false))
            barrier();
          }
        }
       else
        {
        }
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         do
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
         return;
        }
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
    }
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(false, false || (false)) ? _GLF_FUZZED(0.2) : injectionSwitch.y))))))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(7), 0 | (_GLF_IDENTITY(int(7), 0 | (int(7))))), _GLF_IDENTITY(int(7), 1 * (int(_GLF_IDENTITY(7, (_GLF_IDENTITY(true, (true) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) ? _GLF_IDENTITY(_GLF_IDENTITY(7, 0 | (7)), _GLF_IDENTITY((_GLF_IDENTITY(7, 0 | (7))) | (_GLF_IDENTITY(7, 0 | (7))), ((_GLF_IDENTITY(7, 0 | (7))) | (_GLF_IDENTITY(7, 0 | (7)))) >> 0)) : _GLF_FUZZED(mix(_GLF_IDENTITY(2007, (2007) >> 0), findLSB(subgroup_size), true))))))))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(7, min(7, 7))), int(7))); _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(0, max(_GLF_IDENTITY(0, 0 + (0)), 0))); _injected_loop_counter --)
    {
     return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
        return;
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
        }
       else
        {
        }
      }
    }
  }
 if(_GLF_DEAD(false))
  return;
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) + (-51276 & 0)) > 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! _GLF_IDENTITY((_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch))), (true ? clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch))) : _GLF_FUZZED((injectionSwitch / 8475.4612))))).x > injectionSwitch.y))), false || ((_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch))), (true ? clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch))) : _GLF_FUZZED((injectionSwitch / 8475.4612))))).x > injectionSwitch.y)))))))))
    {
     if(_GLF_DEAD(false))
      break;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       for(int _injected_loop_counter = (1 ^ 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         barrier();
         if(_GLF_DEAD(false))
          return;
        }
      }
     return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      return;
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
    return;
  }
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) || false))), (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   do
    {
     do
      {
       if(_GLF_DEAD(false))
        return;
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       do
        {
         return;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
        return;
       barrier();
      }
    }
   for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(false))
        return;
      }
     else
      {
       if(_GLF_DEAD(false))
        break;
       do
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           barrier();
          }
         if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
          break;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      break;
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
     return;
    }
   for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 | 0)); _injected_loop_counter ++)
    {
     do
      {
       barrier();
       if(_GLF_DEAD(false))
        return;
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 uint workgroup_size = gl_WorkGroupSize.x;
 for(int _injected_loop_counter = (1 ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _GLF_IDENTITY(_injected_loop_counter --, (_GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) << 0)) >> 0))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) && true)))
    {
     if(_GLF_DEAD(false))
      break;
     for(int _injected_loop_counter = ((((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4))) << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), 0 ^ (int(5))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bool(true)))))
          {
           do
            {
             if(_GLF_DEAD(false))
              continue;
             if(_GLF_DEAD(false))
              continue;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(-8.8)))))))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 | ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))))); _injected_loop_counter ++)
                  {
                   if(_GLF_DEAD(false))
                    break;
                   barrier();
                  }
                 if(_GLF_DEAD(false))
                  continue;
                }
               continue;
              }
             if(_GLF_DEAD(false))
              return;
             for(int _injected_loop_counter = ((1 & 1) | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
                continue;
               for(int _injected_loop_counter = (((1 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (int(4)) >> 0))) >> _GLF_IDENTITY(int(4), int(4))) | 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(_GLF_IDENTITY(0, min(0, 0)), (_GLF_IDENTITY(_GLF_IDENTITY(0, min(0, 0)), min(_GLF_IDENTITY(0, min(0, 0)), _GLF_IDENTITY(0, min(0, _GLF_IDENTITY(0, (0) >> 0)))))) | (_GLF_IDENTITY(_GLF_IDENTITY(0, _GLF_IDENTITY(min(0, 0), clamp(min(0, 0), _GLF_IDENTITY(min(0, 0), (_GLF_IDENTITY(min(0, 0), (min(0, 0)) - 0)) - 0), min(0, 0)))), (false ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(0, min(0, 0))))))); _injected_loop_counter --)
                {
                 return;
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  break;
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                    {
                     barrier();
                    }
                   else
                    {
                    }
                   if(_GLF_DEAD(false))
                    break;
                  }
                 if(_GLF_DEAD(false))
                  continue;
                 return;
                }
              }
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
           if(_GLF_DEAD(false))
            break;
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(false))
                continue;
               barrier();
              }
             else
              {
               if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(_GLF_IDENTITY(bvec2(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false), bvec2(bvec3(_GLF_IDENTITY(bvec2(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false), bvec2(bvec3(bvec2(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false), true))), false))))))
                return;
              }
             do
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                return;
              }
             while(_GLF_WRAPPED_LOOP(false));
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              continue;
             break;
            }
          }
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
          return;
         if(_GLF_DEAD(false))
          continue;
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec4(bvec2(false, true), false, true)))))))
      break;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       continue;
      }
    }
   if(_GLF_DEAD(false))
    continue;
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x < injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       do
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              return;
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                {
                 if(_GLF_DEAD(false))
                  return;
                 barrier();
                }
               else
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
                  return;
                }
              }
             barrier();
            }
          }
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          barrier();
         do
          {
           return;
           if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) && true)))
            {
             if(_GLF_DEAD(false))
              continue;
            }
           else
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) || false))))))
                {
                }
               else
                {
                 return;
                }
               if(_GLF_DEAD(false))
                continue;
              }
            }
           if(_GLF_DEAD(false))
            break;
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
         if(_GLF_DEAD(false))
          return;
         do
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, false, false)))))
              return;
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                return;
               return;
              }
            }
           if(_GLF_DEAD(false))
            continue;
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            continue;
           break;
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
   else
    {
     do
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, float(mat3(injectionSwitch.x, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0)))) + 0.0) > injectionSwitch.y))))
          return;
         barrier();
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     return;
    }
  }
 for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), int(ivec2(int(3), 0))))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    {
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)), _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(532.496, 3.5)))))).y))))
          continue;
         continue;
        }
       return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, true && (false))));
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)))
      {
       if(_GLF_DEAD(false))
        barrier();
       continue;
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y))))
        return;
       break;
      }
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)))).x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
       barrier();
      }
    }
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    return;
   do
    {
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, false)))))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
          }
         do
          {
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = ((0 << _GLF_IDENTITY(int(4), int(4))) | 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
              {
               return;
               if(_GLF_DEAD(false))
                break;
              }
             if(_GLF_DEAD(false))
              barrier();
            }
           if(_GLF_DEAD(false))
            break;
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              continue;
             continue;
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(false))
          break;
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              break;
             break;
            }
           continue;
           if(_GLF_DEAD(false))
            barrier();
          }
        }
       else
        {
         if(_GLF_DEAD(false))
          break;
         for(int _injected_loop_counter = (0 ^ 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), (_GLF_ZERO(0.0, injectionSwitch.x)) / 1.0))); _injected_loop_counter --)
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
          }
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            break;
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               do
                {
                 if(_GLF_DEAD(false))
                  return;
                 return;
                 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false))))
                  {
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y))))
                      barrier();
                    }
                   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(mat4x2(injectionSwitch, abs(0.0), 1.0, 1.0, 0.0, 1.0, 1.0))).x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
                    barrier();
                   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    {
                    }
                   else
                    {
                     barrier();
                     if(_GLF_DEAD(false))
                      return;
                     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (false)))))
                      {
                      }
                     else
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        break;
                       if(_GLF_DEAD(false))
                        return;
                      }
                    }
                  }
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(false))
                    break;
                   return;
                  }
                }
               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
               if(_GLF_DEAD(false))
                break;
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                {
                 if(_GLF_DEAD(false))
                  return;
                }
              }
            }
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_DEAD(false))
            break;
           if(_GLF_DEAD(false))
            break;
          }
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         return;
        }
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           return;
          }
         else
          {
           if(_GLF_DEAD(false))
            continue;
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            break;
           for(int _injected_loop_counter = ((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(3), int(3)), (1 << _GLF_IDENTITY(int(3), int(3))) | (_GLF_IDENTITY(1 << _GLF_IDENTITY(int(3), int(3)), (1 << _GLF_IDENTITY(int(3), int(3))) | 0)))) >> _GLF_IDENTITY(int(3), int(3))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(5710.9348, 645.679)) : injectionSwitch)).y))))
              return;
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                return;
               continue;
              }
             if(_GLF_DEAD(false))
              break;
             barrier();
             if(_GLF_DEAD(false))
              continue;
            }
          }
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
            continue;
           for(int _injected_loop_counter = _GLF_IDENTITY((0 >> _GLF_IDENTITY(int(8), int(8))), 0 ^ ((0 >> _GLF_IDENTITY(int(8), int(8))))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 barrier();
                }
               else
                {
                }
              }
            }
           break;
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           break;
          }
        }
       if(_GLF_DEAD(false))
        break;
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         continue;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       break;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      break;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      break;
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, true, false)))))
      {
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
    }
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(false))
        return;
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(false))
  return;
 for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (int(2)) << 0))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 ^ ((1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), (int(1)) >> 0))) >> _GLF_IDENTITY(int(1), int(1))))); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = _GLF_IDENTITY(1, (1) | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 >> _GLF_IDENTITY(int(8), _GLF_IDENTITY(int(8), min(int(8), int(8)))))); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        return;
      }
     return;
    }
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 uint workgroup_id = _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID, ~ (~ (gl_WorkGroupID))), (gl_WorkGroupID) + uvec3(_GLF_IDENTITY(0u, max(0u, 0u)), 0u, _GLF_IDENTITY(0u, max(_GLF_IDENTITY(0u, (true ? 0u : _GLF_FUZZED(packHalf2x16(vec2(9098.1305, -812.064))))), 0u)))), (_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID, ~ (~ (gl_WorkGroupID))), (gl_WorkGroupID) + uvec3(_GLF_IDENTITY(0u, max(0u, _GLF_IDENTITY(0u, max(0u, 0u)))), _GLF_IDENTITY(0u, 0u | (0u)), _GLF_IDENTITY(_GLF_IDENTITY(0u, min(0u, _GLF_IDENTITY(0u, min(0u, 0u)))), max(_GLF_IDENTITY(0u, (true ? 0u : _GLF_FUZZED(packHalf2x16(vec2(9098.1305, -812.064))))), 0u))))) / uvec3(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y))), (_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID, ~ (~ (gl_WorkGroupID))), (gl_WorkGroupID) + uvec3(_GLF_IDENTITY(0u, max(0u, 0u)), 0u, _GLF_IDENTITY(0u, _GLF_IDENTITY(max(_GLF_IDENTITY(0u, (true ? 0u : _GLF_FUZZED(packHalf2x16(vec2(9098.1305, -812.064))))), 0u), ~ (~ (max(_GLF_IDENTITY(0u, (true ? 0u : _GLF_FUZZED(packHalf2x16(vec2(9098.1305, -812.064))))), 0u)))))))) | (_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID, ~ (~ (gl_WorkGroupID))), (gl_WorkGroupID) + uvec3(_GLF_IDENTITY(0u, max(0u, 0u)), 0u, _GLF_IDENTITY(0u, max(_GLF_IDENTITY(0u, (true ? 0u : _GLF_FUZZED(packHalf2x16(vec2(9098.1305, -812.064))))), _GLF_IDENTITY(0u, 1u * (0u)))))))).x;
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       return;
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 uint workgroup_base = workgroup_size * workgroup_id;
 uint virtual_gid = _GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size + subgroup_local_id, clamp(workgroup_base + subgroup_id * subgroup_size + subgroup_local_id, _GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size + subgroup_local_id, max(workgroup_base + subgroup_id * subgroup_size + subgroup_local_id, workgroup_base + subgroup_id * subgroup_size + subgroup_local_id)), workgroup_base + subgroup_id * subgroup_size + subgroup_local_id));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (_GLF_IDENTITY(0 >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), min(int(5), _GLF_IDENTITY(int(5), _GLF_IDENTITY((_GLF_IDENTITY(int(5), (true ? int(5) : _GLF_FUZZED(-69838)))), _GLF_IDENTITY(int(_GLF_IDENTITY(ivec4(_GLF_IDENTITY((int(5)), ((int(5))) - 0), 1, 0, 0), (ivec4(_GLF_IDENTITY((int(5)), ((int(5))) - 0), 1, 0, 0)) * ivec4(1, 1, 1, 1))), clamp(int(_GLF_IDENTITY(ivec4(_GLF_IDENTITY((int(5)), ((int(5))) - 0), 1, 0, 0), (ivec4(_GLF_IDENTITY((int(_GLF_IDENTITY(5, clamp(5, 5, 5)))), ((int(5))) - 0), 1, 0, 0)) * ivec4(1, 1, 1, 1))), int(_GLF_IDENTITY(ivec4(_GLF_IDENTITY((int(5)), ((_GLF_IDENTITY(int(5), 0 ^ (int(5))))) - 0), 1, 0, 0), (ivec4(_GLF_IDENTITY((int(5)), ((int(5))) - 0), 1, 0, 0)) * ivec4(1, 1, 1, 1))), int(_GLF_IDENTITY(ivec4(_GLF_IDENTITY((int(5)), ((int(5))) - 0), 1, 0, 0), (ivec4(_GLF_IDENTITY((int(5)), ((int(5))) - 0), 1, 0, 0)) * ivec4(1, 1, 1, 1)))))) * 1)))), (0 >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), min(int(5), _GLF_IDENTITY(int(5), _GLF_IDENTITY((int(5)), _GLF_IDENTITY(int(_GLF_IDENTITY(ivec4(_GLF_IDENTITY((int(5)), ((int(_GLF_IDENTITY(5, ~ (_GLF_IDENTITY(~ (5), (~ (5)) ^ 0)))))) - 0), 1, 0, _GLF_IDENTITY(0, (0) ^ 0)), (ivec4(_GLF_IDENTITY((int(5)), ((int(5))) - 0), 1, 0, 0)) * ivec4(1, 1, _GLF_IDENTITY(1, min(1, 1)), 1))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_IDENTITY(ivec4(_GLF_IDENTITY((int(5)), ((int(5))) - 0), 1, 0, _GLF_IDENTITY(0, (0) | int(_GLF_ZERO(0.0, injectionSwitch.x)))), (ivec4(_GLF_IDENTITY((int(5)), ((int(5))) - 0), 1, 0, 0)) * ivec4(1, 1, 1, 1)), max(_GLF_IDENTITY(ivec4(_GLF_IDENTITY(_GLF_IDENTITY((int(5)), ((int(5))) - 0), (true ? _GLF_IDENTITY((int(5)), ((int(5))) - 0) : _GLF_FUZZED(clamp(_injected_loop_counter, 11981, _injected_loop_counter)))), 1, 0, 0), _GLF_IDENTITY((ivec4(_GLF_IDENTITY((int(5)), ((int(5))) - 0), 1, _GLF_IDENTITY(0, (false ? _GLF_FUZZED(18473) : 0)), 0)), min((ivec4(_GLF_IDENTITY((int(5)), ((int(5))) - 0), 1, 0, 0)), _GLF_IDENTITY((ivec4(_GLF_IDENTITY((int(5)), ((int(5))) - 0), 1, 0, 0)), (true ? (ivec4(_GLF_IDENTITY((int(5)), ((int(5))) - 0), 1, 0, 0)) : _GLF_FUZZED(ivec4(-95916, -78028, -96853, -10661)))))) * ivec4(1, 1, 1, 1)), _GLF_IDENTITY(_GLF_IDENTITY(ivec4(_GLF_IDENTITY((int(5)), ((int(_GLF_IDENTITY(5, ~ (~ (5)))))) - 0), 1, 0, 0), (ivec4(_GLF_IDENTITY((int(5)), ((int(5))) - 0), 1, 0, _GLF_IDENTITY(0, (0) >> 0))) * ivec4(1, 1, 1, 1)), max(_GLF_IDENTITY(ivec4(_GLF_IDENTITY(_GLF_IDENTITY((int(5)), ((int(5))) - 0), max(_GLF_IDENTITY((int(5)), ((int(5))) - 0), _GLF_IDENTITY((int(5)), ((int(5))) - 0))), 1, 0, 0), (ivec4(_GLF_IDENTITY((_GLF_IDENTITY(int(5), ~ _GLF_IDENTITY((~ (int(5))), ((~ _GLF_IDENTITY((int(5)), ((int(5))) - 0))) / 1))), ((int(5))) - 0), 1, 0, 0)) * ivec4(1, 1, 1, 1)), _GLF_IDENTITY(ivec4(_GLF_IDENTITY((int(5)), ((int(5))) - 0), 1, 0, 0), (ivec4(_GLF_IDENTITY((int(5)), ((int(5))) - 0), 1, 0, 0)) * ivec4(1, 1, 1, 1))))))), (int(_GLF_IDENTITY(_GLF_IDENTITY(ivec4(_GLF_IDENTITY((int(5)), ((int(5))) - 0), 1, 0, 0), (ivec4(_GLF_IDENTITY((int(5)), ((int(5))) - _GLF_IDENTITY(0, (0) | 0)), 1, 0, 0)) * ivec4(1, 1, 1, 1)), max(_GLF_IDENTITY(ivec4(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((int(5)), ((int(5))) - 0), (true ? _GLF_IDENTITY((int(5)), ((int(5))) - 0) : _GLF_FUZZED(clamp(_injected_loop_counter, 11981, _injected_loop_counter)))), (_GLF_IDENTITY(_GLF_IDENTITY((int(5)), ((int(5))) - 0), (true ? _GLF_IDENTITY((int(5)), ((int(5))) - 0) : _GLF_FUZZED(clamp(_injected_loop_counter, 11981, _injected_loop_counter))))) << 0), 1, 0, 0), _GLF_IDENTITY((ivec4(_GLF_IDENTITY((int(5)), ((int(5))) - 0), 1, 0, 0)), min((ivec4(_GLF_IDENTITY((int(5)), ((int(5))) - 0), 1, 0, 0)), _GLF_IDENTITY((ivec4(_GLF_IDENTITY((int(5)), ((int(5))) - 0), 1, 0, 0)), (true ? (ivec4(_GLF_IDENTITY((int(5)), _GLF_IDENTITY(((int(5))) - 0, 0 + (_GLF_IDENTITY(((int(5))) - 0, (((int(5))) - 0) / 1)))), 1, 0, 0)) : _GLF_FUZZED(ivec4(-95916, -78028, -96853, _GLF_IDENTITY(-10661, (-10661) | (-10661)))))))) * ivec4(1, 1, 1, 1)), _GLF_IDENTITY(_GLF_IDENTITY(ivec4(_GLF_IDENTITY((int(5)), ((int(_GLF_IDENTITY(5, ~ (~ (5)))))) - 0), 1, 0, 0), (ivec4(_GLF_IDENTITY((int(5)), ((int(5))) - 0), 1, 0, 0)) * ivec4(1, 1, 1, 1)), max(_GLF_IDENTITY(ivec4(_GLF_IDENTITY((int(5)), ((int(5))) - 0), 1, 0, 0), (ivec4(_GLF_IDENTITY((_GLF_IDENTITY(int(5), ~ (~ (int(5))))), ((int(5))) - 0), 1, 0, 0)) * ivec4(1, 1, 1, 1)), _GLF_IDENTITY(ivec4(_GLF_IDENTITY((int(5)), ((int(5))) - 0), 1, 0, 0), (ivec4(_GLF_IDENTITY((int(5)), ((int(5))) - 0), 1, 0, 0)) * ivec4(1, 1, 1, 1)))))))) | (int(_GLF_IDENTITY(_GLF_IDENTITY(ivec4(_GLF_IDENTITY((int(5)), ((int(5))) - 0), 1, 0, 0), (ivec4(_GLF_IDENTITY((int(5)), ((int(5))) - 0), 1, 0, 0)) * ivec4(1, _GLF_IDENTITY(1, clamp(1, _GLF_IDENTITY(1, (1) | 0), 1)), 1, 1)), max(_GLF_IDENTITY(ivec4(_GLF_IDENTITY(_GLF_IDENTITY((int(5)), ((int(5))) - 0), (true ? _GLF_IDENTITY((int(5)), ((int(5))) - 0) : _GLF_FUZZED(clamp(_injected_loop_counter, 11981, _injected_loop_counter)))), 1, 0, 0), _GLF_IDENTITY((ivec4(_GLF_IDENTITY((int(5)), ((_GLF_IDENTITY(int(5), (int(5)) | (int(5))))) - 0), 1, 0, 0)), min((ivec4(_GLF_IDENTITY((int(5)), ((int(5))) - 0), 1, 0, 0)), _GLF_IDENTITY((ivec4(_GLF_IDENTITY((int(5)), ((int(5))) - 0), 1, 0, 0)), (true ? (ivec4(_GLF_IDENTITY((int(5)), ((int(5))) - 0), 1, 0, 0)) : _GLF_FUZZED(ivec4(-95916, -78028, -96853, -10661)))))) * ivec4(1, 1, 1, 1)), _GLF_IDENTITY(_GLF_IDENTITY(ivec4(_GLF_IDENTITY((int(5)), ((int(_GLF_IDENTITY(5, ~ (~ (5)))))) - 0), 1, 0, 0), (ivec4(_GLF_IDENTITY((int(5)), ((int(5))) - 0), 1, 0, 0)) * ivec4(1, 1, 1, 1)), max(_GLF_IDENTITY(ivec4(_GLF_IDENTITY((int(5)), ((int(5))) - 0), 1, 0, 0), (ivec4(_GLF_IDENTITY((_GLF_IDENTITY(int(5), ~ (~ (int(5))))), ((int(5))) - _GLF_IDENTITY(0, (0) + 0)), 1, 0, 0)) * ivec4(1, 1, 1, 1)), _GLF_IDENTITY(ivec4(_GLF_IDENTITY((int(5)), ((int(5))) - 0), 1, 0, 0), (ivec4(_GLF_IDENTITY((int(5)), ((int(5))) - 0), 1, 0, 0)) * ivec4(1, 1, 1, 1))))))))), (_GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_IDENTITY(ivec4(_GLF_IDENTITY((int(5)), ((int(5))) - 0), 1, 0, 0), (ivec4(_GLF_IDENTITY((int(5)), ((int(5))) - 0), 1, 0, 0)) * ivec4(1, 1, 1, 1)), max(_GLF_IDENTITY(ivec4(_GLF_IDENTITY(_GLF_IDENTITY((int(5)), ((int(5))) - 0), (true ? _GLF_IDENTITY((int(5)), ((int(5))) - 0) : _GLF_FUZZED(clamp(_injected_loop_counter, 11981, _injected_loop_counter)))), 1, 0, 0), _GLF_IDENTITY((ivec4(_GLF_IDENTITY((int(5)), ((int(5))) - 0), 1, 0, 0)), min((ivec4(_GLF_IDENTITY((int(5)), ((int(5))) - 0), _GLF_IDENTITY(1, (1) ^ 0), 0, 0)), _GLF_IDENTITY((ivec4(_GLF_IDENTITY((int(5)), ((int(5))) - 0), 1, 0, 0)), (true ? (ivec4(_GLF_IDENTITY((int(5)), ((int(5))) - 0), 1, 0, 0)) : _GLF_FUZZED(ivec4(-95916, -78028, -96853, -10661)))))) * ivec4(1, 1, 1, 1)), _GLF_IDENTITY(_GLF_IDENTITY(ivec4(_GLF_IDENTITY((int(5)), _GLF_IDENTITY(_GLF_IDENTITY(((int(_GLF_IDENTITY(5, ~ (~ (5)))))), max(((int(_GLF_IDENTITY(5, ~ (~ (5)))))), _GLF_IDENTITY(((int(_GLF_IDENTITY(5, ~ (~ (5)))))), (((int(_GLF_IDENTITY(5, ~ (~ (5))))))) / 1))) - 0, 0 ^ (_GLF_IDENTITY(_GLF_IDENTITY(((int(_GLF_IDENTITY(5, ~ (~ (5)))))) - 0, (false ? _GLF_FUZZED(_injected_loop_counter) : ((int(_GLF_IDENTITY(5, ~ (~ (5)))))) - 0)), (_GLF_IDENTITY(((int(_GLF_IDENTITY(5, ~ (~ (5)))))) - 0, (false ? _GLF_FUZZED(_injected_loop_counter) : ((int(_GLF_IDENTITY(5, ~ (~ (5)))))) - 0))) | (_GLF_IDENTITY(((int(_GLF_IDENTITY(5, ~ (~ (5)))))) - 0, (false ? _GLF_FUZZED(_injected_loop_counter) : ((int(_GLF_IDENTITY(5, ~ (~ (5)))))) - 0))))))), 1, 0, 0), (ivec4(_GLF_IDENTITY((int(5)), ((_GLF_IDENTITY(int(5), (_GLF_IDENTITY(int(5), (int(5)) | 0)) * 1))) - 0), 1, 0, 0)) * ivec4(1, 1, 1, 1)), max(_GLF_IDENTITY(ivec4(_GLF_IDENTITY((int(5)), ((int(5))) - 0), 1, 0, 0), (ivec4(_GLF_IDENTITY((_GLF_IDENTITY(int(5), ~ (~ (int(5))))), ((int(5))) - 0), 1, 0, 0)) * ivec4(1, 1, 1, 1)), _GLF_IDENTITY(ivec4(_GLF_IDENTITY((int(5)), ((int(5))) - 0), 1, 0, 0), (ivec4(_GLF_IDENTITY((int(5)), ((int(5))) - 0), 1, _GLF_IDENTITY(0, (0) << 0), 0)) * ivec4(1, 1, 1, 1))))))), (int(_GLF_IDENTITY(_GLF_IDENTITY(ivec4(_GLF_IDENTITY((int(5)), _GLF_IDENTITY(((int(5))) - 0, min(((int(5))) - 0, ((int(5))) - 0))), 1, 0, 0), (ivec4(_GLF_IDENTITY((int(5)), ((int(5))) - 0), 1, 0, 0)) * ivec4(1, 1, 1, 1)), max(_GLF_IDENTITY(ivec4(_GLF_IDENTITY(_GLF_IDENTITY((int(5)), ((int(5))) - 0), (true ? _GLF_IDENTITY((int(5)), ((int(5))) - 0) : _GLF_FUZZED(clamp(_injected_loop_counter, 11981, _injected_loop_counter)))), 1, 0, 0), _GLF_IDENTITY((ivec4(_GLF_IDENTITY((int(5)), ((int(5))) - 0), 1, 0, 0)), min((ivec4(_GLF_IDENTITY((int(5)), ((int(5))) - 0), 1, 0, 0)), _GLF_IDENTITY((ivec4(_GLF_IDENTITY((int(_GLF_IDENTITY(5, (0 >> _GLF_IDENTITY(int(8), int(8))) + (5)))), ((int(5))) - 0), 1, 0, 0)), (true ? (ivec4(_GLF_IDENTITY((int(5)), ((int(5))) - 0), 1, 0, 0)) : _GLF_FUZZED(ivec4(-95916, -78028, -96853, -10661)))))) * _GLF_IDENTITY(ivec4(1, 1, 1, 1), (_GLF_IDENTITY(ivec4(1, 1, 1, 1), clamp(ivec4(1, 1, 1, 1), ivec4(1, 1, 1, 1), ivec4(1, 1, 1, 1)))) | (ivec4(1, 1, 1, 1)))), _GLF_IDENTITY(_GLF_IDENTITY(ivec4(_GLF_IDENTITY((int(5)), ((int(_GLF_IDENTITY(5, ~ (~ (5)))))) - 0), 1, 0, 0), (ivec4(_GLF_IDENTITY((int(5)), ((int(5))) - 0), 1, 0, 0)) * ivec4(1, 1, 1, 1)), _GLF_IDENTITY(max(_GLF_IDENTITY(ivec4(_GLF_IDENTITY((int(5)), ((int(5))) - 0), 1, 0, 0), (ivec4(_GLF_IDENTITY((_GLF_IDENTITY(int(5), ~ (~ (int(5))))), ((int(5))) - 0), 1, 0, 0)) * ivec4(1, 1, 1, 1)), _GLF_IDENTITY(ivec4(_GLF_IDENTITY((int(5)), ((int(5))) - 0), 1, 0, 0), (ivec4(_GLF_IDENTITY((int(5)), ((int(5))) - 0), 1, 0, 0)) * ivec4(1, 1, 1, 1))), ~ (~ (max(_GLF_IDENTITY(ivec4(_GLF_IDENTITY((int(5)), ((int(5))) - 0), 1, 0, 0), (ivec4(_GLF_IDENTITY((_GLF_IDENTITY(int(5), ~ (_GLF_IDENTITY(~ (int(5)), min(_GLF_IDENTITY(~ (int(5)), (~ (int(5))) ^ 0), ~ (int(5))))))), ((int(5))) - _GLF_IDENTITY(0, max(0, 0))), 1, 0, 0)) * _GLF_IDENTITY(ivec4(1, 1, 1, 1), min(ivec4(1, 1, 1, 1), ivec4(1, 1, 1, 1)))), _GLF_IDENTITY(ivec4(_GLF_IDENTITY((int(5)), ((int(5))) - 0), 1, 0, 0), (ivec4(_GLF_IDENTITY((int(5)), ((int(5))) - 0), 1, 0, 0)) * ivec4(1, 1, 1, 1))))))))))) | (int(_GLF_IDENTITY(_GLF_IDENTITY(ivec4(_GLF_IDENTITY((int(5)), ((int(5))) - 0), 1, 0, 0), (ivec4(_GLF_IDENTITY((int(5)), ((int(5))) - 0), 1, 0, 0)) * ivec4(1, 1, 1, _GLF_IDENTITY(1, min(1, 1)))), _GLF_IDENTITY(max(_GLF_IDENTITY(ivec4(_GLF_IDENTITY(_GLF_IDENTITY((int(5)), ((int(5))) - 0), (true ? _GLF_IDENTITY((int(5)), ((int(5))) - 0) : _GLF_FUZZED(clamp(_injected_loop_counter, 11981, _injected_loop_counter)))), 1, 0, 0), _GLF_IDENTITY((ivec4(_GLF_IDENTITY((int(5)), ((int(5))) - 0), 1, 0, 0)), min((ivec4(_GLF_IDENTITY((int(5)), ((int(5))) - 0), 1, 0, 0)), _GLF_IDENTITY((ivec4(_GLF_IDENTITY((int(5)), ((int(5))) - 0), 1, 0, 0)), (true ? (ivec4(_GLF_IDENTITY((int(5)), ((int(5))) - 0), 1, 0, 0)) : _GLF_FUZZED(ivec4(-95916, -78028, -96853, -10661)))))) * ivec4(1, 1, 1, 1)), _GLF_IDENTITY(_GLF_IDENTITY(ivec4(_GLF_IDENTITY((int(5)), ((int(_GLF_IDENTITY(5, ~ (~ (5)))))) - 0), 1, 0, 0), (ivec4(_GLF_IDENTITY((int(5)), ((int(5))) - 0), 1, 0, 0)) * ivec4(1, 1, 1, 1)), max(_GLF_IDENTITY(ivec4(_GLF_IDENTITY((int(5)), ((int(5))) - 0), _GLF_IDENTITY(1, min(1, 1)), 0, 0), _GLF_IDENTITY((ivec4(_GLF_IDENTITY((_GLF_IDENTITY(int(5), ~ (~ (int(5))))), ((int(5))) - 0), 1, 0, 0)), _GLF_IDENTITY(ivec4(0, 0, 0, 0), (ivec4(0, 0, 0, 0)) << ivec4(0, 0, 0, 0)) | ((ivec4(_GLF_IDENTITY((_GLF_IDENTITY(int(5), ~ (~ (int(5))))), ((int(5))) - 0), 1, 0, 0)))) * ivec4(1, 1, 1, 1)), _GLF_IDENTITY(ivec4(_GLF_IDENTITY((int(5)), ((int(5))) - 0), 1, 0, 0), (ivec4(_GLF_IDENTITY((int(5)), ((int(5))) - 0), 1, 0, 0)) * ivec4(1, 1, 1, 1))))), clamp(max(_GLF_IDENTITY(ivec4(_GLF_IDENTITY(_GLF_IDENTITY((int(5)), ((int(5))) - 0), (true ? _GLF_IDENTITY((int(5)), ((int(5))) - 0) : _GLF_FUZZED(clamp(_injected_loop_counter, 11981, _injected_loop_counter)))), 1, 0, 0), _GLF_IDENTITY((ivec4(_GLF_IDENTITY((int(5)), ((int(5))) - 0), 1, 0, 0)), min((ivec4(_GLF_IDENTITY((int(5)), ((int(5))) - 0), 1, 0, 0)), _GLF_IDENTITY((ivec4(_GLF_IDENTITY((int(5)), ((int(5))) - 0), 1, 0, 0)), (true ? (ivec4(_GLF_IDENTITY((int(5)), ((int(5))) - 0), 1, 0, 0)) : _GLF_FUZZED(ivec4(-95916, -78028, -96853, -10661)))))) * ivec4(1, 1, 1, 1)), _GLF_IDENTITY(_GLF_IDENTITY(ivec4(_GLF_IDENTITY((int(5)), ((int(_GLF_IDENTITY(5, ~ (~ (5)))))) - 0), 1, 0, 0), (ivec4(_GLF_IDENTITY((int(5)), ((int(5))) - 0), 1, 0, 0)) * ivec4(1, 1, 1, 1)), max(_GLF_IDENTITY(ivec4(_GLF_IDENTITY((int(5)), ((int(5))) - 0), _GLF_IDENTITY(1, min(1, 1)), 0, 0), _GLF_IDENTITY((ivec4(_GLF_IDENTITY((_GLF_IDENTITY(int(5), ~ (~ (int(5))))), ((int(5))) - 0), 1, 0, 0)), _GLF_IDENTITY(ivec4(0, 0, 0, 0), (ivec4(0, 0, 0, 0)) << ivec4(0, 0, 0, 0)) | ((ivec4(_GLF_IDENTITY((_GLF_IDENTITY(int(5), ~ (~ (int(5))))), ((int(5))) - 0), 1, 0, 0)))) * ivec4(1, 1, 1, 1)), _GLF_IDENTITY(ivec4(_GLF_IDENTITY((int(5)), ((int(5))) - 0), 1, 0, 0), (ivec4(_GLF_IDENTITY((int(5)), ((int(5))) - 0), 1, 0, 0)) * ivec4(1, 1, 1, 1))))), max(_GLF_IDENTITY(ivec4(_GLF_IDENTITY(_GLF_IDENTITY((int(5)), ((int(5))) - 0), (true ? _GLF_IDENTITY((int(5)), ((int(5))) - 0) : _GLF_FUZZED(clamp(_injected_loop_counter, 11981, _injected_loop_counter)))), 1, 0, 0), _GLF_IDENTITY((ivec4(_GLF_IDENTITY((int(5)), ((int(5))) - 0), 1, 0, 0)), min((ivec4(_GLF_IDENTITY((int(5)), ((int(5))) - 0), 1, 0, 0)), _GLF_IDENTITY((ivec4(_GLF_IDENTITY((int(5)), ((int(5))) - 0), 1, 0, 0)), (true ? (ivec4(_GLF_IDENTITY((int(5)), ((int(5))) - 0), 1, 0, 0)) : _GLF_FUZZED(ivec4(-95916, -78028, -96853, -10661)))))) * ivec4(1, 1, 1, 1)), _GLF_IDENTITY(_GLF_IDENTITY(ivec4(_GLF_IDENTITY((int(5)), ((int(_GLF_IDENTITY(5, ~ (~ (5)))))) - 0), 1, 0, 0), (ivec4(_GLF_IDENTITY((int(5)), ((int(5))) - 0), 1, 0, 0)) * ivec4(1, 1, 1, 1)), max(_GLF_IDENTITY(ivec4(_GLF_IDENTITY((int(5)), ((int(5))) - 0), _GLF_IDENTITY(1, min(1, 1)), 0, 0), _GLF_IDENTITY((ivec4(_GLF_IDENTITY((_GLF_IDENTITY(int(5), ~ (~ (int(5))))), ((int(5))) - 0), 1, 0, 0)), _GLF_IDENTITY(ivec4(0, 0, 0, 0), (ivec4(0, 0, 0, 0)) << ivec4(0, 0, 0, 0)) | ((ivec4(_GLF_IDENTITY((_GLF_IDENTITY(int(5), ~ (~ (int(5))))), ((int(5))) - 0), 1, 0, 0)))) * ivec4(1, 1, 1, 1)), _GLF_IDENTITY(ivec4(_GLF_IDENTITY((int(5)), ((int(5))) - 0), 1, 0, 0), (ivec4(_GLF_IDENTITY((int(5)), ((int(5))) - 0), 1, 0, 0)) * ivec4(1, 1, 1, 1))))), max(_GLF_IDENTITY(ivec4(_GLF_IDENTITY(_GLF_IDENTITY((int(5)), ((int(5))) - 0), (true ? _GLF_IDENTITY((int(5)), ((int(5))) - 0) : _GLF_FUZZED(clamp(_injected_loop_counter, 11981, _injected_loop_counter)))), 1, 0, 0), _GLF_IDENTITY((ivec4(_GLF_IDENTITY((int(5)), ((int(5))) - 0), 1, 0, 0)), min((ivec4(_GLF_IDENTITY((int(5)), ((int(5))) - 0), 1, 0, 0)), _GLF_IDENTITY((ivec4(_GLF_IDENTITY((int(5)), ((int(5))) - 0), 1, 0, 0)), (true ? (ivec4(_GLF_IDENTITY((int(5)), ((int(5))) - 0), 1, 0, 0)) : _GLF_FUZZED(ivec4(-95916, -78028, -96853, -10661)))))) * ivec4(1, 1, 1, 1)), _GLF_IDENTITY(_GLF_IDENTITY(ivec4(_GLF_IDENTITY((int(5)), ((int(_GLF_IDENTITY(5, ~ (~ (5)))))) - 0), 1, 0, 0), (ivec4(_GLF_IDENTITY((int(5)), ((int(5))) - 0), 1, 0, 0)) * ivec4(1, 1, 1, 1)), max(_GLF_IDENTITY(ivec4(_GLF_IDENTITY((int(5)), ((int(5))) - 0), _GLF_IDENTITY(1, min(1, 1)), 0, 0), _GLF_IDENTITY((ivec4(_GLF_IDENTITY((_GLF_IDENTITY(int(5), ~ (~ (int(5))))), ((int(5))) - 0), 1, 0, 0)), _GLF_IDENTITY(ivec4(0, 0, 0, 0), (ivec4(0, 0, 0, 0)) << ivec4(0, 0, 0, 0)) | ((ivec4(_GLF_IDENTITY((_GLF_IDENTITY(int(5), ~ (~ (int(5))))), ((int(5))) - 0), 1, 0, 0)))) * ivec4(1, 1, 1, 1)), _GLF_IDENTITY(ivec4(_GLF_IDENTITY((int(5)), ((int(5))) - 0), 1, 0, 0), (ivec4(_GLF_IDENTITY((int(5)), ((int(5))) - 0), 1, 0, 0)) * ivec4(1, 1, 1, 1))))))))))), ~ _GLF_IDENTITY((~ (_GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_IDENTITY(ivec4(_GLF_IDENTITY((int(5)), ((int(5))) - 0), 1, 0, 0), (ivec4(_GLF_IDENTITY((int(5)), ((int(5))) - 0), 1, 0, 0)) * ivec4(1, 1, 1, 1)), max(_GLF_IDENTITY(ivec4(_GLF_IDENTITY(_GLF_IDENTITY((int(5)), ((int(5))) - 0), (true ? _GLF_IDENTITY((int(5)), ((int(5))) - 0) : _GLF_FUZZED(clamp(_injected_loop_counter, 11981, _injected_loop_counter)))), 1, 0, 0), _GLF_IDENTITY((ivec4(_GLF_IDENTITY((int(5)), ((_GLF_IDENTITY(int(5), 0 ^ (int(5))))) - 0), 1, 0, 0)), min((ivec4(_GLF_IDENTITY((int(_GLF_IDENTITY(_GLF_IDENTITY(5, (true ? 5 : _GLF_FUZZED(-62786))), int(ivec2(_GLF_IDENTITY(5, (true ? 5 : _GLF_FUZZED(-62786))), 1))))), ((int(5))) - 0), 1, 0, 0)), _GLF_IDENTITY((ivec4(_GLF_IDENTITY((int(5)), ((int(5))) - 0), 1, 0, 0)), (true ? (ivec4(_GLF_IDENTITY((int(5)), ((int(5))) - 0), 1, 0, 0)) : _GLF_FUZZED(ivec4(-95916, -78028, -96853, -10661)))))) * ivec4(1, 1, 1, 1)), _GLF_IDENTITY(_GLF_IDENTITY(ivec4(_GLF_IDENTITY((int(5)), ((int(_GLF_IDENTITY(5, ~ (~ (5)))))) - 0), 1, _GLF_IDENTITY(0, (0) - 0), 0), (ivec4(_GLF_IDENTITY((int(5)), ((int(5))) - 0), 1, 0, 0)) * ivec4(1, 1, 1, 1)), max(_GLF_IDENTITY(ivec4(_GLF_IDENTITY((int(5)), ((int(5))) - 0), _GLF_IDENTITY(1, ~ (~ (1))), 0, 0), (ivec4(_GLF_IDENTITY((_GLF_IDENTITY(int(5), ~ (~ (int(5))))), ((int(5))) - 0), 1, 0, 0)) * ivec4(1, 1, 1, 1)), _GLF_IDENTITY(ivec4(_GLF_IDENTITY((int(5)), ((int(5))) - 0), _GLF_IDENTITY(1, max(1, 1)), 0, 0), (ivec4(_GLF_IDENTITY((int(5)), ((int(5))) - 0), 1, 0, 0)) * ivec4(1, 1, 1, _GLF_IDENTITY(1, 0 | (1))))))))), (int(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(ivec4(_GLF_IDENTITY((int(5)), ((int(5))) - 0), 1, 0, 0), ~ (_GLF_IDENTITY(~ (ivec4(_GLF_IDENTITY((int(5)), ((int(5))) - 0), 1, 0, 0)), (~ (ivec4(_GLF_IDENTITY((int(5)), ((int(5))) - 0), 1, 0, 0))) / ivec4(1, 1, 1, 1)))), (ivec4(_GLF_IDENTITY((int(5)), ((_GLF_IDENTITY(int(5), (int(5)) + 0))) - 0), 1, 0, _GLF_IDENTITY(0, (false ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(0, (0) >> 0))))) * ivec4(1, 1, 1, 1)), max(_GLF_IDENTITY(ivec4(_GLF_IDENTITY(_GLF_IDENTITY((int(5)), ((int(5))) - 0), (true ? _GLF_IDENTITY((int(5)), ((int(5))) - 0) : _GLF_FUZZED(clamp(_injected_loop_counter, 11981, _injected_loop_counter)))), 1, 0, 0), _GLF_IDENTITY((ivec4(_GLF_IDENTITY((int(5)), ((int(5))) - 0), 1, 0, 0)), min((ivec4(_GLF_IDENTITY(_GLF_IDENTITY((int(5)), ((int(5))) - 0), (_GLF_IDENTITY((int(5)), ((int(5))) - 0)) | 0), 1, 0, 0)), _GLF_IDENTITY((ivec4(_GLF_IDENTITY((int(5)), ((int(_GLF_IDENTITY(5, ~ (~ (5)))))) - 0), 1, 0, 0)), (true ? (ivec4(_GLF_IDENTITY((int(5)), ((int(5))) - 0), 1, 0, 0)) : _GLF_FUZZED(ivec4(-95916, -78028, -96853, -10661)))))) * ivec4(1, 1, 1, 1)), _GLF_IDENTITY(_GLF_IDENTITY(ivec4(_GLF_IDENTITY((int(5)), ((int(_GLF_IDENTITY(_GLF_IDENTITY(5, ~ (~ (5))), max(_GLF_IDENTITY(5, ~ (~ (5))), _GLF_IDENTITY(5, ~ (~ (5)))))))) - _GLF_IDENTITY(0, clamp(_GLF_IDENTITY(0, (false ? _GLF_IDENTITY(_GLF_FUZZED(ivec2(-89974, 10388).s), _GLF_IDENTITY(clamp(_GLF_FUZZED(ivec2(-89974, 10388).s), _GLF_FUZZED(ivec2(-89974, 10388).s), _GLF_FUZZED(ivec2(-89974, 10388).s)), (false ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(clamp(_GLF_FUZZED(ivec2(-89974, 10388).s), _GLF_FUZZED(ivec2(-89974, 10388).s), _GLF_FUZZED(ivec2(-89974, 10388).s)), int(_GLF_IDENTITY(int(clamp(_GLF_FUZZED(ivec2(-89974, 10388).s), _GLF_FUZZED(ivec2(-89974, 10388).s), _GLF_FUZZED(ivec2(-89974, 10388).s))), (int(clamp(_GLF_FUZZED(ivec2(-89974, 10388).s), _GLF_FUZZED(ivec2(-89974, 10388).s), _GLF_FUZZED(ivec2(-89974, 10388).s)))) | 0)))))) : 0)), 0, _GLF_IDENTITY(0, (0) | 0)))), 1, 0, 0), (ivec4(_GLF_IDENTITY((int(5)), ((int(5))) - 0), 1, 0, 0)) * ivec4(1, 1, 1, 1)), max(_GLF_IDENTITY(ivec4(_GLF_IDENTITY((int(5)), ((int(5))) - 0), 1, 0, 0), (ivec4(_GLF_IDENTITY((_GLF_IDENTITY(int(5), ~ (~ (int(_GLF_IDENTITY(5, (5) ^ 0)))))), ((int(5))) - 0), 1, 0, 0)) * ivec4(1, 1, 1, 1)), _GLF_IDENTITY(_GLF_IDENTITY(ivec4(_GLF_IDENTITY((int(5)), ((int(5))) - 0), 1, 0, 0), min(ivec4(_GLF_IDENTITY((int(5)), ((int(5))) - 0), 1, 0, 0), ivec4(_GLF_IDENTITY((int(5)), ((int(5))) - 0), 1, 0, 0))), (ivec4(_GLF_IDENTITY((int(5)), ((int(5))) - 0), 1, 0, 0)) * ivec4(1, 1, 1, 1)))))))) | (int(_GLF_IDENTITY(_GLF_IDENTITY(ivec4(_GLF_IDENTITY((int(5)), ((int(5))) - 0), 1, 0, 0), _GLF_IDENTITY((ivec4(_GLF_IDENTITY((int(5)), ((int(5))) - 0), 1, 0, 0)), ivec4(0, 0, 0, 0) ^ ((ivec4(_GLF_IDENTITY((int(5)), ((int(5))) - 0), 1, 0, 0)))) * ivec4(1, 1, 1, 1)), max(_GLF_IDENTITY(ivec4(_GLF_IDENTITY(_GLF_IDENTITY((int(5)), ((int(_GLF_IDENTITY(5, (5) * 1)))) - 0), (true ? _GLF_IDENTITY((int(5)), ((int(5))) - 0) : _GLF_FUZZED(clamp(_injected_loop_counter, 11981, _injected_loop_counter)))), 1, 0, 0), _GLF_IDENTITY((ivec4(_GLF_IDENTITY((int(5)), ((int(5))) - 0), _GLF_IDENTITY(1, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(1, (0 >> _GLF_IDENTITY(int(0), int(0))) + (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-9630) : 1))))), (true ? ~ (_GLF_IDENTITY(1, (0 >> _GLF_IDENTITY(int(0), int(0))) + (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-9630) : 1))))) : _GLF_FUZZED(-1427))))), 0, 0)), min((ivec4(_GLF_IDENTITY((int(5)), ((int(5))) - 0), 1, 0, 0)), _GLF_IDENTITY((ivec4(_GLF_IDENTITY((int(5)), ((int(5))) - 0), 1, 0, 0)), (true ? (ivec4(_GLF_IDENTITY((int(5)), ((int(5))) - 0), 1, 0, 0)) : _GLF_FUZZED(ivec4(-95916, -78028, -96853, -10661)))))) * ivec4(1, 1, 1, 1)), _GLF_IDENTITY(_GLF_IDENTITY(ivec4(_GLF_IDENTITY((int(5)), ((int(_GLF_IDENTITY(5, ~ (~ (5)))))) - 0), 1, 0, 0), (ivec4(_GLF_IDENTITY((int(5)), ((int(5))) - 0), 1, 0, 0)) * _GLF_IDENTITY(ivec4(1, 1, 1, 1), min(ivec4(1, 1, 1, 1), ivec4(1, 1, 1, 1)))), max(_GLF_IDENTITY(ivec4(_GLF_IDENTITY((int(5)), ((int(5))) - 0), 1, 0, 0), (ivec4(_GLF_IDENTITY((_GLF_IDENTITY(int(5), ~ (~ (int(5))))), ((int(5))) - 0), 1, _GLF_IDENTITY(0, _GLF_IDENTITY(int(_GLF_IDENTITY(int(0), clamp(int(0), int(_GLF_IDENTITY(0, (0) - 0)), int(0)))), (int(_GLF_IDENTITY(int(0), clamp(int(0), int(0), int(0))))) ^ 0)), 0)) * ivec4(1, 1, 1, 1)), _GLF_IDENTITY(ivec4(_GLF_IDENTITY((int(5)), ((int(5))) - 0), 1, 0, 0), (ivec4(_GLF_IDENTITY((_GLF_IDENTITY(int(5), clamp(_GLF_IDENTITY(int(5), min(int(5), int(5))), int(5), int(5)))), ((int(5))) - 0), 1, 0, 0)) * ivec4(_GLF_IDENTITY(1, (1) * 1), 1, 1, 1))))))))))), min((~ (_GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_IDENTITY(ivec4(_GLF_IDENTITY((int(5)), ((int(5))) - 0), 1, 0, 0), (ivec4(_GLF_IDENTITY((int(5)), ((int(5))) - 0), 1, 0, 0)) * ivec4(1, 1, 1, 1)), max(_GLF_IDENTITY(ivec4(_GLF_IDENTITY(_GLF_IDENTITY((int(5)), ((int(5))) - 0), (true ? _GLF_IDENTITY((int(5)), ((int(5))) - 0) : _GLF_FUZZED(clamp(_injected_loop_counter, 11981, _injected_loop_counter)))), 1, 0, 0), _GLF_IDENTITY((ivec4(_GLF_IDENTITY((int(5)), ((_GLF_IDENTITY(int(5), 0 ^ (int(5))))) - 0), 1, 0, 0)), min((ivec4(_GLF_IDENTITY((int(_GLF_IDENTITY(_GLF_IDENTITY(5, (true ? 5 : _GLF_FUZZED(-62786))), int(ivec2(_GLF_IDENTITY(5, (true ? 5 : _GLF_FUZZED(-62786))), 1))))), ((int(5))) - 0), 1, 0, 0)), _GLF_IDENTITY((ivec4(_GLF_IDENTITY((int(5)), ((int(5))) - 0), 1, 0, 0)), (true ? (ivec4(_GLF_IDENTITY((int(5)), ((int(5))) - 0), 1, 0, 0)) : _GLF_FUZZED(ivec4(-95916, -78028, -96853, -10661)))))) * ivec4(1, 1, 1, 1)), _GLF_IDENTITY(_GLF_IDENTITY(ivec4(_GLF_IDENTITY((int(5)), ((int(_GLF_IDENTITY(5, ~ (~ (5)))))) - 0), 1, _GLF_IDENTITY(0, (0) - 0), 0), (ivec4(_GLF_IDENTITY((int(5)), ((int(5))) - 0), 1, 0, 0)) * ivec4(1, 1, 1, 1)), max(_GLF_IDENTITY(ivec4(_GLF_IDENTITY((int(5)), ((int(5))) - 0), _GLF_IDENTITY(1, ~ (~ (1))), 0, 0), (ivec4(_GLF_IDENTITY((_GLF_IDENTITY(int(5), ~ (~ (int(5))))), ((int(5))) - 0), 1, 0, 0)) * ivec4(1, 1, 1, 1)), _GLF_IDENTITY(ivec4(_GLF_IDENTITY((int(5)), ((int(5))) - 0), _GLF_IDENTITY(1, max(1, 1)), 0, 0), (ivec4(_GLF_IDENTITY((int(5)), ((int(5))) - 0), 1, 0, 0)) * ivec4(1, 1, 1, _GLF_IDENTITY(1, 0 | (1))))))))), (int(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(ivec4(_GLF_IDENTITY((int(5)), ((int(5))) - 0), 1, 0, 0), ~ (_GLF_IDENTITY(~ (ivec4(_GLF_IDENTITY((int(5)), ((int(5))) - 0), 1, 0, 0)), (~ (ivec4(_GLF_IDENTITY((int(5)), ((int(5))) - 0), 1, 0, 0))) / ivec4(1, 1, 1, 1)))), (ivec4(_GLF_IDENTITY((int(5)), ((_GLF_IDENTITY(int(5), (int(5)) + 0))) - 0), 1, 0, _GLF_IDENTITY(0, (false ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(0, (0) >> 0))))) * ivec4(1, 1, 1, 1)), max(_GLF_IDENTITY(ivec4(_GLF_IDENTITY(_GLF_IDENTITY((int(5)), ((int(5))) - 0), (true ? _GLF_IDENTITY((int(5)), ((int(5))) - 0) : _GLF_FUZZED(clamp(_injected_loop_counter, 11981, _injected_loop_counter)))), 1, 0, 0), _GLF_IDENTITY((ivec4(_GLF_IDENTITY((int(5)), ((int(5))) - 0), 1, 0, 0)), min((ivec4(_GLF_IDENTITY(_GLF_IDENTITY((int(5)), ((int(5))) - 0), (_GLF_IDENTITY((int(5)), ((int(5))) - 0)) | 0), 1, 0, 0)), _GLF_IDENTITY((ivec4(_GLF_IDENTITY((int(5)), ((int(_GLF_IDENTITY(5, ~ (~ (5)))))) - 0), 1, 0, 0)), (true ? (ivec4(_GLF_IDENTITY((int(5)), ((int(5))) - 0), 1, 0, 0)) : _GLF_FUZZED(ivec4(-95916, -78028, -96853, -10661)))))) * ivec4(1, 1, 1, 1)), _GLF_IDENTITY(_GLF_IDENTITY(ivec4(_GLF_IDENTITY((int(5)), ((int(_GLF_IDENTITY(_GLF_IDENTITY(5, ~ (~ (5))), max(_GLF_IDENTITY(5, ~ (~ (5))), _GLF_IDENTITY(5, ~ (~ (5)))))))) - _GLF_IDENTITY(0, clamp(_GLF_IDENTITY(0, (false ? _GLF_IDENTITY(_GLF_FUZZED(ivec2(-89974, 10388).s), _GLF_IDENTITY(clamp(_GLF_FUZZED(ivec2(-89974, 10388).s), _GLF_FUZZED(ivec2(-89974, 10388).s), _GLF_FUZZED(ivec2(-89974, 10388).s)), (false ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(clamp(_GLF_FUZZED(ivec2(-89974, 10388).s), _GLF_FUZZED(ivec2(-89974, 10388).s), _GLF_FUZZED(ivec2(-89974, 10388).s)), int(_GLF_IDENTITY(int(clamp(_GLF_FUZZED(ivec2(-89974, 10388).s), _GLF_FUZZED(ivec2(-89974, 10388).s), _GLF_FUZZED(ivec2(-89974, 10388).s))), (int(clamp(_GLF_FUZZED(ivec2(-89974, 10388).s), _GLF_FUZZED(ivec2(-89974, 10388).s), _GLF_FUZZED(ivec2(-89974, 10388).s)))) | 0)))))) : 0)), 0, _GLF_IDENTITY(0, (0) | 0)))), 1, 0, 0), (ivec4(_GLF_IDENTITY((int(5)), ((int(5))) - 0), 1, 0, 0)) * ivec4(1, 1, 1, 1)), max(_GLF_IDENTITY(ivec4(_GLF_IDENTITY((int(5)), ((int(5))) - 0), 1, 0, 0), (ivec4(_GLF_IDENTITY((_GLF_IDENTITY(int(5), ~ (~ (int(_GLF_IDENTITY(5, (5) ^ 0)))))), ((int(5))) - 0), 1, 0, 0)) * ivec4(1, 1, 1, 1)), _GLF_IDENTITY(_GLF_IDENTITY(ivec4(_GLF_IDENTITY((int(5)), ((int(5))) - 0), 1, 0, 0), min(ivec4(_GLF_IDENTITY((int(5)), ((int(5))) - 0), 1, 0, 0), ivec4(_GLF_IDENTITY((int(5)), ((int(5))) - 0), 1, 0, 0))), (ivec4(_GLF_IDENTITY((int(5)), ((int(5))) - 0), 1, 0, 0)) * ivec4(1, 1, 1, 1)))))))) | (int(_GLF_IDENTITY(_GLF_IDENTITY(ivec4(_GLF_IDENTITY((int(5)), ((int(5))) - 0), 1, 0, 0), _GLF_IDENTITY((ivec4(_GLF_IDENTITY((int(5)), ((int(5))) - 0), 1, 0, 0)), ivec4(0, 0, 0, 0) ^ ((ivec4(_GLF_IDENTITY((int(5)), ((int(5))) - 0), 1, 0, 0)))) * ivec4(1, 1, 1, 1)), max(_GLF_IDENTITY(ivec4(_GLF_IDENTITY(_GLF_IDENTITY((int(5)), ((int(_GLF_IDENTITY(5, (5) * 1)))) - 0), (true ? _GLF_IDENTITY((int(5)), ((int(5))) - 0) : _GLF_FUZZED(clamp(_injected_loop_counter, 11981, _injected_loop_counter)))), 1, 0, 0), _GLF_IDENTITY((ivec4(_GLF_IDENTITY((int(5)), ((int(5))) - 0), _GLF_IDENTITY(1, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(1, (0 >> _GLF_IDENTITY(int(0), int(0))) + (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-9630) : 1))))), (true ? ~ (_GLF_IDENTITY(1, (0 >> _GLF_IDENTITY(int(0), int(0))) + (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-9630) : 1))))) : _GLF_FUZZED(-1427))))), 0, 0)), min((ivec4(_GLF_IDENTITY((int(5)), ((int(5))) - 0), 1, 0, 0)), _GLF_IDENTITY((ivec4(_GLF_IDENTITY((int(5)), ((int(5))) - 0), 1, 0, 0)), (true ? (ivec4(_GLF_IDENTITY((int(5)), ((int(5))) - 0), 1, 0, 0)) : _GLF_FUZZED(ivec4(-95916, -78028, -96853, -10661)))))) * ivec4(1, 1, 1, 1)), _GLF_IDENTITY(_GLF_IDENTITY(ivec4(_GLF_IDENTITY((int(5)), ((int(_GLF_IDENTITY(5, ~ (~ (5)))))) - 0), 1, 0, 0), (ivec4(_GLF_IDENTITY((int(5)), ((int(5))) - 0), 1, 0, 0)) * _GLF_IDENTITY(ivec4(1, 1, 1, 1), min(ivec4(1, 1, 1, 1), ivec4(1, 1, 1, 1)))), max(_GLF_IDENTITY(ivec4(_GLF_IDENTITY((int(5)), ((int(5))) - 0), 1, 0, 0), (ivec4(_GLF_IDENTITY((_GLF_IDENTITY(int(5), ~ (~ (int(5))))), ((int(5))) - 0), 1, _GLF_IDENTITY(0, _GLF_IDENTITY(int(_GLF_IDENTITY(int(0), clamp(int(0), int(_GLF_IDENTITY(0, (0) - 0)), int(0)))), (int(_GLF_IDENTITY(int(0), clamp(int(0), int(0), int(0))))) ^ 0)), 0)) * ivec4(1, 1, 1, 1)), _GLF_IDENTITY(ivec4(_GLF_IDENTITY((int(5)), ((int(5))) - 0), 1, 0, 0), (ivec4(_GLF_IDENTITY((_GLF_IDENTITY(int(5), clamp(_GLF_IDENTITY(int(5), min(int(5), int(5))), int(5), int(5)))), ((int(5))) - 0), 1, 0, 0)) * ivec4(_GLF_IDENTITY(1, (1) * 1), 1, 1, 1))))))))))), (~ (_GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_IDENTITY(ivec4(_GLF_IDENTITY((int(5)), ((int(5))) - 0), 1, 0, 0), (ivec4(_GLF_IDENTITY((int(5)), ((int(5))) - 0), 1, 0, 0)) * ivec4(1, 1, 1, 1)), max(_GLF_IDENTITY(ivec4(_GLF_IDENTITY(_GLF_IDENTITY((int(5)), ((int(5))) - 0), (true ? _GLF_IDENTITY((int(5)), ((int(5))) - 0) : _GLF_FUZZED(clamp(_injected_loop_counter, 11981, _injected_loop_counter)))), 1, 0, 0), _GLF_IDENTITY((ivec4(_GLF_IDENTITY((int(5)), ((_GLF_IDENTITY(int(5), 0 ^ (int(5))))) - 0), 1, 0, 0)), min((ivec4(_GLF_IDENTITY((int(_GLF_IDENTITY(_GLF_IDENTITY(5, (true ? 5 : _GLF_FUZZED(-62786))), int(ivec2(_GLF_IDENTITY(5, (true ? 5 : _GLF_FUZZED(-62786))), 1))))), ((int(5))) - 0), 1, 0, 0)), _GLF_IDENTITY((ivec4(_GLF_IDENTITY((int(5)), ((int(5))) - 0), 1, 0, 0)), (true ? (ivec4(_GLF_IDENTITY((int(5)), ((int(5))) - 0), 1, 0, 0)) : _GLF_FUZZED(ivec4(-95916, -78028, -96853, -10661)))))) * ivec4(1, 1, 1, 1)), _GLF_IDENTITY(_GLF_IDENTITY(ivec4(_GLF_IDENTITY((int(5)), ((int(_GLF_IDENTITY(5, ~ (~ (5)))))) - 0), 1, _GLF_IDENTITY(0, (0) - 0), 0), (ivec4(_GLF_IDENTITY((int(5)), ((int(5))) - 0), 1, 0, 0)) * ivec4(1, 1, 1, 1)), max(_GLF_IDENTITY(ivec4(_GLF_IDENTITY((int(5)), ((int(5))) - 0), _GLF_IDENTITY(1, ~ (~ (1))), 0, 0), (ivec4(_GLF_IDENTITY((_GLF_IDENTITY(int(5), ~ (~ (int(5))))), ((int(5))) - 0), 1, 0, 0)) * ivec4(1, 1, 1, 1)), _GLF_IDENTITY(ivec4(_GLF_IDENTITY((int(5)), ((int(5))) - 0), _GLF_IDENTITY(1, max(1, 1)), 0, 0), (ivec4(_GLF_IDENTITY((int(5)), ((int(5))) - 0), 1, 0, 0)) * ivec4(1, 1, 1, _GLF_IDENTITY(1, 0 | (1))))))))), (int(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(ivec4(_GLF_IDENTITY((int(5)), ((int(5))) - 0), 1, 0, 0), ~ (_GLF_IDENTITY(~ (ivec4(_GLF_IDENTITY((int(5)), ((int(5))) - 0), 1, 0, 0)), (~ (ivec4(_GLF_IDENTITY((int(5)), ((int(5))) - 0), 1, 0, 0))) / ivec4(1, 1, 1, 1)))), (ivec4(_GLF_IDENTITY((int(5)), ((_GLF_IDENTITY(int(5), (int(5)) + 0))) - 0), 1, 0, _GLF_IDENTITY(0, (false ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(0, (0) >> 0))))) * ivec4(1, 1, 1, 1)), max(_GLF_IDENTITY(ivec4(_GLF_IDENTITY(_GLF_IDENTITY((int(5)), ((int(5))) - 0), (true ? _GLF_IDENTITY((int(5)), ((int(5))) - 0) : _GLF_FUZZED(clamp(_injected_loop_counter, 11981, _injected_loop_counter)))), 1, 0, 0), _GLF_IDENTITY((ivec4(_GLF_IDENTITY((int(5)), ((int(5))) - 0), 1, 0, 0)), min((ivec4(_GLF_IDENTITY(_GLF_IDENTITY((int(5)), ((int(5))) - 0), (_GLF_IDENTITY((int(5)), ((int(5))) - 0)) | 0), 1, 0, 0)), _GLF_IDENTITY((ivec4(_GLF_IDENTITY((int(5)), ((int(_GLF_IDENTITY(5, ~ (~ (5)))))) - 0), 1, 0, 0)), (true ? (ivec4(_GLF_IDENTITY((int(5)), ((int(5))) - 0), 1, 0, 0)) : _GLF_FUZZED(ivec4(-95916, -78028, -96853, -10661)))))) * ivec4(1, 1, 1, 1)), _GLF_IDENTITY(_GLF_IDENTITY(ivec4(_GLF_IDENTITY((int(5)), ((int(_GLF_IDENTITY(_GLF_IDENTITY(5, ~ (~ (5))), max(_GLF_IDENTITY(5, ~ (~ (5))), _GLF_IDENTITY(5, ~ (~ (5)))))))) - _GLF_IDENTITY(0, clamp(_GLF_IDENTITY(0, (false ? _GLF_IDENTITY(_GLF_FUZZED(ivec2(-89974, 10388).s), _GLF_IDENTITY(clamp(_GLF_FUZZED(ivec2(-89974, 10388).s), _GLF_FUZZED(ivec2(-89974, 10388).s), _GLF_FUZZED(ivec2(-89974, 10388).s)), (false ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(clamp(_GLF_FUZZED(ivec2(-89974, 10388).s), _GLF_FUZZED(ivec2(-89974, 10388).s), _GLF_FUZZED(ivec2(-89974, 10388).s)), int(_GLF_IDENTITY(int(clamp(_GLF_FUZZED(ivec2(-89974, 10388).s), _GLF_FUZZED(ivec2(-89974, 10388).s), _GLF_FUZZED(ivec2(-89974, 10388).s))), (int(clamp(_GLF_FUZZED(ivec2(-89974, 10388).s), _GLF_FUZZED(ivec2(-89974, 10388).s), _GLF_FUZZED(ivec2(-89974, 10388).s)))) | 0)))))) : 0)), 0, _GLF_IDENTITY(0, (0) | 0)))), 1, 0, 0), (ivec4(_GLF_IDENTITY((int(5)), ((int(5))) - 0), 1, 0, 0)) * ivec4(1, 1, 1, 1)), max(_GLF_IDENTITY(ivec4(_GLF_IDENTITY((int(5)), ((int(5))) - 0), 1, 0, 0), (ivec4(_GLF_IDENTITY((_GLF_IDENTITY(int(5), ~ (~ (int(_GLF_IDENTITY(5, (5) ^ 0)))))), ((int(5))) - 0), 1, 0, 0)) * ivec4(1, 1, 1, 1)), _GLF_IDENTITY(_GLF_IDENTITY(ivec4(_GLF_IDENTITY((int(5)), ((int(5))) - 0), 1, 0, 0), min(ivec4(_GLF_IDENTITY((int(5)), ((int(5))) - 0), 1, 0, 0), ivec4(_GLF_IDENTITY((int(5)), ((int(5))) - 0), 1, 0, 0))), (ivec4(_GLF_IDENTITY((int(5)), ((int(5))) - 0), 1, 0, 0)) * ivec4(1, 1, 1, 1)))))))) | (int(_GLF_IDENTITY(_GLF_IDENTITY(ivec4(_GLF_IDENTITY((int(5)), ((int(5))) - 0), 1, 0, 0), _GLF_IDENTITY((ivec4(_GLF_IDENTITY((int(5)), ((int(5))) - 0), 1, 0, 0)), ivec4(0, 0, 0, 0) ^ ((ivec4(_GLF_IDENTITY((int(5)), ((int(5))) - 0), 1, 0, 0)))) * ivec4(1, 1, 1, 1)), max(_GLF_IDENTITY(ivec4(_GLF_IDENTITY(_GLF_IDENTITY((int(5)), ((int(_GLF_IDENTITY(5, (5) * 1)))) - 0), (true ? _GLF_IDENTITY((int(5)), ((int(5))) - 0) : _GLF_FUZZED(clamp(_injected_loop_counter, 11981, _injected_loop_counter)))), 1, 0, 0), _GLF_IDENTITY((ivec4(_GLF_IDENTITY((int(5)), ((int(5))) - 0), _GLF_IDENTITY(1, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(1, (0 >> _GLF_IDENTITY(int(0), int(0))) + (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-9630) : 1))))), (true ? ~ (_GLF_IDENTITY(1, (0 >> _GLF_IDENTITY(int(0), int(0))) + (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-9630) : 1))))) : _GLF_FUZZED(-1427))))), 0, 0)), min((ivec4(_GLF_IDENTITY((int(5)), ((int(5))) - 0), 1, 0, 0)), _GLF_IDENTITY((ivec4(_GLF_IDENTITY((int(5)), ((int(5))) - 0), 1, 0, 0)), (true ? (ivec4(_GLF_IDENTITY((int(5)), ((int(5))) - 0), 1, 0, 0)) : _GLF_FUZZED(ivec4(-95916, -78028, -96853, -10661)))))) * ivec4(1, 1, 1, 1)), _GLF_IDENTITY(_GLF_IDENTITY(ivec4(_GLF_IDENTITY((int(5)), ((int(_GLF_IDENTITY(5, ~ (~ (5)))))) - 0), 1, 0, 0), (ivec4(_GLF_IDENTITY((int(5)), ((int(5))) - 0), 1, 0, 0)) * _GLF_IDENTITY(ivec4(1, 1, 1, 1), min(ivec4(1, 1, 1, 1), ivec4(1, 1, 1, 1)))), max(_GLF_IDENTITY(ivec4(_GLF_IDENTITY((int(5)), ((int(5))) - 0), 1, 0, 0), (ivec4(_GLF_IDENTITY((_GLF_IDENTITY(int(5), ~ (~ (int(5))))), ((int(5))) - 0), 1, _GLF_IDENTITY(0, _GLF_IDENTITY(int(_GLF_IDENTITY(int(0), clamp(int(0), int(_GLF_IDENTITY(0, (0) - 0)), int(0)))), (int(_GLF_IDENTITY(int(0), clamp(int(0), int(0), int(0))))) ^ 0)), 0)) * ivec4(1, 1, 1, 1)), _GLF_IDENTITY(ivec4(_GLF_IDENTITY((int(5)), ((int(5))) - 0), 1, 0, 0), (ivec4(_GLF_IDENTITY((_GLF_IDENTITY(int(5), clamp(_GLF_IDENTITY(int(5), min(int(5), int(5))), int(5), int(5)))), ((int(5))) - 0), 1, 0, 0)) * ivec4(_GLF_IDENTITY(1, (1) * 1), 1, 1, 1))))))))))))))) / _GLF_IDENTITY(1, (1) ^ 0)), int(_GLF_IDENTITY(ivec4(_GLF_IDENTITY((int(5)), ((int(5))) - 0), 1, 0, 0), (ivec4(_GLF_IDENTITY((int(5)), ((int(5))) - _GLF_IDENTITY(0, ~ (_GLF_IDENTITY(~ (0), _GLF_IDENTITY(int(_GLF_IDENTITY(int(~ (0)), (int(~ (0))) | (int(~ (0))))), max(int(_GLF_IDENTITY(int(~ (0)), (int(~ (0))) | (int(~ (0))))), int(_GLF_IDENTITY(int(~ (0)), (int(~ (0))) | (int(~ (0))))))))))), _GLF_IDENTITY(1, _GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(_injected_loop_counter))) | (1)), 0, 0)) * ivec4(1, 1, 1, 1))), _GLF_IDENTITY(int(_GLF_IDENTITY(ivec4(_GLF_IDENTITY(_GLF_IDENTITY((int(5)), ((int(5))) - 0), clamp(_GLF_IDENTITY(_GLF_IDENTITY((int(5)), ((int(5))) - 0), max(_GLF_IDENTITY((int(5)), _GLF_IDENTITY(((int(5))), (_GLF_IDENTITY(((int(5))), ~ (_GLF_IDENTITY(~ (((int(5)))), 0 | (~ (((int(5))))))))) / 1) - 0), _GLF_IDENTITY(_GLF_IDENTITY((int(5)), ((_GLF_IDENTITY(int(5), (false ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(int(5), clamp(_GLF_IDENTITY(int(5), (int(5)) * 1), int(5), int(5))))))) - 0), 0 | (_GLF_IDENTITY((int(5)), ((int(5))) - 0))))), _GLF_IDENTITY((int(5)), ((int(5))) - 0), _GLF_IDENTITY(_GLF_IDENTITY((int(5)), ((int(5))) - 0), (_GLF_IDENTITY(_GLF_IDENTITY((int(5)), ((int(5))) - 0), 1 * (_GLF_IDENTITY((int(5)), ((int(5))) - 0)))) << 0))), 1, 0, 0), (ivec4(_GLF_IDENTITY((int(5)), ((int(5))) - 0), 1, 0, 0)) * ivec4(1, 1, 1, 1))), (int(_GLF_IDENTITY(ivec4(_GLF_IDENTITY(_GLF_IDENTITY((int(5)), ((int(5))) - 0), clamp(_GLF_IDENTITY(_GLF_IDENTITY((int(5)), ((int(5))) - 0), max(_GLF_IDENTITY((int(5)), _GLF_IDENTITY(((int(5))), (_GLF_IDENTITY(((int(5))), ~ (_GLF_IDENTITY(~ (((int(5)))), 0 | (~ (((int(5))))))))) / 1) - 0), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((int(5)), ((int(5))) << 0), ((_GLF_IDENTITY(int(5), (false ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(int(5), clamp(_GLF_IDENTITY(int(5), (int(5)) * 1), int(5), int(5))))))) - 0), 0 | (_GLF_IDENTITY((int(5)), ((int(5))) - 0))))), _GLF_IDENTITY((int(5)), ((int(5))) - 0), _GLF_IDENTITY(_GLF_IDENTITY((int(5)), ((int(5))) - 0), (_GLF_IDENTITY(_GLF_IDENTITY((int(5)), ((int(5))) - 0), 1 * (_GLF_IDENTITY((int(5)), _GLF_IDENTITY(((int(5))), ~ (~ (((int(5)))))) - 0)))) << 0))), 1, 0, 0), (ivec4(_GLF_IDENTITY((int(5)), ((int(5))) - 0), 1, 0, 0)) * ivec4(1, 1, 1, 1)))) | int(_GLF_ZERO(0.0, injectionSwitch.x)))))) * 1))))) + 0))); _injected_loop_counter --)
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (false)), ! (! ((! (false))))))))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          break;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
         do
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat3x4(injectionSwitch, 0.0, _GLF_ONE(1.0, injectionSwitch.y), sqrt(0.0), 0.0, 1.0, 0.0, 0.0, sqrt(0.0), 0.0, 1.0), (true ? _GLF_IDENTITY(mat3x4(injectionSwitch, 0.0, _GLF_ONE(1.0, injectionSwitch.y), sqrt(0.0), 0.0, 1.0, 0.0, 0.0, sqrt(0.0), 0.0, 1.0), (mat3x4(injectionSwitch, 0.0, _GLF_ONE(1.0, injectionSwitch.y), sqrt(0.0), 0.0, 1.0, 0.0, 0.0, sqrt(0.0), 0.0, 1.0)) + mat3x4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)) : _GLF_FUZZED(mat3x4(5174.4935, -5626.7691, -8.2, -30.88, -0.0, 3.7, -7012.1202, 4184.7152, 2.0, -0.7, 7.3, -95.60)))))).y))))
            {
             barrier();
            }
           else
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(float(131255u)), _GLF_IDENTITY((injectionSwitch)[1], clamp((injectionSwitch)[1], _GLF_IDENTITY((injectionSwitch)[1], mix(float((injectionSwitch)[1]), float(_GLF_FUZZED(3235.0272)), bool(false))), (injectionSwitch)[1]))), vec2((injectionSwitch)[0], _GLF_FUZZED(-867.733)), bvec2(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))).x > injectionSwitch.y))))
              continue;
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        }
       return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              break;
             break;
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_IDENTITY((injectionSwitch)[0], ((injectionSwitch)[0]) - 0.0), (injectionSwitch)[1]), vec2(_GLF_FUZZED((-64.81 - vec4(4.8, -15.37, 384.568, -75.13)).t), _GLF_FUZZED(-127.518)), bvec2(false, false)))) : injectionSwitch)).y))))
            break;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
           if(_GLF_DEAD(false))
            continue;
          }
         else
          {
           if(_GLF_DEAD(false))
            break;
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
              }
             else
              {
               return;
              }
            }
           if(_GLF_DEAD(false))
            break;
          }
         break;
        }
      }
     else
      {
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       break;
      }
     do
      {
       for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), max(int(5), int(5))))) >> _GLF_IDENTITY(int(5), int(5)))); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
             return;
            }
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       continue;
      }
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      continue;
     do
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, true && (false)))), (_GLF_IDENTITY(injectionSwitch, mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch)).x > injectionSwitch.y)), false)))))
        return;
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        break;
       barrier();
      }
     if(_GLF_DEAD(false))
      continue;
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   do
    {
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), int(ivec4(int(3), (0 << _GLF_IDENTITY(int(6), int(6))), 0, 1))))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(3), int(3)), (false ? _GLF_FUZZED(42306) : _GLF_IDENTITY(int(3), int(3)))))); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)).y, (injectionSwitch.y) - 0.0)))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
         return;
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           for(int _injected_loop_counter = (1 & _GLF_IDENTITY(1, _GLF_IDENTITY(clamp(1, 1, 1), (clamp(1, 1, 1)) << (-39488 & (0 >> _GLF_IDENTITY(int(4), int(4))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
            {
             barrier();
            }
          }
         if(_GLF_DEAD(false))
          break;
         return;
        }
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
       do
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bool(! (false)))))), false), bvec2(bvec3(bvec2(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bool(_GLF_IDENTITY(! (false), true && (! (false)))))))), false), true)))))))
          {
           if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), ! (! (_GLF_WRAPPED_IF_FALSE(false)))))
            {
             if(_GLF_DEAD(false))
              return;
            }
           else
            {
             for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 | 0)); _injected_loop_counter --)
              {
               return;
              }
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), true, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))
            return;
           for(int _injected_loop_counter = (-1562 & _GLF_IDENTITY(0, (0) ^ 0)); _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), clamp(_GLF_IDENTITY(int(6), (-84327 & 0) | (int(6))), int(6), int(6)))))); _injected_loop_counter ++)
            {
             do
              {
               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y))))
                {
                }
               else
                {
                 if(_GLF_DEAD(false))
                  return;
                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
                  {
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(false))
                      return;
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                      }
                     else
                      {
                       return;
                      }
                    }
                   if(_GLF_DEAD(false))
                    break;
                  }
                 if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
                  break;
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(false))
                return;
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                break;
              }
             else
              {
              }
            }
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              continue;
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
              {
               return;
              }
            }
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
                    {
                     if(_GLF_DEAD(false))
                      return;
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                  }
                 else
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    break;
                   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false))))
                    {
                    }
                   else
                    {
                     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, false, false)))))
                      return;
                     if(_GLF_WRAPPED_IF_TRUE(true))
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        barrier();
                      }
                     else
                      {
                      }
                    }
                   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                    {
                     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
                      {
                       if(_GLF_DEAD(false))
                        return;
                       for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                        {
                         return;
                        }
                       do
                        {
                         if(_GLF_DEAD(false))
                          continue;
                         if(_GLF_DEAD(false))
                          {
                           if(_GLF_WRAPPED_IF_TRUE(true))
                            {
                             return;
                            }
                           else
                            {
                            }
                          }
                         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x > injectionSwitch.y))))
                          barrier();
                        }
                       while(_GLF_WRAPPED_LOOP(false));
                      }
                    }
                   else
                    {
                    }
                   if(_GLF_DEAD(false))
                    continue;
                  }
                 if(_GLF_DEAD(false))
                  continue;
                 return;
                 if(_GLF_DEAD(false))
                  return;
                }
              }
             else
              {
              }
             if(_GLF_DEAD(false))
              continue;
             if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(! _GLF_IDENTITY((! (false)), false || ((! (false)))), _GLF_IDENTITY(bool(bvec3(! _GLF_IDENTITY((! (false)), false || ((! (false)))), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), bool(bvec2(bool(bvec3(! _GLF_IDENTITY((! (false)), false || ((! (false)))), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), true)))))))
              {
               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                {
                 return;
                }
              }
            }
           else
            {
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              continue;
             if(_GLF_DEAD(false))
              return;
             return;
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(mat4(injectionSwitch.y, 0.0, 1.0, 0.0, 0.0, 0.0, log(1.0), 1.0, 1.0, 1.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0, 1.0, log(determinant(mat4(1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0))))))))))
            continue;
           for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(1), int(1))); _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1)))); _injected_loop_counter ++)
            {
             for(int _injected_loop_counter = (1 | 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _GLF_IDENTITY(_injected_loop_counter --, (_GLF_IDENTITY(_injected_loop_counter --, 0 | (_GLF_IDENTITY(_injected_loop_counter --, 0 + (_injected_loop_counter --))))) - (0 >> _GLF_IDENTITY(int(2), int(2)))))
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  return;
                 do
                  {
                   return;
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, false)), ! (! (bool(bvec2(false, false))))))));
                }
               if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, false, false)))))
                {
                 if(_GLF_DEAD(false))
                  break;
                 break;
                 if(_GLF_DEAD(false))
                  break;
                }
               if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))))
                {
                 if(_GLF_DEAD(false))
                  continue;
                 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
                  break;
                 barrier();
                }
               if(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, (false) && true)))))
                return;
              }
            }
           do
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                continue;
               do
                {
                 if(_GLF_DEAD(false))
                  break;
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                  {
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      break;
                     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_IDENTITY((injectionSwitch)[0], ((injectionSwitch)[0]) + 0.0), (injectionSwitch)[1]), vec2(_GLF_FUZZED(-48.03), _GLF_FUZZED(7.1)), bvec2(false, false))), _GLF_IDENTITY(injectionSwitch, vec2(mat4(injectionSwitch, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, length(vec2(0.0, 0.0)), 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0))))).y)))))))
                      continue;
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        continue;
                       break;
                      }
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                     for(int _injected_loop_counter = (1 & ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7)))); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 >> _GLF_IDENTITY(int(3), int(3)))); _injected_loop_counter --)
                      {
                       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, true && (injectionSwitch.x < injectionSwitch.y))))))
                        {
                         if(_GLF_DEAD(false))
                          break;
                         if(_GLF_DEAD(false))
                          return;
                        }
                       else
                        {
                        }
                      }
                     do
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        break;
                       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
                        break;
                       if(_GLF_DEAD(false))
                        break;
                       if(_GLF_DEAD(false))
                        break;
                       if(_GLF_WRAPPED_IF_TRUE(true))
                        {
                         barrier();
                        }
                       else
                        {
                         if(_GLF_DEAD(false))
                          break;
                        }
                      }
                     while(_GLF_WRAPPED_LOOP(false));
                    }
                   else
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0), injectionSwitch.y))))))
                      {
                       if(_GLF_DEAD(false))
                        {
                         if(_GLF_DEAD(false))
                          break;
                         barrier();
                        }
                       break;
                      }
                     if(_GLF_DEAD(false))
                      {
                       do
                        {
                         return;
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          {
                           if(_GLF_WRAPPED_IF_FALSE(false))
                            {
                            }
                           else
                            {
                             barrier();
                            }
                           if(_GLF_DEAD(false))
                            continue;
                          }
                         if(_GLF_DEAD(false))
                          {
                           if(_GLF_DEAD(false))
                            break;
                           continue;
                          }
                        }
                       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                       if(_GLF_DEAD(false))
                        continue;
                      }
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)))
                        break;
                       continue;
                      }
                    }
                  }
                 else
                  {
                   if(_GLF_DEAD(false))
                    continue;
                  }
                }
               while(_GLF_WRAPPED_LOOP(false));
               for(int _injected_loop_counter = (0 & -51484); _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), min(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y))))); _injected_loop_counter ++)
                {
                 do
                  {
                   if(_GLF_DEAD(false))
                    return;
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
               if(_GLF_DEAD(false))
                return;
              }
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, (false) || false), false, true))), (injectionSwitch.x > injectionSwitch.y))));
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y))))))
              {
               if(_GLF_DEAD(false))
                break;
               return;
              }
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
               for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (int(4)) | (_GLF_IDENTITY(int(4), (int(4)) - 0))))) >> _GLF_IDENTITY(int(4), int(4))); _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(_GLF_IDENTITY(0, (0) >> 0), max(0, 0))); _injected_loop_counter --)
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  break;
                 if(_GLF_DEAD(false))
                  return;
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                return;
              }
             else
              {
               do
                {
                 return;
                }
               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
              }
             if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
              return;
            }
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), int(_GLF_IDENTITY(ivec2(int(7), 0), ivec2(ivec2(ivec2(int(7), 0)))))))) >> _GLF_IDENTITY(int(7), int(7))), (_GLF_IDENTITY(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), int(_GLF_IDENTITY(ivec2(int(7), 0), ivec2(ivec2(ivec2(int(7), 0)))))))) >> _GLF_IDENTITY(int(7), int(7))), (_injected_loop_counter < ((1 << _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), int(_GLF_IDENTITY(ivec2(int(7), 0), ivec2(ivec2(ivec2(_GLF_IDENTITY(int(7), 0 | (int(7))), 0)))))))) >> _GLF_IDENTITY(int(7), int(7)))) || false)) && true)); _injected_loop_counter ++)
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                }
               else
                {
                 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(1.4) : injectionSwitch.x)) > injectionSwitch.y))), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), _GLF_IDENTITY((_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false || (_GLF_IDENTITY((_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true && _GLF_IDENTITY(((_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), bool(bvec4(_GLF_IDENTITY(((_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), bool(bvec4(((_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), true, false, false))), true, false, true)))))) || false), false, true, false)), ! (! (bool(bvec4(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false), false, true, false)))))))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    continue;
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     if(_GLF_DEAD(false))
                      break;
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_DEAD(false))
                        return;
                       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (29412 & (0 << _GLF_IDENTITY(int(1), int(1))))); _injected_loop_counter --)
                        {
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          {
                           if(_GLF_WRAPPED_IF_FALSE(false))
                            {
                            }
                           else
                            {
                             return;
                            }
                          }
                         if(_GLF_DEAD(false))
                          barrier();
                        }
                       return;
                      }
                    }
                   return;
                   if(_GLF_DEAD(false))
                    return;
                  }
                 return;
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   if(_GLF_DEAD(false))
                    return;
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(false))
                      break;
                     if(_GLF_DEAD(false))
                      {
                       do
                        {
                         if(_GLF_DEAD(false))
                          {
                           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > ((0 | 0) << _GLF_IDENTITY(int(3), int(3)))); _injected_loop_counter --)
                            {
                             barrier();
                            }
                          }
                        }
                       while(_GLF_WRAPPED_LOOP(false));
                       if(_GLF_DEAD(false))
                        continue;
                       return;
                      }
                     return;
                    }
                  }
                 else
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    return;
                   if(_GLF_DEAD(false))
                    return;
                  }
                 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                  return;
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  return;
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 if(_GLF_DEAD(false))
                  return;
                }
              }
            }
          }
         else
          {
          }
        }
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! _GLF_IDENTITY((! (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), bool(bool((! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))))))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         return;
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
        }
      }
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (int(_GLF_ONE(1.0, injectionSwitch.y)) & int(_GLF_ONE(1.0, injectionSwitch.y)))); _injected_loop_counter ++)
        {
         return;
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          return;
        }
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
    }
   if(_GLF_DEAD(false))
    return;
  }
 uint next_virtual_gid = _GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, 0u | (workgroup_base + subgroup_id * subgroup_size)) + ((subgroup_local_id + 1) % subgroup_size);
 if(_GLF_DEAD(false))
  return;
 do
  {
   do
    {
     do
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           barrier();
          }
         else
          {
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
           if(_GLF_DEAD(false))
            return;
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
       buf[virtual_gid] = 1;
       if(_GLF_DEAD(false))
        return;
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, false || (false))));
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        continue;
       break;
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
   if(_GLF_DEAD(false))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(vec3(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), 0.0, 0.0), clamp(vec3(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), 0.0, 0.0), vec3(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), 0.0, 0.0), vec3(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), clamp(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)))), 0.0, 0.0))))) > injectionSwitch.y))))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(2), int(2))); _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 ^ 0)); _injected_loop_counter ++)
        {
         return;
        }
      }
    }
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))).y))))
    {
    }
   else
    {
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, true, false), bvec3(bvec4(_GLF_IDENTITY(bvec3(false, true, false), bvec3(bvec4(bvec3(false, true, false), true))), _GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x)) > injectionSwitch.y, bool(bvec3(_GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x)) > injectionSwitch.y, true, true))))))))))))
    {
     for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       return;
       if(_GLF_DEAD(false))
        return;
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 << _GLF_IDENTITY(int(2), int(2)))); _injected_loop_counter --)
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         return;
        }
       else
        {
        }
      }
    }
  }
 else
  {
   for(int _injected_loop_counter = (((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3))) & 1); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != (1 ^ 1)), bool(bvec4(_GLF_WRAPPED_LOOP(_injected_loop_counter != (1 ^ 1)), false, false, true))); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      break;
     if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
      barrier();
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)), bool(bvec3(bool(bvec4(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)), false, true)))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))))))
    return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       do
        {
         return;
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
       if(_GLF_DEAD(false))
        return;
      }
    }
   if(_GLF_DEAD(false))
    barrier();
   return;
  }
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, ! (! (true)))) || false), (true) || false)))
      {
       for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat4x2(injectionSwitch, 1.0, 0.0, sin(0.0), 1.0, 1.0, 1.0)), mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (vec2(mat4x2(injectionSwitch, 1.0, 0.0, sin(0.0), 1.0, 1.0, 1.0))))).x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y))))
          barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         for(int _injected_loop_counter = (1 & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
          {
           barrier();
          }
        }
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      continue;
    }
  }
 if(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) << 0u) + 1 < subgroup_size, (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) << 0u) + 1, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(workgroup_id) : _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) << 0u) + 1)) < subgroup_size) || false))
  {
   do
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        break;
       barrier();
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) || false)));
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
    }
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), true)))))
    return;
   for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) && true)))
      {
      }
     else
      {
       do
        {
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          break;
         for(int _injected_loop_counter = (0 & 41150); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, 0 | (1))); _injected_loop_counter ++)
          {
           atomicStore(buf[next_virtual_gid], uint(2), 4, 64, 4);
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       barrier();
      }
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), ! (! (bool(bool(false))))))))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(false))
                return;
               barrier();
              }
             else
              {
              }
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-8083.9965)), float(injectionSwitch.y), bool(true)))))))
            return;
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), bool(bvec4(bool(false), true, true, false))))), true && (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), bool(bvec4(bool(false), true, true, false))))), (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), bool(bvec4(bool(false), true, true, false)))))) && true)))))
              {
              }
             else
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   barrier();
                  }
                }
               if(_GLF_DEAD(false))
                return;
              }
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
               if(_GLF_DEAD(false))
                return;
              }
             else
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                return;
               return;
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  return;
                 barrier();
                }
              }
            }
          }
         return;
        }
      }
    }
   do
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             barrier();
            }
           else
            {
            }
          }
        }
       else
        {
        }
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        }
       if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(30.45) : injectionSwitch.y))), bool(bvec3(_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(30.45) : injectionSwitch.y))), false || ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(30.45) : injectionSwitch.y))))), false, true))))))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_DEAD(false))
          break;
         do
          {
           if(_GLF_DEAD(false))
            return;
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, determinant(mat3(determinant(mat2(1.0, 0.0, 0.0, 1.0)), 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0)) * (injectionSwitch.y))))));
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || false)) || false)), (! (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || false)) || false))) && true)))))
          return;
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           for(int _injected_loop_counter = ((0 >> _GLF_IDENTITY(int(5), int(5))) << _GLF_IDENTITY(int(3), int(3))); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0)))); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(false))
              continue;
             return;
            }
           if(_GLF_DEAD(false))
            continue;
          }
         else
          {
          }
         if(_GLF_DEAD(false))
          continue;
        }
       if(_GLF_DEAD(false))
        break;
      }
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           barrier();
          }
         else
          {
          }
        }
       break;
      }
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       subgroupAll(false);
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_DEAD(false))
          break;
        }
       else
        {
         return;
        }
      }
     do
      {
       if(_GLF_DEAD(false))
        break;
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (_GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(46294))) | (0 >> _GLF_IDENTITY(int(8), int(8))))); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, false || (true))))
                {
                 return;
                }
               else
                {
                }
              }
             continue;
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
           for(int _injected_loop_counter = _GLF_IDENTITY(int(_GLF_ONE(_GLF_IDENTITY(1.0, max(1.0, _GLF_IDENTITY(1.0, (1.0) / 1.0))), injectionSwitch.y)), _GLF_IDENTITY(int(ivec2(int(_GLF_ONE(_GLF_IDENTITY(1.0, max(1.0, _GLF_IDENTITY(1.0, (1.0) / 1.0))), injectionSwitch.y)), 1)), (int(ivec2(int(_GLF_ONE(_GLF_IDENTITY(1.0, max(1.0, _GLF_IDENTITY(1.0, (1.0) / 1.0))), injectionSwitch.y)), 1))) - 0)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
            {
             return;
             if(_GLF_DEAD(false))
              break;
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  continue;
                 if(_GLF_DEAD(false))
                  break;
                 return;
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                break;
               if(_GLF_DEAD(false))
                {
                 do
                  {
                   return;
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                break;
               if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec4(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, true, false))))
                {
                 if(_GLF_DEAD(false))
                  break;
                }
               else
                {
                 if(_GLF_DEAD(false))
                  continue;
                 barrier();
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  break;
                }
               if(_GLF_DEAD(false))
                break;
              }
             if(_GLF_DEAD(false))
              return;
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
                  return;
                }
               if(_GLF_DEAD(false))
                barrier();
               continue;
              }
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  return;
                 continue;
                }
               if(_GLF_DEAD(false))
                barrier();
               continue;
              }
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), ! (! (! (_GLF_DEAD(false))))))))
              continue;
             if(_GLF_DEAD(false))
              continue;
            }
           if(_GLF_DEAD(false))
            break;
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_DEAD(false))
            continue;
          }
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
            {
             return;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
            }
          }
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                break;
               continue;
              }
             return;
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                continue;
               barrier();
              }
            }
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            continue;
           for(int _injected_loop_counter = ((0 | 0) >> _GLF_IDENTITY(int(4), int(4))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
            {
             do
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 if(_GLF_DEAD(false))
                  break;
                 return;
                }
               if(_GLF_DEAD(false))
                continue;
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_DEAD(false))
                  continue;
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 return;
                }
              }
             while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))));
            }
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
          }
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
           continue;
          }
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), true && (! (false)))))))
          continue;
         if(_GLF_DEAD(false))
          barrier();
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), (bool(bool(false))) || false))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            return;
           return;
          }
         else
          {
          }
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(false))
        continue;
      }
     if(_GLF_DEAD(false))
      return;
    }
   while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_WRAPPED_LOOP(false)), (bool(_GLF_WRAPPED_LOOP(false))) || _GLF_IDENTITY(false, ! (! (false)))), false || (_GLF_IDENTITY(bool(_GLF_WRAPPED_LOOP(false)), _GLF_IDENTITY((bool(_GLF_WRAPPED_LOOP(false))) || _GLF_IDENTITY(false, ! (! (false))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((bool(_GLF_WRAPPED_LOOP(false))) || _GLF_IDENTITY(false, ! (! (false))), ! (! ((bool(_GLF_WRAPPED_LOOP(false))) || _GLF_IDENTITY(false, ! (! (false))))))), ! (! (! (_GLF_IDENTITY((bool(_GLF_WRAPPED_LOOP(false))) || _GLF_IDENTITY(false, ! (! (false))), ! (! ((bool(_GLF_WRAPPED_LOOP(false))) || _GLF_IDENTITY(false, ! (! (false)))))))))))))))), false || (_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_WRAPPED_LOOP(false)), (bool(_GLF_WRAPPED_LOOP(false))) || _GLF_IDENTITY(false, ! (! (false))))), ! (! (_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_WRAPPED_LOOP(false)), (bool(_GLF_WRAPPED_LOOP(false))) || _GLF_IDENTITY(false, ! (! (false))))), bool(bvec4(bool(_GLF_IDENTITY(bool(_GLF_WRAPPED_LOOP(false)), (bool(_GLF_WRAPPED_LOOP(false))) || _GLF_IDENTITY(false, ! (! (false))))), true, true, false)))))))), false || (_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_WRAPPED_LOOP(false)), (bool(_GLF_WRAPPED_LOOP(false))) || false)), (bool(_GLF_IDENTITY(bool(_GLF_WRAPPED_LOOP(false)), (bool(_GLF_WRAPPED_LOOP(false))) || false))) && _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, bool(bvec4(true, false, false, false)))), (_GLF_IDENTITY(! (_GLF_IDENTITY(true, bool(bvec4(true, false, false, false)))), bool(bvec2(! (_GLF_IDENTITY(true, bool(bvec4(true, false, false, false)))), false)))) && true)))))), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_WRAPPED_LOOP(false)), (bool(_GLF_WRAPPED_LOOP(false))) || _GLF_IDENTITY(false, ! (! (false))))), false || (_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_WRAPPED_LOOP(false)), (bool(_GLF_WRAPPED_LOOP(false))) || _GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), true && (_GLF_IDENTITY(! (false), ! (! (! (false)))))))))), ! (! (_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_WRAPPED_LOOP(false)), _GLF_IDENTITY((bool(_GLF_WRAPPED_LOOP(false))) || _GLF_IDENTITY(false, ! (! (false))), ((bool(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))))) || _GLF_IDENTITY(false, ! (! (false)))) || false))), bool(bvec4(bool(_GLF_IDENTITY(bool(_GLF_WRAPPED_LOOP(false)), (bool(_GLF_WRAPPED_LOOP(false))) || _GLF_IDENTITY(false, ! (! (false))))), true, true, false)))))))), false || (_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_WRAPPED_LOOP(false)), (bool(_GLF_WRAPPED_LOOP(false))) || false)), (bool(_GLF_IDENTITY(bool(_GLF_WRAPPED_LOOP(false)), (bool(_GLF_WRAPPED_LOOP(false))) || false))) && _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, bool(bvec4(true, false, false, false)))), (_GLF_IDENTITY(! (_GLF_IDENTITY(true, bool(bvec4(true, false, false, false)))), bool(bvec2(! (_GLF_IDENTITY(true, bool(bvec4(true, false, false, false)))), false)))) && true))))))) && true, ((_GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_WRAPPED_LOOP(false)), (bool(_GLF_WRAPPED_LOOP(false))) || _GLF_IDENTITY(false, ! (! (false))))), false || (_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_WRAPPED_LOOP(false)), (bool(_GLF_WRAPPED_LOOP(false))) || _GLF_IDENTITY(false, ! (! (false))))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_WRAPPED_LOOP(false)), (bool(_GLF_WRAPPED_LOOP(false))) || _GLF_IDENTITY(false, ! (! (false))))), bool(bvec4(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), ! (! (_GLF_WRAPPED_LOOP(false))))), (bool(_GLF_WRAPPED_LOOP(false))) || _GLF_IDENTITY(false, ! (! (false))))), true, true, false))), true && (_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_WRAPPED_LOOP(false)), (bool(_GLF_WRAPPED_LOOP(false))) || _GLF_IDENTITY(false, ! (! (false))))), bool(bvec4(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), ! (! (_GLF_WRAPPED_LOOP(false))))), (bool(_GLF_WRAPPED_LOOP(false))) || _GLF_IDENTITY(false, ! (! (false))))), true, true, false)))))))))), false || (_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_WRAPPED_LOOP(false)), (bool(_GLF_WRAPPED_LOOP(false))) || false)), (bool(_GLF_IDENTITY(bool(_GLF_WRAPPED_LOOP(false)), (_GLF_IDENTITY(bool(_GLF_WRAPPED_LOOP(false)), false || (bool(_GLF_WRAPPED_LOOP(false))))) || false))) && _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, bool(bvec4(true, false, false, false)))), (_GLF_IDENTITY(! (_GLF_IDENTITY(true, bool(bvec4(true, false, false, false)))), bool(bvec2(! (_GLF_IDENTITY(true, bool(bvec4(true, false, false, false)))), false)))) && true))))))) && _GLF_IDENTITY(true, bool(bool(true)))) && true))));
   do
    {
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(false))
        return;
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
       do
        {
         for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(_GLF_IDENTITY(int(1), (_GLF_IDENTITY(int(1), (false ? _GLF_FUZZED(54491) : int(1)))) | (_GLF_IDENTITY(int(1), (true ? _GLF_IDENTITY(int(1), 0 | (int(1))) : _GLF_FUZZED(-99961))))), clamp(int(1), int(1), int(1))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              return;
             break;
            }
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(false))
              break;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
             if(_GLF_DEAD(false))
              {
               do
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   if(_GLF_DEAD(false))
                    return;
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))))))
                    barrier();
                  }
                 if(_GLF_DEAD(false))
                  break;
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(false))
                    return;
                   barrier();
                  }
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  return;
                }
               while(_GLF_WRAPPED_LOOP(false));
               do
                {
                 if(_GLF_DEAD(false))
                  break;
                 return;
                }
               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
              }
            }
           else
            {
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-60.11)), float(injectionSwitch.y), bool(true)))))))
            barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        continue;
       continue;
      }
    }
   while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), false || (_GLF_WRAPPED_LOOP(false))));
   for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(7), int(7))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      {
       do
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           return;
          }
         else
          {
           do
            {
             if(_GLF_DEAD(false))
              {
               for(int _injected_loop_counter = (1 ^ (0 << _GLF_IDENTITY(int(1), int(1)))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 ^ 1)); _injected_loop_counter --)
                {
                 return;
                }
              }
             if(_GLF_DEAD(false))
              break;
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(false || (false), false || (_GLF_IDENTITY(_GLF_IDENTITY(false || (false), (false || (false)) && true), ! (! (false || (false)))))))))
        {
         do
          {
           return;
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        }
      }
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 else
  {
   do
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         return;
         if(_GLF_DEAD(false))
          return;
        }
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(false, false, false, false))), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(false, false, false, false))), bool(bvec4(_GLF_IDENTITY(false, bool(bvec4(false, false, false, false))), false, false, true))), false)), bool(_GLF_IDENTITY(bool(bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(false, false, false, false))), bool(bvec4(_GLF_IDENTITY(false, bool(bvec4(false, false, false, false))), false, false, true))), false))), (bool(bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(false, false, false, false))), bool(bvec4(_GLF_IDENTITY(false, bool(bvec4(false, false, false, false))), false, false, true))), false)))) && true))))))
        continue;
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat2(injectionSwitch, 1.0, 1.0)), mix(vec2((vec2(mat2(injectionSwitch, 1.0, 1.0)))[0], _GLF_FUZZED(-98.76)), vec2(_GLF_FUZZED(220.506), (vec2(mat2(injectionSwitch, 1.0, 1.0)))[1]), bvec2(false, true)))), vec2(0.0, 0.0) + (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat2(injectionSwitch, 1.0, 1.0)), mix(vec2((vec2(mat2(injectionSwitch, 1.0, 1.0)))[0], _GLF_FUZZED(-98.76)), vec2(_GLF_FUZZED(220.506), (vec2(mat2(injectionSwitch, 1.0, 1.0)))[1]), bvec2(false, true)))))).x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            continue;
          }
         else
          {
           return;
          }
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
        }
       return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          break;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         return;
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
          {
           if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
            continue;
           barrier();
          }
         if(_GLF_DEAD(false))
          continue;
         return;
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
       if(_GLF_DEAD(false))
        continue;
      }
     if(_GLF_DEAD(false))
      continue;
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, true, true)), (bool(bvec3(false, true, true))) && true)), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false), bool(bvec2(_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(-5.3))), bool(_GLF_IDENTITY(bvec2(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), true), bvec2(bvec4(bvec2(injectionSwitch.x > injectionSwitch.y, true), false, true))))), true)))))));
   for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 ^ ((1 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(_GLF_IDENTITY(int(4), ~ (~ (int(4)))), (_GLF_IDENTITY(int(4), ~ (~ (int(4))))) - (0 & -94529)))) >> _GLF_IDENTITY(int(4), int(4))))); _injected_loop_counter ++)
    {
     atomicStore(buf[next_virtual_gid], uint(2), 4, 64, _GLF_IDENTITY(4, _GLF_IDENTITY((4), 0 ^ ((4))) - (0 << _GLF_IDENTITY(int(_GLF_IDENTITY(1, (1) | 0)), int(1)))));
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
      return;
    }
   subgroupAll(true);
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
