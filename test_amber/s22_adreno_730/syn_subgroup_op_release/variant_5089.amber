#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_124 {
 bvec4 _f0;
 bvec3 _f1;
 uint _f2;
 bvec4 _f3;
 uvec4 _f4;
} ;

struct _GLF_struct_125 {
 mat2 _f0;
 _GLF_struct_124 _f1;
} ;

struct _GLF_struct_126 {
 bvec2 _f0;
 mat3 _f1;
 _GLF_struct_125 _f2;
 int _injected_loop_counter;
} ;

struct _GLF_struct_121 {
 uvec3 _f0;
 mat2 _f1;
 bvec2 _f2;
 mat3x2 _f3;
} ;

struct _GLF_struct_122 {
 ivec4 _f0;
 vec3 _f1;
 _GLF_struct_121 _f2;
 bvec4 _f3;
 bvec4 _f4;
} ;

struct _GLF_struct_119 {
 ivec2 _f0;
 bvec3 _f1;
 uvec4 _f2;
 mat2x4 _f3;
} ;

struct _GLF_struct_118 {
 uvec2 _f0;
 uvec2 _f1;
 vec4 _f2;
 mat4x3 _f3;
 int _f4;
 mat3 _f5;
} ;

struct _GLF_struct_117 {
 uint _f0;
 vec3 _f1;
 bvec2 _f2;
 float _f3;
 mat2x4 _f4;
 mat3 _f5;
} ;

struct _GLF_struct_116 {
 bool _f0;
 mat3x4 _f1;
 float _f2;
 mat4 _f3;
 vec4 _f4;
} ;

struct _GLF_struct_120 {
 _GLF_struct_116 _f0;
 _GLF_struct_117 _f1;
 vec3 _f2;
 _GLF_struct_118 _f3;
 _GLF_struct_119 _f4;
} ;

struct _GLF_struct_114 {
 ivec2 _f0;
} ;

struct _GLF_struct_113 {
 mat4 _f0;
 mat4x2 _f1;
 uint _f2;
 ivec3 _f3;
 ivec3 _f4;
 ivec3 _f5;
 mat2x3 _f6;
} ;

struct _GLF_struct_115 {
 vec2 _f0;
 float _f1;
 _GLF_struct_113 _f2;
 _GLF_struct_114 _f3;
 mat4x3 _f4;
} ;

struct _GLF_struct_123 {
 _GLF_struct_115 _f0;
 _GLF_struct_120 _f1;
 bvec2 _f2;
 int _injected_loop_counter;
 bvec4 _f3;
 _GLF_struct_122 _f4;
} ;

struct _GLF_struct_110 {
 mat3 _f0;
 ivec3 _f1;
 int _f2;
} ;

struct _GLF_struct_111 {
 _GLF_struct_110 _f0;
 vec3 _f1;
} ;

struct _GLF_struct_108 {
 uvec4 _f0;
 mat3x4 _f1;
 mat2x4 _f2;
 int _f3;
 ivec2 _f4;
 mat4x2 _f5;
 mat4x2 _f6;
} ;

struct _GLF_struct_107 {
 mat2x4 _f0;
} ;

struct _GLF_struct_106 {
 bvec2 _f0;
 vec3 _f1;
 mat2x3 _f2;
 mat2x3 _f3;
 ivec4 _f4;
 mat4x3 _f5;
 float _f6;
} ;

struct _GLF_struct_109 {
 mat3 _f0;
 _GLF_struct_106 _f1;
 mat2x3 _f2;
 _GLF_struct_107 _f3;
 _GLF_struct_108 _f4;
 vec3 _f5;
} ;

struct _GLF_struct_104 {
 vec3 _f0;
 bvec3 _f1;
 bool _f2;
 vec3 _f3;
 int _f4;
 mat3x2 _f5;
} ;

struct _GLF_struct_105 {
 _GLF_struct_104 _f0;
 mat4x3 _f1;
} ;

struct _GLF_struct_102 {
 mat3 _f0;
 bvec2 _f1;
 mat4 _f2;
 bvec2 _f3;
 bvec3 _f4;
 mat2x4 _f5;
 float _f6;
} ;

struct _GLF_struct_101 {
 mat2 _f0;
 mat2 _f1;
 mat4 _f2;
 uint _f3;
 int _f4;
} ;

struct _GLF_struct_103 {
 mat4x3 _f0;
 ivec2 _f1;
 _GLF_struct_101 _f2;
 bvec4 _f3;
 _GLF_struct_102 _f4;
 mat2x3 _f5;
 bool _f6;
} ;

struct _GLF_struct_99 {
 mat3 _f0;
 mat4 _f1;
 float _f2;
} ;

struct _GLF_struct_100 {
 bool _f0;
 _GLF_struct_99 _f1;
} ;

struct _GLF_struct_112 {
 _GLF_struct_100 _f0;
 vec4 _f1;
 _GLF_struct_103 _f2;
 _GLF_struct_105 _f3;
 _GLF_struct_109 _f4;
 int _injected_loop_counter;
 _GLF_struct_111 _f5;
} ;

struct _GLF_struct_96 {
 int _injected_loop_counter;
 bool _f0;
} ;

struct _GLF_struct_95 {
 ivec3 _f0;
 mat4x3 _f1;
} ;

struct _GLF_struct_94 {
 mat4x3 _f0;
 vec2 _f1;
} ;

struct _GLF_struct_97 {
 ivec3 _f0;
 _GLF_struct_94 _f1;
 _GLF_struct_95 _f2;
 _GLF_struct_96 _f3;
 bvec4 _f4;
 mat2x3 _f5;
} ;

struct _GLF_struct_92 {
 ivec3 _f0;
 mat3x4 _f1;
 bvec3 _f2;
 uvec3 _f3;
 mat4 _f4;
 int _f5;
 int _f6;
} ;

struct _GLF_struct_91 {
 mat3x4 _f0;
 bvec4 _f1;
 mat2x4 _f2;
 float _f3;
 uvec2 _f4;
} ;

struct _GLF_struct_93 {
 _GLF_struct_91 _f0;
 vec3 _f1;
 _GLF_struct_92 _f2;
 bvec4 _f3;
} ;

struct _GLF_struct_90 {
 vec2 _f0;
 vec4 _f1;
 ivec3 _f2;
 float _f3;
 mat3 _f4;
 ivec3 _f5;
} ;

struct _GLF_struct_88 {
 bvec4 _f0;
 uvec3 _f1;
 vec2 _f2;
 float _f3;
} ;

struct _GLF_struct_87 {
 uvec3 _f0;
 uvec4 _f1;
 vec4 _f2;
 mat2x4 _f3;
 bvec2 _f4;
} ;

struct _GLF_struct_89 {
 _GLF_struct_87 _f0;
 vec4 _f1;
 ivec2 _f2;
 _GLF_struct_88 _f3;
} ;

struct _GLF_struct_98 {
 _GLF_struct_89 _f0;
 _GLF_struct_90 _f1;
 _GLF_struct_93 _f2;
 _GLF_struct_97 _f3;
 mat4x3 _f4;
} ;

struct _GLF_struct_85 {
 uvec2 _f0;
} ;

struct _GLF_struct_83 {
 mat2 _f0;
 mat3x2 _f1;
 mat4 _f2;
 bvec4 _f3;
 mat2x3 _f4;
 uint _f5;
 bvec3 _f6;
} ;

struct _GLF_struct_84 {
 uint _f0;
 ivec3 _f1;
 _GLF_struct_83 _f2;
 mat3 _f3;
 int _injected_loop_counter;
} ;

struct _GLF_struct_86 {
 _GLF_struct_84 _f0;
 _GLF_struct_85 _f1;
} ;

struct _GLF_struct_81 {
 vec2 _f0;
 uvec2 _f1;
 vec2 _f2;
 ivec2 _f3;
} ;

struct _GLF_struct_79 {
 ivec2 _f0;
 bvec3 _f1;
 mat4x2 _f2;
} ;

struct _GLF_struct_78 {
 mat4x3 _f0;
 mat2x4 _f1;
 uvec4 _f2;
 mat3x2 _f3;
 uint workgroup_size;
 vec2 _f4;
} ;

struct _GLF_struct_77 {
 ivec4 _f0;
 vec2 _f1;
} ;

struct _GLF_struct_80 {
 uvec4 _f0;
 _GLF_struct_77 _f1;
 bvec2 _f2;
 ivec2 _f3;
 mat3x2 _f4;
 _GLF_struct_78 _f5;
 _GLF_struct_79 _f6;
} ;

struct _GLF_struct_82 {
 vec4 _f0;
 _GLF_struct_80 _f1;
 mat2x4 _f2;
 _GLF_struct_81 _f3;
 vec3 _f4;
} ;

struct _GLF_struct_74 {
 bvec3 _f0;
 uvec4 _f1;
 mat2x3 _f2;
 bool _f3;
 mat3x2 _f4;
 uvec4 _f5;
 ivec2 _f6;
} ;

struct _GLF_struct_75 {
 uint num_workgroup;
 _GLF_struct_74 _f0;
} ;

struct _GLF_struct_72 {
 ivec3 _f0;
 mat4 _f1;
 mat4x3 _f2;
} ;

struct _GLF_struct_71 {
 uvec4 _f0;
 ivec2 _f1;
 mat2x3 _f2;
 ivec2 _f3;
 mat4 _f4;
} ;

struct _GLF_struct_73 {
 _GLF_struct_71 _f0;
 _GLF_struct_72 _f1;
} ;

struct _GLF_struct_76 {
 _GLF_struct_73 _f0;
 mat4x3 _f1;
 _GLF_struct_75 _f2;
} ;

struct _GLF_struct_69 {
 mat4x2 _f0;
 mat4x2 _f1;
 mat3 _f2;
} ;

struct _GLF_struct_67 {
 uvec3 _f0;
 mat3x4 _f1;
 bool _f2;
 mat4 _f3;
 ivec4 _f4;
 uvec3 _f5;
 mat3x2 _f6;
} ;

struct _GLF_struct_68 {
 _GLF_struct_67 _f0;
} ;

struct _GLF_struct_65 {
 mat2x4 _f0;
 ivec4 _f1;
} ;

struct _GLF_struct_64 {
 ivec4 _f0;
 mat2x3 _f1;
 mat2x4 _f2;
 mat3x4 _f3;
 mat4 _f4;
 mat4x2 _f5;
 uvec3 _f6;
} ;

struct _GLF_struct_66 {
 vec3 _f0;
 _GLF_struct_64 _f1;
 mat3x4 _f2;
 _GLF_struct_65 _f3;
} ;

struct _GLF_struct_62 {
 mat3 _f0;
 ivec4 _f1;
 uvec4 _f2;
 uvec4 _f3;
 mat3 _f4;
} ;

struct _GLF_struct_61 {
 float _f0;
} ;

struct _GLF_struct_63 {
 uvec3 _f0;
 _GLF_struct_61 _f1;
 uint _f2;
 uvec2 _f3;
 _GLF_struct_62 _f4;
 mat3x4 _f5;
} ;

struct _GLF_struct_70 {
 mat4x2 _f0;
 _GLF_struct_63 _f1;
 uvec2 _f2;
 _GLF_struct_66 _f3;
 _GLF_struct_68 _f4;
 _GLF_struct_69 _f5;
 int _injected_loop_counter;
} ;

struct _GLF_struct_60 {
 mat4x3 _f0;
 uint workgroup_id;
} ;

struct _GLF_struct_57 {
 mat2x3 _f0;
 mat3 _f1;
 ivec4 _f2;
} ;

struct _GLF_struct_56 {
 float _f0;
} ;

struct _GLF_struct_58 {
 mat3 _f0;
 mat3 _f1;
 _GLF_struct_56 _f2;
 mat2 _f3;
 _GLF_struct_57 _f4;
} ;

struct _GLF_struct_54 {
 vec2 _f0;
 bool _f1;
 mat2x4 _f2;
 mat3 _f3;
 mat2 _f4;
} ;

struct _GLF_struct_53 {
 bvec2 _f0;
} ;

struct _GLF_struct_52 {
 mat4 _f0;
 uvec3 _f1;
 bvec3 _f2;
 mat3x2 _f3;
 uint _f4;
} ;

struct _GLF_struct_51 {
 mat3x4 _f0;
 mat4x3 _f1;
 mat3x2 _f2;
 float _f3;
 uvec2 _f4;
 int _f5;
} ;

struct _GLF_struct_55 {
 bvec3 _f0;
 _GLF_struct_51 _f1;
 _GLF_struct_52 _f2;
 _GLF_struct_53 _f3;
 _GLF_struct_54 _f4;
} ;

struct _GLF_struct_59 {
 mat3x4 _f0;
 _GLF_struct_55 _f1;
 bool _f2;
 int _injected_loop_counter;
 _GLF_struct_58 _f3;
} ;

struct _GLF_struct_48 {
 bool _f0;
 vec4 _f1;
} ;

struct _GLF_struct_49 {
 _GLF_struct_48 _f0;
} ;

struct _GLF_struct_46 {
 mat4x2 _f0;
 bvec2 _f1;
 uvec4 _f2;
 mat4x2 _f3;
 mat2x3 _f4;
 ivec3 _f5;
 ivec2 _f6;
} ;

struct _GLF_struct_45 {
 bvec3 _f0;
 mat3x2 _f1;
} ;

struct _GLF_struct_47 {
 _GLF_struct_45 _f0;
 mat3 _f1;
 mat4x2 _f2;
 _GLF_struct_46 _f3;
} ;

struct _GLF_struct_43 {
 mat3x2 _f0;
 bvec4 _f1;
 ivec4 _f2;
} ;

struct _GLF_struct_42 {
 mat2x3 _f0;
 mat3x4 _f1;
 uint _f2;
 vec2 _f3;
 ivec4 _f4;
 mat4x3 _f5;
} ;

struct _GLF_struct_41 {
 ivec3 _f0;
 int _f1;
 vec2 _f2;
 bvec4 _f3;
 uint _f4;
 mat2x3 _f5;
} ;

struct _GLF_struct_44 {
 _GLF_struct_41 _f0;
 int _f1;
 _GLF_struct_42 _f2;
 vec3 _f3;
 bvec3 _f4;
 _GLF_struct_43 _f5;
} ;

struct _GLF_struct_39 {
 mat2 _f0;
 mat3x2 _f1;
} ;

struct _GLF_struct_38 {
 mat3 _f0;
 mat4 _f1;
 float _f2;
 mat3x2 _f3;
} ;

struct _GLF_struct_37 {
 uint _f0;
 bvec3 _f1;
 bvec3 _f2;
 ivec2 _f3;
 mat3 _f4;
} ;

struct _GLF_struct_36 {
 ivec4 _f0;
 mat3x4 _f1;
 mat2x3 _f2;
 vec4 _f3;
 uvec4 _f4;
} ;

struct _GLF_struct_35 {
 uvec2 _f0;
 bool _f1;
} ;

struct _GLF_struct_34 {
 mat3 _f0;
 vec2 _f1;
 mat3x4 _f2;
 mat3 _f3;
} ;

struct _GLF_struct_40 {
 _GLF_struct_34 _f0;
 _GLF_struct_35 _f1;
 vec2 _f2;
 _GLF_struct_36 _f3;
 _GLF_struct_37 _f4;
 _GLF_struct_38 _f5;
 _GLF_struct_39 _f6;
} ;

struct _GLF_struct_50 {
 uvec3 _f0;
 _GLF_struct_40 _f1;
 _GLF_struct_44 _f2;
 _GLF_struct_47 _f3;
 _GLF_struct_49 _f4;
 uint workgroup_base;
 mat2x3 _f5;
} ;

struct _GLF_struct_31 {
 mat4 _f0;
 vec3 _f1;
 float _f2;
} ;

struct _GLF_struct_30 {
 bvec2 _f0;
 bvec4 _f1;
 ivec4 _f2;
 mat3 _f3;
} ;

struct _GLF_struct_29 {
 uvec2 _f0;
 mat4 _f1;
 vec3 _f2;
 ivec3 _f3;
 uint _f4;
} ;

struct _GLF_struct_32 {
 mat4x3 _f0;
 mat2 _f1;
 _GLF_struct_29 _f2;
 mat2 _f3;
 _GLF_struct_30 _f4;
 _GLF_struct_31 _f5;
 mat2x4 _f6;
 uint subgroup_local_id;
} ;

struct _GLF_struct_33 {
 _GLF_struct_32 _f0;
 vec4 _f1;
} ;

struct _GLF_struct_26 {
 mat4x2 _f0;
 mat2x4 _f1;
 ivec2 _f2;
} ;

struct _GLF_struct_25 {
 ivec2 _f0;
 mat3x2 _f1;
 mat3 _f2;
 uvec3 _f3;
 bvec3 _f4;
 vec2 _f5;
 mat3x4 _f6;
} ;

struct _GLF_struct_27 {
 _GLF_struct_25 _f0;
 vec3 _f1;
 mat2x4 _f2;
 _GLF_struct_26 _f3;
 bvec3 _f4;
 bvec3 _f5;
} ;

struct _GLF_struct_23 {
 vec4 _f0;
 mat3x2 _f1;
 mat4x2 _f2;
 int _injected_loop_counter;
} ;

struct _GLF_struct_22 {
 uvec2 _f0;
 uvec2 _f1;
 vec4 _f2;
 mat4x2 _f3;
 mat4x2 _f4;
 mat3 _f5;
 float _f6;
} ;

struct _GLF_struct_21 {
 mat4x3 _f0;
 vec2 _f1;
 ivec2 _f2;
 mat3x2 _f3;
 uvec3 _f4;
 uvec2 _f5;
} ;

struct _GLF_struct_20 {
 uvec4 _f0;
 mat2 _f1;
 vec4 _f2;
} ;

struct _GLF_struct_24 {
 _GLF_struct_20 _f0;
 _GLF_struct_21 _f1;
 _GLF_struct_22 _f2;
 int _f3;
 _GLF_struct_23 _f4;
} ;

struct _GLF_struct_28 {
 _GLF_struct_24 _f0;
 _GLF_struct_27 _f1;
} ;

struct _GLF_struct_17 {
 vec3 _f0;
} ;

struct _GLF_struct_18 {
 _GLF_struct_17 _f0;
} ;

struct _GLF_struct_15 {
 uint _f0;
} ;

struct _GLF_struct_16 {
 bvec2 _f0;
 _GLF_struct_15 _f1;
 mat4 _f2;
 bool _f3;
} ;

struct _GLF_struct_13 {
 uvec2 _f0;
} ;

struct _GLF_struct_12 {
 mat3x4 _f0;
 ivec2 _f1;
} ;

struct _GLF_struct_11 {
 bvec4 _f0;
 mat3x2 _f1;
 uvec3 _f2;
} ;

struct _GLF_struct_10 {
 mat2x4 _f0;
} ;

struct _GLF_struct_14 {
 _GLF_struct_10 _f0;
 int _f1;
 _GLF_struct_11 _f2;
 _GLF_struct_12 _f3;
 ivec4 _f4;
 _GLF_struct_13 _f5;
} ;

struct _GLF_struct_8 {
 mat3 _f0;
 uint _f1;
 ivec4 _f2;
 vec3 _f3;
 mat3x4 _f4;
 vec3 _f5;
} ;

struct _GLF_struct_7 {
 vec2 _f0;
 uvec4 _f1;
 ivec2 _f2;
} ;

struct _GLF_struct_6 {
 mat4 _f0;
 mat3x2 _f1;
 int _f2;
 mat3x4 _f3;
 mat4x3 _f4;
 uint _f5;
} ;

struct _GLF_struct_5 {
 ivec2 _f0;
 mat2 _f1;
 mat4x3 _f2;
} ;

struct _GLF_struct_9 {
 _GLF_struct_5 _f0;
 _GLF_struct_6 _f1;
 mat3x4 _f2;
 _GLF_struct_7 _f3;
 uvec3 _f4;
 _GLF_struct_8 _f5;
} ;

struct _GLF_struct_19 {
 uint subgroup_id;
 mat3x2 _f0;
 _GLF_struct_9 _f1;
 _GLF_struct_14 _f2;
 _GLF_struct_16 _f3;
 _GLF_struct_18 _f4;
} ;

struct _GLF_struct_2 {
 bvec4 _f0;
} ;

struct _GLF_struct_1 {
 mat4 _f0;
 ivec4 _f1;
 ivec2 _f2;
 uvec4 _f3;
 mat2 _f4;
 float _f5;
} ;

struct _GLF_struct_0 {
 uvec3 _f0;
} ;

struct _GLF_struct_3 {
 _GLF_struct_0 _f0;
 _GLF_struct_1 _f1;
 _GLF_struct_2 _f2;
 vec3 _f3;
 uint next_virtual_gid;
} ;

struct _GLF_struct_4 {
 uvec4 _f0;
 _GLF_struct_3 _f1;
 ivec4 _f2;
 mat3 _f3;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         barrier();
        }
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         return;
        }
       barrier();
      }
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       return;
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
          return;
         return;
        }
      }
     else
      {
       if(_GLF_DEAD(false))
        return;
       for(int _injected_loop_counter = (int(_GLF_ONE(1.0, injectionSwitch.y)) & int(_GLF_ONE(1.0, injectionSwitch.y))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          return;
        }
       if(_GLF_DEAD(false))
        return;
      }
    }
   else
    {
    }
   barrier();
  }
 _GLF_struct_19 _GLF_struct_replacement_19 = _GLF_struct_19(gl_SubgroupID, mat3x2(1.0), _GLF_struct_9(_GLF_struct_5(ivec2(1), mat2(1.0), mat4x3(1.0)), _GLF_struct_6(mat4(1.0), mat3x2(1.0), 1, mat3x4(1.0), mat4x3(1.0), 1u), mat3x4(1.0), _GLF_struct_7(vec2(1.0), uvec4(1u), ivec2(1)), uvec3(1u), _GLF_struct_8(mat3(1.0), 1u, ivec4(1), vec3(1.0), mat3x4(1.0), vec3(1.0))), _GLF_struct_14(_GLF_struct_10(mat2x4(1.0)), 1, _GLF_struct_11(bvec4(true), mat3x2(1.0), uvec3(1u)), _GLF_struct_12(mat3x4(1.0), ivec2(1)), ivec4(1), _GLF_struct_13(uvec2(1u))), _GLF_struct_16(bvec2(true), _GLF_struct_15(1u), mat4(1.0), true), _GLF_struct_18(_GLF_struct_17(vec3(1.0))));
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       barrier();
      }
    }
   return;
  }
 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (true)))))
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   else
    {
    }
  }
 if(_GLF_DEAD(false))
  return;
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
    barrier();
   if(_GLF_DEAD(false))
    break;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      break;
     break;
    }
   do
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bool(false)))))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           do
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, true)), bool(bvec2(bool(bvec2(false, true)), false))))))
              barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
           return;
           if(_GLF_DEAD(false))
            barrier();
          }
        }
      }
     else
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           else
            {
             barrier();
             if(_GLF_DEAD(false))
              barrier();
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
          }
        }
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 ^ 1)); _injected_loop_counter ++)
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             barrier();
            }
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))))
              return;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (false)))))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                }
               else
                {
                 barrier();
                }
              }
             if(_GLF_DEAD(false))
              return;
            }
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           do
            {
             if(_GLF_DEAD(false))
              continue;
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  return;
                 barrier();
                }
               break;
              }
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(false))
                return;
               for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                {
                 barrier();
                }
              }
             do
              {
               for(int _injected_loop_counter = (0 | 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, int(ivec2(0, (0 << _GLF_IDENTITY(int(0), int(0))))))); _injected_loop_counter --)
                {
                 barrier();
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
             if(_GLF_DEAD(false))
              return;
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              {
               do
                {
                 do
                  {
                   barrier();
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
               while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))));
               if(_GLF_DEAD(false))
                barrier();
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
              continue;
             if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, true && (false))))
              {
              }
             else
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  break;
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 do
                  {
                   barrier();
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
              }
            }
           while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, false || (false))));
          }
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(false))
            break;
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
            }
           else
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               do
                {
                 barrier();
                 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
                  return;
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         else
          {
           do
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
                  barrier();
                 continue;
                }
               return;
              }
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
           do
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
             do
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_DEAD(false))
                  continue;
                }
               else
                {
                 if(_GLF_DEAD(false))
                  return;
                }
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
                  {
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     barrier();
                    }
                  }
                }
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(false))
                barrier();
               break;
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              continue;
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              continue;
             return;
            }
          }
         else
          {
          }
         barrier();
        }
       if(_GLF_DEAD(false))
        break;
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    continue;
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
   else
    {
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) && true)));
    }
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
   for(int _injected_loop_counter = (1 | 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, (0) | (0))); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
     barrier();
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(false))
    {
     do
      {
       barrier();
       if(_GLF_DEAD(false))
        return;
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
  }
 _GLF_struct_33 _GLF_struct_replacement_33 = _GLF_struct_33(_GLF_struct_32(mat4x3(1.0), mat2(1.0), _GLF_struct_29(uvec2(1u), mat4(1.0), vec3(1.0), ivec3(1), 1u), mat2(1.0), _GLF_struct_30(bvec2(true), bvec4(true), ivec4(1), mat3(1.0)), _GLF_struct_31(mat4(1.0), vec3(1.0), 1.0), mat2x4(1.0), gl_SubgroupInvocationID), vec4(1.0));
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
          barrier();
         return;
        }
      }
     else
      {
      }
    }
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 ^ 0)); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
            {
             if(_GLF_DEAD(false))
              return;
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                break;
               barrier();
              }
             return;
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           barrier();
          }
        }
       break;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     for(_GLF_struct_112 _GLF_struct_replacement_112 = _GLF_struct_112(_GLF_struct_100(true, _GLF_struct_99(mat3(1.0), mat4(1.0), 1.0)), vec4(1.0), _GLF_struct_103(mat4x3(1.0), ivec2(1), _GLF_struct_101(mat2(1.0), mat2(1.0), mat4(1.0), 1u, 1), bvec4(true), _GLF_struct_102(mat3(1.0), bvec2(true), mat4(1.0), bvec2(true), bvec3(true), mat2x4(1.0), 1.0), mat2x3(1.0), true), _GLF_struct_105(_GLF_struct_104(vec3(1.0), bvec3(true), true, vec3(1.0), 1, mat3x2(1.0)), mat4x3(1.0)), _GLF_struct_109(mat3(1.0), _GLF_struct_106(bvec2(true), vec3(1.0), mat2x3(1.0), mat2x3(1.0), ivec4(1), mat4x3(1.0), 1.0), mat2x3(1.0), _GLF_struct_107(mat2x4(1.0)), _GLF_struct_108(uvec4(1u), mat3x4(1.0), mat2x4(1.0), 1, ivec2(1), mat4x2(1.0), mat4x2(1.0)), vec3(1.0)), ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3))), _GLF_struct_111(_GLF_struct_110(mat3(1.0), ivec3(1), 1), vec3(1.0))); _GLF_WRAPPED_LOOP(_GLF_struct_replacement_112._injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _GLF_struct_replacement_112._injected_loop_counter --)
      {
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  return;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      return;
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       return;
      }
     else
      {
      }
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       do
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
       if(_GLF_DEAD(false))
        barrier();
      }
     for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           do
            {
             for(int _injected_loop_counter = _GLF_IDENTITY(1, _GLF_IDENTITY(int(ivec2(1, 0)), (int(ivec2(1, 0))) | 0)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
              {
               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                {
                 if(_GLF_DEAD(false))
                  return;
                 do
                  {
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))
                      break;
                    }
                   else
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_DEAD(false))
                        barrier();
                       return;
                      }
                    }
                   if(_GLF_DEAD(false))
                    continue;
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    {
                     if(_GLF_DEAD(false))
                      continue;
                     if(_GLF_DEAD(false))
                      barrier();
                     barrier();
                    }
                   barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
              }
            }
           while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) && true)));
          }
         if(_GLF_DEAD(false))
          break;
         do
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
            break;
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
        }
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      barrier();
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     for(_GLF_struct_123 _GLF_struct_replacement_123 = _GLF_struct_123(_GLF_struct_115(vec2(1.0), 1.0, _GLF_struct_113(mat4(1.0), mat4x2(1.0), 1u, ivec3(1), ivec3(1), ivec3(1), mat2x3(1.0)), _GLF_struct_114(ivec2(1)), mat4x3(1.0)), _GLF_struct_120(_GLF_struct_116(true, mat3x4(1.0), 1.0, mat4(1.0), vec4(1.0)), _GLF_struct_117(1u, vec3(1.0), bvec2(true), 1.0, mat2x4(1.0), mat3(1.0)), vec3(1.0), _GLF_struct_118(uvec2(1u), uvec2(1u), vec4(1.0), mat4x3(1.0), 1, mat3(1.0)), _GLF_struct_119(ivec2(1), bvec3(true), uvec4(1u), mat2x4(1.0))), bvec2(true), int(_GLF_ONE(1.0, injectionSwitch.y)), bvec4(true), _GLF_struct_122(ivec4(1), vec3(1.0), _GLF_struct_121(uvec3(1u), mat2(1.0), bvec2(true), mat3x2(1.0)), bvec4(true), bvec4(true))); _GLF_WRAPPED_LOOP(_GLF_struct_replacement_123._injected_loop_counter != 0); _GLF_struct_replacement_123._injected_loop_counter --)
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 return;
                }
               else
                {
                }
              }
            }
           else
            {
            }
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
        }
      }
    }
   else
    {
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
          barrier();
         barrier();
        }
      }
     else
      {
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         return;
        }
      }
    }
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) || false)))
    {
    }
   else
    {
     barrier();
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         barrier();
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         barrier();
        }
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))));
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 _GLF_struct_76 _GLF_struct_replacement_76 = _GLF_struct_76(_GLF_struct_73(_GLF_struct_71(uvec4(1u), ivec2(1), mat2x3(1.0), ivec2(1), mat4(1.0)), _GLF_struct_72(ivec3(1), mat4(1.0), mat4x3(1.0))), mat4x3(1.0), _GLF_struct_75(gl_NumWorkGroups.x, _GLF_struct_74(bvec3(true), uvec4(1u), mat2x3(1.0), true, mat3x2(1.0), uvec4(1u), ivec2(1))));
 _GLF_struct_82 _GLF_struct_replacement_82 = _GLF_struct_82(vec4(1.0), _GLF_struct_80(uvec4(1u), _GLF_struct_77(ivec4(1), vec2(1.0)), bvec2(true), ivec2(1), mat3x2(1.0), _GLF_struct_78(mat4x3(1.0), mat2x4(1.0), uvec4(1u), mat3x2(1.0), gl_WorkGroupSize.x, vec2(1.0)), _GLF_struct_79(ivec2(1), bvec3(true), mat4x2(1.0))), mat2x4(1.0), _GLF_struct_81(vec2(1.0), uvec2(1u), vec2(1.0), ivec2(1)), vec3(1.0));
 if(_GLF_DEAD(false))
  barrier();
 _GLF_struct_60 _GLF_struct_replacement_60 = _GLF_struct_60(mat4x3(1.0), gl_WorkGroupID.x);
 _GLF_struct_50 _GLF_struct_replacement_50 = _GLF_struct_50(uvec3(1u), _GLF_struct_40(_GLF_struct_34(mat3(1.0), vec2(1.0), mat3x4(1.0), mat3(1.0)), _GLF_struct_35(uvec2(1u), true), vec2(1.0), _GLF_struct_36(ivec4(1), mat3x4(1.0), mat2x3(1.0), vec4(1.0), uvec4(1u)), _GLF_struct_37(1u, bvec3(true), bvec3(true), ivec2(1), mat3(1.0)), _GLF_struct_38(mat3(1.0), mat4(1.0), 1.0, mat3x2(1.0)), _GLF_struct_39(mat2(1.0), mat3x2(1.0))), _GLF_struct_44(_GLF_struct_41(ivec3(1), 1, vec2(1.0), bvec4(true), 1u, mat2x3(1.0)), 1, _GLF_struct_42(mat2x3(1.0), mat3x4(1.0), 1u, vec2(1.0), ivec4(1), mat4x3(1.0)), vec3(1.0), bvec3(true), _GLF_struct_43(mat3x2(1.0), bvec4(true), ivec4(1))), _GLF_struct_47(_GLF_struct_45(bvec3(true), mat3x2(1.0)), mat3(1.0), mat4x2(1.0), _GLF_struct_46(mat4x2(1.0), bvec2(true), uvec4(1u), mat4x2(1.0), mat2x3(1.0), ivec3(1), ivec2(1))), _GLF_struct_49(_GLF_struct_48(true, vec4(1.0))), _GLF_struct_replacement_82._f1._f5.workgroup_size * _GLF_struct_replacement_60.workgroup_id, mat2x3(1.0));
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, false)))))
          break;
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       barrier();
      }
     else
      {
      }
    }
  }
 uint virtual_gid = _GLF_struct_replacement_50.workgroup_base + _GLF_struct_replacement_19.subgroup_id * subgroup_size + _GLF_struct_replacement_33._f0.subgroup_local_id;
 _GLF_struct_4 _GLF_struct_replacement_4 = _GLF_struct_4(uvec4(1u), _GLF_struct_3(_GLF_struct_0(uvec3(1u)), _GLF_struct_1(mat4(1.0), ivec4(1), ivec2(1), uvec4(1u), mat2(1.0), 1.0), _GLF_struct_2(bvec4(true)), vec3(1.0), _GLF_struct_replacement_50.workgroup_base + _GLF_struct_replacement_19.subgroup_id * subgroup_size + ((_GLF_struct_replacement_33._f0.subgroup_local_id + 1) % subgroup_size)), ivec4(1), mat3(1.0));
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       return;
      }
    }
  }
 for(int _injected_loop_counter = (1 & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, true && (true))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      {
       do
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
            barrier();
           return;
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))));
       return;
      }
    }
   else
    {
    }
   barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
  }
 buf[virtual_gid] = 1;
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
    }
  }
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      continue;
     break;
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_struct_replacement_33._f0.subgroup_local_id + 1 < subgroup_size)
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         return;
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     do
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         do
          {
           for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                continue;
               if(_GLF_DEAD(false))
                barrier();
              }
             else
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(false))
                continue;
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                  }
                 else
                  {
                   return;
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    continue;
                  }
                }
              }
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       else
        {
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(false))
      {
       do
        {
         if(_GLF_DEAD(false))
          break;
         return;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      continue;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       atomicStore(buf[_GLF_struct_replacement_4._f1.next_virtual_gid], uint(2), 4, 64, 4);
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
          {
           barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
           barrier();
          }
         if(_GLF_DEAD(false))
          break;
         if(_GLF_DEAD(false))
          barrier();
        }
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           barrier();
           if(_GLF_DEAD(false))
            {
             do
              {
               do
                {
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                  {
                   do
                    {
                     barrier();
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                   if(_GLF_DEAD(false))
                    continue;
                  }
                 else
                  {
                  }
                }
               while(_GLF_WRAPPED_LOOP(false));
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), true && (! (false)))))))
                  break;
                 if(_GLF_DEAD(false))
                  barrier();
                 continue;
                 if(_GLF_DEAD(false))
                  break;
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                break;
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
               else
                {
                 if(_GLF_DEAD(false))
                  barrier();
                }
               barrier();
               if(_GLF_DEAD(false))
                barrier();
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                return;
               barrier();
              }
            }
           if(_GLF_DEAD(false))
            barrier();
          }
        }
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), false || (! (false)))))))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         barrier();
        }
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           return;
          }
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         else
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             barrier();
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               do
                {
                 barrier();
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_DEAD(false))
                  break;
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   if(_GLF_DEAD(false))
                    {
                     for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(6), int(6))); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
                      {
                       if(_GLF_DEAD(false))
                        barrier();
                       barrier();
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        continue;
                      }
                    }
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 if(_GLF_DEAD(false))
                  barrier();
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             else
              {
              }
             if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
              barrier();
            }
          }
         for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
          {
           return;
          }
         if(_GLF_DEAD(false))
          break;
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
        }
       if(_GLF_DEAD(false))
        barrier();
       return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          break;
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           barrier();
          }
         else
          {
          }
         if(_GLF_DEAD(false))
          barrier();
        }
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         do
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               barrier();
              }
             for(_GLF_struct_86 _GLF_struct_replacement_86 = _GLF_struct_86(_GLF_struct_84(1u, ivec3(1), _GLF_struct_83(mat2(1.0), mat3x2(1.0), mat4(1.0), bvec4(true), mat2x3(1.0), 1u, bvec3(true)), mat3(1.0), int(_GLF_ONE(1.0, injectionSwitch.y))), _GLF_struct_85(uvec2(1u))); _GLF_WRAPPED_LOOP(_GLF_struct_replacement_86._f0._injected_loop_counter > (0 >> _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), 0 ^ (int(7)))))); _GLF_struct_replacement_86._f0._injected_loop_counter --)
              {
               do
                {
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                  {
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      {
                      }
                     else
                      {
                       barrier();
                      }
                     if(_GLF_DEAD(false))
                      break;
                    }
                   do
                    {
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                      }
                     else
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        continue;
                       return;
                      }
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                  }
                 else
                  {
                  }
                }
               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
              }
             if(_GLF_DEAD(false))
              barrier();
            }
           else
            {
             if(_GLF_DEAD(false))
              barrier();
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, (false) && true)))))
        barrier();
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          {
           do
            {
             for(_GLF_struct_70 _GLF_struct_replacement_70 = _GLF_struct_70(mat4x2(1.0), _GLF_struct_63(uvec3(1u), _GLF_struct_61(1.0), 1u, uvec2(1u), _GLF_struct_62(mat3(1.0), ivec4(1), uvec4(1u), uvec4(1u), mat3(1.0)), mat3x4(1.0)), uvec2(1u), _GLF_struct_66(vec3(1.0), _GLF_struct_64(ivec4(1), mat2x3(1.0), mat2x4(1.0), mat3x4(1.0), mat4(1.0), mat4x2(1.0), uvec3(1u)), mat3x4(1.0), _GLF_struct_65(mat2x4(1.0), ivec4(1))), _GLF_struct_68(_GLF_struct_67(uvec3(1u), mat3x4(1.0), true, mat4(1.0), ivec4(1), uvec3(1u), mat3x2(1.0))), _GLF_struct_69(mat4x2(1.0), mat4x2(1.0), mat3(1.0)), int(_GLF_ZERO(0.0, injectionSwitch.x))); _GLF_WRAPPED_LOOP(_GLF_struct_replacement_70._injected_loop_counter < 1); _GLF_struct_replacement_70._injected_loop_counter ++)
              {
               barrier();
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
          }
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(false))
        return;
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     subgroupAll(false);
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (0 | 1)); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     else
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
      }
    }
   else
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         do
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), max(int(2), int(2)))))); _injected_loop_counter --)
            {
             if(_GLF_DEAD(false))
              {
               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                     do
                      {
                       barrier();
                      }
                     while(_GLF_WRAPPED_LOOP(false));
                    }
                  }
                 else
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, false || (true))))
                    {
                     for(int _injected_loop_counter = ((((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), 0 + (int(7))))) << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), (int(1)) / ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2)))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
                      {
                       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
                        barrier();
                       if(_GLF_DEAD(false))
                        barrier();
                       barrier();
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        barrier();
                      }
                    }
                   else
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      break;
                    }
                  }
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_DEAD(false))
                  barrier();
                }
               do
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              continue;
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
         if(_GLF_DEAD(false))
          continue;
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              break;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))
                  barrier();
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   barrier();
                   if(_GLF_DEAD(false))
                    break;
                  }
                 else
                  {
                  }
                }
               else
                {
                }
               if(_GLF_DEAD(false))
                break;
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              continue;
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                {
                 barrier();
                }
               else
                {
                }
              }
            }
           else
            {
             do
              {
               barrier();
               if(_GLF_DEAD(false))
                barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
             if(_GLF_DEAD(false))
              break;
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               break;
              }
            }
           do
            {
             if(_GLF_DEAD(false))
              {
               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                {
                 barrier();
                }
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         if(_GLF_DEAD(false))
          barrier();
        }
       for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, false || (false)), true)))))
            barrier();
          }
        }
      }
     else
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           do
            {
             barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         else
          {
          }
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     atomicStore(buf[_GLF_struct_replacement_4._f1.next_virtual_gid], uint(2), 4, 64, 4);
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          {
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
           if(_GLF_DEAD(false))
            continue;
          }
         if(_GLF_DEAD(false))
          break;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
      }
     for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           subgroupAll(true);
          }
         else
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
            continue;
           if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, true && (false))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))
            continue;
          }
        }
      }
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), (_GLF_IDENTITY(false, (false) && true)) || false)))
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           return;
          }
        }
       do
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
           barrier();
          }
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             continue;
            }
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             for(_GLF_struct_98 _GLF_struct_replacement_98 = _GLF_struct_98(_GLF_struct_89(_GLF_struct_87(uvec3(1u), uvec4(1u), vec4(1.0), mat2x4(1.0), bvec2(true)), vec4(1.0), ivec2(1), _GLF_struct_88(bvec4(true), uvec3(1u), vec2(1.0), 1.0)), _GLF_struct_90(vec2(1.0), vec4(1.0), ivec3(1), 1.0, mat3(1.0), ivec3(1)), _GLF_struct_93(_GLF_struct_91(mat3x4(1.0), bvec4(true), mat2x4(1.0), 1.0, uvec2(1u)), vec3(1.0), _GLF_struct_92(ivec3(1), mat3x4(1.0), bvec3(true), uvec3(1u), mat4(1.0), 1, 1), bvec4(true)), _GLF_struct_97(ivec3(1), _GLF_struct_94(mat4x3(1.0), vec2(1.0)), _GLF_struct_95(ivec3(1), mat4x3(1.0)), _GLF_struct_96((((1 & 1) << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))), true), bvec4(true), mat2x3(1.0)), mat4x3(1.0)); _GLF_WRAPPED_LOOP(_GLF_struct_replacement_98._f3._f3._injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _GLF_struct_replacement_98._f3._f3._injected_loop_counter --)
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 barrier();
                }
               else
                {
                }
              }
            }
           else
            {
            }
          }
         for(_GLF_struct_59 _GLF_struct_replacement_59 = _GLF_struct_59(mat3x4(1.0), _GLF_struct_55(bvec3(true), _GLF_struct_51(mat3x4(1.0), mat4x3(1.0), mat3x2(1.0), 1.0, uvec2(1u), 1), _GLF_struct_52(mat4(1.0), uvec3(1u), bvec3(true), mat3x2(1.0), 1u), _GLF_struct_53(bvec2(true)), _GLF_struct_54(vec2(1.0), true, mat2x4(1.0), mat3(1.0), mat2(1.0))), true, 0, _GLF_struct_58(mat3(1.0), mat3(1.0), _GLF_struct_56(1.0), mat2(1.0), _GLF_struct_57(mat2x3(1.0), mat3(1.0), ivec4(1)))); _GLF_WRAPPED_LOOP(_GLF_struct_replacement_59._injected_loop_counter != (1 & 1)); _GLF_struct_replacement_59._injected_loop_counter ++)
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                {
                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                  {
                   barrier();
                  }
                 if(_GLF_DEAD(false))
                  break;
                }
               do
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                  }
                 else
                  {
                  }
                 barrier();
                }
               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
               if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
                barrier();
              }
            }
          }
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
            barrier();
          }
         else
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                break;
               barrier();
              }
             if(_GLF_DEAD(false))
              {
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 & (1 & 1))); _injected_loop_counter ++)
                {
                 barrier();
                }
              }
             if(_GLF_DEAD(false))
              barrier();
             barrier();
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                continue;
               barrier();
              }
            }
          }
         if(_GLF_DEAD(false))
          continue;
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
       do
        {
         for(_GLF_struct_28 _GLF_struct_replacement_28 = _GLF_struct_28(_GLF_struct_24(_GLF_struct_20(uvec4(1u), mat2(1.0), vec4(1.0)), _GLF_struct_21(mat4x3(1.0), vec2(1.0), ivec2(1), mat3x2(1.0), uvec3(1u), uvec2(1u)), _GLF_struct_22(uvec2(1u), uvec2(1u), vec4(1.0), mat4x2(1.0), mat4x2(1.0), mat3(1.0), 1.0), 1, _GLF_struct_23(vec4(1.0), mat3x2(1.0), mat4x2(1.0), 1)), _GLF_struct_27(_GLF_struct_25(ivec2(1), mat3x2(1.0), mat3(1.0), uvec3(1u), bvec3(true), vec2(1.0), mat3x4(1.0)), vec3(1.0), mat2x4(1.0), _GLF_struct_26(mat4x2(1.0), mat2x4(1.0), ivec2(1)), bvec3(true), bvec3(true))); _GLF_WRAPPED_LOOP(_GLF_struct_replacement_28._f0._f4._injected_loop_counter != 0); _GLF_struct_replacement_28._f0._f4._injected_loop_counter --)
          {
           do
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               barrier();
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))
            continue;
           if(_GLF_DEAD(false))
            barrier();
           barrier();
           if(_GLF_DEAD(false))
            continue;
           do
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
               if(_GLF_DEAD(false))
                continue;
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 barrier();
                }
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                    {
                     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        barrier();
                       if(_GLF_DEAD(false))
                        barrier();
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        barrier();
                       barrier();
                       if(_GLF_DEAD(false))
                        barrier();
                      }
                    }
                   else
                    {
                    }
                  }
                }
               else
                {
                }
               if(_GLF_DEAD(false))
                continue;
              }
             else
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                  }
                 else
                  {
                   barrier();
                  }
                }
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 return;
                }
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             else
              {
               barrier();
              }
             if(_GLF_DEAD(false))
              barrier();
            }
           if(_GLF_DEAD(false))
            return;
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(false))
              barrier();
             do
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   for(_GLF_struct_126 _GLF_struct_replacement_126 = _GLF_struct_126(bvec2(true), mat3(1.0), _GLF_struct_125(mat2(1.0), _GLF_struct_124(bvec4(true), bvec3(true), 1u, bvec4(true), uvec4(1u))), 0); _GLF_WRAPPED_LOOP(_GLF_struct_replacement_126._injected_loop_counter < ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), (false ? _GLF_FUZZED(_GLF_struct_replacement_126._injected_loop_counter) : int(1)))))); _GLF_struct_replacement_126._injected_loop_counter ++)
                    {
                     return;
                    }
                  }
                 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                  }
                 else
                  {
                   barrier();
                  }
                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                  {
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                     barrier();
                     if(_GLF_DEAD(false))
                      continue;
                    }
                  }
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_DEAD(false))
                return;
               if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                {
                 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                  {
                   barrier();
                  }
                }
              }
            }
           else
            {
             do
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    continue;
                   if(_GLF_DEAD(false))
                    barrier();
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 else
                  {
                  }
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                  {
                   barrier();
                  }
                }
              }
             while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false))))))));
             if(_GLF_DEAD(false))
              barrier();
            }
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_DEAD(false))
            continue;
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           break;
          }
         barrier();
        }
       do
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
           if(_GLF_DEAD(false))
            break;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               return;
              }
             else
              {
               if(_GLF_DEAD(false))
                return;
              }
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                continue;
               barrier();
              }
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
              {
               barrier();
              }
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
        }
      }
     if(_GLF_DEAD(false))
      break;
     if(_GLF_DEAD(false))
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
        }
       barrier();
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 do
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       barrier();
      }
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
          barrier();
        }
       else
        {
        }
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
         barrier();
        }
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  return;
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
