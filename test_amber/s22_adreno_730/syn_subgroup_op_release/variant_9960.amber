#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_15 {
 ivec3 _f0;
 uint _f1;
 bvec3 _f2;
 uint _f3;
} ;

struct _GLF_struct_14 {
 vec2 _f0;
 ivec2 _f1;
 ivec3 _f2;
 ivec4 _f3;
 mat3 _f4;
} ;

struct _GLF_struct_16 {
 _GLF_struct_14 _f0;
 mat2x3 _f1;
 _GLF_struct_15 _f2;
} ;

struct _GLF_struct_12 {
 bvec4 _f0;
 mat3x2 _f1;
 vec3 _f2;
 mat4x3 _f3;
 vec3 _f4;
 bvec2 _f5;
 vec2 _f6;
} ;

struct _GLF_struct_11 {
 uvec4 _f0;
 float _f1;
 uvec3 _f2;
} ;

struct _GLF_struct_10 {
 ivec2 _f0;
 vec3 _f1;
 mat2x3 _f2;
 mat2x3 _f3;
 uvec3 _f4;
} ;

struct _GLF_struct_13 {
 _GLF_struct_10 _f0;
 _GLF_struct_11 _f1;
 uvec3 _f2;
 mat3x2 _f3;
 mat2x3 _f4;
 _GLF_struct_12 _f5;
 mat4x3 _f6;
} ;

struct _GLF_struct_8 {
 uvec4 _f0;
 ivec2 _f1;
 vec3 _f2;
 vec3 _f3;
} ;

struct _GLF_struct_7 {
 vec4 _f0;
 mat2 _f1;
 vec4 _f2;
 mat2x3 _f3;
 vec3 _f4;
 uvec3 _f5;
 vec3 _f6;
} ;

struct _GLF_struct_6 {
 mat2x3 _f0;
 mat4x2 _f1;
 mat4 _f2;
 vec3 _f3;
 mat3x4 _f4;
 uvec4 _f5;
} ;

struct _GLF_struct_5 {
 ivec3 _f0;
 bool _f1;
 uvec2 _f2;
 vec2 _f3;
} ;

struct _GLF_struct_4 {
 mat3x2 _f0;
 uvec3 _f1;
 uvec2 _f2;
 ivec3 _f3;
} ;

struct _GLF_struct_9 {
 _GLF_struct_4 _f0;
 _GLF_struct_5 _f1;
 _GLF_struct_6 _f2;
 _GLF_struct_7 _f3;
 _GLF_struct_8 _f4;
 uvec4 _f5;
} ;

struct _GLF_struct_2 {
 ivec2 _f0;
 vec3 _f1;
 bvec4 _f2;
 uvec3 _f3;
 bool _f4;
 ivec2 _f5;
} ;

struct _GLF_struct_1 {
 uvec2 _f0;
 float _f1;
 mat4 _f2;
 mat2x4 _f3;
 mat2x3 _f4;
 mat4 _f5;
 mat4x2 _f6;
} ;

struct _GLF_struct_0 {
 mat3x2 _f0;
 mat2 _f1;
 bvec3 _f2;
 uvec4 _f3;
} ;

struct _GLF_struct_3 {
 bvec4 _f0;
 _GLF_struct_0 _f1;
 mat4x3 _f2;
 mat4x3 _f3;
 _GLF_struct_1 _f4;
 _GLF_struct_2 _f5;
} ;

struct _GLF_struct_17 {
 _GLF_struct_3 _f0;
 _GLF_struct_9 _f1;
 bvec4 _f2;
 _GLF_struct_13 _f3;
 _GLF_struct_16 _f4;
 uint subgroup_size;
 uvec2 _f5;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uvec2 GLF_merged2_0_1_13_1_1_12subgroup_sizeworkgroup_id;
 uvec2 GLF_merged2_0_1_16_1_1_11next_virtual_gidsubgroup_id;
 uint subgroup_id = gl_SubgroupID;
 GLF_merged2_0_1_16_1_1_11next_virtual_gidsubgroup_id.y = subgroup_id;
 _GLF_struct_17 _GLF_struct_replacement_17 = _GLF_struct_17(_GLF_struct_3(bvec4(true), _GLF_struct_0(mat3x2(1.0), mat2(1.0), bvec3(true), uvec4(1u)), mat4x3(1.0), mat4x3(1.0), _GLF_struct_1(uvec2(1u), 1.0, mat4(1.0), mat2x4(1.0), mat2x3(1.0), mat4(1.0), mat4x2(1.0)), _GLF_struct_2(ivec2(1), vec3(1.0), bvec4(true), uvec3(1u), true, ivec2(1))), _GLF_struct_9(_GLF_struct_4(mat3x2(1.0), uvec3(1u), uvec2(1u), ivec3(1)), _GLF_struct_5(ivec3(1), true, uvec2(1u), vec2(1.0)), _GLF_struct_6(mat2x3(1.0), mat4x2(1.0), mat4(1.0), vec3(1.0), mat3x4(1.0), uvec4(1u)), _GLF_struct_7(vec4(1.0), mat2(1.0), vec4(1.0), mat2x3(1.0), vec3(1.0), uvec3(1u), vec3(1.0)), _GLF_struct_8(uvec4(1u), ivec2(1), vec3(1.0), vec3(1.0)), uvec4(1u)), bvec4(true), _GLF_struct_13(_GLF_struct_10(ivec2(1), vec3(1.0), mat2x3(1.0), mat2x3(1.0), uvec3(1u)), _GLF_struct_11(uvec4(1u), 1.0, uvec3(1u)), uvec3(1u), mat3x2(1.0), mat2x3(1.0), _GLF_struct_12(bvec4(true), mat3x2(1.0), vec3(1.0), mat4x3(1.0), vec3(1.0), bvec2(true), vec2(1.0)), mat4x3(1.0)), _GLF_struct_16(_GLF_struct_14(vec2(1.0), ivec2(1), ivec3(1), ivec4(1), mat3(1.0)), mat2x3(1.0), _GLF_struct_15(ivec3(1), 1u, bvec3(true), 1u)), gl_SubgroupSize, uvec2(1u));
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   GLF_merged2_0_1_13_1_1_12subgroup_sizeworkgroup_id.x = _GLF_struct_replacement_17.subgroup_size;
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, true && (false))))
  {
  }
 else
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bvec4(true, true, false, true)))))
        {
         return;
        }
       else
        {
        }
      }
    }
  }
 GLF_merged2_0_1_13_1_1_12subgroup_sizeworkgroup_id.y = workgroup_id;
 uint workgroup_base = workgroup_size * GLF_merged2_0_1_13_1_1_12subgroup_sizeworkgroup_id.y;
 uint virtual_gid = workgroup_base + GLF_merged2_0_1_16_1_1_11next_virtual_gidsubgroup_id.y * GLF_merged2_0_1_13_1_1_12subgroup_sizeworkgroup_id.x + subgroup_local_id;
 uint next_virtual_gid = workgroup_base + GLF_merged2_0_1_16_1_1_11next_virtual_gidsubgroup_id.y * GLF_merged2_0_1_13_1_1_12subgroup_sizeworkgroup_id.x + ((subgroup_local_id + 1) % GLF_merged2_0_1_13_1_1_12subgroup_sizeworkgroup_id.x);
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   GLF_merged2_0_1_16_1_1_11next_virtual_gidsubgroup_id.x = next_virtual_gid;
  }
 else
  {
  }
 do
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     buf[virtual_gid] = 1;
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
  {
   for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     if(subgroup_local_id + 1 < GLF_merged2_0_1_13_1_1_12subgroup_sizeworkgroup_id.x)
      {
       do
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
          {
           atomicStore(buf[GLF_merged2_0_1_16_1_1_11next_virtual_gidsubgroup_id.x], uint(2), 4, 64, 4);
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
       subgroupAll(false);
      }
     else
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         atomicStore(buf[GLF_merged2_0_1_16_1_1_11next_virtual_gidsubgroup_id.x], uint(2), 4, 64, 4);
        }
       else
        {
        }
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         do
          {
           subgroupAll(true);
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       else
        {
        }
      }
    }
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
