#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer WriteVal {
 uint write_val;
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uvec3 GLF_merged3_0_1_13_1_1_11_2_1_13subgroup_basesubgroup_idsubgroup_size;
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec2((injectionSwitch.x > injectionSwitch.y), false)))), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
  return;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       return;
      }
     else
      {
      }
    }
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         return;
        }
      }
     return;
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(5, 0 + (5))), int(5)))); _injected_loop_counter ++)
      {
       return;
      }
    }
  }
 uint subgroup_id = gl_SubgroupID;
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    break;
   for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(_GLF_IDENTITY(int(6), (int(6)) >> 0), (_GLF_IDENTITY(int(6), (int(6)) >> 0)) << (0 << _GLF_IDENTITY(int(1), int(1)))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      break;
     if(_GLF_DEAD(false))
      break;
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       GLF_merged3_0_1_13_1_1_11_2_1_13subgroup_basesubgroup_idsubgroup_size.y = subgroup_id;
      }
     else
      {
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)))).y)))) && true))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bool(false))), ! (_GLF_IDENTITY(! (false), bool(bool(! (false))))))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         return;
        }
       else
        {
        }
      }
    }
   else
    {
     return;
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(true, bool(bvec3(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), false || (_GLF_IDENTITY(true, _GLF_IDENTITY(false, (false) && true) || (true))))))
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < _GLF_IDENTITY(1, int(_GLF_IDENTITY(ivec4(1, 1, 0, 0), ~ (~ (ivec4(1, 1, 0, 0)))))), ! (! (_injected_loop_counter < _GLF_IDENTITY(1, _GLF_IDENTITY(int(_GLF_IDENTITY(ivec4(1, _GLF_IDENTITY(1, ~ (~ (_GLF_IDENTITY(1, max(1, 1))))), 0, 0), ~ (~ (ivec4(1, 1, 0, 0))))), max(int(_GLF_IDENTITY(ivec4(1, _GLF_IDENTITY(1, ~ (~ (_GLF_IDENTITY(1, max(1, 1))))), 0, 0), ~ (~ (ivec4(1, 1, 0, 0))))), int(_GLF_IDENTITY(ivec4(1, _GLF_IDENTITY(1, ~ (~ (_GLF_IDENTITY(1, max(1, 1))))), 0, 0), ~ (~ (ivec4(1, 1, 0, 0)))))))))))); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          break;
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
          break;
         return;
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(false, bool(bvec3(false, true, _GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))
            continue;
           continue;
          }
        }
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  return;
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), injectionSwitch)).y)) || _GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), bool(bvec4(! ((false)), true, false, false))))))), bool(bvec2(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false)), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false))), (! (_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0))) || (false)))) || false))), false || (_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false)), bool(bvec3(_GLF_IDENTITY(false, _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), vec2(_GLF_IDENTITY(mat3x4((injectionSwitch) * mat2(1.0), 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0), (mat3x4((injectionSwitch) * mat2(1.0), 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0)) * mat3(1.0))))).x > injectionSwitch.y)) || (false)), false, true)))))) || false)), true))))
    {
     if(_GLF_DEAD(false))
      {
       do
        {
         return;
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, false || (false))));
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(9.3), _GLF_IDENTITY((injectionSwitch)[1], (true ? (injectionSwitch)[1] : _GLF_FUZZED(-4428.7259)))), vec2((injectionSwitch)[0], _GLF_FUZZED(281.958)), bvec2(true, false))).x > injectionSwitch.y))))
        {
        }
       else
        {
         return;
        }
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         return;
        }
       else
        {
        }
      }
     do
      {
       return;
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).x > injectionSwitch.y))))
        continue;
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
        return;
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), false, false, false))))))))
    return;
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, true && (false)))))))
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
         if(_GLF_DEAD(false))
          break;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         continue;
        }
       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (injectionSwitch.x > injectionSwitch.y))))
        continue;
       GLF_merged3_0_1_13_1_1_11_2_1_13subgroup_basesubgroup_idsubgroup_size.z = subgroup_size;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         do
          {
           return;
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y))));
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       do
        {
         return;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
  }
 else
  {
  }
 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(8016.2746)), bool(false))), _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - determinant(mat2(0.0, 0.0, 0.0, 0.0)))))))) && true)))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
      {
       if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), false || _GLF_IDENTITY((_GLF_DEAD(false)), ((_GLF_DEAD(false))) || false))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false)))))), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(false || (_GLF_DEAD(false)), bool(bvec3(_GLF_IDENTITY(false || (_GLF_DEAD(false)), bool(bvec4(false || (_GLF_DEAD(false)), false, true, false))), true, true))))))))))), true && (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), ! (! _GLF_IDENTITY((_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false)))), true && ((_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false)))))))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false)))))), (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))))) || false))))))))))
        {
         do
          {
           if(_GLF_DEAD(false))
            break;
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                break;
               return;
              }
             else
              {
              }
             if(_GLF_DEAD(false))
              continue;
            }
           if(_GLF_DEAD(false))
            break;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, true, true), bvec3(bvec3(bvec3(false, true, true))))))))
          return;
         return;
        }
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          return;
        }
       else
        {
        }
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       else
        {
        }
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, 0 ^ (1))); _injected_loop_counter ++)
        {
         return;
        }
      }
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
    }
  }
 else
  {
  }
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-6.5) : injectionSwitch.y))), float(_GLF_FUZZED(-8722.7830)), bool(false)))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-6.5) : injectionSwitch.y))), float(_GLF_FUZZED(-8722.7830)), bool(false)))))))))
  {
   if(_GLF_DEAD(false))
    return;
   for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(5), int(5))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec2(false, _GLF_IDENTITY(false, true && (false)))))) && _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(981.182) : injectionSwitch.x)) < _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).y)))))))
      continue;
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       return;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      continue;
    }
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
  {
   do
    {
     return;
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec4(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, false, true))))))))));
  }
 uint num_workgroup = _GLF_IDENTITY(gl_NumWorkGroups, uvec3(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(gl_NumWorkGroups, max(gl_NumWorkGroups, gl_NumWorkGroups)))).x;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(injectionSwitch[0], injectionSwitch[1]), vec2(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y)) * (vec2(injectionSwitch[0], injectionSwitch[1])))).y))))
  return;
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 do
  {
   for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(7), (true ? _GLF_IDENTITY(int(7), (_GLF_IDENTITY(int(7), max(int(7), int(7)))) >> 0) : _GLF_FUZZED(16660))), _GLF_IDENTITY(int(_GLF_IDENTITY(7, (true ? _GLF_IDENTITY(7, (7) << (0 ^ 0)) : _GLF_FUZZED(11895)))), _GLF_IDENTITY((int(7)) << int(_GLF_ZERO(0.0, injectionSwitch.x)), ((int(7)) << int(_GLF_ZERO(0.0, injectionSwitch.x))) / 1)))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3))) ^ 0)); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bvec4(false, false, true, true)))), bool(bvec3(! (_GLF_IDENTITY(false, bool(bvec4(false, false, true, true)))), true, false))))), (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(true, (true) && true) && (false))))
        break;
       return;
      }
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(false))
        return;
       if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_DEAD(false)), bool(bool(bool(_GLF_DEAD(false)))))), bool(bvec2(_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_DEAD(false)), bool(bool(bool(_GLF_DEAD(false)))))), bool(bvec3(bool(_GLF_IDENTITY(bool(_GLF_DEAD(false)), bool(bool(bool(_GLF_DEAD(false)))))), false, false))), false))), ! (! (_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_DEAD(false)), bool(_GLF_IDENTITY(bool(bool(_GLF_DEAD(false))), false || (_GLF_IDENTITY(bool(bool(_GLF_DEAD(false))), ! (! (bool(bool(_GLF_DEAD(false))))))))))), bool(bvec2(_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_DEAD(false)), bool(bool(bool(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false))))))), bool(bvec3(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))), bool(bool(bool(_GLF_DEAD(false)))))), false, false))), false)))))), (_GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_DEAD(false)), bool(bool(bool(_GLF_DEAD(false)))))), bool(bvec2(_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_DEAD(false)), bool(_GLF_IDENTITY(bool(bool(_GLF_DEAD(false))), bool(bool(bool(bool(_GLF_DEAD(false))))))))), bool(bvec3(bool(_GLF_IDENTITY(bool(_GLF_DEAD(false)), bool(_GLF_IDENTITY(bool(bool(_GLF_DEAD(false))), bool(bvec4(_GLF_IDENTITY(bool(bool(_GLF_DEAD(false))), (bool(bool(_GLF_DEAD(false)))) && true), true, true, false)))))), false, false))), false))), true && (_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_DEAD(false)), bool(bool(bool(_GLF_DEAD(false)))))), bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_DEAD(false)), bool(bool(bool(_GLF_DEAD(false)))))), bool(bvec3(bool(_GLF_IDENTITY(bool(_GLF_DEAD(false)), bool(bool(bool(_GLF_DEAD(false)))))), false, false))), true && (_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_DEAD(false)), bool(bool(bool(_GLF_DEAD(false)))))), bool(bvec3(bool(_GLF_IDENTITY(bool(_GLF_DEAD(false)), bool(bool(bool(_GLF_DEAD(false)))))), false, false))))), false)))))) || _GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (injectionSwitch.x > injectionSwitch.y)))))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           return;
          }
        }
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 do
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && _GLF_IDENTITY(((_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(6.7), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-6.5)), bvec2(true, false))).x), float(_GLF_FUZZED(-39.74)), bool(false))) > injectionSwitch.y)), ! (! (((_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat4x3(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, vec2(vec4(injectionSwitch, 1.0, 0.0))), injectionSwitch, injectionSwitch)), sqrt(abs(0.0)), 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0), (mat4x3(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, vec2(vec4(injectionSwitch, 1.0, 0.0))), injectionSwitch, injectionSwitch)), sqrt(abs(0.0)), 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0)) - mat4x3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))).x), float(_GLF_FUZZED(-39.74)), bool(false))) > injectionSwitch.y))))))), bool(bvec4(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && _GLF_IDENTITY(((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(mat3x4(injectionSwitch.x, 0.0, 1.0, 1.0, 1.0, sin(0.0), 0.0, 0.0, 0.0, 1.0, exp(0.0), 1.0), mat3x4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0) + (mat3x4(injectionSwitch.x, 0.0, 1.0, 1.0, 1.0, sin(0.0), 0.0, 0.0, 0.0, 1.0, exp(0.0), 1.0))))), mix(float(injectionSwitch.x), float(_GLF_FUZZED(-39.74)), _GLF_IDENTITY(bool(false), bool(bvec2(bool(false), true))))) > injectionSwitch.y)), ! _GLF_IDENTITY((! (((_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-39.74)), bool(false))) > _GLF_IDENTITY(injectionSwitch, mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch)).y)))), (_GLF_IDENTITY((! (((_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-39.74)), bool(false))) > _GLF_IDENTITY(injectionSwitch, mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch)).y)))), _GLF_IDENTITY(bool(bool((! (((_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-39.74)), bool(false))) > _GLF_IDENTITY(injectionSwitch, mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch)).y)))))), (bool(bool((! (((_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-39.74)), bool(false))) > _GLF_IDENTITY(injectionSwitch, mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch)).y))))))) || false))) || false)))), false, true, true)))))
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              break;
             if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), bool(bool(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), false || (_GLF_WRAPPED_IF_TRUE(true)))))))
              {
               if(_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(bool(_GLF_DEAD(false)), bool(bool(bool(_GLF_DEAD(false))))))))
                break;
               if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), bool(bvec2(! (injectionSwitch.x > injectionSwitch.y), true)))))))))))
                {
                 if(_GLF_DEAD(false))
                  break;
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(false))
                    break;
                   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (true)))))
                    {
                     return;
                    }
                   else
                    {
                    }
                  }
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(4.9) : injectionSwitch.y))))))
                  continue;
                }
               else
                {
                 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, (false) || _GLF_IDENTITY(false, bool(bvec2(false, true)))))), (injectionSwitch.x > injectionSwitch.y))))
                  {
                   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _GLF_IDENTITY(_injected_loop_counter ++, (_GLF_IDENTITY(_injected_loop_counter ++, (_GLF_IDENTITY(true, ! (! (true))) ? _injected_loop_counter ++ : _GLF_FUZZED(findMSB(46308u))))) >> 0))
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      return;
                     return;
                    }
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    return;
                  }
                 return;
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  break;
                }
              }
             else
              {
              }
            }
           else
            {
             if(_GLF_DEAD(false))
              return;
            }
           for(int _injected_loop_counter = (1 ^ 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(((1 << _GLF_IDENTITY(int(6), int(_GLF_IDENTITY(6, int(ivec4(_GLF_IDENTITY(6, (6) | (6)), int(_GLF_ZERO(0.0, injectionSwitch.x)), 0, ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))))))))) >> _GLF_IDENTITY(int(6), int(6))), min(_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6))), (((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6)))) | (((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6))))), ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(6), (int(6)) * 1), int(6))) >> _GLF_IDENTITY(int(6), int(6)))))); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(false))
                return;
               return;
              }
            }
          }
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             return;
            }
           if(_GLF_DEAD(false))
            continue;
          }
        }
       else
        {
         if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          return;
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
           break;
          }
        }
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 uint workgroup_base = _GLF_IDENTITY(workgroup_size * _GLF_IDENTITY(workgroup_id, uint(uvec2(workgroup_id, 0u))), _GLF_IDENTITY((_GLF_IDENTITY(workgroup_size * workgroup_id, clamp(workgroup_size * workgroup_id, _GLF_IDENTITY(workgroup_size * workgroup_id, (workgroup_size * workgroup_id) / 1u), _GLF_IDENTITY(workgroup_size * workgroup_id, (workgroup_size * workgroup_id) * 1u)))) | (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_size * _GLF_IDENTITY(_GLF_IDENTITY(workgroup_id, (_GLF_IDENTITY(workgroup_id, max(workgroup_id, workgroup_id))) << 0u), (workgroup_id) * _GLF_IDENTITY(((_GLF_IDENTITY(1u << _GLF_IDENTITY(uint(1u), uint(1u)), (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch : _GLF_FUZZED(injectionSwitch))).y)) ? _GLF_IDENTITY(_GLF_FUZZED(workgroup_id), max(_GLF_IDENTITY(_GLF_FUZZED(workgroup_id), min(_GLF_IDENTITY(_GLF_FUZZED(workgroup_id), max(_GLF_FUZZED(workgroup_id), _GLF_FUZZED(workgroup_id))), _GLF_FUZZED(workgroup_id))), _GLF_FUZZED(workgroup_id))) : _GLF_IDENTITY(1u << _GLF_IDENTITY(uint(1u), uint(1u)), 1u * (1u << _GLF_IDENTITY(uint(1u), uint(1u))))))) >> _GLF_IDENTITY(uint(1u), uint(_GLF_IDENTITY(1u, ~ (_GLF_IDENTITY(~ (1u), (~ (1u)) + 0u)))))), (((_GLF_IDENTITY(1u << _GLF_IDENTITY(uint(1u), uint(1u)), (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch : _GLF_FUZZED(injectionSwitch))).y)) ? _GLF_IDENTITY(_GLF_FUZZED(workgroup_id), max(_GLF_IDENTITY(_GLF_FUZZED(workgroup_id), min(_GLF_IDENTITY(_GLF_FUZZED(workgroup_id), max(_GLF_FUZZED(workgroup_id), _GLF_FUZZED(workgroup_id))), _GLF_FUZZED(workgroup_id))), _GLF_FUZZED(workgroup_id))) : _GLF_IDENTITY(1u << _GLF_IDENTITY(uint(1u), uint(1u)), 1u * (1u << _GLF_IDENTITY(uint(1u), uint(1u))))))) >> _GLF_IDENTITY(uint(1u), uint(_GLF_IDENTITY(1u, ~ (_GLF_IDENTITY(~ (1u), (~ (1u)) + 0u))))))) >> 0u)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(workgroup_size * _GLF_IDENTITY(workgroup_id, (workgroup_id) * ((1u << _GLF_IDENTITY(_GLF_IDENTITY(uint(1u), uint(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (uint(1u))), uint(1u))) >> _GLF_IDENTITY(uint(1u), uint(1u)))), uint(uvec3(workgroup_size * _GLF_IDENTITY(workgroup_id, (workgroup_id) * ((1u << _GLF_IDENTITY(uint(1u), uint(1u))) >> _GLF_IDENTITY(uint(1u), uint(1u)))), 1u, 1u))) : _GLF_FUZZED(_GLF_IDENTITY(uaddCarry(num_workgroup, subgroup_local_id, GLF_merged3_0_1_13_1_1_11_2_1_13subgroup_basesubgroup_idsubgroup_size.s), (false ? _GLF_FUZZED(packUnorm4x8(vec4(57.38, 1.9, -1.9, -714.845))) : _GLF_IDENTITY(uaddCarry(num_workgroup, subgroup_local_id, GLF_merged3_0_1_13_1_1_11_2_1_13subgroup_basesubgroup_idsubgroup_size.s), (uaddCarry(num_workgroup, subgroup_local_id, GLF_merged3_0_1_13_1_1_11_2_1_13subgroup_basesubgroup_idsubgroup_size.s)) | 0u)))))), _GLF_IDENTITY(max(workgroup_size * workgroup_id, _GLF_IDENTITY(workgroup_size, ~ (~ (workgroup_size))) * workgroup_id), (max(workgroup_size * workgroup_id, workgroup_size * workgroup_id)) / _GLF_IDENTITY(1u, (1u) * 1u)))), ((_GLF_IDENTITY(workgroup_size * workgroup_id, clamp(workgroup_size * workgroup_id, _GLF_IDENTITY(workgroup_size * workgroup_id, (workgroup_size * workgroup_id) / 1u), _GLF_IDENTITY(workgroup_size * workgroup_id, (workgroup_size * workgroup_id) * 1u)))) | _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_size * _GLF_IDENTITY(_GLF_IDENTITY(workgroup_id, (_GLF_IDENTITY(workgroup_id, max(workgroup_id, workgroup_id))) << 0u), (workgroup_id) * ((_GLF_IDENTITY(1u << _GLF_IDENTITY(uint(1u), uint(1u)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(_GLF_IDENTITY(workgroup_id, (_GLF_IDENTITY(workgroup_id, (workgroup_id) | (workgroup_id))) / 1u)) : 1u << _GLF_IDENTITY(uint(1u), uint(1u))))) >> _GLF_IDENTITY(uint(1u), uint(1u)))), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(workgroup_size * _GLF_IDENTITY(_GLF_IDENTITY(workgroup_id, (1u & 1u) * (workgroup_id)), (workgroup_id) * ((1u << _GLF_IDENTITY(_GLF_IDENTITY(uint(1u), uint(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (uint(1u))), uint(1u))) >> _GLF_IDENTITY(uint(1u), uint(1u)))), uint(uvec3(workgroup_size * _GLF_IDENTITY(workgroup_id, (workgroup_id) * (_GLF_IDENTITY((1u << _GLF_IDENTITY(uint(1u), uint(1u))) >> _GLF_IDENTITY(uint(1u), uint(1u)), ((1u << _GLF_IDENTITY(uint(1u), uint(1u))) >> _GLF_IDENTITY(uint(1u), uint(1u))) - 0u))), 1u, _GLF_IDENTITY(1u, max(1u, 1u))))) : _GLF_FUZZED(uaddCarry(num_workgroup, subgroup_local_id, GLF_merged3_0_1_13_1_1_11_2_1_13subgroup_basesubgroup_idsubgroup_size.s)))), 0u ^ (_GLF_IDENTITY(workgroup_size * _GLF_IDENTITY(_GLF_IDENTITY(workgroup_id, (_GLF_IDENTITY(workgroup_id, max(workgroup_id, workgroup_id))) << 0u), (workgroup_id) * ((_GLF_IDENTITY(1u << _GLF_IDENTITY(uint(1u), uint(1u)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(_GLF_IDENTITY(workgroup_id, (_GLF_IDENTITY(workgroup_id, (workgroup_id) | (workgroup_id))) / 1u)) : 1u << _GLF_IDENTITY(uint(1u), uint(1u))))) >> _GLF_IDENTITY(uint(1u), uint(1u)))), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(workgroup_size * _GLF_IDENTITY(_GLF_IDENTITY(workgroup_id, (1u & 1u) * (workgroup_id)), (workgroup_id) * ((1u << _GLF_IDENTITY(_GLF_IDENTITY(uint(1u), uint(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (uint(1u))), uint(1u))) >> _GLF_IDENTITY(uint(1u), uint(1u)))), uint(uvec3(workgroup_size * _GLF_IDENTITY(workgroup_id, (workgroup_id) * (_GLF_IDENTITY((1u << _GLF_IDENTITY(uint(1u), uint(1u))) >> _GLF_IDENTITY(uint(1u), uint(1u)), ((1u << _GLF_IDENTITY(uint(1u), uint(1u))) >> _GLF_IDENTITY(uint(1u), uint(1u))) - 0u))), 1u, _GLF_IDENTITY(1u, max(1u, 1u))))) : _GLF_FUZZED(uaddCarry(num_workgroup, subgroup_local_id, GLF_merged3_0_1_13_1_1_11_2_1_13subgroup_basesubgroup_idsubgroup_size.s)))))), _GLF_IDENTITY(max(workgroup_size * workgroup_id, workgroup_size * workgroup_id), (max(workgroup_size * workgroup_id, workgroup_size * workgroup_id)) / _GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, (1u) ^ 0u)) * 1u)))), _GLF_IDENTITY(((_GLF_IDENTITY(_GLF_IDENTITY(workgroup_size * _GLF_IDENTITY(_GLF_IDENTITY(workgroup_id, (_GLF_IDENTITY(workgroup_id, max(workgroup_id, workgroup_id))) << 0u), (workgroup_id) * ((_GLF_IDENTITY(1u << _GLF_IDENTITY(uint(1u), uint(1u)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(_GLF_IDENTITY(workgroup_id, (_GLF_IDENTITY(workgroup_id, (workgroup_id) | (workgroup_id))) / 1u)) : 1u << _GLF_IDENTITY(uint(1u), uint(1u))))) >> _GLF_IDENTITY(_GLF_IDENTITY(uint(1u), uint(1u)), max(_GLF_IDENTITY(_GLF_IDENTITY(uint(1u), uint(1u)), ~ (~ (_GLF_IDENTITY(uint(1u), uint(1u))))), _GLF_IDENTITY(_GLF_IDENTITY(uint(1u), uint(1u)), 0u | (_GLF_IDENTITY(uint(1u), uint(1u)))))))), _GLF_IDENTITY((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(workgroup_size * _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_id, (1u & 1u) * (workgroup_id)), (workgroup_id) * ((1u << _GLF_IDENTITY(_GLF_IDENTITY(uint(1u), uint(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (uint(1u))), uint(1u))) >> _GLF_IDENTITY(uint(1u), uint(1u)))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_id, (1u & 1u) * (workgroup_id)), (workgroup_id) * ((1u << _GLF_IDENTITY(_GLF_IDENTITY(uint(1u), uint(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (uint(1u))), uint(1u))) >> _GLF_IDENTITY(uint(1u), uint(1u)))), max(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_id, (1u & 1u) * (workgroup_id)), (workgroup_id) * ((1u << _GLF_IDENTITY(_GLF_IDENTITY(uint(1u), uint(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (uint(1u))), uint(1u))) >> _GLF_IDENTITY(uint(1u), uint(1u)))), _GLF_IDENTITY(_GLF_IDENTITY(workgroup_id, (1u & 1u) * (workgroup_id)), (workgroup_id) * ((1u << _GLF_IDENTITY(_GLF_IDENTITY(uint(1u), uint(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (uint(1u))), uint(1u))) >> _GLF_IDENTITY(uint(1u), uint(1u))))))) ^ 0u), uint(uvec3(workgroup_size * _GLF_IDENTITY(workgroup_id, (workgroup_id) * (_GLF_IDENTITY((1u << _GLF_IDENTITY(uint(1u), uint(1u))) >> _GLF_IDENTITY(uint(1u), uint(1u)), ((1u << _GLF_IDENTITY(_GLF_IDENTITY(uint(1u), uint(1u)), (_GLF_IDENTITY(uint(1u), uint(1u))) | 0u)) >> _GLF_IDENTITY(uint(1u), _GLF_IDENTITY(uint(1u), (uint(1u)) | 0u))) - 0u))), 1u, _GLF_IDENTITY(1u, max(1u, 1u))))) : _GLF_FUZZED(uaddCarry(num_workgroup, _GLF_IDENTITY(subgroup_local_id, (true ? subgroup_local_id : _GLF_FUZZED(subgroup_id))), GLF_merged3_0_1_13_1_1_11_2_1_13subgroup_basesubgroup_idsubgroup_size.s))), ~ (~ (_GLF_IDENTITY((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(workgroup_size * _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_id, (1u & 1u) * (workgroup_id)), (workgroup_id) * ((1u << _GLF_IDENTITY(_GLF_IDENTITY(uint(1u), uint(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (uint(1u))), uint(1u))) >> _GLF_IDENTITY(uint(1u), uint(1u)))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_id, (1u & 1u) * (workgroup_id)), (workgroup_id) * ((1u << _GLF_IDENTITY(_GLF_IDENTITY(uint(1u), uint(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (uint(1u))), uint(1u))) >> _GLF_IDENTITY(uint(1u), uint(1u)))), max(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_id, (1u & 1u) * (workgroup_id)), (workgroup_id) * ((1u << _GLF_IDENTITY(_GLF_IDENTITY(uint(1u), uint(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (uint(1u))), uint(1u))) >> _GLF_IDENTITY(uint(1u), uint(1u)))), _GLF_IDENTITY(_GLF_IDENTITY(workgroup_id, (1u & 1u) * (workgroup_id)), (workgroup_id) * ((1u << _GLF_IDENTITY(_GLF_IDENTITY(uint(1u), uint(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (uint(1u))), uint(1u))) >> _GLF_IDENTITY(uint(1u), uint(1u))))))) ^ 0u), uint(uvec3(workgroup_size * _GLF_IDENTITY(workgroup_id, (workgroup_id) * (_GLF_IDENTITY((1u << _GLF_IDENTITY(uint(1u), uint(1u))) >> _GLF_IDENTITY(uint(1u), uint(1u)), ((1u << _GLF_IDENTITY(_GLF_IDENTITY(uint(1u), uint(1u)), (_GLF_IDENTITY(uint(1u), uint(1u))) | 0u)) >> _GLF_IDENTITY(uint(1u), _GLF_IDENTITY(uint(1u), (uint(1u)) | 0u))) - 0u))), 1u, _GLF_IDENTITY(1u, max(1u, 1u))))) : _GLF_FUZZED(uaddCarry(num_workgroup, _GLF_IDENTITY(subgroup_local_id, (true ? subgroup_local_id : _GLF_FUZZED(subgroup_id))), GLF_merged3_0_1_13_1_1_11_2_1_13subgroup_basesubgroup_idsubgroup_size.s))), ((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(workgroup_size * _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_id, (1u & 1u) * (workgroup_id)), (workgroup_id) * ((1u << _GLF_IDENTITY(_GLF_IDENTITY(uint(1u), uint(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (uint(1u))), uint(1u))) >> _GLF_IDENTITY(uint(1u), uint(1u)))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_id, (1u & 1u) * (workgroup_id)), (workgroup_id) * ((1u << _GLF_IDENTITY(_GLF_IDENTITY(uint(1u), uint(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (uint(1u))), uint(1u))) >> _GLF_IDENTITY(uint(1u), uint(1u)))), max(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_id, (1u & 1u) * (workgroup_id)), (workgroup_id) * ((1u << _GLF_IDENTITY(_GLF_IDENTITY(uint(1u), uint(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (uint(1u))), uint(1u))) >> _GLF_IDENTITY(uint(1u), uint(1u)))), _GLF_IDENTITY(_GLF_IDENTITY(workgroup_id, (1u & 1u) * (workgroup_id)), (workgroup_id) * ((1u << _GLF_IDENTITY(_GLF_IDENTITY(uint(1u), uint(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (uint(1u))), uint(1u))) >> _GLF_IDENTITY(uint(1u), uint(1u))))))) ^ 0u), uint(uvec3(workgroup_size * _GLF_IDENTITY(workgroup_id, (workgroup_id) * (_GLF_IDENTITY((1u << _GLF_IDENTITY(uint(1u), uint(1u))) >> _GLF_IDENTITY(uint(1u), uint(1u)), ((1u << _GLF_IDENTITY(_GLF_IDENTITY(uint(1u), uint(1u)), (_GLF_IDENTITY(uint(1u), uint(1u))) | 0u)) >> _GLF_IDENTITY(uint(1u), _GLF_IDENTITY(uint(1u), (uint(1u)) | 0u))) - 0u))), 1u, _GLF_IDENTITY(1u, max(1u, 1u))))) : _GLF_FUZZED(uaddCarry(num_workgroup, _GLF_IDENTITY(subgroup_local_id, (true ? subgroup_local_id : _GLF_FUZZED(subgroup_id))), GLF_merged3_0_1_13_1_1_11_2_1_13subgroup_basesubgroup_idsubgroup_size.s)))) ^ 0u))))), _GLF_IDENTITY(max(workgroup_size * workgroup_id, workgroup_size * workgroup_id), (max(workgroup_size * workgroup_id, workgroup_size * workgroup_id)) / _GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, (1u) ^ 0u)) * 1u))))), ~ (~ (((_GLF_IDENTITY(_GLF_IDENTITY(workgroup_size * _GLF_IDENTITY(_GLF_IDENTITY(workgroup_id, (_GLF_IDENTITY(workgroup_id, max(workgroup_id, workgroup_id))) << 0u), (workgroup_id) * ((_GLF_IDENTITY(1u << _GLF_IDENTITY(uint(1u), uint(1u)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(_GLF_IDENTITY(workgroup_id, (_GLF_IDENTITY(workgroup_id, (workgroup_id) | (workgroup_id))) / 1u)) : 1u << _GLF_IDENTITY(uint(1u), uint(1u))))) >> _GLF_IDENTITY(_GLF_IDENTITY(uint(1u), uint(1u)), max(_GLF_IDENTITY(_GLF_IDENTITY(uint(1u), uint(1u)), ~ (~ (_GLF_IDENTITY(uint(1u), uint(1u))))), _GLF_IDENTITY(_GLF_IDENTITY(uint(1u), uint(1u)), 0u | (_GLF_IDENTITY(uint(1u), uint(1u)))))))), _GLF_IDENTITY((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(workgroup_size * _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_id, (1u & 1u) * (workgroup_id)), (workgroup_id) * ((1u << _GLF_IDENTITY(_GLF_IDENTITY(uint(1u), uint(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (uint(1u))), uint(1u))) >> _GLF_IDENTITY(uint(1u), uint(1u)))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_id, (1u & 1u) * (workgroup_id)), (workgroup_id) * ((1u << _GLF_IDENTITY(_GLF_IDENTITY(uint(1u), uint(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (uint(1u))), uint(1u))) >> _GLF_IDENTITY(uint(1u), uint(1u)))), max(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_id, (1u & 1u) * (workgroup_id)), (workgroup_id) * ((1u << _GLF_IDENTITY(_GLF_IDENTITY(uint(1u), uint(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (uint(1u))), uint(1u))) >> _GLF_IDENTITY(uint(1u), uint(1u)))), _GLF_IDENTITY(_GLF_IDENTITY(workgroup_id, (1u & 1u) * (workgroup_id)), (workgroup_id) * ((1u << _GLF_IDENTITY(_GLF_IDENTITY(uint(1u), uint(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (uint(1u))), uint(1u))) >> _GLF_IDENTITY(uint(1u), uint(1u))))))) ^ 0u), uint(uvec3(workgroup_size * _GLF_IDENTITY(workgroup_id, (workgroup_id) * (_GLF_IDENTITY((1u << _GLF_IDENTITY(uint(1u), uint(1u))) >> _GLF_IDENTITY(uint(1u), uint(1u)), ((1u << _GLF_IDENTITY(_GLF_IDENTITY(uint(1u), uint(1u)), (_GLF_IDENTITY(uint(1u), uint(1u))) | 0u)) >> _GLF_IDENTITY(uint(1u), _GLF_IDENTITY(uint(1u), (uint(1u)) | 0u))) - 0u))), 1u, _GLF_IDENTITY(1u, max(1u, 1u))))) : _GLF_FUZZED(uaddCarry(num_workgroup, _GLF_IDENTITY(subgroup_local_id, (true ? subgroup_local_id : _GLF_FUZZED(subgroup_id))), GLF_merged3_0_1_13_1_1_11_2_1_13subgroup_basesubgroup_idsubgroup_size.s))), ~ (~ (_GLF_IDENTITY((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(workgroup_size * _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_id, (1u & 1u) * (workgroup_id)), (workgroup_id) * ((1u << _GLF_IDENTITY(_GLF_IDENTITY(uint(1u), uint(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (uint(1u))), uint(1u))) >> _GLF_IDENTITY(uint(1u), uint(1u)))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_id, (1u & 1u) * (workgroup_id)), (workgroup_id) * ((1u << _GLF_IDENTITY(_GLF_IDENTITY(uint(1u), uint(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (uint(1u))), uint(1u))) >> _GLF_IDENTITY(uint(1u), uint(1u)))), max(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_id, (1u & 1u) * (workgroup_id)), (workgroup_id) * ((1u << _GLF_IDENTITY(_GLF_IDENTITY(uint(1u), uint(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (uint(1u))), uint(1u))) >> _GLF_IDENTITY(uint(1u), uint(1u)))), _GLF_IDENTITY(_GLF_IDENTITY(workgroup_id, (1u & 1u) * (workgroup_id)), (workgroup_id) * ((1u << _GLF_IDENTITY(_GLF_IDENTITY(uint(1u), uint(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (uint(1u))), uint(1u))) >> _GLF_IDENTITY(uint(1u), uint(1u))))))) ^ 0u), uint(uvec3(workgroup_size * _GLF_IDENTITY(workgroup_id, (workgroup_id) * (_GLF_IDENTITY((1u << _GLF_IDENTITY(uint(1u), uint(1u))) >> _GLF_IDENTITY(uint(1u), uint(1u)), ((1u << _GLF_IDENTITY(_GLF_IDENTITY(uint(1u), uint(1u)), (_GLF_IDENTITY(uint(1u), uint(1u))) | 0u)) >> _GLF_IDENTITY(uint(1u), _GLF_IDENTITY(uint(1u), (uint(1u)) | 0u))) - 0u))), 1u, _GLF_IDENTITY(1u, max(1u, 1u))))) : _GLF_FUZZED(uaddCarry(num_workgroup, _GLF_IDENTITY(subgroup_local_id, (true ? subgroup_local_id : _GLF_FUZZED(subgroup_id))), GLF_merged3_0_1_13_1_1_11_2_1_13subgroup_basesubgroup_idsubgroup_size.s))), ((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(workgroup_size * _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_id, (1u & 1u) * (workgroup_id)), (workgroup_id) * ((1u << _GLF_IDENTITY(_GLF_IDENTITY(uint(1u), uint(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (uint(1u))), uint(1u))) >> _GLF_IDENTITY(uint(1u), uint(1u)))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_id, (1u & 1u) * (workgroup_id)), (workgroup_id) * ((1u << _GLF_IDENTITY(_GLF_IDENTITY(uint(1u), uint(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (uint(1u))), uint(1u))) >> _GLF_IDENTITY(uint(1u), uint(1u)))), max(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_id, (1u & 1u) * (workgroup_id)), (workgroup_id) * ((1u << _GLF_IDENTITY(_GLF_IDENTITY(uint(1u), uint(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (uint(1u))), uint(1u))) >> _GLF_IDENTITY(uint(1u), uint(1u)))), _GLF_IDENTITY(_GLF_IDENTITY(workgroup_id, (1u & 1u) * (workgroup_id)), (workgroup_id) * ((1u << _GLF_IDENTITY(_GLF_IDENTITY(uint(1u), uint(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (uint(1u))), uint(1u))) >> _GLF_IDENTITY(uint(1u), uint(1u))))))) ^ 0u), uint(uvec3(workgroup_size * _GLF_IDENTITY(workgroup_id, (workgroup_id) * (_GLF_IDENTITY((1u << _GLF_IDENTITY(uint(1u), uint(1u))) >> _GLF_IDENTITY(uint(1u), uint(1u)), ((1u << _GLF_IDENTITY(_GLF_IDENTITY(uint(1u), uint(1u)), (_GLF_IDENTITY(uint(1u), uint(1u))) | 0u)) >> _GLF_IDENTITY(uint(1u), _GLF_IDENTITY(uint(1u), (uint(1u)) | 0u))) - 0u))), 1u, _GLF_IDENTITY(1u, max(1u, 1u))))) : _GLF_FUZZED(uaddCarry(num_workgroup, _GLF_IDENTITY(subgroup_local_id, (true ? subgroup_local_id : _GLF_FUZZED(subgroup_id))), GLF_merged3_0_1_13_1_1_11_2_1_13subgroup_basesubgroup_idsubgroup_size.s)))) ^ 0u))))), _GLF_IDENTITY(max(workgroup_size * workgroup_id, workgroup_size * workgroup_id), (max(workgroup_size * workgroup_id, workgroup_size * workgroup_id)) / _GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, (1u) ^ 0u)) * 1u)))))))) | (1u ^ 1u))) + 0u));
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 << _GLF_IDENTITY(int(3), int(3)))); _injected_loop_counter --)
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bvec2(false, true))))))))
      return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x)), mix(float(_GLF_FUZZED(_GLF_IDENTITY(1.1, mix(float(_GLF_FUZZED(_GLF_IDENTITY(-10.54, (-10.54) * 1.0))), float(1.1), bool(true))))), float(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x, 1.0 * (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x)))), _GLF_IDENTITY(float(_GLF_IDENTITY(mat2(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(0.6)), float(injectionSwitch.x), bool(true))))), 0.0, 0.0, 0.0), mat2(1.0) * (mat2(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), 0.0, 0.0, 0.0)))), (float(_GLF_IDENTITY(mat2(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, float(mat2x4(injectionSwitch.x, exp(0.0), 1.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0))))), 0.0, 0.0, _GLF_IDENTITY(0.0, max(_GLF_IDENTITY(0.0, (0.0) * 1.0), _GLF_IDENTITY(0.0, min(0.0, 0.0))))), mat2(1.0) * (mat2(_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x, injectionSwitch.x, injectionSwitch.x)), 0.0, 0.0, 0.0))))) / 1.0)), clamp(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x, 1.0 * (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x)))), _GLF_IDENTITY(float(_GLF_IDENTITY(mat2(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(0.6)), float(injectionSwitch.x), bool(true))))), 0.0, 0.0, 0.0), mat2(1.0) * (mat2(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), 0.0, 0.0, 0.0)))), (float(_GLF_IDENTITY(mat2(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, float(mat2x4(injectionSwitch.x, exp(0.0), 1.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0))))), 0.0, 0.0, _GLF_IDENTITY(0.0, max(_GLF_IDENTITY(0.0, (0.0) * 1.0), _GLF_IDENTITY(0.0, min(0.0, 0.0))))), mat2(1.0) * (mat2(_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x, injectionSwitch.x, injectionSwitch.x)), 0.0, 0.0, 0.0))))) / 1.0)), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x, 1.0 * (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x)))), _GLF_IDENTITY(float(_GLF_IDENTITY(mat2(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(0.6)), float(injectionSwitch.x), bool(true))))), 0.0, 0.0, 0.0), mat2(1.0) * (mat2(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), 0.0, 0.0, 0.0)))), (float(_GLF_IDENTITY(mat2(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, float(mat2x4(injectionSwitch.x, exp(0.0), 1.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0))))), 0.0, 0.0, _GLF_IDENTITY(0.0, max(_GLF_IDENTITY(0.0, (0.0) * 1.0), _GLF_IDENTITY(0.0, min(0.0, 0.0))))), mat2(1.0) * (mat2(_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x, injectionSwitch.x, injectionSwitch.x)), 0.0, 0.0, 0.0))))) / 1.0)), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x, 1.0 * (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x)))), _GLF_IDENTITY(float(_GLF_IDENTITY(mat2(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(0.6)), float(injectionSwitch.x), bool(true))))), 0.0, 0.0, 0.0), mat2(1.0) * (mat2(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), 0.0, 0.0, 0.0)))), (float(_GLF_IDENTITY(mat2(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, float(mat2x4(injectionSwitch.x, exp(0.0), 1.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0))))), 0.0, 0.0, _GLF_IDENTITY(0.0, max(_GLF_IDENTITY(0.0, (0.0) * 1.0), _GLF_IDENTITY(0.0, min(0.0, 0.0))))), mat2(1.0) * (mat2(_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x, injectionSwitch.x, injectionSwitch.x)), 0.0, 0.0, 0.0))))) / 1.0)))), min(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)))).x, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x, 1.0 * (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x)))), _GLF_IDENTITY(float(_GLF_IDENTITY(mat2(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(0.6)), float(injectionSwitch.x), _GLF_IDENTITY(bool(true), bool(bvec4(bool(true), _GLF_IDENTITY(true, false || (true)), false, false))))))), 0.0, 0.0, _GLF_IDENTITY(0.0, float(_GLF_IDENTITY(mat2x3(_GLF_IDENTITY(0.0, min(0.0, 0.0)), tan(0.0), 0.0, cos(0.0), 0.0, 0.0), transpose(transpose(_GLF_IDENTITY(mat2x3(_GLF_IDENTITY(0.0, min(0.0, 0.0)), tan(0.0), 0.0, cos(0.0), 0.0, 0.0), mat3(1.0) * (mat2x3(_GLF_IDENTITY(0.0, min(0.0, 0.0)), tan(0.0), 0.0, cos(0.0), 0.0, 0.0))))))))), mat2(1.0) * (mat2(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), 0.0, 0.0, 0.0)))), (float(_GLF_IDENTITY(mat2(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(_GLF_ONE(1.0, injectionSwitch.y))).x, float(mat2x4(injectionSwitch.x, exp(0.0), 1.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0))))), 0.0, 0.0, _GLF_IDENTITY(_GLF_IDENTITY(0.0, _GLF_IDENTITY(float(_GLF_IDENTITY(mat3x4(0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 0.0, 1.0, 0.0), transpose(transpose(mat3x4(0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 0.0, 1.0, 0.0))))), (float(_GLF_IDENTITY(mat3x4(0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 0.0, 1.0, 0.0), transpose(transpose(mat3x4(0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 0.0, 1.0, 0.0)))))) * _GLF_ONE(1.0, injectionSwitch.y))), max(_GLF_IDENTITY(0.0, (0.0) * 1.0), _GLF_IDENTITY(0.0, min(0.0, 0.0))))), mat2(1.0) * (mat2(_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x, injectionSwitch.x, injectionSwitch.x)), 0.0, 0.0, 0.0))))) / 1.0)), (true ? _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x, 1.0 * (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x)))), _GLF_IDENTITY(float(_GLF_IDENTITY(mat2(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(0.6)), float(injectionSwitch.x), bool(true))))), 0.0, 0.0, 0.0), mat2(1.0) * (_GLF_IDENTITY(mat2(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), 0.0, 0.0, 0.0), transpose(transpose(_GLF_IDENTITY(mat2(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), 0.0, 0.0, 0.0), (true ? mat2(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), 0.0, 0.0, 0.0) : _GLF_FUZZED(mat2(305.641, 63.53, -178.781, 6.0)))))))))), _GLF_IDENTITY((float(_GLF_IDENTITY(mat2(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, float(mat2x4(injectionSwitch.x, exp(0.0), 1.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0))))), 0.0, 0.0, _GLF_IDENTITY(0.0, max(_GLF_IDENTITY(0.0, (0.0) * 1.0), _GLF_IDENTITY(0.0, min(0.0, 0.0))))), mat2(1.0) * (mat2(_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x, injectionSwitch.x, injectionSwitch.x)), 0.0, 0.0, 0.0))))) / 1.0, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? (float(_GLF_IDENTITY(_GLF_IDENTITY(mat2(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + length(0.0)), _GLF_IDENTITY(injectionSwitch.x, float(mat2x4(injectionSwitch.x, exp(0.0), 1.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0))))), 0.0, 0.0, _GLF_IDENTITY(0.0, max(_GLF_IDENTITY(0.0, (0.0) * 1.0), _GLF_IDENTITY(0.0, min(0.0, 0.0))))), (_GLF_IDENTITY(mat2(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + length(0.0)), _GLF_IDENTITY(injectionSwitch.x, float(mat2x4(injectionSwitch.x, exp(0.0), 1.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0))))), 0.0, 0.0, _GLF_IDENTITY(0.0, max(_GLF_IDENTITY(0.0, (0.0) * 1.0), _GLF_IDENTITY(0.0, min(0.0, 0.0))))), (_GLF_IDENTITY(mat2(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + length(0.0)), _GLF_IDENTITY(injectionSwitch.x, float(mat2x4(injectionSwitch.x, exp(0.0), 1.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0))))), 0.0, 0.0, _GLF_IDENTITY(0.0, max(_GLF_IDENTITY(0.0, (0.0) * 1.0), _GLF_IDENTITY(0.0, min(0.0, 0.0))))), (mat2(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + length(0.0)), _GLF_IDENTITY(injectionSwitch.x, float(mat2x4(injectionSwitch.x, exp(0.0), 1.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0))))), 0.0, 0.0, _GLF_IDENTITY(0.0, max(_GLF_IDENTITY(0.0, (0.0) * 1.0), _GLF_IDENTITY(0.0, min(0.0, 0.0)))))) / mat2(1.0, 1.0, 1.0, 1.0))) + mat2(0.0, 0.0, 0.0, 0.0))) - mat2(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))), mat2(1.0) * (mat2(_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x)), 0.0, 0.0, _GLF_IDENTITY(0.0, max(0.0, _GLF_IDENTITY(0.0, float(vec2(0.0, 0.0)))))))))) / 1.0 : _GLF_FUZZED(-894.657))))) : _GLF_FUZZED(-978.847))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x, 1.0 * (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x)))), mix(float(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x, 1.0 * (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x))))), float(_GLF_FUZZED(-328.068)), bool(false))), _GLF_IDENTITY(float(_GLF_IDENTITY(_GLF_IDENTITY(mat2(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(0.6)), float(injectionSwitch.x), bool(true))))), 0.0, 0.0, 0.0), mat2(mat2x4(mat2(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(0.6)), float(injectionSwitch.x), bool(true))))), 0.0, 0.0, 0.0)))), mat2(1.0) * (mat2(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), 0.0, 0.0, 0.0)))), (float(_GLF_IDENTITY(mat2(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, float(mat2x4(injectionSwitch.x, exp(0.0), 1.0, length(vec4(0.0, 0.0, _GLF_IDENTITY(0.0, 1.0 * (_GLF_IDENTITY(0.0, min(0.0, 0.0)))), 0.0)), 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0))))), 0.0, 0.0, _GLF_IDENTITY(0.0, max(_GLF_IDENTITY(0.0, (0.0) * 1.0), _GLF_IDENTITY(0.0, min(0.0, 0.0))))), mat2(1.0) * (mat2(_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x, injectionSwitch.x)), 0.0, 0.0, 0.0))))) / 1.0)), max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch))) / abs(vec2(1.0, 1.0))).x, 1.0 * (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x)))), _GLF_IDENTITY(float(_GLF_IDENTITY(mat2(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(0.6)), float(injectionSwitch.x), bool(true))))), 0.0, 0.0, 0.0), mat2(1.0) * (mat2(_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(93.12), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(16.94)), bvec2(true, false))).x, injectionSwitch.x, injectionSwitch.x)), 0.0, 0.0, 0.0)))), (float(_GLF_IDENTITY(mat2(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, float(mat2x4(injectionSwitch.x, exp(0.0), 1.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, _GLF_IDENTITY(1.0, max(1.0, 1.0))))))), 0.0, 0.0, _GLF_IDENTITY(0.0, max(_GLF_IDENTITY(0.0, (0.0) * 1.0), _GLF_IDENTITY(0.0, min(0.0, 0.0))))), mat2(1.0) * (mat2(_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x, injectionSwitch.x, injectionSwitch.x)), 0.0, 0.0, 0.0))))) / 1.0)), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x, 1.0 * (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x)))), _GLF_IDENTITY(float(_GLF_IDENTITY(mat2(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, mix(_GLF_IDENTITY(float(_GLF_FUZZED(0.6)), max(float(_GLF_FUZZED(0.6)), float(_GLF_FUZZED(0.6)))), float(injectionSwitch.x), bool(true))))), 0.0, 0.0, 0.0), mat2(1.0) * (_GLF_IDENTITY(mat2(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(vec4(-74.57, -7.9, 561.007, 9904.3415).s), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(2.1)), bvec2(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))).x)), 0.0, 0.0, 0.0), (mat2(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(vec4(-74.57, -7.9, 561.007, 9904.3415).s), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(2.1)), bvec2(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))).x)), 0.0, 0.0, 0.0)) - mat2(0.0, 0.0, 0.0, 0.0))))), (float(_GLF_IDENTITY(mat2(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, float(mat2x4(injectionSwitch.x, exp(0.0), 1.0, length(_GLF_IDENTITY(vec4(_GLF_IDENTITY(0.0, mix(float(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(9.4)), bool(false)))), float(_GLF_FUZZED(5261.0785)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), 0.0, 0.0, 0.0), (vec4(_GLF_IDENTITY(0.0, mix(float(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(9.4)), bool(false)))), float(_GLF_FUZZED(5261.0785)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), 0.0, 0.0, 0.0)) - vec4(0.0, 0.0, 0.0, 0.0))), 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0))))), 0.0, 0.0, _GLF_IDENTITY(0.0, max(_GLF_IDENTITY(0.0, (0.0) * 1.0), _GLF_IDENTITY(0.0, min(0.0, 0.0))))), mat2(1.0) * (mat2(_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x, injectionSwitch.x, injectionSwitch.x)), 0.0, 0.0, 0.0))))) / 1.0))))))), bool(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, 1.0 * _GLF_IDENTITY((injectionSwitch.y), (false ? _GLF_FUZZED(determinant(mat3(mat2x4(54.96, 56.66, 7.0, -0.6, -97.55, 2464.0918, -6.5, 186.873)))) : (injectionSwitch.y)))), float(mat3x2(injectionSwitch.y, sqrt(0.0), 0.0, abs(1.0), _GLF_IDENTITY(1.0, min(1.0, 1.0)), 0.0))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y, (injectionSwitch.y) / exp(0.0))))))))) > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
     do
      {
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(false))
        return;
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         do
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
           return;
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(vec3(injectionSwitch, 1.0)), (vec2(vec3(injectionSwitch, 1.0))) + vec2(0.0, 0.0))).y, ! (! (injectionSwitch.x > injectionSwitch.y)))))));
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))
      return;
    }
   if(_GLF_DEAD(false))
    return;
   return;
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(vec4(injectionSwitch, 1.0, _GLF_IDENTITY(exp(0.0), min(exp(0.0), exp(0.0)))))).x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, ! (! (false)))))), bool(bool(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, ! (! (false))))))))), false, false))), (injectionSwitch.x > injectionSwitch.y)), ! (! _GLF_IDENTITY((_GLF_FALSE(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false)))))))), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)), injectionSwitch)).x > injectionSwitch.y) && true)))), ! _GLF_IDENTITY((! (_GLF_IDENTITY((_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), false || (! (true))))), true && (_GLF_IDENTITY(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), false || (! (true))))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), false || (! (true))))), (_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), false || (! (true)))))) || false)))))) && (_GLF_IDENTITY(false, (false) || false))), (_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(-738.414)), vec2(_GLF_FUZZED(389.533), (injectionSwitch)[1]), bvec2(false, true))).x > injectionSwitch.y))), bool(_GLF_IDENTITY(bvec2((_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), (_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(false, false || (false))))))) && true), (injectionSwitch.x > injectionSwitch.y))), true), bvec2(bvec2(bvec2((_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y) && true)) && true)))), true)))))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || ((! (_GLF_IDENTITY((_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), false || (! (true))))), true && (_GLF_IDENTITY(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), false || (! (true))))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), false || (! (true))))), (_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), false || (! (true)))))) || false)))))) && (_GLF_IDENTITY(false, (false) || false))), (_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(-738.414)), vec2(_GLF_FUZZED(389.533), (injectionSwitch)[1]), bvec2(false, true))).x > injectionSwitch.y))), bool(_GLF_IDENTITY(bvec2((_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), (_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(false, false || (false))))))) && true), (injectionSwitch.x > injectionSwitch.y))), true), bvec2(bvec2(bvec2((_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y) && true)) && true)))), true)))))))))))))))
      {
       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), bool(bvec2(_GLF_WRAPPED_IF_TRUE(true), false))))
        {
         if(_GLF_DEAD(false))
          break;
         return;
         if(_GLF_DEAD(false))
          break;
        }
       else
        {
        }
      }
     if(_GLF_DEAD(false))
      continue;
    }
   while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), bool(bool(_GLF_WRAPPED_LOOP(false))))))));
  }
 uint subgroup_base = _GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_13subgroup_basesubgroup_idsubgroup_size.y * GLF_merged3_0_1_13_1_1_11_2_1_13subgroup_basesubgroup_idsubgroup_size.z, (GLF_merged3_0_1_13_1_1_11_2_1_13subgroup_basesubgroup_idsubgroup_size.y * GLF_merged3_0_1_13_1_1_11_2_1_13subgroup_basesubgroup_idsubgroup_size.z) / 1u);
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(2.9, -2528.3004)) : _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)))).y))))
  return;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
     GLF_merged3_0_1_13_1_1_11_2_1_13subgroup_basesubgroup_idsubgroup_size.x = subgroup_base;
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
  }
 uint virtual_gid = workgroup_base + GLF_merged3_0_1_13_1_1_11_2_1_13subgroup_basesubgroup_idsubgroup_size.x + subgroup_local_id;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        return;
       do
        {
         return;
        }
       while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bool(false)))), true && (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bool(false)))), false || (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bool(false)))))))));
      }
     else
      {
      }
    }
  }
 for(int _injected_loop_counter = _GLF_IDENTITY(1, (1) | (1)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     do
      {
       do
        {
         return;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           return;
          }
         else
          {
          }
        }
       return;
      }
     if(_GLF_DEAD(false))
      return;
     continue;
    }
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 do
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    break;
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
    }
   for(int _injected_loop_counter = _GLF_IDENTITY(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, min(1, _GLF_IDENTITY(1, ~ (_GLF_IDENTITY(~ (1), int(_GLF_IDENTITY(ivec3(~ (1), 1, 0), max(ivec3(~ (1), 1, 0), ivec3(~ (1), 1, 0)))))))))) - 0), (_GLF_IDENTITY(0 | _GLF_IDENTITY(0, ~ (_GLF_IDENTITY(~ (0), int(ivec4(~ (0), 0, 0, 0))))), clamp(0 | 0, 0 | 0, 0 | 0))) + (1)); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != 0, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_injected_loop_counter, clamp(_GLF_IDENTITY(_injected_loop_counter, 0 ^ (_injected_loop_counter)), _injected_loop_counter, _GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) | (_injected_loop_counter)))) != 0), bool(bvec2(! (_injected_loop_counter != 0), false)))))); _injected_loop_counter --)
    {
     atomicStore(write_val, uint(virtual_gid), 4, 64, 4);
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    continue;
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   do
    {
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-8.2)), float(injectionSwitch.x), bool(true))) > injectionSwitch.y))))
      continue;
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true, false))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec2(bvec4(bvec2(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true, false))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false, true)))), ! (! (bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true, false))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec2(bvec4(bvec2(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true, false))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false, true))))))))))
      break;
     for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(2), int(2))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        return;
      }
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)))) || (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))) || false)))))))
      continue;
     if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY((_GLF_DEAD(false)) || false, true && _GLF_IDENTITY(((_GLF_DEAD(false)) || false), (((_GLF_DEAD(false)) || false)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
         return;
        }
       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), bool(bvec3(_GLF_WRAPPED_IF_TRUE(true), true, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, bool(bvec4(_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (! (injectionSwitch.x < injectionSwitch.y))), true, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))))
        {
         if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))
          break;
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * _GLF_IDENTITY(vec2(1.0, 1.0), clamp(_GLF_IDENTITY(vec2(1.0, 1.0), vec2(1.0, 1.0) * (vec2(1.0, 1.0))), _GLF_IDENTITY(vec2(1.0, 1.0), mat2(1.0) * (vec2(1.0, 1.0))), vec2(1.0, 1.0)))).y))))
            continue;
           if(_GLF_DEAD(false))
            break;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).y))))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                continue;
               break;
              }
             if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false, false)))) || false)), (_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false, false)))) || false), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false, false)))) || false)))))) && true))
              return;
             if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)))
              continue;
             if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (! (bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))
              {
               if(_GLF_DEAD(false))
                continue;
               if(_GLF_IDENTITY(_GLF_DEAD(false), false || _GLF_IDENTITY((_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), true && (_GLF_IDENTITY(false, (false) && true))))), bool(bool(bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), ! (! (_GLF_IDENTITY(false, (false) && true)))))), true)))) || false))))))))), bool(bool((_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), true && (_GLF_IDENTITY(false, (false) && true))))), bool(bool(bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), ! (! (_GLF_IDENTITY(false, (false) && true)))))), true)))) || false))))))))))))))
                {
                 if(_GLF_DEAD(false))
                  break;
                 break;
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                continue;
               if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
                continue;
               if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
                    continue;
                   break;
                  }
                 continue;
                }
               return;
              }
             if(_GLF_DEAD(false))
              break;
            }
           else
            {
             if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bool(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(bool(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), ! (! (_GLF_IDENTITY(bool(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), false || (bool(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))), bool(bool(! (_GLF_IDENTITY(bool(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), ! (! (_GLF_IDENTITY(bool(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), false || (bool(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))))))))))
              {
               if(_GLF_DEAD(false))
                break;
               break;
              }
             return;
             if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, true), _GLF_IDENTITY(bvec2(bvec4(bvec2(false, true), false, false)), bvec2(bvec4(bvec2(bvec4(bvec2(false, true), false, false)), true, true))))))))
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 return;
                }
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  continue;
                 continue;
                }
              }
            }
          }
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
         break;
        }
       for(int _injected_loop_counter = _GLF_IDENTITY(_GLF_IDENTITY(0, (0) * 1), int(_GLF_ONE(1.0, injectionSwitch.y)) * (_GLF_IDENTITY(0, _GLF_IDENTITY((0) * 1, int(ivec4((0) * 1, 0, 1, 0)))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
           if(_GLF_DEAD(false))
            return;
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), mix(vec2(_GLF_FUZZED(990.147), _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(min(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(4.6)), vec2(_GLF_FUZZED(5.7), (injectionSwitch)[1]), bvec2(false, true)))) + vec2(0.0, 0.0)), injectionSwitch), (false ? _GLF_FUZZED(sin(vec2(-5752.2468, 7453.6348))) : _GLF_IDENTITY(min(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(4.6)), vec2(_GLF_FUZZED(5.7), (injectionSwitch)[1]), bvec2(false, true)))) + vec2(0.0, 0.0)), injectionSwitch), mix(vec2((min(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(4.6)), vec2(_GLF_FUZZED(5.7), (injectionSwitch)[1]), bvec2(false, true)))) + vec2(0.0, 0.0)), injectionSwitch))[0], _GLF_FUZZED(6.8)), vec2(_GLF_FUZZED(vec4(-520.958, -9.2, -74.29, 0.9).q), (min(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(4.6)), vec2(_GLF_FUZZED(5.7), (injectionSwitch)[1]), bvec2(false, true)))) + vec2(0.0, 0.0)), injectionSwitch))[1]), bvec2(false, true)))))))[1], _GLF_IDENTITY(min((injectionSwitch)[1], (injectionSwitch)[1]), min(min((injectionSwitch)[1], (injectionSwitch)[1]), min((injectionSwitch)[1], (injectionSwitch)[1]))))), _GLF_IDENTITY(vec2((injectionSwitch)[0], _GLF_FUZZED((1873.7299))), max(vec2((injectionSwitch)[0], _GLF_FUZZED((1873.7299))), vec2((injectionSwitch)[0], _GLF_FUZZED((1873.7299))))), bvec2(true, _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)))))).y))))
            return;
           return;
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
        }
       if(_GLF_DEAD(false))
        return;
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bvec3(false, false, true)))));
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec4(bvec2(false, true), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), ! (! (bool(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec4(bvec2(false, true), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))), (_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, false || (false)), false)))) || false), (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    return;
   return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    return;
  }
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     return;
    }
  }
 if(_GLF_DEAD(false))
  return;
 uint read_val = _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(atomicLoad(write_val, 4, 64, 2), max(atomicLoad(write_val, 4, 64, 2), atomicLoad(write_val, 4, 64, 2))), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(atomicLoad(write_val, 4, 64, 2), max(atomicLoad(write_val, 4, 64, 2), atomicLoad(write_val, 4, 64, 2))), (_GLF_IDENTITY(atomicLoad(write_val, 4, 64, 2), max(atomicLoad(write_val, 4, 64, 2), atomicLoad(write_val, 4, 64, 2)))) | (_GLF_IDENTITY(atomicLoad(write_val, 4, 64, 2), max(atomicLoad(write_val, 4, 64, 2), atomicLoad(write_val, 4, 64, 2)))))))), max(_GLF_IDENTITY(_GLF_IDENTITY(atomicLoad(write_val, 4, 64, 2), max(atomicLoad(write_val, 4, 64, 2), atomicLoad(write_val, 4, 64, 2))), _GLF_IDENTITY(uint(uint(_GLF_IDENTITY(atomicLoad(write_val, 4, 64, 2), max(atomicLoad(write_val, 4, 64, 2), atomicLoad(write_val, 4, 64, 2))))), max(uint(uint(_GLF_IDENTITY(atomicLoad(write_val, 4, 64, 2), max(atomicLoad(write_val, 4, 64, 2), atomicLoad(write_val, 4, 64, 2))))), uint(uint(_GLF_IDENTITY(atomicLoad(write_val, 4, 64, 2), max(atomicLoad(write_val, 4, 64, 2), atomicLoad(_GLF_IDENTITY(write_val, 0u ^ (write_val)), 4, 64, 2)))))))), _GLF_IDENTITY(atomicLoad(write_val, 4, 64, 2), max(atomicLoad(write_val, 4, 64, 2), atomicLoad(write_val, 4, 64, 2)))));
 _GLF_IDENTITY(buf[virtual_gid] = uint(subgroupAllEqual(read_val)), _GLF_IDENTITY((_GLF_IDENTITY(false, _GLF_IDENTITY(false, (false) || false) || (_GLF_IDENTITY(false, ! (! (false))))) ? _GLF_FUZZED((workgroup_id ++)) : _GLF_IDENTITY(buf[virtual_gid] = uint(subgroupAllEqual(read_val)), (buf[virtual_gid] = uint(subgroupAllEqual(read_val))) / 1u)), (true ? _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(false, (false) || false) || (_GLF_IDENTITY(false, ! (! (false))))) ? _GLF_FUZZED((workgroup_id ++)) : _GLF_IDENTITY(buf[virtual_gid] = uint(subgroupAllEqual(read_val)), (buf[virtual_gid] = uint(subgroupAllEqual(read_val))) / 1u), 1u * (_GLF_IDENTITY(false, _GLF_IDENTITY(false, (false) || false) || (_GLF_IDENTITY(false, ! (! (false))))) ? _GLF_FUZZED((workgroup_id ++)) : _GLF_IDENTITY(buf[virtual_gid] = uint(subgroupAllEqual(read_val)), (buf[virtual_gid] = uint(subgroupAllEqual(read_val))) / 1u)))), ((_GLF_IDENTITY(false, _GLF_IDENTITY(false, _GLF_IDENTITY((false) || false, ! (_GLF_IDENTITY(! ((false) || false), bool(bool(! ((false) || false))))))) || (_GLF_IDENTITY(false, ! (! (false))))) ? _GLF_FUZZED((workgroup_id ++)) : _GLF_IDENTITY(buf[virtual_gid] = uint(subgroupAllEqual(read_val)), (buf[virtual_gid] = uint(subgroupAllEqual(read_val))) / 1u))) / 1u) : _GLF_FUZZED(subgroup_id))));
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, _GLF_IDENTITY(~ (~ (0)), _GLF_IDENTITY(0 ^ (~ (~ (0))), clamp(0 ^ (~ (~ (0))), 0 ^ (~ (~ (0))), 0 ^ (~ (~ (0)))))))); _GLF_IDENTITY(_injected_loop_counter --, (_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter --, (_GLF_IDENTITY(_injected_loop_counter --, 1 * (_injected_loop_counter --))) ^ 0), (_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter --, (_GLF_IDENTITY(_injected_loop_counter --, 1 * _GLF_IDENTITY((_injected_loop_counter --), (true ? (_injected_loop_counter --) : _GLF_FUZZED(_injected_loop_counter))))) ^ 0), (_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter --, _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(_injected_loop_counter --, 1 * (_injected_loop_counter --))) ^ 0, 1 * (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(_injected_loop_counter --, 1 * (_injected_loop_counter --))) ^ 0, int(_GLF_ONE(1.0, injectionSwitch.y)) * ((_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter --, 1 * (_injected_loop_counter --)), (_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter --, 1 * (_injected_loop_counter --)), (true ? _GLF_IDENTITY(_injected_loop_counter --, 1 * (_injected_loop_counter --)) : _GLF_FUZZED(_injected_loop_counter)))) | 0)) ^ 0)), (_GLF_IDENTITY((_GLF_IDENTITY(_injected_loop_counter --, 1 * (_injected_loop_counter --))), (true ? (_GLF_IDENTITY(_injected_loop_counter --, 1 * (_injected_loop_counter --))) : _GLF_FUZZED(ivec2(-92261, -77835)[0]))) ^ 0) - 0))), (_GLF_IDENTITY((_GLF_IDENTITY(_injected_loop_counter --, 1 * (_injected_loop_counter --))) ^ 0, 1 * (_GLF_IDENTITY((_GLF_IDENTITY(_injected_loop_counter --, 1 * (_injected_loop_counter --))) ^ 0, ((_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) ^ 0), 1 * (_injected_loop_counter --))) ^ 0) - 0)))) >> 0)), _GLF_IDENTITY(_GLF_IDENTITY(0 ^ (_GLF_IDENTITY(_injected_loop_counter --, (_GLF_IDENTITY(_injected_loop_counter --, 1 * (_injected_loop_counter --))) ^ 0)), (0 ^ (_GLF_IDENTITY(_injected_loop_counter --, (_GLF_IDENTITY(_injected_loop_counter --, 1 * (_injected_loop_counter --))) ^ 0))) * 1), 0 | (0 ^ (_GLF_IDENTITY(_injected_loop_counter --, (_GLF_IDENTITY(_injected_loop_counter --, 1 * (_injected_loop_counter --))) ^ 0)))))) ^ _GLF_IDENTITY(0, (_GLF_IDENTITY(0, ~ (~ (0)))) / 1))) / 1)) | 0))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(vec3(injectionSwitch, 1.0))), mix(vec2(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, vec2(vec3(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(intBitsToFloat(ivec2(-13679, -13629))) : injectionSwitch)), _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0))))))[0], (false ? _GLF_IDENTITY(_GLF_FUZZED(-6.2), mix(float(_GLF_FUZZED(-6.2)), float(_GLF_FUZZED(52.70)), bool(false))) : _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, vec2(vec3(injectionSwitch, 1.0))))[0], _GLF_IDENTITY(float(mat4x2((_GLF_IDENTITY(injectionSwitch, vec2(vec3(injectionSwitch, 1.0))))[0], 0.0, 1.0, 1.0, 0.0, cos(0.0), abs(0.0), 1.0)), _GLF_IDENTITY(mix(float(float(mat4x2((_GLF_IDENTITY(injectionSwitch, vec2(vec3(injectionSwitch, 1.0))))[0], 0.0, 1.0, 1.0, 0.0, cos(0.0), abs(0.0), 1.0))), float(_GLF_FUZZED(-8.9)), bool(false)), max(_GLF_IDENTITY(mix(float(float(mat4x2((_GLF_IDENTITY(injectionSwitch, vec2(vec3(injectionSwitch, 1.0))))[0], 0.0, 1.0, 1.0, 0.0, cos(0.0), abs(0.0), 1.0))), float(_GLF_FUZZED(-8.9)), bool(false)), max(mix(float(float(mat4x2((_GLF_IDENTITY(injectionSwitch, vec2(vec3(injectionSwitch, 1.0))))[0], 0.0, 1.0, 1.0, 0.0, cos(0.0), abs(0.0), 1.0))), float(_GLF_FUZZED(-8.9)), bool(false)), mix(float(float(mat4x2((_GLF_IDENTITY(injectionSwitch, vec2(vec3(injectionSwitch, 1.0))))[0], 0.0, 1.0, 1.0, 0.0, cos(0.0), abs(0.0), 1.0))), float(_GLF_FUZZED(-8.9)), bool(false)))), mix(float(float(mat4x2((_GLF_IDENTITY(injectionSwitch, vec2(vec3(injectionSwitch, 1.0))))[0], 0.0, 1.0, 1.0, 0.0, cos(0.0), abs(0.0), 1.0))), float(_GLF_FUZZED(-8.9)), bool(false)))))))), _GLF_FUZZED(-40.59)), vec2(_GLF_FUZZED(7925.4803), (_GLF_IDENTITY(injectionSwitch, vec2(vec3(injectionSwitch, 1.0))))[1]), bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))).y))), bool(_GLF_IDENTITY(bvec3(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) > injectionSwitch.y))), bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(639.798), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(482.798)), bvec2(true, false))).y))), bvec3(bvec3(bvec3(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true), true, true, true)), (_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))), ((injectionSwitch.x > injectionSwitch.y)) && true), true, true, true)), true && (bool(bvec4(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))) && true), true, true, true))))) || false)))), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true), true, true, true)), (_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))), ((injectionSwitch.x > injectionSwitch.y)) && true), true, true, true)), true && (bool(bvec4(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))) && true), true, true, true))))) || false)))), bool(bvec2(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true), true, true, true)), (_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))), ((injectionSwitch.x > injectionSwitch.y)) && true), true, true, true)), true && (bool(bvec4(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))) && true), true, true, true))))) || false)))), false))), false)), (bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true), true, true, true)), (_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))), ((injectionSwitch.x > injectionSwitch.y)) && true), true, true, true)), true && (bool(bvec4(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))) && true), true, true, true))))) || false)))), bool(bvec2(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true), true, true, true)), (_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))), ((injectionSwitch.x > injectionSwitch.y)) && true), true, true, true)), true && (bool(bvec4(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))) && true), true, true, true))))) || false)))), false))), false))) || false)), true, _GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)), abs(vec2(0.0, 0.0)) + (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)), clamp(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)), _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)), (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0))) - vec2(0.0, 0.0)))))).x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], (injectionSwitch[1]) - 0.0))).y)))))), false))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      break;
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0) > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        break;
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         return;
         if(_GLF_DEAD(false))
          continue;
        }
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
        break;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))))
      {
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       continue;
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        break;
       return;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)))).x > injectionSwitch.y), ! (! ((_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (false ? _GLF_IDENTITY(_GLF_FUZZED(injectionSwitch), _GLF_IDENTITY(vec2(vec2(_GLF_FUZZED(injectionSwitch))), max(vec2(vec2(_GLF_FUZZED(injectionSwitch))), vec2(vec2(_GLF_FUZZED(injectionSwitch)))))) : injectionSwitch)))).x > injectionSwitch.y)))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)))).x > injectionSwitch.y), ! _GLF_IDENTITY((_GLF_IDENTITY(! ((_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (false ? _GLF_IDENTITY(_GLF_FUZZED(injectionSwitch), _GLF_IDENTITY(vec2(vec2(_GLF_FUZZED(injectionSwitch))), max(vec2(vec2(_GLF_FUZZED(injectionSwitch))), vec2(vec2(_GLF_FUZZED(injectionSwitch)))))) : injectionSwitch)))).x > injectionSwitch.y)), false || (! ((_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (false ? _GLF_IDENTITY(_GLF_FUZZED(injectionSwitch), _GLF_IDENTITY(vec2(vec2(_GLF_FUZZED(injectionSwitch))), max(vec2(vec2(_GLF_FUZZED(injectionSwitch))), vec2(vec2(_GLF_FUZZED(injectionSwitch)))))) : injectionSwitch)))).x > injectionSwitch.y))))), ((! ((_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (false ? _GLF_IDENTITY(_GLF_FUZZED(injectionSwitch), _GLF_IDENTITY(vec2(vec2(_GLF_FUZZED(injectionSwitch))), max(vec2(vec2(_GLF_FUZZED(injectionSwitch))), vec2(vec2(_GLF_FUZZED(injectionSwitch)))))) : injectionSwitch)))).x > injectionSwitch.y)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))
      {
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-774.245)), float(injectionSwitch.y), bool(true))), injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y)), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), injectionSwitch, injectionSwitch)).y, (_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), injectionSwitch, injectionSwitch)).y) - 0.0), min(_GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-774.245)), float(injectionSwitch.y), bool(true))), injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y))) / 1.0)))))
        {
        }
       else
        {
         return;
        }
      }
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), false, true, true))))
      return;
     return;
    }
   if(_GLF_DEAD(false))
    continue;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    break;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     do
      {
       return;
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_DEAD(false))
    break;
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 1
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
