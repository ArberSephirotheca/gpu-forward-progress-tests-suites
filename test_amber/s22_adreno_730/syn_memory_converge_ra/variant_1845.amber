#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer WriteVal {
 uint write_val;
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 do
  {
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)))), (_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (injectionSwitch.x > injectionSwitch.y)))) && true), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), (! (injectionSwitch.x > injectionSwitch.y)) && true)))))))))))
    {
     do
      {
       if(_GLF_DEAD(false))
        break;
       return;
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    break;
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  return;
 do
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), bool(bvec4(_GLF_WRAPPED_IF_TRUE(true), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))))
      {
       return;
      }
     else
      {
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))));
 uint subgroup_local_id = gl_SubgroupInvocationID;
 for(int _injected_loop_counter = int(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), float(vec2(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), clamp(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y))), exp(0.0))))); _GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))), bool(bvec3(_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(_GLF_IDENTITY(0.0, max(_GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, (0.0) * 1.0), 0.0)), 0.0)), injectionSwitch.x))), true, false))), (_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x)))) && true); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    continue;
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true))
    {
     do
      {
       return;
       for(int _injected_loop_counter = int(_GLF_ZERO(_GLF_IDENTITY(0.0, float(mat4x3(0.0, 1.0, 1.0, 1.0, abs(1.0), 0.0, 1.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, 0.0, 0.0))), _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, true && (injectionSwitch.x < injectionSwitch.y)))) ? _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) : _GLF_FUZZED(-0.3))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(4), clamp(int(4), int(4), _GLF_IDENTITY(int(4), clamp(_GLF_IDENTITY(int(_GLF_IDENTITY(4, 0 + (4))), (int(4)) << 0), int(4), int(4))))), _GLF_IDENTITY(int(4), ~ (~ (int(4))))))); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
         if(_GLF_DEAD(false))
          return;
        }
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
        break;
       if(_GLF_DEAD(false))
        break;
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! (_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-2.7) : injectionSwitch.y)), _GLF_IDENTITY(injectionSwitch.y, 1.0 * (_GLF_IDENTITY(injectionSwitch.y, 0.0 + (injectionSwitch.y))))))), bool(bvec4((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(false, (false) && _GLF_IDENTITY(true, true && (true))), false, false)))))))));
     for(int _injected_loop_counter = ((((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), min(int(0), int(0))))) << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), int(ivec3(int(3), 0, 1))))); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > (0 << _GLF_IDENTITY(int(1), int(1)))), false || (_GLF_WRAPPED_LOOP(_injected_loop_counter > (0 << _GLF_IDENTITY(int(1), int(1)))))); _injected_loop_counter --)
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))
        return;
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        continue;
       continue;
      }
    }
  }
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY((_GLF_DEAD(false)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((_GLF_DEAD(false)), ((_GLF_DEAD(false))) || false)), bool(bool(_GLF_IDENTITY(! (_GLF_IDENTITY((_GLF_DEAD(false)), ((_GLF_DEAD(false))) || false)), bool(bvec2(! (_GLF_IDENTITY((_GLF_DEAD(false)), ((_GLF_DEAD(false))) || false)), false)))))))) || _GLF_IDENTITY(false, false || (false))))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       return;
       if(_GLF_DEAD(false))
        continue;
      }
    }
  }
 if(_GLF_DEAD(false))
  return;
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        break;
       return;
      }
     else
      {
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(false ? _GLF_FUZZED(clamp(vec2(-1.5, 0.3), injectionSwitch, injectionSwitch)) : _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)), (false ? _GLF_FUZZED(vec2(7.6, 32.49)) : _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)), (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch))) * mat2(1.0)))), mix(vec2(_GLF_FUZZED(602.641), _GLF_IDENTITY(_GLF_FUZZED(-5672.9678), float(mat2x3(_GLF_IDENTITY(_GLF_FUZZED(-5672.9678), max(_GLF_IDENTITY(_GLF_FUZZED(-5672.9678), clamp(_GLF_FUZZED(-5672.9678), _GLF_FUZZED(-5672.9678), _GLF_FUZZED(-5672.9678))), _GLF_FUZZED(-5672.9678))), 0.0, determinant(mat2(0.0, 1.0, 0.0, 0.0)), 0.0, 0.0, length(tan(vec3(0.0, 0.0, 0.0))))))), vec2((false ? _GLF_FUZZED(clamp(vec2(-1.5, 0.3), injectionSwitch, injectionSwitch)) : _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)))[0], (false ? _GLF_FUZZED(clamp(vec2(-1.5, 0.3), injectionSwitch, injectionSwitch)) : _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), injectionSwitch)), _GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0))))) : injectionSwitch)))[1]), bvec2(true, true))))).x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0)), float(_GLF_FUZZED((+ 99.62))), bool(false)))))));
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < _GLF_IDENTITY(1, (1) / (1 ^ 0)), true && (_GLF_IDENTITY(_injected_loop_counter < _GLF_IDENTITY(1, (1) / (1 ^ 0)), ! (! (_injected_loop_counter < _GLF_IDENTITY(1, (1) / (1 ^ 0)))))))); _injected_loop_counter ++)
    {
     do
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         return;
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) && true)));
    }
   if(_GLF_DEAD(false))
    return;
   for(int _injected_loop_counter = ((0 & 35586) << _GLF_IDENTITY(int(6), int(6))); _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), max(_GLF_IDENTITY(int(4), int(4)), _GLF_IDENTITY(int(4), int(4))))) >> _GLF_IDENTITY(int(4), int(4)))); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      break;
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y))))))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))), false || (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))), (_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)))) || false)))))
          {
           do
            {
             return;
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
        {
         return;
        }
      }
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))))
    return;
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     do
      {
       do
        {
         do
          {
           if(_GLF_DEAD(false))
            break;
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              return;
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_DEAD(false))
                continue;
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 do
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    return;
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        continue;
                       return;
                      }
                    }
                   else
                    {
                    }
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                 return;
                 if(_GLF_DEAD(false))
                  return;
                }
              }
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(false, true, false), bvec3(bvec4(bvec3(false, true, false), true)))), true && (bool(bvec3(false, true, false))))))))));
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   else
    {
    }
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 | 0)); _injected_loop_counter ++)
    {
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, true)))))
        return;
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), _GLF_IDENTITY(! (! (false)), bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(! (! (false)), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(! (_GLF_IDENTITY(! (false), ! (_GLF_IDENTITY(! (! (false)), bool(bvec3(! (! (false)), false, false)))))), (! (! _GLF_IDENTITY((false), (_GLF_IDENTITY((false), (_GLF_IDENTITY((false), bool(bool((false))))) || false)) || _GLF_IDENTITY(false, ! (! (false)))))) && true), _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(-7.4)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), false, true)), false || (bool(bvec4(_GLF_IDENTITY(! (_GLF_IDENTITY(! (false), ! (_GLF_IDENTITY(! (! (false)), bool(bvec3(! (! (false)), false, false)))))), (! (! _GLF_IDENTITY((false), (_GLF_IDENTITY((false), (_GLF_IDENTITY((false), bool(bool((false))))) || false)) || _GLF_IDENTITY(false, ! (! (false)))))) && true), _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(-7.4)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), false, true))))), _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))))))), true), bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(! (! (false)), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(! (_GLF_IDENTITY(! (false), ! (_GLF_IDENTITY(! (! (false)), bool(bvec3(! (! (false)), false, false)))))), (! (! _GLF_IDENTITY((false), (_GLF_IDENTITY((false), (_GLF_IDENTITY((false), bool(bool((false))))) || false)) || _GLF_IDENTITY(false, ! (! (false)))))) && true), _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(-7.4)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), false, true)), false || (bool(bvec4(_GLF_IDENTITY(! (_GLF_IDENTITY(! (false), ! (_GLF_IDENTITY(! (! (false)), bool(bvec3(! (! (false)), false, false)))))), (! (! _GLF_IDENTITY((false), (_GLF_IDENTITY((false), (_GLF_IDENTITY((false), bool(bool((false))))) || false)) || _GLF_IDENTITY(false, ! (! (false)))))) && true), _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(-7.4)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), false, true))))), _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))))))), true), _GLF_IDENTITY(bvec3(bvec4(bvec3(_GLF_IDENTITY(! (! (false)), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(! (_GLF_IDENTITY(! (false), ! (_GLF_IDENTITY(! (! (false)), bool(bvec3(! (! (false)), false, false)))))), (! (! _GLF_IDENTITY((false), (_GLF_IDENTITY((false), (_GLF_IDENTITY((false), bool(bool((false))))) || false)) || _GLF_IDENTITY(false, ! (! (false)))))) && true), _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(-7.4)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), false, true)), false || (bool(bvec4(_GLF_IDENTITY(! (_GLF_IDENTITY(! (false), ! (_GLF_IDENTITY(! (! (false)), bool(bvec3(! (! (false)), false, false)))))), (! (! _GLF_IDENTITY((false), (_GLF_IDENTITY((false), (_GLF_IDENTITY((false), bool(bool((false))))) || false)) || _GLF_IDENTITY(false, ! (! (false)))))) && true), _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(-7.4)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), false, true))))), _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))))))), true), true)), bvec3(bvec4(bvec3(bvec4(bvec3(_GLF_IDENTITY(! (! (false)), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(! (_GLF_IDENTITY(! (false), ! (_GLF_IDENTITY(! (! (false)), bool(bvec3(! (! (false)), false, false)))))), (! (! _GLF_IDENTITY((false), (_GLF_IDENTITY((false), (_GLF_IDENTITY((false), bool(bool((false))))) || false)) || _GLF_IDENTITY(false, ! (! (false)))))) && true), _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(-7.4)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), false, true)), false || (bool(bvec4(_GLF_IDENTITY(! (_GLF_IDENTITY(! (false), ! (_GLF_IDENTITY(! (! (false)), bool(bvec3(! (! (false)), false, false)))))), (! (! _GLF_IDENTITY((false), (_GLF_IDENTITY((false), (_GLF_IDENTITY((false), bool(bool((false))))) || false)) || _GLF_IDENTITY(false, ! (! (false)))))) && true), _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(-7.4)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), false, true))))), _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))))))), true), true)), false))))), bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(! (! (false)), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(! (_GLF_IDENTITY(! (false), ! (_GLF_IDENTITY(! (! (false)), bool(bvec3(! (! (false)), false, false)))))), (! (! _GLF_IDENTITY((false), (_GLF_IDENTITY((false), (_GLF_IDENTITY((false), bool(bool((false))))) || false)) || _GLF_IDENTITY(false, ! (! (false)))))) && true), _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(-7.4)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), false, true)), false || (bool(bvec4(_GLF_IDENTITY(! (_GLF_IDENTITY(! (false), ! (_GLF_IDENTITY(! (! (false)), bool(bvec3(! (! (false)), false, false)))))), (! (! _GLF_IDENTITY((false), (_GLF_IDENTITY((false), (_GLF_IDENTITY((false), bool(bool((false))))) || false)) || _GLF_IDENTITY(false, ! (! (false)))))) && true), _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(-7.4)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), false, true))))), _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))))))), true), _GLF_IDENTITY(bvec3(bvec4(bvec3(_GLF_IDENTITY(! (! (false)), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(! (_GLF_IDENTITY(! (false), ! (_GLF_IDENTITY(! (! (false)), bool(bvec3(! (! (false)), false, false)))))), (! (! _GLF_IDENTITY((false), (_GLF_IDENTITY((false), (_GLF_IDENTITY((false), bool(bool((false))))) || false)) || _GLF_IDENTITY(false, ! (! (false)))))) && true), _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(-7.4)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), false, true)), false || (bool(bvec4(_GLF_IDENTITY(! (_GLF_IDENTITY(! (false), ! (_GLF_IDENTITY(! (! (false)), bool(bvec3(! (! (false)), false, false)))))), (! (! _GLF_IDENTITY((false), (_GLF_IDENTITY((false), (_GLF_IDENTITY((false), bool(bool((false))))) || false)) || _GLF_IDENTITY(false, ! (! (false)))))) && true), _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(-7.4)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), false, true))))), _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))))))), true), true)), bvec3(bvec4(bvec3(bvec4(bvec3(_GLF_IDENTITY(! (! (false)), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(! (_GLF_IDENTITY(! (false), ! (_GLF_IDENTITY(! (! (false)), bool(bvec3(! (! (false)), false, false)))))), (! (! _GLF_IDENTITY((false), (_GLF_IDENTITY((false), (_GLF_IDENTITY((false), bool(bool((false))))) || false)) || _GLF_IDENTITY(false, ! (! (false)))))) && true), _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(-7.4)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), false, true)), false || (bool(bvec4(_GLF_IDENTITY(! (_GLF_IDENTITY(! (false), ! (_GLF_IDENTITY(! (! (false)), bool(bvec3(! (! (false)), false, false)))))), (! (! _GLF_IDENTITY((false), (_GLF_IDENTITY((false), (_GLF_IDENTITY((false), bool(bool((false))))) || false)) || _GLF_IDENTITY(false, ! (! (false)))))) && true), _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(-7.4)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), false, true))))), _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))))))), true), true)), false))))), bvec3(bvec4(bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(! (! (false)), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(! (_GLF_IDENTITY(! (false), ! (_GLF_IDENTITY(! (! (false)), bool(bvec3(! (! (false)), false, false)))))), (! (! _GLF_IDENTITY((false), (_GLF_IDENTITY((false), (_GLF_IDENTITY((false), bool(bool((false))))) || false)) || _GLF_IDENTITY(false, ! (! (false)))))) && true), _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(-7.4)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), false, true)), false || (bool(bvec4(_GLF_IDENTITY(! (_GLF_IDENTITY(! (false), ! (_GLF_IDENTITY(! (! (false)), bool(bvec3(! (! (false)), false, false)))))), (! (! _GLF_IDENTITY((false), (_GLF_IDENTITY((false), (_GLF_IDENTITY((false), bool(bool((false))))) || false)) || _GLF_IDENTITY(false, ! (! (false)))))) && true), _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(-7.4)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), false, true))))), _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))))))), true), _GLF_IDENTITY(bvec3(bvec4(bvec3(_GLF_IDENTITY(! (! (false)), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(! (_GLF_IDENTITY(! (false), ! (_GLF_IDENTITY(! (! (false)), bool(bvec3(! (! (false)), false, false)))))), (! (! _GLF_IDENTITY((false), (_GLF_IDENTITY((false), (_GLF_IDENTITY((false), bool(bool((false))))) || false)) || _GLF_IDENTITY(false, ! (! (false)))))) && true), _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(-7.4)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), false, true)), false || (bool(bvec4(_GLF_IDENTITY(! (_GLF_IDENTITY(! (false), ! (_GLF_IDENTITY(! (! (false)), bool(bvec3(! (! (false)), false, false)))))), (! (! _GLF_IDENTITY((false), (_GLF_IDENTITY((false), (_GLF_IDENTITY((false), bool(bool((false))))) || false)) || _GLF_IDENTITY(false, ! (! (false)))))) && true), _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(-7.4)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), false, true))))), _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))))))), true), true)), bvec3(bvec4(bvec3(bvec4(bvec3(_GLF_IDENTITY(! (! (false)), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(! (_GLF_IDENTITY(! (false), ! (_GLF_IDENTITY(! (! (false)), bool(bvec3(! (! (false)), false, false)))))), (! (! _GLF_IDENTITY((false), (_GLF_IDENTITY((false), (_GLF_IDENTITY((false), bool(bool((false))))) || false)) || _GLF_IDENTITY(false, ! (! (false)))))) && true), _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(-7.4)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), false, true)), false || (bool(bvec4(_GLF_IDENTITY(! (_GLF_IDENTITY(! (false), ! (_GLF_IDENTITY(! (! (false)), bool(bvec3(! (! (false)), false, false)))))), (! (! _GLF_IDENTITY((false), (_GLF_IDENTITY((false), (_GLF_IDENTITY((false), bool(bool((false))))) || false)) || _GLF_IDENTITY(false, ! (! (false)))))) && true), _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(-7.4)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), false, true))))), _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))))))), true), true)), false))))), true))), true))))), bvec3(bvec4(bvec3(_GLF_IDENTITY(! (_GLF_IDENTITY(! (false), true && (_GLF_IDENTITY(! (false), (! (false)) && true)))), bool(bvec4(_GLF_IDENTITY(! (! (false)), (! (! (false))) && true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, true))), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x)) > injectionSwitch.y)), true), true))))))) || false)))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(vec2(injectionSwitch)), vec2(1.0, 1.0) * (_GLF_IDENTITY(vec2(vec2(injectionSwitch)), min(vec2(vec2(injectionSwitch)), vec2(vec2(injectionSwitch))))))).x > _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(max(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), injectionSwitch), mix(vec2(_GLF_FUZZED(-22.27), (max(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), injectionSwitch))[1]), vec2((max(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), injectionSwitch))[0], _GLF_FUZZED(-5.8)), bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)))), injectionSwitch)).y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, vec2(mat3x4(injectionSwitch, sqrt(1.0), 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, sin(0.0), 1.0, abs(sqrt(1.0))))).x))); _injected_loop_counter --)
        {
         return;
        }
      }
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = (30078 & 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         return;
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            continue;
           break;
          }
        }
      }
    }
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 uint workgroup_size = _GLF_IDENTITY(gl_WorkGroupSize.x, (_GLF_IDENTITY(false, false || (false)) ? _GLF_FUZZED(_GLF_IDENTITY(write_val, (_GLF_IDENTITY(write_val, (true ? write_val : _GLF_FUZZED(78981u)))) | (_GLF_IDENTITY(write_val, (write_val) + 0u)))) : gl_WorkGroupSize.x));
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    return;
  }
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / _GLF_IDENTITY(vec2(1.0, 1.0), (vec2(1.0, 1.0)) - vec2(0.0, 0.0))).x > _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(434.193, 53.29)) : _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)))), injectionSwitch)), injectionSwitch)).y, ! (! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(_GLF_IDENTITY(false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch, mix(_GLF_IDENTITY(vec2(_GLF_FUZZED(-78.05), _GLF_FUZZED(_GLF_IDENTITY(-8.0, max(-8.0, -8.0)))), _GLF_IDENTITY((vec2(_GLF_FUZZED(-78.05), _GLF_FUZZED(_GLF_IDENTITY(-8.0, max(-8.0, -8.0))))) * mat2(1.0), min((vec2(_GLF_FUZZED(-78.05), _GLF_FUZZED(_GLF_IDENTITY(-8.0, max(-8.0, -8.0))))) * mat2(1.0), (vec2(_GLF_FUZZED(-78.05), _GLF_FUZZED(_GLF_IDENTITY(-8.0, max(-8.0, -8.0))))) * mat2(1.0)))), vec2((false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)[0], _GLF_IDENTITY((false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)[1], clamp(_GLF_IDENTITY((false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)[1], clamp((false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)[1], (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)[1], (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)[1])), (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)[1], (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)[1]))), bvec2(true, _GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ((injectionSwitch.x < injectionSwitch.y)) && true)) && true))))), vec2(_GLF_IDENTITY(mat4x3(_GLF_IDENTITY(false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch, mix(_GLF_IDENTITY(vec2(_GLF_FUZZED(-78.05), _GLF_FUZZED(_GLF_IDENTITY(-8.0, max(-8.0, -8.0)))), _GLF_IDENTITY((vec2(_GLF_FUZZED(-78.05), _GLF_FUZZED(_GLF_IDENTITY(-8.0, max(-8.0, -8.0))))) * mat2(1.0), min((vec2(_GLF_FUZZED(-78.05), _GLF_FUZZED(_GLF_IDENTITY(-8.0, max(-8.0, -8.0))))) * mat2(1.0), (vec2(_GLF_FUZZED(-78.05), _GLF_FUZZED(_GLF_IDENTITY(-8.0, max(-8.0, -8.0))))) * mat2(1.0)))), vec2((false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)[0], _GLF_IDENTITY((false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)[1], clamp(_GLF_IDENTITY((false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)[1], clamp((false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)[1], (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)[1], (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)[1])), (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)[1], (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)[1]))), bvec2(true, _GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ((injectionSwitch.x < injectionSwitch.y)) && true)) && true))))), determinant(mat2(1.0, 0.0, 0.0, 1.0)), 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0), mat3(1.0) * (mat4x3(_GLF_IDENTITY(false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch, mix(_GLF_IDENTITY(vec2(_GLF_FUZZED(-78.05), _GLF_FUZZED(_GLF_IDENTITY(-8.0, max(-8.0, -8.0)))), _GLF_IDENTITY((vec2(_GLF_FUZZED(-78.05), _GLF_FUZZED(_GLF_IDENTITY(-8.0, max(-8.0, -8.0))))) * mat2(1.0), min((vec2(_GLF_FUZZED(-78.05), _GLF_FUZZED(_GLF_IDENTITY(-8.0, max(-8.0, -8.0))))) * mat2(1.0), (vec2(_GLF_FUZZED(-78.05), _GLF_FUZZED(_GLF_IDENTITY(-8.0, max(-8.0, -8.0))))) * mat2(1.0)))), vec2((false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)[0], _GLF_IDENTITY((false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)[1], clamp(_GLF_IDENTITY((false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)[1], clamp((false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)[1], (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)[1], (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)[1])), (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)[1], (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)[1]))), bvec2(true, _GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ((injectionSwitch.x < injectionSwitch.y)) && true)) && true))))), determinant(mat2(1.0, 0.0, 0.0, 1.0)), 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0))))))).x > injectionSwitch.y, ! (! _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || (_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(0.4), (injectionSwitch)[_GLF_IDENTITY(1, (1) + 0)]), vec2((injectionSwitch)[0], _GLF_FUZZED(9.4)), bvec2(true, _GLF_IDENTITY(false, true && (false))))).y), true && ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))))))))))))))
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec3(false, false, true))), true && (_GLF_IDENTITY(false, bool(bvec3(false, false, true)))))));
  }
 else
  {
  }
 uint workgroup_base = workgroup_size * _GLF_IDENTITY(workgroup_id, (workgroup_id) ^ 0u);
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  return;
 uint subgroup_base = subgroup_id * subgroup_size;
 uint virtual_gid = workgroup_base + subgroup_base + subgroup_local_id;
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    continue;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     break;
    }
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(false, ! (! (false))) || (_GLF_IDENTITY(false, false || (false)))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, float(_GLF_IDENTITY(mat4(injectionSwitch.y, 0.0, 1.0, _GLF_IDENTITY(0.0, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(true, ! (! (true))) ? 0.0 : _GLF_FUZZED(-924.543), clamp(_GLF_IDENTITY(true, ! (! (true))) ? 0.0 : _GLF_FUZZED(-924.543), _GLF_IDENTITY(true, ! (! (true))) ? 0.0 : _GLF_FUZZED(-924.543), _GLF_IDENTITY(true, ! (! (true))) ? 0.0 : _GLF_FUZZED(-924.543)))), float(_GLF_IDENTITY(_GLF_IDENTITY(float(_GLF_IDENTITY((true ? 0.0 : _GLF_FUZZED(-924.543)), clamp((true ? 0.0 : _GLF_FUZZED(-924.543)), (true ? 0.0 : _GLF_FUZZED(-924.543)), (true ? 0.0 : _GLF_FUZZED(-924.543))))), clamp(float(_GLF_IDENTITY((true ? 0.0 : _GLF_FUZZED(-924.543)), clamp((true ? 0.0 : _GLF_FUZZED(-924.543)), (true ? 0.0 : _GLF_FUZZED(-924.543)), (true ? 0.0 : _GLF_FUZZED(-924.543))))), float(_GLF_IDENTITY((true ? 0.0 : _GLF_FUZZED(-924.543)), clamp((true ? 0.0 : _GLF_FUZZED(-924.543)), (true ? 0.0 : _GLF_FUZZED(-924.543)), (true ? 0.0 : _GLF_FUZZED(-924.543))))), float(_GLF_IDENTITY((true ? 0.0 : _GLF_FUZZED(-924.543)), clamp((true ? 0.0 : _GLF_FUZZED(-924.543)), (true ? 0.0 : _GLF_FUZZED(-924.543)), (true ? 0.0 : _GLF_FUZZED(-924.543))))))), (_GLF_IDENTITY(float(_GLF_IDENTITY((true ? 0.0 : _GLF_FUZZED(-924.543)), clamp((_GLF_IDENTITY(true ? _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)) : _GLF_FUZZED(-924.543), max(true ? _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)) : _GLF_FUZZED(-924.543), true ? _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)) : _GLF_FUZZED(-924.543)))), (true ? 0.0 : _GLF_FUZZED(-924.543)), (true ? 0.0 : _GLF_FUZZED(-924.543))))), clamp(float(_GLF_IDENTITY((true ? 0.0 : _GLF_FUZZED(-924.543)), clamp((true ? 0.0 : _GLF_FUZZED(-924.543)), (true ? _GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-337.640)), bool(false))), _GLF_IDENTITY(0.0, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(89.14) : 0.0)))) : _GLF_FUZZED(-924.543)), (true ? 0.0 : _GLF_FUZZED(-924.543))))), float(_GLF_IDENTITY((true ? 0.0 : _GLF_FUZZED(-924.543)), clamp((true ? 0.0 : _GLF_FUZZED(-924.543)), (_GLF_IDENTITY(true, true && (true)) ? 0.0 : _GLF_FUZZED(-924.543)), (true ? 0.0 : _GLF_FUZZED(-924.543))))), float(_GLF_IDENTITY((true ? 0.0 : _GLF_FUZZED(-924.543)), clamp((true ? 0.0 : _GLF_FUZZED(-924.543)), (true ? 0.0 : _GLF_FUZZED(-924.543)), (true ? 0.0 : _GLF_FUZZED(-924.543)))))))) / 1.0)))), 0.0, 0.0, sin(0.0), 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0), (mat4(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(_GLF_IDENTITY(mat2x4(injectionSwitch, _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(185.421) : 0.0)), cos(0.0), 0.0, _GLF_IDENTITY(dot(vec3(1.0, 1.0, _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, 1.0)), dot(vec2(0.0, _GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat4x2(1.0, _GLF_IDENTITY(dot(vec3(0.0, 0.0, tan(0.0)), vec3(1.0, determinant(mat2(1.0, 0.0, 0.0, 1.0)), round(length(normalize(vec3(1.0, 1.0, 1.0)))))), dot(vec3(0.0, 0.0, tan(0.0)), vec3(1.0, determinant(mat2(1.0, 0.0, 0.0, 1.0)), round(length(normalize(vec3(1.0, 1.0, 1.0))))))), 0.0, determinant(mat3(1.0, 1.0, 1.0, _GLF_IDENTITY(dot(vec3(1.0, 1.0, 0.0), vec3(0.0, 0.0, 1.0)), dot(vec3(1.0, 1.0, 0.0), vec3(0.0, 0.0, 1.0))), cos(0.0), 0.0, 0.0, 0.0, abs(1.0))), round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), 1.0, 0.0, 1.0)), min(float(mat4x2(1.0, _GLF_IDENTITY(dot(vec3(0.0, 0.0, tan(0.0)), vec3(1.0, determinant(mat2(1.0, 0.0, 0.0, 1.0)), round(length(normalize(vec3(1.0, 1.0, 1.0)))))), dot(vec3(0.0, 0.0, tan(0.0)), vec3(1.0, determinant(mat2(1.0, 0.0, 0.0, 1.0)), round(length(normalize(vec3(1.0, 1.0, 1.0))))))), 0.0, determinant(mat3(1.0, 1.0, 1.0, _GLF_IDENTITY(dot(vec3(1.0, 1.0, 0.0), vec3(0.0, 0.0, 1.0)), dot(vec3(1.0, 1.0, 0.0), vec3(0.0, 0.0, 1.0))), cos(0.0), 0.0, 0.0, 0.0, abs(1.0))), round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), 1.0, 0.0, 1.0)), float(mat4x2(1.0, _GLF_IDENTITY(dot(vec3(0.0, 0.0, tan(0.0)), vec3(1.0, determinant(mat2(1.0, 0.0, 0.0, 1.0)), round(length(normalize(vec3(1.0, 1.0, 1.0)))))), dot(vec3(0.0, 0.0, tan(0.0)), vec3(1.0, determinant(mat2(1.0, 0.0, 0.0, 1.0)), round(length(normalize(vec3(1.0, 1.0, 1.0))))))), 0.0, determinant(mat3(1.0, 1.0, 1.0, _GLF_IDENTITY(dot(vec3(1.0, 1.0, 0.0), vec3(0.0, 0.0, 1.0)), dot(vec3(1.0, 1.0, 0.0), vec3(0.0, 0.0, 1.0))), cos(0.0), 0.0, 0.0, 0.0, abs(1.0))), round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), 1.0, 0.0, 1.0)))))), vec2(0.0, 1.0)))), vec3(0.0, length(vec4(0.0, 0.0, _GLF_IDENTITY(0.0, min(0.0, 0.0)), 0.0)), sqrt(0.0))), dot(vec3(1.0, 1.0, _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, 1.0)), dot(vec2(0.0, 1.0), vec2(0.0, 1.0)))), vec3(0.0, length(vec4(0.0, _GLF_IDENTITY(0.0, max(0.0, _GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-1853.1051)), bool(false))))), 0.0, 0.0)), sqrt(0.0)))), 1.0, 1.0), mat2x4(0.0, _GLF_IDENTITY(0.0, cos(0.0) * (0.0)), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0) + (mat2x4(injectionSwitch, _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(185.421) : 0.0)), cos(0.0), 0.0, _GLF_IDENTITY(dot(vec3(1.0, 1.0, _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, 1.0)), dot(vec2(0.0, 1.0), vec2(_GLF_IDENTITY(0.0, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 0.0 : _GLF_FUZZED(6.6))), 1.0)))), vec3(0.0, length(vec4(0.0, 0.0, 0.0, 0.0)), sqrt(0.0))), dot(vec3(1.0, 1.0, _GLF_IDENTITY(dot(vec2(0.0, 1.0), _GLF_IDENTITY(vec2(0.0, 1.0), clamp(vec2(0.0, 1.0), _GLF_IDENTITY(vec2(0.0, 1.0), (vec2(0.0, 1.0)) - vec2(0.0, 0.0)), vec2(0.0, 1.0)))), _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, 1.0)), max(_GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, 1.0)), mix(float(_GLF_FUZZED(-120.615)), float(dot(vec2(0.0, 1.0), vec2(0.0, 1.0))), bool(true))), dot(vec2(0.0, 1.0), vec2(0.0, 1.0)))))), vec3(0.0, length(vec4(0.0, 0.0, 0.0, 0.0)), sqrt(0.0)))), 1.0, 1.0)))), vec2(1.0, 1.0) * (vec2(_GLF_IDENTITY(mat2x4(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(185.421) : 0.0)), _GLF_IDENTITY(float(mat4(_GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(185.421) : 0.0)), 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0, 1.0, 0.0, 0.0)), (float(mat4(_GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(185.421) : 0.0)), 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0, 1.0, 0.0, 0.0))) / 1.0)), cos(0.0), 0.0, _GLF_IDENTITY(dot(vec3(1.0, 1.0, _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, 1.0)), dot(vec2(0.0, 1.0), vec2(0.0, 1.0)))), vec3(_GLF_IDENTITY(0.0, _GLF_IDENTITY(float(_GLF_IDENTITY(vec4(0.0, 1.0, 1.0, 0.0), vec4(_GLF_IDENTITY(mat2x3(_GLF_IDENTITY(vec4(0.0, 1.0, 1.0, 0.0), mix(vec4(_GLF_FUZZED(-2.0), (vec4(0.0, 1.0, 1.0, 0.0))[1], _GLF_FUZZED(-89.57), (vec4(0.0, 1.0, 1.0, 0.0))[3]), vec4((vec4(0.0, 1.0, 1.0, 0.0))[0], _GLF_FUZZED(-6.1), (vec4(0.0, 1.0, 1.0, 0.0))[2], _GLF_FUZZED(-81.33)), bvec4(true, false, true, false))), determinant(mat2(0.0, 0.0, 0.0, 0.0)), 0.0), (mat2x3(_GLF_IDENTITY(vec4(0.0, 1.0, 1.0, 0.0), mix(vec4(_GLF_FUZZED(-2.0), (vec4(0.0, 1.0, 1.0, 0.0))[1], _GLF_FUZZED(-89.57), (vec4(0.0, 1.0, 1.0, 0.0))[3]), vec4((vec4(0.0, 1.0, 1.0, 0.0))[0], _GLF_FUZZED(-6.1), (vec4(0.0, 1.0, 1.0, 0.0))[2], _GLF_FUZZED(-81.33)), bvec4(true, false, true, false))), determinant(mat2(0.0, 0.0, 0.0, 0.0)), 0.0)) * mat2(1.0))))), min(float(_GLF_IDENTITY(vec4(0.0, 1.0, 1.0, 0.0), vec4(_GLF_IDENTITY(mat2x3(_GLF_IDENTITY(vec4(0.0, 1.0, 1.0, 0.0), mix(vec4(_GLF_FUZZED(-2.0), (vec4(0.0, 1.0, 1.0, 0.0))[1], _GLF_FUZZED(-89.57), (vec4(0.0, 1.0, 1.0, 0.0))[3]), vec4((vec4(0.0, 1.0, 1.0, 0.0))[0], _GLF_FUZZED(-6.1), (vec4(0.0, 1.0, 1.0, 0.0))[2], _GLF_FUZZED(-81.33)), bvec4(true, false, true, false))), determinant(mat2(0.0, 0.0, 0.0, 0.0)), 0.0), (mat2x3(_GLF_IDENTITY(vec4(0.0, 1.0, 1.0, 0.0), mix(vec4(_GLF_FUZZED(-2.0), (vec4(0.0, 1.0, 1.0, 0.0))[1], _GLF_FUZZED(-89.57), (vec4(0.0, 1.0, 1.0, 0.0))[3]), vec4((vec4(0.0, 1.0, 1.0, 0.0))[0], _GLF_FUZZED(-6.1), (vec4(0.0, 1.0, 1.0, 0.0))[2], _GLF_FUZZED(-81.33)), bvec4(true, false, true, false))), determinant(mat2(0.0, 0.0, 0.0, 0.0)), 0.0)) * mat2(1.0))))), float(_GLF_IDENTITY(vec4(0.0, 1.0, 1.0, 0.0), vec4(_GLF_IDENTITY(mat2x3(_GLF_IDENTITY(vec4(0.0, 1.0, 1.0, 0.0), mix(vec4(_GLF_FUZZED(-2.0), (vec4(0.0, 1.0, 1.0, 0.0))[1], _GLF_FUZZED(-89.57), (vec4(0.0, 1.0, 1.0, 0.0))[3]), vec4((vec4(0.0, 1.0, 1.0, 0.0))[0], _GLF_FUZZED(-6.1), (vec4(0.0, 1.0, 1.0, 0.0))[2], _GLF_FUZZED(-81.33)), bvec4(true, false, true, false))), determinant(mat2(0.0, 0.0, 0.0, 0.0)), 0.0), (mat2x3(_GLF_IDENTITY(vec4(0.0, 1.0, 1.0, 0.0), mix(vec4(_GLF_FUZZED(-2.0), (vec4(0.0, 1.0, 1.0, 0.0))[1], _GLF_FUZZED(-89.57), (vec4(0.0, 1.0, 1.0, 0.0))[3]), vec4((vec4(0.0, 1.0, 1.0, 0.0))[0], _GLF_FUZZED(-6.1), (vec4(0.0, 1.0, 1.0, 0.0))[2], _GLF_FUZZED(-81.33)), bvec4(true, false, true, false))), determinant(mat2(0.0, 0.0, 0.0, 0.0)), 0.0)) * mat2(1.0)))))))), length(vec4(0.0, 0.0, 0.0, 0.0)), sqrt(0.0))), dot(vec3(1.0, 1.0, _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, 1.0)), dot(vec2(0.0, 1.0), vec2(0.0, 1.0)))), vec3(0.0, length(vec4(0.0, 0.0, 0.0, 0.0)), sqrt(0.0)))), 1.0, 1.0), mat2x4(0.0, _GLF_IDENTITY(0.0, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(length(vec4(-771.239, 26.18, 26.96, -1.5))) : 0.0)), 0.0, _GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0, 0.0, 0.0, 0.0) + (mat2x4(injectionSwitch, _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(185.421) : 0.0)), cos(0.0), 0.0, _GLF_IDENTITY(dot(vec3(1.0, 1.0, _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, 1.0)), dot(vec2(0.0, 1.0), vec2(0.0, 1.0)))), vec3(0.0, length(vec4(0.0, _GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0, 0.0)), sqrt(0.0))), dot(vec3(1.0, 1.0, _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(_GLF_IDENTITY(0.0, 0.0 + (0.0)), 1.0)), dot(vec2(0.0, 1.0), vec2(0.0, 1.0)))), vec3(0.0, length(vec4(0.0, 0.0, 0.0, 0.0)), sqrt(0.0)))), 1.0, 1.0))))))).y, 0.0, 1.0, 0.0, 0.0, 0.0, sin(_GLF_IDENTITY(0.0, (_GLF_IDENTITY(false ? _GLF_FUZZED(388.665) : 0.0, mix(float(_GLF_FUZZED(-7247.9534)), float(false ? _GLF_FUZZED(388.665) : 0.0), bool(true)))))), 0.0, 1.0, 1.0, _GLF_IDENTITY(_GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(8.0))), mix(float(0.0), float(_GLF_FUZZED(2.6)), bool(false))), 1.0, 1.0, 0.0, 0.0, _GLF_IDENTITY(0.0, min(0.0, 0.0)))) - mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(1.3)), bool(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(5346.9283)), bool(false)))))))), 0.0, 0.0)))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - sqrt(0.0)), min(_GLF_IDENTITY(injectionSwitch.y, 0.0 + (injectionSwitch.y)), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(mix(float(injectionSwitch.y), float(_GLF_FUZZED(5.8)), bool(false)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(179.966) : _GLF_IDENTITY(mix(float(injectionSwitch.y), float(_GLF_FUZZED(5.8)), bool(false)), 1.0 * (mix(float(injectionSwitch.y), float(_GLF_FUZZED(5.8)), bool(_GLF_IDENTITY(false, true && (false))))))))), _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), _GLF_IDENTITY(float(_GLF_FUZZED(_GLF_IDENTITY(5.8, float(mat3(5.8, 0.0, 1.0, tan(0.0), 1.0, 1.0, 1.0, 1.0, 1.0))))), clamp(float(_GLF_FUZZED(_GLF_IDENTITY(5.8, float(mat3(5.8, 0.0, 1.0, tan(0.0), 1.0, 1.0, 1.0, 1.0, 1.0))))), _GLF_IDENTITY(float(_GLF_FUZZED(_GLF_IDENTITY(5.8, float(mat3(5.8, 0.0, 1.0, tan(0.0), 1.0, 1.0, 1.0, 1.0, 1.0))))), clamp(float(_GLF_FUZZED(_GLF_IDENTITY(5.8, float(mat3(5.8, 0.0, 1.0, tan(0.0), 1.0, 1.0, 1.0, 1.0, 1.0))))), float(_GLF_FUZZED(_GLF_IDENTITY(5.8, float(mat3(5.8, 0.0, 1.0, tan(0.0), 1.0, 1.0, 1.0, 1.0, 1.0))))), float(_GLF_FUZZED(_GLF_IDENTITY(5.8, float(mat3(5.8, 0.0, 1.0, tan(0.0), 1.0, 1.0, 1.0, 1.0, 1.0))))))), float(_GLF_FUZZED(_GLF_IDENTITY(5.8, float(mat3(5.8, 0.0, 1.0, tan(0.0), 1.0, 1.0, 1.0, 1.0, 1.0))))))), bool(false)))), 0.0 + ((_GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), _GLF_IDENTITY(float(_GLF_FUZZED(_GLF_IDENTITY(5.8, float(mat3(5.8, 0.0, 1.0, tan(0.0), 1.0, 1.0, 1.0, 1.0, 1.0))))), clamp(float(_GLF_FUZZED(_GLF_IDENTITY(5.8, float(mat3(5.8, 0.0, 1.0, tan(0.0), 1.0, 1.0, 1.0, 1.0, 1.0))))), _GLF_IDENTITY(float(_GLF_FUZZED(_GLF_IDENTITY(5.8, float(mat3(5.8, 0.0, 1.0, tan(0.0), 1.0, 1.0, 1.0, 1.0, 1.0))))), clamp(float(_GLF_FUZZED(_GLF_IDENTITY(5.8, float(mat3(5.8, 0.0, 1.0, tan(0.0), 1.0, 1.0, 1.0, 1.0, 1.0))))), float(_GLF_FUZZED(_GLF_IDENTITY(5.8, float(mat3(5.8, 0.0, 1.0, tan(0.0), 1.0, 1.0, 1.0, 1.0, 1.0))))), float(_GLF_FUZZED(_GLF_IDENTITY(5.8, float(mat3(5.8, 0.0, 1.0, tan(0.0), 1.0, 1.0, 1.0, 1.0, 1.0))))))), float(_GLF_FUZZED(_GLF_IDENTITY(5.8, float(mat3(5.8, 0.0, 1.0, tan(0.0), 1.0, 1.0, 1.0, 1.0, 1.0))))))), bool(false)))))) + _GLF_IDENTITY(_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-492.935)), float(0.0), bool(true))), (true ? _GLF_IDENTITY(_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-492.935)), float(0.0), bool(true))), max(_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-492.935)), float(0.0), bool(true))), _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-492.935)), float(0.0), bool(true))))) : _GLF_FUZZED(-8.4)))))), injectionSwitch.y))))))
      return;
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_DEAD(false))
  return;
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        continue;
       break;
      }
     if(_GLF_DEAD(false))
      return;
    }
  }
 do
  {
   atomicStore(write_val, _GLF_IDENTITY(_GLF_IDENTITY(uint(virtual_gid), 0u + (_GLF_IDENTITY(uint(virtual_gid), (_GLF_IDENTITY(uint(virtual_gid), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((uint(virtual_gid)), ((uint(virtual_gid))) - 0u), max(_GLF_IDENTITY((uint(virtual_gid)), ((uint(virtual_gid))) - 0u), _GLF_IDENTITY(_GLF_IDENTITY((uint(virtual_gid)), ((uint(virtual_gid))) - 0u), (_GLF_IDENTITY((uint(virtual_gid)), ((uint(virtual_gid))) - 0u)) | 0u))), _GLF_IDENTITY(min((uint(virtual_gid)), (uint(virtual_gid))), (_GLF_IDENTITY(min((uint(virtual_gid)), (uint(virtual_gid))), uint(_GLF_IDENTITY(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(_GLF_IDENTITY(min((uint(virtual_gid)), (uint(_GLF_IDENTITY(virtual_gid, (virtual_gid) ^ 0u)))), (true ? _GLF_IDENTITY(min((uint(virtual_gid)), (uint(_GLF_IDENTITY(virtual_gid, (virtual_gid) ^ 0u)))), ~ (~ (min((uint(virtual_gid)), (uint(_GLF_IDENTITY(virtual_gid, (virtual_gid) ^ 0u))))))) : _GLF_FUZZED(workgroup_base))), uint(uvec3(min((uint(virtual_gid)), (uint(virtual_gid))), 0u, 1u))), _GLF_IDENTITY(1u, ~ (~ (1u)))), clamp(uvec2(_GLF_IDENTITY(_GLF_IDENTITY(min((uint(virtual_gid)), (uint(virtual_gid))), min(min((uint(virtual_gid)), (uint(virtual_gid))), min((uint(virtual_gid)), (uint(virtual_gid))))), uint(uvec3(min((uint(virtual_gid)), (uint(virtual_gid))), 0u, 1u))), 1u), uvec2(_GLF_IDENTITY(_GLF_IDENTITY(min((uint(virtual_gid)), (uint(virtual_gid))), uint(uvec3(min((uint(virtual_gid)), (uint(virtual_gid))), 0u, 1u))), (_GLF_IDENTITY(_GLF_IDENTITY(min((uint(virtual_gid)), (uint(virtual_gid))), uint(uvec3(min((uint(virtual_gid)), (uint(virtual_gid))), 0u, 1u))), (_GLF_IDENTITY(min((uint(virtual_gid)), (uint(virtual_gid))), uint(uvec3(min((uint(virtual_gid)), (uint(virtual_gid))), 0u, 1u)))) | (_GLF_IDENTITY(min((uint(virtual_gid)), (uint(virtual_gid))), uint(uvec3(min((uint(virtual_gid)), (uint(virtual_gid))), 0u, 1u)))))) | 0u), 1u), uvec2(_GLF_IDENTITY(min((uint(virtual_gid)), (uint(virtual_gid))), uint(uvec3(min((uint(virtual_gid)), _GLF_IDENTITY((uint(virtual_gid)), max((uint(virtual_gid)), _GLF_IDENTITY((uint(virtual_gid)), ((uint(virtual_gid))) | ((uint(virtual_gid))))))), 0u, 1u))), _GLF_IDENTITY(1u, (1u) | (_GLF_IDENTITY(_GLF_IDENTITY(1u, (1u) << 0u), (_GLF_IDENTITY(1u, (1u) << 0u)) << 0u)))))), (false ? _GLF_FUZZED(uvec2(5733u, 176091u)) : _GLF_IDENTITY(uvec2(_GLF_IDENTITY(_GLF_IDENTITY(min((uint(virtual_gid)), (uint(virtual_gid))), (min((uint(virtual_gid)), (uint(virtual_gid)))) | 0u), uint(uvec3(min((uint(virtual_gid)), (uint(virtual_gid))), 0u, 1u))), 1u), clamp(uvec2(_GLF_IDENTITY(min(_GLF_IDENTITY((uint(virtual_gid)), max(_GLF_IDENTITY((uint(virtual_gid)), ~ (~ ((uint(virtual_gid))))), (uint(virtual_gid)))), (uint(virtual_gid))), uint(_GLF_IDENTITY(uvec3(min((uint(virtual_gid)), _GLF_IDENTITY((uint(virtual_gid)), max((uint(virtual_gid)), (uint(virtual_gid))))), 0u, 1u), uvec3(uvec4(uvec3(min((uint(virtual_gid)), (_GLF_IDENTITY(_GLF_IDENTITY(uint(virtual_gid), 0u ^ (uint(virtual_gid))), uint(uvec2(uint(virtual_gid), 0u))))), 0u, 1u), 1u))))), 1u), uvec2(_GLF_IDENTITY(min((uint(_GLF_IDENTITY(virtual_gid, min(_GLF_IDENTITY(virtual_gid, (virtual_gid) >> 0u), _GLF_IDENTITY(virtual_gid, max(virtual_gid, virtual_gid)))))), (uint(virtual_gid))), uint(uvec3(min(_GLF_IDENTITY((uint(_GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, (_GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, max(virtual_gid, virtual_gid)), (_GLF_IDENTITY(virtual_gid, max(virtual_gid, virtual_gid))) / uint(_GLF_ONE(1.0, injectionSwitch.y)))) ^ 0u), (_GLF_IDENTITY(virtual_gid, clamp(_GLF_IDENTITY(virtual_gid, clamp(virtual_gid, virtual_gid, virtual_gid)), virtual_gid, virtual_gid))) | (virtual_gid)))), ((uint(_GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, (_GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, max(virtual_gid, virtual_gid)), (_GLF_IDENTITY(virtual_gid, max(virtual_gid, virtual_gid))) / uint(_GLF_ONE(1.0, injectionSwitch.y)))) ^ 0u), (_GLF_IDENTITY(virtual_gid, clamp(_GLF_IDENTITY(virtual_gid, clamp(virtual_gid, virtual_gid, virtual_gid)), virtual_gid, virtual_gid))) | (virtual_gid))))) | ((uint(_GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, (_GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, max(virtual_gid, virtual_gid)), (_GLF_IDENTITY(virtual_gid, max(virtual_gid, virtual_gid))) / uint(_GLF_ONE(1.0, injectionSwitch.y)))) ^ 0u), (_GLF_IDENTITY(virtual_gid, clamp(_GLF_IDENTITY(virtual_gid, clamp(virtual_gid, virtual_gid, virtual_gid)), virtual_gid, virtual_gid))) | (virtual_gid)))))), (uint(virtual_gid))), 0u, 1u))), 1u), uvec2(_GLF_IDENTITY(min((uint(virtual_gid)), (uint(virtual_gid))), uint(uvec3(min((uint(virtual_gid)), (uint(virtual_gid))), 0u, 1u))), 1u)))))))) - 0u)) << 0u)) | (_GLF_IDENTITY(uint(_GLF_IDENTITY(virtual_gid, (virtual_gid) << 0u)), uint(uvec2(uint(_GLF_IDENTITY(virtual_gid, (virtual_gid) << 0u)), 1u))))))), clamp(uint(virtual_gid), uint(virtual_gid), _GLF_IDENTITY(uint(virtual_gid), (uint(virtual_gid)) / uint(_GLF_ONE(1.0, injectionSwitch.y))))), 4, 64, 4);
   if(_GLF_DEAD(false))
    return;
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        continue;
       return;
      }
     if(_GLF_DEAD(false))
      break;
    }
   else
    {
     if(_GLF_DEAD(false))
      continue;
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 uint read_val = atomicLoad(write_val, _GLF_IDENTITY(4, min(4, 4)), 64, 2);
 if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY((_GLF_DEAD(false)), false || ((_GLF_DEAD(false)))) || false)), ((_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY((_GLF_DEAD(false)), false || ((_GLF_DEAD(false)))) || false))) || false) || false, false || (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, false))), (_GLF_DEAD(false)) || false)) || false, true && ((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, false))), (_GLF_DEAD(false)) || false)) || false))))))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y)))) && true))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y))))) && true)), true), bvec2(bvec4(bvec2(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(true, (true) && true)), false, false)))), bool(bvec2(bool(_GLF_IDENTITY(bvec2(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true), bvec2(bvec4(bvec2(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true), false, false)))), false)))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      return;
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, true, _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), bool(bvec2(_GLF_IDENTITY(bool(bvec3(false, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(bool(bvec3(false, true, _GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), true && (! (injectionSwitch.x > injectionSwitch.y))))), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y)))))) && true))))), true), bvec2(bvec4(bvec2(bool(bvec3(false, true, _GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), true && (! (injectionSwitch.x > injectionSwitch.y))))), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y)))))) && true))))), true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))), _GLF_IDENTITY(bvec2(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(bool(bvec3(false, true, _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y)))))) && true))))), true), bvec2(bvec3(bvec2(bool(bvec3(false, true, _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y)))))) && true))))), true), false))), bvec2(bvec2(bvec2(bool(bvec3(false, true, _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y)))))) && true))))), true)))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), bvec2(bvec4(bvec2(bvec4(_GLF_IDENTITY(bvec2(bool(bvec3(false, true, _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))))))))) && true))))), true), bvec2(bvec2(bvec2(bool(bvec3(false, true, _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y)))))) && true))))), true)))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)))))), false, true)))))), false))))), (_GLF_DEAD(false)) || false))
    {
     do
      {
       return;
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
   if(_GLF_DEAD(false))
    return;
   for(int _injected_loop_counter = _GLF_IDENTITY((1 & 1), 0 ^ ((_GLF_IDENTITY(_GLF_IDENTITY(1 & 1, (1 & 1) | 0), 0 ^ (_GLF_IDENTITY(1 & 1, (1 & 1) | 0)))))); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, _GLF_IDENTITY((_injected_loop_counter) | 0, clamp(_GLF_IDENTITY((_injected_loop_counter) | 0, ((_injected_loop_counter) | 0) << (0 >> _GLF_IDENTITY(int(0), int(0)))), (_injected_loop_counter) | 0, _GLF_IDENTITY((_injected_loop_counter) | 0, clamp((_injected_loop_counter) | 0, (_injected_loop_counter) | 0, (_injected_loop_counter) | 0))))) != 0, ! (! (_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, _GLF_IDENTITY((_injected_loop_counter) | 0, clamp(_GLF_IDENTITY((_injected_loop_counter) | 0, ((_injected_loop_counter) | 0) << (0 >> _GLF_IDENTITY(int(0), int(0)))), (_injected_loop_counter) | 0, _GLF_IDENTITY((_injected_loop_counter) | 0, clamp((_injected_loop_counter) | 0, (_injected_loop_counter) | 0, (_injected_loop_counter) | 0))))) != 0, ! (! (_GLF_IDENTITY(_injected_loop_counter, _GLF_IDENTITY((_injected_loop_counter) | 0, clamp(_GLF_IDENTITY((_injected_loop_counter) | 0, ((_injected_loop_counter) | 0) << (0 >> _GLF_IDENTITY(int(0), int(0)))), (_injected_loop_counter) | 0, _GLF_IDENTITY((_injected_loop_counter) | 0, clamp((_injected_loop_counter) | 0, (_injected_loop_counter) | 0, (_injected_loop_counter) | 0))))) != _GLF_IDENTITY(0, 0 + (0)))))))), bool(bvec4(_GLF_IDENTITY(_injected_loop_counter, _GLF_IDENTITY((_injected_loop_counter) | 0, clamp(_GLF_IDENTITY((_injected_loop_counter) | 0, ((_injected_loop_counter) | 0) << (0 >> _GLF_IDENTITY(int(0), int(0)))), (_injected_loop_counter) | 0, _GLF_IDENTITY((_injected_loop_counter) | 0, clamp((_GLF_IDENTITY(_injected_loop_counter, clamp(_injected_loop_counter, _injected_loop_counter, _injected_loop_counter))) | _GLF_IDENTITY(0, max(0, 0)), (_injected_loop_counter) | 0, (_injected_loop_counter) | 0))))) != 0, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)))), (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0), _GLF_IDENTITY((_GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, min(_GLF_IDENTITY(0, (_GLF_IDENTITY(0, ~ (_GLF_IDENTITY(~ (0), (_GLF_IDENTITY(~ _GLF_IDENTITY((0), max((0), (0))), (~ (0)) ^ 0)) << 0)))) | (0)), _GLF_IDENTITY(0, int(ivec2(0, _GLF_IDENTITY(_GLF_IDENTITY(0, int(ivec3(0, 1, 1))), 0 | (_GLF_IDENTITY(_GLF_IDENTITY(0, int(ivec3(0, 1, 1))), max(_GLF_IDENTITY(_GLF_IDENTITY(0, int(ivec3(0, 1, 1))), min(_GLF_IDENTITY(0, int(ivec3(0, 1, 1))), _GLF_IDENTITY(0, int(ivec3(0, 1, 1))))), _GLF_IDENTITY(0, int(ivec3(0, 1, 1)))))))))))))), ! _GLF_IDENTITY((! ((_GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, min(_GLF_IDENTITY(0, (0) | (0)), _GLF_IDENTITY(0, int(ivec2(0, _GLF_IDENTITY(0, int(ivec3(0, 1, 1)))))))))))), ((! ((_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) + 0) != _GLF_IDENTITY(0, min(_GLF_IDENTITY(0, (0) | (0)), _GLF_IDENTITY(_GLF_IDENTITY(0, int(ivec2(0, _GLF_IDENTITY(0, int(ivec3(0, 1, 1)))))), (_GLF_IDENTITY(0, int(ivec2(0, _GLF_IDENTITY(0, int(ivec3(0, 1, 1))))))) | (_GLF_IDENTITY(0, int(ivec2(0, _GLF_IDENTITY(0, int(ivec3(0, 1, 1))))))))))), true && (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) + 0) != _GLF_IDENTITY(0, min(_GLF_IDENTITY(0, (0) | (0)), _GLF_IDENTITY(_GLF_IDENTITY(0, int(ivec2(0, _GLF_IDENTITY(0, int(ivec3(0, 1, 1)))))), (_GLF_IDENTITY(0, int(ivec2(0, _GLF_IDENTITY(0, int(ivec3(0, 1, 1))))))) | (_GLF_IDENTITY(0, int(ivec2(0, _GLF_IDENTITY(0, int(ivec3(0, 1, 1)))))))))), bool(bvec4(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) + 0) != _GLF_IDENTITY(0, min(_GLF_IDENTITY(0, (0) | (0)), _GLF_IDENTITY(_GLF_IDENTITY(0, int(ivec2(0, _GLF_IDENTITY(0, int(ivec3(0, 1, 1)))))), (_GLF_IDENTITY(0, int(ivec2(0, _GLF_IDENTITY(0, int(ivec3(0, 1, 1))))))) | (_GLF_IDENTITY(0, int(ivec2(0, _GLF_IDENTITY(0, int(ivec3(0, 1, 1)))))))))), true, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))))) && true)) && _GLF_IDENTITY(_GLF_IDENTITY(true, false || (true)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, false || (true))), bool(bvec4(! (_GLF_IDENTITY(true, false || (true))), false, _GLF_IDENTITY(true, bool(bool(true))), true))))))) || false); _injected_loop_counter --)
    {
     do
      {
       return;
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(false))
      break;
     if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))), ! (! (! (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))))))))
      {
       if(_GLF_DEAD(false))
        continue;
       continue;
      }
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   do
    {
     do
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         do
          {
           do
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y)) || (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, false || (false))) || false)))))
              {
               if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY((false) || false, _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY((false) || false, (_GLF_IDENTITY((false) || false, ((false) || false) && true)) || false), true, false, true)), ! (! (_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY((false) || false, (_GLF_IDENTITY((false) || false, ((false) || false) && true)) || false), true, false, true)), bool(bool(bool(bvec4(_GLF_IDENTITY((false) || false, (_GLF_IDENTITY((false) || false, ((false) || false) && true)) || false), true, false, true)))))))), ! (! (_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY((false) || false, (_GLF_IDENTITY((false) || false, ((false) || false) && true)) || false), (_GLF_IDENTITY((false) || false, (_GLF_IDENTITY((false) || false, ((false) || false) && true)) || false)) && true), true, false, true)), ! (! (_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY((false) || false, (_GLF_IDENTITY((false) || false, ((false) || false) && true)) || false), true, false, true)), bool(bool(bool(bvec4(_GLF_IDENTITY((_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false))) || false, _GLF_IDENTITY((_GLF_IDENTITY((false) || false, ((false) || false) && true)) || false, _GLF_IDENTITY(bool(bool((_GLF_IDENTITY((false) || false, ((false) || false) && true)) || false)), false || (bool(bool((_GLF_IDENTITY((false) || false, ((false) || false) && true)) || false)))))), true, false, true)))))))))))))))
                {
                }
               else
                {
                 do
                  {
                   if(_GLF_DEAD(false))
                    {
                     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2)))); _GLF_IDENTITY(_injected_loop_counter ++, (false ? _GLF_FUZZED((~ 4240)) : _injected_loop_counter ++)))
                      {
                       barrier();
                      }
                    }
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   if(_GLF_DEAD(false))
                    return;
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    return;
                  }
                }
               else
                {
                 return;
                 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(false, false || (false)), true, true)), true && (bool(bvec3(_GLF_IDENTITY(false, false || (false)), true, true)))))), ! (! (_GLF_DEAD(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false)))))))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    continue;
                   continue;
                  }
                }
               do
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, true, true)))))
                  {
                   do
                    {
                     do
                      {
                       return;
                       if(_GLF_DEAD(false))
                        return;
                      }
                     while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch.x : _GLF_FUZZED(fract(-38.78)))) > injectionSwitch.y))), ! (! (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch.x : _GLF_FUZZED(fract(_GLF_IDENTITY(-38.78, max(-38.78, -38.78)))))) > injectionSwitch.y)))))));
                    }
                   while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), (_GLF_WRAPPED_LOOP(false)) || false));
                   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)))) && (false))))
                    {
                    }
                   else
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      return;
                    }
                  }
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  continue;
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             if(_GLF_DEAD(false))
              break;
            }
           while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bool(false)))));
          }
         while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && _GLF_IDENTITY((_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, false || (false)))), bool(bvec4(_GLF_IDENTITY((_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, false || (false)))), false || ((_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, false || (false)))))), true, false, false)))));
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
          break;
        }
       else
        {
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y))))))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              return;
             return;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              continue;
            }
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             return;
            }
           else
            {
            }
           if(_GLF_DEAD(false))
            return;
          }
        }
       buf[virtual_gid] = _GLF_IDENTITY(uint(subgroupAllEqual(read_val)), (true ? uint(subgroupAllEqual(read_val)) : _GLF_FUZZED(subgroup_base)));
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = _GLF_IDENTITY((0 >> _GLF_IDENTITY(int(7), _GLF_IDENTITY(_GLF_IDENTITY(int(7), (int(7)) | (int(7))), max(int(7), int(7))))), clamp((0 >> _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), max(int(7), int(7))))), (0 >> _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), max(int(7), int(7))))), (0 >> _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), max(int(7), int(7))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(1, max(1, 1))); _injected_loop_counter ++)
      {
       for(int _injected_loop_counter = (0 ^ 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
        {
         return;
        }
      }
    }
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), ! (! (_GLF_WRAPPED_IF_TRUE(true))))))))
    {
     return;
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
    }
  }
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)))), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)) || _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), false, false, true))))))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
    }
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (injectionSwitch.x > injectionSwitch.y))) || false)))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       return;
      }
     else
      {
      }
    }
  }
 if(_GLF_DEAD(false))
  return;
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 1
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
