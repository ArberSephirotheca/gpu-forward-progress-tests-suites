#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_19 {
 uvec2 _f0;
 ivec3 _f1;
 vec4 _f2;
 int _f3;
 mat3x4 _f4;
 vec2 _f5;
 ivec3 _f6;
 uint num_workgroup;
} ;

struct _GLF_struct_20 {
 _GLF_struct_19 _f0;
} ;

struct _GLF_struct_21 {
 mat4x2 _f0;
 ivec2 _f1;
 mat2x4 _f2;
 _GLF_struct_20 _f3;
 ivec4 _f4;
} ;

struct _GLF_struct_16 {
 mat3x4 _f0;
 vec4 _f1;
 uint next_virtual_gid;
 mat3x4 _f2;
 mat3x2 _f3;
 ivec3 _f4;
 bool _f5;
} ;

struct _GLF_struct_15 {
 int _f0;
 bvec4 _f1;
} ;

struct _GLF_struct_17 {
 _GLF_struct_15 _f0;
 mat4x3 _f1;
 ivec4 _f2;
 _GLF_struct_16 _f3;
} ;

struct _GLF_struct_18 {
 _GLF_struct_17 _f0;
} ;

struct _GLF_struct_12 {
 ivec4 _f0;
 mat4x2 _f1;
 mat2 _f2;
 bvec4 _f3;
} ;

struct _GLF_struct_11 {
 bvec3 _f0;
 mat2x3 _f1;
 bvec4 _f2;
 mat4x3 _f3;
 uvec2 _f4;
} ;

struct _GLF_struct_10 {
 uint workgroup_base;
 mat2x3 _f0;
} ;

struct _GLF_struct_13 {
 _GLF_struct_10 _f0;
 vec3 _f1;
 uvec3 _f2;
 _GLF_struct_11 _f3;
 _GLF_struct_12 _f4;
 mat3x2 _f5;
 ivec3 _f6;
} ;

struct _GLF_struct_8 {
 uvec4 _f0;
 mat2 _f1;
 ivec2 _f2;
} ;

struct _GLF_struct_7 {
 mat3x2 _f0;
 float _f1;
 mat2x3 _f2;
 bvec3 _f3;
 mat2 _f4;
 mat3 _f5;
 bvec4 _f6;
} ;

struct _GLF_struct_6 {
 uvec2 _f0;
} ;

struct _GLF_struct_9 {
 float _f0;
 uvec4 _f1;
 _GLF_struct_6 _f2;
 _GLF_struct_7 _f3;
 bvec2 _f4;
 _GLF_struct_8 _f5;
 mat2x3 _f6;
} ;

struct _GLF_struct_4 {
 bvec4 _f0;
 ivec2 _f1;
} ;

struct _GLF_struct_5 {
 _GLF_struct_4 _f0;
 bvec2 _f1;
} ;

struct _GLF_struct_2 {
 mat2x3 _f0;
 mat3x2 _f1;
} ;

struct _GLF_struct_1 {
 mat3x2 _f0;
 mat3 _f1;
 bvec3 _f2;
 bvec2 _f3;
 vec4 _f4;
 float _f5;
 mat4x3 _f6;
} ;

struct _GLF_struct_0 {
 bvec3 _f0;
 mat2x4 _f1;
 mat3x2 _f2;
 bool _f3;
 bvec3 _f4;
 mat4x3 _f5;
 mat4 _f6;
} ;

struct _GLF_struct_3 {
 uvec4 _f0;
 ivec3 _f1;
 _GLF_struct_0 _f2;
 _GLF_struct_1 _f3;
 _GLF_struct_2 _f4;
 vec3 _f5;
} ;

struct _GLF_struct_14 {
 mat3x2 _f0;
 _GLF_struct_3 _f1;
 bvec4 _f2;
 _GLF_struct_5 _f3;
 _GLF_struct_9 _f4;
 _GLF_struct_13 _f5;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
  }
 else
  {
  }
 uvec4 GLF_merged4_0_1_16_1_1_13_2_1_13_3_1_13next_virtual_gidnum_workgroupsubgroup_basesubgroup_size;
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 GLF_merged4_0_1_16_1_1_13_2_1_13_3_1_13next_virtual_gidnum_workgroupsubgroup_basesubgroup_size.w = subgroup_size;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 _GLF_struct_21 _GLF_struct_replacement_21 = _GLF_struct_21(mat4x2(1.0), ivec2(1), mat2x4(1.0), _GLF_struct_20(_GLF_struct_19(uvec2(1u), ivec3(1), vec4(1.0), 1, mat3x4(1.0), vec2(1.0), ivec3(1), gl_NumWorkGroups.x)), ivec4(1));
 GLF_merged4_0_1_16_1_1_13_2_1_13_3_1_13next_virtual_gidnum_workgroupsubgroup_basesubgroup_size.y = _GLF_struct_replacement_21._f3._f0.num_workgroup;
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = gl_WorkGroupID.x;
 _GLF_struct_14 _GLF_struct_replacement_14 = _GLF_struct_14(mat3x2(1.0), _GLF_struct_3(uvec4(1u), ivec3(1), _GLF_struct_0(bvec3(true), mat2x4(1.0), mat3x2(1.0), true, bvec3(true), mat4x3(1.0), mat4(1.0)), _GLF_struct_1(mat3x2(1.0), mat3(1.0), bvec3(true), bvec2(true), vec4(1.0), 1.0, mat4x3(1.0)), _GLF_struct_2(mat2x3(1.0), mat3x2(1.0)), vec3(1.0)), bvec4(true), _GLF_struct_5(_GLF_struct_4(bvec4(true), ivec2(1)), bvec2(true)), _GLF_struct_9(1.0, uvec4(1u), _GLF_struct_6(uvec2(1u)), _GLF_struct_7(mat3x2(1.0), 1.0, mat2x3(1.0), bvec3(true), mat2(1.0), mat3(1.0), bvec4(true)), bvec2(true), _GLF_struct_8(uvec4(1u), mat2(1.0), ivec2(1)), mat2x3(1.0)), _GLF_struct_13(_GLF_struct_10(workgroup_size * workgroup_id, mat2x3(1.0)), vec3(1.0), uvec3(1u), _GLF_struct_11(bvec3(true), mat2x3(1.0), bvec4(true), mat4x3(1.0), uvec2(1u)), _GLF_struct_12(ivec4(1), mat4x2(1.0), mat2(1.0), bvec4(true)), mat3x2(1.0), ivec3(1)));
 uint subgroup_base = subgroup_id * GLF_merged4_0_1_16_1_1_13_2_1_13_3_1_13next_virtual_gidnum_workgroupsubgroup_basesubgroup_size.w;
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   for(int _injected_loop_counter = (0 & -23767); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     GLF_merged4_0_1_16_1_1_13_2_1_13_3_1_13next_virtual_gidnum_workgroupsubgroup_basesubgroup_size.z = subgroup_base;
    }
  }
 else
  {
  }
 uint virtual_gid = _GLF_struct_replacement_14._f5._f0.workgroup_base + GLF_merged4_0_1_16_1_1_13_2_1_13_3_1_13next_virtual_gidnum_workgroupsubgroup_basesubgroup_size.z + subgroup_local_id;
 _GLF_struct_18 _GLF_struct_replacement_18 = _GLF_struct_18(_GLF_struct_17(_GLF_struct_15(1, bvec4(true)), mat4x3(1.0), ivec4(1), _GLF_struct_16(mat3x4(1.0), vec4(1.0), _GLF_struct_replacement_14._f5._f0.workgroup_base + GLF_merged4_0_1_16_1_1_13_2_1_13_3_1_13next_virtual_gidnum_workgroupsubgroup_basesubgroup_size.z + ((subgroup_local_id + 1) % GLF_merged4_0_1_16_1_1_13_2_1_13_3_1_13next_virtual_gidnum_workgroupsubgroup_basesubgroup_size.w), mat3x4(1.0), mat3x2(1.0), ivec3(1), true)));
 do
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(1), int(1))); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5)))); _injected_loop_counter ++)
      {
       GLF_merged4_0_1_16_1_1_13_2_1_13_3_1_13next_virtual_gidnum_workgroupsubgroup_basesubgroup_size.x = _GLF_struct_replacement_18._f0._f3.next_virtual_gid;
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 atomicStore(buf[virtual_gid], uint(1), 4, 64, 4);
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 << _GLF_IDENTITY(int(2), int(2)))); _injected_loop_counter --)
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       if((subgroup_local_id % 2) == 0)
        {
         atomicStore(buf[GLF_merged4_0_1_16_1_1_13_2_1_13_3_1_13next_virtual_gidnum_workgroupsubgroup_basesubgroup_size.x], uint(2), 4, 64, 4);
        }
       else
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4))) & 1)); _injected_loop_counter ++)
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             atomicStore(buf[GLF_merged4_0_1_16_1_1_13_2_1_13_3_1_13next_virtual_gidnum_workgroupsubgroup_basesubgroup_size.x], uint(2), 4, 64, 4);
            }
           else
            {
            }
          }
        }
      }
    }
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
