#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     return;
    }
  }
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, (false ? _GLF_FUZZED(_injected_loop_counter) : _injected_loop_counter)), min(_GLF_IDENTITY(_injected_loop_counter, (false ? _GLF_FUZZED(_injected_loop_counter) : _injected_loop_counter)), _GLF_IDENTITY(_injected_loop_counter, (false ? _GLF_FUZZED(_injected_loop_counter) : _injected_loop_counter)))) != _GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), (_GLF_ZERO(0.0, injectionSwitch.x)) / 1.0)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(_injected_loop_counter) : int(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), (_GLF_ZERO(0.0, injectionSwitch.x)) / 1.0))))); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0), false, _GLF_IDENTITY(true, ! (! (true)))), bvec3(bvec4(bvec3(injectionSwitch.x > injectionSwitch.y, false, _GLF_IDENTITY(true, ! (! _GLF_IDENTITY((true), false || (_GLF_IDENTITY((true), ! (_GLF_IDENTITY(! ((true)), ! (! (! ((true)))))))))))), true))), bvec3(bvec4(_GLF_IDENTITY(bvec3(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0), false, _GLF_IDENTITY(true, ! (! (true)))), bvec3(bvec4(bvec3(injectionSwitch.x > injectionSwitch.y, false, _GLF_IDENTITY(true, ! (! _GLF_IDENTITY((true), false || (_GLF_IDENTITY((true), ! (_GLF_IDENTITY(! ((true)), ! (! (! ((true)))))))))))), true))), false)))))))))
      continue;
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       return;
      }
     else
      {
      }
    }
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, false || (false))))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
  }
 else
  {
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, true)), true && _GLF_IDENTITY((bool(bvec2(false, true))), (_GLF_IDENTITY((bool(bvec2(false, true))), _GLF_IDENTITY(((bool(bvec2(false, true)))), (_GLF_IDENTITY(((bool(bvec2(false, true)))), bool(bvec2(((bool(bvec2(false, true)))), false)))) && true) || false)) || false))), bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec2(false, true)), bool(_GLF_IDENTITY(bvec2(bool(bvec2(false, true)), true), bvec2(bvec2(bvec2(bool(bvec2(false, true)), true)))))), true && _GLF_IDENTITY((bool(bvec2(false, true))), (_GLF_IDENTITY((bool(bvec2(false, true))), ((bool(bvec2(false, true)))) || false)) || false))), (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, true)), true && _GLF_IDENTITY((bool(bvec2(_GLF_IDENTITY(false, bool(bool(false))), true))), _GLF_IDENTITY((_GLF_IDENTITY((bool(bvec2(false, true))), ((_GLF_IDENTITY(bool(bvec2(false, true)), (bool(bvec2(false, true))) && true))) || false)), (_GLF_IDENTITY((_GLF_IDENTITY((bool(bvec2(false, true))), ((_GLF_IDENTITY(bool(bvec2(false, true)), (bool(bvec2(false, true))) && true))) || false)), ((_GLF_IDENTITY((bool(bvec2(false, true))), ((_GLF_IDENTITY(bool(bvec2(false, true)), (bool(bvec2(false, true))) && true))) || false))) && true)) && true) || false)))) || false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true))), (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    return;
   return;
  }
 uint workgroup_base = workgroup_size * _GLF_IDENTITY(workgroup_id, min(_GLF_IDENTITY(workgroup_id, _GLF_IDENTITY(_GLF_IDENTITY((workgroup_id), uint(_GLF_IDENTITY(uint((workgroup_id)), 0u + (uint((workgroup_id)))))) / 1u, (true ? _GLF_IDENTITY((workgroup_id), uint(_GLF_IDENTITY(uint(_GLF_IDENTITY((workgroup_id), ((workgroup_id)) - 0u)), 0u + (uint(_GLF_IDENTITY((workgroup_id), max(_GLF_IDENTITY((workgroup_id), (false ? _GLF_FUZZED(num_workgroup) : _GLF_IDENTITY((workgroup_id), clamp((workgroup_id), (workgroup_id), (workgroup_id))))), (workgroup_id)))))))) / 1u : _GLF_FUZZED(workgroup_id)))), workgroup_id));
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(-5950.7577), _GLF_FUZZED(-911.325)), bvec2(_GLF_IDENTITY(false, (false) && true), false))).x > injectionSwitch.y))))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     do
      {
       for(int _injected_loop_counter = _GLF_IDENTITY(0, (0) / 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
           do
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bool(true)))))
                {
                 do
                  {
                   if(_GLF_DEAD(false))
                    return;
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                }
               else
                {
                }
               return;
               if(_GLF_DEAD(false))
                break;
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
           if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, true && (false))) || false))), bool(_GLF_IDENTITY(bvec3(bool(bool(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, true && (false))) || false))), false, true), bvec3(bvec3(bvec3(bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bool(false))), (_GLF_IDENTITY(false, _GLF_IDENTITY(true, ! (! (true))) && _GLF_IDENTITY(_GLF_IDENTITY((false), false || ((false))), ((false)) || false))) || false))), false, true))))))), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)) && true)))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              continue;
             return;
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(mat4x3(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-672.890)), float(injectionSwitch.x), bool(true))), 0.0, 1.0, 0.0, 0.0, 1.0, length(log(vec3(1.0, 1.0, 1.0))), 0.0, _GLF_ONE(1.0, injectionSwitch.y), _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0))) > injectionSwitch.y))))
            return;
           if(_GLF_DEAD(false))
            break;
           do
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               return;
               if(_GLF_DEAD(false))
                continue;
              }
             else
              {
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              break;
            }
           while(_GLF_WRAPPED_LOOP(false));
           do
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(true, bool(bvec2(_GLF_IDENTITY(true, (true) || false), false))) && (_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch), mix(vec2(((injectionSwitch))[0], _GLF_FUZZED((false ? 4762.4685 : 20.55))), vec2(_GLF_FUZZED(-9003.3595), ((injectionSwitch))[1]), bvec2(false, true)))[1], 1.0 * ((injectionSwitch)[1]))), vec2(_GLF_FUZZED(-6.9), _GLF_FUZZED(4.8)), bvec2(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-9541.0811, 94.47)) : injectionSwitch)).x > injectionSwitch.y)), false))).x > injectionSwitch.y)))), true && (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(true, bool(bvec2(_GLF_IDENTITY(true, (true) || false), false))) && (_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch), mix(vec2(((injectionSwitch))[0], _GLF_FUZZED((false ? 4762.4685 : 20.55))), vec2(_GLF_FUZZED(-9003.3595), ((injectionSwitch))[1]), bvec2(false, true)))[1], 1.0 * ((injectionSwitch)[1]))), vec2(_GLF_FUZZED(-6.9), _GLF_FUZZED(4.8)), bvec2(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-9541.0811, 94.47)) : injectionSwitch)).x > injectionSwitch.y)), false))).x > injectionSwitch.y))))))))))
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   if(_GLF_DEAD(false))
                    return;
                   return;
                  }
                }
               if(_GLF_DEAD(false))
                break;
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  break;
                 continue;
                }
              }
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     do
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
           if(_GLF_DEAD(false))
            return;
          }
         else
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             return;
            }
           else
            {
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
  }
 uint subgroup_base = subgroup_id * subgroup_size;
 if(_GLF_DEAD(false))
  {
   do
    {
     return;
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(8), int(8))); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY((1 & ((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(_GLF_IDENTITY(0, int(_GLF_IDENTITY(ivec3(0, 0, 1), (_GLF_IDENTITY(ivec3(0, 0, 1), clamp(ivec3(0, 0, 1), ivec3(0, 0, 1), ivec3(0, 0, 1)))) | (ivec3(0, 0, 1)))))), (_GLF_IDENTITY(int(_GLF_IDENTITY(0, int(_GLF_IDENTITY(ivec3(0, 0, 1), (_GLF_IDENTITY(ivec3(0, 0, 1), clamp(ivec3(0, 0, 1), ivec3(0, _GLF_IDENTITY(0, (0 >> _GLF_IDENTITY(int(8), int(8))) | (0)), 1), ivec3(0, 0, 1)))) | (ivec3(0, 0, 1)))))), (int(_GLF_IDENTITY(0, int(_GLF_IDENTITY(ivec3(0, 0, 1), (_GLF_IDENTITY(ivec3(0, 0, 1), clamp(ivec3(0, _GLF_IDENTITY(0, (_GLF_IDENTITY(0, min(0, 0))) | (0)), 1), ivec3(0, 0, 1), ivec3(0, 0, 1)))) | (ivec3(0, 0, 1))))))) - 0)) | (int(_GLF_IDENTITY(0, int(_GLF_IDENTITY(ivec3(0, 0, 1), (_GLF_IDENTITY(ivec3(0, 0, 1), clamp(ivec3(0, 0, 1), ivec3(0, 0, 1), ivec3(0, 0, 1)))) | (ivec3(0, 0, 1))))))))), (1 << _GLF_IDENTITY(int(0), int(_GLF_IDENTITY(0, int(_GLF_IDENTITY(ivec3(0, 0, 1), (_GLF_IDENTITY(ivec3(0, 0, 1), clamp(ivec3(0, 0, 1), ivec3(0, 0, 1), ivec3(0, 0, _GLF_IDENTITY(1, min(1, _GLF_IDENTITY(1, (1) | 0))))))) | (ivec3(0, 0, 1)))))))) | (1 << _GLF_IDENTITY(_GLF_IDENTITY(int(0), (int(0)) - 0), _GLF_IDENTITY(int(_GLF_IDENTITY(0, int(_GLF_IDENTITY(ivec3(0, 0, 1), (_GLF_IDENTITY(ivec3(0, 0, 1), clamp(ivec3(_GLF_IDENTITY(0, int(int(0))), 0, 1), ivec3(0, 0, 1), ivec3(0, 0, 1)))) | (ivec3(_GLF_IDENTITY(0, (0) / 1), 0, 1)))))), _GLF_IDENTITY(int(_GLF_IDENTITY(ivec4(int(_GLF_IDENTITY(0, int(_GLF_IDENTITY(ivec3(0, 0, 1), (_GLF_IDENTITY(ivec3(0, 0, 1), clamp(ivec3(_GLF_IDENTITY(0, int(int(0))), 0, 1), ivec3(0, 0, 1), ivec3(0, 0, 1)))) | (ivec3(_GLF_IDENTITY(0, (0) / 1), 0, 1)))))), 1, 0, 0), (ivec4(int(_GLF_IDENTITY(0, int(_GLF_IDENTITY(ivec3(0, 0, 1), (_GLF_IDENTITY(ivec3(0, 0, 1), clamp(ivec3(_GLF_IDENTITY(0, int(int(0))), 0, 1), ivec3(0, 0, 1), ivec3(0, 0, 1)))) | (ivec3(_GLF_IDENTITY(0, (0) / 1), 0, 1)))))), 1, 0, 0)) ^ ivec4(0, 0, 0, 0))), (false ? _GLF_FUZZED(_injected_loop_counter) : int(_GLF_IDENTITY(ivec4(int(_GLF_IDENTITY(0, int(_GLF_IDENTITY(ivec3(0, 0, 1), (_GLF_IDENTITY(ivec3(0, 0, 1), clamp(ivec3(_GLF_IDENTITY(0, int(int(0))), 0, 1), ivec3(0, 0, 1), ivec3(0, 0, 1)))) | (ivec3(_GLF_IDENTITY(0, (0) / 1), 0, 1)))))), 1, 0, 0), (ivec4(int(_GLF_IDENTITY(0, int(_GLF_IDENTITY(ivec3(0, 0, 1), (_GLF_IDENTITY(ivec3(0, 0, 1), clamp(ivec3(_GLF_IDENTITY(0, int(int(0))), 0, 1), ivec3(0, 0, 1), ivec3(0, 0, 1)))) | (ivec3(_GLF_IDENTITY(0, (0) / 1), 0, 1)))))), 1, 0, 0)) ^ ivec4(0, 0, 0, 0)))))))))) >> _GLF_IDENTITY(int(0), int(_GLF_IDENTITY(0, (0 >> _GLF_IDENTITY(int(5), int(5))) | (0)))))), ((1 & ((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(_GLF_IDENTITY(0, int(_GLF_IDENTITY(ivec3(0, 0, 1), (_GLF_IDENTITY(ivec3(0, 0, 1), clamp(ivec3(0, 0, 1), ivec3(0, 0, 1), ivec3(0, 0, 1)))) | (ivec3(0, 0, 1)))))), (_GLF_IDENTITY(int(_GLF_IDENTITY(0, int(_GLF_IDENTITY(ivec3(0, 0, 1), (_GLF_IDENTITY(ivec3(0, 0, 1), clamp(ivec3(0, 0, 1), ivec3(0, _GLF_IDENTITY(0, (0 >> _GLF_IDENTITY(int(8), int(8))) | (0)), 1), ivec3(0, 0, 1)))) | (ivec3(0, 0, 1)))))), (int(_GLF_IDENTITY(0, int(_GLF_IDENTITY(ivec3(0, 0, 1), (_GLF_IDENTITY(ivec3(0, 0, 1), clamp(ivec3(0, _GLF_IDENTITY(0, (_GLF_IDENTITY(0, min(0, 0))) | (0)), 1), ivec3(0, 0, 1), ivec3(0, 0, 1)))) | (ivec3(0, 0, 1))))))) - 0)) | (int(_GLF_IDENTITY(0, int(_GLF_IDENTITY(ivec3(0, 0, 1), (_GLF_IDENTITY(ivec3(0, 0, 1), clamp(ivec3(0, 0, 1), ivec3(0, 0, 1), ivec3(0, 0, 1)))) | (ivec3(0, 0, 1))))))))), (1 << _GLF_IDENTITY(int(0), int(_GLF_IDENTITY(0, int(_GLF_IDENTITY(ivec3(0, 0, 1), (_GLF_IDENTITY(ivec3(0, 0, 1), clamp(ivec3(0, 0, 1), ivec3(0, 0, 1), ivec3(0, 0, _GLF_IDENTITY(1, min(1, _GLF_IDENTITY(1, (1) | 0))))))) | (ivec3(0, 0, 1)))))))) | (1 << _GLF_IDENTITY(_GLF_IDENTITY(int(0), (int(0)) - 0), _GLF_IDENTITY(int(_GLF_IDENTITY(0, int(_GLF_IDENTITY(ivec3(0, 0, 1), (_GLF_IDENTITY(ivec3(0, 0, 1), clamp(ivec3(_GLF_IDENTITY(0, int(int(0))), 0, 1), ivec3(0, 0, 1), ivec3(0, 0, 1)))) | (ivec3(_GLF_IDENTITY(0, (0) / 1), 0, 1)))))), _GLF_IDENTITY(int(_GLF_IDENTITY(ivec4(int(_GLF_IDENTITY(0, int(_GLF_IDENTITY(ivec3(0, 0, 1), (_GLF_IDENTITY(ivec3(0, 0, 1), clamp(ivec3(_GLF_IDENTITY(0, int(int(0))), 0, 1), ivec3(0, 0, 1), ivec3(0, 0, 1)))) | (ivec3(_GLF_IDENTITY(0, (0) / 1), 0, 1)))))), 1, 0, 0), (ivec4(int(_GLF_IDENTITY(0, int(_GLF_IDENTITY(ivec3(0, 0, 1), (_GLF_IDENTITY(ivec3(0, 0, 1), clamp(ivec3(_GLF_IDENTITY(0, int(int(0))), 0, 1), ivec3(0, 0, 1), ivec3(0, 0, 1)))) | (ivec3(_GLF_IDENTITY(0, (0) / 1), 0, 1)))))), 1, 0, 0)) ^ ivec4(0, 0, 0, 0))), (false ? _GLF_FUZZED(_injected_loop_counter) : int(_GLF_IDENTITY(ivec4(int(_GLF_IDENTITY(0, int(_GLF_IDENTITY(ivec3(0, 0, 1), (_GLF_IDENTITY(ivec3(0, 0, 1), clamp(ivec3(_GLF_IDENTITY(0, int(int(0))), 0, 1), ivec3(0, 0, 1), ivec3(0, 0, 1)))) | (ivec3(_GLF_IDENTITY(0, (0) / 1), 0, 1)))))), 1, 0, 0), (ivec4(int(_GLF_IDENTITY(0, int(_GLF_IDENTITY(ivec3(0, 0, 1), (_GLF_IDENTITY(ivec3(0, 0, 1), clamp(ivec3(_GLF_IDENTITY(0, int(int(0))), 0, 1), ivec3(0, 0, 1), ivec3(0, 0, 1)))) | (ivec3(_GLF_IDENTITY(0, (0) / 1), 0, 1)))))), 1, 0, 0)) ^ ivec4(0, 0, 0, 0)))))))))) >> _GLF_IDENTITY(int(0), int(_GLF_IDENTITY(0, (0 >> _GLF_IDENTITY(int(5), int(5))) | (0))))))) / 1)); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y))))))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(true, (true) || false)), (bool(_GLF_IDENTITY(true, (true) || false))) || false)))))
            {
             return;
            }
           else
            {
            }
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
         return;
         if(_GLF_DEAD(false))
          continue;
        }
      }
     else
      {
       if(_GLF_DEAD(false))
        break;
      }
     return;
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  return;
 uint virtual_gid = workgroup_base + subgroup_base + subgroup_local_id;
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (true ? _GLF_IDENTITY(_injected_loop_counter, 1 * (_GLF_IDENTITY(_injected_loop_counter, 1 * (_injected_loop_counter)))) : _GLF_FUZZED(_injected_loop_counter))) != ((1 << _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), _GLF_IDENTITY((int(2)) | (_GLF_IDENTITY(int(2), max(_GLF_IDENTITY(int(2), (true ? int(2) : _GLF_FUZZED(_injected_loop_counter))), _GLF_IDENTITY(int(2), int(ivec3(int(2), int(_GLF_ONE(1.0, injectionSwitch.y)), 1)))))), min(_GLF_IDENTITY((int(2)), ((int(2))) >> 0) | _GLF_IDENTITY((int(2)), (_GLF_IDENTITY((int(2)), ((int(2))) ^ 0)) ^ 0), _GLF_IDENTITY((int(2)) | (int(2)), clamp(_GLF_IDENTITY((int(2)), ((int(2))) << 0) | (int(_GLF_IDENTITY(2, (_GLF_IDENTITY(2, (2) / 1)) / 1))), (int(2)) | (int(2)), _GLF_IDENTITY((_GLF_IDENTITY(int(2), int(ivec3(_GLF_IDENTITY(int(2), ~ (~ (int(2)))), 1, 0)))) | (int(2)), ((int(2)) | (int(2))) * 1)))))))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(2, (0 >> _GLF_IDENTITY(int(8), int(8))) | (_GLF_IDENTITY(2, min(2, 2))))), int(2)))); _injected_loop_counter ++)
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY((_GLF_DEAD(false)) || false, ! (! (_GLF_IDENTITY((_GLF_DEAD(false)) || false, ((_GLF_DEAD(false)) || false) && true))))))))))))
    {
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      continue;
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter ++, 0 ^ (_injected_loop_counter ++)), ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (_injected_loop_counter ++), (~ (_injected_loop_counter ++)) / 1), ~ (~ (_GLF_IDENTITY(~ (_injected_loop_counter ++), (~ (_injected_loop_counter ++)) / 1)))))))
      {
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(false))
        break;
       return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(vec4(injectionSwitch, 1.0, tan(0.0)))).y))))
        {
         for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 | 0)); _injected_loop_counter --)
          {
           if(_GLF_DEAD(false))
            return;
          }
         for(int _injected_loop_counter = _GLF_IDENTITY(1, max(1, 1)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) && true))
              {
              }
             else
              {
               return;
              }
             if(_GLF_DEAD(false))
              break;
            }
          }
         if(_GLF_DEAD(false))
          continue;
         for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(6), int(_GLF_IDENTITY(6, max(_GLF_IDENTITY(6, (6) - 0), 6))))) >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), 0 | (int(6))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((0 >> _GLF_IDENTITY(int(6), int(6))) & -71959)); _injected_loop_counter --)
          {
           return;
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
       if(_GLF_DEAD(false))
        return;
      }
     if(_GLF_DEAD(false))
      break;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    break;
   if(_GLF_DEAD(false))
    break;
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      return;
    }
  }
 else
  {
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, false || (false))))
  {
  }
 else
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, (true) && true))), (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           do
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(true, false || (true)), (_GLF_IDENTITY(true, false || (true))) && true)))
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  break;
                 break;
                }
               do
                {
                 return;
                }
               while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, false || (false))));
              }
             else
              {
              }
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).x > injectionSwitch.y))));
          }
         else
          {
          }
        }
      }
    }
   else
    {
    }
  }
 uint next_virtual_gid = workgroup_base + subgroup_base + ((subgroup_local_id + 1) % subgroup_size);
 if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))) && true))))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > ((0 >> _GLF_IDENTITY(int(3), int(3))) & 58151)); _injected_loop_counter --)
  {
   atomicStore(buf[_GLF_IDENTITY(virtual_gid, clamp(_GLF_IDENTITY(virtual_gid, (_GLF_IDENTITY(virtual_gid, _GLF_IDENTITY((virtual_gid) << 0u, 0u + ((virtual_gid) << 0u)))) | _GLF_IDENTITY((_GLF_IDENTITY(virtual_gid, (virtual_gid) >> (0u | 0u))), min(_GLF_IDENTITY((_GLF_IDENTITY(virtual_gid, (virtual_gid) >> (0u | 0u))), 0u + ((_GLF_IDENTITY(virtual_gid, (virtual_gid) >> (0u | 0u))))), (_GLF_IDENTITY(virtual_gid, (virtual_gid) >> (0u | 0u)))))), virtual_gid, virtual_gid))], uint(1), 4, _GLF_IDENTITY(_GLF_IDENTITY(64, (64) * 1), int(ivec4(64, _GLF_IDENTITY(_GLF_IDENTITY(0, (0) >> int(_GLF_ZERO(0.0, injectionSwitch.x))), int(_GLF_IDENTITY(ivec3(0, ((_GLF_IDENTITY(_GLF_IDENTITY(1, int(ivec2(1, 0))), (_GLF_IDENTITY(1, int(ivec2(1, 0)))) >> 0) << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4))), 0), ivec3(_GLF_IDENTITY(ivec3(ivec3(0, ((1 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), clamp(int(4), int(4), _GLF_IDENTITY(int(4), (int(4)) << 0))))) >> _GLF_IDENTITY(int(4), int(4))), 0)), _GLF_IDENTITY(_GLF_IDENTITY((ivec3(ivec3(0, ((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), (_GLF_IDENTITY(int(_GLF_IDENTITY(4, int(ivec3(4, 1, 0)))), int(4))) - (0 & (-84245 >> 8890)))), 0))), _GLF_IDENTITY(ivec3(ivec3((ivec3(ivec3(0, ((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), (_GLF_IDENTITY(int(_GLF_IDENTITY(4, int(ivec3(4, 1, 0)))), int(4))) - (0 & (-84245 >> 8890)))), 0))))), max(ivec3(ivec3((ivec3(ivec3(0, ((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), (_GLF_IDENTITY(int(_GLF_IDENTITY(4, int(ivec3(4, 1, 0)))), int(4))) - (0 & (-84245 >> 8890)))), 0))))), ivec3(ivec3((ivec3(ivec3(0, ((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), (_GLF_IDENTITY(int(_GLF_IDENTITY(4, int(ivec3(4, 1, 0)))), int(4))) - (0 & (-84245 >> 8890)))), 0)))))))) - _GLF_IDENTITY(ivec3(0, 0, 0), (ivec3(0, 0, 0)) << ivec3(0, 0, 0)), ~ (~ (_GLF_IDENTITY((ivec3(ivec3(0, ((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(4, 1 * (4))), int(4))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), (_GLF_IDENTITY(int(_GLF_IDENTITY(4, int(ivec3(4, 1, 0)))), int(4))) - (0 & (-84245 >> 8890)))), 0))), _GLF_IDENTITY(ivec3(ivec3((ivec3(ivec3(0, ((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (int(4)) | (int(4)))), (_GLF_IDENTITY(int(_GLF_IDENTITY(4, int(ivec3(4, 1, 0)))), int(4))) - (0 & (-84245 >> 8890)))), 0))))), max(ivec3(ivec3((ivec3(ivec3(0, ((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(4, int(ivec4(4, 1, 0, 0)))), int(4))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), (_GLF_IDENTITY(int(_GLF_IDENTITY(4, int(ivec3(4, 1, 0)))), int(4))) - (0 & (-84245 >> 8890)))), 0))))), ivec3(ivec3((ivec3(ivec3(0, _GLF_IDENTITY(((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), (_GLF_IDENTITY(int(_GLF_IDENTITY(4, int(_GLF_IDENTITY(ivec3(4, 1, 0), ivec3(0, 0, 0) | (ivec3(4, 1, 0)))))), int(4))) - (0 & (-84245 >> 8890)))), (((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), (_GLF_IDENTITY(int(_GLF_IDENTITY(4, int(_GLF_IDENTITY(ivec3(4, 1, 0), ivec3(0, 0, 0) | (ivec3(4, 1, 0)))))), int(4))) - (0 & (-84245 >> 8890))))) / 1), 0)))))))) - _GLF_IDENTITY(_GLF_IDENTITY(ivec3(0, 0, 0), (ivec3(0, 0, 0)) << ivec3(0, 0, 0)), _GLF_IDENTITY(ivec3(ivec4(_GLF_IDENTITY(_GLF_IDENTITY(ivec3(0, 0, 0), (ivec3(0, 0, 0)) << ivec3(0, 0, 0)), ~ (~ (_GLF_IDENTITY(ivec3(0, 0, 0), (ivec3(0, 0, 0)) << ivec3(0, 0, 0))))), 1)), (ivec3(ivec4(_GLF_IDENTITY(_GLF_IDENTITY(ivec3(0, 0, 0), (ivec3(0, 0, 0)) << ivec3(0, 0, 0)), ~ (~ (_GLF_IDENTITY(ivec3(0, 0, 0), (ivec3(0, 0, 0)) << ivec3(0, 0, 0))))), 1))) | (ivec3(ivec4(_GLF_IDENTITY(_GLF_IDENTITY(ivec3(0, 0, 0), (ivec3(0, 0, 0)) << ivec3(0, 0, 0)), ~ (~ (_GLF_IDENTITY(ivec3(0, 0, 0), (ivec3(0, 0, 0)) << ivec3(0, 0, 0))))), 1))))))))))))), 1, _GLF_IDENTITY(1, (1) >> 0)))), 4);
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), false || (_GLF_WRAPPED_IF_TRUE(true))), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec3(bvec4(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), false || _GLF_IDENTITY((_GLF_WRAPPED_IF_TRUE(true)), (_GLF_IDENTITY((_GLF_WRAPPED_IF_TRUE(true)), bool(bool((_GLF_WRAPPED_IF_TRUE(true)))))) || false)), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true)))), (bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), false || (_GLF_WRAPPED_IF_TRUE(true)))))), false || (_GLF_WRAPPED_IF_TRUE(true))), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec3(bvec4(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), false || (_GLF_WRAPPED_IF_TRUE(true))), true, _GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ! (! ((injectionSwitch.x < injectionSwitch.y)))))))), true))))) || false)), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), false || (_GLF_WRAPPED_IF_TRUE(true))), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec3(bvec4(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), false || _GLF_IDENTITY((_GLF_WRAPPED_IF_TRUE(true)), (_GLF_IDENTITY((_GLF_WRAPPED_IF_TRUE(true)), bool(bool((_GLF_WRAPPED_IF_TRUE(true)))))) || false)), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true)))), (bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), false || (_GLF_WRAPPED_IF_TRUE(true)))))), false || (_GLF_WRAPPED_IF_TRUE(true))), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec3(bvec4(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), false || (_GLF_WRAPPED_IF_TRUE(true))), true, _GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ! (! ((injectionSwitch.x < injectionSwitch.y)))))))), true))))) || false)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false || (bool(bvec2(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), false || (_GLF_WRAPPED_IF_TRUE(true))), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec3(bvec4(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), false || _GLF_IDENTITY((_GLF_WRAPPED_IF_TRUE(true)), (_GLF_IDENTITY((_GLF_WRAPPED_IF_TRUE(true)), bool(bool((_GLF_WRAPPED_IF_TRUE(true)))))) || false)), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true)))), (bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), false || (_GLF_WRAPPED_IF_TRUE(true)))))), false || (_GLF_WRAPPED_IF_TRUE(true))), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec3(bvec4(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), false || (_GLF_WRAPPED_IF_TRUE(true))), true, _GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ! (! ((injectionSwitch.x < injectionSwitch.y)))))))), true))))) || false)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))
    {
     if(_GLF_DEAD(false))
      return;
     for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 ^ 1)); _injected_loop_counter --)
      {
       for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
           return;
          }
        }
      }
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
  }
 else
  {
  }
 do
  {
   if(_GLF_DEAD(false))
    break;
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     for(int _injected_loop_counter = _GLF_IDENTITY(1, min(1, _GLF_IDENTITY(1, (1) * (0 ^ 1)))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > (0 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), max(int(3), int(3))))), true && (_injected_loop_counter > (0 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), max(int(3), int(3)))))))); _injected_loop_counter --)
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            continue;
           return;
          }
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        return;
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 if(_GLF_DEAD(false))
  return;
 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, false || (true)))))))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
    return;
   if(_GLF_DEAD(false))
    {
     do
      {
       return;
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     if(_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id % _GLF_IDENTITY(2, clamp(_GLF_IDENTITY(2, min(2, 2)), 2, 2))) == 0, ((subgroup_local_id % _GLF_IDENTITY(2, clamp(_GLF_IDENTITY(2, min(2, 2)), 2, 2))) == 0) && true), ! (! ((subgroup_local_id % _GLF_IDENTITY(2, clamp(_GLF_IDENTITY(2, min(2, 2)), 2, 2))) == 0))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)).x > _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(8764.1393, 7020.5066)))).y))))
        continue;
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, _GLF_IDENTITY(true, (true) && true), false)))))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(mat4x3(injectionSwitch.x, 1.0, exp(0.0), 0.0, abs(1.0), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y), exp(0.0), 0.0, abs(1.0), 1.0, 1.0))) > injectionSwitch.y))))
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
            {
             if(_GLF_DEAD(false))
              return;
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
          }
         else
          {
           do
            {
             return;
            }
           while(_GLF_WRAPPED_LOOP(false));
           if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec3(! (false), true, true)))))))
            continue;
          }
        }
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         atomicStore(buf[next_virtual_gid], uint(2), 4, 64, 4);
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        return;
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(mat3x2(injectionSwitch.x, 1.0, 1.0, _GLF_ZERO(_GLF_IDENTITY(0.0, clamp(_GLF_IDENTITY(0.0, min(0.0, 0.0)), 0.0, 0.0)), injectionSwitch.x), 1.0, 0.0))) > injectionSwitch.y))))
          continue;
         continue;
        }
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          break;
         for(int _injected_loop_counter = (0 | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), true && ((injectionSwitch.x < injectionSwitch.y)))) || false))))
            {
             for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                return;
              }
            }
           else
            {
            }
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
             if(_GLF_DEAD(false))
              return;
            }
           else
            {
             if(_GLF_DEAD(false))
              break;
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
              }
             else
              {
               return;
              }
            }
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
         if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bvec4(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, true)))))
          {
          }
         else
          {
           return;
           if(_GLF_DEAD(false))
            {
             if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false)))))
              break;
             continue;
            }
          }
        }
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_DEAD(false))
          return;
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec4(false, false, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bool(bvec2(bool(bvec4(false, false, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true))), false || _GLF_IDENTITY(_GLF_IDENTITY((bool(bvec4(_GLF_IDENTITY(false, ! (! (false))), false, true, _GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(bvec4((injectionSwitch.x > injectionSwitch.y), true, true, false)), (_GLF_IDENTITY(bool(bvec4((_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(min(injectionSwitch.y, injectionSwitch.y), max(_GLF_IDENTITY(min(injectionSwitch.y, injectionSwitch.y), clamp(min(injectionSwitch.y, injectionSwitch.y), min(injectionSwitch.y, injectionSwitch.y), min(injectionSwitch.y, injectionSwitch.y))), min(injectionSwitch.y, injectionSwitch.y)))))), ! (! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)))))))), true, true, false)), bool(bool(_GLF_IDENTITY(bool(bvec4((injectionSwitch.x > injectionSwitch.y), true, true, false)), bool(_GLF_IDENTITY(bool(bool(bvec4((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(true, bool(_GLF_IDENTITY(bool(true), ! (_GLF_IDENTITY(! (bool(true)), ! (! (! (bool(true))))))))), true, false))), (bool(bool(bvec4((injectionSwitch.x > injectionSwitch.y), true, true, false)))) && true))))))) || false)))))), _GLF_FALSE(_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, ! (! (false))), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY((bool(bvec4(_GLF_IDENTITY(false, ! (! (false))), false, true, _GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(bvec4((injectionSwitch.x > injectionSwitch.y), true, true, false)), (_GLF_IDENTITY(bool(bvec4((injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))), true, true, false)), bool(bool(bool(bvec4((injectionSwitch.x > injectionSwitch.y), true, true, false)))))) || false)))))), ! (_GLF_IDENTITY(! ((bool(bvec4(_GLF_IDENTITY(false, ! (! (false))), false, true, _GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(bvec4((injectionSwitch.x > injectionSwitch.y), true, true, false)), (_GLF_IDENTITY(bool(bvec4((injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))), true, true, false)), bool(bool(bool(bvec4((injectionSwitch.x > injectionSwitch.y), true, true, false)))))) || false))))))), ! (! (! ((bool(bvec4(_GLF_IDENTITY(false, ! (! (false))), false, true, _GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(bvec4((injectionSwitch.x > injectionSwitch.y), true, true, false)), (_GLF_IDENTITY(bool(bvec4((injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))), true, true, false)), bool(bool(bool(bvec4((injectionSwitch.x > injectionSwitch.y), true, true, false)))))) || false)))))))))))))), bool(bvec2(_GLF_IDENTITY((bool(bvec4(_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), ! (! (! (! (false)))))), false, true, _GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))) - 0.0), ! (! (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x > injectionSwitch.y)))), _GLF_IDENTITY(bool(bvec4((_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y), true, true, false)), (_GLF_IDENTITY(bool(bvec4((injectionSwitch.x > injectionSwitch.y), true, true, false)), bool(bool(bool(bvec4((injectionSwitch.x > injectionSwitch.y), true, true, _GLF_IDENTITY(false, ! (! (false))))))))) || false)))))), ((bool(bvec4(_GLF_IDENTITY(false, ! (! (false))), false, true, _GLF_FALSE(_GLF_IDENTITY(false, (false) && true), _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(bvec4((injectionSwitch.x > injectionSwitch.y), true, _GLF_IDENTITY(true, (true) || false), false)), (_GLF_IDENTITY(_GLF_IDENTITY(bool(bvec4((injectionSwitch.x > injectionSwitch.y), true, true, false)), bool(bool(bool(bvec4((injectionSwitch.x > injectionSwitch.y), true, true, false))))), false || (_GLF_IDENTITY(_GLF_IDENTITY(bool(bvec4((injectionSwitch.x > injectionSwitch.y), true, true, false)), bool(bool(bool(bvec4((injectionSwitch.x > injectionSwitch.y), true, true, false))))), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(bool(bvec4((injectionSwitch.x > injectionSwitch.y), true, true, false)), bool(bool(bool(bvec4((injectionSwitch.x > injectionSwitch.y), true, true, false))))), true, false, true)), ! (! (bool(bvec4(_GLF_IDENTITY(bool(bvec4((injectionSwitch.x > injectionSwitch.y), true, true, false)), bool(bool(bool(bvec4((injectionSwitch.x > injectionSwitch.y), true, true, false))))), true, false, true))))))))) || false))))))) && true), true))))), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)))))
            {
             if(_GLF_DEAD(false))
              continue;
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y))))
              {
              }
             else
              {
               if(_GLF_DEAD(false))
                continue;
               return;
               if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
                break;
              }
             if(_GLF_DEAD(false))
              break;
             if(_GLF_DEAD(false))
              continue;
            }
           return;
           if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
            continue;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
          }
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) / 1) != 1); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              return;
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     return;
                    }
                   else
                    {
                     if(_GLF_DEAD(false))
                      return;
                    }
                  }
                }
               if(_GLF_DEAD(false))
                continue;
               return;
              }
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (68697 & 0)); _injected_loop_counter --)
              {
               for(int _injected_loop_counter = (_GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)) >> _GLF_IDENTITY(int(4), int(4)), (_GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)) >> _GLF_IDENTITY(int(4), int(4)), (int(_GLF_ZERO(0.0, injectionSwitch.x)) >> _GLF_IDENTITY(int(4), int(4))) - 0)) | (int(_GLF_ZERO(0.0, injectionSwitch.x)) >> _GLF_IDENTITY(int(4), int(4))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                {
                 if(_GLF_DEAD(false))
                  {
                   do
                    {
                     return;
                     if(_GLF_DEAD(false))
                      continue;
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                  }
                }
              }
             if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(4.4) : injectionSwitch.y))), ! (! ((injectionSwitch.x > injectionSwitch.y))))) || false))))
              {
               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                }
               else
                {
                 if(_GLF_DEAD(false))
                  return;
                }
               break;
              }
             if(_GLF_DEAD(false))
              break;
             do
              {
               return;
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
            continue;
          }
         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, _GLF_IDENTITY(false, bool(bvec2(false, false))), true), bvec3(bvec4(bvec3(false, false, true), true)))))))
          break;
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
         break;
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < ((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), (int(7)) - 0)))), (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < ((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(7, clamp(_GLF_IDENTITY(7, (7) / 1), 7, _GLF_IDENTITY(7, int(int(7)))))), _GLF_IDENTITY(int(7), (int(7)) - 0)))), (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) << 0) < (_GLF_IDENTITY((int(_GLF_ONE(1.0, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), mix(float(_GLF_FUZZED((+ vec3(-1.9, 3679.2118, 7832.1859).r))), float(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), mix(float(_GLF_FUZZED(-5986.0471)), float(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))), bool(true)))), bool(true))))) << _GLF_IDENTITY(_GLF_IDENTITY(int(7), clamp(int(7), int(7), int(7))), int(7))), ~ (~ ((int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)))) << _GLF_IDENTITY(_GLF_IDENTITY(int(7), clamp(int(7), int(7), int(7))), int(7)))))) >> _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), _GLF_IDENTITY((int(7)) - 0, (false ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY((int(7)) - 0, (true ? (int(7)) - 0 : _GLF_FUZZED(atomicExchange(_injected_loop_counter, _injected_loop_counter))))))))))) || false)) || _GLF_IDENTITY(false, true && (false))); _injected_loop_counter ++)
        {
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false))))) || false))
          break;
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = 0; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), bool(bvec3(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), true, false))); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(false))
              {
               for(int _injected_loop_counter = _GLF_IDENTITY(1, _GLF_IDENTITY((1), clamp((1), (1), _GLF_IDENTITY((1), ((1)) | ((1))))) << 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                {
                 for(int _injected_loop_counter = (int(_GLF_ONE(_GLF_IDENTITY(1.0, (1.0) + 0.0), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).y) - 0.0), clamp(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0), mix(float(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0), max(_GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY((injectionSwitch.y) - 0.0, clamp((injectionSwitch.y) - 0.0, _GLF_IDENTITY((injectionSwitch.y) - 0.0, ((injectionSwitch.y) - 0.0) + 0.0), (injectionSwitch.y) - 0.0))), _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0)))), float(_GLF_FUZZED(vec4(-1.1, -43.05, -3.7, -18.16).z)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0), _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0))))) ^ 1); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < _GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), max(_GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), clamp(int(_GLF_ONE(1.0, injectionSwitch.y)), int(_GLF_ONE(1.0, injectionSwitch.y)), int(_GLF_ONE(1.0, injectionSwitch.y)))), (_GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), clamp(int(_GLF_ONE(1.0, injectionSwitch.y)), int(_GLF_ONE(1.0, injectionSwitch.y)), int(_GLF_ONE(1.0, injectionSwitch.y))))) + (1 ^ 1)), int(_GLF_ONE(1.0, injectionSwitch.y)))), false || (_injected_loop_counter < _GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), max(_GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), clamp(int(_GLF_ONE(1.0, injectionSwitch.y)), int(_GLF_ONE(1.0, injectionSwitch.y)), int(_GLF_ONE(1.0, injectionSwitch.y)))), int(_GLF_ONE(1.0, injectionSwitch.y))))))); _injected_loop_counter ++)
                  {
                   return;
                   if(_GLF_DEAD(false))
                    continue;
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    continue;
                  }
                }
              }
            }
           if(_GLF_DEAD(false))
            return;
           break;
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
              break;
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 return;
                }
               else
                {
                }
              }
            }
          }
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
          {
           atomicStore(buf[next_virtual_gid], uint(2), 4, 64, 4);
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             return;
            }
           else
            {
            }
          }
        }
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), min(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), (_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch))) - vec2(0.0, 0.0)), _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)))))).x > injectionSwitch.y))), true && (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec2((_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), vec2(mat3(mat2(1.0) * (injectionSwitch), 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0)))).y, false || (injectionSwitch.x > injectionSwitch.y))), false))), false || (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))), _GLF_IDENTITY(true && ((injectionSwitch.x > injectionSwitch.y)), (true && ((injectionSwitch.x > injectionSwitch.y))) && true))))))) || false))))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch)).x > injectionSwitch.y))))
          {
          }
         else
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! _GLF_IDENTITY((_GLF_IDENTITY(! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x, _GLF_ONE(1.0, injectionSwitch.y) * (injectionSwitch.x)) > injectionSwitch.y) && true)))), false || _GLF_IDENTITY((_GLF_IDENTITY(! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y, (injectionSwitch.x > injectionSwitch.y) && true))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0)), (_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0)), true && ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0))))) || false) && true))))) && true)), true && ((_GLF_IDENTITY(! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(1393.2097), _GLF_FUZZED((0.8))), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))).x > injectionSwitch.y) && true)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)), ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true))) || false)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(52.45) : injectionSwitch.y)))) || (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x > injectionSwitch.y, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0)) && true))))) && true)))))), false || ((_GLF_IDENTITY(! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-4295.1786)), float(injectionSwitch.y), bool(true))))) || (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)))), false || _GLF_IDENTITY((_GLF_IDENTITY(! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)))))) && _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(float(187962u))), float(injectionSwitch.y), bool(true)))))))), (! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(_GLF_IDENTITY(bvec2(injectionSwitch.x > injectionSwitch.y, false), bvec2(bvec4(bvec2(injectionSwitch.x > injectionSwitch.y, false), false, true))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0), ! (_GLF_IDENTITY(! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0)), bool(bvec3(! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0)), false, true)))))) && true))))) && true)), true && ((_GLF_IDENTITY(! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(5948.3609)), bool(false))))) || (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)), _GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))) && true))), false || ((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))) && true))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(65.76))), injectionSwitch.x, injectionSwitch.x)) > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(vec4(injectionSwitch, 0.0, 0.0), (vec4(injectionSwitch, 0.0, 0.0)) * mat4(1.0)))).y) - 0.0)) && true))))) && true)))))))))))))
              return;
            }
           else
            {
            }
          }
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0)))))
          {
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(false))
            break;
           if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
            continue;
          }
         else
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(false))
                continue;
               if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
                break;
               continue;
              }
             continue;
             if(_GLF_DEAD(false))
              continue;
             if(_GLF_DEAD(false))
              break;
            }
           return;
          }
         if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
          {
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_DEAD(false))
            continue;
           continue;
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) || false)))
            {
            }
           else
            {
             return;
            }
          }
        }
       for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1)))); _GLF_IDENTITY(_injected_loop_counter ++, _GLF_IDENTITY((0 | 0), ((0 | 0)) << 0) | (_injected_loop_counter ++)))
        {
         do
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              continue;
             return;
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
        }
      }
    }
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
