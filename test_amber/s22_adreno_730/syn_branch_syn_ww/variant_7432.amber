#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (false)), ((! (false))) || false))))
  return;
 uvec4 GLF_merged4_0_1_13_1_1_11_2_1_12_3_1_14subgroup_basesubgroup_idworkgroup_idworkgroup_size;
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     do
      {
       return;
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0) > injectionSwitch.y))), bool(bvec3(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, true)))) || false))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
    }
  }
 for(int _injected_loop_counter = 0; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))); _injected_loop_counter ++)
  {
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), (injectionSwitch.x > injectionSwitch.y))), bool(bvec2(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(false, bool(bool(false)))))))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         return;
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        return;
      }
     else
      {
      }
    }
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     return;
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, ! (! (false))), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)))))
  return;
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 for(int _injected_loop_counter = _GLF_IDENTITY((0 & -19584), int(ivec3((0 & -19584), 0, 0))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-43314) : _injected_loop_counter)) < (((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(2), int(2)), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(int(2), int(2))), (~ (_GLF_IDENTITY(int(2), int(2)))) / 1)))) >> _GLF_IDENTITY(int(2), int(2))) | ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1))))); _injected_loop_counter ++)
  {
   _GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_11_2_1_12_3_1_14subgroup_basesubgroup_idworkgroup_idworkgroup_size.y = subgroup_id, (false ? _GLF_FUZZED(bitfieldExtract(7095u, 83889, _GLF_IDENTITY((46817 / -57305), (_GLF_IDENTITY((46817 / -57305), clamp((46817 / -57305), (46817 / -57305), (46817 / -57305)))) >> 0))) : GLF_merged4_0_1_13_1_1_11_2_1_12_3_1_14subgroup_basesubgroup_idworkgroup_idworkgroup_size.y = subgroup_id)), ~ (~ (GLF_merged4_0_1_13_1_1_11_2_1_12_3_1_14subgroup_basesubgroup_idworkgroup_idworkgroup_size.y = subgroup_id)));
  }
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), ! (! (_GLF_WRAPPED_IF_TRUE(true)))))
  {
   for(int _injected_loop_counter = (1 ^ 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))), _GLF_IDENTITY(bool(bvec3(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))), _GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec3(! (false), true, _GLF_IDENTITY(true, bool(bool(true)))))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(true, (true) && true), false)), ! _GLF_IDENTITY(_GLF_IDENTITY((! (bool(bvec4(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec3(! (false), true, true))))), _GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch)).y), bool(_GLF_IDENTITY(bool((injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(bool((injectionSwitch.x > injectionSwitch.y)), bool(bvec4(bool((injectionSwitch.x > injectionSwitch.y)), false, true, true)))) || false)))), true, false)))), ((! (bool(bvec4(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec3(! (false), true, true))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false))))) && true), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY((! (bool(bvec4(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(_GLF_IDENTITY(bvec3(! (false), true, true), _GLF_IDENTITY(bvec3(bvec3(bvec3(! (false), true, true))), bvec3(bvec3(bvec3(bvec3(bvec3(! (false), true, true))))))))))), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(4106.6719) : injectionSwitch.x)), injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x)) > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_IDENTITY((injectionSwitch)[0], max((injectionSwitch)[0], (injectionSwitch)[0])), (injectionSwitch)[1]), vec2(_GLF_FUZZED(-0.8), _GLF_FUZZED(5.1)), bvec2(false, false))).y)), true, _GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (false)))))), true, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))), ((! (_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(! (false), true && (_GLF_IDENTITY(! (false), (! (false)) || false))), bool(bvec3(! (false), true, _GLF_IDENTITY(true, (true) || false)))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(! (false), bool(bvec3(! (false), true, true)))), true && (bool(_GLF_IDENTITY(! (false), bool(bvec3(! (false), true, true))))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(! (false), bool(bvec3(! (false), true, true)))), true && (bool(_GLF_IDENTITY(! _GLF_IDENTITY((false), ! (! ((false)))), bool(bvec3(! (false), true, true)))))))))))), _GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (injectionSwitch.x > injectionSwitch.y)), true, false)), bool(bool(bool(bvec4(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(_GLF_IDENTITY(! (false), bool(bvec3(! (false), _GLF_IDENTITY(true, (true) || false), true))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(! (false), bool(bvec3(! (false), _GLF_IDENTITY(true, ! (! (true))), true)))), true && (bool(_GLF_IDENTITY(! (false), bool(bvec3(! (false), true, true))))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(! (false), bool(bvec3(! (false), true, true)))), true && (bool(_GLF_IDENTITY(! (false), bool(bvec3(! (false), true, true)))))))))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false)))))))) && true), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)), ! (! (bool(bvec4(_GLF_IDENTITY((! (bool(bvec4(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), _GLF_IDENTITY(bool(bvec3(! (false), true, true)), ! (! (bool(bvec3(! (false), true, true)))))))), _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0), _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(5034.0896)), bool(false))))))), true, _GLF_IDENTITY(false, bool(bvec4(false, true, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))), ((! (_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(_GLF_IDENTITY(! (false), bool(_GLF_IDENTITY(bvec3(! (false), true, true), bvec3(bvec3(bvec3(! (false), true, true)))))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(! (false), bool(bvec3(! (false), true, true)))), true && (bool(_GLF_IDENTITY(! (false), bool(bvec3(! (false), true, true))))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(! (false), bool(bvec3(! (false), true, true)))), _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), (! (true)) || false))) && (bool(_GLF_IDENTITY(! (false), bool(bvec3(! (false), true, true)))))))))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false)), bool(bool(bool(bvec4(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(_GLF_IDENTITY(! (false), bool(bvec3(! (false), _GLF_IDENTITY(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(true, bool(bvec4(true, true, false, true))))), true))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(! (false), bool(bvec3(! (false), true, true)))), true && (bool(_GLF_IDENTITY(! (false), bool(bvec3(! (false), true, true))))))), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x > injectionSwitch.y)) || (bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(! (false), bool(bvec3(! (false), true, true)))), true && (bool(_GLF_IDENTITY(! (false), bool(bvec3(! (false), true, true)))))))))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false)))))))) && true), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)))))))), false)), bool(bool(bool(bvec3(_GLF_DEAD(false), _GLF_IDENTITY(false, ! (! (false))), false))))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! _GLF_IDENTITY((! ((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))), _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec3(_GLF_DEAD(false), _GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec3(! (false), true, true))))), _GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))), ((injectionSwitch.x > injectionSwitch.y)) && true))))), true, false)), ! _GLF_IDENTITY(_GLF_IDENTITY((! (bool(bvec4(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec3(! (false), true, true))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false)))), ! (! (_GLF_IDENTITY((! (bool(bvec4(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec3(! (false), true, true))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false)))), true && ((! (bool(bvec4(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec3(! (false), true, true))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false))))))))), ((! (bool(bvec4(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec3(! (false), true, true))))), _GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, bool(bvec3(false, true, false))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, false))), ! (! (false))), (injectionSwitch.x > injectionSwitch.y)), true, false))))) && true))), bool(bvec3(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec3(! (false), true, true))))), _GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true))))), true, false)), ! _GLF_IDENTITY(_GLF_IDENTITY((! (bool(bvec4(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec3(! (false), true, true))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false)))), ! (! (_GLF_IDENTITY((! (bool(bvec4(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec3(! (false), true, true))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false)))), true && ((! (bool(bvec4(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec3(! (false), true, true))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false))))))))), ((! (bool(bvec4(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec3(! (false), true, true))))), _GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y)), true, false))))) && true)), (_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(false, false, false, true))), ! (_GLF_IDENTITY(! _GLF_IDENTITY((false), ! (! (_GLF_IDENTITY((false), true && ((false)))))), bool(bvec3(! (false), true, true))))), _GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true))))), true, false)), ! _GLF_IDENTITY(_GLF_IDENTITY((! (bool(bvec4(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec3(! (false), true, true))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false)))), ! (! (_GLF_IDENTITY((! (bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(false, bool(bool(false))))), ! (_GLF_IDENTITY(! (false), bool(bvec3(! (false), true, true))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false)))), true && ((! (_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(false, _GLF_IDENTITY(! (_GLF_IDENTITY(! (false), bool(bvec3(! (false), true, true)))), ! (_GLF_IDENTITY(! (! (_GLF_IDENTITY(! (false), bool(bvec3(! (false), true, true))))), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(! (! (_GLF_IDENTITY(! (false), bool(bvec3(! (false), true, true))))), ! (! (! (! (_GLF_IDENTITY(! (false), bool(bvec3(! (false), true, true)))))))), false, true), bvec3(bvec3(bvec3(_GLF_IDENTITY(! (! (_GLF_IDENTITY(! (false), bool(bvec3(! (false), true, true))))), ! (! (! (! (_GLF_IDENTITY(! (false), bool(bvec3(! (false), true, true)))))))), false, true))))))))), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(injectionSwitch.x > injectionSwitch.y, true, true, true))))), true, false)), ! (! (bool(bvec4(_GLF_IDENTITY(false, _GLF_IDENTITY(! (_GLF_IDENTITY(! (false), bool(bvec3(! (false), true, true)))), ! (_GLF_IDENTITY(! (! (_GLF_IDENTITY(! (false), bool(bvec3(! (false), true, true))))), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(! (! (_GLF_IDENTITY(! (false), bool(bvec3(! (false), true, true))))), ! (! (! (! (_GLF_IDENTITY(! (false), bool(bvec3(! (false), true, true)))))))), false, true), bvec3(bvec3(bvec3(_GLF_IDENTITY(! (! (_GLF_IDENTITY(! (false), bool(bvec3(! (false), true, true))))), ! (! (! (! (_GLF_IDENTITY(! (false), bool(bvec3(! (false), true, true)))))))), false, true))))))))), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(injectionSwitch.x > injectionSwitch.y, true, true, true))))), true, false)))))))))))), ((! (bool(bvec4(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec3(! (false), true, true))))), _GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y)), true, false))))) && true))) && true)), false, false))), false)), ! (! (bool(bvec3(_GLF_DEAD(false), _GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec3(! (false), true, true))))), _GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))), ((injectionSwitch.x > injectionSwitch.y)) && true))))), true, false)), ! _GLF_IDENTITY(_GLF_IDENTITY((! (bool(bvec4(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec3(! (false), true, true))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false)))), ! (! (_GLF_IDENTITY((! (bool(bvec4(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec3(! (false), true, true))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false)))), true && ((! (bool(bvec4(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec3(! (false), true, true))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false))))))))), ((! (bool(bvec4(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec3(! (false), true, true))))), _GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, bool(bvec3(false, true, false))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, false))), ! (! (false))), (injectionSwitch.x > injectionSwitch.y)), true, false))))) && true))), bool(bvec3(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec3(! (false), true, true))))), _GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true))))), true, false)), ! _GLF_IDENTITY(_GLF_IDENTITY((! (bool(bvec4(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec3(! (false), true, true))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false)))), ! (! (_GLF_IDENTITY((! (bool(bvec4(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec3(! (false), true, true))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false)))), true && ((! (bool(bvec4(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec3(! (false), true, true))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false))))))))), ((! (bool(bvec4(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec3(! (false), true, true))))), _GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y)), true, false))))) && true)), (_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(false, false, false, true))), ! (_GLF_IDENTITY(! _GLF_IDENTITY((false), ! (! (_GLF_IDENTITY((false), true && ((false)))))), bool(bvec3(! (false), true, true))))), _GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true))))), true, false)), ! _GLF_IDENTITY(_GLF_IDENTITY((! (bool(bvec4(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec3(! (false), true, true))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false)))), ! (! (_GLF_IDENTITY((! (bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(false, bool(bool(false))))), ! (_GLF_IDENTITY(! (false), bool(bvec3(! (false), true, true))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false)))), true && ((! (_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(false, _GLF_IDENTITY(! (_GLF_IDENTITY(! (false), bool(bvec3(! (false), true, true)))), ! (_GLF_IDENTITY(! (! (_GLF_IDENTITY(! (false), bool(bvec3(! (false), true, true))))), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(! (! (_GLF_IDENTITY(! (false), bool(bvec3(! (false), true, true))))), ! (! (! (! (_GLF_IDENTITY(! (false), bool(bvec3(! (false), true, true)))))))), false, true), bvec3(bvec3(bvec3(_GLF_IDENTITY(! (! (_GLF_IDENTITY(! (false), bool(bvec3(! (false), true, true))))), ! (! (! (! (_GLF_IDENTITY(! (false), bool(bvec3(! (false), true, true)))))))), false, true))))))))), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(injectionSwitch.x > injectionSwitch.y, true, true, true))))), true, false)), ! (! (bool(bvec4(_GLF_IDENTITY(false, _GLF_IDENTITY(! (_GLF_IDENTITY(! (false), bool(bvec3(! (false), true, true)))), ! (_GLF_IDENTITY(! (! (_GLF_IDENTITY(! (false), bool(bvec3(! (false), true, true))))), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(! (! (_GLF_IDENTITY(! (false), bool(bvec3(! (false), true, true))))), ! (! (! (! (_GLF_IDENTITY(! (false), bool(bvec3(! (false), true, true)))))))), false, true), bvec3(bvec3(bvec3(_GLF_IDENTITY(! (! (_GLF_IDENTITY(! (false), bool(bvec3(! (false), true, true))))), ! (! (! (! (_GLF_IDENTITY(! (false), bool(bvec3(! (false), true, true)))))))), false, true))))))))), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(injectionSwitch.x > injectionSwitch.y, true, true, true))))), true, false)))))))))))), ((! (bool(bvec4(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec3(! (false), true, true))))), _GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y)), true, false))))) && true))) && true)), false, false))), false))))), bool(_GLF_IDENTITY(bool(bool(bvec3(_GLF_DEAD(false), _GLF_IDENTITY(false, ! _GLF_IDENTITY((_GLF_IDENTITY(! (false), false || (! (false)))), ((_GLF_IDENTITY(! (false), false || (! (false))))) || false)), false))), _GLF_IDENTITY(bool(bool(bool(bool(bvec3(_GLF_DEAD(false), _GLF_IDENTITY(false, ! _GLF_IDENTITY((_GLF_IDENTITY(! (false), false || (! (false)))), ((_GLF_IDENTITY(! (false), false || (! (false))))) || false)), false))))), bool(bvec2(bool(bool(bool(bool(bvec3(_GLF_DEAD(false), _GLF_IDENTITY(false, ! _GLF_IDENTITY((_GLF_IDENTITY(! (false), false || (! (false)))), ((_GLF_IDENTITY(! (false), false || (! (false))))) || false)), false))))), true)))))))) || _GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).x > injectionSwitch.y, false || (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).x > injectionSwitch.y)), bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).x > injectionSwitch.y, false || (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).x > injectionSwitch.y)), true))))))), false || ((! ((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))), _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec3(_GLF_DEAD(false), _GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec3(! (false), true, true))))), _GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))), ((injectionSwitch.x > injectionSwitch.y)) && true))))), true, false)), ! _GLF_IDENTITY(_GLF_IDENTITY((! (bool(bvec4(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec3(! (false), true, true))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false)))), ! (! (_GLF_IDENTITY((! (bool(bvec4(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec3(! (false), true, true))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false)))), true && ((! (bool(bvec4(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec3(! (false), true, true))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false))))))))), ((! (bool(bvec4(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec3(! (false), true, true))))), _GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, bool(bvec3(false, true, false))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, false))), ! (! (false))), (injectionSwitch.x > injectionSwitch.y)), true, false))))) && true))), bool(bvec3(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec3(! (false), true, true))))), _GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true))))), true, false)), ! _GLF_IDENTITY(_GLF_IDENTITY((! (bool(bvec4(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec3(! (false), true, true))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false)))), ! (! (_GLF_IDENTITY((! (bool(bvec4(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec3(! (false), true, true))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false)))), true && ((! (bool(bvec4(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec3(! (false), true, true))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false))))))))), ((! (bool(bvec4(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec3(! (false), true, true))))), _GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y)), true, false))))) && true)), (_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(false, false, false, true))), ! (_GLF_IDENTITY(! _GLF_IDENTITY((false), ! (! (_GLF_IDENTITY((false), true && ((false)))))), bool(bvec3(! (false), true, true))))), _GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true))))), true, false)), ! _GLF_IDENTITY(_GLF_IDENTITY((! (bool(bvec4(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec3(! (false), true, true))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false)))), ! (! (_GLF_IDENTITY((! (bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(false, bool(bool(false))))), ! (_GLF_IDENTITY(! (false), bool(bvec3(! (false), true, true))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false)))), true && ((! (_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(false, _GLF_IDENTITY(! (_GLF_IDENTITY(! (false), bool(bvec3(! (false), true, true)))), ! (_GLF_IDENTITY(! (! (_GLF_IDENTITY(! (false), bool(bvec3(! (false), true, true))))), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(! (! (_GLF_IDENTITY(! (false), bool(bvec3(! (false), true, true))))), ! (! (! (! (_GLF_IDENTITY(! (false), bool(bvec3(! (false), true, true)))))))), false, true), bvec3(bvec3(bvec3(_GLF_IDENTITY(! (! (_GLF_IDENTITY(! (false), bool(bvec3(! (false), true, true))))), ! (! (! (! (_GLF_IDENTITY(! (false), bool(bvec3(! (false), true, true)))))))), false, true))))))))), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(injectionSwitch.x > injectionSwitch.y, true, true, true))))), true, false)), ! (! (bool(bvec4(_GLF_IDENTITY(false, _GLF_IDENTITY(! (_GLF_IDENTITY(! (false), bool(bvec3(! (false), true, true)))), ! (_GLF_IDENTITY(! (! (_GLF_IDENTITY(! (false), bool(bvec3(! (false), true, true))))), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(! (! (_GLF_IDENTITY(! (false), bool(bvec3(! (false), true, true))))), ! (! (! (! (_GLF_IDENTITY(! (false), bool(bvec3(! (false), true, true)))))))), false, true), bvec3(bvec3(bvec3(_GLF_IDENTITY(! (! (_GLF_IDENTITY(! (false), bool(bvec3(! (false), true, true))))), ! (! (! (! (_GLF_IDENTITY(! (false), bool(bvec3(! (false), true, true)))))))), false, true))))))))), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(injectionSwitch.x > injectionSwitch.y, true, true, true))))), true, false)))))))))))), ((! (bool(bvec4(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec3(! (false), true, true))))), _GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y)), true, false))))) && true))) && true)), false, false))), false)), ! (! (bool(bvec3(_GLF_DEAD(false), _GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec3(! (false), true, true))))), _GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))), ((injectionSwitch.x > injectionSwitch.y)) && true))))), true, false)), ! _GLF_IDENTITY(_GLF_IDENTITY((! (bool(bvec4(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec3(! (false), true, true))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false)))), ! (! (_GLF_IDENTITY((! (bool(bvec4(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec3(! (false), true, true))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false)))), true && ((! (bool(bvec4(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec3(! (false), true, true))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false))))))))), ((! (bool(bvec4(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec3(! (false), true, true))))), _GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, bool(bvec3(false, true, false))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, false))), ! (! (false))), (injectionSwitch.x > injectionSwitch.y)), true, false))))) && true))), bool(bvec3(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec3(! (false), true, true))))), _GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true))))), true, false)), ! _GLF_IDENTITY(_GLF_IDENTITY((! (bool(bvec4(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec3(! (false), true, true))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false)))), ! (! (_GLF_IDENTITY((! (bool(bvec4(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec3(! (false), true, true))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false)))), true && ((! (bool(bvec4(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec3(! (false), true, true))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false))))))))), ((! (bool(bvec4(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec3(! (false), true, true))))), _GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y)), true, false))))) && true)), (_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(false, false, false, true))), ! (_GLF_IDENTITY(! _GLF_IDENTITY((false), ! (! (_GLF_IDENTITY((false), true && ((false)))))), bool(bvec3(! (false), true, true))))), _GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true))))), true, false)), ! _GLF_IDENTITY(_GLF_IDENTITY((! (bool(bvec4(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec3(! (false), true, true))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false)))), ! (! (_GLF_IDENTITY((! (bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(false, bool(bool(false))))), ! (_GLF_IDENTITY(! (false), bool(bvec3(! (false), true, true))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false)))), true && ((! (_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(false, _GLF_IDENTITY(! (_GLF_IDENTITY(! (false), bool(bvec3(! (false), true, true)))), ! (_GLF_IDENTITY(! (! (_GLF_IDENTITY(! (false), bool(bvec3(! (false), true, true))))), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(! (! (_GLF_IDENTITY(! (false), bool(bvec3(! (false), true, true))))), ! (! (! (! (_GLF_IDENTITY(! (false), bool(bvec3(! (false), true, true)))))))), false, true), bvec3(bvec3(bvec3(_GLF_IDENTITY(! (! (_GLF_IDENTITY(! (false), bool(bvec3(! (false), true, true))))), ! (! (! (! (_GLF_IDENTITY(! (false), bool(bvec3(! (false), true, true)))))))), false, true))))))))), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(injectionSwitch.x > injectionSwitch.y, true, true, true))))), true, false)), ! (! (bool(bvec4(_GLF_IDENTITY(false, _GLF_IDENTITY(! (_GLF_IDENTITY(! (false), bool(bvec3(! (false), true, true)))), ! (_GLF_IDENTITY(! (! (_GLF_IDENTITY(! (false), bool(bvec3(! (false), true, true))))), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(! (! (_GLF_IDENTITY(! (false), bool(bvec3(! (false), true, true))))), ! (! (! (! (_GLF_IDENTITY(! (false), bool(bvec3(! (false), true, true)))))))), false, true), bvec3(bvec3(bvec3(_GLF_IDENTITY(! (! (_GLF_IDENTITY(! (false), bool(bvec3(! (false), true, true))))), ! (! (! (! (_GLF_IDENTITY(! (false), bool(bvec3(! (false), true, true)))))))), false, true))))))))), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(injectionSwitch.x > injectionSwitch.y, true, true, true))))), true, false)))))))))))), ((! (bool(bvec4(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec3(! (false), true, true))))), _GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y)), true, false))))) && true))) && true)), false, false))), false))))), bool(_GLF_IDENTITY(bool(bool(bvec3(_GLF_DEAD(false), _GLF_IDENTITY(false, ! _GLF_IDENTITY((_GLF_IDENTITY(! (false), false || (! (false)))), ((_GLF_IDENTITY(! (false), false || (! (false))))) || false)), false))), _GLF_IDENTITY(bool(bool(bool(bool(bvec3(_GLF_DEAD(false), _GLF_IDENTITY(false, ! _GLF_IDENTITY((_GLF_IDENTITY(! (false), false || (! (false)))), ((_GLF_IDENTITY(! (false), false || (! (false))))) || false)), false))))), bool(bvec2(bool(bool(bool(bool(bvec3(_GLF_DEAD(false), _GLF_IDENTITY(false, ! _GLF_IDENTITY((_GLF_IDENTITY(! (false), false || (! (false)))), ((_GLF_IDENTITY(! (false), false || (! (false))))) || false)), false))))), true)))))))) || _GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).x > injectionSwitch.y, false || (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).x > injectionSwitch.y)), bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).x > injectionSwitch.y, false || (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).x > injectionSwitch.y)), true))))))))))))
    {
     do
      {
       if(_GLF_DEAD(false))
        return;
       return;
       if(_GLF_DEAD(false))
        continue;
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 else
  {
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y, ! (! _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)))).x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))))), min(injectionSwitch, injectionSwitch)).y, ! (! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y)))) && true)), ! (! ((_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)))).x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)), min(injectionSwitch, injectionSwitch)).y, ! (! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y)))) && true)))))))))))
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      break;
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         return;
        }
       else
        {
        }
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y))))))
      {
       return;
      }
     else
      {
      }
    }
  }
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(false, ! (! (false))) || (false))), false || (_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(false, ! (! (false))) || (false))))))
  {
   if(_GLF_DEAD(false))
    return;
   for(int _injected_loop_counter = _GLF_IDENTITY(1, ~ (~ (1))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bvec2(_GLF_IDENTITY(true, (true) || false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat4x2(injectionSwitch, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0)), (vec2(mat4x2(injectionSwitch, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0))) * vec2(1.0, 1.0))).x > injectionSwitch.y))))
          return;
         if(_GLF_DEAD(false))
          return;
         return;
        }
       return;
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
        return;
       if(_GLF_DEAD(false))
        {
         do
          {
           return;
          }
         while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) || false)))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) || false)))), bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) || false)))), true && (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) || false)))))), true, false)))))));
        }
      }
     else
      {
      }
    }
  }
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_DEAD(false))
  return;
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch))[0], _GLF_IDENTITY(injectionSwitch[1], float(float(injectionSwitch[1])))))) / vec2(1.0, 1.0)), clamp(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(mat2(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(-5463.3862), _GLF_FUZZED(2.3)), bvec2(false, false))), 0.0, 0.0)))) + vec2(0.0, 0.0)), injectionSwitch, injectionSwitch)).y, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, _GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, float(_GLF_IDENTITY(mat4x2(1.0, 0.0, 0.0, round(_GLF_IDENTITY(length(normalize(vec2(1.0, 1.0))), mix(float(_GLF_FUZZED(331.527)), float(length(normalize(vec2(1.0, 1.0)))), bool(true)))), 1.0, 0.0, 1.0, 0.0), mat4x2(mat4x2(mat4x2(1.0, 0.0, 0.0, round(length(normalize(vec2(1.0, 1.0)))), 1.0, 0.0, 1.0, 0.0)))))), _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)))))), clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y) - _GLF_ZERO(_GLF_IDENTITY(0.0, min(0.0, _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(5.7) : 0.0)))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch))), mix(vec2(_GLF_FUZZED(399.029), ((_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch))))[1]), vec2(((_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch))))[0], _GLF_FUZZED(-7.0)), bvec2(true, false))) - vec2(0.0, 0.0)).x, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch))), mix(vec2(_GLF_FUZZED(399.029), ((_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch))))[1]), vec2(((_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch))))[0], _GLF_FUZZED(-7.0)), bvec2(true, false))) - vec2(0.0, 0.0)).x, min(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch))), mix(vec2(_GLF_FUZZED(399.029), ((_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch))))[1]), vec2(((_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch))))[0], _GLF_FUZZED(-7.0)), bvec2(true, false))) - vec2(0.0, 0.0)).x, _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch))), mix(vec2(_GLF_FUZZED(399.029), ((_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch))))[1]), vec2(((_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch))))[0], _GLF_FUZZED(-7.0)), bvec2(true, false))) - vec2(0.0, 0.0)).x))) - determinant(mat4(0.0, 1.0, 0.0, 1.0, 0.0, length(0.0), 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0))))), ! (_GLF_IDENTITY(! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) + tan(vec2(0.0, 0.0))))).y), ! (_GLF_IDENTITY(! (! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) + tan(vec2(0.0, 0.0))))).y)), true && (! (! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) + tan(vec2(0.0, 0.0))))).y))))))))))))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, false)), bool(bvec2(bool(bvec2(false, false)), _GLF_IDENTITY(false, (false) && true))))), _GLF_IDENTITY((false) && true, true && ((false) && true)))))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(0, ~ (~ (0)))); _injected_loop_counter --)
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(false || (_GLF_DEAD(false)), (_GLF_IDENTITY(false || (_GLF_DEAD(false)), bool(bvec4(false || (_GLF_DEAD(false)), false, false, false)))) && true)))
          return;
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bool((injectionSwitch.x > injectionSwitch.y))))) && true))))))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(0, clamp(0, 0, 0))); _injected_loop_counter --)
        {
         return;
        }
      }
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), bool(bool(false))), true)))))
    return;
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       return;
      }
     else
      {
      }
    }
  }
 else
  {
  }
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(true ? injectionSwitch.x : _GLF_FUZZED(-3.4), min(true ? injectionSwitch.x : _GLF_FUZZED(-3.4), true ? injectionSwitch.x : _GLF_FUZZED(-3.4))))) > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))))), bool(bvec2(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true))), true))))))))
  {
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)), (false ? _GLF_FUZZED(smoothstep(8.4, exp2(8918.6602), vec2(703.188, 33.98))) : _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, mix(_GLF_IDENTITY(vec2((injectionSwitch)[0], _GLF_FUZZED((-361.085 - float(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, (false) || false), false, true), bvec3(bvec3(bvec3(_GLF_IDENTITY(false, (false) || false), false, true)))))))))), (true ? vec2((injectionSwitch)[0], _GLF_FUZZED((-361.085 - float(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, (false) || false), false, true), bvec3(bvec3(bvec3(_GLF_IDENTITY(false, (false) || false), false, true)))))))))) : _GLF_FUZZED(injectionSwitch))), vec2(_GLF_FUZZED(vec4(-6.7, 66.84, -759.315, 6.5).g), _GLF_IDENTITY((injectionSwitch)[1], (_GLF_IDENTITY((injectionSwitch)[1], ((injectionSwitch)[1]) + 0.0)) * 1.0)), bvec2(false, true))), injectionSwitch)))).x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[_GLF_IDENTITY(0, 0 | (0))], injectionSwitch[1])).y))))
      return;
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(false))
    {
     do
      {
       return;
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
   return;
  }
 GLF_merged4_0_1_13_1_1_11_2_1_12_3_1_14subgroup_basesubgroup_idworkgroup_idworkgroup_size.w = workgroup_size;
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(false, (false) || false)))))
  {
  }
 else
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        return;
       continue;
      }
     do
      {
       for(int _injected_loop_counter = (-26085 & 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-33.88)), float(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0)), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))
          break;
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           if(_GLF_DEAD(false))
            continue;
           continue;
          }
         if(_GLF_DEAD(false))
          continue;
         GLF_merged4_0_1_13_1_1_11_2_1_12_3_1_14subgroup_basesubgroup_idworkgroup_idworkgroup_size.z = workgroup_id;
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(false))
      break;
     if(_GLF_DEAD(false))
      break;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
       continue;
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      continue;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)))))
      continue;
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y)), float(vec2(injectionSwitch.y, 0.0)))), true && _GLF_IDENTITY(((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(vec2(injectionSwitch.y, 0.0))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(vec2(injectionSwitch.y, 0.0))))), ! (_GLF_IDENTITY(! (((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(vec2(injectionSwitch.y, 0.0)))))), ! (! (! (((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(vec2(injectionSwitch.y, 0.0)))))))))))), bool(bool(! (_GLF_IDENTITY(((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(vec2(injectionSwitch.y, 0.0))))), ! (_GLF_IDENTITY(! (((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(vec2(injectionSwitch.y, 0.0)))))), ! (! (! (((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(vec2(injectionSwitch.y, 0.0)))))))))))))))))))))
      break;
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y))) || false)))))
    return;
  }
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, max(1, 1))); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false || (_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0) < injectionSwitch.y)))), false, false)))))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         do
          {
           return;
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
     if(_GLF_DEAD(false))
      break;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     return;
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true), false || (_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(mat3x4(injectionSwitch.y, sqrt(1.0), 1.0, sqrt(0.0), 1.0, cos(0.0), round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), 1.0, 1.0, 1.0, _GLF_IDENTITY(dot(vec4(0.0, tan(0.0), sqrt(1.0), 1.0), vec4(sqrt(1.0), 1.0, 0.0, 0.0)), dot(vec4(0.0, tan(0.0), sqrt(1.0), 1.0), vec4(sqrt(1.0), 1.0, 0.0, 0.0))), 1.0)), (true ? float(mat3x4(injectionSwitch.y, sqrt(1.0), 1.0, sqrt(0.0), 1.0, cos(0.0), round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), 1.0, 1.0, 1.0, _GLF_IDENTITY(dot(vec4(0.0, tan(0.0), sqrt(1.0), 1.0), vec4(sqrt(1.0), 1.0, 0.0, 0.0)), dot(vec4(0.0, tan(0.0), sqrt(1.0), 1.0), vec4(sqrt(1.0), 1.0, 0.0, 0.0))), 1.0)) : _GLF_FUZZED(7.0))))), ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false))) && true))))))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(5682.6189)), float(injectionSwitch.x), bool(true)))) - 0.0) > injectionSwitch.y))))
    return;
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))))))
  return;
 uint workgroup_base = _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_11_2_1_12_3_1_14subgroup_basesubgroup_idworkgroup_idworkgroup_size, clamp(GLF_merged4_0_1_13_1_1_11_2_1_12_3_1_14subgroup_basesubgroup_idworkgroup_idworkgroup_size, GLF_merged4_0_1_13_1_1_11_2_1_12_3_1_14subgroup_basesubgroup_idworkgroup_idworkgroup_size, GLF_merged4_0_1_13_1_1_11_2_1_12_3_1_14subgroup_basesubgroup_idworkgroup_idworkgroup_size)).w * GLF_merged4_0_1_13_1_1_11_2_1_12_3_1_14subgroup_basesubgroup_idworkgroup_idworkgroup_size.z, (GLF_merged4_0_1_13_1_1_11_2_1_12_3_1_14subgroup_basesubgroup_idworkgroup_idworkgroup_size.w * _GLF_IDENTITY(GLF_merged4_0_1_13_1_1_11_2_1_12_3_1_14subgroup_basesubgroup_idworkgroup_idworkgroup_size.z, ((_GLF_IDENTITY(1u, max(1u, 1u)) << _GLF_IDENTITY(uint(6u), uint(6u))) >> _GLF_IDENTITY(uint(6u), uint(6u))) * (GLF_merged4_0_1_13_1_1_11_2_1_12_3_1_14subgroup_basesubgroup_idworkgroup_idworkgroup_size.z))) >> 0u), uint(uint(_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_11_2_1_12_3_1_14subgroup_basesubgroup_idworkgroup_idworkgroup_size.w * GLF_merged4_0_1_13_1_1_11_2_1_12_3_1_14subgroup_basesubgroup_idworkgroup_idworkgroup_size.z, (GLF_merged4_0_1_13_1_1_11_2_1_12_3_1_14subgroup_basesubgroup_idworkgroup_idworkgroup_size.w * GLF_merged4_0_1_13_1_1_11_2_1_12_3_1_14subgroup_basesubgroup_idworkgroup_idworkgroup_size.z) >> 0u))));
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     for(int _injected_loop_counter = (1 & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        return;
      }
     break;
    }
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bool((injectionSwitch.x > injectionSwitch.y)))))))
      break;
     if(_GLF_DEAD(false))
      return;
    }
   while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, bool(bvec4(true, false, false, true)))))), true)), true && (bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true)))))), bool(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bvec3(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false)), true, true)), true && (bool(bvec3(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (injectionSwitch.x > injectionSwitch.y)), true, true)))))), bool(bvec4(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true)), true && (bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true)))))), false, false, true))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_IDENTITY(false, ! (! (false)))))));
   if(_GLF_DEAD(false))
    break;
  }
 while(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), false || (_GLF_WRAPPED_LOOP(false))), ! (! (_GLF_WRAPPED_LOOP(false)))), (_GLF_WRAPPED_LOOP(false)) && _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch)).y))));
 if(_GLF_DEAD(false))
  return;
 uint subgroup_base = GLF_merged4_0_1_13_1_1_11_2_1_12_3_1_14subgroup_basesubgroup_idworkgroup_idworkgroup_size.y * _GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, (false ? _GLF_FUZZED(workgroup_base) : subgroup_size))) | 0u);
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(false, ! (! (false))))), (injectionSwitch.x > injectionSwitch.y))))
  {
   do
    {
     return;
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, true), _GLF_IDENTITY(bvec2(bvec4(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec4(bvec2(false, true), _GLF_IDENTITY(true, (true) && true), false))), false, false)), bvec2(bvec4(bvec2(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec4(bvec2(false, true), true, false))), bvec2(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec4(bvec2(false, true), true, false))), bvec2(bvec2(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec4(bvec2(false, true), true, false)))))), false, true))), false, false)), true, _GLF_IDENTITY(false, (false) && true))))))))))))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_DEAD(false))
  return;
 _GLF_IDENTITY(GLF_merged4_0_1_13_1_1_11_2_1_12_3_1_14subgroup_basesubgroup_idworkgroup_idworkgroup_size.x = subgroup_base, (_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(_GLF_ONE(1.0, injectionSwitch.y))).x < injectionSwitch.y)) ? GLF_merged4_0_1_13_1_1_11_2_1_12_3_1_14subgroup_basesubgroup_idworkgroup_idworkgroup_size.x = subgroup_base : _GLF_FUZZED((uvec2(101904u, 48393u) , subgroup_base))));
 uint virtual_gid = workgroup_base + _GLF_IDENTITY(GLF_merged4_0_1_13_1_1_11_2_1_12_3_1_14subgroup_basesubgroup_idworkgroup_idworkgroup_size, (GLF_merged4_0_1_13_1_1_11_2_1_12_3_1_14subgroup_basesubgroup_idworkgroup_idworkgroup_size) ^ uvec4(0u, _GLF_IDENTITY(0u, max(0u, _GLF_IDENTITY(0u, (0u) / 1u))), 0u, 0u)).x + subgroup_local_id;
 uint next_virtual_gid = workgroup_base + GLF_merged4_0_1_13_1_1_11_2_1_12_3_1_14subgroup_basesubgroup_idworkgroup_idworkgroup_size.x + ((subgroup_local_id + 1) % subgroup_size);
 do
  {
   if(_GLF_DEAD(false))
    continue;
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (false ? _GLF_FUZZED(_injected_loop_counter) : _injected_loop_counter)) != (_GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) >> 0)) | 0) >> _GLF_IDENTITY(_GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(ivec4(int(4), 0, (((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))) ^ 1), 0)), (int(ivec4(int(4), 0, (((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))) ^ 1), 0))) | (int(ivec4(int(4), 0, (((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))) ^ 1), 0)))))), (_GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), (_GLF_IDENTITY(int(4), int(4))) | (_GLF_IDENTITY(int(4), int(4))))) - 0))); _injected_loop_counter --)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      break;
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       atomicStore(buf[virtual_gid], _GLF_IDENTITY(_GLF_IDENTITY(uint(1), max(_GLF_IDENTITY(uint(_GLF_IDENTITY(1, 0 | _GLF_IDENTITY((1), ((1)) | (_GLF_IDENTITY((1), ((1)) | ((1))))))), _GLF_IDENTITY(uint(uint(uint(_GLF_IDENTITY(1, (1) / 1)))), _GLF_IDENTITY((uint(uint(uint(_GLF_IDENTITY(1, (false ? _GLF_FUZZED(69864) : 1)))))), clamp((uint(_GLF_IDENTITY(uint(uint(1)), (_GLF_IDENTITY(uint(uint(1)), _GLF_IDENTITY((uint(uint(1))), ((uint(_GLF_IDENTITY(uint(1), _GLF_IDENTITY(uint(uvec4(uint(1), 1u, 1u, 1u)), clamp(uint(uvec4(uint(1), 1u, 1u, 1u)), uint(uvec4(uint(1), 1u, 1u, 1u)), _GLF_IDENTITY(uint(uvec4(uint(1), 1u, 1u, 1u)), clamp(uint(uvec4(uint(1), 1u, 1u, 1u)), uint(uvec4(uint(1), 1u, 1u, 1u)), uint(uvec4(uint(1), 1u, 1u, 1u)))))))))) ^ 0u) + 0u)) | 0u))), _GLF_IDENTITY((uint(uint(uint(1)))), clamp(_GLF_IDENTITY((uint(uint(uint(1)))), uint(uvec4((uint(uint(_GLF_IDENTITY(uint(1), (uint(1)) ^ 0u)))), 1u, 0u, 0u))), (uint(uint(uint(1)))), (uint(uint(uint(_GLF_IDENTITY(1, ~ (~ (1))))))))), _GLF_IDENTITY((uint(uint(uint(1)))), clamp(_GLF_IDENTITY((uint(uint(_GLF_IDENTITY(uint(1), clamp(uint(_GLF_IDENTITY(1, (false ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(1, min(1, 1))))), _GLF_IDENTITY(_GLF_IDENTITY(uint(1), min(_GLF_IDENTITY(uint(1), ~ (~ (uint(1)))), _GLF_IDENTITY(uint(1), min(uint(1), uint(1))))), 0u + (_GLF_IDENTITY(uint(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) | (1))) << 0)), min(_GLF_IDENTITY(uint(1), ~ (~ (uint(1)))), _GLF_IDENTITY(uint(1), min(uint(_GLF_IDENTITY(1, max(1, 1))), uint(1))))))), uint(1)))))), clamp((uint(uint(uint(1)))), (uint(uint(uint(1)))), (uint(uint(uint(1)))))), (uint(uint(uint(1)))), (uint(uint(uint(1)))))))) ^ 0u)), _GLF_IDENTITY(_GLF_IDENTITY(uint(1), (_GLF_IDENTITY(uint(1), min(uint(1), uint(1)))) << 0u), (true ? _GLF_IDENTITY(_GLF_IDENTITY(uint(1), (uint(1)) << 0u), (_GLF_IDENTITY(uint(1), (uint(1)) << 0u)) >> 0u) : _GLF_FUZZED(workgroup_size))))), (_GLF_IDENTITY(uint(1), max(_GLF_IDENTITY(uint(_GLF_IDENTITY(1, 0 | (1))), _GLF_IDENTITY(uint(uint(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uint(1), ~ _GLF_IDENTITY((~ (uint(1))), clamp((~ (uint(1))), (~ (uint(1))), (~ (uint(1)))))), uint(uint(_GLF_IDENTITY(uint(1), clamp(_GLF_IDENTITY(uint(1), (_GLF_IDENTITY(uint(1), 0u ^ (uint(1)))) << 0u), uint(1), uint(1)))))), _GLF_IDENTITY(~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uint(1), ~ (~ (uint(1)))), uint(uint(uint(1)))), 1u * (_GLF_IDENTITY(_GLF_IDENTITY(uint(1), ~ (~ (uint(1)))), uint(uint(uint(1))))))), (false ? _GLF_FUZZED(workgroup_size) : ~ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uint(1), ~ (~ (uint(1)))), uint(uint(uint(1)))), 1u * (_GLF_IDENTITY(_GLF_IDENTITY(uint(1), _GLF_IDENTITY(~ (~ (uint(1))), uint(uvec4(~ (~ (uint(1))), 1u, 0u, 0u)))), uint(uint(uint(1)))))))))), max(~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uint(1), ~ (~ (uint(1)))), uint(uint(uint(1)))), 1u * (_GLF_IDENTITY(_GLF_IDENTITY(uint(1), ~ (~ (uint(1)))), uint(uint(uint(1))))))), (false ? _GLF_FUZZED(workgroup_size) : ~ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uint(1), ~ (~ (uint(1)))), uint(uint(uint(1)))), 1u * (_GLF_IDENTITY(_GLF_IDENTITY(uint(1), _GLF_IDENTITY(~ (~ (uint(1))), uint(uvec4(~ (~ (uint(1))), 1u, 0u, 0u)))), uint(uint(uint(1)))))))))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uint(1), ~ (~ (uint(1)))), uint(uint(uint(1)))), 1u * (_GLF_IDENTITY(_GLF_IDENTITY(uint(1), ~ (~ (uint(1)))), uint(uint(uint(1))))))), (false ? _GLF_FUZZED(workgroup_size) : ~ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uint(1), ~ (~ (uint(1)))), uint(uint(uint(1)))), 1u * (_GLF_IDENTITY(_GLF_IDENTITY(uint(1), _GLF_IDENTITY(~ (~ (uint(1))), uint(uvec4(~ (~ (uint(1))), 1u, 0u, 0u)))), uint(uint(uint(1))))))))))))))), _GLF_IDENTITY((uint(uint(_GLF_IDENTITY(uint(_GLF_IDENTITY(1, (1) + 0)), max(uint(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, 0 ^ (1))) + 0)), uint(_GLF_IDENTITY(1, (1) + 0))))))), clamp((uint(uint(uint(1)))), _GLF_IDENTITY((uint(_GLF_IDENTITY(uint(uint(1)), min(uint(uint(1)), uint(uint(1)))))), clamp(_GLF_IDENTITY((uint(uint(uint(1)))), uint(uvec4((uint(uint(_GLF_IDENTITY(uint(1), (_GLF_IDENTITY(uint(1), 0u ^ (_GLF_IDENTITY(uint(1), min(uint(1), uint(1)))))) | 0u)))), 1u, 0u, 0u))), (uint(uint(uint(_GLF_IDENTITY(_GLF_IDENTITY(1, (1) | (1)), clamp(1, 1, 1)))))), (uint(uint(uint(1)))))), (uint(uint(uint(1)))))) ^ 0u)), _GLF_IDENTITY(uint(1), (uint(1)) << 0u)))) ^ (0u >> _GLF_IDENTITY(uint(1u), uint(_GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, (true ? _GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, 1u * (1u))) | (1u)) : _GLF_FUZZED(subgroup_local_id)))) / 1u))))), 4, 64, 4);
      }
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         return;
        }
       break;
      }
    }
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! (_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(mat2x4(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)))), 0.0, 1.0, 0.0, _GLF_IDENTITY(1.0, (1.0) - 0.0), _GLF_IDENTITY(dot(vec4(1.0, 0.0, 0.0, abs(0.0)), vec4(0.0, 1.0, 1.0, 1.0)), dot(vec4(1.0, 0.0, 0.0, abs(0.0)), vec4(0.0, 1.0, 1.0, 1.0))), _GLF_IDENTITY(dot(vec4(0.0, sqrt(0.0), 0.0, 1.0), vec4(_GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(0.0, 0.0)), dot(vec2(1.0, 1.0), vec2(0.0, 0.0))), 0.0, 0.0, sqrt(1.0))), dot(vec4(0.0, sqrt(0.0), 0.0, 1.0), vec4(_GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(0.0, 0.0)), dot(vec2(1.0, 1.0), vec2(0.0, 0.0))), 0.0, 0.0, sqrt(1.0))))))).y), _GLF_IDENTITY(bool(bvec3((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(mat2x4(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)))), 0.0, 1.0, 0.0, _GLF_IDENTITY(1.0, (1.0) - 0.0), _GLF_IDENTITY(dot(vec4(1.0, 0.0, 0.0, abs(0.0)), vec4(0.0, 1.0, 1.0, 1.0)), dot(vec4(1.0, 0.0, 0.0, abs(0.0)), vec4(0.0, 1.0, 1.0, 1.0))), _GLF_IDENTITY(dot(vec4(0.0, sqrt(0.0), 0.0, 1.0), vec4(_GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(0.0, 0.0)), dot(vec2(1.0, 1.0), vec2(0.0, 0.0))), 0.0, 0.0, sqrt(1.0))), dot(vec4(0.0, sqrt(0.0), 0.0, 1.0), vec4(_GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(0.0, 0.0)), dot(vec2(1.0, 1.0), vec2(0.0, 0.0))), 0.0, 0.0, sqrt(1.0))))))).y), true, false)), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(bool(bvec3((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(mat2x4(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)))), 0.0, 1.0, 0.0, _GLF_IDENTITY(1.0, (1.0) - 0.0), _GLF_IDENTITY(dot(vec4(1.0, 0.0, 0.0, abs(0.0)), vec4(0.0, 1.0, 1.0, 1.0)), dot(vec4(1.0, 0.0, 0.0, abs(0.0)), vec4(0.0, 1.0, 1.0, 1.0))), _GLF_IDENTITY(dot(vec4(0.0, sqrt(0.0), 0.0, 1.0), vec4(_GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(0.0, 0.0)), dot(vec2(1.0, 1.0), vec2(0.0, 0.0))), 0.0, 0.0, sqrt(1.0))), dot(vec4(0.0, sqrt(0.0), 0.0, 1.0), vec4(_GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(0.0, 0.0)), dot(vec2(1.0, 1.0), vec2(0.0, 0.0))), 0.0, 0.0, sqrt(1.0))))))).y), true, false)), (bool(bvec3((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(mat2x4(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)))), 0.0, 1.0, 0.0, _GLF_IDENTITY(1.0, (1.0) - 0.0), _GLF_IDENTITY(dot(vec4(1.0, 0.0, 0.0, abs(0.0)), vec4(0.0, 1.0, 1.0, 1.0)), dot(vec4(1.0, 0.0, 0.0, abs(0.0)), vec4(0.0, 1.0, 1.0, 1.0))), _GLF_IDENTITY(dot(vec4(0.0, sqrt(0.0), 0.0, 1.0), vec4(_GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(0.0, 0.0)), dot(vec2(1.0, 1.0), vec2(0.0, 0.0))), 0.0, 0.0, sqrt(1.0))), dot(vec4(0.0, sqrt(0.0), 0.0, 1.0), vec4(_GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(0.0, 0.0)), dot(vec2(1.0, 1.0), vec2(0.0, 0.0))), 0.0, 0.0, sqrt(1.0))))))).y), true, false))) && true), true)), false || (bool(bvec2(_GLF_IDENTITY(bool(bvec3((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(mat2x4(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)))), 0.0, 1.0, 0.0, _GLF_IDENTITY(1.0, (1.0) - 0.0), _GLF_IDENTITY(dot(vec4(1.0, 0.0, 0.0, abs(0.0)), vec4(0.0, 1.0, 1.0, 1.0)), dot(vec4(1.0, 0.0, 0.0, abs(0.0)), vec4(0.0, 1.0, 1.0, 1.0))), _GLF_IDENTITY(dot(vec4(0.0, sqrt(0.0), 0.0, 1.0), vec4(_GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(0.0, 0.0)), dot(vec2(1.0, 1.0), vec2(0.0, 0.0))), 0.0, 0.0, sqrt(1.0))), dot(vec4(0.0, sqrt(0.0), 0.0, 1.0), vec4(_GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(0.0, 0.0)), dot(vec2(1.0, 1.0), vec2(0.0, 0.0))), 0.0, 0.0, sqrt(1.0))))))).y), true, false)), (bool(bvec3((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(mat2x4(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)))), 0.0, 1.0, 0.0, _GLF_IDENTITY(1.0, (1.0) - 0.0), _GLF_IDENTITY(dot(vec4(1.0, 0.0, 0.0, abs(0.0)), vec4(0.0, 1.0, 1.0, 1.0)), dot(vec4(1.0, 0.0, 0.0, abs(0.0)), vec4(0.0, 1.0, 1.0, 1.0))), _GLF_IDENTITY(dot(vec4(0.0, sqrt(0.0), 0.0, 1.0), vec4(_GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(0.0, 0.0)), dot(vec2(1.0, 1.0), vec2(0.0, 0.0))), 0.0, 0.0, sqrt(1.0))), dot(vec4(0.0, sqrt(0.0), 0.0, 1.0), vec4(_GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(0.0, 0.0)), dot(vec2(1.0, 1.0), vec2(0.0, 0.0))), 0.0, 0.0, sqrt(1.0))))))).y), true, false))) && true), true))))))))))), ! (! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bool(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).x > injectionSwitch.y)))), bool(bvec2(bool(bool(_GLF_FALSE(_GLF_IDENTITY(false, bool(bool(false))), (injectionSwitch.x > injectionSwitch.y)))), true))))))))))))
    {
     if(_GLF_DEAD(false))
      continue;
     continue;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      continue;
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           return;
          }
         else
          {
          }
        }
       if(_GLF_DEAD(false))
        continue;
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  return;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if((subgroup_local_id % 2) == 0)
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         return;
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        return;
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        return;
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(vec4(injectionSwitch, 0.0, 1.0), max(vec4(injectionSwitch, 0.0, 1.0), vec4(injectionSwitch, 0.0, 1.0))))).y, (false ? _GLF_IDENTITY(_GLF_FUZZED(70.31), max(_GLF_FUZZED(70.31), _GLF_FUZZED(70.31))) : injectionSwitch.y)), true && (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(vec4(injectionSwitch, 0.0, 1.0), max(vec4(injectionSwitch, 0.0, 1.0), vec4(injectionSwitch, 0.0, 1.0))))).y, (false ? _GLF_IDENTITY(_GLF_FUZZED(70.31), max(_GLF_IDENTITY(_GLF_FUZZED(70.31), (_GLF_FUZZED(_GLF_IDENTITY(70.31, mix(float(_GLF_FUZZED(-752.073)), float(70.31), bool(true))))) - 0.0), _GLF_FUZZED(70.31))) : injectionSwitch.y)), _GLF_IDENTITY(true, true && (true)) && (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(mat4x2(injectionSwitch.x, _GLF_ZERO(0.0, injectionSwitch.x), cos(0.0), 0.0, sqrt(1.0), _GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0)), max(float(mat4x2(injectionSwitch.x, _GLF_ZERO(0.0, injectionSwitch.x), cos(0.0), 0.0, sqrt(1.0), _GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0)), float(mat4x2(injectionSwitch.x, _GLF_ZERO(0.0, injectionSwitch.x), cos(0.0), 0.0, sqrt(1.0), _GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0))))) > injectionSwitch.y))))))))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), false || (! (injectionSwitch.x > injectionSwitch.y)))), ! (! (_GLF_IDENTITY(! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), false || (! (injectionSwitch.x > injectionSwitch.y)))), false || (! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), false || (! (injectionSwitch.x > injectionSwitch.y))))))))))))))
              return;
             do
              {
               if(_GLF_DEAD(false))
                return;
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                return;
               if(_GLF_DEAD(false))
                break;
              }
             while(_GLF_WRAPPED_LOOP(false));
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                return;
               do
                {
                 return;
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_DEAD(false))))
              return;
             return;
             if(_GLF_DEAD(false))
              return;
             if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)))) < injectionSwitch.y)) && (! (false)))))))
              return;
            }
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              return;
            }
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               return;
               if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec2(false, false))), (injectionSwitch.x > injectionSwitch.y))))
                {
                 do
                  {
                   return;
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
               if(_GLF_DEAD(false))
                return;
              }
             else
              {
              }
            }
           else
            {
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                }
               else
                {
                 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 | 0)); _GLF_IDENTITY(_injected_loop_counter --, 1 * (_injected_loop_counter --)))
                  {
                   return;
                  }
                }
              }
            }
           if(_GLF_DEAD(false))
            return;
          }
        }
      }
     for(int _injected_loop_counter = int(_GLF_IDENTITY(_GLF_ONE(_GLF_IDENTITY(1.0, float(mat4x2(_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-4.5)), bool(false))), 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0))), _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(8331.5770) : injectionSwitch.y))), (_GLF_IDENTITY(_GLF_ONE(_GLF_IDENTITY(1.0, float(mat4x2(_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-4.5)), bool(false))), 1.0, 0.0, 1.0, 1.0, 0.0, _GLF_IDENTITY(1.0, float(mat4(1.0, determinant(mat4(0.0, abs(0.0), 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0)), 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, round(length(normalize(1.0))), 0.0, 0.0))), 1.0))), _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY((false ? _GLF_FUZZED(8331.5770) : injectionSwitch.y), min((false ? _GLF_FUZZED(8331.5770) : injectionSwitch.y), (false ? _GLF_FUZZED(8331.5770) : injectionSwitch.y))))), (true ? _GLF_ONE(_GLF_IDENTITY(1.0, float(mat4x2(_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_IDENTITY(_GLF_FUZZED(-4.5), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_FUZZED(-4.5) : _GLF_FUZZED(-6.5)))), _GLF_IDENTITY(bool(false), (bool(false)) && true))), 1.0, 0.0, _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), 1.0, 0.0, 1.0, 1.0))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(8331.5770) : injectionSwitch.y)), 1.0 * (_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(8331.5770) : _GLF_IDENTITY(injectionSwitch.y, float(_GLF_IDENTITY(float(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))), mix(float(float(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)))), float(_GLF_FUZZED(-4.8)), bool(false)))))))))) : _GLF_FUZZED(-9.6)))) - tan(0.0))); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, int(int(_GLF_IDENTITY(0, (0) << 0))))); _GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) ^ 0))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mix(vec2(_GLF_FUZZED(1365.9143), _GLF_FUZZED(-1290.4260)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true)), (mix(vec2(_GLF_FUZZED(1365.9143), _GLF_FUZZED(-1290.4260)), vec2(_GLF_IDENTITY((injectionSwitch), ((injectionSwitch)) * mat2(1.0))[0], (injectionSwitch)[1]), bvec2(true, true))) - sqrt(vec2(0.0, 0.0)))).y))))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            break;
           return;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
          }
         else
          {
           if(_GLF_DEAD(false))
            continue;
          }
         if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false))))
          break;
        }
      }
     atomicStore(buf[next_virtual_gid], uint(2), 4, 64, 4);
    }
   else
    {
     atomicStore(buf[next_virtual_gid], _GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(_GLF_IDENTITY(2, clamp(2, 2, 2)), (_GLF_IDENTITY(_GLF_IDENTITY(2, clamp(2, 2, 2)), clamp(_GLF_IDENTITY(_GLF_IDENTITY(2, clamp(2, _GLF_IDENTITY(2, int(_GLF_IDENTITY(ivec3(2, 1, 0), min(ivec3(2, 1, 0), ivec3(2, 1, 0))))), 2)), min(_GLF_IDENTITY(2, clamp(2, 2, 2)), _GLF_IDENTITY(2, clamp(2, 2, 2)))), _GLF_IDENTITY(_GLF_IDENTITY(2, clamp(_GLF_IDENTITY(2, (_GLF_IDENTITY(2, clamp(2, 2, 2))) | (2)), 2, 2)), int(ivec4(_GLF_IDENTITY(2, clamp(2, 2, 2)), 0, 1, 0))), _GLF_IDENTITY(2, clamp(2, 2, 2))))) << 0)), (_GLF_IDENTITY(false, ! (! (false))) ? _GLF_FUZZED(clamp(workgroup_size, virtual_gid, workgroup_size)) : uint(_GLF_IDENTITY(2, clamp(2, 2, 2))))), _GLF_IDENTITY(0u, _GLF_IDENTITY((0u), (_GLF_IDENTITY((0u), (true ? (0u) : _GLF_FUZZED(subgroup_base)))) + _GLF_IDENTITY(0u, (uint(_GLF_ONE(1.0, injectionSwitch.y)) ^ 1u) | (0u))) | (0u)) + (uint(_GLF_IDENTITY(2, _GLF_IDENTITY(clamp(2, 2, 2), (clamp(2, 2, 2)) + 0))))), 4, _GLF_IDENTITY(_GLF_IDENTITY(64, _GLF_IDENTITY(1, min(1, 1)) * (64)), (64) | _GLF_IDENTITY((64), max((64), (64)))), 4);
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(injectionSwitch.x > injectionSwitch.y, false)))))))
      return;
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false || (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(injectionSwitch.x > injectionSwitch.y, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true))), ! (! (injectionSwitch.x > injectionSwitch.y))))))), bool(bool((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).x > injectionSwitch.y)))))))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && _GLF_IDENTITY(true, bool(_GLF_IDENTITY(bool(true), (bool(true)) && true)))))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       else
        {
        }
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bvec3(true, true, true)))))
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y))); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_DEAD(false))
            return;
           return;
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              break;
             return;
            }
          }
        }
       else
        {
        }
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != 0, (_injected_loop_counter != 0) || false)); _injected_loop_counter --)
      {
       return;
      }
    }
  }
 else
  {
  }
 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false || (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), _GLF_IDENTITY(bool(bvec3(bool(bvec2(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false || (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false, false)), true && (bool(bvec3(bool(bvec2(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false || (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false, false))))))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       return;
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = 1; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, 0 | (_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) | (_injected_loop_counter)))), (_injected_loop_counter) ^ (0 | 0)) != 0, true && (_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) ^ (0 | 0)) != 0))), false || (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, 0 | (_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) | (_injected_loop_counter)))), (_injected_loop_counter) ^ (0 | 0)) != 0, true && (_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) ^ (0 | 0)) != 0))), (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, 0 | (_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) | (_injected_loop_counter)))), (_injected_loop_counter) ^ (0 | 0)) != 0, true && (_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) ^ (0 | 0)) != 0)))) || false))); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_TRUE(true, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)) : _GLF_FUZZED(injectionSwitch))).x < injectionSwitch.y), ((injectionSwitch.x < injectionSwitch.y)) && true))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && (false)), _GLF_IDENTITY(bool(bvec4(false, false, true, _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))) * 1.0))))), true && (bool(bvec4(false, false, true, _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))) * 1.0))))))))))
        break;
       if(_GLF_DEAD(false))
        continue;
       return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     if(_GLF_DEAD(false))
      break;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      continue;
    }
  }
 if(_GLF_DEAD(false))
  return;
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
