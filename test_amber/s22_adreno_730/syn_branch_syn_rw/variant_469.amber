#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, true, true)))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(_GLF_IDENTITY(true, (true) || _GLF_IDENTITY(false, false || (false))), bool(bvec3(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) && (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(9.4)), vec2(_GLF_FUZZED(float(true)), (injectionSwitch)[1]), bvec2(false, true))).y), bool(_GLF_IDENTITY(bvec3((injectionSwitch.x > injectionSwitch.y), true, true), bvec3(bvec3(bvec3((injectionSwitch.x > injectionSwitch.y), true, true)))))))), bool(bvec4(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(-583.621))))), false || (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(_GLF_IDENTITY(bvec2((injectionSwitch.x > injectionSwitch.y), true), bvec2(bvec3(_GLF_IDENTITY(bvec2((injectionSwitch.x > injectionSwitch.y), true), bvec2(bvec4(bvec2((_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y), true), true, _GLF_IDENTITY(true, ! (! (true)))))), true))))))))), false, true, true))))))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || _GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY(false, (false) || _GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), ! (! (_GLF_IDENTITY(false, (false) && true)))), (injectionSwitch.x > injectionSwitch.y)))) && true)))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 uint workgroup_size = _GLF_IDENTITY(gl_WorkGroupSize, clamp(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize, max(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize, _GLF_IDENTITY(uvec3(0u, 0u, 0u), (uvec3(0u, 0u, 0u)) + (uvec3(0u, 0u, 0u) ^ uvec3(0u, 0u, 0u))) ^ (_GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) + uvec3(0u, 0u, 0u)))), min(gl_WorkGroupSize, gl_WorkGroupSize)), gl_WorkGroupSize)), (gl_WorkGroupSize) | (_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize, (false ? _GLF_FUZZED(uvec3(57883u, 49517u, _GLF_IDENTITY(22404u, min(22404u, _GLF_IDENTITY(22404u, (_GLF_IDENTITY(22404u, uint(uint(_GLF_IDENTITY(22404u, 0u ^ (22404u)))))) | (22404u)))))) : gl_WorkGroupSize)), _GLF_IDENTITY(uvec3(uvec4(_GLF_IDENTITY(gl_WorkGroupSize, (false ? _GLF_FUZZED(_GLF_IDENTITY(uvec3(57883u, 49517u, _GLF_IDENTITY(22404u, min(22404u, 22404u))), max(uvec3(57883u, 49517u, _GLF_IDENTITY(22404u, min(22404u, 22404u))), uvec3(57883u, 49517u, _GLF_IDENTITY(22404u, min(22404u, 22404u)))))) : gl_WorkGroupSize)), 1u)), ~ (~ (_GLF_IDENTITY(uvec3(uvec4(_GLF_IDENTITY(gl_WorkGroupSize, (false ? _GLF_FUZZED(uvec3(57883u, 49517u, _GLF_IDENTITY(22404u, min(22404u, 22404u)))) : gl_WorkGroupSize)), 1u)), (uvec3(uvec4(_GLF_IDENTITY(gl_WorkGroupSize, (false ? _GLF_FUZZED(_GLF_IDENTITY(uvec3(57883u, 49517u, _GLF_IDENTITY(_GLF_IDENTITY(22404u, (22404u) | (_GLF_IDENTITY(22404u, 0u ^ (22404u)))), min(22404u, 22404u))), (true ? _GLF_IDENTITY(uvec3(57883u, 49517u, _GLF_IDENTITY(_GLF_IDENTITY(22404u, (22404u) | (_GLF_IDENTITY(22404u, 0u ^ (22404u)))), min(22404u, 22404u))), max(_GLF_IDENTITY(uvec3(57883u, 49517u, _GLF_IDENTITY(_GLF_IDENTITY(22404u, (22404u) | (_GLF_IDENTITY(22404u, 0u ^ (22404u)))), min(22404u, 22404u))), (uvec3(57883u, 49517u, _GLF_IDENTITY(_GLF_IDENTITY(22404u, (22404u) | (_GLF_IDENTITY(22404u, 0u ^ (22404u)))), min(22404u, 22404u)))) * uvec3(1u, 1u, 1u)), uvec3(57883u, 49517u, _GLF_IDENTITY(_GLF_IDENTITY(22404u, (22404u) | (_GLF_IDENTITY(22404u, 0u ^ (22404u)))), min(22404u, 22404u))))) : _GLF_FUZZED(uvec3(162915u, 42300u, 58431u))))) : gl_WorkGroupSize)), 1u))) | (uvec3(_GLF_IDENTITY(uvec4(_GLF_IDENTITY(gl_WorkGroupSize, (false ? _GLF_FUZZED(uvec3(57883u, 49517u, _GLF_IDENTITY(22404u, min(22404u, 22404u)))) : gl_WorkGroupSize)), 1u), uvec4(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)) + (uvec4(_GLF_IDENTITY(gl_WorkGroupSize, (false ? _GLF_FUZZED(uvec3(57883u, 49517u, _GLF_IDENTITY(22404u, min(22404u, 22404u)))) : gl_WorkGroupSize)), 1u)))))))))))), _GLF_IDENTITY(gl_WorkGroupSize, uvec3(uvec4(gl_WorkGroupSize, 0u))), gl_WorkGroupSize)).x;
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec3(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(injectionSwitch.x > injectionSwitch.y, true, false, true))), true, true))), false || (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, round(length(normalize(vec3(1.0, 1.0, 1.0)))) * (_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)))), min(_GLF_IDENTITY(injectionSwitch.y, round(length(normalize(vec3(1.0, 1.0, 1.0)))) * (_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)))), _GLF_IDENTITY(injectionSwitch.y, round(length(normalize(vec3(1.0, 1.0, 1.0)))) * (_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)))))), max(_GLF_IDENTITY(injectionSwitch.y, round(length(normalize(vec3(1.0, 1.0, 1.0)))) * (_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)))), _GLF_IDENTITY(injectionSwitch.y, round(length(normalize(vec3(1.0, 1.0, 1.0)))) * (_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))))))))))), bool(bvec4(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)).x > injectionSwitch.y, bool(bvec4(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))), float(_GLF_FUZZED((+ vec4(5.9, -5455.5311, 3.9, -8.2)).t)), bool(false))), true, false, true))), true, true))), false || (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, round(length(_GLF_IDENTITY(normalize(vec3(1.0, 1.0, 1.0)), mat3(1.0) * (normalize(vec3(1.0, 1.0, 1.0)))))) * (_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))))))))), (_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) > injectionSwitch.y, bool(bvec4(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))), float(_GLF_FUZZED((+ vec4(5.9, -5455.5311, 3.9, -8.2)).t)), bool(false))), true, false, true))), true, true))), false || _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, round(length(normalize(vec3(1.0, 1.0, 1.0)))) * _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))), min(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))), clamp((_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))), (_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))), (_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))), (_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))))))), ! (_GLF_IDENTITY(! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, round(length(normalize(vec3(1.0, 1.0, 1.0)))) * _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))), min(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))), clamp((_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))), (_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))), (_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))), (_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)))))))))), ! (! (! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, round(length(normalize(vec3(1.0, 1.0, 1.0)))) * _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))), min(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))), clamp((_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))), (_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))), (_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))), (_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)))))))))))))))))), true && (_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec3(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), max(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))))), float(_GLF_FUZZED((+ vec4(5.9, -5455.5311, 3.9, -8.2)).t)), bool(false))), 1.0 * (_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))), float(_GLF_FUZZED((_GLF_IDENTITY(+ vec4(5.9, -5455.5311, 3.9, -8.2), vec4(mat2(_GLF_IDENTITY(+ vec4(5.9, -5455.5311, 3.9, -8.2), min(+ vec4(5.9, _GLF_IDENTITY(-5455.5311, 1.0 * (-5455.5311)), 3.9, -8.2), + vec4(5.9, -5455.5311, 3.9, -8.2))))))).t)), bool(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) || false)))))))), true, false, true))), true, true))), false || (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, round(length(normalize(vec3(1.0, 1.0, 1.0)))) * (_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)))))))))))))) || false), true, false, _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = workgroup_size * workgroup_id;
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))))))))
  barrier();
 uint subgroup_base = _GLF_IDENTITY(subgroup_id, 0u | (subgroup_id)) * subgroup_size;
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
  barrier();
 uint virtual_gid = workgroup_base + _GLF_IDENTITY(subgroup_base, (_GLF_IDENTITY(true ? subgroup_base : _GLF_FUZZED(num_workgroup), ~ (_GLF_IDENTITY(~ (true ? subgroup_base : _GLF_FUZZED(num_workgroup)), max(~ (true ? subgroup_base : _GLF_FUZZED(num_workgroup)), ~ (true ? subgroup_base : _GLF_FUZZED(num_workgroup)))))))) + subgroup_local_id;
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))))
  barrier();
 uint next_virtual_gid = _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, ~ (~ (workgroup_base))) + _GLF_IDENTITY(subgroup_base, min(subgroup_base, subgroup_base)), _GLF_IDENTITY(max(workgroup_base + subgroup_base, _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, ((1u << _GLF_IDENTITY(uint(0u), uint(0u))) >> _GLF_IDENTITY(uint(0u), uint(0u))) * (_GLF_IDENTITY(workgroup_base, ~ (_GLF_IDENTITY(~ (workgroup_base), uint(uint(~ (workgroup_base)))))))) + subgroup_base, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + subgroup_base, (workgroup_base + _GLF_IDENTITY(subgroup_base, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? subgroup_base : _GLF_FUZZED(subgroup_id)))) | (_GLF_IDENTITY(workgroup_base + subgroup_base, uint(uvec2(workgroup_base + subgroup_base, 0u))))), (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + subgroup_base, (workgroup_base + _GLF_IDENTITY(subgroup_base, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? subgroup_base : _GLF_FUZZED(subgroup_id)))) | (_GLF_IDENTITY(workgroup_base + subgroup_base, uint(uvec2(workgroup_base + subgroup_base, 0u))))), min(_GLF_IDENTITY(workgroup_base + subgroup_base, (workgroup_base + _GLF_IDENTITY(subgroup_base, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? subgroup_base : _GLF_FUZZED(subgroup_id)))) | (_GLF_IDENTITY(workgroup_base + subgroup_base, uint(uvec2(workgroup_base + subgroup_base, 0u))))), _GLF_IDENTITY(workgroup_base + subgroup_base, (workgroup_base + _GLF_IDENTITY(subgroup_base, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? subgroup_base : _GLF_FUZZED(subgroup_id)))) | (_GLF_IDENTITY(workgroup_base + subgroup_base, uint(uvec2(workgroup_base + subgroup_base, 0u)))))))) - 0u)), max((_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + subgroup_base, (workgroup_base + _GLF_IDENTITY(subgroup_base, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? subgroup_base : _GLF_FUZZED(subgroup_id)))) | (_GLF_IDENTITY(workgroup_base + subgroup_base, uint(uvec2(workgroup_base + subgroup_base, 0u))))), (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + subgroup_base, (workgroup_base + _GLF_IDENTITY(subgroup_base, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? subgroup_base : _GLF_FUZZED(subgroup_id)))) | (_GLF_IDENTITY(workgroup_base + subgroup_base, uint(uvec2(workgroup_base + subgroup_base, 0u))))), min(_GLF_IDENTITY(workgroup_base + subgroup_base, (workgroup_base + _GLF_IDENTITY(subgroup_base, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? subgroup_base : _GLF_FUZZED(subgroup_id)))) | (_GLF_IDENTITY(workgroup_base + subgroup_base, uint(uvec2(workgroup_base + subgroup_base, 0u))))), _GLF_IDENTITY(workgroup_base + subgroup_base, (workgroup_base + _GLF_IDENTITY(subgroup_base, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? subgroup_base : _GLF_FUZZED(subgroup_id)))) | (_GLF_IDENTITY(workgroup_base + subgroup_base, uint(uvec2(workgroup_base + subgroup_base, 0u)))))))) - 0u)), (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + subgroup_base, (workgroup_base + _GLF_IDENTITY(subgroup_base, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? subgroup_base : _GLF_FUZZED(subgroup_id)))) | (_GLF_IDENTITY(workgroup_base + subgroup_base, uint(uvec2(workgroup_base + subgroup_base, 0u))))), (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + subgroup_base, (workgroup_base + _GLF_IDENTITY(subgroup_base, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? subgroup_base : _GLF_FUZZED(subgroup_id)))) | (_GLF_IDENTITY(workgroup_base + subgroup_base, uint(uvec2(workgroup_base + subgroup_base, 0u))))), min(_GLF_IDENTITY(workgroup_base + subgroup_base, (workgroup_base + _GLF_IDENTITY(subgroup_base, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? subgroup_base : _GLF_FUZZED(subgroup_id)))) | (_GLF_IDENTITY(workgroup_base + subgroup_base, uint(uvec2(workgroup_base + subgroup_base, 0u))))), _GLF_IDENTITY(workgroup_base + subgroup_base, (workgroup_base + _GLF_IDENTITY(subgroup_base, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? subgroup_base : _GLF_FUZZED(subgroup_id)))) | (_GLF_IDENTITY(workgroup_base + subgroup_base, uint(uvec2(workgroup_base + subgroup_base, 0u)))))))) - 0u)))) >> 0u)), max(max(workgroup_base + subgroup_base, _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, ((1u << _GLF_IDENTITY(uint(0u), uint(0u))) >> _GLF_IDENTITY(uint(0u), uint(0u))) * (_GLF_IDENTITY(workgroup_base, ~ (_GLF_IDENTITY(~ (workgroup_base), uint(uint(~ _GLF_IDENTITY((workgroup_base), (true ? (workgroup_base) : _GLF_FUZZED(workgroup_base)))))))))) + subgroup_base, (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + subgroup_base, _GLF_IDENTITY(uint(uint(workgroup_base + subgroup_base)), max(_GLF_IDENTITY(uint(uint(workgroup_base + subgroup_base)), 0u ^ (uint(uint(workgroup_base + subgroup_base)))), uint(uint(workgroup_base + subgroup_base))))), (workgroup_base + _GLF_IDENTITY(_GLF_IDENTITY(subgroup_base, (subgroup_base) | (subgroup_base)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? subgroup_base : _GLF_FUZZED(subgroup_id)))) | (_GLF_IDENTITY(workgroup_base + subgroup_base, uint(uvec2(workgroup_base + subgroup_base, 0u)))))) >> 0u)), max(workgroup_base + subgroup_base, _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, ((1u << _GLF_IDENTITY(uint(0u), uint(0u))) >> _GLF_IDENTITY(uint(0u), uint(0u))) * (_GLF_IDENTITY(workgroup_base, ~ (_GLF_IDENTITY(~ (workgroup_base), uint(uint(~ (workgroup_base)))))))) + subgroup_base, (_GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_base, (subgroup_base) - 0u), (workgroup_base + _GLF_IDENTITY(subgroup_base, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? subgroup_base : _GLF_FUZZED(subgroup_id)))) | (_GLF_IDENTITY(workgroup_base + subgroup_base, uint(uvec2(workgroup_base + subgroup_base, 0u)))))) >> 0u))))) + (_GLF_IDENTITY((subgroup_local_id + _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) / int(_GLF_ONE(1.0, injectionSwitch.y)))) | (1)), (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) / int(_GLF_ONE(1.0, injectionSwitch.y)))) | (1))) | 0), (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) / int(_GLF_ONE(1.0, injectionSwitch.y)))) | (1))) >> (1 ^ 1))) % subgroup_size, min((subgroup_local_id + _GLF_IDENTITY(1, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(1, (1) / int(_GLF_ONE(1.0, injectionSwitch.y))), (_GLF_IDENTITY(1, (1) / int(_GLF_ONE(1.0, injectionSwitch.y)))) / 1)), max(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(1, (1) / int(_GLF_ONE(1.0, injectionSwitch.y))), (_GLF_IDENTITY(1, (1) / int(_GLF_ONE(1.0, injectionSwitch.y)))) / 1)), ((_GLF_IDENTITY(_GLF_IDENTITY(1, (1) / int(_GLF_ONE(1.0, injectionSwitch.y))), (_GLF_IDENTITY(1, (1) / int(_GLF_ONE(1.0, injectionSwitch.y)))) / 1))) / 1), (_GLF_IDENTITY(_GLF_IDENTITY(1, (1) / int(_GLF_ONE(1.0, injectionSwitch.y))), (_GLF_IDENTITY(1, (1) / int(_GLF_ONE(1.0, injectionSwitch.y)))) / 1)))) | (1))) % subgroup_size, (subgroup_local_id + _GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) / int(_GLF_ONE(1.0, injectionSwitch.y)))) | (1))) % subgroup_size)));
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat2x3(injectionSwitch, 1.0, 0.0, 0.0, 1.0), mat2x3(mat2x3(mat2x3(injectionSwitch, 1.0, 0.0, 0.0, 1.0)))))))), (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat2x3(injectionSwitch, 1.0, 0.0, 0.0, 1.0), mat2x3(mat2x3(mat2x3(injectionSwitch, 1.0, 0.0, 0.0, 1.0))))))))) * mat2(1.0)).x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(bvec4((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(true, false || (true)), false, true)), bool(bvec4(bool(bvec4((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(true, false || (true)), false, true)), true, false, true)))))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   barrier();
  }
 uint read = atomicLoad(buf[_GLF_IDENTITY(virtual_gid, clamp(virtual_gid, virtual_gid, virtual_gid))], 4, 64, 2);
 if((_GLF_IDENTITY(subgroup_local_id % _GLF_IDENTITY(2, _GLF_IDENTITY((2) | (2), (1 ^ (1 & 1)) | ((2) | (2)))), _GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id % _GLF_IDENTITY(2, (_GLF_IDENTITY(2, 0 | (2))) | (2)), (subgroup_local_id % _GLF_IDENTITY(_GLF_IDENTITY(2, 0 | (2)), (2) | (_GLF_IDENTITY(2, _GLF_IDENTITY((true ? _GLF_IDENTITY(2, int(ivec3(_GLF_IDENTITY(2, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((false ? _GLF_FUZZED(_GLF_IDENTITY(-71206, (_GLF_IDENTITY(-71206, 0 ^ _GLF_IDENTITY((_GLF_IDENTITY(-71206, (-71206) | (-71206))), 0 | (_GLF_IDENTITY((_GLF_IDENTITY(-71206, (-71206) | (-71206))), (_GLF_IDENTITY((_GLF_IDENTITY(-71206, (-71206) | (-71206))), ((_GLF_IDENTITY(-71206, (-71206) | (-71206)))) | ((_GLF_IDENTITY(-71206, (-71206) | (-71206)))))) >> 0))))) | 0)) : 2), ((false ? _GLF_FUZZED(_GLF_IDENTITY(-71206, (_GLF_IDENTITY(-71206, 0 ^ _GLF_IDENTITY((_GLF_IDENTITY(-71206, (-71206) | (-71206))), 0 | (_GLF_IDENTITY((_GLF_IDENTITY(-71206, (-71206) | (-71206))), (_GLF_IDENTITY((_GLF_IDENTITY(-71206, (-71206) | (-71206))), ((_GLF_IDENTITY(-71206, (-71206) | (-71206)))) | ((_GLF_IDENTITY(-71206, (-71206) | (-71206)))))) >> 0))))) | 0)) : 2)) - 0), ((false ? _GLF_FUZZED(_GLF_IDENTITY(-71206, (_GLF_IDENTITY(-71206, 0 ^ (_GLF_IDENTITY(-71206, (-71206) | (-71206))))) | 0)) : 2)) | (_GLF_IDENTITY(_GLF_IDENTITY((false ? _GLF_FUZZED(_GLF_IDENTITY(-71206, (_GLF_IDENTITY(-71206, 0 ^ (_GLF_IDENTITY(-71206, (-71206) | (-71206))))) | 0)) : 2), ((false ? _GLF_FUZZED(_GLF_IDENTITY(-71206, (_GLF_IDENTITY(-71206, 0 ^ (_GLF_IDENTITY(-71206, (-71206) | (-71206))))) | 0)) : 2)) | 0), ((false ? _GLF_FUZZED(_GLF_IDENTITY(-71206, (_GLF_IDENTITY(-71206, 0 ^ (_GLF_IDENTITY(-71206, (-71206) | (-71206))))) | 0)) : 2)) * 1))), min(_GLF_IDENTITY(_GLF_IDENTITY((false ? _GLF_FUZZED(_GLF_IDENTITY(-71206, (_GLF_IDENTITY(-71206, 0 ^ _GLF_IDENTITY((_GLF_IDENTITY(-71206, (-71206) | (-71206))), 0 | (_GLF_IDENTITY((_GLF_IDENTITY(-71206, (-71206) | (-71206))), (_GLF_IDENTITY((_GLF_IDENTITY(-71206, (-71206) | (-71206))), ((_GLF_IDENTITY(-71206, (-71206) | (-71206)))) | ((_GLF_IDENTITY(-71206, (-71206) | (-71206)))))) >> 0))))) | 0)) : 2), ((false ? _GLF_FUZZED(_GLF_IDENTITY(-71206, (_GLF_IDENTITY(-71206, 0 ^ _GLF_IDENTITY((_GLF_IDENTITY(-71206, (-71206) | (-71206))), 0 | (_GLF_IDENTITY((_GLF_IDENTITY(-71206, (-71206) | (-71206))), (_GLF_IDENTITY((_GLF_IDENTITY(-71206, (-71206) | (-71206))), ((_GLF_IDENTITY(-71206, (-71206) | (-71206)))) | ((_GLF_IDENTITY(-71206, (-71206) | (-71206)))))) >> 0))))) | 0)) : 2)) - 0), ((false ? _GLF_FUZZED(_GLF_IDENTITY(-71206, (_GLF_IDENTITY(-71206, 0 ^ (_GLF_IDENTITY(-71206, (-71206) | (-71206))))) | 0)) : 2)) | (_GLF_IDENTITY(_GLF_IDENTITY((false ? _GLF_FUZZED(_GLF_IDENTITY(-71206, (_GLF_IDENTITY(-71206, 0 ^ (_GLF_IDENTITY(-71206, (-71206) | (-71206))))) | 0)) : 2), ((false ? _GLF_FUZZED(_GLF_IDENTITY(-71206, (_GLF_IDENTITY(-71206, 0 ^ (_GLF_IDENTITY(-71206, (-71206) | (-71206))))) | 0)) : 2)) | 0), ((false ? _GLF_FUZZED(_GLF_IDENTITY(-71206, (_GLF_IDENTITY(-71206, 0 ^ (_GLF_IDENTITY(-71206, (-71206) | (-71206))))) | 0)) : 2)) * 1))), _GLF_IDENTITY(_GLF_IDENTITY((false ? _GLF_FUZZED(_GLF_IDENTITY(-71206, (_GLF_IDENTITY(-71206, 0 ^ _GLF_IDENTITY((_GLF_IDENTITY(-71206, (-71206) | (-71206))), 0 | (_GLF_IDENTITY((_GLF_IDENTITY(-71206, (-71206) | (-71206))), (_GLF_IDENTITY((_GLF_IDENTITY(-71206, (-71206) | (-71206))), ((_GLF_IDENTITY(-71206, (-71206) | (-71206)))) | ((_GLF_IDENTITY(-71206, (-71206) | (-71206)))))) >> 0))))) | 0)) : 2), ((false ? _GLF_FUZZED(_GLF_IDENTITY(-71206, (_GLF_IDENTITY(-71206, 0 ^ _GLF_IDENTITY((_GLF_IDENTITY(-71206, (-71206) | (-71206))), 0 | (_GLF_IDENTITY((_GLF_IDENTITY(-71206, (-71206) | (-71206))), (_GLF_IDENTITY((_GLF_IDENTITY(-71206, (-71206) | (-71206))), ((_GLF_IDENTITY(-71206, (-71206) | (-71206)))) | ((_GLF_IDENTITY(-71206, (-71206) | (-71206)))))) >> 0))))) | 0)) : 2)) - 0), ((false ? _GLF_FUZZED(_GLF_IDENTITY(-71206, (_GLF_IDENTITY(-71206, 0 ^ (_GLF_IDENTITY(-71206, (-71206) | (-71206))))) | 0)) : 2)) | (_GLF_IDENTITY(_GLF_IDENTITY((false ? _GLF_FUZZED(_GLF_IDENTITY(-71206, (_GLF_IDENTITY(-71206, 0 ^ (_GLF_IDENTITY(-71206, (-71206) | (-71206))))) | 0)) : 2), ((false ? _GLF_FUZZED(_GLF_IDENTITY(-71206, (_GLF_IDENTITY(-71206, 0 ^ (_GLF_IDENTITY(-71206, (-71206) | (-71206))))) | 0)) : 2)) | 0), ((false ? _GLF_FUZZED(_GLF_IDENTITY(-71206, (_GLF_IDENTITY(-71206, 0 ^ (_GLF_IDENTITY(-71206, (-71206) | (-71206))))) | 0)) : 2)) * 1)))))), 1, (0 ^ 1)))) : _GLF_FUZZED(ivec4(-15239, -48840, 1773, -85186)[2])), ((true ? _GLF_IDENTITY(2, int(ivec3(_GLF_IDENTITY(2, _GLF_IDENTITY(_GLF_IDENTITY((false ? _GLF_FUZZED(_GLF_IDENTITY(-71206, (_GLF_IDENTITY(-71206, 0 ^ (_GLF_IDENTITY(-71206, (-71206) | (_GLF_IDENTITY(-71206, (-71206) << int(_GLF_ZERO(0.0, injectionSwitch.x)))))))) | 0)) : 2), ((false ? _GLF_FUZZED(_GLF_IDENTITY(-71206, (_GLF_IDENTITY(-71206, 0 ^ (_GLF_IDENTITY(-71206, (-71206) | (_GLF_IDENTITY(-71206, (-71206) << int(_GLF_ZERO(0.0, injectionSwitch.x)))))))) | 0)) : 2)) / 1), ((false ? _GLF_FUZZED(_GLF_IDENTITY(-71206, _GLF_IDENTITY((_GLF_IDENTITY(-71206, 0 ^ (_GLF_IDENTITY(-71206, (-71206) | (-71206))))) | 0, min((_GLF_IDENTITY(-71206, 0 ^ (_GLF_IDENTITY(-71206, (-71206) | (-71206))))) | 0, (_GLF_IDENTITY(-71206, 0 ^ (_GLF_IDENTITY(-71206, (-71206) | (-71206))))) | 0)))) : 2)) | _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY((false ? _GLF_FUZZED(_GLF_IDENTITY(-71206, (_GLF_IDENTITY(-71206, 0 ^ (_GLF_IDENTITY(-71206, _GLF_IDENTITY((-71206), ((-71206)) / int(_GLF_ONE(1.0, injectionSwitch.y))) | (-71206))))) | 0)) : 2), ((false ? _GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(-71206, (_GLF_IDENTITY(-71206, 0 ^ (_GLF_IDENTITY(-71206, (-71206) | (-71206))))) | 0)), (true ? _GLF_FUZZED(_GLF_IDENTITY(-71206, (_GLF_IDENTITY(-71206, 0 ^ (_GLF_IDENTITY(-71206, (-71206) | (-71206))))) | 0)) : _GLF_FUZZED(24180))) : 2)) * 1)), clamp((_GLF_IDENTITY((false ? _GLF_FUZZED(_GLF_IDENTITY(-71206, (_GLF_IDENTITY(-71206, 0 ^ (_GLF_IDENTITY(-71206, _GLF_IDENTITY((-71206), ((-71206)) / int(_GLF_ONE(1.0, injectionSwitch.y))) | (-71206))))) | 0)) : 2), ((false ? _GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(-71206, (_GLF_IDENTITY(-71206, 0 ^ (_GLF_IDENTITY(-71206, (-71206) | (-71206))))) | 0)), (true ? _GLF_FUZZED(_GLF_IDENTITY(-71206, (_GLF_IDENTITY(-71206, 0 ^ (_GLF_IDENTITY(-71206, (-71206) | (-71206))))) | 0)) : _GLF_FUZZED(24180))) : 2)) * 1)), (_GLF_IDENTITY((false ? _GLF_FUZZED(_GLF_IDENTITY(-71206, (_GLF_IDENTITY(-71206, 0 ^ (_GLF_IDENTITY(-71206, _GLF_IDENTITY((-71206), ((-71206)) / int(_GLF_ONE(1.0, injectionSwitch.y))) | (-71206))))) | 0)) : 2), ((false ? _GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(-71206, (_GLF_IDENTITY(-71206, 0 ^ (_GLF_IDENTITY(-71206, (-71206) | (-71206))))) | 0)), (true ? _GLF_FUZZED(_GLF_IDENTITY(-71206, (_GLF_IDENTITY(-71206, 0 ^ (_GLF_IDENTITY(-71206, (-71206) | (-71206))))) | 0)) : _GLF_FUZZED(24180))) : 2)) * 1)), (_GLF_IDENTITY((false ? _GLF_FUZZED(_GLF_IDENTITY(-71206, (_GLF_IDENTITY(-71206, 0 ^ (_GLF_IDENTITY(-71206, _GLF_IDENTITY((-71206), ((-71206)) / int(_GLF_ONE(1.0, injectionSwitch.y))) | (-71206))))) | 0)) : 2), ((false ? _GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(-71206, (_GLF_IDENTITY(-71206, 0 ^ (_GLF_IDENTITY(-71206, (-71206) | (-71206))))) | 0)), (true ? _GLF_FUZZED(_GLF_IDENTITY(-71206, (_GLF_IDENTITY(-71206, 0 ^ (_GLF_IDENTITY(-71206, (-71206) | (-71206))))) | 0)) : _GLF_FUZZED(24180))) : 2)) * 1)))), _GLF_IDENTITY(clamp((_GLF_IDENTITY((false ? _GLF_FUZZED(_GLF_IDENTITY(-71206, (_GLF_IDENTITY(-71206, 0 ^ (_GLF_IDENTITY(-71206, (-71206) | (-71206))))) | 0)) : 2), ((false ? _GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(-71206, (_GLF_IDENTITY(-71206, 0 ^ (_GLF_IDENTITY(-71206, (-71206) | (-71206))))) | 0)), (true ? _GLF_FUZZED(_GLF_IDENTITY(-71206, (_GLF_IDENTITY(-71206, 0 ^ (_GLF_IDENTITY(-71206, (-71206) | (-71206))))) | 0)) : _GLF_FUZZED(24180))) : 2)) * 1)), _GLF_IDENTITY((_GLF_IDENTITY((false ? _GLF_FUZZED(_GLF_IDENTITY(-71206, (_GLF_IDENTITY(-71206, 0 ^ (_GLF_IDENTITY(-71206, (-71206) | (-71206))))) | 0)) : 2), ((false ? _GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(-71206, (_GLF_IDENTITY(-71206, 0 ^ (_GLF_IDENTITY(-71206, (-71206) | (-71206))))) | 0)), (true ? _GLF_FUZZED(_GLF_IDENTITY(-71206, (_GLF_IDENTITY(-71206, 0 ^ (_GLF_IDENTITY(-71206, (-71206) | (-71206))))) | 0)) : _GLF_FUZZED(24180))) : 2)) * 1)), clamp(_GLF_IDENTITY((_GLF_IDENTITY((false ? _GLF_FUZZED(_GLF_IDENTITY(-71206, (_GLF_IDENTITY(-71206, 0 ^ (_GLF_IDENTITY(-71206, (-71206) | (-71206))))) | 0)) : 2), ((false ? _GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(-71206, (_GLF_IDENTITY(-71206, 0 ^ (_GLF_IDENTITY(-71206, (-71206) | (-71206))))) | 0)), (true ? _GLF_FUZZED(_GLF_IDENTITY(-71206, (_GLF_IDENTITY(-71206, 0 ^ (_GLF_IDENTITY(-71206, (-71206) | (-71206))))) | 0)) : _GLF_FUZZED(24180))) : 2)) * 1)), ((_GLF_IDENTITY((false ? _GLF_FUZZED(_GLF_IDENTITY(-71206, (_GLF_IDENTITY(-71206, 0 ^ (_GLF_IDENTITY(-71206, (-71206) | (-71206))))) | 0)) : 2), ((false ? _GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(-71206, (_GLF_IDENTITY(-71206, 0 ^ (_GLF_IDENTITY(-71206, (-71206) | (-71206))))) | 0)), (true ? _GLF_FUZZED(_GLF_IDENTITY(-71206, (_GLF_IDENTITY(-71206, 0 ^ (_GLF_IDENTITY(-71206, (-71206) | (-71206))))) | 0)) : _GLF_FUZZED(24180))) : 2)) * 1))) ^ 0), _GLF_IDENTITY((_GLF_IDENTITY((false ? _GLF_FUZZED(_GLF_IDENTITY(-71206, (_GLF_IDENTITY(-71206, 0 ^ (_GLF_IDENTITY(-71206, (-71206) | (-71206))))) | 0)) : 2), ((false ? _GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(-71206, (_GLF_IDENTITY(-71206, 0 ^ (_GLF_IDENTITY(-71206, (-71206) | (-71206))))) | 0)), (true ? _GLF_FUZZED(_GLF_IDENTITY(-71206, (_GLF_IDENTITY(-71206, 0 ^ (_GLF_IDENTITY(-71206, (-71206) | (-71206))))) | 0)) : _GLF_FUZZED(24180))) : 2)) * 1)), ~ (~ ((_GLF_IDENTITY((false ? _GLF_FUZZED(_GLF_IDENTITY(-71206, (_GLF_IDENTITY(-71206, 0 ^ (_GLF_IDENTITY(-71206, (-71206) | (-71206))))) | 0)) : 2), ((false ? _GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(-71206, (_GLF_IDENTITY(-71206, 0 ^ (_GLF_IDENTITY(-71206, (-71206) | (-71206))))) | 0)), (true ? _GLF_FUZZED(_GLF_IDENTITY(-71206, (_GLF_IDENTITY(-71206, 0 ^ (_GLF_IDENTITY(-71206, (-71206) | (-71206))))) | 0)) : _GLF_FUZZED(24180))) : 2)) * 1))))), (_GLF_IDENTITY((false ? _GLF_FUZZED(_GLF_IDENTITY(-71206, (_GLF_IDENTITY(-71206, 0 ^ (_GLF_IDENTITY(-71206, (-71206) | (-71206))))) | 0)) : 2), ((false ? _GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(-71206, (_GLF_IDENTITY(-71206, 0 ^ (_GLF_IDENTITY(-71206, (-71206) | (-71206))))) | 0)), (true ? _GLF_FUZZED(_GLF_IDENTITY(-71206, (_GLF_IDENTITY(-71206, 0 ^ (_GLF_IDENTITY(-71206, (-71206) | (-71206))))) | 0)) : _GLF_FUZZED(24180))) : 2)) * 1)))), (_GLF_IDENTITY((false ? _GLF_FUZZED(_GLF_IDENTITY(-71206, (_GLF_IDENTITY(-71206, 0 ^ (_GLF_IDENTITY(-71206, (-71206) | (-71206))))) | 0)) : 2), ((false ? _GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(-71206, (_GLF_IDENTITY(-71206, 0 ^ (_GLF_IDENTITY(-71206, (-71206) | (-71206))))) | 0)), (true ? _GLF_FUZZED(_GLF_IDENTITY(-71206, (_GLF_IDENTITY(-71206, 0 ^ (_GLF_IDENTITY(-71206, (-71206) | (-71206))))) | 0)) : _GLF_FUZZED(24180))) : 2)) * 1))), (_GLF_IDENTITY(clamp((_GLF_IDENTITY((false ? _GLF_FUZZED(_GLF_IDENTITY(-71206, (_GLF_IDENTITY(-71206, 0 ^ (_GLF_IDENTITY(-71206, (-71206) | (-71206))))) | 0)) : 2), ((false ? _GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(-71206, (_GLF_IDENTITY(-71206, 0 ^ (_GLF_IDENTITY(-71206, (-71206) | (-71206))))) | 0)), (true ? _GLF_FUZZED(_GLF_IDENTITY(-71206, (_GLF_IDENTITY(-71206, 0 ^ (_GLF_IDENTITY(-71206, (-71206) | (-71206))))) | 0)) : _GLF_FUZZED(24180))) : 2)) * 1)), _GLF_IDENTITY((_GLF_IDENTITY((false ? _GLF_FUZZED(_GLF_IDENTITY(-71206, (_GLF_IDENTITY(-71206, 0 ^ (_GLF_IDENTITY(-71206, (-71206) | (-71206))))) | 0)) : 2), ((false ? _GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(-71206, (_GLF_IDENTITY(-71206, 0 ^ (_GLF_IDENTITY(-71206, (-71206) | (-71206))))) | 0)), (true ? _GLF_FUZZED(_GLF_IDENTITY(-71206, (_GLF_IDENTITY(-71206, 0 ^ (_GLF_IDENTITY(-71206, (-71206) | (-71206))))) | 0)) : _GLF_FUZZED(24180))) : 2)) * 1)), clamp(_GLF_IDENTITY((_GLF_IDENTITY((false ? _GLF_FUZZED(_GLF_IDENTITY(-71206, (_GLF_IDENTITY(-71206, 0 ^ (_GLF_IDENTITY(-71206, (-71206) | (-71206))))) | 0)) : 2), ((false ? _GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(-71206, (_GLF_IDENTITY(-71206, 0 ^ (_GLF_IDENTITY(-71206, (-71206) | (-71206))))) | 0)), (true ? _GLF_FUZZED(_GLF_IDENTITY(-71206, (_GLF_IDENTITY(-71206, 0 ^ (_GLF_IDENTITY(-71206, (-71206) | (-71206))))) | 0)) : _GLF_FUZZED(24180))) : 2)) * 1)), ((_GLF_IDENTITY((false ? _GLF_FUZZED(_GLF_IDENTITY(-71206, (_GLF_IDENTITY(-71206, 0 ^ (_GLF_IDENTITY(-71206, (-71206) | (-71206))))) | 0)) : 2), ((false ? _GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(-71206, (_GLF_IDENTITY(-71206, 0 ^ (_GLF_IDENTITY(-71206, (-71206) | (-71206))))) | 0)), (true ? _GLF_FUZZED(_GLF_IDENTITY(-71206, (_GLF_IDENTITY(-71206, 0 ^ (_GLF_IDENTITY(-71206, (-71206) | (-71206))))) | 0)) : _GLF_FUZZED(24180))) : 2)) * 1))) ^ 0), _GLF_IDENTITY((_GLF_IDENTITY((false ? _GLF_FUZZED(_GLF_IDENTITY(-71206, (_GLF_IDENTITY(-71206, 0 ^ (_GLF_IDENTITY(-71206, (-71206) | (-71206))))) | 0)) : 2), ((false ? _GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(-71206, (_GLF_IDENTITY(-71206, 0 ^ (_GLF_IDENTITY(-71206, (-71206) | (-71206))))) | 0)), (true ? _GLF_FUZZED(_GLF_IDENTITY(-71206, (_GLF_IDENTITY(-71206, 0 ^ (_GLF_IDENTITY(-71206, (-71206) | (-71206))))) | 0)) : _GLF_FUZZED(24180))) : 2)) * 1)), ~ (~ ((_GLF_IDENTITY((false ? _GLF_FUZZED(_GLF_IDENTITY(-71206, (_GLF_IDENTITY(-71206, 0 ^ (_GLF_IDENTITY(-71206, (-71206) | (-71206))))) | 0)) : 2), ((false ? _GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(-71206, (_GLF_IDENTITY(-71206, 0 ^ (_GLF_IDENTITY(-71206, (-71206) | (-71206))))) | 0)), (true ? _GLF_FUZZED(_GLF_IDENTITY(-71206, (_GLF_IDENTITY(-71206, 0 ^ (_GLF_IDENTITY(-71206, (-71206) | (-71206))))) | 0)) : _GLF_FUZZED(24180))) : 2)) * 1))))), (_GLF_IDENTITY((false ? _GLF_FUZZED(_GLF_IDENTITY(-71206, (_GLF_IDENTITY(-71206, 0 ^ (_GLF_IDENTITY(-71206, (-71206) | (-71206))))) | 0)) : 2), ((false ? _GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(-71206, (_GLF_IDENTITY(-71206, 0 ^ (_GLF_IDENTITY(-71206, (-71206) | (-71206))))) | 0)), (true ? _GLF_FUZZED(_GLF_IDENTITY(-71206, (_GLF_IDENTITY(-71206, 0 ^ (_GLF_IDENTITY(-71206, (-71206) | (-71206))))) | 0)) : _GLF_FUZZED(24180))) : 2)) * 1)))), (_GLF_IDENTITY((false ? _GLF_FUZZED(_GLF_IDENTITY(-71206, (_GLF_IDENTITY(-71206, 0 ^ (_GLF_IDENTITY(-71206, (-71206) | (-71206))))) | 0)) : 2), ((false ? _GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(-71206, (_GLF_IDENTITY(-71206, 0 ^ (_GLF_IDENTITY(-71206, (-71206) | (-71206))))) | 0)), (true ? _GLF_FUZZED(_GLF_IDENTITY(-71206, (_GLF_IDENTITY(-71206, 0 ^ (_GLF_IDENTITY(-71206, (-71206) | (-71206))))) | 0)) : _GLF_FUZZED(24180))) : 2)) * 1))), clamp(clamp((_GLF_IDENTITY((false ? _GLF_FUZZED(_GLF_IDENTITY(-71206, (_GLF_IDENTITY(-71206, 0 ^ (_GLF_IDENTITY(-71206, (-71206) | (-71206))))) | 0)) : 2), ((false ? _GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(-71206, (_GLF_IDENTITY(-71206, 0 ^ (_GLF_IDENTITY(-71206, (-71206) | (-71206))))) | 0)), (true ? _GLF_FUZZED(_GLF_IDENTITY(-71206, (_GLF_IDENTITY(-71206, 0 ^ (_GLF_IDENTITY(-71206, (-71206) | (-71206))))) | 0)) : _GLF_FUZZED(24180))) : 2)) * 1)), _GLF_IDENTITY((_GLF_IDENTITY((false ? _GLF_FUZZED(_GLF_IDENTITY(-71206, (_GLF_IDENTITY(-71206, 0 ^ (_GLF_IDENTITY(-71206, (-71206) | (-71206))))) | 0)) : 2), ((false ? _GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(-71206, (_GLF_IDENTITY(-71206, 0 ^ (_GLF_IDENTITY(-71206, (-71206) | (-71206))))) | 0)), (true ? _GLF_FUZZED(_GLF_IDENTITY(-71206, (_GLF_IDENTITY(-71206, 0 ^ (_GLF_IDENTITY(-71206, (-71206) | (-71206))))) | 0)) : _GLF_FUZZED(24180))) : 2)) * 1)), clamp(_GLF_IDENTITY((_GLF_IDENTITY((false ? _GLF_FUZZED(_GLF_IDENTITY(-71206, (_GLF_IDENTITY(-71206, 0 ^ (_GLF_IDENTITY(-71206, (-71206) | (-71206))))) | 0)) : 2), ((false ? _GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(-71206, (_GLF_IDENTITY(-71206, 0 ^ (_GLF_IDENTITY(-71206, (-71206) | (-71206))))) | 0)), (true ? _GLF_FUZZED(_GLF_IDENTITY(-71206, (_GLF_IDENTITY(-71206, 0 ^ (_GLF_IDENTITY(-71206, (-71206) | (-71206))))) | 0)) : _GLF_FUZZED(24180))) : 2)) * 1)), ((_GLF_IDENTITY((false ? _GLF_FUZZED(_GLF_IDENTITY(-71206, (_GLF_IDENTITY(-71206, 0 ^ (_GLF_IDENTITY(-71206, (-71206) | (-71206))))) | 0)) : 2), ((false ? _GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(-71206, (_GLF_IDENTITY(-71206, 0 ^ (_GLF_IDENTITY(-71206, (-71206) | (-71206))))) | 0)), (true ? _GLF_FUZZED(_GLF_IDENTITY(-71206, (_GLF_IDENTITY(-71206, 0 ^ (_GLF_IDENTITY(-71206, (-71206) | (-71206))))) | 0)) : _GLF_FUZZED(24180))) : 2)) * 1))) ^ 0), _GLF_IDENTITY((_GLF_IDENTITY((false ? _GLF_FUZZED(_GLF_IDENTITY(-71206, (_GLF_IDENTITY(-71206, 0 ^ (_GLF_IDENTITY(-71206, (-71206) | (-71206))))) | 0)) : 2), ((false ? _GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(-71206, (_GLF_IDENTITY(-71206, 0 ^ (_GLF_IDENTITY(-71206, (-71206) | (-71206))))) | 0)), (true ? _GLF_FUZZED(_GLF_IDENTITY(-71206, (_GLF_IDENTITY(-71206, 0 ^ (_GLF_IDENTITY(-71206, (-71206) | (-71206))))) | 0)) : _GLF_FUZZED(24180))) : 2)) * 1)), ~ (~ ((_GLF_IDENTITY((false ? _GLF_FUZZED(_GLF_IDENTITY(-71206, (_GLF_IDENTITY(-71206, 0 ^ (_GLF_IDENTITY(-71206, (-71206) | (-71206))))) | 0)) : 2), ((false ? _GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(-71206, (_GLF_IDENTITY(-71206, 0 ^ (_GLF_IDENTITY(-71206, (-71206) | (-71206))))) | 0)), (true ? _GLF_FUZZED(_GLF_IDENTITY(-71206, (_GLF_IDENTITY(-71206, 0 ^ (_GLF_IDENTITY(-71206, (-71206) | (-71206))))) | 0)) : _GLF_FUZZED(24180))) : 2)) * 1))))), (_GLF_IDENTITY((false ? _GLF_FUZZED(_GLF_IDENTITY(-71206, (_GLF_IDENTITY(-71206, 0 ^ (_GLF_IDENTITY(-71206, (-71206) | (-71206))))) | 0)) : 2), ((false ? _GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(-71206, (_GLF_IDENTITY(-71206, 0 ^ (_GLF_IDENTITY(-71206, (-71206) | (-71206))))) | 0)), (true ? _GLF_FUZZED(_GLF_IDENTITY(-71206, (_GLF_IDENTITY(-71206, 0 ^ (_GLF_IDENTITY(-71206, (-71206) | (-71206))))) | 0)) : _GLF_FUZZED(24180))) : 2)) * 1)))), (_GLF_IDENTITY((false ? _GLF_FUZZED(_GLF_IDENTITY(-71206, (_GLF_IDENTITY(-71206, 0 ^ (_GLF_IDENTITY(-71206, (-71206) | (-71206))))) | 0)) : 2), ((false ? _GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(-71206, (_GLF_IDENTITY(-71206, 0 ^ (_GLF_IDENTITY(-71206, (-71206) | (-71206))))) | 0)), (true ? _GLF_FUZZED(_GLF_IDENTITY(-71206, (_GLF_IDENTITY(-71206, 0 ^ (_GLF_IDENTITY(-71206, (-71206) | (-71206))))) | 0)) : _GLF_FUZZED(24180))) : 2)) * 1))), _GLF_IDENTITY(clamp((_GLF_IDENTITY((false ? _GLF_FUZZED(_GLF_IDENTITY(-71206, (_GLF_IDENTITY(-71206, 0 ^ (_GLF_IDENTITY(-71206, (-71206) | (-71206))))) | 0)) : 2), ((false ? _GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(-71206, (_GLF_IDENTITY(-71206, 0 ^ (_GLF_IDENTITY(-71206, (-71206) | (-71206))))) | 0)), (true ? _GLF_FUZZED(_GLF_IDENTITY(-71206, (_GLF_IDENTITY(-71206, 0 ^ (_GLF_IDENTITY(-71206, (-71206) | (-71206))))) | 0)) : _GLF_FUZZED(24180))) : 2)) * 1)), _GLF_IDENTITY((_GLF_IDENTITY((false ? _GLF_FUZZED(_GLF_IDENTITY(-71206, (_GLF_IDENTITY(-71206, 0 ^ (_GLF_IDENTITY(-71206, (-71206) | (-71206))))) | 0)) : 2), ((false ? _GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(-71206, (_GLF_IDENTITY(-71206, 0 ^ (_GLF_IDENTITY(-71206, (-71206) | (-71206))))) | 0)), (true ? _GLF_FUZZED(_GLF_IDENTITY(-71206, (_GLF_IDENTITY(-71206, 0 ^ (_GLF_IDENTITY(-71206, (-71206) | (-71206))))) | 0)) : _GLF_FUZZED(24180))) : 2)) * 1)), clamp(_GLF_IDENTITY((_GLF_IDENTITY((false ? _GLF_FUZZED(_GLF_IDENTITY(-71206, (_GLF_IDENTITY(-71206, 0 ^ (_GLF_IDENTITY(-71206, (-71206) | (-71206))))) | 0)) : 2), ((false ? _GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(-71206, (_GLF_IDENTITY(-71206, 0 ^ (_GLF_IDENTITY(-71206, (-71206) | (-71206))))) | 0)), (true ? _GLF_FUZZED(_GLF_IDENTITY(-71206, (_GLF_IDENTITY(-71206, 0 ^ (_GLF_IDENTITY(-71206, (-71206) | (-71206))))) | 0)) : _GLF_FUZZED(24180))) : 2)) * 1)), ((_GLF_IDENTITY((false ? _GLF_FUZZED(_GLF_IDENTITY(-71206, (_GLF_IDENTITY(-71206, 0 ^ (_GLF_IDENTITY(-71206, (-71206) | (-71206))))) | 0)) : 2), ((false ? _GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(-71206, (_GLF_IDENTITY(-71206, 0 ^ (_GLF_IDENTITY(-71206, (-71206) | (-71206))))) | 0)), (true ? _GLF_FUZZED(_GLF_IDENTITY(-71206, (_GLF_IDENTITY(-71206, 0 ^ (_GLF_IDENTITY(-71206, (-71206) | (-71206))))) | 0)) : _GLF_FUZZED(24180))) : 2)) * 1))) ^ 0), _GLF_IDENTITY((_GLF_IDENTITY((false ? _GLF_FUZZED(_GLF_IDENTITY(-71206, (_GLF_IDENTITY(-71206, 0 ^ (_GLF_IDENTITY(-71206, (-71206) | (-71206))))) | 0)) : 2), ((false ? _GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(-71206, (_GLF_IDENTITY(-71206, 0 ^ (_GLF_IDENTITY(-71206, (-71206) | (-71206))))) | 0)), (true ? _GLF_FUZZED(_GLF_IDENTITY(-71206, (_GLF_IDENTITY(-71206, 0 ^ (_GLF_IDENTITY(-71206, (-71206) | (-71206))))) | 0)) : _GLF_FUZZED(24180))) : 2)) * 1)), ~ (~ ((_GLF_IDENTITY((false ? _GLF_FUZZED(_GLF_IDENTITY(-71206, (_GLF_IDENTITY(-71206, 0 ^ (_GLF_IDENTITY(-71206, (-71206) | (-71206))))) | 0)) : 2), ((false ? _GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(-71206, (_GLF_IDENTITY(-71206, 0 ^ (_GLF_IDENTITY(-71206, (-71206) | (-71206))))) | 0)), (true ? _GLF_FUZZED(_GLF_IDENTITY(-71206, (_GLF_IDENTITY(-71206, 0 ^ (_GLF_IDENTITY(-71206, (-71206) | (-71206))))) | 0)) : _GLF_FUZZED(24180))) : 2)) * 1))))), (_GLF_IDENTITY((false ? _GLF_FUZZED(_GLF_IDENTITY(-71206, (_GLF_IDENTITY(-71206, 0 ^ (_GLF_IDENTITY(-71206, (-71206) | (-71206))))) | 0)) : 2), ((false ? _GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(-71206, (_GLF_IDENTITY(-71206, 0 ^ (_GLF_IDENTITY(-71206, (-71206) | (-71206))))) | 0)), (true ? _GLF_FUZZED(_GLF_IDENTITY(-71206, (_GLF_IDENTITY(-71206, 0 ^ (_GLF_IDENTITY(-71206, (-71206) | (-71206))))) | 0)) : _GLF_FUZZED(24180))) : 2)) * 1)))), (_GLF_IDENTITY((false ? _GLF_FUZZED(_GLF_IDENTITY(-71206, (_GLF_IDENTITY(-71206, 0 ^ (_GLF_IDENTITY(-71206, (-71206) | (-71206))))) | 0)) : 2), ((false ? _GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(-71206, (_GLF_IDENTITY(-71206, 0 ^ (_GLF_IDENTITY(-71206, (-71206) | (-71206))))) | 0)), (true ? _GLF_FUZZED(_GLF_IDENTITY(-71206, (_GLF_IDENTITY(-71206, 0 ^ (_GLF_IDENTITY(-71206, (-71206) | (-71206))))) | 0)) : _GLF_FUZZED(24180))) : 2)) * 1))), (false ? _GLF_FUZZED(23279) : clamp((_GLF_IDENTITY((false ? _GLF_FUZZED(_GLF_IDENTITY(-71206, (_GLF_IDENTITY(-71206, 0 ^ (_GLF_IDENTITY(-71206, (-71206) | (-71206))))) | 0)) : 2), ((false ? _GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(-71206, (_GLF_IDENTITY(-71206, 0 ^ (_GLF_IDENTITY(-71206, (-71206) | (-71206))))) | 0)), (true ? _GLF_FUZZED(_GLF_IDENTITY(-71206, (_GLF_IDENTITY(-71206, 0 ^ (_GLF_IDENTITY(-71206, (-71206) | (-71206))))) | 0)) : _GLF_FUZZED(24180))) : 2)) * 1)), _GLF_IDENTITY((_GLF_IDENTITY((false ? _GLF_FUZZED(_GLF_IDENTITY(-71206, (_GLF_IDENTITY(-71206, 0 ^ (_GLF_IDENTITY(-71206, (-71206) | (-71206))))) | 0)) : 2), ((false ? _GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(-71206, (_GLF_IDENTITY(-71206, 0 ^ (_GLF_IDENTITY(-71206, (-71206) | (-71206))))) | 0)), (true ? _GLF_FUZZED(_GLF_IDENTITY(-71206, (_GLF_IDENTITY(-71206, 0 ^ (_GLF_IDENTITY(-71206, (-71206) | (-71206))))) | 0)) : _GLF_FUZZED(24180))) : 2)) * 1)), clamp(_GLF_IDENTITY((_GLF_IDENTITY((false ? _GLF_FUZZED(_GLF_IDENTITY(-71206, (_GLF_IDENTITY(-71206, 0 ^ (_GLF_IDENTITY(-71206, (-71206) | (-71206))))) | 0)) : 2), ((false ? _GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(-71206, (_GLF_IDENTITY(-71206, 0 ^ (_GLF_IDENTITY(-71206, (-71206) | (-71206))))) | 0)), (true ? _GLF_FUZZED(_GLF_IDENTITY(-71206, (_GLF_IDENTITY(-71206, 0 ^ (_GLF_IDENTITY(-71206, (-71206) | (-71206))))) | 0)) : _GLF_FUZZED(24180))) : 2)) * 1)), ((_GLF_IDENTITY((false ? _GLF_FUZZED(_GLF_IDENTITY(-71206, (_GLF_IDENTITY(-71206, 0 ^ (_GLF_IDENTITY(-71206, (-71206) | (-71206))))) | 0)) : 2), ((false ? _GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(-71206, (_GLF_IDENTITY(-71206, 0 ^ (_GLF_IDENTITY(-71206, (-71206) | (-71206))))) | 0)), (true ? _GLF_FUZZED(_GLF_IDENTITY(-71206, (_GLF_IDENTITY(-71206, 0 ^ (_GLF_IDENTITY(-71206, (-71206) | (-71206))))) | 0)) : _GLF_FUZZED(24180))) : 2)) * 1))) ^ 0), _GLF_IDENTITY((_GLF_IDENTITY((false ? _GLF_FUZZED(_GLF_IDENTITY(-71206, (_GLF_IDENTITY(-71206, 0 ^ (_GLF_IDENTITY(-71206, (-71206) | (-71206))))) | 0)) : 2), ((false ? _GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(-71206, (_GLF_IDENTITY(-71206, 0 ^ (_GLF_IDENTITY(-71206, (-71206) | (-71206))))) | 0)), (true ? _GLF_FUZZED(_GLF_IDENTITY(-71206, (_GLF_IDENTITY(-71206, 0 ^ (_GLF_IDENTITY(-71206, (-71206) | (-71206))))) | 0)) : _GLF_FUZZED(24180))) : 2)) * 1)), ~ (~ ((_GLF_IDENTITY((false ? _GLF_FUZZED(_GLF_IDENTITY(-71206, (_GLF_IDENTITY(-71206, 0 ^ (_GLF_IDENTITY(-71206, (-71206) | (-71206))))) | 0)) : 2), ((false ? _GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(-71206, (_GLF_IDENTITY(-71206, 0 ^ (_GLF_IDENTITY(-71206, (-71206) | (-71206))))) | 0)), (true ? _GLF_FUZZED(_GLF_IDENTITY(-71206, (_GLF_IDENTITY(-71206, 0 ^ (_GLF_IDENTITY(-71206, (-71206) | (-71206))))) | 0)) : _GLF_FUZZED(24180))) : 2)) * 1))))), (_GLF_IDENTITY((false ? _GLF_FUZZED(_GLF_IDENTITY(-71206, (_GLF_IDENTITY(-71206, 0 ^ (_GLF_IDENTITY(-71206, (-71206) | (-71206))))) | 0)) : 2), ((false ? _GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(-71206, (_GLF_IDENTITY(-71206, 0 ^ (_GLF_IDENTITY(-71206, (-71206) | (-71206))))) | 0)), (true ? _GLF_FUZZED(_GLF_IDENTITY(-71206, (_GLF_IDENTITY(-71206, 0 ^ (_GLF_IDENTITY(-71206, (-71206) | (-71206))))) | 0)) : _GLF_FUZZED(24180))) : 2)) * 1)))), (_GLF_IDENTITY((false ? _GLF_FUZZED(_GLF_IDENTITY(-71206, (_GLF_IDENTITY(-71206, 0 ^ (_GLF_IDENTITY(-71206, (-71206) | (-71206))))) | 0)) : 2), ((false ? _GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(-71206, (_GLF_IDENTITY(-71206, 0 ^ (_GLF_IDENTITY(-71206, (-71206) | (-71206))))) | 0)), (true ? _GLF_FUZZED(_GLF_IDENTITY(-71206, (_GLF_IDENTITY(-71206, 0 ^ (_GLF_IDENTITY(-71206, (-71206) | (-71206))))) | 0)) : _GLF_FUZZED(24180))) : 2)) * 1))))), clamp((_GLF_IDENTITY((false ? _GLF_FUZZED(_GLF_IDENTITY(-71206, (_GLF_IDENTITY(-71206, 0 ^ (_GLF_IDENTITY(-71206, (-71206) | (-71206))))) | 0)) : 2), ((false ? _GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(-71206, (_GLF_IDENTITY(-71206, 0 ^ (_GLF_IDENTITY(-71206, (-71206) | (-71206))))) | 0)), (true ? _GLF_FUZZED(_GLF_IDENTITY(-71206, (_GLF_IDENTITY(-71206, 0 ^ (_GLF_IDENTITY(-71206, (-71206) | (-71206))))) | 0)) : _GLF_FUZZED(24180))) : 2)) * 1)), _GLF_IDENTITY((_GLF_IDENTITY((false ? _GLF_FUZZED(_GLF_IDENTITY(-71206, (_GLF_IDENTITY(-71206, 0 ^ (_GLF_IDENTITY(-71206, (-71206) | (-71206))))) | 0)) : 2), ((false ? _GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(-71206, (_GLF_IDENTITY(-71206, 0 ^ (_GLF_IDENTITY(-71206, (-71206) | (-71206))))) | 0)), (true ? _GLF_FUZZED(_GLF_IDENTITY(-71206, (_GLF_IDENTITY(-71206, 0 ^ (_GLF_IDENTITY(-71206, (-71206) | (-71206))))) | 0)) : _GLF_FUZZED(24180))) : 2)) * 1)), clamp(_GLF_IDENTITY((_GLF_IDENTITY((false ? _GLF_FUZZED(_GLF_IDENTITY(-71206, (_GLF_IDENTITY(-71206, 0 ^ (_GLF_IDENTITY(-71206, (-71206) | (-71206))))) | 0)) : 2), ((false ? _GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(-71206, (_GLF_IDENTITY(-71206, 0 ^ (_GLF_IDENTITY(-71206, (-71206) | (-71206))))) | 0)), (true ? _GLF_FUZZED(_GLF_IDENTITY(-71206, (_GLF_IDENTITY(-71206, 0 ^ (_GLF_IDENTITY(-71206, (-71206) | (-71206))))) | 0)) : _GLF_FUZZED(24180))) : 2)) * 1)), ((_GLF_IDENTITY((false ? _GLF_FUZZED(_GLF_IDENTITY(-71206, (_GLF_IDENTITY(-71206, 0 ^ (_GLF_IDENTITY(-71206, (-71206) | (-71206))))) | 0)) : 2), ((false ? _GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(-71206, (_GLF_IDENTITY(-71206, 0 ^ (_GLF_IDENTITY(-71206, (-71206) | (-71206))))) | 0)), (true ? _GLF_FUZZED(_GLF_IDENTITY(-71206, (_GLF_IDENTITY(-71206, 0 ^ (_GLF_IDENTITY(-71206, (-71206) | (-71206))))) | 0)) : _GLF_FUZZED(24180))) : 2)) * 1))) ^ 0), _GLF_IDENTITY((_GLF_IDENTITY((false ? _GLF_FUZZED(_GLF_IDENTITY(-71206, (_GLF_IDENTITY(-71206, 0 ^ (_GLF_IDENTITY(-71206, (-71206) | (-71206))))) | 0)) : 2), ((false ? _GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(-71206, (_GLF_IDENTITY(-71206, 0 ^ (_GLF_IDENTITY(-71206, (-71206) | (-71206))))) | 0)), (true ? _GLF_FUZZED(_GLF_IDENTITY(-71206, (_GLF_IDENTITY(-71206, 0 ^ (_GLF_IDENTITY(-71206, (-71206) | (-71206))))) | 0)) : _GLF_FUZZED(24180))) : 2)) * 1)), ~ (~ ((_GLF_IDENTITY((false ? _GLF_FUZZED(_GLF_IDENTITY(-71206, (_GLF_IDENTITY(-71206, 0 ^ (_GLF_IDENTITY(-71206, (-71206) | (-71206))))) | 0)) : 2), ((false ? _GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(-71206, (_GLF_IDENTITY(-71206, 0 ^ (_GLF_IDENTITY(-71206, (-71206) | (-71206))))) | 0)), (true ? _GLF_FUZZED(_GLF_IDENTITY(-71206, (_GLF_IDENTITY(-71206, 0 ^ (_GLF_IDENTITY(-71206, (-71206) | (-71206))))) | 0)) : _GLF_FUZZED(24180))) : 2)) * 1))))), (_GLF_IDENTITY((false ? _GLF_FUZZED(_GLF_IDENTITY(-71206, (_GLF_IDENTITY(-71206, 0 ^ (_GLF_IDENTITY(-71206, (-71206) | (-71206))))) | 0)) : 2), ((false ? _GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(-71206, (_GLF_IDENTITY(-71206, 0 ^ (_GLF_IDENTITY(-71206, (-71206) | (-71206))))) | 0)), (true ? _GLF_FUZZED(_GLF_IDENTITY(-71206, (_GLF_IDENTITY(-71206, 0 ^ (_GLF_IDENTITY(-71206, (-71206) | (-71206))))) | 0)) : _GLF_FUZZED(24180))) : 2)) * 1)))), (_GLF_IDENTITY((false ? _GLF_FUZZED(_GLF_IDENTITY(-71206, (_GLF_IDENTITY(-71206, 0 ^ (_GLF_IDENTITY(-71206, (-71206) | (-71206))))) | 0)) : 2), ((false ? _GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(-71206, (_GLF_IDENTITY(-71206, 0 ^ (_GLF_IDENTITY(-71206, (-71206) | (-71206))))) | 0)), (true ? _GLF_FUZZED(_GLF_IDENTITY(-71206, (_GLF_IDENTITY(-71206, 0 ^ (_GLF_IDENTITY(-71206, (-71206) | (-71206))))) | 0)) : _GLF_FUZZED(24180))) : 2)) * 1)))))) | (clamp((_GLF_IDENTITY((false ? _GLF_FUZZED(_GLF_IDENTITY(-71206, (_GLF_IDENTITY(-71206, 0 ^ (_GLF_IDENTITY(-71206, (-71206) | (-71206))))) | 0)) : 2), ((false ? _GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(-71206, (_GLF_IDENTITY(-71206, 0 ^ (_GLF_IDENTITY(-71206, (-71206) | (-71206))))) | 0)), (true ? _GLF_FUZZED(_GLF_IDENTITY(-71206, (_GLF_IDENTITY(-71206, 0 ^ (_GLF_IDENTITY(-71206, (-71206) | (-71206))))) | 0)) : _GLF_FUZZED(24180))) : 2)) * 1)), _GLF_IDENTITY((_GLF_IDENTITY((false ? _GLF_FUZZED(_GLF_IDENTITY(-71206, (_GLF_IDENTITY(-71206, 0 ^ (_GLF_IDENTITY(-71206, (-71206) | (-71206))))) | 0)) : 2), ((false ? _GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(-71206, (_GLF_IDENTITY(-71206, 0 ^ (_GLF_IDENTITY(-71206, (-71206) | (-71206))))) | 0)), (true ? _GLF_FUZZED(_GLF_IDENTITY(-71206, (_GLF_IDENTITY(-71206, 0 ^ (_GLF_IDENTITY(-71206, (-71206) | (-71206))))) | 0)) : _GLF_FUZZED(24180))) : 2)) * 1)), clamp(_GLF_IDENTITY((_GLF_IDENTITY((false ? _GLF_FUZZED(_GLF_IDENTITY(-71206, (_GLF_IDENTITY(-71206, 0 ^ (_GLF_IDENTITY(-71206, (-71206) | (-71206))))) | 0)) : 2), ((false ? _GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(-71206, (_GLF_IDENTITY(-71206, 0 ^ (_GLF_IDENTITY(-71206, (-71206) | (-71206))))) | 0)), (true ? _GLF_FUZZED(_GLF_IDENTITY(-71206, (_GLF_IDENTITY(-71206, 0 ^ (_GLF_IDENTITY(-71206, (-71206) | (-71206))))) | 0)) : _GLF_FUZZED(24180))) : 2)) * 1)), ((_GLF_IDENTITY((false ? _GLF_FUZZED(_GLF_IDENTITY(-71206, (_GLF_IDENTITY(-71206, 0 ^ (_GLF_IDENTITY(-71206, (-71206) | (-71206))))) | 0)) : 2), ((false ? _GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(-71206, (_GLF_IDENTITY(-71206, 0 ^ (_GLF_IDENTITY(-71206, (-71206) | (-71206))))) | 0)), (true ? _GLF_FUZZED(_GLF_IDENTITY(-71206, (_GLF_IDENTITY(-71206, 0 ^ (_GLF_IDENTITY(-71206, (-71206) | (-71206))))) | 0)) : _GLF_FUZZED(24180))) : 2)) * 1))) ^ 0), _GLF_IDENTITY((_GLF_IDENTITY((false ? _GLF_FUZZED(_GLF_IDENTITY(-71206, (_GLF_IDENTITY(-71206, 0 ^ (_GLF_IDENTITY(-71206, (-71206) | (-71206))))) | 0)) : 2), ((false ? _GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(-71206, (_GLF_IDENTITY(-71206, 0 ^ (_GLF_IDENTITY(-71206, (-71206) | (-71206))))) | 0)), (true ? _GLF_FUZZED(_GLF_IDENTITY(-71206, (_GLF_IDENTITY(-71206, 0 ^ (_GLF_IDENTITY(-71206, (-71206) | (-71206))))) | 0)) : _GLF_FUZZED(24180))) : 2)) * 1)), ~ (~ ((_GLF_IDENTITY((false ? _GLF_FUZZED(_GLF_IDENTITY(-71206, (_GLF_IDENTITY(-71206, 0 ^ (_GLF_IDENTITY(-71206, (-71206) | (-71206))))) | 0)) : 2), ((false ? _GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(-71206, (_GLF_IDENTITY(-71206, 0 ^ (_GLF_IDENTITY(-71206, (-71206) | (-71206))))) | 0)), (true ? _GLF_FUZZED(_GLF_IDENTITY(-71206, (_GLF_IDENTITY(-71206, 0 ^ (_GLF_IDENTITY(-71206, (-71206) | (-71206))))) | 0)) : _GLF_FUZZED(24180))) : 2)) * 1))))), (_GLF_IDENTITY((false ? _GLF_FUZZED(_GLF_IDENTITY(-71206, (_GLF_IDENTITY(-71206, 0 ^ (_GLF_IDENTITY(-71206, (-71206) | (-71206))))) | 0)) : 2), ((false ? _GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(-71206, (_GLF_IDENTITY(-71206, 0 ^ (_GLF_IDENTITY(-71206, (-71206) | (-71206))))) | 0)), (true ? _GLF_FUZZED(_GLF_IDENTITY(-71206, (_GLF_IDENTITY(-71206, 0 ^ (_GLF_IDENTITY(-71206, (-71206) | (-71206))))) | 0)) : _GLF_FUZZED(24180))) : 2)) * 1)))), (_GLF_IDENTITY((false ? _GLF_FUZZED(_GLF_IDENTITY(-71206, (_GLF_IDENTITY(-71206, 0 ^ (_GLF_IDENTITY(-71206, (-71206) | (-71206))))) | 0)) : 2), ((false ? _GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(-71206, (_GLF_IDENTITY(-71206, 0 ^ (_GLF_IDENTITY(-71206, (-71206) | (-71206))))) | 0)), (true ? _GLF_FUZZED(_GLF_IDENTITY(-71206, (_GLF_IDENTITY(-71206, 0 ^ (_GLF_IDENTITY(-71206, (-71206) | (-71206))))) | 0)) : _GLF_FUZZED(24180))) : 2)) * 1)))))))), 1, (0 ^ 1)))) : _GLF_FUZZED(ivec4(-15239, -48840, 1773, -85186)[2]))) ^ 0))))) ^ 0u)) | 0u, 0u ^ ((_GLF_IDENTITY(subgroup_local_id % _GLF_IDENTITY(2, (_GLF_IDENTITY(2, 0 | _GLF_IDENTITY((2), (_GLF_IDENTITY((2), (true ? (2) : _GLF_FUZZED(-83415)))) / 1))) | (2)), (subgroup_local_id % _GLF_IDENTITY(2, _GLF_IDENTITY((2) | (_GLF_IDENTITY(2, _GLF_IDENTITY(_GLF_IDENTITY((true ? _GLF_IDENTITY(2, int(ivec3(_GLF_IDENTITY(2, _GLF_IDENTITY((false ? _GLF_FUZZED(_GLF_IDENTITY(-71206, (_GLF_IDENTITY(-71206, 0 ^ (_GLF_IDENTITY(-71206, (-71206) | (-71206))))) | 0)) : 2), ((false ? _GLF_FUZZED(_GLF_IDENTITY(-71206, (_GLF_IDENTITY(-71206, 0 ^ (_GLF_IDENTITY(-71206, (-71206) | (-71206))))) | 0)) : 2)) | (_GLF_IDENTITY((false ? _GLF_FUZZED(_GLF_IDENTITY(-71206, (_GLF_IDENTITY(-71206, 0 ^ (_GLF_IDENTITY(-71206, (-71206) | (-71206))))) | 0)) : 2), ((false ? _GLF_FUZZED(_GLF_IDENTITY(-71206, (_GLF_IDENTITY(-71206, 0 ^ (_GLF_IDENTITY(-71206, (-71206) | (-71206))))) | 0)) : 2)) * 1)))), 1, (0 ^ 1)))) : _GLF_FUZZED(ivec4(-15239, -48840, 1773, -85186)[2])), ((true ? _GLF_IDENTITY(2, int(ivec3(_GLF_IDENTITY(2, _GLF_IDENTITY((false ? _GLF_FUZZED(_GLF_IDENTITY(-71206, (_GLF_IDENTITY(-71206, 0 ^ (_GLF_IDENTITY(-71206, (-71206) | (-71206))))) | 0)) : 2), ((false ? _GLF_FUZZED(_GLF_IDENTITY(-71206, (_GLF_IDENTITY(-71206, 0 ^ (_GLF_IDENTITY(-71206, (-71206) | (-71206))))) | 0)) : 2)) | (_GLF_IDENTITY((false ? _GLF_FUZZED(_GLF_IDENTITY(-71206, (_GLF_IDENTITY(-71206, 0 ^ (_GLF_IDENTITY(-71206, (-71206) | (-71206))))) | 0)) : 2), ((false ? _GLF_FUZZED(_GLF_IDENTITY(-71206, (_GLF_IDENTITY(-71206, 0 ^ (_GLF_IDENTITY(-71206, (-71206) | (-71206))))) | 0)) : 2)) * 1)))), 1, (0 ^ 1)))) : _GLF_FUZZED(ivec4(-15239, -48840, 1773, -85186)[2]))) ^ 0), 0 ^ (_GLF_IDENTITY((true ? _GLF_IDENTITY(2, int(ivec3(_GLF_IDENTITY(2, _GLF_IDENTITY((false ? _GLF_FUZZED(_GLF_IDENTITY(-71206, (_GLF_IDENTITY(-71206, 0 ^ (_GLF_IDENTITY(-71206, (-71206) | (-71206))))) | 0)) : 2), ((false ? _GLF_FUZZED(_GLF_IDENTITY(-71206, (_GLF_IDENTITY(-71206, 0 ^ (_GLF_IDENTITY(-71206, (-71206) | (-71206))))) | 0)) : 2)) | (_GLF_IDENTITY((false ? _GLF_FUZZED(_GLF_IDENTITY(-71206, (_GLF_IDENTITY(-71206, 0 ^ (_GLF_IDENTITY(-71206, (-71206) | (-71206))))) | 0)) : 2), ((false ? _GLF_FUZZED(_GLF_IDENTITY(-71206, (_GLF_IDENTITY(-71206, 0 ^ (_GLF_IDENTITY(-71206, (-71206) | (-71206))))) | 0)) : 2)) * 1)))), 1, (0 ^ 1)))) : _GLF_FUZZED(ivec4(-15239, -48840, 1773, -85186)[2])), ((true ? _GLF_IDENTITY(2, int(ivec3(_GLF_IDENTITY(2, _GLF_IDENTITY((false ? _GLF_FUZZED(_GLF_IDENTITY(-71206, (_GLF_IDENTITY(-71206, 0 ^ (_GLF_IDENTITY(-71206, (-71206) | (-71206))))) | 0)) : 2), ((false ? _GLF_FUZZED(_GLF_IDENTITY(-71206, (_GLF_IDENTITY(-71206, 0 ^ (_GLF_IDENTITY(-71206, (-71206) | (-71206))))) | 0)) : 2)) | (_GLF_IDENTITY((false ? _GLF_FUZZED(_GLF_IDENTITY(-71206, (_GLF_IDENTITY(-71206, 0 ^ (_GLF_IDENTITY(-71206, (-71206) | (-71206))))) | 0)) : 2), ((false ? _GLF_FUZZED(_GLF_IDENTITY(-71206, (_GLF_IDENTITY(-71206, 0 ^ (_GLF_IDENTITY(-71206, (-71206) | (-71206))))) | 0)) : 2)) * 1)))), 1, (0 ^ 1)))) : _GLF_FUZZED(ivec4(-15239, -48840, 1773, -85186)[2]))) ^ 0))))), 0 ^ ((2) | (_GLF_IDENTITY(2, _GLF_IDENTITY((true ? _GLF_IDENTITY(2, int(ivec3(_GLF_IDENTITY(2, _GLF_IDENTITY((false ? _GLF_FUZZED(_GLF_IDENTITY(-71206, (_GLF_IDENTITY(-71206, 0 ^ (_GLF_IDENTITY(-71206, (-71206) | (-71206))))) | 0)) : _GLF_IDENTITY(2, min(2, 2))), (_GLF_IDENTITY((false ? _GLF_FUZZED(_GLF_IDENTITY(-71206, _GLF_IDENTITY((_GLF_IDENTITY(-71206, 0 ^ (_GLF_IDENTITY(-71206, (-71206) | (-71206))))) | 0, clamp(_GLF_IDENTITY((_GLF_IDENTITY(-71206, 0 ^ (_GLF_IDENTITY(-71206, (-71206) | (-71206))))) | 0, max((_GLF_IDENTITY(-71206, 0 ^ (_GLF_IDENTITY(-71206, (-71206) | (-71206))))) | 0, (_GLF_IDENTITY(-71206, 0 ^ (_GLF_IDENTITY(-71206, (-71206) | (-71206))))) | 0)), _GLF_IDENTITY((_GLF_IDENTITY(-71206, 0 ^ (_GLF_IDENTITY(-71206, (-71206) | (-71206))))) | 0, (true ? (_GLF_IDENTITY(-71206, 0 ^ (_GLF_IDENTITY(-71206, (-71206) | (-71206))))) | 0 : _GLF_FUZZED(36021))), (_GLF_IDENTITY(-71206, 0 ^ (_GLF_IDENTITY(-71206, (-71206) | (-71206))))) | 0)))) : 2), (false ? _GLF_FUZZED(34533) : (false ? _GLF_FUZZED(_GLF_IDENTITY(-71206, _GLF_IDENTITY((_GLF_IDENTITY(-71206, 0 ^ (_GLF_IDENTITY(-71206, (-71206) | (-71206))))) | 0, clamp(_GLF_IDENTITY((_GLF_IDENTITY(-71206, 0 ^ (_GLF_IDENTITY(-71206, (-71206) | (-71206))))) | 0, max((_GLF_IDENTITY(-71206, 0 ^ (_GLF_IDENTITY(-71206, (-71206) | (-71206))))) | 0, (_GLF_IDENTITY(-71206, 0 ^ (_GLF_IDENTITY(-71206, (-71206) | (-71206))))) | 0)), _GLF_IDENTITY((_GLF_IDENTITY(-71206, 0 ^ (_GLF_IDENTITY(-71206, (-71206) | (-71206))))) | 0, (true ? (_GLF_IDENTITY(-71206, 0 ^ (_GLF_IDENTITY(-71206, (-71206) | (-71206))))) | 0 : _GLF_FUZZED(36021))), (_GLF_IDENTITY(-71206, 0 ^ (_GLF_IDENTITY(-71206, (-71206) | (-71206))))) | 0)))) : 2)))) | (_GLF_IDENTITY((false ? _GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(-71206, (_GLF_IDENTITY(-71206, 0 ^ (_GLF_IDENTITY(-71206, (-71206) | (-71206))))) | 0)), (_GLF_FUZZED(_GLF_IDENTITY(-71206, (_GLF_IDENTITY(-71206, 0 ^ (_GLF_IDENTITY(-71206, (-71206) | (-71206))))) | 0))) ^ 0) : 2), ((false ? _GLF_FUZZED(_GLF_IDENTITY(-71206, _GLF_IDENTITY((_GLF_IDENTITY(-71206, 0 ^ (_GLF_IDENTITY(-71206, (-71206) | (-71206))))) | 0, ~ (~ (_GLF_IDENTITY((_GLF_IDENTITY(-71206, 0 ^ (_GLF_IDENTITY(-71206, (-71206) | (-71206))))) | 0, ((_GLF_IDENTITY(-71206, 0 ^ (_GLF_IDENTITY(-71206, (-71206) | (-71206))))) | 0) - 0)))))) : 2)) * 1)))), 1, (0 ^ 1)))) : _GLF_FUZZED(ivec4(-15239, -48840, 1773, -85186)[2])), ((true ? _GLF_IDENTITY(2, int(ivec3(_GLF_IDENTITY(2, _GLF_IDENTITY((false ? _GLF_FUZZED(_GLF_IDENTITY(-71206, (_GLF_IDENTITY(-71206, 0 ^ (_GLF_IDENTITY(-71206, (-71206) | (-71206))))) | 0)) : 2), ((false ? _GLF_FUZZED(_GLF_IDENTITY(-71206, (_GLF_IDENTITY(-71206, 0 ^ (_GLF_IDENTITY(-71206, (-71206) | (-71206))))) | 0)) : 2)) | (_GLF_IDENTITY((false ? _GLF_FUZZED(_GLF_IDENTITY(-71206, (_GLF_IDENTITY(-71206, _GLF_IDENTITY(0 ^ (_GLF_IDENTITY(-71206, (-71206) | (-71206))), (_GLF_IDENTITY(0 ^ (_GLF_IDENTITY(-71206, (-71206) | (-71206))), 1 * (0 ^ (_GLF_IDENTITY(-71206, (-71206) | (-71206)))))) >> 0))) | 0)) : 2), ((false ? _GLF_FUZZED(_GLF_IDENTITY(-71206, (_GLF_IDENTITY(-71206, 0 ^ (_GLF_IDENTITY(-71206, (-71206) | (-71206))))) | 0)) : 2)) * 1)))), 1, (_GLF_IDENTITY(0 ^ 1, clamp(0 ^ 1, 0 ^ 1, _GLF_IDENTITY(0 ^ 1, (0 ^ 1) - 0))))))) : _GLF_FUZZED(ivec4(-15239, -48840, 1773, -85186)[2]))) ^ 0))))))) ^ _GLF_IDENTITY(0u, min(0u, 0u)))) | 0u)))) == 0)
  {
   atomicStore(buf[next_virtual_gid], _GLF_IDENTITY(uint(1), (uint(_GLF_IDENTITY(1, (1) ^ 0))) | 0u), 4, _GLF_IDENTITY(64, 0 ^ (_GLF_IDENTITY(64, (_GLF_IDENTITY(64, (_GLF_IDENTITY(_GLF_IDENTITY(64, min(64, _GLF_IDENTITY(64, min(64, 64)))), _GLF_IDENTITY(0 ^ (_GLF_IDENTITY(64, min(64, 64))), int(_GLF_IDENTITY(ivec4(_GLF_IDENTITY(0 ^ (_GLF_IDENTITY(64, min(64, 64))), (0 ^ (_GLF_IDENTITY(64, min(64, 64)))) | (0 ^ (_GLF_IDENTITY(64, min(64, 64))))), 0, 0, _GLF_IDENTITY(1, clamp(1, 1, 1))), (ivec4(0 ^ (_GLF_IDENTITY(64, min(64, 64))), 0, 0, 1)) / ivec4(1, 1, 1, 1)))))) | (64))) / 1))), _GLF_IDENTITY(4, min(_GLF_IDENTITY(4, max(4, _GLF_IDENTITY(4, ~ (~ (4))))), 4)));
  }
 else
  {
   atomicStore(buf[_GLF_IDENTITY(_GLF_IDENTITY(next_virtual_gid, uint(uvec4(next_virtual_gid, 0u, (0u | 0u), 1u))), max(next_virtual_gid, next_virtual_gid))], uint(1), _GLF_IDENTITY(4, max(4, 4)), 64, 4);
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_DEAD(false)))))), _GLF_IDENTITY(true && (_GLF_DEAD(false)), false || (true && (_GLF_DEAD(false))))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true), true))), _GLF_IDENTITY(true && (_GLF_DEAD(false)), ! (! (true && (_GLF_DEAD(false)))))), bool(bool(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), bool(bvec4(! (injectionSwitch.x > injectionSwitch.y), true, false, false))), (! (injectionSwitch.x > injectionSwitch.y)) || false)))))))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 subgroupBarrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 atomicStore(checker[_GLF_IDENTITY(virtual_gid, _GLF_IDENTITY(clamp(_GLF_IDENTITY(virtual_gid, _GLF_IDENTITY(~ (~ (_GLF_IDENTITY(virtual_gid, 0u | (virtual_gid)))), (~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, 0u | (virtual_gid)), min(_GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, 0u | (virtual_gid)), (_GLF_IDENTITY(virtual_gid, _GLF_IDENTITY(0u, 0u | (_GLF_IDENTITY(0u, (0u) ^ 0u))) | (virtual_gid))) - 0u), _GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, 0u | (virtual_gid)), min(_GLF_IDENTITY(virtual_gid, 0u | (virtual_gid)), _GLF_IDENTITY(virtual_gid, 0u | (virtual_gid))))))))) / 1u)), virtual_gid, virtual_gid), (clamp(_GLF_IDENTITY(virtual_gid, ~ (~ _GLF_IDENTITY((virtual_gid), _GLF_IDENTITY(_GLF_IDENTITY(~ (~ (_GLF_IDENTITY((virtual_gid), min((virtual_gid), (virtual_gid))))), ~ (~ (~ (~ (_GLF_IDENTITY((virtual_gid), min((virtual_gid), (virtual_gid)))))))), 0u | (_GLF_IDENTITY(~ (~ (_GLF_IDENTITY((virtual_gid), min((virtual_gid), (virtual_gid))))), 0u ^ (~ (~ (_GLF_IDENTITY((virtual_gid), min((virtual_gid), (virtual_gid)))))))))))), virtual_gid, virtual_gid)) | 0u))], read, _GLF_IDENTITY(4, ~ (~ (_GLF_IDENTITY(4, 0 | (_GLF_IDENTITY(4, (4) | (4))))))), 64, _GLF_IDENTITY(4, (4) * 1));
 if(_GLF_DEAD(false))
  barrier();
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END
BUFFER checker DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected_checker DATA_TYPE uint32 SIZE 8388096 FILL 0

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 
  BIND BUFFER checker AS storage DESCRIPTOR_SET 0 BINDING 2 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT checker EQ_BUFFER expected_checker
