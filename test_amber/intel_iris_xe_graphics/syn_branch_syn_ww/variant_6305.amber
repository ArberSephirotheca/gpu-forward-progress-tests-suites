#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460
struct _GLF_struct_8 {
 mat4 _f0;
} ;

struct _GLF_struct_9 {
 bool _f0;
 uvec3 _f1;
 _GLF_struct_8 _f2;
 mat3x2 _f3;
 bool _f4;
 ivec4 _f5;
 uint workgroup_size;
} ;

struct _GLF_struct_5 {
 bvec4 _f0;
 vec2 _f1;
} ;

struct _GLF_struct_6 {
 vec2 _f0;
 mat4 _f1;
 _GLF_struct_5 _f2;
} ;

struct _GLF_struct_3 {
 mat3 _f0;
 mat4x2 _f1;
} ;

struct _GLF_struct_2 {
 bvec4 _f0;
 vec2 _f1;
} ;

struct _GLF_struct_1 {
 vec3 _f0;
 mat2 _f1;
 int _f2;
 uvec2 _f3;
} ;

struct _GLF_struct_0 {
 mat2 _f0;
} ;

struct _GLF_struct_4 {
 _GLF_struct_0 _f0;
 _GLF_struct_1 _f1;
 _GLF_struct_2 _f2;
 _GLF_struct_3 _f3;
 uvec2 _f4;
} ;

struct _GLF_struct_7 {
 _GLF_struct_4 _f0;
 _GLF_struct_6 _f1;
 uint subgroup_id;
 mat4x2 _f2;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 _GLF_struct_7 _GLF_struct_replacement_7 = _GLF_struct_7(_GLF_struct_4(_GLF_struct_0(mat2(1.0)), _GLF_struct_1(vec3(1.0), mat2(1.0), 1, uvec2(1u)), _GLF_struct_2(bvec4(true), vec2(1.0)), _GLF_struct_3(mat3(1.0), mat4x2(1.0)), uvec2(1u)), _GLF_struct_6(vec2(1.0), mat4(1.0), _GLF_struct_5(bvec4(true), vec2(1.0))), gl_SubgroupID, mat4x2(1.0));
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 _GLF_struct_9 _GLF_struct_replacement_9 = _GLF_struct_9(true, uvec3(1u), _GLF_struct_8(mat4(1.0)), mat3x2(1.0), true, ivec4(1), gl_WorkGroupSize.x);
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = _GLF_struct_replacement_9.workgroup_size * workgroup_id;
 uint virtual_gid = workgroup_base + _GLF_struct_replacement_7.subgroup_id * subgroup_size + subgroup_local_id;
 uint next_virtual_gid = workgroup_base + _GLF_struct_replacement_7.subgroup_id * subgroup_size + ((subgroup_local_id + 1) % subgroup_size);
 atomicStore(buf[virtual_gid], uint(1), 4, 64, 4);
 if(subgroup_local_id + 1 < subgroup_size)
  {
   int i = 0;
   atomicStore(buf[next_virtual_gid], uint(2), 4, 64, 4);
  }
 else
  {
   atomicStore(buf[next_virtual_gid], uint(2), 4, 64, 4);
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
