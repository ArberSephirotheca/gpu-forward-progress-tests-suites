#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_8 {
 vec4 _f0;
 mat2x4 _f1;
 mat3x2 _f2;
} ;

struct _GLF_struct_9 {
 float _f0;
 _GLF_struct_8 _f1;
 int _f2;
 bvec3 _f3;
 uvec2 _f4;
} ;

struct _GLF_struct_6 {
 mat3x4 _f0;
 bvec4 _f1;
 vec4 _f2;
 mat4x3 _f3;
} ;

struct _GLF_struct_7 {
 _GLF_struct_6 _f0;
} ;

struct _GLF_struct_4 {
 uvec3 _f0;
 uvec2 _f1;
 float _f2;
 bvec2 _f3;
 uvec4 _f4;
 uint _f5;
} ;

struct _GLF_struct_3 {
 vec2 _f0;
 vec4 _f1;
 float _f2;
 mat3 _f3;
 uint _f4;
 int _f5;
 uvec4 _f6;
} ;

struct _GLF_struct_5 {
 ivec4 _f0;
 _GLF_struct_3 _f1;
 _GLF_struct_4 _f2;
 float _f3;
 uvec2 _f4;
 uvec3 _f5;
} ;

struct _GLF_struct_1 {
 float _f0;
 uvec3 _f1;
 float _f2;
 mat4x2 _f3;
 ivec4 _f4;
 mat2 _f5;
 int _f6;
} ;

struct _GLF_struct_0 {
 mat2x4 _f0;
 bvec3 _f1;
} ;

struct _GLF_struct_2 {
 _GLF_struct_0 _f0;
 _GLF_struct_1 _f1;
} ;

struct _GLF_struct_10 {
 int i;
 _GLF_struct_2 _f0;
 _GLF_struct_5 _f1;
 _GLF_struct_7 _f2;
 _GLF_struct_9 _f3;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uvec3 GLF_merged2_0_2_56_2_1_16GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_sizenext_virtual_gid;
 uvec2 GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size;
 GLF_merged2_0_2_56_2_1_16GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_sizenext_virtual_gid.xy = GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size;
 uvec4 GLF_merged3_0_2_55_2_1_16_3_1_11GLF_merged2_0_1_13_1_1_17num_workgroupsubgroup_local_idnext_virtual_gidvirtual_gid;
 uvec2 GLF_merged2_0_1_13_1_1_17num_workgroupsubgroup_local_id;
 GLF_merged3_0_2_55_2_1_16_3_1_11GLF_merged2_0_1_13_1_1_17num_workgroupsubgroup_local_idnext_virtual_gidvirtual_gid.xy = GLF_merged2_0_1_13_1_1_17num_workgroupsubgroup_local_id;
 uvec4 GLF_merged4_0_1_16_1_1_11_2_1_14_3_1_14next_virtual_gidvirtual_gidworkgroup_baseworkgroup_size;
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 GLF_merged2_0_2_56_2_1_16GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_sizenext_virtual_gid.xy.x = subgroup_local_id;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   GLF_merged3_0_2_55_2_1_16_3_1_11GLF_merged2_0_1_13_1_1_17num_workgroupsubgroup_local_idnext_virtual_gidvirtual_gid.xy.y = GLF_merged2_0_2_56_2_1_16GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_sizenext_virtual_gid.xy.x;
  }
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     GLF_merged3_0_2_55_2_1_16_3_1_11GLF_merged2_0_1_13_1_1_17num_workgroupsubgroup_local_idnext_virtual_gidvirtual_gid.xy.x = num_workgroup;
    }
  }
 else
  {
  }
 uint workgroup_size = gl_WorkGroupSize.x;
 GLF_merged2_0_2_56_2_1_16GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_sizenext_virtual_gid.xy.y = workgroup_size;
 GLF_merged4_0_1_16_1_1_11_2_1_14_3_1_14next_virtual_gidvirtual_gidworkgroup_baseworkgroup_size.w = GLF_merged2_0_2_56_2_1_16GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_sizenext_virtual_gid.xy.y;
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = GLF_merged4_0_1_16_1_1_11_2_1_14_3_1_14next_virtual_gidvirtual_gidworkgroup_baseworkgroup_size.w * workgroup_id;
 do
  {
   GLF_merged4_0_1_16_1_1_11_2_1_14_3_1_14next_virtual_gidvirtual_gidworkgroup_baseworkgroup_size.z = workgroup_base;
  }
 while(_GLF_WRAPPED_LOOP(false));
 uint virtual_gid = GLF_merged4_0_1_16_1_1_11_2_1_14_3_1_14next_virtual_gidvirtual_gidworkgroup_baseworkgroup_size.z + subgroup_id * subgroup_size + GLF_merged3_0_2_55_2_1_16_3_1_11GLF_merged2_0_1_13_1_1_17num_workgroupsubgroup_local_idnext_virtual_gidvirtual_gid.xy.y;
 GLF_merged3_0_2_55_2_1_16_3_1_11GLF_merged2_0_1_13_1_1_17num_workgroupsubgroup_local_idnext_virtual_gidvirtual_gid.w = virtual_gid;
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
  {
   GLF_merged4_0_1_16_1_1_11_2_1_14_3_1_14next_virtual_gidvirtual_gidworkgroup_baseworkgroup_size.y = GLF_merged3_0_2_55_2_1_16_3_1_11GLF_merged2_0_1_13_1_1_17num_workgroupsubgroup_local_idnext_virtual_gidvirtual_gid.w;
  }
 uint next_virtual_gid = GLF_merged4_0_1_16_1_1_11_2_1_14_3_1_14next_virtual_gidvirtual_gidworkgroup_baseworkgroup_size.z + subgroup_id * subgroup_size + ((GLF_merged3_0_2_55_2_1_16_3_1_11GLF_merged2_0_1_13_1_1_17num_workgroupsubgroup_local_idnext_virtual_gidvirtual_gid.xy.y + 1) % subgroup_size);
 GLF_merged2_0_2_56_2_1_16GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_sizenext_virtual_gid.z = next_virtual_gid;
 GLF_merged3_0_2_55_2_1_16_3_1_11GLF_merged2_0_1_13_1_1_17num_workgroupsubgroup_local_idnext_virtual_gidvirtual_gid.z = GLF_merged2_0_2_56_2_1_16GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_sizenext_virtual_gid.z;
 GLF_merged4_0_1_16_1_1_11_2_1_14_3_1_14next_virtual_gidvirtual_gidworkgroup_baseworkgroup_size.x = GLF_merged3_0_2_55_2_1_16_3_1_11GLF_merged2_0_1_13_1_1_17num_workgroupsubgroup_local_idnext_virtual_gidvirtual_gid.z;
 atomicStore(buf[GLF_merged4_0_1_16_1_1_11_2_1_14_3_1_14next_virtual_gidvirtual_gidworkgroup_baseworkgroup_size.y], uint(1), 4, 64, 4);
 if(GLF_merged3_0_2_55_2_1_16_3_1_11GLF_merged2_0_1_13_1_1_17num_workgroupsubgroup_local_idnext_virtual_gidvirtual_gid.xy.y + 1 < subgroup_size)
  {
   _GLF_struct_10 _GLF_struct_replacement_10 = _GLF_struct_10(0, _GLF_struct_2(_GLF_struct_0(mat2x4(1.0), bvec3(true)), _GLF_struct_1(1.0, uvec3(1u), 1.0, mat4x2(1.0), ivec4(1), mat2(1.0), 1)), _GLF_struct_5(ivec4(1), _GLF_struct_3(vec2(1.0), vec4(1.0), 1.0, mat3(1.0), 1u, 1, uvec4(1u)), _GLF_struct_4(uvec3(1u), uvec2(1u), 1.0, bvec2(true), uvec4(1u), 1u), 1.0, uvec2(1u), uvec3(1u)), _GLF_struct_7(_GLF_struct_6(mat3x4(1.0), bvec4(true), vec4(1.0), mat4x3(1.0))), _GLF_struct_9(1.0, _GLF_struct_8(vec4(1.0), mat2x4(1.0), mat3x2(1.0)), 1, bvec3(true), uvec2(1u)));
   atomicStore(buf[GLF_merged4_0_1_16_1_1_11_2_1_14_3_1_14next_virtual_gidvirtual_gidworkgroup_baseworkgroup_size.x], uint(2), 4, 64, 4);
  }
 else
  {
   atomicStore(buf[GLF_merged4_0_1_16_1_1_11_2_1_14_3_1_14next_virtual_gidvirtual_gidworkgroup_baseworkgroup_size.x], uint(2), 4, 64, 4);
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
