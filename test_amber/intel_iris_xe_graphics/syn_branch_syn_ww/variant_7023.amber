#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_28 {
 float _f0;
 vec3 _f1;
 ivec3 _f2;
 mat4 _f3;
 mat3x2 _f4;
 uint _f5;
 bool _f6;
} ;

struct _GLF_struct_29 {
 _GLF_struct_28 _f0;
} ;

struct _GLF_struct_26 {
 uint _f0;
 ivec4 _f1;
 mat3x2 _f2;
 mat4x2 _f3;
 mat3 _f4;
 mat3x2 _f5;
 uint _f6;
} ;

struct _GLF_struct_27 {
 _GLF_struct_26 _f0;
} ;

struct _GLF_struct_24 {
 bvec3 _f0;
} ;

struct _GLF_struct_23 {
 ivec4 _f0;
 mat2 _f1;
} ;

struct _GLF_struct_22 {
 mat4 _f0;
} ;

struct _GLF_struct_25 {
 mat4x2 _f0;
 _GLF_struct_22 _f1;
 _GLF_struct_23 _f2;
 ivec2 _f3;
 _GLF_struct_24 _f4;
} ;

struct _GLF_struct_30 {
 _GLF_struct_25 _f0;
 _GLF_struct_27 _f1;
 vec3 _f2;
 mat4 _f3;
 _GLF_struct_29 _f4;
 ivec3 _f5;
 uint virtual_gid;
 float _f6;
} ;

struct _GLF_struct_19 {
 vec4 _f0;
 mat2x3 _f1;
 mat3x2 _f2;
 uvec2 _f3;
 mat4x2 _f4;
 mat2x3 _f5;
} ;

struct _GLF_struct_20 {
 _GLF_struct_19 _f0;
} ;

struct _GLF_struct_21 {
 mat3 _f0;
 int _f1;
 vec2 _f2;
 bvec3 _f3;
 uint workgroup_size;
 mat4x2 _f4;
 vec4 _f5;
 _GLF_struct_20 _f6;
} ;

struct _GLF_struct_16 {
 mat4x3 _f0;
 mat3 _f1;
} ;

struct _GLF_struct_17 {
 mat4x2 _f0;
 _GLF_struct_16 _f1;
 vec3 _f2;
} ;

struct _GLF_struct_14 {
 mat2x3 _f0;
 bvec3 _f1;
 bvec4 _f2;
 mat2 _f3;
 bool _f4;
 mat4x3 _f5;
} ;

struct _GLF_struct_15 {
 bvec2 _f0;
 _GLF_struct_14 _f1;
} ;

struct _GLF_struct_12 {
 bvec3 _f0;
 vec3 _f1;
 mat4 _f2;
} ;

struct _GLF_struct_11 {
 mat4x3 _f0;
 bool _f1;
} ;

struct _GLF_struct_10 {
 mat3x4 _f0;
 mat2x3 _f1;
} ;

struct _GLF_struct_13 {
 vec4 _f0;
 mat3x2 _f1;
 _GLF_struct_10 _f2;
 _GLF_struct_11 _f3;
 _GLF_struct_12 _f4;
} ;

struct _GLF_struct_18 {
 _GLF_struct_13 _f0;
 uint subgroup_size;
 _GLF_struct_15 _f1;
 mat4x2 _f2;
 _GLF_struct_17 _f3;
} ;

struct _GLF_struct_7 {
 vec3 _f0;
 mat4x3 _f1;
 bvec2 _f2;
} ;

struct _GLF_struct_6 {
 uvec4 _f0;
 bool _f1;
 mat4 _f2;
 vec4 _f3;
} ;

struct _GLF_struct_5 {
 mat4x2 _f0;
 mat3x2 _f1;
 uvec2 _f2;
 mat4x3 _f3;
 bvec4 _f4;
} ;

struct _GLF_struct_4 {
 mat3x2 _f0;
 ivec4 _f1;
 vec4 _f2;
 mat2x4 _f3;
} ;

struct _GLF_struct_8 {
 _GLF_struct_4 _f0;
 vec3 _f1;
 _GLF_struct_5 _f2;
 vec3 _f3;
 mat3 _f4;
 _GLF_struct_6 _f5;
 _GLF_struct_7 _f6;
} ;

struct _GLF_struct_2 {
 mat3x2 _f0;
 vec3 _f1;
 mat4x2 _f2;
} ;

struct _GLF_struct_3 {
 ivec3 _f0;
 _GLF_struct_2 _f1;
} ;

struct _GLF_struct_0 {
 mat4x3 _f0;
 bool _f1;
 mat2x4 _f2;
 uint _f3;
 uint next_virtual_gid;
 uint _f4;
} ;

struct _GLF_struct_1 {
 ivec4 _f0;
 _GLF_struct_0 _f1;
} ;

struct _GLF_struct_9 {
 _GLF_struct_1 _f0;
 ivec2 _f1;
 _GLF_struct_3 _f2;
 _GLF_struct_8 _f3;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
  barrier();
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(false))
  barrier();
 _GLF_struct_18 _GLF_struct_replacement_18 = _GLF_struct_18(_GLF_struct_13(vec4(1.0), mat3x2(_GLF_IDENTITY(1.0, 1.0 * (1.0))), _GLF_struct_10(mat3x4(1.0), mat2x3(1.0)), _GLF_struct_11(mat4x3(1.0), true), _GLF_struct_12(bvec3(true), vec3(1.0), mat4(1.0))), gl_SubgroupSize, _GLF_struct_15(bvec2(true), _GLF_struct_14(mat2x3(1.0), bvec3(_GLF_IDENTITY(true, (true) && _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0))), (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0))), (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0))), (_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0)))) && true)) || false)) && _GLF_IDENTITY(true, false || (true))))), bvec4(true), mat2(1.0), _GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), (! (true)) || false))))), mat4x3(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0))))), mat4x2(1.0), _GLF_struct_17(mat4x2(1.0), _GLF_struct_16(mat4x3(1.0), mat3(1.0)), vec3(1.0)));
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(7), int(7))); _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      barrier();
     for(int _injected_loop_counter = _GLF_IDENTITY(0, (false ? _GLF_FUZZED((true ? -90632 : 99580)) : 0)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec2((injectionSwitch.x > injectionSwitch.y), false))))))
  {
   for(int _injected_loop_counter = _GLF_IDENTITY(int(_GLF_ONE(_GLF_IDENTITY(1.0, max(1.0, 1.0)), _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY(mat2(1.0) * (injectionSwitch), mix(vec2(_GLF_FUZZED(49.65), (mat2(1.0) * (injectionSwitch))[1]), vec2((mat2(1.0) * (injectionSwitch))[0], _GLF_FUZZED(2.0)), bvec2(true, false))), min(mat2(1.0) * (injectionSwitch), mat2(1.0) * (injectionSwitch)))).y)), int(ivec3(int(_GLF_ONE(1.0, injectionSwitch.y)), 0, 0))); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, max(_injected_loop_counter, _injected_loop_counter)) != (0 << _GLF_IDENTITY(int(2), int(2)))), ! (! (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, max(_injected_loop_counter, _injected_loop_counter)) != (0 << _GLF_IDENTITY(int(2), int(2))))))); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)), (_GLF_DEAD(_GLF_IDENTITY(false, (false) && true))) || false))
  barrier();
 uint num_workgroup = gl_NumWorkGroups.x;
 _GLF_struct_21 _GLF_struct_replacement_21 = _GLF_struct_21(mat3(1.0), _GLF_IDENTITY(_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, min(1, 1)), 1, 1)), max(_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, min(1, 1)), 1, 1)), _GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, min(1, 1)), 1, 1)))), vec2(1.0), bvec3(_GLF_IDENTITY(true, bool(bvec3(_GLF_IDENTITY(true, bool(bvec4(true, true, false, false))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)))), _GLF_IDENTITY(gl_WorkGroupSize.x, max(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize.x, (gl_WorkGroupSize.x) ^ 0u), min(_GLF_IDENTITY(gl_WorkGroupSize.x, (gl_WorkGroupSize.x) ^ 0u), _GLF_IDENTITY(gl_WorkGroupSize.x, (gl_WorkGroupSize.x) ^ 0u))), _GLF_IDENTITY(gl_WorkGroupSize.x, ~ (~ (gl_WorkGroupSize.x))))), mat4x2(1.0), vec4(_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED((-628.358 - 40.08))), bool(false)))), _GLF_struct_20(_GLF_struct_19(_GLF_IDENTITY(vec4(_GLF_IDENTITY(1.0, 1.0 * (_GLF_IDENTITY(1.0, (1.0) * 1.0)))), vec4(_GLF_IDENTITY(_GLF_IDENTITY(mat4(vec4(1.0), 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0), (mat4(vec4(_GLF_IDENTITY(1.0, min(1.0, 1.0))), 1.0, 0.0, 1.0, 0.0, 0.0, _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)) + mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), (mat4(vec4(1.0), 1.0, 0.0, 1.0, _GLF_IDENTITY(0.0, clamp(0.0, _GLF_IDENTITY(_GLF_IDENTITY(0.0, float(_GLF_IDENTITY(float(0.0), (float(0.0)) / 1.0))), (_GLF_IDENTITY(0.0, float(float(0.0)))) / 1.0), 0.0)), 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)) + mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))), mat2x3(1.0), mat3x2(1.0), uvec2(1u), mat4x2(1.0), mat2x3(1.0))));
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 uint workgroup_base = _GLF_struct_replacement_21.workgroup_size * workgroup_id;
 do
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       do
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(true, ! (! (true))))))))
          {
           if(_GLF_DEAD(false))
            barrier();
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, _GLF_IDENTITY(false || (false), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(false || _GLF_IDENTITY((false), false || ((false))), _GLF_IDENTITY((false || (false)), ! (! (_GLF_IDENTITY((false || (false)), ! (! ((false || (false)))))))) || false)), ! (! (bool(_GLF_IDENTITY(false || (false), (false || (false)) || false)))))), true && (bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(false || (false), (false || (false)) || false)), ! (! (bool(_GLF_IDENTITY(false || (false), (false || (false)) || false)))))))))), false))), false)), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(bool(bvec2(false, false)), _GLF_IDENTITY(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec2(true, true)), (bool(bvec2(true, true))) && true)), false || (_GLF_IDENTITY(_GLF_IDENTITY(true, bool(bvec4(true, false, false, _GLF_IDENTITY(true, bool(bool(true)))))), bool(bvec2(true, true)))))), bvec2(bvec4(_GLF_IDENTITY(bvec2(bool(bvec2(false, false)), _GLF_IDENTITY(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec2(true, true)), (bool(bvec2(true, true))) && true)), false || (_GLF_IDENTITY(_GLF_IDENTITY(true, bool(bvec4(true, false, false, _GLF_IDENTITY(true, bool(bool(true)))))), bool(bvec2(true, true)))))), bvec2(bvec2(bvec2(bool(bvec2(false, false)), _GLF_IDENTITY(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec2(true, true)), (bool(bvec2(true, true))) && true)), false || (_GLF_IDENTITY(_GLF_IDENTITY(true, bool(bvec4(true, false, false, _GLF_IDENTITY(true, bool(bool(true)))))), bool(bvec2(true, true))))))))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), ! (! (bool(bvec2(bool(bvec2(false, false)), _GLF_IDENTITY(_GLF_IDENTITY(true, bool(bvec2(true, true))), false || (_GLF_IDENTITY(true, bool(bvec2(true, true))))))))))))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), (_GLF_IDENTITY(int(1), int(1))) << 0)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
            {
             if(_GLF_DEAD(false))
              barrier();
            }
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
        }
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(false));
 _GLF_struct_30 _GLF_struct_replacement_30 = _GLF_struct_30(_GLF_struct_25(mat4x2(1.0), _GLF_struct_22(mat4(1.0)), _GLF_struct_23(ivec4(1), mat2(1.0)), ivec2(1), _GLF_struct_24(bvec3(true))), _GLF_struct_27(_GLF_struct_26(1u, ivec4(1), mat3x2(1.0), mat4x2(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(88.47)), float(_GLF_IDENTITY(1.0, min(1.0, 1.0))), bool(true)))), mat3(1.0), mat3x2(_GLF_IDENTITY(_GLF_IDENTITY(1.0, clamp(1.0, _GLF_IDENTITY(1.0, mix(_GLF_IDENTITY(float(1.0), float(vec2(_GLF_IDENTITY(float(1.0), max(float(1.0), float(1.0))), 0.0))), _GLF_IDENTITY(float(_GLF_FUZZED(_GLF_IDENTITY(-1142.4575, (-1142.4575) - sqrt(0.0)))), float(mat4(float(_GLF_FUZZED(_GLF_IDENTITY(-1142.4575, (-1142.4575) - sqrt(0.0)))), 1.0, 0.0, 1.0, 1.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, determinant(mat2(1.0, 0.0, 0.0, sqrt(1.0))), abs(1.0)))), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), _GLF_IDENTITY(1.0, max(1.0, _GLF_IDENTITY(1.0, min(1.0, 1.0)))))), mix(_GLF_IDENTITY(float(_GLF_FUZZED(_GLF_IDENTITY(vec4(36.50, -2047.9508, 409.013, -8.5), mix(vec4(_GLF_FUZZED(-846.325), _GLF_FUZZED(-4.5), (vec4(36.50, -2047.9508, 409.013, _GLF_IDENTITY(-8.5, (true ? -8.5 : _GLF_FUZZED(3.5)))))[2], _GLF_IDENTITY((vec4(36.50, _GLF_IDENTITY(-2047.9508, (_GLF_IDENTITY(-2047.9508, (true ? _GLF_IDENTITY(-2047.9508, (-2047.9508) * exp(0.0)) : _GLF_FUZZED(32.08)))) / cos(length(vec4(0.0, 0.0, 0.0, 0.0)))), 409.013, -8.5)), vec4(mat3x2(_GLF_IDENTITY((vec4(36.50, _GLF_IDENTITY(-2047.9508, (_GLF_IDENTITY(-2047.9508, (true ? _GLF_IDENTITY(-2047.9508, (-2047.9508) * exp(0.0)) : _GLF_FUZZED(32.08)))) / cos(length(vec4(0.0, 0.0, 0.0, 0.0)))), 409.013, -8.5)), clamp((vec4(36.50, _GLF_IDENTITY(-2047.9508, (_GLF_IDENTITY(-2047.9508, (true ? _GLF_IDENTITY(-2047.9508, (-2047.9508) * exp(0.0)) : _GLF_FUZZED(32.08)))) / cos(length(vec4(0.0, 0.0, 0.0, 0.0)))), 409.013, -8.5)), (vec4(36.50, _GLF_IDENTITY(-2047.9508, (_GLF_IDENTITY(-2047.9508, (true ? _GLF_IDENTITY(-2047.9508, (-2047.9508) * exp(0.0)) : _GLF_FUZZED(32.08)))) / cos(length(vec4(0.0, 0.0, 0.0, 0.0)))), 409.013, -8.5)), (vec4(36.50, _GLF_IDENTITY(-2047.9508, (_GLF_IDENTITY(-2047.9508, (true ? _GLF_IDENTITY(-2047.9508, (-2047.9508) * exp(0.0)) : _GLF_FUZZED(32.08)))) / cos(length(vec4(0.0, 0.0, 0.0, 0.0)))), 409.013, -8.5)))), _GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(0.0, 0.0)), dot(vec2(1.0, 1.0), vec2(0.0, 0.0))), _GLF_IDENTITY(dot(vec2(log(1.0), 0.0), vec2(1.0, 1.0)), dot(vec2(log(1.0), 0.0), vec2(1.0, 1.0))))))[3]), vec4((vec4(36.50, -2047.9508, 409.013, -8.5))[0], _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(vec4(36.50, -2047.9508, 409.013, -8.5), (vec4(36.50, -2047.9508, 409.013, -8.5)) * vec4(1.0, 1.0, 1.0, 1.0)), max(_GLF_IDENTITY(vec4(36.50, -2047.9508, 409.013, -8.5), clamp(vec4(36.50, -2047.9508, 409.013, -8.5), vec4(36.50, -2047.9508, 409.013, -8.5), vec4(_GLF_IDENTITY(36.50, (false ? _GLF_FUZZED(-9.5) : 36.50)), -2047.9508, 409.013, -8.5))), vec4(36.50, -2047.9508, 409.013, -8.5))))[1], mix(float(_GLF_FUZZED(float((46030u << 64498u)))), float((_GLF_IDENTITY(_GLF_IDENTITY(vec4(36.50, -2047.9508, 409.013, -8.5), (vec4(36.50, -2047.9508, 409.013, -8.5)) * vec4(1.0, 1.0, 1.0, 1.0)), max(_GLF_IDENTITY(vec4(36.50, -2047.9508, 409.013, -8.5), clamp(vec4(36.50, -2047.9508, 409.013, -8.5), vec4(36.50, -2047.9508, 409.013, -8.5), vec4(_GLF_IDENTITY(36.50, (false ? _GLF_FUZZED(-9.5) : 36.50)), -2047.9508, 409.013, -8.5))), vec4(36.50, -2047.9508, 409.013, -8.5))))[1]), bool(true))), _GLF_FUZZED(8891.5914), _GLF_FUZZED(-4314.8043)), bvec4(true, true, _GLF_IDENTITY(false, (false) || false), false))).b)), max(float(_GLF_FUZZED(_GLF_IDENTITY(vec4(36.50, -2047.9508, 409.013, -8.5), mix(vec4(_GLF_FUZZED(-846.325), _GLF_FUZZED(-4.5), (vec4(36.50, -2047.9508, 409.013, -8.5))[_GLF_IDENTITY(2, (false ? _GLF_FUZZED(18268) : 2))], (vec4(36.50, -2047.9508, 409.013, -8.5))[3]), vec4((vec4(36.50, -2047.9508, 409.013, -8.5))[0], (vec4(36.50, -2047.9508, 409.013, -8.5))[1], _GLF_IDENTITY(_GLF_FUZZED(8891.5914), min(_GLF_FUZZED(8891.5914), _GLF_FUZZED(8891.5914))), _GLF_FUZZED(-4314.8043)), bvec4(_GLF_IDENTITY(true, ! (! (true))), true, _GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, (false) || false)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (! (_GLF_IDENTITY(false, (false) || false)))))), false))).b)), float(_GLF_FUZZED(_GLF_IDENTITY(vec4(36.50, -2047.9508, 409.013, -8.5), mix(vec4(_GLF_IDENTITY(_GLF_FUZZED(-846.325), min(_GLF_IDENTITY(_GLF_FUZZED(-846.325), _GLF_IDENTITY((_GLF_FUZZED(-846.325)) / 1.0, mix(float(_GLF_FUZZED(-9.4)), float(_GLF_IDENTITY((_GLF_FUZZED(-846.325)) / 1.0, (false ? _GLF_FUZZED(asinh(-1.7)) : (_GLF_FUZZED(-846.325)) / 1.0))), bool(true)))), _GLF_IDENTITY(_GLF_FUZZED(-846.325), float(mat2x4(_GLF_FUZZED(-846.325), 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0))))), _GLF_FUZZED(-4.5), (vec4(36.50, -2047.9508, 409.013, -8.5))[2], (vec4(36.50, -2047.9508, 409.013, -8.5))[3]), vec4((vec4(36.50, -2047.9508, 409.013, -8.5))[0], (vec4(36.50, -2047.9508, 409.013, -8.5))[1], _GLF_FUZZED(8891.5914), _GLF_IDENTITY(_GLF_FUZZED(-4314.8043), (_GLF_FUZZED(-4314.8043)) + 0.0)), bvec4(true, true, false, false))).b)))), float(_GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, float(float(1.0))), 1.0, _GLF_IDENTITY(_GLF_IDENTITY(1.0, determinant(mat4(1.0, 1.0, 1.0, 0.0, 0.0, 1.0, sin(_GLF_IDENTITY(0.0, max(_GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0))), 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0)) * (1.0)), max(_GLF_IDENTITY(1.0, determinant(mat4(_GLF_IDENTITY(1.0, (1.0) + 0.0), 1.0, 1.0, 0.0, 0.0, 1.0, sin(0.0), 0.0, 0.0, _GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, (0.0) - 0.0), _GLF_IDENTITY(0.0, (0.0) / 1.0))), 1.0, 0.0, 0.0, 0.0, 0.0, 1.0)) * (1.0)), _GLF_IDENTITY(1.0, determinant(mat4(1.0, 1.0, 1.0, 0.0, 0.0, 1.0, sin(0.0), 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0)) * (1.0))))))), bool(true)))), _GLF_IDENTITY(1u, uint(_GLF_IDENTITY(uvec4(1u, 1u, 0u, 0u), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_IDENTITY(uvec4(1u, 1u, 0u, 0u), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? uvec4(1u, 1u, 0u, 0u) : _GLF_FUZZED(uvec4(uvec4(642u, 109963u, 95987u, 74444u).q, uvec2(81364u, 177125u), 120691u)))), (uvec4(1u, 1u, _GLF_IDENTITY(0u, uint(_GLF_ONE(1.0, injectionSwitch.y)) * (0u)), 0u)) | uvec4(0u, 0u, 0u, 0u))), (~ (_GLF_IDENTITY(uvec4(1u, 1u, 0u, 0u), (uvec4(1u, 1u, 0u, 0u)) | uvec4(0u, 0u, 0u, 0u)))) / uvec4(1u, 1u, 1u, 1u)))))))), vec3(1.0), mat4(1.0), _GLF_struct_29(_GLF_struct_28(1.0, vec3(1.0), ivec3(_GLF_IDENTITY(1, (1) >> 0)), _GLF_IDENTITY(mat4(1.0), mat4(1.0) * (mat4(1.0))), mat3x2(_GLF_IDENTITY(1.0, max(1.0, _GLF_IDENTITY(_GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, 0.0 + (1.0)), 1.0, 1.0)), mix(float(1.0), float(_GLF_FUZZED(-4.1)), _GLF_IDENTITY(bool(false), ! (_GLF_IDENTITY(! (bool(false)), (_GLF_IDENTITY(! _GLF_IDENTITY((bool(false)), ! (! ((bool(false))))), false || (_GLF_IDENTITY(! (bool(false)), false || (! (bool(false))))))) || false)))))))), 1u, true)), ivec3(1), _GLF_IDENTITY(workgroup_base, (workgroup_base) | (workgroup_base)) + _GLF_IDENTITY(subgroup_id, min(subgroup_id, _GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id)))) * _GLF_struct_replacement_18.subgroup_size + subgroup_local_id, 1.0);
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false)) || false))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   do
    {
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 _GLF_struct_9 _GLF_struct_replacement_9 = _GLF_struct_9(_GLF_struct_1(ivec4(1), _GLF_struct_0(mat4x3(1.0), true, mat2x4(1.0), 1u, workgroup_base + subgroup_id * _GLF_IDENTITY(_GLF_struct_replacement_18.subgroup_size, (_GLF_struct_replacement_18.subgroup_size) ^ 0u) + ((subgroup_local_id + 1) % _GLF_struct_replacement_18.subgroup_size), 1u)), ivec2(1), _GLF_struct_3(_GLF_IDENTITY(ivec3(1), ~ (_GLF_IDENTITY(~ (ivec3(1)), ivec3(0, 0, 0) + (~ (ivec3(1)))))), _GLF_struct_2(mat3x2(1.0), _GLF_IDENTITY(vec3(_GLF_IDENTITY(1.0, max(1.0, 1.0))), clamp(vec3(_GLF_IDENTITY(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(78.85))), max(1.0, 1.0))), vec3(_GLF_IDENTITY(1.0, max(1.0, _GLF_IDENTITY(_GLF_IDENTITY(1.0, min(1.0, 1.0)), mix(float(1.0), float(_GLF_FUZZED((_GLF_IDENTITY((mat2x3(314.850, 1.7, -2060.0990, _GLF_IDENTITY(134.172, (134.172) / 1.0), -655.814, 45.99) == mat2x3(-5.3, _GLF_IDENTITY(-1.2, clamp(-1.2, -1.2, -1.2)), -9586.8440, -6.4, _GLF_IDENTITY(379.741, (true ? 379.741 : _GLF_FUZZED(-2.3))), _GLF_IDENTITY(_GLF_IDENTITY(-35.20, (-35.20) / 1.0), tan(0.0) + (_GLF_IDENTITY(_GLF_IDENTITY(-35.20, (-35.20) / 1.0), float(mat4x3(_GLF_IDENTITY(-35.20, (-35.20) / 1.0), 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0))))))) ? 9.8 : 2.0, clamp((mat2x3(314.850, 1.7, -2060.0990, _GLF_IDENTITY(134.172, (134.172) / 1.0), -655.814, 45.99) == mat2x3(-5.3, _GLF_IDENTITY(-1.2, clamp(-1.2, -1.2, -1.2)), -9586.8440, -6.4, _GLF_IDENTITY(379.741, (true ? 379.741 : _GLF_FUZZED(-2.3))), _GLF_IDENTITY(_GLF_IDENTITY(-35.20, (-35.20) / 1.0), tan(0.0) + (_GLF_IDENTITY(_GLF_IDENTITY(-35.20, (-35.20) / 1.0), float(mat4x3(_GLF_IDENTITY(-35.20, (-35.20) / 1.0), 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0))))))) ? 9.8 : 2.0, _GLF_IDENTITY((mat2x3(314.850, 1.7, -2060.0990, _GLF_IDENTITY(134.172, (134.172) / 1.0), -655.814, 45.99) == mat2x3(-5.3, _GLF_IDENTITY(-1.2, clamp(-1.2, -1.2, -1.2)), -9586.8440, -6.4, _GLF_IDENTITY(379.741, (true ? 379.741 : _GLF_FUZZED(-2.3))), _GLF_IDENTITY(_GLF_IDENTITY(-35.20, (-35.20) / 1.0), tan(0.0) + (_GLF_IDENTITY(_GLF_IDENTITY(-35.20, (-35.20) / 1.0), float(mat4x3(_GLF_IDENTITY(-35.20, (-35.20) / 1.0), 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0))))))) ? 9.8 : 2.0, 1.0 * ((mat2x3(314.850, 1.7, -2060.0990, _GLF_IDENTITY(134.172, (134.172) / 1.0), -655.814, 45.99) == mat2x3(-5.3, _GLF_IDENTITY(-1.2, clamp(-1.2, -1.2, -1.2)), -9586.8440, -6.4, _GLF_IDENTITY(379.741, (true ? 379.741 : _GLF_FUZZED(-2.3))), _GLF_IDENTITY(_GLF_IDENTITY(-35.20, (-35.20) / 1.0), tan(0.0) + (_GLF_IDENTITY(_GLF_IDENTITY(-35.20, (-35.20) / 1.0), float(mat4x3(_GLF_IDENTITY(-35.20, (-35.20) / 1.0), 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0))))))) ? 9.8 : 2.0)), (mat2x3(314.850, 1.7, -2060.0990, _GLF_IDENTITY(134.172, (134.172) / 1.0), -655.814, 45.99) == mat2x3(-5.3, _GLF_IDENTITY(-1.2, clamp(-1.2, -1.2, -1.2)), -9586.8440, -6.4, _GLF_IDENTITY(379.741, (true ? 379.741 : _GLF_FUZZED(-2.3))), _GLF_IDENTITY(_GLF_IDENTITY(-35.20, (-35.20) / 1.0), tan(0.0) + (_GLF_IDENTITY(_GLF_IDENTITY(-35.20, (-35.20) / 1.0), float(mat4x3(_GLF_IDENTITY(-35.20, (-35.20) / 1.0), 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0))))))) ? 9.8 : 2.0))))), bool(false)))))), vec3(_GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(_GLF_IDENTITY(1.0, min(1.0, 1.0)), clamp(_GLF_IDENTITY(1.0, min(1.0, 1.0)), _GLF_IDENTITY(1.0, min(1.0, 1.0)), _GLF_IDENTITY(1.0, min(1.0, 1.0)))))), _GLF_IDENTITY(1.0, float(vec2(1.0, 1.0)))))))), mat4x2(1.0))), _GLF_struct_8(_GLF_struct_4(mat3x2(1.0), _GLF_IDENTITY(ivec4(1), ~ (~ (ivec4(1)))), _GLF_IDENTITY(vec4(1.0), _GLF_IDENTITY(max(vec4(1.0), vec4(1.0)), mat4(1.0) * (max(vec4(1.0), vec4(1.0))))), mat2x4(1.0)), vec3(1.0), _GLF_struct_5(mat4x2(1.0), mat3x2(1.0), uvec2(_GLF_IDENTITY(1u, (true ? 1u : _GLF_FUZZED(169015u)))), mat4x3(1.0), bvec4(true)), vec3(1.0), mat3(1.0), _GLF_struct_6(uvec4(_GLF_IDENTITY(1u, 0u ^ (1u))), true, mat4(1.0), vec4(1.0)), _GLF_struct_7(vec3(1.0), mat4x3(1.0), bvec2(true))));
 do
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), false || (_GLF_IDENTITY(false, (false) || false)))) && true)))
    {
     if(_GLF_DEAD(false))
      barrier();
     do
      {
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x)) > injectionSwitch.y))))
        barrier();
       barrier();
      }
     barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(false));
 do
  {
   atomicStore(buf[_GLF_struct_replacement_30.virtual_gid], uint(1), _GLF_IDENTITY(4, (4) >> 0), _GLF_IDENTITY(_GLF_IDENTITY(64, _GLF_IDENTITY(int(ivec2(64, 0)), (_GLF_IDENTITY(int(ivec2(64, 0)), ~ (~ (int(ivec2(64, _GLF_IDENTITY(0, (0) ^ 0))))))) - 0)), (_GLF_IDENTITY(64, _GLF_IDENTITY(int(ivec2(64, 0)), _GLF_IDENTITY((_GLF_IDENTITY(int(ivec2(64, 0)), _GLF_IDENTITY(~ (~ (_GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_IDENTITY(ivec2(64, 0), (ivec2(64, 0)) | ivec2(0, 0)), min(_GLF_IDENTITY(ivec2(64, 0), (ivec2(64, 0)) | ivec2(0, 0)), _GLF_IDENTITY(ivec2(64, 0), (ivec2(64, 0)) | ivec2(0, 0))))), _GLF_IDENTITY(int(int(int(_GLF_IDENTITY(ivec2(64, 0), (ivec2(64, 0)) | ivec2(0, 0))))), min(int(int(int(_GLF_IDENTITY(ivec2(64, 0), (ivec2(64, 0)) | ivec2(0, 0))))), int(int(int(_GLF_IDENTITY(ivec2(64, 0), (ivec2(64, 0)) | ivec2(0, 0)))))))))), max(~ _GLF_IDENTITY((~ (int(_GLF_IDENTITY(ivec2(64, 0), (ivec2(_GLF_IDENTITY(64, (64) | (_GLF_IDENTITY(64, 0 ^ (64)))), 0)) | ivec2(0, 0))))), min(_GLF_IDENTITY((~ (int(_GLF_IDENTITY(ivec2(64, 0), (ivec2(_GLF_IDENTITY(64, (64) | (_GLF_IDENTITY(64, 0 ^ (64)))), 0)) | ivec2(0, 0))))), int(ivec2(_GLF_IDENTITY((~ (int(_GLF_IDENTITY(ivec2(64, 0), (ivec2(_GLF_IDENTITY(64, (64) | (_GLF_IDENTITY(64, 0 ^ (64)))), 0)) | ivec2(0, 0))))), 0 | ((~ (int(_GLF_IDENTITY(ivec2(64, 0), (ivec2(_GLF_IDENTITY(64, (64) | (_GLF_IDENTITY(64, 0 ^ (64)))), 0)) | ivec2(0, 0))))))), ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3)))))), (~ (int(_GLF_IDENTITY(ivec2(64, 0), (ivec2(_GLF_IDENTITY(64, (64) | (_GLF_IDENTITY(64, 0 ^ (64)))), 0)) | ivec2(0, 0))))))), ~ (~ (int(_GLF_IDENTITY(_GLF_IDENTITY(ivec2(64, 0), (ivec2(64, 0)) | (ivec2(64, 0))), (ivec2(64, 0)) | ivec2(0, 0))))))))), (_GLF_IDENTITY((_GLF_IDENTITY(int(ivec2(64, 0)), ~ (~ (int(_GLF_IDENTITY(_GLF_IDENTITY(ivec2(64, _GLF_IDENTITY(0, int(ivec2(0, 1)))), (ivec2(64, 0)) >> ivec2(0, 0)), (ivec2(64, 0)) | ivec2(0, 0))))))), min((_GLF_IDENTITY(int(ivec2(64, 0)), _GLF_IDENTITY(~ (~ (int(_GLF_IDENTITY(ivec2(64, 0), (ivec2(64, 0)) | ivec2(0, 0))))), max(~ (~ (int(_GLF_IDENTITY(ivec2(64, 0), (ivec2(64, 0)) | ivec2(0, 0))))), _GLF_IDENTITY(~ (~ (int(_GLF_IDENTITY(ivec2(64, 0), (ivec2(64, 0)) | ivec2(0, 0))))), max(~ (~ (int(_GLF_IDENTITY(ivec2(64, 0), (ivec2(64, 0)) | ivec2(0, 0))))), _GLF_IDENTITY(~ (~ (int(_GLF_IDENTITY(ivec2(64, 0), (ivec2(64, 0)) | ivec2(0, 0))))), (false ? _GLF_FUZZED(-33208) : ~ (~ (int(_GLF_IDENTITY(ivec2(64, 0), (ivec2(64, 0)) | ivec2(0, 0))))))))))))), _GLF_IDENTITY((_GLF_IDENTITY(int(ivec2(64, _GLF_IDENTITY(0, ~ (~ (_GLF_IDENTITY(0, (0) << int(_GLF_ZERO(0.0, injectionSwitch.x)))))))), _GLF_IDENTITY(~ (~ (int(_GLF_IDENTITY(ivec2(64, 0), (ivec2(64, 0)) | ivec2(0, _GLF_IDENTITY(0, max(0, 0))))))), (~ (~ (int(_GLF_IDENTITY(ivec2(64, 0), (ivec2(64, 0)) | ivec2(0, _GLF_IDENTITY(0, max(0, 0)))))))) | (~ (~ (int(_GLF_IDENTITY(ivec2(64, 0), (ivec2(64, 0)) | ivec2(0, _GLF_IDENTITY(0, max(0, 0))))))))))), ((_GLF_IDENTITY(int(ivec2(64, _GLF_IDENTITY(0, ~ (~ (_GLF_IDENTITY(0, (0) << int(_GLF_ZERO(0.0, injectionSwitch.x)))))))), _GLF_IDENTITY(~ (~ (int(_GLF_IDENTITY(ivec2(64, 0), (ivec2(64, 0)) | ivec2(0, _GLF_IDENTITY(_GLF_IDENTITY(0, max(0, 0)), (_GLF_IDENTITY(0, max(0, 0))) / 1)))))), (_GLF_IDENTITY(~ (~ (int(_GLF_IDENTITY(ivec2(64, 0), (ivec2(64, 0)) | ivec2(0, _GLF_IDENTITY(0, max(0, 0))))))), (true ? _GLF_IDENTITY(~ (~ (int(_GLF_IDENTITY(ivec2(64, 0), (ivec2(64, 0)) | ivec2(0, _GLF_IDENTITY(0, max(0, 0))))))), (~ (~ (int(_GLF_IDENTITY(_GLF_IDENTITY(ivec2(64, 0), (true ? ivec2(64, 0) : _GLF_FUZZED(ivec2(-83371, 76363)))), (ivec2(64, 0)) | ivec2(0, _GLF_IDENTITY(_GLF_IDENTITY(0, max(0, 0)), (_GLF_IDENTITY(0, max(0, 0))) >> 0))))))) * ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3)))) : _GLF_FUZZED(1393)))) | (~ (~ (int(_GLF_IDENTITY(ivec2(64, 0), (ivec2(64, 0)) | ivec2(0, _GLF_IDENTITY(0, max(0, 0)))))))))))) | 0)))) | ((_GLF_IDENTITY(int(ivec2(64, 0)), ~ (_GLF_IDENTITY(~ (int(_GLF_IDENTITY(_GLF_IDENTITY(ivec2(64, 0), (ivec2(64, 0)) | ivec2(0, 0)), _GLF_IDENTITY(ivec2(0, 0) ^ (_GLF_IDENTITY(ivec2(64, 0), (ivec2(64, 0)) | ivec2(0, 0))), min(ivec2(0, 0) ^ (_GLF_IDENTITY(ivec2(64, 0), (ivec2(64, 0)) | ivec2(0, 0))), ivec2(0, 0) ^ (_GLF_IDENTITY(ivec2(64, 0), (ivec2(64, 0)) | ivec2(0, 0)))))))), 1 * (~ (int(_GLF_IDENTITY(_GLF_IDENTITY(ivec2(64, 0), (ivec2(64, 0)) | ivec2(0, 0)), _GLF_IDENTITY(ivec2(0, 0) ^ (_GLF_IDENTITY(ivec2(64, 0), (ivec2(64, 0)) | ivec2(0, 0))), min(ivec2(0, 0) ^ (_GLF_IDENTITY(ivec2(64, 0), (ivec2(64, 0)) | ivec2(0, 0))), ivec2(0, 0) ^ (_GLF_IDENTITY(ivec2(64, 0), (ivec2(64, 0)) | ivec2(0, 0))))))))))))))) - 0))) | 0), 4);
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat3x4(injectionSwitch, 0.0, 0.0, 1.0, 1.0, exp(0.0), 0.0, 1.0, 1.0, log(1.0), 1.0), (mat3x4(injectionSwitch, 0.0, 0.0, 1.0, 1.0, exp(0.0), 0.0, 1.0, 1.0, log(1.0), 1.0)) + mat3x4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))).y))))
    barrier();
  }
 while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), _GLF_IDENTITY(bool(bvec2(_GLF_WRAPPED_LOOP(false), true)), true && (bool(bvec2(_GLF_WRAPPED_LOOP(false), true))))));
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(mat4(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(7.8)), vec2(_GLF_FUZZED(753.784), (injectionSwitch)[1]), bvec2(false, true))), vec2(mat2x3(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(7.8)), vec2(_GLF_FUZZED(753.784), (injectionSwitch)[1]), bvec2(false, true))), 0.0, 0.0, 0.0, _GLF_IDENTITY(1.0, (true ? _GLF_IDENTITY(1.0, (1.0) / 1.0) : _GLF_FUZZED(5879.7746))))))[1])), 0.0, _GLF_IDENTITY(determinant(_GLF_IDENTITY(mat4(0.0, _GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0, 1.0, 0.0, determinant(mat2(_GLF_IDENTITY(0.0, float(vec3(0.0, 0.0, 0.0))), 0.0, 0.0, 0.0)), _GLF_IDENTITY(0.0, 1.0 * (0.0)), 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, sin(0.0), 0.0, 0.0), transpose(transpose(mat4(0.0, _GLF_IDENTITY(0.0, mix(float(_GLF_IDENTITY(0.0, (0.0) + 0.0)), float(_GLF_FUZZED(499.466)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), 0.0, 1.0, 0.0, determinant(mat2(_GLF_IDENTITY(0.0, float(vec3(0.0, 0.0, 0.0))), 0.0, 0.0, 0.0)), _GLF_IDENTITY(0.0, 1.0 * (0.0)), 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(sin(0.0), clamp(sin(0.0), sin(0.0), sin(0.0))), 0.0, 0.0))))), float(mat2x3(determinant(mat4(0.0, 0.0, 0.0, 1.0, 0.0, determinant(mat2(_GLF_IDENTITY(0.0, float(vec3(0.0, 0.0, 0.0))), _GLF_IDENTITY(0.0, (true ? _GLF_IDENTITY(0.0, min(0.0, _GLF_IDENTITY(0.0, max(0.0, 0.0)))) : _GLF_FUZZED(7.5))), 0.0, 0.0)), 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, sin(0.0), 0.0, _GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(2.0)), bool(false))))), length(vec3(0.0, 0.0, 0.0)), 0.0, sqrt(1.0), abs(1.0), sin(0.0)))), 0.0, 1.0, 1.0, 0.0, log(1.0), 1.0, 0.0, _GLF_IDENTITY(0.0, float(_GLF_IDENTITY(mat4x2(0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0, 1.0, _GLF_IDENTITY(0.0, (0.0) / 1.0), 1.0), (_GLF_IDENTITY(mat4x2(0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0, 1.0, 0.0, 1.0), (mat4x2(0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0, 1.0, 0.0, 1.0)) + mat4x2(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))) + mat4x2(0.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, clamp(0.0, _GLF_IDENTITY(0.0, (0.0) * 1.0), 0.0)), 0.0, 0.0, 0.0)))), _GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, clamp(1.0, _GLF_IDENTITY(1.0, max(1.0, 1.0)), 1.0)), 1.0)), 1.0, 0.0, tan(_GLF_IDENTITY(0.0, (0.0) + 0.0))))).y))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     do
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          barrier();
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(((1 << _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), int(int(int(2)))))) >> _GLF_IDENTITY(int(2), int(2))), (_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), int(int(int(2)))))) >> _GLF_IDENTITY(int(2), int(2))), (((1 << _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), int(int(int(2)))))) >> _GLF_IDENTITY(int(2), int(2)))) / 1)) | 0)); _injected_loop_counter ++)
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (1 ^ 1)); _injected_loop_counter --)
            {
             barrier();
             if(_GLF_DEAD(false))
              barrier();
            }
          }
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), bool(bvec4(! (true), false, true, false))))) && (false))))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED((-456.673))), float(injectionSwitch.x), bool(true))) > injectionSwitch.y))))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (_GLF_IDENTITY(_GLF_IDENTITY(! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bool(bvec4(_GLF_IDENTITY(! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true && (! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), false, true, true))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bool(bvec4(_GLF_IDENTITY(! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true && _GLF_IDENTITY((! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), true && ((! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), false, true, true)))))) || false))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! _GLF_IDENTITY((false), true && (_GLF_IDENTITY((false), true && ((false))))), false || (! (false))))), (injectionSwitch.x > injectionSwitch.y))))
  {
   do
    {
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = (((((_GLF_IDENTITY((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7)), (false ? _GLF_FUZZED(-2682) : (1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))))) << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5))) << _GLF_IDENTITY(int(_GLF_IDENTITY(3, (3) / ((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4))))), _GLF_IDENTITY(int(3), 1 * (int(3))))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(3), min(int(3), int(3))), int(_GLF_IDENTITY(3, clamp(3, _GLF_IDENTITY(3, (3) >> 0), 3))))); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0), (_GLF_WRAPPED_LOOP(_injected_loop_counter != 0)) || false); _injected_loop_counter --)
    {
     barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   barrier();
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   if(subgroup_local_id + 1 < _GLF_struct_replacement_18.subgroup_size)
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
         barrier();
        }
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         do
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, _GLF_IDENTITY(true, ! (! (true))), true)))))
            barrier();
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(_GLF_IDENTITY(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec2(bvec2(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))));
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
          barrier();
         if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, 1.0 * (injectionSwitch.y))))), ! (! _GLF_IDENTITY(((injectionSwitch.x < injectionSwitch.y)), true && (((injectionSwitch.x < injectionSwitch.y)))))))), _GLF_IDENTITY(_GLF_IDENTITY((_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), true && ((injectionSwitch.x < injectionSwitch.y))), ! (! ((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)), injectionSwitch)).y))))))) || false, ((_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), _GLF_IDENTITY(true && ((_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (! (injectionSwitch.x < injectionSwitch.y))))), bool(bvec2(true && ((_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (! (injectionSwitch.x < injectionSwitch.y))))), false)))), ! (! ((injectionSwitch.x < injectionSwitch.y))))))) || false) && true), false || (_GLF_IDENTITY((_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), true && ((injectionSwitch.x < injectionSwitch.y))), ! (! ((injectionSwitch.x < injectionSwitch.y)))), false || (_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), true && ((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y))), _GLF_IDENTITY(! (! ((_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(vec2(-7.2, 69.84).g)), float(injectionSwitch.x), bool(true))), injectionSwitch.x)) < injectionSwitch.y))), ! (! (! (_GLF_IDENTITY(! ((injectionSwitch.x < injectionSwitch.y)), true && (! ((injectionSwitch.x < injectionSwitch.y)))))))))))))), false || (_GLF_IDENTITY((_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), true && ((injectionSwitch.x < injectionSwitch.y))), ! (! ((injectionSwitch.x < injectionSwitch.y)))), false || (_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), true && ((injectionSwitch.x < injectionSwitch.y))), _GLF_IDENTITY(! (! ((injectionSwitch.x < injectionSwitch.y))), ! (! (! (! ((injectionSwitch.x < injectionSwitch.y)))))))))))), true && (_GLF_IDENTITY((_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), true && ((injectionSwitch.x < injectionSwitch.y))), ! (! ((injectionSwitch.x < injectionSwitch.y)))), false || (_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), true && ((injectionSwitch.x < injectionSwitch.y))), _GLF_IDENTITY(! (! ((injectionSwitch.x < injectionSwitch.y))), ! (! (! (! ((injectionSwitch.x < injectionSwitch.y)))))))))))), true && ((_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), true && ((injectionSwitch.x < injectionSwitch.y))), ! (! ((injectionSwitch.x < injectionSwitch.y)))), false || (_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), true && ((injectionSwitch.x < injectionSwitch.y))), _GLF_IDENTITY(! (! ((injectionSwitch.x < injectionSwitch.y))), ! (! (! (! ((injectionSwitch.x < injectionSwitch.y)))))))))))))))))) || false))))
          {
           barrier();
           do
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               barrier();
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(false))
                barrier();
              }
             if(_GLF_DEAD(false))
              barrier();
            }
          }
         do
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))) && true))
            barrier();
           barrier();
          }
        }
       barrier();
      }
     if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))), true && (_GLF_DEAD(false))))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (false)))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         barrier();
        }
      }
     if(_GLF_DEAD(false))
      barrier();
     int i = 0;
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), ! (! (_GLF_WRAPPED_IF_FALSE(false)))))
        {
        }
       else
        {
         do
          {
           for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
            {
             if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), true))), true, true)))))))
              barrier();
            }
           if(_GLF_DEAD(false))
            barrier();
           atomicStore(buf[_GLF_struct_replacement_9._f0._f1.next_virtual_gid], uint(2), 4, 64, 4);
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), bool(bvec3(bool(bool(false)), true, false))))))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), (int(1)) << 0))) >> _GLF_IDENTITY(int(1), int(1)))); _injected_loop_counter ++)
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
                {
                 do
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)));
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
           if(_GLF_DEAD(false))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bvec2(false, true)))))), (injectionSwitch.x > injectionSwitch.y))));
        }
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), ! (! (! (injectionSwitch.x > injectionSwitch.y))))))))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, sqrt(0.0) + (injectionSwitch.y)), _GLF_IDENTITY(clamp(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(clamp(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + sqrt(vec2(0.0, 0.0))), injectionSwitch, injectionSwitch), mix(vec2(_GLF_FUZZED(-50.19), _GLF_FUZZED(-724.546)), vec2((clamp(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + sqrt(vec2(0.0, 0.0))), injectionSwitch, injectionSwitch))[0], (clamp(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + sqrt(vec2(0.0, 0.0))), injectionSwitch, injectionSwitch))[1]), bvec2(true, true)))).y, injectionSwitch.y, injectionSwitch.y), clamp(clamp(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + sqrt(vec2(0.0, 0.0))), injectionSwitch, injectionSwitch)).y, injectionSwitch.y, injectionSwitch.y), _GLF_IDENTITY(clamp(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat4x3(injectionSwitch, exp(0.0), _GLF_ONE(1.0, injectionSwitch.y), 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, length(0.0)))), (injectionSwitch) + sqrt(vec2(0.0, 0.0))), injectionSwitch, injectionSwitch)).y, injectionSwitch.y, injectionSwitch.y), (_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), bool(bvec4(_GLF_IDENTITY(false, true && (false)), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))) ? _GLF_FUZZED(1377.2359) : clamp(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch))) + sqrt(vec2(0.0, 0.0))), injectionSwitch, injectionSwitch)).y, _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-5.0), _GLF_FUZZED(-2.7)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))), _GLF_IDENTITY(vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], clamp(injectionSwitch[_GLF_IDENTITY(1, int(ivec2(1, 1)))], injectionSwitch[1], injectionSwitch[1]))), max(vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], clamp(injectionSwitch[_GLF_IDENTITY(1, int(ivec2(1, 1)))], injectionSwitch[1], injectionSwitch[1]))), vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], clamp(injectionSwitch[_GLF_IDENTITY(1, int(ivec2(1, 1)))], injectionSwitch[1], injectionSwitch[1])))))).y))), clamp(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + sqrt(vec2(0.0, 0.0))), injectionSwitch, injectionSwitch)).y, injectionSwitch.y, injectionSwitch.y)))), (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, sqrt(0.0) + (injectionSwitch.y)), _GLF_IDENTITY(clamp(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + sqrt(vec2(0.0, 0.0))), injectionSwitch, _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))))).y, injectionSwitch.y, injectionSwitch.y), clamp(clamp(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + _GLF_IDENTITY(sqrt(vec2(0.0, 0.0)), clamp(_GLF_IDENTITY(sqrt(vec2(0.0, 0.0)), min(sqrt(vec2(0.0, 0.0)), sqrt(vec2(0.0, 0.0)))), sqrt(vec2(0.0, 0.0)), sqrt(vec2(0.0, 0.0))))), injectionSwitch, injectionSwitch)).y, injectionSwitch.y, injectionSwitch.y), _GLF_IDENTITY(clamp(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + sqrt(vec2(0.0, 0.0))), injectionSwitch, injectionSwitch)).y, injectionSwitch.y, injectionSwitch.y), (false ? _GLF_FUZZED(1377.2359) : clamp(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + sqrt(vec2(0.0, 0.0))), injectionSwitch, injectionSwitch)).y, injectionSwitch.y, injectionSwitch.y))), clamp(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + sqrt(vec2(0.0, 0.0))), injectionSwitch, _GLF_IDENTITY(injectionSwitch, mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch)))).y, injectionSwitch.y, injectionSwitch.y)))), _GLF_IDENTITY(bool(bvec3(injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, sqrt(0.0) + (injectionSwitch.y)), _GLF_IDENTITY(clamp(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + sqrt(vec2(0.0, 0.0))), injectionSwitch, injectionSwitch)).y, injectionSwitch.y, injectionSwitch.y), clamp(clamp(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + sqrt(vec2(0.0, 0.0))), injectionSwitch, injectionSwitch)).y, injectionSwitch.y, injectionSwitch.y), _GLF_IDENTITY(clamp(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + _GLF_IDENTITY(sqrt(vec2(0.0, 0.0)), (sqrt(vec2(_GLF_IDENTITY(0.0, float(vec2(0.0, 1.0))), 0.0))) + vec2(0.0, 0.0))), injectionSwitch, injectionSwitch)).y, max(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + sqrt(vec2(0.0, 0.0))), injectionSwitch, injectionSwitch)).y, _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + sqrt(vec2(0.0, 0.0))), injectionSwitch, injectionSwitch)).y)), _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y), (false ? _GLF_FUZZED(1377.2359) : clamp(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(clamp(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + sqrt(vec2(0.0, 0.0))), injectionSwitch, injectionSwitch), min(clamp(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + sqrt(_GLF_IDENTITY(vec2(0.0, 0.0), mix(vec2((vec2(0.0, 0.0))[0], _GLF_IDENTITY((vec2(0.0, 0.0))[1], (_GLF_IDENTITY((vec2(0.0, 0.0))[1], mix(float((vec2(0.0, 0.0))[1]), float(_GLF_FUZZED(29.40)), bool(false)))) - 0.0)), vec2(_GLF_FUZZED(((-5.6) - 590.122)), _GLF_FUZZED(401.590)), bvec2(false, false))))), injectionSwitch, injectionSwitch), _GLF_IDENTITY(clamp(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + sqrt(vec2(0.0, 0.0))), injectionSwitch, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch))), (_GLF_IDENTITY(clamp(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + sqrt(vec2(0.0, 0.0))), injectionSwitch, injectionSwitch), min(clamp(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + sqrt(vec2(0.0, 0.0))), injectionSwitch, injectionSwitch), clamp(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + sqrt(vec2(0.0, 0.0))), injectionSwitch, injectionSwitch)))) - vec2(0.0, 0.0))))).y, injectionSwitch.y, injectionSwitch.y))), clamp(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) + sqrt(vec2(0.0, 0.0)), mix(vec2(_GLF_FUZZED((-6163.9755 + (false ? -9952.9994 : 9.4))), ((injectionSwitch) + sqrt(vec2(0.0, 0.0)))[1]), vec2(((injectionSwitch) + sqrt(vec2(0.0, 0.0)))[0], _GLF_FUZZED(vec2(4483.8795, 3.7).x)), bvec2(true, false)))), injectionSwitch, injectionSwitch)).y, injectionSwitch.y, injectionSwitch.y)))), true, false)), false || (bool(bvec3(injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, sqrt(0.0) + (injectionSwitch.y)), _GLF_IDENTITY(clamp(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + sqrt(vec2(0.0, 0.0))), injectionSwitch, injectionSwitch)), min(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + sqrt(vec2(0.0, 0.0))), injectionSwitch, injectionSwitch)), _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + sqrt(vec2(0.0, 0.0))), injectionSwitch, injectionSwitch)))).y, injectionSwitch.y, injectionSwitch.y), clamp(clamp(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + sqrt(vec2(0.0, 0.0))), injectionSwitch, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)))).y, injectionSwitch.y, injectionSwitch.y), _GLF_IDENTITY(clamp(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + sqrt(vec2(0.0, 0.0))), injectionSwitch, injectionSwitch)).y, injectionSwitch.y, injectionSwitch.y), (false ? _GLF_FUZZED(1377.2359) : clamp(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + sqrt(vec2(0.0, 0.0))), injectionSwitch, injectionSwitch)).y, injectionSwitch.y, injectionSwitch.y))), clamp(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + sqrt(vec2(0.0, 0.0))), injectionSwitch, injectionSwitch)).y, injectionSwitch.y, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y)))), true, false)))))) || false)))))
      {
       if(_GLF_DEAD(false))
        barrier();
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(6, 1 * (6))), _GLF_IDENTITY(int(6), int(int(int(6)))))), ~ (~ (((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(_GLF_IDENTITY(int(6), int(ivec3(int(6), 0, 1))), int(int(int(6)))))))))); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
          barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
        {
         if(_GLF_DEAD(false))
          barrier();
         do
          {
           barrier();
           if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(false))
          barrier();
        }
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (_GLF_IDENTITY(false, bool(bvec3(false, false, true)))))))))))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             barrier();
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             else
              {
              }
             if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
              barrier();
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 | (0 ^ 0))); _injected_loop_counter --)
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 barrier();
                 if(_GLF_DEAD(false))
                  barrier();
                 for(int _injected_loop_counter = _GLF_IDENTITY(0, 0 ^ (_GLF_IDENTITY(0, 0 ^ (0)))); _GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))), (_GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y)))) && true), bool(bvec2(_GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))), false))); _injected_loop_counter ++)
                  {
                   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
                    barrier();
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                }
               else
                {
                }
              }
            }
           if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), true))))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
         barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))), true, _GLF_IDENTITY(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) < injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true && (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))))))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     do
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
           do
            {
             if(_GLF_DEAD(false))
              barrier();
             do
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
             if(_GLF_DEAD(false))
              barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), (_GLF_WRAPPED_IF_TRUE(true)) && true))
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) && true)))
              {
               barrier();
              }
             else
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             if(_GLF_DEAD(false))
              barrier();
            }
           else
            {
            }
          }
         barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec3(false, true, true))), (injectionSwitch.x > injectionSwitch.y))));
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0), injectionSwitch.y))))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false))))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y), (_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y), _GLF_IDENTITY(bool(bvec2((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y), false)), true && (bool(bvec2((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y), false)))))) || false))))
          barrier();
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
        }
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec2(false, false))), (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))))))
        {
         do
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
         atomicStore(buf[_GLF_struct_replacement_9._f0._f1.next_virtual_gid], uint(2), 4, 64, 4);
         if(_GLF_DEAD(false))
          barrier();
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, false || (false))));
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), _GLF_IDENTITY(bool(bvec2(false, false)), true && (bool(bvec2(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), false || (! (false))))), false)))))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         barrier();
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
        }
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(8), _GLF_IDENTITY(int(_GLF_IDENTITY(8, clamp(_GLF_IDENTITY(8, (8) ^ 0), 8, _GLF_IDENTITY(8, (false ? _GLF_FUZZED((-9015 % -18587)) : 8))))), (int(8)) / 1)), clamp(_GLF_IDENTITY(int(8), _GLF_IDENTITY(int(_GLF_IDENTITY(8, clamp(_GLF_IDENTITY(8, (8) ^ 0), 8, _GLF_IDENTITY(8, (false ? _GLF_FUZZED((-9015 % -18587)) : 8))))), (int(8)) / 1)), _GLF_IDENTITY(_GLF_IDENTITY(int(8), _GLF_IDENTITY(int(_GLF_IDENTITY(8, clamp(_GLF_IDENTITY(8, (8) ^ 0), 8, _GLF_IDENTITY(8, (false ? _GLF_FUZZED((-9015 % -18587)) : 8))))), (int(8)) / 1)), max(_GLF_IDENTITY(int(8), _GLF_IDENTITY(int(_GLF_IDENTITY(8, clamp(_GLF_IDENTITY(8, (8) ^ 0), 8, _GLF_IDENTITY(8, (false ? _GLF_FUZZED((-9015 % -18587)) : 8))))), (int(8)) / 1)), _GLF_IDENTITY(int(8), _GLF_IDENTITY(int(_GLF_IDENTITY(8, clamp(_GLF_IDENTITY(8, (8) ^ 0), 8, _GLF_IDENTITY(8, (false ? _GLF_FUZZED((-9015 % -18587)) : 8))))), (int(8)) / 1)))), _GLF_IDENTITY(int(8), _GLF_IDENTITY(int(_GLF_IDENTITY(8, clamp(_GLF_IDENTITY(8, (8) ^ 0), 8, _GLF_IDENTITY(8, (false ? _GLF_FUZZED((-9015 % -18587)) : 8))))), (int(8)) / 1))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), (false ? _GLF_FUZZED(_injected_loop_counter) : int(_GLF_ONE(1.0, injectionSwitch.y))))); _GLF_IDENTITY(_injected_loop_counter ++, (_GLF_IDENTITY(_injected_loop_counter ++, 0 | (_injected_loop_counter ++))) / 1))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
              barrier();
             barrier();
            }
           barrier();
          }
         if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_DEAD(false))))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         if(_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false)))), (_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false)))), (bool(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))) && true)) && true))))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               barrier();
              }
             else
              {
              }
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
              barrier();
             barrier();
            }
          }
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       for(int _injected_loop_counter = _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), (int(_GLF_ZERO(0.0, injectionSwitch.x))) ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), ! (! (_GLF_IDENTITY(false, (false) && true))))))
            barrier();
           if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], max(_GLF_IDENTITY(injectionSwitch[1], clamp(injectionSwitch[1], injectionSwitch[1], injectionSwitch[1])), injectionSwitch[1])))).y)) || (false))), bool(bool(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], max(_GLF_IDENTITY(injectionSwitch[1], clamp(injectionSwitch[1], injectionSwitch[1], injectionSwitch[1])), injectionSwitch[1])))).y)) || (false)))))))
            barrier();
          }
         else
          {
          }
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
          }
         if(_GLF_DEAD(false))
          barrier();
        }
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
  }
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false, true)))))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(false));
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
