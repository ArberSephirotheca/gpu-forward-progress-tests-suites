#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / exp(_GLF_IDENTITY(vec2(0.0, 0.0), clamp(_GLF_IDENTITY(vec2(0.0, 0.0), max(vec2(0.0, 0.0), _GLF_IDENTITY(vec2(0.0, 0.0), vec2(mat3x4(vec2(0.0, 0.0), 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0))))), _GLF_IDENTITY(vec2(0.0, 0.0), mix(vec2((vec2(0.0, 0.0))[0], (vec2(0.0, 0.0))[1]), vec2(_GLF_FUZZED(130.893), _GLF_FUZZED(2.1)), bvec2(false, false))), vec2(0.0, 0.0))))))).x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y))), false || _GLF_IDENTITY((_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / exp(vec2(0.0, 0.0))))).x > injectionSwitch.y)))), ! (! (_GLF_IDENTITY((_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / exp(vec2(0.0, 0.0))))).x > injectionSwitch.y)))), true && ((_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / exp(vec2(0.0, 0.0))))).x > injectionSwitch.y)))))))))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) && true))))))
    return;
   barrier();
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     return;
    }
   if(_GLF_DEAD(false))
    barrier();
   return;
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    return;
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec2(false, _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0)))))), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false))))) && true)))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   return;
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))))
    return;
   return;
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, false, true)))))
      barrier();
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     return;
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true, false)))), true && (_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) || false))))))), (_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * abs(vec2(1.0, 1.0))))).x > injectionSwitch.y)), true, true, false)))))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = _GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, clamp(gl_NumWorkGroups, _GLF_IDENTITY(gl_NumWorkGroups, uvec3(0u, 0u, 0u) + (gl_NumWorkGroups)), gl_NumWorkGroups)), uvec3(0u, 0u, 0u) | (_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) - uvec3(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(_GLF_IDENTITY(0.0, _GLF_IDENTITY(float(mat4x2(0.0, length(vec3(0.0, 0.0, 0.0)), 1.0, _GLF_IDENTITY(abs(1.0), 1.0 * (abs(1.0))), 0.0, 0.0, 0.0, 0.0)), (float(mat4x2(0.0, length(vec3(0.0, 0.0, _GLF_IDENTITY(0.0, max(0.0, _GLF_IDENTITY(0.0, max(0.0, 0.0)))))), 1.0, abs(1.0), 0.0, 0.0, 0.0, 0.0))) / 1.0)), injectionSwitch.x))))).x;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(false), false || _GLF_IDENTITY(_GLF_IDENTITY((_GLF_DEAD(false)), bool(bvec4((_GLF_DEAD(false)), false, true, true))), bool(bvec2((_GLF_DEAD(false)), false)))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false))))))))
    return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && _GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || ((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), ! (! (_GLF_IDENTITY(false, false || (false)))))))
      barrier();
     return;
    }
   barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y))))))))
    return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    return;
   barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec2(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false)))))))))
    return;
   if(_GLF_DEAD(false))
    barrier();
   return;
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = _GLF_IDENTITY(gl_WorkGroupID, uvec3(_GLF_IDENTITY(uvec3(gl_WorkGroupID), uvec3(0u, 0u, 0u) | (uvec3(gl_WorkGroupID))))).x;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   return;
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, true && (false))), bool(bvec3(! (_GLF_IDENTITY(false, true && (false))), true, true)))))))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bvec4(false, _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).x > injectionSwitch.y)), true, false)))), ! (! (! (false))))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
   barrier();
  }
 uint workgroup_base = _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, (workgroup_size) * 1u) * workgroup_id, 0u ^ (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, (workgroup_size) * 1u) * workgroup_id, (true ? _GLF_IDENTITY(workgroup_size, (workgroup_size) * 1u) * workgroup_id : _GLF_FUZZED(workgroup_size))))), _GLF_IDENTITY(clamp(workgroup_size * workgroup_id, workgroup_size * workgroup_id, _GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, 0u + (workgroup_size)) * workgroup_id, uint(_GLF_IDENTITY(uvec2(workgroup_size * workgroup_id, _GLF_IDENTITY(_GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, ~ (~ _GLF_IDENTITY((1u), _GLF_IDENTITY(uint(_GLF_ZERO(0.0, injectionSwitch.x)) | ((1u)), max(uint(_GLF_ZERO(0.0, injectionSwitch.x)) | ((1u)), _GLF_IDENTITY(uint(_GLF_ZERO(0.0, injectionSwitch.x)) | ((1u)), min(uint(_GLF_ZERO(0.0, injectionSwitch.x)) | ((1u)), uint(_GLF_ZERO(_GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(injectionSwitch.g))), injectionSwitch.x)) | ((1u)))))))))) | (_GLF_IDENTITY(1u, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(1u, ((1u << _GLF_IDENTITY(uint(3u), uint(3u))) >> _GLF_IDENTITY(uint(3u), _GLF_IDENTITY(uint(3u), (_GLF_IDENTITY(uint(3u), 0u ^ (_GLF_IDENTITY(uint(3u), 1u * (uint(3u)))))) | 0u))) * (1u)), 0u ^ (_GLF_IDENTITY(1u, ((1u << _GLF_IDENTITY(uint(3u), uint(3u))) >> _GLF_IDENTITY(uint(3u), _GLF_IDENTITY(uint(3u), (_GLF_IDENTITY(uint(3u), 0u ^ (_GLF_IDENTITY(uint(3u), 1u * (uint(3u)))))) | 0u))) * (1u))))) << 0u, min((1u) << 0u, _GLF_IDENTITY((_GLF_IDENTITY(1u, clamp(1u, 1u, _GLF_IDENTITY(1u, (1u) >> 0u)))) << 0u, ((1u) << 0u) / 1u)))))), (_GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, ~ (~ (1u)))) | (_GLF_IDENTITY(1u, _GLF_IDENTITY(_GLF_IDENTITY((1u), 0u + (_GLF_IDENTITY((1u), ((1u)) | uint(_GLF_ZERO(0.0, injectionSwitch.x))))) << 0u, min((1u) << 0u, _GLF_IDENTITY((1u) << 0u, ((1u) << 0u) / 1u))))))) | (_GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, ~ (~ (1u)))) | (_GLF_IDENTITY(1u, _GLF_IDENTITY((1u) << 0u, min((1u) << 0u, _GLF_IDENTITY(_GLF_IDENTITY((1u), ((1u)) ^ 0u) << 0u, ((1u) << 0u) / 1u))))))))), min(_GLF_IDENTITY(uvec2(workgroup_size * workgroup_id, _GLF_IDENTITY(_GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, ~ (~ _GLF_IDENTITY((1u), _GLF_IDENTITY(uint(_GLF_ZERO(0.0, injectionSwitch.x)) | ((1u)), max(uint(_GLF_ZERO(0.0, injectionSwitch.x)) | ((1u)), _GLF_IDENTITY(uint(_GLF_ZERO(0.0, injectionSwitch.x)) | ((1u)), min(uint(_GLF_ZERO(0.0, injectionSwitch.x)) | ((1u)), uint(_GLF_ZERO(_GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(injectionSwitch.g))), injectionSwitch.x)) | ((1u)))))))))) | (_GLF_IDENTITY(1u, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(1u, ((1u << _GLF_IDENTITY(uint(3u), uint(3u))) >> _GLF_IDENTITY(uint(3u), _GLF_IDENTITY(uint(3u), (_GLF_IDENTITY(uint(3u), 0u ^ (_GLF_IDENTITY(uint(3u), 1u * (uint(3u)))))) | 0u))) * (1u)), 0u ^ (_GLF_IDENTITY(1u, ((1u << _GLF_IDENTITY(uint(3u), uint(3u))) >> _GLF_IDENTITY(uint(3u), _GLF_IDENTITY(uint(3u), (_GLF_IDENTITY(uint(3u), 0u ^ (_GLF_IDENTITY(uint(3u), 1u * (uint(3u)))))) | 0u))) * (1u))))) << 0u, min((1u) << 0u, _GLF_IDENTITY((_GLF_IDENTITY(1u, clamp(1u, 1u, _GLF_IDENTITY(1u, (1u) >> 0u)))) << 0u, ((1u) << 0u) / 1u)))))), (_GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, ~ (~ (1u)))) | (_GLF_IDENTITY(1u, _GLF_IDENTITY(_GLF_IDENTITY((1u), 0u + (_GLF_IDENTITY((1u), ((1u)) | uint(_GLF_ZERO(0.0, injectionSwitch.x))))) << 0u, min((1u) << 0u, _GLF_IDENTITY((1u) << 0u, ((1u) << 0u) / 1u))))))) | (_GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, ~ (~ (1u)))) | (_GLF_IDENTITY(1u, _GLF_IDENTITY((1u) << 0u, min((1u) << 0u, _GLF_IDENTITY(_GLF_IDENTITY((1u), ((1u)) ^ 0u) << 0u, ((1u) << 0u) / 1u))))))))), (true ? uvec2(workgroup_size * workgroup_id, _GLF_IDENTITY(_GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, ~ (~ _GLF_IDENTITY((1u), _GLF_IDENTITY(uint(_GLF_ZERO(0.0, injectionSwitch.x)) | ((1u)), max(uint(_GLF_ZERO(0.0, injectionSwitch.x)) | ((1u)), _GLF_IDENTITY(uint(_GLF_ZERO(0.0, injectionSwitch.x)) | ((1u)), min(uint(_GLF_ZERO(0.0, injectionSwitch.x)) | ((1u)), uint(_GLF_ZERO(_GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(injectionSwitch.g))), injectionSwitch.x)) | ((1u)))))))))) | (_GLF_IDENTITY(1u, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(1u, ((1u << _GLF_IDENTITY(uint(3u), uint(3u))) >> _GLF_IDENTITY(uint(3u), _GLF_IDENTITY(uint(3u), (_GLF_IDENTITY(uint(3u), 0u ^ (_GLF_IDENTITY(uint(3u), 1u * (uint(3u)))))) | 0u))) * (1u)), 0u ^ (_GLF_IDENTITY(1u, ((1u << _GLF_IDENTITY(uint(3u), uint(3u))) >> _GLF_IDENTITY(uint(3u), _GLF_IDENTITY(uint(3u), (_GLF_IDENTITY(uint(3u), 0u ^ (_GLF_IDENTITY(uint(3u), 1u * (uint(3u)))))) | 0u))) * (1u))))) << 0u, min((1u) << 0u, _GLF_IDENTITY((_GLF_IDENTITY(1u, clamp(1u, 1u, _GLF_IDENTITY(1u, (1u) >> 0u)))) << 0u, ((1u) << 0u) / 1u)))))), (_GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, ~ (~ (1u)))) | (_GLF_IDENTITY(1u, _GLF_IDENTITY(_GLF_IDENTITY((1u), 0u + (_GLF_IDENTITY((1u), ((1u)) | uint(_GLF_ZERO(0.0, injectionSwitch.x))))) << 0u, min((1u) << 0u, _GLF_IDENTITY((1u) << 0u, ((1u) << 0u) / 1u))))))) | (_GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, ~ (~ (1u)))) | (_GLF_IDENTITY(1u, _GLF_IDENTITY((1u) << 0u, min((1u) << 0u, _GLF_IDENTITY(_GLF_IDENTITY((1u), ((1u)) ^ 0u) << 0u, ((1u) << 0u) / 1u))))))))) : _GLF_FUZZED(uvec2(83576u, 33848u)))), uvec2(workgroup_size * workgroup_id, _GLF_IDENTITY(_GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, ~ (~ _GLF_IDENTITY((1u), _GLF_IDENTITY(uint(_GLF_ZERO(0.0, injectionSwitch.x)) | ((1u)), max(uint(_GLF_ZERO(0.0, injectionSwitch.x)) | ((1u)), _GLF_IDENTITY(uint(_GLF_ZERO(0.0, injectionSwitch.x)) | ((1u)), min(uint(_GLF_ZERO(0.0, injectionSwitch.x)) | ((1u)), uint(_GLF_ZERO(_GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(injectionSwitch.g))), injectionSwitch.x)) | ((1u)))))))))) | (_GLF_IDENTITY(1u, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(1u, ((1u << _GLF_IDENTITY(uint(3u), uint(3u))) >> _GLF_IDENTITY(uint(3u), _GLF_IDENTITY(uint(3u), (_GLF_IDENTITY(uint(3u), 0u ^ (_GLF_IDENTITY(uint(3u), 1u * (uint(3u)))))) | 0u))) * (1u)), 0u ^ (_GLF_IDENTITY(1u, ((1u << _GLF_IDENTITY(uint(3u), uint(3u))) >> _GLF_IDENTITY(uint(3u), _GLF_IDENTITY(uint(3u), (_GLF_IDENTITY(uint(3u), 0u ^ (_GLF_IDENTITY(uint(3u), 1u * (uint(3u)))))) | 0u))) * (1u))))) << 0u, min((1u) << 0u, _GLF_IDENTITY((_GLF_IDENTITY(1u, clamp(1u, 1u, _GLF_IDENTITY(1u, (1u) >> 0u)))) << 0u, ((1u) << 0u) / 1u)))))), (_GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, ~ (~ (1u)))) | (_GLF_IDENTITY(1u, _GLF_IDENTITY(_GLF_IDENTITY((1u), 0u + (_GLF_IDENTITY((1u), ((1u)) | uint(_GLF_ZERO(0.0, injectionSwitch.x))))) << 0u, min((1u) << 0u, _GLF_IDENTITY((1u) << 0u, ((1u) << 0u) / 1u))))))) | (_GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, ~ (~ (1u)))) | (_GLF_IDENTITY(1u, _GLF_IDENTITY((1u) << 0u, min((1u) << 0u, _GLF_IDENTITY(_GLF_IDENTITY((1u), ((1u)) ^ 0u) << 0u, ((1u) << 0u) / 1u)))))))))))))), min(clamp(workgroup_size * workgroup_id, workgroup_size * workgroup_id, _GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, 0u + (workgroup_size)) * workgroup_id, uint(uvec2(workgroup_size * workgroup_id, _GLF_IDENTITY(_GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, ~ (~ _GLF_IDENTITY((1u), _GLF_IDENTITY(uint(_GLF_ZERO(0.0, injectionSwitch.x)) | ((1u)), max(uint(_GLF_ZERO(0.0, injectionSwitch.x)) | ((1u)), _GLF_IDENTITY(uint(_GLF_ZERO(0.0, injectionSwitch.x)) | ((1u)), min(uint(_GLF_ZERO(0.0, injectionSwitch.x)) | ((1u)), uint(_GLF_ZERO(0.0, injectionSwitch.x)) | ((1u)))))))))) | (_GLF_IDENTITY(1u, _GLF_IDENTITY((_GLF_IDENTITY(1u, _GLF_IDENTITY(((1u << _GLF_IDENTITY(uint(3u), uint(3u))) >> _GLF_IDENTITY(uint(3u), _GLF_IDENTITY(uint(3u), (_GLF_IDENTITY(uint(3u), 0u ^ (_GLF_IDENTITY(uint(3u), 1u * (uint(3u)))))) | 0u))) * (1u), (_GLF_IDENTITY(((1u << _GLF_IDENTITY(uint(3u), uint(3u))) >> _GLF_IDENTITY(uint(3u), _GLF_IDENTITY(uint(3u), (_GLF_IDENTITY(uint(3u), 0u ^ (_GLF_IDENTITY(uint(3u), 1u * (uint(3u)))))) | 0u))) * (1u), (((1u << _GLF_IDENTITY(uint(3u), uint(3u))) >> _GLF_IDENTITY(uint(3u), _GLF_IDENTITY(uint(3u), (_GLF_IDENTITY(uint(3u), 0u ^ (_GLF_IDENTITY(uint(3u), 1u * (uint(3u)))))) | 0u))) * (1u)) - (0u | 0u))) / 1u))) << 0u, min((1u) << 0u, _GLF_IDENTITY((1u) << 0u, ((1u) << 0u) / 1u)))))), (_GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, ~ (~ (1u)))) | (_GLF_IDENTITY(1u, _GLF_IDENTITY(_GLF_IDENTITY((1u), 0u + (_GLF_IDENTITY((1u), ((1u)) | uint(_GLF_ZERO(0.0, injectionSwitch.x))))) << 0u, min((1u) << 0u, _GLF_IDENTITY((1u) << 0u, ((1u) << 0u) / _GLF_IDENTITY(1u, (true ? _GLF_IDENTITY(1u, (1u) | uint(_GLF_ZERO(0.0, injectionSwitch.x))) : _GLF_FUZZED(workgroup_size)))))))))) | (_GLF_IDENTITY(_GLF_IDENTITY(1u, 1u * (1u)), (_GLF_IDENTITY(1u, ~ (~ (1u)))) | (_GLF_IDENTITY(1u, _GLF_IDENTITY((1u) << 0u, min((_GLF_IDENTITY(1u, (1u) | 0u)) << _GLF_IDENTITY(0u, (0u) ^ 0u), _GLF_IDENTITY(_GLF_IDENTITY((1u), ((1u)) ^ 0u) << 0u, ((1u) << 0u) / _GLF_IDENTITY(1u, max(1u, 1u)))))))))))))), clamp(workgroup_size * _GLF_IDENTITY(workgroup_id, uint(uvec3(workgroup_id, 1u, 0u))), workgroup_size * workgroup_id, _GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, 0u + (workgroup_size)) * workgroup_id, uint(uvec2(workgroup_size * workgroup_id, _GLF_IDENTITY(_GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, ~ (~ _GLF_IDENTITY((1u), _GLF_IDENTITY(uint(_GLF_ZERO(0.0, injectionSwitch.x)) | ((1u)), max(uint(_GLF_ZERO(0.0, injectionSwitch.x)) | ((1u)), _GLF_IDENTITY(uint(_GLF_ZERO(0.0, injectionSwitch.x)) | ((1u)), min(uint(_GLF_ZERO(0.0, injectionSwitch.x)) | ((1u)), uint(_GLF_ZERO(0.0, injectionSwitch.x)) | ((1u)))))))))) | (_GLF_IDENTITY(1u, _GLF_IDENTITY((_GLF_IDENTITY(1u, (_GLF_IDENTITY((1u << _GLF_IDENTITY(uint(3u), uint(3u))) >> _GLF_IDENTITY(uint(3u), _GLF_IDENTITY(uint(3u), (_GLF_IDENTITY(uint(3u), 0u ^ (_GLF_IDENTITY(uint(3u), 1u * (uint(3u)))))) | 0u)), ((1u << _GLF_IDENTITY(uint(3u), uint(3u))) >> _GLF_IDENTITY(uint(3u), _GLF_IDENTITY(uint(3u), (_GLF_IDENTITY(uint(3u), 0u ^ (_GLF_IDENTITY(uint(3u), 1u * (uint(3u)))))) | 0u))) ^ 0u)) * (1u))) << 0u, min((1u) << 0u, _GLF_IDENTITY((1u) << 0u, ((1u) << 0u) / 1u)))))), (_GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, ~ (~ (1u)))) | (_GLF_IDENTITY(1u, _GLF_IDENTITY(_GLF_IDENTITY((1u), 0u + (_GLF_IDENTITY((1u), ((1u)) | uint(_GLF_ZERO(0.0, injectionSwitch.x))))) << 0u, min((1u) << 0u, _GLF_IDENTITY((1u) << 0u, ((1u) << 0u) / 1u))))))) | (_GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, ~ (~ (1u)))) | (_GLF_IDENTITY(1u, _GLF_IDENTITY((1u) << 0u, min((1u) << 0u, _GLF_IDENTITY(_GLF_IDENTITY((1u), ((1u)) ^ 0u) << 0u, ((1u) << _GLF_IDENTITY(0u, (false ? _GLF_FUZZED(num_workgroup) : 0u))) / 1u)))))))))))))));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y))))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
  }
 uint virtual_gid = _GLF_IDENTITY(workgroup_base, _GLF_IDENTITY(0u ^ (workgroup_base), clamp(_GLF_IDENTITY(_GLF_IDENTITY(0u, min(0u, _GLF_IDENTITY(0u, 0u | (0u)))) ^ (workgroup_base), uint(uint(_GLF_IDENTITY(0u ^ (_GLF_IDENTITY(workgroup_base, (workgroup_base) - 0u)), clamp(0u ^ (workgroup_base), 0u ^ (workgroup_base), 0u ^ (workgroup_base)))))), _GLF_IDENTITY(0u ^ (workgroup_base), min(0u ^ _GLF_IDENTITY(_GLF_IDENTITY((workgroup_base), _GLF_IDENTITY(uint(uint(_GLF_IDENTITY((workgroup_base), ((workgroup_base)) - 0u))), max(uint(_GLF_IDENTITY(uint(_GLF_IDENTITY((workgroup_base), ((workgroup_base)) - _GLF_IDENTITY(0u, (0u) | (0u)))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(uint(_GLF_IDENTITY((workgroup_base), ((workgroup_base)) - 0u)), (uint(_GLF_IDENTITY((workgroup_base), (_GLF_IDENTITY((workgroup_base), max(_GLF_IDENTITY((workgroup_base), max((workgroup_base), (workgroup_base))), (workgroup_base)))) - 0u))) ^ 0u)), (false ? _GLF_FUZZED(_GLF_IDENTITY(subgroup_size, ~ (_GLF_IDENTITY(~ (subgroup_size), (0u >> _GLF_IDENTITY(uint(4u), uint(4u))) + (~ (subgroup_size)))))) : ~ (_GLF_IDENTITY(uint(_GLF_IDENTITY((workgroup_base), ((workgroup_base)) - 0u)), (uint(_GLF_IDENTITY((_GLF_IDENTITY(workgroup_base, _GLF_IDENTITY(min(workgroup_base, _GLF_IDENTITY(workgroup_base, max(workgroup_base, _GLF_IDENTITY(workgroup_base, max(workgroup_base, workgroup_base))))), (min(workgroup_base, _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, uint(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(workgroup_base, (workgroup_base) + 0u))), max(workgroup_base, _GLF_IDENTITY(workgroup_base, max(_GLF_IDENTITY(workgroup_base, clamp(workgroup_base, workgroup_base, workgroup_base)), workgroup_base)))))) + 0u))), ((workgroup_base)) - 0u))) ^ 0u))))))), uint(uint(_GLF_IDENTITY((workgroup_base), ((workgroup_base)) - 0u)))))), (_GLF_IDENTITY(_GLF_IDENTITY((workgroup_base), _GLF_IDENTITY(_GLF_IDENTITY(uint(uint(_GLF_IDENTITY((workgroup_base), ((workgroup_base)) - _GLF_IDENTITY(0u, (0u) - 0u)))), max(uint(_GLF_IDENTITY(uint(_GLF_IDENTITY((workgroup_base), ((workgroup_base)) - _GLF_IDENTITY(0u, (0u) | (0u)))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(uint(_GLF_IDENTITY((workgroup_base), ((workgroup_base)) - 0u)), (uint(_GLF_IDENTITY((workgroup_base), (_GLF_IDENTITY((workgroup_base), max(_GLF_IDENTITY((workgroup_base), max((workgroup_base), (workgroup_base))), (workgroup_base)))) - 0u))) ^ 0u)), (false ? _GLF_FUZZED(subgroup_size) : ~ (_GLF_IDENTITY(uint(_GLF_IDENTITY((workgroup_base), ((workgroup_base)) - 0u)), (uint(_GLF_IDENTITY((_GLF_IDENTITY(workgroup_base, min(workgroup_base, _GLF_IDENTITY(workgroup_base, max(workgroup_base, _GLF_IDENTITY(workgroup_base, max(workgroup_base, workgroup_base))))))), _GLF_IDENTITY(((workgroup_base)) - 0u, uint(uvec4(_GLF_IDENTITY(((workgroup_base)) - 0u, (((workgroup_base)) - 0u) - 0u), (1u | 1u), 1u, 1u)))))) ^ 0u))))))), uint(uint(_GLF_IDENTITY((workgroup_base), ((workgroup_base)) - 0u))))), (_GLF_IDENTITY(uint(uint(_GLF_IDENTITY((workgroup_base), ((workgroup_base)) - _GLF_IDENTITY(0u, (0u) - 0u)))), max(uint(_GLF_IDENTITY(uint(_GLF_IDENTITY((workgroup_base), ((workgroup_base)) - _GLF_IDENTITY(0u, (0u) | (0u)))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(uint(_GLF_IDENTITY((workgroup_base), ((workgroup_base)) - 0u)), (_GLF_IDENTITY(uint(_GLF_IDENTITY((workgroup_base), (_GLF_IDENTITY((workgroup_base), max(_GLF_IDENTITY((workgroup_base), max((workgroup_base), _GLF_IDENTITY((workgroup_base), max(_GLF_IDENTITY((workgroup_base), uint(uvec2((workgroup_base), 0u))), (workgroup_base))))), (workgroup_base)))) - 0u)), clamp(uint(_GLF_IDENTITY((workgroup_base), (_GLF_IDENTITY((workgroup_base), max(_GLF_IDENTITY((workgroup_base), max((workgroup_base), _GLF_IDENTITY((workgroup_base), max(_GLF_IDENTITY((workgroup_base), uint(uvec2((workgroup_base), 0u))), (workgroup_base))))), (workgroup_base)))) - 0u)), uint(_GLF_IDENTITY((workgroup_base), (_GLF_IDENTITY((workgroup_base), max(_GLF_IDENTITY((workgroup_base), max((workgroup_base), _GLF_IDENTITY((workgroup_base), max(_GLF_IDENTITY((workgroup_base), uint(uvec2((workgroup_base), 0u))), (workgroup_base))))), (workgroup_base)))) - 0u)), _GLF_IDENTITY(uint(_GLF_IDENTITY((workgroup_base), (_GLF_IDENTITY((workgroup_base), max(_GLF_IDENTITY((workgroup_base), max((workgroup_base), _GLF_IDENTITY((workgroup_base), max(_GLF_IDENTITY((workgroup_base), uint(uvec2((workgroup_base), 0u))), (workgroup_base))))), (workgroup_base)))) - 0u)), 0u ^ (uint(_GLF_IDENTITY((workgroup_base), (_GLF_IDENTITY((workgroup_base), max(_GLF_IDENTITY((workgroup_base), max((workgroup_base), _GLF_IDENTITY((workgroup_base), max(_GLF_IDENTITY((workgroup_base), uint(uvec2((workgroup_base), 0u))), (workgroup_base))))), (workgroup_base)))) - 0u))))))) ^ 0u)), (false ? _GLF_FUZZED(subgroup_size) : ~ (_GLF_IDENTITY(uint(_GLF_IDENTITY((workgroup_base), ((workgroup_base)) - 0u)), (uint(_GLF_IDENTITY((_GLF_IDENTITY(workgroup_base, min(workgroup_base, _GLF_IDENTITY(workgroup_base, max(workgroup_base, _GLF_IDENTITY(workgroup_base, max(workgroup_base, workgroup_base))))))), _GLF_IDENTITY(((workgroup_base)) - 0u, uint(uvec4(_GLF_IDENTITY(((workgroup_base)) - 0u, (((workgroup_base)) - 0u) - 0u), _GLF_IDENTITY((1u | 1u), (true ? (1u | 1u) : _GLF_FUZZED(subgroup_local_id))), _GLF_IDENTITY(1u, (1u) / 1u), 1u)))))) ^ 0u))))))), uint(uint(_GLF_IDENTITY((workgroup_base), ((workgroup_base)) - 0u)))))) - 0u)), 0u | (_GLF_IDENTITY((workgroup_base), _GLF_IDENTITY(uint(uint(_GLF_IDENTITY(_GLF_IDENTITY((workgroup_base), (_GLF_IDENTITY((workgroup_base), ((1u << _GLF_IDENTITY(uint(6u), uint(6u))) >> _GLF_IDENTITY(uint(6u), uint(6u))) * ((workgroup_base)))) * 1u), ((workgroup_base)) - 0u))), max(uint(_GLF_IDENTITY(uint(_GLF_IDENTITY((workgroup_base), ((workgroup_base)) - _GLF_IDENTITY(0u, (0u) | (0u)))), ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (_GLF_IDENTITY(uint(_GLF_IDENTITY((workgroup_base), ((workgroup_base)) - 0u)), (uint(_GLF_IDENTITY((workgroup_base), (_GLF_IDENTITY((workgroup_base), max(_GLF_IDENTITY((workgroup_base), max((workgroup_base), (workgroup_base))), (workgroup_base)))) - 0u))) ^ 0u)), 1u * (~ (_GLF_IDENTITY(uint(_GLF_IDENTITY((_GLF_IDENTITY(workgroup_base, (workgroup_base) | 0u)), _GLF_IDENTITY(_GLF_IDENTITY(((workgroup_base)) - 0u, max(_GLF_IDENTITY(((workgroup_base)) - 0u, uint(uint(((workgroup_base)) - 0u))), ((workgroup_base)) - 0u)), _GLF_IDENTITY(uint(uvec4(_GLF_IDENTITY(((workgroup_base)) - 0u, max(_GLF_IDENTITY(((workgroup_base)) - 0u, uint(uint(((workgroup_base)) - 0u))), ((workgroup_base)) - 0u)), 1u, 1u, 1u)), (true ? uint(uvec4(_GLF_IDENTITY(((workgroup_base)) - 0u, max(_GLF_IDENTITY(((workgroup_base)) - 0u, uint(uint(((workgroup_base)) - 0u))), ((workgroup_base)) - 0u)), 1u, 1u, 1u)) : _GLF_FUZZED(subgroup_local_id)))))), (uint(_GLF_IDENTITY((workgroup_base), (_GLF_IDENTITY((workgroup_base), max(_GLF_IDENTITY((workgroup_base), max((workgroup_base), (workgroup_base))), (workgroup_base)))) - 0u))) ^ 0u)))), (false ? _GLF_FUZZED(subgroup_size) : ~ (_GLF_IDENTITY(uint(_GLF_IDENTITY((workgroup_base), ((workgroup_base)) - 0u)), (uint(_GLF_IDENTITY((_GLF_IDENTITY(workgroup_base, min(workgroup_base, _GLF_IDENTITY(workgroup_base, max(workgroup_base, _GLF_IDENTITY(workgroup_base, max(workgroup_base, workgroup_base))))))), ((workgroup_base)) - 0u))) ^ _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, ~ (~ (_GLF_IDENTITY(0u, (0u) - 0u))))) >> _GLF_IDENTITY((_GLF_IDENTITY(0u | 0u, (_GLF_IDENTITY(0u | 0u, (0u | 0u) * 1u)) >> 0u)), clamp((_GLF_IDENTITY(0u | 0u, (_GLF_IDENTITY(0u | 0u, (0u | 0u) * 1u)) >> 0u)), (_GLF_IDENTITY(0u | 0u, (_GLF_IDENTITY(0u | 0u, (0u | 0u) * 1u)) >> 0u)), (_GLF_IDENTITY(0u | 0u, (_GLF_IDENTITY(0u | 0u, (0u | 0u) * 1u)) >> 0u)))))))))))), uint(uint(_GLF_IDENTITY((workgroup_base), ((workgroup_base)) - 0u))))))))) | 0u), 0u ^ (workgroup_base))), _GLF_IDENTITY(0u, (0u) | (_GLF_IDENTITY(0u, max(0u, 0u)))) ^ (workgroup_base)))) + _GLF_IDENTITY(subgroup_id, (subgroup_id) | 0u) * subgroup_size + subgroup_local_id;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         return;
        }
       barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        return;
       return;
      }
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     return;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false))
    barrier();
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))))))))))
    return;
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(false, ! (! (false)))))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), false || (false)), ! (! (false)))))))
      barrier();
     return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
      return;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         barrier();
        }
       barrier();
       if(_GLF_DEAD(false))
        return;
      }
     return;
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
      barrier();
     return;
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    return;
   return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0), _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)))), (injectionSwitch.x < injectionSwitch.y) || false))), _GLF_IDENTITY(bool(bvec3(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)), _GLF_IDENTITY(false || (bool(bvec3(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))), (_GLF_IDENTITY(_GLF_IDENTITY(false || (bool(bvec3(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch)[1], max((injectionSwitch)[1], (injectionSwitch)[1]))), vec2(_GLF_FUZZED(177.348), _GLF_FUZZED(-5.0)), bvec2(false, false))).x < injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))), true && (false || (bool(bvec3(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch)[1], max((injectionSwitch)[1], (injectionSwitch)[1]))), vec2(_GLF_FUZZED(177.348), _GLF_FUZZED(-5.0)), bvec2(false, false))).x < injectionSwitch.y)), _GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || ((injectionSwitch.x < injectionSwitch.y)))), false))))), true && (false || (bool(bvec3(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) < injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)))))) && true))) && (false)), _GLF_IDENTITY(! (! (false)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (! (! (false)))))))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true))))
  barrier();
 uint next_virtual_gid = workgroup_base + subgroup_id * subgroup_size + _GLF_IDENTITY(((subgroup_local_id + 1) % _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(clamp(subgroup_size, subgroup_size, subgroup_size), uint(uvec3(clamp(subgroup_size, subgroup_size, subgroup_size), 0u, 0u)))), (_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec4(subgroup_size, 1u, 1u, 0u), (uvec4(subgroup_size, 1u, 1u, 0u)) * uvec4(1u, 1u, 1u, 1u))), (_GLF_IDENTITY(uint(_GLF_IDENTITY(uvec4(subgroup_size, 1u, 1u, 0u), (uvec4(_GLF_IDENTITY(subgroup_size, (subgroup_size) + 0u), 1u, 1u, _GLF_IDENTITY(0u, ~ (~ (0u))))) * uvec4(1u, 1u, 1u, 1u))), ~ (~ (uint(_GLF_IDENTITY(uvec4(subgroup_size, 1u, 1u, 0u), (_GLF_IDENTITY(uvec4(subgroup_size, 1u, 1u, 0u), (uvec4(subgroup_size, 1u, 1u, 0u)) + uvec4(0u, 0u, 0u, 0u))) * uvec4(1u, 1u, 1u, 1u))))))) ^ 0u))) >> (0u >> _GLF_IDENTITY(uint(0u), uint(0u)))), 0u | (_GLF_IDENTITY(subgroup_size, (subgroup_size) >> (0u >> _GLF_IDENTITY(uint(_GLF_IDENTITY(_GLF_IDENTITY(0u, (true ? _GLF_IDENTITY(0u, (0u) | (0u)) : _GLF_FUZZED(subgroup_size))), uint(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(0u, (true ? _GLF_IDENTITY(0u, (0u) | (0u)) : _GLF_FUZZED(subgroup_size))), uint(_GLF_ZERO(0.0, injectionSwitch.x))), clamp(uvec2(_GLF_IDENTITY(0u, (true ? _GLF_IDENTITY(0u, (0u) | (0u)) : _GLF_FUZZED(subgroup_size))), uint(_GLF_ZERO(0.0, injectionSwitch.x))), uvec2(_GLF_IDENTITY(0u, (true ? _GLF_IDENTITY(0u, (0u) | (0u)) : _GLF_FUZZED(subgroup_size))), uint(_GLF_ZERO(0.0, injectionSwitch.x))), uvec2(_GLF_IDENTITY(0u, (true ? _GLF_IDENTITY(0u, (0u) | (0u)) : _GLF_FUZZED(subgroup_size))), uint(_GLF_ZERO(0.0, injectionSwitch.x)))))))), uint(_GLF_IDENTITY(0u, uint(uvec4(0u, 1u, 0u, uint(_GLF_ZERO(0.0, injectionSwitch.x)))))))))))), (((subgroup_local_id + 1) % _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(clamp(subgroup_size, subgroup_size, subgroup_size), uint(uvec3(clamp(subgroup_size, subgroup_size, subgroup_size), 0u, 0u)))), (_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec4(subgroup_size, 1u, 1u, 0u), (uvec4(subgroup_size, 1u, 1u, 0u)) * uvec4(1u, 1u, 1u, 1u))), (_GLF_IDENTITY(uint(_GLF_IDENTITY(uvec4(subgroup_size, 1u, 1u, 0u), (uvec4(_GLF_IDENTITY(subgroup_size, (subgroup_size) + 0u), 1u, 1u, _GLF_IDENTITY(0u, ~ (~ (0u))))) * uvec4(1u, 1u, 1u, 1u))), ~ (~ (uint(_GLF_IDENTITY(uvec4(subgroup_size, 1u, 1u, 0u), (_GLF_IDENTITY(uvec4(subgroup_size, 1u, 1u, 0u), (uvec4(subgroup_size, 1u, 1u, 0u)) + uvec4(0u, 0u, 0u, 0u))) * uvec4(1u, 1u, 1u, 1u))))))) ^ 0u))) >> (0u >> _GLF_IDENTITY(uint(0u), uint(0u)))), 0u | (_GLF_IDENTITY(subgroup_size, (subgroup_size) >> (0u >> _GLF_IDENTITY(uint(_GLF_IDENTITY(_GLF_IDENTITY(0u, (true ? _GLF_IDENTITY(0u, (0u) | (0u)) : _GLF_FUZZED(subgroup_size))), uint(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(0u, (true ? _GLF_IDENTITY(0u, (0u) | (0u)) : _GLF_FUZZED(subgroup_size))), uint(_GLF_ZERO(0.0, injectionSwitch.x))), clamp(uvec2(_GLF_IDENTITY(0u, (true ? _GLF_IDENTITY(0u, (0u) | (0u)) : _GLF_FUZZED(subgroup_size))), uint(_GLF_ZERO(0.0, injectionSwitch.x))), uvec2(_GLF_IDENTITY(0u, (true ? _GLF_IDENTITY(0u, (0u) | (0u)) : _GLF_FUZZED(subgroup_size))), uint(_GLF_ZERO(0.0, injectionSwitch.x))), uvec2(_GLF_IDENTITY(0u, (true ? _GLF_IDENTITY(0u, (0u) | (0u)) : _GLF_FUZZED(subgroup_size))), uint(_GLF_ZERO(0.0, injectionSwitch.x)))))))), uint(_GLF_IDENTITY(0u, uint(uvec4(0u, 1u, 0u, uint(_GLF_ZERO(0.0, injectionSwitch.x))))))))))))) << 0u);
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (injectionSwitch) + sqrt(vec2(0.0, 0.0))).y)), true, true)))))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch)[1], min((injectionSwitch)[1], (injectionSwitch)[1]))), vec2(_GLF_FUZZED(-36.97), _GLF_FUZZED(((+ -9.8) * 518.195))), bvec2(false, false))).x > _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(3721.7344), _GLF_FUZZED((-3.6 / -0.0))), bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))).y))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 atomicStore(buf[virtual_gid], _GLF_IDENTITY(uint(_GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(-15475)))), (uint(1)) - 0u), 4, 64, 4);
 if(subgroup_local_id + 1 < subgroup_size)
  {
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), bool(bvec3(! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), true, false)))))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
   int i = 0;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       return;
      }
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))))))))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     return;
    }
   if(_GLF_DEAD(false))
    barrier();
   atomicStore(buf[next_virtual_gid], uint(2), 4, 64, _GLF_IDENTITY(4, (true ? _GLF_IDENTITY(4, (4) - 0) : _GLF_FUZZED(4041))));
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       return;
      }
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))))) || false))
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec4(_GLF_DEAD(false), false, true, true)), (bool(bvec4(_GLF_DEAD(false), false, true, true))) && true)))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         return;
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         return;
        }
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     return;
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
    return;
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   atomicStore(buf[next_virtual_gid], uint(2), _GLF_IDENTITY(4, 0 | (4)), 64, 4);
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec2(false, true)))) && true), (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y)), true, true), bvec3(_GLF_IDENTITY(bvec3(bvec3(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y)), true, true)), bvec3(bvec3(bvec3(bvec3(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y)), true, true)))))))))))))
      return;
     return;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))))))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       return;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
       return;
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(max(injectionSwitch.y, injectionSwitch.y), (_GLF_IDENTITY(max(injectionSwitch.y, injectionSwitch.y), max(max(injectionSwitch.y, injectionSwitch.y), max(injectionSwitch.y, injectionSwitch.y)))) - 0.0))))), ! (! (_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)), (bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))) || false)))))))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       return;
      }
    }
   if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, true, false)))))
      barrier();
     return;
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], (_GLF_IDENTITY(injectionSwitch[0], max(injectionSwitch[0], injectionSwitch[0]))) - 0.0), injectionSwitch[1])).x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       return;
       if(_GLF_DEAD(false))
        return;
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      return;
    }
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
