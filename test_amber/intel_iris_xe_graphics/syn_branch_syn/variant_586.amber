#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uvec2 GLF_merged2_0_1_17_1_1_12subgroup_local_idworkgroup_id;
 if(_GLF_DEAD(false))
  return;
 uvec4 GLF_merged2_0_3_79_3_1_16GLF_merged3_0_1_16_1_1_17_2_1_14next_virtual_gidsubgroup_local_idworkgroup_sizenext_virtual_gid;
 uvec4 GLF_merged2_0_3_79_3_1_11GLF_merged3_0_1_16_1_1_17_2_1_14next_virtual_gidsubgroup_local_idworkgroup_sizesubgroup_id;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))))
    return;
  }
 else
  {
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   do
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, float(float(injectionSwitch.x))))) > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y)))))))))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
            {
             barrier();
            }
          }
         for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), clamp(_GLF_IDENTITY(int(0), clamp(int(0), int(0), int(0))), int(0), int(0))))) >> _GLF_IDENTITY(int(0), int(0))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, vec2(mat2x4(injectionSwitch, 1.0, _GLF_IDENTITY(_GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(7646.9835))), min(_GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(7646.9835))), _GLF_IDENTITY(0.0, (_GLF_IDENTITY(true, (true) || false) ? 0.0 : _GLF_FUZZED(7646.9835))))), 1.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(0.0, _GLF_IDENTITY(1.0, (false ? _GLF_IDENTITY(_GLF_FUZZED(cosh(mix(-53.56, -0.0, -216.279))), float(_GLF_IDENTITY(mat4x3(_GLF_IDENTITY(_GLF_FUZZED(cosh(mix(-53.56, -0.0, -216.279))), (_GLF_FUZZED(cosh(mix(-53.56, -0.0, -216.279)))) / 1.0), 0.0, 1.0, exp(0.0), log(1.0), 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, round(length(normalize(1.0)))), transpose(transpose(mat4x3(_GLF_IDENTITY(_GLF_FUZZED(cosh(mix(-53.56, -0.0, -216.279))), (_GLF_FUZZED(cosh(mix(-53.56, -0.0, -216.279)))) / 1.0), 0.0, 1.0, exp(0.0), log(1.0), 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, round(length(normalize(1.0))))))))) : 1.0)))), _GLF_IDENTITY(_GLF_IDENTITY(dot(vec2(1.0, 0.0), _GLF_IDENTITY(vec2(0.0, 1.0), (_GLF_IDENTITY(vec2(0.0, 1.0), clamp(vec2(0.0, 1.0), vec2(0.0, 1.0), vec2(0.0, 1.0)))) - vec2(0.0, 0.0))), (dot(vec2(1.0, _GLF_IDENTITY(0.0, max(_GLF_IDENTITY(0.0, max(0.0, 0.0)), _GLF_IDENTITY(0.0, min(0.0, _GLF_IDENTITY(0.0, min(0.0, 0.0))))))), _GLF_IDENTITY(vec2(0.0, 1.0), clamp(vec2(_GLF_IDENTITY(0.0, min(0.0, 0.0)), 1.0), vec2(0.0, 1.0), _GLF_IDENTITY(vec2(0.0, 1.0), _GLF_IDENTITY((vec2(0.0, 1.0)) * mat2(1.0), clamp((vec2(0.0, 1.0)) * mat2(1.0), (vec2(0.0, _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-5498.3520))))) * mat2(1.0), (vec2(0.0, 1.0)) * mat2(1.0)))))))) - 0.0), (dot(vec2(1.0, 0.0), _GLF_IDENTITY(vec2(_GLF_IDENTITY(0.0, (0.0) - 0.0), 1.0), _GLF_IDENTITY((vec2(0.0, 1.0)) * mat2(1.0), mix(vec2(_GLF_FUZZED(4.8), _GLF_FUZZED(196.365)), vec2(((vec2(0.0, 1.0)) * mat2(1.0))[0], ((vec2(0.0, 1.0)) * mat2(_GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, mix(float(_GLF_IDENTITY(1.0, (1.0) / 1.0)), float(_GLF_FUZZED((-3363.7620 / 23.43))), bool(false))), _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(60.98) : 1.0))))))[1]), bvec2(true, true)))))) + 0.0)), 1.0, 1.0))), injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)))).y))))
            {
             if(_GLF_DEAD(false))
              return;
            }
           else
            {
             for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
              {
               if(_GLF_DEAD(false))
                return;
              }
             if(_GLF_DEAD(false))
              continue;
             if(_GLF_DEAD(false))
              barrier();
            }
          }
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = _GLF_IDENTITY(0, 1 * (0)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(false))
              return;
            }
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             return;
            }
          }
         return;
        }
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), ! (_GLF_IDENTITY(! (false), (! (false)) || false)))) && true)))
        return;
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))));
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   return;
  }
 uvec2 GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_base;
 uvec3 GLF_merged3_0_1_16_1_1_17_2_1_14next_virtual_gidsubgroup_local_idworkgroup_size;
 GLF_merged2_0_3_79_3_1_16GLF_merged3_0_1_16_1_1_17_2_1_14next_virtual_gidsubgroup_local_idworkgroup_sizenext_virtual_gid.xyz = GLF_merged3_0_1_16_1_1_17_2_1_14next_virtual_gidsubgroup_local_idworkgroup_size;
 do
  {
   _GLF_IDENTITY(_GLF_IDENTITY(GLF_merged2_0_3_79_3_1_11GLF_merged3_0_1_16_1_1_17_2_1_14next_virtual_gidsubgroup_local_idworkgroup_sizesubgroup_id.xyz = GLF_merged2_0_3_79_3_1_16GLF_merged3_0_1_16_1_1_17_2_1_14next_virtual_gidsubgroup_local_idworkgroup_sizenext_virtual_gid.xyz, (_GLF_IDENTITY(GLF_merged2_0_3_79_3_1_11GLF_merged3_0_1_16_1_1_17_2_1_14next_virtual_gidsubgroup_local_idworkgroup_sizesubgroup_id.xyz = GLF_merged2_0_3_79_3_1_16GLF_merged3_0_1_16_1_1_17_2_1_14next_virtual_gidsubgroup_local_idworkgroup_sizenext_virtual_gid.xyz, ~ (~ (GLF_merged2_0_3_79_3_1_11GLF_merged3_0_1_16_1_1_17_2_1_14next_virtual_gidsubgroup_local_idworkgroup_sizesubgroup_id.xyz = GLF_merged2_0_3_79_3_1_16GLF_merged3_0_1_16_1_1_17_2_1_14next_virtual_gidsubgroup_local_idworkgroup_sizenext_virtual_gid.xyz)))) + uvec3(0u, 0u, 0u)), (_GLF_TRUE(true, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (injectionSwitch.x < injectionSwitch.y) && true)), ((_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (injectionSwitch.x < injectionSwitch.y) && true))) && _GLF_IDENTITY(true, false || (true)))) ? GLF_merged2_0_3_79_3_1_11GLF_merged3_0_1_16_1_1_17_2_1_14next_virtual_gidsubgroup_local_idworkgroup_sizesubgroup_id.xyz = GLF_merged2_0_3_79_3_1_16GLF_merged3_0_1_16_1_1_17_2_1_14next_virtual_gidsubgroup_local_idworkgroup_sizenext_virtual_gid.xyz : _GLF_FUZZED(uvec3(55135u, _GLF_IDENTITY(135711u, (135711u) >> 0u), _GLF_IDENTITY(123621u, ~ (~ (_GLF_IDENTITY(123621u, _GLF_IDENTITY((123621u), _GLF_IDENTITY(((123621u)) | ((123621u)), (true ? (_GLF_IDENTITY((123621u), 0u | (_GLF_IDENTITY((123621u), ((123621u)) | ((123621u)))))) | ((123621u)) : _GLF_FUZZED(89273u)))) / 1u))))))));
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
  {
   for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > (((-50285 - -89387) & 0) >> _GLF_IDENTITY(int(8), int(8)))); _injected_loop_counter --)
    {
     barrier();
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    {
     do
      {
       if(_GLF_DEAD(false))
        return;
      }
     while(_GLF_WRAPPED_LOOP(false));
     do
      {
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         return;
        }
       else
        {
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        return;
      }
    }
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), bool(bvec4(false, false, true, _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (true)), _GLF_IDENTITY(false || (true), (_GLF_IDENTITY(false || (true), true && (_GLF_IDENTITY(false || (true), bool(bool(false || (true))))))) && _GLF_TRUE(_GLF_IDENTITY(true, bool(bvec3(true, true, false))), (injectionSwitch.x < injectionSwitch.y))))), bool(bvec2(! (_GLF_IDENTITY(_GLF_IDENTITY(true, false || (true)), _GLF_IDENTITY((_GLF_IDENTITY(true, false || (true))) || false, bool(bvec3((_GLF_IDENTITY(true, false || (true))) || false, true, true))))), true))))))))))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) || false)))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     else
      {
      }
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec2(false, false))), (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_IDENTITY(_GLF_FUZZED(asinh(vec2(3297.5226))), (_GLF_FUZZED(asinh(vec2(3297.5226)))) * mat2(1.0)) : injectionSwitch)).x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
           barrier();
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, false)))))
              {
               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                }
               else
                {
                 return;
                }
              }
             return;
            }
           else
            {
            }
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
            }
           else
            {
            }
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
      }
     else
      {
      }
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       for(int _injected_loop_counter = (1 | 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            continue;
           return;
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), ! (! (_GLF_IDENTITY(false, (false) && _GLF_IDENTITY(true, bool(bool(true)))))))))
            return;
          }
         else
          {
           if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY((_GLF_DEAD(false)) || false, ((_GLF_DEAD(false)) || false) && true)))
            return;
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_DEAD(false))
            barrier();
          }
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0), injectionSwitch.x)) > injectionSwitch.y))))
        return;
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
    }
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) || false)))
      barrier();
    }
  }
 else
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), _GLF_IDENTITY((false), true && (_GLF_IDENTITY((false), bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY((false), bool(bool((false)))), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY((false), bool(bool((false)))), true, true, false)), (bool(bvec4(_GLF_IDENTITY((false), bool(bool((false)))), true, true, false))) || false)), true, true, true))))) && true)), (_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((false), true && (_GLF_IDENTITY((false), bool(bvec4(_GLF_IDENTITY((false), bool(bool((false)))), true, true, true))))) && true))) || false))
      return;
    }
   else
    {
    }
  }
 for(int _injected_loop_counter = (0 ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(1, max(1, 1))); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(bool(_GLF_DEAD(false)), bool(bvec3(_GLF_IDENTITY(bool(_GLF_DEAD(false)), (bool(_GLF_DEAD(false))) || false), true, false))))))
  barrier();
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(false))
  return;
 GLF_merged2_0_3_79_3_1_11GLF_merged3_0_1_16_1_1_17_2_1_14next_virtual_gidsubgroup_local_idworkgroup_sizesubgroup_id.w = subgroup_id;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y)), _GLF_IDENTITY(max(_GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y, _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y)), _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), injectionSwitch)).y))), float(mat4x3(max(_GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y, _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y)), _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), injectionSwitch)).y))), determinant(mat4(1.0, determinant(mat2(0.0, 0.0, 0.0, 0.0)), 0.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(dot(vec4(1.0, 0.0, 0.0, 1.0), vec4(0.0, 1.0, 1.0, 0.0)), dot(vec4(1.0, 0.0, 0.0, 1.0), vec4(0.0, 1.0, 1.0, 0.0))), 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0)), round(length(normalize(vec2(1.0, 1.0)))), 0.0, sin(0.0), 1.0, 1.0, determinant(mat4(0.0, 0.0, 0.0, sqrt(0.0), 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0)), 1.0, cos(0.0), 0.0, 0.0))))))))
  {
   for(int _injected_loop_counter = _GLF_IDENTITY(0, (0) / 1); _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 & (1 | _GLF_IDENTITY(1, (1) >> (0 ^ 0))))); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      continue;
     for(int _injected_loop_counter = (_GLF_IDENTITY(0, (0) | (0)) << _GLF_IDENTITY(int(1), int(1))); _GLF_WRAPPED_LOOP(_injected_loop_counter < (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), int(ivec2(_GLF_IDENTITY(int(6), int(6)), 0))), (1 ^ 1) ^ ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6)))))); _injected_loop_counter ++)
      {
       barrier();
      }
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, ! (! (false))), true)))))
        return;
      }
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
        return;
       barrier();
      }
    }
  }
uint subgroup_size = 16;
 if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
  return;
 do
  {
   do
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false)))) || false))
      break;
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), false || (_GLF_IDENTITY(! (false), ! (! (! (false))))))))))
      return;
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   else
    {
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), bool(_GLF_IDENTITY(bool(bool(false)), (bool(bool(false))) || false)))))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         barrier();
        }
      }
     return;
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch : _GLF_FUZZED(injectionSwitch))).x > injectionSwitch.y))));
 GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_base.x = subgroup_size;
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false))), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
  return;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 GLF_merged2_0_1_17_1_1_12subgroup_local_idworkgroup_id.x = subgroup_local_id;
 if(_GLF_DEAD(false))
  {
   do
    {
     return;
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(54.44))) < injectionSwitch.y))))
      {
       return;
      }
     else
      {
      }
    }
   else
    {
    }
  }
 do
  {
   if(_GLF_DEAD(false))
    {
     do
      {
       return;
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false)), (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(mat3(injectionSwitch.x, 1.0, 0.0, 0.0, round(length(normalize(1.0))), 1.0, 1.0, 0.0, 1.0)), clamp(float(mat3(injectionSwitch.x, _GLF_IDENTITY(1.0, (1.0) / 1.0), 0.0, 0.0, _GLF_IDENTITY(round(length(normalize(1.0))), max(round(length(normalize(1.0))), _GLF_IDENTITY(round(length(normalize(1.0))), min(round(length(normalize(1.0))), round(length(_GLF_IDENTITY(normalize(1.0), clamp(normalize(1.0), normalize(1.0), normalize(1.0))))))))), 1.0, 1.0, 0.0, 1.0)), float(mat3(injectionSwitch.x, 1.0, 0.0, 0.0, round(length(normalize(1.0))), 1.0, 1.0, 0.0, 1.0)), float(mat3(injectionSwitch.x, _GLF_IDENTITY(1.0, max(1.0, 1.0)), 0.0, 0.0, round(length(normalize(1.0))), 1.0, 1.0, 0.0, 1.0))))) > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * _GLF_ONE(1.0, injectionSwitch.y))))))
    return;
   barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 do
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), ! (! (_GLF_IDENTITY(false, true && (false)))))))
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 << _GLF_IDENTITY(int(6), int(6)))); _injected_loop_counter --)
      {
       return;
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), true && (! (false)))))))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  {
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      continue;
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(false, (false) && true) || (false)), (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), (mat2(1.0) * (injectionSwitch)) - _GLF_IDENTITY(vec2(0.0, 0.0), (true ? vec2(0.0, 0.0) : _GLF_FUZZED(injectionSwitch))))).x > _GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(340.141)))))))
      {
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      continue;
     barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        continue;
       barrier();
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 do
  {
   for(int _injected_loop_counter = _GLF_IDENTITY(int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(_GLF_IDENTITY(mat3(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, determinant(mat2(1.0, 1.0, 0.0, 1.0))), (mat3(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, determinant(mat2(1.0, 1.0, 0.0, 1.0)))) / mat3(1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0)), mat3(_GLF_IDENTITY(mat4x3(_GLF_IDENTITY(_GLF_IDENTITY(mat3(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, determinant(mat2(1.0, 1.0, 0.0, 1.0))), (mat3(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, determinant(mat2(1.0, 1.0, 0.0, 1.0)))) / mat3(1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0)), (false ? _GLF_FUZZED((24.28 - mat3(-33.57, 87.92, 439.087, 7.9, 6.4, 1.4, 7.0, 3203.5181, 1534.3184))) : _GLF_IDENTITY(mat3(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, determinant(mat2(1.0, 1.0, 0.0, 1.0))), (mat3(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, determinant(mat2(1.0, 1.0, 0.0, 1.0)))) / mat3(1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0))))), mat4x3(mat4(mat4x3(_GLF_IDENTITY(_GLF_IDENTITY(mat3(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, determinant(mat2(1.0, 1.0, 0.0, 1.0))), (mat3(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, determinant(mat2(1.0, 1.0, 0.0, 1.0)))) / mat3(1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0)), (false ? _GLF_FUZZED((24.28 - mat3(-33.57, 87.92, 439.087, 7.9, 6.4, 1.4, 7.0, 3203.5181, 1534.3184))) : _GLF_IDENTITY(mat3(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, determinant(mat2(1.0, 1.0, 0.0, 1.0))), (mat3(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, determinant(mat2(1.0, 1.0, 0.0, 1.0)))) / mat3(1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0))))))))))))) / vec2(1.0, 1.0)).y)), int(_GLF_IDENTITY(ivec2(int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat3(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, determinant(mat2(1.0, 1.0, 0.0, 1.0))), (mat3(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, determinant(mat2(1.0, 1.0, 0.0, 1.0)))) / mat3(1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0))))) / vec2(1.0, 1.0)).y)), 0), min(ivec2(int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat3(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), 1.0, 0.0, 0.0, _GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(0.0)), bool(false))), 1.0)), 0.0, 1.0, determinant(mat2(1.0, 1.0, 0.0, 1.0))), (mat3(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, determinant(mat2(1.0, 1.0, 0.0, 1.0)))) / _GLF_IDENTITY(mat3(1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0), transpose(transpose(_GLF_IDENTITY(mat3(1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0), mat3(mat4x3(mat3(1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0))))))))))), _GLF_IDENTITY(((_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat3(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), 1.0, 0.0, 0.0, _GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(0.0)), bool(false))), 1.0)), 0.0, 1.0, determinant(mat2(1.0, 1.0, 0.0, 1.0))), (mat3(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, determinant(mat2(1.0, 1.0, 0.0, 1.0)))) / _GLF_IDENTITY(mat3(1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0), transpose(transpose(_GLF_IDENTITY(mat3(1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0), mat3(mat4x3(mat3(1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0)))))))))))) * mat2(_GLF_ONE(1.0, injectionSwitch.y)), mix(vec2((((_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat3(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), 1.0, 0.0, 0.0, _GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(0.0)), bool(false))), 1.0)), 0.0, 1.0, determinant(mat2(1.0, 1.0, 0.0, 1.0))), (mat3(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, determinant(mat2(1.0, 1.0, 0.0, 1.0)))) / _GLF_IDENTITY(mat3(1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0), transpose(transpose(_GLF_IDENTITY(mat3(1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0), mat3(mat4x3(mat3(1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0)))))))))))) * mat2(_GLF_ONE(1.0, injectionSwitch.y)))[0], (((_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat3(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), 1.0, 0.0, 0.0, _GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(0.0)), bool(false))), 1.0)), 0.0, 1.0, determinant(mat2(1.0, 1.0, 0.0, 1.0))), (mat3(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, determinant(mat2(1.0, 1.0, 0.0, 1.0)))) / _GLF_IDENTITY(mat3(1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0), transpose(transpose(_GLF_IDENTITY(mat3(1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0), mat3(mat4x3(mat3(1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0)))))))))))) * mat2(_GLF_ONE(1.0, injectionSwitch.y)))[1]), vec2(_GLF_FUZZED(-4.4), _GLF_FUZZED(-4650.6514)), bvec2(false, false)))) / vec2(1.0, 1.0)).y)), 0), ivec2(int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat3(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, determinant(mat2(1.0, 1.0, 0.0, 1.0))), (mat3(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), 0.0, 0.0, 1.0, 0.0, 1.0, determinant(mat2(_GLF_IDENTITY(1.0, max(1.0, 1.0)), 1.0, 0.0, 1.0)))) / mat3(1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0))))) / _GLF_IDENTITY(vec2(1.0, 1.0), mix(vec2(_GLF_FUZZED(1.2), (vec2(1.0, 1.0))[1]), vec2((vec2(1.0, 1.0))[0], _GLF_FUZZED((-4.3 * 4.7))), bvec2(true, false)))).y)), 0))))); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0), (_GLF_WRAPPED_LOOP(_injected_loop_counter != 0)) && true), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0), (_GLF_WRAPPED_LOOP(_injected_loop_counter != 0)) && true), false || (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0), (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != 0, ! (! (_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter != 0, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_injected_loop_counter != 0)), bool(bvec3(_injected_loop_counter != 0, false, true))))))), false || (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != 0, ! (! (_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter != 0, _GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(intBitsToFloat(ivec2(67570, -19130))) : injectionSwitch)).y)) || (_injected_loop_counter != 0)), bool(bvec3(_injected_loop_counter != 0, false, true)))))))))) && true)))) || false)) && _GLF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY(false || (true), (false || (true)) && true)), (_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0), injectionSwitch.x, injectionSwitch.x)) < injectionSwitch.y))); _injected_loop_counter --)
    {
     GLF_merged2_0_3_79_3_1_11GLF_merged3_0_1_16_1_1_17_2_1_14next_virtual_gidsubgroup_local_idworkgroup_sizesubgroup_id.xyz.y = GLF_merged2_0_1_17_1_1_12subgroup_local_idworkgroup_id.x;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
        }
       else
        {
        }
      }
     if(_GLF_DEAD(false))
      break;
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           barrier();
          }
         else
          {
          }
         if(_GLF_DEAD(false))
          return;
        }
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        break;
       break;
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(false, false || (false))))));
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
  }
 else
  {
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   do
    {
     return;
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (false)))))
    {
    }
   else
    {
     return;
    }
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (! (false))))), true, true)), bool(bool(bool(bvec3(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (! (false))))), true, true))))))))
  return;
 uint num_workgroup = _GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) / uvec3(1u, 1u, 1u)).x;
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(20.47)), float(injectionSwitch.y), bool(true))))), false || (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(20.47)), float(injectionSwitch.y), bool(true))))), _GLF_IDENTITY(bool(bool(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(20.47)), float(injectionSwitch.y), bool(true))))))), bool(bvec4(bool(bool(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(20.47)), float(injectionSwitch.y), bool(true))))))), true, false, false))))))))
  {
   if(_GLF_DEAD(false))
    {
     do
      {
       barrier();
       if(_GLF_DEAD(false))
        return;
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_DEAD(false))
    return;
   return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, bool(bvec4(false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)))))))
    barrier();
  }
 if(_GLF_DEAD(false))
  return;
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), ! (! (! _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED((-56.26))), bool(false))), injectionSwitch.x)) > injectionSwitch.y, false, true), bvec3(bvec4(bvec3(injectionSwitch.x > injectionSwitch.y, false, true), false)))), true && (_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED((-56.26))), bool(false))), injectionSwitch.x)) > injectionSwitch.y, false, true), bvec3(bvec4(bvec3(injectionSwitch.x > injectionSwitch.y, false, true), false)))), ! (! (bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED((-56.26))), bool(false))), injectionSwitch.x)) > injectionSwitch.y, false, true), bvec3(bvec4(bvec3(injectionSwitch.x > injectionSwitch.y, false, true), false))))))))))), ! (! ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(_GLF_IDENTITY(bvec3(injectionSwitch.x > injectionSwitch.y, false, true), bvec3(bvec4(bvec3(injectionSwitch.x > injectionSwitch.y, false, true), false))))))))))))))), false || (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(bvec4((_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - log(vec2(1.0, 1.0))), injectionSwitch)).y), true, false, true)), (bool(bvec4((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - log(vec2(1.0, 1.0))), injectionSwitch)).y), true, _GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), false || (bool(false))))), true))) && true)))))))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), bool(bvec4(bool(injectionSwitch.x > injectionSwitch.y), true, false, false)))), false || (bool(_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), bool(bvec4(bool(injectionSwitch.x > injectionSwitch.y), true, false, false)))))))))))
    {
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         do
          {
           if(_GLF_DEAD(false))
            return;
           return;
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   else
    {
     for(int _injected_loop_counter = (0 ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) | (1))) | (1))); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       else
        {
        }
      }
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
    {
     for(int _injected_loop_counter = (1 ^ int(_GLF_ZERO(0.0, injectionSwitch.x))); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, min(0, 0))); _injected_loop_counter --)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(true, true && (true)), true, _GLF_IDENTITY(false, (false) || false)), bvec3(bvec4(bvec3(_GLF_IDENTITY(true, true && (true)), true, _GLF_IDENTITY(false, (false) || false)), false))))), true && (_GLF_IDENTITY(_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(true, true && (true)), true, _GLF_IDENTITY(false, (false) || false)), bvec3(bvec4(bvec3(_GLF_IDENTITY(true, true && (true)), true, _GLF_IDENTITY(false, (false) || false)), false))))), (_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(true, true && (true)), true, _GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), (_GLF_IDENTITY(false, (false) || false)) || false)), bvec3(bvec4(bvec3(_GLF_IDENTITY(true, true && (true)), true, _GLF_IDENTITY(false, (false) || false)), false)))))) || false))), (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x < injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     if(_GLF_DEAD(false))
      return;
     return;
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) || false)))
          {
          }
         else
          {
           return;
          }
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           return;
          }
        }
       for(int _injected_loop_counter = ((97281 & 0) ^ 1); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > 0, bool(bvec2(_injected_loop_counter > 0, false)))); _injected_loop_counter --)
        {
         barrier();
        }
      }
    }
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         barrier();
        }
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         continue;
        }
       barrier();
      }
     if(_GLF_DEAD(false))
      break;
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       return;
       if(_GLF_DEAD(false))
        break;
      }
    }
  }
 GLF_merged2_0_3_79_3_1_11GLF_merged3_0_1_16_1_1_17_2_1_14next_virtual_gidsubgroup_local_idworkgroup_sizesubgroup_id.xyz.z = workgroup_size;
 uint workgroup_id = _GLF_IDENTITY(gl_WorkGroupID, uvec3(0u, _GLF_IDENTITY(0u, clamp(0u, _GLF_IDENTITY(0u, clamp(0u, 0u, _GLF_IDENTITY(_GLF_IDENTITY(0u, min(0u, 0u)), min(_GLF_IDENTITY(0u, (0u) * 1u), 0u)))), 0u)), 0u) ^ (gl_WorkGroupID)).x;
 if(_GLF_DEAD(false))
  barrier();
 _GLF_IDENTITY(GLF_merged2_0_1_17_1_1_12subgroup_local_idworkgroup_id.y = workgroup_id, (false ? _GLF_FUZZED(workgroup_id) : GLF_merged2_0_1_17_1_1_12subgroup_local_idworkgroup_id.y = workgroup_id));
 if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
  return;
 uint workgroup_base = _GLF_IDENTITY(_GLF_IDENTITY(GLF_merged2_0_3_79_3_1_11GLF_merged3_0_1_16_1_1_17_2_1_14next_virtual_gidsubgroup_local_idworkgroup_sizesubgroup_id, (false ? _GLF_FUZZED(bitfieldReverse(GLF_merged2_0_3_79_3_1_16GLF_merged3_0_1_16_1_1_17_2_1_14next_virtual_gidsubgroup_local_idworkgroup_sizenext_virtual_gid)) : GLF_merged2_0_3_79_3_1_11GLF_merged3_0_1_16_1_1_17_2_1_14next_virtual_gidsubgroup_local_idworkgroup_sizesubgroup_id)).xyz.z * GLF_merged2_0_1_17_1_1_12subgroup_local_idworkgroup_id.y, clamp(_GLF_IDENTITY(GLF_merged2_0_3_79_3_1_11GLF_merged3_0_1_16_1_1_17_2_1_14next_virtual_gidsubgroup_local_idworkgroup_sizesubgroup_id, (false ? _GLF_FUZZED(bitfieldReverse(GLF_merged2_0_3_79_3_1_16GLF_merged3_0_1_16_1_1_17_2_1_14next_virtual_gidsubgroup_local_idworkgroup_sizenext_virtual_gid)) : GLF_merged2_0_3_79_3_1_11GLF_merged3_0_1_16_1_1_17_2_1_14next_virtual_gidsubgroup_local_idworkgroup_sizesubgroup_id)).xyz.z * GLF_merged2_0_1_17_1_1_12subgroup_local_idworkgroup_id.y, _GLF_IDENTITY(GLF_merged2_0_3_79_3_1_11GLF_merged3_0_1_16_1_1_17_2_1_14next_virtual_gidsubgroup_local_idworkgroup_sizesubgroup_id, (false ? _GLF_FUZZED(bitfieldReverse(GLF_merged2_0_3_79_3_1_16GLF_merged3_0_1_16_1_1_17_2_1_14next_virtual_gidsubgroup_local_idworkgroup_sizenext_virtual_gid)) : GLF_merged2_0_3_79_3_1_11GLF_merged3_0_1_16_1_1_17_2_1_14next_virtual_gidsubgroup_local_idworkgroup_sizesubgroup_id)).xyz.z * GLF_merged2_0_1_17_1_1_12subgroup_local_idworkgroup_id.y, _GLF_IDENTITY(GLF_merged2_0_3_79_3_1_11GLF_merged3_0_1_16_1_1_17_2_1_14next_virtual_gidsubgroup_local_idworkgroup_sizesubgroup_id, (false ? _GLF_FUZZED(bitfieldReverse(GLF_merged2_0_3_79_3_1_16GLF_merged3_0_1_16_1_1_17_2_1_14next_virtual_gidsubgroup_local_idworkgroup_sizenext_virtual_gid)) : GLF_merged2_0_3_79_3_1_11GLF_merged3_0_1_16_1_1_17_2_1_14next_virtual_gidsubgroup_local_idworkgroup_sizesubgroup_id)).xyz.z * GLF_merged2_0_1_17_1_1_12subgroup_local_idworkgroup_id.y));
 GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_base.y = _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, ~ (_GLF_IDENTITY(~ _GLF_IDENTITY((workgroup_base), uint(uvec4(_GLF_IDENTITY((workgroup_base), ((workgroup_base)) >> 0u), _GLF_IDENTITY(1u, (1u) << 0u), 1u, 1u))), 1u * (~ (workgroup_base))))), (_GLF_IDENTITY(workgroup_base, 0u | (workgroup_base))) ^ 0u);
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   return;
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(min(injectionSwitch, injectionSwitch), clamp(min(injectionSwitch, injectionSwitch), min(injectionSwitch, injectionSwitch), min(injectionSwitch, injectionSwitch))))) + vec2(0.0, 0.0)).y))))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (false)))))
    {
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           do
            {
             return;
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         do
          {
           if(_GLF_DEAD(false))
            return;
          }
         while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), bool(bvec4(_GLF_WRAPPED_LOOP(false), false, true, true))));
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(false))
          return;
        }
      }
     else
      {
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (-9689 & 0)); _injected_loop_counter --)
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(bvec3(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, true)))))
        {
         if(_GLF_DEAD(false))
          return;
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((0 ^ (0 | 0)) | _GLF_IDENTITY(0, _GLF_IDENTITY(_GLF_IDENTITY(int(ivec3(0, 0, 0)), (true ? _GLF_IDENTITY(int(ivec3(0, 0, 0)), min(int(ivec3(0, 0, 0)), int(ivec3(0, 0, 0)))) : _GLF_FUZZED(_injected_loop_counter))), _GLF_IDENTITY(max(_GLF_IDENTITY(int(ivec3(0, 0, 0)), max(int(ivec3(0, 0, 0)), int(ivec3(0, 0, 0)))), int(ivec3(0, 0, 0))), ~ (~ _GLF_IDENTITY((max(_GLF_IDENTITY(_GLF_IDENTITY(int(ivec3(0, 0, 0)), max(int(ivec3(0, 0, _GLF_IDENTITY(0, (0) * 1))), int(ivec3(0, 0, _GLF_IDENTITY(0, ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), ~ (~ (int(7)))))) * (0)))))), max(int(ivec3(0, 0, _GLF_IDENTITY(0, (0) | (0)))), int(ivec3(_GLF_IDENTITY(0, _GLF_IDENTITY((_GLF_IDENTITY(0, (0) - 0)) << (0 << _GLF_IDENTITY(int(6), int(6))), (_GLF_IDENTITY((_GLF_IDENTITY(0, (0) - 0)) << (0 << _GLF_IDENTITY(int(6), int(6))), (false ? _GLF_FUZZED(_injected_loop_counter) : (_GLF_IDENTITY(0, (0) - 0)) << (0 << _GLF_IDENTITY(int(6), int(6)))))) ^ ((0 << _GLF_IDENTITY(int(2), int(2))) | 0))), 0, 0)))), int(ivec3(_GLF_IDENTITY(0, (0) - 0), 0, 0)))), ~ (_GLF_IDENTITY(~ ((max(_GLF_IDENTITY(_GLF_IDENTITY(int(ivec3(0, 0, 0)), max(int(ivec3(0, 0, _GLF_IDENTITY(0, (0) * 1))), int(ivec3(0, 0, _GLF_IDENTITY(0, ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), ~ (~ (int(7)))))) * (0)))))), max(int(ivec3(0, 0, _GLF_IDENTITY(0, (0) | (0)))), int(ivec3(_GLF_IDENTITY(0, _GLF_IDENTITY((_GLF_IDENTITY(0, (0) - 0)) << (0 << _GLF_IDENTITY(int(6), int(6))), (_GLF_IDENTITY((_GLF_IDENTITY(0, (0) - 0)) << (0 << _GLF_IDENTITY(int(6), int(6))), (false ? _GLF_FUZZED(_injected_loop_counter) : (_GLF_IDENTITY(0, (0) - 0)) << (0 << _GLF_IDENTITY(int(6), int(6)))))) ^ ((0 << _GLF_IDENTITY(int(2), int(2))) | 0))), 0, 0)))), int(ivec3(_GLF_IDENTITY(0, (0) - 0), 0, 0))))), clamp(~ ((max(_GLF_IDENTITY(_GLF_IDENTITY(int(ivec3(0, 0, 0)), max(int(ivec3(0, 0, _GLF_IDENTITY(0, (0) * 1))), int(ivec3(0, 0, _GLF_IDENTITY(0, ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), ~ (~ (int(7)))))) * (0)))))), max(int(ivec3(0, 0, _GLF_IDENTITY(0, (0) | (0)))), int(ivec3(_GLF_IDENTITY(0, _GLF_IDENTITY((_GLF_IDENTITY(0, (0) - 0)) << (0 << _GLF_IDENTITY(int(6), int(6))), (_GLF_IDENTITY((_GLF_IDENTITY(0, (0) - 0)) << (0 << _GLF_IDENTITY(int(6), int(6))), (false ? _GLF_FUZZED(_injected_loop_counter) : (_GLF_IDENTITY(0, (0) - 0)) << (0 << _GLF_IDENTITY(int(6), int(6)))))) ^ ((0 << _GLF_IDENTITY(int(2), int(2))) | 0))), 0, 0)))), int(ivec3(_GLF_IDENTITY(0, (0) - 0), 0, 0))))), ~ ((max(_GLF_IDENTITY(_GLF_IDENTITY(int(ivec3(0, 0, 0)), max(int(ivec3(0, 0, _GLF_IDENTITY(0, (0) * 1))), int(ivec3(0, 0, _GLF_IDENTITY(0, ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), ~ (~ (int(7)))))) * (0)))))), max(int(ivec3(0, 0, _GLF_IDENTITY(0, (0) | (0)))), int(ivec3(_GLF_IDENTITY(0, _GLF_IDENTITY((_GLF_IDENTITY(0, (0) - 0)) << (0 << _GLF_IDENTITY(int(6), int(6))), (_GLF_IDENTITY((_GLF_IDENTITY(0, (0) - 0)) << (0 << _GLF_IDENTITY(int(6), int(6))), (false ? _GLF_FUZZED(_injected_loop_counter) : (_GLF_IDENTITY(0, (0) - 0)) << (0 << _GLF_IDENTITY(int(6), int(6)))))) ^ ((0 << _GLF_IDENTITY(int(2), int(2))) | 0))), 0, 0)))), int(ivec3(_GLF_IDENTITY(0, (0) - 0), 0, 0))))), ~ ((max(_GLF_IDENTITY(_GLF_IDENTITY(int(ivec3(0, 0, 0)), max(int(ivec3(0, 0, _GLF_IDENTITY(0, (0) * 1))), int(ivec3(0, 0, _GLF_IDENTITY(0, ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), ~ (~ (int(7)))))) * (0)))))), max(int(ivec3(0, 0, _GLF_IDENTITY(0, (0) | (0)))), int(ivec3(_GLF_IDENTITY(0, _GLF_IDENTITY((_GLF_IDENTITY(0, (0) - 0)) << (0 << _GLF_IDENTITY(int(6), int(6))), (_GLF_IDENTITY((_GLF_IDENTITY(0, (0) - 0)) << (0 << _GLF_IDENTITY(int(6), int(6))), (false ? _GLF_FUZZED(_injected_loop_counter) : (_GLF_IDENTITY(0, (0) - 0)) << (0 << _GLF_IDENTITY(int(6), int(6)))))) ^ ((0 << _GLF_IDENTITY(int(2), int(2))) | 0))), 0, 0)))), int(ivec3(_GLF_IDENTITY(0, (0) - 0), 0, 0))))))))))))))); _injected_loop_counter --)
          {
           return;
          }
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
          }
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            return;
           return;
          }
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), (! (injectionSwitch.x > injectionSwitch.y)) && true)))))))
          return;
        }
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         return;
         if(_GLF_DEAD(false))
          return;
        }
       if(_GLF_DEAD(false))
        return;
      }
    }
   else
    {
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false)), bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false)), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false)), true), bvec2(bvec3(bvec2(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false)), true), false))))), true)))))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), false))))
        return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(false, (false) || false) || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
          {
           if(_GLF_DEAD(false))
            return;
           return;
          }
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       return;
      }
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)))))
  {
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, ~ (~ (_injected_loop_counter))) < 1); _injected_loop_counter ++)
      {
       return;
      }
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   barrier();
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  barrier();
 uint virtual_gid = GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_base.y + GLF_merged2_0_3_79_3_1_11GLF_merged3_0_1_16_1_1_17_2_1_14next_virtual_gidsubgroup_local_idworkgroup_sizesubgroup_id.w * _GLF_IDENTITY(GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_base, _GLF_IDENTITY((_GLF_IDENTITY(GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_base, (GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_base) * uvec2(1u, 1u))), (_GLF_IDENTITY(true, (true) || false) ? _GLF_IDENTITY((_GLF_IDENTITY(GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_base, (GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_base) * uvec2(1u, 1u))), min((_GLF_IDENTITY(GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_base, (GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_base) * uvec2(1u, 1u))), (_GLF_IDENTITY(GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_base, (GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_base) * uvec2(1u, 1u))))) : _GLF_FUZZED(GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_base))) ^ uvec2(0u, 0u)).x + GLF_merged2_0_3_79_3_1_11GLF_merged3_0_1_16_1_1_17_2_1_14next_virtual_gidsubgroup_local_idworkgroup_sizesubgroup_id.xyz.y;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 >> _GLF_IDENTITY(int(0), int(0)))); _GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) | 0))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       do
        {
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
          return;
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (injectionSwitch.x > injectionSwitch.y))))
        {
         for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 0)), bool(bvec3(! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 0)), false, true))))); _injected_loop_counter --)
          {
           barrier();
          }
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         barrier();
         do
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(false))
              return;
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            return;
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             barrier();
            }
          }
        }
       barrier();
      }
     do
      {
       barrier();
       if(_GLF_DEAD(false))
        break;
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 uint next_virtual_gid = _GLF_IDENTITY(GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_base.y, (_GLF_IDENTITY(GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_base.y, (GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_base.y) ^ 0u)) / 1u) + GLF_merged2_0_3_79_3_1_11GLF_merged3_0_1_16_1_1_17_2_1_14next_virtual_gidsubgroup_local_idworkgroup_sizesubgroup_id.w * GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_base.x + (_GLF_IDENTITY((_GLF_IDENTITY(GLF_merged2_0_3_79_3_1_11GLF_merged3_0_1_16_1_1_17_2_1_14next_virtual_gidsubgroup_local_idworkgroup_sizesubgroup_id.xyz.y + 1, 1u * (_GLF_IDENTITY(GLF_merged2_0_3_79_3_1_11GLF_merged3_0_1_16_1_1_17_2_1_14next_virtual_gidsubgroup_local_idworkgroup_sizesubgroup_id.xyz.y, uint(_GLF_IDENTITY(uvec4(GLF_merged2_0_3_79_3_1_11GLF_merged3_0_1_16_1_1_17_2_1_14next_virtual_gidsubgroup_local_idworkgroup_sizesubgroup_id.xyz.y, 1u, 1u, 0u), min(uvec4(GLF_merged2_0_3_79_3_1_11GLF_merged3_0_1_16_1_1_17_2_1_14next_virtual_gidsubgroup_local_idworkgroup_sizesubgroup_id.xyz.y, 1u, 1u, 0u), uvec4(GLF_merged2_0_3_79_3_1_11GLF_merged3_0_1_16_1_1_17_2_1_14next_virtual_gidsubgroup_local_idworkgroup_sizesubgroup_id.xyz.y, _GLF_IDENTITY(1u, (1u) | (1u)), 1u, 0u))))) + _GLF_IDENTITY(1, (true ? _GLF_IDENTITY(1, min(1, 1)) : _GLF_FUZZED(findMSB(40584))))))), (false ? _GLF_FUZZED(subgroup_id) : (_GLF_IDENTITY(GLF_merged2_0_3_79_3_1_11GLF_merged3_0_1_16_1_1_17_2_1_14next_virtual_gidsubgroup_local_idworkgroup_sizesubgroup_id.xyz.y + 1, 1u * (_GLF_IDENTITY(GLF_merged2_0_3_79_3_1_11GLF_merged3_0_1_16_1_1_17_2_1_14next_virtual_gidsubgroup_local_idworkgroup_sizesubgroup_id.xyz.y, uint(_GLF_IDENTITY(uvec4(_GLF_IDENTITY(GLF_merged2_0_3_79_3_1_11GLF_merged3_0_1_16_1_1_17_2_1_14next_virtual_gidsubgroup_local_idworkgroup_sizesubgroup_id.xyz, (false ? _GLF_FUZZED(GLF_merged3_0_1_16_1_1_17_2_1_14next_virtual_gidsubgroup_local_idworkgroup_size) : _GLF_IDENTITY(GLF_merged2_0_3_79_3_1_11GLF_merged3_0_1_16_1_1_17_2_1_14next_virtual_gidsubgroup_local_idworkgroup_sizesubgroup_id.xyz, uvec3(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)) | (GLF_merged2_0_3_79_3_1_11GLF_merged3_0_1_16_1_1_17_2_1_14next_virtual_gidsubgroup_local_idworkgroup_sizesubgroup_id.xyz)))).y, 1u, 1u, 0u), min(uvec4(GLF_merged2_0_3_79_3_1_11GLF_merged3_0_1_16_1_1_17_2_1_14next_virtual_gidsubgroup_local_idworkgroup_sizesubgroup_id.xyz.y, 1u, 1u, 0u), uvec4(GLF_merged2_0_3_79_3_1_11GLF_merged3_0_1_16_1_1_17_2_1_14next_virtual_gidsubgroup_local_idworkgroup_sizesubgroup_id.xyz.y, 1u, 1u, 0u))))) + _GLF_IDENTITY(1, (true ? _GLF_IDENTITY(1, min(1, 1)) : _GLF_FUZZED(findMSB(40584))))))))) % GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_base.x);
 GLF_merged2_0_3_79_3_1_16GLF_merged3_0_1_16_1_1_17_2_1_14next_virtual_gidsubgroup_local_idworkgroup_sizenext_virtual_gid.w = next_virtual_gid;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(pow(injectionSwitch, injectionSwitch)) : injectionSwitch))) * vec2(1.0, 1.0)).x > injectionSwitch.y))))
    return;
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false))))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
        {
         for(int _injected_loop_counter = (0 | (-32124 & 0)); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < 1), (_GLF_WRAPPED_LOOP(_injected_loop_counter < 1)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))); _injected_loop_counter ++)
          {
           return;
          }
        }
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
     do
      {
       return;
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            continue;
           for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
            {
             barrier();
             if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
              break;
            }
          }
         return;
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec3(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))), false, true)), ! (! (bool(_GLF_IDENTITY(bvec3(_GLF_DEAD(false), false, true), _GLF_IDENTITY(bvec3(bvec4(bvec3(_GLF_DEAD(false), false, true), false)), bvec3(bvec3(bvec3(bvec4(bvec3(_GLF_DEAD(false), false, true), false))))))))))))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       barrier();
      }
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       return;
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         do
          {
           return;
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
    }
  }
 do
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     GLF_merged2_0_3_79_3_1_11GLF_merged3_0_1_16_1_1_17_2_1_14next_virtual_gidsubgroup_local_idworkgroup_sizesubgroup_id.xyz.x = GLF_merged2_0_3_79_3_1_16GLF_merged3_0_1_16_1_1_17_2_1_14next_virtual_gidsubgroup_local_idworkgroup_sizenext_virtual_gid.w;
     if(_GLF_DEAD(false))
      return;
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     return;
    }
   else
    {
    }
  }
 for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) << 0) != int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(min(injectionSwitch.x, injectionSwitch.x), clamp(_GLF_IDENTITY(min(injectionSwitch.x, injectionSwitch.x), (min(injectionSwitch.x, injectionSwitch.x)) - 0.0), min(injectionSwitch.x, injectionSwitch.x), _GLF_IDENTITY(min(injectionSwitch.x, injectionSwitch.x), float(mat2x3(_GLF_IDENTITY(min(injectionSwitch.x, injectionSwitch.x), min(min(injectionSwitch.x, injectionSwitch.x), min(injectionSwitch.x, injectionSwitch.x))), 0.0, 1.0, 0.0, abs(1.0), 0.0))))))))); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     buf[virtual_gid] = 1;
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 do
  {
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      break;
     if(_GLF_DEAD(false))
      return;
     if(GLF_merged2_0_3_79_3_1_11GLF_merged3_0_1_16_1_1_17_2_1_14next_virtual_gidsubgroup_local_idworkgroup_sizesubgroup_id.xyz.y + 1 < GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_base.x)
      {
       if(_GLF_DEAD(false))
        barrier();
       int i = 0;
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1]))))).y)))))))
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            return;
           continue;
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
           if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false || (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))
                {
                 return;
                }
               else
                {
                }
              }
             return;
            }
          }
         else
          {
          }
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) && true)))), (_GLF_DEAD(false)) || false))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
           break;
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
            return;
           break;
          }
         do
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, false)))))
          barrier();
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) ^ 0) != _GLF_IDENTITY(1, int(int(_GLF_IDENTITY(_GLF_IDENTITY(1, min(1, _GLF_IDENTITY(_GLF_IDENTITY(1, (1) | (1)), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(1, (1) | (1)), clamp(_GLF_IDENTITY(1, (1) | (1)), _GLF_IDENTITY(1, (1) | (1)), _GLF_IDENTITY(1, (1) | (1))))))))), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(1, min(1, _GLF_IDENTITY(1, (1) | (1)))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, min(_GLF_IDENTITY(1, 0 | (1)), 1))) | (_GLF_IDENTITY(1, max(1, _GLF_IDENTITY(1, (1) << 0))))), min(1, _GLF_IDENTITY(1, (1) | (1)))), (_GLF_IDENTITY(1, min(1, _GLF_IDENTITY(1, (1) | (1))))) | (_GLF_IDENTITY(1, min(1, _GLF_IDENTITY(1, (1) | (1))))))) >> 0)))))))); _injected_loop_counter ++)
            {
             do
              {
               if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, 0.0 + (injectionSwitch.y))), ! (! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, 0.0 + (injectionSwitch.y)))))))))
                {
                 do
                  {
                   barrier();
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)))).y))))
                    return;
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
               if(_GLF_DEAD(false))
                continue;
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))))));
             barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              continue;
             if(_GLF_DEAD(false))
              return;
            }
          }
        }
       do
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          break;
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)), true && (_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))))
          {
           if(_GLF_DEAD(false))
            return;
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 ^ int(_GLF_ONE(1.0, injectionSwitch.y)))); _injected_loop_counter --)
            {
             return;
            }
          }
        }
       else
        {
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
       for(int _injected_loop_counter = (_GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(injectionSwitch.x, 1.0 * _GLF_IDENTITY((injectionSwitch.x), _GLF_IDENTITY((_GLF_IDENTITY(true, ! (! (true))) ? (injectionSwitch.x) : _GLF_FUZZED(-3.6)), _GLF_IDENTITY((true ? (true ? (injectionSwitch.x) : _GLF_FUZZED(-3.6)) : _GLF_FUZZED(408.069)), max((true ? (true ? (injectionSwitch.x) : _GLF_FUZZED(-3.6)) : _GLF_FUZZED(408.069)), (true ? (true ? (injectionSwitch.x) : _GLF_FUZZED(-3.6)) : _GLF_FUZZED(408.069)))))))), float(_GLF_FUZZED(((918.047) * 137.471))), bool(false))))) << _GLF_IDENTITY(int(8), int(8)), ((1 << _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(7), int(7)), max(_GLF_IDENTITY(_GLF_IDENTITY(int(7), int(7)), (_GLF_IDENTITY(true, ! (! (true))) ? _GLF_IDENTITY(int(7), int(7)) : _GLF_IDENTITY(_GLF_FUZZED(i), (_GLF_IDENTITY(_GLF_FUZZED(i), 0 + (_GLF_FUZZED(i)))) | (_GLF_IDENTITY(_GLF_FUZZED(i), (_GLF_FUZZED(i)) << 0))))), _GLF_IDENTITY(int(7), int(7)))), _GLF_IDENTITY(1, 0 | (1)) * _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(7), 1 * (int(7))), _GLF_IDENTITY(int(7), clamp(int(7), _GLF_IDENTITY(int(7), 0 + (int(7))), int(7)))), 0 | (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(7), 1 * (int(7))), _GLF_IDENTITY(int(7), clamp(int(7), _GLF_IDENTITY(int(7), 0 + (int(7))), int(7)))), (_GLF_IDENTITY(_GLF_IDENTITY(int(7), 1 * (int(7))), _GLF_IDENTITY(int(7), clamp(int(7), _GLF_IDENTITY(int(7), 0 + (int(7))), int(7))))) / 1))), (false ? _GLF_FUZZED(86945) : _GLF_IDENTITY(int(_GLF_IDENTITY(7, (true ? 7 : _GLF_FUZZED(-55348)))), int(7))))), clamp((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(7), 1 * (int(7))), _GLF_IDENTITY(int(7), clamp(int(7), _GLF_IDENTITY(int(7), 0 + (int(7))), int(7)))), 0 | (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(7), 1 * (int(7))), _GLF_IDENTITY(int(7), clamp(int(7), _GLF_IDENTITY(int(7), 0 + (int(7))), int(7)))), (_GLF_IDENTITY(_GLF_IDENTITY(int(7), 1 * (int(7))), _GLF_IDENTITY(int(7), clamp(int(7), _GLF_IDENTITY(int(7), 0 + (int(7))), int(7))))) / 1))), (false ? _GLF_FUZZED(86945) : _GLF_IDENTITY(int(_GLF_IDENTITY(7, (true ? 7 : _GLF_FUZZED(-55348)))), int(7))))), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(7), 1 * (int(7))), _GLF_IDENTITY(int(7), clamp(int(7), _GLF_IDENTITY(int(7), 0 + (int(7))), int(7)))), 0 | (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(7), 1 * (int(7))), _GLF_IDENTITY(int(7), clamp(int(7), _GLF_IDENTITY(int(7), 0 + (int(7))), int(7)))), (_GLF_IDENTITY(_GLF_IDENTITY(int(7), 1 * (int(7))), _GLF_IDENTITY(int(7), clamp(int(7), _GLF_IDENTITY(int(7), 0 + (int(7))), int(7))))) / 1))), (false ? _GLF_FUZZED(86945) : _GLF_IDENTITY(int(_GLF_IDENTITY(7, (true ? 7 : _GLF_FUZZED(-55348)))), int(7))))), 0 ^ ((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(7), 1 * (int(7))), _GLF_IDENTITY(int(7), clamp(int(7), _GLF_IDENTITY(int(7), 0 + (int(7))), int(7)))), 0 | (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(7), 1 * (int(7))), _GLF_IDENTITY(int(7), clamp(int(7), _GLF_IDENTITY(int(7), 0 + (int(7))), int(7)))), (_GLF_IDENTITY(_GLF_IDENTITY(int(7), 1 * (int(7))), _GLF_IDENTITY(int(7), clamp(int(7), _GLF_IDENTITY(int(7), 0 + (int(7))), int(7))))) / 1))), (false ? _GLF_FUZZED(86945) : _GLF_IDENTITY(int(_GLF_IDENTITY(7, (true ? 7 : _GLF_FUZZED(-55348)))), int(7))))))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(7), 1 * (int(7))), _GLF_IDENTITY(int(7), clamp(int(7), _GLF_IDENTITY(int(7), 0 + (int(7))), int(7)))), 0 | (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(7), 1 * (int(7))), _GLF_IDENTITY(int(7), clamp(int(7), _GLF_IDENTITY(int(7), 0 + (int(7))), int(7)))), (_GLF_IDENTITY(_GLF_IDENTITY(int(7), 1 * (int(7))), _GLF_IDENTITY(int(7), clamp(int(7), _GLF_IDENTITY(int(7), 0 + (int(7))), int(7))))) / 1))), (false ? _GLF_FUZZED(86945) : _GLF_IDENTITY(int(_GLF_IDENTITY(7, (true ? 7 : _GLF_FUZZED(-55348)))), int(7))))))))) >> _GLF_IDENTITY(int(7), int(_GLF_IDENTITY(7, int(ivec2(_GLF_IDENTITY(_GLF_IDENTITY(7, ~ (_GLF_IDENTITY(~ (7), (~ (7)) / 1))), min(7, 7)), 1)))))) * (int(_GLF_ZERO(0.0, injectionSwitch.x)) << _GLF_IDENTITY(int(8), int(8)))), _GLF_IDENTITY(max(int(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), min(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)))) << _GLF_IDENTITY(int(8), int(_GLF_IDENTITY(8, clamp(8, 8, _GLF_IDENTITY(8, (8) | (8)))))), int(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), (_GLF_ZERO(_GLF_IDENTITY(0.0, min(0.0, _GLF_IDENTITY(0.0, float(vec4(0.0, 1.0, 1.0, 0.0))))), injectionSwitch.x)) - 0.0)) << _GLF_IDENTITY(int(_GLF_IDENTITY(8, min(8, 8))), int(8))), max(_GLF_IDENTITY(max(int(_GLF_ZERO(_GLF_IDENTITY(0.0, max(0.0, _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)))), injectionSwitch.x)) << _GLF_IDENTITY(_GLF_IDENTITY(int(8), _GLF_IDENTITY(int(8), ~ (~ (int(8))))), ((_GLF_IDENTITY(0 << _GLF_IDENTITY(int(8), int(8)), max(0 << _GLF_IDENTITY(int(8), int(8)), 0 << _GLF_IDENTITY(int(8), int(8))))) << _GLF_IDENTITY(int(5), int(5))) ^ (_GLF_IDENTITY(int(8), int(8)))), int(_GLF_ZERO(0.0, injectionSwitch.x)) << _GLF_IDENTITY(int(_GLF_IDENTITY(8, (8) * 1)), int(8))), (_GLF_IDENTITY(max(int(_GLF_ZERO(0.0, injectionSwitch.x)) << _GLF_IDENTITY(int(8), int(8)), int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).x)) << _GLF_IDENTITY(int(8), int(8))), clamp(max(int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, 1.0 * (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)))))) << _GLF_IDENTITY(int(8), _GLF_IDENTITY(int(8), 0 | (int(8)))), int(_GLF_ZERO(0.0, injectionSwitch.x)) << _GLF_IDENTITY(int(8), int(8))), _GLF_IDENTITY(max(_GLF_IDENTITY(int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(-0.6, 40.75)))).x)) << _GLF_IDENTITY(int(8), int(8)), (int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(-0.6, 40.75)))).x)) << _GLF_IDENTITY(int(8), int(8))) | (int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(-0.6, 40.75)))).x)) << _GLF_IDENTITY(int(8), int(8)))), int(_GLF_ZERO(0.0, injectionSwitch.x)) << _GLF_IDENTITY(_GLF_IDENTITY(int(8), clamp(_GLF_IDENTITY(int(8), (int(8)) << 0), int(8), int(8))), _GLF_IDENTITY(int(8), max(_GLF_IDENTITY(int(8), max(int(8), int(8))), int(8))))), _GLF_IDENTITY(int(int(max(int(_GLF_ZERO(_GLF_IDENTITY(0.0, clamp(0.0, _GLF_IDENTITY(_GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, max(0.0, 0.0))) / 1.0), (_GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, max(0.0, 0.0))) / 1.0)) - 0.0), 0.0)), injectionSwitch.x)) << _GLF_IDENTITY(int(8), int(8)), int(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), clamp(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), (_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), mix(float(_GLF_FUZZED(-945.029)), float(_GLF_ZERO(0.0, injectionSwitch.x)), bool(true)))) * 1.0)))) << _GLF_IDENTITY(int(8), int(8))))), max(int(int(max(int(_GLF_ZERO(0.0, injectionSwitch.x)) << _GLF_IDENTITY(int(8), int(8)), int(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), max(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)))) << _GLF_IDENTITY(int(8), int(8))))), int(int(max(int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x)) << _GLF_IDENTITY(int(8), int(8)), _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)) << _GLF_IDENTITY(int(8), int(8)), (int(_GLF_ZERO(0.0, injectionSwitch.x)) << _GLF_IDENTITY(int(8), _GLF_IDENTITY(int(8), 0 ^ (int(8))))) + 0))))))), max(int(_GLF_ZERO(0.0, injectionSwitch.x)) << _GLF_IDENTITY(int(8), int(8)), int(_GLF_ZERO(0.0, injectionSwitch.x)) << _GLF_IDENTITY(int(_GLF_IDENTITY(8, _GLF_IDENTITY(int(ivec2(8, 0)), (int(ivec2(_GLF_IDENTITY(8, 0 ^ (8)), 0))) * 1))), int(8)))))) | 0), max(_GLF_IDENTITY(int(_GLF_ZERO(_GLF_IDENTITY(0.0, clamp(_GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(1.6) : 0.0)), 0.0, _GLF_IDENTITY(0.0, clamp(0.0, _GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-1.9)), bool(false))), _GLF_IDENTITY(0.0, 1.0 * (0.0)))))), injectionSwitch.x)), ~ (_GLF_IDENTITY(~ (int(_GLF_ZERO(0.0, injectionSwitch.x))), clamp(~ _GLF_IDENTITY((int(_GLF_ZERO(0.0, injectionSwitch.x))), ~ (~ ((int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, vec2(vec4(injectionSwitch, 1.0, 1.0))).x)))))), ~ (int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x))), ~ (int(_GLF_ZERO(0.0, injectionSwitch.x))))))) << _GLF_IDENTITY(int(8), int(8)), int(_GLF_ZERO(0.0, injectionSwitch.x)) << _GLF_IDENTITY(int(_GLF_IDENTITY(8, (8) - 0)), int(8))))))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, int(ivec3(_injected_loop_counter, 0, 0))) != 1, _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_injected_loop_counter != _GLF_IDENTITY(1, _GLF_IDENTITY((1), _GLF_IDENTITY(min(_GLF_IDENTITY((1), ((1)) | ((1))), (1)), (true ? _GLF_IDENTITY(min(_GLF_IDENTITY((1), ((1)) | ((1))), (1)), int(ivec3(min(_GLF_IDENTITY((1), ((1)) | ((1))), (1)), 1, 1))) : _GLF_FUZZED(43107)))) | (_GLF_IDENTITY(1, min(1, 1)))), ! (! _GLF_IDENTITY((_injected_loop_counter != _GLF_IDENTITY(1, (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, (1) | (1)), 1, _GLF_IDENTITY(1, min(1, 1))))) >> 0)) | (1))), bool(bvec4(_GLF_IDENTITY((_injected_loop_counter != _GLF_IDENTITY(1, (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, clamp(1, 1, 1))) >> 0)) | (1))), bool(bvec2((_injected_loop_counter != _GLF_IDENTITY(1, (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, clamp(1, 1, 1))) >> 0)) | (1))), false))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, false))))))), false || (_GLF_IDENTITY(bool(bool(_injected_loop_counter != 1)), (bool(bool(_injected_loop_counter != 1))) && _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < 1, bool(bvec3(_injected_loop_counter < 1, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))); _injected_loop_counter ++)
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
            {
             _GLF_IDENTITY(buf[GLF_merged2_0_3_79_3_1_11GLF_merged3_0_1_16_1_1_17_2_1_14next_virtual_gidsubgroup_local_idworkgroup_sizesubgroup_id.xyz.x] = 2, (_GLF_IDENTITY(buf[GLF_merged2_0_3_79_3_1_11GLF_merged3_0_1_16_1_1_17_2_1_14next_virtual_gidsubgroup_local_idworkgroup_sizesubgroup_id.xyz.x] = 2, ~ (~ (buf[GLF_merged2_0_3_79_3_1_11GLF_merged3_0_1_16_1_1_17_2_1_14next_virtual_gidsubgroup_local_idworkgroup_sizesubgroup_id.xyz.x] = 2)))) - 0u);
            }
           if(_GLF_DEAD(false))
            break;
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(vec4(injectionSwitch, _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-62.38)), float(0.0), bool(true))), 0.0))), (true ? injectionSwitch : _GLF_FUZZED(vec2(vec3(92.22, 1.6, _GLF_IDENTITY(-644.414, clamp(-644.414, _GLF_IDENTITY(-644.414, min(_GLF_IDENTITY(-644.414, (-644.414) / 1.0), -644.414)), -644.414))))))).x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))))))
          {
           do
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true))))))))
                {
                 if(_GLF_DEAD(false))
                  return;
                 barrier();
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                break;
              }
             else
              {
              }
             if(_GLF_DEAD(false))
              break;
            }
           while(_GLF_WRAPPED_LOOP(false));
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
             continue;
            }
           continue;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
           barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
        }
      }
     else
      {
       do
        {
         buf[GLF_merged2_0_3_79_3_1_11GLF_merged3_0_1_16_1_1_17_2_1_14next_virtual_gidsubgroup_local_idworkgroup_sizesubgroup_id.xyz.x] = 2;
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = (-10006 & 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < (_GLF_IDENTITY(1 & 1, min(_GLF_IDENTITY(1 & 1, int(_GLF_IDENTITY(ivec4(_GLF_IDENTITY(1 & 1, ~ (~ (1 & 1))), 0, 1, 1), ivec4(0, 0, 0, 0) ^ (ivec4(_GLF_IDENTITY(1 & 1, ~ (~ (1 & 1))), 0, 1, 1))))), 1 & 1)))); _injected_loop_counter ++)
        {
         barrier();
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(false, (false) || false))), (bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), (false) && _GLF_TRUE(true, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) < injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) < injectionSwitch.y))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x, max(injectionSwitch.x, injectionSwitch.x)) < injectionSwitch.y), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(! (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) < injectionSwitch.y), bool(bvec4(! (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) < injectionSwitch.y), true, false, true)))), ! (! (! (! (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(max(injectionSwitch.x, injectionSwitch.x), (false ? _GLF_FUZZED(6435.7014) : max(injectionSwitch.x, injectionSwitch.x)))) < injectionSwitch.y))))))))))))))) || false))));
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
