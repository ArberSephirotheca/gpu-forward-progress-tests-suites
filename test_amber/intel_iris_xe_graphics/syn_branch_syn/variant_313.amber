#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_2 {
 bvec3 _f0;
 mat4 _f1;
 bvec3 _f2;
} ;

struct _GLF_struct_0 {
 bvec3 _f0;
 uint _f1;
 mat2x3 _f2;
 mat3x2 _f3;
 bvec4 _f4;
} ;

struct _GLF_struct_1 {
 _GLF_struct_0 _f0;
 uint _f1;
 bool _f2;
} ;

struct _GLF_struct_3 {
 _GLF_struct_1 _f0;
 int i;
 _GLF_struct_2 _f1;
 ivec4 _f2;
 bool _f3;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     for(int _injected_loop_counter = (((1 << _GLF_IDENTITY(int(2), int(_GLF_IDENTITY(2, (2) << 0)))) >> _GLF_IDENTITY(int(2), int(2))) | (0 << _GLF_IDENTITY(int(6), int(6)))); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 >> _GLF_IDENTITY(int(7), int(7)))); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         continue;
        }
       return;
      }
    }
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(! _GLF_IDENTITY((false), false || ((false))), ! (! (! _GLF_IDENTITY((false), _GLF_IDENTITY(false || ((false)), (false || ((false))) && true))))), ! (_GLF_IDENTITY(! (! (false)), (_GLF_IDENTITY(! (! (false)), true && (! (! (false))))) || false)))), _GLF_IDENTITY(bool(bvec3(! (_GLF_IDENTITY(_GLF_IDENTITY(! _GLF_IDENTITY((false), false || ((false))), ! (! (! _GLF_IDENTITY((false), false || ((false)))))), ! (! (! (false))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)), (bool(bvec3(! (_GLF_IDENTITY(_GLF_IDENTITY(! _GLF_IDENTITY((false), false || ((false))), _GLF_IDENTITY(! (! (! _GLF_IDENTITY((false), false || ((false))))), ! (! (_GLF_IDENTITY(! (! (! _GLF_IDENTITY((false), false || ((false))))), _GLF_IDENTITY(bool(bvec2(! (! (! _GLF_IDENTITY((false), false || ((false))))), false)), bool(bvec4(bool(bvec2(! (! (! _GLF_IDENTITY((false), false || ((false))))), false)), true, true, false)))))))), ! (! (! (false))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))) || false)))))
  {
   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(_GLF_IDENTITY(bvec2(injectionSwitch.x > injectionSwitch.y, false), bvec2(_GLF_IDENTITY(bvec2(bvec2(injectionSwitch.x > injectionSwitch.y, false)), bvec2(bvec2(bvec2(bvec2(injectionSwitch.x > injectionSwitch.y, false))))))))))))) && true))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         return;
        }
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       for(int _injected_loop_counter = (1 ^ (0 ^ 1)); _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         else
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 | 0)); _injected_loop_counter --)
            {
             barrier();
            }
           if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))), true, true))))
            return;
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           break;
          }
        }
      }
    }
  }
 uint subgroup_id = gl_SubgroupID;
 for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    break;
  }
 uint subgroup_size = _GLF_IDENTITY(16, ~ (~ (16)));
 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(true, bool(bvec3(true, true, true))), bool(bvec2(true, false)))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (! (false)))))))
    {
     for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(8, clamp(8, 8, 8))), int(_GLF_IDENTITY(8, (8) | (8)))), (_GLF_IDENTITY(int(8), int(8))) | int(_GLF_ZERO(0.0, injectionSwitch.x)))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       do
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 return;
                }
               else
                {
                 if(_GLF_DEAD(false))
                  break;
                }
              }
            }
          }
         do
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), false || (bool(bool(false))))))))))
          barrier();
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               barrier();
              }
             else
              {
              }
            }
          }
         else
          {
          }
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))
        barrier();
      }
    }
   if(_GLF_DEAD(false))
    {
     do
      {
       return;
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   barrier();
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (_GLF_IDENTITY(false, bool(bool(false))))), false || (! (! (_GLF_IDENTITY(false, bool(bool(false))))))))))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       return;
      }
    }
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
      }
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   do
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             barrier();
            }
           else
            {
            }
          }
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
   for(int _injected_loop_counter = ((0 >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(6)) ^ 0))) & _GLF_IDENTITY(67660, (0 << _GLF_IDENTITY(int(7), int(7))) | (67660))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), ! (_GLF_IDENTITY(! (false), ! (! (! (false)))))))))))
      return;
     if(_GLF_DEAD(false))
      break;
    }
   barrier();
  }
 for(int _injected_loop_counter = 1; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > (0 << _GLF_IDENTITY(int(4), int(4)))), (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > (0 << _GLF_IDENTITY(int(4), int(4)))), (_GLF_WRAPPED_LOOP(_injected_loop_counter > (0 << _GLF_IDENTITY(int(4), int(4))))) || false)) || false); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bool(false)))))), (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, determinant(mat3(1.0, 1.0, 0.0, 0.0, _GLF_IDENTITY(1.0, (1.0) / 1.0), 1.0, 0.0, 0.0, 1.0)) * (injectionSwitch.x)))) > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + sin(0.0))))))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))) && true))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          return;
         barrier();
        }
       barrier();
      }
     barrier();
    }
   if(_GLF_DEAD(false))
    return;
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 >> _GLF_IDENTITY(int(7), int(7)))); _injected_loop_counter --)
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) && _GLF_IDENTITY(_GLF_IDENTITY(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), true && ((injectionSwitch.x < injectionSwitch.y)))), bool(bvec4(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), true && ((injectionSwitch.x < injectionSwitch.y)))), false, false, false))), (_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), true && ((injectionSwitch.x < injectionSwitch.y))))) && true))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          continue;
         for(int _injected_loop_counter = 0; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(1, (1) | 0)), _GLF_IDENTITY(bool(bool(_GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(1, (1) | 0)))), (bool(bool(_GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(1, (1) | 0))))) && true)); _injected_loop_counter ++)
          {
           if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false))), bool(bvec3(bool(bool(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false))), true, true)))))
            barrier();
           if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                barrier();
               for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), _GLF_IDENTITY((false ? _GLF_FUZZED(34756) : _GLF_IDENTITY(int(1), clamp(int(1), int(1), int(1)))), ((_GLF_IDENTITY(false ? _GLF_FUZZED(34756) : _GLF_IDENTITY(int(1), clamp(_GLF_IDENTITY(int(1), clamp(_GLF_IDENTITY(int(1), _GLF_IDENTITY(int(ivec2(int(1), 0)), max(int(ivec2(int(1), 0)), int(ivec2(int(1), 0))))), int(1), int(1))), int(1), int(1))), 0 ^ (false ? _GLF_FUZZED(34756) : _GLF_IDENTITY(int(1), clamp(int(1), int(1), int(1))))))) >> 0)))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                {
                 do
                  {
                   barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(mat4x2(_GLF_IDENTITY(injectionSwitch.y, float(mat3x2(injectionSwitch.y, 0.0, 1.0, 1.0, 0.0, sqrt(1.0)))), 0.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(0.0, 1.0)), dot(vec2(1.0, 0.0), vec2(0.0, 1.0))), 0.0, abs(0.0), 1.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x))))))));
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             if(_GLF_DEAD(false))
              return;
            }
           else
            {
            }
           do
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               break;
              }
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 barrier();
                }
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
          }
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (true)))))
          {
           barrier();
          }
         else
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
              barrier();
             barrier();
            }
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           barrier();
          }
        }
       if(_GLF_DEAD(false))
        {
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
     else
      {
      }
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
    }
   for(int _injected_loop_counter = _GLF_IDENTITY(0, (0) / 1); _GLF_WRAPPED_LOOP(_injected_loop_counter < ((_GLF_IDENTITY(1, 0 + (1)) << _GLF_IDENTITY(_GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), (_GLF_IDENTITY(int(7), min(int(7), int(7)))) * 1)), int(_GLF_IDENTITY(ivec3(_GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), (_GLF_IDENTITY(int(_GLF_IDENTITY(7, (_GLF_IDENTITY(7, (7) - _GLF_IDENTITY(0, int(ivec4(0, 0, 0, 0))))) ^ 0)), min(int(7), int(7)))) * 1)), 1, 0), ~ (_GLF_IDENTITY(~ (ivec3(_GLF_IDENTITY(int(7), _GLF_IDENTITY(_GLF_IDENTITY(int(7), min(int(7), int(7))), (_GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(7, (_GLF_IDENTITY(7, (7) - 0)) ^ 0)), min(int(7), int(7))), (_GLF_IDENTITY(int(_GLF_IDENTITY(7, (_GLF_IDENTITY(7, (7) - 0)) ^ 0)), min(int(7), int(7)))) ^ 0)) * 1)), 1, 0)), _GLF_IDENTITY(ivec3(ivec4(~ (_GLF_IDENTITY(ivec3(_GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), (_GLF_IDENTITY(int(_GLF_IDENTITY(7, (_GLF_IDENTITY(7, (7) - 0)) ^ 0)), min(int(7), int(7)))) * 1)), 1, 0), (ivec3(_GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), (_GLF_IDENTITY(int(_GLF_IDENTITY(7, (_GLF_IDENTITY(7, (7) - 0)) ^ 0)), min(int(7), int(7)))) * 1)), 1, 0)) + ivec3(0, 0, 0))), 0)), (ivec3(ivec4(~ (ivec3(_GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), (_GLF_IDENTITY(int(_GLF_IDENTITY(7, (_GLF_IDENTITY(7, (7) - 0)) ^ 0)), min(int(7), int(7)))) * 1)), 1, 0)), 0))) | (ivec3(ivec4(~ (ivec3(_GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), (_GLF_IDENTITY(int(_GLF_IDENTITY(7, (_GLF_IDENTITY(7, (7) - 0)) ^ 0)), min(int(7), int(7)))) * 1)), 1, 0)), 0)))))))))) >> _GLF_IDENTITY(int(7), int(_GLF_IDENTITY(7, (true ? 7 : _GLF_FUZZED(_injected_loop_counter))))))); _injected_loop_counter ++)
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) < injectionSwitch.y))))
      {
       barrier();
       if(_GLF_DEAD(false))
        continue;
      }
     else
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, false || (injectionSwitch.x < injectionSwitch.y)), false, true)), ! (! (bool(bvec3(_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, false || (injectionSwitch.x < injectionSwitch.y)), false, true))))))))), (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))) || false))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, ! (! (false)))))))))))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
           if(_GLF_DEAD(false))
            break;
          }
         if(_GLF_DEAD(false))
          break;
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             if(_GLF_DEAD(false))
              barrier();
            }
           else
            {
            }
          }
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
        }
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      break;
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           barrier();
          }
        }
       else
        {
        }
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
      barrier();
     return;
    }
  }
 uint workgroup_size = _GLF_IDENTITY(gl_WorkGroupSize.x, _GLF_IDENTITY(uint(uvec3(_GLF_IDENTITY(gl_WorkGroupSize.x, ~ (_GLF_IDENTITY(~ (gl_WorkGroupSize.x), 1u * (~ (_GLF_IDENTITY(gl_WorkGroupSize.x, (0u ^ 0u) ^ (_GLF_IDENTITY(gl_WorkGroupSize.x, 0u | (gl_WorkGroupSize.x))))))))), 0u, 0u)), ~ (~ (uint(uvec3(_GLF_IDENTITY(gl_WorkGroupSize.x, ~ (~ (gl_WorkGroupSize.x))), 0u, 0u))))));
 uint workgroup_id = _GLF_IDENTITY(gl_WorkGroupID.x, (gl_WorkGroupID.x) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x)));
 uint workgroup_base = _GLF_IDENTITY(workgroup_size, min(_GLF_IDENTITY(workgroup_size, (workgroup_size) ^ 0u), _GLF_IDENTITY(workgroup_size, ~ (~ (workgroup_size))))) * _GLF_IDENTITY(workgroup_id, (workgroup_id) | 0u);
 uint virtual_gid = workgroup_base + _GLF_IDENTITY(subgroup_id, ~ (~ (_GLF_IDENTITY(subgroup_id, (subgroup_id) ^ 0u)))) * subgroup_size + subgroup_local_id;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, false || (false))) || false)))
    {
     if(_GLF_DEAD(false))
      barrier();
     do
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
        }
       else
        {
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 for(int _injected_loop_counter = (_GLF_IDENTITY(1, int(ivec4(1, 0, _GLF_IDENTITY(0, ~ (~ _GLF_IDENTITY((0), 0 ^ (_GLF_IDENTITY((0), 0 | ((0))))))), 0))) & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((0 ^ int(_GLF_ZERO(0.0, injectionSwitch.x))) | _GLF_IDENTITY(0, (0) - 0))); _injected_loop_counter --)
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
    }
   do
    {
     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) && true), false, false, false)), ! (! (bool(bvec4(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) && true), false, false, false)))))))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec3(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec3(bvec2(false, true), true))), true)))))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         for(int _injected_loop_counter = 1; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, min(0, 0))), false || (_GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, min(0, 0))))); _injected_loop_counter --)
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((false) || false, bool(bool((false) || false))))))
            break;
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           else
            {
            }
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           else
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(false, (false) || false) ? _GLF_FUZZED(54.55) : injectionSwitch.x)) > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y))))
              {
              }
             else
              {
               return;
               if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bvec2(injectionSwitch.x > injectionSwitch.y, false)), (bool(bvec2(injectionSwitch.x > injectionSwitch.y, false))) || false))))))
                return;
               if(_GLF_DEAD(false))
                {
                 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                  {
                   barrier();
                  }
                }
              }
            }
          }
         if(_GLF_DEAD(false))
          barrier();
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (injectionSwitch.x < injectionSwitch.y) || false))) ? _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)) : _GLF_FUZZED(exp2(_GLF_IDENTITY(vec2(-76.95, 6.5), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? vec2(-76.95, 6.5) : _GLF_FUZZED(injectionSwitch))))))).x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      break;
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       barrier();
      }
     else
      {
      }
    }
  }
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    break;
   for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(1), int(1))); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, (1) - 0)); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 uint next_virtual_gid = _GLF_IDENTITY(workgroup_base, (false ? _GLF_FUZZED(subgroup_local_id) : _GLF_IDENTITY(workgroup_base, clamp(_GLF_IDENTITY(workgroup_base, (false ? _GLF_FUZZED(virtual_gid) : workgroup_base)), workgroup_base, workgroup_base)))) + subgroup_id * subgroup_size + ((subgroup_local_id + _GLF_IDENTITY(1, _GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), (int(_GLF_ONE(1.0, injectionSwitch.y))) ^ 0) * (1))) % subgroup_size);
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   buf[virtual_gid] = 1;
  }
 else
  {
  }
 do
  {
   if(_GLF_DEAD(false))
    continue;
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        break;
       barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       for(int _injected_loop_counter = _GLF_IDENTITY(0, (true ? _GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) << (61812 & 0))) | 0) : _GLF_FUZZED(_GLF_IDENTITY(71142, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(71142, max(71142, 71142))), (~ (_GLF_IDENTITY(71142, max(71142, 71142)))) << (0 >> _GLF_IDENTITY(int(7), int(7))))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 ^ 0)); _GLF_IDENTITY(_injected_loop_counter ++, (_GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) | (0 << _GLF_IDENTITY(int(6), int(6))))) >> 0))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
      }
    }
   else
    {
    }
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), false || (_GLF_IDENTITY(false, (false) && true)))))
    continue;
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (! (false)))))))
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
        return;
      }
     else
      {
       barrier();
      }
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     barrier();
    }
   else
    {
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)), injectionSwitch)).x, (injectionSwitch.x) - 0.0) > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, true && (false))), false || (bool(_GLF_IDENTITY(false, true && (false)))))), (bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, true && (false))), false || (bool(_GLF_IDENTITY(false, true && (false))))))) || false))))
  return;
 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), _GLF_IDENTITY(bool(bvec4(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), ! _GLF_IDENTITY((! (_GLF_IDENTITY(bool(bvec4(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, (true) && true), (injectionSwitch.x < injectionSwitch.y))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), (bool(bvec4(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) || false))), _GLF_IDENTITY(false, (false) || false) || (_GLF_IDENTITY((! (_GLF_IDENTITY(bool(bvec4(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, (true) && true), (injectionSwitch.x < injectionSwitch.y))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), (bool(bvec4(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) || false))), ((! (_GLF_IDENTITY(bool(bvec4(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, (true) && true), (injectionSwitch.x < injectionSwitch.y))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), (bool(bvec4(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) || false)))) && true))))))
  {
   if(subgroup_local_id + 1 < subgroup_size)
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      return;
     _GLF_struct_3 _GLF_struct_replacement_3 = _GLF_struct_3(_GLF_struct_1(_GLF_struct_0(bvec3(true), 1u, mat2x3(1.0), mat3x2(1.0), bvec4(true)), _GLF_IDENTITY(_GLF_IDENTITY(1u, (1u) | uint(_GLF_ZERO(0.0, injectionSwitch.x))), clamp(1u, _GLF_IDENTITY(1u, (1u) | _GLF_IDENTITY(0u, min(_GLF_IDENTITY(0u, (0u) | (0u)), 0u))), _GLF_IDENTITY(_GLF_IDENTITY(1u, _GLF_IDENTITY(uint(uvec4(1u, 1u, 0u, 1u)), ~ (~ (uint(uvec4(1u, 1u, 0u, 1u)))))), (_GLF_IDENTITY(_GLF_IDENTITY(1u, _GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(uvec4(_GLF_IDENTITY(1u, clamp(_GLF_IDENTITY(1u, (1u) >> 0u), 1u, 1u)), 1u, 0u, 1u), max(_GLF_IDENTITY(uvec4(1u, 1u, 0u, 1u), max(uvec4(1u, 1u, 0u, 1u), _GLF_IDENTITY(uvec4(1u, 1u, 0u, 1u), _GLF_IDENTITY((uvec4(1u, 1u, 0u, 1u)) | (uvec4(1u, 1u, 0u, 1u)), ((uvec4(1u, 1u, 0u, 1u)) | (uvec4(1u, 1u, 0u, 1u))) | ((uvec4(1u, 1u, 0u, 1u)) | (uvec4(1u, 1u, 0u, 1u))))))), _GLF_IDENTITY(uvec4(1u, 1u, 0u, 1u), (uvec4(1u, 1u, 0u, 1u)) | (uvec4(1u, 1u, 0u, 1u)))))), ~ (~ (uint(uvec4(1u, 1u, _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, 0u | (0u))) - uint(_GLF_ZERO(0.0, injectionSwitch.x))), 1u))))), min(_GLF_IDENTITY(_GLF_IDENTITY(uint(uvec4(1u, 1u, 0u, 1u)), ~ (~ (uint(uvec4(_GLF_IDENTITY(1u, (1u) << 0u), 1u, 0u, 1u))))), (_GLF_IDENTITY(_GLF_IDENTITY(uint(uvec4(1u, 1u, 0u, _GLF_IDENTITY(1u, min(1u, 1u)))), ~ (~ (uint(uvec4(1u, 1u, 0u, 1u))))), (_GLF_IDENTITY(uint(uvec4(1u, 1u, 0u, _GLF_IDENTITY(1u, min(1u, 1u)))), ~ (~ (uint(uvec4(1u, 1u, 0u, 1u)))))) >> 0u)) / 1u), _GLF_IDENTITY(uint(uvec4(1u, 1u, 0u, 1u)), _GLF_IDENTITY(~ (~ (uint(uvec4(1u, 1u, 0u, 1u)))), (_GLF_IDENTITY(~ (~ (uint(uvec4(1u, 1u, 0u, 1u)))), (~ (~ (uint(uvec4(1u, 1u, 0u, 1u))))) ^ 0u)) / 1u))))), (_GLF_IDENTITY(1u, _GLF_IDENTITY(uint(uvec4(1u, 1u, 0u, 1u)), ~ (~ (uint(uvec4(1u, 1u, _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, max(0u, 0u))) + 0u), 1u))))))) | (_GLF_IDENTITY(1u, _GLF_IDENTITY(uint(uvec4(_GLF_IDENTITY(1u, max(_GLF_IDENTITY(1u, (1u) | (1u)), 1u)), 1u, 0u, _GLF_IDENTITY(1u, min(1u, 1u)))), ~ (~ (uint(uvec4(1u, 1u, 0u, 1u))))))))) | (_GLF_IDENTITY(1u, _GLF_IDENTITY(uint(uvec4(1u, 1u, 0u, 1u)), ~ (~ (uint(uvec4(1u, 1u, 0u, 1u)))))))))), true), 0, _GLF_struct_2(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(true, true), _GLF_IDENTITY(bvec2(bvec3(_GLF_IDENTITY(bvec2(true, true), bvec2(bvec2(bvec2(true, true)))), false)), bvec2(bvec3(bvec2(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(true, true), bvec2(bvec2(bvec2(true, true)))), bvec2(bvec3(_GLF_IDENTITY(bvec2(true, true), bvec2(bvec2(bvec2(true, true)))), false))), false)), true))))), bool(bvec2(bool(_GLF_IDENTITY(bvec2(true, true), _GLF_IDENTITY(bvec2(bvec3(_GLF_IDENTITY(bvec2(true, true), bvec2(bvec2(bvec2(true, true)))), false)), bvec2(bvec3(bvec2(bvec3(_GLF_IDENTITY(bvec2(true, true), bvec2(bvec2(bvec2(true, true)))), false)), true))))), false)))), _GLF_IDENTITY(! (! (_GLF_IDENTITY(true, bool(bvec4(true, true, false, false))))), bool(bool(_GLF_IDENTITY(! (! (_GLF_IDENTITY(true, bool(bvec4(true, true, false, false))))), (! (! (_GLF_IDENTITY(true, bool(bvec4(true, true, false, false)))))) && true)))))), _GLF_IDENTITY(mat4(1.0), _GLF_IDENTITY((_GLF_IDENTITY(true ? mat4(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-1846.1080)), float(1.0), bool(true)))) : _GLF_FUZZED(mat4(-4722.9446, -634.121, -42.98, 7.2, 0.3, -2.9, 948.864, 3.5, 90.35, 206.183, -7.7, -1.0, 1167.6396, 12.00, -15.07, -20.89)), _GLF_IDENTITY((false ? _GLF_FUZZED(_GLF_IDENTITY(mat4(897.317, -215.730, 3024.6030, 2.1, -9.0, 73.20, 74.58, -3.2, 401.074, -3118.2916, -37.35, 4.4, 1113.9041, -1.2, _GLF_IDENTITY(7.6, float(_GLF_IDENTITY(vec2(7.6, 0.0), clamp(vec2(7.6, 0.0), vec2(7.6, 0.0), vec2(7.6, 0.0))))), -98.63), (mat4(_GLF_IDENTITY(897.317, min(_GLF_IDENTITY(897.317, (897.317) + 0.0), _GLF_IDENTITY(897.317, mix(float(_GLF_FUZZED(-4094.3087)), float(897.317), bool(true))))), _GLF_IDENTITY(-215.730, clamp(-215.730, -215.730, -215.730)), 3024.6030, 2.1, -9.0, 73.20, 74.58, -3.2, 401.074, -3118.2916, -37.35, 4.4, 1113.9041, -1.2, _GLF_IDENTITY(_GLF_IDENTITY(7.6, float(vec2(7.6, 0.0))), mix(float(_GLF_FUZZED(-1840.2437)), float(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(7.6, clamp(_GLF_IDENTITY(7.6, _GLF_ONE(1.0, injectionSwitch.y) * (7.6)), 7.6, _GLF_IDENTITY(7.6, (7.6) + 0.0))), float(vec2(7.6, 0.0))), max(_GLF_IDENTITY(7.6, float(vec2(7.6, 0.0))), _GLF_IDENTITY(_GLF_IDENTITY(7.6, float(vec2(7.6, 0.0))), mix(float(_GLF_FUZZED(-78.22)), float(_GLF_IDENTITY(_GLF_IDENTITY(7.6, float(vec2(7.6, 0.0))), (_GLF_IDENTITY(7.6, float(vec2(7.6, 0.0)))) * 1.0)), bool(true)))))), bool(_GLF_IDENTITY(true, (true) || false)))), -98.63)) - mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))) : _GLF_IDENTITY(true ? mat4(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(_GLF_IDENTITY(-1846.1080, clamp(-1846.1080, _GLF_IDENTITY(-1846.1080, float(vec4(-1846.1080, 0.0, 1.0, 1.0))), -1846.1080)))), float(1.0), bool(true)))) : _GLF_FUZZED(mat4(-4722.9446, -634.121, -42.98, 7.2, 0.3, -2.9, _GLF_IDENTITY(948.864, mix(float(_GLF_FUZZED(16.50)), float(948.864), bool(true))), 3.5, 90.35, 206.183, -7.7, _GLF_IDENTITY(_GLF_IDENTITY(-1.0, max(-1.0, -1.0)), mix(float(-1.0), float(_GLF_FUZZED(754.269)), bool(false))), 1167.6396, 12.00, -15.07, -20.89)), (_GLF_IDENTITY(true ? true ? mat4(_GLF_IDENTITY(1.0, _GLF_IDENTITY(mix(float(_GLF_FUZZED(-1846.1080)), float(1.0), _GLF_IDENTITY(bool(true), (bool(true)) || false)), clamp(mix(float(_GLF_FUZZED(-1846.1080)), float(1.0), bool(true)), mix(float(_GLF_FUZZED(-1846.1080)), float(1.0), bool(true)), _GLF_IDENTITY(mix(float(_GLF_FUZZED(-1846.1080)), float(1.0), bool(true)), (true ? mix(float(_GLF_FUZZED(-1846.1080)), float(1.0), bool(true)) : _GLF_FUZZED(2417.0702))))))) : _GLF_IDENTITY(_GLF_FUZZED(mat4(_GLF_IDENTITY(-4722.9446, min(-4722.9446, _GLF_IDENTITY(-4722.9446, clamp(-4722.9446, -4722.9446, -4722.9446)))), -634.121, -42.98, _GLF_IDENTITY(7.2, max(7.2, 7.2)), 0.3, -2.9, 948.864, 3.5, 90.35, _GLF_IDENTITY(206.183, mix(float(206.183), float(_GLF_FUZZED((- (-553.911 * -1.0)))), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), _GLF_IDENTITY(-7.7, abs(1.0) * (_GLF_IDENTITY(-7.7, max(-7.7, -7.7)))), -1.0, 1167.6396, 12.00, -15.07, -20.89)), (false ? _GLF_FUZZED(mat4(3.3, -8.5, 4.0, -6644.7494, -91.42, -73.52, -4.0, -6611.9098, -4342.6723, 34.56, -730.602, _GLF_IDENTITY(8896.6149, min(8896.6149, _GLF_IDENTITY(8896.6149, clamp(8896.6149, 8896.6149, 8896.6149)))), 1.3, 5526.0322, 7.8, 7.2)) : _GLF_IDENTITY(_GLF_FUZZED(mat4(-4722.9446, -634.121, -42.98, 7.2, 0.3, -2.9, 948.864, 3.5, _GLF_IDENTITY(90.35, clamp(90.35, _GLF_IDENTITY(90.35, (false ? _GLF_FUZZED(-8.1) : 90.35)), 90.35)), 206.183, -7.7, -1.0, 1167.6396, 12.00, -15.07, -20.89)), (_GLF_FUZZED(mat4(-4722.9446, -634.121, -42.98, 7.2, 0.3, -2.9, 948.864, 3.5, _GLF_IDENTITY(90.35, clamp(90.35, _GLF_IDENTITY(90.35, (false ? _GLF_FUZZED(-8.1) : 90.35)), 90.35)), 206.183, -7.7, -1.0, 1167.6396, 12.00, -15.07, _GLF_IDENTITY(-20.89, (false ? _GLF_FUZZED(7.2) : _GLF_IDENTITY(-20.89, (-20.89) - 0.0)))))) / mat4(1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0)))) : _GLF_FUZZED(mat4(2.4, 5.6, 2.0, -5416.8858, 1.7, -1658.1963, -491.735, 8847.9344, -108.948, -70.73, 8.8, 7.0, 6.9, _GLF_IDENTITY(794.610, (794.610) + 0.0), 6414.8967, -654.395)), (true ? true ? mat4(_GLF_IDENTITY(1.0, _GLF_IDENTITY(mix(float(_GLF_FUZZED(-1846.1080)), float(1.0), _GLF_IDENTITY(bool(true), (bool(true)) || false)), clamp(mix(float(_GLF_FUZZED(-1846.1080)), float(1.0), bool(true)), mix(float(_GLF_FUZZED(-1846.1080)), float(1.0), bool(true)), _GLF_IDENTITY(mix(float(_GLF_FUZZED(-1846.1080)), float(1.0), bool(true)), (true ? mix(float(_GLF_FUZZED(-1846.1080)), float(1.0), bool(true)) : _GLF_FUZZED(2417.0702))))))) : _GLF_IDENTITY(_GLF_FUZZED(mat4(_GLF_IDENTITY(-4722.9446, min(-4722.9446, _GLF_IDENTITY(-4722.9446, clamp(-4722.9446, -4722.9446, -4722.9446)))), -634.121, -42.98, _GLF_IDENTITY(7.2, max(7.2, 7.2)), 0.3, -2.9, 948.864, 3.5, 90.35, _GLF_IDENTITY(206.183, mix(float(206.183), float(_GLF_FUZZED((- (-553.911 * -1.0)))), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), _GLF_IDENTITY(-7.7, abs(1.0) * (_GLF_IDENTITY(-7.7, max(-7.7, -7.7)))), -1.0, 1167.6396, 12.00, -15.07, -20.89)), (false ? _GLF_FUZZED(mat4(3.3, -8.5, 4.0, -6644.7494, -91.42, -73.52, -4.0, -6611.9098, -4342.6723, 34.56, -730.602, _GLF_IDENTITY(8896.6149, min(8896.6149, _GLF_IDENTITY(8896.6149, clamp(8896.6149, 8896.6149, 8896.6149)))), 1.3, 5526.0322, 7.8, 7.2)) : _GLF_IDENTITY(_GLF_FUZZED(mat4(-4722.9446, -634.121, -42.98, 7.2, 0.3, -2.9, 948.864, 3.5, _GLF_IDENTITY(90.35, clamp(90.35, _GLF_IDENTITY(90.35, (false ? _GLF_FUZZED(-8.1) : 90.35)), 90.35)), 206.183, -7.7, -1.0, 1167.6396, 12.00, -15.07, -20.89)), (_GLF_FUZZED(mat4(-4722.9446, -634.121, -42.98, 7.2, 0.3, -2.9, 948.864, 3.5, _GLF_IDENTITY(90.35, clamp(90.35, _GLF_IDENTITY(90.35, (false ? _GLF_FUZZED(-8.1) : 90.35)), 90.35)), 206.183, -7.7, -1.0, 1167.6396, 12.00, -15.07, _GLF_IDENTITY(-20.89, (false ? _GLF_FUZZED(7.2) : _GLF_IDENTITY(-20.89, (-20.89) - 0.0)))))) / mat4(1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0)))) : _GLF_FUZZED(mat4(2.4, 5.6, 2.0, -5416.8858, 1.7, -1658.1963, -491.735, 8847.9344, -108.948, -70.73, 8.8, 7.0, 6.9, _GLF_IDENTITY(794.610, (794.610) + 0.0), 6414.8967, -654.395))) - mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))))), transpose(transpose((_GLF_IDENTITY(false, false || (false)) ? _GLF_FUZZED(_GLF_IDENTITY(mat4(897.317, -215.730, 3024.6030, 2.1, -9.0, 73.20, 74.58, -3.2, 401.074, -3118.2916, -37.35, 4.4, 1113.9041, -1.2, _GLF_IDENTITY(7.6, float(_GLF_IDENTITY(vec2(7.6, 0.0), clamp(vec2(7.6, 0.0), vec2(7.6, 0.0), vec2(7.6, 0.0))))), -98.63), (mat4(897.317, _GLF_IDENTITY(-215.730, clamp(-215.730, -215.730, -215.730)), 3024.6030, 2.1, -9.0, 73.20, 74.58, -3.2, _GLF_IDENTITY(401.074, mix(float(_GLF_IDENTITY(401.074, float(mat2x4(401.074, length(vec2(0.0, 0.0)), 1.0, 1.0, 0.0, 0.0, 1.0, 1.0)))), float(_GLF_FUZZED(-568.347)), bool(false))), -3118.2916, -37.35, 4.4, 1113.9041, -1.2, _GLF_IDENTITY(_GLF_IDENTITY(7.6, float(vec2(7.6, 0.0))), mix(float(_GLF_FUZZED(-1840.2437)), float(_GLF_IDENTITY(_GLF_IDENTITY(7.6, float(vec2(7.6, 0.0))), max(_GLF_IDENTITY(7.6, float(vec2(7.6, 0.0))), _GLF_IDENTITY(7.6, float(vec2(7.6, 0.0)))))), bool(true))), -98.63)) - mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))) : _GLF_IDENTITY(true ? mat4(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(_GLF_IDENTITY(-1846.1080, clamp(-1846.1080, _GLF_IDENTITY(-1846.1080, float(vec4(-1846.1080, 0.0, 1.0, 1.0))), -1846.1080)))), float(1.0), bool(true)))) : _GLF_FUZZED(_GLF_IDENTITY(mat4(-4722.9446, -634.121, -42.98, 7.2, 0.3, -2.9, _GLF_IDENTITY(948.864, mix(float(_GLF_FUZZED(16.50)), float(948.864), bool(true))), 3.5, 90.35, 206.183, -7.7, _GLF_IDENTITY(-1.0, mix(float(-1.0), float(_GLF_FUZZED(754.269)), bool(false))), 1167.6396, _GLF_IDENTITY(12.00, max(_GLF_IDENTITY(12.00, mix(float(12.00), float(_GLF_FUZZED(39.47)), bool(false))), 12.00)), -15.07, -20.89), (mat4(-4722.9446, -634.121, -42.98, 7.2, 0.3, -2.9, _GLF_IDENTITY(948.864, mix(float(_GLF_FUZZED(16.50)), float(948.864), bool(true))), 3.5, 90.35, 206.183, -7.7, _GLF_IDENTITY(-1.0, mix(float(-1.0), float(_GLF_FUZZED(754.269)), bool(false))), 1167.6396, _GLF_IDENTITY(12.00, max(_GLF_IDENTITY(12.00, mix(float(12.00), float(_GLF_FUZZED(39.47)), bool(false))), 12.00)), -15.07, -20.89)) - mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))), (true ? true ? mat4(_GLF_IDENTITY(1.0, _GLF_IDENTITY(mix(float(_GLF_FUZZED(-1846.1080)), float(1.0), bool(true)), clamp(mix(float(_GLF_FUZZED(-1846.1080)), float(1.0), bool(true)), mix(float(_GLF_FUZZED(-1846.1080)), float(_GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, (1.0) / 1.0), _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(9.2)))))), bool(true)), _GLF_IDENTITY(mix(float(_GLF_FUZZED(-1846.1080)), float(1.0), bool(true)), (true ? mix(float(_GLF_FUZZED(-1846.1080)), float(1.0), bool(true)) : _GLF_FUZZED(2417.0702))))))) : _GLF_IDENTITY(_GLF_FUZZED(mat4(_GLF_IDENTITY(-4722.9446, min(-4722.9446, _GLF_IDENTITY(-4722.9446, clamp(-4722.9446, -4722.9446, -4722.9446)))), -634.121, -42.98, _GLF_IDENTITY(7.2, max(7.2, 7.2)), 0.3, -2.9, 948.864, 3.5, 90.35, _GLF_IDENTITY(206.183, mix(float(_GLF_IDENTITY(206.183, min(206.183, 206.183))), float(_GLF_FUZZED((- (-553.911 * -1.0)))), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), _GLF_IDENTITY(-7.7, abs(1.0) * (_GLF_IDENTITY(_GLF_IDENTITY(-7.7, clamp(_GLF_IDENTITY(-7.7, max(-7.7, -7.7)), -7.7, _GLF_IDENTITY(-7.7, mix(float(_GLF_FUZZED(-7.7)), float(-7.7), bool(true))))), max(-7.7, -7.7)))), -1.0, 1167.6396, 12.00, -15.07, -20.89)), (false ? _GLF_FUZZED(mat4(3.3, -8.5, 4.0, -6644.7494, -91.42, -73.52, _GLF_IDENTITY(-4.0, min(-4.0, -4.0)), -6611.9098, -4342.6723, 34.56, -730.602, _GLF_IDENTITY(8896.6149, min(8896.6149, _GLF_IDENTITY(8896.6149, clamp(8896.6149, 8896.6149, 8896.6149)))), 1.3, 5526.0322, 7.8, 7.2)) : _GLF_FUZZED(mat4(-4722.9446, -634.121, -42.98, 7.2, 0.3, -2.9, 948.864, 3.5, _GLF_IDENTITY(90.35, clamp(90.35, _GLF_IDENTITY(90.35, (false ? _GLF_FUZZED(-8.1) : 90.35)), 90.35)), 206.183, -7.7, -1.0, 1167.6396, 12.00, -15.07, -20.89)))) : _GLF_FUZZED(mat4(2.4, 5.6, 2.0, -5416.8858, 1.7, -1658.1963, -491.735, 8847.9344, -108.948, _GLF_IDENTITY(-70.73, clamp(-70.73, -70.73, _GLF_IDENTITY(-70.73, mix(float(-70.73), float(_GLF_FUZZED(437.509)), bool(false))))), 8.8, 7.0, 6.9, _GLF_IDENTITY(794.610, (794.610) + 0.0), 6414.8967, -654.395)))))))))), transpose(transpose((_GLF_IDENTITY(true ? mat4(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-1846.1080)), float(1.0), bool(true)))) : _GLF_FUZZED(mat4(-4722.9446, -634.121, -42.98, 7.2, _GLF_IDENTITY(0.3, clamp(0.3, 0.3, 0.3)), -2.9, 948.864, 3.5, 90.35, 206.183, -7.7, -1.0, 1167.6396, 12.00, -15.07, -20.89)), _GLF_IDENTITY((false ? _GLF_FUZZED(mat4(897.317, -215.730, 3024.6030, 2.1, -9.0, 73.20, 74.58, -3.2, 401.074, _GLF_IDENTITY(-3118.2916, (-3118.2916) * 1.0), -37.35, 4.4, 1113.9041, _GLF_IDENTITY(-1.2, (false ? _GLF_FUZZED(-74.43) : -1.2)), _GLF_IDENTITY(_GLF_IDENTITY(7.6, mix(float(_GLF_IDENTITY(7.6, float(vec3(7.6, 1.0, 1.0)))), float(_GLF_FUZZED(6708.5977)), bool(false))), max(_GLF_IDENTITY(7.6, mix(float(_GLF_IDENTITY(7.6, float(vec3(7.6, 1.0, 1.0)))), float(_GLF_FUZZED(6708.5977)), bool(false))), _GLF_IDENTITY(7.6, mix(float(_GLF_IDENTITY(7.6, float(vec3(7.6, 1.0, 1.0)))), float(_GLF_FUZZED(6708.5977)), bool(false))))), -98.63)) : _GLF_IDENTITY(true ? _GLF_IDENTITY(mat4(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(_GLF_IDENTITY(-1846.1080, clamp(-1846.1080, -1846.1080, -1846.1080)))), float(1.0), bool(_GLF_IDENTITY(true, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)))).x < injectionSwitch.y)) && (true)))))), (mat4(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(_GLF_IDENTITY(-1846.1080, clamp(-1846.1080, -1846.1080, -1846.1080)))), float(1.0), bool(_GLF_IDENTITY(true, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)))).x < injectionSwitch.y)) && (true))))))) * mat4(1.0)) : _GLF_FUZZED(mat4(-4722.9446, -634.121, _GLF_IDENTITY(-42.98, (false ? _GLF_FUZZED(3.3) : -42.98)), 7.2, 0.3, -2.9, 948.864, 3.5, _GLF_IDENTITY(90.35, (90.35) - 0.0), _GLF_IDENTITY(206.183, clamp(_GLF_IDENTITY(206.183, (false ? _GLF_FUZZED(_GLF_IDENTITY(0.4, min(0.4, _GLF_IDENTITY(0.4, mix(float(_GLF_FUZZED(-1.7)), float(_GLF_IDENTITY(0.4, (0.4) / 1.0)), bool(true)))))) : 206.183)), 206.183, 206.183)), -7.7, -1.0, 1167.6396, 12.00, _GLF_IDENTITY(-15.07, float(mat4x3(-15.07, 1.0, 1.0, log(1.0), 1.0, 0.0, round(length(normalize(vec4(_GLF_IDENTITY(1.0, max(1.0, _GLF_IDENTITY(1.0, (1.0) + determinant(mat4(0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))))), 1.0, 1.0, 1.0)))), determinant(mat2(0.0, 1.0, 0.0, 0.0)), cos(0.0), 1.0, 1.0, 0.0))), -20.89)), (_GLF_IDENTITY(true ? true ? mat4(_GLF_IDENTITY(1.0, _GLF_IDENTITY(mix(float(_GLF_FUZZED(-1846.1080)), float(1.0), bool(true)), clamp(mix(float(_GLF_FUZZED(_GLF_IDENTITY(-1846.1080, max(-1846.1080, -1846.1080)))), float(1.0), bool(true)), mix(float(_GLF_FUZZED(-1846.1080)), float(1.0), bool(true)), _GLF_IDENTITY(mix(float(_GLF_FUZZED(-1846.1080)), float(1.0), bool(true)), float(mat3(mix(float(_GLF_FUZZED(-1846.1080)), float(1.0), bool(true)), 1.0, 0.0, 0.0, 1.0, 1.0, sqrt(0.0), tan(0.0), 0.0))))))) : _GLF_IDENTITY(_GLF_FUZZED(mat4(-4722.9446, -634.121, -42.98, 7.2, 0.3, -2.9, 948.864, 3.5, 90.35, 206.183, -7.7, -1.0, 1167.6396, 12.00, -15.07, -20.89)), (_GLF_IDENTITY(false, ! (! (false))) ? _GLF_IDENTITY(_GLF_FUZZED(mat4(3.3, -8.5, 4.0, -6644.7494, -91.42, -73.52, -4.0, -6611.9098, -4342.6723, 34.56, -730.602, 8896.6149, 1.3, 5526.0322, 7.8, 7.2)), (true ? _GLF_IDENTITY(_GLF_FUZZED(mat4(3.3, -8.5, 4.0, -6644.7494, -91.42, -73.52, -4.0, -6611.9098, -4342.6723, 34.56, -730.602, 8896.6149, 1.3, 5526.0322, 7.8, 7.2)), (_GLF_FUZZED(mat4(3.3, -8.5, 4.0, -6644.7494, -91.42, -73.52, -4.0, -6611.9098, -4342.6723, 34.56, -730.602, 8896.6149, 1.3, 5526.0322, 7.8, 7.2))) / mat4(1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0)) : _GLF_FUZZED(mat4(711.255, -9066.0512, -4.1, -4.3, -994.383, 2789.2305, 0.7, -0.3, 972.829, 938.506, -9.5, 178.076, 2337.9580, 5.0, -8898.0450, 245.936)))) : _GLF_FUZZED(mat4(-4722.9446, -634.121, -42.98, 7.2, 0.3, -2.9, 948.864, 3.5, 90.35, 206.183, -7.7, _GLF_IDENTITY(-1.0, min(-1.0, -1.0)), 1167.6396, 12.00, -15.07, _GLF_IDENTITY(-20.89, min(_GLF_IDENTITY(-20.89, (true ? -20.89 : _GLF_FUZZED(-77.21))), _GLF_IDENTITY(-20.89, mix(float(_GLF_FUZZED(6.8)), float(-20.89), bool(true))))))))) : _GLF_FUZZED(mat4(2.4, 5.6, 2.0, _GLF_IDENTITY(-5416.8858, (-5416.8858) / 1.0), 1.7, -1658.1963, -491.735, 8847.9344, -108.948, -70.73, _GLF_IDENTITY(8.8, clamp(8.8, _GLF_IDENTITY(8.8, (_GLF_IDENTITY(8.8, float(float(8.8)))) - 0.0), _GLF_IDENTITY(8.8, max(_GLF_IDENTITY(8.8, (8.8) / 1.0), 8.8)))), 7.0, 6.9, _GLF_IDENTITY(794.610, (794.610) + _GLF_IDENTITY(0.0, float(vec3(0.0, tan(0.0), 0.0)))), 6414.8967, -654.395)), (true ? true ? mat4(_GLF_IDENTITY(1.0, _GLF_IDENTITY(mix(float(_GLF_FUZZED(-1846.1080)), float(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-7.4)))), bool(true)), clamp(mix(float(_GLF_FUZZED(_GLF_IDENTITY(-1846.1080, max(-1846.1080, -1846.1080)))), float(1.0), bool(true)), _GLF_IDENTITY(mix(float(_GLF_FUZZED(-1846.1080)), float(1.0), bool(true)), (mix(float(_GLF_FUZZED(-1846.1080)), float(1.0), bool(true))) / sqrt(1.0)), mix(float(_GLF_FUZZED(-1846.1080)), float(1.0), bool(true)))))) : _GLF_IDENTITY(_GLF_FUZZED(mat4(-4722.9446, -634.121, -42.98, 7.2, 0.3, -2.9, 948.864, 3.5, 90.35, 206.183, -7.7, -1.0, 1167.6396, 12.00, -15.07, -20.89)), (_GLF_IDENTITY(false, ! (! (false))) ? _GLF_FUZZED(mat4(3.3, -8.5, 4.0, -6644.7494, -91.42, -73.52, -4.0, -6611.9098, -4342.6723, 34.56, -730.602, _GLF_IDENTITY(8896.6149, min(8896.6149, 8896.6149)), 1.3, 5526.0322, 7.8, 7.2)) : _GLF_FUZZED(mat4(-4722.9446, -634.121, -42.98, 7.2, 0.3, -2.9, 948.864, 3.5, 90.35, 206.183, -7.7, _GLF_IDENTITY(-1.0, min(-1.0, -1.0)), 1167.6396, 12.00, -15.07, _GLF_IDENTITY(-20.89, min(_GLF_IDENTITY(-20.89, (true ? -20.89 : _GLF_IDENTITY(_GLF_FUZZED(-77.21), clamp(_GLF_FUZZED(-77.21), _GLF_FUZZED(-77.21), _GLF_FUZZED(-77.21))))), _GLF_IDENTITY(-20.89, mix(float(_GLF_FUZZED(6.8)), float(-20.89), bool(_GLF_IDENTITY(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (true))))))))))) : _GLF_FUZZED(mat4(2.4, 5.6, 2.0, _GLF_IDENTITY(-5416.8858, (-5416.8858) / 1.0), 1.7, -1658.1963, -491.735, 8847.9344, -108.948, -70.73, _GLF_IDENTITY(8.8, clamp(8.8, _GLF_IDENTITY(8.8, (_GLF_IDENTITY(8.8, float(float(8.8)))) - 0.0), _GLF_IDENTITY(_GLF_IDENTITY(8.8, max(_GLF_IDENTITY(8.8, (8.8) / 1.0), 8.8)), (_GLF_IDENTITY(8.8, max(_GLF_IDENTITY(8.8, (8.8) / 1.0), 8.8))) / sqrt(1.0)))), 7.0, 6.9, _GLF_IDENTITY(_GLF_IDENTITY(794.610, (794.610) + _GLF_IDENTITY(0.0, float(vec3(0.0, tan(0.0), 0.0)))), (_GLF_IDENTITY(794.610, (794.610) + _GLF_IDENTITY(0.0, float(_GLF_IDENTITY(vec3(0.0, tan(0.0), 0.0), clamp(vec3(0.0, tan(0.0), 0.0), vec3(0.0, tan(0.0), 0.0), vec3(0.0, tan(0.0), 0.0))))))) + 0.0), 6414.8967, -654.395))) - mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))))), transpose(transpose((false ? _GLF_FUZZED(mat4(897.317, -215.730, 3024.6030, 2.1, -9.0, 73.20, 74.58, -3.2, 401.074, -3118.2916, -37.35, 4.4, 1113.9041, -1.2, _GLF_IDENTITY(7.6, mix(float(_GLF_IDENTITY(7.6, float(vec3(7.6, 1.0, 1.0)))), float(_GLF_FUZZED(6708.5977)), bool(false))), -98.63)) : _GLF_IDENTITY(true ? mat4(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(_GLF_IDENTITY(-1846.1080, clamp(-1846.1080, -1846.1080, -1846.1080)))), float(1.0), bool(_GLF_IDENTITY(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (true)))))) : _GLF_FUZZED(mat4(-4722.9446, -634.121, -42.98, 7.2, 0.3, -2.9, 948.864, 3.5, 90.35, _GLF_IDENTITY(206.183, clamp(_GLF_IDENTITY(206.183, (false ? _GLF_FUZZED(0.4) : 206.183)), 206.183, 206.183)), -7.7, -1.0, 1167.6396, 12.00, _GLF_IDENTITY(-15.07, float(mat4x3(-15.07, 1.0, 1.0, log(1.0), 1.0, _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED((1.0 * vec3(-1.1, -6455.7907, -1891.9758).t))), float(0.0), bool(true))), round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), determinant(mat2(0.0, 1.0, 0.0, 0.0)), cos(0.0), 1.0, 1.0, 0.0))), -20.89)), (_GLF_IDENTITY(true ? true ? mat4(_GLF_IDENTITY(1.0, _GLF_IDENTITY(mix(float(_GLF_FUZZED(-1846.1080)), float(1.0), bool(true)), _GLF_IDENTITY(clamp(mix(float(_GLF_FUZZED(_GLF_IDENTITY(-1846.1080, max(-1846.1080, -1846.1080)))), float(1.0), bool(true)), mix(float(_GLF_FUZZED(-1846.1080)), float(1.0), bool(true)), mix(float(_GLF_FUZZED(-1846.1080)), float(1.0), bool(true))), max(clamp(mix(float(_GLF_FUZZED(_GLF_IDENTITY(-1846.1080, max(-1846.1080, -1846.1080)))), float(1.0), bool(true)), mix(float(_GLF_FUZZED(-1846.1080)), float(1.0), bool(true)), mix(float(_GLF_FUZZED(-1846.1080)), float(1.0), bool(true))), clamp(mix(float(_GLF_FUZZED(_GLF_IDENTITY(-1846.1080, max(-1846.1080, -1846.1080)))), float(1.0), bool(true)), mix(float(_GLF_FUZZED(-1846.1080)), float(1.0), bool(true)), mix(float(_GLF_FUZZED(-1846.1080)), float(1.0), bool(true)))))))) : _GLF_IDENTITY(_GLF_FUZZED(mat4(-4722.9446, -634.121, -42.98, 7.2, 0.3, -2.9, 948.864, 3.5, _GLF_IDENTITY(90.35, min(90.35, _GLF_IDENTITY(90.35, max(90.35, _GLF_IDENTITY(90.35, clamp(90.35, 90.35, 90.35)))))), 206.183, -7.7, -1.0, 1167.6396, 12.00, -15.07, -20.89)), (_GLF_IDENTITY(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, false, true, false)), (bool(bvec4(false, false, true, false))) && true)))), ! (! (false))) ? _GLF_FUZZED(mat4(3.3, -8.5, 4.0, -6644.7494, -91.42, -73.52, -4.0, -6611.9098, -4342.6723, 34.56, -730.602, 8896.6149, 1.3, _GLF_IDENTITY(5526.0322, mix(float(5526.0322), float(_GLF_FUZZED(0.2)), bool(false))), 7.8, 7.2)) : _GLF_FUZZED(mat4(-4722.9446, -634.121, -42.98, 7.2, 0.3, -2.9, 948.864, 3.5, 90.35, 206.183, -7.7, _GLF_IDENTITY(-1.0, min(-1.0, -1.0)), 1167.6396, 12.00, -15.07, _GLF_IDENTITY(-20.89, min(_GLF_IDENTITY(-20.89, (true ? -20.89 : _GLF_FUZZED(-77.21))), _GLF_IDENTITY(-20.89, mix(float(_GLF_FUZZED(6.8)), float(-20.89), bool(true))))))))) : _GLF_FUZZED(mat4(2.4, 5.6, 2.0, _GLF_IDENTITY(-5416.8858, (-5416.8858) / 1.0), 1.7, -1658.1963, -491.735, 8847.9344, -108.948, -70.73, _GLF_IDENTITY(8.8, clamp(8.8, _GLF_IDENTITY(8.8, (_GLF_IDENTITY(8.8, float(float(8.8)))) - 0.0), _GLF_IDENTITY(8.8, max(_GLF_IDENTITY(8.8, (8.8) / 1.0), 8.8)))), 7.0, 6.9, _GLF_IDENTITY(794.610, (794.610) + _GLF_IDENTITY(0.0, float(vec3(0.0, tan(0.0), 0.0)))), 6414.8967, _GLF_IDENTITY(-654.395, float(mat4x2(-654.395, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0))))), (true ? true ? mat4(_GLF_IDENTITY(1.0, _GLF_IDENTITY(mix(float(_GLF_FUZZED(_GLF_IDENTITY(-1846.1080, max(_GLF_IDENTITY(-1846.1080, max(-1846.1080, -1846.1080)), -1846.1080)))), float(1.0), bool(true)), clamp(mix(float(_GLF_FUZZED(_GLF_IDENTITY(-1846.1080, max(-1846.1080, -1846.1080)))), float(1.0), _GLF_IDENTITY(bool(true), ! (! (_GLF_IDENTITY(bool(true), false || (bool(true))))))), mix(float(_GLF_FUZZED(-1846.1080)), float(1.0), bool(true)), mix(float(_GLF_FUZZED(-1846.1080)), float(1.0), bool(true)))))) : _GLF_IDENTITY(_GLF_FUZZED(mat4(-4722.9446, -634.121, -42.98, 7.2, 0.3, -2.9, 948.864, 3.5, 90.35, 206.183, -7.7, -1.0, 1167.6396, 12.00, -15.07, -20.89)), (_GLF_IDENTITY(false, ! (! (false))) ? _GLF_FUZZED(mat4(3.3, _GLF_IDENTITY(-8.5, float(_GLF_IDENTITY(mat2x3(_GLF_IDENTITY(-8.5, mix(float(_GLF_FUZZED(-5678.1563)), float(-8.5), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), 0.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0), transpose(transpose(mat2x3(_GLF_IDENTITY(-8.5, mix(float(_GLF_FUZZED(-5678.1563)), float(-8.5), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), 0.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0)))))), 4.0, -6644.7494, -91.42, -73.52, -4.0, -6611.9098, -4342.6723, 34.56, -730.602, 8896.6149, 1.3, 5526.0322, 7.8, 7.2)) : _GLF_FUZZED(mat4(-4722.9446, -634.121, -42.98, 7.2, 0.3, -2.9, 948.864, 3.5, 90.35, 206.183, -7.7, _GLF_IDENTITY(-1.0, min(-1.0, -1.0)), 1167.6396, 12.00, -15.07, _GLF_IDENTITY(-20.89, min(_GLF_IDENTITY(-20.89, (true ? -20.89 : _GLF_FUZZED(-77.21))), _GLF_IDENTITY(-20.89, mix(float(_GLF_FUZZED(6.8)), float(-20.89), bool(true))))))))) : _GLF_FUZZED(mat4(2.4, 5.6, 2.0, _GLF_IDENTITY(-5416.8858, (-5416.8858) / _GLF_IDENTITY(1.0, max(1.0, 1.0))), 1.7, -1658.1963, -491.735, 8847.9344, -108.948, -70.73, _GLF_IDENTITY(8.8, clamp(8.8, _GLF_IDENTITY(8.8, (_GLF_IDENTITY(8.8, float(float(8.8)))) - 0.0), _GLF_IDENTITY(8.8, max(_GLF_IDENTITY(8.8, (8.8) / 1.0), 8.8)))), 7.0, 6.9, _GLF_IDENTITY(794.610, (794.610) + _GLF_IDENTITY(0.0, float(vec3(0.0, tan(0.0), 0.0)))), 6414.8967, -654.395))) - mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))))))))))))), bvec3(_GLF_IDENTITY(true, true && _GLF_IDENTITY((_GLF_IDENTITY(true, (true) && true)), bool(_GLF_IDENTITY(bool((_GLF_IDENTITY(true, _GLF_IDENTITY((true), (_GLF_IDENTITY((true), bool(bvec2((true), true)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true))), ! (! (_GLF_IDENTITY(bool((_GLF_IDENTITY(true, (true) && true))), _GLF_IDENTITY(bool(bool(bool((_GLF_IDENTITY(true, (true) && true))))), (bool(bool(bool((_GLF_IDENTITY(true, (true) && true)))))) && true)))))))))), ivec4(1), true);
     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), bool(_GLF_IDENTITY(bvec2(_GLF_WRAPPED_IF_TRUE(true), false), bvec2(bvec3(bvec2(_GLF_WRAPPED_IF_TRUE(true), false), false))))))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         do
          {
           if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), bool(bvec2(false, false))), true, _GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, ! (! (true))))), true))), (injectionSwitch.x > injectionSwitch.y))))
            {
             do
              {
               if(_GLF_DEAD(false))
                return;
              }
             while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, false || (false))));
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, true, true), bvec3(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(false, true, true), bvec3(_GLF_IDENTITY(bvec3(bvec3(false, true, true)), _GLF_IDENTITY(bvec3(bvec4(bvec3(bvec3(false, true, true)), true)), bvec3(bvec3(bvec3(bvec4(bvec3(bvec3(false, true, true)), true))))))))), _GLF_IDENTITY(bvec3(bvec4(bvec3(_GLF_IDENTITY(bvec3(false, true, true), bvec3(_GLF_IDENTITY(bvec3(bvec3(false, true, true)), _GLF_IDENTITY(bvec3(bvec4(bvec3(bvec3(false, true, true)), true)), bvec3(bvec3(bvec3(bvec4(bvec3(bvec3(false, true, true)), true))))))))), true)), bvec3(bvec3(bvec3(bvec4(bvec3(_GLF_IDENTITY(bvec3(false, true, true), bvec3(_GLF_IDENTITY(bvec3(bvec3(false, true, true)), _GLF_IDENTITY(bvec3(bvec4(bvec3(bvec3(false, true, true)), true)), bvec3(bvec3(bvec3(bvec4(bvec3(bvec3(false, true, true)), true))))))))), true)))))), bvec3(bvec4(bvec3(bvec3(false, true, true)), true)))))))))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), (_GLF_IDENTITY(false, false || (false))) && true)))
                  barrier();
                 if(_GLF_DEAD(false))
                  {
                   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                     barrier();
                    }
                   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    {
                    }
                   else
                    {
                     if(_GLF_DEAD(false))
                      return;
                     if(_GLF_DEAD(false))
                      continue;
                    }
                  }
                 for(int _injected_loop_counter = (1 ^ 1); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                  {
                   return;
                  }
                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4))) | (0 << _GLF_IDENTITY(int(1), int(1))))); _injected_loop_counter ++)
                  {
                   if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true), bool(bvec4(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true), false, false, false))))
                    {
                    }
                   else
                    {
                     if(_GLF_DEAD(false))
                      return;
                    }
                  }
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  continue;
                }
              }
             else
              {
               if(_GLF_DEAD(false))
                barrier();
              }
             for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))); _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(0, (0) ^ 0)); _injected_loop_counter --)
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)))), injectionSwitch)).x > injectionSwitch.y))))
                barrier();
              }
             barrier();
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_DEAD(false))
                {
                 do
                  {
                   if(_GLF_DEAD(false))
                    continue;
                   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
                    continue;
                   if(_GLF_DEAD(false))
                    barrier();
                   if(_GLF_DEAD(false))
                    barrier();
                   for(int _injected_loop_counter = (int(_GLF_ZERO(_GLF_IDENTITY(0.0, mix(float(0.0), _GLF_IDENTITY(float(_GLF_FUZZED(6572.0047)), _GLF_IDENTITY(dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 1.0, 0.0, 0.0)), dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 1.0, 0.0, 0.0))) * (float(_GLF_FUZZED(6572.0047)))), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), injectionSwitch.x)) | (0 | 0)); _GLF_WRAPPED_LOOP(_injected_loop_counter < (_GLF_IDENTITY(1, (1) << 0) | 1)); _injected_loop_counter ++)
                    {
                     barrier();
                    }
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
              }
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
        }
       else
        {
         if(_GLF_DEAD(false))
          return;
        }
      }
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec3(false, false, false))), (false) && true)))
      {
       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         for(int _injected_loop_counter = int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1]))) - vec2(0.0, 0.0)).x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
          {
           barrier();
          }
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         return;
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) || false)))
        {
         barrier();
        }
       else
        {
        }
      }
     do
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
          continue;
         barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
           barrier();
          }
        }
       do
        {
         if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
          barrier();
         _GLF_IDENTITY(buf[next_virtual_gid] = 2, 0u | (buf[next_virtual_gid] = 2));
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
     while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), _GLF_IDENTITY(bool(bvec2(_GLF_WRAPPED_LOOP(false), true)), true && _GLF_IDENTITY((bool(bvec2(_GLF_WRAPPED_LOOP(false), true))), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY((bool(bvec2(_GLF_WRAPPED_LOOP(false), true))), ((bool(bvec2(_GLF_WRAPPED_LOOP(false), true)))) || false)), ! (! (bool(_GLF_IDENTITY((bool(bvec2(_GLF_WRAPPED_LOOP(false), true))), ((bool(bvec2(_GLF_WRAPPED_LOOP(false), true)))) || false))))))))));
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           barrier();
          }
         else
          {
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y))))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          return;
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              {
               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                {
                 barrier();
                }
              }
            }
          }
         return;
        }
       barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
        barrier();
      }
     do
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          barrier();
         barrier();
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
            {
             barrier();
            }
          }
        }
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         do
          {
           buf[next_virtual_gid] = _GLF_IDENTITY(2, max(_GLF_IDENTITY(2, ~ (~ (2))), _GLF_IDENTITY(2, (false ? _GLF_FUZZED(69347) : 2))));
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       else
        {
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 else
  {
  }
 do
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), (bool(false)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
