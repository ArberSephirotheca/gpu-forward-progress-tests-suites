#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(false))
  barrier();
uint subgroup_size = 16;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = _GLF_IDENTITY(gl_WorkGroupSize.x, min(_GLF_IDENTITY(gl_WorkGroupSize.x, uint(uvec4(gl_WorkGroupSize.x, _GLF_IDENTITY(1u, (0u << _GLF_IDENTITY(uint(6u), uint(6u))) + (1u)), 0u, 0u))), _GLF_IDENTITY(gl_WorkGroupSize.x, max(gl_WorkGroupSize.x, gl_WorkGroupSize.x))));
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     barrier();
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 uint workgroup_base = _GLF_IDENTITY(workgroup_size, 0u | _GLF_IDENTITY((workgroup_size), min((workgroup_size), (workgroup_size)))) * workgroup_id;
 if(_GLF_DEAD(false))
  barrier();
 uint virtual_gid = _GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, clamp(workgroup_base + subgroup_id * subgroup_size, _GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, (_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, (workgroup_base + subgroup_id * subgroup_size) - 0u)) / 1u), workgroup_base + subgroup_id * subgroup_size)) + _GLF_IDENTITY(subgroup_local_id, ~ (_GLF_IDENTITY(~ _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, max(subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) ^ 0u))))), (subgroup_local_id) / 1u)), (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, max(subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) ^ 0u))))), (subgroup_local_id) / 1u)), (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, max(subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) ^ 0u))))), (subgroup_local_id) / 1u)), ~ (~ ((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, max(subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) ^ 0u))))), (subgroup_local_id) / 1u)))))) << 0u)) / 1u), 0u | (_GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(min(subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, max(subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) ^ 0u)))), (min(subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, max(subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) ^ 0u))))) - 0u)), (subgroup_local_id) / 1u)), 1u * (~ (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, max(subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) ^ 0u))))), (subgroup_local_id) / 1u))))))));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(mat4x2(injectionSwitch, tan(0.0), 0.0, 0.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0))).y))))
  barrier();
 uint next_virtual_gid = workgroup_base + subgroup_id * subgroup_size + ((_GLF_IDENTITY(subgroup_local_id + 1, max(subgroup_local_id + 1, subgroup_local_id + 1))) % subgroup_size);
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false))))))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, false || (false))) && true)))
  barrier();
 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (true)))), ! (! (_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (true))))))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false)))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   buf[virtual_gid] = 1;
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 for(int _injected_loop_counter = 0; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < 1), bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < 1), bool(_GLF_IDENTITY(bool(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < 1, ! (! (_GLF_IDENTITY(_injected_loop_counter < 1, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_injected_loop_counter < 1, (_GLF_IDENTITY(_injected_loop_counter < 1, (_injected_loop_counter < 1) && true)) || false)), ! (! (! (_injected_loop_counter < 1))))))))))), (_GLF_IDENTITY(bool(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < 1, _GLF_IDENTITY(! (! (_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter < 1, ! (_GLF_IDENTITY(! (_injected_loop_counter < 1), ! (! (! (_injected_loop_counter < 1)))))), bool(bvec4(_GLF_IDENTITY(_injected_loop_counter < 1, ! (_GLF_IDENTITY(! (_injected_loop_counter < 1), ! (! (! (_injected_loop_counter < 1)))))), true, false, true))))), bool(bvec2(! (! (_GLF_IDENTITY(_injected_loop_counter < 1, ! (_GLF_IDENTITY(! (_injected_loop_counter < 1), ! (_GLF_IDENTITY(! (! (_injected_loop_counter < 1)), bool(bool(! (! (_injected_loop_counter < 1))))))))))), true)))))), ! (! (_GLF_IDENTITY(bool(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < 1, ! (! (_GLF_IDENTITY(_injected_loop_counter < 1, ! (_GLF_IDENTITY(! (_injected_loop_counter < 1), ! _GLF_IDENTITY((! (! (_injected_loop_counter < 1))), ! (_GLF_IDENTITY(! ((! (! (_injected_loop_counter < 1)))), false || (! ((! (! (_injected_loop_counter < 1)))))))))))))))), (bool(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < 1, ! (! (_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter < 1, ! (_GLF_IDENTITY(! (_injected_loop_counter < 1), ! (! (! _GLF_IDENTITY((_injected_loop_counter < 1), bool(bvec4((_injected_loop_counter < 1), false, false, false)))))))), bool(bvec3(_GLF_IDENTITY(_injected_loop_counter < 1, ! (_GLF_IDENTITY(! (_injected_loop_counter < 1), ! (! (! _GLF_IDENTITY((_injected_loop_counter < 1), bool(bvec4((_injected_loop_counter < 1), false, false, false)))))))), false, true))))))))) || false))))) || false))), false), bvec2(_GLF_IDENTITY(bvec2(bvec2(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < 1), bool(_GLF_IDENTITY(bool(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < 1, ! (! (_GLF_IDENTITY(_injected_loop_counter < 1, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_injected_loop_counter < 1, ! (! (_injected_loop_counter < 1)))), ! (! (! _GLF_IDENTITY((_injected_loop_counter < 1), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY((_injected_loop_counter < 1), bool(bvec3((_injected_loop_counter < 1), false, _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) && true)))), true, _GLF_IDENTITY(false, (false) || false), false)), (bool(bvec4(_GLF_IDENTITY((_GLF_IDENTITY(_injected_loop_counter < 1, true && (_injected_loop_counter < 1))), bool(bvec3((_injected_loop_counter < 1), false, _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y))))), true, false, false))) || false)))))))))))), (_GLF_IDENTITY(bool(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < 1, ! (! (_GLF_IDENTITY(_injected_loop_counter < 1, ! (_GLF_IDENTITY(_GLF_IDENTITY(! (_injected_loop_counter < 1), ! (! (! (_injected_loop_counter < 1)))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(! (_injected_loop_counter < 1), true && (_GLF_IDENTITY(! (_injected_loop_counter < 1), bool(_GLF_IDENTITY(bvec2(! (_injected_loop_counter < 1), true), bvec2(bvec2(bvec2(! (_injected_loop_counter < 1), true)))))))), _GLF_IDENTITY(! (! (! (_injected_loop_counter < 1))), true && (! (! (! (_GLF_IDENTITY(_injected_loop_counter, (true ? _injected_loop_counter : _GLF_FUZZED(4726))) < 1)))))))))))))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter < 1, (_injected_loop_counter < 1) || false), ! (! (_GLF_IDENTITY(_injected_loop_counter < 1, ! (_GLF_IDENTITY(! (_injected_loop_counter < 1), ! (! (! (_injected_loop_counter < 1))))))))))), ! (! (bool(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter < 1, (_injected_loop_counter < 1) || false), ! (! (_GLF_IDENTITY(_injected_loop_counter < 1, ! (_GLF_IDENTITY(! (_injected_loop_counter < 1), ! (! (! (_injected_loop_counter < 1)))))))))))))), (bool(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < 1, ! (! (_GLF_IDENTITY(_injected_loop_counter < 1, ! (_GLF_IDENTITY(! (_injected_loop_counter < _GLF_IDENTITY(1, clamp(1, 1, 1))), ! (! (! (_injected_loop_counter < 1)))))))))))) || false)), ! (_GLF_IDENTITY(! (! (_GLF_IDENTITY(bool(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < 1, ! (! (_GLF_IDENTITY(_injected_loop_counter < 1, ! (_GLF_IDENTITY(! (_injected_loop_counter < 1), ! (! (! (_injected_loop_counter < 1))))))))))), (bool(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < 1, ! (! (_GLF_IDENTITY(_injected_loop_counter < _GLF_IDENTITY(1, clamp(1, 1, 1)), ! (_GLF_IDENTITY(! (_injected_loop_counter < 1), ! (_GLF_IDENTITY(! (! (_injected_loop_counter < 1)), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(! (! (_injected_loop_counter < 1)), true), bvec2(bvec4(_GLF_IDENTITY(bvec2(! (! (_injected_loop_counter < 1)), true), bvec2(bvec3(bvec2(! (! (_injected_loop_counter < 1)), true), true))), true, true)))), ! (_GLF_IDENTITY(! (bool(_GLF_IDENTITY(bvec2(! (! (_injected_loop_counter < 1)), true), bvec2(bvec4(_GLF_IDENTITY(bvec2(! (! (_injected_loop_counter < 1)), true), bvec2(bvec3(bvec2(! (! (_injected_loop_counter < 1)), true), true))), true, true))))), (! (bool(_GLF_IDENTITY(bvec2(! (! (_injected_loop_counter < 1)), true), bvec2(bvec4(_GLF_IDENTITY(bvec2(! (! (_injected_loop_counter < 1)), true), bvec2(bvec3(bvec2(! (! (_injected_loop_counter < 1)), true), true))), true, true)))))) && true)))))))))))))) || false))), (! (! (_GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < 1, ! (! (_GLF_IDENTITY(_injected_loop_counter < 1, ! (_GLF_IDENTITY(! (_injected_loop_counter < 1), ! (! (! _GLF_IDENTITY((_injected_loop_counter < 1), ! (! ((_injected_loop_counter < 1)))))))))))))), _GLF_IDENTITY(false, (false) || false) || (bool(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < 1, ! (! (_GLF_IDENTITY(_injected_loop_counter < 1, ! (_GLF_IDENTITY(! (_injected_loop_counter < 1), ! (! (! _GLF_IDENTITY((_injected_loop_counter < 1), ! (! ((_injected_loop_counter < 1)))))))))))))))), (bool(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < 1, _GLF_IDENTITY(_GLF_IDENTITY(! (! (_GLF_IDENTITY(_injected_loop_counter < 1, ! (_GLF_IDENTITY(! (_injected_loop_counter < 1), ! (! (! (_injected_loop_counter < 1)))))))), (! (! (_GLF_IDENTITY(_injected_loop_counter < 1, ! (_GLF_IDENTITY(! (_injected_loop_counter < 1), ! (! (! (_injected_loop_counter < 1))))))))) || false), (! (! (_GLF_IDENTITY(_injected_loop_counter < 1, ! (_GLF_IDENTITY(! _GLF_IDENTITY((_injected_loop_counter < 1), _GLF_IDENTITY(bool(bvec3((_injected_loop_counter < 1), true, false)), (bool(bvec3((_injected_loop_counter < 1), true, false))) && true)), ! (! (! (_injected_loop_counter < 1))))))))) || false))))) || false)))) && true)))))) || false))), false)), bvec2(_GLF_IDENTITY(bvec2(bvec2(bvec2(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < 1), bool(_GLF_IDENTITY(bool(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < 1, ! (! (_GLF_IDENTITY(_injected_loop_counter < 1, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_injected_loop_counter < 1, ! (! (_injected_loop_counter < 1)))), ! (! (! _GLF_IDENTITY((_injected_loop_counter < 1), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY((_injected_loop_counter < 1), bool(bvec3((_injected_loop_counter < 1), false, _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) && true)))), true, _GLF_IDENTITY(false, (false) || false), false)), (bool(bvec4(_GLF_IDENTITY((_GLF_IDENTITY(_injected_loop_counter < 1, true && (_injected_loop_counter < 1))), bool(bvec3((_injected_loop_counter < 1), false, _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y))))), true, false, false))) || false)))))))))))), (_GLF_IDENTITY(bool(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < 1, ! (! (_GLF_IDENTITY(_injected_loop_counter < 1, ! (_GLF_IDENTITY(_GLF_IDENTITY(! (_injected_loop_counter < 1), ! (! (! (_injected_loop_counter < 1)))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(! (_injected_loop_counter < 1), true && (_GLF_IDENTITY(! (_injected_loop_counter < 1), bool(_GLF_IDENTITY(bvec2(! (_injected_loop_counter < 1), true), bvec2(bvec2(bvec2(! (_injected_loop_counter < 1), true)))))))), _GLF_IDENTITY(! (! (! (_injected_loop_counter < 1))), true && (! (! (! (_GLF_IDENTITY(_injected_loop_counter, (true ? _injected_loop_counter : _GLF_FUZZED(4726))) < 1)))))))))))))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter < 1, (_injected_loop_counter < 1) || false), ! (! (_GLF_IDENTITY(_injected_loop_counter < 1, ! (_GLF_IDENTITY(! (_injected_loop_counter < 1), ! (! (! (_injected_loop_counter < 1))))))))))), ! (! (bool(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter < 1, (_injected_loop_counter < 1) || false), ! (! (_GLF_IDENTITY(_injected_loop_counter < 1, ! (_GLF_IDENTITY(! (_injected_loop_counter < 1), ! (! (! (_injected_loop_counter < 1)))))))))))))), (bool(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < 1, ! (! (_GLF_IDENTITY(_injected_loop_counter < 1, ! (_GLF_IDENTITY(! (_injected_loop_counter < _GLF_IDENTITY(1, clamp(1, 1, 1))), ! (! (! (_injected_loop_counter < 1)))))))))))) || false)), ! (_GLF_IDENTITY(! (! (_GLF_IDENTITY(bool(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < 1, ! (! (_GLF_IDENTITY(_injected_loop_counter < 1, ! (_GLF_IDENTITY(! (_injected_loop_counter < 1), ! (! (! (_injected_loop_counter < 1))))))))))), (bool(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < 1, ! (! (_GLF_IDENTITY(_injected_loop_counter < _GLF_IDENTITY(1, clamp(1, 1, 1)), ! (_GLF_IDENTITY(! (_injected_loop_counter < 1), ! (_GLF_IDENTITY(! (! (_injected_loop_counter < 1)), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(! (! (_injected_loop_counter < 1)), true), bvec2(bvec4(_GLF_IDENTITY(bvec2(! (! (_injected_loop_counter < 1)), true), bvec2(bvec3(bvec2(! (! (_injected_loop_counter < 1)), true), true))), true, true)))), ! (_GLF_IDENTITY(! (bool(_GLF_IDENTITY(bvec2(! (! (_injected_loop_counter < 1)), true), bvec2(bvec4(_GLF_IDENTITY(bvec2(! (! (_injected_loop_counter < 1)), true), bvec2(bvec3(bvec2(! (! (_injected_loop_counter < 1)), true), true))), true, true))))), (! (bool(_GLF_IDENTITY(bvec2(! (! (_injected_loop_counter < 1)), true), bvec2(bvec4(_GLF_IDENTITY(bvec2(! (! (_injected_loop_counter < 1)), true), bvec2(bvec3(bvec2(! (! (_injected_loop_counter < 1)), true), true))), true, true)))))) && true)))))))))))))) || false))), (! (! (_GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < 1, ! (! (_GLF_IDENTITY(_injected_loop_counter < 1, ! (_GLF_IDENTITY(! (_injected_loop_counter < 1), ! (! (! _GLF_IDENTITY((_injected_loop_counter < 1), ! (! ((_injected_loop_counter < 1)))))))))))))), _GLF_IDENTITY(false, (false) || false) || (bool(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < 1, ! (! (_GLF_IDENTITY(_injected_loop_counter < 1, ! (_GLF_IDENTITY(! (_injected_loop_counter < 1), ! (! (! _GLF_IDENTITY((_injected_loop_counter < 1), ! (! ((_injected_loop_counter < 1)))))))))))))))), (bool(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < 1, _GLF_IDENTITY(_GLF_IDENTITY(! (! (_GLF_IDENTITY(_injected_loop_counter < 1, ! (_GLF_IDENTITY(! (_injected_loop_counter < 1), ! (! (! (_injected_loop_counter < 1)))))))), (! (! (_GLF_IDENTITY(_injected_loop_counter < 1, ! (_GLF_IDENTITY(! (_injected_loop_counter < 1), ! (! (! (_injected_loop_counter < 1))))))))) || false), (! (! (_GLF_IDENTITY(_injected_loop_counter < 1, ! (_GLF_IDENTITY(! _GLF_IDENTITY((_injected_loop_counter < 1), _GLF_IDENTITY(bool(bvec3((_injected_loop_counter < 1), true, false)), (bool(bvec3((_injected_loop_counter < 1), true, false))) && true)), ! (! (! (_injected_loop_counter < 1))))))))) || false))))) || false)))) && true)))))) || false))), false))), bvec2(bvec3(_GLF_IDENTITY(bvec2(bvec2(bvec2(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < 1), bool(_GLF_IDENTITY(bool(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < 1, ! (! (_GLF_IDENTITY(_injected_loop_counter < 1, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_injected_loop_counter < 1, ! (! (_injected_loop_counter < 1)))), ! (! (! _GLF_IDENTITY((_injected_loop_counter < 1), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY((_injected_loop_counter < 1), bool(bvec3((_injected_loop_counter < 1), false, _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) && true)))), true, _GLF_IDENTITY(false, (false) || false), false)), (bool(bvec4(_GLF_IDENTITY((_GLF_IDENTITY(_injected_loop_counter < 1, true && (_injected_loop_counter < 1))), bool(bvec3((_injected_loop_counter < 1), false, _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y))))), true, false, false))) || false)))))))))))), (_GLF_IDENTITY(bool(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < 1, ! (! (_GLF_IDENTITY(_injected_loop_counter < 1, ! (_GLF_IDENTITY(_GLF_IDENTITY(! (_injected_loop_counter < 1), ! (! (! (_injected_loop_counter < 1)))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(! (_injected_loop_counter < 1), true && (_GLF_IDENTITY(! (_injected_loop_counter < 1), bool(_GLF_IDENTITY(bvec2(! (_injected_loop_counter < 1), true), bvec2(bvec2(bvec2(! (_injected_loop_counter < 1), true)))))))), _GLF_IDENTITY(! (! (! (_injected_loop_counter < 1))), true && (! (! (! (_GLF_IDENTITY(_injected_loop_counter, (true ? _injected_loop_counter : _GLF_FUZZED(4726))) < 1)))))))))))))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter < 1, (_injected_loop_counter < 1) || false), ! (! (_GLF_IDENTITY(_injected_loop_counter < 1, ! (_GLF_IDENTITY(! (_injected_loop_counter < 1), ! (! (! (_injected_loop_counter < 1))))))))))), ! (! (bool(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter < 1, (_injected_loop_counter < 1) || false), ! (! (_GLF_IDENTITY(_injected_loop_counter < 1, ! (_GLF_IDENTITY(! (_injected_loop_counter < 1), ! (! (! (_injected_loop_counter < 1)))))))))))))), (bool(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < 1, ! (! (_GLF_IDENTITY(_injected_loop_counter < 1, ! (_GLF_IDENTITY(! (_injected_loop_counter < _GLF_IDENTITY(1, clamp(1, 1, 1))), ! (! (! (_injected_loop_counter < 1)))))))))))) || false)), ! (_GLF_IDENTITY(! (! (_GLF_IDENTITY(bool(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < 1, ! (! (_GLF_IDENTITY(_injected_loop_counter < 1, ! (_GLF_IDENTITY(! (_injected_loop_counter < 1), ! (! (! (_injected_loop_counter < 1))))))))))), (bool(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < 1, ! (! (_GLF_IDENTITY(_injected_loop_counter < _GLF_IDENTITY(1, clamp(1, 1, 1)), ! (_GLF_IDENTITY(! (_injected_loop_counter < 1), ! (_GLF_IDENTITY(! (! (_injected_loop_counter < 1)), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(! (! (_injected_loop_counter < 1)), true), bvec2(bvec4(_GLF_IDENTITY(bvec2(! (! (_injected_loop_counter < 1)), true), bvec2(bvec3(bvec2(! (! (_injected_loop_counter < 1)), true), true))), true, true)))), ! (_GLF_IDENTITY(! (bool(_GLF_IDENTITY(bvec2(! (! (_injected_loop_counter < 1)), true), bvec2(bvec4(_GLF_IDENTITY(bvec2(! (! (_injected_loop_counter < 1)), true), bvec2(bvec3(bvec2(! (! (_injected_loop_counter < 1)), true), true))), true, true))))), (! (bool(_GLF_IDENTITY(bvec2(! (! (_injected_loop_counter < 1)), true), bvec2(bvec4(_GLF_IDENTITY(bvec2(! (! (_injected_loop_counter < 1)), true), bvec2(bvec3(bvec2(! (! (_injected_loop_counter < 1)), true), true))), true, true)))))) && true)))))))))))))) || false))), (! (! (_GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < 1, ! (! (_GLF_IDENTITY(_injected_loop_counter < 1, ! (_GLF_IDENTITY(! (_injected_loop_counter < 1), ! (! (! _GLF_IDENTITY((_injected_loop_counter < 1), ! (! ((_injected_loop_counter < 1)))))))))))))), _GLF_IDENTITY(false, (false) || false) || (bool(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < 1, ! (! (_GLF_IDENTITY(_injected_loop_counter < 1, ! (_GLF_IDENTITY(! (_injected_loop_counter < 1), ! (! (! _GLF_IDENTITY((_injected_loop_counter < 1), ! (! ((_injected_loop_counter < 1)))))))))))))))), (bool(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < 1, _GLF_IDENTITY(_GLF_IDENTITY(! (! (_GLF_IDENTITY(_injected_loop_counter < 1, ! (_GLF_IDENTITY(! (_injected_loop_counter < 1), ! (! (! (_injected_loop_counter < 1)))))))), (! (! (_GLF_IDENTITY(_injected_loop_counter < 1, ! (_GLF_IDENTITY(! (_injected_loop_counter < 1), ! (! (! (_injected_loop_counter < 1))))))))) || false), (! (! (_GLF_IDENTITY(_injected_loop_counter < 1, ! (_GLF_IDENTITY(! _GLF_IDENTITY((_injected_loop_counter < 1), _GLF_IDENTITY(bool(bvec3((_injected_loop_counter < 1), true, false)), (bool(bvec3((_injected_loop_counter < 1), true, false))) && true)), ! (! (! (_injected_loop_counter < 1))))))))) || false))))) || false)))) && true)))))) || false))), false))), bvec2(bvec3(bvec2(bvec2(bvec2(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < 1), bool(_GLF_IDENTITY(bool(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < 1, ! (! (_GLF_IDENTITY(_injected_loop_counter < 1, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_injected_loop_counter < 1, ! (! (_injected_loop_counter < 1)))), ! (! (! _GLF_IDENTITY((_injected_loop_counter < 1), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY((_injected_loop_counter < 1), bool(bvec3((_injected_loop_counter < 1), false, _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) && true)))), true, _GLF_IDENTITY(false, (false) || false), false)), (bool(bvec4(_GLF_IDENTITY((_GLF_IDENTITY(_injected_loop_counter < 1, true && (_injected_loop_counter < 1))), bool(bvec3((_injected_loop_counter < 1), false, _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y))))), true, false, false))) || false)))))))))))), (_GLF_IDENTITY(bool(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < 1, ! (! (_GLF_IDENTITY(_injected_loop_counter < 1, ! (_GLF_IDENTITY(_GLF_IDENTITY(! (_injected_loop_counter < 1), ! (! (! (_injected_loop_counter < 1)))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(! (_injected_loop_counter < 1), true && (_GLF_IDENTITY(! (_injected_loop_counter < 1), bool(_GLF_IDENTITY(bvec2(! (_injected_loop_counter < 1), true), bvec2(bvec2(bvec2(! (_injected_loop_counter < 1), true)))))))), _GLF_IDENTITY(! (! (! (_injected_loop_counter < 1))), true && (! (! (! (_GLF_IDENTITY(_injected_loop_counter, (true ? _injected_loop_counter : _GLF_FUZZED(4726))) < 1)))))))))))))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter < 1, (_injected_loop_counter < 1) || false), ! (! (_GLF_IDENTITY(_injected_loop_counter < 1, ! (_GLF_IDENTITY(! (_injected_loop_counter < 1), ! (! (! (_injected_loop_counter < 1))))))))))), ! (! (bool(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter < 1, (_injected_loop_counter < 1) || false), ! (! (_GLF_IDENTITY(_injected_loop_counter < 1, ! (_GLF_IDENTITY(! (_injected_loop_counter < 1), ! (! (! (_injected_loop_counter < 1)))))))))))))), (bool(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < 1, ! (! (_GLF_IDENTITY(_injected_loop_counter < 1, ! (_GLF_IDENTITY(! (_injected_loop_counter < _GLF_IDENTITY(1, clamp(1, 1, 1))), ! (! (! (_injected_loop_counter < 1)))))))))))) || false)), ! (_GLF_IDENTITY(! (! (_GLF_IDENTITY(bool(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < 1, ! (! (_GLF_IDENTITY(_injected_loop_counter < 1, ! (_GLF_IDENTITY(! (_injected_loop_counter < 1), ! (! (! (_injected_loop_counter < 1))))))))))), (bool(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < 1, ! (! (_GLF_IDENTITY(_injected_loop_counter < _GLF_IDENTITY(1, clamp(1, 1, 1)), ! (_GLF_IDENTITY(! (_injected_loop_counter < 1), ! (_GLF_IDENTITY(! (! (_injected_loop_counter < 1)), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(! (! (_injected_loop_counter < 1)), true), bvec2(bvec4(_GLF_IDENTITY(bvec2(! (! (_injected_loop_counter < 1)), true), bvec2(bvec3(bvec2(! (! (_injected_loop_counter < 1)), true), true))), true, true)))), ! (_GLF_IDENTITY(! (bool(_GLF_IDENTITY(bvec2(! (! (_injected_loop_counter < 1)), true), bvec2(bvec4(_GLF_IDENTITY(bvec2(! (! (_injected_loop_counter < 1)), true), bvec2(bvec3(bvec2(! (! (_injected_loop_counter < 1)), true), true))), true, true))))), (! (bool(_GLF_IDENTITY(bvec2(! (! (_injected_loop_counter < 1)), true), bvec2(bvec4(_GLF_IDENTITY(bvec2(! (! (_injected_loop_counter < 1)), true), bvec2(bvec3(bvec2(! (! (_injected_loop_counter < 1)), true), true))), true, true)))))) && true)))))))))))))) || false))), (! (! (_GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < 1, ! (! (_GLF_IDENTITY(_injected_loop_counter < 1, ! (_GLF_IDENTITY(! (_injected_loop_counter < 1), ! (! (! _GLF_IDENTITY((_injected_loop_counter < 1), ! (! ((_injected_loop_counter < 1)))))))))))))), _GLF_IDENTITY(false, (false) || false) || (bool(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < 1, ! (! (_GLF_IDENTITY(_injected_loop_counter < 1, ! (_GLF_IDENTITY(! (_injected_loop_counter < 1), ! (! (! _GLF_IDENTITY((_injected_loop_counter < 1), ! (! ((_injected_loop_counter < 1)))))))))))))))), (bool(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < 1, _GLF_IDENTITY(_GLF_IDENTITY(! (! (_GLF_IDENTITY(_injected_loop_counter < 1, ! (_GLF_IDENTITY(! (_injected_loop_counter < 1), ! (! (! (_injected_loop_counter < 1)))))))), (! (! (_GLF_IDENTITY(_injected_loop_counter < 1, ! (_GLF_IDENTITY(! (_injected_loop_counter < 1), ! (! (! (_injected_loop_counter < 1))))))))) || false), (! (! (_GLF_IDENTITY(_injected_loop_counter < 1, ! (_GLF_IDENTITY(! _GLF_IDENTITY((_injected_loop_counter < 1), _GLF_IDENTITY(bool(bvec3((_injected_loop_counter < 1), true, false)), (bool(bvec3((_injected_loop_counter < 1), true, false))) && true)), ! (! (! (_injected_loop_counter < 1))))))))) || false))))) || false)))) && true)))))) || false))), false))), true))), false))))))), bvec2(bvec2(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < 1), false || (_GLF_WRAPPED_LOOP(_injected_loop_counter < 1))), bool(bool(_GLF_WRAPPED_LOOP(_injected_loop_counter < 1)))), false)))))); _GLF_IDENTITY(_injected_loop_counter ++, (_GLF_IDENTITY(_injected_loop_counter ++, (_GLF_IDENTITY(_injected_loop_counter ++, 0 + (_injected_loop_counter ++))) ^ 0)) - _GLF_IDENTITY(0, int(_GLF_IDENTITY(ivec3(_GLF_IDENTITY(0, (0) | (0)), 0, 0), ivec3(0, 0, 0) ^ (ivec3(_GLF_IDENTITY(0, (0) | (0)), 0, 0)))))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) || false), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * _GLF_IDENTITY((injectionSwitch), ((injectionSwitch)) * vec2(1.0, 1.0))).y))))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     for(int _injected_loop_counter = int(_GLF_IDENTITY(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x))), (_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), float(mat2x4(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(float(_GLF_IDENTITY(mat2(_GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0, 1.0), transpose(transpose(mat2(_GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0, 1.0))))), (true ? float(_GLF_IDENTITY(mat2(_GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0, 1.0), transpose(transpose(mat2(_GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0, 1.0))))) : _GLF_FUZZED(-0.7)))), 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0)))) / _GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, (1.0) / 1.0), 1.0, 1.0)))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-396.546), _GLF_FUZZED(77.16)), vec2(_GLF_IDENTITY((injectionSwitch)[0], (_GLF_IDENTITY((injectionSwitch)[0], (false ? _GLF_FUZZED(-9.6) : (injectionSwitch)[0]))) - 0.0), _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1]))), clamp((_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1]))), _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1]))), (false ? _GLF_FUZZED(vec2(-51.62, -54.28)) : (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1]))))), _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1]))), vec2(1.0, 1.0) * ((_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])))))))[1], mix(float(_GLF_FUZZED(-5.7)), float((_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])))[1]), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), bvec2(true, _GLF_IDENTITY(true, ! (! (true)))))).x > injectionSwitch.y))))
        barrier();
      }
     barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, true && _GLF_IDENTITY((false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((false), ! (! ((false))))), bool(bvec2(! (_GLF_IDENTITY((false), ! (! ((false))))), false)))))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(-849.684)), bool(false))))), _GLF_IDENTITY(float(mat3x4(injectionSwitch.y, 1.0, 1.0, abs(0.0), 0.0, 0.0, 0.0, 0.0, sin(0.0), 1.0, 1.0, 1.0)), mix(float(float(mat3x4(injectionSwitch.y, 1.0, 1.0, abs(0.0), 0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(901.614)), bool(false))), sin(0.0), 1.0, 1.0, 1.0))), float(_GLF_FUZZED(-31.39)), bool(false)))), _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, float(mat3x4(injectionSwitch.y, _GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-8.4)), bool(false))), 1.0, 1.0, _GLF_IDENTITY(0.0, (0.0) * cos(0.0)), 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0))), injectionSwitch.y))))))))
    barrier();
  }
 if(_GLF_IDENTITY(subgroup_local_id + 1, min(_GLF_IDENTITY(subgroup_local_id + 1, _GLF_IDENTITY(clamp(subgroup_local_id + 1, subgroup_local_id + 1, subgroup_local_id + 1), (false ? _GLF_FUZZED(subgroup_id) : clamp(subgroup_local_id + 1, subgroup_local_id + 1, subgroup_local_id + 1)))), subgroup_local_id + 1)) < subgroup_size)
  {
   if(_GLF_DEAD(false))
    barrier();
   int i = 0;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(false, false, true), bvec3(bvec4(bvec3(false, false, true), true)))), ! (_GLF_IDENTITY(! _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(false, false, true), bvec3(bvec4(bvec3(false, false, true), true))), bvec3(bvec4(_GLF_IDENTITY(bvec3(false, false, true), bvec3(bvec4(bvec3(false, false, true), true))), false)))), _GLF_IDENTITY(bool(bvec4(bool(_GLF_IDENTITY(bvec3(false, false, true), bvec3(bvec4(bvec3(false, false, true), true)))), true, false, false)), ! (! (bool(bvec4(bool(_GLF_IDENTITY(bvec3(false, false, true), bvec3(bvec4(bvec3(false, false, true), true)))), _GLF_IDENTITY(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(true, (true) && true))), false, false)))))), ! (! (_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(false, false, true), bvec3(bvec4(bvec3(false, false, true), true))), bvec3(bvec4(_GLF_IDENTITY(bvec3(false, false, true), bvec3(bvec4(bvec3(false, false, true), true))), false)))), _GLF_IDENTITY(bool(bvec4(bool(_GLF_IDENTITY(bvec3(false, false, true), bvec3(bvec4(bvec3(false, false, _GLF_IDENTITY(true, ! (! (true)))), true)))), true, false, false)), ! (! (bool(bvec4(bool(_GLF_IDENTITY(bvec3(false, false, true), bvec3(bvec4(bvec3(false, false, true), true)))), _GLF_IDENTITY(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(true, (true) && true))), false, false)))))))))), ((_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(false, false, true), bvec3(bvec4(bvec3(false, false, true), true))), bvec3(bvec4(_GLF_IDENTITY(bvec3(false, false, true), bvec3(bvec4(bvec3(false, false, true), true))), false))), bvec3(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(false, false, true), bvec3(bvec4(bvec3(false, false, true), true))), bvec3(bvec4(_GLF_IDENTITY(bvec3(false, false, true), bvec3(bvec4(bvec3(false, false, true), true))), false))))))), _GLF_IDENTITY(bool(bvec4(bool(_GLF_IDENTITY(bvec3(false, false, true), bvec3(bvec4(bvec3(false, false, true), true)))), true, false, false)), ! (! (bool(bvec4(bool(_GLF_IDENTITY(bvec3(false, false, true), bvec3(bvec4(bvec3(false, false, true), true)))), _GLF_IDENTITY(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(true, (true) && true))), false, false)))))))) && true), false || (! _GLF_IDENTITY((_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(false, _GLF_IDENTITY(false, bool(bvec3(false, false, false))), true), bvec3(bvec4(bvec3(false, false, _GLF_IDENTITY(true, (true) && true)), true)))), _GLF_IDENTITY(bool(bvec4(bool(_GLF_IDENTITY(bvec3(false, false, true), bvec3(bvec4(bvec3(false, false, true), true)))), true, false, false)), ! (! (bool(bvec4(bool(_GLF_IDENTITY(bvec3(false, false, true), bvec3(bvec4(bvec3(false, false, true), true)))), true, false, false))))))), bool(bvec4((_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(false, _GLF_IDENTITY(false, bool(bvec3(false, false, false))), true), bvec3(bvec4(bvec3(false, false, _GLF_IDENTITY(true, (true) && true)), true)))), _GLF_IDENTITY(bool(bvec4(bool(_GLF_IDENTITY(bvec3(false, false, true), bvec3(bvec4(bvec3(false, false, true), true)))), true, false, false)), ! (! (bool(bvec4(bool(_GLF_IDENTITY(bvec3(false, false, true), bvec3(bvec4(bvec3(false, false, true), true)))), true, false, false))))))), false, false, false))))))), ! (! (_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(false, false, true), _GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(false, false, true), bvec3(bvec4(bvec3(false, false, true), false)))), _GLF_IDENTITY(bvec3(bvec4(bvec3(_GLF_IDENTITY(bvec3(false, false, true), bvec3(bvec4(bvec3(false, false, true), false)))), true)), bvec3(bvec4(bvec3(bvec4(bvec3(_GLF_IDENTITY(bvec3(false, false, true), bvec3(bvec4(bvec3(false, false, true), false)))), true)), false))))), bvec3(bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec3(false, false, true), bvec3(bvec4(bvec3(false, false, true), false))))))))), bvec3(bvec4(bvec3(false, false, true), true)))), (bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(false, false, _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), ! (! (! (true))))))), _GLF_IDENTITY(bvec3(bvec3(_GLF_IDENTITY(bvec3(false, false, true), bvec3(bvec4(bvec3(false, false, true), false))))), bvec3(bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec3(false, false, true), bvec3(bvec4(bvec3(false, false, true), false))))))))), bvec3(bvec4(bvec3(false, false, true), true))))) && _GLF_TRUE(_GLF_IDENTITY(true, (true) || false), (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(vec2(injectionSwitch)), mix(vec2(_GLF_FUZZED(3119.9652), _GLF_FUZZED((+ -282.792))), vec2((vec2(vec2(injectionSwitch)))[0], (vec2(vec2(injectionSwitch)))[1]), bvec2(true, true)))).y)))))))))
    barrier();
   for(int _injected_loop_counter = 1; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != (0 << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), min(_GLF_IDENTITY(int(0), (_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, (false) || false))) ? _GLF_FUZZED(i) : int(0))), int(0)))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_WRAPPED_LOOP(_injected_loop_counter != (0 << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), min(_GLF_IDENTITY(int(0), (false ? _GLF_FUZZED(i) : int(0))), int(0)))))))); _injected_loop_counter --)
    {
     for(int _injected_loop_counter = _GLF_IDENTITY(0, _GLF_IDENTITY(max(0, 0), _GLF_IDENTITY(0, 0 | (_GLF_IDENTITY(0, min(0, 0)))) ^ (max(0, 0)))); _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(1, (false ? _GLF_FUZZED(75341) : 1))); _injected_loop_counter ++)
      {
       buf[next_virtual_gid] = 2;
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(_GLF_IDENTITY(_GLF_IDENTITY(vec2(214.287, 1.0), (vec2(214.287, 1.0)) / vec2(1.0, 1.0)).s, (_GLF_IDENTITY(vec2(214.287, 1.0), (vec2(214.287, 1.0)) / vec2(1.0, 1.0)).s) - 0.0)), _GLF_IDENTITY((injectionSwitch), clamp((injectionSwitch), _GLF_IDENTITY((injectionSwitch), mix(vec2(_GLF_FUZZED(-332.926), ((injectionSwitch))[1]), vec2(((injectionSwitch))[0], _GLF_FUZZED(426.439)), bvec2(true, false))), (injectionSwitch)))[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-97.95)), bvec2(true, false))).y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   buf[next_virtual_gid] = 2;
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (! (! (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true))))))))))), false || (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
      barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, true && _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, true && (false)), true, true, false)))) || false)) || false)), ! (_GLF_IDENTITY(! ((_GLF_IDENTITY(false, _GLF_IDENTITY((_GLF_IDENTITY(false, (false) || false)) || false, ! (! (_GLF_IDENTITY((_GLF_IDENTITY(false, (false) || false)) || false, ! (! ((_GLF_IDENTITY(false, (false) || false)) || false))))))))), bool(bool(_GLF_IDENTITY(! ((_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || false)) || _GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) && true))))))), ! (! _GLF_IDENTITY((! ((_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || false)) || false)))), ((! ((_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || false)) || false))))) || false)))))))), _GLF_IDENTITY(((false)), (((false))) && true) || false)), _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), false || (! ((injectionSwitch.x > injectionSwitch.y)))))))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(-3.6))) > injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (bool(bool(_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(-3.6))) > injectionSwitch.y)))))))))
        barrier();
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
        }
       else
        {
        }
      }
     barrier();
    }
  }
 if(_GLF_DEAD(false))
  barrier();
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
