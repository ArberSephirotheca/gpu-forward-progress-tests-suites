#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uvec2 GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_size;
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     barrier();
    }
   else
    {
    }
  }
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), _GLF_IDENTITY((int(3)), min((int(3)), (int(3)))) | 0))) >> _GLF_IDENTITY(int(3), int(3)))); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      break;
     barrier();
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(false))
    {
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     barrier();
    }
   else
    {
    }
  }
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) << 0) < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   for(int _injected_loop_counter = _GLF_IDENTITY(_GLF_IDENTITY(0, (0) - 0), (0) | (0)); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, (_GLF_IDENTITY(_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, min(1, 1)), 1, 1)), min(1, 1))) | 0)); _injected_loop_counter ++)
    {
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
            {
             barrier();
             if(_GLF_DEAD(false))
              continue;
            }
          }
         barrier();
        }
       continue;
      }
     if(_GLF_DEAD(false))
      barrier();
     for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        barrier();
      }
    }
  }
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     barrier();
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, (true) && true)) && true)))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
        {
         barrier();
        }
      }
    }
   else
    {
    }
   if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), ! (! (! (_GLF_DEAD(false))))))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          return;
         barrier();
        }
       return;
      }
     if(_GLF_DEAD(false))
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     barrier();
     if(_GLF_DEAD(false))
      return;
    }
   GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_size.y = subgroup_size;
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(mat2(injectionSwitch, 0.0, 0.0))).y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y)))))
  return;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_size.x = subgroup_local_id;
 if(_GLF_DEAD(false))
  return;
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
  {
   do
    {
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     return;
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
    }
  }
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = workgroup_size * workgroup_id;
 uint virtual_gid = _GLF_IDENTITY(workgroup_base + subgroup_id * GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_size.y, (workgroup_base + _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (subgroup_id) | 0u), uint(_GLF_IDENTITY(uvec3(subgroup_id, 1u, uint(_GLF_ONE(1.0, injectionSwitch.y))), (_GLF_FALSE(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, _GLF_IDENTITY((false) && true, ! (_GLF_IDENTITY(! ((false) && true), true && (! ((false) && true)))))))))))), (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).x > injectionSwitch.y)) ? _GLF_FUZZED(uvec3(143359u, 71575u, 114951u)) : uvec3(subgroup_id, 1u, _GLF_IDENTITY(uint(_GLF_ONE(1.0, injectionSwitch.y)), ~ (~ (_GLF_IDENTITY(uint(_GLF_ONE(1.0, injectionSwitch.y)), uint(uvec4(uint(_GLF_ONE(1.0, injectionSwitch.y)), 1u, 0u, 1u))))))))))) * GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_size.y, (subgroup_id * GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_size.y) + 0u)) ^ _GLF_IDENTITY(((0u << _GLF_IDENTITY(uint(_GLF_IDENTITY(3u, (_GLF_IDENTITY(3u, max(3u, 3u))) / 1u)), uint(3u))) ^ 0u), _GLF_IDENTITY((((0u << _GLF_IDENTITY(uint(3u), uint(3u))) ^ 0u)), _GLF_IDENTITY(uint(uvec3((((0u << _GLF_IDENTITY(uint(3u), uint(3u))) ^ 0u)), 1u, 0u)), (uint(uvec3(((_GLF_IDENTITY((0u << _GLF_IDENTITY(uint(3u), uint(3u))) ^ 0u, uint(uvec2((0u << _GLF_IDENTITY(uint(3u), uint(3u))) ^ 0u, 0u))))), 1u, 0u))) | (uint(uvec3((((_GLF_IDENTITY(0u, ~ (~ (0u))) << _GLF_IDENTITY(uint(3u), uint(3u))) ^ 0u)), 1u, 0u))))) << (0u | uint(_GLF_ZERO(_GLF_IDENTITY(0.0, (true ? _GLF_IDENTITY(0.0, (0.0) * 1.0) : _GLF_FUZZED(-8834.6132))), injectionSwitch.x))))) + GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_size.x;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       return;
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
    }
   return;
  }
 uint next_virtual_gid = workgroup_base + _GLF_IDENTITY(subgroup_id * GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_size.y, (true ? subgroup_id * GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_size.y : _GLF_FUZZED(GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_size.x))) + ((GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_size.x + 1) % _GLF_IDENTITY(GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_size, uvec2(_GLF_IDENTITY(GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_size[0], (false ? _GLF_FUZZED(num_workgroup) : GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_size[0])), GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_size[1])).y);
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, 0.0 + (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + 0.0))) > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat3(injectionSwitch, 1.0, 0.0, sqrt(0.0), 1.0, 1.0, 1.0, sqrt(1.0))), (_GLF_IDENTITY(vec2(mat3(injectionSwitch, 1.0, 0.0, sqrt(0.0), 1.0, 1.0, 1.0, sqrt(1.0))), vec2(mat2x3(vec2(mat3(injectionSwitch, 1.0, 0.0, sqrt(0.0), 1.0, 1.0, 1.0, sqrt(1.0))), 1.0, 0.0, 1.0, 1.0)))) / vec2(1.0, 1.0))).x > injectionSwitch.y)))))), (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, 0.0 + (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + 0.0), exp(0.0) * (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + 0.0))))) > injectionSwitch.y, ! (! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat3(injectionSwitch, 1.0, 0.0, sqrt(0.0), 1.0, 1.0, 1.0, sqrt(1.0))), (_GLF_IDENTITY(vec2(mat3(injectionSwitch, 1.0, 0.0, sqrt(0.0), 1.0, 1.0, 1.0, sqrt(1.0))), vec2(mat2x3(vec2(mat3(injectionSwitch, 1.0, 0.0, _GLF_IDENTITY(sqrt(0.0), clamp(_GLF_IDENTITY(sqrt(0.0), max(sqrt(0.0), _GLF_IDENTITY(sqrt(0.0), 1.0 * (sqrt(0.0))))), sqrt(0.0), _GLF_IDENTITY(sqrt(0.0), (sqrt(0.0)) * 1.0))), 1.0, 1.0, 1.0, sqrt(1.0))), 1.0, 0.0, 1.0, 1.0)))) / vec2(1.0, 1.0))), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat3(injectionSwitch, 1.0, 0.0, sqrt(0.0), 1.0, 1.0, 1.0, sqrt(1.0))), (_GLF_IDENTITY(vec2(mat3(injectionSwitch, 1.0, 0.0, sqrt(0.0), 1.0, 1.0, 1.0, sqrt(1.0))), vec2(mat2x3(vec2(mat3(injectionSwitch, 1.0, 0.0, _GLF_IDENTITY(sqrt(0.0), clamp(_GLF_IDENTITY(sqrt(0.0), max(sqrt(0.0), _GLF_IDENTITY(sqrt(0.0), 1.0 * (sqrt(0.0))))), sqrt(0.0), _GLF_IDENTITY(sqrt(0.0), (sqrt(0.0)) * 1.0))), 1.0, 1.0, 1.0, sqrt(1.0))), 1.0, 0.0, 1.0, 1.0)))) / vec2(1.0, 1.0))), max(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat3(injectionSwitch, 1.0, 0.0, sqrt(0.0), 1.0, 1.0, 1.0, sqrt(1.0))), (_GLF_IDENTITY(vec2(mat3(injectionSwitch, 1.0, 0.0, sqrt(0.0), 1.0, 1.0, 1.0, sqrt(1.0))), vec2(mat2x3(vec2(mat3(injectionSwitch, 1.0, 0.0, _GLF_IDENTITY(sqrt(0.0), clamp(_GLF_IDENTITY(sqrt(0.0), max(sqrt(0.0), _GLF_IDENTITY(sqrt(0.0), 1.0 * (sqrt(0.0))))), sqrt(0.0), _GLF_IDENTITY(sqrt(0.0), (sqrt(0.0)) * 1.0))), 1.0, 1.0, 1.0, sqrt(1.0))), 1.0, 0.0, 1.0, 1.0)))) / vec2(1.0, 1.0))), _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat3(injectionSwitch, 1.0, 0.0, sqrt(0.0), 1.0, 1.0, 1.0, sqrt(1.0))), (_GLF_IDENTITY(vec2(mat3(injectionSwitch, 1.0, 0.0, sqrt(0.0), 1.0, 1.0, 1.0, sqrt(1.0))), vec2(mat2x3(vec2(mat3(injectionSwitch, 1.0, 0.0, _GLF_IDENTITY(sqrt(0.0), clamp(_GLF_IDENTITY(sqrt(0.0), max(sqrt(0.0), _GLF_IDENTITY(sqrt(0.0), 1.0 * (sqrt(0.0))))), sqrt(0.0), _GLF_IDENTITY(sqrt(0.0), (sqrt(0.0)) * 1.0))), 1.0, 1.0, 1.0, sqrt(1.0))), 1.0, 0.0, 1.0, 1.0)))) / vec2(1.0, 1.0)))))) * vec2(1.0, 1.0)).x > injectionSwitch.y))))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   do
    {
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))));
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
   do
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         barrier();
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         barrier();
        }
      }
     if(_GLF_DEAD(false))
      continue;
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    return;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      return;
     for(int _injected_loop_counter = (((_GLF_IDENTITY(1, ~ (~ (1))) << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5))) & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       atomicStore(buf[next_virtual_gid], uint(1), 4, 64, 4);
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
          {
           barrier();
           if(_GLF_DEAD(false))
            break;
          }
        }
       return;
      }
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
  }
 uint read = atomicLoad(_GLF_IDENTITY(buf[virtual_gid], (buf[_GLF_IDENTITY(virtual_gid, (virtual_gid) - 0u)]) / 1u), 4, 64, 0);
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     return;
    }
  }
 if(_GLF_IDENTITY(GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_size.x + 1 < GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_size.y, ! (! (GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_size.x + 1 < GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_size.y))))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       atomicStore(checker[virtual_gid], read, _GLF_IDENTITY(_GLF_IDENTITY(4, _GLF_IDENTITY((4), ((4)) * 1) | (_GLF_IDENTITY(4, 0 | (4)))), 0 ^ _GLF_IDENTITY((_GLF_IDENTITY(4, _GLF_IDENTITY((4) | (_GLF_IDENTITY(4, 0 | (4))), min((4) | (_GLF_IDENTITY(4, 0 | (4))), (4) | (_GLF_IDENTITY(4, 0 | (4))))))), 0 + ((_GLF_IDENTITY(4, (4) | (_GLF_IDENTITY(4, 0 | (4)))))))), _GLF_IDENTITY(64, ~ (~ (64))), 4);
      }
     else
      {
      }
    }
   else
    {
    }
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 ^ 1)); _injected_loop_counter --)
          {
           barrier();
          }
         if(_GLF_DEAD(false))
          return;
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
        }
      }
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
      {
       if(_GLF_DEAD(false))
        return;
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 << _GLF_IDENTITY(int(2), int(2)))); _injected_loop_counter --)
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) || false), false || (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) || false), bool(bvec2(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) || false), false))))), (_GLF_IDENTITY(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * round(length(normalize(vec2(1.0, 1.0))))) < injectionSwitch.y)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) || false)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false)))))
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
              }
             else
              {
               return;
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(false))
                return;
               barrier();
              }
            }
           else
            {
            }
          }
        }
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           return;
          }
        }
      }
    }
   else
    {
    }
   subgroupAll(false);
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
   do
    {
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      break;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           do
            {
             return;
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           return;
           if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec2(! (false), false))))), false || (false))) && _GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec2(true, false)), bool(bool(bool(bvec2(true, false)))))))))))
            {
             for(int _injected_loop_counter = _GLF_IDENTITY(1, 0 + (1)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
              {
               barrier();
              }
            }
          }
        }
       barrier();
       if(_GLF_DEAD(false))
        return;
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, true, true)))))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
          barrier();
        }
       barrier();
       if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
        return;
       if(_GLF_DEAD(false))
        return;
      }
    }
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))) && true))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           barrier();
          }
        }
      }
     return;
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, ! (! (false)))))), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bool(bvec2(bool(bvec3(false, false, _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, vec2(mat2x4(injectionSwitch, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0))), injectionSwitch)).x > injectionSwitch.y)))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))), true, _GLF_IDENTITY(true, bool(bool(_GLF_IDENTITY(true, (true) || false)))), _GLF_TRUE(true, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (injectionSwitch.x < injectionSwitch.y) || false)), (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (injectionSwitch.x < injectionSwitch.y) || false)), ! (! ((_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (injectionSwitch.x < injectionSwitch.y) || false)))))) || false)))), ! (! (_GLF_IDENTITY(bool(bvec4(false, true, _GLF_IDENTITY(_GLF_IDENTITY(true, bool(bool(true))), (true) && true), _GLF_TRUE(true, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-0.3)), float(injectionSwitch.x), bool(true))), _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / sqrt(vec2(1.0, 1.0))).x)) < injectionSwitch.y), ((_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / sqrt(vec2(1.0, 1.0))).x)) < injectionSwitch.y)) || false)))), bool(bvec2(_GLF_IDENTITY(bool(bvec4(false, true, true, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) < injectionSwitch.y)))), (bool(bvec4(_GLF_IDENTITY(false, false || (false)), true, true, _GLF_TRUE(true, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) < _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY(vec2(_GLF_IDENTITY(vec2(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY(vec2(mat3(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(74.50), _GLF_FUZZED(-378.066)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))), 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, tan(0.0), 0.0)), dot(vec3(1.0, 0.0, 0.0), vec3(1.0, tan(0.0), 0.0))))), mix(vec2(_GLF_FUZZED(5.8), _GLF_FUZZED(2792.2468)), vec2((vec2(mat3(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(74.50), _GLF_FUZZED(-378.066)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))), 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, tan(0.0), 0.0)), dot(vec3(1.0, 0.0, 0.0), vec3(1.0, tan(0.0), 0.0))))))[0], (vec2(mat3(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(74.50), _GLF_FUZZED(-378.066)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))), 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, tan(0.0), 0.0)), dot(vec3(1.0, 0.0, 0.0), vec3(1.0, tan(0.0), 0.0))))))[1]), bvec2(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(vec2(mat3(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mix(vec2(_GLF_FUZZED(74.50), _GLF_FUZZED(-378.066)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true)), min(mix(vec2(_GLF_FUZZED(74.50), _GLF_FUZZED(-378.066)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true)), _GLF_IDENTITY(mix(vec2(_GLF_FUZZED(74.50), _GLF_FUZZED(-378.066)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true)), mix(vec2((mix(vec2(_GLF_FUZZED(74.50), _GLF_FUZZED(-378.066)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true)))[0], _GLF_FUZZED(-3796.4146)), vec2(_GLF_FUZZED(-6.5), (mix(vec2(_GLF_FUZZED(74.50), _GLF_FUZZED(-378.066)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true)))[1]), bvec2(false, true)))))), 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, tan(_GLF_IDENTITY(0.0, min(0.0, _GLF_IDENTITY(0.0, clamp(0.0, 0.0, _GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(7.9)))))))), 0.0)), dot(vec3(1.0, 0.0, 0.0), vec3(1.0, tan(0.0), 0.0))))), mix(vec2(_GLF_IDENTITY(_GLF_FUZZED(5.8), (false ? _GLF_FUZZED(intBitsToFloat(92486)) : _GLF_FUZZED(5.8))), _GLF_IDENTITY(_GLF_FUZZED(2792.2468), (false ? _GLF_FUZZED(854.072) : _GLF_FUZZED(2792.2468)))), vec2((vec2(mat3(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(74.50), _GLF_FUZZED(-378.066)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))), _GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(-812.577))), 0.0, 0.0, 0.0, 1.0, 1.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, tan(0.0), 0.0)), dot(vec3(1.0, 0.0, 0.0), vec3(1.0, tan(0.0), 0.0))))))[0], (vec2(mat3(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(74.50), _GLF_FUZZED(-378.066)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))), 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, tan(0.0), _GLF_IDENTITY(0.0, float(_GLF_IDENTITY(mat4(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(7.3)), bool(false))), 1.0, 1.0, determinant(mat2(0.0, 1.0, 0.0, 0.0)), 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, sin(0.0), 1.0, 0.0, 1.0, cos(0.0), 0.0), mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0) + (mat4(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(7.3)), bool(false))), 1.0, 1.0, determinant(mat2(0.0, 1.0, 0.0, 0.0)), 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, sin(0.0), 1.0, 0.0, 1.0, cos(0.0), 0.0))))))), dot(vec3(1.0, 0.0, 0.0), vec3(1.0, tan(_GLF_IDENTITY(0.0, clamp(_GLF_IDENTITY(0.0, float(vec4(0.0, 1.0, 1.0, 0.0))), 0.0, 0.0))), 0.0))))))[1]), bvec2(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) : _GLF_FUZZED(vec2(-6843.0401, 330.952)))))), max(vec2(injectionSwitch), vec2(injectionSwitch)))), max(vec2(_GLF_IDENTITY(vec2(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat3(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(74.50), _GLF_FUZZED(-378.066)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))), 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, tan(0.0), 0.0)), dot(vec3(1.0, 0.0, 0.0), vec3(_GLF_IDENTITY(1.0, float(_GLF_IDENTITY(mat2x3(1.0, 0.0, sqrt(1.0), 0.0, 1.0, length(vec2(0.0, 0.0))), (true ? mat2x3(1.0, 0.0, sqrt(1.0), 0.0, 1.0, length(vec2(0.0, 0.0))) : _GLF_FUZZED(mat2x3(-65.35, 9473.3567, -659.668, -3.0, -74.30, -2.6)))))), tan(0.0), 0.0))))), mix(vec2(_GLF_FUZZED(5.8), _GLF_FUZZED(2792.2468)), vec2((vec2(mat3(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(74.50), _GLF_FUZZED(-378.066)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))), 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, tan(0.0), 0.0)), dot(vec3(1.0, 0.0, 0.0), vec3(1.0, tan(0.0), 0.0))))))[0], (vec2(mat3(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(74.50), _GLF_FUZZED(-378.066)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))), 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, _GLF_IDENTITY(dot(vec3(1.0, _GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0), vec3(1.0, tan(0.0), 0.0)), dot(vec3(1.0, 0.0, 0.0), vec3(1.0, tan(0.0), 0.0))))))[1]), bvec2(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))), max(vec2(injectionSwitch), vec2(injectionSwitch)))), vec2(_GLF_IDENTITY(vec2(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat3(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(74.50), _GLF_FUZZED(-378.066)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))), 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, tan(0.0), 0.0)), dot(vec3(1.0, 0.0, 0.0), vec3(1.0, tan(0.0), 0.0))))), mix(vec2(_GLF_FUZZED(5.8), _GLF_FUZZED(2792.2468)), vec2((vec2(mat3(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(74.50), _GLF_FUZZED(-378.066)), _GLF_IDENTITY(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(0.0, 0.0) + (vec2((injectionSwitch)[0], (injectionSwitch)[1]))), bvec2(true, true))), 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, tan(0.0), 0.0)), dot(vec3(1.0, 0.0, 0.0), vec3(1.0, tan(0.0), 0.0))))))[0], (_GLF_IDENTITY(vec2(mat3(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(74.50), _GLF_FUZZED(-378.066)), vec2((injectionSwitch)[0], (injectionSwitch)[_GLF_IDENTITY(1, _GLF_IDENTITY(int(int(1)), ~ (_GLF_IDENTITY(~ (int(int(1))), (~ (int(int(1)))) | 0))))]), bvec2(true, true))), 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, tan(0.0), 0.0)), dot(vec3(1.0, 0.0, 0.0), vec3(1.0, tan(0.0), 0.0))))), (_GLF_IDENTITY(vec2(mat3(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(74.50), _GLF_FUZZED(-378.066)), vec2((injectionSwitch)[0], (injectionSwitch)[_GLF_IDENTITY(1, _GLF_IDENTITY(int(int(1)), ~ (_GLF_IDENTITY(~ (int(int(1))), (~ (int(int(1)))) | 0))))]), bvec2(true, true))), 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, tan(0.0), 0.0)), dot(vec3(1.0, 0.0, 0.0), vec3(1.0, tan(0.0), 0.0))))), _GLF_IDENTITY((vec2(mat3(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(74.50), _GLF_FUZZED(-378.066)), vec2((injectionSwitch)[0], (injectionSwitch)[_GLF_IDENTITY(1, _GLF_IDENTITY(int(int(1)), ~ (_GLF_IDENTITY(~ (int(int(1))), (~ (int(int(1)))) | 0))))]), bvec2(true, true))), 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, tan(0.0), 0.0)), dot(vec3(1.0, 0.0, 0.0), vec3(1.0, tan(0.0), 0.0)))))) * mat2(1.0), mix(vec2(_GLF_FUZZED(-1817.4165), ((vec2(mat3(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(74.50), _GLF_FUZZED(-378.066)), vec2((injectionSwitch)[0], (injectionSwitch)[_GLF_IDENTITY(1, _GLF_IDENTITY(int(int(1)), ~ (_GLF_IDENTITY(~ (int(int(1))), (~ (int(int(1)))) | 0))))]), bvec2(true, true))), 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, tan(0.0), 0.0)), dot(vec3(1.0, 0.0, 0.0), vec3(1.0, tan(0.0), 0.0)))))) * mat2(1.0))[1]), vec2(((vec2(mat3(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(74.50), _GLF_FUZZED(-378.066)), vec2((injectionSwitch)[0], (injectionSwitch)[_GLF_IDENTITY(1, _GLF_IDENTITY(int(int(1)), ~ (_GLF_IDENTITY(~ (int(int(1))), (~ (int(int(1)))) | 0))))]), bvec2(true, true))), 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, tan(0.0), 0.0)), dot(vec3(1.0, 0.0, 0.0), vec3(1.0, tan(0.0), 0.0)))))) * mat2(1.0))[0], _GLF_FUZZED(3456.0652)), bvec2(true, false))))) - vec2(0.0, 0.0)))[1]), bvec2(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))), max(vec2(injectionSwitch), vec2(injectionSwitch)))))), (_GLF_IDENTITY(false ? _GLF_FUZZED(vec2(-1232.3825, -2.7)) : vec2(_GLF_IDENTITY(vec2(injectionSwitch), max(vec2(injectionSwitch), vec2(injectionSwitch)))), vec2(0.0, 0.0) + (_GLF_IDENTITY(false ? _GLF_FUZZED(vec2(-1232.3825, -2.7)) : vec2(_GLF_IDENTITY(vec2(injectionSwitch), max(vec2(injectionSwitch), vec2(injectionSwitch)))), (false ? _GLF_FUZZED(injectionSwitch) : false ? _GLF_FUZZED(vec2(-1232.3825, -2.7)) : vec2(_GLF_IDENTITY(vec2(injectionSwitch), max(vec2(injectionSwitch), vec2(injectionSwitch))))))))))).y), ((_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) < _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY(vec2(_GLF_IDENTITY(vec2(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY(vec2(mat3(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(74.50), _GLF_FUZZED(-378.066)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))), 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, tan(0.0), 0.0)), dot(vec3(1.0, 0.0, 0.0), vec3(1.0, tan(0.0), 0.0))))), mix(vec2(_GLF_FUZZED(5.8), _GLF_FUZZED(2792.2468)), vec2((vec2(mat3(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(74.50), _GLF_FUZZED(-378.066)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))), 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, tan(0.0), 0.0)), dot(vec3(1.0, 0.0, 0.0), vec3(1.0, tan(0.0), 0.0))))))[0], (vec2(mat3(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(74.50), _GLF_FUZZED(-378.066)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))), 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, tan(0.0), 0.0)), dot(vec3(1.0, 0.0, 0.0), vec3(1.0, tan(0.0), 0.0))))))[1]), bvec2(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(vec2(mat3(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mix(vec2(_GLF_FUZZED(74.50), _GLF_FUZZED(-378.066)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true)), min(mix(vec2(_GLF_FUZZED(74.50), _GLF_FUZZED(-378.066)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true)), _GLF_IDENTITY(mix(vec2(_GLF_FUZZED(74.50), _GLF_FUZZED(-378.066)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true)), mix(vec2((mix(vec2(_GLF_FUZZED(74.50), _GLF_FUZZED(-378.066)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true)))[0], _GLF_FUZZED(-3796.4146)), vec2(_GLF_FUZZED(-6.5), (mix(vec2(_GLF_FUZZED(74.50), _GLF_FUZZED(-378.066)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true)))[1]), bvec2(false, true)))))), 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, tan(_GLF_IDENTITY(0.0, min(0.0, _GLF_IDENTITY(0.0, clamp(0.0, 0.0, _GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(7.9)))))))), 0.0)), dot(vec3(1.0, 0.0, 0.0), vec3(1.0, tan(0.0), 0.0))))), mix(vec2(_GLF_IDENTITY(_GLF_FUZZED(5.8), (false ? _GLF_FUZZED(intBitsToFloat(92486)) : _GLF_FUZZED(5.8))), _GLF_IDENTITY(_GLF_FUZZED(2792.2468), (false ? _GLF_FUZZED(854.072) : _GLF_FUZZED(2792.2468)))), vec2((vec2(mat3(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(74.50), _GLF_FUZZED(-378.066)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))), _GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(-812.577))), 0.0, 0.0, 0.0, 1.0, 1.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, tan(0.0), 0.0)), dot(vec3(1.0, 0.0, 0.0), vec3(1.0, tan(0.0), 0.0))))))[0], (vec2(mat3(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(74.50), _GLF_FUZZED(-378.066)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))), 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, tan(0.0), _GLF_IDENTITY(0.0, float(_GLF_IDENTITY(mat4(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(7.3)), bool(false))), 1.0, 1.0, determinant(mat2(0.0, 1.0, 0.0, 0.0)), 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, sin(0.0), 1.0, 0.0, 1.0, cos(0.0), 0.0), mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0) + (mat4(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(7.3)), bool(false))), 1.0, 1.0, determinant(mat2(0.0, 1.0, 0.0, 0.0)), 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, sin(0.0), 1.0, 0.0, 1.0, cos(0.0), 0.0))))))), dot(vec3(1.0, 0.0, 0.0), vec3(1.0, tan(_GLF_IDENTITY(0.0, clamp(_GLF_IDENTITY(0.0, float(vec4(0.0, 1.0, 1.0, 0.0))), 0.0, 0.0))), 0.0))))))[1]), bvec2(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) : _GLF_FUZZED(vec2(-6843.0401, 330.952)))))), max(vec2(injectionSwitch), vec2(injectionSwitch)))), max(vec2(_GLF_IDENTITY(vec2(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat3(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(74.50), _GLF_FUZZED(-378.066)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))), 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, tan(0.0), 0.0)), dot(vec3(1.0, 0.0, 0.0), vec3(_GLF_IDENTITY(1.0, float(_GLF_IDENTITY(mat2x3(1.0, 0.0, sqrt(1.0), 0.0, 1.0, length(vec2(0.0, 0.0))), (true ? mat2x3(1.0, 0.0, sqrt(1.0), 0.0, 1.0, length(vec2(0.0, 0.0))) : _GLF_FUZZED(mat2x3(-65.35, 9473.3567, -659.668, -3.0, -74.30, -2.6)))))), tan(0.0), 0.0))))), mix(vec2(_GLF_FUZZED(5.8), _GLF_FUZZED(2792.2468)), vec2((vec2(mat3(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(74.50), _GLF_FUZZED(-378.066)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))), 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, tan(0.0), 0.0)), dot(vec3(1.0, 0.0, 0.0), vec3(1.0, tan(0.0), 0.0))))))[0], (vec2(mat3(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(74.50), _GLF_FUZZED(-378.066)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))), 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, _GLF_IDENTITY(dot(vec3(1.0, _GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0), vec3(1.0, tan(0.0), 0.0)), dot(vec3(1.0, 0.0, 0.0), vec3(1.0, tan(0.0), 0.0))))))[1]), bvec2(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))), max(vec2(injectionSwitch), vec2(injectionSwitch)))), vec2(_GLF_IDENTITY(vec2(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat3(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(74.50), _GLF_FUZZED(-378.066)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))), 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, tan(0.0), 0.0)), dot(vec3(1.0, 0.0, 0.0), vec3(1.0, tan(0.0), 0.0))))), mix(vec2(_GLF_FUZZED(5.8), _GLF_FUZZED(2792.2468)), vec2((vec2(mat3(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(74.50), _GLF_FUZZED(-378.066)), _GLF_IDENTITY(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(0.0, 0.0) + (vec2((injectionSwitch)[0], (injectionSwitch)[1]))), bvec2(true, true))), 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, tan(0.0), 0.0)), dot(vec3(1.0, 0.0, 0.0), vec3(1.0, tan(0.0), 0.0))))))[0], (_GLF_IDENTITY(vec2(mat3(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(74.50), _GLF_FUZZED(-378.066)), vec2((injectionSwitch)[0], (injectionSwitch)[_GLF_IDENTITY(1, _GLF_IDENTITY(int(int(1)), ~ (_GLF_IDENTITY(~ (int(int(1))), (~ (int(int(1)))) | 0))))]), bvec2(true, true))), 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, tan(0.0), 0.0)), dot(vec3(1.0, 0.0, 0.0), vec3(1.0, tan(0.0), 0.0))))), (_GLF_IDENTITY(vec2(mat3(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(74.50), _GLF_FUZZED(-378.066)), vec2((injectionSwitch)[0], (injectionSwitch)[_GLF_IDENTITY(1, _GLF_IDENTITY(int(int(1)), ~ (_GLF_IDENTITY(~ (int(int(1))), (~ (int(int(1)))) | 0))))]), bvec2(true, true))), 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, tan(0.0), 0.0)), dot(vec3(1.0, 0.0, 0.0), vec3(1.0, tan(0.0), 0.0))))), _GLF_IDENTITY((vec2(mat3(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(74.50), _GLF_FUZZED(-378.066)), vec2((injectionSwitch)[0], (injectionSwitch)[_GLF_IDENTITY(1, _GLF_IDENTITY(int(int(1)), ~ (_GLF_IDENTITY(~ (int(int(1))), (~ (int(int(1)))) | 0))))]), bvec2(true, true))), 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, tan(0.0), 0.0)), dot(vec3(1.0, 0.0, 0.0), vec3(1.0, tan(0.0), 0.0)))))) * mat2(1.0), mix(vec2(_GLF_FUZZED(-1817.4165), ((vec2(mat3(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(74.50), _GLF_FUZZED(-378.066)), vec2((injectionSwitch)[0], (injectionSwitch)[_GLF_IDENTITY(1, _GLF_IDENTITY(int(int(1)), ~ (_GLF_IDENTITY(~ (int(int(1))), (~ (int(int(1)))) | 0))))]), bvec2(true, true))), 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, tan(0.0), 0.0)), dot(vec3(1.0, 0.0, 0.0), vec3(1.0, tan(0.0), 0.0)))))) * mat2(1.0))[1]), vec2(((vec2(mat3(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(74.50), _GLF_FUZZED(-378.066)), vec2((injectionSwitch)[0], (injectionSwitch)[_GLF_IDENTITY(1, _GLF_IDENTITY(int(int(1)), ~ (_GLF_IDENTITY(~ (int(int(1))), (~ (int(int(1)))) | 0))))]), bvec2(true, true))), 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, tan(0.0), 0.0)), dot(vec3(1.0, 0.0, 0.0), vec3(1.0, tan(0.0), 0.0)))))) * mat2(1.0))[0], _GLF_FUZZED(3456.0652)), bvec2(true, false))))) - vec2(0.0, 0.0)))[1]), bvec2(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))), max(vec2(injectionSwitch), vec2(injectionSwitch)))))), (_GLF_IDENTITY(false ? _GLF_FUZZED(vec2(-1232.3825, -2.7)) : vec2(_GLF_IDENTITY(vec2(injectionSwitch), max(vec2(injectionSwitch), vec2(injectionSwitch)))), vec2(0.0, 0.0) + (_GLF_IDENTITY(false ? _GLF_FUZZED(vec2(-1232.3825, -2.7)) : vec2(_GLF_IDENTITY(vec2(injectionSwitch), max(vec2(injectionSwitch), vec2(injectionSwitch)))), (false ? _GLF_FUZZED(injectionSwitch) : false ? _GLF_FUZZED(vec2(-1232.3825, -2.7)) : vec2(_GLF_IDENTITY(vec2(injectionSwitch), max(vec2(injectionSwitch), vec2(injectionSwitch))))))))))).y)) && true))))) && true), false)))))))))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec3(false, false, _GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(_GLF_IDENTITY(! (false), bool(bvec2(! (false), false))), ! (! (_GLF_IDENTITY(! (false), bool(bvec2(! (false), false)))))))), (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec2(_GLF_IDENTITY(! (false), false || (! (false))), false))))), (injectionSwitch.x > injectionSwitch.y))))))), (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       for(int _injected_loop_counter = (_GLF_IDENTITY(0 >> _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(8), int(ivec3(_GLF_IDENTITY(int(8), (int(8)) >> 0), _GLF_IDENTITY(1, (false ? _GLF_FUZZED(55847) : 1)), 0))), int(_GLF_IDENTITY(_GLF_IDENTITY(8, ~ (_GLF_IDENTITY(~ (8), 0 | (~ (8))))), (_GLF_IDENTITY(8, ~ (_GLF_IDENTITY(~ (8), 0 | (~ (8)))))) / 1))), int(_GLF_IDENTITY(ivec4(_GLF_IDENTITY(_GLF_IDENTITY(int(8), int(ivec3(_GLF_IDENTITY(int(8), (int(8)) >> 0), _GLF_IDENTITY(1, (false ? _GLF_FUZZED(55847) : 1)), 0))), int(_GLF_IDENTITY(_GLF_IDENTITY(8, ~ (_GLF_IDENTITY(~ (8), 0 | (~ (8))))), (_GLF_IDENTITY(8, ~ (_GLF_IDENTITY(~ (8), 0 | (~ (8)))))) / 1))), 1, int(_GLF_ZERO(0.0, injectionSwitch.x)), (0 ^ 1)), max(ivec4(_GLF_IDENTITY(_GLF_IDENTITY(int(8), int(ivec3(_GLF_IDENTITY(int(8), (int(8)) >> 0), _GLF_IDENTITY(1, (false ? _GLF_FUZZED(55847) : 1)), 0))), int(_GLF_IDENTITY(_GLF_IDENTITY(8, ~ (_GLF_IDENTITY(~ (8), 0 | (~ (8))))), (_GLF_IDENTITY(8, ~ (_GLF_IDENTITY(~ (8), 0 | (~ (8)))))) / 1))), 1, int(_GLF_ZERO(0.0, injectionSwitch.x)), (0 ^ 1)), ivec4(_GLF_IDENTITY(_GLF_IDENTITY(int(8), int(ivec3(_GLF_IDENTITY(int(8), (int(8)) >> 0), _GLF_IDENTITY(1, (false ? _GLF_FUZZED(55847) : 1)), 0))), int(_GLF_IDENTITY(_GLF_IDENTITY(8, ~ (_GLF_IDENTITY(~ (8), 0 | (~ (8))))), (_GLF_IDENTITY(8, ~ (_GLF_IDENTITY(~ (8), 0 | (~ (8)))))) / 1))), 1, int(_GLF_ZERO(0.0, injectionSwitch.x)), (0 ^ 1)))))), clamp(0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(8), _GLF_IDENTITY(int(ivec3(_GLF_IDENTITY(int(8), (int(8)) >> 0), _GLF_IDENTITY(1, (false ? _GLF_FUZZED(55847) : 1)), 0)), int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(int(ivec3(_GLF_IDENTITY(int(8), (int(8)) >> 0), _GLF_IDENTITY(1, (false ? _GLF_FUZZED(55847) : 1)), 0)), ~ (~ (_GLF_IDENTITY(int(ivec3(_GLF_IDENTITY(int(8), (int(8)) >> 0), _GLF_IDENTITY(1, (false ? _GLF_FUZZED(55847) : 1)), 0)), (int(ivec3(_GLF_IDENTITY(int(8), (int(8)) >> 0), _GLF_IDENTITY(1, (false ? _GLF_FUZZED(55847) : 1)), 0))) | (int(ivec3(_GLF_IDENTITY(int(8), (int(8)) >> 0), _GLF_IDENTITY(1, (false ? _GLF_FUZZED(55847) : 1)), 0)))))))))), int(_GLF_IDENTITY(_GLF_IDENTITY(8, ~ (_GLF_IDENTITY(~ (8), 0 | (~ (8))))), _GLF_IDENTITY((_GLF_IDENTITY(8, ~ (_GLF_IDENTITY(~ (8), 0 | (~ (8)))))) / 1, max(_GLF_IDENTITY((_GLF_IDENTITY(8, ~ (_GLF_IDENTITY(~ (8), 0 | (~ (8)))))) / 1, _GLF_IDENTITY(int(ivec4((_GLF_IDENTITY(8, ~ (_GLF_IDENTITY(~ (8), 0 | (~ (8)))))) / 1, 0, 1, 0)), (false ? _GLF_FUZZED(62149) : int(ivec4((_GLF_IDENTITY(8, ~ (_GLF_IDENTITY(~ (8), 0 | (~ (8)))))) / 1, 0, 1, 0))))), (_GLF_IDENTITY(8, ~ (_GLF_IDENTITY(~ (8), 0 | (~ (8)))))) / 1))))), 0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(8), int(ivec3(_GLF_IDENTITY(int(8), _GLF_IDENTITY((int(8)) >> 0, ~ (~ ((int(8)) >> 0)))), _GLF_IDENTITY(1, (false ? _GLF_FUZZED(55847) : 1)), 0))), int(_GLF_IDENTITY(_GLF_IDENTITY(8, ~ (_GLF_IDENTITY(~ (8), _GLF_IDENTITY(0 | (~ (8)), ~ (~ (0 | (_GLF_IDENTITY(~ (8), (_GLF_IDENTITY(~ (8), min(~ (8), _GLF_IDENTITY(~ (8), ~ (~ (~ (8))))))) | (~ (8)))))))))), (_GLF_IDENTITY(_GLF_IDENTITY(8, 0 | (_GLF_IDENTITY(8, 0 ^ (8)))), ~ (_GLF_IDENTITY(~ (8), 0 | (~ (8)))))) / 1))), _GLF_IDENTITY(0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(8), int(ivec3(_GLF_IDENTITY(int(8), (int(8)) >> 0), _GLF_IDENTITY(1, (false ? _GLF_FUZZED(55847) : 1)), 0))), int(_GLF_IDENTITY(_GLF_IDENTITY(8, ~ (_GLF_IDENTITY(~ (8), 0 | (~ (8))))), (_GLF_IDENTITY(8, ~ (_GLF_IDENTITY(~ (8), _GLF_IDENTITY(0, (0) | 0) | (~ (8)))))) / 1))), (0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(8), int(ivec3(_GLF_IDENTITY(int(8), (int(8)) >> 0), _GLF_IDENTITY(1, (false ? _GLF_FUZZED(55847) : _GLF_IDENTITY(1, (1) | 0))), 0))), int(_GLF_IDENTITY(_GLF_IDENTITY(8, ~ (_GLF_IDENTITY(~ (8), _GLF_IDENTITY(0, int(_GLF_IDENTITY(ivec4(_GLF_IDENTITY(0, _GLF_IDENTITY(int(ivec4(0, 0, 0, 0)), 1 * (int(ivec4(0, 0, 0, 0))))), 0, 0, 0), (ivec4(_GLF_IDENTITY(0, _GLF_IDENTITY(int(ivec4(0, 0, 0, 0)), 1 * (int(ivec4(0, 0, 0, 0))))), 0, 0, 0)) ^ ivec4(0, 0, 0, 0)))) | (~ (8))))), (_GLF_IDENTITY(8, ~ (_GLF_IDENTITY(~ (8), 0 | (~ (8)))))) / 1)))) + 0)))); _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(_GLF_IDENTITY(1, ~ (~ _GLF_IDENTITY((1), ((1)) | ((1))))), (_GLF_IDENTITY(1, _GLF_IDENTITY(~ (~ (1)), max(_GLF_IDENTITY(~ (~ (1)), 1 * (~ (~ (1)))), ~ (~ (1)))))) << 0)); _GLF_IDENTITY(_injected_loop_counter ++, _GLF_IDENTITY(_GLF_IDENTITY(~ (~ (_injected_loop_counter ++)), _GLF_IDENTITY(0, (0) >> 0) ^ (~ (~ (_injected_loop_counter ++)))), (false ? _GLF_FUZZED(93017) : _GLF_IDENTITY(~ (~ (_injected_loop_counter ++)), 0 ^ (~ (~ (_injected_loop_counter ++))))))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          return;
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            return;
          }
         else
          {
          }
         if(_GLF_DEAD(false))
          return;
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
              barrier();
            }
           if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, false || (false))))))
            break;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
           barrier();
          }
         else
          {
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         return;
        }
       else
        {
        }
      }
    }
   atomicStore(checker[virtual_gid], read, 4, 64, 4);
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         barrier();
        }
      }
    }
   else
    {
     do
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(mat3x2(injectionSwitch, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0))))).x > injectionSwitch.y), bool(bvec4((_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x > injectionSwitch.y), true, false, _GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), false || ((injectionSwitch.x < injectionSwitch.y))))))))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
    }
   for(int _injected_loop_counter = (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1, (0 >> _GLF_IDENTITY(int(1), int(1))) | (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(_GLF_IDENTITY(-96627, (-96627) | (_GLF_IDENTITY(-96627, max(-96627, -96627))))) : 1)))), 0 | (1)) << _GLF_IDENTITY(int(7), int(7)), (_GLF_IDENTITY(_GLF_IDENTITY(1, (0 >> _GLF_IDENTITY(int(1), int(1))) | (_GLF_IDENTITY(1, _GLF_IDENTITY((false ? _GLF_FUZZED(-96627) : 1), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? (false ? _GLF_FUZZED(-96627) : 1) : _GLF_FUZZED(-96902)))))), 0 | (_GLF_IDENTITY(1, ~ _GLF_IDENTITY((_GLF_IDENTITY(~ (_GLF_IDENTITY(1, (1) * 1)), (~ (_GLF_IDENTITY(_GLF_IDENTITY(1, 0 ^ (1)), _GLF_IDENTITY((1), max((1), (1))) * 1))) / 1)), (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(~ (_GLF_IDENTITY(1, (1) * 1)), (~ (_GLF_IDENTITY(1, (1) * 1))) / 1)), (_GLF_IDENTITY((_GLF_IDENTITY(~ (_GLF_IDENTITY(1, (1) * 1)), (~ (_GLF_IDENTITY(1, (1) * 1))) / 1)), ((_GLF_IDENTITY(~ (_GLF_IDENTITY(1, (1) * 1)), (~ (_GLF_IDENTITY(1, (1) * 1))) / 1))) >> 0)) ^ 0), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY((_GLF_IDENTITY(~ (_GLF_IDENTITY(1, (1) * 1)), (~ (_GLF_IDENTITY(1, (1) * 1))) / 1)), (_GLF_IDENTITY((_GLF_IDENTITY(~ (_GLF_IDENTITY(1, (1) * 1)), (~ (_GLF_IDENTITY(1, (1) * 1))) / 1)), ((_GLF_IDENTITY(~ (_GLF_IDENTITY(1, (1) * 1)), (~ (_GLF_IDENTITY(1, (1) * 1))) / 1))) >> 0)) ^ 0)), ~ (~ (_GLF_IDENTITY(~ (_GLF_IDENTITY((_GLF_IDENTITY(~ (_GLF_IDENTITY(1, (1) * 1)), (~ (_GLF_IDENTITY(1, (1) * 1))) / 1)), (_GLF_IDENTITY((_GLF_IDENTITY(~ (_GLF_IDENTITY(1, (1) * 1)), (~ (_GLF_IDENTITY(1, (1) * 1))) / 1)), ((_GLF_IDENTITY(~ (_GLF_IDENTITY(1, (1) * 1)), (~ (_GLF_IDENTITY(1, (1) * 1))) / 1))) >> 0)) ^ 0)), clamp(~ (_GLF_IDENTITY((_GLF_IDENTITY(~ (_GLF_IDENTITY(1, (1) * 1)), (~ (_GLF_IDENTITY(1, (1) * 1))) / 1)), (_GLF_IDENTITY((_GLF_IDENTITY(~ (_GLF_IDENTITY(1, (1) * 1)), (~ (_GLF_IDENTITY(1, (1) * 1))) / 1)), ((_GLF_IDENTITY(~ (_GLF_IDENTITY(1, (1) * 1)), (~ (_GLF_IDENTITY(1, (1) * 1))) / 1))) >> 0)) ^ 0)), ~ (_GLF_IDENTITY((_GLF_IDENTITY(~ (_GLF_IDENTITY(1, (1) * 1)), (~ (_GLF_IDENTITY(1, (1) * 1))) / 1)), (_GLF_IDENTITY((_GLF_IDENTITY(~ (_GLF_IDENTITY(1, (1) * 1)), (~ (_GLF_IDENTITY(1, (1) * 1))) / 1)), ((_GLF_IDENTITY(~ (_GLF_IDENTITY(1, (1) * 1)), (~ (_GLF_IDENTITY(1, (1) * 1))) / 1))) >> 0)) ^ 0)), ~ (_GLF_IDENTITY((_GLF_IDENTITY(~ (_GLF_IDENTITY(1, (1) * 1)), (~ (_GLF_IDENTITY(1, (1) * 1))) / 1)), (_GLF_IDENTITY((_GLF_IDENTITY(~ (_GLF_IDENTITY(1, (1) * 1)), (~ (_GLF_IDENTITY(1, (1) * 1))) / 1)), ((_GLF_IDENTITY(~ (_GLF_IDENTITY(1, (1) * 1)), (~ (_GLF_IDENTITY(1, (1) * 1))) / 1))) >> 0)) ^ 0)))))))))) | 0)))) << _GLF_IDENTITY(int(7), int(7))) - (0 << _GLF_IDENTITY(int(7), int(7))))), ((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1, (0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), clamp(_GLF_IDENTITY(int(1), int(1)), _GLF_IDENTITY(int(1), int(1)), _GLF_IDENTITY(int(1), int(1))))) | (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-96627) : 1)))), 0 | (1)), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1, (0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), clamp(_GLF_IDENTITY(int(1), int(1)), _GLF_IDENTITY(int(1), int(1)), _GLF_IDENTITY(int(1), int(1))))) | (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-96627) : 1)))), 0 | (1)), max(_GLF_IDENTITY(_GLF_IDENTITY(1, (0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), clamp(_GLF_IDENTITY(int(1), int(1)), _GLF_IDENTITY(int(1), int(1)), _GLF_IDENTITY(int(1), int(1))))) | (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-96627) : 1)))), 0 | (1)), _GLF_IDENTITY(_GLF_IDENTITY(1, (0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), clamp(_GLF_IDENTITY(int(1), int(1)), _GLF_IDENTITY(int(1), int(1)), _GLF_IDENTITY(int(1), int(1))))) | (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-96627) : 1)))), 0 | (1))))) << (0 << _GLF_IDENTITY(int(5), int(5)))) << _GLF_IDENTITY(_GLF_IDENTITY(int(7), (int(7)) | 0), int(7)), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(1, (0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), 0 ^ (_GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), (_GLF_IDENTITY(int(1), int(1))) - 0)))) | (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-96627) : 1)))), _GLF_IDENTITY(0, (0) << 0) | (_GLF_IDENTITY(1, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(1, (1) * 1)), (~ (_GLF_IDENTITY(1, (1) * 1))) / 1))))) << _GLF_IDENTITY(int(7), int(7))) - (0 << _GLF_IDENTITY(int(7), int(7))), max(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(1, (0 >> _GLF_IDENTITY(int(1), int(1))) | (_GLF_IDENTITY(1, _GLF_IDENTITY((false ? _GLF_FUZZED(-96627) : 1), ((false ? _GLF_FUZZED(-96627) : 1)) | ((false ? _GLF_FUZZED(-96627) : 1)))))), 0 | (_GLF_IDENTITY(1, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(1, (1) * 1)), (~ (_GLF_IDENTITY(1, (1) * 1))) / 1))))) << _GLF_IDENTITY(int(7), int(7))) - (0 << _GLF_IDENTITY(int(7), int(7))), int(ivec2((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1, (0 >> _GLF_IDENTITY(int(1), int(1))) | (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-96627) : 1)))), 0 | (_GLF_IDENTITY(1, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(1, (1) * 1)), (~ (_GLF_IDENTITY(1, (1) * 1))) / 1))))) << _GLF_IDENTITY(int(7), int(7)), 0 | (_GLF_IDENTITY(_GLF_IDENTITY(1, (0 >> _GLF_IDENTITY(int(1), int(1))) | (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-96627) : 1)))), 0 | (_GLF_IDENTITY(1, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(1, (1) * 1)), (~ (_GLF_IDENTITY(1, (1) * 1))) / 1))))) << _GLF_IDENTITY(int(7), int(7))))) - (0 << _GLF_IDENTITY(int(7), int(7))), 1))), (_GLF_IDENTITY(_GLF_IDENTITY(1, (0 >> _GLF_IDENTITY(int(1), int(1))) | (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-96627) : 1)))), 0 | (_GLF_IDENTITY(1, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(1, (1) * 1)), (~ _GLF_IDENTITY((_GLF_IDENTITY(1, (1) * 1)), clamp((_GLF_IDENTITY(1, (1) * 1)), (_GLF_IDENTITY(1, (1) * 1)), _GLF_IDENTITY((_GLF_IDENTITY(1, (1) * 1)), max(_GLF_IDENTITY((_GLF_IDENTITY(1, (1) * 1)), ((_GLF_IDENTITY(1, (1) * 1))) >> 0), _GLF_IDENTITY((_GLF_IDENTITY(1, (1) * 1)), ((_GLF_IDENTITY(1, (1) * 1))) * 1)))))) / 1))))) << _GLF_IDENTITY(_GLF_IDENTITY(int(7), min(int(7), int(7))), int(7))) - (0 << _GLF_IDENTITY(int(7), int(7)))))))) | ((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1, (0 >> _GLF_IDENTITY(int(1), int(1))) | (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-96627) : 1)))), 0 | (1)) << _GLF_IDENTITY(int(7), int(7)), (_GLF_IDENTITY(_GLF_IDENTITY(1, (0 >> _GLF_IDENTITY(int(1), int(1))) | (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-96627) : 1)))), _GLF_IDENTITY(0 | (_GLF_IDENTITY(1, ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (_GLF_IDENTITY(1, (1) * 1)), (~ (_GLF_IDENTITY(1, (1) * 1))) | 0), (~ (_GLF_IDENTITY(1, (1) * 1))) / 1)))), clamp(_GLF_IDENTITY(0 | (_GLF_IDENTITY(1, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(1, (1) * 1)), (~ (_GLF_IDENTITY(1, (1) * 1))) / 1)))), (0 | (_GLF_IDENTITY(1, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(1, (1) * 1)), (~ (_GLF_IDENTITY(1, (1) * 1))) / 1))))) - 0), 0 | (_GLF_IDENTITY(1, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(1, (1) * 1)), (~ (_GLF_IDENTITY(1, (1) * 1))) / 1)))), 0 | (_GLF_IDENTITY(_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, int(_GLF_IDENTITY(ivec4(1, 1, 1, 0), max(ivec4(1, 1, 1, 0), ivec4(1, 1, 1, 0))))), 1, 1)), ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (_GLF_IDENTITY(1, (1) * 1)), (~ (_GLF_IDENTITY(1, (1) * 1))) / 1), clamp(_GLF_IDENTITY(_GLF_IDENTITY(~ (_GLF_IDENTITY(1, (1) * 1)), (~ (_GLF_IDENTITY(1, (1) * 1))) / 1), (_GLF_IDENTITY(_GLF_IDENTITY(~ (_GLF_IDENTITY(1, (1) * 1)), (~ (_GLF_IDENTITY(1, (1) * 1))) / 1), min(_GLF_IDENTITY(~ (_GLF_IDENTITY(1, (1) * 1)), (~ (_GLF_IDENTITY(1, (1) * 1))) / 1), _GLF_IDENTITY(~ (_GLF_IDENTITY(1, (1) * 1)), (~ (_GLF_IDENTITY(1, (1) * 1))) / 1)))) ^ 0), _GLF_IDENTITY(~ (_GLF_IDENTITY(1, (1) * 1)), (~ (_GLF_IDENTITY(1, (1) * 1))) / 1), _GLF_IDENTITY(_GLF_IDENTITY(~ (_GLF_IDENTITY(1, (1) * 1)), (~ (_GLF_IDENTITY(1, (1) * 1))) / 1), 0 ^ (_GLF_IDENTITY(~ (_GLF_IDENTITY(1, (1) * 1)), (~ (_GLF_IDENTITY(1, (1) * 1))) / 1))))))))))) << _GLF_IDENTITY(int(7), int(7))) - (0 << _GLF_IDENTITY(int(7), int(7))))))) >> _GLF_IDENTITY(int(7), _GLF_IDENTITY(_GLF_IDENTITY(int(7), 1 * (int(7))), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(int(7), 1 * (int(7))), min(_GLF_IDENTITY(int(_GLF_IDENTITY(7, (7) | (7))), 1 * (int(7))), _GLF_IDENTITY(int(7), 1 * (int(7)))))) ^ int(_GLF_ZERO(0.0, injectionSwitch.x)), _GLF_IDENTITY(int(int((_GLF_IDENTITY(_GLF_IDENTITY(int(7), 1 * (int(7))), min(_GLF_IDENTITY(int(_GLF_IDENTITY(7, (7) | (7))), 1 * (int(7))), _GLF_IDENTITY(int(7), 1 * (int(7)))))) ^ int(_GLF_ZERO(0.0, injectionSwitch.x)))), clamp(int(int((_GLF_IDENTITY(_GLF_IDENTITY(int(7), 1 * (int(7))), min(_GLF_IDENTITY(int(_GLF_IDENTITY(7, (7) | (7))), 1 * (int(7))), _GLF_IDENTITY(int(7), 1 * (int(7)))))) ^ int(_GLF_ZERO(0.0, injectionSwitch.x)))), int(int((_GLF_IDENTITY(_GLF_IDENTITY(int(7), 1 * (int(7))), min(_GLF_IDENTITY(int(_GLF_IDENTITY(7, (7) | (7))), 1 * (int(7))), _GLF_IDENTITY(int(7), 1 * (int(7)))))) ^ int(_GLF_ZERO(0.0, injectionSwitch.x)))), int(int((_GLF_IDENTITY(_GLF_IDENTITY(int(7), 1 * (int(7))), min(_GLF_IDENTITY(int(_GLF_IDENTITY(7, (7) | (7))), 1 * (int(7))), _GLF_IDENTITY(int(7), 1 * (int(7)))))) ^ int(_GLF_ZERO(0.0, injectionSwitch.x)))))))))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, _GLF_IDENTITY((_injected_loop_counter), min((_injected_loop_counter), (_injected_loop_counter))) * 1) != (_GLF_IDENTITY((0 << _GLF_IDENTITY(int(5), int(5))), min((0 << _GLF_IDENTITY(int(5), int(5))), (0 << _GLF_IDENTITY(int(5), int(5))))) >> _GLF_IDENTITY(int(6), int(6))), (_GLF_IDENTITY(_injected_loop_counter != ((0 << _GLF_IDENTITY(_GLF_IDENTITY(int(5), (_GLF_IDENTITY(int(5), (int(5)) | (int(5)))) / 1), int(_GLF_IDENTITY(5, 0 | (_GLF_IDENTITY(5, (5) << 0)))))) >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), 1 * (int(6))))), bool(bvec3(_injected_loop_counter != ((0 << _GLF_IDENTITY(int(5), int(_GLF_IDENTITY(5, max(5, _GLF_IDENTITY(5, ~ (~ (5)))))))) >> _GLF_IDENTITY(int(6), int(6))), true, true)))) || false), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, _GLF_IDENTITY((_injected_loop_counter), min((_injected_loop_counter), (_injected_loop_counter))) * 1) != (_GLF_IDENTITY((0 << _GLF_IDENTITY(int(5), int(5))), min((0 << _GLF_IDENTITY(int(5), int(5))), (0 << _GLF_IDENTITY(int(5), int(5))))) >> _GLF_IDENTITY(int(6), int(6))), (_GLF_IDENTITY(_injected_loop_counter != ((0 << _GLF_IDENTITY(_GLF_IDENTITY(int(5), _GLF_IDENTITY((_GLF_IDENTITY(int(5), (int(5)) | (int(5)))) / 1, min((_GLF_IDENTITY(int(5), (int(5)) | (int(5)))) / 1, (_GLF_IDENTITY(int(5), (int(5)) | (int(5)))) / 1))), int(_GLF_IDENTITY(5, 0 | (_GLF_IDENTITY(5, _GLF_IDENTITY((5) << 0, ((5) << 0) | (_GLF_IDENTITY((5) << 0, (_GLF_IDENTITY((5) << 0, (false ? _GLF_FUZZED(11642) : (5) << 0))) ^ 0))))))))) >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), 1 * (int(6))))), bool(bvec3(_injected_loop_counter != ((0 << _GLF_IDENTITY(int(5), int(_GLF_IDENTITY(_GLF_IDENTITY(5, (true ? _GLF_IDENTITY(5, 0 ^ (5)) : _GLF_FUZZED(28411))), max(5, _GLF_IDENTITY(5, ~ (~ (5)))))))) >> _GLF_IDENTITY(int(6), int(6))), true, true)))) || false))))); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(distance(vec4(-6.4, -7.7, 8.0, 8125.9830), vec4(4.3, -268.571, -3.6, -307.451)))))), ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(distance(vec4(-6.4, -7.7, 8.0, 8125.9830), vec4(4.3, -268.571, -3.6, -307.451))))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, true, false)), (bool(bvec3(false, true, false))) || false)), (false) && true), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(false, (false) && true), true)), true && (bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), false || (! (true)))))), (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), false || (! (true)))))), ! (! (_GLF_IDENTITY(false, (false) && _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), false || (! _GLF_IDENTITY((true), ! (! ((true))))))))))))) && true), true)))))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
        {
         if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), false, true, false))))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         break;
        }
       break;
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            return;
           barrier();
          }
        }
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      continue;
    }
   if(_GLF_DEAD(false))
    {
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          {
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
          }
        }
       else
        {
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
        return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           return;
          }
         else
          {
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
         if(_GLF_DEAD(false))
          return;
        }
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         return;
         if(_GLF_DEAD(false))
          return;
        }
       if(_GLF_DEAD(false))
        return;
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), false || (_GLF_WRAPPED_IF_TRUE(true))))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             return;
            }
          }
         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
          return;
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
           if(_GLF_DEAD(false))
            barrier();
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))))
        return;
      }
     else
      {
      }
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(9.4) : injectionSwitch.x)) > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       barrier();
      }
     else
      {
      }
    }
   do
    {
     for(int _injected_loop_counter = (1 & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
   if(_GLF_DEAD(false))
    return;
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           return;
          }
        }
       else
        {
         do
          {
           do
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              continue;
             barrier();
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
         do
          {
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                continue;
               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                   for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                    {
                     barrier();
                    }
                  }
                 barrier();
                 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-6460.7572)), float(injectionSwitch.x), bool(true))))), injectionSwitch.x)) > injectionSwitch.y))))
                  return;
                }
               else
                {
                }
               if(_GLF_DEAD(false))
                {
                 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                  {
                   barrier();
                  }
                }
              }
             barrier();
             if(_GLF_DEAD(false))
              return;
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(false))
        return;
      }
     else
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && _GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec3(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), bvec3(bvec4(bvec3(true, _GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (injectionSwitch.x > injectionSwitch.y)), true), false))))))))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           return;
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           barrier();
          }
         else
          {
          }
         if(_GLF_DEAD(false))
          return;
        }
       subgroupAll(true);
      }
    }
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, false || (false))) || false)), false || (_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (! (false)))))) || _GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, true && (false)), true, true, false))))))))
    {
     do
      {
       return;
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (false)), true && ((! (false)))))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
      return;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = (_GLF_IDENTITY(0 >> _GLF_IDENTITY(int(5), int(5)), 0 | (0 >> _GLF_IDENTITY(int(5), int(5))))); _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 | 1)); _injected_loop_counter ++)
        {
         barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
        }
      }
     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), ! (! (_GLF_WRAPPED_IF_FALSE(false))))) && true)))))
      {
      }
     else
      {
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec2((injectionSwitch.x > injectionSwitch.y), false))))))
      barrier();
    }
  }
 if(_GLF_DEAD(false))
  return;
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END
BUFFER checker DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected_checker DATA_TYPE uint32 SIZE 8388096 FILL 1

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 
  BIND BUFFER checker AS storage DESCRIPTOR_SET 0 BINDING 2 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT checker EQ_BUFFER expected_checker
