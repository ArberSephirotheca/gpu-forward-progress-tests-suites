#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uvec4 GLF_merged4_0_1_16_1_1_4_2_1_17_3_1_12next_virtual_gidreadsubgroup_local_idworkgroup_id;
 uvec2 GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size;
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 GLF_merged4_0_1_16_1_1_4_2_1_17_3_1_12next_virtual_gidreadsubgroup_local_idworkgroup_id.z = subgroup_local_id;
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = gl_WorkGroupSize.x;
 GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size.y = workgroup_size;
 uint workgroup_id = gl_WorkGroupID.x;
 GLF_merged4_0_1_16_1_1_4_2_1_17_3_1_12next_virtual_gidreadsubgroup_local_idworkgroup_id.w = workgroup_id;
 for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
  {
   GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size.x = GLF_merged4_0_1_16_1_1_4_2_1_17_3_1_12next_virtual_gidreadsubgroup_local_idworkgroup_id.w;
  }
 uint workgroup_base = GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size.y * GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size.x;
 uint virtual_gid = workgroup_base + subgroup_id * subgroup_size + GLF_merged4_0_1_16_1_1_4_2_1_17_3_1_12next_virtual_gidreadsubgroup_local_idworkgroup_id.z;
 uint next_virtual_gid = workgroup_base + subgroup_id * subgroup_size + ((GLF_merged4_0_1_16_1_1_4_2_1_17_3_1_12next_virtual_gidreadsubgroup_local_idworkgroup_id.z + 1) % subgroup_size);
 GLF_merged4_0_1_16_1_1_4_2_1_17_3_1_12next_virtual_gidreadsubgroup_local_idworkgroup_id.x = next_virtual_gid;
 do
  {
   atomicStore(buf[GLF_merged4_0_1_16_1_1_4_2_1_17_3_1_12next_virtual_gidreadsubgroup_local_idworkgroup_id.x], uint(1), 4, 64, 4);
  }
 while(_GLF_WRAPPED_LOOP(false));
 uint read = atomicLoad(buf[virtual_gid], 4, 64, 0);
 GLF_merged4_0_1_16_1_1_4_2_1_17_3_1_12next_virtual_gidreadsubgroup_local_idworkgroup_id.y = read;
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
  {
   do
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(GLF_merged4_0_1_16_1_1_4_2_1_17_3_1_12next_virtual_gidreadsubgroup_local_idworkgroup_id.z + 1 < subgroup_size)
        {
         switch(_GLF_SWITCH(0))
          {
           case 0:
           case 52:
           case 91:
           case 33:
           case 26:
           atomicStore(checker[virtual_gid], GLF_merged4_0_1_16_1_1_4_2_1_17_3_1_12next_virtual_gidreadsubgroup_local_idworkgroup_id.y, 4, 64, 4);
           case 79:
           case 65:
           case 15:
           case 36:
           case 54:
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             subgroupAll(false);
            }
           break;
           default:
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             1;
            }
          }
        }
       else
        {
         switch(_GLF_SWITCH(_GLF_IDENTITY(0, max(0, 0))))
          {
           case 8:
           for(bvec3 _GLF_SWITCH_1_0v, _GLF_SWITCH_1_1v, _GLF_SWITCH_1_2v[24]; true; (false ? mat2(-7.9, 73.97, -2.2, 498.864) : mat2(-22.08, 6923.2147, -68.30, 184.350))[0])
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if((true && false))
                {
                 float _GLF_SWITCH_1_3v, _GLF_SWITCH_1_4v[78];
                 while((false || false))
                  {
                  }
                 do
                  {
                   if(false)
                    {
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                      }
                     else
                      {
                       ;
                      }
                     vec4 _GLF_SWITCH_1_5v, _GLF_SWITCH_1_6v[97], _GLF_SWITCH_1_7v;
                    }
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, bool(bvec4(false, false, false, true))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))));
                }
              }
             else
              {
              }
             if(false)
              {
               float _GLF_SWITCH_1_8v[2], _GLF_SWITCH_1_9v[40], _GLF_SWITCH_1_10v;
               {
                ;
                (mat2(mat3x2(0.0, -2.0, 4.0, -459.726, 7.9, -568.486)) * vec2(0.8, 30.58));
                mat4x2 _GLF_SWITCH_1_11v[89], _GLF_SWITCH_1_12v[68];
                for(int _injected_loop_counter = (1 & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
                 {
                  for(int _injected_loop_counter = (1 ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                   {
                    if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                     {
                     }
                    else
                     {
                      for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, (0) + 0)); _injected_loop_counter --)
                       {
                        mix((uvec3(75191u, 145136u, 189072u) | uvec3(194026u, 187467u, 47455u)), uvec3(144654u, 116823u, 84522u), greaterThanEqual(ivec3(45377, 35657, 52522), ivec3(-27537, 27869, -61640)));
                       }
                     }
                   }
                 }
                (subgroup_size ^ uvec4(121883u, 68266u, 154028u, 77214u));
                bool _GLF_SWITCH_1_13v, _GLF_SWITCH_1_14v;
                mat2x4(mat2(-4.0, 3.5, 708.306, 6.1));
                vec3 _GLF_SWITCH_1_15v;
                greaterThanEqual((uvec3(65666u, 40745u, 161591u) % subgroup_size), uvec3(146375u, 11483u, 2428u));
               }
               uvec4 _GLF_SWITCH_1_16v, _GLF_SWITCH_1_17v, _GLF_SWITCH_1_18v;
               ;
               findMSB((ivec2(16360, -70768).t * ivec3(-26343, -15325, 86308)));
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 mat3x2(mat3(3.0, -5816.6058, -903.120, 7192.9314, -9715.0598, 207.812, -975.508, 700.358, -9823.4170));
                }
               if(bvec3(false, false, true).p)
                {
                 bvec2 _GLF_SWITCH_1_19v[65];
                 bvec2(false, true);
                }
               while((_GLF_SWITCH_1_10v != 6227.1938))
                {
                 bvec2(true, true);
                 mat4 _GLF_SWITCH_1_20v;
                 vec3 _GLF_SWITCH_1_21v, _GLF_SWITCH_1_22v;
                 sign(ivec4(-37726, -82789, 63954, 79801));
                 mat4x2(63.91, 0.3, 4.7, 3.2, 658.048, 4032.1821, -4.6, -42.77);
                 false;
                 bvec2(true, false);
                 int _GLF_SWITCH_1_23v;
                }
              }
             ivec2(2857, -82284);
             mat4 _GLF_SWITCH_1_24v;
             ivec2 _GLF_SWITCH_1_25v;
            }
           case 0:
           case 15:
           case 78:
           atomicStore(checker[virtual_gid], GLF_merged4_0_1_16_1_1_4_2_1_17_3_1_12next_virtual_gidreadsubgroup_local_idworkgroup_id.y, 4, 64, 4);
           case 42:
           case 60:
           subgroupAll(true);
           break;
           case 80:
           for(int _injected_loop_counter = (1 & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > (1 ^ 1)); _injected_loop_counter --)
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               ;
              }
             else
              {
              }
            }
           default:
           1;
          }
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END
BUFFER checker DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected_checker DATA_TYPE uint32 SIZE 8388096 FILL 1

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 
  BIND BUFFER checker AS storage DESCRIPTOR_SET 0 BINDING 2 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT checker EQ_BUFFER expected_checker
