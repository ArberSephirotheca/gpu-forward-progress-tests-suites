#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(false))
  barrier();
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bvec4(injectionSwitch.x > injectionSwitch.y, true, false, false)), bool(bool(bool(bvec4(injectionSwitch.x > injectionSwitch.y, true, false, false))))))))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec3(injectionSwitch.x > injectionSwitch.y, false, false)))))))
    barrier();
   barrier();
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), false, false, false))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   barrier();
  }
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), false || (false))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, true, true)))))
        barrier();
       barrier();
      }
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(_GLF_IDENTITY(mat2x4(injectionSwitch.y, 1.0, 1.0, 1.0, 0.0, 0.0, _GLF_IDENTITY(dot(vec3(0.0, tan(0.0), 1.0), vec3(0.0, abs(0.0), 1.0)), dot(vec3(0.0, tan(0.0), 1.0), vec3(0.0, abs(0.0), 1.0))), length(0.0)), transpose(transpose(_GLF_IDENTITY(mat2x4(injectionSwitch.y, 1.0, 1.0, 1.0, 0.0, 0.0, _GLF_IDENTITY(dot(vec3(0.0, tan(0.0), 1.0), vec3(0.0, abs(0.0), 1.0)), dot(vec3(0.0, tan(0.0), 1.0), vec3(0.0, abs(0.0), 1.0))), length(0.0)), transpose(transpose(mat2x4(injectionSwitch.y, 1.0, 1.0, 1.0, 0.0, 0.0, _GLF_IDENTITY(dot(vec3(0.0, tan(0.0), 1.0), vec3(0.0, abs(0.0), 1.0)), dot(vec3(0.0, tan(0.0), 1.0), vec3(0.0, abs(0.0), 1.0))), length(0.0))))))))))))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)), false || ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true))))))))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED((-4922.8439 / -5105.2579)))) > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (false)), ! (! ((! (false))))))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint workgroup_base = _GLF_IDENTITY(workgroup_size, ~ _GLF_IDENTITY((~ (workgroup_size)), max((~ (workgroup_size)), (~ (workgroup_size))))) * workgroup_id;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 uint virtual_gid = workgroup_base + subgroup_id * subgroup_size + subgroup_local_id;
 uint next_virtual_gid = workgroup_base + subgroup_id * subgroup_size + _GLF_IDENTITY((_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, _GLF_IDENTITY((_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, _GLF_IDENTITY(((subgroup_local_id + 1) % subgroup_size), (_GLF_IDENTITY(false, false || (false)) ? _GLF_FUZZED(workgroup_id) : ((subgroup_local_id + 1) % subgroup_size))) >> 0u)) ^ (_GLF_IDENTITY(0u << _GLF_IDENTITY(uint(7u), uint(7u)), max(0u << _GLF_IDENTITY(uint(7u), _GLF_IDENTITY(uint(7u), (uint(7u)) | (_GLF_IDENTITY(uint(7u), uint(uvec3(uint(7u), 0u, 1u)))))), _GLF_IDENTITY(0u << _GLF_IDENTITY(uint(7u), uint(7u)), uint(uint(0u << _GLF_IDENTITY(uint(7u), uint(7u)))))))), (_GLF_IDENTITY((_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, _GLF_IDENTITY(((subgroup_local_id + 1) % subgroup_size), (false ? _GLF_FUZZED(workgroup_id) : ((_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) / 1u) + 1) % subgroup_size))) >> 0u)) ^ (_GLF_IDENTITY(0u << _GLF_IDENTITY(uint(7u), uint(7u)), max(0u << _GLF_IDENTITY(uint(7u), _GLF_IDENTITY(_GLF_IDENTITY(uint(7u), (uint(7u)) | (_GLF_IDENTITY(uint(7u), uint(uvec3(uint(7u), 0u, 1u))))), (_GLF_IDENTITY(uint(7u), (uint(7u)) | (_GLF_IDENTITY(uint(7u), uint(uvec3(uint(7u), 0u, 1u)))))) + 0u)), 0u << _GLF_IDENTITY(uint(7u), uint(7u))))), 0u ^ ((_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, _GLF_IDENTITY(((subgroup_local_id + 1) % subgroup_size), (false ? _GLF_FUZZED(workgroup_id) : ((subgroup_local_id + 1) % subgroup_size))) >> 0u)) ^ (_GLF_IDENTITY(0u << _GLF_IDENTITY(uint(7u), uint(7u)), max(0u << _GLF_IDENTITY(uint(7u), _GLF_IDENTITY(uint(7u), (uint(7u)) | (_GLF_IDENTITY(uint(7u), uint(uvec3(uint(7u), 0u, 1u)))))), 0u << _GLF_IDENTITY(uint(7u), uint(7u)))))))) << 0u))), clamp((_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, (_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, _GLF_IDENTITY(((subgroup_local_id + _GLF_IDENTITY(1, 0 + (_GLF_IDENTITY(1, (1) | (1))))) % subgroup_size), (false ? _GLF_FUZZED(workgroup_id) : ((subgroup_local_id + 1) % subgroup_size))) >> 0u)) ^ (_GLF_IDENTITY(0u << _GLF_IDENTITY(uint(7u), uint(7u)), max(0u << _GLF_IDENTITY(uint(7u), uint(7u)), 0u << _GLF_IDENTITY(uint(7u), uint(7u))))))), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, max((subgroup_local_id + 1) % subgroup_size, (subgroup_local_id + 1) % subgroup_size)), (_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, _GLF_IDENTITY(((subgroup_local_id + 1) % subgroup_size), (false ? _GLF_FUZZED(workgroup_id) : ((subgroup_local_id + 1) % _GLF_IDENTITY(subgroup_size, (true ? subgroup_size : _GLF_FUZZED(subgroup_local_id)))))) >> 0u)) ^ (_GLF_IDENTITY(0u << _GLF_IDENTITY(uint(7u), uint(7u)), max(0u << _GLF_IDENTITY(uint(7u), uint(7u)), 0u << _GLF_IDENTITY(uint(7u), uint(7u))))))), uint(uvec2((_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, ~ (~ (subgroup_local_id)))) | _GLF_IDENTITY((subgroup_local_id), (_GLF_IDENTITY((subgroup_local_id), min((subgroup_local_id), (subgroup_local_id)))) | ((subgroup_local_id)))) + 1) % subgroup_size, max((subgroup_local_id + 1) % subgroup_size, (subgroup_local_id + 1) % subgroup_size)), (_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, _GLF_IDENTITY(((subgroup_local_id + 1) % subgroup_size), (false ? _GLF_FUZZED(workgroup_id) : ((subgroup_local_id + 1) % subgroup_size))) >> 0u)) ^ (_GLF_IDENTITY(0u << _GLF_IDENTITY(uint(7u), uint(7u)), max(0u << _GLF_IDENTITY(uint(7u), uint(7u)), 0u << _GLF_IDENTITY(uint(7u), uint(7u))))))), 0u))), _GLF_IDENTITY((_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, (_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, _GLF_IDENTITY(((subgroup_local_id + 1) % subgroup_size), (false ? _GLF_FUZZED(workgroup_id) : ((subgroup_local_id + 1) % subgroup_size))) >> 0u)) ^ (_GLF_IDENTITY(0u << _GLF_IDENTITY(uint(7u), uint(7u)), max(0u << _GLF_IDENTITY(uint(7u), uint(7u)), 0u << _GLF_IDENTITY(uint(7u), uint(7u))))))), ((_GLF_IDENTITY((subgroup_local_id + _GLF_IDENTITY(1, (1) >> 0)) % subgroup_size, (_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, _GLF_IDENTITY(((subgroup_local_id + 1) % subgroup_size), (false ? _GLF_FUZZED(workgroup_id) : ((subgroup_local_id + 1) % subgroup_size))) >> 0u)) ^ (_GLF_IDENTITY(0u << _GLF_IDENTITY(uint(7u), uint(7u)), max(0u << _GLF_IDENTITY(uint(7u), uint(7u)), 0u << _GLF_IDENTITY(uint(7u), uint(7u)))))))) * 1u)));
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(injectionSwitch.x > injectionSwitch.y, true, false, true)))), bool(bool(bool(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(injectionSwitch.x > injectionSwitch.y, true, _GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, ! (! (false))), true))), true)))))))))))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(min(injectionSwitch.y, injectionSwitch.y), clamp(min(_GLF_IDENTITY(injectionSwitch, vec2(mat3(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(_GLF_IDENTITY(vec2(1.2, -692.515), min(vec2(1.2, -692.515), vec2(1.2, -692.515)))) : injectionSwitch)), 1.0, sqrt(1.0), _GLF_ONE(1.0, injectionSwitch.y), 0.0, sin(0.0), 1.0, 0.0))).y, _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(vec4(-7.5, 408.761, -7912.5959, 749.598).s), _GLF_FUZZED(-7.9)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))).y), min(injectionSwitch.y, injectionSwitch.y), _GLF_IDENTITY(min(injectionSwitch.y, injectionSwitch.y), (min(injectionSwitch.y, injectionSwitch.y)) * 1.0))))))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 atomicStore(buf[next_virtual_gid], uint(1), 4, 64, 4);
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || false)) && _GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec2(true, true), bvec2(bvec4(bvec2(true, true), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(_GLF_IDENTITY(bvec3((injectionSwitch.x > injectionSwitch.y), true, true), bvec3(_GLF_IDENTITY(bvec3(bvec3((injectionSwitch.x > injectionSwitch.y), true, true)), bvec3(bvec3(bvec3(bvec3((injectionSwitch.x > injectionSwitch.y), true, true))))))))))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 uint read = atomicLoad(buf[_GLF_IDENTITY(virtual_gid, min(virtual_gid, virtual_gid))], 4, 64, 0);
 if(subgroup_local_id + _GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, _GLF_IDENTITY(0, int(ivec4(_GLF_IDENTITY(0, (_GLF_IDENTITY(0, _GLF_IDENTITY(min(0, 0), max(_GLF_IDENTITY(min(0, 0), min(_GLF_IDENTITY(min(0, 0), min(min(0, 0), min(0, 0))), min(0, 0))), min(0, 0))))) - 0), 0, 0, (1 & 1)))) ^ (1)), 1, 1)) < subgroup_size)
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), ! (! (! (! (false))))))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   atomicStore(checker[virtual_gid], read, 4, _GLF_IDENTITY(_GLF_IDENTITY(64, (64) | 0), clamp(_GLF_IDENTITY(64, (64) | _GLF_IDENTITY(0, min(0, 0))), _GLF_IDENTITY(_GLF_IDENTITY(64, (64) | 0), (_GLF_IDENTITY(64, (64) | 0)) | 0), _GLF_IDENTITY(64, _GLF_IDENTITY((64), 0 ^ (_GLF_IDENTITY(_GLF_IDENTITY((64), ((64)) ^ 0), _GLF_IDENTITY((_GLF_IDENTITY((64), ((64)) ^ _GLF_IDENTITY(0, min(_GLF_IDENTITY(0, (0) | (0)), 0)))), 0 ^ ((_GLF_IDENTITY((64), ((64)) ^ _GLF_IDENTITY(0, min(_GLF_IDENTITY(0, (0) | (0)), 0)))))) | 0))) | _GLF_IDENTITY(0, (0) | (0))))), 4);
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, (false) && true), true, false)))) && true)))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   subgroupAll(false);
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y, injectionSwitch.y)), bool(bool(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y, injectionSwitch.y)))))))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(-4.3)))))))
        barrier();
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, true, true)), bool(bool(bool(bvec3(false, true, true)))))), _GLF_IDENTITY((false), ((false)) && true) && true)))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false)))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), false || (_GLF_IDENTITY(! (! (false)), bool(bvec2(! (! (false)), true))))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
         barrier();
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(true && (false), ! (! (_GLF_IDENTITY(true && (false), ! (! (_GLF_IDENTITY(true && (false), ! (! (true && (false)))))))))))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) || false)) || false)))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), bool(bvec2((false), false)))))))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       barrier();
      }
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(mat4x3(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), 0.0, 1.0, 1.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), tan(0.0), 1.0, 1.0, 1.0, 0.0, 0.0))).x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   atomicStore(checker[virtual_gid], read, _GLF_IDENTITY(_GLF_IDENTITY(4, _GLF_IDENTITY(clamp(4, 4, 4), _GLF_IDENTITY(0, (true ? _GLF_IDENTITY(0, clamp(0, _GLF_IDENTITY(0, (0) / 1), 0)) : _GLF_FUZZED(_GLF_IDENTITY(14580, (14580) / 1)))) | _GLF_IDENTITY((_GLF_IDENTITY(clamp(4, 4, 4), max(clamp(4, 4, 4), _GLF_IDENTITY(clamp(4, 4, 4), (clamp(_GLF_IDENTITY(4, ~ (_GLF_IDENTITY(~ (4), (~ (4)) | 0))), 4, 4)) >> 0)))), 0 | (_GLF_IDENTITY((_GLF_IDENTITY(clamp(4, 4, 4), max(clamp(4, 4, _GLF_IDENTITY(4, clamp(_GLF_IDENTITY(4, (true ? 4 : _GLF_FUZZED(-58153))), 4, _GLF_IDENTITY(4, ~ (~ (4)))))), _GLF_IDENTITY(clamp(4, 4, 4), (clamp(_GLF_IDENTITY(4, ~ (_GLF_IDENTITY(~ (4), (~ (4)) | 0))), 4, 4)) >> 0)))), clamp((_GLF_IDENTITY(clamp(4, 4, 4), max(clamp(4, 4, 4), _GLF_IDENTITY(clamp(4, 4, 4), (clamp(_GLF_IDENTITY(4, ~ (_GLF_IDENTITY(~ (4), (~ (4)) | 0))), 4, 4)) >> 0)))), (_GLF_IDENTITY(clamp(4, 4, 4), max(clamp(4, 4, 4), _GLF_IDENTITY(clamp(4, 4, 4), (clamp(_GLF_IDENTITY(4, ~ (_GLF_IDENTITY(~ (4), (~ (4)) | 0))), 4, _GLF_IDENTITY(4, min(4, 4)))) >> 0)))), (_GLF_IDENTITY(clamp(4, 4, 4), max(_GLF_IDENTITY(clamp(4, 4, 4), (_GLF_IDENTITY(clamp(4, 4, 4), int(ivec4(clamp(4, 4, 4), 1, 0, 0)))) | (clamp(4, 4, 4))), _GLF_IDENTITY(clamp(4, 4, 4), (clamp(_GLF_IDENTITY(4, ~ (_GLF_IDENTITY(~ (4), (~ (4)) | 0))), 4, 4)) >> 0)))))))))), _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(4, _GLF_IDENTITY(_GLF_IDENTITY(clamp(4, 4, 4), (true ? _GLF_IDENTITY(clamp(4, 4, 4), (clamp(4, 4, 4)) >> (0 >> _GLF_IDENTITY(int(3), int(3)))) : _GLF_FUZZED(int(93.46)))), _GLF_IDENTITY(0, (true ? _GLF_IDENTITY(0, clamp(0, _GLF_IDENTITY(0, (0) / 1), 0)) : _GLF_FUZZED(14580))) | (_GLF_IDENTITY(clamp(4, 4, _GLF_IDENTITY(4, min(_GLF_IDENTITY(4, (4) / int(_GLF_ONE(1.0, injectionSwitch.y))), _GLF_IDENTITY(4, (4) * 1)))), max(clamp(4, 4, 4), _GLF_IDENTITY(clamp(4, 4, 4), (clamp(_GLF_IDENTITY(4, (_GLF_IDENTITY(4, clamp(4, 4, 4))) | (4)), 4, _GLF_IDENTITY(4, (4) | (4)))) >> 0))))))), (0 | 0) | (_GLF_IDENTITY((_GLF_IDENTITY(4, _GLF_IDENTITY(_GLF_IDENTITY(clamp(4, 4, 4), (true ? _GLF_IDENTITY(clamp(4, 4, 4), (clamp(4, 4, 4)) >> (0 >> _GLF_IDENTITY(int(3), int(3)))) : _GLF_FUZZED(int(93.46)))), _GLF_IDENTITY(0, (true ? _GLF_IDENTITY(0, clamp(0, _GLF_IDENTITY(0, (0) / 1), 0)) : _GLF_FUZZED(14580))) | (_GLF_IDENTITY(clamp(4, 4, _GLF_IDENTITY(4, min(_GLF_IDENTITY(4, (4) / int(_GLF_ONE(1.0, injectionSwitch.y))), _GLF_IDENTITY(_GLF_IDENTITY(4, (4) << (0 << _GLF_IDENTITY(int(8), int(8)))), (4) * _GLF_IDENTITY(1, (1) | 0))))), max(clamp(4, 4, 4), _GLF_IDENTITY(clamp(4, 4, 4), (clamp(4, 4, _GLF_IDENTITY(4, (4) | (4)))) >> 0))))))), ((_GLF_IDENTITY(4, _GLF_IDENTITY(_GLF_IDENTITY(clamp(4, 4, 4), (true ? _GLF_IDENTITY(clamp(4, 4, 4), _GLF_IDENTITY((clamp(4, 4, 4)) >> (0 >> _GLF_IDENTITY(int(3), int(_GLF_IDENTITY(3, (3) | (_GLF_IDENTITY(3, clamp(3, _GLF_IDENTITY(3, 1 * (3)), _GLF_IDENTITY(3, int(ivec3(3, 0, 1)))))))))), max(_GLF_IDENTITY((clamp(4, 4, 4)) >> (0 >> _GLF_IDENTITY(int(3), int(_GLF_IDENTITY(3, (3) | (_GLF_IDENTITY(3, clamp(3, _GLF_IDENTITY(3, 1 * (3)), _GLF_IDENTITY(3, int(ivec3(3, 0, 1)))))))))), _GLF_IDENTITY(int(ivec2((clamp(4, 4, 4)) >> (0 >> _GLF_IDENTITY(int(3), int(_GLF_IDENTITY(3, (3) | (_GLF_IDENTITY(3, clamp(3, _GLF_IDENTITY(3, 1 * (3)), _GLF_IDENTITY(3, int(ivec3(3, 0, 1)))))))))), 1)), (int(ivec2((clamp(4, 4, 4)) >> (0 >> _GLF_IDENTITY(int(3), int(_GLF_IDENTITY(3, (3) | (_GLF_IDENTITY(3, clamp(3, _GLF_IDENTITY(3, 1 * (3)), _GLF_IDENTITY(3, int(ivec3(3, 0, 1)))))))))), 1))) | (int(ivec2((clamp(4, 4, 4)) >> (0 >> _GLF_IDENTITY(int(3), int(_GLF_IDENTITY(3, (3) | (_GLF_IDENTITY(3, clamp(3, _GLF_IDENTITY(3, 1 * (3)), _GLF_IDENTITY(3, int(ivec3(3, 0, 1)))))))))), 1))))), (clamp(4, 4, 4)) >> (0 >> _GLF_IDENTITY(int(3), int(_GLF_IDENTITY(3, (3) | (_GLF_IDENTITY(3, clamp(3, _GLF_IDENTITY(3, 1 * (3)), _GLF_IDENTITY(3, int(ivec3(3, 0, 1))))))))))))) : _GLF_FUZZED(int(93.46)))), _GLF_IDENTITY(0, (true ? _GLF_IDENTITY(0, clamp(0, _GLF_IDENTITY(0, (0) / 1), 0)) : _GLF_FUZZED(14580))) | (_GLF_IDENTITY(clamp(4, 4, _GLF_IDENTITY(4, min(_GLF_IDENTITY(4, (4) / int(_GLF_ONE(1.0, injectionSwitch.y))), _GLF_IDENTITY(4, (4) * 1)))), max(clamp(4, 4, 4), _GLF_IDENTITY(clamp(4, 4, 4), (clamp(4, 4, _GLF_IDENTITY(4, (4) | (4)))) >> 0)))))))) | (_GLF_IDENTITY((_GLF_IDENTITY(4, _GLF_IDENTITY(_GLF_IDENTITY(clamp(4, 4, 4), (true ? _GLF_IDENTITY(clamp(4, 4, 4), (clamp(4, 4, 4)) >> (0 >> _GLF_IDENTITY(int(3), int(3)))) : _GLF_FUZZED(int(93.46)))), _GLF_IDENTITY(0, (true ? _GLF_IDENTITY(0, clamp(0, _GLF_IDENTITY(0, (0) / 1), 0)) : _GLF_FUZZED(14580))) | (_GLF_IDENTITY(clamp(4, 4, _GLF_IDENTITY(4, min(_GLF_IDENTITY(4, (4) / int(_GLF_ONE(1.0, injectionSwitch.y))), _GLF_IDENTITY(4, (4) * _GLF_IDENTITY(1, (1) | (0 | 0)))))), max(clamp(4, 4, 4), _GLF_IDENTITY(clamp(4, 4, 4), (clamp(4, 4, _GLF_IDENTITY(4, (4) | (4)))) >> 0))))))), ~ (~ ((_GLF_IDENTITY(4, _GLF_IDENTITY(_GLF_IDENTITY(clamp(4, 4, 4), (_GLF_IDENTITY(true ? _GLF_IDENTITY(clamp(4, 4, 4), (clamp(4, 4, 4)) >> (0 >> _GLF_IDENTITY(int(3), int(3)))) : _GLF_FUZZED(int(93.46)), (true ? _GLF_IDENTITY(clamp(4, 4, 4), (clamp(4, 4, 4)) >> (0 >> _GLF_IDENTITY(int(3), int(3)))) : _GLF_FUZZED(int(93.46))) - 0))), _GLF_IDENTITY(0, (true ? _GLF_IDENTITY(0, clamp(_GLF_IDENTITY(0, (0) + 0), _GLF_IDENTITY(0, (0) / 1), 0)) : _GLF_FUZZED(14580))) | (_GLF_IDENTITY(clamp(_GLF_IDENTITY(4, int(ivec3(4, 0, 0))), 4, _GLF_IDENTITY(4, min(_GLF_IDENTITY(4, (4) / int(_GLF_ONE(1.0, injectionSwitch.y))), _GLF_IDENTITY(4, (4) * 1)))), max(clamp(4, 4, 4), _GLF_IDENTITY(clamp(4, 4, 4), (clamp(4, 4, _GLF_IDENTITY(4, (4) | (4)))) >> 0)))))))))))))), (_GLF_IDENTITY((_GLF_IDENTITY(4, _GLF_IDENTITY(_GLF_IDENTITY(clamp(4, 4, 4), (true ? _GLF_IDENTITY(clamp(4, 4, 4), _GLF_IDENTITY((_GLF_IDENTITY(clamp(4, 4, 4), (false ? _GLF_FUZZED(min(ivec2(59245, -79849), ivec2(79465, -64924))[1]) : clamp(4, 4, 4)))) >> (0 >> _GLF_IDENTITY(int(_GLF_IDENTITY(3, ~ (~ (3)))), int(3))), ((clamp(4, 4, 4)) >> (0 >> _GLF_IDENTITY(int(3), int(3)))) >> 0)) : _GLF_FUZZED(int(93.46)))), _GLF_IDENTITY(0, (true ? _GLF_IDENTITY(0, clamp(0, _GLF_IDENTITY(0, (0) / 1), 0)) : _GLF_FUZZED(14580))) | (_GLF_IDENTITY(clamp(4, 4, _GLF_IDENTITY(4, min(_GLF_IDENTITY(4, (4) / int(_GLF_ONE(1.0, injectionSwitch.y))), _GLF_IDENTITY(4, (4) * 1)))), max(clamp(4, 4, 4), _GLF_IDENTITY(clamp(4, 4, 4), _GLF_IDENTITY((clamp(4, 4, _GLF_IDENTITY(4, (4) | (4)))) >> 0, ((clamp(4, 4, _GLF_IDENTITY(4, _GLF_IDENTITY((4), min((4), (4))) | (4)))) >> 0) | 0)))))))), (0 | 0) | (_GLF_IDENTITY((_GLF_IDENTITY(4, _GLF_IDENTITY(_GLF_IDENTITY(clamp(4, 4, 4), (true ? _GLF_IDENTITY(clamp(4, 4, 4), (clamp(4, 4, 4)) >> (0 >> _GLF_IDENTITY(int(3), int(3)))) : _GLF_FUZZED(int(93.46)))), _GLF_IDENTITY(0, (true ? _GLF_IDENTITY(0, clamp(0, _GLF_IDENTITY(0, (0) / 1), 0)) : _GLF_IDENTITY(_GLF_FUZZED(14580), clamp(_GLF_IDENTITY(_GLF_FUZZED(14580), (_GLF_FUZZED(14580)) >> 0), _GLF_FUZZED(14580), _GLF_FUZZED(14580))))) | (_GLF_IDENTITY(clamp(4, 4, _GLF_IDENTITY(4, min(_GLF_IDENTITY(4, (4) / int(_GLF_ONE(1.0, injectionSwitch.y))), _GLF_IDENTITY(4, (4) * 1)))), max(clamp(4, 4, 4), _GLF_IDENTITY(clamp(4, 4, 4), (_GLF_IDENTITY(clamp(4, 4, _GLF_IDENTITY(4, (4) | (4))), (clamp(4, 4, _GLF_IDENTITY(4, (4) | (4)))) * 1)) >> 0))))))), ((_GLF_IDENTITY(4, _GLF_IDENTITY(_GLF_IDENTITY(clamp(4, 4, 4), (true ? _GLF_IDENTITY(clamp(4, 4, 4), (clamp(4, 4, 4)) >> (0 >> _GLF_IDENTITY(int(3), int(3)))) : _GLF_FUZZED(int(93.46)))), _GLF_IDENTITY(0, (true ? _GLF_IDENTITY(0, clamp(0, _GLF_IDENTITY(0, (0) / 1), 0)) : _GLF_FUZZED(14580))) | (_GLF_IDENTITY(clamp(4, 4, _GLF_IDENTITY(4, min(_GLF_IDENTITY(4, _GLF_IDENTITY((4), ((4)) * ((1 << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (int(5)) << 0))) >> _GLF_IDENTITY(int(5), int(5)))) / int(_GLF_ONE(1.0, injectionSwitch.y))), _GLF_IDENTITY(4, (4) * 1)))), max(clamp(4, 4, 4), _GLF_IDENTITY(clamp(4, 4, 4), (clamp(4, 4, _GLF_IDENTITY(4, (4) | (4)))) >> 0)))))))) | (_GLF_IDENTITY((_GLF_IDENTITY(4, _GLF_IDENTITY(_GLF_IDENTITY(clamp(4, 4, 4), (_GLF_IDENTITY(true ? _GLF_IDENTITY(clamp(4, 4, 4), (clamp(4, 4, 4)) >> (0 >> _GLF_IDENTITY(int(3), int(3)))) : _GLF_FUZZED(int(93.46)), 0 + _GLF_IDENTITY((true ? _GLF_IDENTITY(clamp(4, 4, 4), (clamp(4, 4, 4)) >> (0 >> _GLF_IDENTITY(int(3), int(3)))) : _GLF_FUZZED(int(93.46))), int(_GLF_IDENTITY(ivec4((true ? _GLF_IDENTITY(clamp(4, 4, 4), (clamp(4, 4, 4)) >> (0 >> _GLF_IDENTITY(int(3), int(3)))) : _GLF_FUZZED(int(93.46))), 1, (1 ^ 1), 1), (false ? _GLF_FUZZED(min(ivec4(10120, 78280, 55786, 25653), ivec4(-38879, -95909, -89271, -749))) : ivec4((true ? _GLF_IDENTITY(clamp(4, 4, 4), (clamp(4, 4, 4)) >> (0 >> _GLF_IDENTITY(int(3), int(3)))) : _GLF_FUZZED(int(93.46))), 1, (1 ^ 1), 1)))))))), _GLF_IDENTITY(_GLF_IDENTITY(0, (true ? _GLF_IDENTITY(0, clamp(0, _GLF_IDENTITY(0, (0) / 1), 0)) : _GLF_IDENTITY(_GLF_FUZZED(14580), max(_GLF_FUZZED(14580), _GLF_IDENTITY(_GLF_FUZZED(14580), (_GLF_FUZZED(14580)) | (_GLF_FUZZED(14580))))))) | (_GLF_IDENTITY(clamp(4, 4, _GLF_IDENTITY(4, min(_GLF_IDENTITY(4, (4) / int(_GLF_ONE(_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(1.0)), bool(false))), injectionSwitch.y))), _GLF_IDENTITY(_GLF_IDENTITY(4, 0 ^ (4)), (4) * 1)))), max(clamp(4, 4, 4), _GLF_IDENTITY(clamp(4, 4, 4), (clamp(4, 4, _GLF_IDENTITY(4, (4) | (4)))) >> 0)))), clamp(_GLF_IDENTITY(0, (true ? _GLF_IDENTITY(0, clamp(0, _GLF_IDENTITY(0, (0) / 1), 0)) : _GLF_FUZZED(14580))) | (_GLF_IDENTITY(clamp(4, 4, _GLF_IDENTITY(4, min(_GLF_IDENTITY(4, (4) / int(_GLF_ONE(1.0, injectionSwitch.y))), _GLF_IDENTITY(4, (4) * _GLF_IDENTITY(1, (1) | 0))))), max(clamp(4, 4, 4), _GLF_IDENTITY(clamp(4, 4, 4), (clamp(4, 4, _GLF_IDENTITY(4, (4) | (4)))) >> 0)))), _GLF_IDENTITY(_GLF_IDENTITY(0, (true ? _GLF_IDENTITY(0, clamp(0, _GLF_IDENTITY(0, (0) / 1), 0)) : _GLF_FUZZED(14580))) | (_GLF_IDENTITY(clamp(4, 4, _GLF_IDENTITY(4, min(_GLF_IDENTITY(4, (4) / int(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), clamp(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y))))), _GLF_IDENTITY(4, (4) * 1)))), max(clamp(4, 4, 4), _GLF_IDENTITY(clamp(4, 4, 4), (clamp(4, 4, _GLF_IDENTITY(4, (4) | (4)))) >> 0)))), (_GLF_IDENTITY(0, (true ? _GLF_IDENTITY(0, clamp(0, _GLF_IDENTITY(0, _GLF_IDENTITY((0), ((0)) - int(_GLF_ZERO(0.0, injectionSwitch.x))) / _GLF_IDENTITY(1, int(ivec4(1, 1, 1, 0)))), 0)) : _GLF_FUZZED(14580))) | (_GLF_IDENTITY(clamp(4, 4, _GLF_IDENTITY(4, min(_GLF_IDENTITY(4, (4) / int(_GLF_ONE(1.0, injectionSwitch.y))), _GLF_IDENTITY(4, (4) * 1)))), max(clamp(4, 4, 4), _GLF_IDENTITY(clamp(4, 4, 4), (clamp(_GLF_IDENTITY(4, min(_GLF_IDENTITY(4, (4) + 0), 4)), 4, _GLF_IDENTITY(4, (4) | (4)))) >> 0))))) | 0), _GLF_IDENTITY(0, (_GLF_IDENTITY(true ? _GLF_IDENTITY(0, clamp(0, _GLF_IDENTITY(0, (0) / 1), 0)) : _GLF_FUZZED(14580), (true ? _GLF_IDENTITY(0, clamp(0, _GLF_IDENTITY(0, (0) / 1), 0)) : _GLF_FUZZED(14580)) | (true ? _GLF_IDENTITY(0, clamp(0, _GLF_IDENTITY(0, (0) / 1), 0)) : _GLF_FUZZED(14580))))) | (_GLF_IDENTITY(clamp(4, 4, _GLF_IDENTITY(4, min(_GLF_IDENTITY(4, (4) / int(_GLF_ONE(1.0, injectionSwitch.y))), _GLF_IDENTITY(4, (4) * 1)))), max(clamp(4, 4, 4), _GLF_IDENTITY(_GLF_IDENTITY(clamp(4, 4, 4), (clamp(4, 4, _GLF_IDENTITY(4, (_GLF_IDENTITY(4, 0 ^ (4))) | (4)))) >> 0), 0 | (_GLF_IDENTITY(_GLF_IDENTITY(clamp(4, 4, 4), (clamp(4, 4, _GLF_IDENTITY(4, (_GLF_IDENTITY(4, 0 ^ (4))) | (4)))) >> 0), 0 ^ (_GLF_IDENTITY(clamp(4, 4, 4), (clamp(4, 4, _GLF_IDENTITY(4, (_GLF_IDENTITY(4, 0 ^ (4))) | (4)))) >> 0))))))))))))), ~ (~ ((_GLF_IDENTITY(4, _GLF_IDENTITY(_GLF_IDENTITY(clamp(4, 4, 4), (_GLF_IDENTITY(true ? _GLF_IDENTITY(clamp(4, 4, 4), (clamp(4, 4, 4)) >> (0 >> _GLF_IDENTITY(int(3), int(3)))) : _GLF_FUZZED(int(93.46)), 0 + (_GLF_IDENTITY(true ? _GLF_IDENTITY(clamp(4, 4, 4), (clamp(4, 4, 4)) >> (0 >> _GLF_IDENTITY(int(3), int(3)))) : _GLF_FUZZED(int(93.46)), max(true ? _GLF_IDENTITY(clamp(4, 4, 4), (clamp(4, 4, 4)) >> (0 >> _GLF_IDENTITY(int(3), int(3)))) : _GLF_FUZZED(int(93.46)), true ? _GLF_IDENTITY(clamp(4, 4, 4), (clamp(4, 4, 4)) >> (0 >> _GLF_IDENTITY(int(3), int(3)))) : _GLF_FUZZED(int(93.46)))))))), _GLF_IDENTITY(0, (true ? _GLF_IDENTITY(0, clamp(0, _GLF_IDENTITY(_GLF_IDENTITY(0, 0 | (0)), (0) / 1), 0)) : _GLF_FUZZED(14580))) | (_GLF_IDENTITY(clamp(4, 4, _GLF_IDENTITY(4, min(_GLF_IDENTITY(4, (4) / int(_GLF_ONE(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-58.47)), float(1.0), bool(true))), injectionSwitch.y))), _GLF_IDENTITY(4, (4) * 1)))), max(clamp(4, 4, 4), _GLF_IDENTITY(clamp(4, 4, 4), (clamp(4, 4, _GLF_IDENTITY(4, _GLF_IDENTITY((4), clamp((4), (4), (4))) | (4)))) >> 0))))))))))))))) - 0) * _GLF_IDENTITY(1, min(1, 1))), 64, 4);
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false)))) || false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat2x4(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)), 1.0, 1.0, 0.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? vec2(mat2x4(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)), 1.0, 1.0, 0.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0)) : _GLF_FUZZED(vec2(6.8, -7084.1038))))).x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
    barrier();
   subgroupAll(true);
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false)))))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! _GLF_IDENTITY((_GLF_IDENTITY(! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bool(_GLF_IDENTITY(bvec3(! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false, true), bvec3(bvec4(bvec3(! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false, true), false)))))), ((_GLF_IDENTITY(! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bool(_GLF_IDENTITY(bvec3(! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false, true), bvec3(bvec4(bvec3(! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false, true), false))))))) || false)))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
      barrier();
     barrier();
     if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY((_GLF_DEAD(false)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false || ((_GLF_DEAD(false)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, true && (false))))))
  barrier();
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END
BUFFER checker DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected_checker DATA_TYPE uint32 SIZE 8388096 FILL 1

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 
  BIND BUFFER checker AS storage DESCRIPTOR_SET 0 BINDING 2 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT checker EQ_BUFFER expected_checker
