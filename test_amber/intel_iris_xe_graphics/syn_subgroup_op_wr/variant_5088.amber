#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_8 {
 ivec4 _f0;
 uvec4 _f1;
 bvec3 _f2;
 mat4x2 _f3;
 uint virtual_gid;
 ivec4 _f4;
 vec3 _f5;
 mat2x3 _f6;
} ;

struct _GLF_struct_9 {
 vec4 _f0;
 bool _f1;
 ivec3 _f2;
 _GLF_struct_8 _f3;
 uint _f4;
} ;

struct _GLF_struct_10 {
 _GLF_struct_9 _f0;
 vec4 _f1;
} ;

struct _GLF_struct_5 {
 vec3 _f0;
 mat3x2 _f1;
 mat4 _f2;
 mat2x4 _f3;
 mat2 _f4;
} ;

struct _GLF_struct_4 {
 bool _f0;
 uvec4 _f1;
 uint _f2;
 mat3 _f3;
 vec2 _f4;
 int _f5;
} ;

struct _GLF_struct_3 {
 ivec4 _f0;
 ivec3 _f1;
} ;

struct _GLF_struct_2 {
 mat4x3 _f0;
 ivec2 _f1;
 uint _f2;
 mat2x4 _f3;
 bool _f4;
 vec2 _f5;
 ivec4 _f6;
} ;

struct _GLF_struct_1 {
 mat2x4 _f0;
 uint _f1;
} ;

struct _GLF_struct_0 {
 int _f0;
 mat4x3 _f1;
 ivec2 _f2;
 ivec3 _f3;
 ivec2 _f4;
 mat4x3 _f5;
} ;

struct _GLF_struct_6 {
 _GLF_struct_0 _f0;
 _GLF_struct_1 _f1;
 _GLF_struct_2 _f2;
 _GLF_struct_3 _f3;
 _GLF_struct_4 _f4;
 _GLF_struct_5 _f5;
 mat4x2 _f6;
} ;

struct _GLF_struct_7 {
 _GLF_struct_6 _f0;
 vec4 _f1;
 uint workgroup_size;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
   barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).y)))))
  return;
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec3(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)), bool(_GLF_IDENTITY(bool(bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))), (bool(bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)))) && true))))), true, true))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(4.2))) > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true)))))))
    {
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         barrier();
        }
       barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, true && _GLF_IDENTITY((false), bool(_GLF_IDENTITY(bvec2((false), true), bvec2(bvec4(bvec2((false), true), true, false))))))) && _GLF_IDENTITY(true, true && (true)))))
          barrier();
         return;
        }
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)))
        return;
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
   barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  barrier();
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)))
    {
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
   barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(fract(injectionSwitch)))).y))), _GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, float(mat3x2(injectionSwitch.y, abs(1.0), 1.0, 1.0, log(1.0), sin(sin(0.0)))))), _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec2((injectionSwitch.x < injectionSwitch.y), false)), ! (! (bool(bvec2((_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).y) || _GLF_IDENTITY(false, ! (! (false))))), false))))), (_GLF_IDENTITY(bool(bvec2((injectionSwitch.x < injectionSwitch.y), false)), ! (! (bool(bvec2((_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).y) || _GLF_IDENTITY(false, ! (! (false))))), false)))))) && true))) && (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec4((injectionSwitch.x > injectionSwitch.y), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false))))), bool(bvec2(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true))))), true && (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y))), bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, bool(bool(false))))), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, bool(bool(false))))), true && (_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, bool(bool(false))))))), false, false, false)), ! (! (bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) || false) && (_GLF_IDENTITY(bool(false), false || (bool(false))))))))), true && (_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, bool(bool(false))))))), false, false, false)))))), (injectionSwitch.x > injectionSwitch.y))))), false, false), _GLF_IDENTITY(bvec3(bvec3(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - sqrt(sin(0.0))), (_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec2(true, false), bvec2(bvec2(bvec2(true, false)))))) ? injectionSwitch.x : _GLF_FUZZED(247.051))) > injectionSwitch.y))))), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - sqrt(sin(0.0))), (_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec2(true, false), bvec2(bvec2(bvec2(true, false)))))) ? injectionSwitch.x : _GLF_FUZZED(247.051))) > injectionSwitch.y))))), true)), (bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - sqrt(sin(0.0))), (_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec2(true, false), bvec2(bvec2(bvec2(true, false)))))) ? injectionSwitch.x : _GLF_FUZZED(247.051))) > injectionSwitch.y))))), true))) && true)), _GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (false))))))))), false))), bvec3(bvec4(bvec3(bvec3(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-165.509), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-508.628)), bvec2(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch)).x < injectionSwitch.y)), false))).x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-165.509), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-508.628)), bvec2(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch)).x < injectionSwitch.y)), false))).x > injectionSwitch.y)))) && true), false || (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), false, false))), false)))))), false))))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   return;
  }
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, _GLF_ONE(1.0, injectionSwitch.y) * (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)))) > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
        return;
       barrier();
       if(_GLF_DEAD(false))
        return;
      }
     barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      return;
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat3x2(injectionSwitch, 1.0, 1.0, 0.0, 0.0), mat3x2(mat4(mat3x2(injectionSwitch, 1.0, 1.0, 0.0, 0.0)))))).y, clamp(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat3x2(injectionSwitch, 1.0, 1.0, 0.0, 0.0), mat3x2(mat4(mat3x2(injectionSwitch, 1.0, 1.0, 0.0, 0.0)))))).y, min(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat3x2(injectionSwitch, 1.0, 1.0, 0.0, 0.0), mat3x2(mat4(mat3x2(injectionSwitch, 1.0, 1.0, 0.0, 0.0)))))).y, min(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat3x2(injectionSwitch, 1.0, 1.0, 0.0, 0.0), mat3x2(mat4(mat3x2(injectionSwitch, 1.0, 1.0, 0.0, 0.0)))))).y, _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat3x2(injectionSwitch, 1.0, 1.0, 0.0, 0.0), mat3x2(mat4(mat3x2(injectionSwitch, 1.0, 1.0, 0.0, 0.0)))))).y)), _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat3x2(injectionSwitch, 1.0, 1.0, 0.0, 0.0), mat3x2(mat4(mat3x2(injectionSwitch, 1.0, 1.0, 0.0, 0.0)))))).y)), _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat3x2(injectionSwitch, 1.0, 1.0, 0.0, 0.0), mat3x2(mat4(mat3x2(injectionSwitch, 1.0, 1.0, 0.0, 0.0)))))).y, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat3x2(injectionSwitch, 1.0, 1.0, 0.0, 0.0), mat3x2(mat4(mat3x2(injectionSwitch, 1.0, 1.0, 0.0, 0.0)))))).y, max(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat3x2(injectionSwitch, 1.0, 1.0, 0.0, 0.0), mat3x2(mat4(mat3x2(injectionSwitch, 1.0, 1.0, 0.0, 0.0)))))).y, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat3x2(injectionSwitch, 1.0, 1.0, 0.0, 0.0), mat3x2(mat4(mat3x2(injectionSwitch, 1.0, 1.0, 0.0, 0.0)))))).y, float(vec3(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat3x2(injectionSwitch, 1.0, 1.0, 0.0, 0.0), mat3x2(mat4(mat3x2(injectionSwitch, 1.0, 1.0, 0.0, 0.0)))))).y, 1.0, 1.0)))))))))))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(true && (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true)), ! (! (true && (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true)))))))
    barrier();
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   barrier();
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  barrier();
 _GLF_struct_7 _GLF_struct_replacement_7 = _GLF_struct_7(_GLF_struct_6(_GLF_struct_0(1, mat4x3(1.0), ivec2(1), ivec3(_GLF_IDENTITY(1, (1) * 1)), _GLF_IDENTITY(ivec2(1), _GLF_IDENTITY((_GLF_IDENTITY(ivec2(1), (_GLF_IDENTITY(ivec2(1), ivec2(1, 1) * (ivec2(1)))) ^ ivec2(0, 0))) / ivec2(1, 1), _GLF_IDENTITY(_GLF_IDENTITY(ivec2(ivec2((ivec2(1)) / ivec2(1, 1))), ivec2(1, 1) * (ivec2(ivec2((ivec2(1)) / ivec2(1, 1))))), (_GLF_IDENTITY(ivec2(ivec2((_GLF_IDENTITY(ivec2(1), (ivec2(1)) - ivec2(0, 0))) / ivec2(1, 1))), ivec2(1, 1) * (ivec2(ivec2((ivec2(1)) / ivec2(1, 1)))))) + ivec2(0, 0)))), mat4x3(1.0)), _GLF_struct_1(mat2x4(1.0), 1u), _GLF_struct_2(mat4x3(1.0), ivec2(1), 1u, mat2x4(1.0), true, vec2(1.0), ivec4(1)), _GLF_struct_3(ivec4(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) / 1)) - 0)), ivec3(1)), _GLF_struct_4(true, uvec4(1u), 1u, mat3(1.0), vec2(1.0), _GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(82629)))), _GLF_struct_5(vec3(_GLF_IDENTITY(1.0, float(_GLF_IDENTITY(mat3x2(1.0, _GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, float(mat2x4(_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(mat4x3(injectionSwitch.x, 1.0, tan(_GLF_IDENTITY(0.0, _GLF_IDENTITY((true ? 0.0 : _GLF_FUZZED(refract(-4.1, 9010.5366, -9.2))), (_GLF_IDENTITY((true ? 0.0 : _GLF_FUZZED(refract(-4.1, 9010.5366, -9.2))), ((true ? 0.0 : _GLF_FUZZED(refract(-4.1, 9010.5366, -9.2)))) / 1.0)) - log(1.0)))), 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0)), dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, _GLF_IDENTITY(1.0, float(mat4(1.0, 0.0, sqrt(0.0), cos(0.0), 0.0, 0.0, 1.0, abs(0.0), 1.0, 1.0, 0.0, 0.0, 1.0, sqrt(1.0), 1.0, 1.0))), 0.0))), 0.0, 1.0)), mix(float(_GLF_FUZZED(35.71)), float(float(mat4x3(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + 0.0), 1.0, tan(0.0), 1.0, 0.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, (0.0) + 0.0), _GLF_IDENTITY(dot(vec4(0.0, 0.0, 1.0, 0.0), _GLF_IDENTITY(vec4(0.0, _GLF_IDENTITY(0.0, clamp(0.0, _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), 0.0)), 1.0, 0.0), min(vec4(0.0, _GLF_IDENTITY(0.0, clamp(0.0, _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), 0.0)), 1.0, 0.0), vec4(0.0, _GLF_IDENTITY(0.0, clamp(0.0, _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), 0.0)), 1.0, 0.0)))), dot(vec4(0.0, 0.0, 1.0, 0.0), _GLF_IDENTITY(vec4(0.0, 0.0, 1.0, _GLF_IDENTITY(0.0, (0.0) + _GLF_IDENTITY(0.0, min(0.0, _GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(94.86)), bool(false))))))), min(_GLF_IDENTITY(vec4(0.0, 0.0, 1.0, _GLF_IDENTITY(0.0, (0.0) + 0.0)), _GLF_IDENTITY(clamp(_GLF_IDENTITY(vec4(0.0, 0.0, 1.0, _GLF_IDENTITY(0.0, (0.0) + 0.0)), mix(vec4(_GLF_FUZZED(-9786.9123), _GLF_FUZZED(-2.1), (vec4(0.0, 0.0, 1.0, _GLF_IDENTITY(0.0, (0.0) + 0.0)))[2], _GLF_FUZZED(65.40)), vec4((vec4(0.0, 0.0, 1.0, _GLF_IDENTITY(0.0, (0.0) + 0.0)))[0], (vec4(0.0, 0.0, 1.0, _GLF_IDENTITY(0.0, (0.0) + 0.0)))[1], _GLF_FUZZED(-76.15), (vec4(0.0, 0.0, 1.0, _GLF_IDENTITY(0.0, (0.0) + 0.0)))[3]), bvec4(true, true, false, true))), vec4(0.0, 0.0, 1.0, _GLF_IDENTITY(0.0, (0.0) + 0.0)), vec4(0.0, 0.0, 1.0, _GLF_IDENTITY(0.0, (0.0) + 0.0))), (clamp(_GLF_IDENTITY(vec4(0.0, 0.0, 1.0, _GLF_IDENTITY(0.0, (0.0) + 0.0)), mix(vec4(_GLF_FUZZED(-9786.9123), _GLF_FUZZED(-2.1), (vec4(0.0, 0.0, 1.0, _GLF_IDENTITY(0.0, (0.0) + 0.0)))[2], _GLF_FUZZED(65.40)), vec4((vec4(0.0, 0.0, 1.0, _GLF_IDENTITY(0.0, (0.0) + 0.0)))[0], (vec4(0.0, 0.0, 1.0, _GLF_IDENTITY(0.0, (0.0) + 0.0)))[1], _GLF_FUZZED(-76.15), (vec4(0.0, 0.0, 1.0, _GLF_IDENTITY(0.0, (0.0) + 0.0)))[3]), bvec4(true, true, false, true))), vec4(0.0, 0.0, 1.0, _GLF_IDENTITY(0.0, (0.0) + 0.0)), vec4(0.0, 0.0, 1.0, _GLF_IDENTITY(0.0, (0.0) + 0.0)))) * mat4(1.0))), _GLF_IDENTITY(vec4(0.0, 0.0, 1.0, _GLF_IDENTITY(0.0, (0.0) + _GLF_IDENTITY(0.0, float(mat3(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, log(1.0)))))), min(vec4(0.0, 0.0, _GLF_IDENTITY(1.0, float(_GLF_IDENTITY(mat2(_GLF_IDENTITY(1.0, (1.0) - 0.0), 0.0, 0.0, 1.0), (true ? mat2(_GLF_IDENTITY(1.0, (1.0) - 0.0), 0.0, 0.0, 1.0) : _GLF_FUZZED(mat2(-8.0, -7.6, 2.8, -3.9)))))), _GLF_IDENTITY(0.0, (0.0) + 0.0)), vec4(0.0, 0.0, 1.0, _GLF_IDENTITY(0.0, (0.0) + 0.0)))))))), 0.0, 1.0))), _GLF_IDENTITY(bool(true), ! (! (bool(true))))))), 1.0, 0.0, 0.0, 0.0, length(_GLF_IDENTITY(vec4(0.0, 0.0, 0.0, 0.0), max(vec4(0.0, 0.0, 0.0, 0.0), vec4(0.0, 0.0, 0.0, 0.0)))), abs(0.0), 1.0)))), length(vec3(0.0, 0.0, 0.0)), 1.0, 1.0, 1.0), mat3x2(mat4x3(mat3x2(1.0, _GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x))), length(vec3(0.0, 0.0, 0.0)), _GLF_IDENTITY(1.0, max(1.0, _GLF_IDENTITY(1.0, _GLF_IDENTITY((true ? _GLF_IDENTITY(1.0, float(mat2x3(1.0, 0.0, 1.0, abs(1.0), _GLF_ZERO(0.0, injectionSwitch.x), 0.0))) : _GLF_FUZZED(-7.3)), clamp((true ? _GLF_IDENTITY(1.0, float(mat2x3(1.0, 0.0, 1.0, abs(1.0), _GLF_ZERO(0.0, injectionSwitch.x), 0.0))) : _GLF_FUZZED(-7.3)), (true ? _GLF_IDENTITY(1.0, float(mat2x3(1.0, 0.0, 1.0, abs(1.0), _GLF_ZERO(0.0, injectionSwitch.x), 0.0))) : _GLF_FUZZED(-7.3)), (true ? _GLF_IDENTITY(1.0, float(mat2x3(1.0, 0.0, 1.0, abs(1.0), _GLF_ZERO(0.0, injectionSwitch.x), 0.0))) : _GLF_FUZZED(-7.3))))))), 1.0, _GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(8.4)), bool(false)))))))))), mat3x2(1.0), mat4(1.0), mat2x4(1.0), mat2(1.0)), mat4x2(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1.0, clamp(1.0, _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(912.687))), 1.0)), _GLF_IDENTITY(float(mat2x4(1.0, sin(0.0), 1.0, 1.0, 1.0, 0.0, _GLF_IDENTITY(1.0, (true ? _GLF_IDENTITY(1.0, float(_GLF_IDENTITY(vec2(1.0, 0.0), (vec2(1.0, 0.0)) - vec2(0.0, 0.0)))) : _GLF_FUZZED(6841.6171))), 0.0)), min(float(mat2x4(1.0, sin(0.0), 1.0, 1.0, 1.0, _GLF_IDENTITY(0.0, _GLF_IDENTITY(min(0.0, 0.0), clamp(min(0.0, 0.0), _GLF_IDENTITY(min(_GLF_IDENTITY(0.0, clamp(0.0, _GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0))) / 1.0), 0.0)), 0.0), max(min(0.0, 0.0), min(0.0, 0.0))), _GLF_IDENTITY(min(0.0, 0.0), max(min(_GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(6.6))), 0.0), min(0.0, 0.0)))))), 1.0, _GLF_IDENTITY(0.0, max(0.0, 0.0)))), float(mat2x4(1.0, sin(0.0), 1.0, 1.0, 1.0, 0.0, 1.0, 0.0))))), mix(float(_GLF_FUZZED(-67.46)), float(_GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat2x4(1.0, sin(0.0), 1.0, 1.0, _GLF_IDENTITY(1.0, 0.0 + (_GLF_IDENTITY(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(5948.7620) : 1.0)), min(1.0, 1.0)))), 0.0, 1.0, 0.0)), min(float(mat2x4(1.0, sin(0.0), 1.0, 1.0, 1.0, _GLF_IDENTITY(0.0, min(0.0, 0.0)), 1.0, 0.0)), float(mat2x4(1.0, sin(0.0), 1.0, 1.0, 1.0, 0.0, 1.0, 0.0)))))), bool(true))))), vec4(1.0), _GLF_IDENTITY(gl_WorkGroupSize, (_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize, min(gl_WorkGroupSize, gl_WorkGroupSize)), min(_GLF_IDENTITY(gl_WorkGroupSize, min(gl_WorkGroupSize, gl_WorkGroupSize)), _GLF_IDENTITY(gl_WorkGroupSize, min(gl_WorkGroupSize, gl_WorkGroupSize))))) | uvec3(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(-2.7)), vec2(_GLF_FUZZED(float(false)), _GLF_IDENTITY((injectionSwitch)[1], ((injectionSwitch)[1]) - 0.0)), bvec2(false, true))).x), _GLF_ZERO(0.0, injectionSwitch.x))).x);
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec4(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, false, true))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y)))))))
  return;
 uint workgroup_base = _GLF_IDENTITY(_GLF_struct_replacement_7.workgroup_size, _GLF_IDENTITY(uint(uint(_GLF_struct_replacement_7.workgroup_size)), max(uint(uint(_GLF_struct_replacement_7.workgroup_size)), uint(uint(_GLF_struct_replacement_7.workgroup_size))))) * workgroup_id;
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true)))))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).y))))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
     barrier();
    }
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
    return;
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      return;
     return;
    }
   barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(-0.2)), bool(false)))))))
    return;
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))))
  barrier();
 _GLF_struct_10 _GLF_struct_replacement_10 = _GLF_struct_10(_GLF_struct_9(vec4(1.0), true, ivec3(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, 0 ^ (1))) / (1 ^ 0))), _GLF_struct_8(ivec4(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) ^ 0)) | (_GLF_IDENTITY(0, _GLF_IDENTITY(int(ivec3(0, 1, 0)), ~ (~ (int(ivec3(_GLF_IDENTITY(0, (_GLF_IDENTITY(0, min(0, 0))) | (0)), 1, 0)))))) << _GLF_IDENTITY(int(2), int(2)))), (_GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY((_GLF_IDENTITY(1, (1) ^ 0)) | (_GLF_IDENTITY(0, _GLF_IDENTITY(_GLF_IDENTITY(int(ivec3(0, 1, 0)), min(int(ivec3(0, 1, 0)), int(ivec3(0, 1, 0)))), ~ (~ (_GLF_IDENTITY(int(ivec3(0, 1, 0)), max(int(ivec3(0, 1, 0)), int(ivec3(0, 1, 0)))))))) << _GLF_IDENTITY(int(2), int(2))), ~ (~ ((_GLF_IDENTITY(1, (1) ^ 0)) | (_GLF_IDENTITY(0, _GLF_IDENTITY(_GLF_IDENTITY(int(ivec3(0, 1, 0)), min(int(ivec3(0, 1, 0)), int(ivec3(0, 1, 0)))), ~ (~ (_GLF_IDENTITY(int(ivec3(0, 1, 0)), max(int(ivec3(0, 1, 0)), int(ivec3(0, 1, 0)))))))) << _GLF_IDENTITY(int(2), int(2))))))), (false ? _GLF_FUZZED(ivec3(17823, 89353, 48867).s) : _GLF_IDENTITY(1, (_GLF_IDENTITY(1, _GLF_IDENTITY((1), (true ? (1) : _GLF_FUZZED(-37209))) ^ 0)) | _GLF_IDENTITY((_GLF_IDENTITY(0, _GLF_IDENTITY(int(ivec3(0, 1, 0)), ~ (~ (int(ivec3(0, 1, 0)))))) << _GLF_IDENTITY(int(2), int(2))), ((_GLF_IDENTITY(0, _GLF_IDENTITY(int(ivec3(0, 1, 0)), ~ (~ (int(ivec3(0, 1, 0)))))) << _GLF_IDENTITY(int(2), int(2)))) << 0))))) + 0), min(1, 1))), uvec4(1u), bvec3(true), mat4x2(1.0), workgroup_base + subgroup_id * subgroup_size + subgroup_local_id, ivec4(1), vec3(_GLF_IDENTITY(_GLF_IDENTITY(1.0, max(1.0, _GLF_IDENTITY(1.0, 0.0 + (1.0)))), min(_GLF_IDENTITY(_GLF_IDENTITY(1.0, max(1.0, _GLF_IDENTITY(1.0, 0.0 + (1.0)))), (false ? _GLF_FUZZED(1.5) : _GLF_IDENTITY(1.0, max(1.0, _GLF_IDENTITY(1.0, 0.0 + (1.0)))))), _GLF_IDENTITY(1.0, max(1.0, _GLF_IDENTITY(1.0, 0.0 + (1.0))))))), mat2x3(_GLF_IDENTITY(1.0, mix(float(_GLF_IDENTITY(_GLF_FUZZED(-5032.5509), clamp(_GLF_FUZZED(-5032.5509), _GLF_FUZZED(-5032.5509), _GLF_FUZZED(-5032.5509)))), float(_GLF_IDENTITY(1.0, (1.0) - 0.0)), bool(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (injectionSwitch.x < injectionSwitch.y) || false)))))))), 1u), _GLF_IDENTITY(vec4(1.0), vec4(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(_GLF_IDENTITY(1.0, clamp(1.0, _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-58.48)), float(1.0), bool(true))), 1.0)), injectionSwitch.y), _GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(dot(-3160.3420, -8175.8793))))), _GLF_ONE(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(3719.1681)), float(1.0), bool(true))), injectionSwitch.y)) * (vec4(1.0))));
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  barrier();
 uint next_virtual_gid = _GLF_IDENTITY(workgroup_base, 0u ^ (workgroup_base)) + subgroup_id * subgroup_size + (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id + _GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(1, min(1, 1)))), uint(uvec2(subgroup_local_id + _GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(1, min(1, 1)))), 1u)))), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? (_GLF_IDENTITY(subgroup_local_id + _GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(1, min(1, 1)))), uint(uvec2(subgroup_local_id + _GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(1, min(1, 1)))), 1u)))) : _GLF_FUZZED(subgroup_local_id))) % subgroup_size);
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 atomicStore(buf[_GLF_IDENTITY(next_virtual_gid, max(_GLF_IDENTITY(next_virtual_gid, _GLF_IDENTITY(min(next_virtual_gid, next_virtual_gid), (_GLF_IDENTITY(min(next_virtual_gid, next_virtual_gid), uint(uvec4(min(next_virtual_gid, next_virtual_gid), 1u, 0u, 0u)))) + 0u)), next_virtual_gid))], uint(1), 4, 64, 4);
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   return;
  }
 uint read = atomicLoad(buf[_GLF_struct_replacement_10._f0._f3.virtual_gid], 4, 64, 0);
 if(_GLF_IDENTITY(subgroup_local_id + 1 < _GLF_IDENTITY(subgroup_size, 1u * (subgroup_size)), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) * 1u) + 1 < subgroup_size, true), bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) * 1u) + 1 < subgroup_size, true), bvec2(bvec3(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) * 1u) + 1 < subgroup_size, true), bvec2(bvec4(bvec2(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) * 1u) + 1 < subgroup_size, true), true, false))), false)))), bvec2(bvec4(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) * 1u) + 1 < subgroup_size, true), bvec2(bvec3(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) * 1u) + 1 < subgroup_size, true), bvec2(bvec4(bvec2(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) * 1u) + 1 < subgroup_size, true), true, false))), false)))), bvec2(bvec4(bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) * 1u) + 1 < subgroup_size, true), bvec2(bvec3(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) * 1u) + 1 < subgroup_size, true), bvec2(bvec4(bvec2(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) * 1u) + 1 < subgroup_size, true), true, false))), false)))), false, false))), false, false)))))), bool(_GLF_IDENTITY(bvec3(bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) * 1u) + 1 < subgroup_size, true), bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) * 1u) + 1 < subgroup_size, true), bvec2(bvec3(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) * 1u) + 1 < subgroup_size, true), bvec2(bvec4(bvec2(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) * 1u) + 1 < subgroup_size, true), true, false))), false)))), bvec2(bvec4(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) * 1u) + 1 < subgroup_size, true), bvec2(bvec3(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) * 1u) + 1 < subgroup_size, true), bvec2(bvec4(bvec2(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) * 1u) + 1 < subgroup_size, true), true, false))), false)))), bvec2(bvec4(bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) * 1u) + 1 < subgroup_size, true), bvec2(bvec3(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) * 1u) + 1 < subgroup_size, true), bvec2(bvec4(bvec2(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) * 1u) + 1 < subgroup_size, true), true, false))), false)))), false, false))), false, false)))))), false, false), bvec3(bvec4(bvec3(bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) * 1u) + 1 < subgroup_size, true), bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) * 1u) + 1 < subgroup_size, true), bvec2(bvec3(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) * 1u) + 1 < subgroup_size, true), bvec2(bvec4(bvec2(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) * 1u) + 1 < subgroup_size, true), true, false))), false)))), bvec2(bvec4(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) * 1u) + 1 < subgroup_size, true), bvec2(bvec3(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) * 1u) + 1 < subgroup_size, true), bvec2(bvec4(bvec2(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) * 1u) + 1 < subgroup_size, true), true, false))), false)))), bvec2(bvec4(bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) * 1u) + 1 < subgroup_size, true), bvec2(bvec3(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) * 1u) + 1 < subgroup_size, true), bvec2(bvec4(bvec2(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) * 1u) + 1 < subgroup_size, true), true, false))), false)))), false, false))), false, false)))))), false, false), true)))))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
     return;
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec4(_GLF_DEAD(false), true, true, false)), false || _GLF_IDENTITY((_GLF_IDENTITY(bool(bvec4(_GLF_DEAD(false), _GLF_IDENTITY(true, (true) && true), true, false)), false || (bool(bvec4(_GLF_DEAD(false), true, true, false))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((_GLF_IDENTITY(bool(bvec4(_GLF_DEAD(false), true, true, false)), false || (bool(bvec4(_GLF_DEAD(false), true, true, false))))), ((_GLF_IDENTITY(bool(bvec4(_GLF_DEAD(false), true, true, false)), false || (bool(bvec4(_GLF_DEAD(false), true, true, false)))))) && true)), (! (_GLF_IDENTITY((_GLF_IDENTITY(bool(bvec4(_GLF_DEAD(false), true, true, false)), false || (bool(bvec4(_GLF_DEAD(false), true, true, false))))), _GLF_IDENTITY(((_GLF_IDENTITY(bool(bvec4(_GLF_DEAD(false), true, true, false)), false || (bool(bvec4(_GLF_DEAD(false), true, true, false)))))), true && (_GLF_IDENTITY(((_GLF_IDENTITY(bool(bvec4(_GLF_DEAD(false), true, true, false)), false || (bool(bvec4(_GLF_DEAD(false), true, true, false)))))), bool(bool(((_GLF_IDENTITY(bool(bvec4(_GLF_DEAD(false), true, true, false)), false || (bool(bvec4(_GLF_DEAD(false), true, true, false))))))))))) && true))) || false))))))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       barrier();
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
     barrier();
    }
   atomicStore(checker[_GLF_struct_replacement_10._f0._f3.virtual_gid], read, 4, 64, _GLF_IDENTITY(4, (1 ^ 1) ^ (_GLF_IDENTITY(4, ~ (_GLF_IDENTITY(~ (4), 0 ^ (~ (4))))))));
   subgroupAll(_GLF_IDENTITY(false, (false) && true));
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! _GLF_IDENTITY((_GLF_IDENTITY(! (false), ! (! (! (false))))), false || ((_GLF_IDENTITY(! (false), ! (! (! (false))))))))))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))
      return;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
     if(_GLF_DEAD(false))
      return;
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
      return;
     return;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0)))))
    {
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), false || _GLF_IDENTITY((_GLF_IDENTITY(false, (false) && true)), ! (_GLF_IDENTITY(! ((_GLF_IDENTITY(false, (false) && true))), bool(_GLF_IDENTITY(bool(! ((_GLF_IDENTITY(false, _GLF_IDENTITY((false) && true, true && ((false) && true)))))), bool(bvec3(bool(! ((_GLF_IDENTITY(false, (false) && true)))), false, false))))))))))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && ((false)))))), (_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false))))) && true))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      return;
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec4(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y)))) && true), true, false, true))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, false)))))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
     barrier();
    }
   atomicStore(checker[_GLF_struct_replacement_10._f0._f3.virtual_gid], read, 4, 64, 4);
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0)) / 1.0))), true && (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(injectionSwitch.x > injectionSwitch.y, false))))))))))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, true, true)))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
      return;
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || false)) || false)))
      return;
     barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   subgroupAll(true);
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       return;
       if(_GLF_DEAD(false))
        return;
      }
     if(_GLF_DEAD(false))
      barrier();
     return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, false || (false))))))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(false))
        return;
       return;
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, true, true)))))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), true && (! (false)))))))
      return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
      return;
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     barrier();
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END
BUFFER checker DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected_checker DATA_TYPE uint32 SIZE 8388096 FILL 1

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 
  BIND BUFFER checker AS storage DESCRIPTOR_SET 0 BINDING 2 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT checker EQ_BUFFER expected_checker
