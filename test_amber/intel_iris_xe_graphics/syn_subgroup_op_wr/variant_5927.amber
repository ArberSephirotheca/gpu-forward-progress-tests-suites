#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    {
     do
      {
       if(_GLF_DEAD(false))
        break;
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x)), true && (_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))))); _injected_loop_counter --)
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            return;
          }
         return;
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) && true)))), (injectionSwitch.x > injectionSwitch.y))));
    }
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  {
   do
    {
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       do
        {
         return;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     else
      {
      }
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = (1 ^ 1); _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
          {
           return;
          }
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, float(_GLF_IDENTITY(mat3x4(injectionSwitch.y, _GLF_IDENTITY(dot(vec3(1.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x)), vec3(1.0, 0.0, 0.0)), dot(vec3(1.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x)), vec3(1.0, 0.0, 0.0))), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, round(length(normalize(vec2(1.0, 1.0)))), 1.0, 1.0, 0.0), mat4(1.0) * (mat3x4(injectionSwitch.y, _GLF_IDENTITY(dot(vec3(1.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x)), vec3(1.0, 0.0, 0.0)), dot(vec3(1.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x)), vec3(1.0, 0.0, 0.0))), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, round(length(normalize(vec2(1.0, 1.0)))), 1.0, 1.0, 0.0)))))))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
    }
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (false)))))
            {
            }
           else
            {
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 >> _GLF_IDENTITY(int(7), int(7)))); _injected_loop_counter --)
              {
               return;
               if(_GLF_DEAD(false))
                break;
              }
            }
          }
        }
       else
        {
        }
      }
    }
  }
 else
  {
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = _GLF_IDENTITY(gl_NumWorkGroups.x, clamp(_GLF_IDENTITY(gl_NumWorkGroups.x, (gl_NumWorkGroups.x) << 0u), gl_NumWorkGroups.x, gl_NumWorkGroups.x));
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 uint workgroup_id = _GLF_IDENTITY(gl_WorkGroupID, max(gl_WorkGroupID, gl_WorkGroupID)).x;
 uint workgroup_base = _GLF_IDENTITY(workgroup_size, 0u | (workgroup_size)) * _GLF_IDENTITY(workgroup_id, min(workgroup_id, workgroup_id));
 uint virtual_gid = workgroup_base + subgroup_id * subgroup_size + subgroup_local_id;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   do
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, true && _GLF_IDENTITY((false), _GLF_IDENTITY(bool(bvec4((false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, _GLF_IDENTITY(true, bool(bvec2(true, true))))), _GLF_IDENTITY(bool(bvec4(bool(bvec4((false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, _GLF_IDENTITY(true, bool(bvec2(true, true))))), false, false, false)), false || (bool(bvec4(bool(bvec4((false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, _GLF_IDENTITY(true, bool(bvec2(true, true))))), false, false, false)))))))))
      {
      }
     else
      {
       return;
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
 uint next_virtual_gid = workgroup_base + subgroup_id * subgroup_size + ((subgroup_local_id + 1) % subgroup_size);
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
  }
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
  {
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x)), injectionSwitch.x)) > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))))))))))
    {
     if(_GLF_DEAD(false))
      break;
     if(_GLF_DEAD(false))
      break;
     if(_GLF_DEAD(false))
      break;
     continue;
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))))))
    continue;
   if(_GLF_DEAD(false))
    continue;
   do
    {
     do
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (_GLF_IDENTITY(0, (0) >> 0) | _GLF_IDENTITY((0 ^ 0), ((0 ^ 0)) * 1))); _injected_loop_counter --)
        {
         for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < (_GLF_IDENTITY(((0 ^ 1) << _GLF_IDENTITY(int(5), int(5))), ~ (_GLF_IDENTITY(~ (((0 ^ 1) << _GLF_IDENTITY(int(5), int(5)))), 0 + (~ (((0 ^ 1) << _GLF_IDENTITY(int(5), int(5)))))))) >> _GLF_IDENTITY(int(5), int(5)))); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(! (_GLF_IDENTITY(! (false), bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(! (false), (! (false)) || false), ! (! (! (false)))), false)))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (! (_GLF_IDENTITY(! (false), bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(! (false), (! (false)) || false), ! (! (! (false)))), false)))))))))
            {
             do
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   do
                    {
                     do
                      {
                       for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(0), int(0))); _GLF_WRAPPED_LOOP(_injected_loop_counter < (0 ^ 1)); _injected_loop_counter ++)
                        {
                         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                          {
                           if(_GLF_DEAD(false))
                            break;
                           if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bvec2(false, true)))))
                            {
                            }
                           else
                            {
                             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                              {
                              }
                             else
                              {
                               if(_GLF_DEAD(false))
                                return;
                               do
                                {
                                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                                  {
                                   if(_GLF_WRAPPED_IF_TRUE(true))
                                    {
                                     if(_GLF_DEAD(false))
                                      return;
                                     if(_GLF_DEAD(false))
                                      continue;
                                     if(_GLF_DEAD(false))
                                      break;
                                     if(_GLF_WRAPPED_IF_FALSE(false))
                                      {
                                      }
                                     else
                                      {
                                       do
                                        {
                                         if(_GLF_DEAD(false))
                                          {
                                           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                            {
                                            }
                                           else
                                            {
                                             return;
                                            }
                                          }
                                         if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), ! (! (_GLF_WRAPPED_IF_FALSE(false))))) && true))
                                          {
                                          }
                                         else
                                          {
                                           do
                                            {
                                             if(_GLF_DEAD(false))
                                              break;
                                             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                              {
                                              }
                                             else
                                              {
                                               for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(6), int(6))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                                                {
                                                 if(_GLF_WRAPPED_IF_TRUE(true))
                                                  {
                                                   for(int _injected_loop_counter = 1; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > (0 << _GLF_IDENTITY(int(0), int(0)))), true && (_GLF_WRAPPED_LOOP(_injected_loop_counter > (0 << _GLF_IDENTITY(int(0), int(0)))))); _injected_loop_counter --)
                                                    {
                                                     for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (int(4)) | (int(4))))) << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2)))); _injected_loop_counter ++)
                                                      {
                                                       return;
                                                      }
                                                    }
                                                   if(_GLF_WRAPPED_IF_TRUE(true))
                                                    {
                                                     if(_GLF_WRAPPED_IF_TRUE(true))
                                                      {
                                                       for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(7, _GLF_IDENTITY(int(int(7)), min(int(int(7)), _GLF_IDENTITY(int(int(7)), _GLF_IDENTITY(1, 0 ^ (1)) * (int(int(7)))))))), _GLF_IDENTITY((int(7)) >> 0, (_GLF_IDENTITY((int(7)) >> 0, ((int(7)) >> 0) | (_GLF_IDENTITY((int(7)) >> 0, min((int(7)) >> 0, (int(7)) >> 0))))) ^ 0)), int(7))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(7, (false ? _GLF_IDENTITY(_GLF_FUZZED(ivec2(-2657, 3583)[1]), (_GLF_FUZZED(_GLF_IDENTITY(ivec2(-2657, 3583), ~ (_GLF_IDENTITY(~ (ivec2(-2657, 3583)), min(~ (ivec2(-2657, 3583)), ~ (ivec2(-2657, 3583))))))[1])) + 0) : 7))), _GLF_IDENTITY(int(7), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).x < _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))).y, (injectionSwitch.y) - 0.0))), (_GLF_IDENTITY(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).x < _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0))), (_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).x < _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0)))) && true)) && true) ? int(7) : _GLF_FUZZED(_injected_loop_counter), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? int(7) : _GLF_FUZZED(_injected_loop_counter), min(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? int(7) : _GLF_FUZZED(_injected_loop_counter), _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y)) ? int(7) : _GLF_FUZZED(_injected_loop_counter)))) ^ 0, clamp((_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? int(7) : _GLF_FUZZED(_injected_loop_counter), min(_GLF_TRUE(_GLF_IDENTITY(true, ! (! (true))), (injectionSwitch.x < injectionSwitch.y)) ? int(7) : _GLF_FUZZED(_injected_loop_counter), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? int(7) : _GLF_FUZZED(_injected_loop_counter)))) ^ 0, (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? int(7) : _GLF_FUZZED(_injected_loop_counter), min(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? int(7) : _GLF_FUZZED(_injected_loop_counter), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? int(7) : _GLF_FUZZED(_injected_loop_counter)))) ^ 0, (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? int(7) : _GLF_FUZZED(_injected_loop_counter), min(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? int(7) : _GLF_FUZZED(_injected_loop_counter), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? int(7) : _GLF_FUZZED(_injected_loop_counter)))) ^ 0)))), clamp((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).x < _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))).y, (injectionSwitch.y) - 0.0))), (_GLF_IDENTITY(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).x < _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0))), (_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).x < _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0)))) && true)) && true) ? int(7) : _GLF_FUZZED(_injected_loop_counter), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? int(7) : _GLF_FUZZED(_injected_loop_counter), min(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? int(7) : _GLF_FUZZED(_injected_loop_counter), _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y)) ? int(7) : _GLF_FUZZED(_injected_loop_counter)))) ^ 0, clamp((_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? int(7) : _GLF_FUZZED(_injected_loop_counter), min(_GLF_TRUE(_GLF_IDENTITY(true, ! (! (true))), (injectionSwitch.x < injectionSwitch.y)) ? int(7) : _GLF_FUZZED(_injected_loop_counter), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? int(7) : _GLF_FUZZED(_injected_loop_counter)))) ^ 0, (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? int(7) : _GLF_FUZZED(_injected_loop_counter), min(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? int(7) : _GLF_FUZZED(_injected_loop_counter), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? int(7) : _GLF_FUZZED(_injected_loop_counter)))) ^ 0, (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? int(7) : _GLF_FUZZED(_injected_loop_counter), min(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? int(7) : _GLF_FUZZED(_injected_loop_counter), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? int(7) : _GLF_FUZZED(_injected_loop_counter)))) ^ 0)))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).x < _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))).y, (injectionSwitch.y) - 0.0))), (_GLF_IDENTITY(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).x < _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0))), (_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).x < _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0)))) && true)) && true) ? int(7) : _GLF_FUZZED(_injected_loop_counter), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? int(7) : _GLF_FUZZED(_injected_loop_counter), min(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? int(7) : _GLF_FUZZED(_injected_loop_counter), _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y)) ? int(7) : _GLF_FUZZED(_injected_loop_counter)))) ^ 0, clamp((_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? int(7) : _GLF_FUZZED(_injected_loop_counter), min(_GLF_TRUE(_GLF_IDENTITY(true, ! (! (true))), (injectionSwitch.x < injectionSwitch.y)) ? int(7) : _GLF_FUZZED(_injected_loop_counter), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? int(7) : _GLF_FUZZED(_injected_loop_counter)))) ^ 0, (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? int(7) : _GLF_FUZZED(_injected_loop_counter), min(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? int(7) : _GLF_FUZZED(_injected_loop_counter), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? int(7) : _GLF_FUZZED(_injected_loop_counter)))) ^ 0, (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? int(7) : _GLF_FUZZED(_injected_loop_counter), min(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? int(7) : _GLF_FUZZED(_injected_loop_counter), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? int(7) : _GLF_FUZZED(_injected_loop_counter)))) ^ 0)))), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).x < _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))).y, (injectionSwitch.y) - 0.0))), (_GLF_IDENTITY(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).x < _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0))), (_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).x < _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0)))) && true)) && true) ? int(7) : _GLF_FUZZED(_injected_loop_counter), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? int(7) : _GLF_FUZZED(_injected_loop_counter), min(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? int(7) : _GLF_FUZZED(_injected_loop_counter), _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y)) ? int(7) : _GLF_FUZZED(_injected_loop_counter)))) ^ 0, clamp((_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? int(7) : _GLF_FUZZED(_injected_loop_counter), min(_GLF_TRUE(_GLF_IDENTITY(true, ! (! (true))), (injectionSwitch.x < injectionSwitch.y)) ? int(7) : _GLF_FUZZED(_injected_loop_counter), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? int(7) : _GLF_FUZZED(_injected_loop_counter)))) ^ 0, (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? int(7) : _GLF_FUZZED(_injected_loop_counter), min(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? int(7) : _GLF_FUZZED(_injected_loop_counter), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? int(7) : _GLF_FUZZED(_injected_loop_counter)))) ^ 0, (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? int(7) : _GLF_FUZZED(_injected_loop_counter), min(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? int(7) : _GLF_FUZZED(_injected_loop_counter), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? int(7) : _GLF_FUZZED(_injected_loop_counter)))) ^ 0)))), clamp((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).x < _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))).y, (injectionSwitch.y) - 0.0))), (_GLF_IDENTITY(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).x < _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0))), (_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).x < _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0)))) && true)) && true) ? int(7) : _GLF_FUZZED(_injected_loop_counter), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? int(7) : _GLF_FUZZED(_injected_loop_counter), min(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? int(7) : _GLF_FUZZED(_injected_loop_counter), _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y)) ? int(7) : _GLF_FUZZED(_injected_loop_counter)))) ^ 0, clamp((_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? int(7) : _GLF_FUZZED(_injected_loop_counter), min(_GLF_TRUE(_GLF_IDENTITY(true, ! (! (true))), (injectionSwitch.x < injectionSwitch.y)) ? int(7) : _GLF_FUZZED(_injected_loop_counter), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? int(7) : _GLF_FUZZED(_injected_loop_counter)))) ^ 0, (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? int(7) : _GLF_FUZZED(_injected_loop_counter), min(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? int(7) : _GLF_FUZZED(_injected_loop_counter), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? int(7) : _GLF_FUZZED(_injected_loop_counter)))) ^ 0, (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? int(7) : _GLF_FUZZED(_injected_loop_counter), min(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? int(7) : _GLF_FUZZED(_injected_loop_counter), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? int(7) : _GLF_FUZZED(_injected_loop_counter)))) ^ 0)))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).x < _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))).y, (injectionSwitch.y) - 0.0))), (_GLF_IDENTITY(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).x < _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0))), (_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).x < _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0)))) && true)) && true) ? int(7) : _GLF_FUZZED(_injected_loop_counter), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? int(7) : _GLF_FUZZED(_injected_loop_counter), min(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? int(7) : _GLF_FUZZED(_injected_loop_counter), _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y)) ? int(7) : _GLF_FUZZED(_injected_loop_counter)))) ^ 0, clamp((_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? int(7) : _GLF_FUZZED(_injected_loop_counter), min(_GLF_TRUE(_GLF_IDENTITY(true, ! (! (true))), (injectionSwitch.x < injectionSwitch.y)) ? int(7) : _GLF_FUZZED(_injected_loop_counter), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? int(7) : _GLF_FUZZED(_injected_loop_counter)))) ^ 0, (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? int(7) : _GLF_FUZZED(_injected_loop_counter), min(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? int(7) : _GLF_FUZZED(_injected_loop_counter), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? int(7) : _GLF_FUZZED(_injected_loop_counter)))) ^ 0, (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? int(7) : _GLF_FUZZED(_injected_loop_counter), min(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? int(7) : _GLF_FUZZED(_injected_loop_counter), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? int(7) : _GLF_FUZZED(_injected_loop_counter)))) ^ 0)))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).x < _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))).y, (injectionSwitch.y) - 0.0))), (_GLF_IDENTITY(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).x < _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0))), (_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).x < _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0)))) && true)) && true) ? int(7) : _GLF_FUZZED(_injected_loop_counter), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? int(7) : _GLF_FUZZED(_injected_loop_counter), min(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? int(7) : _GLF_FUZZED(_injected_loop_counter), _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y)) ? int(7) : _GLF_FUZZED(_injected_loop_counter)))) ^ 0, clamp((_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? int(7) : _GLF_FUZZED(_injected_loop_counter), min(_GLF_TRUE(_GLF_IDENTITY(true, ! (! (true))), (injectionSwitch.x < injectionSwitch.y)) ? int(7) : _GLF_FUZZED(_injected_loop_counter), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? int(7) : _GLF_FUZZED(_injected_loop_counter)))) ^ 0, (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? int(7) : _GLF_FUZZED(_injected_loop_counter), min(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? int(7) : _GLF_FUZZED(_injected_loop_counter), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? int(7) : _GLF_FUZZED(_injected_loop_counter)))) ^ 0, (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? int(7) : _GLF_FUZZED(_injected_loop_counter), min(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? int(7) : _GLF_FUZZED(_injected_loop_counter), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? int(7) : _GLF_FUZZED(_injected_loop_counter)))) ^ 0))))))))))); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), (_GLF_WRAPPED_LOOP(_injected_loop_counter > 0)) || false); _injected_loop_counter --)
                                                        {
                                                         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                                          {
                                                          }
                                                         else
                                                          {
                                                           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                                            {
                                                             if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec4(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, true, true)))) && true))
                                                              {
                                                               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                                                {
                                                                }
                                                               else
                                                                {
                                                                 return;
                                                                }
                                                              }
                                                            }
                                                           else
                                                            {
                                                             if(_GLF_WRAPPED_IF_TRUE(true))
                                                              {
                                                               for(int _injected_loop_counter = (1 | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                                                                {
                                                                 for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(4), int(4))); _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(1, (1) >> 0)); _injected_loop_counter ++)
                                                                  {
                                                                   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) | 0)) >> 0)); _injected_loop_counter --)
                                                                    {
                                                                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                                                      return;
                                                                    }
                                                                  }
                                                                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                                                  continue;
                                                                }
                                                              }
                                                             else
                                                              {
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                     else
                                                      {
                                                      }
                                                    }
                                                   else
                                                    {
                                                    }
                                                   if(_GLF_DEAD(false))
                                                    continue;
                                                   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
                                                    break;
                                                   if(_GLF_DEAD(false))
                                                    break;
                                                  }
                                                 else
                                                  {
                                                  }
                                                }
                                              }
                                            }
                                           while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (false))))))));
                                          }
                                        }
                                       while(_GLF_WRAPPED_LOOP(false));
                                      }
                                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                      return;
                                    }
                                   else
                                    {
                                    }
                                  }
                                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                  continue;
                                }
                               while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, bool(bool(false))))) ? _GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(vec2(77.60, _GLF_IDENTITY(-9.7, mix(float(-9.7), float(_GLF_FUZZED((-72.04 - -9.3))), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), (vec2(77.60, _GLF_IDENTITY(_GLF_IDENTITY(-9.7, mix(float(-9.7), _GLF_IDENTITY(float(_GLF_FUZZED((_GLF_IDENTITY(-72.04, clamp(-72.04, -72.04, -72.04)) - -9.3))), mix(float(float(_GLF_FUZZED((_GLF_IDENTITY(-72.04, clamp(-72.04, -72.04, -72.04)) - -9.3)))), float(_GLF_FUZZED((-9782.6424 * 7.5))), bool(false))), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), float(vec3(_GLF_IDENTITY(-9.7, mix(float(-9.7), float(_GLF_FUZZED((-72.04 - -9.3))), bool(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)))))), 0.0, 0.0))))) * mat2(1.0))), vec2(1.0, 1.0) * (_GLF_FUZZED(vec2(77.60, -9.7)))) : _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)), min(injectionSwitch, injectionSwitch)), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)), min(injectionSwitch, injectionSwitch))) - vec2(0.0, 0.0)))).x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat2x3(injectionSwitch, abs(0.0), _GLF_ONE(_GLF_IDENTITY(1.0, (1.0) - 0.0), injectionSwitch.y), 0.0, 1.0)), (true ? vec2(mat2x3(injectionSwitch, abs(0.0), _GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0)) : _GLF_FUZZED(vec2(275.558, 449.482))))).y))) && true)));
                               if(_GLF_DEAD(false))
                                return;
                              }
                            }
                           if(_GLF_DEAD(false))
                            break;
                           if(_GLF_WRAPPED_IF_FALSE(false))
                            {
                            }
                           else
                            {
                             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                              {
                               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                                {
                                 for(int _injected_loop_counter = (36951 & (1 ^ 1)); _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 ^ 0)); _injected_loop_counter ++)
                                  {
                                   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), _GLF_IDENTITY(! (! (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), ! (! (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))), true && (_GLF_IDENTITY(! (! (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), ! (! (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))), false || (! (! (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), ! (! (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))))))))
                                    {
                                     return;
                                    }
                                   else
                                    {
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                     while(_GLF_WRAPPED_LOOP(false));
                    }
                   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                  }
                 else
                  {
                  }
                 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
                  {
                   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
                    return;
                  }
                }
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
            }
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).y)))))));
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     return;
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, ! (! (false))))))))
  {
  }
 else
  {
   for(int _injected_loop_counter = (_GLF_IDENTITY(0 >> _GLF_IDENTITY(int(0), int(0)), 0 ^ (0 >> _GLF_IDENTITY(int(0), int(_GLF_IDENTITY(0, 0 ^ (_GLF_IDENTITY(0, ~ (~ (0)))))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))), (_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false))))) && true))
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
        break;
       do
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, true && (false)), true))), true, false)))))
          break;
         return;
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) || false)));
      }
     if(_GLF_DEAD(false))
      continue;
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))))), ! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0), min(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y))), true && (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), injectionSwitch)).x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))) / 1.0)))))))))), (! (_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec2((injectionSwitch.x > injectionSwitch.y), true))))))))) || false))))) && true))))
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         return;
        }
      }
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      continue;
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)))
          return;
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (false)))))
          {
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
          }
         do
          {
           do
            {
             return;
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).x > injectionSwitch.y))))
          return;
        }
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), (! ((injectionSwitch.x > injectionSwitch.y))) && true)))))))) || false)))
        break;
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          return;
        }
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         do
          {
           do
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                break;
               for(int _injected_loop_counter = (((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6))) | ((_GLF_IDENTITY((1 ^ 0) << _GLF_IDENTITY(int(6), int(6)), int(ivec2((1 ^ 0) << _GLF_IDENTITY(int(6), int(6)), 1)))) >> _GLF_IDENTITY(int(6), int(6)))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                {
                 return;
                }
              }
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false))))))), ! (! (! (_GLF_IDENTITY(false, _GLF_IDENTITY(! (_GLF_IDENTITY(! (false), ! (! (! (false))))), ! (! (! (_GLF_IDENTITY(! _GLF_IDENTITY((false), false || ((false))), ! (! (! (false))))))))))))))), (injectionSwitch.x > injectionSwitch.y))));
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           do
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               do
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)))) && true)))
                  continue;
                 return;
                }
               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  return;
                 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bvec2(false, true)))))
                  {
                  }
                 else
                  {
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     if(_GLF_WRAPPED_IF_TRUE(true))
                      {
                       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY(true && (true), (_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), ! (! (! (true)))))) && (_GLF_IDENTITY(true, true && (true)))) || false))))
                        {
                         do
                          {
                           if(_GLF_WRAPPED_IF_FALSE(false))
                            {
                            }
                           else
                            {
                             return;
                            }
                          }
                         while(_GLF_WRAPPED_LOOP(false));
                        }
                       else
                        {
                        }
                      }
                     else
                      {
                      }
                    }
                   else
                    {
                    }
                  }
                }
              }
             if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! _GLF_IDENTITY((_GLF_IDENTITY(! (false), ! (! (! (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bvec3(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))))))))))), false || ((_GLF_IDENTITY(! (false), ! (! (! (false))))))))))
              {
              }
             else
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, false, _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))
                {
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                  {
                   if(_GLF_DEAD(false))
                    return;
                   return;
                  }
                 else
                  {
                  }
                }
              }
            }
           else
            {
             if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true)), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false), bvec2(bvec4(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false), false, true)))), (bool(_GLF_IDENTITY(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false), bvec2(bvec4(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false), false, true))))) && true))))
              return;
             return;
             if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
              break;
            }
          }
         else
          {
          }
        }
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            return;
           atomicStore(buf[_GLF_IDENTITY(next_virtual_gid, 0u | (next_virtual_gid))], _GLF_IDENTITY(uint(1), ~ (~ _GLF_IDENTITY((uint(1)), 0u ^ ((uint(1)))))), 4, 64, 4);
          }
         else
          {
          }
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        return;
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 do
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, true && (false))))
      {
      }
     else
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           do
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(false))
                continue;
               do
                {
                 return;
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_DEAD(false))
                continue;
               if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false))))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  continue;
                 do
                  {
                   if(_GLF_DEAD(false))
                    continue;
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)))
                      return;
                     break;
                    }
                   do
                    {
                     if(_GLF_WRAPPED_IF_TRUE(true))
                      {
                       if(_GLF_WRAPPED_IF_FALSE(false))
                        {
                        }
                       else
                        {
                         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                          {
                           do
                            {
                             if(_GLF_DEAD(false))
                              return;
                            }
                           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                          }
                        }
                       do
                        {
                         if(_GLF_WRAPPED_IF_FALSE(false))
                          {
                          }
                         else
                          {
                           return;
                           if(_GLF_DEAD(false))
                            return;
                          }
                        }
                       while(_GLF_WRAPPED_LOOP(false));
                      }
                     else
                      {
                       if(_GLF_DEAD(false))
                        {
                         if(_GLF_DEAD(false))
                          {
                           if(_GLF_WRAPPED_IF_FALSE(false))
                            {
                            }
                           else
                            {
                             if(_GLF_WRAPPED_IF_FALSE(false))
                              {
                              }
                             else
                              {
                               do
                                {
                                 if(_GLF_DEAD(false))
                                  {
                                   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                    {
                                    }
                                   else
                                    {
                                     return;
                                    }
                                  }
                                }
                               while(_GLF_WRAPPED_LOOP(false));
                              }
                            }
                           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                            continue;
                           if(_GLF_WRAPPED_IF_FALSE(false))
                            {
                             if(_GLF_DEAD(false))
                              {
                               if(_GLF_DEAD(false))
                                {
                                 if(_GLF_WRAPPED_IF_TRUE(true))
                                  {
                                   return;
                                  }
                                 else
                                  {
                                  }
                                }
                               if(_GLF_DEAD(false))
                                break;
                               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                continue;
                               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 >> _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), clamp(int(4), int(4), int(4)))))); _injected_loop_counter --)
                                {
                                 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _GLF_IDENTITY(_injected_loop_counter --, (_GLF_IDENTITY(_injected_loop_counter --, _GLF_IDENTITY((0 << _GLF_IDENTITY(int(7), int(7))) | (_GLF_IDENTITY(_injected_loop_counter --, ~ (~ (_injected_loop_counter --)))), ~ (~ ((0 << _GLF_IDENTITY(int(7), int(7))) | (_GLF_IDENTITY(_injected_loop_counter --, ~ (~ (_injected_loop_counter --))))))))) << 0))
                                  {
                                   if(_GLF_DEAD(false))
                                    continue;
                                   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                                    {
                                     return;
                                    }
                                  }
                                }
                              }
                            }
                           else
                            {
                             for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (int(0)) - 0))); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
                              {
                               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((-88743 & 0) | int(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), float(mat4x3(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), 1.0 * (_GLF_ONE(1.0, injectionSwitch.y))), 0.0, 0.0, 1.0, determinant(mat2(1.0, 1.0, 0.0, 1.0)), 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0)))))); _injected_loop_counter ++)
                                {
                                 for(int _injected_loop_counter = _GLF_IDENTITY(0, clamp(0, 0, 0)); _GLF_WRAPPED_LOOP(_injected_loop_counter < (int(_GLF_ONE(1.0, injectionSwitch.y)) & 1)); _injected_loop_counter ++)
                                  {
                                   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                                    {
                                     return;
                                    }
                                  }
                                }
                              }
                            }
                          }
                         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, bool(bool(true)))))), (injectionSwitch.x < injectionSwitch.y))))
                          {
                           do
                            {
                             if(_GLF_WRAPPED_IF_TRUE(true))
                              {
                               for(int _injected_loop_counter = int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(vec2(-9233.9975, -0.8)) : injectionSwitch, clamp(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(vec2(-9233.9975, -0.8)) : injectionSwitch, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(vec2(-9233.9975, -0.8)) : injectionSwitch, _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(vec2(-9233.9975, -0.8)) : injectionSwitch, (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(_GLF_IDENTITY(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false), bvec3(bvec4(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false), true))))) ? _GLF_FUZZED(vec2(-9233.9975, -0.8)) : injectionSwitch) / vec2(1.0, 1.0)))))).y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)).x))); _injected_loop_counter --)
                                {
                                 if(_GLF_WRAPPED_IF_TRUE(true))
                                  {
                                   if(_GLF_DEAD(false))
                                    return;
                                   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, true && (true))))
                                    {
                                     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                                      continue;
                                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                      break;
                                     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                                      {
                                       return;
                                      }
                                     else
                                      {
                                      }
                                    }
                                   else
                                    {
                                    }
                                  }
                                 else
                                  {
                                  }
                                }
                              }
                             else
                              {
                              }
                            }
                           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                          }
                         else
                          {
                          }
                         if(_GLF_DEAD(false))
                          {
                           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                            {
                             return;
                            }
                           else
                            {
                            }
                          }
                        }
                      }
                     for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                      {
                       if(_GLF_DEAD(false))
                        return;
                      }
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_DEAD(false))
                        return;
                       continue;
                      }
                    }
                   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, ! (! (false)))))), (injectionSwitch.x > injectionSwitch.y))));
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
           if(_GLF_DEAD(false))
            break;
          }
        }
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 ^ 1)); _injected_loop_counter --)
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bool(_GLF_DEAD(false))), bool(bvec2(bool(bool(_GLF_DEAD(false))), false)))))
    {
     for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(0), int(_GLF_IDENTITY(0, (0) - 0)))) >> _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(_GLF_IDENTITY(ivec4(int(0), _GLF_IDENTITY(1, 0 | (1)), 1, 1), ivec4(1, 1, 1, 1) * _GLF_IDENTITY((_GLF_IDENTITY(ivec4(int(0), 1, 1, 1), _GLF_IDENTITY((false ? _GLF_FUZZED(ivec4(-79168, _GLF_IDENTITY(22415, ~ (_GLF_IDENTITY(~ (22415), (~ (22415)) | (~ (22415))))), -67958, -96712)) : _GLF_IDENTITY(ivec4(int(0), _GLF_IDENTITY(1, (false ? _GLF_FUZZED(int(workgroup_base)) : 1)), 1, 1), (ivec4(int(0), 1, 1, 1)) - ivec4(0, 0, 0, 0))), clamp((false ? _GLF_FUZZED(ivec4(-79168, _GLF_IDENTITY(22415, ~ (_GLF_IDENTITY(~ (22415), (~ (22415)) | (~ (22415))))), -67958, -96712)) : _GLF_IDENTITY(ivec4(int(0), _GLF_IDENTITY(1, (false ? _GLF_FUZZED(int(workgroup_base)) : 1)), 1, 1), (ivec4(int(0), 1, 1, 1)) - ivec4(0, 0, 0, 0))), (false ? _GLF_FUZZED(ivec4(-79168, _GLF_IDENTITY(22415, ~ (_GLF_IDENTITY(~ (22415), (~ (22415)) | (~ (22415))))), -67958, -96712)) : _GLF_IDENTITY(ivec4(int(0), _GLF_IDENTITY(1, (false ? _GLF_FUZZED(int(workgroup_base)) : 1)), 1, 1), (ivec4(int(0), 1, 1, 1)) - ivec4(0, 0, 0, 0))), (false ? _GLF_FUZZED(ivec4(-79168, _GLF_IDENTITY(22415, ~ (_GLF_IDENTITY(~ (22415), (~ (22415)) | (~ (22415))))), -67958, -96712)) : _GLF_IDENTITY(ivec4(int(0), _GLF_IDENTITY(1, (false ? _GLF_FUZZED(int(workgroup_base)) : 1)), 1, 1), (ivec4(int(0), 1, 1, 1)) - ivec4(0, 0, 0, 0))))))), ivec4(0, 0, 0, 0) + (_GLF_IDENTITY((_GLF_IDENTITY(ivec4(int(0), 1, 1, 1), _GLF_IDENTITY((false ? _GLF_FUZZED(ivec4(-79168, _GLF_IDENTITY(22415, ~ (_GLF_IDENTITY(~ (22415), (~ (22415)) | (~ (22415))))), -67958, -96712)) : _GLF_IDENTITY(ivec4(int(0), _GLF_IDENTITY(1, (false ? _GLF_FUZZED(int(workgroup_base)) : 1)), 1, 1), (ivec4(int(0), 1, 1, 1)) - ivec4(0, 0, 0, 0))), clamp((false ? _GLF_FUZZED(ivec4(-79168, _GLF_IDENTITY(22415, ~ (_GLF_IDENTITY(~ (22415), (~ (22415)) | (~ (22415))))), -67958, -96712)) : _GLF_IDENTITY(ivec4(int(0), _GLF_IDENTITY(1, (false ? _GLF_FUZZED(int(workgroup_base)) : 1)), 1, 1), (ivec4(int(0), 1, 1, 1)) - ivec4(0, 0, 0, 0))), (false ? _GLF_FUZZED(ivec4(-79168, _GLF_IDENTITY(22415, ~ (_GLF_IDENTITY(~ (22415), (~ (22415)) | (~ (22415))))), -67958, -96712)) : _GLF_IDENTITY(ivec4(int(0), _GLF_IDENTITY(1, (false ? _GLF_FUZZED(int(workgroup_base)) : 1)), 1, 1), (ivec4(int(0), 1, 1, 1)) - ivec4(0, 0, 0, 0))), (false ? _GLF_FUZZED(ivec4(-79168, _GLF_IDENTITY(22415, ~ (_GLF_IDENTITY(~ (22415), (~ (22415)) | (~ (22415))))), -67958, -96712)) : _GLF_IDENTITY(ivec4(int(0), _GLF_IDENTITY(1, (false ? _GLF_FUZZED(int(workgroup_base)) : 1)), 1, 1), (ivec4(int(0), 1, 1, 1)) - ivec4(0, 0, 0, 0))))))), ivec4(0, 0, 0, 0) + ((_GLF_IDENTITY(ivec4(int(0), 1, 1, 1), _GLF_IDENTITY((false ? _GLF_FUZZED(ivec4(-79168, _GLF_IDENTITY(22415, ~ (_GLF_IDENTITY(~ (22415), (~ (22415)) | (~ (22415))))), -67958, -96712)) : _GLF_IDENTITY(ivec4(int(0), _GLF_IDENTITY(1, (false ? _GLF_FUZZED(int(workgroup_base)) : 1)), 1, 1), (ivec4(int(0), 1, 1, 1)) - ivec4(0, 0, 0, 0))), clamp((false ? _GLF_FUZZED(ivec4(-79168, _GLF_IDENTITY(22415, ~ (_GLF_IDENTITY(~ (22415), (~ (22415)) | (~ (22415))))), -67958, -96712)) : _GLF_IDENTITY(ivec4(int(0), _GLF_IDENTITY(1, (false ? _GLF_FUZZED(int(workgroup_base)) : 1)), 1, 1), (ivec4(int(0), 1, 1, 1)) - ivec4(0, 0, 0, 0))), (false ? _GLF_FUZZED(ivec4(-79168, _GLF_IDENTITY(22415, ~ (_GLF_IDENTITY(~ (22415), (~ (22415)) | (~ (22415))))), -67958, -96712)) : _GLF_IDENTITY(ivec4(int(0), _GLF_IDENTITY(1, (false ? _GLF_FUZZED(int(workgroup_base)) : 1)), 1, 1), (ivec4(int(0), 1, 1, 1)) - ivec4(0, 0, 0, 0))), (false ? _GLF_FUZZED(ivec4(-79168, _GLF_IDENTITY(22415, ~ (_GLF_IDENTITY(~ (22415), (~ (22415)) | (~ (22415))))), -67958, -96712)) : _GLF_IDENTITY(ivec4(int(0), _GLF_IDENTITY(1, (false ? _GLF_FUZZED(int(workgroup_base)) : 1)), 1, 1), (ivec4(int(0), 1, 1, 1)) - ivec4(0, 0, 0, 0))))))))))))), 0 + (int(_GLF_IDENTITY(ivec4(int(0), _GLF_IDENTITY(1, 0 | (1)), 1, 1), ivec4(1, _GLF_IDENTITY(1, (1) ^ 0), 1, 1) * (_GLF_IDENTITY(ivec4(int(0), 1, 1, 1), (false ? _GLF_FUZZED(ivec4(-79168, 22415, -67958, -96712)) : _GLF_IDENTITY(ivec4(int(0), 1, 1, 1), (ivec4(int(0), 1, 1, 1)) - ivec4(0, 0, 0, 0)))))))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       do
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 & 1)); _injected_loop_counter ++)
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               do
                {
                 return;
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
            }
          }
         else
          {
           if(_GLF_DEAD(false))
            break;
          }
         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec4(bvec2(false, true), false, false)))))))
          break;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     if(_GLF_DEAD(false))
      break;
    }
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
    break;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 uint read = atomicLoad(buf[_GLF_IDENTITY(virtual_gid, max(virtual_gid, _GLF_IDENTITY(virtual_gid, ~ (~ (virtual_gid)))))], 4, _GLF_IDENTITY(64, max(_GLF_IDENTITY(64, _GLF_IDENTITY((64), max((64), (64))) * 1), 64)), 0);
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     do
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
              {
               return;
              }
            }
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       else
        {
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
  }
 else
  {
  }
 do
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         return;
        }
       else
        {
         if(_GLF_DEAD(false))
          return;
        }
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            return;
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             for(int _injected_loop_counter = 1; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != ((~ ivec4(-67367, -18816, -41807, -16786)).x & 0)), (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != ((~ ivec4(-67367, -18816, -41807, -16786)).x & 0)), true && (_GLF_WRAPPED_LOOP(_injected_loop_counter != ((~ ivec4(-67367, -18816, -41807, -16786)).x & 0))))) || false); _injected_loop_counter --)
              {
               if(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (subgroup_local_id), _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec2(~ (subgroup_local_id), 0u), (uvec2(~ (subgroup_local_id), _GLF_IDENTITY(0u, clamp(_GLF_IDENTITY(0u, (true ? 0u : _GLF_FUZZED(subgroup_id))), _GLF_IDENTITY(_GLF_IDENTITY(0u, _GLF_IDENTITY(0u ^ (0u), clamp(0u ^ (0u), _GLF_IDENTITY(0u ^ (0u), (0u ^ (0u)) ^ 0u), 0u ^ (0u)))), (_GLF_IDENTITY(0u, uint(_GLF_IDENTITY(uint(_GLF_IDENTITY(0u, (0u) << uint(_GLF_ZERO(0.0, injectionSwitch.x)))), (_GLF_IDENTITY(uint(_GLF_IDENTITY(0u, (0u) << uint(_GLF_ZERO(0.0, injectionSwitch.x)))), clamp(uint(_GLF_IDENTITY(0u, (0u) << uint(_GLF_ZERO(0.0, injectionSwitch.x)))), uint(_GLF_IDENTITY(0u, (0u) << uint(_GLF_ZERO(0.0, injectionSwitch.x)))), uint(_GLF_IDENTITY(0u, (0u) << uint(_GLF_ZERO(0.0, injectionSwitch.x))))))) - 0u)))) << 0u), 0u)))) | (uvec2(~ (subgroup_local_id), 0u)))), (0u ^ 0u) ^ (uint(_GLF_IDENTITY(uvec2(~ (subgroup_local_id), 0u), (uvec2(~ (subgroup_local_id), _GLF_IDENTITY(0u, clamp(_GLF_IDENTITY(0u, (true ? 0u : _GLF_FUZZED(subgroup_id))), _GLF_IDENTITY(0u, (0u) << 0u), 0u)))) | (uvec2(~ (subgroup_local_id), 0u))))))), min(_GLF_IDENTITY(~ (subgroup_local_id), _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec2(~ (subgroup_local_id), 0u), (uvec2(~ (subgroup_local_id), _GLF_IDENTITY(0u, clamp(_GLF_IDENTITY(0u, (true ? 0u : _GLF_FUZZED(subgroup_id))), _GLF_IDENTITY(_GLF_IDENTITY(0u, _GLF_IDENTITY(0u ^ (0u), clamp(0u ^ (0u), _GLF_IDENTITY(0u ^ (0u), (0u ^ (0u)) ^ 0u), 0u ^ (0u)))), (0u) << 0u), 0u)))) | (uvec2(~ (subgroup_local_id), 0u)))), (0u ^ 0u) ^ (uint(_GLF_IDENTITY(uvec2(~ (subgroup_local_id), 0u), (uvec2(~ (subgroup_local_id), _GLF_IDENTITY(0u, clamp(_GLF_IDENTITY(0u, (true ? 0u : _GLF_IDENTITY(_GLF_FUZZED(subgroup_id), clamp(_GLF_FUZZED(subgroup_id), _GLF_FUZZED(subgroup_id), _GLF_FUZZED(subgroup_id))))), _GLF_IDENTITY(0u, (0u) << 0u), 0u)))) | (uvec2(~ (subgroup_local_id), 0u))))))), _GLF_IDENTITY(~ (subgroup_local_id), _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec2(~ (subgroup_local_id), 0u), (uvec2(_GLF_IDENTITY(~ (subgroup_local_id), (~ (subgroup_local_id)) | (~ (subgroup_local_id))), _GLF_IDENTITY(0u, clamp(_GLF_IDENTITY(0u, (true ? 0u : _GLF_FUZZED(subgroup_id))), _GLF_IDENTITY(_GLF_IDENTITY(0u, _GLF_IDENTITY(_GLF_IDENTITY(0u ^ (0u), uint(_GLF_IDENTITY(uint(_GLF_IDENTITY(0u ^ (0u), 0u ^ (0u ^ (0u)))), (uint(_GLF_IDENTITY(0u ^ (0u), 0u ^ (0u ^ (0u))))) - 0u))), clamp(0u ^ (0u), _GLF_IDENTITY(0u ^ (0u), (0u ^ (0u)) ^ 0u), 0u ^ (0u)))), (0u) << 0u), 0u)))) | (uvec2(~ (subgroup_local_id), 0u)))), (0u ^ 0u) ^ (uint(_GLF_IDENTITY(uvec2(~ (subgroup_local_id), 0u), (uvec2(~ (subgroup_local_id), _GLF_IDENTITY(0u, clamp(_GLF_IDENTITY(0u, (true ? 0u : _GLF_FUZZED(subgroup_id))), _GLF_IDENTITY(_GLF_IDENTITY(0u, (0u) << 0u), (_GLF_IDENTITY(0u, (0u) << 0u)) / 1u), 0u)))) | (uvec2(~ (subgroup_local_id), 0u))))))))))) + 1 < subgroup_size, false || (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, 0u ^ (subgroup_local_id)), (subgroup_local_id) | (subgroup_local_id)), ~ (_GLF_IDENTITY(~ (subgroup_local_id), uint(_GLF_IDENTITY(_GLF_IDENTITY(uvec2(~ (subgroup_local_id), 0u), (true ? _GLF_IDENTITY(uvec2(~ (subgroup_local_id), 0u), (_GLF_IDENTITY(uvec2(~ (subgroup_local_id), 0u), uvec2(0u, 0u) ^ (_GLF_IDENTITY(uvec2(~ (subgroup_local_id), 0u), ~ (~ (uvec2(~ (subgroup_local_id), 0u))))))) | (_GLF_IDENTITY(uvec2(~ (subgroup_local_id), 0u), uvec2(1u, 1u) * (uvec2(~ (subgroup_local_id), 0u))))) : _GLF_FUZZED(uvec2(48763u, 17534u)))), (uvec2(~ (subgroup_local_id), _GLF_IDENTITY(0u, uint(_GLF_IDENTITY(uint(0u), uint(uint(uint(0u)))))))) | (uvec2(~ (subgroup_local_id), 0u))))))) + 1 < subgroup_size, _GLF_IDENTITY(! (! (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, ~ (_GLF_IDENTITY(~ (subgroup_local_id), uint(_GLF_IDENTITY(_GLF_IDENTITY(uvec2(~ (subgroup_local_id), 0u), (uvec2(~ (subgroup_local_id), 0u)) | (uvec2(~ (subgroup_local_id), 0u))), min(_GLF_IDENTITY(_GLF_IDENTITY(uvec2(~ (subgroup_local_id), 0u), (uvec2(~ (subgroup_local_id), 0u)) | (uvec2(~ (subgroup_local_id), 0u))), uvec2(0u, 0u) + (_GLF_IDENTITY(uvec2(~ (subgroup_local_id), 0u), (uvec2(~ (subgroup_local_id), 0u)) | (uvec2(~ (subgroup_local_id), 0u))))), _GLF_IDENTITY(uvec2(~ _GLF_IDENTITY((subgroup_local_id), max(_GLF_IDENTITY((subgroup_local_id), uint(uvec2(_GLF_IDENTITY((subgroup_local_id), (_GLF_IDENTITY((subgroup_local_id), ~ (~ (_GLF_IDENTITY((subgroup_local_id), ~ (~ ((subgroup_local_id)))))))) * 1u), 1u))), _GLF_IDENTITY((subgroup_local_id), ((subgroup_local_id)) | 0u))), 0u), (uvec2(~ (subgroup_local_id), 0u)) | (_GLF_IDENTITY(uvec2(~ (subgroup_local_id), 0u), uvec2(_GLF_IDENTITY(_GLF_IDENTITY(uvec2(uvec2(~ (subgroup_local_id), 0u)), uvec2(0u, 0u) | (_GLF_IDENTITY(uvec2(uvec2(~ (subgroup_local_id), 0u)), ~ (~ (uvec2(uvec2(~ (subgroup_local_id), 0u))))))), clamp(_GLF_IDENTITY(uvec2(uvec2(~ (subgroup_local_id), 0u)), uvec2(0u, 0u) | (_GLF_IDENTITY(uvec2(uvec2(~ (subgroup_local_id), 0u)), ~ (~ (uvec2(uvec2(~ (subgroup_local_id), 0u))))))), _GLF_IDENTITY(uvec2(uvec2(~ (subgroup_local_id), 0u)), uvec2(0u, 0u) | (_GLF_IDENTITY(uvec2(uvec2(~ (subgroup_local_id), 0u)), ~ (~ (uvec2(uvec2(~ (subgroup_local_id), 0u))))))), _GLF_IDENTITY(uvec2(uvec2(~ (subgroup_local_id), 0u)), uvec2(0u, 0u) | (_GLF_IDENTITY(uvec2(uvec2(~ (subgroup_local_id), 0u)), ~ (~ (uvec2(uvec2(~ (subgroup_local_id), 0u))))))))))))))))))), (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, ~ (_GLF_IDENTITY(~ (subgroup_local_id), uint(_GLF_IDENTITY(_GLF_IDENTITY(uvec2(~ (subgroup_local_id), 0u), (uvec2(~ (subgroup_local_id), 0u)) | (uvec2(~ (subgroup_local_id), 0u))), min(_GLF_IDENTITY(_GLF_IDENTITY(uvec2(~ (subgroup_local_id), 0u), (uvec2(~ (subgroup_local_id), 0u)) | (uvec2(~ (subgroup_local_id), 0u))), uvec2(0u, 0u) + (_GLF_IDENTITY(uvec2(~ (subgroup_local_id), 0u), (uvec2(~ (subgroup_local_id), 0u)) | _GLF_IDENTITY((uvec2(~ (subgroup_local_id), 0u)), (_GLF_IDENTITY((uvec2(~ (subgroup_local_id), 0u)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(uvec2(106454u, 120411u)) : (uvec2(~ (subgroup_local_id), 0u))))) - uvec2(0u, 0u))))), _GLF_IDENTITY(uvec2(~ (subgroup_local_id), 0u), (uvec2(~ (subgroup_local_id), 0u)) | (uvec2(~ (subgroup_local_id), 0u))))))))), (_GLF_IDENTITY(subgroup_local_id, ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (subgroup_local_id), uint(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uvec2(~ (subgroup_local_id), 0u), (_GLF_IDENTITY(uvec2(~ (subgroup_local_id), 0u), (_GLF_IDENTITY(uvec2(~ (subgroup_local_id), 0u), (uvec2(~ (subgroup_local_id), 0u)) << uvec2(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)))) - uvec2(0u, 0u))) ^ uvec2(0u, 0u)), _GLF_IDENTITY((uvec2(~ (subgroup_local_id), 0u)), min(_GLF_IDENTITY((uvec2(~ (subgroup_local_id), 0u)), min(_GLF_IDENTITY((uvec2(~ (subgroup_local_id), 0u)), ((uvec2(~ (subgroup_local_id), 0u))) ^ uvec2(0u, 0u)), (_GLF_IDENTITY(uvec2(~ (subgroup_local_id), 0u), (true ? uvec2(~ (subgroup_local_id), 0u) : _GLF_FUZZED(uvec2(170127u, 66417u))))))), _GLF_IDENTITY((uvec2(~ (subgroup_local_id), 0u)), ((uvec2(~ (subgroup_local_id), 0u))) | uvec2(0u, 0u)))) | (uvec2(~ (subgroup_local_id), 0u))), min(_GLF_IDENTITY(_GLF_IDENTITY(uvec2(~ (subgroup_local_id), 0u), (uvec2(~ (subgroup_local_id), 0u)) | (uvec2(~ (subgroup_local_id), 0u))), _GLF_IDENTITY(uvec2(0u, 0u), (uvec2(0u, 0u)) >> uvec2(0u, 0u)) + (_GLF_IDENTITY(uvec2(~ (subgroup_local_id), 0u), (uvec2(~ (subgroup_local_id), 0u)) | (uvec2(~ (subgroup_local_id), 0u))))), _GLF_IDENTITY(uvec2(~ (subgroup_local_id), 0u), (uvec2(~ (subgroup_local_id), 0u)) | (uvec2(~ (subgroup_local_id), 0u))))))), (_GLF_IDENTITY(~ (subgroup_local_id), uint(_GLF_IDENTITY(_GLF_IDENTITY(uvec2(~ (subgroup_local_id), 0u), (uvec2(~ (subgroup_local_id), 0u)) | (uvec2(~ (subgroup_local_id), 0u))), min(_GLF_IDENTITY(_GLF_IDENTITY(uvec2(~ (subgroup_local_id), 0u), _GLF_IDENTITY((uvec2(~ _GLF_IDENTITY((subgroup_local_id), (0u | 0u) + ((subgroup_local_id))), 0u)) | (uvec2(~ (subgroup_local_id), 0u)), (_GLF_IDENTITY((uvec2(~ (subgroup_local_id), 0u)) | (uvec2(~ (subgroup_local_id), 0u)), uvec2(0u, 0u) ^ ((uvec2(~ (subgroup_local_id), 0u)) | (uvec2(~ (subgroup_local_id), 0u))))) | ((uvec2(~ (subgroup_local_id), 0u)) | (uvec2(~ (subgroup_local_id), 0u))))), uvec2(0u, 0u) + (_GLF_IDENTITY(uvec2(~ (subgroup_local_id), 0u), (uvec2(~ (subgroup_local_id), _GLF_IDENTITY(0u, 0u | (0u)))) | (uvec2(_GLF_IDENTITY(_GLF_IDENTITY(~ (subgroup_local_id), ~ (~ (_GLF_IDENTITY(~ (subgroup_local_id), (~ (subgroup_local_id)) / 1u)))), 0u ^ (_GLF_IDENTITY(_GLF_IDENTITY(~ (subgroup_local_id), ~ (~ (_GLF_IDENTITY(~ (subgroup_local_id), (~ (subgroup_local_id)) / 1u)))), min(_GLF_IDENTITY(~ (subgroup_local_id), ~ (~ (_GLF_IDENTITY(~ (subgroup_local_id), (~ (subgroup_local_id)) / 1u)))), _GLF_IDENTITY(~ (subgroup_local_id), ~ (~ (_GLF_IDENTITY(~ (subgroup_local_id), (~ (subgroup_local_id)) / 1u)))))))), 0u))))), _GLF_IDENTITY(_GLF_IDENTITY(uvec2(~ (subgroup_local_id), 0u), _GLF_IDENTITY((uvec2(~ (subgroup_local_id), 0u)) | (uvec2(~ (subgroup_local_id), 0u)), ((uvec2(~ (subgroup_local_id), 0u)) | (uvec2(~ (subgroup_local_id), 0u))) | (_GLF_IDENTITY((uvec2(~ (subgroup_local_id), 0u)) | (uvec2(~ (subgroup_local_id), 0u)), ((uvec2(~ (subgroup_local_id), 0u)) | (uvec2(~ (subgroup_local_id), 0u))) >> uvec2(0u, 0u))))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED((uvec2(85796u, 187019u) ^ subgroup_id)) : _GLF_IDENTITY(_GLF_IDENTITY(uvec2(~ (subgroup_local_id), 0u), (uvec2(~ (subgroup_local_id), 0u)) | (uvec2(~ (subgroup_local_id), _GLF_IDENTITY(0u, max(0u, 0u))))), (_GLF_IDENTITY(uvec2(~ (subgroup_local_id), 0u), (uvec2(~ (subgroup_local_id), 0u)) | (uvec2(~ (subgroup_local_id), 0u)))) + uvec2(0u, 0u))))))))) - _GLF_IDENTITY(0u, (0u >> _GLF_IDENTITY(uint(8u), uint(8u))) + (0u)))))) << _GLF_IDENTITY(0u, 1u * (0u)))) + 0u) + _GLF_IDENTITY(1, (1) | (0 & -38901)) < _GLF_IDENTITY(subgroup_size, (subgroup_size) ^ 0u))), (! (! (_GLF_IDENTITY(subgroup_local_id, ~ (_GLF_IDENTITY(~ (subgroup_local_id), uint(_GLF_IDENTITY(uvec2(~ (subgroup_local_id), 0u), (uvec2(~ (subgroup_local_id), 0u)) | (uvec2(~ (subgroup_local_id), 0u))))))) + 1 < subgroup_size))) && true)))))
                {
                 do
                  {
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < ((_GLF_IDENTITY(1, _GLF_IDENTITY(int(ivec3(1, 1, 1)), 0 ^ (int(ivec3(1, 1, 1))))) << _GLF_IDENTITY(int(2), _GLF_IDENTITY(_GLF_IDENTITY(int(2), clamp(int(2), _GLF_IDENTITY(int(2), _GLF_IDENTITY((_GLF_IDENTITY(int(2), ~ (~ (int(2))))) << 0, min((_GLF_IDENTITY(int(2), ~ (~ (int(2))))) << 0, (_GLF_IDENTITY(int(2), ~ (~ (int(2))))) << 0))), _GLF_IDENTITY(int(2), (int(2)) - 0))), 0 | (int(2))))) >> _GLF_IDENTITY(int(2), int(_GLF_IDENTITY(2, (2) >> 0))))); _injected_loop_counter ++)
                      {
                       do
                        {
                         for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), 1 * (int(3))))) >> _GLF_IDENTITY(int(3), int(3))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                          {
                           do
                            {
                             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                              {
                              }
                             else
                              {
                               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY((_GLF_IDENTITY(-64098, max(-64098, -64098)) & _GLF_IDENTITY(0, ~ (~ (0)))), _GLF_IDENTITY(int(ivec2((_GLF_IDENTITY(-64098, max(-64098, -64098)) & 0), ((_GLF_IDENTITY(1, int(ivec4(_GLF_IDENTITY(1, int(ivec2(_GLF_IDENTITY(1, 0 | (1)), 1))), 0, 0, 0))) << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3))))), ~ (~ (int(ivec2((_GLF_IDENTITY(-64098, max(-64098, -64098)) & 0), ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3)))))))))); _injected_loop_counter --)
                                {
                                 if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
                                  {
                                   if(_GLF_DEAD(false))
                                    continue;
                                   if(_GLF_WRAPPED_IF_TRUE(true))
                                    {
                                     return;
                                    }
                                   else
                                    {
                                    }
                                  }
                                 do
                                  {
                                   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                                    {
                                     atomicStore(checker[virtual_gid], read, 4, 64, 4);
                                    }
                                   else
                                    {
                                    }
                                  }
                                 while(_GLF_WRAPPED_LOOP(false));
                                 if(_GLF_DEAD(false))
                                  continue;
                                }
                              }
                            }
                           while(_GLF_WRAPPED_LOOP(false));
                          }
                        }
                       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))));
                      }
                    }
                   else
                    {
                    }
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    continue;
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    return;
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, true)), (bool(bvec2(false, true))) || _GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(false, true && (false)))), (bool(bool(_GLF_IDENTITY(false, true && (false))))) || false))))));
                 for(int _injected_loop_counter = (0 | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2)))); _injected_loop_counter ++)
                  {
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                      }
                     else
                      {
                       do
                        {
                         for(int _injected_loop_counter = (int(_GLF_ONE(1.0, injectionSwitch.y)) & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, (0) ^ 0)); _injected_loop_counter --)
                          {
                           do
                            {
                             if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY((false) || false, bool(bvec4(_GLF_IDENTITY((false) || false, true && ((false) || false)), true, false, true))))))
                              {
                              }
                             else
                              {
                               if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(3.3), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(vec2(55.31, -3.0).t)), bvec2(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))).y))), (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(3.3), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(vec2(55.31, -3.0).t)), bvec2(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))).y)))) && true))
                                {
                                }
                               else
                                {
                                 if(_GLF_DEAD(false))
                                  break;
                                 subgroupAll(false);
                                }
                              }
                            }
                           while(_GLF_WRAPPED_LOOP(false));
                          }
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          return;
                         if(_GLF_DEAD(false))
                          {
                           if(_GLF_DEAD(false))
                            continue;
                           return;
                          }
                        }
                       while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bvec3(false, true, true)))), (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bvec3(false, true, true))))) && true));
                      }
                    }
                  }
                 for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(7), max(_GLF_IDENTITY(int(7), min(int(7), int(7))), _GLF_IDENTITY(int(7), (int(7)) * 1))), _GLF_IDENTITY(int(7), max(int(7), int(7))))) >> _GLF_IDENTITY(int(7), int(7))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 << _GLF_IDENTITY(int(6), int(6)))); _injected_loop_counter --)
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    return;
                  }
                 for(int _injected_loop_counter = ((0 << _GLF_IDENTITY(int(2), int(2))) | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                  {
                   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                    {
                     if(_GLF_DEAD(false))
                      return;
                     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                      {
                       if(_GLF_DEAD(false))
                        continue;
                       for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                        {
                         do
                          {
                           if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), ! (! (_GLF_WRAPPED_IF_FALSE(false)))))
                            {
                            }
                           else
                            {
                             if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, false || (false)))))))
                              {
                               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                                {
                                 return;
                                }
                               else
                                {
                                }
                               if(_GLF_DEAD(false))
                                {
                                 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                  {
                                  }
                                 else
                                  {
                                   do
                                    {
                                     return;
                                    }
                                   while(_GLF_WRAPPED_LOOP(false));
                                  }
                                }
                              }
                            }
                          }
                         while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bool(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))));
                        }
                      }
                     else
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y)))), bool(bool(! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y)))))))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))
                        break;
                      }
                    }
                  }
                }
               else
                {
                 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))))))
                      return;
                    }
                  }
                 else
                  {
                   atomicStore(checker[virtual_gid], read, 4, 64, 4);
                  }
                 if(_GLF_DEAD(false))
                  break;
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
                    break;
                   if(_GLF_DEAD(false))
                    return;
                   do
                    {
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                      }
                     else
                      {
                       if(_GLF_DEAD(false))
                        continue;
                       do
                        {
                         return;
                        }
                       while(_GLF_WRAPPED_LOOP(false));
                      }
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                  }
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  break;
                 do
                  {
                   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      return;
                    }
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      return;
                     break;
                    }
                   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      {
                       for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), max(int(5), int(5))))) >> _GLF_IDENTITY(int(5), int(5))); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
                        {
                         return;
                        }
                      }
                    }
                   else
                    {
                    }
                   return;
                  }
                 subgroupAll(_GLF_IDENTITY(true, bool(bvec4(_GLF_IDENTITY(true, ! (! (true))), true, true, true))));
                }
              }
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                return;
              }
             if(_GLF_DEAD(false))
              return;
            }
           else
            {
            }
          }
         else
          {
          }
        }
       else
        {
        }
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END
BUFFER checker DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected_checker DATA_TYPE uint32 SIZE 8388096 FILL 1

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 
  BIND BUFFER checker AS storage DESCRIPTOR_SET 0 BINDING 2 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT checker EQ_BUFFER expected_checker
