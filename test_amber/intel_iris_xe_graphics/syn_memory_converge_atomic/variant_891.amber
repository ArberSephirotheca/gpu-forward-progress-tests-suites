#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer WriteVal {
 uint write_val;
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uvec4 GLF_merged4_0_1_8_1_1_11_2_1_17_3_1_13read_valsubgroup_idsubgroup_local_idsubgroup_size;
 uvec4 GLF_merged2_0_3_68_3_1_8GLF_merged3_0_1_8_1_1_17_2_1_12read_valsubgroup_local_idworkgroup_idread_val;
 uvec4 GLF_merged2_0_3_68_3_1_11GLF_merged3_0_1_8_1_1_17_2_1_12read_valsubgroup_local_idworkgroup_idvirtual_gid;
 uvec4 GLF_merged2_0_3_68_3_1_13GLF_merged3_0_1_8_1_1_17_2_1_12read_valsubgroup_local_idworkgroup_idnum_workgroup;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
  }
 uvec3 GLF_merged3_0_1_8_1_1_17_2_1_12read_valsubgroup_local_idworkgroup_id;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 GLF_merged2_0_3_68_3_1_8GLF_merged3_0_1_8_1_1_17_2_1_12read_valsubgroup_local_idworkgroup_idread_val.xyz = GLF_merged3_0_1_8_1_1_17_2_1_12read_valsubgroup_local_idworkgroup_id;
 GLF_merged2_0_3_68_3_1_11GLF_merged3_0_1_8_1_1_17_2_1_12read_valsubgroup_local_idworkgroup_idvirtual_gid.xyz = GLF_merged2_0_3_68_3_1_8GLF_merged3_0_1_8_1_1_17_2_1_12read_valsubgroup_local_idworkgroup_idread_val.xyz;
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    barrier();
   GLF_merged2_0_3_68_3_1_13GLF_merged3_0_1_8_1_1_17_2_1_12read_valsubgroup_local_idworkgroup_idnum_workgroup.xyz = GLF_merged2_0_3_68_3_1_11GLF_merged3_0_1_8_1_1_17_2_1_12read_valsubgroup_local_idworkgroup_idvirtual_gid.xyz;
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), ! (! (! (_GLF_DEAD(false))))))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   do
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (true)))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
        {
         barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
    }
   else
    {
    }
   do
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         barrier();
        }
      }
     if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bool(_GLF_DEAD(false))), _GLF_IDENTITY(bool(bvec4(bool(bool(_GLF_DEAD(false))), true, false, true)), (bool(bvec4(bool(bool(_GLF_DEAD(false))), true, false, true))) && true))))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_DEAD(false))))
        barrier();
       barrier();
      }
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 >> _GLF_IDENTITY(int(7), int(7)))); _injected_loop_counter --)
      {
       barrier();
      }
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
   else
    {
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))))
    barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 >> _GLF_IDENTITY(int(3), int(3)))); _injected_loop_counter --)
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, false, true)))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) || false)))))
        barrier();
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 | 1)); _GLF_IDENTITY(_injected_loop_counter ++, ((1 << _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), 0 | (int(7))))) >> _GLF_IDENTITY(int(7), int(7))) * (_injected_loop_counter ++)))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             barrier();
            }
          }
         if(_GLF_DEAD(false))
          barrier();
        }
       barrier();
      }
    }
   do
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       barrier();
      }
     barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(false || ((injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(_GLF_IDENTITY(! (false || ((injectionSwitch.x > injectionSwitch.y))), bool(bvec4(! (false || ((injectionSwitch.x > injectionSwitch.y))), false, true, false))), true && (! (false || ((injectionSwitch.x > injectionSwitch.y)))))))))));
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 GLF_merged4_0_1_8_1_1_11_2_1_17_3_1_13read_valsubgroup_idsubgroup_local_idsubgroup_size.y = subgroup_id;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && ((injectionSwitch.x > injectionSwitch.y))))))))
  barrier();
 uint subgroup_size = 16;
 GLF_merged4_0_1_8_1_1_11_2_1_17_3_1_13read_valsubgroup_idsubgroup_local_idsubgroup_size.w = subgroup_size;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = (1 | 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
            {
             barrier();
            }
          }
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
    }
   else
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, false)))))
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(937.779)))))))
          barrier();
        }
       for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(_GLF_IDENTITY(int(2), (false ? _GLF_FUZZED(-42005) : int(2))), (_GLF_IDENTITY(int(2), (false ? _GLF_FUZZED(-42005) : int(2)))) << 0))); _GLF_WRAPPED_LOOP(_injected_loop_counter < ((((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5))) << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), clamp(int(5), int(5), int(5))))) >> _GLF_IDENTITY(int(5), int(5)))); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
               if(_GLF_DEAD(false))
                barrier();
              }
             else
              {
               barrier();
               if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, bool(bvec4(false, true, true, true))))))))
                barrier();
              }
            }
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     for(int _injected_loop_counter = _GLF_IDENTITY(int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, float(_GLF_IDENTITY(mat4x2(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), 1.0, tan(0.0), 0.0, 1.0, 0.0, determinant(mat2(determinant(mat4(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0)), 0.0, 1.0, 1.0)), 1.0), (_GLF_IDENTITY(mat4x2(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), 1.0, tan(0.0), 0.0, 1.0, 0.0, determinant(_GLF_IDENTITY(mat2(determinant(mat4(1.0, _GLF_IDENTITY(0.0, max(0.0, _GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(6.3)), bool(false))))), 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0)), 0.0, 1.0, 1.0), transpose(_GLF_IDENTITY(transpose(mat2(determinant(mat4(1.0, _GLF_IDENTITY(0.0, max(0.0, _GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(6.3)), bool(false))))), 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0)), 0.0, 1.0, 1.0)), transpose(transpose(_GLF_IDENTITY(transpose(mat2(determinant(mat4(1.0, _GLF_IDENTITY(0.0, max(0.0, _GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(6.3)), bool(false))))), 0.0, 0.0, _GLF_IDENTITY(0.0, (0.0) * 1.0), _GLF_IDENTITY(1.0, max(1.0, 1.0)), 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0)), 0.0, 1.0, 1.0)), mat2(mat3x2(transpose(mat2(determinant(mat4(1.0, _GLF_IDENTITY(0.0, max(0.0, _GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(6.3)), bool(false))))), 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0)), 0.0, 1.0, 1.0))))))))))), 1.0), (true ? mat4x2(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), 1.0, _GLF_IDENTITY(tan(0.0), (tan(0.0)) * 1.0), 0.0, 1.0, 0.0, determinant(mat2(determinant(mat4(1.0, 0.0, _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-20.64)), float(0.0), bool(true))), 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0)), 0.0, 1.0, 1.0)), 1.0) : _GLF_FUZZED(mat4x2(80.38, -798.871, 9.8, 6.6, -6933.5955, 665.594, 8137.6881, 3.7))))) + mat4x2(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))))), (int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, float(_GLF_IDENTITY(mat4x2(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), 1.0, tan(0.0), 0.0, 1.0, 0.0, determinant(mat2(determinant(mat4(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0)), 0.0, 1.0, 1.0)), 1.0), (_GLF_IDENTITY(mat4x2(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), 1.0, tan(0.0), 0.0, 1.0, 0.0, determinant(mat2(determinant(mat4(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0)), 0.0, 1.0, 1.0)), 1.0), (true ? mat4x2(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), 1.0, tan(0.0), 0.0, 1.0, 0.0, determinant(mat2(determinant(mat4(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0)), 0.0, 1.0, 1.0)), 1.0) : _GLF_FUZZED(mat4x2(80.38, -798.871, 9.8, 6.6, -6933.5955, 665.594, 8137.6881, 3.7))))) + mat4x2(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))))))) ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
        barrier();
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, true && (false))));
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, false, false)))))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             barrier();
            }
           else
            {
            }
          }
         barrier();
        }
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         do
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
         barrier();
        }
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
      barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_GLF_DEAD(false), true), bvec2(bvec3(bvec2(_GLF_DEAD(false), true), true)))), (bool(_GLF_IDENTITY(bvec2(_GLF_DEAD(false), true), bvec2(bvec3(bvec2(_GLF_DEAD(false), true), true))))) && true)))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(1, (1) >> 0)); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              barrier();
            }
          }
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
      }
     else
      {
      }
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), bool(bvec4(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) && true), true, true, false)))))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-1429.4448) : _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0)))) + 0.0))), _GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! ((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))) || false) || false)))
        {
        }
       else
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           do
            {
             if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ! (! (_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ((injectionSwitch.x < injectionSwitch.y)) || false)))), true, true, false)), true && (bool(bvec4(_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ! (! ((_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)))).x < injectionSwitch.y)))), _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, (true) || false)), ! (! (! (_GLF_IDENTITY(true, _GLF_IDENTITY((true), bool(bool((true)))) || false))))))), true, _GLF_IDENTITY(false, (false) || false))))))) && (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, true, true)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(bool(bvec3(false, true, true)), (bool(bvec3(false, true, true))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), ! (! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(bool(bvec3(false, true, true)), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(bool(bvec3(false, true, true)), true, false), bvec3(bvec4(bvec3(bool(bvec3(false, true, true)), true, false), false)))), (bool(_GLF_IDENTITY(bvec3(bool(bvec3(false, true, true)), true, false), bvec3(bvec4(bvec3(bool(bvec3(false, true, true)), true, false), false))))) && true)), (bool(bvec3(false, true, true))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), ! (! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(bool(bvec3(false, true, true)), (bool(bvec3(false, true, true))) && _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(-9962.8061)), vec2(_GLF_FUZZED(-103.822), (injectionSwitch)[1]), bvec2(false, true))).x < injectionSwitch.y))), _GLF_IDENTITY(_GLF_IDENTITY(bool(bool(_GLF_IDENTITY(bool(bvec3(false, true, true)), (bool(bvec3(false, true, true))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(bool(_GLF_IDENTITY(bool(bvec3(false, true, true)), (bool(bvec3(false, true, true))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), false || (bool(bool(_GLF_IDENTITY(bool(bvec3(false, true, true)), (bool(bvec3(false, true, true))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))), (_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(bool(_GLF_IDENTITY(bool(bvec3(false, true, true)), (bool(bvec3(false, true, true))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), false || (bool(bool(_GLF_IDENTITY(bool(bvec3(false, true, true)), (bool(bvec3(false, true, true))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))), bool(bvec2(bool(_GLF_IDENTITY(bool(bool(_GLF_IDENTITY(bool(bvec3(false, true, true)), (bool(bvec3(false, true, true))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), false || (bool(bool(_GLF_IDENTITY(bool(bvec3(false, true, true)), (bool(bvec3(false, true, true))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))), true)))) || false))), (bool(bool(_GLF_IDENTITY(bool(bvec3(false, true, true)), (bool(bvec3(false, true, true))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))) && true))), (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(bool(bvec3(false, true, true)), (bool(bvec3(false, true, true))) && _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(-9962.8061)), vec2(_GLF_FUZZED(-103.822), (injectionSwitch)[1]), bvec2(false, true))).x < injectionSwitch.y))), _GLF_IDENTITY(_GLF_IDENTITY(bool(bool(_GLF_IDENTITY(bool(bvec3(false, true, true)), (bool(bvec3(false, true, true))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(bool(_GLF_IDENTITY(bool(bvec3(false, true, true)), (bool(bvec3(false, true, true))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), false || (bool(bool(_GLF_IDENTITY(bool(bvec3(false, true, true)), (bool(bvec3(false, true, true))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))), (_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(bool(_GLF_IDENTITY(bool(bvec3(false, true, true)), (bool(bvec3(false, true, true))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), false || (bool(bool(_GLF_IDENTITY(bool(bvec3(false, true, true)), (bool(bvec3(false, true, true))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))), bool(bvec2(bool(_GLF_IDENTITY(bool(bool(_GLF_IDENTITY(bool(bvec3(false, true, true)), (bool(bvec3(false, true, true))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), false || (bool(bool(_GLF_IDENTITY(bool(bvec3(false, true, true)), (bool(bvec3(false, true, true))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))), true)))) || false))), (bool(bool(_GLF_IDENTITY(bool(bvec3(false, true, true)), (bool(bvec3(false, true, true))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))) && true))), true && (! (_GLF_IDENTITY(_GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(false, false || (false)), true, true)), (bool(bvec3(false, true, true))) && _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(-9962.8061)), vec2(_GLF_FUZZED(-103.822), (injectionSwitch)[1]), bvec2(false, true))).x < injectionSwitch.y))), _GLF_IDENTITY(_GLF_IDENTITY(bool(bool(_GLF_IDENTITY(bool(bvec3(false, true, true)), (bool(bvec3(false, true, true))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(bool(_GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (false)))))), true, true)), (bool(bvec3(false, true, true))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), false || (bool(bool(_GLF_IDENTITY(bool(bvec3(false, _GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, bool(bvec3(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))))), true)), (bool(bvec3(false, true, true))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))), (_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(bool(_GLF_IDENTITY(bool(bvec3(false, true, true)), (bool(bvec3(false, true, true))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), _GLF_IDENTITY(false || (bool(bool(_GLF_IDENTITY(bool(bvec3(false, true, true)), (bool(bvec3(false, true, true))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), bool(bvec4(false || (bool(bool(_GLF_IDENTITY(bool(bvec3(false, true, true)), (bool(bvec3(false, true, true))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), true, false, true))))), bool(bvec2(bool(_GLF_IDENTITY(bool(bool(_GLF_IDENTITY(bool(bvec3(false, true, true)), (bool(bvec3(false, true, _GLF_IDENTITY(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, bool(bool(true)))))))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), false || (bool(bool(_GLF_IDENTITY(bool(bvec3(false, true, true)), (bool(bvec3(false, true, true))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))), true)))) || false))), (bool(bool(_GLF_IDENTITY(bool(bvec3(false, true, true)), (bool(bvec3(false, true, true))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))) && true)))))) && true))))))))))))))
              barrier();
            }
           while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false))))))));
          }
         else
          {
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
      barrier();
    }
   do
    {
     barrier();
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_DEAD(false))
  barrier();
 uint subgroup_local_id = gl_SubgroupInvocationID;
 do
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(false));
 GLF_merged4_0_1_8_1_1_11_2_1_17_3_1_13read_valsubgroup_idsubgroup_local_idsubgroup_size.z = subgroup_local_id;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       barrier();
      }
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(_GLF_IDENTITY(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bool(bvec2(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false))))))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, false)), (_GLF_IDENTITY(bool(bvec2(false, false)), bool(bvec3(bool(bvec2(false, false)), true, true)))) || false))))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   barrier();
  }
 if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), ! (! (_GLF_WRAPPED_IF_FALSE(false)))), false || (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), ! (! (_GLF_WRAPPED_IF_FALSE(false)))))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * abs(1.0)) > injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, true, false), bvec3(bvec3(bvec3(_GLF_IDENTITY(false, (false) && true), true, false))))))))
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           else
            {
             if(_GLF_DEAD(false))
              barrier();
             do
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   barrier();
                  }
                }
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 barrier();
                }
              }
             while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bool(false)))));
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 barrier();
                }
               if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bool(false))), ! (! (_GLF_IDENTITY(false, bool(bool(false))))))))
                {
                }
               else
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 barrier();
                 if(_GLF_DEAD(false))
                  barrier();
                }
               if(_GLF_DEAD(false))
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   barrier();
                  }
                }
               if(_GLF_DEAD(false))
                barrier();
              }
            }
          }
         for(int _injected_loop_counter = _GLF_IDENTITY(1, (true ? _GLF_IDENTITY(1, (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(59497) : 1))) * 1) : _GLF_FUZZED(int(true)))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             GLF_merged2_0_3_68_3_1_13GLF_merged3_0_1_8_1_1_17_2_1_12read_valsubgroup_local_idworkgroup_idnum_workgroup.xyz.y = _GLF_IDENTITY(GLF_merged4_0_1_8_1_1_11_2_1_17_3_1_13read_valsubgroup_idsubgroup_local_idsubgroup_size.z, ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_8_1_1_11_2_1_17_3_1_13read_valsubgroup_idsubgroup_local_idsubgroup_size.z, (_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), bool(bool((injectionSwitch.x < injectionSwitch.y))))) ? GLF_merged4_0_1_8_1_1_11_2_1_17_3_1_13read_valsubgroup_idsubgroup_local_idsubgroup_size.z : _GLF_FUZZED(write_val))), (false ? _GLF_FUZZED(66145u) : _GLF_IDENTITY(GLF_merged4_0_1_8_1_1_11_2_1_17_3_1_13read_valsubgroup_idsubgroup_local_idsubgroup_size.z, (_GLF_TRUE(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), ! (! (! (true)))))), _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), bool(bool((injectionSwitch.x < injectionSwitch.y))))) ? GLF_merged4_0_1_8_1_1_11_2_1_17_3_1_13read_valsubgroup_idsubgroup_local_idsubgroup_size.z : _GLF_FUZZED(write_val))))))));
            }
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-5447.0106)), float(injectionSwitch.y), bool(true)))))), bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y)))))), true))))
                barrier();
              }
             else
              {
              }
             barrier();
            }
          }
        }
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(bvec4((injectionSwitch.x > injectionSwitch.y), true, true, true)), false || (bool(bvec4((injectionSwitch.x > injectionSwitch.y), true, true, true)))))), ! (! (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(bvec3((_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), injectionSwitch, injectionSwitch)).x > injectionSwitch.y), true, false)), ! (! (bool(bvec3((injectionSwitch.x > injectionSwitch.y), true, false))))))))))))
            barrier();
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
              barrier();
            }
           else
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
             barrier();
             if(_GLF_DEAD(false))
              barrier();
            }
          }
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
    barrier();
   barrier();
  }
 if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))), true, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), false || (_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))), true, _GLF_IDENTITY(false, ! (! (false))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))
  barrier();
 for(int _injected_loop_counter = ((0 & -88086) | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - _GLF_IDENTITY(dot(vec3(0.0, 1.0, 1.0), vec3(1.0, 0.0, 0.0)), dot(vec3(0.0, 1.0, 1.0), vec3(1.0, 0.0, 0.0)))) > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - _GLF_IDENTITY(dot(vec3(0.0, 1.0, 1.0), vec3(1.0, 0.0, 0.0)), dot(vec3(0.0, 1.0, 1.0), vec3(1.0, 0.0, 0.0)))) > injectionSwitch.y), ! (_GLF_IDENTITY(! ((_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - _GLF_IDENTITY(_GLF_IDENTITY(dot(vec3(0.0, 1.0, 1.0), vec3(1.0, 0.0, 0.0)), (_GLF_IDENTITY(dot(vec3(0.0, 1.0, 1.0), vec3(1.0, 0.0, 0.0)), (false ? _GLF_FUZZED(487.528) : dot(vec3(0.0, 1.0, 1.0), vec3(1.0, 0.0, 0.0))))) + tan(0.0)), dot(vec3(0.0, 1.0, 1.0), vec3(1.0, 0.0, 0.0)))) > injectionSwitch.y)), ! (_GLF_IDENTITY(! (! ((_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - _GLF_IDENTITY(dot(vec3(0.0, 1.0, 1.0), vec3(1.0, 0.0, 0.0)), dot(vec3(0.0, 1.0, 1.0), vec3(1.0, 0.0, 0.0)))) > injectionSwitch.y))), bool(bool(! (! ((_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - _GLF_IDENTITY(dot(vec3(0.0, 1.0, 1.0), vec3(1.0, 0.0, 0.0)), dot(vec3(0.0, 1.0, 1.0), vec3(1.0, 0.0, 0.0)))) > injectionSwitch.y))))))))))), bool(bvec3(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - _GLF_IDENTITY(_GLF_IDENTITY(dot(vec3(0.0, 1.0, _GLF_IDENTITY(1.0, (1.0) - 0.0)), vec3(1.0, _GLF_IDENTITY(0.0, max(0.0, _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)))), 0.0)), dot(vec3(0.0, 1.0, 1.0), vec3(1.0, 0.0, 0.0))), (false ? _GLF_FUZZED(-5.0) : _GLF_IDENTITY(_GLF_IDENTITY(dot(vec3(_GLF_IDENTITY(0.0, (0.0) - 0.0), 1.0, _GLF_IDENTITY(1.0, (1.0) - 0.0)), vec3(1.0, _GLF_IDENTITY(0.0, max(0.0, _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)))), 0.0)), dot(vec3(0.0, 1.0, 1.0), vec3(1.0, 0.0, 0.0))), (true ? _GLF_IDENTITY(dot(vec3(0.0, _GLF_IDENTITY(1.0, (1.0) / 1.0), _GLF_IDENTITY(1.0, (1.0) - 0.0)), _GLF_IDENTITY(vec3(1.0, _GLF_IDENTITY(0.0, max(0.0, _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)))), 0.0), (_GLF_IDENTITY(vec3(1.0, _GLF_IDENTITY(0.0, max(0.0, _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)))), 0.0), (false ? _GLF_FUZZED(vec3(413.540, -3.2, 11.91)) : vec3(1.0, _GLF_IDENTITY(0.0, max(0.0, _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)))), 0.0)))) + sqrt(cross(vec3(60.85, -8.2, 832.939), vec3(60.85, -8.2, 832.939))))), dot(vec3(0.0, 1.0, 1.0), vec3(1.0, 0.0, 0.0))) : _GLF_FUZZED(8733.9982)))))) > injectionSwitch.y), true && ((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY((injectionSwitch.x), ((injectionSwitch.x)) / 1.0) - _GLF_IDENTITY(dot(vec3(0.0, 1.0, _GLF_IDENTITY(1.0, (1.0) - 0.0)), vec3(1.0, _GLF_IDENTITY(0.0, max(0.0, _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)))), 0.0)), dot(vec3(0.0, 1.0, 1.0), vec3(1.0, 0.0, 0.0)))), clamp(_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY((injectionSwitch.x), ((injectionSwitch.x)) / 1.0) - _GLF_IDENTITY(dot(vec3(0.0, 1.0, _GLF_IDENTITY(1.0, (1.0) - 0.0)), vec3(1.0, _GLF_IDENTITY(0.0, max(0.0, _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)))), 0.0)), dot(vec3(0.0, 1.0, 1.0), vec3(1.0, 0.0, 0.0)))), _GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY((injectionSwitch.x), ((injectionSwitch.x)) / 1.0) - _GLF_IDENTITY(dot(vec3(0.0, _GLF_IDENTITY(1.0, float(mat4x2(1.0, 0.0, length(vec3(0.0, 0.0, 0.0)), 0.0, 1.0, 0.0, 0.0, 1.0))), _GLF_IDENTITY(1.0, (1.0) - 0.0)), vec3(1.0, _GLF_IDENTITY(0.0, max(0.0, _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)))), 0.0)), dot(vec3(0.0, 1.0, 1.0), vec3(1.0, 0.0, 0.0)))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY((injectionSwitch.x), ((_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0))) / 1.0) - _GLF_IDENTITY(dot(vec3(0.0, 1.0, _GLF_IDENTITY(1.0, (1.0) - 0.0)), vec3(1.0, _GLF_IDENTITY(0.0, max(0.0, _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)))), 0.0)), dot(vec3(0.0, 1.0, 1.0), vec3(1.0, 0.0, 0.0)))), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY((injectionSwitch.x), ((injectionSwitch.x)) / 1.0) - _GLF_IDENTITY(dot(vec3(0.0, 1.0, _GLF_IDENTITY(1.0, (1.0) - 0.0)), vec3(1.0, _GLF_IDENTITY(0.0, max(0.0, _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)))), 0.0)), dot(vec3(0.0, 1.0, 1.0), vec3(1.0, 0.0, 0.0)))), (false ? _GLF_FUZZED(-63.91) : _GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY((injectionSwitch.x), ((_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(-71.76))))))) / 1.0) - _GLF_IDENTITY(dot(vec3(0.0, 1.0, _GLF_IDENTITY(1.0, (1.0) - 0.0)), vec3(1.0, _GLF_IDENTITY(0.0, max(0.0, _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)))), 0.0)), dot(vec3(0.0, 1.0, 1.0), vec3(1.0, _GLF_IDENTITY(0.0, (0.0) + 0.0), 0.0))))))) * 1.0))) > injectionSwitch.y)))), false, false)))) || false)))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       barrier();
      }
     else
      {
      }
    }
  }
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     do
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
     if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
      barrier();
     barrier();
    }
   barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     for(int _injected_loop_counter = _GLF_IDENTITY(1, (_GLF_IDENTITY(1, min(1, 1))) << 0); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        barrier();
       for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 << _GLF_IDENTITY(int(2), int(2)))); _injected_loop_counter --)
        {
         barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
      }
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   GLF_merged2_0_3_68_3_1_13GLF_merged3_0_1_8_1_1_17_2_1_12read_valsubgroup_local_idworkgroup_idnum_workgroup.w = num_workgroup;
  }
 if(_GLF_DEAD(false))
  barrier();
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 uint workgroup_size = _GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize, ~ (~ (gl_WorkGroupSize))), (_GLF_IDENTITY(gl_WorkGroupSize, ~ (~ (gl_WorkGroupSize)))) | (_GLF_IDENTITY(gl_WorkGroupSize, _GLF_IDENTITY(~ (_GLF_IDENTITY(~ (gl_WorkGroupSize), ~ (~ (~ (gl_WorkGroupSize))))), (true ? ~ (_GLF_IDENTITY(~ (gl_WorkGroupSize), (_GLF_IDENTITY(~ (gl_WorkGroupSize), uvec3(0u, 0u, 0u) | (~ (gl_WorkGroupSize)))) / uvec3(1u, 1u, 1u))) : _GLF_FUZZED(uvec3(187210u, 199517u, _GLF_IDENTITY(_GLF_IDENTITY(158542u, (158542u) | (158542u)), uint(uint(_GLF_IDENTITY(158542u, (158542u) | (158542u)))))))))))).x;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(_GLF_IDENTITY(mat4x3(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), determinant(mat3(1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0)), 1.0, _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), 1.0, 0.0, 1.0, 1.0, 1.0, determinant(mat2(1.0, 0.0, 1.0, 1.0)), 1.0), mat3(1.0) * (mat4x3(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), determinant(mat3(1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0)), 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, determinant(mat2(1.0, 0.0, 1.0, 1.0)), 1.0)))), max(vec2(_GLF_IDENTITY(mat4x3(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(vec4(injectionSwitch, 1.0, 1.0), _GLF_IDENTITY(min(vec4(injectionSwitch, 1.0, 1.0), vec4(injectionSwitch, 1.0, 1.0)), max(min(vec4(injectionSwitch, 1.0, 1.0), vec4(injectionSwitch, 1.0, 1.0)), min(vec4(injectionSwitch, 1.0, 1.0), vec4(injectionSwitch, 1.0, 1.0))))))))), (injectionSwitch) * mat2(1.0)), _GLF_IDENTITY(determinant(mat3(1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0)), (determinant(_GLF_IDENTITY(mat3(1.0, 0.0, 0.0, 0.0, 1.0, 0.0, _GLF_IDENTITY(0.0, max(0.0, 0.0)), 1.0, 1.0), (mat3(1.0, 0.0, 0.0, 0.0, 1.0, 0.0, _GLF_IDENTITY(0.0, max(0.0, 0.0)), 1.0, 1.0)) + mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))) / 1.0), 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, _GLF_IDENTITY(determinant(mat2(1.0, 0.0, 1.0, 1.0)), exp(0.0) * (determinant(mat2(1.0, 0.0, 1.0, 1.0)))), 1.0), mat3(1.0) * (mat4x3(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * _GLF_IDENTITY(mat2(1.0), mat2(1.0) * (_GLF_IDENTITY(mat2(1.0), transpose(transpose(mat2(1.0))))))), determinant(mat3(1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0)), 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, determinant(mat2(1.0, 0.0, 1.0, 1.0)), 1.0)))), vec2(_GLF_IDENTITY(mat4x3(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), determinant(_GLF_IDENTITY(mat3(1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0), mat3(_GLF_ONE(1.0, injectionSwitch.y)) * (mat3(1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0)))), 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, determinant(mat2(1.0, 0.0, 1.0, 1.0)), 1.0), mat3(1.0) * (mat4x3(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), determinant(mat3(1.0, 0.0, _GLF_IDENTITY(0.0, clamp(_GLF_IDENTITY(0.0, 0.0 + (0.0)), 0.0, _GLF_IDENTITY(0.0, (0.0) + 0.0))), 0.0, _GLF_IDENTITY(1.0, float(mat2(_GLF_IDENTITY(1.0, max(1.0, 1.0)), 1.0, cos(0.0), 1.0))), 0.0, 0.0, 1.0, 1.0)), 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, determinant(mat2(1.0, 0.0, 1.0, 1.0)), 1.0))))))).y))))
  {
   for(int _injected_loop_counter = (1 & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     barrier();
    }
  }
 uint workgroup_id = _GLF_IDENTITY(gl_WorkGroupID, (_GLF_IDENTITY(gl_WorkGroupID, min(gl_WorkGroupID, _GLF_IDENTITY(gl_WorkGroupID, ~ (~ (gl_WorkGroupID)))))) * uvec3(1u, 1u, 1u)).x;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) && true)))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(1.5), _GLF_FUZZED(3.6)), bvec2(false, false)))) * vec2(1.0, 1.0)).x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch.x : _GLF_FUZZED(55.65))) > injectionSwitch.y)))))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
        barrier();
      }
     for(int _injected_loop_counter = (1 | ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1)))); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, max(0, 0))); _GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) / 1))
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, false || (false))));
       if(_GLF_DEAD(false))
        barrier();
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y))))
      {
       for(int _injected_loop_counter = (0 << _GLF_IDENTITY(_GLF_IDENTITY(int(4), (true ? int(4) : _GLF_FUZZED(64475))), int(4))); _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5)))); _injected_loop_counter ++)
        {
         barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(false, (false) || false), false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), (bool(bvec4(_GLF_IDENTITY(false, (false) || false), false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) && true))))
            barrier();
           barrier();
          }
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           barrier();
          }
        }
      }
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       barrier();
      }
     else
      {
      }
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 GLF_merged2_0_3_68_3_1_13GLF_merged3_0_1_8_1_1_17_2_1_12read_valsubgroup_local_idworkgroup_idnum_workgroup.xyz.z = workgroup_id;
 uint workgroup_base = workgroup_size * _GLF_IDENTITY(GLF_merged2_0_3_68_3_1_13GLF_merged3_0_1_8_1_1_17_2_1_12read_valsubgroup_local_idworkgroup_idnum_workgroup, (GLF_merged2_0_3_68_3_1_13GLF_merged3_0_1_8_1_1_17_2_1_12read_valsubgroup_local_idworkgroup_idnum_workgroup) << (uvec4(0u, 0u, 0u, 0u) >> _GLF_IDENTITY(uvec4(1u), uvec4(1u)))).xyz.z;
 if(_GLF_DEAD(false))
  barrier();
 uint virtual_gid = _GLF_IDENTITY(workgroup_base, clamp(workgroup_base, _GLF_IDENTITY(workgroup_base, (workgroup_base) | (workgroup_base)), workgroup_base)) + GLF_merged4_0_1_8_1_1_11_2_1_17_3_1_13read_valsubgroup_idsubgroup_local_idsubgroup_size.y * GLF_merged4_0_1_8_1_1_11_2_1_17_3_1_13read_valsubgroup_idsubgroup_local_idsubgroup_size.w + _GLF_IDENTITY(GLF_merged2_0_3_68_3_1_13GLF_merged3_0_1_8_1_1_17_2_1_12read_valsubgroup_local_idworkgroup_idnum_workgroup, (GLF_merged2_0_3_68_3_1_13GLF_merged3_0_1_8_1_1_17_2_1_12read_valsubgroup_local_idworkgroup_idnum_workgroup) / uvec4(1u, 1u, 1u, 1u)).xyz.y;
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
  {
   GLF_merged2_0_3_68_3_1_11GLF_merged3_0_1_8_1_1_17_2_1_12read_valsubgroup_local_idworkgroup_idvirtual_gid.w = virtual_gid;
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
  {
   for(int _injected_loop_counter = ((((((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1))) << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5))) << _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), min(int(2), int(2))))) >> _GLF_IDENTITY(int(2), int(2))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     barrier();
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   atomicStore(write_val, uint(_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged2_0_3_68_3_1_11GLF_merged3_0_1_8_1_1_17_2_1_12read_valsubgroup_local_idworkgroup_idvirtual_gid, uvec4(0u, 0u, 0u, 0u) | (GLF_merged2_0_3_68_3_1_11GLF_merged3_0_1_8_1_1_17_2_1_12read_valsubgroup_local_idworkgroup_idvirtual_gid)), (_GLF_IDENTITY(GLF_merged2_0_3_68_3_1_11GLF_merged3_0_1_8_1_1_17_2_1_12read_valsubgroup_local_idworkgroup_idvirtual_gid, (GLF_merged2_0_3_68_3_1_11GLF_merged3_0_1_8_1_1_17_2_1_12read_valsubgroup_local_idworkgroup_idvirtual_gid) << uvec4(0u, 0u, 0u, 0u))) << uvec4(0u, 0u, 0u, 0u)).w), _GLF_IDENTITY(4, ~ (_GLF_IDENTITY(~ (4), _GLF_IDENTITY((true ? ~ (4) : _GLF_FUZZED(_GLF_IDENTITY(-66986, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(-66986, int(ivec3(-66986, 1, 1)))), ~ (~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(-66986, int(_GLF_IDENTITY(ivec3(-66986, 1, 1), max(ivec3(-66986, 1, 1), ivec3(-66986, 1, 1)))))), (~ (_GLF_IDENTITY(-66986, int(ivec3(-66986, 1, 1))))) / 1)))))))), _GLF_IDENTITY(((true ? ~ _GLF_IDENTITY((4), ((4)) | (_GLF_IDENTITY((4), ((4)) - 0))) : _GLF_FUZZED(-66986))), (false ? _GLF_FUZZED(int(-2.9)) : ((true ? ~ _GLF_IDENTITY(_GLF_IDENTITY((4), (_GLF_IDENTITY((4), (true ? (4) : _GLF_FUZZED(32183)))) - 0), ((4)) | (_GLF_IDENTITY((4), ((4)) - 0))) : _GLF_FUZZED(-66986))))) | ((true ? ~ (4) : _GLF_FUZZED(-66986))))))), 64, 0);
  }
 else
  {
  }
 uint read_val = atomicLoad(write_val, 4, 64, 0);
 GLF_merged4_0_1_8_1_1_11_2_1_17_3_1_13read_valsubgroup_idsubgroup_local_idsubgroup_size.x = read_val;
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   GLF_merged2_0_3_68_3_1_8GLF_merged3_0_1_8_1_1_17_2_1_12read_valsubgroup_local_idworkgroup_idread_val.w = GLF_merged4_0_1_8_1_1_11_2_1_17_3_1_13read_valsubgroup_idsubgroup_local_idsubgroup_size.x;
  }
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bvec4(false, true, true, true))))))), ! (! (_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), false || (_GLF_IDENTITY(false, ! (! (false))))))))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       else
        {
        }
       barrier();
      }
    }
   else
    {
    }
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, true && (injectionSwitch.x < injectionSwitch.y))), ((_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, true && (injectionSwitch.x < injectionSwitch.y)))) && true))))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, false)))))
    barrier();
   do
    {
     for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY((0 << _GLF_IDENTITY(int(_GLF_IDENTITY(4, (4) << 0)), _GLF_IDENTITY(int(4), clamp(int(4), _GLF_IDENTITY(_GLF_IDENTITY(int(4), ~ (~ (_GLF_IDENTITY(int(4), (int(4)) | (int(4)))))), min(int(4), int(4))), int(4))))), int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ ((0 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), clamp(int(4), _GLF_IDENTITY(int(4), min(int(4), int(4))), int(4)))))))); _injected_loop_counter --)
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))), ! (! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))))))))))
        barrier();
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         barrier();
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
  {
   do
    {
     GLF_merged2_0_3_68_3_1_13GLF_merged3_0_1_8_1_1_17_2_1_12read_valsubgroup_local_idworkgroup_idnum_workgroup.xyz.x = GLF_merged2_0_3_68_3_1_8GLF_merged3_0_1_8_1_1_17_2_1_12read_valsubgroup_local_idworkgroup_idread_val.w;
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) && true)));
  }
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
    }
   do
    {
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(false))
    barrier();
  }
 for(int _injected_loop_counter = int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(8.6)), float(injectionSwitch.x), bool(true))))); _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(1, int(_GLF_IDENTITY(ivec2(_GLF_IDENTITY(1, max(1, 1)), _GLF_IDENTITY((0 ^ 1), clamp(_GLF_IDENTITY((_GLF_IDENTITY(0 ^ 1, ~ (~ (_GLF_IDENTITY(0 ^ 1, max(_GLF_IDENTITY(0 ^ 1, (true ? 0 ^ 1 : _GLF_FUZZED(_injected_loop_counter))), 0 ^ 1)))))), max((0 ^ 1), _GLF_IDENTITY((0 ^ 1), 0 ^ ((_GLF_IDENTITY(0 ^ _GLF_IDENTITY(1, (1) - 0), (0 ^ _GLF_IDENTITY(1, (1) - 0)) ^ 0)))))), (0 ^ 1), (0 ^ 1)))), max(_GLF_IDENTITY(ivec2(_GLF_IDENTITY(1, _GLF_IDENTITY(max(1, 1), (max(1, 1)) * 1)), _GLF_IDENTITY((0 ^ 1), clamp(_GLF_IDENTITY((0 ^ 1), max((0 ^ 1), _GLF_IDENTITY((0 ^ 1), 0 ^ ((0 ^ 1))))), _GLF_IDENTITY((0 ^ 1), max((_GLF_IDENTITY(0, (_GLF_IDENTITY(0, 0 ^ (0))) / 1) ^ 1), (0 ^ 1))), (_GLF_IDENTITY(0 ^ 1, (0 ^ 1) | 0))))), clamp(ivec2(_GLF_IDENTITY(1, max(1, 1)), _GLF_IDENTITY((0 ^ 1), clamp(_GLF_IDENTITY((0 ^ 1), max((0 ^ 1), _GLF_IDENTITY((0 ^ 1), 0 ^ _GLF_IDENTITY(((0 ^ _GLF_IDENTITY(1, (1) << 0))), max(_GLF_IDENTITY(((0 ^ _GLF_IDENTITY(1, (1) << 0))), (((0 ^ _GLF_IDENTITY(1, (1) << 0)))) | (1 ^ 1)), ((0 ^ _GLF_IDENTITY(1, (1) << 0)))))))), (_GLF_IDENTITY(0 ^ 1, (0 ^ 1) | (_GLF_IDENTITY(0 ^ 1, _GLF_IDENTITY((0 ^ 1) * 1, (_GLF_IDENTITY((0 ^ 1) * 1, max((0 ^ 1) * 1, (0 ^ 1) * 1))) | (0 << _GLF_IDENTITY(int(4), int(4)))))))), (0 ^ 1)))), ivec2(_GLF_IDENTITY(_GLF_IDENTITY(1, (1) | (1)), max(1, 1)), _GLF_IDENTITY((0 ^ 1), clamp(_GLF_IDENTITY((0 ^ 1), _GLF_IDENTITY(max((0 ^ _GLF_IDENTITY(1, ~ (~ (_GLF_IDENTITY(1, (1) | 0))))), _GLF_IDENTITY((0 ^ 1), 0 ^ ((0 ^ 1)))), int(_GLF_ONE(1.0, injectionSwitch.y)) * (_GLF_IDENTITY(max((0 ^ _GLF_IDENTITY(1, ~ (~ (_GLF_IDENTITY(1, _GLF_IDENTITY((1), (_GLF_IDENTITY((1), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-11624) : (1)))) ^ 0) | 0))))), _GLF_IDENTITY((0 ^ 1), 0 ^ ((0 ^ 1)))), (max((0 ^ _GLF_IDENTITY(1, ~ (~ (_GLF_IDENTITY(1, (1) | 0))))), _GLF_IDENTITY((0 ^ 1), 0 ^ ((0 ^ 1))))) ^ 0)))), (0 ^ 1), (0 ^ 1)))), _GLF_IDENTITY(ivec2(_GLF_IDENTITY(_GLF_IDENTITY(1, max(1, 1)), (_GLF_IDENTITY(1, max(1, 1))) ^ 0), _GLF_IDENTITY((0 ^ 1), clamp(_GLF_IDENTITY((0 ^ 1), max((0 ^ 1), _GLF_IDENTITY((0 ^ 1), 0 ^ (_GLF_IDENTITY((_GLF_IDENTITY(0 ^ 1, min(0 ^ 1, _GLF_IDENTITY(0 ^ 1, max(0 ^ 1, _GLF_IDENTITY(0 ^ 1, max(0 ^ 1, 0 ^ _GLF_IDENTITY(1, (1) | 0)))))))), max((0 ^ 1), _GLF_IDENTITY((0 ^ 1), ((0 ^ 1)) * (1 & 1)))))))), (_GLF_IDENTITY(0 ^ 1, (0 ^ 1) ^ 0)), _GLF_IDENTITY((0 ^ 1), _GLF_IDENTITY((0 >> _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), 1 * (int(4))))) + ((0 ^ 1)), (_GLF_IDENTITY((0 >> _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), 1 * (int(4))))) + ((0 ^ 1)), int(int((0 >> _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), 1 * (int(4))))) + ((0 ^ 1)))))) | ((0 >> _GLF_IDENTITY(int(_GLF_IDENTITY(4, min(4, 4))), _GLF_IDENTITY(int(4), 1 * (int(_GLF_IDENTITY(4, (true ? 4 : _GLF_FUZZED(abs(ivec4(75608, -70569, -75860, -2246).b))))))))) + ((0 ^ 1)))))))), (ivec2(_GLF_IDENTITY(1, max(_GLF_IDENTITY(1, (1) / 1), 1)), _GLF_IDENTITY((0 ^ 1), clamp(_GLF_IDENTITY((0 ^ 1), max((0 ^ 1), _GLF_IDENTITY((0 ^ 1), _GLF_IDENTITY(0, clamp(0, 0, 0)) ^ ((0 ^ 1))))), (0 ^ 1), _GLF_IDENTITY(_GLF_IDENTITY((0 ^ 1), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? (0 ^ 1) : _GLF_FUZZED(24384))), (0 >> _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), 1 * (int(4))))) + ((0 ^ 1))))))) | (ivec2(_GLF_IDENTITY(1, max(1, 1)), _GLF_IDENTITY(_GLF_IDENTITY((0 ^ 1), clamp(_GLF_IDENTITY((0 ^ 1), max((0 ^ 1), _GLF_IDENTITY((0 ^ 1), 0 ^ ((0 ^ 1))))), (0 ^ 1), _GLF_IDENTITY((0 ^ 1), (0 >> _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), 1 * (int(4))))) + ((0 ^ 1))))), (_GLF_IDENTITY((0 ^ 1), clamp(_GLF_IDENTITY((0 ^ 1), max((0 ^ 1), _GLF_IDENTITY((0 ^ 1), 0 ^ ((0 ^ 1))))), (0 ^ 1), _GLF_IDENTITY((0 ^ 1), _GLF_IDENTITY((_GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, (0) / 1))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), 1 * (int(4)))), clamp(_GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), 1 * (int(4)))), _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), 1 * (int(4)))), _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), 1 * (int(4))))))) + ((0 ^ 1)), (_GLF_IDENTITY(_GLF_IDENTITY((0 >> _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), 1 * (int(4))))) + ((0 ^ 1)), int(int((_GLF_IDENTITY(0 >> _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), 1 * (int(4)))), (0 >> _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), 1 * (int(4))))) - 0)) + ((0 ^ 1))))), 0 | (_GLF_IDENTITY(_GLF_IDENTITY((0 >> _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), 1 * (int(4))))) + ((0 ^ 1)), int(int((_GLF_IDENTITY(0 >> _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), 1 * (int(4)))), (0 >> _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), 1 * (int(4))))) - 0)) + ((0 ^ 1))))), max(_GLF_IDENTITY(_GLF_IDENTITY((0 >> _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), 1 * (int(4))))) + ((0 ^ 1)), int(int((_GLF_IDENTITY(0 >> _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), 1 * (int(4)))), (0 >> _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), 1 * (int(4))))) - 0)) + ((0 ^ 1))))), ~ (~ (_GLF_IDENTITY((0 >> _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), 1 * (int(4))))) + ((0 ^ 1)), int(int((_GLF_IDENTITY(0 >> _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), 1 * (int(4)))), (0 >> _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), 1 * (int(4))))) - 0)) + ((0 ^ 1)))))))), _GLF_IDENTITY((0 >> _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), 1 * (int(4))))) + ((0 ^ 1)), int(int((_GLF_IDENTITY(0 >> _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), 1 * (int(4)))), (0 >> _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), 1 * (int(4))))) - 0)) + ((0 ^ 1)))))))))) / int(_GLF_ONE(1.0, injectionSwitch.y))))))) / 1)))))), ivec2(_GLF_IDENTITY(1, max(1, 1)), _GLF_IDENTITY((0 ^ 1), clamp(_GLF_IDENTITY((0 ^ 1), max(_GLF_IDENTITY((0 ^ 1), ((0 ^ 1)) ^ 0), _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(0, (0) >> 0) ^ _GLF_IDENTITY(1, _GLF_IDENTITY(int(_GLF_IDENTITY(ivec3(1, 0, 1), (ivec3(1, 0, 1)) << ivec3(0, 0, 0))), (int(_GLF_IDENTITY(ivec3(1, 0, 1), (ivec3(1, 0, 1)) << ivec3(0, 0, 0)))) + 0))), 0 ^ _GLF_IDENTITY(((_GLF_IDENTITY(0 ^ 1, _GLF_IDENTITY(int(_GLF_IDENTITY(int(0 ^ 1), (true ? int(0 ^ 1) : _GLF_FUZZED(86876)))), (true ? int(_GLF_IDENTITY(int(0 ^ 1), (true ? int(0 ^ 1) : _GLF_FUZZED(86876)))) : _GLF_FUZZED(_injected_loop_counter)))))), min(((0 ^ 1)), ((0 ^ 1))))), _GLF_IDENTITY(int(_GLF_IDENTITY(ivec2(_GLF_IDENTITY((0 ^ _GLF_IDENTITY(1, _GLF_IDENTITY(int(_GLF_IDENTITY(ivec3(1, 0, 1), (ivec3(1, 0, 1)) << ivec3(0, 0, 0))), (int(_GLF_IDENTITY(ivec3(1, 0, 1), (ivec3(1, 0, 1)) << ivec3(0, 0, 0)))) + 0))), 0 ^ _GLF_IDENTITY(((0 ^ 1)), min(((0 ^ 1)), ((0 ^ 1))))), 1), ~ (~ (ivec2(_GLF_IDENTITY((0 ^ _GLF_IDENTITY(1, _GLF_IDENTITY(int(_GLF_IDENTITY(ivec3(1, 0, 1), (ivec3(1, 0, 1)) << ivec3(0, 0, _GLF_IDENTITY(0, (0) | (0))))), (int(_GLF_IDENTITY(ivec3(1, 0, 1), (ivec3(1, 0, 1)) << ivec3(0, 0, 0)))) + 0))), 0 ^ _GLF_IDENTITY(((0 ^ 1)), min(((0 ^ 1)), ((0 ^ 1))))), 1))))), (int(_GLF_IDENTITY(ivec2(_GLF_IDENTITY((0 ^ _GLF_IDENTITY(1, _GLF_IDENTITY(int(_GLF_IDENTITY(ivec3(1, 0, 1), (ivec3(1, 0, 1)) << ivec3(0, 0, 0))), (int(_GLF_IDENTITY(ivec3(1, 0, 1), (ivec3(1, 0, 1)) << ivec3(0, _GLF_IDENTITY(0, int(ivec4(0, 1, 0, 1))), 0)))) + 0))), 0 ^ _GLF_IDENTITY(_GLF_IDENTITY(((0 ^ 1)), min(((0 ^ 1)), ((0 ^ 1)))), 0 | (_GLF_IDENTITY(((0 ^ 1)), min(((0 ^ 1)), ((0 ^ 1))))))), 1), ~ (~ (ivec2(_GLF_IDENTITY((0 ^ _GLF_IDENTITY(1, _GLF_IDENTITY(int(_GLF_IDENTITY(ivec3(1, 0, 1), (ivec3(1, 0, 1)) << ivec3(0, 0, 0))), (int(_GLF_IDENTITY(ivec3(1, 0, 1), _GLF_IDENTITY((ivec3(1, 0, 1)), ((ivec3(1, 0, 1))) / ivec3(1, 1, 1)) << ivec3(0, 0, 0)))) + 0))), _GLF_IDENTITY(0 ^ _GLF_IDENTITY(((0 ^ 1)), min(((0 ^ 1)), ((0 ^ 1)))), (_GLF_IDENTITY(0 ^ _GLF_IDENTITY(((0 ^ 1)), min(((0 ^ 1)), ((0 ^ 1)))), clamp(0 ^ _GLF_IDENTITY(((0 ^ 1)), min(((0 ^ 1)), ((0 ^ 1)))), 0 ^ _GLF_IDENTITY(((0 ^ 1)), min(((0 ^ 1)), ((0 ^ 1)))), 0 ^ _GLF_IDENTITY(((0 ^ 1)), min(((0 ^ 1)), ((0 ^ 1))))))) | (0 ^ _GLF_IDENTITY(((0 ^ 1)), min(((0 ^ 1)), ((0 ^ 1))))))), 1)))))) | (int(_GLF_IDENTITY(ivec2(_GLF_IDENTITY((0 ^ _GLF_IDENTITY(1, _GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_IDENTITY(ivec3(1, 0, 1), (ivec3(1, 0, 1)) << ivec3(0, 0, 0)), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_IDENTITY(ivec3(1, 0, 1), (ivec3(1, 0, 1)) << ivec3(0, 0, 0)), min(_GLF_IDENTITY(_GLF_IDENTITY(ivec3(1, 0, 1), (ivec3(1, 0, 1)) << ivec3(0, 0, 0)), clamp(_GLF_IDENTITY(ivec3(1, 0, 1), (ivec3(1, 0, 1)) << ivec3(0, 0, 0)), _GLF_IDENTITY(ivec3(1, 0, 1), (ivec3(1, 0, 1)) << ivec3(0, 0, 0)), _GLF_IDENTITY(ivec3(1, 0, 1), (ivec3(1, 0, 1)) << ivec3(0, 0, 0)))), _GLF_IDENTITY(_GLF_IDENTITY(ivec3(1, 0, 1), (ivec3(1, 0, 1)) << ivec3(0, 0, 0)), ivec3(0, 0, 0) ^ (_GLF_IDENTITY(ivec3(1, 0, 1), (ivec3(1, 0, 1)) << ivec3(0, 0, 0))))))), (_GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_IDENTITY(ivec3(1, 0, 1), (ivec3(1, 0, 1)) << ivec3(0, 0, 0)), min(_GLF_IDENTITY(_GLF_IDENTITY(ivec3(1, 0, 1), (ivec3(1, 0, 1)) << ivec3(0, 0, 0)), clamp(_GLF_IDENTITY(ivec3(1, 0, 1), (ivec3(1, 0, 1)) << ivec3(0, 0, 0)), _GLF_IDENTITY(ivec3(1, 0, 1), (ivec3(1, 0, 1)) << ivec3(0, 0, 0)), _GLF_IDENTITY(ivec3(1, 0, 1), (ivec3(1, 0, 1)) << ivec3(0, 0, 0)))), _GLF_IDENTITY(_GLF_IDENTITY(ivec3(1, 0, 1), (ivec3(1, 0, 1)) << ivec3(0, 0, 0)), ivec3(0, 0, 0) ^ (_GLF_IDENTITY(ivec3(1, 0, 1), (ivec3(1, 0, 1)) << ivec3(0, 0, 0))))))), min(~ (_GLF_IDENTITY(_GLF_IDENTITY(ivec3(1, 0, 1), (ivec3(1, 0, 1)) << ivec3(0, 0, 0)), min(_GLF_IDENTITY(_GLF_IDENTITY(ivec3(1, 0, 1), (ivec3(1, 0, 1)) << ivec3(0, 0, 0)), clamp(_GLF_IDENTITY(ivec3(1, 0, 1), (ivec3(1, 0, 1)) << ivec3(0, 0, 0)), _GLF_IDENTITY(ivec3(1, 0, 1), (ivec3(1, 0, 1)) << ivec3(0, 0, 0)), _GLF_IDENTITY(ivec3(1, 0, 1), (ivec3(1, 0, 1)) << ivec3(0, 0, 0)))), _GLF_IDENTITY(_GLF_IDENTITY(ivec3(1, 0, 1), (ivec3(1, 0, 1)) << ivec3(0, 0, 0)), ivec3(0, 0, 0) ^ (_GLF_IDENTITY(ivec3(1, 0, 1), (ivec3(1, 0, 1)) << ivec3(0, 0, 0))))))), ~ (_GLF_IDENTITY(_GLF_IDENTITY(ivec3(1, 0, 1), (ivec3(1, 0, 1)) << ivec3(0, 0, 0)), min(_GLF_IDENTITY(_GLF_IDENTITY(ivec3(1, 0, 1), (ivec3(1, 0, 1)) << ivec3(0, 0, 0)), clamp(_GLF_IDENTITY(ivec3(1, 0, 1), (ivec3(1, 0, 1)) << ivec3(0, 0, 0)), _GLF_IDENTITY(ivec3(1, 0, 1), (ivec3(1, 0, 1)) << ivec3(0, 0, 0)), _GLF_IDENTITY(ivec3(1, 0, 1), (ivec3(1, 0, 1)) << ivec3(0, 0, 0)))), _GLF_IDENTITY(_GLF_IDENTITY(ivec3(1, 0, 1), (ivec3(1, 0, 1)) << ivec3(0, 0, 0)), ivec3(0, 0, 0) ^ (_GLF_IDENTITY(ivec3(1, 0, 1), (ivec3(1, 0, 1)) << ivec3(0, 0, 0)))))))))) << ivec3(0, 0, 0))))), (_GLF_IDENTITY(int(_GLF_IDENTITY(ivec3(1, 0, 1), (ivec3(1, 0, 1)) << ivec3(0, 0, 0))), (int(_GLF_IDENTITY(ivec3(1, 0, 1), (ivec3(1, 0, 1)) << ivec3(0, 0, 0)))) >> 0)) + 0))), 0 ^ _GLF_IDENTITY(((0 ^ 1)), min(((0 ^ 1)), ((0 ^ 1))))), 1), ~ (~ (ivec2(_GLF_IDENTITY((0 ^ _GLF_IDENTITY(1, _GLF_IDENTITY(int(_GLF_IDENTITY(ivec3(1, 0, 1), (ivec3(1, 0, 1)) << ivec3(0, 0, 0))), (int(_GLF_IDENTITY(ivec3(1, 0, 1), (ivec3(1, 0, 1)) << ivec3(0, 0, 0)))) + 0))), 0 ^ _GLF_IDENTITY(((0 ^ 1)), min(((0 ^ 1)), ((0 ^ 1))))), 1)))))))))), (0 ^ 1), (0 ^ 1))))))))); _injected_loop_counter ++)
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), 0 ^ (int(_GLF_ZERO(0.0, injectionSwitch.x))))); _injected_loop_counter --)
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != 1, ! (_GLF_IDENTITY(! (_injected_loop_counter != 1), (! (_injected_loop_counter != 1)) || false)))); _injected_loop_counter ++)
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(mat4(injectionSwitch.x, 0.0, sqrt(1.0), 0.0, 1.0, _GLF_IDENTITY(0.0, max(0.0, 0.0)), 1.0, 0.0, _GLF_IDENTITY(cos(0.0), (cos(0.0)) - 0.0), _GLF_ONE(1.0, injectionSwitch.y), 1.0, _GLF_IDENTITY(1.0, max(1.0, 1.0)), 0.0, 1.0, 0.0, 1.0), (false ? _GLF_FUZZED(mat4(404.162, 3.7, 5.9, -714.475, 8038.3528, -0.9, -6.7, -89.13, 378.449, 3066.6247, 4577.1945, 914.673, 5.6, -5.7, 8569.4573, -619.839)) : mat4(injectionSwitch.x, 0.0, sqrt(1.0), 0.0, 1.0, _GLF_IDENTITY(0.0, max(0.0, 0.0)), 1.0, 0.0, cos(0.0), _GLF_ONE(1.0, injectionSwitch.y), 1.0, 1.0, 0.0, 1.0, 0.0, 1.0))))) > injectionSwitch.y))))
          {
           for(int _injected_loop_counter = _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), min(int(_GLF_ZERO(0.0, injectionSwitch.x)), int(_GLF_ZERO(0.0, injectionSwitch.x)))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
            {
             barrier();
            }
          }
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       _GLF_IDENTITY(_GLF_IDENTITY(buf[GLF_merged2_0_3_68_3_1_11GLF_merged3_0_1_8_1_1_17_2_1_12read_valsubgroup_local_idworkgroup_idvirtual_gid.w] = uint(subgroupAllEqual(GLF_merged2_0_3_68_3_1_13GLF_merged3_0_1_8_1_1_17_2_1_12read_valsubgroup_local_idworkgroup_idnum_workgroup.xyz.x)), ~ _GLF_IDENTITY((~ (_GLF_IDENTITY(buf[GLF_merged2_0_3_68_3_1_11GLF_merged3_0_1_8_1_1_17_2_1_12read_valsubgroup_local_idworkgroup_idvirtual_gid.w] = uint(subgroupAllEqual(GLF_merged2_0_3_68_3_1_13GLF_merged3_0_1_8_1_1_17_2_1_12read_valsubgroup_local_idworkgroup_idnum_workgroup.xyz.x)), uint(_GLF_ZERO(0.0, injectionSwitch.x)) | (buf[GLF_merged2_0_3_68_3_1_11GLF_merged3_0_1_8_1_1_17_2_1_12read_valsubgroup_local_idworkgroup_idvirtual_gid.w] = uint(subgroupAllEqual(GLF_merged2_0_3_68_3_1_13GLF_merged3_0_1_8_1_1_17_2_1_12read_valsubgroup_local_idworkgroup_idnum_workgroup.xyz.x)))))), 0u + ((~ (_GLF_IDENTITY(buf[GLF_merged2_0_3_68_3_1_11GLF_merged3_0_1_8_1_1_17_2_1_12read_valsubgroup_local_idworkgroup_idvirtual_gid.w] = uint(subgroupAllEqual(GLF_merged2_0_3_68_3_1_13GLF_merged3_0_1_8_1_1_17_2_1_12read_valsubgroup_local_idworkgroup_idnum_workgroup.xyz.x)), uint(_GLF_ZERO(0.0, injectionSwitch.x)) | (buf[GLF_merged2_0_3_68_3_1_11GLF_merged3_0_1_8_1_1_17_2_1_12read_valsubgroup_local_idworkgroup_idvirtual_gid.w] = uint(subgroupAllEqual(GLF_merged2_0_3_68_3_1_13GLF_merged3_0_1_8_1_1_17_2_1_12read_valsubgroup_local_idworkgroup_idnum_workgroup.xyz.x))))))))), 0u | (_GLF_IDENTITY(buf[GLF_merged2_0_3_68_3_1_11GLF_merged3_0_1_8_1_1_17_2_1_12read_valsubgroup_local_idworkgroup_idvirtual_gid.w] = uint(subgroupAllEqual(GLF_merged2_0_3_68_3_1_13GLF_merged3_0_1_8_1_1_17_2_1_12read_valsubgroup_local_idworkgroup_idnum_workgroup.xyz.x)), ~ (~ (_GLF_IDENTITY(buf[GLF_merged2_0_3_68_3_1_11GLF_merged3_0_1_8_1_1_17_2_1_12read_valsubgroup_local_idworkgroup_idvirtual_gid.w] = uint(subgroupAllEqual(_GLF_IDENTITY(GLF_merged2_0_3_68_3_1_13GLF_merged3_0_1_8_1_1_17_2_1_12read_valsubgroup_local_idworkgroup_idnum_workgroup.xyz, (GLF_merged2_0_3_68_3_1_13GLF_merged3_0_1_8_1_1_17_2_1_12read_valsubgroup_local_idworkgroup_idnum_workgroup.xyz) | uvec3(0u, 0u, 0u)).x)), uint(_GLF_ZERO(_GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(-4.5) : 0.0)), injectionSwitch.x)) | (buf[GLF_merged2_0_3_68_3_1_11GLF_merged3_0_1_8_1_1_17_2_1_12read_valsubgroup_local_idworkgroup_idvirtual_gid.w] = uint(subgroupAllEqual(_GLF_IDENTITY(GLF_merged2_0_3_68_3_1_13GLF_merged3_0_1_8_1_1_17_2_1_12read_valsubgroup_local_idworkgroup_idnum_workgroup.xyz, uvec3(0u, 0u, 0u) | (GLF_merged2_0_3_68_3_1_13GLF_merged3_0_1_8_1_1_17_2_1_12read_valsubgroup_local_idworkgroup_idnum_workgroup.xyz)).x)))))))));
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     do
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       do
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
   else
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
      barrier();
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     barrier();
    }
   else
    {
    }
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
