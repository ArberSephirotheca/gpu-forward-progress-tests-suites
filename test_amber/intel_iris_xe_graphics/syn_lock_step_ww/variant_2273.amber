#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)))).x > _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(true, (true) && true) ? injectionSwitch : _GLF_FUZZED(vec2(6558.4122, -4250.6593)))).y))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       barrier();
      }
     else
      {
      }
    }
   do
    {
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), ! (! (bool(injectionSwitch.x > injectionSwitch.y)))), true), bvec2(bvec2(bvec2(_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), ! (! (_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), true && (bool(injectionSwitch.x > injectionSwitch.y)))))), true)))))))))), ! (! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).y, bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), ! (! (bool(injectionSwitch.x > injectionSwitch.y)))), _GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, true && (true)))))), bvec2(bvec2(bvec2(_GLF_IDENTITY(bool(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))) && true)), ! (! (bool(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))))).x > injectionSwitch.y)))), true)))))))))))))))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
        }
      }
    }
   for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), max(int(7), int(7))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (_GLF_IDENTITY((_GLF_IDENTITY((((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2))) << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4)), (((_GLF_IDENTITY((1 << _GLF_IDENTITY(int(2), int(2))), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY((1 << _GLF_IDENTITY(int(2), int(2))), ((1 << _GLF_IDENTITY(int(2), int(2)))) - 0) : _GLF_FUZZED(71395))) >> _GLF_IDENTITY(int(2), int(2))) << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4))) | (_GLF_IDENTITY((((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(2), int(2)), (_GLF_IDENTITY(int(2), int(2))) << 0)) >> _GLF_IDENTITY(_GLF_IDENTITY(int(2), ~ (_GLF_IDENTITY(~ (int(2)), max(~ (int(2)), ~ (int(2)))))), int(2))) << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4)), clamp(((_GLF_IDENTITY((1 << _GLF_IDENTITY(int(2), int(2))), ((1 << _GLF_IDENTITY(int(2), int(2)))) | ((1 << _GLF_IDENTITY(int(2), int(2))))) >> _GLF_IDENTITY(int(2), int(2))) << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4)), (((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2))) << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4)), _GLF_IDENTITY((((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2))) << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4)), 0 + ((((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2))) << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4))))))))), (_GLF_IDENTITY((_GLF_IDENTITY((((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2))) << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4)), (_GLF_IDENTITY((_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2))) << _GLF_IDENTITY(int(4), int(4)), clamp(((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2))) << _GLF_IDENTITY(int(4), int(4)), ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2))) << _GLF_IDENTITY(int(4), int(4)), _GLF_IDENTITY(((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2))) << _GLF_IDENTITY(int(4), int(4)), (true ? ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2))) << _GLF_IDENTITY(int(4), int(4)) : _GLF_FUZZED(-26882)))))), max((_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2))) << _GLF_IDENTITY(int(4), int(4)), clamp(((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2))) << _GLF_IDENTITY(int(4), int(4)), ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2))) << _GLF_IDENTITY(int(4), int(4)), _GLF_IDENTITY(((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2))) << _GLF_IDENTITY(int(4), int(4)), (true ? ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2))) << _GLF_IDENTITY(int(4), int(4)) : _GLF_FUZZED(-26882)))))), (_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2))) << _GLF_IDENTITY(int(4), int(4)), clamp(((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2))) << _GLF_IDENTITY(int(4), int(4)), ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2))) << _GLF_IDENTITY(int(4), int(4)), _GLF_IDENTITY(((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2))) << _GLF_IDENTITY(int(4), int(4)), (true ? ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2))) << _GLF_IDENTITY(int(4), int(4)) : _GLF_FUZZED(-26882)))))))) >> _GLF_IDENTITY(int(4), int(4))) | (_GLF_IDENTITY(((_GLF_IDENTITY((1 << _GLF_IDENTITY(int(2), int(2))), ((1 << _GLF_IDENTITY(int(2), int(2)))) - ((0 & -62911) >> _GLF_IDENTITY(int(1), int(1)))) >> _GLF_IDENTITY(int(2), int(2))) << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4)), clamp((_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2))), (((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2)))) - 0) << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4)), (((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2))) << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4)), _GLF_IDENTITY((((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2))) << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (int(4)) << 0))) >> _GLF_IDENTITY(int(4), int(4)), 0 + ((((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(2), int(2)), int(ivec2(1 << _GLF_IDENTITY(int(2), int(2)), 0)))) >> _GLF_IDENTITY(int(2), int(2))) << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4))))))))), 0 | ((_GLF_IDENTITY((((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2))) << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4)), ((((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2))) << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4))) | (_GLF_IDENTITY((((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2))) << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4)), clamp((((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2))) << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), 0 | (_GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), ~ (~ (_GLF_IDENTITY(int(4), int(4))))))), (((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(2), int(2)), (1 << _GLF_IDENTITY(int(2), int(2))) | (1 << _GLF_IDENTITY(int(2), int(2))))) >> _GLF_IDENTITY(int(2), int(2))) << _GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), min(_GLF_IDENTITY(int(4), int(4)), _GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), 0 + (_GLF_IDENTITY(int(4), int(4))))))) >> _GLF_IDENTITY(int(4), int(4)), _GLF_IDENTITY((((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2))) << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4)), 0 + ((((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2))) << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4)))))))))))) + 0) | _GLF_IDENTITY(((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), max(int(2), int(2)))), (_GLF_IDENTITY(_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), max(int(2), _GLF_IDENTITY(int(2), 1 * (int(2)))))), _GLF_IDENTITY(int(ivec4(_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), max(int(2), int(2)))), 0, 1, 1)), (int(ivec4(_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), max(int(2), int(2)))), 0, 1, 1))) | (int(ivec4(_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), max(int(2), int(2)))), 0, 1, 1)))))) >> 0)) >> _GLF_IDENTITY(int(2), int(2))), (((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), max(int(2), int(2)))), (_GLF_IDENTITY(_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), max(int(2), _GLF_IDENTITY(int(2), 1 * (int(2)))))), _GLF_IDENTITY(int(ivec4(_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), max(int(2), int(2)))), 0, 1, 1)), (int(ivec4(_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), max(int(2), int(2)))), 0, 1, 1))) | (int(ivec4(_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), max(int(2), int(2)))), 0, 1, 1)))))) >> 0)) >> _GLF_IDENTITY(int(2), int(2)))) | (((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), max(int(2), int(2)))), (_GLF_IDENTITY(_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), max(int(2), _GLF_IDENTITY(int(2), 1 * (int(2)))))), _GLF_IDENTITY(int(ivec4(_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), max(int(2), int(2)))), 0, 1, 1)), (int(ivec4(_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), max(int(2), int(2)))), 0, 1, 1))) | (int(ivec4(_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), max(int(2), int(2)))), 0, 1, 1)))))) >> 0)) >> _GLF_IDENTITY(int(2), int(2))))))); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      {
       if(_GLF_DEAD(false))
        barrier();
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 & 1) & int(_GLF_ONE(1.0, injectionSwitch.y)))); _injected_loop_counter ++)
        {
         barrier();
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0) > injectionSwitch.y))))
        barrier();
       do
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             barrier();
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
       barrier();
      }
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       do
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(injectionSwitch.x > injectionSwitch.y, true, true, true)))))))
          barrier();
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), false || (_GLF_IDENTITY(! (false), (_GLF_IDENTITY(! (false), bool(bvec3(! (false), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))) || false)))))))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 else
  {
  }
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
  }
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(1, max(_GLF_IDENTITY(1, (1) | (1)), 1))); _injected_loop_counter ++)
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
        barrier();
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
      barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, ! (! (false)))))))
  barrier();
 if(_GLF_DEAD(false))
  {
   do
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], mix(float(injectionSwitch[1]), float(_GLF_FUZZED(3.3)), bool(false))))).y))));
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))), (_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true, true), bvec3(bvec3(bvec3(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))), (_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true, true)))))))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         barrier();
        }
      }
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, 1.0 * (injectionSwitch.y))))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
        barrier();
      }
     else
      {
      }
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(3, min(3, 3))), int(3)))); _injected_loop_counter ++)
      {
       do
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), _GLF_IDENTITY((! (_GLF_DEAD(false))), ! (_GLF_IDENTITY(! ((! (_GLF_DEAD(false)))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (! ((! (_GLF_DEAD(false)))))))) || false))))
          barrier();
         barrier();
         for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (_GLF_IDENTITY(int(6), (int(6)) | (int(6)))) / _GLF_IDENTITY(1, 0 | (1))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, 0 | (0))); _injected_loop_counter --)
          {
           if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))), true && ((injectionSwitch.x > injectionSwitch.y))), true && ((injectionSwitch.x > injectionSwitch.y))))))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               barrier();
              }
             else
              {
              }
            }
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (! (false)))))))
              {
               if(_GLF_DEAD(false))
                barrier();
               do
                {
                 barrier();
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             if(_GLF_DEAD(false))
              barrier();
            }
           else
            {
            }
           if(_GLF_DEAD(false))
            barrier();
          }
         do
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
            barrier();
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
            {
             if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), ! _GLF_IDENTITY((! (_GLF_DEAD(false))), ((! (_GLF_DEAD(false)))) || false))) && _GLF_IDENTITY(true, ! (! (true)))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false)))) && true)), (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false)))) && true), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false)))) && true)))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))) || _GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), true && (! (! (false)))))))
              {
               if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, false || (true))))
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   barrier();
                  }
                 barrier();
                 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
                  barrier();
                }
               else
                {
                }
               if(_GLF_DEAD(false))
                barrier();
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))));
         for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
          {
           if(_GLF_DEAD(false))
            {
             do
              {
               if(_GLF_DEAD(false))
                barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
             barrier();
            }
          }
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY((injectionSwitch.y), ((_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED((-8059.5348 - 7661.4705)) : injectionSwitch.y)))) - 0.0) + 0.0)))))
            barrier();
          }
         else
          {
          }
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
        }
       while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), _GLF_IDENTITY(true && (_GLF_WRAPPED_LOOP(false)), bool(bvec3(_GLF_IDENTITY(true && (_GLF_WRAPPED_LOOP(false)), ! (! (_GLF_IDENTITY(true && (_GLF_WRAPPED_LOOP(false)), ! (! (_GLF_IDENTITY(true && (_GLF_WRAPPED_LOOP(false)), bool(bool(true && (_GLF_WRAPPED_LOOP(false))))))))))), true, false)))));
      }
    }
  }
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 | 0)); _injected_loop_counter --)
  {
   do
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec2(false, true)), ! (! _GLF_IDENTITY((bool(bvec2(false, true))), _GLF_IDENTITY(bool(bool((bool(bvec2(false, true))))), bool(bvec2(bool(bool((bool(bvec2(false, true))))), false)))))), _GLF_IDENTITY(true, false || (true)) && _GLF_IDENTITY((_GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(false, bool(bvec2(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), true)), ! _GLF_IDENTITY((! (bool(bvec2(false, true)))), true && (_GLF_IDENTITY((! (bool(bvec2(false, true)))), bool(bvec4((! (bool(bvec2(false, true)))), false, false, false))))))), ! (_GLF_IDENTITY(! ((_GLF_IDENTITY(bool(bvec2(false, true)), ! (! (bool(bvec2(false, true))))))), bool(bool(! ((_GLF_IDENTITY(bool(bvec2(false, true)), ! (! (bool(bvec2(false, true)))))))))))))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y))))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)), bool(bvec4(bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)), true, true, false))))))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 uint num_workgroup = _GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, max(gl_NumWorkGroups, gl_NumWorkGroups)).x, (_GLF_IDENTITY(false ? _GLF_FUZZED(131885u) : gl_NumWorkGroups.x, max(false ? _GLF_FUZZED(131885u) : _GLF_IDENTITY(gl_NumWorkGroups.x, (gl_NumWorkGroups.x) | (gl_NumWorkGroups.x)), false ? _GLF_FUZZED(131885u) : gl_NumWorkGroups.x))));
 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, false, true), bvec3(bvec3(bvec3(false, false, true)))))), false)), bool(bvec2(bool(bvec2(false, false)), true))), ! (! (_GLF_IDENTITY(bool(bvec2(false, false)), bool(bvec2(bool(bvec2(false, false)), true)))))))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 uint workgroup_size = _GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize, (_GLF_IDENTITY(gl_WorkGroupSize, clamp(_GLF_IDENTITY(gl_WorkGroupSize, (_GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) / uvec3(1u, 1u, 1u))) ^ uvec3(0u, 0u, 0u)), gl_WorkGroupSize, gl_WorkGroupSize))) | uvec3(0u, 0u, 0u)), (_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize, (_GLF_IDENTITY(gl_WorkGroupSize, clamp(_GLF_IDENTITY(gl_WorkGroupSize, (_GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) / uvec3(1u, 1u, 1u))) ^ uvec3(0u, 0u, 0u)), gl_WorkGroupSize, gl_WorkGroupSize))) | uvec3(0u, 0u, 0u)), (_GLF_IDENTITY(gl_WorkGroupSize, (_GLF_IDENTITY(gl_WorkGroupSize, clamp(_GLF_IDENTITY(gl_WorkGroupSize, (_GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) / uvec3(1u, 1u, 1u))) ^ uvec3(0u, 0u, 0u)), gl_WorkGroupSize, gl_WorkGroupSize))) | uvec3(0u, 0u, 0u))) | (_GLF_IDENTITY(gl_WorkGroupSize, (_GLF_IDENTITY(gl_WorkGroupSize, clamp(_GLF_IDENTITY(gl_WorkGroupSize, (_GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) / uvec3(1u, 1u, 1u))) ^ uvec3(0u, 0u, 0u)), gl_WorkGroupSize, gl_WorkGroupSize))) | uvec3(0u, 0u, 0u))))) | ((uvec3(0u, 0u, 0u) >> _GLF_IDENTITY(uvec3(5u), uvec3(5u))) >> _GLF_IDENTITY(uvec3(3u), uvec3(3u)))).x;
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = workgroup_size * workgroup_id;
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).x) - 0.0) > injectionSwitch.y), ! (! ((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).x) - 0.0) > injectionSwitch.y)))))))
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
          {
           do
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
         barrier();
        }
      }
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _GLF_IDENTITY(_injected_loop_counter ++, 1 * (_injected_loop_counter ++)))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           barrier();
          }
        }
       barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true))))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         barrier();
         if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), (bool(bool(false))) && true))))
          barrier();
        }
      }
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 uint virtual_gid = _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, ~ (~ (_GLF_IDENTITY(workgroup_base, (workgroup_base) | (workgroup_base))))), (_GLF_IDENTITY(workgroup_base, ~ _GLF_IDENTITY((~ _GLF_IDENTITY((workgroup_base), ((workgroup_base)) * 1u)), 0u ^ ((~ _GLF_IDENTITY((workgroup_base), ((workgroup_base)) * 1u)))))) | (_GLF_IDENTITY(workgroup_base, ~ (~ (workgroup_base))))) + _GLF_IDENTITY(subgroup_id, ~ (~ (subgroup_id))) * subgroup_size + subgroup_local_id;
 for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) >> 0))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), true && _GLF_IDENTITY((_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, false, _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(491.468)), float(injectionSwitch.y), bool(true))))), true)), true && (bool(bvec4(false, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))))))), ! (! ((_GLF_DEAD(false))))))) && _GLF_IDENTITY(true, true && (true))))
    {
     if(_GLF_DEAD(false))
      barrier();
     for(int _injected_loop_counter = (0 | _GLF_IDENTITY(int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).x)), (int(_GLF_ZERO(_GLF_IDENTITY(0.0, max(_GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0)), _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), injectionSwitch)).x))) / 1)); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(int(5), 0 | (_GLF_IDENTITY(int(5), ~ (~ (int(5)))))) : _GLF_FUZZED(_injected_loop_counter)))))), (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(1 << _GLF_IDENTITY(int(5), int(5)), _GLF_IDENTITY(min(1 << _GLF_IDENTITY(int(5), int(5)), _GLF_IDENTITY(_GLF_IDENTITY(1, (1) / ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (int(0)) | 0)))) << _GLF_IDENTITY(_GLF_IDENTITY(int(5), int(5)), (_GLF_IDENTITY(int(5), int(5))) << 0), (1 << _GLF_IDENTITY(int(5), int(5))) - 0)), (true ? min(1 << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), 0 | (_GLF_IDENTITY(_GLF_IDENTITY(int(5), (int(5)) ^ 0), (true ? _GLF_IDENTITY(int(5), (int(5)) ^ 0) : _GLF_FUZZED(-2286)))))), _GLF_IDENTITY(_GLF_IDENTITY(1, (1) / ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(_GLF_IDENTITY(0, int(ivec2(0, 1)))), (int(0)) | 0)))) << _GLF_IDENTITY(int(5), int(5)), (1 << _GLF_IDENTITY(_GLF_IDENTITY(int(5), max(int(5), _GLF_IDENTITY(int(5), (_GLF_IDENTITY(int(5), (int(5)) / int(_GLF_ONE(1.0, injectionSwitch.y)))) | 0))), int(5))) - 0)) : _GLF_FUZZED(-17270)))), int(_GLF_IDENTITY(int(_GLF_IDENTITY(1 << _GLF_IDENTITY(int(5), int(5)), _GLF_IDENTITY(min(1 << _GLF_IDENTITY(int(5), int(5)), _GLF_IDENTITY(_GLF_IDENTITY(1, (1) / ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (int(0)) | 0)))) << _GLF_IDENTITY(_GLF_IDENTITY(int(5), int(5)), (_GLF_IDENTITY(int(5), int(5))) << 0), (1 << _GLF_IDENTITY(int(5), int(5))) - 0)), (true ? min(1 << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), 0 | (_GLF_IDENTITY(_GLF_IDENTITY(int(5), (int(5)) ^ 0), (true ? _GLF_IDENTITY(int(5), (int(5)) ^ 0) : _GLF_FUZZED(-2286)))))), _GLF_IDENTITY(_GLF_IDENTITY(1, (1) / ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(_GLF_IDENTITY(0, int(ivec2(0, 1)))), (int(0)) | 0)))) << _GLF_IDENTITY(int(5), int(5)), (1 << _GLF_IDENTITY(_GLF_IDENTITY(int(5), max(int(5), _GLF_IDENTITY(int(5), (_GLF_IDENTITY(int(5), (int(5)) / int(_GLF_ONE(1.0, injectionSwitch.y)))) | 0))), int(5))) - 0)) : _GLF_FUZZED(-17270))))), max(int(_GLF_IDENTITY(1 << _GLF_IDENTITY(int(5), int(5)), _GLF_IDENTITY(min(1 << _GLF_IDENTITY(int(5), int(5)), _GLF_IDENTITY(_GLF_IDENTITY(1, (1) / ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (int(0)) | 0)))) << _GLF_IDENTITY(_GLF_IDENTITY(int(5), int(5)), (_GLF_IDENTITY(int(5), int(5))) << 0), (1 << _GLF_IDENTITY(int(5), int(5))) - 0)), (true ? min(1 << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), 0 | (_GLF_IDENTITY(_GLF_IDENTITY(int(5), (int(5)) ^ 0), (true ? _GLF_IDENTITY(int(5), (int(5)) ^ 0) : _GLF_FUZZED(-2286)))))), _GLF_IDENTITY(_GLF_IDENTITY(1, (1) / ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(_GLF_IDENTITY(0, int(ivec2(0, 1)))), (int(0)) | 0)))) << _GLF_IDENTITY(int(5), int(5)), (1 << _GLF_IDENTITY(_GLF_IDENTITY(int(5), max(int(5), _GLF_IDENTITY(int(5), (_GLF_IDENTITY(int(5), (int(5)) / int(_GLF_ONE(1.0, injectionSwitch.y)))) | 0))), int(5))) - 0)) : _GLF_FUZZED(-17270))))), int(_GLF_IDENTITY(1 << _GLF_IDENTITY(int(5), int(5)), _GLF_IDENTITY(min(1 << _GLF_IDENTITY(int(5), int(5)), _GLF_IDENTITY(_GLF_IDENTITY(1, (1) / ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (int(0)) | 0)))) << _GLF_IDENTITY(_GLF_IDENTITY(int(5), int(5)), (_GLF_IDENTITY(int(5), int(5))) << 0), (1 << _GLF_IDENTITY(int(5), int(5))) - 0)), (true ? min(1 << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), 0 | (_GLF_IDENTITY(_GLF_IDENTITY(int(5), (int(5)) ^ 0), (true ? _GLF_IDENTITY(int(5), (int(5)) ^ 0) : _GLF_FUZZED(-2286)))))), _GLF_IDENTITY(_GLF_IDENTITY(1, (1) / ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(_GLF_IDENTITY(0, int(ivec2(0, 1)))), (int(0)) | 0)))) << _GLF_IDENTITY(int(5), int(5)), (1 << _GLF_IDENTITY(_GLF_IDENTITY(int(5), max(int(5), _GLF_IDENTITY(int(5), (_GLF_IDENTITY(int(5), (int(5)) / int(_GLF_ONE(1.0, injectionSwitch.y)))) | 0))), int(5))) - 0)) : _GLF_FUZZED(-17270)))))))))), max((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(5), int(5)), _GLF_IDENTITY(min(1 << _GLF_IDENTITY(int(5), int(5)), _GLF_IDENTITY(_GLF_IDENTITY(1, (1) / ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(0), 1 * (int(0))), int(0))) >> _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (int(0)) | 0)))) << _GLF_IDENTITY(_GLF_IDENTITY(int(5), int(5)), (_GLF_IDENTITY(int(5), int(5))) << 0), (1 << _GLF_IDENTITY(int(5), int(5))) - 0)), (true ? min(1 << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), 0 | _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(int(5), (int(5)) ^ 0), (true ? _GLF_IDENTITY(int(5), (int(5)) ^ 0) : _GLF_FUZZED(-2286)))), ~ (_GLF_IDENTITY(~ ((_GLF_IDENTITY(_GLF_IDENTITY(int(5), (int(5)) ^ 0), (true ? _GLF_IDENTITY(int(5), (int(5)) ^ 0) : _GLF_FUZZED(-2286))))), (false ? _GLF_FUZZED(_injected_loop_counter) : ~ ((_GLF_IDENTITY(_GLF_IDENTITY(int(5), (int(5)) ^ 0), (true ? _GLF_IDENTITY(int(5), (int(5)) ^ 0) : _GLF_FUZZED(-2286))))))))))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1, (1) / ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (int(0)) | 0)))) << _GLF_IDENTITY(int(5), int(5)), max(_GLF_IDENTITY(1, (1) / ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (int(0)) | 0)))) << _GLF_IDENTITY(int(5), int(5)), _GLF_IDENTITY(1, (1) / ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (int(0)) | 0)))) << _GLF_IDENTITY(int(5), int(5)))), _GLF_IDENTITY((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(5), max(int(5), _GLF_IDENTITY(int(5), (int(5)) | 0))), int(5))), max((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(5), max(int(5), _GLF_IDENTITY(int(5), (int(5)) | 0))), int(5))), (1 << _GLF_IDENTITY(_GLF_IDENTITY(int(5), max(int(5), _GLF_IDENTITY(int(5), (int(5)) | 0))), int(5))))) - 0)) : _GLF_FUZZED(-17270))))), (_GLF_IDENTITY(1 << _GLF_IDENTITY(int(5), int(5)), _GLF_IDENTITY(min(1 << _GLF_IDENTITY(int(5), int(5)), _GLF_IDENTITY(_GLF_IDENTITY(1, (1) / ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (int(0)) | 0)))) << _GLF_IDENTITY(_GLF_IDENTITY(int(5), int(5)), (_GLF_IDENTITY(_GLF_IDENTITY(int(5), clamp(int(5), int(5), int(5))), int(5))) << 0), (1 << _GLF_IDENTITY(int(5), int(5))) - 0)), (true ? min(1 << _GLF_IDENTITY(int(5), _GLF_IDENTITY(_GLF_IDENTITY(int(5), 0 | (_GLF_IDENTITY(_GLF_IDENTITY(int(5), (int(5)) ^ 0), (true ? _GLF_IDENTITY(int(5), (int(5)) ^ 0) : _GLF_FUZZED(-2286))))), (_GLF_IDENTITY(int(5), 0 | (_GLF_IDENTITY(_GLF_IDENTITY(int(5), (int(5)) ^ 0), (true ? _GLF_IDENTITY(int(5), (int(_GLF_IDENTITY(5, (5) | 0))) ^ 0) : _GLF_FUZZED(-2286)))))) - 0)), _GLF_IDENTITY(_GLF_IDENTITY(1, (1) / ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (int(0)) | 0)))) << _GLF_IDENTITY(_GLF_IDENTITY(int(5), int(5)), max(_GLF_IDENTITY(int(5), int(5)), _GLF_IDENTITY(_GLF_IDENTITY(int(5), int(5)), (_GLF_IDENTITY(_GLF_IDENTITY(int(5), int(5)), (_GLF_IDENTITY(int(5), int(5))) - 0)) >> 0))), (1 << _GLF_IDENTITY(_GLF_IDENTITY(int(5), max(int(5), _GLF_IDENTITY(int(5), (int(5)) | 0))), int(5))) - 0)) : _GLF_FUZZED(-17270))))))) >> _GLF_IDENTITY(int(5), int(5)))), bool(bvec3(_GLF_WRAPPED_LOOP(_injected_loop_counter != (_GLF_IDENTITY((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(5), int(5)), _GLF_IDENTITY(min(1 << _GLF_IDENTITY(int(5), int(5)), _GLF_IDENTITY(_GLF_IDENTITY(1, (1) / ((_GLF_IDENTITY(1, (1) | ((0 | 0) >> _GLF_IDENTITY(int(8), int(8)))) << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (_GLF_IDENTITY(int(0), (int(0)) | (_GLF_IDENTITY(int(0), (_GLF_IDENTITY(int(0), ~ (~ (int(0))))) / 1)))) | 0)))) << _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(5), int(5)), (0 | 0) ^ (_GLF_IDENTITY(int(5), int(5)))), (_GLF_IDENTITY(int(5), int(5))) << 0), (1 << _GLF_IDENTITY(int(5), int(5))) - 0)), (true ? min(1 << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), 0 | (_GLF_IDENTITY(_GLF_IDENTITY(int(5), (int(5)) ^ 0), (true ? _GLF_IDENTITY(int(5), (int(5)) ^ 0) : _GLF_FUZZED(-2286)))))), _GLF_IDENTITY(_GLF_IDENTITY(1, (1) / ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(_GLF_IDENTITY(0, int(ivec2(0, 1)))), (int(0)) | _GLF_IDENTITY(0, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(0, (false ? _GLF_FUZZED(_injected_loop_counter) : 0))), max(~ (_GLF_IDENTITY(0, (false ? _GLF_FUZZED(_injected_loop_counter) : 0))), _GLF_IDENTITY(~ (_GLF_IDENTITY(0, (false ? _GLF_FUZZED(_injected_loop_counter) : 0))), (~ (_GLF_IDENTITY(0, (false ? _GLF_FUZZED(_injected_loop_counter) : 0)))) | 0))))))))) << _GLF_IDENTITY(int(5), int(5)), (1 << _GLF_IDENTITY(_GLF_IDENTITY(int(5), max(int(5), _GLF_IDENTITY(_GLF_IDENTITY(int(5), (int(5)) >> 0), (_GLF_IDENTITY(int(5), (int(5)) / int(_GLF_ONE(1.0, injectionSwitch.y)))) | 0))), int(5))) - 0)) : _GLF_FUZZED(-17270))))), max((_GLF_IDENTITY(_GLF_IDENTITY(1 << _GLF_IDENTITY(int(5), int(5)), ~ (~ (1 << _GLF_IDENTITY(int(5), int(5))))), _GLF_IDENTITY(min(1 << _GLF_IDENTITY(int(5), int(5)), _GLF_IDENTITY(_GLF_IDENTITY(1, (1) / ((1 << _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(0), 1 * (int(0))), int(0)), clamp(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(0), 1 * (int(0))), int(0)), (_GLF_IDENTITY(_GLF_IDENTITY(int(0), 1 * (int(0))), int(0))) | (_GLF_IDENTITY(_GLF_IDENTITY(int(0), 1 * (int(0))), int(0)))), _GLF_IDENTITY(_GLF_IDENTITY(int(0), 1 * (int(0))), int(0)), _GLF_IDENTITY(_GLF_IDENTITY(int(0), 1 * (int(0))), int(0))))) >> _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (int(0)) | 0)))) << _GLF_IDENTITY(_GLF_IDENTITY(int(5), int(5)), (_GLF_IDENTITY(_GLF_IDENTITY(int(5), int(5)), min(_GLF_IDENTITY(int(5), int(5)), _GLF_IDENTITY(int(5), int(5))))) << 0), (1 << _GLF_IDENTITY(int(5), int(5))) - 0)), (true ? min(1 << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), 0 | (_GLF_IDENTITY(_GLF_IDENTITY(int(5), (int(5)) ^ 0), (true ? _GLF_IDENTITY(int(5), (int(5)) ^ 0) : _GLF_FUZZED(-2286)))))), _GLF_IDENTITY(_GLF_IDENTITY(1, (1) / ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), _GLF_IDENTITY((int(0)) | 0, min(_GLF_IDENTITY((int(0)) | 0, int(ivec4((int(0)) | 0, 1, 1, 1))), _GLF_IDENTITY((int(0)) | 0, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY((int(0)) | 0, ((int(0)) | 0) + 0)), 0 ^ (~ (_GLF_IDENTITY((int(0)) | 0, ((int(0)) | 0) + 0)))))))))))) << _GLF_IDENTITY(int(5), int(5)), (_GLF_IDENTITY(1, 0 ^ (1)) << _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(5), max(int(5), _GLF_IDENTITY(int(5), (int(5)) | 0))), int(5)), clamp(_GLF_IDENTITY(_GLF_IDENTITY(int(5), max(int(5), _GLF_IDENTITY(int(5), (int(5)) | 0))), int(5)), _GLF_IDENTITY(_GLF_IDENTITY(int(5), max(int(5), _GLF_IDENTITY(int(5), (int(5)) | 0))), int(5)), _GLF_IDENTITY(_GLF_IDENTITY(int(5), max(int(5), _GLF_IDENTITY(int(5), (int(5)) | 0))), int(5))))) - 0)) : _GLF_FUZZED(-17270))))), (_GLF_IDENTITY(_GLF_IDENTITY(1 << _GLF_IDENTITY(int(5), int(5)), _GLF_IDENTITY(min(1 << _GLF_IDENTITY(int(5), int(5)), _GLF_IDENTITY(_GLF_IDENTITY(1, (1) / ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (int(0)) | 0)))) << _GLF_IDENTITY(_GLF_IDENTITY(int(5), int(5)), (_GLF_IDENTITY(_GLF_IDENTITY(int(5), clamp(int(5), int(5), int(5))), int(5))) << 0), (1 << _GLF_IDENTITY(int(5), int(5))) - 0)), (true ? min(1 << _GLF_IDENTITY(int(5), _GLF_IDENTITY(_GLF_IDENTITY(int(5), 0 | (_GLF_IDENTITY(_GLF_IDENTITY(int(5), (int(5)) ^ 0), (true ? _GLF_IDENTITY(int(5), (int(5)) ^ 0) : _GLF_FUZZED(-2286))))), (_GLF_IDENTITY(int(5), 0 | (_GLF_IDENTITY(_GLF_IDENTITY(int(5), (int(5)) ^ 0), (true ? _GLF_IDENTITY(int(5), (int(5)) ^ 0) : _GLF_FUZZED(-2286)))))) - 0)), _GLF_IDENTITY(_GLF_IDENTITY(1, (1) / ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (int(0)) | 0)))) << _GLF_IDENTITY(_GLF_IDENTITY(int(5), int(5)), max(_GLF_IDENTITY(int(5), int(5)), _GLF_IDENTITY(_GLF_IDENTITY(int(5), int(5)), (_GLF_IDENTITY(_GLF_IDENTITY(int(5), int(5)), (_GLF_IDENTITY(int(5), int(5))) - 0)) >> 0))), (1 << _GLF_IDENTITY(_GLF_IDENTITY(int(5), max(int(5), _GLF_IDENTITY(int(5), (int(5)) | 0))), int(5))) - 0)) : _GLF_FUZZED(-17270)))), int(ivec2(_GLF_IDENTITY(1 << _GLF_IDENTITY(int(5), int(5)), _GLF_IDENTITY(min(1 << _GLF_IDENTITY(int(5), int(5)), _GLF_IDENTITY(_GLF_IDENTITY(1, (1) / ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (int(0)) | 0)))) << _GLF_IDENTITY(_GLF_IDENTITY(int(5), int(5)), (_GLF_IDENTITY(_GLF_IDENTITY(int(5), clamp(int(5), int(5), int(5))), int(5))) << 0), (1 << _GLF_IDENTITY(int(5), int(5))) - 0)), (true ? min(1 << _GLF_IDENTITY(int(5), _GLF_IDENTITY(_GLF_IDENTITY(int(5), 0 | (_GLF_IDENTITY(_GLF_IDENTITY(int(5), (int(5)) ^ 0), (true ? _GLF_IDENTITY(int(5), (int(5)) ^ 0) : _GLF_FUZZED(-2286))))), (_GLF_IDENTITY(int(5), 0 | (_GLF_IDENTITY(_GLF_IDENTITY(int(5), (int(5)) ^ 0), (true ? _GLF_IDENTITY(int(5), (int(5)) ^ 0) : _GLF_FUZZED(-2286)))))) - 0)), _GLF_IDENTITY(_GLF_IDENTITY(1, (1) / ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (int(0)) | 0)))) << _GLF_IDENTITY(_GLF_IDENTITY(int(5), int(5)), max(_GLF_IDENTITY(int(5), int(5)), _GLF_IDENTITY(_GLF_IDENTITY(int(5), int(5)), (_GLF_IDENTITY(_GLF_IDENTITY(int(5), int(5)), (_GLF_IDENTITY(int(5), int(5))) - 0)) >> 0))), (1 << _GLF_IDENTITY(_GLF_IDENTITY(int(5), max(int(5), _GLF_IDENTITY(int(5), (int(5)) | 0))), int(5))) - 0)) : _GLF_FUZZED(-17270)))), 0)))))) >> _GLF_IDENTITY(int(5), int(5)))), false, true)))) && true); _injected_loop_counter ++)
      {
       barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, true)), ! (! (bool(bvec2(false, true)))))), (injectionSwitch.x > injectionSwitch.y))))
        {
         for(int _injected_loop_counter = _GLF_IDENTITY(1, ~ (~ (_GLF_IDENTITY(1, min(1, _GLF_IDENTITY(1, (1) ^ (0 << _GLF_IDENTITY(int(0), int(0))))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         else
          {
          }
         barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y)))))))))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             barrier();
            }
           else
            {
            }
          }
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
        barrier();
      }
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY((injectionSwitch.y), max((injectionSwitch.y), (injectionSwitch.y))) / 1.0))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)))
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, (0) >> 0)); _injected_loop_counter --)
          {
           barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
        }
      }
     else
      {
       do
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(1, ~ (_GLF_IDENTITY(~ (1), int(ivec4(_GLF_IDENTITY(~ (1), int(ivec4(~ (1), 0, 0, 1))), 0, 0, 0)))))); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 barrier();
                }
               else
                {
                }
              }
             barrier();
             if(_GLF_DEAD(false))
              barrier();
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y))))))))
            barrier();
           if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(false))
        barrier();
      }
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 uint next_virtual_gid = workgroup_base + subgroup_id * subgroup_size + ((subgroup_local_id + 1) % _GLF_IDENTITY(subgroup_size, (0u << _GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(3u, min(_GLF_IDENTITY(3u, (false ? _GLF_FUZZED(workgroup_base) : 3u)), 3u))), uint(3u)), (_GLF_IDENTITY(uint(_GLF_IDENTITY(3u, (1u ^ 1u) ^ (3u))), uint(3u))) - 0u)) ^ (subgroup_size)));
 if(_GLF_DEAD(false))
  {
   do
    {
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   atomicStore(buf[virtual_gid], uint(1), 4, 64, 4);
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 for(int _injected_loop_counter = int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - tan(0.0)), injectionSwitch.y)))); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > (0 >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (int(5)) / 1)))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > (0 >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (int(5)) / 1)))), bool(bvec3(_GLF_WRAPPED_LOOP(_injected_loop_counter > (0 >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(_GLF_IDENTITY(5, max(5, 5))), (int(5)) / 1)))), true, false))))); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(_GLF_IDENTITY(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false), _GLF_IDENTITY(bvec2(bvec2(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))), bvec2(bvec3(bvec2(bvec2(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))), true))))))))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           barrier();
          }
        }
       else
        {
         if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_DEAD(false), false, false))))
          barrier();
        }
      }
     else
      {
      }
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 atomicStore(buf[next_virtual_gid], uint(2), 4, 64, 4);
 for(int _injected_loop_counter = (1 | int(_GLF_ZERO(0.0, injectionSwitch.x))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 ^ 0)); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    barrier();
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
