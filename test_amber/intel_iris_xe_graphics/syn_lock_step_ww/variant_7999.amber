#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uvec4 GLF_merged2_0_3_88_3_1_13GLF_merged2_0_2_52_2_1_11GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizevirtual_gidnum_workgroup;
 if(_GLF_DEAD(false))
  barrier();
 uvec4 GLF_merged4_0_1_16_1_1_13_2_1_17_3_1_14next_virtual_gidnum_workgroupsubgroup_local_idworkgroup_base;
 uvec3 GLF_merged2_0_2_52_2_1_11GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizevirtual_gid;
 do
  {
   GLF_merged2_0_3_88_3_1_13GLF_merged2_0_2_52_2_1_11GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizevirtual_gidnum_workgroup.xyz = GLF_merged2_0_2_52_2_1_11GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizevirtual_gid;
   for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     else
      {
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 uvec4 GLF_merged3_0_2_56_2_1_13_3_1_17GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_basenum_workgroupsubgroup_local_id;
 uvec4 GLF_merged2_0_2_48_2_2_52GLF_merged2_0_1_11_1_1_12subgroup_idworkgroup_idGLF_merged2_0_1_13_1_1_14num_workgroupworkgroup_size;
 uvec2 GLF_merged2_0_1_11_1_1_12subgroup_idworkgroup_id;
 GLF_merged2_0_2_48_2_2_52GLF_merged2_0_1_11_1_1_12subgroup_idworkgroup_idGLF_merged2_0_1_13_1_1_14num_workgroupworkgroup_size.xy = GLF_merged2_0_1_11_1_1_12subgroup_idworkgroup_id;
 uvec4 GLF_merged2_0_2_54_2_2_56GLF_merged2_0_1_16_1_1_13next_virtual_gidsubgroup_sizeGLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_base;
 if(_GLF_DEAD(false))
  barrier();
 uvec2 GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_size;
 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false))))))))
  {
  }
 else
  {
   GLF_merged2_0_3_88_3_1_13GLF_merged2_0_2_52_2_1_11GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizevirtual_gidnum_workgroup.xyz.xy = GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_size;
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 uvec2 GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_base;
 GLF_merged3_0_2_56_2_1_13_3_1_17GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_basenum_workgroupsubgroup_local_id.xy = GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_base;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   do
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
   barrier();
  }
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, ! (! (true)))))))
      {
       barrier();
      }
     else
      {
      }
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        {
         do
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             do
              {
               barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
    }
  }
 else
  {
  }
 GLF_merged2_0_2_54_2_2_56GLF_merged2_0_1_16_1_1_13next_virtual_gidsubgroup_sizeGLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_base.zw = GLF_merged3_0_2_56_2_1_13_3_1_17GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_basenum_workgroupsubgroup_local_id.xy;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       barrier();
      }
    }
  }
 else
  {
  }
 uvec2 GLF_merged2_0_1_13_1_1_14num_workgroupworkgroup_size;
 _GLF_IDENTITY(GLF_merged2_0_2_48_2_2_52GLF_merged2_0_1_11_1_1_12subgroup_idworkgroup_idGLF_merged2_0_1_13_1_1_14num_workgroupworkgroup_size.zw = GLF_merged2_0_1_13_1_1_14num_workgroupworkgroup_size, _GLF_IDENTITY(uvec2(0u, 0u) + (_GLF_IDENTITY(GLF_merged2_0_2_48_2_2_52GLF_merged2_0_1_11_1_1_12subgroup_idworkgroup_idGLF_merged2_0_1_13_1_1_14num_workgroupworkgroup_size.zw = GLF_merged2_0_1_13_1_1_14num_workgroupworkgroup_size, ((_GLF_IDENTITY(uvec2(0u, 0u), ~ (~ (_GLF_IDENTITY(uvec2(0u, 0u), uvec2(uvec2(uvec2(0u, 0u))))))) ^ uvec2(1u, _GLF_IDENTITY(1u, (1u) | (1u)))) ^ uvec2(1u, 1u)) ^ (_GLF_IDENTITY(GLF_merged2_0_2_48_2_2_52GLF_merged2_0_1_11_1_1_12subgroup_idworkgroup_idGLF_merged2_0_1_13_1_1_14num_workgroupworkgroup_size.zw = GLF_merged2_0_1_13_1_1_14num_workgroupworkgroup_size, (true ? _GLF_IDENTITY(GLF_merged2_0_2_48_2_2_52GLF_merged2_0_1_11_1_1_12subgroup_idworkgroup_idGLF_merged2_0_1_13_1_1_14num_workgroupworkgroup_size.zw = GLF_merged2_0_1_13_1_1_14num_workgroupworkgroup_size, ~ _GLF_IDENTITY((~ (_GLF_IDENTITY(GLF_merged2_0_2_48_2_2_52GLF_merged2_0_1_11_1_1_12subgroup_idworkgroup_idGLF_merged2_0_1_13_1_1_14num_workgroupworkgroup_size.zw = GLF_merged2_0_1_13_1_1_14num_workgroupworkgroup_size, ~ (~ _GLF_IDENTITY((GLF_merged2_0_2_48_2_2_52GLF_merged2_0_1_11_1_1_12subgroup_idworkgroup_idGLF_merged2_0_1_13_1_1_14num_workgroupworkgroup_size.zw = GLF_merged2_0_1_13_1_1_14num_workgroupworkgroup_size), ~ (~ (_GLF_IDENTITY((GLF_merged2_0_2_48_2_2_52GLF_merged2_0_1_11_1_1_12subgroup_idworkgroup_idGLF_merged2_0_1_13_1_1_14num_workgroupworkgroup_size.zw = GLF_merged2_0_1_13_1_1_14num_workgroupworkgroup_size), uvec2(0u, 0u) ^ ((GLF_merged2_0_2_48_2_2_52GLF_merged2_0_1_11_1_1_12subgroup_idworkgroup_idGLF_merged2_0_1_13_1_1_14num_workgroupworkgroup_size.zw = GLF_merged2_0_1_13_1_1_14num_workgroupworkgroup_size)))))))))), (false ? _GLF_FUZZED(GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_size) : (~ (_GLF_IDENTITY(GLF_merged2_0_2_48_2_2_52GLF_merged2_0_1_11_1_1_12subgroup_idworkgroup_idGLF_merged2_0_1_13_1_1_14num_workgroupworkgroup_size.zw = GLF_merged2_0_1_13_1_1_14num_workgroupworkgroup_size, ~ (~ _GLF_IDENTITY((GLF_merged2_0_2_48_2_2_52GLF_merged2_0_1_11_1_1_12subgroup_idworkgroup_idGLF_merged2_0_1_13_1_1_14num_workgroupworkgroup_size.zw = GLF_merged2_0_1_13_1_1_14num_workgroupworkgroup_size), ~ (~ (_GLF_IDENTITY((GLF_merged2_0_2_48_2_2_52GLF_merged2_0_1_11_1_1_12subgroup_idworkgroup_idGLF_merged2_0_1_13_1_1_14num_workgroupworkgroup_size.zw = GLF_merged2_0_1_13_1_1_14num_workgroupworkgroup_size), uvec2(0u, 0u) ^ ((GLF_merged2_0_2_48_2_2_52GLF_merged2_0_1_11_1_1_12subgroup_idworkgroup_idGLF_merged2_0_1_13_1_1_14num_workgroupworkgroup_size.zw = GLF_merged2_0_1_13_1_1_14num_workgroupworkgroup_size))))))))))))) : _GLF_FUZZED(GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_size)))))), uvec2(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)) + (uvec2(0u, 0u) + (_GLF_IDENTITY(GLF_merged2_0_2_48_2_2_52GLF_merged2_0_1_11_1_1_12subgroup_idworkgroup_idGLF_merged2_0_1_13_1_1_14num_workgroupworkgroup_size.zw = GLF_merged2_0_1_13_1_1_14num_workgroupworkgroup_size, ((_GLF_IDENTITY(uvec2(_GLF_IDENTITY(0u, max(_GLF_IDENTITY(0u, min(0u, 0u)), 0u)), 0u), ~ (~ (_GLF_IDENTITY(uvec2(0u, 0u), uvec2(uvec2(uvec2(0u, 0u))))))) ^ uvec2(1u, _GLF_IDENTITY(1u, (1u) | (1u)))) ^ uvec2(1u, 1u)) ^ (_GLF_IDENTITY(GLF_merged2_0_2_48_2_2_52GLF_merged2_0_1_11_1_1_12subgroup_idworkgroup_idGLF_merged2_0_1_13_1_1_14num_workgroupworkgroup_size.zw = GLF_merged2_0_1_13_1_1_14num_workgroupworkgroup_size, (true ? _GLF_IDENTITY(GLF_merged2_0_2_48_2_2_52GLF_merged2_0_1_11_1_1_12subgroup_idworkgroup_idGLF_merged2_0_1_13_1_1_14num_workgroupworkgroup_size.zw = GLF_merged2_0_1_13_1_1_14num_workgroupworkgroup_size, ~ _GLF_IDENTITY((~ (_GLF_IDENTITY(GLF_merged2_0_2_48_2_2_52GLF_merged2_0_1_11_1_1_12subgroup_idworkgroup_idGLF_merged2_0_1_13_1_1_14num_workgroupworkgroup_size.zw = GLF_merged2_0_1_13_1_1_14num_workgroupworkgroup_size, ~ (~ _GLF_IDENTITY((GLF_merged2_0_2_48_2_2_52GLF_merged2_0_1_11_1_1_12subgroup_idworkgroup_idGLF_merged2_0_1_13_1_1_14num_workgroupworkgroup_size.zw = GLF_merged2_0_1_13_1_1_14num_workgroupworkgroup_size), ~ (~ (_GLF_IDENTITY((GLF_merged2_0_2_48_2_2_52GLF_merged2_0_1_11_1_1_12subgroup_idworkgroup_idGLF_merged2_0_1_13_1_1_14num_workgroupworkgroup_size.zw = GLF_merged2_0_1_13_1_1_14num_workgroupworkgroup_size), uvec2(0u, 0u) ^ ((GLF_merged2_0_2_48_2_2_52GLF_merged2_0_1_11_1_1_12subgroup_idworkgroup_idGLF_merged2_0_1_13_1_1_14num_workgroupworkgroup_size.zw = GLF_merged2_0_1_13_1_1_14num_workgroupworkgroup_size)))))))))), (false ? _GLF_FUZZED(GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_size) : (~ (_GLF_IDENTITY(GLF_merged2_0_2_48_2_2_52GLF_merged2_0_1_11_1_1_12subgroup_idworkgroup_idGLF_merged2_0_1_13_1_1_14num_workgroupworkgroup_size.zw = GLF_merged2_0_1_13_1_1_14num_workgroupworkgroup_size, ~ (~ _GLF_IDENTITY((GLF_merged2_0_2_48_2_2_52GLF_merged2_0_1_11_1_1_12subgroup_idworkgroup_idGLF_merged2_0_1_13_1_1_14num_workgroupworkgroup_size.zw = GLF_merged2_0_1_13_1_1_14num_workgroupworkgroup_size), ~ (~ (_GLF_IDENTITY((GLF_merged2_0_2_48_2_2_52GLF_merged2_0_1_11_1_1_12subgroup_idworkgroup_idGLF_merged2_0_1_13_1_1_14num_workgroupworkgroup_size.zw = GLF_merged2_0_1_13_1_1_14num_workgroupworkgroup_size), uvec2(0u, 0u) ^ ((GLF_merged2_0_2_48_2_2_52GLF_merged2_0_1_11_1_1_12subgroup_idworkgroup_idGLF_merged2_0_1_13_1_1_14num_workgroupworkgroup_size.zw = GLF_merged2_0_1_13_1_1_14num_workgroupworkgroup_size))))))))))))) : _GLF_FUZZED(GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_size)))))))));
 if(_GLF_DEAD(false))
  barrier();
 uvec2 GLF_merged2_0_1_16_1_1_13next_virtual_gidsubgroup_size;
 do
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     for(int _injected_loop_counter = 0; _GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(1, (1) | (1))))), (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(1, (1) | (1))))), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(1, (1) | (1))))))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(1, (1) | (1))))), (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(1, (1) | (1))))), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(_GLF_IDENTITY(1, (1) | (1)), _GLF_IDENTITY(int(ivec2(_GLF_IDENTITY(1, (1) | (1)), 1)), (int(ivec2(_GLF_IDENTITY(1, (1) | (1)), 1))) | (int(ivec2(_GLF_IDENTITY(1, (1) | (1)), 1)))))))))))) || _GLF_FALSE(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, false, false), bvec3(bvec4(bvec3(false, false, false), true))))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(float(true)), _GLF_FUZZED(753.900)), bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))).y))))); _GLF_IDENTITY(_injected_loop_counter ++, 0 | (_injected_loop_counter ++)))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             barrier();
            }
           else
            {
            }
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
            {
             if(_GLF_DEAD(false))
              barrier();
            }
          }
        }
       else
        {
        }
      }
     GLF_merged2_0_2_54_2_2_56GLF_merged2_0_1_16_1_1_13next_virtual_gidsubgroup_sizeGLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_base.xy = GLF_merged2_0_1_16_1_1_13next_virtual_gidsubgroup_size;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 uint subgroup_id = gl_SubgroupID;
 GLF_merged2_0_2_48_2_2_52GLF_merged2_0_1_11_1_1_12subgroup_idworkgroup_idGLF_merged2_0_1_13_1_1_14num_workgroupworkgroup_size.xy.x = subgroup_id;
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(41.93) : injectionSwitch.y))))))))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     barrier();
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 do
  {
   _GLF_IDENTITY(GLF_merged2_0_3_88_3_1_13GLF_merged2_0_2_52_2_1_11GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizevirtual_gidnum_workgroup.xyz.xy.x = subgroup_size, _GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (GLF_merged2_0_3_88_3_1_13GLF_merged2_0_2_52_2_1_11GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizevirtual_gidnum_workgroup.xyz.xy.x = subgroup_size), (~ (GLF_merged2_0_3_88_3_1_13GLF_merged2_0_2_52_2_1_11GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizevirtual_gidnum_workgroup.xyz.xy.x = subgroup_size)) - 0u), ~ (~ (_GLF_IDENTITY(~ (GLF_merged2_0_3_88_3_1_13GLF_merged2_0_2_52_2_1_11GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizevirtual_gidnum_workgroup.xyz.xy.x = subgroup_size), (~ (GLF_merged2_0_3_88_3_1_13GLF_merged2_0_2_52_2_1_11GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizevirtual_gidnum_workgroup.xyz.xy.x = subgroup_size)) - 0u))))), ~ (~ (~ (_GLF_IDENTITY(~ (GLF_merged2_0_3_88_3_1_13GLF_merged2_0_2_52_2_1_11GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizevirtual_gidnum_workgroup.xyz.xy.x = subgroup_size), (~ (GLF_merged2_0_3_88_3_1_13GLF_merged2_0_2_52_2_1_11GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizevirtual_gidnum_workgroup.xyz.xy.x = subgroup_size)) - 0u))))));
  }
 while(_GLF_WRAPPED_LOOP(false));
 for(int _injected_loop_counter = ((98674 & 0) << _GLF_IDENTITY(int(7), int(7))); _GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < (_GLF_IDENTITY(1 & _GLF_IDENTITY(1, max(1, 1)), max(_GLF_IDENTITY(1 & _GLF_IDENTITY(1, max(1, 1)), 0 ^ (1 & _GLF_IDENTITY(1, max(1, 1)))), 1 & _GLF_IDENTITY(1, max(1, 1)))))), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_LOOP(_injected_loop_counter < (1 & _GLF_IDENTITY(1, max(1, 1))))), ! (! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter < (1 & _GLF_IDENTITY(1, max(_GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(_injected_loop_counter))), 1)))))))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_GLF_IDENTITY(_injected_loop_counter, max(_injected_loop_counter, _injected_loop_counter))) | 0) < (1 & _GLF_IDENTITY(1, max(1, 1)))))); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (false)))))
  {
  }
 else
  {
   GLF_merged2_0_2_54_2_2_56GLF_merged2_0_1_16_1_1_13next_virtual_gidsubgroup_sizeGLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_base.xy.y = GLF_merged2_0_3_88_3_1_13GLF_merged2_0_2_52_2_1_11GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizevirtual_gidnum_workgroup.xyz.xy.x;
   if(_GLF_DEAD(false))
    {
     do
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec2(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true))))))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (false)))))
      {
      }
     else
      {
       barrier();
      }
    }
   do
    {
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! _GLF_IDENTITY(_GLF_IDENTITY((! (false)), bool(bvec4((! (false)), true, true, false))), (_GLF_IDENTITY((! (false)), bool(bvec4((! (false)), true, true, false)))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))));
   if(_GLF_DEAD(false))
    barrier();
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 do
  {
   GLF_merged4_0_1_16_1_1_13_2_1_17_3_1_14next_virtual_gidnum_workgroupsubgroup_local_idworkgroup_base.z = subgroup_local_id;
  }
 while(_GLF_WRAPPED_LOOP(false));
 _GLF_IDENTITY(GLF_merged3_0_2_56_2_1_13_3_1_17GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_basenum_workgroupsubgroup_local_id.w = GLF_merged4_0_1_16_1_1_13_2_1_17_3_1_14next_virtual_gidnum_workgroupsubgroup_local_idworkgroup_base.z, ~ (~ _GLF_IDENTITY((GLF_merged3_0_2_56_2_1_13_3_1_17GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_basenum_workgroupsubgroup_local_id.w = GLF_merged4_0_1_16_1_1_13_2_1_17_3_1_14next_virtual_gidnum_workgroupsubgroup_local_idworkgroup_base.z), (false ? _GLF_FUZZED(subgroup_size) : (GLF_merged3_0_2_56_2_1_13_3_1_17GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_basenum_workgroupsubgroup_local_id.w = GLF_merged4_0_1_16_1_1_13_2_1_17_3_1_14next_virtual_gidnum_workgroupsubgroup_local_idworkgroup_base.z)))));
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   for(int _injected_loop_counter = (_GLF_IDENTITY(0, 0 ^ (0)) >> _GLF_IDENTITY(int(1), int(1))); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, (_GLF_IDENTITY(1, max(1, 1))) >> 0)); _injected_loop_counter ++)
    {
     GLF_merged2_0_2_54_2_2_56GLF_merged2_0_1_16_1_1_13next_virtual_gidsubgroup_sizeGLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_base.zw.x = GLF_merged3_0_2_56_2_1_13_3_1_17GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_basenum_workgroupsubgroup_local_id.w;
    }
  }
 uint num_workgroup = _GLF_IDENTITY(gl_NumWorkGroups, min(_GLF_IDENTITY(gl_NumWorkGroups, max(gl_NumWorkGroups, gl_NumWorkGroups)), gl_NumWorkGroups)).x;
 if(_GLF_DEAD(false))
  barrier();
 GLF_merged2_0_3_88_3_1_13GLF_merged2_0_2_52_2_1_11GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizevirtual_gidnum_workgroup.w = num_workgroup;
 GLF_merged4_0_1_16_1_1_13_2_1_17_3_1_14next_virtual_gidnum_workgroupsubgroup_local_idworkgroup_base.y = GLF_merged2_0_3_88_3_1_13GLF_merged2_0_2_52_2_1_11GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizevirtual_gidnum_workgroup.w;
 do
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       GLF_merged3_0_2_56_2_1_13_3_1_17GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_basenum_workgroupsubgroup_local_id.z = GLF_merged4_0_1_16_1_1_13_2_1_17_3_1_14next_virtual_gidnum_workgroupsubgroup_local_idworkgroup_base.y;
      }
     else
      {
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   do
    {
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   do
    {
     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), _GLF_IDENTITY(vec2(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat3(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(3.3, -0.8)) : injectionSwitch)), _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))))), 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0))), max(injectionSwitch, injectionSwitch)), vec2(mat4(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat3(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(3.3, -0.8)) : injectionSwitch)), _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))))), 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0))), max(injectionSwitch, injectionSwitch)), 1.0, 1.0, 1.0, 1.0, abs(1.0), 1.0, determinant(mat3(1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0)), 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, 0.0)))[0], injectionSwitch[1]), min(vec2(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat3(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(3.3, -0.8)) : injectionSwitch)), _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))))), 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0))), max(injectionSwitch, injectionSwitch)), vec2(mat4(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat3(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(3.3, -0.8)) : injectionSwitch)), _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))))), 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0))), max(injectionSwitch, injectionSwitch)), 1.0, 1.0, 1.0, 1.0, abs(1.0), 1.0, determinant(mat3(1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0)), 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, 0.0)))[0], injectionSwitch[1]), _GLF_IDENTITY(vec2(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat3(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(3.3, -0.8)) : injectionSwitch)), _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))))), 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0))), max(injectionSwitch, injectionSwitch)), vec2(mat4(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat3(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(3.3, -0.8)) : injectionSwitch)), _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))))), 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0))), max(injectionSwitch, injectionSwitch)), 1.0, 1.0, 1.0, 1.0, abs(1.0), 1.0, determinant(mat3(1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0)), 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, 0.0)))[0], injectionSwitch[1]), (true ? vec2(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat3(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(3.3, -0.8)) : injectionSwitch)), _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))))), 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0))), max(injectionSwitch, injectionSwitch)), vec2(mat4(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat3(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(3.3, -0.8)) : injectionSwitch)), _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))))), 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0))), max(injectionSwitch, injectionSwitch)), 1.0, 1.0, 1.0, 1.0, abs(1.0), 1.0, determinant(mat3(1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0)), 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, 0.0)))[0], injectionSwitch[1]) : _GLF_FUZZED(vec2(1.7, 5.3))))))).x < injectionSwitch.y))), true && _GLF_IDENTITY((_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch))[0], injectionSwitch[1])), _GLF_IDENTITY(mix(vec2(_GLF_FUZZED(-5.4), _GLF_FUZZED(-437.831)), vec2((_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch))[0], injectionSwitch[1])))[0], (_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch))[0], injectionSwitch[1])))[1]), bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)), max(mix(vec2(_GLF_FUZZED(-5.4), _GLF_FUZZED(-437.831)), vec2((_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch))[0], injectionSwitch[1])))[0], (_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch))[0], injectionSwitch[1])))[1]), bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)), mix(vec2(_GLF_FUZZED(-5.4), _GLF_FUZZED(-437.831)), vec2((_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch))[0], injectionSwitch[1])))[0], (_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch))[0], injectionSwitch[1])))[1]), bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))))).x < injectionSwitch.y)), false || (_GLF_TRUE(true, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch))[0], injectionSwitch[1])), _GLF_IDENTITY(mix(vec2(_GLF_FUZZED(-5.4), _GLF_FUZZED(-437.831)), vec2((_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch))[0], injectionSwitch[1])))[0], (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch))[0], injectionSwitch[1])), (_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch))[0], injectionSwitch[1]))) * mat2(1.0)))[1]), bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)), max(mix(vec2(_GLF_FUZZED(_GLF_IDENTITY(-5.4, max(-5.4, _GLF_IDENTITY(-5.4, float(mat4x3(-5.4, 1.0, abs(1.0), abs(1.0), 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0)))))), _GLF_FUZZED(-437.831)), vec2((_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch))[0], injectionSwitch[1])))[0], (_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch))[0], injectionSwitch[1])))[1]), bvec2(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, 0.0 + (injectionSwitch.y)))), true)), mix(vec2(_GLF_FUZZED(-5.4), _GLF_FUZZED(-437.831)), vec2((_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch))[0], injectionSwitch[1])))[0], (_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), vec2(0.0, 0.0) + ((injectionSwitch) * mat2(1.0)))), injectionSwitch))[0], injectionSwitch[1])))[1]), bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))))).x < injectionSwitch.y)))))), ! (! ((_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY(vec2(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat3x2(injectionSwitch, 1.0, 0.0, 0.0, 0.0)), mat2(1.0) * (vec2(mat3x2(injectionSwitch, 1.0, 0.0, 0.0, 0.0)))))) * vec2(1.0, 1.0)), max(injectionSwitch, injectionSwitch))[0], injectionSwitch[1]), (_GLF_IDENTITY(vec2(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat3x2(injectionSwitch, 1.0, 0.0, 0.0, 0.0)), mat2(1.0) * (vec2(mat3x2(injectionSwitch, 1.0, 0.0, 0.0, 0.0)))))) * vec2(1.0, 1.0)), max(injectionSwitch, injectionSwitch))[0], injectionSwitch[1]), (vec2(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat3x2(injectionSwitch, 1.0, 0.0, 0.0, 0.0)), _GLF_IDENTITY(mat2(1.0), transpose(transpose(_GLF_IDENTITY(mat2(1.0), _GLF_IDENTITY(mat2(mat4(mat2(1.0))), (mat2(mat4(mat2(1.0)))) - mat2(0.0, 0.0, 0.0, 0.0)))))) * (vec2(mat3x2(injectionSwitch, 1.0, 0.0, 0.0, 0.0)))))) * vec2(1.0, 1.0)), max(injectionSwitch, injectionSwitch))[0], injectionSwitch[1])) / vec2(1.0, 1.0))) - vec2(0.0, 0.0)), (_GLF_IDENTITY(vec2(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat3x2(injectionSwitch, 1.0, 0.0, 0.0, 0.0)), mat2(1.0) * (vec2(mat3x2(injectionSwitch, 1.0, 0.0, 0.0, 0.0)))))) * vec2(1.0, _GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, max(1.0, 1.0)), 1.0)))), max(injectionSwitch, injectionSwitch))[0], min(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat3x2(injectionSwitch, 1.0, 0.0, 0.0, 0.0)), mat2(1.0) * (vec2(mat3x2(injectionSwitch, 1.0, 0.0, 0.0, 0.0)))))) * vec2(1.0, _GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, max(1.0, 1.0)), 1.0)))), max(injectionSwitch, injectionSwitch))[0], _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat3x2(injectionSwitch, 1.0, 0.0, 0.0, 0.0)), mat2(1.0) * (vec2(mat3x2(injectionSwitch, 1.0, 0.0, 0.0, 0.0)))))) * vec2(1.0, _GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, max(1.0, 1.0)), 1.0)))), max(injectionSwitch, injectionSwitch))[0], (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat3x2(injectionSwitch, 1.0, 0.0, 0.0, 0.0)), mat2(1.0) * (vec2(mat3x2(injectionSwitch, 1.0, 0.0, 0.0, 0.0)))))) * vec2(1.0, _GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, max(1.0, 1.0)), 1.0)))), max(injectionSwitch, injectionSwitch))[0], (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat3x2(injectionSwitch, 1.0, 0.0, 0.0, 0.0)), mat2(1.0) * (vec2(mat3x2(injectionSwitch, 1.0, 0.0, 0.0, 0.0)))))) * vec2(1.0, _GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, max(1.0, 1.0)), 1.0)))), max(injectionSwitch, injectionSwitch))[0]) + 0.0)) * 1.0))), injectionSwitch[1]), (_GLF_IDENTITY(vec2(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat3x2(injectionSwitch, 1.0, 0.0, 0.0, 0.0)), mat2(1.0) * (vec2(mat3x2(injectionSwitch, 1.0, 0.0, 0.0, 0.0)))))) * vec2(1.0, 1.0)), max(injectionSwitch, injectionSwitch))[0], injectionSwitch[1]), (vec2(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat3x2(injectionSwitch, 1.0, 0.0, 0.0, 0.0)), mat2(1.0) * (vec2(mat3x2(injectionSwitch, 1.0, 0.0, 0.0, 0.0)))))), mix(vec2(_GLF_FUZZED(-1.9), ((_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat3x2(injectionSwitch, 1.0, 0.0, 0.0, 0.0)), mat2(1.0) * (vec2(mat3x2(injectionSwitch, 1.0, 0.0, 0.0, 0.0)))))))[1]), vec2(((_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat3x2(injectionSwitch, 1.0, 0.0, 0.0, 0.0)), mat2(1.0) * (vec2(mat3x2(injectionSwitch, 1.0, 0.0, 0.0, 0.0)))))))[0], _GLF_FUZZED((9109.1328))), bvec2(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) * vec2(1.0, 1.0)), max(injectionSwitch, injectionSwitch))[0], injectionSwitch[1])) / vec2(1.0, 1.0))) - vec2(0.0, 0.0))) * mat2(1.0))), mix(vec2(_GLF_FUZZED(-5.4), _GLF_FUZZED(-437.831)), vec2((_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(max(injectionSwitch, injectionSwitch), _GLF_IDENTITY(min(max(injectionSwitch, injectionSwitch), max(injectionSwitch, injectionSwitch)), (true ? min(max(injectionSwitch, injectionSwitch), max(injectionSwitch, injectionSwitch)) : _GLF_FUZZED(injectionSwitch)))))[0], injectionSwitch[1])))[0], (_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), max(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), clamp(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch))))))[0], mix(float(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), max(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), clamp(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch))))))[0]), float(_GLF_FUZZED(540.584)), bool(false))), injectionSwitch[1])))[1]), _GLF_IDENTITY(bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true), _GLF_IDENTITY(bvec2(bvec4(bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true), false, true)), bvec2(bvec4(_GLF_IDENTITY(bvec2(bvec4(bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true), false, true)), bvec2(bvec3(bvec2(bvec4(bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_IDENTITY(true, bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(true, ! (! (true)))), (bool(_GLF_IDENTITY(true, ! (! (true))))) || false)))), false, true)), false))), true, true)))))).x < injectionSwitch.y)))))))))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              barrier();
             do
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 do
                  {
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     barrier();
                    }
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))));
                }
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true))))))) || false)))
                  barrier();
                }
               do
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                      }
                     else
                      {
                       if(_GLF_DEAD(false))
                        barrier();
                      }
                    }
                  }
                }
               while(_GLF_WRAPPED_LOOP(false));
               do
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   _GLF_IDENTITY(GLF_merged2_0_2_48_2_2_52GLF_merged2_0_1_11_1_1_12subgroup_idworkgroup_idGLF_merged2_0_1_13_1_1_14num_workgroupworkgroup_size.zw.x = GLF_merged3_0_2_56_2_1_13_3_1_17GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_basenum_workgroupsubgroup_local_id.z, (true ? GLF_merged2_0_2_48_2_2_52GLF_merged2_0_1_11_1_1_12subgroup_idworkgroup_idGLF_merged2_0_1_13_1_1_14num_workgroupworkgroup_size.zw.x = GLF_merged3_0_2_56_2_1_13_3_1_17GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_basenum_workgroupsubgroup_local_id.z : _GLF_FUZZED(atomicAnd(subgroup_size, subgroup_local_id))));
                  }
                 else
                  {
                  }
                }
               while(_GLF_WRAPPED_LOOP(false));
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                {
                 do
                  {
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec2(false, true))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(bool(bvec3(false, true, false)), (bool(bvec3(false, true, false))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY(bool(bvec3(false, true, false)), (bool(bvec3(false, true, false))) || _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y)))) && true), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(bool(bvec3(false, true, _GLF_IDENTITY(false, bool(bvec3(false, true, false))))), (bool(bvec3(false, true, false))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, true, true)), false || (bool(bvec4(_GLF_IDENTITY(bool(bvec3(false, true, false)), _GLF_IDENTITY((bool(bvec3(false, true, false))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! ((bool(bvec3(false, true, false))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_IDENTITY(! ((bool(bvec3(false, true, false))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (! ((bool(bvec3(false, true, false))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false))))))), true, true, true))))))));
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_DEAD(false))
                  barrier();
                }
              }
             while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), true && (_GLF_WRAPPED_LOOP(false))));
             if(_GLF_DEAD(false))
              barrier();
            }
          }
         else
          {
          }
        }
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
            {
             if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec4((injectionSwitch.x > injectionSwitch.y), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))))))
              barrier();
            }
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 else
  {
  }
 uint workgroup_size = _GLF_IDENTITY(gl_WorkGroupSize.x, max(gl_WorkGroupSize.x, gl_WorkGroupSize.x));
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     GLF_merged2_0_3_88_3_1_13GLF_merged2_0_2_52_2_1_11GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizevirtual_gidnum_workgroup.xyz.xy.y = workgroup_size;
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   GLF_merged2_0_2_48_2_2_52GLF_merged2_0_1_11_1_1_12subgroup_idworkgroup_idGLF_merged2_0_1_13_1_1_14num_workgroupworkgroup_size.zw.y = _GLF_IDENTITY(GLF_merged2_0_3_88_3_1_13GLF_merged2_0_2_52_2_1_11GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizevirtual_gidnum_workgroup.xyz.xy.y, (false ? _GLF_FUZZED(70095u) : GLF_merged2_0_3_88_3_1_13GLF_merged2_0_2_52_2_1_11GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizevirtual_gidnum_workgroup.xyz.xy.y));
  }
 for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        {
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       barrier();
      }
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ 0)); _injected_loop_counter --)
        {
         barrier();
        }
      }
    }
  }
 else
  {
  }
 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(true, ! _GLF_IDENTITY((! (true)), ((! (true))) || false))), _GLF_IDENTITY((bool(_GLF_IDENTITY(true, ! (! (true))))), true && ((bool(_GLF_IDENTITY(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(! (true), ! (! (! (true)))), true, true, false)), ! (! (bool(bvec4(_GLF_IDENTITY(! (true), ! (! (! (true)))), true, true, false)))))))), bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(true, ! (! (true))), ! (! (_GLF_IDENTITY(true, ! (! _GLF_IDENTITY((true), true && ((true)))))))), false, false))))))) || false)))))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     do
      {
       do
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           barrier();
          }
         if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y))))))
          {
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x)), (injectionSwitch.x) - 0.0), injectionSwitch.x)) > injectionSwitch.y))))
            barrier();
          }
        }
       while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), bool(bvec3(_GLF_WRAPPED_LOOP(false), true, false))));
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
   else
    {
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       do
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
       barrier();
      }
    }
  }
 else
  {
  }
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ! (! ((injectionSwitch.x < injectionSwitch.y)))))))
        {
         GLF_merged2_0_2_48_2_2_52GLF_merged2_0_1_11_1_1_12subgroup_idworkgroup_idGLF_merged2_0_1_13_1_1_14num_workgroupworkgroup_size.xy.y = workgroup_id;
        }
       else
        {
        }
      }
     else
      {
      }
    }
   else
    {
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint workgroup_base = GLF_merged2_0_2_48_2_2_52GLF_merged2_0_1_11_1_1_12subgroup_idworkgroup_idGLF_merged2_0_1_13_1_1_14num_workgroupworkgroup_size.zw.y * GLF_merged2_0_2_48_2_2_52GLF_merged2_0_1_11_1_1_12subgroup_idworkgroup_idGLF_merged2_0_1_13_1_1_14num_workgroupworkgroup_size.xy.y;
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
    }
   barrier();
  }
 GLF_merged4_0_1_16_1_1_13_2_1_17_3_1_14next_virtual_gidnum_workgroupsubgroup_local_idworkgroup_base.w = workgroup_base;
 do
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     GLF_merged2_0_2_54_2_2_56GLF_merged2_0_1_16_1_1_13next_virtual_gidsubgroup_sizeGLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_base.zw.y = GLF_merged4_0_1_16_1_1_13_2_1_17_3_1_14next_virtual_gidnum_workgroupsubgroup_local_idworkgroup_base.w;
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, true && (true))))
    {
     barrier();
    }
   else
    {
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 uint virtual_gid = _GLF_IDENTITY(GLF_merged2_0_2_54_2_2_56GLF_merged2_0_1_16_1_1_13next_virtual_gidsubgroup_sizeGLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_base.zw, clamp(GLF_merged2_0_2_54_2_2_56GLF_merged2_0_1_16_1_1_13next_virtual_gidsubgroup_sizeGLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_base.zw, GLF_merged2_0_2_54_2_2_56GLF_merged2_0_1_16_1_1_13next_virtual_gidsubgroup_sizeGLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_base.zw, GLF_merged2_0_2_54_2_2_56GLF_merged2_0_1_16_1_1_13next_virtual_gidsubgroup_sizeGLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_base.zw)).y + GLF_merged2_0_2_48_2_2_52GLF_merged2_0_1_11_1_1_12subgroup_idworkgroup_idGLF_merged2_0_1_13_1_1_14num_workgroupworkgroup_size.xy.x * GLF_merged2_0_2_54_2_2_56GLF_merged2_0_1_16_1_1_13next_virtual_gidsubgroup_sizeGLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_base.xy.y + _GLF_IDENTITY(GLF_merged2_0_2_54_2_2_56GLF_merged2_0_1_16_1_1_13next_virtual_gidsubgroup_sizeGLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_base.zw.x, _GLF_IDENTITY(_GLF_IDENTITY(clamp(GLF_merged2_0_2_54_2_2_56GLF_merged2_0_1_16_1_1_13next_virtual_gidsubgroup_sizeGLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_base.zw.x, GLF_merged2_0_2_54_2_2_56GLF_merged2_0_1_16_1_1_13next_virtual_gidsubgroup_sizeGLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_base.zw.x, GLF_merged2_0_2_54_2_2_56GLF_merged2_0_1_16_1_1_13next_virtual_gidsubgroup_sizeGLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_base.zw.x), (clamp(GLF_merged2_0_2_54_2_2_56GLF_merged2_0_1_16_1_1_13next_virtual_gidsubgroup_sizeGLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_base.zw.x, GLF_merged2_0_2_54_2_2_56GLF_merged2_0_1_16_1_1_13next_virtual_gidsubgroup_sizeGLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_base.zw.x, _GLF_IDENTITY(GLF_merged2_0_2_54_2_2_56GLF_merged2_0_1_16_1_1_13next_virtual_gidsubgroup_sizeGLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_base.zw.x, (true ? GLF_merged2_0_2_54_2_2_56GLF_merged2_0_1_16_1_1_13next_virtual_gidsubgroup_sizeGLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_base.zw.x : _GLF_FUZZED(GLF_merged4_0_1_16_1_1_13_2_1_17_3_1_14next_virtual_gidnum_workgroupsubgroup_local_idworkgroup_base.y))))) * 1u), max(_GLF_IDENTITY(clamp(GLF_merged2_0_2_54_2_2_56GLF_merged2_0_1_16_1_1_13next_virtual_gidsubgroup_sizeGLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_base.zw.x, GLF_merged2_0_2_54_2_2_56GLF_merged2_0_1_16_1_1_13next_virtual_gidsubgroup_sizeGLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_base.zw.x, GLF_merged2_0_2_54_2_2_56GLF_merged2_0_1_16_1_1_13next_virtual_gidsubgroup_sizeGLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_base.zw.x), (clamp(GLF_merged2_0_2_54_2_2_56GLF_merged2_0_1_16_1_1_13next_virtual_gidsubgroup_sizeGLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_base.zw.x, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged2_0_2_54_2_2_56GLF_merged2_0_1_16_1_1_13next_virtual_gidsubgroup_sizeGLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_base.zw, clamp(_GLF_IDENTITY(GLF_merged2_0_2_54_2_2_56GLF_merged2_0_1_16_1_1_13next_virtual_gidsubgroup_sizeGLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_base.zw, ~ (~ (GLF_merged2_0_2_54_2_2_56GLF_merged2_0_1_16_1_1_13next_virtual_gidsubgroup_sizeGLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_base.zw))), GLF_merged2_0_2_54_2_2_56GLF_merged2_0_1_16_1_1_13next_virtual_gidsubgroup_sizeGLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_base.zw, GLF_merged2_0_2_54_2_2_56GLF_merged2_0_1_16_1_1_13next_virtual_gidsubgroup_sizeGLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_base.zw)).x, (false ? _GLF_FUZZED(8626u) : _GLF_IDENTITY(GLF_merged2_0_2_54_2_2_56GLF_merged2_0_1_16_1_1_13next_virtual_gidsubgroup_sizeGLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_base.zw, clamp(_GLF_IDENTITY(GLF_merged2_0_2_54_2_2_56GLF_merged2_0_1_16_1_1_13next_virtual_gidsubgroup_sizeGLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_base.zw, ~ (~ (GLF_merged2_0_2_54_2_2_56GLF_merged2_0_1_16_1_1_13next_virtual_gidsubgroup_sizeGLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_base.zw))), GLF_merged2_0_2_54_2_2_56GLF_merged2_0_1_16_1_1_13next_virtual_gidsubgroup_sizeGLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_base.zw, GLF_merged2_0_2_54_2_2_56GLF_merged2_0_1_16_1_1_13next_virtual_gidsubgroup_sizeGLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_base.zw)).x)), ~ (~ (_GLF_IDENTITY(GLF_merged2_0_2_54_2_2_56GLF_merged2_0_1_16_1_1_13next_virtual_gidsubgroup_sizeGLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_base.zw, clamp(_GLF_IDENTITY(GLF_merged2_0_2_54_2_2_56GLF_merged2_0_1_16_1_1_13next_virtual_gidsubgroup_sizeGLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_base.zw, ~ (~ (GLF_merged2_0_2_54_2_2_56GLF_merged2_0_1_16_1_1_13next_virtual_gidsubgroup_sizeGLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_base.zw))), GLF_merged2_0_2_54_2_2_56GLF_merged2_0_1_16_1_1_13next_virtual_gidsubgroup_sizeGLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_base.zw, GLF_merged2_0_2_54_2_2_56GLF_merged2_0_1_16_1_1_13next_virtual_gidsubgroup_sizeGLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_base.zw)).x))), _GLF_IDENTITY(GLF_merged2_0_2_54_2_2_56GLF_merged2_0_1_16_1_1_13next_virtual_gidsubgroup_sizeGLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_base.zw.x, (true ? GLF_merged2_0_2_54_2_2_56GLF_merged2_0_1_16_1_1_13next_virtual_gidsubgroup_sizeGLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_base.zw.x : _GLF_FUZZED(GLF_merged4_0_1_16_1_1_13_2_1_17_3_1_14next_virtual_gidnum_workgroupsubgroup_local_idworkgroup_base.y))))) * 1u), _GLF_IDENTITY(clamp(GLF_merged2_0_2_54_2_2_56GLF_merged2_0_1_16_1_1_13next_virtual_gidsubgroup_sizeGLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_base.zw.x, GLF_merged2_0_2_54_2_2_56GLF_merged2_0_1_16_1_1_13next_virtual_gidsubgroup_sizeGLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_base.zw.x, GLF_merged2_0_2_54_2_2_56GLF_merged2_0_1_16_1_1_13next_virtual_gidsubgroup_sizeGLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_base.zw.x), (clamp(GLF_merged2_0_2_54_2_2_56GLF_merged2_0_1_16_1_1_13next_virtual_gidsubgroup_sizeGLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_base.zw.x, GLF_merged2_0_2_54_2_2_56GLF_merged2_0_1_16_1_1_13next_virtual_gidsubgroup_sizeGLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_base.zw.x, _GLF_IDENTITY(GLF_merged2_0_2_54_2_2_56GLF_merged2_0_1_16_1_1_13next_virtual_gidsubgroup_sizeGLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_base.zw.x, (true ? GLF_merged2_0_2_54_2_2_56GLF_merged2_0_1_16_1_1_13next_virtual_gidsubgroup_sizeGLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_base.zw.x : _GLF_FUZZED(GLF_merged4_0_1_16_1_1_13_2_1_17_3_1_14next_virtual_gidnum_workgroupsubgroup_local_idworkgroup_base.y))))) * _GLF_IDENTITY(1u, min(_GLF_IDENTITY(1u, 0u ^ (_GLF_IDENTITY(1u, min(1u, 1u)))), 1u))))));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     barrier();
    }
  }
 GLF_merged2_0_3_88_3_1_13GLF_merged2_0_2_52_2_1_11GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizevirtual_gidnum_workgroup.xyz.z = virtual_gid;
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != 1, false || (_GLF_IDENTITY(_injected_loop_counter != 1, false || (_injected_loop_counter != 1))))); _GLF_IDENTITY(_injected_loop_counter ++, (true ? _injected_loop_counter ++ : _GLF_FUZZED(-41304))))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
      }
     else
      {
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  {
   do
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 uint next_virtual_gid = GLF_merged2_0_2_54_2_2_56GLF_merged2_0_1_16_1_1_13next_virtual_gidsubgroup_sizeGLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_base.zw.y + GLF_merged2_0_2_48_2_2_52GLF_merged2_0_1_11_1_1_12subgroup_idworkgroup_idGLF_merged2_0_1_13_1_1_14num_workgroupworkgroup_size.xy.x * GLF_merged2_0_2_54_2_2_56GLF_merged2_0_1_16_1_1_13next_virtual_gidsubgroup_sizeGLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_base.xy.y + ((_GLF_IDENTITY(GLF_merged2_0_2_54_2_2_56GLF_merged2_0_1_16_1_1_13next_virtual_gidsubgroup_sizeGLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_base.zw.x + 1, (_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged2_0_2_54_2_2_56GLF_merged2_0_1_16_1_1_13next_virtual_gidsubgroup_sizeGLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_base.zw.x + 1, 0u ^ (GLF_merged2_0_2_54_2_2_56GLF_merged2_0_1_16_1_1_13next_virtual_gidsubgroup_sizeGLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_base.zw.x + 1)), (GLF_merged2_0_2_54_2_2_56GLF_merged2_0_1_16_1_1_13next_virtual_gidsubgroup_sizeGLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_base.zw.x + 1) ^ 0u)) / 1u)) % _GLF_IDENTITY(GLF_merged2_0_2_54_2_2_56GLF_merged2_0_1_16_1_1_13next_virtual_gidsubgroup_sizeGLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_base, uvec4(_GLF_IDENTITY(GLF_merged2_0_2_54_2_2_56GLF_merged2_0_1_16_1_1_13next_virtual_gidsubgroup_sizeGLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_base[0], ~ (~ (GLF_merged2_0_2_54_2_2_56GLF_merged2_0_1_16_1_1_13next_virtual_gidsubgroup_sizeGLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_base[0]))), GLF_merged2_0_2_54_2_2_56GLF_merged2_0_1_16_1_1_13next_virtual_gidsubgroup_sizeGLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_base[1], _GLF_IDENTITY(_GLF_IDENTITY(GLF_merged2_0_2_54_2_2_56GLF_merged2_0_1_16_1_1_13next_virtual_gidsubgroup_sizeGLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_base[_GLF_IDENTITY(2, (true ? _GLF_IDENTITY(2, 0 | (2)) : _GLF_FUZZED(-47576)))], _GLF_IDENTITY((GLF_merged2_0_2_54_2_2_56GLF_merged2_0_1_16_1_1_13next_virtual_gidsubgroup_sizeGLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_base[_GLF_IDENTITY(2, (true ? _GLF_IDENTITY(2, 0 | (2)) : _GLF_FUZZED(-47576)))]), ~ (~ (_GLF_IDENTITY((GLF_merged2_0_2_54_2_2_56GLF_merged2_0_1_16_1_1_13next_virtual_gidsubgroup_sizeGLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_base[_GLF_IDENTITY(2, (_GLF_IDENTITY(true, ! (! (true))) ? _GLF_IDENTITY(2, 0 | (2)) : _GLF_FUZZED(-47576)))]), ((GLF_merged2_0_2_54_2_2_56GLF_merged2_0_1_16_1_1_13next_virtual_gidsubgroup_sizeGLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_base[_GLF_IDENTITY(2, (true ? _GLF_IDENTITY(_GLF_IDENTITY(2, 0 | (2)), (_GLF_IDENTITY(2, 0 | (2))) | 0) : _GLF_FUZZED(-47576)))])) << 0u)))) | (GLF_merged2_0_2_54_2_2_56GLF_merged2_0_1_16_1_1_13next_virtual_gidsubgroup_sizeGLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_base[_GLF_IDENTITY(2, (_GLF_IDENTITY(true ? _GLF_IDENTITY(2, _GLF_IDENTITY(0, (0) << int(_GLF_ZERO(0.0, injectionSwitch.x))) | (2)) : _GLF_FUZZED(-47576), (_GLF_IDENTITY(true ? _GLF_IDENTITY(2, _GLF_IDENTITY(0, (0) << int(_GLF_ZERO(0.0, injectionSwitch.x))) | (2)) : _GLF_FUZZED(-47576), 0 ^ (true ? _GLF_IDENTITY(2, _GLF_IDENTITY(0, (0) << int(_GLF_ZERO(0.0, injectionSwitch.x))) | (2)) : _GLF_FUZZED(-47576)))) + 0)))])), (GLF_merged2_0_2_54_2_2_56GLF_merged2_0_1_16_1_1_13next_virtual_gidsubgroup_sizeGLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_base[2]) << 0u), GLF_merged2_0_2_54_2_2_56GLF_merged2_0_1_16_1_1_13next_virtual_gidsubgroup_sizeGLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_base[3])).xy.y);
 GLF_merged4_0_1_16_1_1_13_2_1_17_3_1_14next_virtual_gidnum_workgroupsubgroup_local_idworkgroup_base.x = next_virtual_gid;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
  {
   if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))), true && (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), true && ((injectionSwitch.x < injectionSwitch.y))))), bool(bvec3(! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true, false))), ! (! _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bool(bvec3(! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true, false))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bool(bvec3(! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true, false))), bool(bvec4(_GLF_IDENTITY(! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bool(bvec3(! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true, false))), false, false, true))))))), true && ((_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bool(bvec3(! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true, false))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bool(bvec3(! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true, false))), bool(bvec4(_GLF_IDENTITY(! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bool(bvec3(! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true, false))), false, false, true)))))))))))))))
        {
         barrier();
        }
       else
        {
        }
      }
     else
      {
      }
    }
   for(int _injected_loop_counter = (1 & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > ((1 ^ 1) << _GLF_IDENTITY(int(_GLF_IDENTITY(5, _GLF_IDENTITY(_GLF_IDENTITY(min(5, 5), (false ? _GLF_FUZZED(_injected_loop_counter) : min(5, 5))), clamp(_GLF_IDENTITY(min(5, 5), (false ? _GLF_FUZZED(_injected_loop_counter) : min(5, 5))), _GLF_IDENTITY(min(5, 5), (false ? _GLF_FUZZED(_injected_loop_counter) : min(5, 5))), _GLF_IDENTITY(min(5, 5), (false ? _GLF_FUZZED(_injected_loop_counter) : min(5, 5))))))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(5), int(ivec2(_GLF_IDENTITY(int(5), (int(5)) * 1), 0))), clamp(int(5), int(5), int(5))), 0 ^ (_GLF_IDENTITY(_GLF_IDENTITY(int(5), int(ivec2(_GLF_IDENTITY(int(5), (int(5)) * 1), 0))), clamp(int(5), int(5), int(5))))), max(int(_GLF_IDENTITY(5, (5) >> 0)), int(_GLF_IDENTITY(5, (_GLF_IDENTITY(5, max(_GLF_IDENTITY(5, (5) | (5)), _GLF_IDENTITY(_GLF_IDENTITY(5, int(ivec2(5, 1))), _GLF_IDENTITY(int(ivec4(5, _GLF_IDENTITY(1, (_GLF_IDENTITY(1, clamp(1, 1, 1))) ^ 0), 0, 0)), max(int(ivec4(5, 1, 0, 0)), _GLF_IDENTITY(int(ivec4(5, 1, 0, 0)), int(ivec4(int(ivec4(5, 1, 0, 0)), 1, 0, 0))))))))) | _GLF_IDENTITY((5), (_GLF_IDENTITY((5), ~ (~ ((5))))) << 0)))))))); _injected_loop_counter --)
    {
     do
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) && true)))
                {
                 barrier();
                }
               else
                {
                }
              }
             if(_GLF_DEAD(false))
              {
               do
                {
                 barrier();
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
            }
           else
            {
            }
          }
         else
          {
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), ! (! (_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bvec2(true, true))))))))
          {
           do
            {
             if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), clamp(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(float(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + _GLF_ZERO(0.0, injectionSwitch.x)))), (true ? float(float(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + _GLF_ZERO(0.0, injectionSwitch.x)))) : _GLF_FUZZED(-96.78)))), _GLF_IDENTITY(max(injectionSwitch.x, injectionSwitch.x), (true ? _GLF_IDENTITY(max(injectionSwitch.x, injectionSwitch.x), clamp(max(injectionSwitch.x, injectionSwitch.x), _GLF_IDENTITY(max(injectionSwitch.x, injectionSwitch.x), mix(float(_GLF_FUZZED(419.777)), float(max(injectionSwitch.x, injectionSwitch.x)), bool(true))), max(injectionSwitch.x, injectionSwitch.x))) : _GLF_FUZZED(729.667)))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), max(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)))))) > injectionSwitch.y)), _GLF_IDENTITY(! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true && (! (! (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0)))))))), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), bool(bool(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), ! (! ((_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))))) && true), true), _GLF_IDENTITY(bvec2(bvec4(bvec2(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0), min(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0), _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0))) > injectionSwitch.y)), ! (! (_GLF_FALSE(false, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec3((injectionSwitch.x > injectionSwitch.y), true, false))), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec3((injectionSwitch.x > injectionSwitch.y), true, false)))) || false))))), true), true, false)), bvec2(bvec3(bvec2(bvec4(bvec2(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(2.9, -1841.9055)))).x, _GLF_IDENTITY((injectionSwitch.x) - 0.0, mix(float((injectionSwitch.x) - 0.0), float(_GLF_FUZZED(-53.54)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) > injectionSwitch.y)), ! (! (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec3((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, ! (! (true)))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (! (_GLF_IDENTITY(true, ! (! (true)))))))), false))))))), true), true, false)), true))))))))
              barrier();
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
              }
             do
              {
               if(_GLF_DEAD(false))
                barrier();
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
             if(_GLF_DEAD(false))
              barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         else
          {
          }
        }
      }
     else
      {
      }
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           _GLF_IDENTITY(GLF_merged2_0_2_54_2_2_56GLF_merged2_0_1_16_1_1_13next_virtual_gidsubgroup_sizeGLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_base.xy.x = GLF_merged4_0_1_16_1_1_13_2_1_17_3_1_14next_virtual_gidnum_workgroupsubgroup_local_idworkgroup_base.x, (true ? GLF_merged2_0_2_54_2_2_56GLF_merged2_0_1_16_1_1_13next_virtual_gidsubgroup_sizeGLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_base.xy.x = GLF_merged4_0_1_16_1_1_13_2_1_17_3_1_14next_virtual_gidnum_workgroupsubgroup_local_idworkgroup_base.x : _GLF_FUZZED(min(workgroup_size, 141599u))));
           if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, true && (false)))))))
            barrier();
          }
         else
          {
          }
        }
      }
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
        }
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (false)))))
  {
  }
 else
  {
   for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     do
      {
       if(_GLF_DEAD(false))
        barrier();
       do
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           do
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
                barrier();
               atomicStore(buf[_GLF_IDENTITY(GLF_merged2_0_3_88_3_1_13GLF_merged2_0_2_52_2_1_11GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizevirtual_gidnum_workgroup.xyz.z, _GLF_IDENTITY((GLF_merged2_0_3_88_3_1_13GLF_merged2_0_2_52_2_1_11GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizevirtual_gidnum_workgroup.xyz.z) + 0u, ((GLF_merged2_0_3_88_3_1_13GLF_merged2_0_2_52_2_1_11GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizevirtual_gidnum_workgroup.xyz.z) + 0u) - 0u))], uint(1), 4, 64, 4);
               if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
                {
                 if(_GLF_DEAD(false))
                  {
                   do
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                   barrier();
                  }
                 barrier();
                }
               if(_GLF_DEAD(false))
                barrier();
              }
             else
              {
              }
            }
           while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), (false) || false)));
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) || false)))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       barrier();
      }
    }
  }
 else
  {
  }
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)).y)) || (false)), ! (! (false))), _GLF_IDENTITY(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (injectionSwitch.x < injectionSwitch.y) || false), true)), (_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(injectionSwitch.x < injectionSwitch.y, true), bvec2(bvec4(bvec2(injectionSwitch.x < injectionSwitch.y, true), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), bool(_GLF_IDENTITY(bool(bool(bvec2(injectionSwitch.x < injectionSwitch.y, true))), (bool(bool(bvec2(injectionSwitch.x < injectionSwitch.y, true)))) || false)))) && true), bool(bool(bool(bvec2(injectionSwitch.x < injectionSwitch.y, true))))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) && (_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, false)), bool(bvec3(_GLF_IDENTITY(bool(bvec2(false, false)), false || (bool(bvec2(false, false)))), true, false)))), _GLF_IDENTITY(! (! _GLF_IDENTITY((false), bool(_GLF_IDENTITY(bvec2((false), true), bvec2(bvec2(bvec2((false), true))))))), (! (! _GLF_IDENTITY((false), bool(_GLF_IDENTITY(bvec2((false), true), bvec2(bvec2(bvec2((false), true)))))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), false || (_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (injectionSwitch.x < injectionSwitch.y) || false), true)), (_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(injectionSwitch.x < _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)), injectionSwitch)))).y, float(_GLF_IDENTITY(mat3x2(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)), injectionSwitch)))).y, mix(float(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)), injectionSwitch)))).y), float(_GLF_FUZZED(1638.4226)), bool(false))), 1.0, 0.0, 0.0, 1.0, round(length(normalize(vec3(1.0, 1.0, 1.0))))), mat3x2(0.0, 0.0, 0.0, 0.0, 0.0, 0.0) + (mat3x2(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)), injectionSwitch)))).y, mix(float(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)), injectionSwitch)))).y), float(_GLF_FUZZED(1638.4226)), bool(false))), 1.0, 0.0, 0.0, 1.0, round(length(normalize(vec3(1.0, 1.0, 1.0))))))))), true), bvec2(bvec4(bvec2(injectionSwitch.x < injectionSwitch.y, true), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), bool(_GLF_IDENTITY(bool(bool(bvec2(injectionSwitch.x < injectionSwitch.y, true))), (bool(bool(bvec2(injectionSwitch.x < injectionSwitch.y, true)))) || false)))) && true), bool(bool(bool(bvec2(injectionSwitch.x < injectionSwitch.y, true))))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) && (_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, false)), bool(bvec3(_GLF_IDENTITY(bool(bvec2(false, false)), false || (bool(bvec2(false, false)))), true, false)))), _GLF_IDENTITY(! (! _GLF_IDENTITY((false), bool(_GLF_IDENTITY(bvec2((false), true), bvec2(bvec2(bvec2((false), true))))))), (! (! _GLF_IDENTITY((false), bool(_GLF_IDENTITY(bvec2((false), true), bvec2(bvec2(bvec2((false), true)))))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))), bool(bvec3(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)).y)) || (false)), ! (! (false))), _GLF_IDENTITY(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (injectionSwitch.x < injectionSwitch.y) || false), true)), (_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(injectionSwitch.x < injectionSwitch.y, true), bvec2(bvec4(bvec2(injectionSwitch.x < injectionSwitch.y, true), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), bool(_GLF_IDENTITY(bool(bool(bvec2(injectionSwitch.x < injectionSwitch.y, true))), (bool(bool(bvec2(injectionSwitch.x < injectionSwitch.y, true)))) || false)))) && true), bool(bool(bool(bvec2(injectionSwitch.x < injectionSwitch.y, true))))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) && (_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, false)), bool(bvec3(_GLF_IDENTITY(bool(bvec2(false, false)), false || (bool(bvec2(false, false)))), true, false)))), _GLF_IDENTITY(! (! _GLF_IDENTITY((false), bool(_GLF_IDENTITY(bvec2((false), true), bvec2(bvec2(bvec2((false), true))))))), (! (! _GLF_IDENTITY((false), bool(_GLF_IDENTITY(bvec2((false), true), bvec2(bvec2(bvec2((false), true)))))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), false || (_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (injectionSwitch.x < injectionSwitch.y) || false), true)), (_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(injectionSwitch.x < _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)), injectionSwitch)))).y, float(_GLF_IDENTITY(mat3x2(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)), injectionSwitch)))).y, mix(float(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)), injectionSwitch)))).y), float(_GLF_FUZZED(1638.4226)), bool(false))), 1.0, 0.0, 0.0, 1.0, round(length(normalize(vec3(1.0, 1.0, 1.0))))), mat3x2(0.0, 0.0, 0.0, 0.0, 0.0, 0.0) + (mat3x2(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)), injectionSwitch)))).y, mix(float(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)), injectionSwitch)))).y), float(_GLF_FUZZED(1638.4226)), bool(false))), 1.0, 0.0, 0.0, 1.0, round(length(normalize(vec3(1.0, 1.0, 1.0))))))))), true), bvec2(bvec4(bvec2(injectionSwitch.x < injectionSwitch.y, true), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), bool(_GLF_IDENTITY(bool(bool(bvec2(injectionSwitch.x < injectionSwitch.y, true))), (bool(bool(bvec2(injectionSwitch.x < injectionSwitch.y, true)))) || false)))) && true), bool(bool(bool(bvec2(injectionSwitch.x < injectionSwitch.y, true))))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) && (_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, false)), bool(bvec3(_GLF_IDENTITY(bool(bvec2(false, false)), false || (bool(bvec2(false, false)))), true, false)))), _GLF_IDENTITY(! (! _GLF_IDENTITY((false), bool(_GLF_IDENTITY(bvec2((false), true), bvec2(bvec2(bvec2((false), true))))))), (! (! _GLF_IDENTITY((false), bool(_GLF_IDENTITY(bvec2((false), true), bvec2(bvec2(bvec2((false), true)))))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   else
    {
     for(int _injected_loop_counter = ((int(_GLF_ONE(1.0, injectionSwitch.y)) | 1) & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 | ((0 | 0) | 0))); _injected_loop_counter --)
      {
       if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bool(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (false)))))), (injectionSwitch.x > injectionSwitch.y))))))) || false), bool(bvec3(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_IDENTITY(true, true && (true))))))
        barrier();
      }
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
          {
           barrier();
          }
        }
      }
     else
      {
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (false)))))
            {
            }
           else
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               barrier();
              }
             else
              {
              }
            }
          }
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     do
      {
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
          {
           barrier();
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 do
  {
   do
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (true)))))
        {
         barrier();
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], min(_GLF_IDENTITY(injectionSwitch[0], max(injectionSwitch[0], injectionSwitch[0])), injectionSwitch[0])), injectionSwitch[1])), _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)))), injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), (injectionSwitch) / vec2(1.0, 1.0)))).x > injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - sqrt(vec2(0.0, 0.0))), _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch))) - _GLF_IDENTITY(vec2(0.0, _GLF_IDENTITY(0.0, (0.0) + 0.0)), vec2(0.0, 0.0) + (vec2(0.0, 0.0))), min(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch))), vec2(1.0, 1.0) * _GLF_IDENTITY(((_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))), clamp(((_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))), ((_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))), ((_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch))))))) - vec2(0.0, _GLF_IDENTITY(0.0, (_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (! (injectionSwitch.x < injectionSwitch.y)))), bool(bvec4(! (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (! (injectionSwitch.x < injectionSwitch.y)))), false, true, true))))))) ? 0.0 : _GLF_FUZZED(5563.6092)))), mix(vec2(_GLF_FUZZED((+ -98.90)), _GLF_IDENTITY(((_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch))) - vec2(0.0, 0.0))[1], clamp(_GLF_IDENTITY(((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch))) / vec2(1.0, 1.0))) - vec2(0.0, 0.0)), min(_GLF_IDENTITY(((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch))) / vec2(1.0, 1.0))) - vec2(0.0, 0.0)), max(((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch))) / vec2(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(distance(vec2(3.0, 727.239), injectionSwitch)) : 1.0)), 1.0))) - _GLF_IDENTITY(vec2(0.0, 0.0), min(vec2(0.0, 0.0), vec2(0.0, 0.0)))), ((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch))) / vec2(1.0, 1.0))) - vec2(0.0, 0.0)))), _GLF_IDENTITY(((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch))) / vec2(1.0, 1.0))) - vec2(0.0, 0.0)), vec2(vec3(((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch))) / vec2(1.0, 1.0))) - vec2(0.0, 0.0)), abs(1.0))))))[1], ((_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch))) - vec2(0.0, 0.0))[1], ((_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch))) - vec2(0.0, 0.0))[1]))), vec2(((_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch))) - vec2(0.0, 0.0))[0], _GLF_FUZZED(_GLF_IDENTITY(vec2(-6.2, 2184.3014), max(vec2(-6.2, 2184.3014), vec2(-6.2, 2184.3014))).r)), bvec2(true, _GLF_IDENTITY(false, bool(bvec3(false, true, false)))))), (_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), injectionSwitch))) - vec2(0.0, 0.0)))).x, mix(float(injectionSwitch.x), float(_GLF_FUZZED((+ -1.3))), bool(_GLF_IDENTITY(false, true && (false))))) > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), ! (! (! ((injectionSwitch.x > injectionSwitch.y))))))))))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)))), _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch))) + vec2(0.0, 0.0)))).x > injectionSwitch.y, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch))) + vec2(0.0, 0.0)))).x > injectionSwitch.y, bool(bvec2(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch))) + vec2(0.0, 0.0)))).x > injectionSwitch.y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))) || false)))))
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           do
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 if(_GLF_DEAD(false))
                  {
                   do
                    {
                     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (true)))))
                      {
                       barrier();
                      }
                     else
                      {
                      }
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                  }
                 barrier();
                }
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
            {
             barrier();
            }
          }
        }
       do
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             do
              {
               barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
          }
         else
          {
          }
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
          {
           for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), min(int(1), _GLF_IDENTITY(int(1), (int(1)) | (int(1))))))) >> _GLF_IDENTITY(int(1), int(1))); _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
            {
             barrier();
            }
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             barrier();
            }
           else
            {
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
       do
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       barrier();
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       do
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2)))); _injected_loop_counter ++)
          {
           barrier();
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  barrier();
 atomicStore(buf[_GLF_IDENTITY(GLF_merged2_0_2_54_2_2_56GLF_merged2_0_1_16_1_1_13next_virtual_gidsubgroup_sizeGLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_base, clamp(_GLF_IDENTITY(GLF_merged2_0_2_54_2_2_56GLF_merged2_0_1_16_1_1_13next_virtual_gidsubgroup_sizeGLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_base, _GLF_IDENTITY(uvec4(0u, 0u, 0u, 0u), ~ (~ (uvec4(_GLF_IDENTITY(0u, 0u | (_GLF_IDENTITY(0u, clamp(0u, _GLF_IDENTITY(0u, max(0u, _GLF_IDENTITY(0u, min(0u, 0u)))), 0u)))), 0u, 0u, 0u)))) ^ _GLF_IDENTITY((GLF_merged2_0_2_54_2_2_56GLF_merged2_0_1_16_1_1_13next_virtual_gidsubgroup_sizeGLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_base), ((GLF_merged2_0_2_54_2_2_56GLF_merged2_0_1_16_1_1_13next_virtual_gidsubgroup_sizeGLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_base)) << uvec4(0u, 0u, 0u, 0u))), GLF_merged2_0_2_54_2_2_56GLF_merged2_0_1_16_1_1_13next_virtual_gidsubgroup_sizeGLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_base, _GLF_IDENTITY(GLF_merged2_0_2_54_2_2_56GLF_merged2_0_1_16_1_1_13next_virtual_gidsubgroup_sizeGLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_base, max(GLF_merged2_0_2_54_2_2_56GLF_merged2_0_1_16_1_1_13next_virtual_gidsubgroup_sizeGLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_base, GLF_merged2_0_2_54_2_2_56GLF_merged2_0_1_16_1_1_13next_virtual_gidsubgroup_sizeGLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_base)))).xy.x], uint(2), 4, 64, 4);
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(_GLF_IDENTITY(int(3), clamp(_GLF_IDENTITY(int(3), _GLF_IDENTITY((_GLF_IDENTITY(int(3), 1 * (int(3)))) << 0, int(_GLF_IDENTITY(ivec2(_GLF_IDENTITY((_GLF_IDENTITY(int(3), 1 * (int(3)))) << 0, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY((_GLF_IDENTITY(int(3), 1 * (_GLF_IDENTITY(int(3), clamp(_GLF_IDENTITY(int(3), (int(3)) ^ 0), int(3), int(3)))))) << 0, ~ (~ ((_GLF_IDENTITY(int(3), 1 * (int(3)))) << 0)))), max(~ (_GLF_IDENTITY((_GLF_IDENTITY(int(3), 1 * (int(3)))) << _GLF_IDENTITY(0, max(0, 0)), ~ (~ ((_GLF_IDENTITY(int(3), 1 * (int(3)))) << 0)))), ~ (_GLF_IDENTITY((_GLF_IDENTITY(int(3), 1 * _GLF_IDENTITY((int(3)), max((int(3)), (int(3)))))) << 0, ~ (~ ((_GLF_IDENTITY(int(3), 1 * (int(3)))) << 0)))))))), int(_GLF_ONE(1.0, injectionSwitch.y))), clamp(ivec2(_GLF_IDENTITY((_GLF_IDENTITY(int(3), 1 * (int(3)))) << 0, ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (_GLF_IDENTITY((_GLF_IDENTITY(int(3), 1 * (int(3)))) << 0, ~ (~ ((_GLF_IDENTITY(int(3), 1 * (int(3)))) << 0)))), max(~ (_GLF_IDENTITY((_GLF_IDENTITY(int(3), 1 * (int(3)))) << 0, ~ (~ ((_GLF_IDENTITY(int(3), 1 * (int(3)))) << 0)))), ~ (_GLF_IDENTITY((_GLF_IDENTITY(int(3), 1 * (int(3)))) << 0, ~ (~ ((_GLF_IDENTITY(int(3), 1 * (int(3)))) << 0)))))), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (_GLF_IDENTITY((_GLF_IDENTITY(int(3), 1 * (int(3)))) << 0, ~ (~ ((_GLF_IDENTITY(int(3), 1 * (int(3)))) << 0)))), max(~ (_GLF_IDENTITY((_GLF_IDENTITY(int(3), 1 * (int(3)))) << 0, ~ (~ ((_GLF_IDENTITY(int(3), 1 * (int(3)))) << 0)))), ~ (_GLF_IDENTITY((_GLF_IDENTITY(int(3), 1 * (int(3)))) << 0, ~ (~ ((_GLF_IDENTITY(int(3), 1 * (int(3)))) << 0)))))), ~ (~ (_GLF_IDENTITY(~ (_GLF_IDENTITY((_GLF_IDENTITY(int(3), 1 * (int(3)))) << 0, ~ (_GLF_IDENTITY(~ ((_GLF_IDENTITY(int(3), 1 * (int(3)))) << 0), (~ ((_GLF_IDENTITY(int(3), 1 * (int(3)))) << 0)) >> (int(_GLF_ZERO(0.0, injectionSwitch.x)) << _GLF_IDENTITY(int(5), int(5))))))), max(~ (_GLF_IDENTITY((_GLF_IDENTITY(int(3), 1 * (int(3)))) << 0, ~ (~ ((_GLF_IDENTITY(int(3), 1 * (int(3)))) << 0)))), ~ (_GLF_IDENTITY((_GLF_IDENTITY(int(3), 1 * (int(3)))) << 0, ~ (~ ((_GLF_IDENTITY(int(3), 1 * (_GLF_IDENTITY(int(3), (int(3)) >> 0)))) << 0)))))))))))))), int(_GLF_ONE(1.0, injectionSwitch.y))), ivec2(_GLF_IDENTITY((_GLF_IDENTITY(int(3), 1 * (int(3)))) << 0, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY((_GLF_IDENTITY(int(3), 1 * (int(3)))) << 0, ~ (~ ((_GLF_IDENTITY(int(3), _GLF_IDENTITY(1 * (int(3)), ~ (_GLF_IDENTITY(~ (1 * (int(3))), ~ (~ (~ (1 * (int(3)))))))))) << 0)))), max(~ (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(int(3), ~ (~ (int(3)))), 1 * (int(3)))) << 0, ~ (~ ((_GLF_IDENTITY(int(3), 1 * (int(3)))) << 0)))), ~ (_GLF_IDENTITY((_GLF_IDENTITY(int(3), 1 * _GLF_IDENTITY((int(3)), (0 << _GLF_IDENTITY(int(6), int(6))) ^ (_GLF_IDENTITY((int(3)), min((int(3)), (int(3)))))))) << 0, ~ (~ ((_GLF_IDENTITY(int(3), 1 * (int(3)))) << 0)))))))), int(_GLF_ONE(1.0, injectionSwitch.y))), ivec2(_GLF_IDENTITY((_GLF_IDENTITY(int(3), 1 * (int(3)))) << 0, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY((_GLF_IDENTITY(int(3), 1 * (int(3)))) << 0, ~ (~ ((_GLF_IDENTITY(int(3), 1 * (int(3)))) << 0)))), max(~ (_GLF_IDENTITY((_GLF_IDENTITY(int(3), 1 * (int(3)))) << 0, ~ (~ ((_GLF_IDENTITY(int(3), 1 * (int(3)))) << 0)))), ~ (_GLF_IDENTITY((_GLF_IDENTITY(int(3), 1 * (int(3)))) << 0, ~ (~ ((_GLF_IDENTITY(int(3), 1 * (int(_GLF_IDENTITY(3, min(3, 3)))))) << 0)))))))), int(_GLF_ONE(1.0, injectionSwitch.y)))))))), _GLF_IDENTITY(int(3), min(int(3), int(3))), int(3))), ~ (~ _GLF_IDENTITY((_GLF_IDENTITY(int(3), (false ? _GLF_FUZZED(92126) : int(3)))), 1 * (_GLF_IDENTITY((_GLF_IDENTITY(int(3), (false ? _GLF_FUZZED(92126) : int(3)))), int(_GLF_IDENTITY(int(_GLF_IDENTITY((_GLF_IDENTITY(int(3), (_GLF_IDENTITY(false, false || (false)) ? _GLF_FUZZED(92126) : int(3)))), 1 * ((_GLF_IDENTITY(int(3), (_GLF_IDENTITY(false, false || (false)) ? _GLF_FUZZED(92126) : int(3))))))), (int((_GLF_IDENTITY(int(3), (false ? _GLF_FUZZED(92126) : int(3)))))) >> 0))))))))) >> _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), int(ivec2(_GLF_IDENTITY(int(3), ~ (~ (int(3)))), 0)))))); _injected_loop_counter ++)
        {
         barrier();
        }
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         else
          {
          }
        }
       else
        {
        }
      }
     if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false), true && (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         barrier();
        }
      }
     barrier();
    }
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
