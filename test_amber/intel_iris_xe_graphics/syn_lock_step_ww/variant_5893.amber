#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(_GLF_IDENTITY(vec4(injectionSwitch, 0.0, 0.0), (true ? _GLF_IDENTITY(vec4(injectionSwitch, 0.0, 0.0), clamp(vec4(injectionSwitch, 0.0, 0.0), vec4(injectionSwitch, 0.0, 0.0), vec4(injectionSwitch, 0.0, 0.0))) : _GLF_FUZZED(vec4(7.8, 9.9, 57.06, 456.409))))), clamp(vec2(_GLF_IDENTITY(vec4(injectionSwitch, 0.0, 0.0), (true ? _GLF_IDENTITY(vec4(injectionSwitch, 0.0, 0.0), clamp(vec4(injectionSwitch, 0.0, _GLF_IDENTITY(0.0, 1.0 * (0.0))), vec4(injectionSwitch, 0.0, 0.0), vec4(injectionSwitch, 0.0, _GLF_IDENTITY(0.0, min(0.0, _GLF_IDENTITY(0.0, (0.0) / 1.0)))))) : _GLF_FUZZED(vec4(7.8, 9.9, 57.06, 456.409))))), vec2(_GLF_IDENTITY(vec4(injectionSwitch, 0.0, 0.0), (true ? _GLF_IDENTITY(vec4(injectionSwitch, 0.0, 0.0), clamp(vec4(injectionSwitch, 0.0, 0.0), vec4(injectionSwitch, 0.0, 0.0), vec4(injectionSwitch, 0.0, 0.0))) : _GLF_FUZZED(vec4(7.8, 9.9, 57.06, 456.409))))), vec2(_GLF_IDENTITY(vec4(injectionSwitch, 0.0, 0.0), (true ? _GLF_IDENTITY(vec4(injectionSwitch, 0.0, 0.0), clamp(vec4(injectionSwitch, 0.0, 0.0), vec4(injectionSwitch, 0.0, 0.0), vec4(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(89.50), (injectionSwitch)[1]), vec2(_GLF_IDENTITY((injectionSwitch)[0], ((injectionSwitch)[0]) - 0.0), _GLF_FUZZED(-7.7)), bvec2(true, false))), 0.0, 0.0))) : _GLF_FUZZED(vec4(7.8, 9.9, 57.06, 456.409)))))))), (_GLF_IDENTITY(true ? _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(_GLF_IDENTITY(vec4(injectionSwitch, 0.0, 0.0), (true ? _GLF_IDENTITY(vec4(injectionSwitch, 0.0, 0.0), clamp(vec4(injectionSwitch, 0.0, 0.0), vec4(injectionSwitch, 0.0, 0.0), vec4(injectionSwitch, 0.0, 0.0))) : _GLF_FUZZED(vec4(7.8, 9.9, 57.06, 456.409))))), clamp(vec2(_GLF_IDENTITY(vec4(injectionSwitch, 0.0, 0.0), (true ? _GLF_IDENTITY(vec4(injectionSwitch, 0.0, 0.0), clamp(vec4(injectionSwitch, 0.0, 0.0), vec4(injectionSwitch, 0.0, 0.0), _GLF_IDENTITY(vec4(injectionSwitch, 0.0, 0.0), min(_GLF_IDENTITY(vec4(injectionSwitch, 0.0, 0.0), (vec4(injectionSwitch, 0.0, 0.0)) / vec4(1.0, 1.0, 1.0, 1.0)), vec4(injectionSwitch, 0.0, 0.0))))) : _GLF_FUZZED(vec4(7.8, 9.9, 57.06, 456.409))))), _GLF_IDENTITY(vec2(_GLF_IDENTITY(_GLF_IDENTITY(vec4(injectionSwitch, 0.0, 0.0), clamp(vec4(injectionSwitch, 0.0, 0.0), _GLF_IDENTITY(vec4(injectionSwitch, 0.0, 0.0), min(vec4(injectionSwitch, 0.0, 0.0), vec4(injectionSwitch, 0.0, 0.0))), vec4(injectionSwitch, 0.0, 0.0))), (true ? _GLF_IDENTITY(vec4(injectionSwitch, 0.0, 0.0), clamp(vec4(injectionSwitch, 0.0, 0.0), vec4(injectionSwitch, 0.0, 0.0), vec4(injectionSwitch, 0.0, 0.0))) : _GLF_FUZZED(vec4(7.8, 9.9, 57.06, 456.409))))), min(vec2(_GLF_IDENTITY(vec4(injectionSwitch, 0.0, 0.0), (true ? _GLF_IDENTITY(vec4(injectionSwitch, 0.0, 0.0), _GLF_IDENTITY(clamp(vec4(injectionSwitch, 0.0, 0.0), vec4(injectionSwitch, 0.0, 0.0), vec4(injectionSwitch, 0.0, 0.0)), (_GLF_IDENTITY(clamp(vec4(injectionSwitch, 0.0, 0.0), vec4(injectionSwitch, 0.0, 0.0), vec4(injectionSwitch, 0.0, 0.0)), mix(vec4((clamp(vec4(injectionSwitch, 0.0, 0.0), vec4(injectionSwitch, 0.0, 0.0), vec4(injectionSwitch, 0.0, 0.0)))[0], _GLF_FUZZED(-954.236), _GLF_FUZZED((-9.4 - -7844.0208)), (clamp(vec4(injectionSwitch, 0.0, 0.0), vec4(injectionSwitch, 0.0, 0.0), vec4(injectionSwitch, 0.0, 0.0)))[3]), vec4(_GLF_FUZZED(-76.02), (clamp(vec4(injectionSwitch, 0.0, 0.0), vec4(injectionSwitch, 0.0, 0.0), vec4(injectionSwitch, 0.0, 0.0)))[1], (clamp(vec4(injectionSwitch, 0.0, 0.0), vec4(injectionSwitch, 0.0, 0.0), vec4(injectionSwitch, 0.0, 0.0)))[2], _GLF_FUZZED(-3317.6669)), bvec4(false, true, true, false)))) - vec4(0.0, 0.0, 0.0, 0.0))) : _GLF_FUZZED(vec4(7.8, 9.9, 57.06, 456.409))))), vec2(_GLF_IDENTITY(vec4(injectionSwitch, 0.0, 0.0), (true ? _GLF_IDENTITY(vec4(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat3x2(injectionSwitch, _GLF_IDENTITY(dot(vec4(sin(0.0), 0.0, 0.0, 1.0), vec4(tan(0.0), 0.0, 0.0, 1.0)), dot(vec4(sin(0.0), 0.0, 0.0, 1.0), vec4(tan(0.0), 0.0, 0.0, 1.0))), 1.0, 0.0, 0.0)), max(vec2(mat3x2(injectionSwitch, _GLF_IDENTITY(dot(vec4(sin(0.0), 0.0, 0.0, 1.0), vec4(tan(0.0), 0.0, 0.0, 1.0)), dot(vec4(sin(0.0), 0.0, 0.0, 1.0), vec4(tan(0.0), 0.0, 0.0, 1.0))), 1.0, 0.0, 0.0)), vec2(mat3x2(injectionSwitch, _GLF_IDENTITY(dot(vec4(sin(0.0), 0.0, 0.0, 1.0), vec4(tan(0.0), 0.0, 0.0, 1.0)), dot(vec4(sin(0.0), 0.0, 0.0, 1.0), vec4(tan(0.0), 0.0, 0.0, 1.0))), 1.0, 0.0, 0.0))))), 0.0, 0.0), clamp(vec4(injectionSwitch, 0.0, 0.0), vec4(injectionSwitch, 0.0, 0.0), vec4(injectionSwitch, 0.0, 0.0))) : _GLF_FUZZED(vec4(7.8, 9.9, 57.06, 456.409))))))), _GLF_IDENTITY(vec2(_GLF_IDENTITY(vec4(injectionSwitch, 0.0, 0.0), (true ? _GLF_IDENTITY(vec4(injectionSwitch, 0.0, 0.0), clamp(vec4(injectionSwitch, 0.0, 0.0), vec4(injectionSwitch, 0.0, 0.0), vec4(injectionSwitch, 0.0, 0.0))) : _GLF_IDENTITY(_GLF_FUZZED(vec4(7.8, 9.9, 57.06, 456.409)), min(_GLF_IDENTITY(_GLF_FUZZED(vec4(7.8, 9.9, 57.06, 456.409)), vec4(_GLF_IDENTITY(vec4(_GLF_FUZZED(vec4(7.8, 9.9, 57.06, 456.409))), mix(vec4((vec4(_GLF_FUZZED(vec4(7.8, 9.9, 57.06, 456.409))))[0], _GLF_FUZZED(-46.26), _GLF_FUZZED(6.0), (vec4(_GLF_FUZZED(vec4(7.8, 9.9, 57.06, 456.409))))[3]), vec4(_GLF_FUZZED(15.21), (vec4(_GLF_FUZZED(vec4(7.8, 9.9, 57.06, 456.409))))[1], (vec4(_GLF_FUZZED(vec4(7.8, 9.9, 57.06, 456.409))))[2], _GLF_FUZZED(866.806)), bvec4(false, true, true, false))))), _GLF_FUZZED(vec4(7.8, 9.9, 57.06, 456.409))))))), vec2(1.0, 1.0) * (vec2(_GLF_IDENTITY(vec4(injectionSwitch, 0.0, 0.0), (true ? _GLF_IDENTITY(vec4(injectionSwitch, 0.0, 0.0), clamp(vec4(injectionSwitch, 0.0, 0.0), vec4(injectionSwitch, 0.0, 0.0), vec4(injectionSwitch, 0.0, 0.0))) : _GLF_IDENTITY(_GLF_FUZZED(vec4(7.8, 9.9, 57.06, 456.409)), min(_GLF_IDENTITY(_GLF_FUZZED(vec4(7.8, 9.9, 57.06, 456.409)), vec4(_GLF_IDENTITY(vec4(_GLF_FUZZED(vec4(7.8, 9.9, 57.06, 456.409))), mix(vec4((vec4(_GLF_FUZZED(vec4(7.8, 9.9, 57.06, 456.409))))[0], _GLF_FUZZED(-46.26), _GLF_FUZZED(6.0), (vec4(_GLF_FUZZED(vec4(7.8, 9.9, 57.06, 456.409))))[3]), vec4(_GLF_FUZZED(15.21), (vec4(_GLF_FUZZED(vec4(7.8, 9.9, 57.06, 456.409))))[1], (vec4(_GLF_FUZZED(vec4(7.8, 9.9, 57.06, 456.409))))[2], _GLF_FUZZED(866.806)), bvec4(false, true, true, false))))), _GLF_FUZZED(vec4(7.8, 9.9, 57.06, 456.409)))))))))))) : _GLF_FUZZED(injectionSwitch), min(true ? _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(_GLF_IDENTITY(vec4(injectionSwitch, 0.0, 0.0), (true ? _GLF_IDENTITY(vec4(injectionSwitch, 0.0, 0.0), clamp(vec4(injectionSwitch, 0.0, 0.0), vec4(injectionSwitch, 0.0, 0.0), vec4(injectionSwitch, 0.0, 0.0))) : _GLF_FUZZED(vec4(7.8, 9.9, 57.06, 456.409))))), clamp(vec2(_GLF_IDENTITY(vec4(injectionSwitch, 0.0, 0.0), (true ? _GLF_IDENTITY(vec4(injectionSwitch, 0.0, 0.0), clamp(vec4(injectionSwitch, 0.0, 0.0), vec4(injectionSwitch, 0.0, 0.0), _GLF_IDENTITY(vec4(injectionSwitch, 0.0, 0.0), min(_GLF_IDENTITY(vec4(injectionSwitch, 0.0, 0.0), (vec4(injectionSwitch, 0.0, 0.0)) / vec4(1.0, 1.0, 1.0, 1.0)), vec4(injectionSwitch, 0.0, 0.0))))) : _GLF_FUZZED(vec4(7.8, 9.9, 57.06, 456.409))))), _GLF_IDENTITY(vec2(_GLF_IDENTITY(_GLF_IDENTITY(vec4(injectionSwitch, 0.0, 0.0), clamp(vec4(injectionSwitch, 0.0, 0.0), _GLF_IDENTITY(vec4(injectionSwitch, 0.0, 0.0), min(vec4(injectionSwitch, 0.0, 0.0), vec4(injectionSwitch, 0.0, 0.0))), vec4(injectionSwitch, 0.0, 0.0))), (true ? _GLF_IDENTITY(vec4(injectionSwitch, 0.0, 0.0), clamp(vec4(injectionSwitch, 0.0, 0.0), vec4(injectionSwitch, 0.0, 0.0), vec4(injectionSwitch, 0.0, 0.0))) : _GLF_FUZZED(vec4(7.8, 9.9, 57.06, 456.409))))), min(vec2(_GLF_IDENTITY(vec4(injectionSwitch, 0.0, 0.0), (true ? _GLF_IDENTITY(vec4(injectionSwitch, 0.0, 0.0), _GLF_IDENTITY(clamp(vec4(injectionSwitch, 0.0, 0.0), vec4(injectionSwitch, 0.0, 0.0), vec4(injectionSwitch, 0.0, 0.0)), (_GLF_IDENTITY(clamp(vec4(injectionSwitch, 0.0, 0.0), vec4(injectionSwitch, 0.0, 0.0), vec4(injectionSwitch, 0.0, 0.0)), mix(vec4((clamp(vec4(injectionSwitch, 0.0, 0.0), vec4(injectionSwitch, 0.0, 0.0), vec4(injectionSwitch, 0.0, 0.0)))[0], _GLF_FUZZED(-954.236), _GLF_FUZZED((-9.4 - -7844.0208)), (clamp(vec4(injectionSwitch, 0.0, 0.0), vec4(injectionSwitch, 0.0, 0.0), vec4(injectionSwitch, 0.0, 0.0)))[3]), vec4(_GLF_FUZZED(-76.02), (clamp(vec4(injectionSwitch, 0.0, 0.0), vec4(injectionSwitch, 0.0, 0.0), vec4(injectionSwitch, 0.0, 0.0)))[1], (clamp(vec4(injectionSwitch, 0.0, 0.0), vec4(injectionSwitch, 0.0, 0.0), vec4(injectionSwitch, 0.0, 0.0)))[2], _GLF_FUZZED(-3317.6669)), bvec4(false, true, true, false)))) - vec4(0.0, 0.0, 0.0, 0.0))) : _GLF_FUZZED(vec4(7.8, 9.9, 57.06, 456.409))))), vec2(_GLF_IDENTITY(vec4(injectionSwitch, 0.0, 0.0), (true ? _GLF_IDENTITY(vec4(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat3x2(injectionSwitch, _GLF_IDENTITY(dot(vec4(sin(0.0), 0.0, 0.0, 1.0), vec4(tan(0.0), 0.0, 0.0, 1.0)), dot(vec4(sin(0.0), 0.0, 0.0, 1.0), vec4(tan(0.0), 0.0, 0.0, 1.0))), 1.0, 0.0, 0.0)), max(vec2(mat3x2(injectionSwitch, _GLF_IDENTITY(dot(vec4(sin(0.0), 0.0, 0.0, 1.0), vec4(tan(0.0), 0.0, 0.0, 1.0)), dot(vec4(sin(0.0), 0.0, 0.0, 1.0), vec4(tan(0.0), 0.0, 0.0, 1.0))), 1.0, 0.0, 0.0)), vec2(mat3x2(injectionSwitch, _GLF_IDENTITY(dot(vec4(sin(0.0), 0.0, 0.0, 1.0), vec4(tan(0.0), 0.0, 0.0, 1.0)), dot(vec4(sin(0.0), 0.0, 0.0, 1.0), vec4(tan(0.0), 0.0, 0.0, 1.0))), 1.0, 0.0, 0.0))))), 0.0, 0.0), clamp(vec4(injectionSwitch, 0.0, 0.0), vec4(injectionSwitch, 0.0, 0.0), vec4(injectionSwitch, 0.0, 0.0))) : _GLF_FUZZED(vec4(7.8, 9.9, 57.06, 456.409))))))), _GLF_IDENTITY(vec2(_GLF_IDENTITY(vec4(injectionSwitch, 0.0, 0.0), (true ? _GLF_IDENTITY(vec4(injectionSwitch, 0.0, 0.0), clamp(vec4(injectionSwitch, 0.0, 0.0), vec4(injectionSwitch, 0.0, 0.0), vec4(injectionSwitch, 0.0, 0.0))) : _GLF_IDENTITY(_GLF_FUZZED(vec4(7.8, 9.9, 57.06, 456.409)), min(_GLF_IDENTITY(_GLF_FUZZED(vec4(7.8, 9.9, 57.06, 456.409)), vec4(_GLF_IDENTITY(vec4(_GLF_FUZZED(vec4(7.8, 9.9, 57.06, 456.409))), mix(vec4((vec4(_GLF_FUZZED(vec4(7.8, 9.9, 57.06, 456.409))))[0], _GLF_FUZZED(-46.26), _GLF_FUZZED(6.0), (vec4(_GLF_FUZZED(vec4(7.8, 9.9, 57.06, 456.409))))[3]), vec4(_GLF_FUZZED(15.21), (vec4(_GLF_FUZZED(vec4(7.8, 9.9, 57.06, 456.409))))[1], (vec4(_GLF_FUZZED(vec4(7.8, 9.9, 57.06, 456.409))))[2], _GLF_FUZZED(866.806)), bvec4(false, true, true, false))))), _GLF_FUZZED(vec4(7.8, 9.9, 57.06, 456.409))))))), vec2(1.0, 1.0) * (vec2(_GLF_IDENTITY(vec4(injectionSwitch, 0.0, 0.0), (true ? _GLF_IDENTITY(vec4(injectionSwitch, 0.0, 0.0), clamp(vec4(injectionSwitch, 0.0, 0.0), vec4(injectionSwitch, 0.0, 0.0), vec4(injectionSwitch, 0.0, 0.0))) : _GLF_IDENTITY(_GLF_FUZZED(vec4(7.8, 9.9, 57.06, 456.409)), min(_GLF_IDENTITY(_GLF_FUZZED(vec4(7.8, 9.9, 57.06, 456.409)), vec4(_GLF_IDENTITY(vec4(_GLF_FUZZED(vec4(7.8, 9.9, 57.06, 456.409))), mix(vec4((vec4(_GLF_FUZZED(vec4(7.8, 9.9, 57.06, 456.409))))[0], _GLF_FUZZED(-46.26), _GLF_FUZZED(6.0), (vec4(_GLF_FUZZED(vec4(7.8, 9.9, 57.06, 456.409))))[3]), vec4(_GLF_FUZZED(15.21), (vec4(_GLF_FUZZED(vec4(7.8, 9.9, 57.06, 456.409))))[1], (vec4(_GLF_FUZZED(vec4(7.8, 9.9, 57.06, 456.409))))[2], _GLF_FUZZED(866.806)), bvec4(false, true, true, false))))), _GLF_FUZZED(vec4(7.8, 9.9, 57.06, 456.409)))))))))))) : _GLF_FUZZED(injectionSwitch), _GLF_IDENTITY(true ? _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(_GLF_IDENTITY(vec4(injectionSwitch, 0.0, 0.0), (true ? _GLF_IDENTITY(vec4(injectionSwitch, 0.0, 0.0), clamp(vec4(injectionSwitch, 0.0, 0.0), vec4(injectionSwitch, 0.0, 0.0), vec4(injectionSwitch, 0.0, 0.0))) : _GLF_FUZZED(vec4(7.8, 9.9, 57.06, 456.409))))), clamp(vec2(_GLF_IDENTITY(vec4(injectionSwitch, 0.0, 0.0), (true ? _GLF_IDENTITY(vec4(injectionSwitch, 0.0, 0.0), clamp(vec4(injectionSwitch, 0.0, 0.0), vec4(injectionSwitch, 0.0, 0.0), _GLF_IDENTITY(vec4(injectionSwitch, 0.0, 0.0), min(_GLF_IDENTITY(vec4(injectionSwitch, 0.0, 0.0), (vec4(injectionSwitch, 0.0, 0.0)) / vec4(1.0, 1.0, 1.0, 1.0)), vec4(injectionSwitch, 0.0, 0.0))))) : _GLF_FUZZED(vec4(7.8, 9.9, 57.06, 456.409))))), _GLF_IDENTITY(vec2(_GLF_IDENTITY(_GLF_IDENTITY(vec4(injectionSwitch, 0.0, 0.0), clamp(vec4(injectionSwitch, 0.0, 0.0), _GLF_IDENTITY(vec4(injectionSwitch, 0.0, 0.0), min(vec4(injectionSwitch, 0.0, 0.0), vec4(injectionSwitch, 0.0, 0.0))), vec4(injectionSwitch, 0.0, 0.0))), (true ? _GLF_IDENTITY(vec4(injectionSwitch, 0.0, 0.0), clamp(vec4(injectionSwitch, 0.0, 0.0), vec4(injectionSwitch, 0.0, 0.0), vec4(injectionSwitch, 0.0, 0.0))) : _GLF_FUZZED(vec4(7.8, 9.9, 57.06, 456.409))))), min(vec2(_GLF_IDENTITY(vec4(injectionSwitch, 0.0, 0.0), (true ? _GLF_IDENTITY(vec4(injectionSwitch, 0.0, 0.0), _GLF_IDENTITY(clamp(vec4(injectionSwitch, 0.0, 0.0), vec4(injectionSwitch, 0.0, 0.0), vec4(injectionSwitch, 0.0, 0.0)), (_GLF_IDENTITY(clamp(vec4(injectionSwitch, 0.0, 0.0), vec4(injectionSwitch, 0.0, 0.0), vec4(injectionSwitch, 0.0, 0.0)), mix(vec4((clamp(vec4(injectionSwitch, 0.0, 0.0), vec4(injectionSwitch, 0.0, 0.0), vec4(injectionSwitch, 0.0, 0.0)))[0], _GLF_FUZZED(-954.236), _GLF_FUZZED((-9.4 - -7844.0208)), (clamp(vec4(injectionSwitch, 0.0, 0.0), vec4(injectionSwitch, 0.0, 0.0), vec4(injectionSwitch, 0.0, 0.0)))[3]), vec4(_GLF_FUZZED(-76.02), (clamp(vec4(injectionSwitch, 0.0, 0.0), vec4(injectionSwitch, 0.0, 0.0), vec4(injectionSwitch, 0.0, 0.0)))[1], (clamp(vec4(injectionSwitch, 0.0, 0.0), vec4(injectionSwitch, 0.0, 0.0), vec4(injectionSwitch, 0.0, 0.0)))[2], _GLF_FUZZED(-3317.6669)), bvec4(false, true, true, false)))) - vec4(0.0, 0.0, 0.0, 0.0))) : _GLF_FUZZED(vec4(7.8, 9.9, 57.06, 456.409))))), vec2(_GLF_IDENTITY(vec4(injectionSwitch, 0.0, 0.0), (true ? _GLF_IDENTITY(vec4(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat3x2(injectionSwitch, _GLF_IDENTITY(dot(vec4(sin(0.0), 0.0, 0.0, 1.0), vec4(tan(0.0), 0.0, 0.0, 1.0)), dot(vec4(sin(0.0), 0.0, 0.0, 1.0), vec4(tan(0.0), 0.0, 0.0, 1.0))), 1.0, 0.0, 0.0)), max(vec2(mat3x2(injectionSwitch, _GLF_IDENTITY(dot(vec4(sin(0.0), 0.0, 0.0, 1.0), vec4(tan(0.0), 0.0, 0.0, 1.0)), dot(vec4(sin(0.0), 0.0, 0.0, 1.0), vec4(tan(0.0), 0.0, 0.0, 1.0))), 1.0, 0.0, 0.0)), vec2(mat3x2(injectionSwitch, _GLF_IDENTITY(dot(vec4(sin(0.0), 0.0, 0.0, 1.0), vec4(tan(0.0), 0.0, 0.0, 1.0)), dot(vec4(sin(0.0), 0.0, 0.0, 1.0), vec4(tan(0.0), 0.0, 0.0, 1.0))), 1.0, 0.0, 0.0))))), 0.0, 0.0), clamp(vec4(injectionSwitch, 0.0, 0.0), vec4(injectionSwitch, 0.0, 0.0), vec4(injectionSwitch, 0.0, 0.0))) : _GLF_FUZZED(vec4(7.8, 9.9, 57.06, 456.409))))))), _GLF_IDENTITY(vec2(_GLF_IDENTITY(vec4(injectionSwitch, 0.0, 0.0), (true ? _GLF_IDENTITY(vec4(injectionSwitch, 0.0, 0.0), clamp(vec4(injectionSwitch, 0.0, 0.0), vec4(injectionSwitch, 0.0, 0.0), vec4(injectionSwitch, 0.0, 0.0))) : _GLF_IDENTITY(_GLF_FUZZED(vec4(7.8, 9.9, 57.06, 456.409)), min(_GLF_IDENTITY(_GLF_FUZZED(vec4(7.8, 9.9, 57.06, 456.409)), vec4(_GLF_IDENTITY(vec4(_GLF_FUZZED(vec4(7.8, 9.9, 57.06, 456.409))), mix(vec4((vec4(_GLF_FUZZED(vec4(7.8, 9.9, 57.06, 456.409))))[0], _GLF_FUZZED(-46.26), _GLF_FUZZED(6.0), (vec4(_GLF_FUZZED(vec4(7.8, 9.9, 57.06, 456.409))))[3]), vec4(_GLF_FUZZED(15.21), (vec4(_GLF_FUZZED(vec4(7.8, 9.9, 57.06, 456.409))))[1], (vec4(_GLF_FUZZED(vec4(7.8, 9.9, 57.06, 456.409))))[2], _GLF_FUZZED(866.806)), bvec4(false, true, true, false))))), _GLF_FUZZED(vec4(7.8, 9.9, 57.06, 456.409))))))), vec2(1.0, 1.0) * (vec2(_GLF_IDENTITY(vec4(injectionSwitch, 0.0, 0.0), (true ? _GLF_IDENTITY(vec4(injectionSwitch, 0.0, 0.0), clamp(vec4(injectionSwitch, 0.0, 0.0), vec4(injectionSwitch, 0.0, 0.0), vec4(injectionSwitch, 0.0, 0.0))) : _GLF_IDENTITY(_GLF_FUZZED(vec4(7.8, 9.9, 57.06, 456.409)), min(_GLF_IDENTITY(_GLF_FUZZED(vec4(7.8, 9.9, 57.06, 456.409)), vec4(_GLF_IDENTITY(vec4(_GLF_FUZZED(vec4(7.8, 9.9, 57.06, 456.409))), mix(vec4((vec4(_GLF_FUZZED(vec4(7.8, 9.9, 57.06, 456.409))))[0], _GLF_FUZZED(-46.26), _GLF_FUZZED(6.0), (vec4(_GLF_FUZZED(vec4(7.8, 9.9, 57.06, 456.409))))[3]), vec4(_GLF_FUZZED(15.21), (vec4(_GLF_FUZZED(vec4(7.8, 9.9, 57.06, 456.409))))[1], (vec4(_GLF_FUZZED(vec4(7.8, 9.9, 57.06, 456.409))))[2], _GLF_FUZZED(866.806)), bvec4(false, true, true, false))))), _GLF_FUZZED(vec4(7.8, 9.9, 57.06, 456.409)))))))))))) : _GLF_FUZZED(injectionSwitch), mix(vec2((true ? _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(_GLF_IDENTITY(vec4(injectionSwitch, 0.0, 0.0), (true ? _GLF_IDENTITY(vec4(injectionSwitch, 0.0, 0.0), clamp(vec4(injectionSwitch, 0.0, 0.0), vec4(injectionSwitch, 0.0, 0.0), vec4(injectionSwitch, 0.0, 0.0))) : _GLF_FUZZED(vec4(7.8, 9.9, 57.06, 456.409))))), clamp(vec2(_GLF_IDENTITY(vec4(injectionSwitch, 0.0, 0.0), (true ? _GLF_IDENTITY(vec4(injectionSwitch, 0.0, 0.0), clamp(vec4(injectionSwitch, 0.0, 0.0), vec4(injectionSwitch, 0.0, 0.0), _GLF_IDENTITY(vec4(injectionSwitch, 0.0, 0.0), min(_GLF_IDENTITY(vec4(injectionSwitch, 0.0, 0.0), (vec4(injectionSwitch, 0.0, 0.0)) / vec4(1.0, 1.0, 1.0, 1.0)), vec4(injectionSwitch, 0.0, 0.0))))) : _GLF_FUZZED(vec4(7.8, 9.9, 57.06, 456.409))))), _GLF_IDENTITY(vec2(_GLF_IDENTITY(_GLF_IDENTITY(vec4(injectionSwitch, 0.0, 0.0), clamp(vec4(injectionSwitch, 0.0, 0.0), _GLF_IDENTITY(vec4(injectionSwitch, 0.0, 0.0), min(vec4(injectionSwitch, 0.0, 0.0), vec4(injectionSwitch, 0.0, 0.0))), vec4(injectionSwitch, 0.0, 0.0))), (true ? _GLF_IDENTITY(vec4(injectionSwitch, 0.0, 0.0), clamp(vec4(injectionSwitch, 0.0, 0.0), vec4(injectionSwitch, 0.0, 0.0), vec4(injectionSwitch, 0.0, 0.0))) : _GLF_FUZZED(vec4(7.8, 9.9, 57.06, 456.409))))), min(vec2(_GLF_IDENTITY(vec4(injectionSwitch, 0.0, 0.0), (true ? _GLF_IDENTITY(vec4(injectionSwitch, 0.0, 0.0), _GLF_IDENTITY(clamp(vec4(injectionSwitch, 0.0, 0.0), vec4(injectionSwitch, 0.0, 0.0), vec4(injectionSwitch, 0.0, 0.0)), (_GLF_IDENTITY(clamp(vec4(injectionSwitch, 0.0, 0.0), vec4(injectionSwitch, 0.0, 0.0), vec4(injectionSwitch, 0.0, 0.0)), mix(vec4((clamp(vec4(injectionSwitch, 0.0, 0.0), vec4(injectionSwitch, 0.0, 0.0), vec4(injectionSwitch, 0.0, 0.0)))[0], _GLF_FUZZED(-954.236), _GLF_FUZZED((-9.4 - -7844.0208)), (clamp(vec4(injectionSwitch, 0.0, 0.0), vec4(injectionSwitch, 0.0, 0.0), vec4(injectionSwitch, 0.0, 0.0)))[3]), vec4(_GLF_FUZZED(-76.02), (clamp(vec4(injectionSwitch, 0.0, 0.0), vec4(injectionSwitch, 0.0, 0.0), vec4(injectionSwitch, 0.0, 0.0)))[1], (clamp(vec4(injectionSwitch, 0.0, 0.0), vec4(injectionSwitch, 0.0, 0.0), vec4(injectionSwitch, 0.0, 0.0)))[2], _GLF_FUZZED(-3317.6669)), bvec4(false, true, true, false)))) - vec4(0.0, 0.0, 0.0, 0.0))) : _GLF_FUZZED(vec4(7.8, 9.9, 57.06, 456.409))))), vec2(_GLF_IDENTITY(vec4(injectionSwitch, 0.0, 0.0), (true ? _GLF_IDENTITY(vec4(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat3x2(injectionSwitch, _GLF_IDENTITY(dot(vec4(sin(0.0), 0.0, 0.0, 1.0), vec4(tan(0.0), 0.0, 0.0, 1.0)), dot(vec4(sin(0.0), 0.0, 0.0, 1.0), vec4(tan(0.0), 0.0, 0.0, 1.0))), 1.0, 0.0, 0.0)), max(vec2(mat3x2(injectionSwitch, _GLF_IDENTITY(dot(vec4(sin(0.0), 0.0, 0.0, 1.0), vec4(tan(0.0), 0.0, 0.0, 1.0)), dot(vec4(sin(0.0), 0.0, 0.0, 1.0), vec4(tan(0.0), 0.0, 0.0, 1.0))), 1.0, 0.0, 0.0)), vec2(mat3x2(injectionSwitch, _GLF_IDENTITY(dot(vec4(sin(0.0), 0.0, 0.0, 1.0), vec4(tan(0.0), 0.0, 0.0, 1.0)), dot(vec4(sin(0.0), 0.0, 0.0, 1.0), vec4(tan(0.0), 0.0, 0.0, 1.0))), 1.0, 0.0, 0.0))))), 0.0, 0.0), clamp(vec4(injectionSwitch, 0.0, 0.0), vec4(injectionSwitch, 0.0, 0.0), vec4(injectionSwitch, 0.0, 0.0))) : _GLF_FUZZED(vec4(7.8, 9.9, 57.06, 456.409))))))), _GLF_IDENTITY(vec2(_GLF_IDENTITY(vec4(injectionSwitch, 0.0, 0.0), (true ? _GLF_IDENTITY(vec4(injectionSwitch, 0.0, 0.0), clamp(vec4(injectionSwitch, 0.0, 0.0), vec4(injectionSwitch, 0.0, 0.0), vec4(injectionSwitch, 0.0, 0.0))) : _GLF_IDENTITY(_GLF_FUZZED(vec4(7.8, 9.9, 57.06, 456.409)), min(_GLF_IDENTITY(_GLF_FUZZED(vec4(7.8, 9.9, 57.06, 456.409)), vec4(_GLF_IDENTITY(vec4(_GLF_FUZZED(vec4(7.8, 9.9, 57.06, 456.409))), mix(vec4((vec4(_GLF_FUZZED(vec4(7.8, 9.9, 57.06, 456.409))))[0], _GLF_FUZZED(-46.26), _GLF_FUZZED(6.0), (vec4(_GLF_FUZZED(vec4(7.8, 9.9, 57.06, 456.409))))[3]), vec4(_GLF_FUZZED(15.21), (vec4(_GLF_FUZZED(vec4(7.8, 9.9, 57.06, 456.409))))[1], (vec4(_GLF_FUZZED(vec4(7.8, 9.9, 57.06, 456.409))))[2], _GLF_FUZZED(866.806)), bvec4(false, true, true, false))))), _GLF_FUZZED(vec4(7.8, 9.9, 57.06, 456.409))))))), vec2(1.0, 1.0) * (vec2(_GLF_IDENTITY(vec4(injectionSwitch, 0.0, 0.0), (true ? _GLF_IDENTITY(vec4(injectionSwitch, 0.0, 0.0), clamp(vec4(injectionSwitch, 0.0, 0.0), vec4(injectionSwitch, 0.0, 0.0), vec4(injectionSwitch, 0.0, 0.0))) : _GLF_IDENTITY(_GLF_FUZZED(vec4(7.8, 9.9, 57.06, 456.409)), min(_GLF_IDENTITY(_GLF_FUZZED(vec4(7.8, 9.9, 57.06, 456.409)), vec4(_GLF_IDENTITY(vec4(_GLF_FUZZED(vec4(7.8, 9.9, 57.06, 456.409))), mix(vec4((vec4(_GLF_FUZZED(vec4(7.8, 9.9, 57.06, 456.409))))[0], _GLF_FUZZED(-46.26), _GLF_FUZZED(6.0), (vec4(_GLF_FUZZED(vec4(7.8, 9.9, 57.06, 456.409))))[3]), vec4(_GLF_FUZZED(15.21), (vec4(_GLF_FUZZED(vec4(7.8, 9.9, 57.06, 456.409))))[1], (vec4(_GLF_FUZZED(vec4(7.8, 9.9, 57.06, 456.409))))[2], _GLF_FUZZED(866.806)), bvec4(false, true, true, false))))), _GLF_FUZZED(vec4(7.8, 9.9, 57.06, 456.409)))))))))))) : _GLF_FUZZED(injectionSwitch))[0], _GLF_FUZZED((-7.6 + 893.622))), vec2(_GLF_FUZZED(5.9), (true ? _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(_GLF_IDENTITY(vec4(injectionSwitch, 0.0, 0.0), (true ? _GLF_IDENTITY(vec4(injectionSwitch, 0.0, 0.0), clamp(vec4(injectionSwitch, 0.0, 0.0), vec4(injectionSwitch, 0.0, 0.0), vec4(injectionSwitch, 0.0, 0.0))) : _GLF_FUZZED(vec4(7.8, 9.9, 57.06, 456.409))))), clamp(vec2(_GLF_IDENTITY(vec4(injectionSwitch, 0.0, 0.0), (true ? _GLF_IDENTITY(vec4(injectionSwitch, 0.0, 0.0), clamp(vec4(injectionSwitch, 0.0, 0.0), vec4(injectionSwitch, 0.0, 0.0), _GLF_IDENTITY(vec4(injectionSwitch, 0.0, 0.0), min(_GLF_IDENTITY(vec4(injectionSwitch, 0.0, 0.0), (vec4(injectionSwitch, 0.0, 0.0)) / vec4(1.0, 1.0, 1.0, 1.0)), vec4(injectionSwitch, 0.0, 0.0))))) : _GLF_FUZZED(vec4(7.8, 9.9, 57.06, 456.409))))), _GLF_IDENTITY(vec2(_GLF_IDENTITY(_GLF_IDENTITY(vec4(injectionSwitch, 0.0, 0.0), clamp(vec4(injectionSwitch, 0.0, 0.0), _GLF_IDENTITY(vec4(injectionSwitch, 0.0, 0.0), min(vec4(injectionSwitch, 0.0, 0.0), vec4(injectionSwitch, 0.0, 0.0))), vec4(injectionSwitch, 0.0, 0.0))), (true ? _GLF_IDENTITY(vec4(injectionSwitch, 0.0, 0.0), clamp(vec4(injectionSwitch, 0.0, 0.0), vec4(injectionSwitch, 0.0, 0.0), vec4(injectionSwitch, 0.0, 0.0))) : _GLF_FUZZED(vec4(7.8, 9.9, 57.06, 456.409))))), min(vec2(_GLF_IDENTITY(vec4(injectionSwitch, 0.0, 0.0), (true ? _GLF_IDENTITY(vec4(injectionSwitch, 0.0, 0.0), _GLF_IDENTITY(clamp(vec4(injectionSwitch, 0.0, 0.0), vec4(injectionSwitch, 0.0, 0.0), vec4(injectionSwitch, 0.0, 0.0)), (_GLF_IDENTITY(clamp(vec4(injectionSwitch, 0.0, 0.0), vec4(injectionSwitch, 0.0, 0.0), vec4(injectionSwitch, 0.0, 0.0)), mix(vec4((clamp(vec4(injectionSwitch, 0.0, 0.0), vec4(injectionSwitch, 0.0, 0.0), vec4(injectionSwitch, 0.0, 0.0)))[0], _GLF_FUZZED(-954.236), _GLF_FUZZED((-9.4 - -7844.0208)), (clamp(vec4(injectionSwitch, 0.0, 0.0), vec4(injectionSwitch, 0.0, 0.0), vec4(injectionSwitch, 0.0, 0.0)))[3]), vec4(_GLF_FUZZED(-76.02), (clamp(vec4(injectionSwitch, 0.0, 0.0), vec4(injectionSwitch, 0.0, 0.0), vec4(injectionSwitch, 0.0, 0.0)))[1], (clamp(vec4(injectionSwitch, 0.0, 0.0), vec4(injectionSwitch, 0.0, 0.0), vec4(injectionSwitch, 0.0, 0.0)))[2], _GLF_FUZZED(-3317.6669)), bvec4(false, true, true, false)))) - vec4(0.0, 0.0, 0.0, 0.0))) : _GLF_FUZZED(vec4(7.8, 9.9, 57.06, 456.409))))), vec2(_GLF_IDENTITY(vec4(injectionSwitch, 0.0, 0.0), (true ? _GLF_IDENTITY(vec4(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat3x2(injectionSwitch, _GLF_IDENTITY(dot(vec4(sin(0.0), 0.0, 0.0, 1.0), vec4(tan(0.0), 0.0, 0.0, 1.0)), dot(vec4(sin(0.0), 0.0, 0.0, 1.0), vec4(tan(0.0), 0.0, 0.0, 1.0))), 1.0, 0.0, 0.0)), max(vec2(mat3x2(injectionSwitch, _GLF_IDENTITY(dot(vec4(sin(0.0), 0.0, 0.0, 1.0), vec4(tan(0.0), 0.0, 0.0, 1.0)), dot(vec4(sin(0.0), 0.0, 0.0, 1.0), vec4(tan(0.0), 0.0, 0.0, 1.0))), 1.0, 0.0, 0.0)), vec2(mat3x2(injectionSwitch, _GLF_IDENTITY(dot(vec4(sin(0.0), 0.0, 0.0, 1.0), vec4(tan(0.0), 0.0, 0.0, 1.0)), dot(vec4(sin(0.0), 0.0, 0.0, 1.0), vec4(tan(0.0), 0.0, 0.0, 1.0))), 1.0, 0.0, 0.0))))), 0.0, 0.0), clamp(vec4(injectionSwitch, 0.0, 0.0), vec4(injectionSwitch, 0.0, 0.0), vec4(injectionSwitch, 0.0, 0.0))) : _GLF_FUZZED(vec4(7.8, 9.9, 57.06, 456.409))))))), _GLF_IDENTITY(vec2(_GLF_IDENTITY(vec4(injectionSwitch, 0.0, 0.0), (true ? _GLF_IDENTITY(vec4(injectionSwitch, 0.0, 0.0), clamp(vec4(injectionSwitch, 0.0, 0.0), vec4(injectionSwitch, 0.0, 0.0), vec4(injectionSwitch, 0.0, 0.0))) : _GLF_IDENTITY(_GLF_FUZZED(vec4(7.8, 9.9, 57.06, 456.409)), min(_GLF_IDENTITY(_GLF_FUZZED(vec4(7.8, 9.9, 57.06, 456.409)), vec4(_GLF_IDENTITY(vec4(_GLF_FUZZED(vec4(7.8, 9.9, 57.06, 456.409))), mix(vec4((vec4(_GLF_FUZZED(vec4(7.8, 9.9, 57.06, 456.409))))[0], _GLF_FUZZED(-46.26), _GLF_FUZZED(6.0), (vec4(_GLF_FUZZED(vec4(7.8, 9.9, 57.06, 456.409))))[3]), vec4(_GLF_FUZZED(15.21), (vec4(_GLF_FUZZED(vec4(7.8, 9.9, 57.06, 456.409))))[1], (vec4(_GLF_FUZZED(vec4(7.8, 9.9, 57.06, 456.409))))[2], _GLF_FUZZED(866.806)), bvec4(false, true, true, false))))), _GLF_FUZZED(vec4(7.8, 9.9, 57.06, 456.409))))))), vec2(1.0, 1.0) * (vec2(_GLF_IDENTITY(vec4(injectionSwitch, 0.0, 0.0), (true ? _GLF_IDENTITY(vec4(injectionSwitch, 0.0, 0.0), clamp(vec4(injectionSwitch, 0.0, 0.0), vec4(injectionSwitch, 0.0, 0.0), vec4(injectionSwitch, 0.0, 0.0))) : _GLF_IDENTITY(_GLF_FUZZED(vec4(7.8, 9.9, 57.06, 456.409)), min(_GLF_IDENTITY(_GLF_FUZZED(vec4(7.8, 9.9, 57.06, 456.409)), vec4(_GLF_IDENTITY(vec4(_GLF_FUZZED(vec4(7.8, 9.9, 57.06, 456.409))), mix(vec4((vec4(_GLF_FUZZED(vec4(7.8, 9.9, 57.06, 456.409))))[0], _GLF_FUZZED(-46.26), _GLF_FUZZED(6.0), (vec4(_GLF_FUZZED(vec4(7.8, 9.9, 57.06, 456.409))))[3]), vec4(_GLF_FUZZED(15.21), (vec4(_GLF_FUZZED(vec4(7.8, 9.9, 57.06, 456.409))))[1], (vec4(_GLF_FUZZED(vec4(7.8, 9.9, 57.06, 456.409))))[2], _GLF_FUZZED(866.806)), bvec4(false, true, true, false))))), _GLF_FUZZED(vec4(7.8, 9.9, 57.06, 456.409)))))))))))) : _GLF_FUZZED(injectionSwitch))[1]), bvec2(false, true))))))).x < injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       barrier();
      }
     else
      {
      }
    }
   do
    {
     do
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           barrier();
          }
         else
          {
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat2(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), 0.0, 0.0), mat2(1.0) * (mat2(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), (true ? _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)) : _GLF_FUZZED(vec2(5.1, -3450.4819)))), 0.0, 0.0))))).x > injectionSwitch.y))))
        barrier();
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
        {
        }
       else
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(_GLF_IDENTITY(4, (0 & -90353) | (4)))))); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = (1 ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (true ? int(2) : _GLF_FUZZED(_injected_loop_counter)))))); _injected_loop_counter --)
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! _GLF_IDENTITY((! (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(9.8)), float(_GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y))), bool(true))))))), ! (! ((! (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(9.8)), float(_GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y))), bool(true)))))))))))))
              {
              }
             else
              {
               do
                {
                 do
                  {
                   barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
              }
            }
          }
        }
       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bvec3(false, true, false)))))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, (false) && true)))), false || (_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, (false) && true)))))))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
             else
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                }
               else
                {
                 barrier();
                 if(_GLF_DEAD(false))
                  barrier();
                }
              }
             if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bvec3(false, false, true)))))
              {
               if(_GLF_DEAD(false))
                barrier();
              }
             else
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                }
               else
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 if(_GLF_DEAD(false))
                  {
                   for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                    {
                     barrier();
                    }
                  }
                 if(_GLF_DEAD(false))
                  barrier();
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-6.5, 2.5)) : injectionSwitch)))).x > injectionSwitch.y))))
                barrier();
              }
            }
           else
            {
            }
          }
        }
      }
     while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), false || (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), ! (! (_GLF_WRAPPED_LOOP(false)))))));
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y))))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
    }
  }
 else
  {
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 & 49045)); _injected_loop_counter --)
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)))), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(injectionSwitch[0], injectionSwitch[1]), vec2(mat3x2(vec2(injectionSwitch[0], injectionSwitch[1]), 1.0, 0.0, 0.0, 1.0)))).x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))))) || false)))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     barrier();
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
   do
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, false || (false))))
        {
        }
       else
        {
         barrier();
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, false || (false))))
        {
        }
       else
        {
         barrier();
        }
      }
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y)))), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         barrier();
        }
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
  }
 else
  {
  }
 uint subgroup_id = gl_SubgroupID;
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), _GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)))).y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   for(int _injected_loop_counter = _GLF_IDENTITY(0, (_GLF_IDENTITY(_GLF_IDENTITY(0, (0) - 0), clamp(0, _GLF_IDENTITY(0, (_GLF_IDENTITY(_GLF_IDENTITY(0, min(0, 0)), (_GLF_IDENTITY(0, min(0, 0))) | (_GLF_IDENTITY(0, min(0, 0))))) - 0), _GLF_IDENTITY(0, ~ (~ (0)))))) | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     do
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
        {
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat3(injectionSwitch, 0.0, 0.0, 1.0, 1.0, 0.0, _GLF_IDENTITY(0.0, (0.0) - 0.0), 0.0)), (vec2(mat3(injectionSwitch, 0.0, 0.0, _GLF_IDENTITY(1.0, min(1.0, 1.0)), 1.0, 0.0, 0.0, 0.0))) * vec2(1.0, 1.0))).y, false || (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat3(injectionSwitch, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0)), (vec2(mat3(injectionSwitch, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0))) * vec2(1.0, 1.0))).y))))), (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat3(injectionSwitch, 0.0, 0.0, 1.0, 1.0, 0.0, _GLF_IDENTITY(0.0, (0.0) - 0.0), 0.0)), (vec2(mat3(injectionSwitch, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0))) * vec2(1.0, 1.0))).y, false || (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat3(injectionSwitch, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0)), (vec2(mat3(injectionSwitch, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0))) * vec2(1.0, 1.0))).y))))), (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat3(injectionSwitch, 0.0, 0.0, 1.0, 1.0, 0.0, _GLF_IDENTITY(0.0, (0.0) - 0.0), 0.0)), _GLF_IDENTITY((vec2(mat3(injectionSwitch, 0.0, 0.0, _GLF_IDENTITY(1.0, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(step(8.2, -8.0)) : 1.0)), 1.0, 0.0, 0.0, 0.0))) * vec2(1.0, 1.0), ((vec2(mat3(injectionSwitch, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0))) * vec2(1.0, 1.0)) - vec2(0.0, 0.0)))).y, false || (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat3(injectionSwitch, 0.0, 0.0, _GLF_IDENTITY(1.0, float(float(1.0))), 1.0, 0.0, 0.0, 0.0)), (vec2(mat3(injectionSwitch, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0))) * vec2(1.0, 1.0))).y)))))) || false)) && true));
     do
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).x > injectionSwitch.y)))))))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y))))
            {
             for(int _injected_loop_counter = _GLF_IDENTITY(0, (0) | 0); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (true ? _injected_loop_counter : _GLF_FUZZED(_injected_loop_counter))) != (0 ^ 1)); _injected_loop_counter ++)
              {
               do
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y))))
                      barrier();
                    }
                   else
                    {
                     barrier();
                    }
                  }
                 if(_GLF_DEAD(false))
                  barrier();
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             for(int _injected_loop_counter = (((1 & 1) << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   barrier();
                  }
                }
               if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                barrier();
              }
             if(_GLF_DEAD(false))
              barrier();
            }
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 barrier();
                }
               else
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   barrier();
                  }
                 if(_GLF_DEAD(false))
                  barrier();
                }
              }
             barrier();
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              {
               do
                {
                 barrier();
                }
               while(_GLF_WRAPPED_LOOP(false));
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(false))
                barrier();
              }
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             do
              {
               barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
               if(_GLF_DEAD(false))
                barrier();
              }
             else
              {
               barrier();
              }
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, true && (false))))
              {
              }
             else
              {
               barrier();
              }
            }
           if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                {
                 barrier();
                }
               else
                {
                }
              }
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
              }
             else
              {
               barrier();
              }
            }
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
         do
          {
           do
            {
             if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), true && (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), true && (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))))), true && (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), true && (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))))))), true, true), bvec3(bvec4(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), true && (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))))), true && (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), true && (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))))))), true, true), false)))), ! (! (_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), true && (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))))), true && (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), true && (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))))))), true, true), bvec3(bvec4(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), true && (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))))), true && (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), true && (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))))))), true, true), false)))), bool(bvec3(bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), true && (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))))), true && (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), true && (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))))))), true, true), bvec3(bvec4(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), true && (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))))), true && (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), true && (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))))))), true, true), false)))), true, true)))))))))
              {
               if(_GLF_DEAD(false))
                barrier();
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 barrier();
                }
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 barrier();
                }
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         else
          {
          }
         do
          {
           do
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
              {
               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (! (injectionSwitch.x < injectionSwitch.y)))))))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_DEAD(false))
                  barrier();
                }
               else
                {
                }
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 barrier();
                }
               else
                {
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), (false) && true)))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  barrier();
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))), ! (! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), bool(bool(! (_GLF_DEAD(false))))))))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (! _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ! (! ((injectionSwitch.x < injectionSwitch.y))))))) && true)))))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), (bool(false)) && true)))))
          barrier();
         barrier();
        }
      }
     do
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec4(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, true, true))))
            {
             do
              {
               barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y)))) || false))))
            barrier();
          }
         do
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
              }
             else
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec4((_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + log(1.0)) > injectionSwitch.y), true, true, false))))))
                  barrier();
                 barrier();
                }
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
             barrier();
             if(_GLF_DEAD(false))
              barrier();
            }
           if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, ! (! (false)))), (! (_GLF_IDENTITY(false, ! (! (false))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(false))
          barrier();
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
          {
           for(int _injected_loop_counter = int(_GLF_IDENTITY(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(212.667, 4772.7117)))).y), (_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(212.667, 4772.7117)))).y)) * _GLF_IDENTITY(dot(vec3(0.0, 0.0, 1.0), vec3(0.0, 0.0, 1.0)), dot(vec3(0.0, 0.0, 1.0), vec3(0.0, 0.0, 1.0))))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > 0, false || (_GLF_IDENTITY(_injected_loop_counter > 0, bool(bool(_injected_loop_counter > 0)))))); _injected_loop_counter --)
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(-4274.1249) : _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0))) > injectionSwitch.y))))
              barrier();
             do
              {
               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                }
               else
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                   do
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, false, false), bvec3(bvec3(bvec3(false, false, false))))))), ! (! (_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, false, false), bvec3(bvec3(bvec3(false, false, false)))))))))))
                    barrier();
                   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (((0 << _GLF_IDENTITY(int(8), int(8))) ^ (0 << _GLF_IDENTITY(int(6), int(6)))) << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), 0 | (int(0)))))); _injected_loop_counter --)
                    {
                     barrier();
                    }
                  }
                 if(_GLF_DEAD(false))
                  barrier();
                 do
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY(false, (false) || false) || (true))))
                    {
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_DEAD(false))
                        barrier();
                       if(_GLF_WRAPPED_IF_FALSE(false))
                        {
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          barrier();
                        }
                       else
                        {
                         barrier();
                        }
                      }
                    }
                   else
                    {
                    }
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                 if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))), (_GLF_DEAD(false)) && true))
                  barrier();
                }
               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 << _GLF_IDENTITY(_GLF_IDENTITY(int(8), (int(8)) | (int(8))), int(8)))); _injected_loop_counter --)
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   barrier();
                  }
                }
               if(_GLF_DEAD(false))
                barrier();
               do
                {
                 if(_GLF_DEAD(false))
                  {
                   do
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                     do
                      {
                       barrier();
                      }
                     while(_GLF_WRAPPED_LOOP(false));
                    }
                   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                  }
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   do
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                  }
                }
               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (injectionSwitch.x > injectionSwitch.y))))
                {
                }
               else
                {
                 do
                  {
                   barrier();
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                     barrier();
                    }
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, false || _GLF_IDENTITY((false), _GLF_IDENTITY(bool(bvec2((false), false)), ! (_GLF_IDENTITY(! (bool(bvec2((false), false))), ! (! (! (bool(bvec2((false), false))))))))))));
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             else
              {
               if(_GLF_DEAD(false))
                barrier();
              }
            }
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
            barrier();
           barrier();
          }
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(false), (bool(false)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (! (bool(_GLF_IDENTITY(bool(false), (bool(false)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
          }
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = ((_GLF_IDENTITY(0, (_GLF_IDENTITY(0, _GLF_IDENTITY(_GLF_IDENTITY(int(ivec3(_GLF_IDENTITY(0, (0) << 0), (0 ^ 0), 1)), ~ (~ (int(ivec3(_GLF_IDENTITY(0, (0) << 0), (0 ^ 0), 1))))), _GLF_IDENTITY(int(ivec4(int(ivec3(_GLF_IDENTITY(0, (0) << 0), (0 ^ 0), 1)), 1, 0, 0)), (_GLF_IDENTITY(int(ivec4(int(ivec3(_GLF_IDENTITY(0, (0) << 0), (0 ^ 0), 1)), 1, 0, 0)), min(int(ivec4(int(ivec3(_GLF_IDENTITY(0, (0) << 0), (0 ^ 0), 1)), 1, 0, 0)), int(ivec4(int(ivec3(_GLF_IDENTITY(0, (0) << 0), (0 ^ 0), 1)), 1, 0, 0))))) | (int(ivec4(int(ivec3(_GLF_IDENTITY(0, (0) << 0), (0 ^ 0), 1)), 1, 0, 0))))))) | 0) << _GLF_IDENTITY(int(3), int(3))) | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
              {
               barrier();
              }
            }
           if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)))))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               barrier();
              }
            }
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY((_GLF_FALSE(_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), (injectionSwitch.x > injectionSwitch.y))), ! (_GLF_IDENTITY(! ((_GLF_FALSE(_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), (injectionSwitch.x > injectionSwitch.y)))), (! ((_GLF_FALSE(_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), (injectionSwitch.x > injectionSwitch.y))))) || false))) && true)))
            {
             do
              {
               barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
          }
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(false))
        {
         do
          {
           barrier();
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED((+ -2731.9531))), vec2(_GLF_FUZZED(424.059), (injectionSwitch)[1]), bvec2(false, true))).y))));
        }
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < ((_GLF_IDENTITY(_GLF_IDENTITY(1, int(ivec3(_GLF_IDENTITY(1, clamp(1, 1, 1)), 0, (0 << _GLF_IDENTITY(int(0), int(0)))))) << _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(2, int(_GLF_ZERO(0.0, injectionSwitch.x)) + (2))), int(2)), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(int(2), int(2)), (_GLF_IDENTITY(int(2), int(2))) / 1)) - 0, 0 ^ ((_GLF_IDENTITY(_GLF_IDENTITY(int(2), int(2)), (_GLF_IDENTITY(int(2), int(2))) / 1)) - 0))), max(_GLF_IDENTITY(1, int(ivec3(_GLF_IDENTITY(1, clamp(1, 1, 1)), 0, (0 << _GLF_IDENTITY(int(0), int(0)))))) << _GLF_IDENTITY(_GLF_IDENTITY(int(2), int(2)), (_GLF_IDENTITY(_GLF_IDENTITY(int(2), int(2)), (_GLF_IDENTITY(int(2), int(2))) / 1)) - 0), _GLF_IDENTITY(_GLF_IDENTITY(1, int(ivec3(_GLF_IDENTITY(1, _GLF_IDENTITY(clamp(1, 1, 1), (19338 & 0) ^ (clamp(1, 1, 1)))), 0, (0 << _GLF_IDENTITY(int(0), int(0)))))) << _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(2), int(2)), 1 * (_GLF_IDENTITY(_GLF_IDENTITY(int(2), int(2)), ~ (~ (_GLF_IDENTITY(int(2), int(2))))))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(2), max(int(2), int(2))), int(2)), (_GLF_IDENTITY(int(2), int(2))) / 1)) - 0), (_GLF_IDENTITY(1, int(ivec3(_GLF_IDENTITY(1, clamp(1, 1, 1)), 0, (0 << _GLF_IDENTITY(int(0), int(0)))))) << _GLF_IDENTITY(_GLF_IDENTITY(int(2), int(2)), (_GLF_IDENTITY(_GLF_IDENTITY(int(2), int(2)), (_GLF_IDENTITY(int(2), int(2))) / 1)) - 0)) - 0)))) >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_IDENTITY(2, (2) >> 0), (_GLF_IDENTITY(2, (2) >> 0)) ^ 0)), (int(2)) | (int(2)))))); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               barrier();
              }
             else
              {
              }
            }
           do
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 | 0)); _injected_loop_counter --)
            {
             barrier();
             if(_GLF_DEAD(false))
              barrier();
            }
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < 1, ! (! (_GLF_IDENTITY(_injected_loop_counter < 1, ! (! (_injected_loop_counter < 1))))))); _injected_loop_counter ++)
            {
             for(int _injected_loop_counter = (1 & (0 | 1)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _GLF_IDENTITY(_injected_loop_counter --, (97989 & 0) | (_GLF_IDENTITY(_injected_loop_counter --, (_GLF_IDENTITY(_injected_loop_counter --, ~ (~ (_injected_loop_counter --)))) ^ 0))))
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
               if(_GLF_DEAD(false))
                barrier();
              }
            }
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y))));
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y))))
      barrier();
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), _GLF_IDENTITY(bool(bvec3(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(((injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (((injectionSwitch.x > injectionSwitch.y)))) || false)) || _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))), _GLF_IDENTITY(false, ! (! (false))), _GLF_IDENTITY(false, _GLF_IDENTITY(false, bool(bvec4(false, false, false, false))) || (false)))), true && (bool(bvec3(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + 0.0) > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(float(injectionSwitch.y)), float(mat2x3(float(float(injectionSwitch.y)), 0.0, 1.0, 0.0, 1.0, 1.0))))) - log(1.0))), ((injectionSwitch.x > injectionSwitch.y)) || false)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), false, false))))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       for(int _injected_loop_counter = (0 | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           barrier();
          }
         else
          {
          }
        }
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(false));
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 do
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(vec2(injectionSwitch)), (true ? vec2(vec2(injectionSwitch)) : _GLF_FUZZED(mix(injectionSwitch, injectionSwitch, 7.0))))).x > injectionSwitch.y))), ! (! (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(vec2(injectionSwitch)), (true ? vec2(vec2(injectionSwitch)) : _GLF_FUZZED(mix(injectionSwitch, injectionSwitch, 7.0))))).x > injectionSwitch.y)))))))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     do
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           do
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0), (_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0)) - 0.0), bool(bool(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0), mat2(mat2x3(mat2(1.0)))) * (injectionSwitch)).x > injectionSwitch.y)))))))
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 barrier();
                }
               else
                {
                }
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 barrier();
                }
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)), _GLF_IDENTITY((_GLF_DEAD(_GLF_IDENTITY(false, (false) || false))) || false, bool(bool((_GLF_DEAD(_GLF_IDENTITY(false, (false) || false))) || false)))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(vec4(injectionSwitch, determinant(mat4(1.0, 0.0, 0.0, sqrt(0.0), 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0, 0.0, 0.0, 1.0, 1.0)), 0.0))).y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 uint num_workgroup = _GLF_IDENTITY(gl_NumWorkGroups, _GLF_IDENTITY(min(gl_NumWorkGroups, gl_NumWorkGroups), uvec3(uvec3(min(_GLF_IDENTITY(gl_NumWorkGroups, _GLF_IDENTITY(~ (~ (gl_NumWorkGroups)), (~ (~ (gl_NumWorkGroups))) >> uvec3(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)))), gl_NumWorkGroups))))).x;
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 uint workgroup_base = workgroup_size * _GLF_IDENTITY(workgroup_id, (workgroup_id) << 0u);
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    {
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, false, true)))))
    barrier();
   barrier();
  }
 uint virtual_gid = workgroup_base + subgroup_id * subgroup_size + _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) ^ 0u);
 uint next_virtual_gid = _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size + ((subgroup_local_id + 1) % subgroup_size), 0u ^ (_GLF_IDENTITY(workgroup_base, max(workgroup_base, workgroup_base)) + subgroup_id * _GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size)) + ((subgroup_local_id + 1) % subgroup_size))), (_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size + ((subgroup_local_id + _GLF_IDENTITY(1, ~ (~ (1)))) % subgroup_size), 0u ^ (workgroup_base + _GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) << 0u) + ((subgroup_local_id + 1) % subgroup_size)))) | (_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size + ((subgroup_local_id + 1) % subgroup_size), _GLF_IDENTITY(0u, (0u) << 0u) ^ (workgroup_base + subgroup_id * subgroup_size + ((subgroup_local_id + 1) % subgroup_size)))));
 if(_GLF_DEAD(false))
  barrier();
 for(int _injected_loop_counter = (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(6), int(6))), ((1 << _GLF_IDENTITY(int(6), int(6)))) | ((1 << _GLF_IDENTITY(int(6), int(6))))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(6), min(int(_GLF_IDENTITY(6, min(6, 6))), int(6))), int(6))); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(_GLF_IDENTITY(0.0, min(0.0, _GLF_IDENTITY(0.0, float(_GLF_IDENTITY(mat3(0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0), mat3(mat3x4(mat3(0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0)))))))), injectionSwitch.x))), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x)))))); _injected_loop_counter --)
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), (int(_GLF_ONE(1.0, injectionSwitch.y))) / 1)); _injected_loop_counter ++)
    {
     for(int _injected_loop_counter = (_GLF_IDENTITY(_GLF_IDENTITY(0 >> _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), (int(1)) / int(_GLF_ONE(_GLF_IDENTITY(1.0, _GLF_IDENTITY((_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0))) + 0.0, max(_GLF_IDENTITY((_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0))) + 0.0, mix(float((_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0))) + 0.0), float(_GLF_FUZZED(vec2(-57.08, 87.16).g)), bool(false))), (_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0))) + 0.0))), injectionSwitch.y)))), (0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(1), max(_GLF_IDENTITY(int(1), _GLF_IDENTITY(~ (~ (_GLF_IDENTITY(int(1), (int(1)) ^ 0))), clamp(~ (~ (_GLF_IDENTITY(int(1), (int(1)) ^ 0))), ~ (~ (_GLF_IDENTITY(int(1), (int(1)) ^ 0))), _GLF_IDENTITY(~ (~ (_GLF_IDENTITY(int(1), (int(1)) ^ 0))), (false ? _GLF_FUZZED((_injected_loop_counter % _injected_loop_counter)) : ~ (~ (_GLF_IDENTITY(int(1), (int(1)) ^ 0)))))))), int(1))), _GLF_IDENTITY(int(1), (int(1)) / int(_GLF_ONE(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0))) + 0.0), injectionSwitch.y))))) >> 0), clamp(_GLF_IDENTITY(_GLF_IDENTITY(0 >> _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), (int(1)) / int(_GLF_ONE(_GLF_IDENTITY(1.0, _GLF_IDENTITY((_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0))) + 0.0, (_GLF_IDENTITY((_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0))) + 0.0, 1.0 * ((_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0))) + _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0))))) + 0.0)), injectionSwitch.y)))), (0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(1), max(_GLF_IDENTITY(_GLF_IDENTITY(int(1), ~ (~ (_GLF_IDENTITY(int(1), (int(1)) ^ 0)))), _GLF_IDENTITY(int(ivec4(_GLF_IDENTITY(int(1), ~ (~ (_GLF_IDENTITY(int(1), (int(1)) ^ 0)))), 1, ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), 0 ^ (int(1))))), 1)), clamp(_GLF_IDENTITY(int(ivec4(_GLF_IDENTITY(int(1), ~ (~ (_GLF_IDENTITY(int(1), (int(1)) ^ 0)))), 1, ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), 0 ^ (int(1))))), 1)), 0 | (int(ivec4(_GLF_IDENTITY(int(1), ~ (~ (_GLF_IDENTITY(int(1), (int(1)) ^ 0)))), 1, ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), 0 ^ (int(1))))), 1)))), int(ivec4(_GLF_IDENTITY(int(1), ~ (~ (_GLF_IDENTITY(int(1), (int(1)) ^ 0)))), 1, ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), 0 ^ (int(1))))), 1)), int(ivec4(_GLF_IDENTITY(int(1), ~ (~ (_GLF_IDENTITY(int(1), (int(1)) ^ 0)))), 1, ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), 0 ^ (int(1))))), 1))))), int(1))), _GLF_IDENTITY(int(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) - (0 | 0))) * 1)), (int(1)) / int(_GLF_ONE(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0))) + 0.0), injectionSwitch.y))))) >> 0), (_GLF_IDENTITY(0 >> _GLF_IDENTITY(int(_GLF_IDENTITY(1, (0 ^ 0) ^ (1))), _GLF_IDENTITY(int(1), (int(1)) / int(_GLF_ONE(_GLF_IDENTITY(1.0, _GLF_IDENTITY((_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0))), (true ? (_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0))) : _GLF_FUZZED(-3373.7446))) + 0.0), injectionSwitch.y)))), (0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(1), max(_GLF_IDENTITY(int(1), ~ (~ (_GLF_IDENTITY(int(1), (int(1)) ^ 0)))), int(1))), _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(ivec2(int(1), 1))), (int(1)) / int(_GLF_ONE(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0))) + 0.0), injectionSwitch.y))))) >> 0)) | 0), _GLF_IDENTITY(0 >> _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), (int(1)) / int(_GLF_ONE(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0))) + 0.0), _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, float(mat2(injectionSwitch.y, 0.0, 0.0, determinant(mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))))), _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y)))))), (0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(1), max(_GLF_IDENTITY(int(1), ~ (~ (_GLF_IDENTITY(int(1), (int(1)) ^ 0)))), int(1))), _GLF_IDENTITY(int(1), (int(1)) / int(_GLF_ONE(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0))) + 0.0), injectionSwitch.y))))) >> 0), _GLF_IDENTITY(0 >> _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), (int(1)) / int(_GLF_ONE(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0))) + 0.0), injectionSwitch.y)))), (0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(1), _GLF_IDENTITY(max(_GLF_IDENTITY(int(1), ~ (~ (_GLF_IDENTITY(int(1), (int(1)) ^ 0)))), int(1)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? max(_GLF_IDENTITY(int(1), ~ _GLF_IDENTITY((~ (_GLF_IDENTITY(int(1), (int(1)) ^ 0))), clamp((~ (_GLF_IDENTITY(int(1), (int(1)) ^ 0))), (~ (_GLF_IDENTITY(int(1), (int(1)) ^ 0))), (~ (_GLF_IDENTITY(int(1), (int(1)) ^ 0)))))), int(1)) : _GLF_FUZZED(76636)))), _GLF_IDENTITY(int(1), (int(1)) / int(_GLF_ONE(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0))) + 0.0), injectionSwitch.y))))) >> 0)))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < (((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(4), int(4)), min(1 << _GLF_IDENTITY(int(4), int(4)), 1 << _GLF_IDENTITY(int(4), int(4))))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(4), int(_GLF_IDENTITY(_GLF_IDENTITY(ivec3(int(4), 1, ((0 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(5), int(_GLF_IDENTITY(5, int(_GLF_IDENTITY(int(5), (true ? int(5) : _GLF_FUZZED(_injected_loop_counter))))))))), ivec3(0, 0, 0) | (ivec3(int(4), 1, ((0 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(5), int(5)))))), ivec3(ivec4(_GLF_IDENTITY(ivec3(int(4), 1, ((0 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(5), int(5)))), (ivec3(int(4), 1, ((0 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(5), int(5))))) | ivec3(0, 0, 0)), 1))))), int(4))) | 1), _GLF_IDENTITY(! (! (_injected_loop_counter < (((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), 0 ^ (_GLF_IDENTITY(int(4), int(4)))), clamp(_GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_IDENTITY(4, max(_GLF_IDENTITY(4, int(ivec3(_GLF_IDENTITY(4, (4) >> 0), 1, 0))), _GLF_IDENTITY(4, 0 + (4)))), (true ? 4 : _GLF_FUZZED(_injected_loop_counter)))), _GLF_IDENTITY(int(4), (false ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(int(4), (true ? int(4) : _GLF_FUZZED((_injected_loop_counter << -58520))))))), _GLF_IDENTITY(int(4), int(4)), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), (true ? _GLF_IDENTITY(int(4), int(4)) : _GLF_FUZZED(-17998))), _GLF_IDENTITY((_GLF_IDENTITY(int(4), int(4))) | (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), 0 | (_GLF_IDENTITY(int(4), int(4)))), (_GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), 0 | (_GLF_IDENTITY(int(4), int(4))))) / 1)), (0 | 0) | ((_GLF_IDENTITY(int(4), int(4))) | (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), 0 | (_GLF_IDENTITY(int(4), int(4)))), (_GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), 0 | (_GLF_IDENTITY(int(4), int(4))))) / 1)))))))) | (_GLF_IDENTITY(int(4), int(4))))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(4), min(_GLF_IDENTITY(int(4), int(ivec4(_GLF_IDENTITY(int(4), (false ? _GLF_FUZZED(12601) : int(4))), 0, ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6))), 1))), int(4))), _GLF_IDENTITY(int(4), min(int(4), _GLF_IDENTITY(int(4), 0 ^ (int(4))))))) | 1))), false || (! (! (_injected_loop_counter < (((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(4, ~ (~ (4)))), int(4)), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(4), max(_GLF_IDENTITY(int(4), (int(4)) | (0 << _GLF_IDENTITY(int(3), int(3)))), _GLF_IDENTITY(int(4), (int(4)) | (int(4))))), int(4)), clamp(_GLF_IDENTITY(int(4), int(4)), _GLF_IDENTITY(int(4), int(_GLF_IDENTITY(4, (4) ^ 0))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), (_GLF_IDENTITY(int(4), int(4))) >> 0), (_GLF_IDENTITY(int(4), int(4))) | (_GLF_IDENTITY(int(4), int(4))))))) | (_GLF_IDENTITY(int(4), int(4))), int(ivec2((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(4), max(_GLF_IDENTITY(int(4), (int(4)) | (0 << _GLF_IDENTITY(int(3), int(3)))), _GLF_IDENTITY(int(4), (int(4)) | (int(4))))), int(4)), clamp(_GLF_IDENTITY(int(4), int(4)), _GLF_IDENTITY(int(4), int(_GLF_IDENTITY(4, (4) ^ 0))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), (_GLF_IDENTITY(int(4), int(4))) >> 0), (_GLF_IDENTITY(int(4), int(4))) | (_GLF_IDENTITY(int(4), int(4))))))) | (_GLF_IDENTITY(int(4), int(4))), (1 & 1)))))) >> _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(_GLF_IDENTITY(4, (_GLF_IDENTITY(4, (4) + 0)) / 1)), min(int(_GLF_IDENTITY(4, clamp(4, 4, 4))), _GLF_IDENTITY(int(4), 0 ^ (int(4))))))) | 1))))))); _injected_loop_counter ++)
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         atomicStore(buf[virtual_gid], uint(_GLF_IDENTITY(1, _GLF_IDENTITY((_GLF_IDENTITY(1, ~ (~ (1)))) + (0 << _GLF_IDENTITY(int(4), int(4))), 0 | ((_GLF_IDENTITY(1, ~ (~ (1)))) + (0 << _GLF_IDENTITY(int(4), int(4))))))), 4, 64, 4);
        }
       else
        {
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
        barrier();
      }
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   do
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   atomicStore(buf[next_virtual_gid], uint(2), 4, 64, _GLF_IDENTITY(4, (4) >> 0));
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(false), ! (! (bool(false))))), bool(bool(bool(_GLF_IDENTITY(bool(false), ! (! (bool(false)))))))), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(false), ! (! (bool(false))))), bool(bool(bool(_GLF_IDENTITY(bool(false), ! (! _GLF_IDENTITY((bool(false)), bool(bool((bool(false))))))))))), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(false), ! (! (_GLF_IDENTITY(bool(false), true && (_GLF_IDENTITY(bool(false), ! (_GLF_IDENTITY(! (bool(false)), ! (! (! (bool(false))))))))))))), bool(bool(bool(_GLF_IDENTITY(bool(false), ! (! (bool(false)))))))), true, false), bvec3(bvec4(bvec3(_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(false), ! (! (bool(false))))), bool(bool(bool(_GLF_IDENTITY(bool(false), ! (! (bool(false)))))))), _GLF_IDENTITY(true, (true) && true), false), false))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(false), ! (! (bool(false))))), _GLF_IDENTITY(bool(bool(bool(_GLF_IDENTITY(bool(false), ! (! (bool(false))))))), ! (! (bool(bool(bool(_GLF_IDENTITY(bool(false), ! (! (bool(false))))))))))), ! (! (_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(false), ! (! (bool(false))))), bool(bool(bool(_GLF_IDENTITY(bool(false), ! (_GLF_IDENTITY(! (bool(false)), ! (! (! (bool(false)))))))))))))))))), bool(bvec2(bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(false), ! (! (bool(false))))), bool(bool(bool(_GLF_IDENTITY(bool(false), ! (! (bool(false)))))))), _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(false), ! (! (bool(false))))), bool(bool(bool(_GLF_IDENTITY(bool(false), ! (! (bool(false)))))))), ! (! (_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(false), ! (! (bool(false))))), bool(bool(bool(_GLF_IDENTITY(bool(false), ! (! (bool(false)))))))))))), bool(_GLF_IDENTITY(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(false), ! (! (bool(false))))), bool(bool(bool(_GLF_IDENTITY(bool(false), ! (! (bool(false)))))))), ! (! (_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(false), ! (! (bool(false))))), bool(bool(bool(_GLF_IDENTITY(bool(false), ! _GLF_IDENTITY((_GLF_IDENTITY(! (bool(false)), bool(bvec3(! (bool(false)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))), false || (_GLF_IDENTITY((_GLF_IDENTITY(! (bool(false)), bool(bvec3(! (bool(false)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))), ((_GLF_IDENTITY(! (bool(false)), bool(bvec3(! (bool(false)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))))) || false)))))))))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false), bvec3(bvec3(_GLF_IDENTITY(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(false), ! (! (bool(false)))), (_GLF_IDENTITY(bool(false), ! (! (bool(false))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), bool(bool(bool(_GLF_IDENTITY(bool(false), ! (! (bool(false)))))))), ! (! (_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(false), ! (! (bool(_GLF_IDENTITY(false, true && (false))))))), bool(bool(bool(_GLF_IDENTITY(bool(false), ! (! (bool(false)))))))))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false), bvec3(bvec4(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(false), ! (! (bool(false))))), bool(bool(bool(_GLF_IDENTITY(bool(false), ! (! (bool(false)))))))), ! (! (_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(false), ! (! (bool(false))))), bool(bool(bool(_GLF_IDENTITY(bool(false), ! (! (bool(false)))))))))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false), true))))))))))), false)))))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
    }
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
