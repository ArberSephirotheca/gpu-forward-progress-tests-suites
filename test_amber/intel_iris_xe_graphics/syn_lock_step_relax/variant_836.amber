#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bool(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), bool(bvec2(bool(_GLF_IDENTITY(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) || false)), false)))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).y))), bool(_GLF_IDENTITY(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) && true))
  return;
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(bvec3((injectionSwitch.x > injectionSwitch.y), true, false)), true && (bool(bvec3((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(true, (true) || false), false))))))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec3(injectionSwitch.x > injectionSwitch.y, false, false))))))))))))
    return;
   return;
  }
 if(_GLF_DEAD(false))
  {
   do
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       return;
      }
     else
      {
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 uint subgroup_size = 16;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(mat4x2(injectionSwitch, _GLF_IDENTITY(1.0, min(1.0, 1.0)), 1.0, 1.0, 0.0, 0.0, 1.0))).x > _GLF_IDENTITY(injectionSwitch.y, 1.0 * (injectionSwitch.y))))))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) && true)))
            {
             do
              {
               return;
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           else
            {
            }
          }
         return;
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(false))
        return;
       return;
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     return;
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, false || (false))))))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          continue;
         return;
        }
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          continue;
         break;
        }
       if(_GLF_DEAD(false))
        return;
       return;
      }
     while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), true && (_GLF_WRAPPED_LOOP(false))));
    }
   else
    {
    }
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)), injectionSwitch)).y))))
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 << _GLF_IDENTITY(int(8), int(8)))); _injected_loop_counter --)
    {
     return;
    }
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(false))
  return;
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY((0 | 0), int(ivec3(_GLF_IDENTITY((0 | 0), 0 ^ ((0 | 0))), 1, 1)))); _injected_loop_counter --)
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(7965.1763)), bool(false))))) > injectionSwitch.y)) || false)), ! (! (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false)))))))
    {
     if(_GLF_DEAD(false))
      break;
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _GLF_IDENTITY(_injected_loop_counter ++, (_GLF_IDENTITY(_injected_loop_counter ++, (_GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) + 0)) / 1)) / 1))
        {
         return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
         if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))))
          {
           if(_GLF_DEAD(false))
            break;
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_DEAD(false))
            continue;
           return;
           if(_GLF_DEAD(false))
            continue;
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, 0 | (0))); _injected_loop_counter --)
        {
         return;
        }
      }
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            return;
          }
        }
       return;
      }
    }
   if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
    return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)))))
  return;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
  }
 else
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, bool(bvec2(false, true))), _GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ! (! ((injectionSwitch.x < injectionSwitch.y))))), false, true)))))
    return;
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), ! (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), (_GLF_IDENTITY(false, (false) && true)) && true)), false || (! (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), (_GLF_IDENTITY(false, (false) && true)) && true)))), false || (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), _GLF_IDENTITY((_GLF_IDENTITY(false, (false) && true)) && true, bool(bvec4((_GLF_IDENTITY(false, (false) && true)) && true, true, true, true))))), false || (! (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), (_GLF_IDENTITY(false, (false) && true)) && true)))))))), _GLF_IDENTITY(false, ! (! (false))))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(false, (false) && true), false)), bool(bvec2(bool(bvec2(_GLF_IDENTITY(false, _GLF_IDENTITY((_GLF_IDENTITY(false, (false) || _GLF_IDENTITY(false, ! (! (false))))), ! (! ((_GLF_IDENTITY(false, (false) || _GLF_IDENTITY(false, ! (! (false)))))))) && true), false)), false))), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(false, (false) && true), _GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, (false) || false))))), bool(bvec2(bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), false || (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), bool(bvec2(_GLF_IDENTITY(false, (false) && true), false)))))))), false)), false))), true, true, true)), bool(bvec3(bool(bvec4(_GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(false, (false) && true), false)), bool(bvec2(bool(bvec2(_GLF_IDENTITY(false, (false) && true), false)), false))), true, true, true)), true, false))))), ! (! (bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), (false) && true), false)), ! (! (bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), (false) && true), false))))), bool(bvec2(bool(bvec2(_GLF_IDENTITY(false, (false) && true), false)), false)))))))), true && (bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(false, (false) && true), false)), bool(bvec2(bool(bvec2(_GLF_IDENTITY(false, _GLF_IDENTITY((_GLF_IDENTITY(false, (false) || _GLF_IDENTITY(false, ! (! (false))))), ! (! ((_GLF_IDENTITY(false, (false) || _GLF_IDENTITY(false, ! (! (false)))))))) && true), false)), false))), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(false, (false) && true), _GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, (false) || false))))), bool(bvec2(bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), false || (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), bool(bvec2(_GLF_IDENTITY(false, (false) && true), false)))))))), false)), false))), true, true, true)), bool(bvec3(bool(bvec4(_GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(false, (false) && true), false)), bool(bvec2(bool(bvec2(_GLF_IDENTITY(false, (false) && true), false)), false))), true, true, true)), true, false))))), ! (! (bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), (false) && true), false)), ! (! (bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), (false) && true), false))))), bool(bvec2(bool(bvec2(_GLF_IDENTITY(false, (false) && true), false)), false)))))))))))) || (false), true && (_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(false, (false) && true), false)), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(false, (false) && true), false)), bool(bvec2(bool(bvec2(_GLF_IDENTITY(false, _GLF_IDENTITY((false) && true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY((false) && true, false || ((false) && true))))), false)), false)))), ! (! (bool(_GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), (false) && true), false)), bool(bvec2(bool(bvec2(_GLF_IDENTITY(false, (false) && true), false)), false)))))))))), (_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(false, (false) && true), false)), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(false, (false) && true), false)), bool(bvec2(bool(bvec2(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec3(false, true, false)))) && true), false)), false)))), ! (! (bool(_GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), (false) && true), false || (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), (false) && true), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), (false) && true)))))), false)), bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(bool(bvec2(_GLF_IDENTITY(false, (false) && true), false)), false), bvec2(bvec3(bvec2(bool(bvec2(_GLF_IDENTITY(false, (false) && true), false)), false), true))), _GLF_IDENTITY(_GLF_IDENTITY(bvec2(bvec4(_GLF_IDENTITY(bvec2(bool(bvec2(_GLF_IDENTITY(false, (false) && true), false)), false), bvec2(bvec2(bvec2(bool(bvec2(_GLF_IDENTITY(false, (false) && true), false)), false)))), true, false)), bvec2(bvec4(_GLF_IDENTITY(bvec2(bvec4(_GLF_IDENTITY(bvec2(bool(bvec2(_GLF_IDENTITY(false, (false) && true), false)), false), bvec2(bvec2(bvec2(bool(bvec2(_GLF_IDENTITY(false, (false) && true), false)), false)))), true, false)), bvec2(_GLF_IDENTITY(bvec3(bvec2(bvec4(_GLF_IDENTITY(bvec2(bool(bvec2(_GLF_IDENTITY(false, (false) && true), false)), false), bvec2(bvec2(bvec2(bool(bvec2(_GLF_IDENTITY(false, (false) && true), false)), false)))), true, false)), false), bvec3(bvec4(bvec3(bvec2(bvec4(_GLF_IDENTITY(bvec2(bool(bvec2(_GLF_IDENTITY(false, (false) && true), false)), false), bvec2(bvec2(bvec2(bool(bvec2(_GLF_IDENTITY(false, (false) && true), false)), false)))), true, false)), false), true))))), true, false))), bvec2(bvec2(bvec2(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(bool(bvec2(_GLF_IDENTITY(false, (false) && true), false)), false), _GLF_IDENTITY(bvec2(bvec3(bvec2(bool(bvec2(_GLF_IDENTITY(false, (false) && true), false)), false), true)), bvec2(bvec2(bvec2(bvec3(bvec2(bool(bvec2(_GLF_IDENTITY(false, (false) && true), false)), false), true)))))), bvec2(bvec2(bvec2(bool(bvec2(_GLF_IDENTITY(false, (false) && true), false)), false)))), true, false))))))))))))), (bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(false, (false) && true), false)), bool(bvec2(bool(bvec2(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec3(false, true, false)))) && true), false)), false)))), ! (! (bool(_GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), (false) && true), false || (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), (false) && true), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), (false) && true)))))), false)), bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(bool(bvec2(_GLF_IDENTITY(false, (false) && true), false)), false), bvec2(bvec3(bvec2(bool(bvec2(_GLF_IDENTITY(false, (false) && true), false)), false), true))), _GLF_IDENTITY(_GLF_IDENTITY(bvec2(bvec4(_GLF_IDENTITY(bvec2(bool(bvec2(_GLF_IDENTITY(false, (false) && true), false)), false), bvec2(bvec2(bvec2(bool(bvec2(_GLF_IDENTITY(false, (false) && true), false)), false)))), true, false)), bvec2(bvec4(_GLF_IDENTITY(bvec2(bvec4(_GLF_IDENTITY(bvec2(bool(bvec2(_GLF_IDENTITY(false, (false) && true), false)), false), bvec2(bvec2(bvec2(bool(bvec2(_GLF_IDENTITY(false, (false) && true), false)), false)))), true, false)), bvec2(_GLF_IDENTITY(bvec3(bvec2(bvec4(_GLF_IDENTITY(bvec2(bool(bvec2(_GLF_IDENTITY(false, (false) && true), false)), false), bvec2(bvec2(bvec2(bool(bvec2(_GLF_IDENTITY(false, (false) && true), false)), false)))), true, false)), false), bvec3(bvec4(bvec3(bvec2(bvec4(_GLF_IDENTITY(bvec2(bool(bvec2(_GLF_IDENTITY(false, (false) && true), false)), false), bvec2(bvec2(bvec2(bool(bvec2(_GLF_IDENTITY(false, (false) && true), false)), false)))), true, false)), false), true))))), true, false))), bvec2(bvec2(bvec2(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(bool(bvec2(_GLF_IDENTITY(false, (false) && true), false)), false), _GLF_IDENTITY(bvec2(bvec3(bvec2(bool(bvec2(_GLF_IDENTITY(false, (false) && true), false)), false), true)), bvec2(bvec2(bvec2(bvec3(bvec2(bool(bvec2(_GLF_IDENTITY(false, (false) && true), false)), false), true)))))), bvec2(bvec2(bvec2(bool(bvec2(_GLF_IDENTITY(false, (false) && true), false)), false)))), true, false)))))))))))))) && true))), true && (_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(false, _GLF_IDENTITY((false), _GLF_IDENTITY(false, (false) || false) || ((false))) && true), false)), bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(false, (false) && true), false)), bool(bvec2(bool(bvec2(_GLF_IDENTITY(false, (false) && true), false)), false)))), ! (! (bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), (false) && _GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec2(true, false), bvec2(bvec2(bvec2(true, false))))))), false)), ! (! (bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), (false) && true), false))))), bool(bvec2(bool(bvec2(_GLF_IDENTITY(false, (false) && true), false)), false))))))), (_GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(false, (false) && true), false)), bool(bvec2(bool(bvec2(_GLF_IDENTITY(false, (false) && true), false)), false)))), ! (! (bool(_GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), (false) && true), false)), bool(bvec2(bool(bvec2(_GLF_IDENTITY(false, (false) && true), false)), false))))))), true && (_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(false, (false) && true), false)), bool(bvec2(bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bool(false))), (false) && true), false)), false)))), ! (! (bool(_GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, true && _GLF_IDENTITY((false), ! (! ((false))))), (false) && true), false)), bool(bvec2(bool(bvec2(_GLF_IDENTITY(false, (false) && true), false)), false)))))))))) && true)))), true && (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) && true), false)), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(false, _GLF_IDENTITY((false), false || ((false))) && true), false)), bool(bvec2(bool(bvec2(_GLF_IDENTITY(false, _GLF_IDENTITY((false), ! (! ((false)))) && _GLF_IDENTITY(true, ! (! (true)))), false)), false)))), ! (! (bool(_GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), (false) && true), false)), bool(bvec2(bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), (false) && true), (_GLF_IDENTITY(false, (false) && true)) && true), false)), false))))))))))))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || (false))))))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         if(_GLF_DEAD(false))
          return;
        }
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         return;
        }
       if(_GLF_DEAD(false))
        return;
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(true, ! (! (true))), false, false), bvec3(bvec4(bvec3(_GLF_IDENTITY(true, ! (! (true))), false, false), true)))))))
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
             return;
            }
           if(_GLF_DEAD(false))
            break;
           if(_GLF_DEAD(false))
            break;
          }
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          return;
        }
       else
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = 0; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))), bool(_GLF_IDENTITY(bvec2(_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))), true), bvec2(_GLF_IDENTITY(bvec2(bvec2(_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))), true)), bvec2(bvec4(bvec2(bvec2(_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))), true)), true, false))))))); _injected_loop_counter ++)
            {
             return;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              break;
            }
          }
        }
      }
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         return;
        }
      }
     else
      {
       return;
      }
    }
   if(_GLF_DEAD(false))
    {
     do
      {
       return;
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(injectionSwitch.x > injectionSwitch.y, true, true, true)))))));
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) + _GLF_IDENTITY(vec2(0.0, _GLF_IDENTITY(0.0, (0.0) + length(sqrt(vec2(0.0, 0.0))))), min(vec2(0.0, _GLF_IDENTITY(0.0, (0.0) + length(sqrt(vec2(0.0, 0.0))))), vec2(0.0, _GLF_IDENTITY(0.0, _GLF_IDENTITY((0.0), clamp((0.0), (0.0), _GLF_IDENTITY((0.0), max((0.0), (0.0))))) + length(sqrt(vec2(0.0, 0.0)))))))))), injectionSwitch)).y))))
  return;
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_DEAD(false))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
    return;
   return;
  }
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_DEAD(false))
  return;
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
    {
     do
      {
       return;
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 uint workgroup_base = workgroup_size * workgroup_id;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
  {
   do
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         for(int _injected_loop_counter = _GLF_IDENTITY(0, (0) + (0 & -18375)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
          {
           return;
          }
         do
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
     else
      {
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      return;
     return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
        {
         if(_GLF_DEAD(false))
          return;
         return;
        }
       if(_GLF_DEAD(false))
        return;
       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) || false)))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          return;
        }
       return;
      }
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
    }
  }
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      continue;
     if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bool(_GLF_DEAD(false))), (bool(bool(_GLF_DEAD(false)))) || false)))
      continue;
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       return;
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       break;
      }
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      continue;
     return;
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    return;
   for(int _injected_loop_counter = _GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), _GLF_IDENTITY(min(int(_GLF_ONE(1.0, injectionSwitch.y)), int(_GLF_ONE(1.0, injectionSwitch.y))), (false ? _GLF_FUZZED(-34217) : min(int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(7.8) : injectionSwitch.y)))), int(_GLF_ONE(1.0, injectionSwitch.y)))))); _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(0, max(0, 0))); _injected_loop_counter --)
    {
     return;
     if(_GLF_DEAD(false))
      break;
     if(_GLF_DEAD(false))
      break;
    }
  }
 if(_GLF_DEAD(false))
  {
   do
    {
     return;
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 uint virtual_gid = workgroup_base + subgroup_id * subgroup_size + subgroup_local_id;
 uint next_virtual_gid = workgroup_base + subgroup_id * subgroup_size + (_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, (_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, min(_GLF_IDENTITY((subgroup_local_id + 1) % _GLF_IDENTITY(subgroup_size, (subgroup_size) >> 0u), _GLF_IDENTITY(((subgroup_local_id + 1) % _GLF_IDENTITY(subgroup_size, ~ (~ (subgroup_size)))), max(((subgroup_local_id + 1) % subgroup_size), ((subgroup_local_id + 1) % subgroup_size))) >> 0u), (subgroup_local_id + 1) % _GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, _GLF_IDENTITY(subgroup_size, max(_GLF_IDENTITY(subgroup_size, (subgroup_size) >> 0u), subgroup_size))))))) ^ _GLF_IDENTITY(0u, (0u) | (0u))));
 _GLF_IDENTITY(buf[virtual_gid] = 1, (buf[virtual_gid] = 1) >> _GLF_IDENTITY((1u ^ 1u), min(_GLF_IDENTITY((_GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, (1u) >> 0u)) | (1u)) ^ 1u), (false ? _GLF_FUZZED(subgroup_local_id) : (1u ^ 1u))), _GLF_IDENTITY((1u ^ 1u), max((_GLF_IDENTITY(1u, uint(uvec3(1u, 1u, 0u))) ^ 1u), (1u ^ 1u))))));
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false, true)), bool(bool(bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false, true))))))))
    return;
   return;
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   do
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, false || (false))) && true)))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
           return;
          }
        }
       else
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bool(true), _GLF_IDENTITY((bool(true)) || false, ((bool(true)) || false) && true)))), ! (! (true))), _GLF_IDENTITY(! (! (true)), ! (! (! (! (true))))))), (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(true, (true) && true), ! (! (true))), _GLF_IDENTITY(! (! (true)), ! (! (! (! (true)))))))) || false), (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(true, ! (! (true))), _GLF_IDENTITY(! (! (true)), _GLF_IDENTITY(! (! (! (! (true)))), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(! (! (! _GLF_IDENTITY((! (true)), ((! (true))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), false || (_GLF_IDENTITY(! (! (! (! (true)))), bool(bvec2(! (! _GLF_IDENTITY((! (! (true))), ((! (! (true)))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), true))))), false, true), bvec3(bvec4(bvec3(_GLF_IDENTITY(! (! (! (_GLF_IDENTITY(! (true), bool(bvec4(! (true), false, false, false)))))), false || (_GLF_IDENTITY(! (_GLF_IDENTITY(! (! (! (true))), _GLF_IDENTITY(bool(bool(! (! (! (true))))), true && (bool(bool(! (! (! (true))))))))), bool(bvec2(! (! (! (! (true)))), true))))), false, true), false)))))))), (! (_GLF_IDENTITY(_GLF_IDENTITY(true, ! (! (true))), _GLF_IDENTITY(! (! (true)), _GLF_IDENTITY(! (! (! (! (true)))), (! (! (! (! (true))))) || false))))) || false)) || false), ! _GLF_IDENTITY((! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(true, ! (! (true))), _GLF_IDENTITY(_GLF_IDENTITY(! (! (true)), ! (! _GLF_IDENTITY((! (! (true))), true && (_GLF_IDENTITY((! (! (true))), ((! (! (true)))) && true))))), false || (_GLF_IDENTITY(! (_GLF_IDENTITY(! (true), true && (! (true)))), ! (_GLF_IDENTITY(! _GLF_IDENTITY((! _GLF_IDENTITY((! (true)), true && ((! (true))))), true && (_GLF_IDENTITY((! (! (true))), ((! (! (true)))) && true))), true && (! _GLF_IDENTITY((! _GLF_IDENTITY((! (true)), true && ((! (true))))), true && (_GLF_IDENTITY((! (! (true))), ((! (! (true)))) && true))))))))))), bool(bvec4(! (_GLF_IDENTITY(_GLF_IDENTITY(true, ! (! (true))), _GLF_IDENTITY(! (! _GLF_IDENTITY((true), ! (! ((_GLF_IDENTITY(true, bool(bvec2(_GLF_IDENTITY(true, bool(bvec2(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), false)))))))), ! (! (! (! (true))))))), false, true, true))))), ! (_GLF_IDENTITY(! ((! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(true, ! (! (true))), _GLF_IDENTITY(_GLF_IDENTITY(! (! (true)), ! (! _GLF_IDENTITY((! (! (true))), true && (_GLF_IDENTITY((! (! _GLF_IDENTITY((true), ! (! (_GLF_IDENTITY((true), bool(bool((true))))))))), ((! (! (true)))) && true))))), false || (_GLF_IDENTITY(! (! (true)), ! (! _GLF_IDENTITY((! _GLF_IDENTITY((! (true)), true && ((! (true))))), true && (_GLF_IDENTITY((! (! (true))), ((! (! _GLF_IDENTITY((true), true && ((true)))))) && true))))))))), bool(bvec4(! (_GLF_IDENTITY(_GLF_IDENTITY(true, ! (! (true))), _GLF_IDENTITY(! (! _GLF_IDENTITY((_GLF_IDENTITY(true, (_GLF_IDENTITY(true, bool(bvec3(true, false, true)))) && true)), ! (! ((true))))), ! (! (! _GLF_IDENTITY((! (true)), ((! (true))) || false)))))), false, true, true)))))), false || (! ((! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(true, ! (! (true))), _GLF_IDENTITY(_GLF_IDENTITY(! (! (true)), ! (! _GLF_IDENTITY((! (! (_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, true && (true)))))))), true && (_GLF_IDENTITY((! (_GLF_IDENTITY(! (true), (! (true)) && true))), ((! (! (true)))) && true))))), _GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) || false)))) || (_GLF_IDENTITY(! (! (true)), ! _GLF_IDENTITY((! _GLF_IDENTITY((! _GLF_IDENTITY((! (true)), true && ((! (_GLF_IDENTITY(true, (_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), (! (true)) && true)))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))), true && (_GLF_IDENTITY((! (! _GLF_IDENTITY((true), false || ((true))))), ((! (! (true)))) && true)))), false || ((! _GLF_IDENTITY((! _GLF_IDENTITY((! (true)), true && ((! (_GLF_IDENTITY(true, (true) && _GLF_IDENTITY(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(510.790) : injectionSwitch.x)) < injectionSwitch.y)), true && (_GLF_IDENTITY(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(510.790) : injectionSwitch.x)) < injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(510.790) : injectionSwitch.x)) < injectionSwitch.y))), true && (! (_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(510.790) : injectionSwitch.x)) < injectionSwitch.y))))))))))))))), true && (_GLF_IDENTITY((! (! _GLF_IDENTITY((true), false || ((true))))), ((! (! (true)))) && true))))))))))), bool(bvec4(! (_GLF_IDENTITY(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), ! (_GLF_IDENTITY(! (! (true)), bool(bool(! (! (true))))))))), _GLF_IDENTITY(! (! _GLF_IDENTITY((true), ! (! ((true))))), ! (! (! (! (true))))))), false, true, true)))))))))))))), false || (_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(true, ! (! (true))), _GLF_IDENTITY(! (! (true)), ! (_GLF_IDENTITY(! (! (! (true))), ! (_GLF_IDENTITY(! _GLF_IDENTITY((! (_GLF_IDENTITY(! (! (true)), (_GLF_IDENTITY(! (! (true)), false || (_GLF_IDENTITY(! (! (true)), (_GLF_IDENTITY(! (! (true)), ! (! (! (! (_GLF_IDENTITY(true, _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))).y)) || (true)))))))) && true)))) && _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x < injectionSwitch.y))), false || (! (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))))))), ((! (_GLF_IDENTITY(! (! (true)), (_GLF_IDENTITY(! (! (true)), false || (! (! (true))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))) && true), bool(bvec2(_GLF_IDENTITY(! _GLF_IDENTITY((! (_GLF_IDENTITY(! (! (true)), (_GLF_IDENTITY(! (! (true)), false || (_GLF_IDENTITY(! (! (true)), (_GLF_IDENTITY(! (! (true)), ! (! (! (! (_GLF_IDENTITY(true, _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))).y)) || (true)))))))) && true)))) && _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x < injectionSwitch.y))), false || (! (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))))))), ((! (_GLF_IDENTITY(! (! (true)), (_GLF_IDENTITY(! (! (true)), false || (! (! (true))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))) && true), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(! _GLF_IDENTITY((! (_GLF_IDENTITY(! (! (true)), (_GLF_IDENTITY(! (! (true)), false || (_GLF_IDENTITY(! (! (true)), (_GLF_IDENTITY(! (! (true)), ! (! (! (! (_GLF_IDENTITY(true, _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))).y)) || (true)))))))) && true)))) && _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x < injectionSwitch.y))), false || (! (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))))))), ((! (_GLF_IDENTITY(! (! (true)), (_GLF_IDENTITY(! (! (true)), false || (! (! (true))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))) && true)), (bool(! _GLF_IDENTITY((! (_GLF_IDENTITY(! (! (true)), (_GLF_IDENTITY(! (! (true)), false || (_GLF_IDENTITY(! (! (true)), (_GLF_IDENTITY(! (! (true)), ! (! (! (! (_GLF_IDENTITY(true, _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))).y)) || (true)))))))) && true)))) && _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x < injectionSwitch.y))), false || (! (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))))))), ((! (_GLF_IDENTITY(! (! (true)), (_GLF_IDENTITY(! (! (true)), false || (! (! (true))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))) && true))) && true)), bool(bool(bool(_GLF_IDENTITY(bool(! _GLF_IDENTITY((! (_GLF_IDENTITY(! (! (true)), (_GLF_IDENTITY(! (! (true)), false || (_GLF_IDENTITY(! (! (true)), (_GLF_IDENTITY(! (! (true)), ! (! (! (! (_GLF_IDENTITY(true, _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))).y)) || (true)))))))) && true)))) && _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x < injectionSwitch.y))), false || (! (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))))))), ((! (_GLF_IDENTITY(! (! (true)), (_GLF_IDENTITY(! (! (true)), false || (! (! (true))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))) && true)), (bool(! _GLF_IDENTITY((! (_GLF_IDENTITY(! (! (true)), (_GLF_IDENTITY(! (! (true)), false || (_GLF_IDENTITY(! (! (true)), (_GLF_IDENTITY(! (! (true)), ! (! (! (! (_GLF_IDENTITY(true, _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))).y)) || (true)))))))) && true)))) && _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x < injectionSwitch.y))), false || (! (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))))))), ((! (_GLF_IDENTITY(! (! (true)), (_GLF_IDENTITY(! (! (true)), false || (! (! (true))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))) && true))) && true)))))), true))))))))), ((_GLF_IDENTITY(_GLF_IDENTITY(true, ! (! (true))), _GLF_IDENTITY(_GLF_IDENTITY(! (! _GLF_IDENTITY((true), bool(bvec2((true), false)))), true && (! _GLF_IDENTITY(_GLF_IDENTITY((! (true)), (_GLF_IDENTITY((! (true)), (_GLF_IDENTITY((! (true)), true && ((! (true))))) || _GLF_IDENTITY(false, bool(bvec4(false, true, true, true))))) && true), ! (! ((! (true))))))), ! (! (! (! _GLF_IDENTITY((true), bool(bool(_GLF_IDENTITY((true), _GLF_IDENTITY(bool(bvec3((true), true, false)), ! (! (bool(bvec3((true), true, false)))))))))))))))) && _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(float(172990u))), bool(false))) < _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(mat4x3(injectionSwitch.y, 0.0, 1.0, 0.0, 0.0, _GLF_IDENTITY(0.0, min(0.0, 0.0)), 1.0, abs(0.0), round(length(normalize(vec2(1.0, 1.0)))), _GLF_ONE(1.0, injectionSwitch.y), exp(0.0), _GLF_IDENTITY(1.0, min(1.0, 1.0)))), _GLF_IDENTITY((float(mat4x3(injectionSwitch.y, _GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(5489.7107)), float(0.0), bool(true))))), 0.0)), 1.0, 0.0, 0.0, 0.0, 1.0, abs(0.0), round(length(normalize(vec2(1.0, _GLF_IDENTITY(1.0, max(1.0, _GLF_IDENTITY(1.0, float(vec3(1.0, 0.0, 0.0))))))))), _GLF_ONE(1.0, injectionSwitch.y), exp(0.0), _GLF_IDENTITY(1.0, min(1.0, 1.0))))), ((float(mat4x3(injectionSwitch.y, _GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(5489.7107)), float(0.0), bool(true))))), 0.0)), 1.0, 0.0, 0.0, 0.0, 1.0, abs(0.0), round(length(normalize(vec2(1.0, _GLF_IDENTITY(1.0, max(1.0, _GLF_IDENTITY(1.0, float(vec3(1.0, 0.0, 0.0))))))))), _GLF_ONE(1.0, injectionSwitch.y), exp(0.0), _GLF_IDENTITY(1.0, min(1.0, 1.0)))))) / 1.0) * 1.0)))))))))))
          {
           if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           return;
           if(_GLF_DEAD(false))
            {
             if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, false || (false))), false || (_GLF_WRAPPED_IF_FALSE(false))))
              {
              }
             else
              {
               do
                {
                 for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, clamp(0, 0, 0))); _injected_loop_counter --)
                  {
                   if(_GLF_DEAD(false))
                    return;
                   return;
                  }
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              continue;
            }
          }
         else
          {
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > ((0 | 0) << _GLF_IDENTITY(int(7), int(7)))); _injected_loop_counter --)
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                return;
               return;
              }
             if(_GLF_DEAD(false))
              return;
            }
           if(_GLF_DEAD(false))
            return;
          }
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false))))
    return;
   if(_GLF_DEAD(false))
    {
     do
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        return;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         return;
        }
      }
    }
  }
 else
  {
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      return;
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))
      return;
     do
      {
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (true)), _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))), min(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))), clamp((_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))), (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))), (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))))), _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))), (true ? _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))), (true ? (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))) : _GLF_FUZZED(6.7))) : _GLF_FUZZED(892.066))))) - 0.0) < injectionSwitch.y), bool(_GLF_IDENTITY(bool((_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x < injectionSwitch.y)), ! (! (bool((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x < injectionSwitch.y, ! (! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(max(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat4x2(injectionSwitch, _GLF_IDENTITY(dot(vec3(0.0, 0.0, 1.0), vec3(tan(0.0), 0.0, 1.0)), dot(vec3(0.0, 0.0, 1.0), vec3(tan(0.0), 0.0, 1.0))), 0.0, 1.0, 1.0, 0.0, round(length(normalize(vec3(1.0, 1.0, 1.0))))), (true ? mat4x2(injectionSwitch, _GLF_IDENTITY(dot(vec3(0.0, 0.0, 1.0), vec3(tan(0.0), 0.0, 1.0)), dot(vec3(0.0, 0.0, 1.0), vec3(tan(0.0), 0.0, 1.0))), 0.0, 1.0, 1.0, 0.0, round(length(normalize(vec3(1.0, 1.0, 1.0))))) : _GLF_FUZZED((mat4x2(14.47, -1.6, -3289.2762, 134.483, 34.86, -721.812, -63.18, -0.3) * mat4(0.0, -945.788, -644.905, 7.9, -2858.8058, -74.45, -5163.0538, 841.787, 9.4, 4.4, 1.7, -52.93, -71.93, 9.0, -7.9, 3265.9132))))))), injectionSwitch), min(_GLF_IDENTITY(max(injectionSwitch, injectionSwitch), max(max(injectionSwitch, injectionSwitch), max(injectionSwitch, injectionSwitch))), _GLF_IDENTITY(max(injectionSwitch, injectionSwitch), vec2(mat2x3(max(injectionSwitch, injectionSwitch), 1.0, 1.0, 0.0, 1.0)))))).x, min(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(max(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat4x2(injectionSwitch, _GLF_IDENTITY(dot(vec3(0.0, 0.0, 1.0), vec3(tan(0.0), 0.0, 1.0)), dot(vec3(0.0, 0.0, 1.0), vec3(tan(0.0), 0.0, 1.0))), 0.0, 1.0, 1.0, 0.0, round(length(normalize(vec3(1.0, 1.0, 1.0))))), (true ? mat4x2(injectionSwitch, _GLF_IDENTITY(dot(vec3(0.0, 0.0, 1.0), vec3(tan(0.0), 0.0, 1.0)), dot(vec3(0.0, 0.0, 1.0), vec3(tan(0.0), 0.0, 1.0))), 0.0, 1.0, 1.0, 0.0, round(length(normalize(vec3(1.0, 1.0, 1.0))))) : _GLF_FUZZED((mat4x2(14.47, -1.6, -3289.2762, 134.483, 34.86, -721.812, -63.18, -0.3) * mat4(0.0, -945.788, -644.905, 7.9, -2858.8058, -74.45, -5163.0538, 841.787, 9.4, 4.4, 1.7, -52.93, -71.93, 9.0, -7.9, 3265.9132))))))), injectionSwitch), min(_GLF_IDENTITY(max(injectionSwitch, injectionSwitch), max(max(injectionSwitch, injectionSwitch), max(injectionSwitch, injectionSwitch))), _GLF_IDENTITY(max(injectionSwitch, injectionSwitch), vec2(mat2x3(max(injectionSwitch, injectionSwitch), 1.0, 1.0, 0.0, 1.0)))))).x, _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(max(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat4x2(injectionSwitch, _GLF_IDENTITY(dot(vec3(0.0, 0.0, 1.0), vec3(tan(0.0), 0.0, 1.0)), dot(vec3(0.0, 0.0, 1.0), vec3(tan(0.0), 0.0, 1.0))), 0.0, 1.0, 1.0, 0.0, round(length(normalize(vec3(1.0, 1.0, 1.0))))), (true ? mat4x2(injectionSwitch, _GLF_IDENTITY(dot(vec3(0.0, 0.0, 1.0), vec3(tan(0.0), 0.0, 1.0)), dot(vec3(0.0, 0.0, 1.0), vec3(tan(0.0), 0.0, 1.0))), 0.0, 1.0, 1.0, 0.0, round(length(normalize(vec3(1.0, 1.0, 1.0))))) : _GLF_FUZZED((mat4x2(14.47, -1.6, -3289.2762, 134.483, 34.86, -721.812, -63.18, -0.3) * mat4(0.0, -945.788, -644.905, 7.9, -2858.8058, -74.45, -5163.0538, 841.787, 9.4, 4.4, 1.7, -52.93, -71.93, 9.0, -7.9, 3265.9132))))))), injectionSwitch), min(_GLF_IDENTITY(max(injectionSwitch, injectionSwitch), max(max(injectionSwitch, injectionSwitch), max(injectionSwitch, injectionSwitch))), _GLF_IDENTITY(max(injectionSwitch, injectionSwitch), vec2(mat2x3(max(injectionSwitch, injectionSwitch), 1.0, 1.0, 0.0, 1.0)))))).x)) < injectionSwitch.y)))))))))))))
        {
         for(int _injected_loop_counter = (_GLF_IDENTITY(1, (1) - 0) ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              continue;
             return;
            }
           if(_GLF_DEAD(false))
            return;
           atomicStore(buf[next_virtual_gid], uint(2), 4, 64, 0);
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
           if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), true && ((false)))))))
            {
             if(_GLF_DEAD(false))
              break;
             break;
            }
          }
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
          {
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
              {
               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                }
               else
                {
                 if(_GLF_DEAD(false))
                  continue;
                 return;
                }
              }
             if(_GLF_DEAD(false))
              break;
            }
           if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
            return;
           return;
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             return;
            }
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            break;
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                break;
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                return;
               return;
              }
            }
           return;
          }
         if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bool(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true)))))))
          return;
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            return;
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, false)))))
            return;
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) / 1) < int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y, _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-680.918)), float(injectionSwitch.y), _GLF_IDENTITY(bool(true), false || (bool(true)))))))))))); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(false))
              break;
             return;
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
           if(_GLF_DEAD(false))
            return;
          }
         if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))) && true))
          return;
         do
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              continue;
             if(_GLF_DEAD(false))
              {
               if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false)))))))
                continue;
               return;
              }
             return;
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              return;
             return;
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
           return;
           if(_GLF_DEAD(false))
            continue;
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), (_GLF_WRAPPED_IF_TRUE(true)) && true))
            {
             if(_GLF_DEAD(false))
              {
               do
                {
                 if(_GLF_DEAD(false))
                  return;
                 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)))
                  continue;
                }
               while(_GLF_WRAPPED_LOOP(false));
               return;
              }
             if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true))))
              return;
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((0 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(3), int(3)))); _injected_loop_counter --)
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(false))
                    continue;
                   continue;
                  }
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  continue;
                 return;
                }
               if(_GLF_DEAD(false))
                return;
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                return;
              }
             if(_GLF_DEAD(false))
              continue;
             if(_GLF_DEAD(false))
              return;
             if(_GLF_DEAD(false))
              return;
             if(_GLF_DEAD(false))
              return;
             if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, ! (! (false))), false))), (injectionSwitch.x > injectionSwitch.y)))), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && _GLF_IDENTITY(true, ! (! (true)))))))), bool(bvec3(bool(bvec2(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), _GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y)))))), false, true))))))
              {
               if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))))
                return;
               return;
              }
             if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y, _GLF_IDENTITY(float(_GLF_IDENTITY(mat2x3(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y), log(determinant(mat4(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0)))), (mat2x3(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y), log(determinant(mat4(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0))))) - mat2x3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0))), min(float(_GLF_IDENTITY(mat2x3(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y), log(determinant(mat4(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0)))), (mat2x3(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y), log(determinant(mat4(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0))))) - mat2x3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0))), float(_GLF_IDENTITY(mat2x3(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y), log(determinant(mat4(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0)))), (mat2x3(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y), log(determinant(mat4(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0))))) - mat2x3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))))))), bool(bool(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false)), (_GLF_IDENTITY(injectionSwitch.x, float(mat3x2(injectionSwitch.x, _GLF_ONE(1.0, injectionSwitch.y), 0.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 1.0, _GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, clamp(_GLF_IDENTITY(0.0, clamp(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), 0.0, 0.0)), _GLF_IDENTITY(0.0, max(0.0, _GLF_IDENTITY(0.0, (0.0) + 0.0))), _GLF_IDENTITY(0.0, (0.0) / 1.0))), 0.0))))) > injectionSwitch.y)))))))
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! _GLF_IDENTITY((! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), (_GLF_IDENTITY((! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), false || ((! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) && true))))
                  {
                   if(_GLF_DEAD(false))
                    break;
                   do
                    {
                     return;
                    }
                   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))
                    continue;
                  }
                 return;
                 for(int _injected_loop_counter = _GLF_IDENTITY((1 | 0), min((1 | 0), (1 | 0))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                  {
                   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false))))))))
                    {
                     if(_GLF_DEAD(false))
                      return;
                     if(_GLF_DEAD(false))
                      continue;
                     return;
                    }
                   if(_GLF_DEAD(false))
                    return;
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    break;
                  }
                 do
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    return;
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                 if(_GLF_DEAD(false))
                  return;
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  return;
                }
              }
             if(_GLF_DEAD(false))
              {
               if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), bool(bvec2(_GLF_WRAPPED_IF_TRUE(true), false))))
                {
                 return;
                 if(_GLF_DEAD(false))
                  break;
                }
               else
                {
                }
               if(_GLF_DEAD(false))
                break;
              }
            }
           else
            {
             if(_GLF_DEAD(false))
              return;
             for(int _injected_loop_counter = (0 ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7)))); _injected_loop_counter ++)
              {
               if(_GLF_DEAD(false))
                return;
              }
             if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
              return;
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              return;
             if(_GLF_DEAD(false))
              return;
             return;
            }
          }
         if(_GLF_DEAD(false))
          {
           do
            {
             return;
            }
           while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), bool(bvec3(_GLF_WRAPPED_LOOP(false), true, true))));
          }
        }
       else
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) && true)))
            {
            }
           else
            {
             return;
            }
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(false))
            continue;
           return;
          }
         if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bool(bvec4(false, false, false, false)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(bool(bvec4(false, false, false, false)), ! (! (bool(bvec4(false, false, false, false)))))), (! (_GLF_IDENTITY(bool(bvec4(false, false, false, false)), ! (! (bool(bvec4(false, false, false, false))))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))) && true)))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
            return;
           if(_GLF_DEAD(false))
            return;
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter --, (true ? _injected_loop_counter -- : _GLF_FUZZED(_injected_loop_counter))), (_GLF_IDENTITY(_injected_loop_counter --, (true ? _injected_loop_counter -- : _GLF_FUZZED(_injected_loop_counter)))) << 0))
            {
             return;
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))))
            return;
          }
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(8.6)), float(_GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, float(_GLF_IDENTITY(mat4(injectionSwitch.y, 1.0, 0.0, 0.0, exp(_GLF_IDENTITY(0.0, min(0.0, 0.0))), 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, abs(0.0), 1.0), (false ? _GLF_FUZZED(mat4(-2.3, -0.6, 185.552, 549.655, 61.91, 6080.5306, -44.84, -8.3, 12.21, 4.2, -8.5, -7535.7046, -4.2, 8.3, 9.2, 1.6)) : mat4(injectionSwitch.y, _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-498.236)), float(1.0), bool(true))), 0.0, 0.0, exp(0.0), 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, abs(0.0), 1.0))))), injectionSwitch.y))), bool(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), (! (true)) || false))))))) + length(vec3(0.0, 0.0, 0.0)))))))
          {
           do
            {
             if(_GLF_DEAD(false))
              return;
            }
           while(_GLF_WRAPPED_LOOP(false));
           return;
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat4(injectionSwitch, 1.0, 0.0, 1.0, _GLF_IDENTITY(0.0, float(mat3x4(_GLF_IDENTITY(0.0, (0.0) * 1.0), 0.0, 1.0, 0.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0, length(0.0), cos(_GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(0.0, 0.0)), dot(vec2(1.0, 1.0), vec2(0.0, 0.0)))), 1.0, 1.0))), 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0), (false ? _GLF_FUZZED((_GLF_IDENTITY((injectionSwitch , mat4(2.7, -5116.3454, -3009.4825, -26.57, -5639.9899, -874.653, 80.40, -6.6, -3191.1394, -8578.7154, 427.615, -5989.1657, 9.5, 9.2, 3.1, 46.03)) / mat4(-411.025, _GLF_IDENTITY(7.7, (7.7) / round(length(normalize(1.0)))), 7.3, 937.845, 4.7, -7.6, 2.0, -773.285, 26.14, -4729.4274, 86.50, -5.6, -926.342, 8803.2151, -841.322, -78.14), ((injectionSwitch , mat4(2.7, -5116.3454, -3009.4825, -26.57, -5639.9899, -874.653, 80.40, -6.6, -3191.1394, -8578.7154, 427.615, -5989.1657, 9.5, 9.2, 3.1, 46.03)) / mat4(-411.025, 7.7, 7.3, 937.845, 4.7, -7.6, 2.0, -773.285, 26.14, -4729.4274, 86.50, -5.6, -926.342, 8803.2151, -841.322, -78.14)) + _GLF_IDENTITY(mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0), transpose(_GLF_IDENTITY(transpose(mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), (transpose(mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))) / mat4(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-885.805)), float(injectionSwitch.y), bool(true))))))))))))) : mat4(injectionSwitch, 1.0, _GLF_IDENTITY(0.0, (0.0) - _GLF_IDENTITY(dot(vec3(_GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat4(1.0, _GLF_IDENTITY(dot(vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, 0.0)), dot(vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, 0.0))), 0.0, 1.0, sqrt(1.0), 0.0, 1.0, 1.0, 0.0, 1.0, length(vec3(0.0, 0.0, 0.0)), 0.0, 0.0, 1.0, 1.0, 0.0)), (true ? float(mat4(1.0, _GLF_IDENTITY(dot(vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, 0.0)), dot(vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, 0.0))), 0.0, 1.0, sqrt(1.0), 0.0, 1.0, 1.0, 0.0, 1.0, length(vec3(0.0, 0.0, 0.0)), 0.0, 0.0, 1.0, 1.0, 0.0)) : _GLF_FUZZED(-740.442)))), 0.0, 0.0), vec3(sin(0.0), 1.0, 1.0)), dot(vec3(1.0, 0.0, 0.0), vec3(sin(_GLF_IDENTITY(0.0, 1.0 * (0.0))), 1.0, 1.0)))), 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0))))), injectionSwitch, injectionSwitch)).y))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           return;
          }
         do
          {
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), bool(_GLF_IDENTITY(bvec2(false, _GLF_IDENTITY(true, bool(bool(_GLF_IDENTITY(true, false || _GLF_IDENTITY((true), false || ((true)))))))), bvec2(bvec2(bvec2(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, _GLF_IDENTITY(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, (false) && true))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false)))), ! (_GLF_IDENTITY(_GLF_IDENTITY(! _GLF_IDENTITY((bool(bvec2(false, _GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-27.59), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(169.847)), bvec2(true, false))).x < injectionSwitch.y)))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || ((bool(bvec2(false, _GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-27.59), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(169.847)), bvec2(true, false))).x < injectionSwitch.y)))))))), ! (! (! (bool(_GLF_IDENTITY(bvec2(false, _GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), bvec2(bvec2(bvec2(false, _GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))))), false || (_GLF_IDENTITY(! (bool(bvec2(false, false))), bool(_GLF_IDENTITY(bool(! (bool(bvec2(false, false)))), (bool(! (bool(bvec2(false, false))))) && true)))))))), true, true, false)), ! (! (bool(bvec4(_GLF_IDENTITY(false, bool(bvec2(false, false))), true, true, false)))))), true))))))))
            {
             if(_GLF_DEAD(false))
              return;
             if(_GLF_DEAD(false))
              return;
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                return;
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                   if(_GLF_DEAD(false))
                    continue;
                   return;
                  }
                 return;
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  continue;
                }
               else
                {
                 if(_GLF_DEAD(false))
                  break;
                 if(_GLF_DEAD(false))
                  return;
                 if(_GLF_DEAD(false))
                  continue;
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                continue;
              }
             if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) || false)))
              {
               if(_GLF_DEAD(false))
                continue;
               do
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y))))))
                  break;
                 return;
                 if(_GLF_DEAD(false))
                  continue;
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             else
              {
              }
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            return;
           if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || _GLF_IDENTITY(false, ! (_GLF_IDENTITY(! _GLF_IDENTITY((false), false || ((false))), true && (! (false)))))))
            {
             if(_GLF_DEAD(false))
              return;
             for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), max(int(4), int(4))))) >> _GLF_IDENTITY(int(4), int(4))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
              {
               return;
              }
            }
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, false || (false))))))
      return;
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
