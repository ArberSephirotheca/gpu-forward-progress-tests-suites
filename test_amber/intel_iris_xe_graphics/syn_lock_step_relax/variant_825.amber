#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_13 {
 mat2x3 _f0;
 ivec2 _f1;
} ;

struct _GLF_struct_14 {
 vec2 _f0;
 bvec3 _f1;
 _GLF_struct_13 _f2;
 uvec2 _f3;
} ;

struct _GLF_struct_11 {
 uint _f0;
 uvec3 _f1;
 uvec4 _f2;
 uint _f3;
 float _f4;
 mat3x2 _f5;
} ;

struct _GLF_struct_10 {
 float _f0;
 mat2x3 _f1;
} ;

struct _GLF_struct_9 {
 bool _f0;
 mat2x3 _f1;
 uint _f2;
 mat3x4 _f3;
 ivec3 _f4;
 mat2 _f5;
} ;

struct _GLF_struct_8 {
 float _f0;
 float _f1;
 mat3x4 _f2;
} ;

struct _GLF_struct_12 {
 _GLF_struct_8 _f0;
 _GLF_struct_9 _f1;
 _GLF_struct_10 _f2;
 uvec3 _f3;
 mat3x2 _f4;
 _GLF_struct_11 _f5;
 uint subgroup_local_id;
} ;

struct _GLF_struct_15 {
 bvec2 _f0;
 uint _f1;
 _GLF_struct_12 _f2;
 bvec2 _f3;
 _GLF_struct_14 _f4;
} ;

struct _GLF_struct_5 {
 ivec4 _f0;
 bvec4 _f1;
 uvec3 _f2;
 mat4x2 _f3;
 uvec4 _f4;
 uvec2 _f5;
} ;

struct _GLF_struct_4 {
 vec3 _f0;
 mat3 _f1;
} ;

struct _GLF_struct_3 {
 ivec3 _f0;
 mat3x4 _f1;
 mat2x4 _f2;
 uvec2 _f3;
} ;

struct _GLF_struct_2 {
 mat4x2 _f0;
 int _f1;
} ;

struct _GLF_struct_6 {
 _GLF_struct_2 _f0;
 uint _f1;
 _GLF_struct_3 _f2;
 ivec3 _f3;
 _GLF_struct_4 _f4;
 _GLF_struct_5 _f5;
} ;

struct _GLF_struct_1 {
 uint subgroup_size;
 mat4 _f0;
 mat4x2 _f1;
} ;

struct _GLF_struct_0 {
 ivec2 _f0;
} ;

struct _GLF_struct_7 {
 _GLF_struct_0 _f0;
 mat3x4 _f1;
 bvec2 _f2;
 _GLF_struct_1 _f3;
 _GLF_struct_6 _f4;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
     return;
    }
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bvec2(_GLF_IDENTITY(true, ! (! (true))), false)))))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 ^ 1)); _injected_loop_counter --)
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))
        barrier();
       if(_GLF_DEAD(false))
        return;
       barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     else
      {
      }
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), (int(3)) ^ 0))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
          {
           barrier();
          }
        }
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + tan(0.0))))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec2(bvec2(false, true))))))))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(float(injectionSwitch.x))) > injectionSwitch.y))))
      {
      }
     else
      {
       return;
      }
    }
   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       return;
      }
    }
   do
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    return;
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 uint subgroup_id = gl_SubgroupID;
 _GLF_struct_7 _GLF_struct_replacement_7 = _GLF_struct_7(_GLF_struct_0(_GLF_IDENTITY(ivec2(1), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? ivec2(1) : _GLF_IDENTITY(_GLF_FUZZED((ivec2(-34618, 32658) ^ -63977)), clamp(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED((ivec2(-34618, 32658) ^ -63977)), max(_GLF_IDENTITY(_GLF_FUZZED((ivec2(-34618, 32658) ^ -63977)), ivec2(_GLF_IDENTITY(0, min(0, 0)), 0) ^ (_GLF_FUZZED((ivec2(-34618, 32658) ^ _GLF_IDENTITY(-63977, 0 ^ (-63977)))))), _GLF_IDENTITY(_GLF_FUZZED((ivec2(-34618, 32658) ^ -63977)), (true ? _GLF_FUZZED((ivec2(-34618, 32658) ^ -63977)) : _GLF_FUZZED(ivec2(-19501, -87309)))))), max(_GLF_IDENTITY(_GLF_FUZZED((ivec2(-34618, 32658) ^ -63977)), max(_GLF_IDENTITY(_GLF_FUZZED((ivec2(-34618, 32658) ^ -63977)), ivec2(_GLF_IDENTITY(0, min(0, 0)), 0) ^ (_GLF_FUZZED((ivec2(-34618, 32658) ^ _GLF_IDENTITY(-63977, 0 ^ (-63977)))))), _GLF_IDENTITY(_GLF_FUZZED((ivec2(-34618, 32658) ^ -63977)), (true ? _GLF_FUZZED((ivec2(-34618, 32658) ^ -63977)) : _GLF_FUZZED(ivec2(-19501, -87309)))))), _GLF_IDENTITY(_GLF_FUZZED((ivec2(-34618, 32658) ^ -63977)), max(_GLF_IDENTITY(_GLF_FUZZED((ivec2(-34618, 32658) ^ -63977)), ivec2(_GLF_IDENTITY(0, min(0, 0)), 0) ^ (_GLF_FUZZED((ivec2(-34618, 32658) ^ _GLF_IDENTITY(-63977, 0 ^ (-63977)))))), _GLF_IDENTITY(_GLF_FUZZED((ivec2(-34618, 32658) ^ -63977)), (true ? _GLF_FUZZED((ivec2(-34618, 32658) ^ -63977)) : _GLF_FUZZED(ivec2(-19501, -87309)))))))), ivec2(0, 0) + (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED((ivec2(-34618, 32658) ^ -63977)), max(_GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY((ivec2(-34618, 32658) ^ -63977), min((ivec2(-34618, 32658) ^ -63977), (ivec2(-34618, 32658) ^ -63977)))), ivec2(_GLF_IDENTITY(0, min(0, 0)), 0) ^ (_GLF_FUZZED((ivec2(-34618, 32658) ^ _GLF_IDENTITY(-63977, 0 ^ (-63977)))))), _GLF_IDENTITY(_GLF_FUZZED((ivec2(_GLF_IDENTITY(-34618, (-34618) ^ (0 >> _GLF_IDENTITY(int(1), int(1)))), 32658) ^ -63977)), (true ? _GLF_FUZZED((ivec2(-34618, 32658) ^ -63977)) : _GLF_FUZZED(ivec2(-19501, -87309)))))), max(_GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY((ivec2(-34618, 32658) ^ -63977), (_GLF_IDENTITY((ivec2(-34618, 32658) ^ -63977), ((ivec2(-34618, 32658) ^ -63977)) << ivec2(0, 0))) | ivec2(0, 0))), max(_GLF_IDENTITY(_GLF_FUZZED((ivec2(-34618, 32658) ^ -63977)), ivec2(_GLF_IDENTITY(_GLF_IDENTITY(0, min(0, 0)), (_GLF_IDENTITY(0, min(0, 0))) >> (1 ^ 1)), 0) ^ (_GLF_FUZZED((ivec2(-34618, 32658) ^ _GLF_IDENTITY(-63977, 0 ^ (-63977)))))), _GLF_IDENTITY(_GLF_FUZZED((ivec2(-34618, 32658) ^ -63977)), (true ? _GLF_FUZZED((ivec2(-34618, 32658) ^ -63977)) : _GLF_FUZZED(ivec2(-19501, -87309)))))), _GLF_IDENTITY(_GLF_FUZZED((ivec2(-34618, 32658) ^ -63977)), max(_GLF_IDENTITY(_GLF_FUZZED((ivec2(-34618, 32658) ^ -63977)), ivec2(_GLF_IDENTITY(0, min(0, 0)), 0) ^ (_GLF_FUZZED((ivec2(-34618, 32658) ^ _GLF_IDENTITY(-63977, 0 ^ (-63977)))))), _GLF_IDENTITY(_GLF_FUZZED((ivec2(-34618, 32658) ^ -63977)), (true ? _GLF_FUZZED((ivec2(-34618, 32658) ^ -63977)) : _GLF_FUZZED(_GLF_IDENTITY(ivec2(-19501, -87309), max(ivec2(-19501, -87309), ivec2(-19501, -87309)))))))))))), _GLF_FUZZED((ivec2(-34618, 32658) ^ -63977)), _GLF_FUZZED((_GLF_IDENTITY(_GLF_IDENTITY(ivec2(-34618, 32658) ^ -63977, _GLF_IDENTITY(ivec2(ivec2(ivec2(-34618, 32658) ^ -63977)), ivec2(0, 0) ^ (ivec2(ivec2(ivec2(-34618, 32658) ^ -63977))))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(ivec2(-34618, 32658) ^ -63977, (false ? _GLF_FUZZED((ivec2(97499, -56014))) : ivec2(-34618, 32658) ^ -63977))), ~ (~ (~ (_GLF_IDENTITY(ivec2(-34618, _GLF_IDENTITY(32658, max(32658, 32658))) ^ -63977, (false ? _GLF_FUZZED((ivec2(97499, -56014))) : ivec2(-34618, 32658) ^ -63977))))))))))))))), mat3x4(1.0), bvec2(_GLF_IDENTITY(_GLF_IDENTITY(true, _GLF_IDENTITY(! (_GLF_IDENTITY(! (true), true && (_GLF_IDENTITY(! (true), bool(bool(! (true))))))), bool(bvec4(! (_GLF_IDENTITY(! (true), true && (_GLF_IDENTITY(! (true), bool(bool(! (true))))))), true, false, false)))), bool(bvec2(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), true && (_GLF_IDENTITY(_GLF_IDENTITY(! (true), true && (! (true))), bool(bool(! (true)))))))), true)))), _GLF_struct_1(gl_SubgroupSize, mat4(1.0), mat4x2(_GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, float(_GLF_IDENTITY(mat3x2(1.0, length(0.0), abs(1.0), 0.0, 0.0, 1.0), (mat3x2(1.0, length(0.0), abs(1.0), 0.0, 0.0, 1.0)) - mat3x2(0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))), 1.0)))), _GLF_struct_6(_GLF_struct_2(mat4x2(1.0), _GLF_IDENTITY(1, max(_GLF_IDENTITY(1, _GLF_IDENTITY(int(_GLF_IDENTITY(ivec2(1, 0), clamp(_GLF_IDENTITY(ivec2(1, 0), ~ (~ (ivec2(1, 0)))), ivec2(1, 0), ivec2(1, 0)))), int(ivec3(int(ivec2(1, 0)), 1, 1)))), _GLF_IDENTITY(1, (1) ^ 0)))), 1u, _GLF_struct_3(ivec3(1), mat3x4(1.0), mat2x4(_GLF_IDENTITY(1.0, _GLF_IDENTITY(float(vec2(1.0, 1.0)), (float(vec2(1.0, 1.0))) - _GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, float(mat3(injectionSwitch.x, cos(0.0), _GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0)), _GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, float(mat2x4(injectionSwitch.x, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0)))), 1.0, 1.0, 1.0, 1.0, 0.0))))))), uvec2(1u)), ivec3(1), _GLF_struct_4(vec3(_GLF_IDENTITY(1.0, max(1.0, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED((+ -738.721))), float(1.0), bool(true))), (1.0) / _GLF_IDENTITY(1.0, (true ? _GLF_IDENTITY(1.0, (1.0) / round(length(normalize(1.0)))) : _GLF_IDENTITY(_GLF_FUZZED(8.4), (false ? _GLF_FUZZED(3.6) : _GLF_FUZZED(8.4)))))), max(_GLF_IDENTITY(_GLF_IDENTITY(1.0, (1.0) / _GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat4x2(_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_IDENTITY(_GLF_FUZZED(1437.4601), (false ? _GLF_FUZZED(-8607.3704) : _GLF_FUZZED(1437.4601)))), bool(false))), 0.0, 1.0, 1.0, 0.0, sin(0.0), 1.0, 0.0)), float(_GLF_IDENTITY(vec3(_GLF_IDENTITY(float(mat4x2(_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(1437.4601)), bool(false))), 0.0, 1.0, 1.0, 0.0, sin(0.0), 1.0, _GLF_IDENTITY(0.0, max(0.0, _GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(0.0))))))), (false ? _GLF_FUZZED(normalize(-9.7)) : _GLF_IDENTITY(float(mat4x2(_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(1437.4601)), bool(false))), 0.0, 1.0, 1.0, 0.0, sin(0.0), 1.0, _GLF_IDENTITY(0.0, max(0.0, _GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(0.0))))))), min(float(mat4x2(_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(1437.4601)), bool(false))), 0.0, 1.0, 1.0, 0.0, sin(0.0), 1.0, _GLF_IDENTITY(0.0, max(0.0, _GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(0.0))))))), float(mat4x2(_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(1437.4601)), bool(false))), 0.0, 1.0, 1.0, 0.0, sin(0.0), 1.0, _GLF_IDENTITY(0.0, max(0.0, _GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(0.0))))))))))), 1.0, 1.0), (true ? vec3(_GLF_IDENTITY(float(mat4x2(_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(1437.4601)), bool(false))), 0.0, 1.0, 1.0, 0.0, sin(0.0), 1.0, 0.0)), 0.0 + (float(mat4x2(_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(1437.4601)), bool(false))), 0.0, 1.0, 1.0, 0.0, sin(0.0), 1.0, 0.0)))), 1.0, 1.0) : _GLF_FUZZED(vec3(5.2, 9249.7559, 365.812)))))))), clamp(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, (1.0) / 1.0)) / 1.0), _GLF_IDENTITY(1.0, (1.0) / 1.0), _GLF_IDENTITY(1.0, _GLF_IDENTITY((1.0) / 1.0, clamp((1.0) / _GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(1.0, 1.0 * (1.0)))), (1.0) / 1.0, _GLF_IDENTITY((1.0) / 1.0, min((1.0) / 1.0, _GLF_IDENTITY((1.0) / 1.0, mix(float(_GLF_FUZZED(-8.4)), float((1.0) / 1.0), bool(true)))))))))), _GLF_IDENTITY(_GLF_IDENTITY(1.0, (1.0) / _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0))), 1.0 * (_GLF_IDENTITY(1.0, (1.0) / 1.0)))))))), mat3(1.0)), _GLF_struct_5(ivec4(_GLF_IDENTITY(_GLF_IDENTITY(1, 0 | (1)), int(_GLF_IDENTITY(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(1, 0 | (1)), max(_GLF_IDENTITY(_GLF_IDENTITY(1, 0 | (1)), ~ (~ (_GLF_IDENTITY(1, 0 | (1))))), _GLF_IDENTITY(1, 0 | (1)))), 0, 1), (ivec3(_GLF_IDENTITY(1, 0 | (_GLF_IDENTITY(1, clamp(1, _GLF_IDENTITY(1, int(int(1))), _GLF_IDENTITY(1, 0 ^ (_GLF_IDENTITY(1, ~ (~ (1))))))))), 0, 1)) * ((ivec3(1, 1, 1) << _GLF_IDENTITY(ivec3(7), ivec3(7))) >> _GLF_IDENTITY(_GLF_IDENTITY(ivec3(_GLF_IDENTITY(7, (_GLF_IDENTITY(7, int(int(7)))) / 1)), ivec3(7)), (_GLF_IDENTITY(_GLF_IDENTITY(ivec3(7), ivec3(7)), (_GLF_IDENTITY(ivec3(7), ivec3(7))) * ivec3(1, 1, 1))) / ivec3(1, 1, 1))))))), bvec4(true), uvec3(1u), mat4x2(1.0), uvec4(1u), uvec2(1u))));
 if(_GLF_DEAD(false))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bvec3(injectionSwitch.x > injectionSwitch.y, false, true)), (bool(bvec3(injectionSwitch.x > injectionSwitch.y, false, true))) && true))), true && ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bvec3(injectionSwitch.x > injectionSwitch.y, false, true)), (bool(bvec3(injectionSwitch.x > injectionSwitch.y, false, true))) && true)))))))) || false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, false, false)))))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), false, true, false)))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bool(bvec3(false, true, false)))))
      {
       do
        {
         return;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         return;
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
        }
      }
     else
      {
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
  }
 else
  {
  }
 _GLF_struct_15 _GLF_struct_replacement_15 = _GLF_struct_15(bvec2(_GLF_IDENTITY(true, (true) && true)), 1u, _GLF_struct_12(_GLF_struct_8(1.0, 1.0, mat3x4(1.0)), _GLF_struct_9(true, mat2x3(_GLF_IDENTITY(1.0, max(1.0, 1.0))), _GLF_IDENTITY(1u, clamp(1u, 1u, 1u)), mat3x4(1.0), ivec3(1), _GLF_IDENTITY(_GLF_IDENTITY(mat2(1.0), (mat2(1.0)) - mat2(0.0, 0.0, 0.0, 0.0)), transpose(_GLF_IDENTITY(transpose(mat2(1.0)), (transpose(mat2(1.0))) - mat2(0.0, 0.0, 0.0, 0.0))))), _GLF_struct_10(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), mat2x3(1.0)), uvec3(1u), mat3x2(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0))), _GLF_struct_11(1u, _GLF_IDENTITY(uvec3(_GLF_IDENTITY(1u, ~ (~ (1u)))), (uvec3(_GLF_IDENTITY(1u, ~ (~ (1u))))) << uvec3(0u, 0u, 0u)), uvec4(1u), 1u, 1.0, mat3x2(1.0)), gl_SubgroupInvocationID), _GLF_IDENTITY(bvec2(true), _GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec2(bvec2(true)), bvec2(_GLF_IDENTITY(bvec3(bvec2(bvec2(_GLF_IDENTITY(true, ! (! (true))))), false), bvec3(bvec4(bvec3(_GLF_IDENTITY(bvec2(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, bool(bvec3(true, false, true)))) && true), ! (! (true))))), bvec2(bvec3(bvec2(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, bool(bvec3(true, false, true)))) && true), ! (! (true))))), false))), false), _GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, (true) && true)))))))))), bvec2(_GLF_IDENTITY(bvec3(bvec2(_GLF_IDENTITY(bvec2(bvec2(true)), bvec2(_GLF_IDENTITY(bvec3(bvec2(bvec2(true)), false), _GLF_IDENTITY(bvec3(bvec4(bvec3(bvec2(bvec2(true)), false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec4(_GLF_IDENTITY(bvec3(bvec2(bvec2(true)), false), bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec2(bvec2(true)), false)), bvec3(bvec3(bvec3(bvec3(bvec2(bvec2(true)), false))))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bvec3(bvec4(bvec3(bvec4(bvec3(bvec2(bvec2(true)), false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false)))))))))), true), bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec2(_GLF_IDENTITY(bvec2(bvec2(true)), bvec2(bvec3(bvec2(bvec2(true)), false)))), true)), bvec3(bvec4(bvec3(bvec3(bvec2(_GLF_IDENTITY(bvec2(bvec2(true)), bvec2(bvec3(bvec2(bvec2(true)), false)))), true)), false)))))))), _GLF_struct_14(vec2(1.0), bvec3(true), _GLF_struct_13(mat2x3(1.0), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(ivec2(1), (ivec2(1)) >> ((ivec2(0, 0) | ivec2(0, 0)) & ivec2(-63258, -72478))), (_GLF_IDENTITY(ivec2(1), (ivec2(1)) / ivec2(1, 1))) + ivec2(0, 0)), (false ? _GLF_FUZZED(ivec2(70016, 23526)) : _GLF_IDENTITY(_GLF_IDENTITY(ivec2(1), (ivec2(1)) >> ((ivec2(0, 0) | ivec2(0, 0)) & ivec2(-63258, -72478))), (_GLF_IDENTITY(ivec2(1), (ivec2(1)) / ivec2(1, 1))) + ivec2(0, 0))))), _GLF_IDENTITY(uvec2(1u), min(uvec2(_GLF_IDENTITY(1u, (1u) ^ 0u)), uvec2(1u)))));
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec4(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), true, true, true))))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     barrier();
    }
   else
    {
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, float(vec2(injectionSwitch.x, 1.0))), (false ? _GLF_FUZZED(-4.2) : injectionSwitch.x)) > injectionSwitch.y)), ! (! (_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(-4.2) : _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).x)) > injectionSwitch.y), ! (! ((_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(-4.2) : _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).x)) > injectionSwitch.y))))))))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   do
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (_GLF_IDENTITY(false, bool(bvec3(false, true, false))))), false || (_GLF_IDENTITY(! (! (_GLF_IDENTITY(false, bool(bvec3(false, true, false))))), ! (! (_GLF_IDENTITY(! (! (_GLF_IDENTITY(false, bool(bvec3(false, true, false))))), false || (! (! (_GLF_IDENTITY(false, bool(bvec3(false, true, false)))))))))))))))
      barrier();
     if(_GLF_DEAD(false))
      continue;
     barrier();
    }
   while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), _GLF_IDENTITY(bool(bvec4(_GLF_WRAPPED_LOOP(false), true, false, true)), ! (! (bool(bvec4(_GLF_WRAPPED_LOOP(false), true, false, true)))))));
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
        barrier();
       return;
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(true && (false), true && (_GLF_IDENTITY(true && (false), false || (true && (false))))))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(false))
        return;
       do
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bool(false))), (_GLF_IDENTITY(false, bool(bool(false)))) && true)), bool(_GLF_IDENTITY(bvec2(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bool(false))), (_GLF_IDENTITY(false, bool(bool(false)))) && true)), false), bvec2(bvec3(bvec2(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bool(false))), (_GLF_IDENTITY(false, bool(bool(false)))) && true)), false), false))))))
                barrier();
               barrier();
              }
             return;
             if(_GLF_DEAD(false))
              barrier();
            }
           break;
          }
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           return;
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), injectionSwitch)).x > injectionSwitch.y)), _GLF_IDENTITY(false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))));
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), bool(bool(false)))))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         do
          {
           return;
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       do
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! _GLF_IDENTITY((_GLF_IDENTITY(false, bool(bvec3(false, false, false)))), ! (_GLF_IDENTITY(! ((_GLF_IDENTITY(false, bool(bvec3(false, false, false))))), bool(bvec2(! ((_GLF_IDENTITY(false, bool(bvec3(false, false, false))))), true))))), bool(bvec3(! (_GLF_IDENTITY(false, bool(bvec3(false, false, false)))), true, false)))))))
        barrier();
       barrier();
      }
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y))))))
    {
     do
      {
       return;
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   return;
   do
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false))))))))
    return;
  }
 uint num_workgroup = _GLF_IDENTITY(gl_NumWorkGroups.x, (gl_NumWorkGroups.x) ^ _GLF_IDENTITY(0u, max(_GLF_IDENTITY(_GLF_IDENTITY(0u, clamp(0u, 0u, 0u)), _GLF_IDENTITY((_GLF_IDENTITY(0u, min(0u, _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, uint(uvec3(_GLF_IDENTITY(0u, (0u) | 0u), 1u, 1u)))) ^ ((0u ^ 0u) << _GLF_IDENTITY(uint(3u), uint(3u))))))) | (0u), uint(uvec4((_GLF_IDENTITY(0u, min(0u, _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, uint(uvec3(_GLF_IDENTITY(0u, (0u) | 0u), 1u, 1u)))) ^ ((0u ^ 0u) << _GLF_IDENTITY(uint(3u), uint(3u))))))) | (0u), (1u | 0u), 1u, 1u)))), _GLF_IDENTITY(0u, max(0u, 0u)))));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 do
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            continue;
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           return;
          }
         if(_GLF_DEAD(false))
          barrier();
        }
       barrier();
      }
     if(_GLF_DEAD(false))
      return;
     return;
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bool(false)))))), (false) || false)))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      break;
     continue;
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(false, false, false), bvec3(bvec3(bvec3(false, false, false))))), true && (bool(_GLF_IDENTITY(bvec3(false, false, false), bvec3(bvec3(_GLF_IDENTITY(bvec3(false, false, false), bvec3(bvec4(bvec3(false, false, false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))))))
  barrier();
 if(_GLF_DEAD(false))
  return;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false)) || false))))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
      return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      return;
     barrier();
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
    }
   else
    {
    }
  }
 else
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
    return;
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  return;
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     return;
    }
   else
    {
    }
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
  return;
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   return;
  }
 uint workgroup_base = _GLF_IDENTITY(workgroup_size * workgroup_id, (workgroup_size * workgroup_id) | (workgroup_size * workgroup_id));
 if(_GLF_DEAD(false))
  return;
 uint virtual_gid = workgroup_base + subgroup_id * _GLF_struct_replacement_7._f3.subgroup_size + _GLF_struct_replacement_15._f2.subgroup_local_id;
 uint next_virtual_gid = _GLF_IDENTITY(workgroup_base + subgroup_id * _GLF_IDENTITY(_GLF_struct_replacement_7._f3.subgroup_size, (_GLF_struct_replacement_7._f3.subgroup_size) | (_GLF_IDENTITY(_GLF_struct_replacement_7._f3.subgroup_size, uint(uvec4(_GLF_struct_replacement_7._f3.subgroup_size, uint(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], clamp(injectionSwitch[1], injectionSwitch[1], injectionSwitch[1])))).x)), 1u, 1u))))), (false ? _GLF_FUZZED(virtual_gid) : workgroup_base + subgroup_id * _GLF_IDENTITY(_GLF_struct_replacement_7._f3.subgroup_size, (_GLF_struct_replacement_7._f3.subgroup_size) | (_GLF_IDENTITY(_GLF_struct_replacement_7._f3.subgroup_size, uint(uvec4(_GLF_struct_replacement_7._f3.subgroup_size, uint(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], clamp(injectionSwitch[1], _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch))[1], injectionSwitch[1]))), _GLF_IDENTITY((vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], clamp(injectionSwitch[1], _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch))[1], injectionSwitch[1])))) * mat2(_GLF_ONE(1.0, injectionSwitch.y)), (true ? (vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], clamp(injectionSwitch[1], _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch))[1], injectionSwitch[1])))) * mat2(_GLF_ONE(1.0, injectionSwitch.y)) : _GLF_FUZZED(injectionSwitch))))).x)), _GLF_IDENTITY(1u, max(1u, 1u)), 1u))))))) + _GLF_IDENTITY(((_GLF_struct_replacement_15._f2.subgroup_local_id + 1) % _GLF_struct_replacement_7._f3.subgroup_size), (((_GLF_struct_replacement_15._f2.subgroup_local_id + 1) % _GLF_struct_replacement_7._f3.subgroup_size)) / 1u);
 for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
  {
   buf[virtual_gid] = 1;
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)), true && _GLF_IDENTITY(((injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y, mix(float(_GLF_FUZZED(-2.8)), float(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(1785.9776), _GLF_FUZZED(1.3)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))).y), bool(true))))), (_GLF_IDENTITY(_GLF_IDENTITY(((injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y, mix(float(_GLF_FUZZED(-2.8)), float(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y), bool(true))))), (((injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y, mix(float(_GLF_FUZZED(-2.8)), float(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y), bool(true)))))) && true), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(((injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y, mix(float(_GLF_FUZZED(-2.8)), float(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y), bool(true))))), (((injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y, mix(float(_GLF_FUZZED(-2.8)), float(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y), bool(true)))))) && true))), bool(bvec4(bool(bool(_GLF_IDENTITY(((injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y, mix(float(_GLF_FUZZED(-2.8)), float(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y), bool(true))))), (((injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y, mix(float(_GLF_FUZZED(-2.8)), float(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y), bool(true)))))) && true))), false, true, true))))) || false)))))
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          break;
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(false))
          return;
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
        return;
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
        {
         if(_GLF_DEAD(false))
          barrier();
         return;
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))), (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(86.98)), bool(false))) > injectionSwitch.y)))) || false))
        return;
       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) || false), (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, float(mat4(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), 0.0, 0.0, 0.0, _GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, 1.0 * (1.0)), 1.0, _GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, 0.0 + (1.0))) - 0.0))), _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(7084.1535)), float(0.0), bool(true))), 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, determinant(mat3(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0))))) > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y))))))
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          barrier();
         do
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))), true, true, false))), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))), true, true, false))))), bool(bool(bool(bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))), true, true, false)))))))))))
              barrier();
             return;
             if(_GLF_DEAD(false))
              barrier();
            }
           if(_GLF_DEAD(false))
            continue;
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           return;
          }
         barrier();
         for(int _injected_loop_counter = ((0 >> _GLF_IDENTITY(int(7), int(7))) ^ (0 | 0)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            return;
          }
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(injectionSwitch.x > injectionSwitch.y, true, true, true)))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), injectionSwitch)).x > injectionSwitch.y, true, true, true)))))))))
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           else
            {
             return;
            }
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(false))
          return;
        }
      }
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0)))), ! (! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0))))))), ! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false))))) || _GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false)))))))))))), ! (! (_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (true ? _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, float(mat3x2(injectionSwitch.y, 0.0, 0.0, 1.0, 1.0, 1.0)))) - 0.0) : _GLF_FUZZED(atan(-2.9, 9.0)))), (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y) * 1.0)))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-244.260), _GLF_FUZZED(7.5)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))).y), true && ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-244.260), _GLF_FUZZED(7.5)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))).y))), ((injectionSwitch.x > injectionSwitch.y)) || false))))))))))
      {
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
     if(_GLF_DEAD(false))
      {
       do
        {
         return;
        }
       while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bool(bvec3(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, true)), false || (bool(bvec3(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, true)))))), true && (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bool(bvec3(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, true)), false || (bool(bvec3(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, true)))))), bool(bool(! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bool(bvec3(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, true)), false || (bool(bvec3(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, true))))))))))))));
       if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
        barrier();
      }
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false)) || false))
      barrier();
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_DEAD(false)), (bool(_GLF_DEAD(false))) || false)), ! (_GLF_IDENTITY(_GLF_IDENTITY(! (bool(_GLF_IDENTITY(bool(_GLF_DEAD(false)), (bool(_GLF_DEAD(false))) || false))), ! (! (_GLF_IDENTITY(! (bool(_GLF_IDENTITY(bool(_GLF_DEAD(false)), (bool(_GLF_DEAD(false))) || false))), (! (bool(_GLF_IDENTITY(bool(_GLF_DEAD(false)), (bool(_GLF_DEAD(false))) || false)))) && true)))), ! _GLF_IDENTITY((! _GLF_IDENTITY((! (bool(_GLF_IDENTITY(bool(_GLF_DEAD(false)), (bool(_GLF_DEAD(false))) || _GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (! (false))))))))), ((! (bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (bool(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))) || false))))) || false)), true && ((! _GLF_IDENTITY((! (bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_DEAD(false)), (bool(_GLF_DEAD(false))) || false), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_DEAD(false)), (bool(_GLF_DEAD(false))) || false), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(bool(_GLF_DEAD(false)), (bool(_GLF_DEAD(false))) || false), true)), (bool(bvec2(_GLF_IDENTITY(bool(_GLF_DEAD(false)), (bool(_GLF_DEAD(false))) || false), true))) || false)), (_GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_DEAD(false)), (bool(_GLF_DEAD(false))) || false), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(bool(_GLF_DEAD(false)), (bool(_GLF_DEAD(false))) || false), true)), (bool(bvec2(_GLF_IDENTITY(bool(_GLF_DEAD(false)), (bool(_GLF_DEAD(false))) || false), true))) || false))) && true))))))), ((! (bool(_GLF_IDENTITY(bool(_GLF_DEAD(false)), (bool(_GLF_DEAD(false))) || false))))) || false)))))))))
  return;
 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY(! _GLF_IDENTITY((! (true)), false || ((! (true)))), ! (! (! _GLF_IDENTITY(_GLF_IDENTITY((! (true)), false || ((! (true)))), false || ((! (_GLF_IDENTITY(true, bool(bool(true))))))))))), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x))) - 0.0) < injectionSwitch.y, ! (! (injectionSwitch.x < injectionSwitch.y)))))), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY(! _GLF_IDENTITY((! (true)), false || ((! (true)))), ! (! (! _GLF_IDENTITY(_GLF_IDENTITY((! (true)), false || ((! (true)))), false || ((! (_GLF_IDENTITY(true, bool(bool(true))))))))))), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x))) - 0.0) < injectionSwitch.y, ! (! (injectionSwitch.x < injectionSwitch.y)))))), (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY(! _GLF_IDENTITY((! (true)), false || ((! (true)))), ! (! (! _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(! (true), (! (true)) && true)), false || ((! (true)))), false || ((! (_GLF_IDENTITY(true, bool(bool(true))))))))))), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x))) - 0.0) < injectionSwitch.y, ! (! (injectionSwitch.x < injectionSwitch.y))))))) && true)))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
   if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * _GLF_IDENTITY(vec2(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), (_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), min(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, vec2(mat2x3(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), _GLF_ONE(1.0, injectionSwitch.y), 1.0, tan(0.0), 1.0))).y)))) + sin(_GLF_IDENTITY(0.0, min(0.0, 0.0)))), _GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-34.72, -6.3)) : injectionSwitch)), injectionSwitch)).y)), vec2(1.0, 1.0) * (vec2(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), (_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), min(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y)))) + sin(0.0)), _GLF_ONE(1.0, injectionSwitch.y))))).x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         return;
        }
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y))))
        {
         for(int _injected_loop_counter = (0 ^ _GLF_IDENTITY(1, (1) | 0)); _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 ^ 1)); _injected_loop_counter --)
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            continue;
           return;
           if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec2(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false)))) || false))
            barrier();
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     barrier();
     if(_GLF_DEAD(false))
      return;
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
      return;
    }
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         return;
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          break;
        }
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     do
      {
       return;
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), min(_GLF_IDENTITY((injectionSwitch) * mat2(1.0), vec2(1.0, 1.0) * ((injectionSwitch) * mat2(1.0))), _GLF_IDENTITY((injectionSwitch) * mat2(1.0), ((injectionSwitch) * mat2(1.0)) / vec2(1.0, 1.0))))).y)), (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), min(_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch), min((injectionSwitch), (injectionSwitch))) * mat2(1.0), vec2(1.0, 1.0) * ((injectionSwitch) * mat2(1.0))), _GLF_IDENTITY((injectionSwitch) * mat2(1.0), ((injectionSwitch) * mat2(1.0)) / vec2(1.0, 1.0))))).y, (true ? _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), min(_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch), min((injectionSwitch), (injectionSwitch))) * mat2(1.0), vec2(1.0, 1.0) * ((injectionSwitch) * mat2(1.0))), _GLF_IDENTITY((injectionSwitch) * mat2(1.0), ((injectionSwitch) * mat2(1.0)) / vec2(1.0, 1.0))))).y : _GLF_FUZZED(-564.843)))))) || false)))
      return;
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       barrier();
      }
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) || false)))))))
      barrier();
    }
   if(_GLF_DEAD(false))
    return;
   do
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(false))
    return;
   atomicStore(buf[_GLF_IDENTITY(next_virtual_gid, (_GLF_IDENTITY(false, bool(bvec4(false, true, true, true))) ? _GLF_FUZZED((any(bvec4(false, true, false, false)) ? virtual_gid : num_workgroup)) : next_virtual_gid))], uint(2), 4, 64, _GLF_IDENTITY(0, (_GLF_IDENTITY(0, 0 + (0))) | 0));
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec4(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, true))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (int(0)) / 1))) >> _GLF_IDENTITY(int(0), int(0))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
            {
             return;
            }
          }
         barrier();
        }
      }
     else
      {
       return;
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
        return;
       barrier();
      }
     barrier();
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 do
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       barrier();
      }
     else
      {
      }
    }
   if(_GLF_DEAD(false))
    break;
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = (int(_GLF_ZERO(0.0, injectionSwitch.x)) << _GLF_IDENTITY(int(5), int(5))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         return;
        }
      }
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       return;
      }
     else
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false))))))) && true), (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       else
        {
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bool(false))))))))
        return;
      }
    }
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
