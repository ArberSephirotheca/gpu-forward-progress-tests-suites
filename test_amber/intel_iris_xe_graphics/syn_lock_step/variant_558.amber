#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 0) uniform buf0 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (injectionSwitch.x > injectionSwitch.y))))))
  {
  }
 else
  {
   do
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               do
                {
                 if(_GLF_DEAD(false))
                  {
                   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                    {
                     return;
                    }
                   if(_GLF_DEAD(false))
                    continue;
                  }
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             return;
            }
          }
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ 1)); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
           return;
          }
        }
      }
     else
      {
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)));
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 | 0)); _injected_loop_counter --)
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       do
        {
         do
          {
           if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! (_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))) && true)))))), (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)), ! (! (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), ! (! (bool(injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(vec3(injectionSwitch, round(length(normalize(1.0)))))).y, max(_GLF_IDENTITY(injectionSwitch, vec2(vec3(injectionSwitch, round(length(normalize(1.0)))))).y, _GLF_IDENTITY(injectionSwitch, vec2(vec3(injectionSwitch, round(length(normalize(1.0)))))).y))))))))), ! (! ((injectionSwitch.x > injectionSwitch.y)))), (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, mix(_GLF_IDENTITY(float(injectionSwitch.x), 1.0 * (float(injectionSwitch.x))), float(_GLF_FUZZED(-2986.0178)), bool(false))) > injectionSwitch.y), ! (! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-6783.5430)), float(injectionSwitch.y), bool(true)))))))) && true))))))) && _GLF_IDENTITY(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, bool(bvec4(true, false, false, true)))) && true), ! (! (true)))))
            {
            }
           else
            {
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
              {
               if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), ! (! ((false)))))), (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec3(_GLF_IDENTITY(! (false), false || (! (false))), true, _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-17.07), _GLF_FUZZED(3138.0231)), vec2((injectionSwitch)[0], (injectionSwitch)[_GLF_IDENTITY(1, int(_GLF_ZERO(0.0, injectionSwitch.x)) | (1))]), bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))).y)))))))) && true))))))
                {
                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                  {
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     if(_GLF_DEAD(false))
                      return;
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                      }
                     else
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        break;
                       if(_GLF_DEAD(false))
                        return;
                       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, true, true), bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(false, true, true), _GLF_IDENTITY(bvec3(bvec4(bvec3(false, true, true), false)), _GLF_IDENTITY(bvec3(bvec4(bvec3(bvec4(bvec3(false, true, true), false)), true)), _GLF_IDENTITY(bvec3(bvec4(bvec3(bvec4(bvec3(bvec4(bvec3(false, true, true), false)), true)), true)), _GLF_IDENTITY(bvec3(bvec3(bvec3(bvec4(bvec3(bvec4(bvec3(bvec4(bvec3(false, true, true), false)), true)), true)))), bvec3(bvec3(bvec3(bvec3(bvec3(bvec4(bvec3(bvec4(bvec3(bvec4(bvec3(false, true, true), false)), true)), true)))))))))))), bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec3(false, true, true), _GLF_IDENTITY(bvec3(bvec4(bvec3(false, true, true), false)), bvec3(bvec4(bvec3(bvec4(bvec3(false, true, true), false)), true)))))))))))), (injectionSwitch.x > injectionSwitch.y))))
                        {
                         if(_GLF_DEAD(false))
                          return;
                         for(int _injected_loop_counter = (1 & (0 | 1)); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 ^ (0 ^ 0))); _injected_loop_counter --)
                          {
                           if(_GLF_DEAD(false))
                            return;
                          }
                         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                          {
                           return;
                          }
                        }
                      }
                    }
                   else
                    {
                    }
                  }
                }
               else
                {
                 if(_GLF_DEAD(false))
                  continue;
                 do
                  {
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     if(_GLF_DEAD(false))
                      continue;
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_DEAD(false))
                        continue;
                       return;
                      }
                    }
                   else
                    {
                    }
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_DEAD(false))
                        continue;
                       continue;
                      }
                    }
                   else
                    {
                     return;
                    }
                  }
                }
              }
             if(_GLF_DEAD(false))
              continue;
            }
          }
         while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_WRAPPED_LOOP(false))));
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
       if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
        break;
       if(_GLF_DEAD(false))
        continue;
      }
    }
  }
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = 16;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) / 1))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false || (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_IDENTITY((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) && true, bool(bvec4((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) && true, true, false, true)))), true && (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))), ! (! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false || (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_IDENTITY((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) && true, bool(bvec4((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) && true, true, false, true)))), true && (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))), ! (! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), false || (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false || (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_IDENTITY((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) && _GLF_IDENTITY(true, (true) && true), bool(bvec4((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) && true, true, false, true)))), true && (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))), ! (! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))), ! (! (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, float(_GLF_IDENTITY(vec3(injectionSwitch.y, 0.0, 1.0), (vec3(injectionSwitch.y, 0.0, _GLF_IDENTITY(1.0, clamp(1.0, _GLF_IDENTITY(1.0, min(1.0, 1.0)), 1.0)))) - vec3(0.0, 0.0, 0.0)))))), ! (! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) && true)))
        {
        }
       else
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)), injectionSwitch)).x > injectionSwitch.y))))
            continue;
          }
         else
          {
           for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
            {
             do
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                  {
                   do
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      {
                       if(_GLF_DEAD(false))
                        return;
                       return;
                      }
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
                    continue;
                  }
                 else
                  {
                  }
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
          }
        }
       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), ! (! (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       else
        {
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, false, true)))))
        continue;
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
           continue;
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y) || false, bool(bool((injectionSwitch.x > injectionSwitch.y) || false))))))))
            continue;
           if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
            break;
           break;
          }
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              continue;
             continue;
            }
           if(_GLF_DEAD(false))
            break;
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              return;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              continue;
             break;
            }
           if(_GLF_IDENTITY(_GLF_DEAD(false), false || _GLF_IDENTITY((_GLF_DEAD(false)), ((_GLF_DEAD(false))) || false)))
            {
             if(_GLF_DEAD(false))
              break;
             do
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                   if(_GLF_DEAD(false))
                    break;
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     if(_GLF_DEAD(false))
                      break;
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_DEAD(false))
                        {
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          break;
                         continue;
                        }
                       return;
                      }
                    }
                   else
                    {
                    }
                   if(_GLF_DEAD(false))
                    break;
                  }
                 else
                  {
                   return;
                  }
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
             if(_GLF_DEAD(false))
              continue;
             if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))))))) && true))))
              continue;
             for(int _injected_loop_counter = (_GLF_IDENTITY(int(_GLF_ZERO(_GLF_IDENTITY(0.0, _GLF_IDENTITY(_GLF_IDENTITY((0.0) + 0.0, clamp((0.0) + 0.0, (0.0) + 0.0, (0.0) + 0.0)), _GLF_IDENTITY(float(_GLF_IDENTITY(mat4((0.0) + 0.0, abs(1.0), 1.0, abs(1.0), 1.0, _GLF_IDENTITY(dot(vec4(1.0, 0.0, 1.0, 1.0), vec4(0.0, 1.0, 0.0, 0.0)), dot(vec4(1.0, 0.0, 1.0, 1.0), vec4(0.0, 1.0, 0.0, 0.0))), 1.0, 1.0, 1.0, 0.0, abs(0.0), 1.0, 0.0, abs(0.0), 1.0, 1.0), (false ? _GLF_FUZZED(mat4(1360.6858, -285.294, 563.807, 8090.1910, -4.3, -9007.9195, -4.1, 16.34, -1.4, -3109.4987, -5.0, 5.2, _GLF_IDENTITY(1.6, clamp(_GLF_IDENTITY(1.6, (1.6) * 1.0), 1.6, 1.6)), -251.962, 56.38, 705.524)) : mat4((0.0) + _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), abs(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0))), 1.0, abs(1.0), 1.0, _GLF_IDENTITY(dot(vec4(1.0, 0.0, 1.0, 1.0), vec4(0.0, 1.0, 0.0, 0.0)), dot(vec4(1.0, 0.0, 1.0, 1.0), _GLF_IDENTITY(vec4(0.0, 1.0, 0.0, 0.0), mix(vec4((vec4(0.0, 1.0, 0.0, 0.0))[0], (vec4(0.0, 1.0, 0.0, 0.0))[1], _GLF_FUZZED(435.298), (vec4(0.0, 1.0, 0.0, 0.0))[3]), vec4(_GLF_FUZZED(66.02), _GLF_FUZZED(728.511), (vec4(0.0, 1.0, 0.0, 0.0))[2], _GLF_FUZZED(57.19)), bvec4(false, false, true, false))))), 1.0, 1.0, 1.0, 0.0, abs(0.0), 1.0, 0.0, abs(0.0), 1.0, 1.0)))), max(float(_GLF_IDENTITY(mat4((0.0) + 0.0, abs(1.0), 1.0, abs(1.0), 1.0, _GLF_IDENTITY(dot(vec4(1.0, 0.0, 1.0, 1.0), vec4(0.0, 1.0, 0.0, 0.0)), dot(vec4(1.0, 0.0, 1.0, 1.0), vec4(0.0, 1.0, 0.0, 0.0))), 1.0, 1.0, 1.0, 0.0, abs(0.0), 1.0, 0.0, abs(0.0), 1.0, 1.0), (false ? _GLF_FUZZED(mat4(1360.6858, -285.294, 563.807, 8090.1910, -4.3, -9007.9195, -4.1, 16.34, -1.4, -3109.4987, -5.0, 5.2, 1.6, -251.962, 56.38, 705.524)) : mat4((0.0) + 0.0, abs(1.0), 1.0, abs(1.0), 1.0, _GLF_IDENTITY(dot(vec4(1.0, 0.0, 1.0, 1.0), vec4(0.0, 1.0, 0.0, 0.0)), dot(vec4(1.0, 0.0, 1.0, 1.0), _GLF_IDENTITY(vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 0.0, 0.0, 0.0) + (vec4(0.0, 1.0, 0.0, 0.0))))), 1.0, 1.0, 1.0, 0.0, abs(0.0), 1.0, 0.0, abs(0.0), 1.0, 1.0)))), float(_GLF_IDENTITY(mat4((0.0) + 0.0, abs(1.0), 1.0, abs(1.0), 1.0, _GLF_IDENTITY(dot(vec4(1.0, 0.0, 1.0, 1.0), vec4(0.0, 1.0, 0.0, 0.0)), dot(vec4(1.0, 0.0, 1.0, 1.0), vec4(0.0, 1.0, 0.0, 0.0))), 1.0, 1.0, 1.0, 0.0, abs(0.0), 1.0, 0.0, abs(0.0), 1.0, 1.0), (false ? _GLF_IDENTITY(_GLF_FUZZED(mat4(1360.6858, -285.294, 563.807, 8090.1910, -4.3, -9007.9195, -4.1, 16.34, -1.4, -3109.4987, -5.0, 5.2, 1.6, -251.962, 56.38, 705.524)), mat4(0.0, 0.0, _GLF_IDENTITY(0.0, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 0.0 : _GLF_FUZZED(-86.83))), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0) + (_GLF_IDENTITY(_GLF_FUZZED(mat4(1360.6858, -285.294, 563.807, 8090.1910, -4.3, -9007.9195, -4.1, 16.34, -1.4, -3109.4987, -5.0, 5.2, 1.6, -251.962, 56.38, 705.524)), (false ? _GLF_FUZZED(mat4(-479.905, -6490.0231, -183.250, 47.16, 8.8, -749.363, -0.4, -1.1, 6226.3340, 64.88, 280.214, 120.061, -3373.5386, -1.9, -9.2, 0.8)) : _GLF_FUZZED(mat4(_GLF_IDENTITY(1360.6858, (1360.6858) * 1.0), -285.294, 563.807, 8090.1910, -4.3, -9007.9195, -4.1, 16.34, -1.4, -3109.4987, -5.0, 5.2, 1.6, -251.962, 56.38, 705.524)))))) : mat4((0.0) + 0.0, abs(1.0), 1.0, abs(_GLF_IDENTITY(1.0, float(vec3(1.0, 1.0, 0.0)))), 1.0, _GLF_IDENTITY(dot(vec4(1.0, 0.0, 1.0, 1.0), vec4(_GLF_IDENTITY(0.0, (0.0) / 1.0), 1.0, 0.0, 0.0)), dot(vec4(1.0, 0.0, 1.0, 1.0), vec4(0.0, 1.0, 0.0, 0.0))), 1.0, 1.0, 1.0, 0.0, abs(0.0), 1.0, 0.0, abs(0.0), 1.0, 1.0)))))))), injectionSwitch.x)) ^ 0, (int(_GLF_ZERO(_GLF_IDENTITY(0.0, _GLF_IDENTITY(_GLF_IDENTITY((0.0) + 0.0, clamp((0.0) + 0.0, (0.0) + 0.0, (0.0) + 0.0)), _GLF_IDENTITY(float(_GLF_IDENTITY(mat4((0.0) + 0.0, abs(1.0), 1.0, abs(1.0), 1.0, _GLF_IDENTITY(dot(vec4(1.0, 0.0, 1.0, 1.0), vec4(0.0, 1.0, 0.0, 0.0)), dot(vec4(1.0, 0.0, 1.0, 1.0), vec4(0.0, 1.0, 0.0, 0.0))), 1.0, 1.0, 1.0, 0.0, abs(0.0), 1.0, 0.0, abs(0.0), 1.0, 1.0), (false ? _GLF_FUZZED(mat4(1360.6858, -285.294, 563.807, 8090.1910, -4.3, -9007.9195, -4.1, 16.34, -1.4, -3109.4987, -5.0, 5.2, _GLF_IDENTITY(1.6, clamp(_GLF_IDENTITY(1.6, (1.6) * 1.0), 1.6, 1.6)), -251.962, 56.38, 705.524)) : mat4((0.0) + _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), abs(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0))), 1.0, abs(1.0), 1.0, _GLF_IDENTITY(dot(vec4(1.0, 0.0, 1.0, 1.0), vec4(0.0, 1.0, 0.0, 0.0)), dot(vec4(1.0, 0.0, 1.0, 1.0), _GLF_IDENTITY(vec4(0.0, 1.0, 0.0, 0.0), mix(vec4((vec4(0.0, 1.0, 0.0, 0.0))[0], (vec4(0.0, 1.0, 0.0, 0.0))[1], _GLF_FUZZED(435.298), (vec4(0.0, 1.0, 0.0, 0.0))[3]), vec4(_GLF_FUZZED(66.02), _GLF_FUZZED(728.511), (vec4(0.0, 1.0, 0.0, 0.0))[2], _GLF_FUZZED(57.19)), bvec4(false, false, true, false))))), 1.0, 1.0, 1.0, 0.0, abs(0.0), 1.0, 0.0, abs(0.0), 1.0, 1.0)))), max(float(_GLF_IDENTITY(mat4((0.0) + 0.0, abs(1.0), 1.0, abs(1.0), 1.0, _GLF_IDENTITY(dot(vec4(1.0, 0.0, 1.0, 1.0), vec4(0.0, 1.0, 0.0, 0.0)), dot(vec4(1.0, 0.0, 1.0, 1.0), vec4(0.0, 1.0, 0.0, 0.0))), 1.0, 1.0, 1.0, 0.0, abs(0.0), 1.0, 0.0, abs(0.0), 1.0, 1.0), (false ? _GLF_FUZZED(mat4(1360.6858, -285.294, 563.807, 8090.1910, -4.3, -9007.9195, -4.1, 16.34, -1.4, -3109.4987, -5.0, 5.2, 1.6, -251.962, 56.38, 705.524)) : mat4((0.0) + 0.0, abs(1.0), 1.0, abs(1.0), 1.0, _GLF_IDENTITY(dot(vec4(1.0, 0.0, 1.0, 1.0), vec4(0.0, 1.0, 0.0, 0.0)), dot(vec4(1.0, 0.0, 1.0, 1.0), _GLF_IDENTITY(vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 0.0, 0.0, 0.0) + (vec4(0.0, 1.0, 0.0, 0.0))))), 1.0, 1.0, 1.0, 0.0, abs(0.0), 1.0, 0.0, abs(0.0), 1.0, 1.0)))), float(_GLF_IDENTITY(mat4((0.0) + 0.0, abs(1.0), 1.0, abs(1.0), 1.0, _GLF_IDENTITY(dot(vec4(1.0, 0.0, 1.0, 1.0), vec4(0.0, 1.0, 0.0, 0.0)), dot(vec4(1.0, 0.0, 1.0, 1.0), vec4(0.0, 1.0, 0.0, 0.0))), 1.0, 1.0, 1.0, 0.0, abs(0.0), 1.0, 0.0, abs(0.0), 1.0, 1.0), (false ? _GLF_IDENTITY(_GLF_FUZZED(mat4(1360.6858, -285.294, 563.807, 8090.1910, -4.3, -9007.9195, -4.1, 16.34, -1.4, -3109.4987, -5.0, 5.2, 1.6, -251.962, 56.38, 705.524)), mat4(0.0, 0.0, _GLF_IDENTITY(0.0, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 0.0 : _GLF_FUZZED(-86.83))), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0) + (_GLF_IDENTITY(_GLF_FUZZED(mat4(1360.6858, -285.294, 563.807, 8090.1910, -4.3, -9007.9195, -4.1, 16.34, -1.4, -3109.4987, -5.0, 5.2, 1.6, -251.962, 56.38, 705.524)), (false ? _GLF_FUZZED(mat4(-479.905, -6490.0231, -183.250, 47.16, 8.8, -749.363, -0.4, -1.1, 6226.3340, 64.88, 280.214, 120.061, -3373.5386, -1.9, -9.2, 0.8)) : _GLF_FUZZED(mat4(_GLF_IDENTITY(1360.6858, (1360.6858) * 1.0), -285.294, 563.807, 8090.1910, -4.3, -9007.9195, -4.1, 16.34, -1.4, -3109.4987, -5.0, 5.2, 1.6, -251.962, 56.38, 705.524)))))) : mat4((0.0) + 0.0, abs(1.0), 1.0, abs(_GLF_IDENTITY(1.0, float(vec3(1.0, 1.0, 0.0)))), 1.0, _GLF_IDENTITY(dot(vec4(1.0, 0.0, 1.0, 1.0), vec4(_GLF_IDENTITY(0.0, (0.0) / 1.0), 1.0, 0.0, 0.0)), dot(vec4(1.0, 0.0, 1.0, 1.0), vec4(0.0, 1.0, 0.0, 0.0))), 1.0, 1.0, 1.0, 0.0, abs(0.0), 1.0, 0.0, abs(0.0), 1.0, 1.0)))))))), injectionSwitch.x)) ^ 0) >> 0)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) | 0))
              {
               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(_GLF_IDENTITY(mat2x3(injectionSwitch.y, 1.0, abs(1.0), 0.0, sin(0.0), 1.0), (mat2x3(injectionSwitch.y, 1.0, abs(1.0), 0.0, sin(0.0), 1.0)) - mat2x3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0))), clamp(_GLF_IDENTITY(float(_GLF_IDENTITY(mat2x3(injectionSwitch.y, 1.0, abs(1.0), 0.0, sin(0.0), 1.0), (mat2x3(injectionSwitch.y, 1.0, abs(1.0), 0.0, sin(0.0), 1.0)) - mat2x3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0))), 0.0 + (float(_GLF_IDENTITY(mat2x3(injectionSwitch.y, 1.0, abs(1.0), 0.0, sin(0.0), 1.0), (mat2x3(injectionSwitch.y, 1.0, abs(1.0), 0.0, sin(0.0), 1.0)) - mat2x3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0))))), float(_GLF_IDENTITY(mat2x3(injectionSwitch.y, 1.0, abs(1.0), 0.0, sin(0.0), 1.0), (mat2x3(injectionSwitch.y, 1.0, abs(1.0), 0.0, sin(0.0), 1.0)) - mat2x3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0))), float(_GLF_IDENTITY(mat2x3(injectionSwitch.y, 1.0, abs(1.0), 0.0, sin(0.0), 1.0), (mat2x3(injectionSwitch.y, 1.0, abs(1.0), 0.0, sin(0.0), 1.0)) - mat2x3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0))))))))))
                {
                 return;
                }
               else
                {
                }
              }
            }
           if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              break;
             do
              {
               if(_GLF_DEAD(false))
                return;
              }
             while(_GLF_WRAPPED_LOOP(false));
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  break;
                 do
                  {
                   if(_GLF_DEAD(false))
                    continue;
                   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    {
                    }
                   else
                    {
                     return;
                    }
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
               continue;
              }
             if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
              continue;
             continue;
             if(_GLF_DEAD(false))
              continue;
            }
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
            }
           if(_GLF_DEAD(false))
            return;
           do
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) && true)))))
              {
              }
             else
              {
               return;
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                return;
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
           if(_GLF_DEAD(false))
            break;
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(false, ! (! (false)))))))
            {
             if(_GLF_DEAD(false))
              break;
             break;
             if(_GLF_DEAD(false))
              return;
            }
           if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, false || (true))) && true), _GLF_IDENTITY(false || (true), ! (! (false || (true)))))))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                return;
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 return;
                 if(_GLF_DEAD(false))
                  continue;
                }
               else
                {
                }
              }
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_DEAD(false))
                  return;
                 if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
                  continue;
                }
               else
                {
                 if(_GLF_DEAD(false))
                  continue;
                }
              }
            }
           else
            {
            }
           if(_GLF_DEAD(false))
            continue;
          }
        }
       if(_GLF_DEAD(false))
        break;
      }
     else
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)))) > injectionSwitch.y))))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             return;
            }
           else
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-1986.3211, -0.7)) : injectionSwitch)).x > injectionSwitch.y))))
              continue;
            }
          }
        }
      }
    }
   if(_GLF_DEAD(false))
    return;
   do
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         do
          {
           if(_GLF_DEAD(false))
            break;
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, ! (! (true))), (injectionSwitch.x < injectionSwitch.y))))
            {
             return;
            }
           else
            {
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        }
       else
        {
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(false))
  return;
 do
  {
   if(_GLF_DEAD(false))
    break;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
      break;
     return;
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       return;
       if(_GLF_DEAD(false))
        return;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         return;
         if(_GLF_DEAD(false))
          return;
        }
       else
        {
        }
      }
    }
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
  }
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 uint workgroup_base = workgroup_size * _GLF_IDENTITY(workgroup_id, uint(uvec2(_GLF_IDENTITY(workgroup_id, 0u ^ (workgroup_id)), 1u)));
 uint virtual_gid = _GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size + subgroup_local_id, max(workgroup_base + subgroup_id * subgroup_size + subgroup_local_id, _GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size + subgroup_local_id, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_id, uint(uint(subgroup_id))) * subgroup_size, min(workgroup_base + _GLF_IDENTITY(subgroup_id * subgroup_size, max(_GLF_IDENTITY(subgroup_id * subgroup_size, (_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY((false) || false, bool(bvec3((false) || false, false, true)))), (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(workgroup_id) : _GLF_IDENTITY(subgroup_id * subgroup_size, (_GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) - 0u)) ^ 0u))), subgroup_id * subgroup_size)), workgroup_base + _GLF_IDENTITY(subgroup_id, (subgroup_id) | (_GLF_IDENTITY(subgroup_id, ~ (~ (subgroup_id))))) * _GLF_IDENTITY(subgroup_size, 0u + _GLF_IDENTITY((subgroup_size), ((subgroup_size)) >> 0u)))), _GLF_IDENTITY((_GLF_IDENTITY(0u, (0u) | _GLF_IDENTITY((0u), uint(_GLF_IDENTITY(uint((0u)), (uint((0u))) / 1u)))) ^ 0u), (true ? _GLF_IDENTITY((0u ^ 0u), (false ? _GLF_FUZZED(workgroup_base) : _GLF_IDENTITY((0u ^ 0u), ((0u ^ 0u)) >> 0u))) : _GLF_FUZZED(uvec3(36690u, 166254u, 76884u)[0]))) ^ (_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, uint(uvec2(workgroup_base + subgroup_id * subgroup_size, 1u))))) + _GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, 0u ^ (subgroup_local_id)), (true ? _GLF_IDENTITY(subgroup_local_id, 0u ^ (subgroup_local_id)) : _GLF_FUZZED(workgroup_id)))), (_GLF_IDENTITY((_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, (0u ^ 0u) ^ (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_id * subgroup_size, ~ (~ (subgroup_id * subgroup_size))), (workgroup_base + subgroup_id * subgroup_size) << 0u), _GLF_IDENTITY(uint(uvec2(workgroup_base + subgroup_id * subgroup_size, 1u)), (uint(uvec2(workgroup_base + subgroup_id * subgroup_size, 1u))) | (_GLF_IDENTITY(uint(uvec2(workgroup_base + subgroup_id * subgroup_size, 1u)), max(uint(uvec2(workgroup_base + subgroup_id * subgroup_size, 1u)), uint(uvec2(workgroup_base + subgroup_id * subgroup_size, 1u))))))))) + _GLF_IDENTITY(subgroup_local_id, 0u ^ (subgroup_local_id))), ((_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, _GLF_IDENTITY((0u ^ 0u), max((0u ^ 0u), (0u ^ 0u))) ^ (_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, uint(uvec2(workgroup_base + subgroup_id * subgroup_size, 1u))))), (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, (workgroup_base) / 1u) + subgroup_id * subgroup_size, (0u ^ 0u) ^ (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, uint(_GLF_IDENTITY(uvec2(workgroup_base + _GLF_IDENTITY(subgroup_id, uint(uvec4(subgroup_id, 0u, 0u, 0u))) * subgroup_size, 1u), (uvec2(workgroup_base + subgroup_id * subgroup_size, 1u)) ^ uvec2(0u, 0u)))), (_GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_id, (true ? subgroup_id : _GLF_FUZZED(workgroup_id))) * subgroup_size, uint(_GLF_IDENTITY(_GLF_IDENTITY(uvec2(workgroup_base + subgroup_id * subgroup_size, 1u), min(_GLF_IDENTITY(uvec2(workgroup_base + subgroup_id * subgroup_size, 1u), max(uvec2(workgroup_base + subgroup_id * subgroup_size, 1u), uvec2(workgroup_base + subgroup_id * subgroup_size, 1u))), _GLF_IDENTITY(uvec2(workgroup_base + subgroup_id * subgroup_size, 1u), uvec2(uvec3(uvec2(workgroup_base + subgroup_id * subgroup_size, 1u), 0u))))), (uvec2(_GLF_IDENTITY(workgroup_base, max(workgroup_base, workgroup_base)) + subgroup_id * _GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size)), 1u)) ^ uvec2(0u, 0u))))) - _GLF_IDENTITY(0u, (0u) >> 0u))))) | (_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, (0u ^ 0u) ^ (_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, uint(uvec2(workgroup_base + subgroup_id * subgroup_size, 1u))))))) + _GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (false ? _GLF_FUZZED(142705u) : _GLF_IDENTITY(subgroup_local_id, uint(uvec3(subgroup_local_id, 1u, 0u))))), 0u ^ (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, 0u | (_GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, subgroup_local_id)))), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(subgroup_local_id, 0u | (_GLF_IDENTITY(subgroup_local_id, min(_GLF_IDENTITY(subgroup_local_id, clamp(subgroup_local_id, subgroup_local_id, subgroup_local_id)), _GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, subgroup_local_id)))))) : _GLF_FUZZED(workgroup_base))))))) ^ 0u)) * 1u) >> 0u)));
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != ((0 >> _GLF_IDENTITY(int(6), int(6))) | _GLF_IDENTITY(0, max(_GLF_IDENTITY(0, min(0, 0)), 0))), bool(_GLF_IDENTITY(bvec2(_injected_loop_counter != ((0 >> _GLF_IDENTITY(int(6), int(6))) | 0), true), _GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec2(_injected_loop_counter != ((0 >> _GLF_IDENTITY(int(6), int(6))) | 0), true), bvec2(bvec4(bvec2(_injected_loop_counter != ((0 >> _GLF_IDENTITY(int(6), int(6))) | 0), true), false, false)))), bvec2(bvec3(bvec2(_GLF_IDENTITY(bvec2(_injected_loop_counter != ((0 >> _GLF_IDENTITY(int(6), int(6))) | 0), true), bvec2(bvec4(bvec2(_injected_loop_counter != ((0 >> _GLF_IDENTITY(int(6), int(6))) | 0), true), false, false)))), false)))), bvec2(bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec2(_injected_loop_counter != ((0 >> _GLF_IDENTITY(int(6), int(6))) | 0), true), bvec2(bvec4(bvec2(_injected_loop_counter != ((0 >> _GLF_IDENTITY(int(6), int(6))) | 0), true), false, false)))), bvec2(bvec3(bvec2(_GLF_IDENTITY(bvec2(_injected_loop_counter != ((0 >> _GLF_IDENTITY(int(6), int(6))) | 0), true), bvec2(bvec4(bvec2(_injected_loop_counter != ((0 >> _GLF_IDENTITY(int(6), int(6))) | 0), true), false, false)))), false)))), bvec2(bvec3(bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec2(_injected_loop_counter != ((0 >> _GLF_IDENTITY(int(6), int(6))) | 0), true), bvec2(bvec4(bvec2(_injected_loop_counter != ((0 >> _GLF_IDENTITY(int(6), int(6))) | 0), true), false, false)))), bvec2(bvec3(bvec2(_GLF_IDENTITY(bvec2(_injected_loop_counter != ((0 >> _GLF_IDENTITY(int(6), int(6))) | 0), true), bvec2(bvec4(bvec2(_injected_loop_counter != ((0 >> _GLF_IDENTITY(int(6), int(6))) | 0), true), false, false)))), false)))), true)))))))))); _injected_loop_counter --)
    {
     return;
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(false))
        return;
      }
     else
      {
       return;
      }
    }
  }
 else
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        return;
      }
    }
   else
    {
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
      return;
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         return;
        }
      }
    }
   if(_GLF_DEAD(false))
    return;
  }
 for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    {
     do
      {
       if(_GLF_DEAD(false))
        break;
       return;
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
  }
 uint next_virtual_gid = workgroup_base + subgroup_id * subgroup_size + ((subgroup_local_id + _GLF_IDENTITY(1, _GLF_IDENTITY((_GLF_IDENTITY(1, ~ (_GLF_IDENTITY(~ (1), int(int(~ _GLF_IDENTITY((1), ((1)) | ((1))))))))) * 1, ((_GLF_IDENTITY(1, ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (1), int(_GLF_IDENTITY(ivec3(_GLF_IDENTITY(~ (1), (~ (1)) << 0), 1, 1), ~ (~ (ivec3(_GLF_IDENTITY(~ (1), (~ (1)) << 0), 1, 1)))))), int(int(~ (1))))))) * 1) / 1))) % _GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, uint(_GLF_IDENTITY(uvec3(subgroup_size, 0u, 1u), ~ (~ (uvec3(subgroup_size, 0u, 1u))))))) / 1u));
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), true, false, false))))
        return;
       return;
      }
     if(_GLF_DEAD(false))
      break;
     do
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          break;
         continue;
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          continue;
         break;
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (false)))))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            break;
           if(_GLF_DEAD(false))
            return;
           return;
           if(_GLF_DEAD(false))
            break;
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          return;
        }
       else
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           do
            {
             if(_GLF_DEAD(false))
              continue;
             if(_GLF_DEAD(false))
              return;
             _GLF_IDENTITY(buf[virtual_gid] = 1, 0u ^ (_GLF_IDENTITY(buf[virtual_gid] = 1, ~ (_GLF_IDENTITY(~ (buf[virtual_gid] = 1), 0u | (~ (buf[virtual_gid] = 1)))))));
             if(_GLF_DEAD(false))
              continue;
             do
              {
               if(_GLF_DEAD(false))
                return;
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           while(_GLF_WRAPPED_LOOP(false));
           if(_GLF_DEAD(false))
            break;
          }
         if(_GLF_DEAD(false))
          return;
         if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
          return;
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), (! (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y)) && true)))))))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             return;
            }
           for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
            {
             if(_GLF_DEAD(false))
              return;
            }
          }
         if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), ! (! (! (true))))))))
          {
           do
            {
             do
              {
               return;
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat4x3(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_IDENTITY(_GLF_FUZZED(vec3(-8.7, 9.3, -68.32).r), _GLF_IDENTITY(float(vec3(_GLF_FUZZED(vec3(-8.7, 9.3, -68.32).r), _GLF_IDENTITY(determinant(mat3(0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0)), mix(float(_GLF_FUZZED(-205.945)), float(determinant(mat3(0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0))), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), log(1.0))), float(vec4(float(vec3(_GLF_FUZZED(_GLF_IDENTITY(vec3(-8.7, 9.3, -68.32), min(vec3(-8.7, 9.3, -68.32), vec3(-8.7, 9.3, -68.32))).r), determinant(mat3(0.0, 0.0, 1.0, 0.0, _GLF_IDENTITY(0.0, float(mat4x3(_GLF_IDENTITY(0.0, clamp(_GLF_IDENTITY(0.0, min(0.0, 0.0)), 0.0, 0.0)), 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, _GLF_IDENTITY(dot(vec3(0.0, 0.0, 1.0), vec3(0.0, 0.0, 1.0)), dot(vec3(0.0, 0.0, 1.0), vec3(0.0, 0.0, 1.0))), 1.0))), 1.0, 0.0, 0.0, 0.0)), log(1.0))), 0.0, 1.0, 0.0)))), _GLF_FUZZED(9.0)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))), 1.0, exp(0.0), _GLF_IDENTITY(dot(vec2(0.0, abs(0.0)), vec2(1.0, _GLF_IDENTITY(dot(vec4(0.0, _GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0)), 0.0, 1.0), vec4(0.0, 0.0, 0.0, 1.0)), dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, 0.0, 1.0))))), dot(vec2(0.0, abs(0.0)), vec2(_GLF_IDENTITY(1.0, (false ? _GLF_IDENTITY(_GLF_FUZZED(8.2), mix(float(_GLF_FUZZED(8.2)), float(_GLF_FUZZED(-7077.4949)), bool(false))) : 1.0)), _GLF_IDENTITY(dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, _GLF_IDENTITY(0.0, clamp(0.0, 0.0, _GLF_IDENTITY(0.0, max(0.0, 0.0)))), 0.0, 1.0)), dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, 0.0, 1.0)))))), sin(0.0), 0.0, 1.0, 1.0, length(vec3(0.0, 0.0, _GLF_IDENTITY(0.0, clamp(0.0, _GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0)))), abs(1.0), _GLF_IDENTITY(length(vec2(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))), clamp(length(vec2(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))), length(vec2(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))), _GLF_IDENTITY(length(vec2(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))), mix(float(_GLF_FUZZED(-840.081)), float(length(vec2(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)))), bool(true)))))), (mat4x3(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(vec3(-8.7, 9.3, -68.32).r), _GLF_FUZZED(9.0)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))), (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(vec3(-8.7, 9.3, -68.32).r), _GLF_FUZZED(9.0)), vec2((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch), vec2(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)) + ((injectionSwitch)))[1]), bvec2(true, true)))) + vec2(0.0, 0.0)), 1.0, exp(0.0), _GLF_IDENTITY(dot(vec2(0.0, abs(0.0)), vec2(1.0, _GLF_IDENTITY(dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, 0.0, 1.0)), dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, 0.0, 1.0))))), dot(vec2(0.0, abs(0.0)), vec2(1.0, _GLF_IDENTITY(dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, 0.0, 1.0)), dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, 0.0, _GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), 1.0)), _GLF_IDENTITY(1.0, float(vec2(1.0, 1.0))))))))))), sin(0.0), 0.0, 1.0, 1.0, length(vec3(0.0, 0.0, 0.0)), abs(1.0), length(vec2(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).x))))) - mat4x3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))).y))))
                break;
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  return;
                 continue;
                }
              }
             while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (! (_GLF_IDENTITY(bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), _GLF_IDENTITY(bool(bool(bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), ! (! (bool(bool(bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))))))));
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         else
          {
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(false))
            return;
          }
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          return;
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bvec4(true, true, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
              {
               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   if(_GLF_DEAD(false))
                    return;
                  }
                 else
                  {
                  }
                }
               else
                {
                 if(_GLF_DEAD(false))
                  return;
                 return;
                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
                  {
                   if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
                    return;
                  }
                }
               if(_GLF_DEAD(false))
                break;
              }
             else
              {
              }
            }
          }
         else
          {
           do
            {
             if(_GLF_DEAD(false))
              return;
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y)))))))
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_DEAD(false))
                  return;
                 return;
                }
               else
                {
                }
              }
             if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(false || (_GLF_IDENTITY(false, ! (! (false)))), true && (false || (_GLF_IDENTITY(false, ! (! (false)))))))))
              return;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               do
                {
                 return;
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             do
              {
               return;
              }
             while(_GLF_WRAPPED_LOOP(false));
             if(_GLF_DEAD(false))
              break;
            }
          }
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    break;
  }
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   buf[next_virtual_gid] = _GLF_IDENTITY(2, int(ivec4(2, int(_GLF_ONE(1.0, injectionSwitch.y)), 0, 0)));
  }
 else
  {
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
