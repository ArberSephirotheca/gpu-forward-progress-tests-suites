#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 0) uniform buf0 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ((injectionSwitch.x < injectionSwitch.y)) && true))))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  return;
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = 16;
 do
  {
   if(_GLF_DEAD(false))
    return;
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 do
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        continue;
       break;
      }
     do
      {
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          continue;
         return;
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), injectionSwitch)).x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (injectionSwitch.x > injectionSwitch.y)))))), true && ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(fract(-1.7)) : injectionSwitch.y))))))));
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x)) < injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false)), (injectionSwitch.x > injectionSwitch.y))))))
      {
       do
        {
         return;
         if(_GLF_DEAD(false))
          return;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    break;
  }
 while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), bool(bvec4(_GLF_WRAPPED_LOOP(false), true, true, false)))) || false));
 if(_GLF_DEAD(false))
  return;
 do
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec2(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec4(_GLF_IDENTITY(bvec2(false, true), _GLF_IDENTITY(bvec2(bvec4(bvec2(false, true), true, false)), bvec2(bvec3(bvec2(bvec4(bvec2(false, true), true, false)), true)))), false, false))))))))))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            return;
           break;
          }
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))))
            break;
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              continue;
             if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
              break;
             break;
            }
           return;
           if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
            return;
          }
         else
          {
          }
         if(_GLF_DEAD(false))
          return;
        }
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        continue;
       break;
      }
     if(_GLF_DEAD(false))
      break;
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, false || (false))))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (injectionSwitch.x > injectionSwitch.y))))
        continue;
       return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(false))
        return;
       do
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            return;
           return;
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(false))
        return;
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y)))));
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, (false) && true)))))
  return;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = _GLF_IDENTITY(gl_NumWorkGroups.x, (gl_NumWorkGroups.x) >> 0u);
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = _GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID.x, clamp(gl_WorkGroupID.x, _GLF_IDENTITY(gl_WorkGroupID.x, 1u * (gl_WorkGroupID.x)), _GLF_IDENTITY(gl_WorkGroupID, (false ? _GLF_FUZZED(uvec3(subgroup_id, uvec2(83153u, 50385u))) : gl_WorkGroupID)).x)), (true ? _GLF_IDENTITY(gl_WorkGroupID.x, clamp(gl_WorkGroupID.x, _GLF_IDENTITY(gl_WorkGroupID.x, 1u * (gl_WorkGroupID.x)), _GLF_IDENTITY(gl_WorkGroupID, (false ? _GLF_FUZZED(uvec3(subgroup_id, uvec2(83153u, 50385u))) : gl_WorkGroupID)).x)) : _GLF_FUZZED(num_workgroup)));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 uint workgroup_base = workgroup_size * _GLF_IDENTITY(workgroup_id, (workgroup_id) << 0u);
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
  }
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (int(_GLF_ZERO(0.0, injectionSwitch.x)) << _GLF_IDENTITY(int(0), int(0)))); _injected_loop_counter --)
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
    break;
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) || false)))
    {
     if(_GLF_DEAD(false))
      continue;
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
     do
      {
       for(int _injected_loop_counter = 1; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0), false || (_GLF_WRAPPED_LOOP(_injected_loop_counter != 0))); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            return;
           return;
          }
        }
       if(_GLF_DEAD(false))
        return;
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, false || (false))));
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       do
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).y))))
          return;
         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
          continue;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
      }
     else
      {
       if(_GLF_DEAD(false))
        break;
      }
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, 0.0 + _GLF_IDENTITY((injectionSwitch.y), min((injectionSwitch.y), (injectionSwitch.y))))))))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
              {
               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
                {
                 if(_GLF_DEAD(false))
                  {
                   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                    {
                     if(_GLF_DEAD(false))
                      break;
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                      }
                     else
                      {
                       if(_GLF_DEAD(false))
                        {
                         if(_GLF_DEAD(false))
                          return;
                         return;
                         if(_GLF_DEAD(false))
                          break;
                        }
                       if(_GLF_DEAD(false))
                        continue;
                      }
                     return;
                     if(_GLF_DEAD(false))
                      return;
                    }
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    return;
                  }
                }
              }
             if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec2(false, true))), false || (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec2(false, true))), (_GLF_IDENTITY(false, bool(bvec2(false, true)))) && true)))))
              continue;
             do
              {
               if(_GLF_DEAD(false))
                {
                 do
                  {
                   return;
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, true && (false))));
                }
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
             if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY((false), ((false)) || false), ((false)) && _GLF_IDENTITY(true, true && (true))) && true)))
              return;
             return;
            }
          }
         if(_GLF_DEAD(false))
          break;
         if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), true && (_GLF_WRAPPED_IF_FALSE(false))))
          {
           if(_GLF_DEAD(false))
            return;
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
          }
        }
       else
        {
         if(_GLF_DEAD(false))
          return;
        }
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(false))
        break;
      }
     else
      {
       if(_GLF_DEAD(false))
        continue;
      }
     if(_GLF_DEAD(false))
      continue;
    }
  }
 uint virtual_gid = workgroup_base + subgroup_id * subgroup_size + subgroup_local_id;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   for(int _injected_loop_counter = _GLF_IDENTITY(1, (1) + 0); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))), true && (_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))))); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(vec2(-9.0, -2.2).g)), bool(false))) < injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)))))))))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(_GLF_IDENTITY(2, (2) ^ 0)), _GLF_IDENTITY(int(2), (_GLF_IDENTITY(0 >> _GLF_IDENTITY(int(5), int(5)), 0 ^ (_GLF_IDENTITY(_GLF_IDENTITY(0 >> _GLF_IDENTITY(int(5), int(5)), (0 >> _GLF_IDENTITY(int(5), int(5))) | (_GLF_IDENTITY(0 >> _GLF_IDENTITY(int(5), int(5)), (0 >> _GLF_IDENTITY(int(5), int(5))) ^ 0))), (_GLF_IDENTITY(0 >> _GLF_IDENTITY(int(5), int(5)), (0 >> _GLF_IDENTITY(int(5), int(5))) | (_GLF_IDENTITY(0 >> _GLF_IDENTITY(int(5), int(5)), (0 >> _GLF_IDENTITY(int(5), int(5))) ^ 0)))) / 1)))) + (int(_GLF_IDENTITY(2, (2) | 0)))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) && _GLF_IDENTITY(true, (_GLF_IDENTITY(true, (_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, ! (! (true))))))) || false)) || false))))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                continue;
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(666.273)))))))
                break;
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                continue;
              }
             else
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  break;
                 if(_GLF_DEAD(false))
                  return;
                 continue;
                }
               return;
              }
            }
          }
        }
      }
     else
      {
       if(_GLF_DEAD(false))
        return;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      break;
     if(_GLF_DEAD(false))
      continue;
    }
  }
 for(int _injected_loop_counter = (1 | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))))
        {
         do
          {
           if(_GLF_DEAD(false))
            break;
           return;
          }
         while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) && true)));
        }
       return;
       if(_GLF_DEAD(false))
        continue;
      }
    }
   if(_GLF_DEAD(false))
    break;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), _GLF_IDENTITY(bool(bvec3((injectionSwitch.x < injectionSwitch.y), true, false)), ! _GLF_IDENTITY((! (_GLF_IDENTITY(bool(bvec3((injectionSwitch.x < injectionSwitch.y), true, false)), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bool(bvec3((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))), true, false)), bool(bvec4(bool(bvec3((injectionSwitch.x < injectionSwitch.y), true, false)), false, false, true))), true), _GLF_IDENTITY(bvec2(bvec2(bvec2(_GLF_IDENTITY(bool(bvec3((injectionSwitch.x < injectionSwitch.y), true, false)), bool(bvec4(bool(bvec3((_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(7.7)), bool(false))), _GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(2391.6640)), bool(false))), injectionSwitch.x)) < injectionSwitch.y), true, false)), false, false, true))), true))), bvec2(bvec3(bvec2(bvec2(bvec2(_GLF_IDENTITY(bool(bvec3((injectionSwitch.x < injectionSwitch.y), true, false)), bool(bvec4(bool(bvec3((injectionSwitch.x < injectionSwitch.y), true, false)), false, false, true))), true))), false)))))))), bool(bvec4(_GLF_IDENTITY((! (_GLF_IDENTITY(_GLF_IDENTITY(bool(bvec3((injectionSwitch.x < injectionSwitch.y), true, false)), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bool(bvec3((injectionSwitch.x < injectionSwitch.y), true, false)), bool(bvec4(bool(bvec3((injectionSwitch.x < injectionSwitch.y), true, false)), false, false, true))), true), _GLF_IDENTITY(bvec2(bvec2(bvec2(_GLF_IDENTITY(bool(bvec3((injectionSwitch.x < injectionSwitch.y), true, false)), bool(bvec4(bool(bvec3((injectionSwitch.x < injectionSwitch.y), true, false)), false, false, true))), true))), bvec2(bvec3(bvec2(bvec2(bvec2(_GLF_IDENTITY(bool(bvec3((injectionSwitch.x < injectionSwitch.y), true, false)), bool(bvec4(bool(bvec3((injectionSwitch.x < injectionSwitch.y), true, false)), false, false, true))), true))), false)))))), bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(bool(bvec3((injectionSwitch.x < injectionSwitch.y), true, false)), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bool(bvec3((injectionSwitch.x < injectionSwitch.y), true, false)), bool(bvec4(bool(bvec3((injectionSwitch.x < injectionSwitch.y), true, false)), false, false, true))), true), _GLF_IDENTITY(bvec2(bvec2(bvec2(_GLF_IDENTITY(bool(bvec3((injectionSwitch.x < injectionSwitch.y), true, false)), bool(bvec4(bool(bvec3((injectionSwitch.x < injectionSwitch.y), true, false)), false, false, true))), true))), bvec2(bvec3(bvec2(bvec2(bvec2(_GLF_IDENTITY(bool(bvec3((injectionSwitch.x < injectionSwitch.y), true, false)), bool(bvec4(bool(bvec3((injectionSwitch.x < injectionSwitch.y), true, false)), false, false, true))), true))), false)))))), bool(bvec4(_GLF_IDENTITY(bool(bvec3((injectionSwitch.x < injectionSwitch.y), true, false)), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bool(bvec3((injectionSwitch.x < injectionSwitch.y), true, false)), bool(bvec4(bool(bvec3((injectionSwitch.x < injectionSwitch.y), true, false)), false, false, true))), true), _GLF_IDENTITY(bvec2(bvec2(bvec2(_GLF_IDENTITY(bool(bvec3((injectionSwitch.x < injectionSwitch.y), true, false)), bool(bvec4(bool(bvec3((injectionSwitch.x < injectionSwitch.y), true, false)), false, false, true))), true))), bvec2(bvec3(bvec2(bvec2(bvec2(_GLF_IDENTITY(bool(bvec3((injectionSwitch.x < injectionSwitch.y), true, false)), bool(bvec4(bool(bvec3((injectionSwitch.x < injectionSwitch.y), true, false)), false, false, true))), true))), false)))))), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))), false))))), (_GLF_IDENTITY((! (_GLF_IDENTITY(bool(bvec3((injectionSwitch.x < injectionSwitch.y), true, false)), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bool(bvec3((injectionSwitch.x < injectionSwitch.y), true, false)), bool(bvec4(bool(bvec3((injectionSwitch.x < injectionSwitch.y), true, false)), false, false, true))), true), _GLF_IDENTITY(bvec2(bvec2(bvec2(_GLF_IDENTITY(bool(bvec3((injectionSwitch.x < injectionSwitch.y), true, false)), bool(bvec4(bool(bvec3((injectionSwitch.x < injectionSwitch.y), true, false)), false, false, true))), true))), bvec2(bvec3(bvec2(bvec2(bvec2(_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3((injectionSwitch.x < injectionSwitch.y), true, false), bvec3(bvec4(bvec3((injectionSwitch.x < injectionSwitch.y), true, false), false)))), bool(bvec4(bool(bvec3((injectionSwitch.x < injectionSwitch.y), true, false)), false, false, true))), true))), false)))))))), ! (! ((! (_GLF_IDENTITY(bool(bvec3((injectionSwitch.x < injectionSwitch.y), true, false)), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bool(bvec3((injectionSwitch.x < injectionSwitch.y), true, false)), bool(bvec4(bool(bvec3((_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (! (injectionSwitch.x < injectionSwitch.y)))), true, false)), false, false, true))), true), _GLF_IDENTITY(bvec2(bvec2(bvec2(_GLF_IDENTITY(bool(bvec3((injectionSwitch.x < injectionSwitch.y), true, false)), bool(bvec4(bool(bvec3((injectionSwitch.x < injectionSwitch.y), true, false)), false, false, true))), true))), bvec2(bvec3(bvec2(bvec2(bvec2(_GLF_IDENTITY(bool(bvec3((injectionSwitch.x < injectionSwitch.y), true, false)), bool(bvec4(bool(bvec3((injectionSwitch.x < injectionSwitch.y), true, false)), false, false, true))), true))), false)))))))))))) && true), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))))))), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false || (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(bvec2(_GLF_DEAD(false), false), bvec2(bvec4(_GLF_IDENTITY(bvec2(_GLF_DEAD(false), false), bvec2(bvec2(bvec2(_GLF_DEAD(false), false)))), false, false))))))
        break;
       return;
       if(_GLF_DEAD(false))
        return;
      }
     if(_GLF_DEAD(false))
      break;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        continue;
       return;
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
      break;
    }
   else
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
      return;
     if(_GLF_DEAD(false))
      break;
    }
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 uint next_virtual_gid = workgroup_base + _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) << (0u & 27084u)), 0u | (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (subgroup_id) >> 0u) * subgroup_size, (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (subgroup_id) * uint(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(vec2(injectionSwitch.y, determinant(mat2(1.0, 0.0, 1.0, 1.0)))), (false ? _GLF_FUZZED(-18.41) : float(vec2(injectionSwitch.y, determinant(mat2(1.0, 0.0, 1.0, 1.0)))))))))), (_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY((subgroup_id) * uint(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(vec2(injectionSwitch.y, determinant(mat2(1.0, 0.0, 1.0, 1.0)))), (false ? _GLF_FUZZED(-18.41) : float(vec2(injectionSwitch.y, determinant(mat2(1.0, 0.0, 1.0, 1.0))))))))), ~ (~ ((subgroup_id) * uint(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(vec2(injectionSwitch.y, _GLF_IDENTITY(determinant(mat2(1.0, 0.0, 1.0, 1.0)), (true ? _GLF_IDENTITY(determinant(mat2(1.0, 0.0, 1.0, 1.0)), (determinant(mat2(1.0, 0.0, 1.0, 1.0))) / 1.0) : _GLF_FUZZED(7.1))))), (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, (false) && true)), bool(bvec4(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, (false) && true)), bool(bvec4(bool(_GLF_IDENTITY(false, (false) && true)), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))))) ? _GLF_FUZZED(-18.41) : float(vec2(injectionSwitch.y, determinant(mat2(1.0, 0.0, 1.0, 1.0)))))))))))))) - 0u) * subgroup_size) >> (0u | 0u)))) + _GLF_IDENTITY(_GLF_IDENTITY(((_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) / 1u)) % subgroup_size), (_GLF_IDENTITY(((_GLF_IDENTITY(subgroup_local_id + _GLF_IDENTITY(1, clamp(1, 1, 1)), (subgroup_local_id + 1) / 1u)) % subgroup_size), 0u ^ ((_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) / 1u)), (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) / 1u)), ((_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) / 1u))) | 0u)) | ((_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) / 1u)))) % subgroup_size)))) | 0u), (_GLF_IDENTITY(((_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) / 1u)) % subgroup_size), (_GLF_IDENTITY(((_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) / _GLF_IDENTITY(_GLF_IDENTITY(1u, _GLF_IDENTITY(uint(uvec2(1u, ((0u & 182715u) >> _GLF_IDENTITY(uint(5u), uint(5u))))), 0u ^ (uint(uvec2(1u, ((0u & 182715u) >> _GLF_IDENTITY(uint(5u), uint(5u)))))))), clamp(_GLF_IDENTITY(1u, _GLF_IDENTITY(uint(uvec2(1u, ((0u & 182715u) >> _GLF_IDENTITY(uint(5u), uint(5u))))), 0u ^ (uint(uvec2(1u, ((0u & 182715u) >> _GLF_IDENTITY(uint(5u), uint(5u)))))))), _GLF_IDENTITY(1u, _GLF_IDENTITY(uint(uvec2(1u, ((0u & 182715u) >> _GLF_IDENTITY(uint(5u), uint(5u))))), 0u ^ (uint(uvec2(1u, ((0u & 182715u) >> _GLF_IDENTITY(uint(5u), uint(5u)))))))), _GLF_IDENTITY(1u, _GLF_IDENTITY(uint(uvec2(1u, ((0u & 182715u) >> _GLF_IDENTITY(uint(5u), uint(5u))))), 0u ^ (uint(uvec2(1u, ((0u & 182715u) >> _GLF_IDENTITY(uint(5u), uint(5u)))))))))))) % subgroup_size), _GLF_IDENTITY(0u ^ (((_GLF_IDENTITY(subgroup_local_id + _GLF_IDENTITY(1, ~ (_GLF_IDENTITY(~ (1), min(~ (1), _GLF_IDENTITY(~ (1), (~ (1)) >> 0))))), (subgroup_local_id + 1) / 1u)) % subgroup_size)), (true ? 0u ^ (((_GLF_IDENTITY(subgroup_local_id + _GLF_IDENTITY(1, ~ (_GLF_IDENTITY(~ (1), min(~ (1), _GLF_IDENTITY(~ (1), (~ (1)) >> 0))))), (subgroup_local_id + 1) / 1u)) % subgroup_size)) : _GLF_FUZZED(workgroup_id))))) | 0u)) - 0u);
 _GLF_IDENTITY(buf[virtual_gid] = 1, _GLF_IDENTITY((buf[virtual_gid] = 1), (false ? _GLF_FUZZED(workgroup_base) : (buf[virtual_gid] = 1))) | _GLF_IDENTITY(0u, (false ? _GLF_FUZZED(57890u) : 0u)));
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   do
    {
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(_GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(20.42) : 0.0)), injectionSwitch.x))); _injected_loop_counter --)
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (_GLF_IDENTITY((_GLF_IDENTITY(1, (1) / ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0)))) << _GLF_IDENTITY(int(2), _GLF_IDENTITY(_GLF_IDENTITY(int(2), min(_GLF_IDENTITY(int(2), (int(_GLF_IDENTITY(2, 0 ^ (2)))) | 0), int(_GLF_IDENTITY(2, (2) / 1)))), min(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(2), min(_GLF_IDENTITY(int(2), (int(2)) | 0), int(2))), (_GLF_IDENTITY(int(2), min(_GLF_IDENTITY(int(2), (int(2)) | 0), int(_GLF_IDENTITY(2, 1 * (2)))))) | (_GLF_IDENTITY(int(2), min(_GLF_IDENTITY(int(2), (int(2)) | 0), int(2))))), ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))) * (_GLF_IDENTITY(_GLF_IDENTITY(int(2), _GLF_IDENTITY(min(_GLF_IDENTITY(int(2), (int(2)) | 0), int(2)), (_GLF_IDENTITY(min(_GLF_IDENTITY(int(2), (int(2)) | 0), int(2)), (min(_GLF_IDENTITY(int(2), _GLF_IDENTITY((int(2)), 1 * ((int(2)))) | 0), int(2))) << 0)) << int(_GLF_ZERO(0.0, injectionSwitch.x)))), (_GLF_IDENTITY(int(2), min(_GLF_IDENTITY(int(2), (int(2)) | 0), int(2)))) | (_GLF_IDENTITY(_GLF_IDENTITY(int(2), (int(2)) ^ 0), min(_GLF_IDENTITY(int(2), (int(2)) | 0), int(2))))))), _GLF_IDENTITY(int(2), min(_GLF_IDENTITY(int(2), _GLF_IDENTITY((int(2)) | 0, ((int(2)) | 0) | (0 | 0))), _GLF_IDENTITY(int(2), 0 ^ (int(2))))))))), min((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(2), _GLF_IDENTITY(_GLF_IDENTITY(int(2), min(_GLF_IDENTITY(int(2), (int(2)) | 0), int(2))), min(_GLF_IDENTITY(_GLF_IDENTITY(int(2), min(_GLF_IDENTITY(int(2), (int(2)) | 0), int(2))), (_GLF_IDENTITY(int(2), min(_GLF_IDENTITY(int(2), (int(2)) | 0), int(2)))) | _GLF_IDENTITY((_GLF_IDENTITY(int(2), min(_GLF_IDENTITY(int(2), (_GLF_IDENTITY(int(2), min(int(2), int(2)))) | 0), int(2)))), 0 ^ ((_GLF_IDENTITY(int(2), min(_GLF_IDENTITY(int(2), (int(2)) | 0), int(2))))))), _GLF_IDENTITY(int(2), min(_GLF_IDENTITY(int(2), (int(2)) | 0), int(2)))))), (_GLF_IDENTITY(_GLF_IDENTITY(int(2), _GLF_IDENTITY(_GLF_IDENTITY(int(2), min(_GLF_IDENTITY(int(2), (int(2)) | 0), int(2))), min(_GLF_IDENTITY(_GLF_IDENTITY(int(2), min(_GLF_IDENTITY(int(2), (int(2)) | 0), int(2))), (_GLF_IDENTITY(_GLF_IDENTITY(int(2), ~ (~ (int(2)))), min(_GLF_IDENTITY(int(2), (int(2)) | 0), int(_GLF_IDENTITY(2, min(_GLF_IDENTITY(2, (_GLF_IDENTITY(2, 0 | (2))) << 0), _GLF_IDENTITY(2, (2) ^ 0))))))) | _GLF_IDENTITY((_GLF_IDENTITY(int(2), min(_GLF_IDENTITY(int(2), (int(2)) | 0), int(2)))), 0 ^ ((_GLF_IDENTITY(_GLF_IDENTITY(int(2), min(_GLF_IDENTITY(int(2), (int(2)) | 0), int(2))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(int(2), min(_GLF_IDENTITY(int(2), (int(2)) | 0), int(2))), clamp(_GLF_IDENTITY(int(2), min(_GLF_IDENTITY(int(2), (int(2)) | 0), int(2))), _GLF_IDENTITY(int(2), min(_GLF_IDENTITY(int(2), (int(2)) | 0), int(2))), _GLF_IDENTITY(int(2), min(_GLF_IDENTITY(int(2), (int(2)) | 0), int(2))))), _GLF_IDENTITY(int(2), min(_GLF_IDENTITY(int(2), (int(2)) | 0), int(2))), _GLF_IDENTITY(int(2), min(_GLF_IDENTITY(int(2), (int(2)) | 0), int(2))))))))), _GLF_IDENTITY(int(2), min(_GLF_IDENTITY(int(2), (int(2)) | 0), int(2)))))), int(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(2), _GLF_IDENTITY(_GLF_IDENTITY(int(2), min(_GLF_IDENTITY(int(2), (int(2)) | 0), int(2))), min(_GLF_IDENTITY(_GLF_IDENTITY(int(2), min(_GLF_IDENTITY(int(2), _GLF_IDENTITY((int(2)) | 0, clamp((int(2)) | 0, (int(2)) | 0, (int(2)) | 0))), int(2))), (_GLF_IDENTITY(_GLF_IDENTITY(int(2), 0 + (int(2))), min(_GLF_IDENTITY(int(2), (int(2)) | 0), int(2)))) | _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(int(2), ~ (~ (_GLF_IDENTITY(int(2), (int(2)) - 0)))), min(_GLF_IDENTITY(int(2), (int(2)) | _GLF_IDENTITY(0, (_GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) + 0)) / 1)) | 0)), int(2)))), 0 ^ ((_GLF_IDENTITY(int(2), min(_GLF_IDENTITY(int(2), (int(2)) | 0), int(2))))))), _GLF_IDENTITY(int(2), min(_GLF_IDENTITY(int(2), (int(2)) | 0), int(2)))))), (_GLF_IDENTITY(int(2), _GLF_IDENTITY(_GLF_IDENTITY(int(2), min(_GLF_IDENTITY(int(2), (int(2)) | 0), int(_GLF_IDENTITY(2, (2) ^ 0)))), min(_GLF_IDENTITY(_GLF_IDENTITY(int(2), min(_GLF_IDENTITY(int(2), _GLF_IDENTITY((int(2)) | 0, clamp((int(2)) | 0, (int(2)) | 0, (int(2)) | 0))), int(2))), (_GLF_IDENTITY(_GLF_IDENTITY(int(2), 0 + (int(2))), min(_GLF_IDENTITY(int(2), (int(2)) | 0), int(2)))) | _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(int(2), ~ (~ (_GLF_IDENTITY(int(2), (int(2)) - 0)))), min(_GLF_IDENTITY(int(2), (int(2)) | _GLF_IDENTITY(0, (_GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) + 0)) / 1)) | 0)), int(2)))), 0 ^ ((_GLF_IDENTITY(int(2), min(_GLF_IDENTITY(int(2), (int(2)) | 0), int(2))))))), _GLF_IDENTITY(int(2), min(_GLF_IDENTITY(int(2), (int(2)) | 0), int(2))))))) / 1), min(_GLF_IDENTITY(int(2), _GLF_IDENTITY(_GLF_IDENTITY(int(2), min(_GLF_IDENTITY(int(2), (int(2)) | _GLF_IDENTITY(0, 0 ^ (0))), int(2))), min(_GLF_IDENTITY(_GLF_IDENTITY(int(2), min(_GLF_IDENTITY(int(2), (int(2)) | 0), int(2))), _GLF_IDENTITY((_GLF_IDENTITY(int(2), min(_GLF_IDENTITY(int(2), (int(2)) | 0), int(2)))), ((_GLF_IDENTITY(int(2), min(_GLF_IDENTITY(int(2), (int(2)) | 0), int(2))))) * 1) | _GLF_IDENTITY((_GLF_IDENTITY(int(2), min(_GLF_IDENTITY(int(2), (int(2)) | 0), int(2)))), 0 ^ ((_GLF_IDENTITY(int(2), min(_GLF_IDENTITY(int(2), (int(2)) | 0), int(2))))))), _GLF_IDENTITY(_GLF_IDENTITY(int(2), min(_GLF_IDENTITY(int(2), (int(2)) | 0), int(2))), (_GLF_IDENTITY(int(2), min(_GLF_IDENTITY(int(2), (int(2)) | 0), int(2)))) | (_GLF_IDENTITY(int(2), min(_GLF_IDENTITY(int(2), (int(2)) | 0), int(2)))))))), _GLF_IDENTITY(int(2), _GLF_IDENTITY(_GLF_IDENTITY(int(2), min(_GLF_IDENTITY(int(2), (int(2)) | 0), int(2))), min(_GLF_IDENTITY(_GLF_IDENTITY(int(2), min(_GLF_IDENTITY(int(2), _GLF_IDENTITY((int(2)) | 0, ((int(2)) | 0) + 0)), int(2))), (_GLF_IDENTITY(int(2), min(_GLF_IDENTITY(int(2), (int(2)) | 0), int(2)))) | _GLF_IDENTITY((_GLF_IDENTITY(int(2), min(_GLF_IDENTITY(_GLF_IDENTITY(int(2), (int(2)) | 0), _GLF_IDENTITY(int(_GLF_IDENTITY(ivec4(_GLF_IDENTITY(int(2), (int(2)) | 0), ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1))), 0, 0), clamp(ivec4(_GLF_IDENTITY(int(_GLF_IDENTITY(2, (2) ^ (0 >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), 0 ^ (int(5))))))), (int(2)) | 0), ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1))), 0, 0), _GLF_IDENTITY(ivec4(_GLF_IDENTITY(int(2), (int(2)) | 0), ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1))), 0, 0), (ivec4(_GLF_IDENTITY(int(2), (int(2)) | 0), ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1))), 0, 0)) - ivec4(0, 0, 0, 0)), _GLF_IDENTITY(ivec4(_GLF_IDENTITY(int(2), (int(2)) | 0), ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1))), 0, 0), (ivec4(_GLF_IDENTITY(int(2), (int(2)) | 0), ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1))), 0, 0)) ^ ivec4(0, 0, 0, 0))))), (int(_GLF_IDENTITY(ivec4(_GLF_IDENTITY(_GLF_IDENTITY(int(2), int(ivec2(int(2), 1))), (int(2)) | 0), ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1))), 0, 0), clamp(ivec4(_GLF_IDENTITY(int(2), (int(2)) | 0), ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1))), 0, 0), _GLF_IDENTITY(ivec4(_GLF_IDENTITY(int(2), (int(2)) | 0), ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1))), 0, 0), (ivec4(_GLF_IDENTITY(int(2), (int(2)) | 0), ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1))), 0, 0)) - ivec4(0, 0, 0, 0)), _GLF_IDENTITY(ivec4(_GLF_IDENTITY(int(2), (int(2)) | 0), ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1))), 0, 0), (ivec4(_GLF_IDENTITY(int(_GLF_IDENTITY(2, (_GLF_IDENTITY(2, (2) ^ 0)) ^ 0)), (int(2)) | 0), ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1))), 0, 0)) ^ ivec4(0, 0, 0, 0)))))) | 0)), int(2)))), 0 ^ ((_GLF_IDENTITY(int(2), _GLF_IDENTITY(min(_GLF_IDENTITY(int(2), (int(2)) | 0), int(2)), (min(_GLF_IDENTITY(int(2), (int(2)) | 0), int(2))) + 0)))))), _GLF_IDENTITY(int(2), min(_GLF_IDENTITY(int(2), (int(2)) | 0), int(2)))))))), int(_GLF_ONE(1.0, injectionSwitch.y)), _GLF_IDENTITY(0, clamp(0, 0, 0)))))) | (_GLF_IDENTITY(int(2), _GLF_IDENTITY(_GLF_IDENTITY(int(2), _GLF_IDENTITY(min(_GLF_IDENTITY(int(2), (int(2)) | 0), int(2)), (min(_GLF_IDENTITY(int(2), (int(2)) | 0), _GLF_IDENTITY(int(2), 1 * (int(2))))) >> 0)), min(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(2), min(_GLF_IDENTITY(int(2), (int(2)) | 0), int(2))), clamp(_GLF_IDENTITY(int(2), min(_GLF_IDENTITY(int(2), (int(2)) | 0), int(2))), _GLF_IDENTITY(int(2), min(_GLF_IDENTITY(int(2), (int(2)) | 0), int(2))), _GLF_IDENTITY(int(2), min(_GLF_IDENTITY(int(2), (int(_GLF_IDENTITY(2, int(ivec3(2, 0, ((1 & 1) | 1)))))) | 0), int(2))))), (_GLF_IDENTITY(int(2), min(_GLF_IDENTITY(int(2), (int(2)) | 0), int(2)))) | _GLF_IDENTITY((_GLF_IDENTITY(int(2), min(_GLF_IDENTITY(int(2), (int(_GLF_IDENTITY(2, (2) << 0))) | 0), int(2)))), 0 ^ ((_GLF_IDENTITY(int(2), min(_GLF_IDENTITY(int(2), (int(2)) | 0), int(2))))))), _GLF_IDENTITY(int(2), min(_GLF_IDENTITY(int(2), (int(2)) | 0), int(2))))))))), _GLF_IDENTITY(_GLF_IDENTITY((1 << _GLF_IDENTITY(int(2), _GLF_IDENTITY(_GLF_IDENTITY(int(2), min(_GLF_IDENTITY(int(2), (int(2)) | 0), int(2))), min(_GLF_IDENTITY(_GLF_IDENTITY(int(2), min(_GLF_IDENTITY(int(_GLF_IDENTITY(2, min(2, _GLF_IDENTITY(2, (2) << 0)))), _GLF_IDENTITY((int(2)), ((int(2))) ^ 0) | 0), int(2))), (_GLF_IDENTITY(int(2), min(_GLF_IDENTITY(int(2), (int(2)) | 0), int(2)))) | (_GLF_IDENTITY(int(2), min(_GLF_IDENTITY(int(2), _GLF_IDENTITY((int(2)), max((int(2)), (int(2)))) | 0), int(_GLF_IDENTITY(_GLF_IDENTITY(2, int(ivec2(2, int(_GLF_ONE(1.0, injectionSwitch.y))))), (true ? _GLF_IDENTITY(2, int(ivec2(2, int(_GLF_ONE(1.0, injectionSwitch.y))))) : _GLF_FUZZED(_injected_loop_counter)))))))), _GLF_IDENTITY(int(2), min(_GLF_IDENTITY(int(2), (int(2)) | 0), int(2))))))), max((1 << _GLF_IDENTITY(int(2), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(2), min(_GLF_IDENTITY(int(2), (int(2)) | 0), int(2))), min(_GLF_IDENTITY(_GLF_IDENTITY(int(2), min(_GLF_IDENTITY(int(2), (int(_GLF_IDENTITY(2, int(ivec2(_GLF_IDENTITY(2, max(2, 2)), 0))))) | 0), int(2))), (_GLF_IDENTITY(int(2), min(_GLF_IDENTITY(int(2), (int(2)) | 0), int(2)))) | (_GLF_IDENTITY(int(2), min(_GLF_IDENTITY(int(2), _GLF_IDENTITY(_GLF_IDENTITY((int(2)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? (int(2)) : _GLF_FUZZED((+ _injected_loop_counter)))) | 0, min(_GLF_IDENTITY((int(2)) | 0, ((int(2)) | 0) / 1), _GLF_IDENTITY((int(2)) | 0, ((int(2)) | 0) << 0)))), int(2))))), _GLF_IDENTITY(int(2), min(_GLF_IDENTITY(int(2), (int(_GLF_IDENTITY(2, max(2, 2)))) | _GLF_IDENTITY(0, (0) - (0 << _GLF_IDENTITY(int(2), int(2))))), int(2))))), (_GLF_IDENTITY(_GLF_IDENTITY(int(2), min(_GLF_IDENTITY(int(2), (int(2)) | 0), int(2))), min(_GLF_IDENTITY(_GLF_IDENTITY(int(2), min(_GLF_IDENTITY(int(2), (int(_GLF_IDENTITY(2, int(ivec2(_GLF_IDENTITY(2, max(_GLF_IDENTITY(2, (2) | 0), 2)), 0))))) | 0), int(2))), (_GLF_IDENTITY(int(2), min(_GLF_IDENTITY(int(2), _GLF_IDENTITY((int(2)) | 0, (_GLF_IDENTITY((int(2)) | 0, ((int(2)) | 0) / 1)) | ((int(2)) | 0))), int(2)))) | (_GLF_IDENTITY(int(2), min(_GLF_IDENTITY(int(2), _GLF_IDENTITY(_GLF_IDENTITY((int(2)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? (int(2)) : _GLF_FUZZED((+ _injected_loop_counter)))) | 0, min(_GLF_IDENTITY((int(2)) | 0, ((int(2)) | 0) / 1), _GLF_IDENTITY((int(2)) | 0, ((int(2)) | 0) << 0)))), int(2))))), _GLF_IDENTITY(int(2), min(_GLF_IDENTITY(int(_GLF_IDENTITY(2, (_GLF_IDENTITY(2, (2) * 1)) - 0)), (int(_GLF_IDENTITY(2, max(2, 2)))) | _GLF_IDENTITY(0, (0) - (0 << _GLF_IDENTITY(int(2), int(2))))), int(2)))))) * 1))), (1 << _GLF_IDENTITY(int(2), _GLF_IDENTITY(_GLF_IDENTITY(int(2), min(_GLF_IDENTITY(int(2), (int(2)) | 0), int(2))), min(_GLF_IDENTITY(_GLF_IDENTITY(int(2), min(_GLF_IDENTITY(_GLF_IDENTITY(int(2), (int(2)) | 0), int(ivec4(_GLF_IDENTITY(int(2), (int(2)) | 0), 1, 0, 1))), int(2))), (_GLF_IDENTITY(int(2), min(_GLF_IDENTITY(int(2), (int(2)) | 0), int(2)))) | (_GLF_IDENTITY(int(2), min(_GLF_IDENTITY(int(2), (int(2)) | 0), int(2))))), _GLF_IDENTITY(_GLF_IDENTITY(int(2), int(_GLF_IDENTITY(ivec2(int(2), 0), (ivec2(int(2), 0)) | ivec2(0, 0)))), min(_GLF_IDENTITY(int(2), (int(2)) | 0), int(2))))))))), (76402 & 0) + (_GLF_IDENTITY((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(2), (int(2)) | 0), _GLF_IDENTITY(_GLF_IDENTITY(int(2), min(_GLF_IDENTITY(int(2), (int(2)) | 0), int(2))), min(_GLF_IDENTITY(_GLF_IDENTITY(int(2), min(_GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(2, min(2, _GLF_IDENTITY(2, (2) << 0)))), ~ (~ (_GLF_IDENTITY(int(_GLF_IDENTITY(2, min(2, _GLF_IDENTITY(2, (2) << 0)))), (int(_GLF_IDENTITY(2, min(2, _GLF_IDENTITY(2, (2) << 0))))) >> 0)))), _GLF_IDENTITY((int(2)), ((int(2))) ^ 0) | 0), int(2))), (_GLF_IDENTITY(int(2), min(_GLF_IDENTITY(int(2), _GLF_IDENTITY((int(2)) | 0, (false ? _GLF_FUZZED(13684) : _GLF_IDENTITY((int(2)) | 0, max((int(2)) | 0, (int(2)) | 0))))), int(2)))) | (_GLF_IDENTITY(int(2), min(_GLF_IDENTITY(int(2), _GLF_IDENTITY((int(2)), max((int(2)), (int(2)))) | 0), int(_GLF_IDENTITY(2, int(ivec2(2, int(_GLF_ONE(1.0, injectionSwitch.y)))))))))), _GLF_IDENTITY(int(2), min(_GLF_IDENTITY(int(2), (int(2)) | 0), int(2))))))), max((1 << _GLF_IDENTITY(int(2), _GLF_IDENTITY(_GLF_IDENTITY(int(2), min(_GLF_IDENTITY(int(2), (int(_GLF_IDENTITY(2, (_GLF_IDENTITY(2, (2) ^ 0)) >> 0))) | 0), int(2))), min(_GLF_IDENTITY(_GLF_IDENTITY(int(2), min(_GLF_IDENTITY(int(2), (int(_GLF_IDENTITY(2, int(ivec2(_GLF_IDENTITY(2, max(2, 2)), 0))))) | 0), int(2))), (_GLF_IDENTITY(int(2), min(_GLF_IDENTITY(int(2), (int(2)) | 0), int(2)))) | (_GLF_IDENTITY(int(2), min(_GLF_IDENTITY(int(2), _GLF_IDENTITY(_GLF_IDENTITY((int(2)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? (int(2)) : _GLF_FUZZED((+ _injected_loop_counter)))) | 0, min(_GLF_IDENTITY((int(2)) | 0, ((int(2)) | 0) / 1), _GLF_IDENTITY((int(2)) | 0, ((int(2)) | 0) << 0)))), int(2))))), _GLF_IDENTITY(int(2), min(_GLF_IDENTITY(int(2), (int(_GLF_IDENTITY(2, max(2, 2)))) | _GLF_IDENTITY(_GLF_IDENTITY(0, (0) - 0), (0) - (0 << _GLF_IDENTITY(int(2), int(2))))), int(2))))))), (1 << _GLF_IDENTITY(int(2), _GLF_IDENTITY(_GLF_IDENTITY(int(2), min(_GLF_IDENTITY(int(2), (_GLF_IDENTITY(int(2), max(int(2), int(_GLF_IDENTITY(2, (true ? _GLF_IDENTITY(2, (2) >> 0) : _GLF_FUZZED(96510))))))) | 0), int(2))), min(_GLF_IDENTITY(_GLF_IDENTITY(int(2), min(_GLF_IDENTITY(int(2), (int(2)) | 0), int(2))), (_GLF_IDENTITY(int(2), min(_GLF_IDENTITY(int(2), (int(2)) | 0), int(_GLF_IDENTITY(2, max(2, _GLF_IDENTITY(2, 0 + (2)))))))) | (_GLF_IDENTITY(int(2), min(_GLF_IDENTITY(int(2), (int(2)) | 0), int(2))))), _GLF_IDENTITY(_GLF_IDENTITY(int(2), int(_GLF_IDENTITY(ivec2(int(2), 0), (ivec2(int(2), 0)) | ivec2(0, 0)))), min(_GLF_IDENTITY(int(2), (int(_GLF_IDENTITY(2, max(2, 2)))) | 0), int(2))))))))))))) >> _GLF_IDENTITY(int(2), int(2)))); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(false))
              break;
             if(_GLF_DEAD(false))
              return;
             if(_GLF_DEAD(false))
              break;
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                break;
              }
             else
              {
               if(_GLF_DEAD(false))
                return;
               return;
              }
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                break;
               continue;
              }
            }
          }
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
        return;
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(false))
      return;
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
    {
     if(_GLF_DEAD(false))
      return;
     for(int _injected_loop_counter = (_GLF_IDENTITY((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), ~ (~ (_GLF_IDENTITY(int(5), 0 + (int(5))))))), (_GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(int(5), 0 + (int(5))), (false ? _GLF_FUZZED(-9801) : _GLF_IDENTITY(int(5), 0 + (int(5)))))))))) << 0)), ((1 << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), ~ (~ (_GLF_IDENTITY(int(5), 0 + (int(5))))))))) | ((1 << _GLF_IDENTITY(int(5), _GLF_IDENTITY(_GLF_IDENTITY(int(5), ~ (~ (_GLF_IDENTITY(int(5), 0 + _GLF_IDENTITY((int(5)), max((int(5)), (int(5)))))))), (_GLF_IDENTITY(int(5), ~ (~ (_GLF_IDENTITY(int(5), 0 + _GLF_IDENTITY((int(5)), max((int(5)), (int(5))))))))) + 0))))) >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (_GLF_IDENTITY(int(5), (false ? _GLF_FUZZED(-96178) : int(5)))) ^ 0))); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(-4.3) : injectionSwitch.x)))))), bool(bvec3(_injected_loop_counter > int(_GLF_ZERO(_GLF_IDENTITY(0.0, clamp(_GLF_IDENTITY(0.0, (0.0) / cos(0.0)), 0.0, 0.0)), injectionSwitch.x)), true, _GLF_IDENTITY(false, (false) || false))))), ! (! (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), _GLF_IDENTITY((false ? _GLF_FUZZED(_injected_loop_counter) : int(_GLF_ZERO(0.0, injectionSwitch.x))), int(int(_GLF_IDENTITY((false ? _GLF_FUZZED(_injected_loop_counter) : int(_GLF_ZERO(0.0, injectionSwitch.x))), (false ? _GLF_FUZZED(_injected_loop_counter) : (false ? _GLF_FUZZED(_injected_loop_counter) : int(_GLF_ZERO(0.0, injectionSwitch.x))))))))), (_injected_loop_counter > _GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), float(mat3(_GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0, sin(0.0), 0.0, 1.0, 0.0, 0.0, length(vec3(0.0, 0.0, 0.0)))))), (false ? _GLF_FUZZED(_injected_loop_counter) : int(_GLF_ZERO(0.0, injectionSwitch.x))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))), false || (bool(bool(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(-4.3) : injectionSwitch.x)))))), bool(bvec3(_injected_loop_counter > int(_GLF_ZERO(_GLF_IDENTITY(0.0, clamp(_GLF_IDENTITY(0.0, (0.0) / cos(0.0)), 0.0, 0.0)), injectionSwitch.x)), true, _GLF_IDENTITY(false, (false) || false))))), ! (! (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), _GLF_IDENTITY((false ? _GLF_FUZZED(_injected_loop_counter) : int(_GLF_ZERO(0.0, injectionSwitch.x))), int(int(_GLF_IDENTITY((false ? _GLF_FUZZED(_injected_loop_counter) : int(_GLF_ZERO(0.0, injectionSwitch.x))), (false ? _GLF_FUZZED(_injected_loop_counter) : (false ? _GLF_FUZZED(_injected_loop_counter) : int(_GLF_ZERO(0.0, injectionSwitch.x))))))))), (_injected_loop_counter > _GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), float(mat3(_GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0, sin(0.0), 0.0, 1.0, 0.0, 0.0, length(vec3(0.0, 0.0, 0.0)))))), (false ? _GLF_FUZZED(_injected_loop_counter) : int(_GLF_ZERO(0.0, injectionSwitch.x))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))))); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          break;
         break;
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)) && true)))
          break;
        }
       if(_GLF_DEAD(false))
        break;
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_IDENTITY((injectionSwitch)[0], min((injectionSwitch)[0], (injectionSwitch)[0])), (injectionSwitch)[1]), vec2(_GLF_FUZZED(-6.8), _GLF_FUZZED(((103035u != _GLF_IDENTITY(42260u, (42260u) << 0u)) ? -4767.6866 : _GLF_IDENTITY(-0.7, (false ? _GLF_FUZZED(45.68) : -0.7))))), bvec2(false, _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, false, true)), bool(_GLF_IDENTITY(bvec3(bool(bvec3(false, false, true)), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec3(bvec4(bvec3(bool(bvec3(false, false, true)), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false)))))) || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))).x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))))
        {
        }
       else
        {
         return;
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
           continue;
          }
         if(_GLF_DEAD(false))
          continue;
        }
       if(_GLF_DEAD(false))
        break;
       do
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
          return;
         do
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              return;
             do
              {
               return;
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(false))
          continue;
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), injectionSwitch)).y))))
        {
         if(_GLF_DEAD(false))
          continue;
         do
          {
           return;
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(false))
            break;
           if(_GLF_DEAD(false))
            return;
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   do
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bool(_GLF_IDENTITY(true, bool(bvec4(_GLF_IDENTITY(true, (true) && true), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 & 16583)); _GLF_IDENTITY(_injected_loop_counter --, ~ (~ (_injected_loop_counter --))))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            continue;
           break;
          }
         if(_GLF_DEAD(false))
          break;
         if(subgroup_local_id + _GLF_IDENTITY(1, (_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, ~ (~ (1))), 1, _GLF_IDENTITY(1, (1) << 0)))) + 0) < subgroup_size)
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(injectionSwitch.x > injectionSwitch.y)))))))
            return;
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             buf[next_virtual_gid] = 2;
             if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
              continue;
            }
           else
            {
            }
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             subgroupAll(false);
            }
           if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_IDENTITY((injectionSwitch)[0], (_GLF_IDENTITY((injectionSwitch)[0], clamp((injectionSwitch)[0], (injectionSwitch)[0], (injectionSwitch)[0]))) / 1.0), _GLF_IDENTITY((injectionSwitch), vec2(mat4((injectionSwitch), length(vec4(0.0, 0.0, 0.0, 0.0)), 0.0, 0.0, 1.0, sin(0.0), sin(0.0), 0.0, 0.0, 0.0, 1.0, 0.0, cos(0.0), 0.0, 0.0)))[1]), vec2(_GLF_FUZZED(-9.6), _GLF_FUZZED(-1.0)), bvec2(false, false))).x > injectionSwitch.y), ! (! (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_IDENTITY((injectionSwitch)[0], (_GLF_IDENTITY((injectionSwitch)[0], clamp((injectionSwitch)[0], (injectionSwitch)[0], (injectionSwitch)[0]))) / 1.0), (injectionSwitch)[1]), vec2(_GLF_FUZZED(-9.6), _GLF_FUZZED(-1.0)), bvec2(false, false))).x > injectionSwitch.y), ((_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_IDENTITY((injectionSwitch)[0], (_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch)[0], clamp((injectionSwitch)[0], (injectionSwitch)[0], (injectionSwitch)[0])), clamp(_GLF_IDENTITY((injectionSwitch)[0], clamp((injectionSwitch)[0], (injectionSwitch)[0], (injectionSwitch)[0])), _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch)[0], clamp((injectionSwitch)[0], (injectionSwitch)[0], (injectionSwitch)[0])), mix(float(_GLF_IDENTITY((injectionSwitch)[0], clamp((injectionSwitch)[0], (injectionSwitch)[0], (injectionSwitch)[0]))), float(_GLF_FUZZED(154.336)), bool(false))), _GLF_IDENTITY((injectionSwitch)[0], clamp((injectionSwitch)[0], (injectionSwitch)[0], (injectionSwitch)[0]))))) / 1.0), (injectionSwitch)[1]), vec2(_GLF_FUZZED(-9.6), _GLF_FUZZED(-1.0)), bvec2(false, false))).x > injectionSwitch.y)) && true)))))))
            continue;
          }
         else
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  return;
                 break;
                }
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  return;
                 break;
                }
               continue;
              }
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               buf[next_virtual_gid] = 2;
               if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))).x > injectionSwitch.y))))
                {
                 if(_GLF_DEAD(false))
                  continue;
                 continue;
                }
              }
             else
              {
              }
            }
           subgroupAll(true);
           if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, true && (false))) && true), false, false, true)))))
            return;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
           if(_GLF_DEAD(false))
            break;
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(4620.0179)), float(injectionSwitch.x), bool(true)))) + 0.0) > injectionSwitch.y))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              continue;
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                return;
               return;
              }
             if(_GLF_DEAD(false))
              break;
             if(_GLF_DEAD(false))
              return;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              break;
            }
           else
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).y))))
              {
               for(int _injected_loop_counter = (0 | (-57032 & 0)); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
                {
                 return;
                 if(_GLF_DEAD(false))
                  continue;
                }
              }
             if(_GLF_DEAD(false))
              {
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                {
                 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(4), clamp(_GLF_IDENTITY(int(_GLF_IDENTITY(4, int(ivec3(4, 1, 0)))), min(int(4), int(4))), int(4), int(4))), _GLF_IDENTITY(int(4), (int(4)) >> 0)))); _injected_loop_counter --)
                  {
                   return;
                  }
                 if(_GLF_DEAD(false))
                  continue;
                }
              }
            }
          }
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          break;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             return;
            }
           else
            {
            }
          }
         if(_GLF_DEAD(false))
          break;
        }
      }
     else
      {
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_DEAD(false))
  return;
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
