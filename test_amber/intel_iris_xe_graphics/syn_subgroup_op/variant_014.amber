#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 0) uniform buf0 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true), true))))
  {
   do
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       barrier();
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   for(int _injected_loop_counter = 1; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != (0 << _GLF_IDENTITY(int(1), int(1)))), (_GLF_WRAPPED_LOOP(_injected_loop_counter != (0 << _GLF_IDENTITY(int(1), int(1))))) || false); _injected_loop_counter --)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       barrier();
      }
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 for(int _injected_loop_counter = (0 ^ ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5)))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       barrier();
      }
     else
      {
      }
    }
  }
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 << _GLF_IDENTITY(int(8), int(8)))); _injected_loop_counter --)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 uvec3 GLF_merged3_0_1_16_1_1_11_2_1_14next_virtual_gidvirtual_gidworkgroup_base;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     return;
     if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
      barrier();
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
    }
  }
 else
  {
  }
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(false))
  barrier();
 uint subgroup_size = 16;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
   do
    {
     if(_GLF_DEAD(false))
      return;
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      return;
    }
  }
 else
  {
  }
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))
        continue;
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(mat4x2(injectionSwitch, 0.0, 1.0, 1.0, exp(0.0), length(vec3(0.0, 0.0, 0.0)), 1.0))).y))))
      return;
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), false))))
        barrier();
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     barrier();
    }
   if(_GLF_DEAD(false))
    continue;
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    {
     do
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         return;
         if(_GLF_DEAD(false))
          return;
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), (_GLF_IDENTITY(false, ! (! (false)))) || false)));
     if(_GLF_DEAD(false))
      return;
    }
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       do
        {
         return;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, (0) | (0))); _injected_loop_counter --)
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 << _GLF_IDENTITY(int(8), int(8)))); _injected_loop_counter --)
      {
       return;
      }
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(false));
 for(int _injected_loop_counter = (int(_GLF_ONE(1.0, injectionSwitch.y)) & (0 | 1)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         return;
        }
       else
        {
        }
      }
    }
   else
    {
    }
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 do
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(-8.7)))))));
 do
  {
   if(_GLF_DEAD(false))
    {
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
   for(int _injected_loop_counter = _GLF_IDENTITY(1, _GLF_IDENTITY(~ (~ (1)), (~ (~ (1))) | (~ (~ (_GLF_IDENTITY(1, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_IDENTITY(_GLF_FUZZED((mat4x2(-6.1, 339.061, 6765.7107, 2.0, 2.1, 3.4, 314.242, -1.1) , -75412)), 0 | (_GLF_IDENTITY(_GLF_FUZZED((mat4x2(-6.1, 339.061, 6765.7107, 2.0, 2.1, 3.4, 314.242, -1.1) , -75412)), (_GLF_IDENTITY(_GLF_FUZZED((mat4x2(-6.1, 339.061, 6765.7107, 2.0, 2.1, 3.4, 314.242, -1.1) , -75412)), int(ivec2(_GLF_FUZZED((mat4x2(-6.1, 339.061, 6765.7107, 2.0, 2.1, 3.4, 314.242, -1.1) , -75412)), 0)))) << 0))) : 1))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
        }
       else
        {
         if(_GLF_DEAD(false))
          break;
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)).y) || false)))))
      break;
     if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), false))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
         barrier();
        }
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         return;
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        continue;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), (bool(bool(false))) || false))))
        {
         if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false)))))
          continue;
         barrier();
        }
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (false)))))
            {
             if(_GLF_DEAD(false))
              break;
            }
           else
            {
             barrier();
            }
          }
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        break;
       break;
      }
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     else
      {
      }
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(mat2x3(injectionSwitch.x, 1.0, 1.0, 0.0, 1.0, determinant(mat4(_GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, max(1.0, 1.0)), 1.0, 1.0)), 1.0, 1.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(283.349) : _GLF_IDENTITY(_GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(radians(-3.7)))), max(0.0, 0.0)))), 1.0, 0.0, 0.0, 1.0, 0.0, log(_GLF_IDENTITY(1.0, mix(_GLF_IDENTITY(float(_GLF_FUZZED(850.197)), _GLF_IDENTITY(float(vec4(_GLF_IDENTITY(float(_GLF_FUZZED(850.197)), (false ? _GLF_FUZZED(-7243.5676) : float(_GLF_FUZZED(850.197)))), round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), cos(sqrt(_GLF_IDENTITY(_GLF_IDENTITY(0.0, max(0.0, 0.0)), float(_GLF_IDENTITY(mat3(_GLF_IDENTITY(_GLF_IDENTITY(0.0, max(0.0, 0.0)), (_GLF_IDENTITY(0.0, max(0.0, 0.0))) - 0.0), 1.0, 0.0, sqrt(1.0), 0.0, 1.0, 0.0, 0.0, 1.0), (false ? _GLF_FUZZED(mat3(-408.891, -421.114, 5751.8022, 5.6, -2.0, -742.896, 1764.6052, -6627.0528, -2.7)) : mat3(_GLF_IDENTITY(_GLF_IDENTITY(0.0, max(0.0, 0.0)), (_GLF_IDENTITY(0.0, max(0.0, 0.0))) - 0.0), 1.0, 0.0, sqrt(1.0), 0.0, 1.0, 0.0, 0.0, 1.0))))))), 0.0)), float(mat3(float(vec4(_GLF_IDENTITY(float(_GLF_FUZZED(850.197)), (false ? _GLF_FUZZED(-7243.5676) : float(_GLF_FUZZED(850.197)))), round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), cos(sqrt(0.0)), _GLF_IDENTITY(0.0, 1.0 * (0.0)))), 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0)))), _GLF_IDENTITY(float(_GLF_IDENTITY(_GLF_IDENTITY(1.0, (true ? _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(277.353) : 1.0)) : _GLF_FUZZED(-3945.4938))), (_GLF_IDENTITY(1.0, (true ? _GLF_IDENTITY(1.0, _GLF_IDENTITY((_GLF_IDENTITY(false ? _GLF_FUZZED(_GLF_IDENTITY(277.353, min(277.353, 277.353))) : 1.0, (_GLF_IDENTITY(false ? _GLF_FUZZED(_GLF_IDENTITY(277.353, min(277.353, 277.353))) : 1.0, max(_GLF_IDENTITY(false ? _GLF_FUZZED(_GLF_IDENTITY(277.353, min(_GLF_IDENTITY(277.353, 1.0 * (277.353)), 277.353))) : 1.0, mix(float(_GLF_IDENTITY(false, false || (false)) ? _GLF_FUZZED(_GLF_IDENTITY(_GLF_IDENTITY(277.353, min(277.353, 277.353)), mix(float(_GLF_IDENTITY(277.353, min(277.353, 277.353))), float(_GLF_FUZZED(16.86)), bool(false)))) : 1.0), _GLF_IDENTITY(float(_GLF_IDENTITY(_GLF_FUZZED(9.7), (_GLF_IDENTITY(_GLF_FUZZED(9.7), mix(float(_GLF_FUZZED(5.0)), float(_GLF_IDENTITY(_GLF_FUZZED(9.7), mix(float(_GLF_FUZZED(9.7)), float(_GLF_FUZZED(-1.1)), bool(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) && true))))))), bool(true)))) - 0.0)), mix(float(float(_GLF_IDENTITY(_GLF_FUZZED(9.7), (_GLF_IDENTITY(_GLF_FUZZED(9.7), mix(float(_GLF_FUZZED(5.0)), float(_GLF_IDENTITY(_GLF_FUZZED(9.7), mix(float(_GLF_FUZZED(9.7)), float(_GLF_FUZZED(-1.1)), bool(false)))), bool(true)))) - 0.0))), float(_GLF_FUZZED(vec3(1.0, -8954.5795, 942.896).g)), bool(false))), bool(false))), _GLF_IDENTITY(false ? _GLF_FUZZED(_GLF_IDENTITY(277.353, min(277.353, 277.353))) : 1.0, max(false ? _GLF_FUZZED(_GLF_IDENTITY(277.353, min(277.353, 277.353))) : 1.0, _GLF_IDENTITY(false, _GLF_IDENTITY((false), true && ((false))) && true) ? _GLF_FUZZED(_GLF_IDENTITY(277.353, min(277.353, 277.353))) : 1.0))))) / 1.0)), (_GLF_IDENTITY((_GLF_IDENTITY(false ? _GLF_FUZZED(_GLF_IDENTITY(277.353, min(277.353, 277.353))) : 1.0, (_GLF_IDENTITY(false ? _GLF_FUZZED(_GLF_IDENTITY(277.353, min(277.353, 277.353))) : 1.0, max(_GLF_IDENTITY(false ? _GLF_FUZZED(_GLF_IDENTITY(277.353, min(_GLF_IDENTITY(277.353, 1.0 * (277.353)), 277.353))) : 1.0, mix(float(false ? _GLF_FUZZED(_GLF_IDENTITY(_GLF_IDENTITY(277.353, min(277.353, 277.353)), mix(float(_GLF_IDENTITY(277.353, min(277.353, 277.353))), float(_GLF_FUZZED(16.86)), bool(false)))) : 1.0), _GLF_IDENTITY(float(_GLF_IDENTITY(_GLF_FUZZED(9.7), (_GLF_IDENTITY(_GLF_FUZZED(9.7), mix(float(_GLF_FUZZED(5.0)), float(_GLF_IDENTITY(_GLF_FUZZED(9.7), mix(float(_GLF_FUZZED(9.7)), float(_GLF_FUZZED(-1.1)), bool(false)))), bool(true)))) - 0.0)), mix(float(float(_GLF_IDENTITY(_GLF_FUZZED(9.7), (_GLF_IDENTITY(_GLF_FUZZED(9.7), mix(float(_GLF_FUZZED(5.0)), float(_GLF_IDENTITY(_GLF_FUZZED(9.7), mix(float(_GLF_FUZZED(9.7)), float(_GLF_FUZZED(-1.1)), bool(false)))), bool(true)))) - 0.0))), float(_GLF_FUZZED(vec3(1.0, -8954.5795, 942.896).g)), bool(false))), bool(false))), _GLF_IDENTITY(false ? _GLF_FUZZED(_GLF_IDENTITY(277.353, min(277.353, 277.353))) : 1.0, max(false ? _GLF_FUZZED(_GLF_IDENTITY(277.353, min(277.353, 277.353))) : 1.0, _GLF_IDENTITY(false, (false) && true) ? _GLF_FUZZED(_GLF_IDENTITY(277.353, min(277.353, 277.353))) : 1.0))))) / 1.0)), mix(float(_GLF_FUZZED(-800.056)), _GLF_IDENTITY(float((_GLF_IDENTITY(false ? _GLF_FUZZED(_GLF_IDENTITY(277.353, min(277.353, 277.353))) : _GLF_IDENTITY(1.0, mix(float(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-436.841)))), float(_GLF_FUZZED((2.1 - -1564.7646))), bool(false))), (_GLF_IDENTITY(false ? _GLF_FUZZED(_GLF_IDENTITY(277.353, min(277.353, 277.353))) : 1.0, max(_GLF_IDENTITY(false ? _GLF_FUZZED(_GLF_IDENTITY(277.353, min(_GLF_IDENTITY(277.353, 1.0 * (277.353)), 277.353))) : 1.0, mix(float(false ? _GLF_FUZZED(_GLF_IDENTITY(_GLF_IDENTITY(277.353, min(277.353, 277.353)), mix(float(_GLF_IDENTITY(277.353, min(277.353, 277.353))), float(_GLF_FUZZED(16.86)), bool(false)))) : 1.0), _GLF_IDENTITY(float(_GLF_IDENTITY(_GLF_FUZZED(9.7), (_GLF_IDENTITY(_GLF_FUZZED(9.7), mix(float(_GLF_FUZZED(5.0)), float(_GLF_IDENTITY(_GLF_FUZZED(9.7), mix(float(_GLF_FUZZED(9.7)), float(_GLF_FUZZED(-1.1)), bool(false)))), bool(true)))) - 0.0)), mix(float(float(_GLF_IDENTITY(_GLF_FUZZED(9.7), (_GLF_IDENTITY(_GLF_FUZZED(9.7), mix(float(_GLF_FUZZED(5.0)), float(_GLF_IDENTITY(_GLF_FUZZED(9.7), mix(float(_GLF_FUZZED(9.7)), float(_GLF_FUZZED(-1.1)), bool(_GLF_IDENTITY(false, bool(bool(false))))))), bool(true)))) - 0.0))), float(_GLF_FUZZED(vec3(1.0, -8954.5795, 942.896).g)), bool(false))), bool(false))), _GLF_IDENTITY(false ? _GLF_FUZZED(_GLF_IDENTITY(277.353, min(277.353, 277.353))) : 1.0, max(false ? _GLF_FUZZED(_GLF_IDENTITY(277.353, min(277.353, 277.353))) : 1.0, _GLF_IDENTITY(false, (false) && true) ? _GLF_FUZZED(_GLF_IDENTITY(277.353, min(277.353, 277.353))) : 1.0))))) / 1.0))), (_GLF_IDENTITY(float((_GLF_IDENTITY(false ? _GLF_FUZZED(_GLF_IDENTITY(277.353, min(277.353, 277.353))) : _GLF_IDENTITY(1.0, mix(float(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-436.841)))), float(_GLF_FUZZED((2.1 - -1564.7646))), bool(false))), (_GLF_IDENTITY(false ? _GLF_FUZZED(_GLF_IDENTITY(277.353, min(277.353, 277.353))) : 1.0, max(_GLF_IDENTITY(false ? _GLF_FUZZED(_GLF_IDENTITY(277.353, min(_GLF_IDENTITY(277.353, 1.0 * (277.353)), 277.353))) : 1.0, mix(float(false ? _GLF_FUZZED(_GLF_IDENTITY(_GLF_IDENTITY(277.353, min(277.353, 277.353)), mix(float(_GLF_IDENTITY(277.353, min(277.353, 277.353))), float(_GLF_FUZZED(16.86)), bool(false)))) : 1.0), _GLF_IDENTITY(float(_GLF_IDENTITY(_GLF_FUZZED(9.7), (_GLF_IDENTITY(_GLF_FUZZED(9.7), mix(float(_GLF_FUZZED(5.0)), float(_GLF_IDENTITY(_GLF_FUZZED(9.7), mix(float(_GLF_FUZZED(9.7)), float(_GLF_FUZZED(-1.1)), bool(false)))), bool(true)))) - 0.0)), mix(float(float(_GLF_IDENTITY(_GLF_FUZZED(9.7), (_GLF_IDENTITY(_GLF_FUZZED(9.7), mix(float(_GLF_FUZZED(5.0)), float(_GLF_IDENTITY(_GLF_FUZZED(9.7), mix(float(_GLF_FUZZED(9.7)), float(_GLF_FUZZED(-1.1)), bool(_GLF_IDENTITY(false, bool(bool(false))))))), bool(true)))) - 0.0))), float(_GLF_FUZZED(vec3(1.0, -8954.5795, 942.896).g)), bool(false))), bool(false))), _GLF_IDENTITY(false ? _GLF_FUZZED(_GLF_IDENTITY(277.353, min(277.353, 277.353))) : 1.0, max(false ? _GLF_FUZZED(_GLF_IDENTITY(277.353, min(277.353, 277.353))) : 1.0, _GLF_IDENTITY(false, (false) && true) ? _GLF_FUZZED(_GLF_IDENTITY(277.353, min(277.353, 277.353))) : 1.0))))) / 1.0))), mix(float(_GLF_IDENTITY(float((_GLF_IDENTITY(false ? _GLF_FUZZED(_GLF_IDENTITY(277.353, min(277.353, 277.353))) : _GLF_IDENTITY(1.0, mix(float(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-436.841)))), float(_GLF_FUZZED((2.1 - -1564.7646))), bool(false))), (_GLF_IDENTITY(false ? _GLF_FUZZED(_GLF_IDENTITY(277.353, min(277.353, 277.353))) : 1.0, max(_GLF_IDENTITY(false ? _GLF_FUZZED(_GLF_IDENTITY(277.353, min(_GLF_IDENTITY(277.353, 1.0 * (277.353)), 277.353))) : 1.0, mix(float(false ? _GLF_FUZZED(_GLF_IDENTITY(_GLF_IDENTITY(277.353, min(277.353, 277.353)), mix(float(_GLF_IDENTITY(277.353, min(277.353, 277.353))), float(_GLF_FUZZED(16.86)), bool(false)))) : 1.0), _GLF_IDENTITY(float(_GLF_IDENTITY(_GLF_FUZZED(9.7), (_GLF_IDENTITY(_GLF_FUZZED(9.7), mix(float(_GLF_FUZZED(5.0)), float(_GLF_IDENTITY(_GLF_FUZZED(9.7), mix(float(_GLF_FUZZED(9.7)), float(_GLF_FUZZED(-1.1)), bool(false)))), bool(true)))) - 0.0)), mix(float(float(_GLF_IDENTITY(_GLF_FUZZED(9.7), (_GLF_IDENTITY(_GLF_FUZZED(9.7), mix(float(_GLF_FUZZED(5.0)), float(_GLF_IDENTITY(_GLF_FUZZED(9.7), mix(float(_GLF_FUZZED(9.7)), float(_GLF_FUZZED(-1.1)), bool(_GLF_IDENTITY(false, bool(bool(false))))))), bool(true)))) - 0.0))), float(_GLF_FUZZED(vec3(1.0, -8954.5795, 942.896).g)), bool(false))), bool(false))), _GLF_IDENTITY(false ? _GLF_FUZZED(_GLF_IDENTITY(277.353, min(277.353, 277.353))) : 1.0, max(false ? _GLF_FUZZED(_GLF_IDENTITY(277.353, min(277.353, 277.353))) : 1.0, _GLF_IDENTITY(false, (false) && true) ? _GLF_FUZZED(_GLF_IDENTITY(277.353, min(277.353, 277.353))) : 1.0))))) / 1.0))), max(float((_GLF_IDENTITY(false ? _GLF_FUZZED(_GLF_IDENTITY(277.353, min(277.353, 277.353))) : _GLF_IDENTITY(1.0, mix(float(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-436.841)))), float(_GLF_FUZZED((2.1 - -1564.7646))), bool(false))), (_GLF_IDENTITY(false ? _GLF_FUZZED(_GLF_IDENTITY(277.353, min(277.353, 277.353))) : 1.0, max(_GLF_IDENTITY(false ? _GLF_FUZZED(_GLF_IDENTITY(277.353, min(_GLF_IDENTITY(277.353, 1.0 * (277.353)), 277.353))) : 1.0, mix(float(false ? _GLF_FUZZED(_GLF_IDENTITY(_GLF_IDENTITY(277.353, min(277.353, 277.353)), mix(float(_GLF_IDENTITY(277.353, min(277.353, 277.353))), float(_GLF_FUZZED(16.86)), bool(false)))) : 1.0), _GLF_IDENTITY(float(_GLF_IDENTITY(_GLF_FUZZED(9.7), (_GLF_IDENTITY(_GLF_FUZZED(9.7), mix(float(_GLF_FUZZED(5.0)), float(_GLF_IDENTITY(_GLF_FUZZED(9.7), mix(float(_GLF_FUZZED(9.7)), float(_GLF_FUZZED(-1.1)), bool(false)))), bool(true)))) - 0.0)), mix(float(float(_GLF_IDENTITY(_GLF_FUZZED(9.7), (_GLF_IDENTITY(_GLF_FUZZED(9.7), mix(float(_GLF_FUZZED(5.0)), float(_GLF_IDENTITY(_GLF_FUZZED(9.7), mix(float(_GLF_FUZZED(9.7)), float(_GLF_FUZZED(-1.1)), bool(_GLF_IDENTITY(false, bool(bool(false))))))), bool(true)))) - 0.0))), float(_GLF_FUZZED(vec3(1.0, -8954.5795, 942.896).g)), bool(false))), bool(false))), _GLF_IDENTITY(false ? _GLF_FUZZED(_GLF_IDENTITY(277.353, min(277.353, 277.353))) : 1.0, max(false ? _GLF_FUZZED(_GLF_IDENTITY(277.353, min(277.353, 277.353))) : 1.0, _GLF_IDENTITY(false, (false) && true) ? _GLF_FUZZED(_GLF_IDENTITY(277.353, min(277.353, 277.353))) : 1.0))))) / 1.0))), float((_GLF_IDENTITY(false ? _GLF_FUZZED(_GLF_IDENTITY(277.353, min(277.353, 277.353))) : _GLF_IDENTITY(1.0, mix(float(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-436.841)))), float(_GLF_FUZZED((2.1 - -1564.7646))), bool(false))), (_GLF_IDENTITY(false ? _GLF_FUZZED(_GLF_IDENTITY(277.353, min(277.353, 277.353))) : 1.0, max(_GLF_IDENTITY(false ? _GLF_FUZZED(_GLF_IDENTITY(277.353, min(_GLF_IDENTITY(277.353, 1.0 * (277.353)), 277.353))) : 1.0, mix(float(false ? _GLF_FUZZED(_GLF_IDENTITY(_GLF_IDENTITY(277.353, min(277.353, 277.353)), mix(float(_GLF_IDENTITY(277.353, min(277.353, 277.353))), float(_GLF_FUZZED(16.86)), bool(false)))) : 1.0), _GLF_IDENTITY(float(_GLF_IDENTITY(_GLF_FUZZED(9.7), (_GLF_IDENTITY(_GLF_FUZZED(9.7), mix(float(_GLF_FUZZED(5.0)), float(_GLF_IDENTITY(_GLF_FUZZED(9.7), mix(float(_GLF_FUZZED(9.7)), float(_GLF_FUZZED(-1.1)), bool(false)))), bool(true)))) - 0.0)), mix(float(float(_GLF_IDENTITY(_GLF_FUZZED(9.7), (_GLF_IDENTITY(_GLF_FUZZED(9.7), mix(float(_GLF_FUZZED(5.0)), float(_GLF_IDENTITY(_GLF_FUZZED(9.7), mix(float(_GLF_FUZZED(9.7)), float(_GLF_FUZZED(-1.1)), bool(_GLF_IDENTITY(false, bool(bool(false))))))), bool(true)))) - 0.0))), float(_GLF_FUZZED(vec3(1.0, -8954.5795, 942.896).g)), bool(false))), bool(false))), _GLF_IDENTITY(false ? _GLF_FUZZED(_GLF_IDENTITY(277.353, min(277.353, 277.353))) : 1.0, max(false ? _GLF_FUZZED(_GLF_IDENTITY(277.353, min(277.353, 277.353))) : 1.0, _GLF_IDENTITY(false, (false) && true) ? _GLF_FUZZED(_GLF_IDENTITY(277.353, min(277.353, 277.353))) : 1.0))))) / 1.0)))))), float(_GLF_FUZZED(-3019.2749)), bool(false)))) * 1.0), bool(true)))) / 1.0)) : _GLF_FUZZED(-3945.4938)))) - 0.0)), clamp(float(_GLF_IDENTITY(_GLF_IDENTITY(1.0, (true ? _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(277.353) : 1.0)) : _GLF_FUZZED(-3945.4938))), (_GLF_IDENTITY(1.0, (true ? _GLF_IDENTITY(1.0, _GLF_IDENTITY((_GLF_IDENTITY(false ? _GLF_FUZZED(_GLF_IDENTITY(277.353, min(277.353, 277.353))) : 1.0, (_GLF_IDENTITY(false ? _GLF_FUZZED(_GLF_IDENTITY(277.353, min(277.353, 277.353))) : 1.0, max(_GLF_IDENTITY(false ? _GLF_FUZZED(_GLF_IDENTITY(277.353, min(_GLF_IDENTITY(277.353, 1.0 * (277.353)), 277.353))) : 1.0, mix(float(_GLF_IDENTITY(false, false || (false)) ? _GLF_FUZZED(_GLF_IDENTITY(_GLF_IDENTITY(277.353, min(277.353, 277.353)), mix(float(_GLF_IDENTITY(277.353, min(277.353, 277.353))), float(_GLF_FUZZED(16.86)), bool(false)))) : 1.0), _GLF_IDENTITY(float(_GLF_IDENTITY(_GLF_FUZZED(9.7), (_GLF_IDENTITY(_GLF_FUZZED(9.7), mix(float(_GLF_FUZZED(5.0)), float(_GLF_IDENTITY(_GLF_FUZZED(9.7), mix(float(_GLF_FUZZED(9.7)), float(_GLF_FUZZED(-1.1)), bool(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) && true))))))), bool(true)))) - 0.0)), mix(float(float(_GLF_IDENTITY(_GLF_FUZZED(9.7), (_GLF_IDENTITY(_GLF_FUZZED(9.7), mix(float(_GLF_FUZZED(5.0)), float(_GLF_IDENTITY(_GLF_FUZZED(9.7), mix(float(_GLF_FUZZED(9.7)), float(_GLF_FUZZED(-1.1)), bool(false)))), bool(true)))) - 0.0))), float(_GLF_FUZZED(vec3(1.0, -8954.5795, 942.896).g)), bool(false))), bool(false))), _GLF_IDENTITY(false ? _GLF_FUZZED(_GLF_IDENTITY(277.353, min(277.353, 277.353))) : 1.0, max(false ? _GLF_FUZZED(_GLF_IDENTITY(277.353, min(277.353, 277.353))) : 1.0, _GLF_IDENTITY(false, _GLF_IDENTITY((false), true && ((false))) && true) ? _GLF_FUZZED(_GLF_IDENTITY(277.353, min(277.353, 277.353))) : 1.0))))) / 1.0)), (_GLF_IDENTITY((_GLF_IDENTITY(false ? _GLF_FUZZED(_GLF_IDENTITY(277.353, min(277.353, 277.353))) : 1.0, (_GLF_IDENTITY(false ? _GLF_FUZZED(_GLF_IDENTITY(277.353, min(277.353, 277.353))) : 1.0, max(_GLF_IDENTITY(false ? _GLF_FUZZED(_GLF_IDENTITY(277.353, min(_GLF_IDENTITY(277.353, 1.0 * (277.353)), 277.353))) : 1.0, mix(float(false ? _GLF_FUZZED(_GLF_IDENTITY(_GLF_IDENTITY(277.353, min(277.353, 277.353)), mix(float(_GLF_IDENTITY(277.353, min(277.353, 277.353))), float(_GLF_FUZZED(16.86)), bool(false)))) : 1.0), _GLF_IDENTITY(float(_GLF_IDENTITY(_GLF_FUZZED(9.7), (_GLF_IDENTITY(_GLF_FUZZED(9.7), mix(float(_GLF_FUZZED(5.0)), float(_GLF_IDENTITY(_GLF_FUZZED(9.7), mix(float(_GLF_FUZZED(9.7)), float(_GLF_FUZZED(-1.1)), bool(false)))), bool(true)))) - 0.0)), mix(float(float(_GLF_IDENTITY(_GLF_FUZZED(9.7), (_GLF_IDENTITY(_GLF_FUZZED(9.7), mix(float(_GLF_FUZZED(5.0)), float(_GLF_IDENTITY(_GLF_FUZZED(9.7), mix(float(_GLF_FUZZED(9.7)), float(_GLF_FUZZED(-1.1)), bool(false)))), bool(true)))) - 0.0))), float(_GLF_FUZZED(vec3(1.0, -8954.5795, 942.896).g)), bool(false))), bool(false))), _GLF_IDENTITY(false ? _GLF_FUZZED(_GLF_IDENTITY(277.353, min(277.353, 277.353))) : 1.0, max(false ? _GLF_FUZZED(_GLF_IDENTITY(277.353, min(277.353, 277.353))) : 1.0, _GLF_IDENTITY(false, (false) && true) ? _GLF_FUZZED(_GLF_IDENTITY(277.353, min(277.353, 277.353))) : 1.0))))) / 1.0)), mix(float(_GLF_FUZZED(-800.056)), _GLF_IDENTITY(float((_GLF_IDENTITY(false ? _GLF_FUZZED(_GLF_IDENTITY(277.353, min(277.353, 277.353))) : _GLF_IDENTITY(1.0, mix(float(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-436.841)))), float(_GLF_FUZZED((2.1 - -1564.7646))), bool(false))), (_GLF_IDENTITY(false ? _GLF_FUZZED(_GLF_IDENTITY(277.353, min(277.353, 277.353))) : 1.0, max(_GLF_IDENTITY(false ? _GLF_FUZZED(_GLF_IDENTITY(277.353, min(_GLF_IDENTITY(277.353, 1.0 * (277.353)), 277.353))) : 1.0, mix(float(false ? _GLF_FUZZED(_GLF_IDENTITY(_GLF_IDENTITY(277.353, min(277.353, 277.353)), mix(float(_GLF_IDENTITY(277.353, min(277.353, 277.353))), float(_GLF_FUZZED(16.86)), bool(false)))) : 1.0), _GLF_IDENTITY(float(_GLF_IDENTITY(_GLF_FUZZED(9.7), (_GLF_IDENTITY(_GLF_FUZZED(9.7), mix(float(_GLF_FUZZED(5.0)), float(_GLF_IDENTITY(_GLF_FUZZED(9.7), mix(float(_GLF_FUZZED(9.7)), float(_GLF_FUZZED(-1.1)), bool(false)))), bool(true)))) - 0.0)), mix(float(float(_GLF_IDENTITY(_GLF_FUZZED(9.7), (_GLF_IDENTITY(_GLF_FUZZED(9.7), mix(float(_GLF_FUZZED(5.0)), float(_GLF_IDENTITY(_GLF_FUZZED(9.7), mix(float(_GLF_FUZZED(9.7)), float(_GLF_FUZZED(-1.1)), bool(_GLF_IDENTITY(false, bool(bool(false))))))), bool(true)))) - 0.0))), float(_GLF_FUZZED(vec3(1.0, -8954.5795, 942.896).g)), bool(false))), bool(false))), _GLF_IDENTITY(false ? _GLF_FUZZED(_GLF_IDENTITY(277.353, min(277.353, 277.353))) : 1.0, max(false ? _GLF_FUZZED(_GLF_IDENTITY(277.353, min(277.353, 277.353))) : 1.0, _GLF_IDENTITY(false, (false) && true) ? _GLF_FUZZED(_GLF_IDENTITY(277.353, min(277.353, 277.353))) : 1.0))))) / 1.0))), (_GLF_IDENTITY(float((_GLF_IDENTITY(false ? _GLF_FUZZED(_GLF_IDENTITY(277.353, min(277.353, 277.353))) : _GLF_IDENTITY(1.0, mix(float(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-436.841)))), float(_GLF_FUZZED((2.1 - -1564.7646))), bool(false))), (_GLF_IDENTITY(false ? _GLF_FUZZED(_GLF_IDENTITY(277.353, min(277.353, 277.353))) : 1.0, max(_GLF_IDENTITY(false ? _GLF_FUZZED(_GLF_IDENTITY(277.353, min(_GLF_IDENTITY(277.353, 1.0 * (277.353)), 277.353))) : 1.0, mix(float(false ? _GLF_FUZZED(_GLF_IDENTITY(_GLF_IDENTITY(277.353, min(277.353, 277.353)), mix(float(_GLF_IDENTITY(277.353, min(277.353, 277.353))), float(_GLF_FUZZED(16.86)), bool(false)))) : 1.0), _GLF_IDENTITY(float(_GLF_IDENTITY(_GLF_FUZZED(9.7), (_GLF_IDENTITY(_GLF_FUZZED(9.7), mix(float(_GLF_FUZZED(5.0)), float(_GLF_IDENTITY(_GLF_FUZZED(9.7), mix(float(_GLF_FUZZED(9.7)), float(_GLF_FUZZED(-1.1)), bool(false)))), bool(true)))) - 0.0)), mix(float(float(_GLF_IDENTITY(_GLF_FUZZED(9.7), (_GLF_IDENTITY(_GLF_FUZZED(9.7), mix(float(_GLF_FUZZED(5.0)), float(_GLF_IDENTITY(_GLF_FUZZED(9.7), mix(float(_GLF_FUZZED(9.7)), float(_GLF_FUZZED(-1.1)), bool(_GLF_IDENTITY(false, bool(bool(false))))))), bool(true)))) - 0.0))), float(_GLF_FUZZED(vec3(1.0, -8954.5795, 942.896).g)), bool(false))), bool(false))), _GLF_IDENTITY(false ? _GLF_FUZZED(_GLF_IDENTITY(277.353, min(277.353, 277.353))) : 1.0, max(false ? _GLF_FUZZED(_GLF_IDENTITY(277.353, min(277.353, 277.353))) : 1.0, _GLF_IDENTITY(false, (false) && true) ? _GLF_FUZZED(_GLF_IDENTITY(277.353, min(277.353, 277.353))) : 1.0))))) / 1.0))), mix(float(_GLF_IDENTITY(float((_GLF_IDENTITY(false ? _GLF_FUZZED(_GLF_IDENTITY(277.353, min(277.353, 277.353))) : _GLF_IDENTITY(1.0, mix(float(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-436.841)))), float(_GLF_FUZZED((2.1 - -1564.7646))), bool(false))), (_GLF_IDENTITY(false ? _GLF_FUZZED(_GLF_IDENTITY(277.353, min(277.353, 277.353))) : 1.0, max(_GLF_IDENTITY(false ? _GLF_FUZZED(_GLF_IDENTITY(277.353, min(_GLF_IDENTITY(277.353, 1.0 * (277.353)), 277.353))) : 1.0, mix(float(false ? _GLF_FUZZED(_GLF_IDENTITY(_GLF_IDENTITY(277.353, min(277.353, 277.353)), mix(float(_GLF_IDENTITY(277.353, min(277.353, 277.353))), float(_GLF_FUZZED(16.86)), bool(false)))) : 1.0), _GLF_IDENTITY(float(_GLF_IDENTITY(_GLF_FUZZED(9.7), (_GLF_IDENTITY(_GLF_FUZZED(9.7), mix(float(_GLF_FUZZED(5.0)), float(_GLF_IDENTITY(_GLF_FUZZED(9.7), mix(float(_GLF_FUZZED(9.7)), float(_GLF_FUZZED(-1.1)), bool(false)))), bool(true)))) - 0.0)), mix(float(float(_GLF_IDENTITY(_GLF_FUZZED(9.7), (_GLF_IDENTITY(_GLF_FUZZED(9.7), mix(float(_GLF_FUZZED(5.0)), float(_GLF_IDENTITY(_GLF_FUZZED(9.7), mix(float(_GLF_FUZZED(9.7)), float(_GLF_FUZZED(-1.1)), bool(_GLF_IDENTITY(false, bool(bool(false))))))), bool(true)))) - 0.0))), float(_GLF_FUZZED(vec3(1.0, -8954.5795, 942.896).g)), bool(false))), bool(false))), _GLF_IDENTITY(false ? _GLF_FUZZED(_GLF_IDENTITY(277.353, min(277.353, 277.353))) : 1.0, max(false ? _GLF_FUZZED(_GLF_IDENTITY(277.353, min(277.353, 277.353))) : 1.0, _GLF_IDENTITY(false, (false) && true) ? _GLF_FUZZED(_GLF_IDENTITY(277.353, min(277.353, 277.353))) : 1.0))))) / 1.0))), max(float((_GLF_IDENTITY(false ? _GLF_FUZZED(_GLF_IDENTITY(277.353, min(277.353, 277.353))) : _GLF_IDENTITY(1.0, mix(float(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-436.841)))), float(_GLF_FUZZED((2.1 - -1564.7646))), bool(false))), (_GLF_IDENTITY(false ? _GLF_FUZZED(_GLF_IDENTITY(277.353, min(277.353, 277.353))) : 1.0, max(_GLF_IDENTITY(false ? _GLF_FUZZED(_GLF_IDENTITY(277.353, min(_GLF_IDENTITY(277.353, 1.0 * (277.353)), 277.353))) : 1.0, mix(float(false ? _GLF_FUZZED(_GLF_IDENTITY(_GLF_IDENTITY(277.353, min(277.353, 277.353)), mix(float(_GLF_IDENTITY(277.353, min(277.353, 277.353))), float(_GLF_FUZZED(16.86)), bool(false)))) : 1.0), _GLF_IDENTITY(float(_GLF_IDENTITY(_GLF_FUZZED(9.7), (_GLF_IDENTITY(_GLF_FUZZED(9.7), mix(float(_GLF_FUZZED(5.0)), float(_GLF_IDENTITY(_GLF_FUZZED(9.7), mix(float(_GLF_FUZZED(9.7)), float(_GLF_FUZZED(-1.1)), bool(false)))), bool(true)))) - 0.0)), mix(float(float(_GLF_IDENTITY(_GLF_FUZZED(9.7), (_GLF_IDENTITY(_GLF_FUZZED(9.7), mix(float(_GLF_FUZZED(5.0)), float(_GLF_IDENTITY(_GLF_FUZZED(9.7), mix(float(_GLF_FUZZED(9.7)), float(_GLF_FUZZED(-1.1)), bool(_GLF_IDENTITY(false, bool(bool(false))))))), bool(true)))) - 0.0))), float(_GLF_FUZZED(vec3(1.0, -8954.5795, 942.896).g)), bool(false))), bool(false))), _GLF_IDENTITY(false ? _GLF_FUZZED(_GLF_IDENTITY(277.353, min(277.353, 277.353))) : 1.0, max(false ? _GLF_FUZZED(_GLF_IDENTITY(277.353, min(277.353, 277.353))) : 1.0, _GLF_IDENTITY(false, (false) && true) ? _GLF_FUZZED(_GLF_IDENTITY(277.353, min(277.353, 277.353))) : 1.0))))) / 1.0))), float((_GLF_IDENTITY(false ? _GLF_FUZZED(_GLF_IDENTITY(277.353, min(277.353, 277.353))) : _GLF_IDENTITY(1.0, mix(float(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-436.841)))), float(_GLF_FUZZED((2.1 - -1564.7646))), bool(false))), (_GLF_IDENTITY(false ? _GLF_FUZZED(_GLF_IDENTITY(277.353, min(277.353, 277.353))) : 1.0, max(_GLF_IDENTITY(false ? _GLF_FUZZED(_GLF_IDENTITY(277.353, min(_GLF_IDENTITY(277.353, 1.0 * (277.353)), 277.353))) : 1.0, mix(float(false ? _GLF_FUZZED(_GLF_IDENTITY(_GLF_IDENTITY(277.353, min(277.353, 277.353)), mix(float(_GLF_IDENTITY(277.353, min(277.353, 277.353))), float(_GLF_FUZZED(16.86)), bool(false)))) : 1.0), _GLF_IDENTITY(float(_GLF_IDENTITY(_GLF_FUZZED(9.7), (_GLF_IDENTITY(_GLF_FUZZED(9.7), mix(float(_GLF_FUZZED(5.0)), float(_GLF_IDENTITY(_GLF_FUZZED(9.7), mix(float(_GLF_FUZZED(9.7)), float(_GLF_FUZZED(-1.1)), bool(false)))), bool(true)))) - 0.0)), mix(float(float(_GLF_IDENTITY(_GLF_FUZZED(9.7), (_GLF_IDENTITY(_GLF_FUZZED(9.7), mix(float(_GLF_FUZZED(5.0)), float(_GLF_IDENTITY(_GLF_FUZZED(9.7), mix(float(_GLF_FUZZED(9.7)), float(_GLF_FUZZED(-1.1)), bool(_GLF_IDENTITY(false, bool(bool(false))))))), bool(true)))) - 0.0))), float(_GLF_FUZZED(vec3(1.0, -8954.5795, 942.896).g)), bool(false))), bool(false))), _GLF_IDENTITY(false ? _GLF_FUZZED(_GLF_IDENTITY(277.353, min(277.353, 277.353))) : 1.0, max(false ? _GLF_FUZZED(_GLF_IDENTITY(277.353, min(277.353, 277.353))) : 1.0, _GLF_IDENTITY(false, (false) && true) ? _GLF_FUZZED(_GLF_IDENTITY(277.353, min(277.353, 277.353))) : 1.0))))) / 1.0)))))), float(_GLF_FUZZED(-3019.2749)), bool(false)))) * 1.0), bool(true)))) / 1.0)) : _GLF_FUZZED(-3945.4938)))) - 0.0)), _GLF_IDENTITY(float(_GLF_IDENTITY(_GLF_IDENTITY(1.0, (true ? _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(277.353) : 1.0)) : _GLF_FUZZED(-3945.4938))), (_GLF_IDENTITY(1.0, (true ? _GLF_IDENTITY(1.0, _GLF_IDENTITY((_GLF_IDENTITY(false ? _GLF_FUZZED(_GLF_IDENTITY(277.353, min(277.353, 277.353))) : 1.0, (_GLF_IDENTITY(false ? _GLF_FUZZED(_GLF_IDENTITY(277.353, min(277.353, 277.353))) : 1.0, max(_GLF_IDENTITY(false ? _GLF_FUZZED(_GLF_IDENTITY(277.353, min(_GLF_IDENTITY(277.353, 1.0 * (277.353)), 277.353))) : 1.0, mix(float(_GLF_IDENTITY(false, false || (false)) ? _GLF_FUZZED(_GLF_IDENTITY(_GLF_IDENTITY(277.353, min(277.353, 277.353)), mix(float(_GLF_IDENTITY(277.353, min(277.353, 277.353))), float(_GLF_FUZZED(16.86)), bool(false)))) : 1.0), _GLF_IDENTITY(float(_GLF_IDENTITY(_GLF_FUZZED(9.7), (_GLF_IDENTITY(_GLF_FUZZED(9.7), mix(float(_GLF_FUZZED(5.0)), float(_GLF_IDENTITY(_GLF_FUZZED(9.7), mix(float(_GLF_FUZZED(9.7)), float(_GLF_FUZZED(-1.1)), bool(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) && true))))))), bool(true)))) - 0.0)), mix(float(float(_GLF_IDENTITY(_GLF_FUZZED(9.7), (_GLF_IDENTITY(_GLF_FUZZED(9.7), mix(float(_GLF_FUZZED(5.0)), float(_GLF_IDENTITY(_GLF_FUZZED(9.7), mix(float(_GLF_FUZZED(9.7)), float(_GLF_FUZZED(-1.1)), bool(false)))), bool(true)))) - 0.0))), float(_GLF_FUZZED(vec3(1.0, -8954.5795, 942.896).g)), bool(false))), bool(false))), _GLF_IDENTITY(false ? _GLF_FUZZED(_GLF_IDENTITY(277.353, min(277.353, 277.353))) : 1.0, max(false ? _GLF_FUZZED(_GLF_IDENTITY(277.353, min(277.353, 277.353))) : 1.0, _GLF_IDENTITY(false, _GLF_IDENTITY((false), true && ((false))) && true) ? _GLF_FUZZED(_GLF_IDENTITY(277.353, min(277.353, 277.353))) : 1.0))))) / 1.0)), (_GLF_IDENTITY((_GLF_IDENTITY(false ? _GLF_FUZZED(_GLF_IDENTITY(277.353, min(277.353, 277.353))) : 1.0, (_GLF_IDENTITY(false ? _GLF_FUZZED(_GLF_IDENTITY(277.353, min(277.353, 277.353))) : 1.0, max(_GLF_IDENTITY(false ? _GLF_FUZZED(_GLF_IDENTITY(277.353, min(_GLF_IDENTITY(277.353, 1.0 * (277.353)), 277.353))) : 1.0, mix(float(false ? _GLF_FUZZED(_GLF_IDENTITY(_GLF_IDENTITY(277.353, min(277.353, 277.353)), mix(float(_GLF_IDENTITY(277.353, min(277.353, 277.353))), float(_GLF_FUZZED(16.86)), bool(false)))) : 1.0), _GLF_IDENTITY(float(_GLF_IDENTITY(_GLF_FUZZED(9.7), (_GLF_IDENTITY(_GLF_FUZZED(9.7), mix(float(_GLF_FUZZED(5.0)), float(_GLF_IDENTITY(_GLF_FUZZED(9.7), mix(float(_GLF_FUZZED(9.7)), float(_GLF_FUZZED(-1.1)), bool(false)))), bool(true)))) - 0.0)), mix(float(float(_GLF_IDENTITY(_GLF_FUZZED(9.7), (_GLF_IDENTITY(_GLF_FUZZED(9.7), mix(float(_GLF_FUZZED(5.0)), float(_GLF_IDENTITY(_GLF_FUZZED(9.7), mix(float(_GLF_FUZZED(9.7)), float(_GLF_FUZZED(-1.1)), bool(false)))), bool(true)))) - 0.0))), float(_GLF_FUZZED(vec3(1.0, -8954.5795, 942.896).g)), bool(false))), bool(false))), _GLF_IDENTITY(false ? _GLF_FUZZED(_GLF_IDENTITY(277.353, min(277.353, 277.353))) : 1.0, max(false ? _GLF_FUZZED(_GLF_IDENTITY(277.353, min(277.353, 277.353))) : 1.0, _GLF_IDENTITY(false, (false) && true) ? _GLF_FUZZED(_GLF_IDENTITY(277.353, min(277.353, 277.353))) : 1.0))))) / 1.0)), mix(float(_GLF_FUZZED(-800.056)), _GLF_IDENTITY(float((_GLF_IDENTITY(false ? _GLF_FUZZED(_GLF_IDENTITY(277.353, min(277.353, 277.353))) : _GLF_IDENTITY(1.0, mix(float(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-436.841)))), float(_GLF_FUZZED((2.1 - -1564.7646))), bool(false))), (_GLF_IDENTITY(false ? _GLF_FUZZED(_GLF_IDENTITY(277.353, min(277.353, 277.353))) : 1.0, max(_GLF_IDENTITY(false ? _GLF_FUZZED(_GLF_IDENTITY(277.353, min(_GLF_IDENTITY(277.353, 1.0 * (277.353)), 277.353))) : 1.0, mix(float(false ? _GLF_FUZZED(_GLF_IDENTITY(_GLF_IDENTITY(277.353, min(277.353, 277.353)), mix(float(_GLF_IDENTITY(277.353, min(277.353, 277.353))), float(_GLF_FUZZED(16.86)), bool(false)))) : 1.0), _GLF_IDENTITY(float(_GLF_IDENTITY(_GLF_FUZZED(9.7), (_GLF_IDENTITY(_GLF_FUZZED(9.7), mix(float(_GLF_FUZZED(5.0)), float(_GLF_IDENTITY(_GLF_FUZZED(9.7), mix(float(_GLF_FUZZED(9.7)), float(_GLF_FUZZED(-1.1)), bool(false)))), bool(true)))) - 0.0)), mix(float(float(_GLF_IDENTITY(_GLF_FUZZED(9.7), (_GLF_IDENTITY(_GLF_FUZZED(9.7), mix(float(_GLF_FUZZED(5.0)), float(_GLF_IDENTITY(_GLF_FUZZED(9.7), mix(float(_GLF_FUZZED(9.7)), float(_GLF_FUZZED(-1.1)), bool(_GLF_IDENTITY(false, bool(bool(false))))))), bool(true)))) - 0.0))), float(_GLF_FUZZED(vec3(1.0, -8954.5795, 942.896).g)), bool(false))), bool(false))), _GLF_IDENTITY(false ? _GLF_FUZZED(_GLF_IDENTITY(277.353, min(277.353, 277.353))) : 1.0, max(false ? _GLF_FUZZED(_GLF_IDENTITY(277.353, min(277.353, 277.353))) : 1.0, _GLF_IDENTITY(false, (false) && true) ? _GLF_FUZZED(_GLF_IDENTITY(277.353, min(277.353, 277.353))) : 1.0))))) / 1.0))), (_GLF_IDENTITY(float((_GLF_IDENTITY(false ? _GLF_FUZZED(_GLF_IDENTITY(277.353, min(277.353, 277.353))) : _GLF_IDENTITY(1.0, mix(float(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-436.841)))), float(_GLF_FUZZED((2.1 - -1564.7646))), bool(false))), (_GLF_IDENTITY(false ? _GLF_FUZZED(_GLF_IDENTITY(277.353, min(277.353, 277.353))) : 1.0, max(_GLF_IDENTITY(false ? _GLF_FUZZED(_GLF_IDENTITY(277.353, min(_GLF_IDENTITY(277.353, 1.0 * (277.353)), 277.353))) : 1.0, mix(float(false ? _GLF_FUZZED(_GLF_IDENTITY(_GLF_IDENTITY(277.353, min(277.353, 277.353)), mix(float(_GLF_IDENTITY(277.353, min(277.353, 277.353))), float(_GLF_FUZZED(16.86)), bool(false)))) : 1.0), _GLF_IDENTITY(float(_GLF_IDENTITY(_GLF_FUZZED(9.7), (_GLF_IDENTITY(_GLF_FUZZED(9.7), mix(float(_GLF_FUZZED(5.0)), float(_GLF_IDENTITY(_GLF_FUZZED(9.7), mix(float(_GLF_FUZZED(9.7)), float(_GLF_FUZZED(-1.1)), bool(false)))), bool(true)))) - 0.0)), mix(float(float(_GLF_IDENTITY(_GLF_FUZZED(9.7), (_GLF_IDENTITY(_GLF_FUZZED(9.7), mix(float(_GLF_FUZZED(5.0)), float(_GLF_IDENTITY(_GLF_FUZZED(9.7), mix(float(_GLF_FUZZED(9.7)), float(_GLF_FUZZED(-1.1)), bool(_GLF_IDENTITY(false, bool(bool(false))))))), bool(true)))) - 0.0))), float(_GLF_FUZZED(vec3(1.0, -8954.5795, 942.896).g)), bool(false))), bool(false))), _GLF_IDENTITY(false ? _GLF_FUZZED(_GLF_IDENTITY(277.353, min(277.353, 277.353))) : 1.0, max(false ? _GLF_FUZZED(_GLF_IDENTITY(277.353, min(277.353, 277.353))) : 1.0, _GLF_IDENTITY(false, (false) && true) ? _GLF_FUZZED(_GLF_IDENTITY(277.353, min(277.353, 277.353))) : 1.0))))) / 1.0))), mix(float(_GLF_IDENTITY(float((_GLF_IDENTITY(false ? _GLF_FUZZED(_GLF_IDENTITY(277.353, min(277.353, 277.353))) : _GLF_IDENTITY(1.0, mix(float(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-436.841)))), float(_GLF_FUZZED((2.1 - -1564.7646))), bool(false))), (_GLF_IDENTITY(false ? _GLF_FUZZED(_GLF_IDENTITY(277.353, min(277.353, 277.353))) : 1.0, max(_GLF_IDENTITY(false ? _GLF_FUZZED(_GLF_IDENTITY(277.353, min(_GLF_IDENTITY(277.353, 1.0 * (277.353)), 277.353))) : 1.0, mix(float(false ? _GLF_FUZZED(_GLF_IDENTITY(_GLF_IDENTITY(277.353, min(277.353, 277.353)), mix(float(_GLF_IDENTITY(277.353, min(277.353, 277.353))), float(_GLF_FUZZED(16.86)), bool(false)))) : 1.0), _GLF_IDENTITY(float(_GLF_IDENTITY(_GLF_FUZZED(9.7), (_GLF_IDENTITY(_GLF_FUZZED(9.7), mix(float(_GLF_FUZZED(5.0)), float(_GLF_IDENTITY(_GLF_FUZZED(9.7), mix(float(_GLF_FUZZED(9.7)), float(_GLF_FUZZED(-1.1)), bool(false)))), bool(true)))) - 0.0)), mix(float(float(_GLF_IDENTITY(_GLF_FUZZED(9.7), (_GLF_IDENTITY(_GLF_FUZZED(9.7), mix(float(_GLF_FUZZED(5.0)), float(_GLF_IDENTITY(_GLF_FUZZED(9.7), mix(float(_GLF_FUZZED(9.7)), float(_GLF_FUZZED(-1.1)), bool(_GLF_IDENTITY(false, bool(bool(false))))))), bool(true)))) - 0.0))), float(_GLF_FUZZED(vec3(1.0, -8954.5795, 942.896).g)), bool(false))), bool(false))), _GLF_IDENTITY(false ? _GLF_FUZZED(_GLF_IDENTITY(277.353, min(277.353, 277.353))) : 1.0, max(false ? _GLF_FUZZED(_GLF_IDENTITY(277.353, min(277.353, 277.353))) : 1.0, _GLF_IDENTITY(false, (false) && true) ? _GLF_FUZZED(_GLF_IDENTITY(277.353, min(277.353, 277.353))) : 1.0))))) / 1.0))), max(float((_GLF_IDENTITY(false ? _GLF_FUZZED(_GLF_IDENTITY(277.353, min(277.353, 277.353))) : _GLF_IDENTITY(1.0, mix(float(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-436.841)))), float(_GLF_FUZZED((2.1 - -1564.7646))), bool(false))), (_GLF_IDENTITY(false ? _GLF_FUZZED(_GLF_IDENTITY(277.353, min(277.353, 277.353))) : 1.0, max(_GLF_IDENTITY(false ? _GLF_FUZZED(_GLF_IDENTITY(277.353, min(_GLF_IDENTITY(277.353, 1.0 * (277.353)), 277.353))) : 1.0, mix(float(false ? _GLF_FUZZED(_GLF_IDENTITY(_GLF_IDENTITY(277.353, min(277.353, 277.353)), mix(float(_GLF_IDENTITY(277.353, min(277.353, 277.353))), float(_GLF_FUZZED(16.86)), bool(false)))) : 1.0), _GLF_IDENTITY(float(_GLF_IDENTITY(_GLF_FUZZED(9.7), (_GLF_IDENTITY(_GLF_FUZZED(9.7), mix(float(_GLF_FUZZED(5.0)), float(_GLF_IDENTITY(_GLF_FUZZED(9.7), mix(float(_GLF_FUZZED(9.7)), float(_GLF_FUZZED(-1.1)), bool(false)))), bool(true)))) - 0.0)), mix(float(float(_GLF_IDENTITY(_GLF_FUZZED(9.7), (_GLF_IDENTITY(_GLF_FUZZED(9.7), mix(float(_GLF_FUZZED(5.0)), float(_GLF_IDENTITY(_GLF_FUZZED(9.7), mix(float(_GLF_FUZZED(9.7)), float(_GLF_FUZZED(-1.1)), bool(_GLF_IDENTITY(false, bool(bool(false))))))), bool(true)))) - 0.0))), float(_GLF_FUZZED(vec3(1.0, -8954.5795, 942.896).g)), bool(false))), bool(false))), _GLF_IDENTITY(false ? _GLF_FUZZED(_GLF_IDENTITY(277.353, min(277.353, 277.353))) : 1.0, max(false ? _GLF_FUZZED(_GLF_IDENTITY(277.353, min(277.353, 277.353))) : 1.0, _GLF_IDENTITY(false, (false) && true) ? _GLF_FUZZED(_GLF_IDENTITY(277.353, min(277.353, 277.353))) : 1.0))))) / 1.0))), float((_GLF_IDENTITY(false ? _GLF_FUZZED(_GLF_IDENTITY(277.353, min(277.353, 277.353))) : _GLF_IDENTITY(1.0, mix(float(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-436.841)))), float(_GLF_FUZZED((2.1 - -1564.7646))), bool(false))), (_GLF_IDENTITY(false ? _GLF_FUZZED(_GLF_IDENTITY(277.353, min(277.353, 277.353))) : 1.0, max(_GLF_IDENTITY(false ? _GLF_FUZZED(_GLF_IDENTITY(277.353, min(_GLF_IDENTITY(277.353, 1.0 * (277.353)), 277.353))) : 1.0, mix(float(false ? _GLF_FUZZED(_GLF_IDENTITY(_GLF_IDENTITY(277.353, min(277.353, 277.353)), mix(float(_GLF_IDENTITY(277.353, min(277.353, 277.353))), float(_GLF_FUZZED(16.86)), bool(false)))) : 1.0), _GLF_IDENTITY(float(_GLF_IDENTITY(_GLF_FUZZED(9.7), (_GLF_IDENTITY(_GLF_FUZZED(9.7), mix(float(_GLF_FUZZED(5.0)), float(_GLF_IDENTITY(_GLF_FUZZED(9.7), mix(float(_GLF_FUZZED(9.7)), float(_GLF_FUZZED(-1.1)), bool(false)))), bool(true)))) - 0.0)), mix(float(float(_GLF_IDENTITY(_GLF_FUZZED(9.7), (_GLF_IDENTITY(_GLF_FUZZED(9.7), mix(float(_GLF_FUZZED(5.0)), float(_GLF_IDENTITY(_GLF_FUZZED(9.7), mix(float(_GLF_FUZZED(9.7)), float(_GLF_FUZZED(-1.1)), bool(_GLF_IDENTITY(false, bool(bool(false))))))), bool(true)))) - 0.0))), float(_GLF_FUZZED(vec3(1.0, -8954.5795, 942.896).g)), bool(false))), bool(false))), _GLF_IDENTITY(false ? _GLF_FUZZED(_GLF_IDENTITY(277.353, min(277.353, 277.353))) : 1.0, max(false ? _GLF_FUZZED(_GLF_IDENTITY(277.353, min(277.353, 277.353))) : 1.0, _GLF_IDENTITY(false, (false) && true) ? _GLF_FUZZED(_GLF_IDENTITY(277.353, min(277.353, 277.353))) : 1.0))))) / 1.0)))))), float(_GLF_FUZZED(-3019.2749)), bool(false)))) * 1.0), bool(true)))) / 1.0)) : _GLF_FUZZED(-3945.4938)))) - 0.0)), max(float(_GLF_IDENTITY(_GLF_IDENTITY(1.0, (true ? _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(277.353) : 1.0)) : _GLF_FUZZED(-3945.4938))), (_GLF_IDENTITY(1.0, (true ? _GLF_IDENTITY(1.0, _GLF_IDENTITY((_GLF_IDENTITY(false ? _GLF_FUZZED(_GLF_IDENTITY(277.353, min(277.353, 277.353))) : 1.0, (_GLF_IDENTITY(false ? _GLF_FUZZED(_GLF_IDENTITY(277.353, min(277.353, 277.353))) : 1.0, max(_GLF_IDENTITY(false ? _GLF_FUZZED(_GLF_IDENTITY(277.353, min(_GLF_IDENTITY(277.353, 1.0 * (277.353)), 277.353))) : 1.0, mix(float(_GLF_IDENTITY(false, false || (false)) ? _GLF_FUZZED(_GLF_IDENTITY(_GLF_IDENTITY(277.353, min(277.353, 277.353)), mix(float(_GLF_IDENTITY(277.353, min(277.353, 277.353))), float(_GLF_FUZZED(16.86)), bool(false)))) : 1.0), _GLF_IDENTITY(float(_GLF_IDENTITY(_GLF_FUZZED(9.7), (_GLF_IDENTITY(_GLF_FUZZED(9.7), mix(float(_GLF_FUZZED(5.0)), float(_GLF_IDENTITY(_GLF_FUZZED(9.7), mix(float(_GLF_FUZZED(9.7)), float(_GLF_FUZZED(-1.1)), bool(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) && true))))))), bool(true)))) - 0.0)), mix(float(float(_GLF_IDENTITY(_GLF_FUZZED(9.7), (_GLF_IDENTITY(_GLF_FUZZED(9.7), mix(float(_GLF_FUZZED(5.0)), float(_GLF_IDENTITY(_GLF_FUZZED(9.7), mix(float(_GLF_FUZZED(9.7)), float(_GLF_FUZZED(-1.1)), bool(false)))), bool(true)))) - 0.0))), float(_GLF_FUZZED(vec3(1.0, -8954.5795, 942.896).g)), bool(false))), bool(false))), _GLF_IDENTITY(false ? _GLF_FUZZED(_GLF_IDENTITY(277.353, min(277.353, 277.353))) : 1.0, max(false ? _GLF_FUZZED(_GLF_IDENTITY(277.353, min(277.353, 277.353))) : 1.0, _GLF_IDENTITY(false, _GLF_IDENTITY((false), true && ((false))) && true) ? _GLF_FUZZED(_GLF_IDENTITY(277.353, min(277.353, 277.353))) : 1.0))))) / 1.0)), (_GLF_IDENTITY((_GLF_IDENTITY(false ? _GLF_FUZZED(_GLF_IDENTITY(277.353, min(277.353, 277.353))) : 1.0, (_GLF_IDENTITY(false ? _GLF_FUZZED(_GLF_IDENTITY(277.353, min(277.353, 277.353))) : 1.0, max(_GLF_IDENTITY(false ? _GLF_FUZZED(_GLF_IDENTITY(277.353, min(_GLF_IDENTITY(277.353, 1.0 * (277.353)), 277.353))) : 1.0, mix(float(false ? _GLF_FUZZED(_GLF_IDENTITY(_GLF_IDENTITY(277.353, min(277.353, 277.353)), mix(float(_GLF_IDENTITY(277.353, min(277.353, 277.353))), float(_GLF_FUZZED(16.86)), bool(false)))) : 1.0), _GLF_IDENTITY(float(_GLF_IDENTITY(_GLF_FUZZED(9.7), (_GLF_IDENTITY(_GLF_FUZZED(9.7), mix(float(_GLF_FUZZED(5.0)), float(_GLF_IDENTITY(_GLF_FUZZED(9.7), mix(float(_GLF_FUZZED(9.7)), float(_GLF_FUZZED(-1.1)), bool(false)))), bool(true)))) - 0.0)), mix(float(float(_GLF_IDENTITY(_GLF_FUZZED(9.7), (_GLF_IDENTITY(_GLF_FUZZED(9.7), mix(float(_GLF_FUZZED(5.0)), float(_GLF_IDENTITY(_GLF_FUZZED(9.7), mix(float(_GLF_FUZZED(9.7)), float(_GLF_FUZZED(-1.1)), bool(false)))), bool(true)))) - 0.0))), float(_GLF_FUZZED(vec3(1.0, -8954.5795, 942.896).g)), bool(false))), bool(false))), _GLF_IDENTITY(false ? _GLF_FUZZED(_GLF_IDENTITY(277.353, min(277.353, 277.353))) : 1.0, max(false ? _GLF_FUZZED(_GLF_IDENTITY(277.353, min(277.353, 277.353))) : 1.0, _GLF_IDENTITY(false, (false) && true) ? _GLF_FUZZED(_GLF_IDENTITY(277.353, min(277.353, 277.353))) : 1.0))))) / 1.0)), mix(float(_GLF_FUZZED(-800.056)), _GLF_IDENTITY(float((_GLF_IDENTITY(false ? _GLF_FUZZED(_GLF_IDENTITY(277.353, min(277.353, 277.353))) : _GLF_IDENTITY(1.0, mix(float(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-436.841)))), float(_GLF_FUZZED((2.1 - -1564.7646))), bool(false))), (_GLF_IDENTITY(false ? _GLF_FUZZED(_GLF_IDENTITY(277.353, min(277.353, 277.353))) : 1.0, max(_GLF_IDENTITY(false ? _GLF_FUZZED(_GLF_IDENTITY(277.353, min(_GLF_IDENTITY(277.353, 1.0 * (277.353)), 277.353))) : 1.0, mix(float(false ? _GLF_FUZZED(_GLF_IDENTITY(_GLF_IDENTITY(277.353, min(277.353, 277.353)), mix(float(_GLF_IDENTITY(277.353, min(277.353, 277.353))), float(_GLF_FUZZED(16.86)), bool(false)))) : 1.0), _GLF_IDENTITY(float(_GLF_IDENTITY(_GLF_FUZZED(9.7), (_GLF_IDENTITY(_GLF_FUZZED(9.7), mix(float(_GLF_FUZZED(5.0)), float(_GLF_IDENTITY(_GLF_FUZZED(9.7), mix(float(_GLF_FUZZED(9.7)), float(_GLF_FUZZED(-1.1)), bool(false)))), bool(true)))) - 0.0)), mix(float(float(_GLF_IDENTITY(_GLF_FUZZED(9.7), (_GLF_IDENTITY(_GLF_FUZZED(9.7), mix(float(_GLF_FUZZED(5.0)), float(_GLF_IDENTITY(_GLF_FUZZED(9.7), mix(float(_GLF_FUZZED(9.7)), float(_GLF_FUZZED(-1.1)), bool(_GLF_IDENTITY(false, bool(bool(false))))))), bool(true)))) - 0.0))), float(_GLF_FUZZED(vec3(1.0, -8954.5795, 942.896).g)), bool(false))), bool(false))), _GLF_IDENTITY(false ? _GLF_FUZZED(_GLF_IDENTITY(277.353, min(277.353, 277.353))) : 1.0, max(false ? _GLF_FUZZED(_GLF_IDENTITY(277.353, min(277.353, 277.353))) : 1.0, _GLF_IDENTITY(false, (false) && true) ? _GLF_FUZZED(_GLF_IDENTITY(277.353, min(277.353, 277.353))) : 1.0))))) / 1.0))), (_GLF_IDENTITY(float((_GLF_IDENTITY(false ? _GLF_FUZZED(_GLF_IDENTITY(277.353, min(277.353, 277.353))) : _GLF_IDENTITY(1.0, mix(float(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-436.841)))), float(_GLF_FUZZED((2.1 - -1564.7646))), bool(false))), (_GLF_IDENTITY(false ? _GLF_FUZZED(_GLF_IDENTITY(277.353, min(277.353, 277.353))) : 1.0, max(_GLF_IDENTITY(false ? _GLF_FUZZED(_GLF_IDENTITY(277.353, min(_GLF_IDENTITY(277.353, 1.0 * (277.353)), 277.353))) : 1.0, mix(float(false ? _GLF_FUZZED(_GLF_IDENTITY(_GLF_IDENTITY(277.353, min(277.353, 277.353)), mix(float(_GLF_IDENTITY(277.353, min(277.353, 277.353))), float(_GLF_FUZZED(16.86)), bool(false)))) : 1.0), _GLF_IDENTITY(float(_GLF_IDENTITY(_GLF_FUZZED(9.7), (_GLF_IDENTITY(_GLF_FUZZED(9.7), mix(float(_GLF_FUZZED(5.0)), float(_GLF_IDENTITY(_GLF_FUZZED(9.7), mix(float(_GLF_FUZZED(9.7)), float(_GLF_FUZZED(-1.1)), bool(false)))), bool(true)))) - 0.0)), mix(float(float(_GLF_IDENTITY(_GLF_FUZZED(9.7), (_GLF_IDENTITY(_GLF_FUZZED(9.7), mix(float(_GLF_FUZZED(5.0)), float(_GLF_IDENTITY(_GLF_FUZZED(9.7), mix(float(_GLF_FUZZED(9.7)), float(_GLF_FUZZED(-1.1)), bool(_GLF_IDENTITY(false, bool(bool(false))))))), bool(true)))) - 0.0))), float(_GLF_FUZZED(vec3(1.0, -8954.5795, 942.896).g)), bool(false))), bool(false))), _GLF_IDENTITY(false ? _GLF_FUZZED(_GLF_IDENTITY(277.353, min(277.353, 277.353))) : 1.0, max(false ? _GLF_FUZZED(_GLF_IDENTITY(277.353, min(277.353, 277.353))) : 1.0, _GLF_IDENTITY(false, (false) && true) ? _GLF_FUZZED(_GLF_IDENTITY(277.353, min(277.353, 277.353))) : 1.0))))) / 1.0))), mix(float(_GLF_IDENTITY(float((_GLF_IDENTITY(false ? _GLF_FUZZED(_GLF_IDENTITY(277.353, min(277.353, 277.353))) : _GLF_IDENTITY(1.0, mix(float(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-436.841)))), float(_GLF_FUZZED((2.1 - -1564.7646))), bool(false))), (_GLF_IDENTITY(false ? _GLF_FUZZED(_GLF_IDENTITY(277.353, min(277.353, 277.353))) : 1.0, max(_GLF_IDENTITY(false ? _GLF_FUZZED(_GLF_IDENTITY(277.353, min(_GLF_IDENTITY(277.353, 1.0 * (277.353)), 277.353))) : 1.0, mix(float(false ? _GLF_FUZZED(_GLF_IDENTITY(_GLF_IDENTITY(277.353, min(277.353, 277.353)), mix(float(_GLF_IDENTITY(277.353, min(277.353, 277.353))), float(_GLF_FUZZED(16.86)), bool(false)))) : 1.0), _GLF_IDENTITY(float(_GLF_IDENTITY(_GLF_FUZZED(9.7), (_GLF_IDENTITY(_GLF_FUZZED(9.7), mix(float(_GLF_FUZZED(5.0)), float(_GLF_IDENTITY(_GLF_FUZZED(9.7), mix(float(_GLF_FUZZED(9.7)), float(_GLF_FUZZED(-1.1)), bool(false)))), bool(true)))) - 0.0)), mix(float(float(_GLF_IDENTITY(_GLF_FUZZED(9.7), (_GLF_IDENTITY(_GLF_FUZZED(9.7), mix(float(_GLF_FUZZED(5.0)), float(_GLF_IDENTITY(_GLF_FUZZED(9.7), mix(float(_GLF_FUZZED(9.7)), float(_GLF_FUZZED(-1.1)), bool(_GLF_IDENTITY(false, bool(bool(false))))))), bool(true)))) - 0.0))), float(_GLF_FUZZED(vec3(1.0, -8954.5795, 942.896).g)), bool(false))), bool(false))), _GLF_IDENTITY(false ? _GLF_FUZZED(_GLF_IDENTITY(277.353, min(277.353, 277.353))) : 1.0, max(false ? _GLF_FUZZED(_GLF_IDENTITY(277.353, min(277.353, 277.353))) : 1.0, _GLF_IDENTITY(false, (false) && true) ? _GLF_FUZZED(_GLF_IDENTITY(277.353, min(277.353, 277.353))) : 1.0))))) / 1.0))), max(float((_GLF_IDENTITY(false ? _GLF_FUZZED(_GLF_IDENTITY(277.353, min(277.353, 277.353))) : _GLF_IDENTITY(1.0, mix(float(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-436.841)))), float(_GLF_FUZZED((2.1 - -1564.7646))), bool(false))), (_GLF_IDENTITY(false ? _GLF_FUZZED(_GLF_IDENTITY(277.353, min(277.353, 277.353))) : 1.0, max(_GLF_IDENTITY(false ? _GLF_FUZZED(_GLF_IDENTITY(277.353, min(_GLF_IDENTITY(277.353, 1.0 * (277.353)), 277.353))) : 1.0, mix(float(false ? _GLF_FUZZED(_GLF_IDENTITY(_GLF_IDENTITY(277.353, min(277.353, 277.353)), mix(float(_GLF_IDENTITY(277.353, min(277.353, 277.353))), float(_GLF_FUZZED(16.86)), bool(false)))) : 1.0), _GLF_IDENTITY(float(_GLF_IDENTITY(_GLF_FUZZED(9.7), (_GLF_IDENTITY(_GLF_FUZZED(9.7), mix(float(_GLF_FUZZED(5.0)), float(_GLF_IDENTITY(_GLF_FUZZED(9.7), mix(float(_GLF_FUZZED(9.7)), float(_GLF_FUZZED(-1.1)), bool(false)))), bool(true)))) - 0.0)), mix(float(float(_GLF_IDENTITY(_GLF_FUZZED(9.7), (_GLF_IDENTITY(_GLF_FUZZED(9.7), mix(float(_GLF_FUZZED(5.0)), float(_GLF_IDENTITY(_GLF_FUZZED(9.7), mix(float(_GLF_FUZZED(9.7)), float(_GLF_FUZZED(-1.1)), bool(_GLF_IDENTITY(false, bool(bool(false))))))), bool(true)))) - 0.0))), float(_GLF_FUZZED(vec3(1.0, -8954.5795, 942.896).g)), bool(false))), bool(false))), _GLF_IDENTITY(false ? _GLF_FUZZED(_GLF_IDENTITY(277.353, min(277.353, 277.353))) : 1.0, max(false ? _GLF_FUZZED(_GLF_IDENTITY(277.353, min(277.353, 277.353))) : 1.0, _GLF_IDENTITY(false, (false) && true) ? _GLF_FUZZED(_GLF_IDENTITY(277.353, min(277.353, 277.353))) : 1.0))))) / 1.0))), float((_GLF_IDENTITY(false ? _GLF_FUZZED(_GLF_IDENTITY(277.353, min(277.353, 277.353))) : _GLF_IDENTITY(1.0, mix(float(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-436.841)))), float(_GLF_FUZZED((2.1 - -1564.7646))), bool(false))), (_GLF_IDENTITY(false ? _GLF_FUZZED(_GLF_IDENTITY(277.353, min(277.353, 277.353))) : 1.0, max(_GLF_IDENTITY(false ? _GLF_FUZZED(_GLF_IDENTITY(277.353, min(_GLF_IDENTITY(277.353, 1.0 * (277.353)), 277.353))) : 1.0, mix(float(false ? _GLF_FUZZED(_GLF_IDENTITY(_GLF_IDENTITY(277.353, min(277.353, 277.353)), mix(float(_GLF_IDENTITY(277.353, min(277.353, 277.353))), float(_GLF_FUZZED(16.86)), bool(false)))) : 1.0), _GLF_IDENTITY(float(_GLF_IDENTITY(_GLF_FUZZED(9.7), (_GLF_IDENTITY(_GLF_FUZZED(9.7), mix(float(_GLF_FUZZED(5.0)), float(_GLF_IDENTITY(_GLF_FUZZED(9.7), mix(float(_GLF_FUZZED(9.7)), float(_GLF_FUZZED(-1.1)), bool(false)))), bool(true)))) - 0.0)), mix(float(float(_GLF_IDENTITY(_GLF_FUZZED(9.7), (_GLF_IDENTITY(_GLF_FUZZED(9.7), mix(float(_GLF_FUZZED(5.0)), float(_GLF_IDENTITY(_GLF_FUZZED(9.7), mix(float(_GLF_FUZZED(9.7)), float(_GLF_FUZZED(-1.1)), bool(_GLF_IDENTITY(false, bool(bool(false))))))), bool(true)))) - 0.0))), float(_GLF_FUZZED(vec3(1.0, -8954.5795, 942.896).g)), bool(false))), bool(false))), _GLF_IDENTITY(false ? _GLF_FUZZED(_GLF_IDENTITY(277.353, min(277.353, 277.353))) : 1.0, max(false ? _GLF_FUZZED(_GLF_IDENTITY(277.353, min(277.353, 277.353))) : 1.0, _GLF_IDENTITY(false, (false) && true) ? _GLF_FUZZED(_GLF_IDENTITY(277.353, min(277.353, 277.353))) : 1.0))))) / 1.0)))))), float(_GLF_FUZZED(-3019.2749)), bool(false)))) * 1.0), bool(true)))) / 1.0)) : _GLF_FUZZED(-3945.4938)))) - 0.0)), float(_GLF_IDENTITY(_GLF_IDENTITY(1.0, (true ? _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(277.353) : 1.0)) : _GLF_FUZZED(-3945.4938))), (_GLF_IDENTITY(1.0, (true ? _GLF_IDENTITY(1.0, _GLF_IDENTITY((_GLF_IDENTITY(false ? _GLF_FUZZED(_GLF_IDENTITY(277.353, min(277.353, 277.353))) : 1.0, (_GLF_IDENTITY(false ? _GLF_FUZZED(_GLF_IDENTITY(277.353, min(277.353, 277.353))) : 1.0, max(_GLF_IDENTITY(false ? _GLF_FUZZED(_GLF_IDENTITY(277.353, min(_GLF_IDENTITY(277.353, 1.0 * (277.353)), 277.353))) : 1.0, mix(float(_GLF_IDENTITY(false, false || (false)) ? _GLF_FUZZED(_GLF_IDENTITY(_GLF_IDENTITY(277.353, min(277.353, 277.353)), mix(float(_GLF_IDENTITY(277.353, min(277.353, 277.353))), float(_GLF_FUZZED(16.86)), bool(false)))) : 1.0), _GLF_IDENTITY(float(_GLF_IDENTITY(_GLF_FUZZED(9.7), (_GLF_IDENTITY(_GLF_FUZZED(9.7), mix(float(_GLF_FUZZED(5.0)), float(_GLF_IDENTITY(_GLF_FUZZED(9.7), mix(float(_GLF_FUZZED(9.7)), float(_GLF_FUZZED(-1.1)), bool(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) && true))))))), bool(true)))) - 0.0)), mix(float(float(_GLF_IDENTITY(_GLF_FUZZED(9.7), (_GLF_IDENTITY(_GLF_FUZZED(9.7), mix(float(_GLF_FUZZED(5.0)), float(_GLF_IDENTITY(_GLF_FUZZED(9.7), mix(float(_GLF_FUZZED(9.7)), float(_GLF_FUZZED(-1.1)), bool(false)))), bool(true)))) - 0.0))), float(_GLF_FUZZED(vec3(1.0, -8954.5795, 942.896).g)), bool(false))), bool(false))), _GLF_IDENTITY(false ? _GLF_FUZZED(_GLF_IDENTITY(277.353, min(277.353, 277.353))) : 1.0, max(false ? _GLF_FUZZED(_GLF_IDENTITY(277.353, min(277.353, 277.353))) : 1.0, _GLF_IDENTITY(false, _GLF_IDENTITY((false), true && ((false))) && true) ? _GLF_FUZZED(_GLF_IDENTITY(277.353, min(277.353, 277.353))) : 1.0))))) / 1.0)), (_GLF_IDENTITY((_GLF_IDENTITY(false ? _GLF_FUZZED(_GLF_IDENTITY(277.353, min(277.353, 277.353))) : 1.0, (_GLF_IDENTITY(false ? _GLF_FUZZED(_GLF_IDENTITY(277.353, min(277.353, 277.353))) : 1.0, max(_GLF_IDENTITY(false ? _GLF_FUZZED(_GLF_IDENTITY(277.353, min(_GLF_IDENTITY(277.353, 1.0 * (277.353)), 277.353))) : 1.0, mix(float(false ? _GLF_FUZZED(_GLF_IDENTITY(_GLF_IDENTITY(277.353, min(277.353, 277.353)), mix(float(_GLF_IDENTITY(277.353, min(277.353, 277.353))), float(_GLF_FUZZED(16.86)), bool(false)))) : 1.0), _GLF_IDENTITY(float(_GLF_IDENTITY(_GLF_FUZZED(9.7), (_GLF_IDENTITY(_GLF_FUZZED(9.7), mix(float(_GLF_FUZZED(5.0)), float(_GLF_IDENTITY(_GLF_FUZZED(9.7), mix(float(_GLF_FUZZED(9.7)), float(_GLF_FUZZED(-1.1)), bool(false)))), bool(true)))) - 0.0)), mix(float(float(_GLF_IDENTITY(_GLF_FUZZED(9.7), (_GLF_IDENTITY(_GLF_FUZZED(9.7), mix(float(_GLF_FUZZED(5.0)), float(_GLF_IDENTITY(_GLF_FUZZED(9.7), mix(float(_GLF_FUZZED(9.7)), float(_GLF_FUZZED(-1.1)), bool(false)))), bool(true)))) - 0.0))), float(_GLF_FUZZED(vec3(1.0, -8954.5795, 942.896).g)), bool(false))), bool(false))), _GLF_IDENTITY(false ? _GLF_FUZZED(_GLF_IDENTITY(277.353, min(277.353, 277.353))) : 1.0, max(false ? _GLF_FUZZED(_GLF_IDENTITY(277.353, min(277.353, 277.353))) : 1.0, _GLF_IDENTITY(false, (false) && true) ? _GLF_FUZZED(_GLF_IDENTITY(277.353, min(277.353, 277.353))) : 1.0))))) / 1.0)), mix(float(_GLF_FUZZED(-800.056)), _GLF_IDENTITY(float((_GLF_IDENTITY(false ? _GLF_FUZZED(_GLF_IDENTITY(277.353, min(277.353, 277.353))) : _GLF_IDENTITY(1.0, mix(float(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-436.841)))), float(_GLF_FUZZED((2.1 - -1564.7646))), bool(false))), (_GLF_IDENTITY(false ? _GLF_FUZZED(_GLF_IDENTITY(277.353, min(277.353, 277.353))) : 1.0, max(_GLF_IDENTITY(false ? _GLF_FUZZED(_GLF_IDENTITY(277.353, min(_GLF_IDENTITY(277.353, 1.0 * (277.353)), 277.353))) : 1.0, mix(float(false ? _GLF_FUZZED(_GLF_IDENTITY(_GLF_IDENTITY(277.353, min(277.353, 277.353)), mix(float(_GLF_IDENTITY(277.353, min(277.353, 277.353))), float(_GLF_FUZZED(16.86)), bool(false)))) : 1.0), _GLF_IDENTITY(float(_GLF_IDENTITY(_GLF_FUZZED(9.7), (_GLF_IDENTITY(_GLF_FUZZED(9.7), mix(float(_GLF_FUZZED(5.0)), float(_GLF_IDENTITY(_GLF_FUZZED(9.7), mix(float(_GLF_FUZZED(9.7)), float(_GLF_FUZZED(-1.1)), bool(false)))), bool(true)))) - 0.0)), mix(float(float(_GLF_IDENTITY(_GLF_FUZZED(9.7), (_GLF_IDENTITY(_GLF_FUZZED(9.7), mix(float(_GLF_FUZZED(5.0)), float(_GLF_IDENTITY(_GLF_FUZZED(9.7), mix(float(_GLF_FUZZED(9.7)), float(_GLF_FUZZED(-1.1)), bool(_GLF_IDENTITY(false, bool(bool(false))))))), bool(true)))) - 0.0))), float(_GLF_FUZZED(vec3(1.0, -8954.5795, 942.896).g)), bool(false))), bool(false))), _GLF_IDENTITY(false ? _GLF_FUZZED(_GLF_IDENTITY(277.353, min(277.353, 277.353))) : 1.0, max(false ? _GLF_FUZZED(_GLF_IDENTITY(277.353, min(277.353, 277.353))) : 1.0, _GLF_IDENTITY(false, (false) && true) ? _GLF_FUZZED(_GLF_IDENTITY(277.353, min(277.353, 277.353))) : 1.0))))) / 1.0))), (_GLF_IDENTITY(float((_GLF_IDENTITY(false ? _GLF_FUZZED(_GLF_IDENTITY(277.353, min(277.353, 277.353))) : _GLF_IDENTITY(1.0, mix(float(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-436.841)))), float(_GLF_FUZZED((2.1 - -1564.7646))), bool(false))), (_GLF_IDENTITY(false ? _GLF_FUZZED(_GLF_IDENTITY(277.353, min(277.353, 277.353))) : 1.0, max(_GLF_IDENTITY(false ? _GLF_FUZZED(_GLF_IDENTITY(277.353, min(_GLF_IDENTITY(277.353, 1.0 * (277.353)), 277.353))) : 1.0, mix(float(false ? _GLF_FUZZED(_GLF_IDENTITY(_GLF_IDENTITY(277.353, min(277.353, 277.353)), mix(float(_GLF_IDENTITY(277.353, min(277.353, 277.353))), float(_GLF_FUZZED(16.86)), bool(false)))) : 1.0), _GLF_IDENTITY(float(_GLF_IDENTITY(_GLF_FUZZED(9.7), (_GLF_IDENTITY(_GLF_FUZZED(9.7), mix(float(_GLF_FUZZED(5.0)), float(_GLF_IDENTITY(_GLF_FUZZED(9.7), mix(float(_GLF_FUZZED(9.7)), float(_GLF_FUZZED(-1.1)), bool(false)))), bool(true)))) - 0.0)), mix(float(float(_GLF_IDENTITY(_GLF_FUZZED(9.7), (_GLF_IDENTITY(_GLF_FUZZED(9.7), mix(float(_GLF_FUZZED(5.0)), float(_GLF_IDENTITY(_GLF_FUZZED(9.7), mix(float(_GLF_FUZZED(9.7)), float(_GLF_FUZZED(-1.1)), bool(_GLF_IDENTITY(false, bool(bool(false))))))), bool(true)))) - 0.0))), float(_GLF_FUZZED(vec3(1.0, -8954.5795, 942.896).g)), bool(false))), bool(false))), _GLF_IDENTITY(false ? _GLF_FUZZED(_GLF_IDENTITY(277.353, min(277.353, 277.353))) : 1.0, max(false ? _GLF_FUZZED(_GLF_IDENTITY(277.353, min(277.353, 277.353))) : 1.0, _GLF_IDENTITY(false, (false) && true) ? _GLF_FUZZED(_GLF_IDENTITY(277.353, min(277.353, 277.353))) : 1.0))))) / 1.0))), mix(float(_GLF_IDENTITY(float((_GLF_IDENTITY(false ? _GLF_FUZZED(_GLF_IDENTITY(277.353, min(277.353, 277.353))) : _GLF_IDENTITY(1.0, mix(float(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-436.841)))), float(_GLF_FUZZED((2.1 - -1564.7646))), bool(false))), (_GLF_IDENTITY(false ? _GLF_FUZZED(_GLF_IDENTITY(277.353, min(277.353, 277.353))) : 1.0, max(_GLF_IDENTITY(false ? _GLF_FUZZED(_GLF_IDENTITY(277.353, min(_GLF_IDENTITY(277.353, 1.0 * (277.353)), 277.353))) : 1.0, mix(float(false ? _GLF_FUZZED(_GLF_IDENTITY(_GLF_IDENTITY(277.353, min(277.353, 277.353)), mix(float(_GLF_IDENTITY(277.353, min(277.353, 277.353))), float(_GLF_FUZZED(16.86)), bool(false)))) : 1.0), _GLF_IDENTITY(float(_GLF_IDENTITY(_GLF_FUZZED(9.7), (_GLF_IDENTITY(_GLF_FUZZED(9.7), mix(float(_GLF_FUZZED(5.0)), float(_GLF_IDENTITY(_GLF_FUZZED(9.7), mix(float(_GLF_FUZZED(9.7)), float(_GLF_FUZZED(-1.1)), bool(false)))), bool(true)))) - 0.0)), mix(float(float(_GLF_IDENTITY(_GLF_FUZZED(9.7), (_GLF_IDENTITY(_GLF_FUZZED(9.7), mix(float(_GLF_FUZZED(5.0)), float(_GLF_IDENTITY(_GLF_FUZZED(9.7), mix(float(_GLF_FUZZED(9.7)), float(_GLF_FUZZED(-1.1)), bool(_GLF_IDENTITY(false, bool(bool(false))))))), bool(true)))) - 0.0))), float(_GLF_FUZZED(vec3(1.0, -8954.5795, 942.896).g)), bool(false))), bool(false))), _GLF_IDENTITY(false ? _GLF_FUZZED(_GLF_IDENTITY(277.353, min(277.353, 277.353))) : 1.0, max(false ? _GLF_FUZZED(_GLF_IDENTITY(277.353, min(277.353, 277.353))) : 1.0, _GLF_IDENTITY(false, (false) && true) ? _GLF_FUZZED(_GLF_IDENTITY(277.353, min(277.353, 277.353))) : 1.0))))) / 1.0))), max(float((_GLF_IDENTITY(false ? _GLF_FUZZED(_GLF_IDENTITY(277.353, min(277.353, 277.353))) : _GLF_IDENTITY(1.0, mix(float(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-436.841)))), float(_GLF_FUZZED((2.1 - -1564.7646))), bool(false))), (_GLF_IDENTITY(false ? _GLF_FUZZED(_GLF_IDENTITY(277.353, min(277.353, 277.353))) : 1.0, max(_GLF_IDENTITY(false ? _GLF_FUZZED(_GLF_IDENTITY(277.353, min(_GLF_IDENTITY(277.353, 1.0 * (277.353)), 277.353))) : 1.0, mix(float(false ? _GLF_FUZZED(_GLF_IDENTITY(_GLF_IDENTITY(277.353, min(277.353, 277.353)), mix(float(_GLF_IDENTITY(277.353, min(277.353, 277.353))), float(_GLF_FUZZED(16.86)), bool(false)))) : 1.0), _GLF_IDENTITY(float(_GLF_IDENTITY(_GLF_FUZZED(9.7), (_GLF_IDENTITY(_GLF_FUZZED(9.7), mix(float(_GLF_FUZZED(5.0)), float(_GLF_IDENTITY(_GLF_FUZZED(9.7), mix(float(_GLF_FUZZED(9.7)), float(_GLF_FUZZED(-1.1)), bool(false)))), bool(true)))) - 0.0)), mix(float(float(_GLF_IDENTITY(_GLF_FUZZED(9.7), (_GLF_IDENTITY(_GLF_FUZZED(9.7), mix(float(_GLF_FUZZED(5.0)), float(_GLF_IDENTITY(_GLF_FUZZED(9.7), mix(float(_GLF_FUZZED(9.7)), float(_GLF_FUZZED(-1.1)), bool(_GLF_IDENTITY(false, bool(bool(false))))))), bool(true)))) - 0.0))), float(_GLF_FUZZED(vec3(1.0, -8954.5795, 942.896).g)), bool(false))), bool(false))), _GLF_IDENTITY(false ? _GLF_FUZZED(_GLF_IDENTITY(277.353, min(277.353, 277.353))) : 1.0, max(false ? _GLF_FUZZED(_GLF_IDENTITY(277.353, min(277.353, 277.353))) : 1.0, _GLF_IDENTITY(false, (false) && true) ? _GLF_FUZZED(_GLF_IDENTITY(277.353, min(277.353, 277.353))) : 1.0))))) / 1.0))), float((_GLF_IDENTITY(false ? _GLF_FUZZED(_GLF_IDENTITY(277.353, min(277.353, 277.353))) : _GLF_IDENTITY(1.0, mix(float(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-436.841)))), float(_GLF_FUZZED((2.1 - -1564.7646))), bool(false))), (_GLF_IDENTITY(false ? _GLF_FUZZED(_GLF_IDENTITY(277.353, min(277.353, 277.353))) : 1.0, max(_GLF_IDENTITY(false ? _GLF_FUZZED(_GLF_IDENTITY(277.353, min(_GLF_IDENTITY(277.353, 1.0 * (277.353)), 277.353))) : 1.0, mix(float(false ? _GLF_FUZZED(_GLF_IDENTITY(_GLF_IDENTITY(277.353, min(277.353, 277.353)), mix(float(_GLF_IDENTITY(277.353, min(277.353, 277.353))), float(_GLF_FUZZED(16.86)), bool(false)))) : 1.0), _GLF_IDENTITY(float(_GLF_IDENTITY(_GLF_FUZZED(9.7), (_GLF_IDENTITY(_GLF_FUZZED(9.7), mix(float(_GLF_FUZZED(5.0)), float(_GLF_IDENTITY(_GLF_FUZZED(9.7), mix(float(_GLF_FUZZED(9.7)), float(_GLF_FUZZED(-1.1)), bool(false)))), bool(true)))) - 0.0)), mix(float(float(_GLF_IDENTITY(_GLF_FUZZED(9.7), (_GLF_IDENTITY(_GLF_FUZZED(9.7), mix(float(_GLF_FUZZED(5.0)), float(_GLF_IDENTITY(_GLF_FUZZED(9.7), mix(float(_GLF_FUZZED(9.7)), float(_GLF_FUZZED(-1.1)), bool(_GLF_IDENTITY(false, bool(bool(false))))))), bool(true)))) - 0.0))), float(_GLF_FUZZED(vec3(1.0, -8954.5795, 942.896).g)), bool(false))), bool(false))), _GLF_IDENTITY(false ? _GLF_FUZZED(_GLF_IDENTITY(277.353, min(277.353, 277.353))) : 1.0, max(false ? _GLF_FUZZED(_GLF_IDENTITY(277.353, min(277.353, 277.353))) : 1.0, _GLF_IDENTITY(false, (false) && true) ? _GLF_FUZZED(_GLF_IDENTITY(277.353, min(277.353, 277.353))) : 1.0))))) / 1.0)))))), float(_GLF_FUZZED(-3019.2749)), bool(false)))) * 1.0), bool(true)))) / 1.0)) : _GLF_FUZZED(-3945.4938)))) - 0.0)))), float(_GLF_IDENTITY(_GLF_IDENTITY(1.0, (true ? _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(277.353) : 1.0)) : _GLF_FUZZED(-3945.4938))), (_GLF_IDENTITY(1.0, (true ? _GLF_IDENTITY(1.0, _GLF_IDENTITY((_GLF_IDENTITY(false ? _GLF_FUZZED(_GLF_IDENTITY(277.353, min(277.353, 277.353))) : 1.0, (_GLF_IDENTITY(false ? _GLF_FUZZED(_GLF_IDENTITY(277.353, min(277.353, 277.353))) : 1.0, max(_GLF_IDENTITY(false ? _GLF_FUZZED(_GLF_IDENTITY(277.353, min(_GLF_IDENTITY(277.353, 1.0 * (277.353)), 277.353))) : 1.0, mix(float(_GLF_IDENTITY(false, false || (false)) ? _GLF_FUZZED(_GLF_IDENTITY(_GLF_IDENTITY(277.353, min(277.353, 277.353)), mix(float(_GLF_IDENTITY(277.353, min(277.353, 277.353))), float(_GLF_FUZZED(16.86)), bool(false)))) : 1.0), _GLF_IDENTITY(float(_GLF_IDENTITY(_GLF_FUZZED(9.7), (_GLF_IDENTITY(_GLF_FUZZED(9.7), mix(float(_GLF_FUZZED(5.0)), float(_GLF_IDENTITY(_GLF_FUZZED(9.7), mix(float(_GLF_FUZZED(9.7)), float(_GLF_FUZZED(-1.1)), bool(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) && true))))))), bool(true)))) - 0.0)), mix(float(float(_GLF_IDENTITY(_GLF_FUZZED(9.7), (_GLF_IDENTITY(_GLF_FUZZED(9.7), mix(float(_GLF_FUZZED(5.0)), float(_GLF_IDENTITY(_GLF_FUZZED(9.7), mix(float(_GLF_FUZZED(9.7)), float(_GLF_FUZZED(-1.1)), bool(false)))), bool(true)))) - 0.0))), float(_GLF_FUZZED(vec3(1.0, -8954.5795, 942.896).g)), bool(false))), bool(false))), _GLF_IDENTITY(false ? _GLF_FUZZED(_GLF_IDENTITY(277.353, min(277.353, 277.353))) : 1.0, max(false ? _GLF_FUZZED(_GLF_IDENTITY(277.353, min(277.353, 277.353))) : 1.0, _GLF_IDENTITY(false, _GLF_IDENTITY((false), true && ((false))) && true) ? _GLF_FUZZED(_GLF_IDENTITY(277.353, min(277.353, 277.353))) : 1.0))))) / 1.0)), (_GLF_IDENTITY((_GLF_IDENTITY(false ? _GLF_FUZZED(_GLF_IDENTITY(277.353, min(277.353, 277.353))) : 1.0, (_GLF_IDENTITY(false ? _GLF_FUZZED(_GLF_IDENTITY(277.353, min(277.353, 277.353))) : 1.0, max(_GLF_IDENTITY(false ? _GLF_FUZZED(_GLF_IDENTITY(277.353, min(_GLF_IDENTITY(277.353, 1.0 * (277.353)), 277.353))) : 1.0, mix(float(false ? _GLF_FUZZED(_GLF_IDENTITY(_GLF_IDENTITY(277.353, min(277.353, 277.353)), mix(float(_GLF_IDENTITY(277.353, min(277.353, 277.353))), float(_GLF_FUZZED(16.86)), bool(false)))) : 1.0), _GLF_IDENTITY(float(_GLF_IDENTITY(_GLF_FUZZED(9.7), (_GLF_IDENTITY(_GLF_FUZZED(9.7), mix(float(_GLF_FUZZED(5.0)), float(_GLF_IDENTITY(_GLF_FUZZED(9.7), mix(float(_GLF_FUZZED(9.7)), float(_GLF_FUZZED(-1.1)), bool(false)))), bool(true)))) - 0.0)), mix(float(float(_GLF_IDENTITY(_GLF_FUZZED(9.7), (_GLF_IDENTITY(_GLF_FUZZED(9.7), mix(float(_GLF_FUZZED(5.0)), float(_GLF_IDENTITY(_GLF_FUZZED(9.7), mix(float(_GLF_FUZZED(9.7)), float(_GLF_FUZZED(-1.1)), bool(false)))), bool(true)))) - 0.0))), float(_GLF_FUZZED(vec3(1.0, -8954.5795, 942.896).g)), bool(false))), bool(false))), _GLF_IDENTITY(false ? _GLF_FUZZED(_GLF_IDENTITY(277.353, min(277.353, 277.353))) : 1.0, max(false ? _GLF_FUZZED(_GLF_IDENTITY(277.353, min(277.353, 277.353))) : 1.0, _GLF_IDENTITY(false, (false) && true) ? _GLF_FUZZED(_GLF_IDENTITY(277.353, min(277.353, 277.353))) : 1.0))))) / 1.0)), mix(float(_GLF_FUZZED(-800.056)), _GLF_IDENTITY(float((_GLF_IDENTITY(false ? _GLF_FUZZED(_GLF_IDENTITY(277.353, min(277.353, 277.353))) : _GLF_IDENTITY(1.0, mix(float(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-436.841)))), float(_GLF_FUZZED((2.1 - -1564.7646))), bool(false))), (_GLF_IDENTITY(false ? _GLF_FUZZED(_GLF_IDENTITY(277.353, min(277.353, 277.353))) : 1.0, max(_GLF_IDENTITY(false ? _GLF_FUZZED(_GLF_IDENTITY(277.353, min(_GLF_IDENTITY(277.353, 1.0 * (277.353)), 277.353))) : 1.0, mix(float(false ? _GLF_FUZZED(_GLF_IDENTITY(_GLF_IDENTITY(277.353, min(277.353, 277.353)), mix(float(_GLF_IDENTITY(277.353, min(277.353, 277.353))), float(_GLF_FUZZED(16.86)), bool(false)))) : 1.0), _GLF_IDENTITY(float(_GLF_IDENTITY(_GLF_FUZZED(9.7), (_GLF_IDENTITY(_GLF_FUZZED(9.7), mix(float(_GLF_FUZZED(5.0)), float(_GLF_IDENTITY(_GLF_FUZZED(9.7), mix(float(_GLF_FUZZED(9.7)), float(_GLF_FUZZED(-1.1)), bool(false)))), bool(true)))) - 0.0)), mix(float(float(_GLF_IDENTITY(_GLF_FUZZED(9.7), (_GLF_IDENTITY(_GLF_FUZZED(9.7), mix(float(_GLF_FUZZED(5.0)), float(_GLF_IDENTITY(_GLF_FUZZED(9.7), mix(float(_GLF_FUZZED(9.7)), float(_GLF_FUZZED(-1.1)), bool(_GLF_IDENTITY(false, bool(bool(false))))))), bool(true)))) - 0.0))), float(_GLF_FUZZED(vec3(1.0, -8954.5795, 942.896).g)), bool(false))), bool(false))), _GLF_IDENTITY(false ? _GLF_FUZZED(_GLF_IDENTITY(277.353, min(277.353, 277.353))) : 1.0, max(false ? _GLF_FUZZED(_GLF_IDENTITY(277.353, min(277.353, 277.353))) : 1.0, _GLF_IDENTITY(false, (false) && true) ? _GLF_FUZZED(_GLF_IDENTITY(277.353, min(277.353, 277.353))) : 1.0))))) / 1.0))), (_GLF_IDENTITY(float((_GLF_IDENTITY(false ? _GLF_FUZZED(_GLF_IDENTITY(277.353, min(277.353, 277.353))) : _GLF_IDENTITY(1.0, mix(float(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-436.841)))), float(_GLF_FUZZED((2.1 - -1564.7646))), bool(false))), (_GLF_IDENTITY(false ? _GLF_FUZZED(_GLF_IDENTITY(277.353, min(277.353, 277.353))) : 1.0, max(_GLF_IDENTITY(false ? _GLF_FUZZED(_GLF_IDENTITY(277.353, min(_GLF_IDENTITY(277.353, 1.0 * (277.353)), 277.353))) : 1.0, mix(float(false ? _GLF_FUZZED(_GLF_IDENTITY(_GLF_IDENTITY(277.353, min(277.353, 277.353)), mix(float(_GLF_IDENTITY(277.353, min(277.353, 277.353))), float(_GLF_FUZZED(16.86)), bool(false)))) : 1.0), _GLF_IDENTITY(float(_GLF_IDENTITY(_GLF_FUZZED(9.7), (_GLF_IDENTITY(_GLF_FUZZED(9.7), mix(float(_GLF_FUZZED(5.0)), float(_GLF_IDENTITY(_GLF_FUZZED(9.7), mix(float(_GLF_FUZZED(9.7)), float(_GLF_FUZZED(-1.1)), bool(false)))), bool(true)))) - 0.0)), mix(float(float(_GLF_IDENTITY(_GLF_FUZZED(9.7), (_GLF_IDENTITY(_GLF_FUZZED(9.7), mix(float(_GLF_FUZZED(5.0)), float(_GLF_IDENTITY(_GLF_FUZZED(9.7), mix(float(_GLF_FUZZED(9.7)), float(_GLF_FUZZED(-1.1)), bool(_GLF_IDENTITY(false, bool(bool(false))))))), bool(true)))) - 0.0))), float(_GLF_FUZZED(vec3(1.0, -8954.5795, 942.896).g)), bool(false))), bool(false))), _GLF_IDENTITY(false ? _GLF_FUZZED(_GLF_IDENTITY(277.353, min(277.353, 277.353))) : 1.0, max(false ? _GLF_FUZZED(_GLF_IDENTITY(277.353, min(277.353, 277.353))) : 1.0, _GLF_IDENTITY(false, (false) && true) ? _GLF_FUZZED(_GLF_IDENTITY(277.353, min(277.353, 277.353))) : 1.0))))) / 1.0))), mix(float(_GLF_IDENTITY(float((_GLF_IDENTITY(false ? _GLF_FUZZED(_GLF_IDENTITY(277.353, min(277.353, 277.353))) : _GLF_IDENTITY(1.0, mix(float(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-436.841)))), float(_GLF_FUZZED((2.1 - -1564.7646))), bool(false))), (_GLF_IDENTITY(false ? _GLF_FUZZED(_GLF_IDENTITY(277.353, min(277.353, 277.353))) : 1.0, max(_GLF_IDENTITY(false ? _GLF_FUZZED(_GLF_IDENTITY(277.353, min(_GLF_IDENTITY(277.353, 1.0 * (277.353)), 277.353))) : 1.0, mix(float(false ? _GLF_FUZZED(_GLF_IDENTITY(_GLF_IDENTITY(277.353, min(277.353, 277.353)), mix(float(_GLF_IDENTITY(277.353, min(277.353, 277.353))), float(_GLF_FUZZED(16.86)), bool(false)))) : 1.0), _GLF_IDENTITY(float(_GLF_IDENTITY(_GLF_FUZZED(9.7), (_GLF_IDENTITY(_GLF_FUZZED(9.7), mix(float(_GLF_FUZZED(5.0)), float(_GLF_IDENTITY(_GLF_FUZZED(9.7), mix(float(_GLF_FUZZED(9.7)), float(_GLF_FUZZED(-1.1)), bool(false)))), bool(true)))) - 0.0)), mix(float(float(_GLF_IDENTITY(_GLF_FUZZED(9.7), (_GLF_IDENTITY(_GLF_FUZZED(9.7), mix(float(_GLF_FUZZED(5.0)), float(_GLF_IDENTITY(_GLF_FUZZED(9.7), mix(float(_GLF_FUZZED(9.7)), float(_GLF_FUZZED(-1.1)), bool(_GLF_IDENTITY(false, bool(bool(false))))))), bool(true)))) - 0.0))), float(_GLF_FUZZED(vec3(1.0, -8954.5795, 942.896).g)), bool(false))), bool(false))), _GLF_IDENTITY(false ? _GLF_FUZZED(_GLF_IDENTITY(277.353, min(277.353, 277.353))) : 1.0, max(false ? _GLF_FUZZED(_GLF_IDENTITY(277.353, min(277.353, 277.353))) : 1.0, _GLF_IDENTITY(false, (false) && true) ? _GLF_FUZZED(_GLF_IDENTITY(277.353, min(277.353, 277.353))) : 1.0))))) / 1.0))), max(float((_GLF_IDENTITY(false ? _GLF_FUZZED(_GLF_IDENTITY(277.353, min(277.353, 277.353))) : _GLF_IDENTITY(1.0, mix(float(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-436.841)))), float(_GLF_FUZZED((2.1 - -1564.7646))), bool(false))), (_GLF_IDENTITY(false ? _GLF_FUZZED(_GLF_IDENTITY(277.353, min(277.353, 277.353))) : 1.0, max(_GLF_IDENTITY(false ? _GLF_FUZZED(_GLF_IDENTITY(277.353, min(_GLF_IDENTITY(277.353, 1.0 * (277.353)), 277.353))) : 1.0, mix(float(false ? _GLF_FUZZED(_GLF_IDENTITY(_GLF_IDENTITY(277.353, min(277.353, 277.353)), mix(float(_GLF_IDENTITY(277.353, min(277.353, 277.353))), float(_GLF_FUZZED(16.86)), bool(false)))) : 1.0), _GLF_IDENTITY(float(_GLF_IDENTITY(_GLF_FUZZED(9.7), (_GLF_IDENTITY(_GLF_FUZZED(9.7), mix(float(_GLF_FUZZED(5.0)), float(_GLF_IDENTITY(_GLF_FUZZED(9.7), mix(float(_GLF_FUZZED(9.7)), float(_GLF_FUZZED(-1.1)), bool(false)))), bool(true)))) - 0.0)), mix(float(float(_GLF_IDENTITY(_GLF_FUZZED(9.7), (_GLF_IDENTITY(_GLF_FUZZED(9.7), mix(float(_GLF_FUZZED(5.0)), float(_GLF_IDENTITY(_GLF_FUZZED(9.7), mix(float(_GLF_FUZZED(9.7)), float(_GLF_FUZZED(-1.1)), bool(_GLF_IDENTITY(false, bool(bool(false))))))), bool(true)))) - 0.0))), float(_GLF_FUZZED(vec3(1.0, -8954.5795, 942.896).g)), bool(false))), bool(false))), _GLF_IDENTITY(false ? _GLF_FUZZED(_GLF_IDENTITY(277.353, min(277.353, 277.353))) : 1.0, max(false ? _GLF_FUZZED(_GLF_IDENTITY(277.353, min(277.353, 277.353))) : 1.0, _GLF_IDENTITY(false, (false) && true) ? _GLF_FUZZED(_GLF_IDENTITY(277.353, min(277.353, 277.353))) : 1.0))))) / 1.0))), float((_GLF_IDENTITY(false ? _GLF_FUZZED(_GLF_IDENTITY(277.353, min(277.353, 277.353))) : _GLF_IDENTITY(1.0, mix(float(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-436.841)))), float(_GLF_FUZZED((2.1 - -1564.7646))), bool(false))), (_GLF_IDENTITY(false ? _GLF_FUZZED(_GLF_IDENTITY(277.353, min(277.353, 277.353))) : 1.0, max(_GLF_IDENTITY(false ? _GLF_FUZZED(_GLF_IDENTITY(277.353, min(_GLF_IDENTITY(277.353, 1.0 * (277.353)), 277.353))) : 1.0, mix(float(false ? _GLF_FUZZED(_GLF_IDENTITY(_GLF_IDENTITY(277.353, min(277.353, 277.353)), mix(float(_GLF_IDENTITY(277.353, min(277.353, 277.353))), float(_GLF_FUZZED(16.86)), bool(false)))) : 1.0), _GLF_IDENTITY(float(_GLF_IDENTITY(_GLF_FUZZED(9.7), (_GLF_IDENTITY(_GLF_FUZZED(9.7), mix(float(_GLF_FUZZED(5.0)), float(_GLF_IDENTITY(_GLF_FUZZED(9.7), mix(float(_GLF_FUZZED(9.7)), float(_GLF_FUZZED(-1.1)), bool(false)))), bool(true)))) - 0.0)), mix(float(float(_GLF_IDENTITY(_GLF_FUZZED(9.7), (_GLF_IDENTITY(_GLF_FUZZED(9.7), mix(float(_GLF_FUZZED(5.0)), float(_GLF_IDENTITY(_GLF_FUZZED(9.7), mix(float(_GLF_FUZZED(9.7)), float(_GLF_FUZZED(-1.1)), bool(_GLF_IDENTITY(false, bool(bool(false))))))), bool(true)))) - 0.0))), float(_GLF_FUZZED(vec3(1.0, -8954.5795, 942.896).g)), bool(false))), bool(false))), _GLF_IDENTITY(false ? _GLF_FUZZED(_GLF_IDENTITY(277.353, min(277.353, 277.353))) : 1.0, max(false ? _GLF_FUZZED(_GLF_IDENTITY(277.353, min(277.353, 277.353))) : 1.0, _GLF_IDENTITY(false, (false) && true) ? _GLF_FUZZED(_GLF_IDENTITY(277.353, min(277.353, 277.353))) : 1.0))))) / 1.0)))))), float(_GLF_FUZZED(-3019.2749)), bool(false)))) * 1.0), bool(true)))) / 1.0)) : _GLF_FUZZED(-3945.4938)))) - 0.0)))), bool(true)))), sin(0.0), 0.0, 1.0)))), float(vec2(float(mat2x3(injectionSwitch.x, 1.0, 1.0, 0.0, 1.0, determinant(mat4(1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, log(1.0), sin(0.0), 0.0, 1.0)))), 0.0)))) > injectionSwitch.y), _GLF_IDENTITY(bool(bvec2((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x, _GLF_IDENTITY(float(mat2x3(injectionSwitch.x, 1.0, 1.0, 0.0, 1.0, determinant(_GLF_IDENTITY(mat4(1.0, _GLF_IDENTITY(1.0, clamp(1.0, 1.0, _GLF_IDENTITY(1.0, float(mat3x4(1.0, 1.0, 1.0, 1.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0, 1.0, 0.0, round(length(normalize(vec2(1.0, 1.0)))), 1.0))))), 1.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(0.0, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 0.0 : _GLF_FUZZED(7988.3116))), 1.0, _GLF_IDENTITY(_GLF_IDENTITY(0.0, float(mat3(0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, _GLF_IDENTITY(dot(vec4(1.0, 0.0, 0.0, _GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(0.0, 0.0)), dot(vec2(1.0, 1.0), _GLF_IDENTITY(vec2(0.0, 0.0), max(_GLF_IDENTITY(vec2(0.0, 0.0), vec2(mat3x2(vec2(0.0, 0.0), 1.0, abs(1.0), 1.0, _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(29.39)))))), vec2(0.0, 0.0)))))), vec4(1.0, 0.0, 0.0, 0.0)), _GLF_IDENTITY(dot(vec4(1.0, 0.0, 0.0, _GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(0.0, 0.0)), dot(vec2(1.0, 1.0), vec2(0.0, 0.0)))), vec4(1.0, 0.0, 0.0, 0.0)), (true ? dot(vec4(1.0, 0.0, 0.0, _GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(0.0, 0.0)), dot(vec2(1.0, 1.0), vec2(0.0, 0.0)))), vec4(1.0, 0.0, 0.0, 0.0)) : _GLF_FUZZED(-9165.1795))))))), (_GLF_IDENTITY(0.0, float(mat3(0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, _GLF_IDENTITY(dot(vec4(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-0.3)), float(_GLF_IDENTITY(1.0, max(1.0, 1.0))), bool(true))), 0.0, 0.0, _GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(0.0, 0.0)), dot(vec2(1.0, 1.0), _GLF_IDENTITY(vec2(0.0, 0.0), max(_GLF_IDENTITY(vec2(0.0, 0.0), vec2(mat3x2(vec2(0.0, 0.0), 1.0, abs(1.0), 1.0, _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(29.39)))))), vec2(0.0, 0.0)))))), vec4(1.0, 0.0, 0.0, 0.0)), dot(vec4(1.0, 0.0, 0.0, _GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(0.0, 0.0)), dot(vec2(1.0, 1.0), vec2(0.0, 0.0)))), vec4(1.0, 0.0, 0.0, 0.0))))))) * round(length(normalize(vec3(1.0, 1.0, 1.0))))), 0.0, 1.0, 0.0, log(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(injectionSwitch.y)))), sin(0.0), 0.0, 1.0), (_GLF_IDENTITY(mat4(1.0, _GLF_IDENTITY(1.0, clamp(1.0, 1.0, _GLF_IDENTITY(_GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(46.79)), bool(false))), 1.0)), _GLF_IDENTITY(float(mat3x4(1.0, 1.0, 1.0, 1.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0, 1.0, 0.0, round(length(normalize(vec2(1.0, 1.0)))), _GLF_IDENTITY(1.0, (1.0) / 1.0))), max(float(mat3x4(1.0, 1.0, 1.0, 1.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0, 1.0, 0.0, round(length(normalize(vec2(_GLF_IDENTITY(1.0, max(1.0, 1.0)), 1.0)))), _GLF_IDENTITY(1.0, (1.0) / 1.0))), float(mat3x4(1.0, 1.0, 1.0, 1.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, _GLF_IDENTITY(_GLF_IDENTITY(1.0, determinant(mat4(1.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0)) * (1.0)), clamp(_GLF_IDENTITY(1.0, determinant(mat4(1.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0)) * (1.0)), _GLF_IDENTITY(1.0, determinant(mat4(1.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0)) * (1.0)), _GLF_IDENTITY(1.0, determinant(mat4(1.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0)) * (1.0)))), 1.0, 0.0, round(length(normalize(vec2(1.0, 1.0)))), _GLF_IDENTITY(1.0, _GLF_IDENTITY((1.0) / 1.0, _GLF_IDENTITY(float(_GLF_IDENTITY(float((1.0) / 1.0), max(float((1.0) / 1.0), float((1.0) / 1.0)))), mix(float(_GLF_FUZZED(-7.7)), float(_GLF_IDENTITY(float(_GLF_IDENTITY(float((1.0) / 1.0), max(float((1.0) / 1.0), float((1.0) / 1.0)))), float(mat2x3(float(_GLF_IDENTITY(float((1.0) / 1.0), max(float((1.0) / 1.0), float((1.0) / 1.0)))), 1.0, 0.0, 0.0, 1.0, 1.0)))), bool(true)))))))))))), 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, log(1.0), sin(0.0), 0.0, 1.0), (_GLF_IDENTITY(true ? mat4(1.0, _GLF_IDENTITY(_GLF_IDENTITY(1.0, (1.0) - 0.0), _GLF_IDENTITY(clamp(1.0, 1.0, _GLF_IDENTITY(1.0, float(mat3x4(1.0, 1.0, 1.0, 1.0, 0.0, _GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), (_GLF_ONE(1.0, injectionSwitch.y)) - 0.0), 0.0, 1.0, 1.0, 0.0, round(length(normalize(vec2(1.0, 1.0)))), 1.0)))), max(clamp(1.0, 1.0, _GLF_IDENTITY(1.0, float(mat3x4(1.0, 1.0, 1.0, 1.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0, 1.0, 0.0, round(length(normalize(vec2(1.0, 1.0)))), 1.0)))), clamp(1.0, 1.0, _GLF_IDENTITY(1.0, float(mat3x4(1.0, 1.0, 1.0, 1.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0, 1.0, 0.0, round(length(normalize(vec2(1.0, 1.0)))), 1.0))))))), 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, log(1.0), sin(0.0), 0.0, 1.0) : _GLF_FUZZED((7647.5759 + mat4(24.26, 1.8, -567.421, 62.62, 52.74, -192.944, 636.991, -375.802, 2.5, 3.6, -9017.3361, -2419.7843, 88.50, -35.29, -703.120, 395.410))), (_GLF_IDENTITY(true ? mat4(1.0, _GLF_IDENTITY(_GLF_IDENTITY(1.0, (1.0) - 0.0), _GLF_IDENTITY(clamp(1.0, 1.0, _GLF_IDENTITY(1.0, float(mat3x4(1.0, 1.0, 1.0, 1.0, 0.0, _GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), (_GLF_ONE(1.0, injectionSwitch.y)) - 0.0), 0.0, 1.0, 1.0, 0.0, round(length(normalize(vec2(_GLF_IDENTITY(1.0, max(1.0, 1.0)), 1.0)))), 1.0)))), max(clamp(1.0, 1.0, _GLF_IDENTITY(1.0, float(mat3x4(1.0, _GLF_IDENTITY(1.0, max(1.0, 1.0)), 1.0, 1.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0, 1.0, 0.0, round(length(normalize(vec2(1.0, 1.0)))), 1.0)))), clamp(1.0, 1.0, _GLF_IDENTITY(1.0, float(mat3x4(1.0, 1.0, 1.0, 1.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0, 1.0, 0.0, round(length(normalize(vec2(1.0, 1.0)))), 1.0))))))), 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, log(1.0), sin(0.0), 0.0, 1.0) : _GLF_FUZZED((7647.5759 + mat4(24.26, 1.8, -567.421, 62.62, 52.74, -192.944, 636.991, -375.802, 2.5, 3.6, -9017.3361, -2419.7843, 88.50, -35.29, -703.120, 395.410))), mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0) + (true ? mat4(1.0, _GLF_IDENTITY(_GLF_IDENTITY(1.0, (1.0) - 0.0), _GLF_IDENTITY(clamp(1.0, 1.0, _GLF_IDENTITY(1.0, float(mat3x4(1.0, 1.0, 1.0, 1.0, 0.0, _GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), (_GLF_ONE(1.0, injectionSwitch.y)) - 0.0), 0.0, 1.0, 1.0, 0.0, round(length(normalize(vec2(1.0, 1.0)))), 1.0)))), max(clamp(1.0, 1.0, _GLF_IDENTITY(1.0, float(mat3x4(1.0, 1.0, 1.0, 1.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0, 1.0, 0.0, round(length(normalize(vec2(1.0, 1.0)))), 1.0)))), clamp(1.0, 1.0, _GLF_IDENTITY(1.0, float(mat3x4(1.0, 1.0, 1.0, 1.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0, 1.0, 0.0, round(length(normalize(vec2(1.0, 1.0)))), 1.0))))))), 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, log(1.0), sin(0.0), 0.0, 1.0) : _GLF_FUZZED((7647.5759 + mat4(24.26, 1.8, -567.421, 62.62, 52.74, -192.944, 636.991, -375.802, 2.5, 3.6, -9017.3361, -2419.7843, 88.50, -35.29, -703.120, 395.410)))))) - mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))))) * mat4(_GLF_ONE(1.0, injectionSwitch.y)))))), float(vec2(float(mat2x3(injectionSwitch.x, 1.0, 1.0, 0.0, 1.0, determinant(mat4(1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, log(1.0), sin(0.0), 0.0, 1.0)))), 0.0)))) > injectionSwitch.y), false)), _GLF_IDENTITY((bool(bvec2((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), injectionSwitch, injectionSwitch)).x, _GLF_IDENTITY(float(mat2x3(injectionSwitch.x, 1.0, 1.0, 0.0, 1.0, determinant(mat4(1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, log(_GLF_IDENTITY(1.0, (1.0) / 1.0)), sin(0.0), 0.0, 1.0)))), float(vec2(float(mat2x3(injectionSwitch.x, 1.0, _GLF_IDENTITY(1.0, min(1.0, 1.0)), 0.0, 1.0, determinant(mat4(1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, _GLF_IDENTITY(0.0, mix(float(_GLF_IDENTITY(0.0, min(0.0, 0.0))), float(_GLF_FUZZED((-738.159))), bool(false))), 1.0, 0.0, log(1.0), sin(0.0), 0.0, 1.0)))), 0.0)))) > _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - determinant(mat2(0.0, 1.0, 0.0, 0.0))), injectionSwitch.y, injectionSwitch.y))), false))) || false, false || (_GLF_IDENTITY((bool(bvec2((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), injectionSwitch, injectionSwitch)).x, _GLF_IDENTITY(float(mat2x3(injectionSwitch.x, 1.0, 1.0, 0.0, 1.0, determinant(mat4(1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, log(_GLF_IDENTITY(1.0, (1.0) / 1.0)), sin(0.0), 0.0, 1.0)))), float(vec2(float(mat2x3(injectionSwitch.x, 1.0, _GLF_IDENTITY(1.0, min(1.0, 1.0)), 0.0, 1.0, determinant(mat4(1.0, 1.0, _GLF_IDENTITY(1.0, min(1.0, 1.0)), 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, _GLF_IDENTITY(0.0, mix(float(_GLF_IDENTITY(0.0, min(0.0, 0.0))), float(_GLF_FUZZED((-738.159))), bool(false))), 1.0, 0.0, log(1.0), sin(0.0), 0.0, 1.0)))), 0.0)))) > _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY((injectionSwitch.y) - determinant(mat2(0.0, 1.0, 0.0, 0.0)), ((injectionSwitch.y) - determinant(mat2(0.0, 1.0, 0.0, 0.0))) - 0.0)), injectionSwitch.y, injectionSwitch.y))), false))) || false, (_GLF_IDENTITY((bool(bvec2((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), injectionSwitch, injectionSwitch)).x, _GLF_IDENTITY(float(mat2x3(injectionSwitch.x, 1.0, 1.0, 0.0, 1.0, determinant(mat4(1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, log(_GLF_IDENTITY(1.0, (1.0) / 1.0)), sin(0.0), 0.0, 1.0)))), float(vec2(float(mat2x3(injectionSwitch.x, 1.0, _GLF_IDENTITY(1.0, min(1.0, 1.0)), 0.0, 1.0, determinant(mat4(1.0, 1.0, _GLF_IDENTITY(1.0, min(1.0, 1.0)), 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, _GLF_IDENTITY(0.0, mix(float(_GLF_IDENTITY(0.0, min(0.0, 0.0))), float(_GLF_FUZZED((-738.159))), bool(false))), 1.0, 0.0, log(1.0), sin(0.0), 0.0, 1.0)))), 0.0)))) > _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY((injectionSwitch.y) - determinant(mat2(0.0, 1.0, 0.0, 0.0)), ((injectionSwitch.y) - determinant(mat2(0.0, 1.0, 0.0, 0.0))) - 0.0)), injectionSwitch.y, injectionSwitch.y))), false))) || false, ((bool(bvec2((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), injectionSwitch, injectionSwitch)).x, _GLF_IDENTITY(float(mat2x3(injectionSwitch.x, 1.0, 1.0, 0.0, 1.0, determinant(mat4(1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, log(_GLF_IDENTITY(1.0, (1.0) / 1.0)), sin(0.0), 0.0, 1.0)))), float(vec2(float(mat2x3(injectionSwitch.x, 1.0, _GLF_IDENTITY(1.0, min(1.0, 1.0)), 0.0, 1.0, determinant(mat4(1.0, 1.0, _GLF_IDENTITY(1.0, min(1.0, 1.0)), _GLF_IDENTITY(0.0, (0.0) + 0.0), 0.0, 1.0, 0.0, 1.0, 0.0, _GLF_IDENTITY(0.0, mix(float(_GLF_IDENTITY(0.0, min(0.0, 0.0))), float(_GLF_FUZZED((-738.159))), bool(false))), 1.0, 0.0, log(1.0), sin(0.0), 0.0, 1.0)))), 0.0)))) > _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY((injectionSwitch.y) - determinant(mat2(0.0, 1.0, 0.0, 0.0)), ((injectionSwitch.y) - determinant(mat2(0.0, 1.0, 0.0, 0.0))) - 0.0)), injectionSwitch.y, injectionSwitch.y))), false))) || false) && true)) && true))))))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         else
          {
          }
         return;
         if(_GLF_DEAD(false))
          barrier();
        }
       do
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
          }
         do
          {
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
              {
               barrier();
              }
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
         do
          {
           return;
          }
         while(_GLF_WRAPPED_LOOP(false));
         do
          {
           if(_GLF_DEAD(false))
            return;
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
        }
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, false)))))
        continue;
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))))))))
        break;
       if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            continue;
           barrier();
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
        }
       else
        {
        }
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = (1 & ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5)))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 & -93474)); _injected_loop_counter --)
        {
         barrier();
        }
      }
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         barrier();
        }
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   do
    {
     return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
       barrier();
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, ! (! (false))), false, false, true)))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       return;
      }
     return;
    }
   else
    {
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
      return;
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
  }
 if(_GLF_DEAD(false))
  {
   do
    {
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(-0.5) : injectionSwitch.x)) > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, false || (true))))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             return;
            }
           else
            {
            }
          }
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))
          barrier();
        }
       barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(_GLF_IDENTITY(mat3x4(injectionSwitch.y, 0.0, abs(0.0), 1.0, 1.0, 1.0, 0.0, sin(0.0), 0.0, 1.0, _GLF_IDENTITY(dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(exp(0.0), 0.0, 0.0, 0.0)), dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(exp(0.0), 0.0, _GLF_IDENTITY(0.0, float(float(0.0))), 0.0))), 0.0), _GLF_IDENTITY(mat3x4(mat4(_GLF_IDENTITY(mat3x4(injectionSwitch.y, 0.0, abs(0.0), 1.0, 1.0, 1.0, 0.0, sin(0.0), 0.0, 1.0, _GLF_IDENTITY(dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(exp(0.0), 0.0, 0.0, 0.0)), dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(exp(0.0), 0.0, 0.0, 0.0))), 0.0), (true ? mat3x4(injectionSwitch.y, 0.0, abs(0.0), 1.0, 1.0, 1.0, 0.0, sin(0.0), 0.0, 1.0, _GLF_IDENTITY(dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(exp(0.0), 0.0, 0.0, 0.0)), dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(exp(0.0), 0.0, 0.0, 0.0))), 0.0) : _GLF_FUZZED(mat3x4(-10.59, -314.768, -8786.0666, 737.948, -7.0, -872.727, -4.1, -6.1, -6.6, -4.4, 1.5, -9.7)))))), (mat3x4(mat4(_GLF_IDENTITY(mat3x4(injectionSwitch.y, 0.0, abs(0.0), 1.0, 1.0, 1.0, 0.0, sin(0.0), 0.0, 1.0, _GLF_IDENTITY(dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(exp(_GLF_IDENTITY(0.0, (0.0) + 0.0)), 0.0, 0.0, 0.0)), dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(exp(0.0), 0.0, 0.0, 0.0))), 0.0), (true ? mat3x4(injectionSwitch.y, 0.0, abs(0.0), 1.0, 1.0, 1.0, 0.0, sin(0.0), 0.0, 1.0, _GLF_IDENTITY(dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(exp(0.0), 0.0, 0.0, 0.0)), dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(exp(0.0), 0.0, 0.0, 0.0))), 0.0) : _GLF_FUZZED(mat3x4(-10.59, -314.768, -8786.0666, 737.948, -7.0, -872.727, -4.1, -6.1, -6.6, -4.4, 1.5, -9.7))))))) * mat3(1.0))))))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))
        return;
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false))), bool(bvec4(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))))
        return;
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false)))) || false))
            {
             if(_GLF_DEAD(false))
              barrier();
             do
              {
               barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
          }
         else
          {
          }
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
              }
             else
              {
               barrier();
              }
            }
          }
         else
          {
          }
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 do
                  {
                   do
                    {
                     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      {
                      }
                     else
                      {
                       if(_GLF_DEAD(false))
                        return;
                      }
                     barrier();
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                 if(_GLF_DEAD(false))
                  barrier();
                }
              }
             return;
            }
          }
         return;
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     do
      {
       return;
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 ^ 0)); _injected_loop_counter ++)
      {
       return;
      }
    }
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (true)))))
      {
       do
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
       do
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bvec4(false, false, true, false)))))
              {
              }
             else
              {
               barrier();
              }
            }
           return;
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           barrier();
          }
         else
          {
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, (false) || false), false, true))), (injectionSwitch.x > injectionSwitch.y))))
        {
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        }
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         do
          {
           if(_GLF_DEAD(false))
            break;
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(false))
                barrier();
              }
             else
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 if(_GLF_DEAD(false))
                  barrier();
                }
               else
                {
                 if(_GLF_DEAD(false))
                  break;
                 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(6.5)), float(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))), bool(true))) > injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(6.5)), float(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))), bool(true))) > injectionSwitch.y))))))
                  break;
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     if(_GLF_DEAD(false))
                      return;
                    }
                   else
                    {
                    }
                   barrier();
                  }
                 if(_GLF_DEAD(false))
                  return;
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, _GLF_IDENTITY(false, (false) || false), true)), ! (! (bool(bvec3(false, _GLF_IDENTITY(false, (false) || false), true)))))), (injectionSwitch.x > injectionSwitch.y))))
                    {
                     do
                      {
                       barrier();
                      }
                     while(_GLF_WRAPPED_LOOP(false));
                    }
                   barrier();
                  }
                 for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(7), int(7))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                  {
                   barrier();
                  }
                }
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch)).y))))
                  barrier();
                 barrier();
                }
              }
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(false))
                barrier();
              }
             else
              {
              }
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        }
       else
        {
        }
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_GLF_DEAD(false), true), bvec2(bvec3(bvec2(_GLF_DEAD(false), true), false)))), true && (bool(_GLF_IDENTITY(bvec2(_GLF_DEAD(false), true), bvec2(bvec3(bvec2(_GLF_DEAD(false), true), false))))))))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             barrier();
            }
           if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
            barrier();
           barrier();
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0) > injectionSwitch.y))))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(false))
                return;
               for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(3), int(3))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                {
                 do
                  {
                   barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
              }
            }
          }
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-531.088)), float(injectionSwitch.y), bool(true)))))))
              return;
            }
           barrier();
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), (! _GLF_IDENTITY(((injectionSwitch.x > injectionSwitch.y)), ! (! (((injectionSwitch.x > injectionSwitch.y)))))) && true))))))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         return;
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), bool(_GLF_IDENTITY(bvec3(_GLF_WRAPPED_IF_FALSE(false), true, true), bvec3(bvec3(bvec3(_GLF_WRAPPED_IF_FALSE(false), true, true)))))))
    {
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 barrier();
                }
              }
             else
              {
              }
             barrier();
            }
          }
        }
       return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
    }
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(0.8)), vec2(_GLF_FUZZED(1.6), (injectionSwitch)[1]), bvec2(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))).y))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      return;
     barrier();
     for(int _injected_loop_counter = (0 ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      break;
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), true && (_GLF_IDENTITY(false, false || _GLF_IDENTITY((false), ((false)) && true))))))
  barrier();
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bool(false)))))), (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 do
  {
   if(_GLF_DEAD(false))
    return;
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x < injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   do
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
   do
    {
     if(_GLF_DEAD(false))
      return;
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
    }
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     do
      {
       do
        {
         return;
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)), ! (_GLF_IDENTITY(! (bool(bvec4(false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))), true && (! (bool(bvec4(false, false, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, float(mat3(injectionSwitch.x, 0.0, 1.0, 0.0, 0.0, 0.0, round(length(normalize(vec2(1.0, 1.0)))), sin(0.0), 0.0))) < injectionSwitch.y)), true))))))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     return;
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, bool(bvec3(true, true, true)))) || false)))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (false)))))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 return;
                }
               else
                {
                }
              }
             barrier();
            }
          }
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               barrier();
              }
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               barrier();
              }
             else
              {
              }
            }
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, bool(bvec4(true, true, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), (injectionSwitch.x < injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   barrier();
                  }
                }
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 return;
                }
              }
            }
           else
            {
            }
          }
         else
          {
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              return;
             barrier();
            }
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             return;
            }
          }
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
              barrier();
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
              {
               return;
              }
            }
          }
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
           for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, false)))))
                barrier();
               barrier();
              }
            }
           if(_GLF_DEAD(false))
            barrier();
          }
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              return;
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               barrier();
              }
            }
           return;
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
              {
               barrier();
              }
            }
          }
         barrier();
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
              }
             else
              {
               barrier();
              }
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
            {
             for(int _injected_loop_counter = ((0 ^ 0) | 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 >> _GLF_IDENTITY(int(3), int(3)))); _injected_loop_counter --)
              {
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 barrier();
                }
              }
             if(_GLF_DEAD(false))
              return;
             if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
              barrier();
            }
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)))))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           if(_GLF_DEAD(false))
            {
             do
              {
               do
                {
                 barrier();
                 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
                  continue;
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
            }
           barrier();
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x < injectionSwitch.y))))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(0.1))) > injectionSwitch.y))))
                barrier();
               if(_GLF_DEAD(false))
                return;
              }
             else
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                  {
                   barrier();
                  }
                 else
                  {
                  }
                }
              }
            }
          }
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             barrier();
            }
           else
            {
            }
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 ^ int(_GLF_ONE(1.0, injectionSwitch.y)))); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
            {
             barrier();
            }
          }
        }
      }
    }
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bool(false)))))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(_GLF_IDENTITY(! (false), _GLF_IDENTITY(bool(bool(! (false))), bool(bvec2(bool(bool(! (false))), false)))), ! (_GLF_IDENTITY(! (! (false)), (! (! (false))) || false)))))))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   for(int _injected_loop_counter = _GLF_IDENTITY(1, clamp(1, 1, 1)); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 | 0)); _injected_loop_counter --)
    {
     barrier();
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
    }
  }
 uint workgroup_base = workgroup_size * workgroup_id;
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     do
      {
       return;
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, false)))))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, true, true)), bool(bvec2(bool(bvec3(false, true, true)), false))))));
        }
      }
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       return;
      }
     else
      {
      }
    }
   else
    {
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec2(false, false)))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))) && true)))
      return;
    }
   else
    {
    }
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 do
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       barrier();
      }
     else
      {
      }
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, true && _GLF_IDENTITY(_GLF_IDENTITY((false), ! (! ((false)))), true && ((false))))))
    {
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_DEAD(false))
      {
       do
        {
         if(_GLF_DEAD(false))
          return;
        }
       while(_GLF_WRAPPED_LOOP(false));
       barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
        barrier();
      }
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(86.02)), bool(false)))))))))) || false))
      continue;
     barrier();
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 GLF_merged3_0_1_16_1_1_11_2_1_14next_virtual_gidvirtual_gidworkgroup_base.z = workgroup_base;
 uint virtual_gid = GLF_merged3_0_1_16_1_1_11_2_1_14next_virtual_gidvirtual_gidworkgroup_base.z + subgroup_id * subgroup_size + subgroup_local_id;
 GLF_merged3_0_1_16_1_1_11_2_1_14next_virtual_gidvirtual_gidworkgroup_base.y = virtual_gid;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bool(_GLF_IDENTITY(bvec2(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false), bvec2(bvec4(bvec2(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false), true, false))))))))
    {
     barrier();
    }
   else
    {
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint next_virtual_gid = GLF_merged3_0_1_16_1_1_11_2_1_14next_virtual_gidvirtual_gidworkgroup_base.z + subgroup_id * subgroup_size + ((subgroup_local_id + 1) % subgroup_size);
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     for(int _injected_loop_counter = (0 ^ 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       barrier();
      }
    }
   return;
  }
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, true && (true)), (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(vec4(injectionSwitch, 1.0, 0.0)), max(vec2(vec4(injectionSwitch, 1.0, 0.0)), _GLF_IDENTITY(vec2(vec4(injectionSwitch, 1.0, 0.0)), clamp(_GLF_IDENTITY(vec2(vec4(injectionSwitch, 1.0, 0.0)), clamp(_GLF_IDENTITY(vec2(vec4(injectionSwitch, 1.0, 0.0)), mat2(1.0) * (vec2(vec4(injectionSwitch, 1.0, 0.0)))), vec2(vec4(injectionSwitch, 1.0, 0.0)), vec2(vec4(injectionSwitch, 1.0, 0.0)))), vec2(vec4(injectionSwitch, 1.0, 0.0)), vec2(vec4(injectionSwitch, 1.0, 0.0))))))))).x < injectionSwitch.y))))
  {
   GLF_merged3_0_1_16_1_1_11_2_1_14next_virtual_gidvirtual_gidworkgroup_base.x = next_virtual_gid;
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, ! (! (false))), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         return;
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
        }
      }
     else
      {
      }
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)))))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         barrier();
        }
       if(_GLF_DEAD(false))
        return;
       for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 ^ (0 | (0 << _GLF_IDENTITY(int(8), int(8)))))); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
          {
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
      }
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
    }
   do
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, true && _GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), bool(_GLF_IDENTITY(bvec3(! ((false)), true, false), bvec3(bvec3(bvec3(! ((false)), true, false)))))))))))
      return;
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 << _GLF_IDENTITY(int(_GLF_IDENTITY(4, clamp(4, 4, 4))), int(4)))); _injected_loop_counter --)
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(fma(162.904, -6059.5773, 9079.4729)) : injectionSwitch.x)) > injectionSwitch.y))));
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         do
          {
           if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
         barrier();
        }
       if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (! (false)))))))
            barrier();
           continue;
          }
         barrier();
        }
      }
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (true)))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 else
  {
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bvec2(false, true)))))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
   buf[GLF_merged3_0_1_16_1_1_11_2_1_14next_virtual_gidvirtual_gidworkgroup_base.y] = 1;
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, bool(bvec2(false, true)))))))
  return;
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < ((((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), int(_GLF_IDENTITY(ivec4(int(6), 1, 1, 1), (false ? _GLF_FUZZED(ivec4(57826, 93154, 72835, 3)) : _GLF_IDENTITY(ivec4(int(6), 1, 1, 1), max(ivec4(int(6), 1, 1, _GLF_IDENTITY(1, (_GLF_IDENTITY(1, 0 | (1))) >> 0)), ivec4(int(6), 1, 1, _GLF_IDENTITY(1, (1) / 1)))))))))) << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6)))); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    continue;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      break;
     barrier();
     if(_GLF_DEAD(false))
      continue;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    break;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((false) && true, (_GLF_IDENTITY((false) && true, bool(bvec3((false) && true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))) || false))))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   barrier();
  }
 do
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), (_GLF_WRAPPED_IF_TRUE(true)) || false))
      {
       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, false || (false)))) && true))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
        }
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
      }
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y)); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != 0, _GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), false || (! ((injectionSwitch.x > injectionSwitch.y))))))) || (_injected_loop_counter != 0))); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           barrier();
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bool((injectionSwitch.x > injectionSwitch.y)))))))
          break;
        }
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 do
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (! (! (false)))))))
    {
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)))).x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         barrier();
         if(_GLF_DEAD(false))
          return;
        }
       if(_GLF_DEAD(false))
        return;
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bool(false)))));
     return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bool(false))), (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      continue;
     barrier();
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 if(_GLF_DEAD(false))
  barrier();
 if(subgroup_local_id + 1 < subgroup_size)
  {
   do
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
   do
    {
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 & 1)); _injected_loop_counter ++)
        {
         return;
        }
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, (false) || false)))))
      continue;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      return;
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   buf[GLF_merged3_0_1_16_1_1_11_2_1_14next_virtual_gidvirtual_gidworkgroup_base.x] = 2;
   subgroupAll(false);
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
    barrier();
   for(int _injected_loop_counter = (0 ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), injectionSwitch.y))); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      break;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(-16.12), _GLF_FUZZED(0.0)), bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))).y), bool(bvec3(_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(-16.12), _GLF_FUZZED(0.0)), bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))).y), bool(bvec4((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(-16.12), _GLF_FUZZED(0.0)), bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))).y), false, true, false))), false, false))), false, true), bvec3(bvec3(bvec3((injectionSwitch.x > injectionSwitch.y), false, true))))), true && (bool(_GLF_IDENTITY(bvec3((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y), _GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false)), true), bvec3(bvec3(bvec3((injectionSwitch.x > injectionSwitch.y), false, true)))))))))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         break;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       for(int _injected_loop_counter = (int(_GLF_ONE(1.0, injectionSwitch.y)) & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          {
           do
            {
             return;
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
          }
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, 1.0)), dot(vec2(0.0, _GLF_IDENTITY(1.0, min(1.0, 1.0))), vec2(0.0, 1.0))))))))
            barrier();
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
            }
           else
            {
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           return;
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
          }
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), ! (! (_GLF_WRAPPED_IF_FALSE(false)))))
            {
            }
           else
            {
             barrier();
            }
          }
         barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat4x3(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(clamp(injectionSwitch, injectionSwitch, injectionSwitch), max(clamp(injectionSwitch, injectionSwitch, injectionSwitch), clamp(injectionSwitch, injectionSwitch, injectionSwitch)))), _GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x), 1.0, 0.0, 0.0, sin(0.0), 0.0, cos(0.0), 0.0, 1.0, 1.0)), clamp(vec2(mat4x3(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 0.0, 0.0, sin(0.0), 0.0, cos(0.0), 0.0, 1.0, 1.0)), _GLF_IDENTITY(vec2(mat4x3(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), _GLF_ZERO(0.0, injectionSwitch.x), 1.0, _GLF_IDENTITY(0.0, 0.0 + (0.0)), 0.0, sin(0.0), 0.0, cos(0.0), 0.0, 1.0, _GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED((9.3 * (-4872.6856 / -0.6)))), bool(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(injectionSwitch.x > injectionSwitch.y, true)))))))))), max(vec2(mat4x3(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), _GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(-8.9)))), 1.0, 0.0, 0.0, sin(0.0), 0.0, cos(0.0), _GLF_IDENTITY(0.0, max(0.0, _GLF_IDENTITY(0.0, (0.0) / 1.0))), 1.0, 1.0)), vec2(mat4x3(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 0.0, 0.0, sin(0.0), 0.0, cos(0.0), 0.0, 1.0, 1.0)))), vec2(mat4x3(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 0.0, 0.0, sin(0.0), 0.0, cos(0.0), 0.0, 1.0, 1.0))))).x, mix(float(_GLF_FUZZED(120.786)), float(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat4x3(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(clamp(injectionSwitch, injectionSwitch, injectionSwitch), max(clamp(injectionSwitch, injectionSwitch, injectionSwitch), clamp(injectionSwitch, injectionSwitch, injectionSwitch)))), _GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x), 1.0, 0.0, 0.0, sin(0.0), 0.0, cos(0.0), 0.0, 1.0, 1.0)), clamp(vec2(mat4x3(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 0.0, 0.0, sin(0.0), 0.0, cos(0.0), 0.0, 1.0, 1.0)), _GLF_IDENTITY(vec2(mat4x3(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), _GLF_ZERO(0.0, injectionSwitch.x), 1.0, _GLF_IDENTITY(0.0, 0.0 + (0.0)), 0.0, sin(0.0), 0.0, cos(0.0), 0.0, 1.0, _GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED((9.3 * (-4872.6856 / -0.6)))), bool(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(injectionSwitch.x > injectionSwitch.y, true)))))))))), max(vec2(mat4x3(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), _GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(-8.9)))), 1.0, 0.0, 0.0, sin(0.0), 0.0, cos(0.0), _GLF_IDENTITY(0.0, max(0.0, _GLF_IDENTITY(0.0, (0.0) / 1.0))), 1.0, 1.0)), vec2(mat4x3(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 0.0, 0.0, sin(0.0), 0.0, cos(0.0), 0.0, 1.0, 1.0)))), vec2(mat4x3(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 0.0, 0.0, sin(0.0), 0.0, cos(0.0), 0.0, 1.0, 1.0))))).x), bool(true))) > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          break;
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            break;
           barrier();
          }
         barrier();
        }
      }
    }
   do
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(mat3(injectionSwitch, exp(0.0), length(vec3(0.0, 0.0, 0.0)), _GLF_IDENTITY(dot(vec3(1.0, 1.0, 0.0), vec3(0.0, 0.0, 1.0)), dot(vec3(1.0, 1.0, 0.0), vec3(0.0, 0.0, 1.0))), 0.0, 1.0, 0.0, 1.0))))).x < injectionSwitch.y))))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), int(ivec3(int(7), 0, 1))))) >> _GLF_IDENTITY(int(7), int(7)))); _injected_loop_counter ++)
        {
         return;
        }
      }
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
         barrier();
        }
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))) << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), (true ? int(7) : _GLF_FUZZED(98793)))))); _injected_loop_counter ++)
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              continue;
             barrier();
            }
          }
        }
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, _GLF_IDENTITY(false, ! (! (false))), true)))))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       do
        {
         return;
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || _GLF_IDENTITY(false, (false) && true))))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) - 0)) - _GLF_IDENTITY(0, (0) | (0)))); _injected_loop_counter --)
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           do
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bool(false)))) || false)))
              {
              }
             else
              {
               for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
                {
                 if(_GLF_DEAD(false))
                  break;
                 return;
                }
              }
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
          }
         else
          {
          }
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           barrier();
          }
         else
          {
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        return;
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         return;
        }
       else
        {
        }
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         barrier();
         if(_GLF_DEAD(false))
          return;
        }
      }
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))))
                return;
               for(int _injected_loop_counter = int(_GLF_ZERO(_GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(5.6)), float(0.0), bool(true))), 0.0)), injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                {
                 barrier();
                 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))))
                  barrier();
                }
               if(_GLF_DEAD(false))
                barrier();
              }
             if(_GLF_DEAD(false))
              return;
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                {
                 do
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_WRAPPED_IF_TRUE(true))
                        {
                         barrier();
                        }
                       else
                        {
                        }
                      }
                     if(_GLF_DEAD(false))
                      barrier();
                     barrier();
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      continue;
                    }
                   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false))
                    return;
                   barrier();
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_WRAPPED_IF_TRUE(true))
                      {
                       barrier();
                      }
                     else
                      {
                      }
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
               else
                {
                }
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(bool(_GLF_DEAD(false)), true && _GLF_IDENTITY((bool(_GLF_DEAD(false))), ((bool(_GLF_DEAD(false)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   barrier();
                  }
                 if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false))))) && true))
                  barrier();
                }
               else
                {
                }
               if(_GLF_DEAD(false))
                barrier();
              }
            }
           else
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                return;
               barrier();
              }
             if(_GLF_DEAD(false))
              {
               do
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_DEAD(false))
                  barrier();
                }
               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
                {
                 return;
                }
              }
            }
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(9.5) : _GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(-51.80)))))))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(9.5) : _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y, (true ? injectionSwitch.y : _GLF_FUZZED(-51.80))))))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             for(int _injected_loop_counter = (1 ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
              {
               return;
              }
            }
           barrier();
           if(_GLF_DEAD(false))
            return;
          }
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        barrier();
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             barrier();
            }
           else
            {
            }
          }
        }
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           barrier();
          }
         else
          {
          }
        }
      }
    }
   else
    {
    }
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   do
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || ((false))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
        }
       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) && true)))
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
         do
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             do
              {
               barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
             barrier();
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-747.375), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(9.1)), bvec2(true, false))).x > injectionSwitch.y, bool(bvec3(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-747.375), (injectionSwitch)[1]), vec2(_GLF_IDENTITY((injectionSwitch), _GLF_IDENTITY(mat2(1.0) * ((injectionSwitch)), min(_GLF_IDENTITY(mat2(1.0) * ((injectionSwitch)), vec2(vec4(_GLF_IDENTITY(mat2(1.0) * ((injectionSwitch)), clamp(mat2(1.0) * ((injectionSwitch)), mat2(1.0) * ((injectionSwitch)), mat2(1.0) * ((injectionSwitch)))), 1.0, 0.0))), mat2(1.0) * ((injectionSwitch)))))[0], _GLF_FUZZED(9.1)), bvec2(true, false))).x > injectionSwitch.y, true, _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true, false))))))))))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
        continue;
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             return;
            }
          }
         do
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              continue;
             do
              {
               if(_GLF_DEAD(false))
                barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
             do
              {
               barrier();
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec3(bvec2(false, true), false)))))))
            barrier();
          }
         else
          {
          }
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y))))))
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
              }
             else
              {
               barrier();
              }
            }
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))), false || (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))))))))))))
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 do
                  {
                   return;
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
              }
             else
              {
              }
             break;
            }
           if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))), true, true))))
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                return;
               if(_GLF_DEAD(false))
                barrier();
               return;
              }
             if(_GLF_DEAD(false))
              barrier();
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
              {
               if(_GLF_DEAD(false))
                barrier();
              }
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                break;
               barrier();
              }
             barrier();
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
            }
           if(_GLF_DEAD(false))
            {
             do
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                    {
                     if(_GLF_DEAD(false))
                      return;
                     return;
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                   else
                    {
                    }
                  }
                }
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, float(vec3(injectionSwitch.y, 0.0, 1.0)))))))));
             if(_GLF_DEAD(false))
              barrier();
             barrier();
             if(_GLF_DEAD(false))
              continue;
             if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
              barrier();
             if(_GLF_IDENTITY(_GLF_DEAD(false), ! _GLF_IDENTITY((! (_GLF_DEAD(false))), ! (! ((! (_GLF_DEAD(false))))))))
              continue;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              break;
             if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 barrier();
                }
               else
                {
                }
              }
            }
          }
        }
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
                barrier();
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             else
              {
              }
             if(_GLF_DEAD(false))
              barrier();
            }
           else
            {
            }
          }
         else
          {
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            return;
           barrier();
          }
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))))))) || false)))))
              barrier();
             barrier();
            }
          }
         for(int _injected_loop_counter = _GLF_IDENTITY(0, max(0, 0)); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (_GLF_IDENTITY(int(5), (int(5)) >> 0)) | (int(5))))) >> _GLF_IDENTITY(int(5), int(5)))); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
            {
             if(_GLF_DEAD(false))
              continue;
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              continue;
             if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bvec2(true, false)))))
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   barrier();
                  }
                }
              }
             else
              {
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), int(_GLF_IDENTITY(int(int(1)), (int(int(1))) | (int(int(1))))))))); _injected_loop_counter ++)
                {
                 return;
                }
              }
             break;
             if(_GLF_DEAD(false))
              barrier();
            }
           if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, true && (true))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           else
            {
            }
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
           for(int _injected_loop_counter = _GLF_IDENTITY(1, ~ (~ (_GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(1, (1) | (1))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, ~ (~ (0)))); _injected_loop_counter --)
            {
             if(_GLF_DEAD(false))
              break;
             if(_GLF_DEAD(false))
              return;
             if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY((false), bool(bvec4((false), true, true, true))) || false)))
              {
              }
             else
              {
               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))))
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(false, true && _GLF_IDENTITY((false), ! (! ((false)))))))
                  {
                   if(_GLF_DEAD(false))
                    continue;
                   barrier();
                  }
                }
               else
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(false))
                    return;
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (true)))))
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        return;
                       barrier();
                      }
                     else
                      {
                      }
                    }
                   else
                    {
                    }
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    continue;
                  }
                }
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(false))
                {
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                  {
                   return;
                  }
                 else
                  {
                  }
                }
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(_GLF_IDENTITY(bvec3(injectionSwitch.x > injectionSwitch.y, true, _GLF_IDENTITY(true, (true) || false)), bvec3(bvec4(bvec3(injectionSwitch.x > injectionSwitch.y, true, _GLF_IDENTITY(true, (true) || false)), false)))))))))
                  barrier();
                 barrier();
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  continue;
                }
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  return;
                }
              }
             if(_GLF_DEAD(false))
              break;
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             return;
             if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_DEAD(false))
                  return;
                }
               do
                {
                 barrier();
                }
               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 barrier();
                 if(_GLF_DEAD(false))
                  break;
                 if(_GLF_DEAD(false))
                  barrier();
                }
               else
                {
                }
               if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))), false), bvec2(bvec2(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))), false)))))), true, true, false))))
                break;
               if(_GLF_DEAD(false))
                barrier();
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(8), int(8))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                  {
                   if(_GLF_DEAD(false))
                    continue;
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     barrier();
                    }
                   else
                    {
                    }
                  }
                }
               if(_GLF_DEAD(false))
                break;
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_DEAD(false))
                  {
                   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 | 0)); _injected_loop_counter --)
                    {
                     if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
                      barrier();
                     barrier();
                     do
                      {
                       if(_GLF_DEAD(false))
                        barrier();
                      }
                     while(_GLF_WRAPPED_LOOP(false));
                    }
                  }
                }
               else
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  break;
                }
               if(_GLF_DEAD(false))
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   barrier();
                  }
                 else
                  {
                  }
                }
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
          }
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       do
        {
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0) > _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, vec2(mat4(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, abs(1.0), 0.0))), injectionSwitch, _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-5296.8321, 474.271)) : injectionSwitch)))).y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true))
          {
           if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
            {
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, _GLF_IDENTITY(0 ^ (_GLF_IDENTITY(_injected_loop_counter, ~ (~ (_injected_loop_counter)))), int(_GLF_IDENTITY(ivec2(0 ^ (_GLF_IDENTITY(_injected_loop_counter, ~ (~ (_injected_loop_counter)))), 0), (ivec2(0 ^ (_GLF_IDENTITY(_injected_loop_counter, ~ (~ (_injected_loop_counter)))), 0)) / (ivec2(1, 1) & ivec2(1, 1)))))) > (0 & -5258)); _injected_loop_counter --)
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
             if(_GLF_DEAD(false))
              barrier();
            }
           barrier();
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        return;
      }
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) && true), true && (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(false))
    barrier();
   buf[GLF_merged3_0_1_16_1_1_11_2_1_14next_virtual_gidvirtual_gidworkgroup_base.x] = 2;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(float(true))), float(_GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(1.8)))), bool(true))), (true ? _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[_GLF_IDENTITY(0, 0 + (0))], _GLF_FUZZED(-807.420)), vec2(_GLF_FUZZED(4.3), _GLF_IDENTITY((injectionSwitch)[1], mix(float((injectionSwitch)[_GLF_IDENTITY(1, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(1, clamp(1, 1, 1))), 0 ^ (_GLF_IDENTITY(~ (_GLF_IDENTITY(1, clamp(1, 1, 1))), (~ (_GLF_IDENTITY(1, clamp(1, 1, 1)))) | (~ (_GLF_IDENTITY(1, clamp(1, 1, 1)))))))))]), _GLF_IDENTITY(float(_GLF_FUZZED(24.69)), (true ? float(_GLF_FUZZED(24.69)) : _GLF_FUZZED(842.080))), bool(false)))), bvec2(false, true))).y : _GLF_FUZZED(step(8227.4083, -7.5))))))))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (false)), ((! (false))) || false))))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   do
    {
     subgroupAll(true);
     if(_GLF_DEAD(false))
      break;
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_DEAD(false))
  {
   do
    {
     if(_GLF_DEAD(false))
      return;
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, false || (false)), false, false, false))), (_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, false || (false)), false, false, false)))) && true)))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         barrier();
        }
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           else
            {
            }
           do
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED((5839.1993 + 5127.9195)), _GLF_FUZZED(-5443.9865)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))), injectionSwitch, injectionSwitch)).x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))
            barrier();
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bool(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
              {
              }
             else
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x > injectionSwitch.y))))
              {
               do
                {
                 barrier();
                }
               while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), false || (_GLF_WRAPPED_LOOP(false))));
              }
            }
           if(_GLF_DEAD(false))
            barrier();
          }
        }
       else
        {
        }
       for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3)))); _injected_loop_counter ++)
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
             if(_GLF_DEAD(false))
              continue;
             do
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               return;
               do
                {
                 if(_GLF_DEAD(false))
                  barrier();
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              return;
             barrier();
            }
           if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
            continue;
          }
        }
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           else
            {
            }
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
            {
             barrier();
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                break;
               barrier();
              }
            }
           for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
            {
             if(_GLF_DEAD(false))
              {
               for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                {
                 return;
                }
              }
            }
          }
         else
          {
           if(_GLF_DEAD(false))
            return;
          }
         if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
            {
             return;
            }
          }
        }
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(2), int(2))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(ivec3(96922, -83777, -28515).x) : int(6))))) >> _GLF_IDENTITY(int(6), int(6))), false || (_GLF_IDENTITY(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(ivec3(96922, -83777, -28515).x) : int(6))))) >> _GLF_IDENTITY(int(6), int(6))), _GLF_IDENTITY(bool(bool(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(ivec3(96922, -83777, -28515).x) : int(6))))) >> _GLF_IDENTITY(int(6), int(6))))), bool(bvec4(bool(bool(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(ivec3(96922, -83777, -28515).x) : int(6))))) >> _GLF_IDENTITY(int(6), int(6))))), false, true, false))))))); _injected_loop_counter ++)
              {
               barrier();
              }
            }
           barrier();
          }
        }
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
        }
      }
    }
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, ! (! (false)))))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
  {
   do
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
   do
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          barrier();
        }
      }
     else
      {
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((false), bool(bvec4((false), false, false, false))) || false)), (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((false), bool(bvec4((false), false, false, false))) || false)), ! (! (_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((false), bool(bvec4((false), false, false, false))) || false)))))) || false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         do
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              return;
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (_GLF_IDENTITY(0, _GLF_IDENTITY(clamp(_GLF_IDENTITY(0, max(_GLF_IDENTITY(0, clamp(0, 0, 0)), 0)), _GLF_IDENTITY(0, (_GLF_IDENTITY(0, min(0, 0))) | (0)), 0), ~ (~ (clamp(0, 0, 0))))) ^ 1)); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-57.60) : injectionSwitch.y))) - 0.0)))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), (bool(bool(false))) && true))))
                barrier();
               barrier();
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                  {
                   barrier();
                  }
                 else
                  {
                   if(_GLF_DEAD(false))
                    return;
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(false))
                      return;
                     barrier();
                    }
                  }
                }
               continue;
              }
             return;
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 barrier();
                }
              }
             barrier();
            }
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) || false)))))
            barrier();
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
            {
             barrier();
            }
          }
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) < injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   else
    {
    }
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
