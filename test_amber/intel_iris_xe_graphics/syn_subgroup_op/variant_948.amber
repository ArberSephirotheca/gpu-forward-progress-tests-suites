#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 0) uniform buf0 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))), _GLF_IDENTITY(bool(bvec3((injectionSwitch.x > injectionSwitch.y), _GLF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, true && (false))))) || _GLF_IDENTITY(false, false || (false))), (injectionSwitch.x > injectionSwitch.y)), true)), (bool(bvec3((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - sin(vec2(0.0, 0.0))).x, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - sin(vec2(0.0, 0.0))).x, 1.0 * (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - sin(vec2(_GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0))).x))) * 1.0) > injectionSwitch.y), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))) || false)))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   do
    {
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).x > injectionSwitch.y))));
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))))))))) && _GLF_TRUE(true, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).x < injectionSwitch.y, bool(bvec2(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).x < injectionSwitch.y, false))))))), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).x < injectionSwitch.y), ! (_GLF_IDENTITY(! (! (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).x < injectionSwitch.y)), _GLF_IDENTITY(bool(bvec3(! (! (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).x < injectionSwitch.y)), false, true)), ! (! (bool(bvec3(! (! (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).x < injectionSwitch.y)), false, true))))))))))), _GLF_IDENTITY(((_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).x < injectionSwitch.y))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(_GLF_IDENTITY(bool(((_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).x < injectionSwitch.y))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true && (bool(((_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).x < injectionSwitch.y))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))), _GLF_IDENTITY(bool(bool(bool(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).x < injectionSwitch.y)))), ((_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).x < injectionSwitch.y))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), bool(bvec4(bool(bool(bool(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).x < injectionSwitch.y))), false || (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).x < injectionSwitch.y))), (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).x < injectionSwitch.y)))) || false)))), ((_GLF_IDENTITY(injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(-0.2))), ! (! (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).x < injectionSwitch.y))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), true, false, false)))))))))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           barrier();
          }
         else
          {
          }
        }
      }
     barrier();
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 uvec2 GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_id;
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   do
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
        {
         GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_id.x = subgroup_id;
        }
      }
    }
   while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), ! (! (_GLF_WRAPPED_LOOP(false))))) || false));
  }
 else
  {
  }
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y))))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 uint subgroup_size = _GLF_IDENTITY(16, (_GLF_IDENTITY(16, clamp(_GLF_IDENTITY(_GLF_IDENTITY(16, _GLF_IDENTITY((_GLF_IDENTITY(16, (16) * _GLF_IDENTITY(1, (1) | (1)))) / int(_GLF_ONE(1.0, injectionSwitch.y)), min((_GLF_IDENTITY(16, (16) * 1)) / int(_GLF_ONE(1.0, injectionSwitch.y)), _GLF_IDENTITY((_GLF_IDENTITY(16, (16) * 1)) / int(_GLF_ONE(1.0, injectionSwitch.y)), 1 * ((_GLF_IDENTITY(_GLF_IDENTITY(16, min(16, 16)), (16) * 1)) / int(_GLF_ONE(1.0, injectionSwitch.y))))))), _GLF_IDENTITY((_GLF_IDENTITY(16, _GLF_IDENTITY((_GLF_IDENTITY(16, 1 * (16))) | (16), (true ? _GLF_IDENTITY((_GLF_IDENTITY(16, 1 * (16))) | (16), 0 ^ ((_GLF_IDENTITY(16, 1 * (16))) | (16))) : _GLF_FUZZED(bitfieldExtract(max(99563, 24803), 59157, 57803)))))), max(_GLF_IDENTITY((_GLF_IDENTITY(16, _GLF_IDENTITY((_GLF_IDENTITY(16, 1 * (16))) | (16), (true ? _GLF_IDENTITY((_GLF_IDENTITY(16, 1 * (16))) | (16), 0 ^ ((_GLF_IDENTITY(16, 1 * (16))) | (16))) : _GLF_FUZZED(bitfieldExtract(max(99563, 24803), 59157, 57803)))))), (_GLF_IDENTITY((_GLF_IDENTITY(16, _GLF_IDENTITY((_GLF_IDENTITY(16, 1 * (16))) | (16), (true ? _GLF_IDENTITY((_GLF_IDENTITY(16, 1 * (16))) | (16), 0 ^ ((_GLF_IDENTITY(16, 1 * (16))) | (16))) : _GLF_FUZZED(bitfieldExtract(max(99563, 24803), 59157, 57803)))))), ((_GLF_IDENTITY(16, _GLF_IDENTITY((_GLF_IDENTITY(16, 1 * (16))) | (16), (true ? _GLF_IDENTITY((_GLF_IDENTITY(16, 1 * (16))) | (16), 0 ^ ((_GLF_IDENTITY(16, 1 * (16))) | (16))) : _GLF_FUZZED(bitfieldExtract(max(99563, 24803), 59157, 57803))))))) * 1)) - 0), (_GLF_IDENTITY(16, _GLF_IDENTITY((_GLF_IDENTITY(16, 1 * (16))) | (16), (true ? _GLF_IDENTITY((_GLF_IDENTITY(16, 1 * (16))) | (16), 0 ^ ((_GLF_IDENTITY(16, 1 * (16))) | (16))) : _GLF_FUZZED(bitfieldExtract(max(99563, 24803), 59157, 57803)))))))) | (16)), _GLF_IDENTITY(16, ~ (~ (_GLF_IDENTITY(16, (_GLF_IDENTITY(false ? _GLF_FUZZED(13110) : 16, clamp(false ? _GLF_FUZZED(13110) : 16, false ? _GLF_FUZZED(13110) : 16, false ? _GLF_FUZZED(13110) : 16))))))), 16))) | _GLF_IDENTITY((16), ((16)) / 1));
 if(_GLF_IDENTITY(_GLF_DEAD(false), ! _GLF_IDENTITY((! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), false, true, true))), bool(bool(_GLF_DEAD(false)))))), bool(bvec3((! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))), true, _GLF_IDENTITY(false, ! (! (false)))))), bool(bool(_GLF_DEAD(false)))))), _GLF_TRUE(true, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, false || (injectionSwitch.x < injectionSwitch.y))) || false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec2(bvec2(bvec2(_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, false || (injectionSwitch.x < injectionSwitch.y))) || false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))), (_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), false || ((injectionSwitch.x < injectionSwitch.y)))) && true)), false)))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint subgroup_local_id = gl_SubgroupInvocationID;
 _GLF_IDENTITY(GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_id.y = subgroup_local_id, 0u ^ (_GLF_IDENTITY(GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_id.y = subgroup_local_id, (GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_id.y = _GLF_IDENTITY(subgroup_local_id, uint(uint(subgroup_local_id)))) - 0u)));
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       barrier();
      }
     else
      {
      }
    }
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     barrier();
    }
  }
 uint workgroup_size = _GLF_IDENTITY(gl_WorkGroupSize, (_GLF_IDENTITY(gl_WorkGroupSize, uvec3(gl_WorkGroupSize[0], gl_WorkGroupSize[1], gl_WorkGroupSize[2]))) - uvec3(0u, 0u, 0u)).x;
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint workgroup_base = workgroup_size * workgroup_id;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))), false, _GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), _GLF_IDENTITY(float(mat4x2(injectionSwitch.x, determinant(mat3(0.0, exp(0.0), 0.0, log(1.0), 0.0, 1.0, 0.0, 0.0, 0.0)), 0.0, 0.0, _GLF_IDENTITY(dot(vec3(1.0, sqrt(0.0), 0.0), vec3(1.0, 0.0, 0.0)), dot(vec3(1.0, sqrt(0.0), 0.0), vec3(1.0, 0.0, 0.0))), 0.0, 0.0, 1.0)), max(float(mat4x2(injectionSwitch.x, determinant(mat3(0.0, exp(0.0), 0.0, log(1.0), 0.0, 1.0, 0.0, 0.0, 0.0)), 0.0, 0.0, _GLF_IDENTITY(_GLF_IDENTITY(dot(vec3(1.0, sqrt(0.0), 0.0), vec3(1.0, 0.0, 0.0)), max(dot(vec3(1.0, sqrt(0.0), 0.0), vec3(1.0, 0.0, 0.0)), dot(vec3(1.0, sqrt(0.0), 0.0), vec3(1.0, 0.0, 0.0)))), _GLF_IDENTITY(dot(vec3(1.0, sqrt(0.0), 0.0), vec3(1.0, 0.0, 0.0)), clamp(dot(vec3(1.0, sqrt(0.0), 0.0), vec3(1.0, 0.0, 0.0)), dot(vec3(1.0, sqrt(0.0), 0.0), vec3(1.0, 0.0, 0.0)), dot(vec3(1.0, sqrt(0.0), 0.0), vec3(1.0, 0.0, 0.0))))), 0.0, 0.0, 1.0)), float(mat4x2(injectionSwitch.x, determinant(mat3(0.0, exp(0.0), 0.0, log(1.0), 0.0, 1.0, 0.0, 0.0, 0.0)), 0.0, 0.0, _GLF_IDENTITY(_GLF_IDENTITY(dot(vec3(1.0, sqrt(0.0), 0.0), vec3(1.0, 0.0, 0.0)), dot(vec3(1.0, sqrt(0.0), 0.0), vec3(1.0, 0.0, 0.0))), min(_GLF_IDENTITY(dot(vec3(1.0, sqrt(0.0), 0.0), vec3(1.0, 0.0, 0.0)), dot(vec3(1.0, sqrt(0.0), 0.0), vec3(1.0, 0.0, 0.0))), _GLF_IDENTITY(dot(vec3(1.0, sqrt(0.0), 0.0), vec3(1.0, 0.0, 0.0)), dot(vec3(1.0, sqrt(0.0), 0.0), vec3(1.0, 0.0, 0.0))))), 0.0, 0.0, 1.0))))) > injectionSwitch.y))))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (! (false)))))), bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false), true)))) && true))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_DEAD(false)), true && (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_DEAD(false)), bool(bvec2(! (_GLF_DEAD(false)), _GLF_IDENTITY(true, (true) || false)))), false || (_GLF_IDENTITY(! (_GLF_DEAD(false)), bool(bvec2(! (_GLF_DEAD(false)), true))))), (! (_GLF_DEAD(false))) && _GLF_IDENTITY(true, (true) || false)))), _GLF_IDENTITY(_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, false || (true))))) && (! (_GLF_DEAD(false))), false || (true && (! (_GLF_DEAD(false))))))), (! (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_DEAD(false)), true && (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_DEAD(false)), bool(bvec2(! (_GLF_DEAD(false)), _GLF_IDENTITY(true, (true) || false)))), false || (_GLF_IDENTITY(! (_GLF_DEAD(false)), bool(bvec2(! (_GLF_DEAD(false)), true))))), _GLF_IDENTITY((! (_GLF_DEAD(false))), ! (! ((! (_GLF_DEAD(false)))))) && _GLF_IDENTITY(true, (true) || false)))), _GLF_IDENTITY(_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, false || (true))))) && (! (_GLF_DEAD(false))), false || (true && (! (_GLF_DEAD(false)))))))) && true)))
      barrier();
    }
   else
    {
    }
   for(int _injected_loop_counter = (0 ^ 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / sqrt(vec2(1.0, 1.0))), mat2(1.0) * (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / sqrt(vec2(1.0, 1.0))))).y)), true && _GLF_IDENTITY((_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / sqrt(vec2(1.0, 1.0))).y)), ! (! (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / sqrt(vec2(1.0, 1.0))).y), ! (! (_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / sqrt(vec2(1.0, 1.0))).y), true && (_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch), clamp((injectionSwitch), (injectionSwitch), (injectionSwitch))) / sqrt(vec2(1.0, 1.0))).y), (_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / sqrt(vec2(1.0, 1.0))).y), true && (_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / sqrt(vec2(1.0, 1.0))).y), ! (! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / _GLF_IDENTITY(sqrt(vec2(1.0, 1.0)), mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (sqrt(vec2(1.0, 1.0))))).y))))))) || false))))))))))), ! (! ((_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / sqrt(vec2(1.0, 1.0))).y)), ! (! (_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / sqrt(vec2(1.0, 1.0))).y, bool(bvec3(_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / sqrt(vec2(1.0, 1.0))).y, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / sqrt(vec2(1.0, 1.0))).y) && true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)))), ! (! (_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / sqrt(vec2(1.0, 1.0))), clamp(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / sqrt(vec2(1.0, 1.0))), _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / sqrt(vec2(1.0, 1.0))), _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / sqrt(vec2(1.0, 1.0))))).y), true && (_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch), clamp((injectionSwitch), _GLF_IDENTITY((injectionSwitch), (true ? (injectionSwitch) : _GLF_FUZZED(injectionSwitch))), (injectionSwitch))) / sqrt(vec2(1.0, 1.0))).y), (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / sqrt(vec2(1.0, 1.0))).y), ! (_GLF_IDENTITY(! ((_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / sqrt(vec2(1.0, 1.0))).y)), (! ((_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / sqrt(vec2(1.0, 1.0))).y))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), _GLF_IDENTITY(true && (_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / sqrt(vec2(1.0, 1.0))).y), ! (! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / _GLF_IDENTITY(sqrt(vec2(1.0, 1.0)), mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (sqrt(vec2(1.0, 1.0))))).y))))), (_GLF_IDENTITY(true && (_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / sqrt(vec2(1.0, 1.0))).y), ! (! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / _GLF_IDENTITY(sqrt(vec2(1.0, 1.0)), mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (sqrt(vec2(1.0, 1.0))))).y))))), bool(bvec3(_GLF_IDENTITY(true && (_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / sqrt(vec2(1.0, 1.0))).y), ! (! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / _GLF_IDENTITY(sqrt(vec2(1.0, 1.0)), mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (sqrt(vec2(1.0, 1.0))))).y))))), true && (true && (_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / sqrt(vec2(1.0, 1.0))).y), ! (! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / _GLF_IDENTITY(sqrt(vec2(1.0, 1.0)), mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (sqrt(vec2(1.0, 1.0))))).y))))))), true, false)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) || false)))))))))))))))))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         for(int _injected_loop_counter = int(_GLF_ZERO(0.0, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)), _GLF_IDENTITY(vec2(mat2x4(injectionSwitch, 1.0, 1.0, abs(exp(0.0)), sqrt(1.0), 1.0, 0.0)), (vec2(mat2x4(injectionSwitch, _GLF_IDENTITY(1.0, _GLF_IDENTITY(float(vec3(1.0, 1.0, 1.0)), max(float(vec3(1.0, 1.0, 1.0)), float(vec3(1.0, 1.0, 1.0))))), 1.0, _GLF_IDENTITY(abs(exp(0.0)), min(abs(exp(0.0)), abs(exp(0.0)))), sqrt(1.0), 1.0, 0.0))) - vec2(0.0, 0.0))).x)); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(5), _GLF_IDENTITY(max(int(5), _GLF_IDENTITY(int(5), (int(5)) ^ 0)), (max(int(5), _GLF_IDENTITY(int(_GLF_IDENTITY(5, (5) / 1)), (int(5)) ^ 0))) | (_GLF_IDENTITY(max(int(5), _GLF_IDENTITY(int(5), (int(5)) ^ 0)), clamp(max(int(5), _GLF_IDENTITY(int(5), (_GLF_IDENTITY(int(5), (int(5)) ^ 0)) ^ 0)), max(int(5), _GLF_IDENTITY(int(5), (int(5)) ^ 0)), max(int(5), _GLF_IDENTITY(int(5), (int(5)) ^ 0))))))), _GLF_IDENTITY(int(5), clamp(int(5), int(_GLF_IDENTITY(5, 0 | (5))), _GLF_IDENTITY(_GLF_IDENTITY(int(5), ~ (~ (int(5)))), (_GLF_IDENTITY(int(5), ~ (~ (int(5))))) + int(_GLF_ZERO(0.0, injectionSwitch.x))))))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(5), int(5)), (true ? _GLF_IDENTITY(int(5), int(5)) : _GLF_FUZZED(sign(-69970)))))), _GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (! (false))))) || (_GLF_WRAPPED_LOOP(_injected_loop_counter != (_GLF_IDENTITY((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(5), max(int(5), _GLF_IDENTITY(int(5), (int(5)) ^ 0))), _GLF_IDENTITY(int(5), clamp(int(5), int(_GLF_IDENTITY(5, 0 | (5))), _GLF_IDENTITY(int(5), ~ (_GLF_IDENTITY(~ (int(5)), (_GLF_IDENTITY(~ (int(5)), int(ivec3(_GLF_IDENTITY(~ (int(5)), ~ (~ (~ (int(5))))), 1, 1)))) | (~ (int(5)))))))))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(5), min(_GLF_IDENTITY(int(5), (int(5)) ^ 0), int(5))), int(5)), min((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(5), max(int(5), _GLF_IDENTITY(int(5), (int(5)) ^ 0))), _GLF_IDENTITY(int(5), clamp(int(5), int(_GLF_IDENTITY(5, 0 | (5))), _GLF_IDENTITY(int(5), ~ (_GLF_IDENTITY(~ (int(5)), (_GLF_IDENTITY(~ (int(5)), int(ivec3(_GLF_IDENTITY(~ (int(5)), ~ (~ (~ (int(5))))), 1, 1)))) | (~ (int(5)))))))))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(5), min(_GLF_IDENTITY(int(5), (int(5)) ^ 0), int(5))), int(5)), (1 << _GLF_IDENTITY(_GLF_IDENTITY(int(5), max(int(5), _GLF_IDENTITY(int(5), (int(5)) ^ 0))), _GLF_IDENTITY(int(5), clamp(int(5), int(_GLF_IDENTITY(5, 0 | (5))), _GLF_IDENTITY(int(5), ~ (_GLF_IDENTITY(~ (int(5)), (_GLF_IDENTITY(~ (int(5)), int(ivec3(_GLF_IDENTITY(~ (int(5)), ~ (~ (~ (int(5))))), 1, 1)))) | (~ (int(5)))))))))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(5), min(_GLF_IDENTITY(int(5), (int(5)) ^ 0), int(5))), int(5)))))))); _injected_loop_counter ++)
          {
           barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
        }
      }
    }
  }
 uint virtual_gid = _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_id.x * subgroup_size, 0u ^ (_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_id.x * subgroup_size, uint(_GLF_IDENTITY(uvec4(GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_id.x * subgroup_size, 0u, 1u, 1u), uvec4(0u, 0u, 0u, 0u) ^ (uvec4(GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_id.x * subgroup_size, 0u, 1u, 1u))))), max(_GLF_IDENTITY(GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_id.x * subgroup_size, uint(uvec4(GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_id.x * subgroup_size, 0u, 1u, 1u))), _GLF_IDENTITY(GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_id.x * subgroup_size, uint(uvec4(GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_id.x * subgroup_size, _GLF_IDENTITY(0u, _GLF_IDENTITY(uint(uvec2(0u, 1u)), ~ (~ (_GLF_IDENTITY(uint(uvec2(0u, 1u)), (uint(uvec2(0u, 1u))) ^ 0u))))), 1u, 1u))))))), (workgroup_base + _GLF_IDENTITY(_GLF_IDENTITY(GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_id.x * subgroup_size, 0u ^ (_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_id.x * subgroup_size, uint(uvec4(GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_id.x * subgroup_size, 0u, 1u, 1u))), max(_GLF_IDENTITY(GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_id.x * subgroup_size, uint(uvec4(GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_id.x * subgroup_size, 0u, 1u, 1u))), _GLF_IDENTITY(GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_id.x * subgroup_size, uint(uvec4(GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_id.x * subgroup_size, 0u, 1u, 1u))))))), (false ? _GLF_FUZZED((+ GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_id[1])) : _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_id.x * subgroup_size, 0u ^ (_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_id.x * subgroup_size, uint(uvec4(GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_id.x * subgroup_size, 0u, 1u, 1u))), max(_GLF_IDENTITY(GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_id.x * subgroup_size, uint(uvec4(GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_id.x * subgroup_size, 0u, 1u, 1u))), _GLF_IDENTITY(GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_id.x * subgroup_size, uint(uvec4(GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_id.x * subgroup_size, 0u, 1u, 1u))))))), _GLF_IDENTITY(uint(uint(_GLF_IDENTITY(GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_id.x * subgroup_size, 0u ^ (_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_id.x * subgroup_size, uint(uvec4(GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_id.x * subgroup_size, 0u, 1u, 1u))), max(_GLF_IDENTITY(GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_id.x * subgroup_size, uint(uvec4(GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_id.x * subgroup_size, 0u, 1u, 1u))), _GLF_IDENTITY(GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_id.x * subgroup_size, uint(uvec4(GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_id.x * subgroup_size, 0u, 1u, 1u))))))))), clamp(uint(uint(_GLF_IDENTITY(GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_id.x * subgroup_size, 0u ^ (_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_id.x * subgroup_size, uint(uvec4(GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_id.x * subgroup_size, 0u, 1u, 1u))), max(_GLF_IDENTITY(GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_id.x * subgroup_size, uint(uvec4(GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_id.x * subgroup_size, 0u, 1u, 1u))), _GLF_IDENTITY(GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_id.x * subgroup_size, uint(uvec4(GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_id.x * subgroup_size, 0u, 1u, 1u))))))))), uint(uint(_GLF_IDENTITY(GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_id.x * subgroup_size, 0u ^ (_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_id.x * subgroup_size, uint(uvec4(GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_id.x * subgroup_size, 0u, 1u, 1u))), max(_GLF_IDENTITY(GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_id.x * subgroup_size, uint(uvec4(GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_id.x * subgroup_size, 0u, 1u, 1u))), _GLF_IDENTITY(GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_id.x * subgroup_size, uint(uvec4(GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_id.x * subgroup_size, 0u, 1u, 1u))))))))), uint(uint(_GLF_IDENTITY(GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_id.x * subgroup_size, 0u ^ (_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_id.x * subgroup_size, uint(uvec4(GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_id.x * subgroup_size, 0u, 1u, 1u))), max(_GLF_IDENTITY(GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_id.x * subgroup_size, uint(uvec4(GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_id.x * subgroup_size, 0u, 1u, 1u))), _GLF_IDENTITY(GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_id.x * subgroup_size, uint(uvec4(GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_id.x * subgroup_size, 0u, 1u, 1u)))))))))))), 1u * (_GLF_IDENTITY(GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_id.x * _GLF_IDENTITY(subgroup_size, (true ? subgroup_size : _GLF_FUZZED(workgroup_size))), 0u ^ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_id.x * subgroup_size, uint(uvec4(GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_id.x * subgroup_size, 0u, 1u, 1u))), clamp(_GLF_IDENTITY(GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_id.x * subgroup_size, uint(uvec4(GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_id.x * subgroup_size, 0u, 1u, 1u))), _GLF_IDENTITY(GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_id.x * subgroup_size, uint(uvec4(GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_id.x * subgroup_size, 0u, 1u, 1u))), _GLF_IDENTITY(GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_id.x * subgroup_size, uint(uvec4(GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_id.x * subgroup_size, 0u, 1u, 1u))))), max(_GLF_IDENTITY(GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_id.x * _GLF_IDENTITY(subgroup_size, 1u * (_GLF_IDENTITY(subgroup_size, (subgroup_size) ^ 0u))), _GLF_IDENTITY(uint(uvec4(GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_id.x * subgroup_size, 0u, 1u, _GLF_IDENTITY(1u, ~ (~ (1u))))), (uint(uvec4(GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_id.x * subgroup_size, 0u, 1u, _GLF_IDENTITY(1u, ~ (~ (1u)))))) - 0u)), _GLF_IDENTITY(GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_id.x * subgroup_size, uint(uvec4(GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_id.x * subgroup_size, 0u, 1u, 1u)))))))))))) / uint(_GLF_ONE(1.0, injectionSwitch.y))) + GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_id.y, (workgroup_base + _GLF_IDENTITY(GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_id.x * subgroup_size, 0u ^ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_id.x * subgroup_size, (true ? GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_id.x * subgroup_size : _GLF_FUZZED(subgroup_id))), 1u * (GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_id.x * subgroup_size)), uint(uvec4(GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_id.x * subgroup_size, 0u, 1u, 1u))))) + GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_id.y) | (workgroup_base + _GLF_IDENTITY(_GLF_IDENTITY(GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_id.x * subgroup_size, _GLF_IDENTITY(0u, clamp(0u, 0u, 0u)) ^ (_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_id.x * subgroup_size, (_GLF_IDENTITY(GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_id.x * subgroup_size, 0u | _GLF_IDENTITY((GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_id.x * subgroup_size), min(_GLF_IDENTITY((GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_id.x * subgroup_size), (true ? (GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_id.x * subgroup_size) : _GLF_FUZZED(subgroup_local_id))), (GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_id.x * subgroup_size))))) - 0u), uint(uvec4(GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_id.x * subgroup_size, 0u, 1u, 1u))))), (_GLF_IDENTITY(GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_id.x * subgroup_size, _GLF_IDENTITY(0u, clamp(0u, 0u, 0u)) ^ (_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_id.x * subgroup_size, (_GLF_IDENTITY(GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_id.x * subgroup_size, 0u | _GLF_IDENTITY((GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_id.x * subgroup_size), min(_GLF_IDENTITY((GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_id.x * subgroup_size), (true ? (GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_id.x * subgroup_size) : _GLF_FUZZED(subgroup_local_id))), (GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_id.x * subgroup_size))))) - 0u), uint(uvec4(GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_id.x * subgroup_size, 0u, 1u, 1u)))))) | uint(_GLF_ZERO(0.0, injectionSwitch.x))) + GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_id.y));
 uint next_virtual_gid = _GLF_IDENTITY(workgroup_base + GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_id.x * subgroup_size, (workgroup_base + GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_id.x * subgroup_size) ^ (0u << _GLF_IDENTITY(uint(3u), _GLF_IDENTITY(uint(3u), ~ (~ (uint(3u))))))) + ((_GLF_IDENTITY(GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_id.y + 1, clamp(_GLF_IDENTITY(GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_id.y + 1, (GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_id.y + 1) ^ 0u), _GLF_IDENTITY(_GLF_IDENTITY(GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_id, uvec2(_GLF_IDENTITY(GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_id, (true ? GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_id : _GLF_FUZZED(uvec2(179359u, 146117u))))[0], _GLF_IDENTITY(GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_id[1], uint(_GLF_ZERO(0.0, injectionSwitch.x)) + (GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_id[1])))).y, (_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_id, uvec2(GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_id[0], GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_id[1])).y, min(_GLF_IDENTITY(GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_id, uvec2(GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_id[0], _GLF_IDENTITY(GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_id[1], (false ? _GLF_FUZZED(133548u) : GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_id[1])))).y, _GLF_IDENTITY(GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_id, uvec2(GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_id[0], GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_id[1])).y))) ^ _GLF_IDENTITY(0u, (0u) | (_GLF_IDENTITY(0u, clamp(0u, 0u, _GLF_IDENTITY(0u, ~ (~ (0u)))))))) + 1, _GLF_IDENTITY(_GLF_IDENTITY(GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_id.y + 1, (GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_id.y + 1) / ((1u << _GLF_IDENTITY(uint(2u), uint(2u))) >> _GLF_IDENTITY(uint(2u), uint(2u)))), ~ _GLF_IDENTITY((~ (_GLF_IDENTITY(GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_id.y + 1, max(_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_id, (GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_id) >> uvec2(0u, 0u)).y + 1, uint(uint(GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_id.y + 1))), GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_id.y + 1)))), 0u | (_GLF_IDENTITY((~ (_GLF_IDENTITY(GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_id.y + 1, max(_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_id, (GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_id) >> uvec2(0u, 0u)).y + 1, uint(uint(GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_id.y + 1))), GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_id.y + 1)))), uint(uvec3((~ (_GLF_IDENTITY(GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_id.y + 1, max(_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_id, (GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_id) >> uvec2(0u, 0u)).y + 1, uint(uint(GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_id.y + 1))), GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_id.y + 1)))), 0u, 0u))))))))) % subgroup_size);
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y))))))
    barrier();
  }
 else
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)))), _GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false) || false)))
    {
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
   buf[virtual_gid] = 1;
  }
 for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (int(0)) >> 0))) >> _GLF_IDENTITY(int(0), int(0))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 >> _GLF_IDENTITY(int(8), int(8)))); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       barrier();
      }
     else
      {
      }
    }
  }
 do
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), true && ((injectionSwitch.x < injectionSwitch.y))))), (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(true, _GLF_IDENTITY((true), ((true)) && true) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bool(true))), (injectionSwitch.x < injectionSwitch.y))), (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(true, bool(bool(true))), _GLF_IDENTITY(true && (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(true, bool(bool(true))), bool(bvec3(_GLF_IDENTITY(true, bool(bool(true))), true, false))), true && (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(true, bool(bool(true))), bool(bvec3(_GLF_IDENTITY(true, bool(bool(true))), true, false))), (_GLF_IDENTITY(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bool(true)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (bool(bool(true))))), bool(bvec3(_GLF_IDENTITY(true, bool(bool(true))), true, false)))) && true)))), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(true && (_GLF_IDENTITY(_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bool(true), (bool(true)) || false))), bool(bvec3(_GLF_IDENTITY(true, bool(bool(true))), _GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec2(true, false)), (bool(bvec2(true, false))) && true)), false)))), false || (true && (_GLF_IDENTITY(_GLF_IDENTITY(true, bool(bool(true))), bool(bvec3(_GLF_IDENTITY(true, bool(bool(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, bool(bool(true)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), true, false)))))), false, true)), true && (bool(bvec3(_GLF_IDENTITY(true && (_GLF_IDENTITY(_GLF_IDENTITY(true, bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(true), false || (bool(true))), false || (bool(true))))), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(true, bool(bool(_GLF_IDENTITY(true, false || (true))))), true, false), bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(true, bool(bool(true))), true, false), bvec3(bvec4(bvec3(_GLF_IDENTITY(true, bool(bool(true))), true, false), false))), false)))))), false || (true && (_GLF_IDENTITY(_GLF_IDENTITY(true, bool(bool(true))), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bool(true)), ! (! (bool(bool(true)))))), true, false)), ! (! (bool(bvec3(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bool(true)), ! (! (bool(bool(true)))))), true, false))))))))), false, true)))))), (injectionSwitch.x < injectionSwitch.y))), bool(bool(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, bool(bool(true))), (_GLF_IDENTITY(injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(vec2(injectionSwitch.y, round(length(normalize(1.0))))), mix(float(float(vec2(injectionSwitch.y, round(length(normalize(1.0)))))), float(_GLF_FUZZED(4.4)), bool(false)))), false || (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(vec2(injectionSwitch.y, round(length(normalize(1.0))))), mix(float(float(vec2(injectionSwitch.y, round(length(normalize(1.0)))))), float(_GLF_FUZZED(4.4)), bool(false))))))))))))) && true)) || _GLF_IDENTITY(false, true && (false))))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_id.y + _GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(1, 0 ^ (1)))) < subgroup_size)
          {
           if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)), injectionSwitch, injectionSwitch)).x > injectionSwitch.y), _GLF_IDENTITY(false, (false) && true) || ((_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], (true ? _GLF_IDENTITY(injectionSwitch[0], float(vec4(injectionSwitch[0], 1.0, 0.0, 1.0))) : _GLF_FUZZED(4067.3147))), injectionSwitch[1])).x > injectionSwitch.y))))))
            barrier();
           _GLF_IDENTITY(buf[next_virtual_gid] = 2, (buf[next_virtual_gid] = 2) >> (_GLF_IDENTITY(74017u & _GLF_IDENTITY(0u, (0u) >> 0u), (74017u & _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, ~ (_GLF_IDENTITY(~ (0u), (~ _GLF_IDENTITY((0u), ((0u)) / 1u)) / 1u)))) | (0u))) >> _GLF_IDENTITY(0u, (0u) | (_GLF_IDENTITY(0u, (0u) / 1u))))));
           subgroupAll(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY((false), ((false)) || false) || false), (_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false))) || false), bool(bvec2(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, bool(bool(false))))))) || false), false)))) || false));
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
           buf[next_virtual_gid] = 2;
           do
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               subgroupAll(_GLF_IDENTITY(true, ! _GLF_IDENTITY((_GLF_IDENTITY(! (true), bool(bvec2(! (true), false)))), ! (! ((_GLF_IDENTITY(! _GLF_IDENTITY(_GLF_IDENTITY((true), ((true)) || false), bool(bool((true)))), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(! (true), false || _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(! (true), _GLF_IDENTITY(! (! (! (true))), ! (! (! (! (! (true))))))), (_GLF_IDENTITY(! _GLF_IDENTITY((true), true && (_GLF_IDENTITY((true), ! (_GLF_IDENTITY(! ((true)), ! (! (! ((true))))))))), ! (! (! (true))))) && true)), ! (! ((_GLF_IDENTITY(_GLF_IDENTITY(! (true), _GLF_IDENTITY(! (! (! (true))), ! (! (! (! (! (true))))))), (_GLF_IDENTITY(! _GLF_IDENTITY((true), true && (_GLF_IDENTITY((true), ! (_GLF_IDENTITY(! ((true)), ! (! (! ((true))))))))), ! (! (! (true))))) && true)))))), false)), (_GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(! (true), _GLF_IDENTITY(false, true && (false)) || (_GLF_IDENTITY(_GLF_IDENTITY(! (true), _GLF_IDENTITY(_GLF_IDENTITY(! (! (! (true))), ! (! (! (! (! (true)))))), (_GLF_IDENTITY(_GLF_IDENTITY(! (! (! (true))), ! (! (! (! (! (true)))))), bool(bvec3(_GLF_IDENTITY(! (! (! (true))), ! (! (! (! (! (true)))))), false, true)))) && true)), (_GLF_IDENTITY(! (true), ! (! (! (true))))) && true))), false)), (_GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(! (true), false || (_GLF_IDENTITY(_GLF_IDENTITY(! (true), _GLF_IDENTITY(! (! (! (true))), ! (! (! (_GLF_IDENTITY(! (! (true)), true && (! (! (true))))))))), (_GLF_IDENTITY(! (true), ! (! (! (true))))) && true))), false)), ! (! (bool(bvec2(_GLF_IDENTITY(! (true), false || (_GLF_IDENTITY(_GLF_IDENTITY(! (true), _GLF_IDENTITY(! (! (! (true))), ! (! (! (! (! (true))))))), _GLF_IDENTITY((_GLF_IDENTITY(! (true), ! (! (! (true))))) && true, bool(bvec3((_GLF_IDENTITY(! (true), ! (! (! (true))))) && true, true, false)))))), false)))))) && true)) && true))))))));
               do
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     barrier();
                    }
                   else
                    {
                    }
                  }
                }
               while(_GLF_WRAPPED_LOOP(false));
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y))))
                barrier();
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
           do
            {
             if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(_GLF_IDENTITY(! (false), ! (_GLF_IDENTITY(_GLF_IDENTITY(! (! (false)), (! (! (false))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bool(bvec3(_GLF_IDENTITY(! (! (false)), (! (! (false))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), ! _GLF_IDENTITY((! (! (false))), bool(bvec3(_GLF_IDENTITY((! (! (false))), ! (_GLF_IDENTITY(! ((! (_GLF_IDENTITY(! (false), (_GLF_IDENTITY(! (false), ! (! (! (false))))) || false)))), ! (! (! ((! (! (_GLF_IDENTITY(false, (false) && true)))))))))), _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, (_GLF_IDENTITY(true, bool(bool(true)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false || (! (_GLF_IDENTITY(true, (_GLF_IDENTITY(true, bool(bool(true)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), true))))))), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false))))) || false)), ! (! ((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))), _GLF_IDENTITY((_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false))))) || false, ! (! (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false))))) || false, false || ((_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false))))) || false)), true && (_GLF_IDENTITY((_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false))))) || false, false || ((_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false))))) || false)))))))))))) || false))
              {
               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                }
               else
                {
                }
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(false, (false) || false) || _GLF_IDENTITY((_GLF_IDENTITY(false, bool(bool(false)))), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY((_GLF_IDENTITY(false, bool(bool(false)))), ! (! (_GLF_IDENTITY((_GLF_IDENTITY(false, bool(bool(false)))), bool(_GLF_IDENTITY(bvec2((_GLF_IDENTITY(false, bool(bool(false)))), true), bvec2(bvec2(bvec2((_GLF_IDENTITY(false, bool(bool(false)))), true))))))))), false), bvec2(bvec4(bvec2(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(false, bool(bool(false)))), ! (_GLF_IDENTITY(! ((_GLF_IDENTITY(false, bool(bool(false))))), bool(bvec4(! ((_GLF_IDENTITY(false, bool(bool(false))))), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))))), ! (! ((_GLF_IDENTITY(false, bool(bool(false))))))), false), true, false)))))), (injectionSwitch.x > injectionSwitch.y))))
                    {
                     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(injectionSwitch.x > injectionSwitch.y)))))))
                      {
                      }
                     else
                      {
                       barrier();
                      }
                    }
                  }
                 else
                  {
                  }
                }
               else
                {
                 do
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   barrier();
                  }
                 while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / exp(vec2(0.0, 0.0))).y))))));
                }
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(false))
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   barrier();
                  }
                }
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
       else
        {
        }
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(7235.2029, -7726.1885)) : injectionSwitch)).x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)))
          barrier();
         for(int _injected_loop_counter = 0; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3)))), (_GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3))))) || false); _injected_loop_counter ++)
          {
           if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y))), ! (! (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y, true && (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y)), (_GLF_IDENTITY(injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y, _GLF_IDENTITY(false, false || (false)) || (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y))) || false))))))), bool(bvec3(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(bvec3(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y) && true, bool(bvec2((injectionSwitch.x < injectionSwitch.y) && true, false)))))), false, false)))), false, true))))
            {
             barrier();
            }
           else
            {
            }
          }
        }
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
          {
           barrier();
          }
        }
      }
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))), bool(bvec4(_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(bool(_GLF_DEAD(false)), ! (_GLF_IDENTITY(! (bool(_GLF_DEAD(false))), bool(bvec3(! (bool(_GLF_DEAD(false))), false, false))))))), true, false, _GLF_IDENTITY(false, (false) && true)))))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x > injectionSwitch.y))));
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         barrier();
        }
      }
    }
   else
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 << _GLF_IDENTITY(_GLF_IDENTITY(int(5), _GLF_IDENTITY(int(ivec2(int(5), 0)), 0 ^ (int(ivec2(int(5), 0))))), int(5)))); _injected_loop_counter --)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(false || (false), (false || (false)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), bool(bvec4(_GLF_IDENTITY(false, _GLF_IDENTITY(true && (_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(false, bool(bvec2(false, true)))))), (true && (false)) || false)), _GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, (true) || false)))), false, false)))) && true)))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       do
        {
         barrier();
         if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y))), ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y)))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), bvec2(bvec4(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), false, true)))), bool(bool(bool(_GLF_IDENTITY(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), bvec2(bvec4(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), false, true))))))))) || false)), bool(bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false), bool(bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false))))))))), bool(bvec2(_GLF_IDENTITY(! (_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)), bool(bool(bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))))), false || (! _GLF_IDENTITY((_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)), bool(bool(bool(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))))), ! (! (_GLF_IDENTITY((_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)), bool(bool(bool(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))))), ((_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)), bool(bool(bool(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false))))))) || false)))))), true)))))), ! (! (bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)) || false)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false, ((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false) || false))), bool(bool(bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || _GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, (false) || false), false, false, true)))))))))))), bool(bvec2(! (_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (true ? _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)) : _GLF_FUZZED(978.541))))), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x)) > injectionSwitch.y))) || false)), bool(bool(bool(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))))), true))))))))))))
        barrier();
      }
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], (_GLF_IDENTITY(injectionSwitch[0], min(injectionSwitch[0], injectionSwitch[0]))) - 0.0), injectionSwitch[1])).x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 while(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), (_GLF_WRAPPED_LOOP(false)) && true), ! (! _GLF_IDENTITY((_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), (_GLF_WRAPPED_LOOP(false)) || false)), bool(bvec3(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), (_GLF_WRAPPED_LOOP(false)) || false)), bool(bvec4((_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), (_GLF_WRAPPED_LOOP(false)) || false)), false, false, false))), true, _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))));
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
