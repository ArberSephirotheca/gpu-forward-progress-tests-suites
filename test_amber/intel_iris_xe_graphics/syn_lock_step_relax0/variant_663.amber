#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 0) uniform buf0 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 for(int _injected_loop_counter = (0 << _GLF_IDENTITY(_GLF_IDENTITY(int(3), max(_GLF_IDENTITY(int(3), min(int(_GLF_IDENTITY(3, ~ (_GLF_IDENTITY(~ (3), int(ivec3(~ (3), 1, 1)))))), int(3))), int(3))), int(3))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 uint subgroup_id = gl_SubgroupID;
 for(int _injected_loop_counter = _GLF_IDENTITY(1, 1 * _GLF_IDENTITY((1), ((1)) / int(_GLF_ONE(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(8.9) : 1.0)), injectionSwitch.y)))); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(_GLF_IDENTITY(0, max(0, 0)), (false ? _GLF_FUZZED(abs(96491)) : _GLF_IDENTITY(0, min(0, 0))))); _injected_loop_counter --)
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       return;
       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y))))))
        break;
      }
     else
      {
       if(_GLF_DEAD(false))
        continue;
      }
    }
  }
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(45.24)), bool(false))))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     for(int _injected_loop_counter = (_GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), (_GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), clamp(_GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), (int(_GLF_ZERO(0.0, injectionSwitch.x))) ^ 0), int(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), float(_GLF_IDENTITY(mat3(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), min(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))), round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), abs(0.0), 0.0, 1.0, 0.0, 1.0, 0.0, tan(0.0)), (true ? mat3(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), min(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))), round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), abs(0.0), 0.0, 1.0, 0.0, 1.0, 0.0, tan(0.0)) : _GLF_FUZZED(mat3(-7.5, -16.13, 4.1, -150.580, -18.12, -5.6, -2.7, -7244.4863, -5973.8962))))))), _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), int(ivec4(_GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), clamp(int(_GLF_ZERO(0.0, injectionSwitch.x)), int(_GLF_ZERO(0.0, injectionSwitch.x)), int(_GLF_ZERO(0.0, injectionSwitch.x)))), (1 & 1), 0, 1)))))) ^ int(_GLF_ZERO(0.0, injectionSwitch.x))) & -92995); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       for(int _injected_loop_counter = _GLF_IDENTITY(1, ~ (~ (1))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 << _GLF_IDENTITY(int(4), int(4)))); _injected_loop_counter --)
        {
         return;
        }
      }
     if(_GLF_DEAD(false))
      break;
    }
  }
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 do
  {
   for(int _injected_loop_counter = (0 | (0 & -98331)); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < 1, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_injected_loop_counter < 1, ! (! (_injected_loop_counter < 1)))), false || (! (_GLF_IDENTITY(_injected_loop_counter < 1, ! (! (_injected_loop_counter < 1))))))))); _GLF_IDENTITY(_injected_loop_counter ++, (0 >> _GLF_IDENTITY(int(0), int(0))) ^ (_GLF_IDENTITY(_injected_loop_counter ++, 0 ^ (_injected_loop_counter ++)))))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), true, false, true))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           return;
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
        }
       if(_GLF_DEAD(false))
        break;
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec2(false, false))), ! (! (false)))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(false))
            break;
           break;
           if(_GLF_DEAD(false))
            continue;
          }
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            break;
           break;
          }
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y) || false, ! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y) || false, ! (! ((injectionSwitch.x > injectionSwitch.y) || false))))))))), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)), _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(-486.685, -3.5)))))).y) || false, ! (! ((injectionSwitch.x > injectionSwitch.y) || false))))))) || false), (_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(min(injectionSwitch.x, injectionSwitch.x), _GLF_IDENTITY(float(mat3x4(min(injectionSwitch.x, injectionSwitch.x), 0.0, 1.0, tan(0.0), sin(0.0), 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, length(0.0))), float(mat4x3(float(mat3x4(min(injectionSwitch.x, injectionSwitch.x), 0.0, 1.0, tan(0.0), sin(0.0), 1.0, 1.0, 1.0, 0.0, _GLF_IDENTITY(0.0, float(_GLF_IDENTITY(mat3x4(_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(4.9)), float(0.0), bool(true))), 0.0, 0.0, 1.0, 0.0, determinant(mat3(_GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0))), 0.0, 0.0, 0.0, 1.0, length(0.0), length(vec3(0.0, 0.0, 0.0)), 0.0, 1.0)), 0.0, 1.0, 1.0, cos(0.0), 0.0, 0.0), mat3x4(mat3x4(mat3x4(_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(4.9)), float(0.0), bool(true))), 0.0, 0.0, 1.0, 0.0, determinant(mat3(_GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0))), 0.0, 0.0, 0.0, 1.0, length(0.0), length(vec3(0.0, 0.0, 0.0)), 0.0, 1.0)), 0.0, 1.0, 1.0, cos(0.0), 0.0, 0.0)))))), 0.0, length(0.0))), 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0))))) > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)))) && true)))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               return;
              }
             else
              {
              }
            }
           if(_GLF_DEAD(false))
            break;
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(9.4)), float(injectionSwitch.y), bool(true)))), false || ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(9.4)), float(injectionSwitch.y), bool(true))))))), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
              continue;
             if(_GLF_DEAD(false))
              break;
             if(_GLF_DEAD(false))
              continue;
             if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
              {
               if(_GLF_DEAD(false))
                return;
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
                  break;
                 return;
                }
               return;
              }
            }
           if(_GLF_DEAD(false))
            {
             do
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 return;
                }
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
             if(_GLF_DEAD(false))
              return;
            }
           if(_GLF_DEAD(false))
            break;
           if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) || false))
            {
             if(_GLF_DEAD(false))
              break;
            }
           else
            {
             if(_GLF_DEAD(false))
              continue;
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
              {
               if(_GLF_DEAD(false))
                break;
               return;
              }
            }
          }
         return;
         if(_GLF_DEAD(false))
          return;
        }
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
            {
             if(_GLF_DEAD(false))
              return;
             if(_GLF_DEAD(false))
              return;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              continue;
             return;
            }
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           continue;
          }
        }
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec3((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED((941.628 / -9.9)), _GLF_FUZZED(-8447.1859)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))).y), false, true))))))
        {
         if(_GLF_DEAD(false))
          break;
         break;
         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, false, true)))))
          return;
        }
      }
    }
   if(_GLF_DEAD(false))
    break;
  }
 while(_GLF_WRAPPED_LOOP(false));
 do
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      continue;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   else
    {
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    break;
  }
 while(_GLF_WRAPPED_LOOP(false));
 do
  {
   if(_GLF_DEAD(false))
    break;
   if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bool(false)))), bool(bool(! (_GLF_IDENTITY(false, bool(bool(false)))))))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))
    {
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(7), int(7))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), max(int(2), int(2))))) >> _GLF_IDENTITY(int(2), int(2)), (true ? (1 << _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), max(_GLF_IDENTITY(int(2), ~ _GLF_IDENTITY((~ (_GLF_IDENTITY(int(2), (int(2)) << 0))), (false ? _GLF_FUZZED(_injected_loop_counter) : (~ (_GLF_IDENTITY(int(2), (int(2)) << 0)))))), int(2))))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(2, (2) | 0)), int(2)) : _GLF_FUZZED(_injected_loop_counter))))); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
         return;
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true, false)))) && true)))
          return;
        }
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         return;
        }
       if(_GLF_DEAD(false))
        continue;
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    break;
   if(_GLF_DEAD(false))
    break;
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, false)))))
  return;
 uint subgroup_size = 16;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   do
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, true && (false))))
      {
       if(_GLF_DEAD(false))
        break;
      }
     else
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(true && (false), false || (_GLF_IDENTITY(true && (false), (true && (false)) && _GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), true && (! (true))))), false)), (bool(bvec2(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), true && (! (true))))), false))) && true))))))))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              continue;
            }
           else
            {
             if(_GLF_DEAD(false))
              continue;
             if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(-6333.5630))))), false || (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(-6333.5630)))))))))
              continue;
             do
              {
               return;
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
             if(_GLF_DEAD(false))
              return;
            }
           if(_GLF_DEAD(false))
            continue;
          }
        }
       else
        {
         if(_GLF_DEAD(false))
          break;
         if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
            break;
           continue;
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(abs(vec2(1.0, 1.0)) * (injectionSwitch), (_GLF_IDENTITY(abs(vec2(1.0, 1.0)) * (injectionSwitch), clamp(abs(vec2(1.0, 1.0)) * (injectionSwitch), abs(vec2(1.0, 1.0)) * (injectionSwitch), _GLF_IDENTITY(abs(vec2(1.0, 1.0)) * (injectionSwitch), (abs(vec2(1.0, 1.0)) * (injectionSwitch)) / vec2(1.0, 1.0))))) * vec2(1.0, 1.0))).y))))
          return;
        }
      }
    }
   while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), false || _GLF_IDENTITY((_GLF_WRAPPED_LOOP(false)), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY((_GLF_WRAPPED_LOOP(false)), ! (! ((_GLF_WRAPPED_LOOP(false))))), true, false), bvec3(bvec3(bvec3(_GLF_IDENTITY((_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, (false) || false))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))), ! (! ((_GLF_WRAPPED_LOOP(false))))), true, false))))))));
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  {
   do
    {
     return;
     if(_GLF_DEAD(false))
      break;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      continue;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
   if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
    {
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (injectionSwitch.x > injectionSwitch.y))))
        break;
       do
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
             if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), ! (! (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))
              {
               if(_GLF_DEAD(false))
                return;
               return;
              }
             else
              {
              }
            }
           else
            {
             if(_GLF_DEAD(false))
              break;
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
     while(_GLF_WRAPPED_LOOP(false));
     return;
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, _GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), (! ((false))) || false))) || false)) && true), (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_IDENTITY(_GLF_FUZZED(-5383.7612), (_GLF_FUZZED(-5383.7612)) + 0.0)), bool(false))), 1.0)), (injectionSwitch) / vec2(1.0, 1.0)).y))))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, true && (true))))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           do
            {
             return;
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
       for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(1, max(_GLF_IDENTITY(1, (false ? _GLF_FUZZED(_injected_loop_counter) : 1)), 1))))); _GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) | (0 >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(6)) * 1)))))
        {
         return;
         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, ! (! (false))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)))))
          continue;
        }
      }
    }
   else
    {
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && _GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, true && (true)))))))
      {
       if(_GLF_DEAD(false))
        return;
       for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (true ? int(0) : _GLF_FUZZED(58545))))); _GLF_WRAPPED_LOOP(_injected_loop_counter < (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(5), int(5))), ((1 << _GLF_IDENTITY(int(5), int(5)))) ^ int(_GLF_ZERO(0.0, injectionSwitch.x))) >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (int(5)) + 0)))); _injected_loop_counter ++)
        {
         return;
        }
      }
     return;
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
    return;
   return;
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y))))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec3(bvec2(false, true), true))))), (injectionSwitch.x > injectionSwitch.y))))
    return;
   do
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
      return;
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) && true)));
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        return;
      }
     else
      {
      }
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) && true), _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))), ((injectionSwitch.x > injectionSwitch.y)) && true))))
      return;
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), true && (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), ! (! (_GLF_WRAPPED_IF_TRUE(true)))))))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, true && (true))))
          {
           if(_GLF_DEAD(false))
            {
             do
              {
               return;
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           return;
          }
         else
          {
           if(_GLF_DEAD(false))
            break;
          }
         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
          return;
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
              break;
             continue;
            }
           if(_GLF_DEAD(false))
            break;
           if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
            {
             if(_GLF_DEAD(false))
              continue;
             if(_GLF_DEAD(false))
              return;
             for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 return;
                }
              }
            }
           if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, ! (! (false)))), false || (! (_GLF_IDENTITY(false, ! (! (false))))))))))
            break;
          }
         else
          {
          }
         if(_GLF_DEAD(false))
          break;
        }
       else
        {
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
    return;
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(_GLF_IDENTITY(bvec3((injectionSwitch.x > injectionSwitch.y), false, false), bvec3(bvec4(_GLF_IDENTITY(bvec3((injectionSwitch.x > injectionSwitch.y), false, false), bvec3(bvec4(bvec3((injectionSwitch.x > injectionSwitch.y), false, false), _GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), true))))))))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       return;
      }
    }
   else
    {
     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true && (_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_TRUE(_GLF_IDENTITY(true, true && (true)), (injectionSwitch.x < injectionSwitch.y))) || false)))))
      {
       do
        {
         if(_GLF_DEAD(false))
          {
           do
            {
             return;
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
       if(_GLF_DEAD(false))
        return;
       for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5))); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         return;
        }
       if(_GLF_DEAD(false))
        return;
      }
     else
      {
       for(int _injected_loop_counter = ((64961 & 0) >> _GLF_IDENTITY(int(0), int(0))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          break;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            return;
           return;
          }
        }
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   do
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           return;
          }
        }
       if(_GLF_DEAD(false))
        break;
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, ! (! (false)))))))
    return;
  }
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec4(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, false, false))))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, true, false)))))
  return;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
  }
 else
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     else
      {
       do
        {
         do
          {
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              return;
             continue;
            }
           if(_GLF_DEAD(false))
            break;
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              return;
             if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)))))
              return;
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) && _GLF_IDENTITY(true, ! (! (true))))));
      }
    }
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).x > injectionSwitch.y)))) || _GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(false, false || (false))))))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   return;
  }
 do
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      continue;
     return;
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) && true)) || false)) && true)));
 do
  {
   if(_GLF_DEAD(false))
    return;
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  return;
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, (false) && true)))), (_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY((_GLF_DEAD(false)) || false, bool(bvec4(_GLF_IDENTITY((_GLF_DEAD(false)) || false, ! (! ((_GLF_DEAD(false)) || false))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)))), false)))) && true), true))))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   else
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(7), int(7))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
          {
           return;
          }
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   if(_GLF_DEAD(false))
    return;
   return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    return;
   return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_DEAD(false), true, true)))))))
    return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      continue;
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       return;
      }
     if(_GLF_DEAD(false))
      continue;
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bvec2(false, true)))));
  }
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 uint workgroup_base = workgroup_size * _GLF_IDENTITY(_GLF_IDENTITY(workgroup_id, min(workgroup_id, _GLF_IDENTITY(workgroup_id, _GLF_IDENTITY((workgroup_id), (_GLF_IDENTITY((workgroup_id), ((workgroup_id)) - 0u)) + 0u) | (workgroup_id)))), (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_id, min(_GLF_IDENTITY(workgroup_id, 0u ^ (workgroup_id)), _GLF_IDENTITY(workgroup_id, (workgroup_id) | _GLF_IDENTITY((workgroup_id), ((workgroup_id)) | (_GLF_IDENTITY((workgroup_id), ((workgroup_id)) / 1u)))))), max(_GLF_IDENTITY(workgroup_id, min(workgroup_id, _GLF_IDENTITY(workgroup_id, (workgroup_id) | _GLF_IDENTITY((workgroup_id), 0u | ((workgroup_id)))))), _GLF_IDENTITY(workgroup_id, min(workgroup_id, _GLF_IDENTITY(workgroup_id, (workgroup_id) | (workgroup_id))))))) ^ _GLF_IDENTITY(0u, _GLF_IDENTITY(uint(uvec4(_GLF_IDENTITY(0u, (0u) | 0u), 0u, 1u, (164799u & 0u))), (uint(uvec4(_GLF_IDENTITY(0u, (0u) | 0u), 0u, 1u, (164799u & 0u)))) + 0u)));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 uint virtual_gid = workgroup_base + subgroup_id * subgroup_size + subgroup_local_id;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   for(int _injected_loop_counter = _GLF_IDENTITY(((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(6), clamp(int(6), int(_GLF_IDENTITY(6, (6) / 1)), int(6))), int(6)), ~ (~ (_GLF_IDENTITY(int(6), int(6)))))), _GLF_IDENTITY(max(((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), ~ (~ (_GLF_IDENTITY(int(6), int(6)))))), ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), ~ (~ (_GLF_IDENTITY(int(6), int(6))))))), max(max(((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), ~ (~ (_GLF_IDENTITY(int(6), int(6)))))), ((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(6), int(6)), min(1 << _GLF_IDENTITY(int(6), int(6)), 1 << _GLF_IDENTITY(int(6), int(6))))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), ~ (~ (_GLF_IDENTITY(int(6), int(6))))))), _GLF_IDENTITY(max(((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), ~ (~ (_GLF_IDENTITY(int(_GLF_IDENTITY(6, min(6, 6))), int(6)))))), ((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(6, ~ (~ (6)))), int(6))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), ~ (~ (_GLF_IDENTITY(int(6), int(6))))))), clamp(max(((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), ~ (~ (_GLF_IDENTITY(int(6), int(6)))))), ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (_GLF_IDENTITY(int(6), (true ? int(6) : _GLF_FUZZED(81959)))) << 0)), ~ (~ (_GLF_IDENTITY(int(6), int(6))))))), max(((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), min(int(6), int(6)))), ~ (~ (_GLF_IDENTITY(int(6), int(6)))))), ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), ~ (~ (_GLF_IDENTITY(int(6), int(6))))))), max(((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), ~ (~ (_GLF_IDENTITY(int(6), int(6)))))), ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(6), (int(6)) << 0), int(6))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), ~ (~ (_GLF_IDENTITY(int(6), int(6)))))))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(0, _GLF_IDENTITY((0) | (0), _GLF_IDENTITY(int(ivec2((0) | (0), int(_GLF_ZERO(0.0, injectionSwitch.x)))), (true ? int(ivec2((0) | (0), int(_GLF_ZERO(0.0, injectionSwitch.x)))) : _GLF_FUZZED(-93167)))))); _injected_loop_counter --)
    {
     return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          continue;
         break;
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
       return;
      }
    }
   if(_GLF_DEAD(false))
    return;
  }
 uint next_virtual_gid = _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, (workgroup_base) | 0u) + subgroup_id * subgroup_size + _GLF_IDENTITY(_GLF_IDENTITY(((subgroup_local_id + 1) % subgroup_size), max(((subgroup_local_id + 1) % subgroup_size), (_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, min(_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, 0u | ((subgroup_local_id + 1) % subgroup_size)), (subgroup_local_id + 1) % subgroup_size))))), max(_GLF_IDENTITY(((subgroup_local_id + 1) % subgroup_size), max(((subgroup_local_id + 1) % subgroup_size), ((subgroup_local_id + 1) % subgroup_size))), _GLF_IDENTITY(((subgroup_local_id + 1) % subgroup_size), max(((subgroup_local_id + 1) % subgroup_size), ((subgroup_local_id + 1) % subgroup_size))))), 0u ^ (workgroup_base + subgroup_id * subgroup_size + _GLF_IDENTITY((_GLF_IDENTITY((subgroup_local_id + 1) % _GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, (subgroup_size) | 0u)) / 1u), clamp((subgroup_local_id + _GLF_IDENTITY(1, (1) ^ 0)) % _GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, 0u | (subgroup_size)), (subgroup_size) | 0u)) / 1u), (subgroup_local_id + 1) % _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, (subgroup_size) | 0u)) / 1u), (_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((subgroup_size), 0u | ((subgroup_size))) | 0u)) / 1u)) | (_GLF_IDENTITY(0u | 0u, (0u | 0u) / 1u))), (subgroup_local_id + 1) % _GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, (subgroup_size) | 0u)) / 1u)))), (false ? _GLF_FUZZED(_GLF_IDENTITY(workgroup_size, max(_GLF_IDENTITY(workgroup_size, max(workgroup_size, _GLF_IDENTITY(workgroup_size, _GLF_IDENTITY((workgroup_size), ((workgroup_size)) - 0u) | 0u))), workgroup_size))) : _GLF_IDENTITY(((subgroup_local_id + 1) % _GLF_IDENTITY(subgroup_size, (subgroup_size) - 0u)), 0u | (((_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) ^ 0u) + 1) % subgroup_size)))))));
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           return;
          }
        }
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          return;
         return;
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)))))
          continue;
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
         break;
        }
      }
    }
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     return;
    }
   else
    {
    }
  }
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), injectionSwitch)).x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (! (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))) * 1.0), _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(_GLF_IDENTITY(-5.4, clamp(-5.4, -5.4, -5.4))) : _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-3462.1832) : injectionSwitch.y)))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED((- -2625.4804)))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED((- -2625.4804)))), max(_GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED((- -2625.4804)))), _GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED((- -2625.4804)))))), _GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED((- -2625.4804)))), _GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED((- -2625.4804)))))))))))) && true)))))
    return;
   do
    {
     do
      {
       if(_GLF_DEAD(false))
        {
         do
          {
           return;
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
           return;
          }
         continue;
        }
       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), true && (! ((injectionSwitch.x > injectionSwitch.y)))))))))
        break;
       for(int _injected_loop_counter = (0 | 0); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) / 1) != 1); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          break;
         if(_GLF_DEAD(false))
          return;
         buf[virtual_gid] = 1;
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
      {
       for(int _injected_loop_counter = (1 | 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                {
                 return;
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                break;
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))))
                break;
               return;
              }
            }
          }
         else
          {
          }
        }
       return;
       if(_GLF_DEAD(false))
        return;
      }
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         return;
        }
       else
        {
        }
      }
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), true))), ! (! (_GLF_DEAD(false)))))
    {
     do
      {
       return;
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 else
  {
   do
    {
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_DEAD(false))
      break;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          break;
         if(_GLF_DEAD(false))
          return;
         return;
        }
       if(_GLF_DEAD(false))
        return;
       return;
      }
     if(_GLF_DEAD(false))
      break;
     if(_GLF_DEAD(false))
      break;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
       continue;
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(! (false), ! (! (! (_GLF_IDENTITY(false, ! (! (false))))))), true), bvec2(bvec4(bvec2(_GLF_IDENTITY(! (false), ! (! (! (false)))), true), _GLF_IDENTITY(true, false || (true)), true))))))), _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec3(false, false, false)), bool(bvec3(bool(bvec3(false, _GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false)), false)), false, false))), true && (bool(bvec3(false, false, _GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), ! (_GLF_IDENTITY(! (bool(bool(false))), (! (bool(bool(false)))) && _GLF_IDENTITY(true, (true) && true))))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), ! (_GLF_IDENTITY(! (bool(_GLF_IDENTITY(bool(false), bool(bool(bool(false)))))), (! (bool(bool(false)))) && true)))), ! _GLF_IDENTITY((! (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), ! (_GLF_IDENTITY(! (bool(bool(false))), (! (bool(bool(false)))) && true)))))), ((! (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), ! (_GLF_IDENTITY(! (bool(bool(false))), (! (bool(bool(false)))) && true))))))) || false)))))))))), (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)) + (injectionSwitch.y)), mix(float(_GLF_FUZZED(-74.24)), float(_GLF_IDENTITY(injectionSwitch.y, 0.0 + (injectionSwitch.y))), bool(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), bool(bvec2((_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, false || (injectionSwitch.x < injectionSwitch.y))), false)))) && _GLF_IDENTITY(true, (true) || false)))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(0.0 + (injectionSwitch.y), (true ? 0.0 + (injectionSwitch.y) : _GLF_FUZZED(-2.3)))), mix(float(_GLF_FUZZED(-74.24)), float(_GLF_IDENTITY(injectionSwitch.y, 0.0 + (injectionSwitch.y))), bool(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y), _GLF_IDENTITY(bool(bvec2((_GLF_IDENTITY(injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y, ! (! (injectionSwitch.x < _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y, clamp(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y)))))), true)), (bool(bvec2((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y), true))) && true))))))))))))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
      return;
    }
   else
    {
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
    return;
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            return;
           if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
            {
            }
           else
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                return;
               return;
              }
             else
              {
              }
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                return;
               return;
              }
            }
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
          }
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           return;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
          }
         else
          {
           if(_GLF_DEAD(false))
            return;
          }
         if(_GLF_DEAD(false))
          return;
        }
      }
     else
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), ! (! (_GLF_IDENTITY(false, false || (false))))), true && (_GLF_IDENTITY(false, false || (false))))) && true)))
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 | 1)); _injected_loop_counter ++)
            {
             return;
            }
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(false))
            return;
          }
         return;
         do
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(_GLF_IDENTITY(mat4(injectionSwitch.y, 1.0, 1.0, log(1.0), 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, tan(0.0), 0.0, 0.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 0.0, 0.0), transpose(transpose(mat4(injectionSwitch.y, 1.0, 1.0, log(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0))), 1.0, _GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))), 1.0, tan(0.0), 0.0, 0.0, 0.0, 0.0, _GLF_ZERO(_GLF_IDENTITY(0.0, clamp(_GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(-1.4))), 0.0, _GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(-8.6))))), injectionSwitch.x), 1.0, 0.0, 0.0))))))))))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
                {
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                  {
                   return;
                   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
                    {
                    }
                   else
                    {
                     for(int _injected_loop_counter = int(_GLF_ONE(_GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat2(_GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(1.0, 1.0 * (1.0)))), 0.0, 0.0, 0.0)), (float(mat2(_GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(1.0, 1.0 * (1.0)))), 0.0, 0.0, 0.0))) / _GLF_IDENTITY(dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 1.0, 0.0, 0.0)), dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 1.0, 0.0, 0.0))))), injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                      {
                       if(_GLF_DEAD(false))
                        continue;
                       if(_GLF_WRAPPED_IF_TRUE(true))
                        {
                         if(_GLF_DEAD(false))
                          return;
                        }
                       else
                        {
                        }
                      }
                    }
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(false))
                      return;
                     break;
                    }
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    continue;
                  }
                 else
                  {
                  }
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                   if(_GLF_DEAD(false))
                    break;
                   break;
                  }
                }
              }
             else
              {
              }
             for(int _injected_loop_counter = _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), min(_GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - log(1.0))), max(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), min(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, 0.0 + (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-35.15)), float(injectionSwitch.x), bool(true)))))))), _GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)))))), (_GLF_IDENTITY(int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0))), _GLF_IDENTITY((int(_GLF_ZERO(0.0, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat3(injectionSwitch, 0.0, 0.0, 1.0, 1.0, log(1.0), 0.0, abs(1.0))), max(vec2(mat3(injectionSwitch, 0.0, 0.0, 1.0, 1.0, log(1.0), 0.0, abs(1.0))), vec2(mat3(injectionSwitch, 0.0, 0.0, 1.0, 1.0, log(1.0), 0.0, abs(1.0)))))), vec2(mat4x2(injectionSwitch, 1.0, sqrt(1.0), 1.0, _GLF_IDENTITY(0.0, float(mat2(_GLF_IDENTITY(0.0, (0.0) - 0.0), 1.0, determinant(mat4(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0)), 0.0))), 0.0, 1.0))).x))) >> 0, int(int((int(_GLF_ZERO(0.0, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat3(injectionSwitch, 0.0, 0.0, 1.0, 1.0, log(1.0), 0.0, abs(1.0))), max(vec2(mat3(injectionSwitch, 0.0, 0.0, 1.0, 1.0, log(1.0), 0.0, abs(1.0))), vec2(mat3(injectionSwitch, 0.0, 0.0, 1.0, 1.0, log(1.0), 0.0, abs(1.0)))))), vec2(mat4x2(injectionSwitch, 1.0, sqrt(1.0), 1.0, _GLF_IDENTITY(0.0, float(mat2(_GLF_IDENTITY(0.0, (0.0) - 0.0), 1.0, determinant(mat4(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0)), 0.0))), 0.0, 1.0))).x))) >> 0))))) | (int(_GLF_ZERO(0.0, injectionSwitch.x)))), int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(-796.228)), vec2(_GLF_FUZZED(-5.6), (injectionSwitch)[1]), bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))).x)))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
              {
               do
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  break;
                 if(_GLF_DEAD(false))
                  return;
                 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
                  return;
                }
               while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bvec4(false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)))));
               if(_GLF_DEAD(false))
                break;
               if(_GLF_DEAD(false))
                break;
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _GLF_IDENTITY(_injected_loop_counter ++, 0 + (_GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) ^ 0))))
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                   if(_GLF_DEAD(false))
                    continue;
                  }
                 else
                  {
                   do
                    {
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_DEAD(false))
                        break;
                       return;
                      }
                     return;
                     if(_GLF_DEAD(false))
                      continue;
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)).x > injectionSwitch.y), ((_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)).x > injectionSwitch.y)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
                    break;
                  }
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_DEAD(false))
                  continue;
                 if(_GLF_DEAD(false))
                  return;
                 continue;
                }
               if(_GLF_DEAD(false))
                continue;
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                break;
              }
            }
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(false))
            return;
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            return;
           return;
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec3(false, _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(-53.68, -2623.2952)))).x > injectionSwitch.y)), false))), (injectionSwitch.x > injectionSwitch.y))))
        return;
       do
        {
         if(_GLF_DEAD(false))
          break;
         do
          {
           if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y, bool(bvec4(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y, false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))), bool(bvec3(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y, bool(bvec4(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(9.5)), bool(false))))) > injectionSwitch.y, false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), ! (! (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y, bool(bvec4(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(9.5)), bool(false))))) > injectionSwitch.y, false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), ((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y, bool(bvec4(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(9.5)), bool(false))))) > injectionSwitch.y, false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))) || false)))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))))
            return;
           if(_GLF_DEAD(false))
            break;
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
        {
         if(_GLF_DEAD(false))
          return;
         return;
        }
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, false, false)))))
        {
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(7), (_GLF_IDENTITY(int(7), (_GLF_IDENTITY(int(7), (int(7)) | 0)) | (int(7)))) / 1), int(7))) >> _GLF_IDENTITY(int(7), int(7))) | 1)); _injected_loop_counter ++)
            {
             return;
            }
           if(_GLF_DEAD(false))
            return;
          }
         if(_GLF_DEAD(false))
          {
           do
            {
             return;
            }
           while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))));
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             return;
            }
           else
            {
            }
          }
         if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), false || (_GLF_WRAPPED_IF_TRUE(true))))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             return;
            }
           else
            {
            }
          }
         else
          {
          }
        }
       if(_GLF_DEAD(false))
        return;
      }
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
        {
         do
          {
           return;
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       do
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          break;
         for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            return;
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, ! (! (false)))))))
            return;
           break;
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
       return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          return;
         return;
        }
       for(int _injected_loop_counter = 1; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0), (_GLF_WRAPPED_LOOP(_injected_loop_counter != 0)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
           for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (int(2)) | (int(2))))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_GLF_IDENTITY(_injected_loop_counter, 0 + (_injected_loop_counter))) - 0) > 0); _injected_loop_counter --)
            {
             if(_GLF_DEAD(false))
              continue;
             return;
            }
          }
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            break;
           if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) && true)))
            return;
          }
         if(_GLF_DEAD(false))
          break;
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         return;
        }
       do
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          return;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     else
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            return;
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)), injectionSwitch)).y))))
            {
            }
           else
            {
             do
              {
               return;
               if(_GLF_DEAD(false))
                continue;
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 return;
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     return;
                     if(_GLF_DEAD(false))
                      return;
                    }
                  }
                 if(_GLF_DEAD(false))
                  return;
                }
               if(_GLF_DEAD(false))
                {
                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
                  {
                   return;
                  }
                }
              }
            }
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))
              return;
             for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(6), int(6))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
              {
               if(_GLF_DEAD(false))
                return;
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    break;
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    break;
                   return;
                   if(_GLF_DEAD(false))
                    break;
                  }
                 else
                  {
                   if(_GLF_DEAD(false))
                    break;
                  }
                }
              }
            }
           else
            {
            }
          }
         if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bvec3(_GLF_IDENTITY(true, (true) || false), false, true)))))
          {
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              return;
             return;
             if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, true && (false)))))))
              return;
            }
           if(_GLF_DEAD(false))
            return;
          }
         else
          {
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       else
        {
         if(_GLF_DEAD(false))
          return;
        }
      }
    }
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      {
       do
        {
         return;
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(false))
        return;
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       do
        {
         if(_GLF_DEAD(false))
          return;
        }
       while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), bool(bvec3(_GLF_WRAPPED_LOOP(false), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), bool(bvec3(_GLF_WRAPPED_LOOP(false), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), ! (! (! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), bool(bvec3(_GLF_WRAPPED_LOOP(false), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))) || false))));
       if(_GLF_DEAD(false))
        {
         do
          {
           return;
           if(_GLF_DEAD(false))
            return;
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       do
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
         if(_GLF_DEAD(false))
          return;
         return;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
  }
 do
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, 0.0 + (_GLF_IDENTITY(injectionSwitch.y, float(_GLF_IDENTITY(mat3x2(injectionSwitch.y, 1.0, 1.0, 0.0, 1.0, exp(0.0)), mat3x2(0.0, 0.0, 0.0, 0.0, 0.0, 0.0) + (mat3x2(injectionSwitch.y, 1.0, 1.0, 0.0, 1.0, exp(0.0))))))))))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false))))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         return;
        }
       else
        {
        }
      }
    }
   else
    {
    }
   for(int _injected_loop_counter = (0 ^ 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     atomicStore(buf[_GLF_IDENTITY(next_virtual_gid, (next_virtual_gid) | 0u)], uint(2), 4, 64, 0);
    }
   if(_GLF_DEAD(false))
    return;
  }
 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, true && (false))));
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
