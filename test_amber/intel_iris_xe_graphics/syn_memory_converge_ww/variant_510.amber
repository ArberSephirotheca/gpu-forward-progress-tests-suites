#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer WriteVal {
 uint write_val;
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), bool(bvec4(! (_GLF_IDENTITY(_GLF_DEAD(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_DEAD(false)))), false, false, true))))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)))).y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, true && (false)))), false || (false)))), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(false, true && (false)))), (bool(bool(_GLF_IDENTITY(false, true && (false))))) || false))))
  barrier();
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false)), (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bool(false))), _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false), _GLF_IDENTITY(_GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(false, false || (false)))), true && ((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false)))) || _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)), (bool(bvec4(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))) && true)), ((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (false))))))))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))) || false), false || (_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))) - 0.0))), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(8.9), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-5.6)), bvec2(true, false))).y, injectionSwitch.y))) - 0.0, clamp((_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))) - 0.0, (_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))) - 0.0, (_GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(max(injectionSwitch.y, injectionSwitch.y), clamp(max(injectionSwitch.y, injectionSwitch.y), max(injectionSwitch.y, injectionSwitch.y), _GLF_IDENTITY(max(injectionSwitch.y, injectionSwitch.y), clamp(max(injectionSwitch.y, injectionSwitch.y), max(injectionSwitch.y, injectionSwitch.y), max(injectionSwitch.y, injectionSwitch.y))))))) - 0.0))))), (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))) - 0.0)))) || false)) || false) || (false))))))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), vec2(1.0, _GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, float(_GLF_IDENTITY(mat4x3(1.0, 1.0, 0.0, _GLF_IDENTITY(dot(vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, 0.0)), dot(vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, 0.0))), 1.0, abs(1.0), 1.0, 1.0, 0.0, 0.0, 1.0, 1.0), transpose(transpose(mat4x3(1.0, 1.0, 0.0, _GLF_IDENTITY(dot(vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, 0.0)), dot(vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, 0.0))), 1.0, abs(1.0), 1.0, 1.0, 0.0, 0.0, 1.0, 1.0)))))), 1.0))) * (injectionSwitch)), (_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), ((injectionSwitch) * mat2(1.0)) - vec2(0.0, 0.0)))) - vec2(0.0, 0.0))))) * mat2(_GLF_ONE(1.0, injectionSwitch.y))).y))), _GLF_IDENTITY(bool(bvec2(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * _GLF_IDENTITY((injectionSwitch), (true ? _GLF_IDENTITY((injectionSwitch), ((injectionSwitch)) / vec2(1.0, 1.0)) : _GLF_FUZZED(vec2(50.34, -4790.2973))))).y))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), bool(bvec4(bool(bvec2(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).y))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), false, true, false)))))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)))), injectionSwitch.y))))))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, ! (! (false)))))), ! (! (false)))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(vec2(injectionSwitch))).y))))), ! (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(vec2(injectionSwitch))).y)))))), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(vec2(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1]))))))).y)))))), (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(! (! (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(vec2(injectionSwitch))).y), false || (_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(vec2(injectionSwitch))).y), bool(bool(_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(vec2(injectionSwitch))).y), bool(bvec3((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(vec2(injectionSwitch))).y), true, false))))))))))), ! (! (! (! (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(vec2(injectionSwitch))).y), false || (_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(vec2(injectionSwitch))), (true ? _GLF_IDENTITY(injectionSwitch, vec2(vec2(injectionSwitch))) : _GLF_FUZZED(mod(vec2(-601.912, -1532.4557), injectionSwitch)))).y), bool(bool(_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(vec2(injectionSwitch))).y), bool(bvec3((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(vec2(injectionSwitch))).y), true, false))))))))))))))))) || false), true, true)), bool(bool(bool(bvec3(_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), true), bvec2(bvec3(bvec2(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), true), true))))), _GLF_IDENTITY(! (! (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(vec2(injectionSwitch))).y)))), (! (! (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(vec2(injectionSwitch))).y))))) && true))), (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(vec2(injectionSwitch))).y))))))) || false), true, true)))))), false || (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))) || false)), ! (! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(vec2(injectionSwitch))).y, ! (! (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(vec2(injectionSwitch))).y, true && (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(vec2(injectionSwitch))).y, ! (! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(vec2(injectionSwitch))).y)))))))))))))), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(float(96688))), bool(false))) > _GLF_IDENTITY(injectionSwitch, vec2(vec2(injectionSwitch))).y)))))), (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(vec2(-6661.2795, 10.79)) : injectionSwitch)), vec2(vec2(injectionSwitch))).y), false || (_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(vec2(injectionSwitch))).y), bool(bool(_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(vec2(injectionSwitch)), log(vec2(1.0, 1.0)) + (_GLF_IDENTITY(vec2(vec2(injectionSwitch)), (vec2(vec2(injectionSwitch))) / vec2(1.0, 1.0))))).y), bool(bvec3((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(vec2(injectionSwitch))).y), true, false)))))))))))))) || false), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(float(96688))), bool(false))) > _GLF_IDENTITY(injectionSwitch, vec2(vec2(injectionSwitch))).y)))))), (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(vec2(-6661.2795, 10.79)) : injectionSwitch)), vec2(vec2(injectionSwitch))).y), false || (_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(vec2(injectionSwitch))).y), bool(bool(_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(vec2(injectionSwitch)), log(vec2(1.0, 1.0)) + (_GLF_IDENTITY(vec2(vec2(injectionSwitch)), (vec2(vec2(injectionSwitch))) / vec2(1.0, 1.0))))).y), bool(bvec3((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(vec2(injectionSwitch))).y), true, false)))))))))))))) || false), true, true)), ! (! (bool(bvec3(_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(float(96688))), bool(false))) > _GLF_IDENTITY(injectionSwitch, vec2(vec2(injectionSwitch))).y)))))), (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(vec2(-6661.2795, 10.79)) : injectionSwitch)), vec2(vec2(injectionSwitch))).y), false || (_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(vec2(injectionSwitch))).y), bool(bool(_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(vec2(injectionSwitch)), log(vec2(1.0, 1.0)) + (_GLF_IDENTITY(vec2(vec2(injectionSwitch)), (vec2(vec2(injectionSwitch))) / vec2(1.0, 1.0))))).y), bool(bvec3((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(vec2(injectionSwitch))).y), true, false)))))))))))))) || false), true, true)))))), true, true)), bool(bool(bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(! (! (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(vec2(injectionSwitch))).y, (_GLF_IDENTITY(injectionSwitch, vec2(vec2(injectionSwitch))).y) - sqrt(0.0)))))), (! (! (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(vec2(injectionSwitch))).y))))) && true))), (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)))))), ! (! (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(vec2(injectionSwitch))).y))))))) || false), ! (! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y)), _GLF_IDENTITY(_GLF_IDENTITY(! (! (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(vec2(injectionSwitch))).y, (_GLF_IDENTITY(injectionSwitch, vec2(vec2(injectionSwitch))).y) - sqrt(0.0)))))), true && (! (! (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(vec2(injectionSwitch))).y, (_GLF_IDENTITY(injectionSwitch, vec2(vec2(injectionSwitch))).y) - sqrt(0.0)))))))), (! (! (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(vec2(injectionSwitch))).y))))) && _GLF_IDENTITY(true, (true) && true)))), (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)))))), ! (! (_GLF_FALSE(_GLF_IDENTITY(false, (false) || false), (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(vec2(injectionSwitch))), max(_GLF_IDENTITY(injectionSwitch, vec2(vec2(injectionSwitch))), _GLF_IDENTITY(injectionSwitch, vec2(vec2(injectionSwitch))))).y))))))) || false)))), true, true), bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(! (! (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(vec2(injectionSwitch))).y, (_GLF_IDENTITY(injectionSwitch, vec2(vec2(injectionSwitch))).y) - sqrt(0.0)))))), (! (! (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(vec2(injectionSwitch))).y))))) && true))), (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)))))), ! (! (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(vec2(injectionSwitch))).y))))))) || false), ! (! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y)), _GLF_IDENTITY(_GLF_IDENTITY(! (! (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(vec2(injectionSwitch))).y, (_GLF_IDENTITY(injectionSwitch, vec2(vec2(injectionSwitch))).y) - sqrt(0.0)))))), true && (! (! (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(vec2(injectionSwitch))).y, (_GLF_IDENTITY(injectionSwitch, vec2(vec2(injectionSwitch))).y) - sqrt(0.0)))))))), (! (! (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(vec2(injectionSwitch))).y))))) && _GLF_IDENTITY(true, (true) && true)))), (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)))))), ! (! (_GLF_FALSE(_GLF_IDENTITY(false, (false) || false), (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(vec2(injectionSwitch))), max(_GLF_IDENTITY(injectionSwitch, vec2(vec2(injectionSwitch))), _GLF_IDENTITY(injectionSwitch, vec2(vec2(injectionSwitch))))).y))))))) || false)))), true, true), bvec3(bvec4(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(! (! (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(vec2(injectionSwitch))).y, (_GLF_IDENTITY(injectionSwitch, vec2(vec2(injectionSwitch))).y) - sqrt(0.0)))))), (! (! (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(vec2(injectionSwitch))).y))))) && true))), (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)))))), ! (! (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(vec2(injectionSwitch))).y))))))) || false), ! (! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y)), _GLF_IDENTITY(_GLF_IDENTITY(! (! (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(vec2(injectionSwitch))).y, (_GLF_IDENTITY(injectionSwitch, vec2(vec2(injectionSwitch))).y) - sqrt(0.0)))))), true && (! (! (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(vec2(injectionSwitch))).y, (_GLF_IDENTITY(injectionSwitch, vec2(vec2(injectionSwitch))).y) - sqrt(0.0)))))))), (! (! (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(vec2(injectionSwitch))).y))))) && _GLF_IDENTITY(true, (true) && true)))), (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)))))), ! (! (_GLF_FALSE(_GLF_IDENTITY(false, (false) || false), (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(vec2(injectionSwitch))), max(_GLF_IDENTITY(injectionSwitch, vec2(vec2(injectionSwitch))), _GLF_IDENTITY(injectionSwitch, vec2(vec2(injectionSwitch))))).y))))))) || false)))), true, true), true))), true))))))))))))))
  barrier();
 uint num_workgroup = _GLF_IDENTITY(gl_NumWorkGroups, min(_GLF_IDENTITY(gl_NumWorkGroups, clamp(gl_NumWorkGroups, _GLF_IDENTITY(gl_NumWorkGroups, min(gl_NumWorkGroups, gl_NumWorkGroups)), gl_NumWorkGroups)), gl_NumWorkGroups)).x;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(7.5), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED((-499.846 * 5.9))), bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))).x > injectionSwitch.y))))
      barrier();
     if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec3(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, true))))), (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec3(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, true))))), (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false), false, true, true)), (bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec3(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, true))))), (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false), false, true, true))) && true))))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY((_GLF_DEAD(false)) || false, _GLF_IDENTITY(bool(bool(_GLF_IDENTITY((_GLF_DEAD(false)) || false, bool(bvec2((_GLF_DEAD(false)) || false, true))))), bool(bvec4(_GLF_IDENTITY(bool(bool(_GLF_IDENTITY((_GLF_DEAD(false)) || false, bool(bvec2((_GLF_DEAD(false)) || false, true))))), bool(bool(bool(bool(_GLF_IDENTITY((_GLF_DEAD(false)) || false, bool(bvec2((_GLF_DEAD(false)) || false, true)))))))), false, false, false))))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, abs(vec2(0.0, 0.0)) + (injectionSwitch)).x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)))))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 uint workgroup_id = _GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID, clamp(gl_WorkGroupID, gl_WorkGroupID, gl_WorkGroupID)).x, (_GLF_IDENTITY(gl_WorkGroupID.x, (false ? _GLF_FUZZED(workgroup_size) : _GLF_IDENTITY(gl_WorkGroupID.x, (gl_WorkGroupID.x) * 1u)))) ^ 0u);
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 uint workgroup_base = _GLF_IDENTITY(workgroup_size, ~ (~ (_GLF_IDENTITY(workgroup_size, max(workgroup_size, workgroup_size))))) * _GLF_IDENTITY(workgroup_id, (_GLF_IDENTITY(false, false || (false)) ? _GLF_FUZZED(workgroup_size) : _GLF_IDENTITY(workgroup_id, (_GLF_IDENTITY(workgroup_id, max(workgroup_id, _GLF_IDENTITY(workgroup_id, 0u | (_GLF_IDENTITY(workgroup_id, (workgroup_id) << 0u)))))) - 0u)));
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) && true)), false || _GLF_IDENTITY((_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) && true)), ! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) && true))), (! (_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) && true)))) || false)))), ((_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) && true)), ! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) && true))), (! (_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) && true)))) || false))))) || false)))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(_GLF_IDENTITY(vec2(_GLF_FUZZED(9721.4701), _GLF_FUZZED((9.1 + 4020.9340))), (vec2(_GLF_FUZZED(9721.4701), _GLF_FUZZED((9.1 + 4020.9340)))) - vec2(0.0, 0.0)), vec2((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch)[1], max(_GLF_IDENTITY((injectionSwitch)[1], float(vec4(_GLF_IDENTITY((injectionSwitch)[1], float(mat3((injectionSwitch)[1], 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0))), log(1.0), 0.0, 1.0))), (injectionSwitch)[1]))), bvec2(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) || false), _GLF_IDENTITY(true, _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(true), false || (bool(true)))), true && (bool(_GLF_IDENTITY(bool(true), false || (bool(true)))))))))).y))), (_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))) && true))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 uint virtual_gid = workgroup_base + _GLF_IDENTITY(subgroup_id, _GLF_IDENTITY(_GLF_IDENTITY((subgroup_id), ((subgroup_id)) | 0u), ((subgroup_id)) | ((subgroup_id))) | (_GLF_IDENTITY(subgroup_id, uint(uvec3(subgroup_id, 0u, 1u))))) * subgroup_size + _GLF_IDENTITY(subgroup_local_id, uint(uvec3(subgroup_local_id, _GLF_IDENTITY(1u, _GLF_IDENTITY(_GLF_IDENTITY((1u), max((1u), (1u))), ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ ((1u)), _GLF_IDENTITY((~ ((1u))), uint(uint((~ ((1u)))))) + uint(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).x))), (~ _GLF_IDENTITY(((1u)), min(((1u)), ((1u))))) - (0u << _GLF_IDENTITY(uint(7u), uint(7u)))))) | 0u), 1u)));
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(! (false), bool(bvec2(! (false), false))), bool(bvec2(! (false), _GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) && true), false || (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) && true)))))), false || (_GLF_IDENTITY(_GLF_IDENTITY(! (false), bool(bvec2(! (false), false))), (_GLF_IDENTITY(! (false), bool(bvec2(! (false), false)))) && true)))), false || ((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(! (false), bool(bvec2(! (false), false))), bool(bvec2(! (false), _GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) && true), false || (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) && true)))))), false || (_GLF_IDENTITY(_GLF_IDENTITY(! (false), bool(bvec2(! (false), false))), (_GLF_IDENTITY(! (false), bool(bvec2(! (false), false)))) && true)))))))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((false) && true, ((false) && true) && true))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))), true && (injectionSwitch.x > injectionSwitch.y))))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), (bool(false)) && true)))))
    barrier();
  }
 atomicStore(write_val, uint(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, ~ (~ (virtual_gid))), (_GLF_IDENTITY(virtual_gid, _GLF_IDENTITY(0u, _GLF_IDENTITY((0u), min(_GLF_IDENTITY((0u), clamp((0u), (0u), (0u))), (0u))) | 0u) ^ (virtual_gid))) ^ _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, uint(uvec2(0u, 0u)))) >> _GLF_IDENTITY((0u >> _GLF_IDENTITY(uint(3u), uint(3u))), _GLF_IDENTITY(uint(uvec3(_GLF_IDENTITY((_GLF_IDENTITY(0u >> _GLF_IDENTITY(uint(3u), uint(3u)), (0u >> _GLF_IDENTITY(uint(3u), uint(3u))) >> 0u)), clamp((0u >> _GLF_IDENTITY(uint(_GLF_IDENTITY(3u, uint(uvec4(3u, 1u, 1u, 1u)))), uint(3u))), (0u >> _GLF_IDENTITY(uint(3u), uint(3u))), (0u >> _GLF_IDENTITY(uint(3u), uint(3u))))), 0u, 0u)), (uint(uvec3(_GLF_IDENTITY((_GLF_IDENTITY(0u >> _GLF_IDENTITY(uint(3u), uint(3u)), (0u >> _GLF_IDENTITY(uint(_GLF_IDENTITY(3u, 0u | (3u))), uint(3u))) >> 0u)), clamp((0u >> _GLF_IDENTITY(uint(3u), uint(3u))), _GLF_IDENTITY((0u >> _GLF_IDENTITY(uint(3u), uint(3u))), (true ? (0u >> _GLF_IDENTITY(uint(3u), uint(3u))) : _GLF_FUZZED(subgroup_id))), (_GLF_IDENTITY(0u, (false ? _GLF_FUZZED(_GLF_IDENTITY(packUnorm2x16(vec2(-6.0, -8.2)), _GLF_IDENTITY(uint(uvec2(_GLF_IDENTITY(packUnorm2x16(vec2(-6.0, -8.2)), min(_GLF_IDENTITY(packUnorm2x16(vec2(-6.0, -8.2)), (packUnorm2x16(vec2(-6.0, -8.2))) / 1u), packUnorm2x16(vec2(-6.0, -8.2)))), (0u | (0u >> _GLF_IDENTITY(uint(1u), uint(1u)))))), max(uint(uvec2(_GLF_IDENTITY(packUnorm2x16(vec2(-6.0, -8.2)), min(_GLF_IDENTITY(packUnorm2x16(vec2(-6.0, -8.2)), (packUnorm2x16(vec2(-6.0, -8.2))) / 1u), packUnorm2x16(vec2(-6.0, -8.2)))), (0u | (0u >> _GLF_IDENTITY(uint(1u), uint(1u)))))), uint(uvec2(_GLF_IDENTITY(packUnorm2x16(vec2(-6.0, -8.2)), min(_GLF_IDENTITY(packUnorm2x16(vec2(-6.0, -8.2)), (packUnorm2x16(vec2(-6.0, -8.2))) / 1u), packUnorm2x16(vec2(-6.0, -8.2)))), (0u | (0u >> _GLF_IDENTITY(uint(1u), uint(1u)))))))))) : 0u)) >> _GLF_IDENTITY(uint(3u), uint(3u))))), 0u, 0u))) ^ 0u)))), (_GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, ~ (~ (virtual_gid))), (_GLF_IDENTITY(virtual_gid, _GLF_IDENTITY(0u, _GLF_IDENTITY((0u), min(_GLF_IDENTITY((0u), clamp((0u), (0u), (0u))), (0u))) | 0u) ^ (virtual_gid))) ^ _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, uint(uvec2(0u, 0u)))) >> _GLF_IDENTITY((0u >> _GLF_IDENTITY(uint(3u), uint(3u))), _GLF_IDENTITY(uint(uvec3(_GLF_IDENTITY((_GLF_IDENTITY(0u >> _GLF_IDENTITY(uint(3u), uint(3u)), (0u >> _GLF_IDENTITY(uint(3u), uint(3u))) >> 0u)), clamp((0u >> _GLF_IDENTITY(uint(_GLF_IDENTITY(3u, uint(uvec4(3u, 1u, 1u, 1u)))), uint(3u))), (0u >> _GLF_IDENTITY(uint(3u), uint(3u))), (0u >> _GLF_IDENTITY(uint(3u), uint(3u))))), 0u, 0u)), (uint(uvec3(_GLF_IDENTITY((_GLF_IDENTITY(0u >> _GLF_IDENTITY(uint(3u), uint(3u)), (0u >> _GLF_IDENTITY(uint(_GLF_IDENTITY(3u, 0u | (3u))), uint(3u))) >> 0u)), clamp((0u >> _GLF_IDENTITY(uint(3u), uint(3u))), _GLF_IDENTITY((0u >> _GLF_IDENTITY(uint(3u), uint(3u))), (true ? (0u >> _GLF_IDENTITY(uint(3u), uint(3u))) : _GLF_FUZZED(subgroup_id))), (_GLF_IDENTITY(0u, (false ? _GLF_FUZZED(_GLF_IDENTITY(packUnorm2x16(vec2(-6.0, -8.2)), _GLF_IDENTITY(uint(uvec2(_GLF_IDENTITY(packUnorm2x16(vec2(-6.0, -8.2)), min(_GLF_IDENTITY(packUnorm2x16(vec2(-6.0, -8.2)), (packUnorm2x16(vec2(-6.0, -8.2))) / 1u), packUnorm2x16(vec2(-6.0, -8.2)))), (0u | (0u >> _GLF_IDENTITY(uint(1u), uint(1u)))))), max(uint(uvec2(_GLF_IDENTITY(packUnorm2x16(vec2(-6.0, -8.2)), min(_GLF_IDENTITY(packUnorm2x16(vec2(-6.0, -8.2)), (packUnorm2x16(vec2(-6.0, -8.2))) / 1u), packUnorm2x16(vec2(-6.0, -8.2)))), (0u | (0u >> _GLF_IDENTITY(uint(1u), uint(1u)))))), uint(uvec2(_GLF_IDENTITY(packUnorm2x16(vec2(-6.0, -8.2)), min(_GLF_IDENTITY(packUnorm2x16(vec2(-6.0, -8.2)), (packUnorm2x16(vec2(-6.0, -8.2))) / 1u), packUnorm2x16(vec2(-6.0, -8.2)))), (0u | (0u >> _GLF_IDENTITY(uint(1u), uint(1u)))))))))) : 0u)) >> _GLF_IDENTITY(uint(3u), uint(3u))))), 0u, 0u))) ^ 0u))))) | (_GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, ~ (~ (virtual_gid))), (_GLF_IDENTITY(virtual_gid, _GLF_IDENTITY(0u, _GLF_IDENTITY((0u), min(_GLF_IDENTITY((0u), clamp((0u), (0u), (0u))), (0u))) | 0u) ^ (virtual_gid))) ^ _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, uint(uvec2(0u, 0u)))) >> _GLF_IDENTITY((0u >> _GLF_IDENTITY(uint(3u), uint(3u))), _GLF_IDENTITY(uint(uvec3(_GLF_IDENTITY((_GLF_IDENTITY(0u >> _GLF_IDENTITY(uint(3u), uint(3u)), (0u >> _GLF_IDENTITY(uint(3u), uint(3u))) >> 0u)), clamp((0u >> _GLF_IDENTITY(uint(_GLF_IDENTITY(3u, uint(uvec4(3u, 1u, 1u, 1u)))), uint(3u))), (0u >> _GLF_IDENTITY(uint(3u), uint(3u))), (0u >> _GLF_IDENTITY(uint(3u), uint(3u))))), 0u, 0u)), (uint(uvec3(_GLF_IDENTITY((_GLF_IDENTITY(0u >> _GLF_IDENTITY(uint(3u), uint(3u)), (0u >> _GLF_IDENTITY(uint(_GLF_IDENTITY(3u, 0u | (3u))), uint(3u))) >> 0u)), clamp((0u >> _GLF_IDENTITY(uint(3u), uint(3u))), _GLF_IDENTITY((0u >> _GLF_IDENTITY(uint(3u), uint(3u))), (true ? (0u >> _GLF_IDENTITY(uint(3u), uint(3u))) : _GLF_FUZZED(subgroup_id))), (_GLF_IDENTITY(0u, (false ? _GLF_FUZZED(_GLF_IDENTITY(packUnorm2x16(vec2(-6.0, -8.2)), _GLF_IDENTITY(uint(uvec2(_GLF_IDENTITY(packUnorm2x16(vec2(-6.0, -8.2)), min(_GLF_IDENTITY(packUnorm2x16(vec2(-6.0, -8.2)), (packUnorm2x16(vec2(-6.0, -8.2))) / 1u), packUnorm2x16(vec2(-6.0, -8.2)))), (0u | (0u >> _GLF_IDENTITY(uint(1u), uint(1u)))))), max(uint(uvec2(_GLF_IDENTITY(packUnorm2x16(vec2(-6.0, -8.2)), min(_GLF_IDENTITY(packUnorm2x16(vec2(-6.0, -8.2)), (packUnorm2x16(vec2(-6.0, -8.2))) / 1u), packUnorm2x16(vec2(-6.0, -8.2)))), (0u | (0u >> _GLF_IDENTITY(uint(1u), uint(1u)))))), uint(uvec2(_GLF_IDENTITY(packUnorm2x16(vec2(-6.0, -8.2)), min(_GLF_IDENTITY(packUnorm2x16(vec2(-6.0, -8.2)), (packUnorm2x16(vec2(-6.0, -8.2))) / 1u), packUnorm2x16(vec2(-6.0, -8.2)))), (0u | (0u >> _GLF_IDENTITY(uint(1u), uint(1u)))))))))) : 0u)) >> _GLF_IDENTITY(uint(3u), uint(3u))))), 0u, 0u))) ^ 0u)))))), _GLF_IDENTITY((virtual_gid) << 0u, ~ (~ (_GLF_IDENTITY((virtual_gid) << 0u, ~ (~ ((virtual_gid) << 0u))))))), (_GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, (virtual_gid) ^ 0u), (virtual_gid) << 0u)) ^ (0u << _GLF_IDENTITY(uint(_GLF_IDENTITY(0u, (0u) | 0u)), uint(0u))))), 4, 64, 0);
 if(_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(bool(_GLF_DEAD(false)), (_GLF_IDENTITY(bool(_GLF_DEAD(false)), _GLF_IDENTITY(! (! (bool(_GLF_DEAD(false)))), bool(bool(! (! (bool(_GLF_DEAD(false))))))))) && true))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x)) > injectionSwitch.y))))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bool(_GLF_DEAD(false))), true && (bool(bool(_GLF_DEAD(false)))))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec2(false, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (! (injectionSwitch.x < injectionSwitch.y))))))), ! (! (_GLF_IDENTITY(bool(bvec2(false, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (! (injectionSwitch.x < injectionSwitch.y))))))), true && (bool(bvec2(false, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (! (injectionSwitch.x < injectionSwitch.y)))))))))))), ! (! (bool(_GLF_IDENTITY(bvec2(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), _GLF_IDENTITY(bvec2(bvec3(bvec2(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false)), bvec2(bvec2(bvec2(bvec3(bvec2(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false))))))))))), (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
      barrier();
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true && (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (! (_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), true && (_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ! (! (_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), true && ((injectionSwitch.x < injectionSwitch.y))))))))))))) && true))) && (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(float(-87614)), _GLF_FUZZED(-40.53)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))).x > injectionSwitch.y)), false, false, true)), false || (bool(bvec4(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(_GLF_IDENTITY(vec3(injectionSwitch, 0.0), vec3(mat3(vec3(injectionSwitch, 0.0), 0.0, sqrt(1.0), _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 1.0, 0.0)))), (true ? vec2(_GLF_IDENTITY(vec3(injectionSwitch, 0.0), vec3(mat3(vec3(injectionSwitch, 0.0), 0.0, sqrt(1.0), _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 1.0, 0.0)))) : _GLF_FUZZED(injectionSwitch)))).y)) && (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y)), false, false, true)))))))))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
      barrier();
     barrier();
    }
   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(cosh(_GLF_IDENTITY(-3.6, (false ? _GLF_FUZZED(dot(injectionSwitch, injectionSwitch)) : -3.6)))) : injectionSwitch.y))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(cosh(_GLF_IDENTITY(-3.6, (false ? _GLF_FUZZED(dot(injectionSwitch, injectionSwitch)) : -3.6)))) : injectionSwitch.y))))), _GLF_IDENTITY(_GLF_TRUE(true, _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (injectionSwitch.x < injectionSwitch.y) || false)), bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (injectionSwitch.x < injectionSwitch.y) || false)), ((_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (injectionSwitch.x < injectionSwitch.y) || false))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false || (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (injectionSwitch.x < injectionSwitch.y) || _GLF_IDENTITY(false, ! (! (false))))), ((_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (injectionSwitch.x < injectionSwitch.y) || false))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), true, _GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (injectionSwitch.x > injectionSwitch.y)), false))), ! (! (_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), _GLF_IDENTITY(((injectionSwitch.x < injectionSwitch.y)) || false, (_GLF_IDENTITY(((injectionSwitch.x < injectionSwitch.y)) || false, (((injectionSwitch.x < injectionSwitch.y)) || false) || false)) || false)))))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_GLF_TRUE(true, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (injectionSwitch.x < injectionSwitch.y) || false)), ! _GLF_IDENTITY((! (_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ! (! ((injectionSwitch.x < injectionSwitch.y)))), (_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ((injectionSwitch.x < injectionSwitch.y)) || false)) || false))), false || ((! (_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ! (! ((injectionSwitch.x < injectionSwitch.y)))), (_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ((injectionSwitch.x < injectionSwitch.y)) || false)) || false))))))), false), bvec2(bvec2(bvec2(_GLF_TRUE(true, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, sqrt(sqrt(0.0)) + (injectionSwitch.x)) < injectionSwitch.y, (injectionSwitch.x < injectionSwitch.y) || false)), ! (! (_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ((injectionSwitch.x < injectionSwitch.y)) || false)) || false))))), false))))), (bool(bvec2(_GLF_TRUE(true, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)).x < injectionSwitch.y) || false)), ! (! (_GLF_IDENTITY((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y), ((injectionSwitch.x < injectionSwitch.y)) || false))))), false))) || false)) && ((injectionSwitch.x > injectionSwitch.y))))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) && _GLF_IDENTITY(true, ! (! (true))))) && true)))
    barrier();
   barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false)))), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 uint read_val = atomicLoad(write_val, 4, 64, 0);
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) || false))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y))))), (_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y)))))) && true))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], mix(float(_GLF_FUZZED(-12.32)), float(injectionSwitch[1]), bool(true))))).x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) && true)))))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bool(false)))) || false), _GLF_IDENTITY(! (! (false)), bool(bool(_GLF_IDENTITY(! (! (false)), false || (_GLF_IDENTITY(! (! _GLF_IDENTITY((false), ((false)) || false)), true && (! (! (false))))))))))))
          barrier();
         barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       barrier();
      }
    }
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false)) || false)))))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[_GLF_IDENTITY(1, int(int(1)))])).x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))), (_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false))))) && true))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, _GLF_IDENTITY((false), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), false || _GLF_IDENTITY((! ((false))), ((! ((false)))) || false)))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)), bool(bvec3(bool(bvec4(_GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), false || _GLF_IDENTITY((! ((false))), ((! ((false)))) || false)))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)), false, false)))) && true))) || (false))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(9884.9755, -8307.7719)) : injectionSwitch)), injectionSwitch, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))).y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y))))))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bool(bvec4(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)), ! (! (bool(bvec4(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)))))), ! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)) : _GLF_FUZZED(injectionSwitch))), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)) : _GLF_FUZZED(injectionSwitch))), _GLF_IDENTITY(vec2(mat4(_GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)) : _GLF_FUZZED(injectionSwitch))), 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, abs(0.0), 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, sqrt(_GLF_IDENTITY(1.0, max(1.0, 1.0))))), (_GLF_IDENTITY(vec2(mat4(_GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)) : _GLF_FUZZED(injectionSwitch))), 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, abs(0.0), 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, sqrt(1.0))), min(vec2(mat4(_GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, mat2(_GLF_IDENTITY(1.0, (1.0) / 1.0)) * (injectionSwitch)) : _GLF_FUZZED(injectionSwitch))), 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, abs(0.0), 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, sqrt(1.0))), vec2(mat4(_GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)) : _GLF_FUZZED(injectionSwitch))), 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, abs(0.0), 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, sqrt(1.0)))))) + vec2(0.0, 0.0)))) - vec2(0.0, 0.0)).x > injectionSwitch.y) || false))), _GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > _GLF_IDENTITY(injectionSwitch.y, 1.0 * (injectionSwitch.y)))) || (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec3(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), mat2(1.0) * ((injectionSwitch) * mat2(1.0)))).y, false, true)))) && true), (injectionSwitch.x > injectionSwitch.y) || false))), ! (! (_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(mat3x2(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0), 0.0, 1.0, 1.0, 1.0, 1.0)), (true ? float(mat3x2(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0), 0.0, 1.0, 1.0, 1.0, 1.0)) : _GLF_FUZZED(-54.68)))), injectionSwitch.x)))) > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, float(vec3(injectionSwitch.y, 1.0, determinant(mat4(1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0))))))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y) || false))))))))), bool(bvec2(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true)))))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(vec2(injectionSwitch.y, exp(determinant(mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))))))))))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
       barrier();
       if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 buf[virtual_gid] = uint(subgroupAllEqual(read_val));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(_GLF_IDENTITY(! (false), ! (! (! (false)))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(_GLF_IDENTITY(! (false), ! (! (! (false)))), false || (_GLF_IDENTITY(! (false), ! (! (! (false))))))))))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((_GLF_IDENTITY(false, (false) && true)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY((_GLF_IDENTITY(false, (false) && true)), ! (! ((_GLF_IDENTITY(false, (false) && true))))))))), true, true)), _GLF_IDENTITY(bool(bvec4(bool(bvec3(_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((_GLF_IDENTITY(false, (false) && true)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY((_GLF_IDENTITY(false, (false) && true)), ! (! ((_GLF_IDENTITY(false, (false) && true))))))))), true, true)), false, false, false)), _GLF_IDENTITY(bool(bvec4(bool(bvec4(bool(bvec3(_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((_GLF_IDENTITY(false, (false) && true)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY((_GLF_IDENTITY(false, (false) && true)), ! (! ((_GLF_IDENTITY(false, (false) && true))))))))), true, true)), false, false, false)), true, false, false)), (bool(bvec4(bool(bvec4(bool(bvec3(_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((_GLF_IDENTITY(false, (false) && true)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY((_GLF_IDENTITY(false, (false) && true)), ! (! ((_GLF_IDENTITY(false, (false) && true))))))))), true, true)), false, false, false)), true, false, false))) || false))))))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(false ? _GLF_FUZZED(vec2(84.48, _GLF_IDENTITY(739.470, clamp(739.470, 739.470, 739.470)))) : _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)), vec2(_GLF_IDENTITY(injectionSwitch[0], (injectionSwitch[0]) * 1.0), injectionSwitch[1])), injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)))), vec2(mat4x3(false ? _GLF_FUZZED(vec2(84.48, _GLF_IDENTITY(739.470, clamp(739.470, 739.470, 739.470)))) : _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], (injectionSwitch[0]) * 1.0), injectionSwitch[1])), injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)))), 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, sin(0.0), 1.0, 0.0))))).x, float(mat4x2(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(false ? _GLF_FUZZED(vec2(_GLF_IDENTITY(84.48, max(84.48, 84.48)), _GLF_IDENTITY(739.470, clamp(739.470, 739.470, 739.470)))) : _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], (injectionSwitch[0]) * 1.0), injectionSwitch[1])), injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)))), vec2(mat4x3(false ? _GLF_FUZZED(vec2(84.48, _GLF_IDENTITY(739.470, clamp(739.470, 739.470, 739.470)))) : _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], (injectionSwitch[0]) * 1.0), injectionSwitch[1])), injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)))), 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, sin(0.0), 1.0, 0.0))))).x, 0.0, 1.0, 0.0, 1.0, 0.0, determinant(mat2(0.0, 1.0, 0.0, 0.0)), determinant(mat2(1.0, 0.0, 1.0, 1.0)))))) - 0.0), injectionSwitch.x)) > _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(vec2(-5.3, 7.7).s), _GLF_FUZZED(-9973.8749)), bvec2(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))).y))))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(bool((injectionSwitch.x > injectionSwitch.y))), (bool(bool((injectionSwitch.x > injectionSwitch.y)))) && true)))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
