#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer WriteVal {
 uint write_val;
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[_GLF_IDENTITY(1, (1) << 0)]), vec2(_GLF_FUZZED(21.37), _GLF_FUZZED(vec4(14.23, _GLF_IDENTITY(2.2, (_GLF_IDENTITY(2.2, sqrt(1.0) * (2.2))) + 0.0), -2050.6410, _GLF_IDENTITY(5695.9269, float(mat2(5695.9269, 0.0, 0.0, exp(0.0))))).s)), bvec2(false, false))).x > injectionSwitch.y)), ! _GLF_IDENTITY((! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(7646.3141, _GLF_IDENTITY(-858.974, (-858.974) * 1.0))) : injectionSwitch)).x > injectionSwitch.y)))), bool(bvec3(_GLF_IDENTITY((! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(vec2(7646.3141, -858.974), (true ? _GLF_IDENTITY(vec2(7646.3141, -858.974), vec2(mat3x2(_GLF_IDENTITY(vec2(7646.3141, -858.974), vec2(vec4(vec2(7646.3141, -858.974), 1.0, 1.0))), 1.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(0.0, 1.0)), dot(vec2(_GLF_IDENTITY(1.0, max(1.0, 1.0)), 0.0), vec2(0.0, 1.0))), 0.0, 1.0))) : _GLF_FUZZED(vec2(-5.0, 51.43))))), (_GLF_FUZZED(vec2(7646.3141, -858.974))) - log(_GLF_IDENTITY(vec2(1.0, 1.0), mix(vec2((vec2(1.0, 1.0))[0], (vec2(1.0, 1.0))[1]), vec2(_GLF_FUZZED(5.1), _GLF_FUZZED(56.13)), bvec2(false, false))))) : injectionSwitch)).x > injectionSwitch.y)))), _GLF_IDENTITY(((! _GLF_IDENTITY((_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, (false ? _GLF_IDENTITY(_GLF_FUZZED(vec2(7646.3141, -858.974)), (_GLF_FUZZED(vec2(7646.3141, -858.974))) - log(vec2(1.0, 1.0))) : injectionSwitch)).x > injectionSwitch.y), ! (_GLF_IDENTITY(! ((_GLF_IDENTITY(injectionSwitch, (false ? _GLF_IDENTITY(_GLF_FUZZED(vec2(7646.3141, -858.974)), (_GLF_FUZZED(vec2(7646.3141, -858.974))) - log(vec2(1.0, 1.0))) : injectionSwitch)).x > injectionSwitch.y)), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(! ((_GLF_IDENTITY(injectionSwitch, (false ? _GLF_IDENTITY(_GLF_FUZZED(vec2(7646.3141, -858.974)), (_GLF_FUZZED(vec2(7646.3141, -858.974))) - log(vec2(1.0, 1.0))) : injectionSwitch)).x > injectionSwitch.y)), (! ((_GLF_IDENTITY(injectionSwitch, (false ? _GLF_IDENTITY(_GLF_FUZZED(vec2(7646.3141, -858.974)), (_GLF_FUZZED(vec2(7646.3141, -858.974))) - log(vec2(1.0, 1.0))) : injectionSwitch)).x > injectionSwitch.y))) && true), false)), bool(bool(bool(bvec2(_GLF_IDENTITY(! ((_GLF_IDENTITY(injectionSwitch, (false ? _GLF_IDENTITY(_GLF_FUZZED(vec2(7646.3141, -858.974)), (_GLF_FUZZED(vec2(7646.3141, -858.974))) - log(vec2(1.0, 1.0))) : injectionSwitch)).x > injectionSwitch.y)), (! ((_GLF_IDENTITY(injectionSwitch, (false ? _GLF_IDENTITY(_GLF_FUZZED(vec2(7646.3141, -858.974)), (_GLF_FUZZED(vec2(7646.3141, -858.974))) - log(vec2(1.0, 1.0))) : injectionSwitch)).x > injectionSwitch.y))) && true), false)))))))))), bool(bvec3((_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, (false ? _GLF_IDENTITY(_GLF_FUZZED(vec2(7646.3141, -858.974)), (_GLF_FUZZED(vec2(7646.3141, -858.974))) - log(vec2(1.0, 1.0))) : injectionSwitch)).x > injectionSwitch.y), ! (_GLF_IDENTITY(! ((_GLF_IDENTITY(injectionSwitch, (false ? _GLF_IDENTITY(_GLF_FUZZED(vec2(7646.3141, -858.974)), (_GLF_FUZZED(vec2(7646.3141, -858.974))) - log(vec2(1.0, 1.0))) : injectionSwitch)).x > injectionSwitch.y)), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(! ((_GLF_IDENTITY(injectionSwitch, (false ? _GLF_IDENTITY(_GLF_FUZZED(vec2(7646.3141, -858.974)), (_GLF_FUZZED(vec2(7646.3141, -858.974))) - log(vec2(1.0, 1.0))) : injectionSwitch)).x > injectionSwitch.y)), (! ((_GLF_IDENTITY(injectionSwitch, (false ? _GLF_IDENTITY(_GLF_FUZZED(vec2(7646.3141, -858.974)), (_GLF_FUZZED(vec2(7646.3141, -858.974))) - log(vec2(1.0, 1.0))) : injectionSwitch)).x > injectionSwitch.y))) && true), false)), bool(bool(bool(bvec2(_GLF_IDENTITY(! ((_GLF_IDENTITY(injectionSwitch, (false ? _GLF_IDENTITY(_GLF_FUZZED(vec2(7646.3141, -858.974)), (_GLF_FUZZED(vec2(7646.3141, -858.974))) - log(vec2(1.0, 1.0))) : injectionSwitch)).x > injectionSwitch.y)), (! ((_GLF_IDENTITY(injectionSwitch, (false ? _GLF_IDENTITY(_GLF_FUZZED(vec2(7646.3141, -858.974)), (_GLF_FUZZED(vec2(7646.3141, -858.974))) - log(vec2(1.0, 1.0))) : injectionSwitch)).x > injectionSwitch.y))) && true), false)))))))))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))) || false, (_GLF_IDENTITY(((! _GLF_IDENTITY((_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_IDENTITY(_GLF_FUZZED(vec2(7646.3141, -858.974)), (_GLF_FUZZED(vec2(7646.3141, -858.974))) - log(vec2(1.0, 1.0))) : injectionSwitch)).x > injectionSwitch.y))), ((_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_IDENTITY(_GLF_FUZZED(vec2(7646.3141, -858.974)), (_GLF_FUZZED(vec2(7646.3141, -858.974))) - log(vec2(1.0, 1.0))) : injectionSwitch)).x > injectionSwitch.y)))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) || false, ! (! (_GLF_IDENTITY(((! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((false ? _GLF_IDENTITY(_GLF_FUZZED(vec2(7646.3141, -858.974)), (_GLF_FUZZED(vec2(7646.3141, -858.974))) - log(vec2(1.0, 1.0))) : injectionSwitch), (_GLF_IDENTITY((false ? _GLF_IDENTITY(_GLF_FUZZED(vec2(7646.3141, -858.974)), (_GLF_FUZZED(vec2(7646.3141, -858.974))) - log(vec2(1.0, 1.0))) : injectionSwitch), (true ? (false ? _GLF_IDENTITY(_GLF_FUZZED(vec2(7646.3141, -858.974)), (_GLF_FUZZED(vec2(7646.3141, -858.974))) - log(vec2(1.0, 1.0))) : injectionSwitch) : _GLF_FUZZED(injectionSwitch)))) / vec2(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y)))).x > injectionSwitch.y))))) || false, bool(bool(((! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((_GLF_IDENTITY(false ? _GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(vec2(7646.3141, -858.974)), (_GLF_IDENTITY(_GLF_FUZZED(vec2(7646.3141, -858.974)), mix(vec2(_GLF_FUZZED(176.229), _GLF_FUZZED(-1.0)), _GLF_IDENTITY(vec2((_GLF_FUZZED(vec2(7646.3141, -858.974)))[0], (_GLF_FUZZED(vec2(7646.3141, -858.974)))[1]), clamp(vec2((_GLF_FUZZED(vec2(7646.3141, -858.974)))[0], (_GLF_FUZZED(vec2(7646.3141, -858.974)))[1]), _GLF_IDENTITY(vec2((_GLF_FUZZED(vec2(7646.3141, -858.974)))[0], (_GLF_FUZZED(vec2(7646.3141, -858.974)))[1]), (vec2((_GLF_FUZZED(vec2(7646.3141, -858.974)))[0], (_GLF_FUZZED(vec2(7646.3141, -858.974)))[1])) / vec2(1.0, 1.0)), _GLF_IDENTITY(vec2((_GLF_FUZZED(vec2(7646.3141, -858.974)))[0], (_GLF_FUZZED(vec2(7646.3141, -858.974)))[1]), vec2(_GLF_IDENTITY(mat2x4(vec2((_GLF_FUZZED(vec2(_GLF_IDENTITY(7646.3141, float(mat2x4(_GLF_IDENTITY(7646.3141, max(7646.3141, _GLF_IDENTITY(7646.3141, min(7646.3141, 7646.3141)))), 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0))), -858.974)))[0], (_GLF_FUZZED(vec2(7646.3141, -858.974)))[1]), 1.0, 0.0, 1.0, 1.0, 1.0, 0.0), mat2x4(mat4(mat2x4(vec2((_GLF_FUZZED(vec2(7646.3141, -858.974)))[0], (_GLF_FUZZED(vec2(7646.3141, -858.974)))[1]), 1.0, 0.0, 1.0, 1.0, 1.0, 0.0)))))))), bvec2(true, true)))) / vec2(1.0, 1.0)), (_GLF_FUZZED(vec2(7646.3141, -858.974))) - log(vec2(1.0, 1.0))) : injectionSwitch, (false ? _GLF_IDENTITY(_GLF_FUZZED(vec2(7646.3141, -858.974)), (_GLF_IDENTITY(_GLF_FUZZED(vec2(7646.3141, -858.974)), (_GLF_FUZZED(vec2(7646.3141, -858.974))) + vec2(0.0, 0.0))) - log(_GLF_IDENTITY(vec2(1.0, 1.0), vec2(vec4(vec2(1.0, 1.0), _GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(7266.4023)), bool(false))), 1.0))))) : _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch))) * mat2(_GLF_ONE(1.0, injectionSwitch.y)))), max((_GLF_IDENTITY(false ? _GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(vec2(7646.3141, -858.974)), (_GLF_IDENTITY(_GLF_FUZZED(vec2(7646.3141, -858.974)), mix(vec2(_GLF_FUZZED(176.229), _GLF_FUZZED(-1.0)), _GLF_IDENTITY(vec2((_GLF_FUZZED(vec2(7646.3141, -858.974)))[0], (_GLF_FUZZED(vec2(7646.3141, -858.974)))[1]), clamp(vec2((_GLF_FUZZED(vec2(7646.3141, -858.974)))[0], (_GLF_FUZZED(vec2(7646.3141, -858.974)))[1]), _GLF_IDENTITY(vec2((_GLF_FUZZED(vec2(7646.3141, -858.974)))[0], (_GLF_FUZZED(vec2(7646.3141, -858.974)))[1]), (vec2((_GLF_FUZZED(vec2(7646.3141, -858.974)))[0], (_GLF_FUZZED(vec2(7646.3141, -858.974)))[1])) / vec2(1.0, 1.0)), _GLF_IDENTITY(vec2((_GLF_FUZZED(vec2(7646.3141, -858.974)))[0], (_GLF_FUZZED(vec2(7646.3141, -858.974)))[1]), vec2(_GLF_IDENTITY(mat2x4(vec2((_GLF_FUZZED(vec2(_GLF_IDENTITY(7646.3141, float(mat2x4(_GLF_IDENTITY(7646.3141, max(7646.3141, _GLF_IDENTITY(7646.3141, min(7646.3141, 7646.3141)))), 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0))), -858.974)))[0], (_GLF_FUZZED(vec2(7646.3141, -858.974)))[1]), 1.0, 0.0, 1.0, 1.0, 1.0, 0.0), mat2x4(mat4(mat2x4(vec2((_GLF_FUZZED(vec2(7646.3141, -858.974)))[0], (_GLF_FUZZED(vec2(7646.3141, -858.974)))[1]), 1.0, 0.0, 1.0, 1.0, 1.0, 0.0)))))))), bvec2(true, true)))) / vec2(1.0, 1.0)), (_GLF_FUZZED(vec2(7646.3141, -858.974))) - log(vec2(1.0, 1.0))) : injectionSwitch, (false ? _GLF_IDENTITY(_GLF_FUZZED(vec2(7646.3141, -858.974)), (_GLF_IDENTITY(_GLF_FUZZED(vec2(7646.3141, -858.974)), (_GLF_FUZZED(vec2(7646.3141, -858.974))) + vec2(0.0, 0.0))) - log(_GLF_IDENTITY(vec2(1.0, 1.0), vec2(vec4(vec2(1.0, 1.0), _GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(7266.4023)), bool(false))), 1.0))))) : _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch))) * mat2(_GLF_ONE(1.0, injectionSwitch.y)))), (_GLF_IDENTITY(false ? _GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(vec2(7646.3141, -858.974)), (_GLF_IDENTITY(_GLF_FUZZED(vec2(7646.3141, -858.974)), mix(vec2(_GLF_FUZZED(176.229), _GLF_FUZZED(-1.0)), _GLF_IDENTITY(vec2((_GLF_FUZZED(vec2(7646.3141, -858.974)))[0], (_GLF_FUZZED(vec2(7646.3141, -858.974)))[1]), clamp(vec2((_GLF_FUZZED(vec2(7646.3141, -858.974)))[0], (_GLF_FUZZED(vec2(7646.3141, -858.974)))[1]), _GLF_IDENTITY(vec2((_GLF_FUZZED(vec2(7646.3141, -858.974)))[0], (_GLF_FUZZED(vec2(7646.3141, -858.974)))[1]), (vec2((_GLF_FUZZED(vec2(7646.3141, -858.974)))[0], (_GLF_FUZZED(vec2(7646.3141, -858.974)))[1])) / vec2(1.0, 1.0)), _GLF_IDENTITY(vec2((_GLF_FUZZED(vec2(7646.3141, -858.974)))[0], (_GLF_FUZZED(vec2(7646.3141, -858.974)))[1]), vec2(_GLF_IDENTITY(mat2x4(vec2((_GLF_FUZZED(vec2(_GLF_IDENTITY(7646.3141, float(mat2x4(_GLF_IDENTITY(7646.3141, max(7646.3141, _GLF_IDENTITY(7646.3141, min(7646.3141, 7646.3141)))), 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0))), -858.974)))[0], (_GLF_FUZZED(vec2(7646.3141, -858.974)))[1]), 1.0, 0.0, 1.0, 1.0, 1.0, 0.0), mat2x4(mat4(mat2x4(vec2((_GLF_FUZZED(vec2(7646.3141, -858.974)))[0], (_GLF_FUZZED(vec2(7646.3141, -858.974)))[1]), 1.0, 0.0, 1.0, 1.0, 1.0, 0.0)))))))), bvec2(true, true)))) / vec2(1.0, 1.0)), (_GLF_FUZZED(vec2(7646.3141, -858.974))) - log(vec2(1.0, 1.0))) : injectionSwitch, (false ? _GLF_IDENTITY(_GLF_FUZZED(vec2(7646.3141, -858.974)), (_GLF_IDENTITY(_GLF_FUZZED(vec2(7646.3141, -858.974)), (_GLF_FUZZED(vec2(7646.3141, -858.974))) + vec2(0.0, 0.0))) - log(_GLF_IDENTITY(vec2(1.0, 1.0), vec2(vec4(vec2(1.0, 1.0), _GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(7266.4023)), bool(false))), 1.0))))) : _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch))) * mat2(_GLF_ONE(1.0, injectionSwitch.y))))))).x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).y))))) || false))))))) && true)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bool(_GLF_IDENTITY(! (false), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(! (false), _GLF_IDENTITY(true && (! (false)), bool(bvec3(true && (! (false)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)))), true && (! (false))), true && (_GLF_IDENTITY(_GLF_IDENTITY(! (false), _GLF_IDENTITY(true && (! (false)), bool(bvec3(true && (! (false)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)))), true && (! (false)))))))))))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, float(mat3x4(injectionSwitch.y, 0.0, 1.0, _GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(5474.2019)), bool(false))), 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, sqrt(1.0), _GLF_IDENTITY(1.0, float(_GLF_IDENTITY(vec3(1.0, 1.0, 0.0), mix(vec3(_GLF_FUZZED(-402.918), _GLF_FUZZED(1.8), _GLF_FUZZED(-1125.5229)), vec3((vec3(1.0, 1.0, 0.0))[0], _GLF_IDENTITY((vec3(1.0, 1.0, 0.0))[1], (false ? _GLF_FUZZED(-9157.6157) : (vec3(1.0, 1.0, 0.0))[1])), (vec3(1.0, 1.0, 0.0))[2]), bvec3(true, true, true)))))))), (_GLF_IDENTITY(injectionSwitch.y, float(mat3x4(injectionSwitch.y, 0.0, 1.0, _GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(5474.2019)), bool(false))), 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, sqrt(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-2526.7135)), float(1.0), bool(true)))), _GLF_IDENTITY(1.0, float(_GLF_IDENTITY(vec3(1.0, 1.0, 0.0), mix(vec3(_GLF_FUZZED(-402.918), _GLF_FUZZED(1.8), _GLF_FUZZED(-1125.5229)), vec3((vec3(1.0, 1.0, 0.0))[0], _GLF_IDENTITY((vec3(1.0, 1.0, 0.0))[1], (false ? _GLF_FUZZED(-9157.6157) : (vec3(1.0, 1.0, 0.0))[1])), (vec3(1.0, 1.0, 0.0))[2]), bvec3(true, true, true))))))))) / 1.0), injectionSwitch.y))))))
    barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    return;
   return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false))))
    barrier();
  }
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) && true)))))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), _GLF_IDENTITY(true && (! (false)), (true && (! (false))) && true))))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)), ! (! ((injectionSwitch.x > injectionSwitch.y)))))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))), ! (! (_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(true && (false), true && (true && (false)))))))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      return;
    }
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec4(bvec2(false, true), true, true)))), (bool(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec4(bvec2(_GLF_IDENTITY(false, (false) && true), true), true, true))))) && true))))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_DEAD(false))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, false || (false)))))), (_GLF_IDENTITY((_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, false || (false)))))), bool(bvec2((_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, false || (false)))))), true)))) && true)))))
      barrier();
     return;
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       barrier();
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, true, false)))))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
      return;
     barrier();
    }
   barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
      barrier();
     return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
  }
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), ! (! (_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, (false) || false), (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true))))))))
  return;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(mat2x3(injectionSwitch.y, cos(_GLF_IDENTITY(sqrt(0.0), (true ? _GLF_IDENTITY(sqrt(0.0), mix(float(sqrt(0.0)), float(_GLF_FUZZED(4.1)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) : _GLF_FUZZED(-1.6)))), sin(_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-64.79)), float(_GLF_IDENTITY(0.0, float(_GLF_IDENTITY(mat2(0.0, 0.0, 0.0, 0.0), (true ? mat2(0.0, 0.0, 0.0, 0.0) : _GLF_FUZZED(mat2(90.65, 6.4, -88.45, 98.24))))))), bool(true)))), 1.0, 1.0, 0.0))), ! (_GLF_IDENTITY(! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(mat2x3(injectionSwitch.y, cos(sqrt(0.0)), sin(0.0), 1.0, 1.0, 0.0)))), true && (! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(mat2x3(injectionSwitch.y, cos(sqrt(0.0)), sin(0.0), 1.0, 1.0, 0.0)))))))), true && (injectionSwitch.x > injectionSwitch.y))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
        barrier();
       return;
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))), injectionSwitch)).y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
     barrier();
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   return;
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(_GLF_IDENTITY(bvec2(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false), _GLF_IDENTITY(bvec2(bvec3(_GLF_IDENTITY(bvec2(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false), bvec2(bvec4(bvec2(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false), true, false))), true)), bvec2(bvec3(bvec2(bvec3(_GLF_IDENTITY(bvec2(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false), bvec2(bvec4(bvec2(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false), true, false))), true)), true)))))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     return;
     if(_GLF_DEAD(false))
      barrier();
    }
   return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   return;
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false))))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     return;
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      barrier();
     return;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(bool(bool(_GLF_IDENTITY(false, bool(bool(false))))), (bool(bool(false))) || false), _GLF_IDENTITY(bool(bvec2(bool(bool(false)), false)), ! (! (bool(bvec2(bool(bool(false)), false))))))))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   return;
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(_GLF_IDENTITY(bvec2(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(false, (false) || false)), _GLF_IDENTITY(bvec2(bvec4(_GLF_IDENTITY(bvec2(injectionSwitch.x > injectionSwitch.y, false), _GLF_IDENTITY(bvec2(bvec3(_GLF_IDENTITY(bvec2(injectionSwitch.x > injectionSwitch.y, false), bvec2(_GLF_IDENTITY(bvec3(bvec2(injectionSwitch.x > injectionSwitch.y, false), false), bvec3(bvec3(bvec3(bvec2(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-8.0), _GLF_FUZZED((3445.2178 + -3411.0594))), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))).y, _GLF_IDENTITY(false, bool(bvec3(false, true, _GLF_IDENTITY(false, bool(bvec4(false, false, true, false))))))), false)))))), _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(radians(tanh(-7.2))) : injectionSwitch.y)), injectionSwitch.y)), injectionSwitch.y)), injectionSwitch.y)))))), bvec2(bvec2(bvec2(bvec3(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)).x > injectionSwitch.y, false), bvec2(_GLF_IDENTITY(bvec3(bvec2(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(vec3(injectionSwitch.y, _GLF_ONE(1.0, injectionSwitch.y), _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(0.0, 1.0)), dot(vec2(1.0, 0.0), vec2(0.0, 1.0)))))), false), false), bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec2(injectionSwitch.x > injectionSwitch.y, false), _GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), ! (! (_GLF_IDENTITY(false, false || (false))))))), bvec3(bvec4(bvec3(bvec3(bvec2(injectionSwitch.x > injectionSwitch.y, false), false)), false))))))), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-62.32)), bool(false))) < injectionSwitch.y)))))))), false, _GLF_IDENTITY(true, (_GLF_IDENTITY(_GLF_IDENTITY(true, (true) || false), false || (_GLF_IDENTITY(true, (true) || false)))) && true))), bvec2(bvec3(bvec2(bvec4(bvec2(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + abs(vec2(0.0, 0.0))).x > injectionSwitch.y, false), _GLF_IDENTITY(false, ! (! (false))), true)), true)))))))), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, 1.0 * (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0))) > injectionSwitch.y))) || false), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(_GLF_IDENTITY(bvec2(injectionSwitch.x > injectionSwitch.y, false), _GLF_IDENTITY(bvec2(bvec4(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(mat3x2(_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(_GLF_IDENTITY(vec4(injectionSwitch.x, 0.0, 1.0, 0.0), mat4(1.0) * (vec4(injectionSwitch.x, 0.0, 1.0, 0.0)))), float(mat3x4(float(_GLF_IDENTITY(vec4(injectionSwitch.x, 0.0, 1.0, 0.0), mat4(1.0) * (vec4(injectionSwitch.x, 0.0, 1.0, 0.0)))), 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0)))), _GLF_IDENTITY(exp(0.0), (_GLF_IDENTITY(exp(0.0), float(mat2x4(exp(0.0), 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, abs(1.0))))) / 1.0), 0.0, 1.0, 0.0, 1.0), (false ? _GLF_FUZZED(mat3x2(-9.2, -3.3, -366.174, -26.47, -483.560, -6.9)) : mat3x2(_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(_GLF_IDENTITY(vec4(injectionSwitch.x, 0.0, 1.0, 0.0), mat4(1.0) * (vec4(injectionSwitch.x, 0.0, 1.0, 0.0)))), float(mat3x4(float(_GLF_IDENTITY(vec4(injectionSwitch.x, 0.0, 1.0, 0.0), mat4(1.0) * (vec4(injectionSwitch.x, 0.0, 1.0, 0.0)))), 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0)))), exp(0.0), 0.0, 1.0, 0.0, 1.0))))) > injectionSwitch.y, false), _GLF_IDENTITY(bvec2(bvec3(_GLF_IDENTITY(bvec2(injectionSwitch.x > injectionSwitch.y, false), bvec2(_GLF_IDENTITY(bvec3(bvec2(injectionSwitch.x > injectionSwitch.y, false), false), bvec3(bvec3(bvec3(bvec2(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec3(false, true, _GLF_IDENTITY(false, bool(bvec4(false, false, true, false)))))), ! (! (_GLF_IDENTITY(false, bool(bvec3(false, true, _GLF_IDENTITY(false, bool(bvec4(false, false, true, false)))))))))), false)))))), _GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ((injectionSwitch.x < injectionSwitch.y)) && true)))), bvec2(bvec2(bvec2(bvec3(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)).x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), false), bvec2(_GLF_IDENTITY(bvec3(bvec2(injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, float(vec3(injectionSwitch.y, _GLF_ONE(1.0, injectionSwitch.y), _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(0.0, 1.0)), dot(vec2(1.0, 0.0), vec2(0.0, 1.0)))))), (_GLF_IDENTITY(injectionSwitch.y, float(vec3(injectionSwitch.y, _GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), (_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), (true ? _GLF_ONE(1.0, injectionSwitch.y) : _GLF_FUZZED(89.94)))) * 1.0), _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(0.0, 1.0)), dot(vec2(1.0, 0.0), vec2(0.0, 1.0))))))) + 0.0), false), false), bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec2(injectionSwitch.x > injectionSwitch.y, false), false)), bvec3(bvec4(bvec3(bvec3(bvec2(injectionSwitch.x > injectionSwitch.y, false), false)), false))))))), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(-1.3) : _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(4.0)), float(injectionSwitch.x), bool(true))), injectionSwitch.x)))) < injectionSwitch.y)))))))), false, _GLF_IDENTITY(true, (_GLF_IDENTITY(true, (true) || false)) && true))), bvec2(_GLF_IDENTITY(bvec3(bvec2(bvec4(bvec2(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + abs(vec2(0.0, 0.0))).x > injectionSwitch.y, false), _GLF_IDENTITY(false, ! (! (false))), true)), true), bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec2(bvec4(bvec2(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + abs(vec2(0.0, 0.0))).x > injectionSwitch.y, false), _GLF_IDENTITY(false, ! (! (false))), true)), true), bvec3(bvec4(bvec3(bvec2(bvec4(bvec2(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + abs(vec2(0.0, 0.0))).x > injectionSwitch.y, false), _GLF_IDENTITY(false, ! (! (false))), true)), true), false))))))))))))), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, 1.0 * _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0)), (false ? _GLF_FUZZED(min(-8119.7232, 5.7)) : _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0)), (false ? _GLF_FUZZED(5.2) : (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0))))))) > injectionSwitch.y))) || false)))), _GLF_IDENTITY(true, bool(bool(true))) && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           return;
          }
         barrier();
         if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
          barrier();
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))))))
          barrier();
         barrier();
        }
       barrier();
      }
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false || (bool(bvec2(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
   barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(-43.15) : _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)))) > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch), max((injectionSwitch), _GLF_IDENTITY((injectionSwitch), (true ? (injectionSwitch) : _GLF_FUZZED(vec2(-5994.7159, 3.8)))))), vec2(0.0, 0.0) + (_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch), mix(vec2(((injectionSwitch))[0], ((injectionSwitch))[1]), vec2(_GLF_FUZZED(-242.198), _GLF_FUZZED(56.19)), bvec2(false, false))), min(_GLF_IDENTITY((injectionSwitch), mix(vec2(((injectionSwitch))[0], ((injectionSwitch))[1]), vec2(_GLF_FUZZED(-242.198), _GLF_FUZZED(56.19)), bvec2(false, false))), _GLF_IDENTITY((injectionSwitch), mix(vec2(((injectionSwitch))[0], ((injectionSwitch))[1]), vec2(_GLF_FUZZED(-242.198), _GLF_FUZZED(56.19)), bvec2(false, false))))))) * mat2(1.0), vec2(mat2x4((injectionSwitch) * mat2(1.0), 1.0, 0.0, 1.0, 1.0, 1.0, 0.0)))).y, false || (_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x)) > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch) * mat2(1.0), mix(vec2(((injectionSwitch) * mat2(1.0))[0], _GLF_FUZZED(2161.2865)), vec2(_GLF_FUZZED(118.156), ((injectionSwitch) * mat2(1.0))[1]), bvec2(false, true))), _GLF_IDENTITY(vec2(mat2x4((injectionSwitch) * mat2(1.0), 1.0, 0.0, 1.0, 1.0, 1.0, 0.0)), min(vec2(mat2x4((injectionSwitch) * mat2(_GLF_IDENTITY(1.0, float(mat3(1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0)))), 1.0, 0.0, 1.0, _GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)))), 1.0, 0.0)), _GLF_IDENTITY(vec2(mat2x4((injectionSwitch) * mat2(1.0), 1.0, 0.0, 1.0, 1.0, 1.0, 0.0)), (false ? _GLF_FUZZED(vec2(-5817.8122, -2.7)) : vec2(mat2x4((injectionSwitch) * mat2(1.0), 1.0, 0.0, 1.0, 1.0, 1.0, 0.0)))))))).y))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          return;
         return;
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         return;
        }
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        return;
       barrier();
       if(_GLF_DEAD(false))
        return;
      }
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)), (_GLF_DEAD(_GLF_IDENTITY(false, (false) && true))) || false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false)))))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(min(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), min(mat2(1.0) * (injectionSwitch), mat2(1.0) * (injectionSwitch)))).y), mix(_GLF_IDENTITY(float(_GLF_FUZZED(-881.850)), max(float(_GLF_FUZZED(-881.850)), _GLF_IDENTITY(float(_GLF_FUZZED(-881.850)), min(float(_GLF_FUZZED(-881.850)), float(_GLF_FUZZED(-881.850)))))), float(min(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), min(_GLF_IDENTITY(mat2(1.0) * (injectionSwitch), max(_GLF_IDENTITY(mat2(1.0) * (injectionSwitch), vec2(0.0, 0.0) + (_GLF_IDENTITY(mat2(1.0) * (injectionSwitch), (mat2(1.0) * (injectionSwitch)) + vec2(0.0, 0.0)))), mat2(1.0) * (injectionSwitch))), mat2(1.0) * _GLF_IDENTITY((injectionSwitch), ((injectionSwitch)) * mat2(1.0))))).y)), bool(true))))))))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      return;
    }
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-2.8)), bool(false))) > injectionSwitch.y, bool(bvec3(injectionSwitch.x > injectionSwitch.y, true, false)))))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
     return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))))))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, false, false)))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true)))))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
   return;
  }
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = _GLF_IDENTITY(gl_WorkGroupID.x, max(gl_WorkGroupID.x, gl_WorkGroupID.x));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(min(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), injectionSwitch), _GLF_IDENTITY(mix(vec2((min(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), injectionSwitch))[0], _GLF_FUZZED(15.13)), vec2(_GLF_FUZZED(312.991), (min(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), injectionSwitch))[1]), bvec2(false, true)), clamp(mix(vec2((min(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), injectionSwitch))[0], _GLF_FUZZED(15.13)), vec2(_GLF_FUZZED(312.991), (min(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), injectionSwitch))[1]), bvec2(false, true)), mix(vec2((min(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), injectionSwitch))[0], _GLF_FUZZED(15.13)), vec2(_GLF_FUZZED(312.991), (min(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), injectionSwitch))[1]), bvec2(false, true)), _GLF_IDENTITY(mix(vec2((min(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), injectionSwitch))[0], _GLF_FUZZED(15.13)), vec2(_GLF_FUZZED(312.991), (min(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), injectionSwitch))[1]), bvec2(false, true)), (mix(vec2((min(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), injectionSwitch))[0], _GLF_FUZZED(15.13)), vec2(_GLF_FUZZED(312.991), (min(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), injectionSwitch))[1]), bvec2(false, true))) / vec2(1.0, 1.0)))))).y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     return;
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)), injectionSwitch)).x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, 1.0 * (_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0))), _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(float(_GLF_IDENTITY(47604, (47604) << 0)))), float(injectionSwitch.y), bool(true)))))))))) && true), bool(bvec4(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)), injectionSwitch)).x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, 1.0 * (_GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY((injectionSwitch.y) - 0.0, (_GLF_IDENTITY((injectionSwitch.y) - 0.0, (_GLF_IDENTITY((injectionSwitch.y) - 0.0, ((injectionSwitch.y) - 0.0) * 1.0)) * 1.0)) / 1.0)))), _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(float(47604))), float(injectionSwitch.y), bool(true)))))))))) && true), _GLF_IDENTITY(true, (true) || false), false, false)))))
    return;
   if(_GLF_DEAD(false))
    return;
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    return;
   return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
      barrier();
     return;
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec3(_GLF_DEAD(false), true, true)), (bool(bvec3(_GLF_DEAD(false), true, true))) || false)))
          return;
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
         barrier();
        }
       return;
      }
     if(_GLF_DEAD(false))
      barrier();
     return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
    }
  }
 uint workgroup_base = workgroup_size * workgroup_id;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) && true)))
  barrier();
 uint virtual_gid = workgroup_base + _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) << 0u), (_GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) << 0u)) << _GLF_IDENTITY(0u, clamp(0u, 0u, 0u))) + subgroup_local_id;
 atomicStore(write_val, uint(virtual_gid), 4, 64, _GLF_IDENTITY(0, (0) >> 0));
 if(_GLF_DEAD(false))
  barrier();
 uint read_val = atomicLoad(write_val, 4, 64, _GLF_IDENTITY(0, int(_GLF_IDENTITY(int(0), _GLF_IDENTITY(min(int(0), int(0)), int(_GLF_IDENTITY(ivec3(min(int(0), int(0)), 1, (0 | 0)), min(_GLF_IDENTITY(ivec3(min(int(0), int(0)), 1, (0 | 0)), ivec3(ivec3(ivec3(min(int(0), int(0)), 1, (0 | 0))))), ivec3(min(int(0), int(0)), 1, (0 | 0))))))))));
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     return;
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)))))
    return;
   return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY((false) || false, ! (! ((false) || false))), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY((false) || false, ! (! ((false) || false))), false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), false || (bool(bvec4(_GLF_IDENTITY((false) || false, ! (! ((false) || false))), false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))))
    {
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x)) > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), bvec2(bvec4(bvec2(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, true)))))))
    barrier();
   return;
  }
 buf[virtual_gid] = uint(subgroupAllEqual(read_val));
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
