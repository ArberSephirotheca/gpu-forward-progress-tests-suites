#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer WriteVal {
 uint write_val;
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (_GLF_IDENTITY(0, (0) | (0)) | _GLF_IDENTITY(1, (0 >> _GLF_IDENTITY(int(0), int(0))) | (_GLF_IDENTITY(1, min(1, 1)))))); _injected_loop_counter ++)
    {
     do
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec3(false, false, true)), true && (_GLF_IDENTITY(bool(bvec3(false, false, true)), _GLF_IDENTITY(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec3(true, true, false)), bool(bool(bool(bvec3(true, true, false)))))) && _GLF_IDENTITY((_GLF_IDENTITY(bool(bvec3(false, false, true)), (bool(bvec3(false, false, true))) && true)), (_GLF_IDENTITY((_GLF_IDENTITY(bool(bvec3(false, false, true)), (bool(bvec3(false, false, true))) && true)), ((_GLF_IDENTITY(bool(bvec3(false, false, true)), (bool(bvec3(false, _GLF_IDENTITY(false, true && (false)), true))) && true))) || false)) && true), ! (! (true && (bool(bvec3(false, false, _GLF_IDENTITY(true, bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(true, bool(bvec4(true, true, true, true))), (true) || false), true, true)))))))))))), bool(bvec2(_GLF_IDENTITY(bool(bvec3(false, false, true)), true && (_GLF_IDENTITY(bool(bvec3(false, false, true)), _GLF_IDENTITY(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec3(true, true, false)), bool(bool(bool(bvec3(true, true, false)))))) && _GLF_IDENTITY((_GLF_IDENTITY(bool(bvec3(false, false, true)), (bool(bvec3(false, false, true))) && true)), (_GLF_IDENTITY((_GLF_IDENTITY(bool(bvec3(false, false, true)), (bool(bvec3(false, false, true))) && true)), ((_GLF_IDENTITY(bool(bvec3(false, false, true)), (bool(bvec3(false, _GLF_IDENTITY(false, true && (false)), true))) && true))) || false)) && true), ! (! (true && (bool(bvec3(false, false, _GLF_IDENTITY(true, bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(true, bool(bvec4(true, true, true, true))), (true) || false), true, true)))))))))))), true))))))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = _GLF_IDENTITY(((1 << _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(2, (2) / 1)), min(int(_GLF_IDENTITY(2, _GLF_IDENTITY((2), ((2)) | 0) / 1)), int(_GLF_IDENTITY(2, (2) / 1)))), clamp(int(2), int(_GLF_IDENTITY(2, (2) ^ 0)), int(2))), _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(ivec2(int(2), 0), ivec2(ivec4(ivec2(int(2), 0), 0, _GLF_IDENTITY(_GLF_IDENTITY(1, (1) >> 0), (_GLF_IDENTITY(1, (1) ^ 0)) | (_GLF_IDENTITY(1, 0 | (1)))))))), int(ivec2(int(_GLF_IDENTITY(ivec2(int(2), 0), ivec2(ivec4(_GLF_IDENTITY(ivec2(_GLF_IDENTITY(_GLF_IDENTITY(int(2), int(_GLF_IDENTITY(int(int(2)), clamp(int(int(2)), int(int(2)), int(int(2)))))), (int(2)) | (int(_GLF_IDENTITY(2, (_GLF_IDENTITY(2, (2) ^ 0)) - 0)))), 0), ~ (~ (_GLF_IDENTITY(ivec2(_GLF_IDENTITY(int(2), (int(2)) | (int(2))), 0), ivec2(0, 0) ^ (_GLF_IDENTITY(ivec2(_GLF_IDENTITY(int(2), (int(2)) | (_GLF_IDENTITY(int(2), ~ (_GLF_IDENTITY(~ (int(2)), int(_GLF_IDENTITY(ivec2(~ (int(2)), 0), clamp(ivec2(~ (int(2)), 0), ivec2(~ (int(2)), 0), ivec2(~ (int(2)), 0))))))))), 0), ivec2(0, 0) + (ivec2(_GLF_IDENTITY(int(2), (int(2)) | (int(2))), 0)))))))), 0, 1)))), 1))), clamp(_GLF_IDENTITY(int(_GLF_IDENTITY(ivec2(int(2), 0), ivec2(ivec4(ivec2(int(2), 0), 0, _GLF_IDENTITY(_GLF_IDENTITY(1, (1) >> 0), (_GLF_IDENTITY(1, (1) ^ 0)) | (_GLF_IDENTITY(1, 0 | (1)))))))), int(ivec2(int(_GLF_IDENTITY(ivec2(int(2), 0), ivec2(ivec4(_GLF_IDENTITY(ivec2(_GLF_IDENTITY(_GLF_IDENTITY(int(2), int(_GLF_IDENTITY(int(int(2)), clamp(int(int(2)), int(int(2)), int(int(2)))))), (int(2)) | (int(_GLF_IDENTITY(2, (_GLF_IDENTITY(2, (2) ^ 0)) - 0)))), 0), ~ (~ (_GLF_IDENTITY(ivec2(_GLF_IDENTITY(int(2), (int(2)) | (int(2))), 0), ivec2(0, 0) ^ (_GLF_IDENTITY(ivec2(_GLF_IDENTITY(int(2), (int(2)) | (_GLF_IDENTITY(int(2), ~ (_GLF_IDENTITY(~ (int(2)), int(_GLF_IDENTITY(ivec2(~ (int(2)), 0), clamp(ivec2(~ (int(2)), 0), ivec2(~ (int(2)), 0), ivec2(~ (int(2)), 0))))))))), 0), ivec2(0, 0) + (ivec2(_GLF_IDENTITY(int(2), (int(2)) | (int(2))), 0)))))))), 0, 1)))), 1))), _GLF_IDENTITY(int(_GLF_IDENTITY(ivec2(int(2), 0), ivec2(ivec4(ivec2(int(2), 0), 0, _GLF_IDENTITY(_GLF_IDENTITY(1, (1) >> 0), (_GLF_IDENTITY(1, (1) ^ 0)) | (_GLF_IDENTITY(1, 0 | (1)))))))), int(ivec2(int(_GLF_IDENTITY(ivec2(int(2), 0), ivec2(ivec4(_GLF_IDENTITY(ivec2(_GLF_IDENTITY(_GLF_IDENTITY(int(2), int(_GLF_IDENTITY(int(int(2)), clamp(int(int(2)), int(int(2)), int(int(2)))))), (int(2)) | (int(_GLF_IDENTITY(2, (_GLF_IDENTITY(2, (2) ^ 0)) - 0)))), 0), ~ (~ (_GLF_IDENTITY(ivec2(_GLF_IDENTITY(int(2), (int(2)) | (int(2))), 0), ivec2(0, 0) ^ (_GLF_IDENTITY(ivec2(_GLF_IDENTITY(int(2), (int(2)) | (_GLF_IDENTITY(int(2), ~ (_GLF_IDENTITY(~ (int(2)), int(_GLF_IDENTITY(ivec2(~ (int(2)), 0), clamp(ivec2(~ (int(2)), 0), ivec2(~ (int(2)), 0), ivec2(~ (int(2)), 0))))))))), 0), ivec2(0, 0) + (ivec2(_GLF_IDENTITY(int(2), (int(2)) | (int(2))), 0)))))))), 0, 1)))), 1))), _GLF_IDENTITY(int(_GLF_IDENTITY(ivec2(int(2), 0), ivec2(ivec4(ivec2(int(2), 0), 0, _GLF_IDENTITY(_GLF_IDENTITY(1, (1) >> 0), (_GLF_IDENTITY(1, (1) ^ 0)) | (_GLF_IDENTITY(1, 0 | (1)))))))), int(ivec2(int(_GLF_IDENTITY(ivec2(int(2), 0), ivec2(ivec4(_GLF_IDENTITY(ivec2(_GLF_IDENTITY(_GLF_IDENTITY(int(2), int(_GLF_IDENTITY(int(int(2)), clamp(int(int(2)), int(int(2)), int(int(2)))))), (int(2)) | (int(_GLF_IDENTITY(2, (_GLF_IDENTITY(2, (2) ^ 0)) - 0)))), 0), ~ (~ (_GLF_IDENTITY(ivec2(_GLF_IDENTITY(int(2), (int(2)) | (int(2))), 0), ivec2(0, 0) ^ (_GLF_IDENTITY(ivec2(_GLF_IDENTITY(int(2), (int(2)) | (_GLF_IDENTITY(int(2), ~ (_GLF_IDENTITY(~ (int(2)), int(_GLF_IDENTITY(ivec2(~ (int(2)), 0), clamp(ivec2(~ (int(2)), 0), ivec2(~ (int(2)), 0), ivec2(~ (int(2)), 0))))))))), 0), ivec2(0, 0) + (ivec2(_GLF_IDENTITY(int(2), (int(2)) | (int(2))), 0)))))))), 0, 1)))), 1)))))), _GLF_IDENTITY(int(2), max(int(2), int(2))))) >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), 0 | (int(2))))), int(ivec4(((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(2), int(_GLF_IDENTITY(2, (_GLF_IDENTITY(2, int(ivec3(2, 0, ((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(0), int(0)), (_GLF_IDENTITY(1 << _GLF_IDENTITY(int(0), int(0)), max(_GLF_IDENTITY(1 << _GLF_IDENTITY(int(0), int(0)), _GLF_IDENTITY(clamp(1 << _GLF_IDENTITY(int(0), int(0)), 1 << _GLF_IDENTITY(int(0), int(0)), 1 << _GLF_IDENTITY(int(0), int(0))), (clamp(1 << _GLF_IDENTITY(int(0), int(0)), 1 << _GLF_IDENTITY(int(0), int(0)), 1 << _GLF_IDENTITY(int(0), int(0)))) | (clamp(1 << _GLF_IDENTITY(int(0), int(0)), 1 << _GLF_IDENTITY(int(0), int(0)), 1 << _GLF_IDENTITY(int(0), int(0)))))), 1 << _GLF_IDENTITY(int(0), int(0))))) - 0)) >> _GLF_IDENTITY(int(0), int(0))))))) - 0))), (_GLF_IDENTITY(int(2), int(2))) << (_GLF_IDENTITY(0 >> _GLF_IDENTITY(int(5), int(_GLF_IDENTITY(5, _GLF_IDENTITY((5), min((5), (5))) - 0))), clamp(0 >> _GLF_IDENTITY(int(5), int(_GLF_IDENTITY(5, (5) - 0))), _GLF_IDENTITY(0 >> _GLF_IDENTITY(int(5), int(_GLF_IDENTITY(5, _GLF_IDENTITY((5) - 0, max((5) - 0, (5) - 0))))), min(0 >> _GLF_IDENTITY(int(5), int(_GLF_IDENTITY(5, (5) - 0))), _GLF_IDENTITY(0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(5), int(_GLF_IDENTITY(5, (5) - 0))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_IDENTITY(int(5), int(_GLF_IDENTITY(5, (5) - 0))), (_GLF_IDENTITY(int(5), int(_GLF_IDENTITY(5, (5) - 0)))) | (_GLF_IDENTITY(int(5), int(_GLF_IDENTITY(5, (5) - 0)))))), (~ (_GLF_IDENTITY(_GLF_IDENTITY(int(5), int(_GLF_IDENTITY(5, (5) - 0))), (_GLF_IDENTITY(int(5), int(_GLF_IDENTITY(5, (5) - 0)))) | (_GLF_IDENTITY(int(5), int(_GLF_IDENTITY(5, (5) - 0))))))) | (~ (_GLF_IDENTITY(_GLF_IDENTITY(int(5), int(_GLF_IDENTITY(5, (5) - 0))), (_GLF_IDENTITY(int(5), int(_GLF_IDENTITY(5, (5) - 0)))) | (_GLF_IDENTITY(int(5), int(_GLF_IDENTITY(5, (5) - 0)))))))))), (true ? 0 >> _GLF_IDENTITY(int(5), int(_GLF_IDENTITY(5, (5) - 0))) : _GLF_IDENTITY(_GLF_FUZZED(51420), (_GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(51420, (51420) >> 0)), (_GLF_FUZZED(51420)) | 0)) - 0))))), 0 >> _GLF_IDENTITY(int(5), int(_GLF_IDENTITY(5, (5) - 0)))))))) >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), _GLF_IDENTITY(0 | (int(_GLF_IDENTITY(2, 0 ^ (2)))), clamp(0 | (int(_GLF_IDENTITY(2, 0 ^ (2)))), 0 | (int(_GLF_IDENTITY(2, 0 ^ (_GLF_IDENTITY(2, 0 ^ (_GLF_IDENTITY(2, (2) | 0))))))), 0 | (int(_GLF_IDENTITY(2, 0 ^ (2))))))))), _GLF_IDENTITY(1, min(_GLF_IDENTITY(1, 0 | (1)), 1)), 0, _GLF_IDENTITY(0, min(0, _GLF_IDENTITY(0, min(_GLF_IDENTITY(0, (0) - 0), _GLF_IDENTITY(0, (_GLF_IDENTITY(0, min(0, 0))) / 1)))))))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, ~ (~ _GLF_IDENTITY((_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) | 0)), min((_GLF_IDENTITY(_injected_loop_counter, _GLF_IDENTITY((_injected_loop_counter) | 0, min(_GLF_IDENTITY(_GLF_IDENTITY((_injected_loop_counter), min((_injected_loop_counter), (_injected_loop_counter))) | 0, ~ (~ (_GLF_IDENTITY((_injected_loop_counter) | 0, ((_injected_loop_counter) | 0) | (_GLF_IDENTITY((_injected_loop_counter), (false ? _GLF_FUZZED((~ (-41064 ^ -56397))) : (_injected_loop_counter))) | 0))))), (_injected_loop_counter) | 0)))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, int(ivec4(_injected_loop_counter, 0, 1, 1))), (_injected_loop_counter) | 0), max(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) | 0), _GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) | 0)))))))) != _GLF_IDENTITY(_GLF_IDENTITY(0, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((0) | (_GLF_IDENTITY(0, (0) - 0)), 0 ^ ((0) | (_GLF_IDENTITY(0, (0) - 0)))), (_GLF_IDENTITY(_GLF_IDENTITY((0) | (_GLF_IDENTITY(0, (0) - 0)), 0 ^ ((0) | (_GLF_IDENTITY(0, (0) - 0)))), max(_GLF_IDENTITY((0) | (_GLF_IDENTITY(0, (0) - 0)), 0 ^ ((0) | (_GLF_IDENTITY(0, (0) - 0)))), _GLF_IDENTITY((0) | (_GLF_IDENTITY(0, (0) - 0)), 0 ^ ((0) | (_GLF_IDENTITY(0, (0) - 0))))))) * 1), _GLF_IDENTITY((false ? _GLF_FUZZED(_GLF_IDENTITY(_injected_loop_counter, (_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) ^ 0)) - 0)) : (_GLF_IDENTITY(0, 0 | (0))) | (_GLF_IDENTITY(0, (_GLF_IDENTITY(0, max(0, 0))) - 0))), max((false ? _GLF_FUZZED(_GLF_IDENTITY(_injected_loop_counter, (_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) ^ 0)) - 0)) : (_GLF_IDENTITY(0, 0 | (0))) | (_GLF_IDENTITY(0, (_GLF_IDENTITY(0, max(0, 0))) - 0))), (false ? _GLF_FUZZED(_GLF_IDENTITY(_injected_loop_counter, (_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) ^ 0)) - 0)) : (_GLF_IDENTITY(0, 0 | (0))) | (_GLF_IDENTITY(0, (_GLF_IDENTITY(0, max(0, 0))) - 0))))))), (true ? _GLF_IDENTITY(0, _GLF_IDENTITY((0) | (_GLF_IDENTITY(0, (0) - 0)), (false ? _GLF_IDENTITY(_GLF_FUZZED(_injected_loop_counter), clamp(_GLF_FUZZED(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) * 1)), _GLF_FUZZED(_injected_loop_counter), _GLF_IDENTITY(_GLF_FUZZED(_injected_loop_counter), min(_GLF_FUZZED(_injected_loop_counter), _GLF_IDENTITY(_GLF_FUZZED(_injected_loop_counter), clamp(_GLF_FUZZED(_injected_loop_counter), _GLF_FUZZED(_injected_loop_counter), _GLF_FUZZED(_injected_loop_counter))))))) : _GLF_IDENTITY((_GLF_IDENTITY(0, _GLF_IDENTITY(0 | (0), (_GLF_IDENTITY(0 | (0), (0 | (0)) + 0)) + (0 >> _GLF_IDENTITY(int(4), int(4)))))) | (_GLF_IDENTITY(0, (_GLF_IDENTITY(0, max(0, 0))) - 0)), 0 ^ ((_GLF_IDENTITY(0, _GLF_IDENTITY(0 | (0), (_GLF_IDENTITY(0 | (0), (0 | (0)) + 0)) + (0 >> _GLF_IDENTITY(int(4), int(4)))))) | (_GLF_IDENTITY(0, (_GLF_IDENTITY(0, max(0, 0))) - 0))))))) : _GLF_FUZZED((-10966 & _injected_loop_counter))))); _injected_loop_counter --)
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, (false) && true))))))), bool(bvec2(_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), (_GLF_IDENTITY((false), ((false)) || false)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), true)))), false || (bool(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), bool(bvec2(_GLF_IDENTITY(false, ! (! (false))), true))))))), bool(bvec2(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), true && (! (! (false))))), bool(bvec2(_GLF_IDENTITY(false, ! (! (false))), true)))), false || (bool(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, ! (! (false))), false), bvec2(bvec3(bvec2(_GLF_IDENTITY(false, ! (! (false))), false), true)))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true))))))), false))))))
                return;
              }
             else
              {
              }
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y)))))))))
              {
              }
             else
              {
               do
                {
                 do
                  {
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     for(int _injected_loop_counter = 0; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < _GLF_IDENTITY((1 | (_GLF_IDENTITY((1 & 1), min((1 & 1), _GLF_IDENTITY((1 & 1), ((1 & 1)) ^ 0))) & 1)), _GLF_IDENTITY(((_GLF_IDENTITY(1, ~ (~ (1))) | ((1 & 1) & 1))) | (_GLF_IDENTITY(1 ^ 1, (1 ^ 1) | (1 ^ 1))), (((1 | ((1 & 1) & 1))) | (_GLF_IDENTITY(_GLF_IDENTITY(1 ^ 1, (true ? _GLF_IDENTITY(1 ^ 1, min(1 ^ 1, 1 ^ 1)) : _GLF_FUZZED(_injected_loop_counter))), (1 ^ 1) | (1 ^ 1)))) >> 0)), ! (! (_injected_loop_counter < _GLF_IDENTITY((1 | (_GLF_IDENTITY((1 & 1), min((1 & 1), _GLF_IDENTITY((1 & 1), ((1 & 1)) ^ 0))) & 1)), _GLF_IDENTITY(((_GLF_IDENTITY(1, ~ (~ (1))) | ((1 & 1) & 1))) | (_GLF_IDENTITY(_GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(-77336))) ^ 1, (1 ^ 1) | (1 ^ 1))), (((1 | ((1 & 1) & _GLF_IDENTITY(1, (1) - 0)))) | (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1 ^ 1, (true ? _GLF_IDENTITY(1 ^ 1, min(1 ^ 1, 1 ^ 1)) : _GLF_FUZZED(_injected_loop_counter))), clamp(_GLF_IDENTITY(1 ^ 1, (true ? _GLF_IDENTITY(1 ^ 1, min(1 ^ 1, 1 ^ 1)) : _GLF_FUZZED(_injected_loop_counter))), _GLF_IDENTITY(1 ^ 1, (true ? _GLF_IDENTITY(1 ^ 1, min(1 ^ 1, 1 ^ 1)) : _GLF_FUZZED(_injected_loop_counter))), _GLF_IDENTITY(1 ^ 1, (true ? _GLF_IDENTITY(1 ^ 1, min(1 ^ 1, 1 ^ 1)) : _GLF_FUZZED(_injected_loop_counter))))), (1 ^ 1) | (1 ^ 1)))) >> 0)))))), true && (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < _GLF_IDENTITY((1 | (_GLF_IDENTITY((1 & 1), min((1 & 1), _GLF_IDENTITY((1 & 1), ((1 & 1)) ^ 0))) & 1)), _GLF_IDENTITY(_GLF_IDENTITY(((_GLF_IDENTITY(1, ~ (~ (1))) | ((1 & 1) & 1))), (true ? ((_GLF_IDENTITY(1, ~ (~ (1))) | ((1 & 1) & 1))) : _GLF_FUZZED(35009))) | (_GLF_IDENTITY(1 ^ 1, (1 ^ 1) | (1 ^ 1))), (((1 | ((1 & 1) & 1))) | (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1 ^ 1, (true ? _GLF_IDENTITY(1 ^ 1, min(1 ^ 1, 1 ^ 1)) : _GLF_FUZZED(_injected_loop_counter))), max(_GLF_IDENTITY(1 ^ 1, (true ? _GLF_IDENTITY(1 ^ 1, min(1 ^ 1, 1 ^ 1)) : _GLF_FUZZED(_injected_loop_counter))), _GLF_IDENTITY(1 ^ 1, (true ? _GLF_IDENTITY(1 ^ 1, min(1 ^ 1, 1 ^ 1)) : _GLF_FUZZED(_injected_loop_counter))))), (_GLF_IDENTITY(1 ^ 1, max(1 ^ 1, 1 ^ 1))) | (1 ^ 1)))) >> 0)), ! (! (_injected_loop_counter < _GLF_IDENTITY((1 | (_GLF_IDENTITY((1 & 1), min((1 & 1), _GLF_IDENTITY((1 & 1), ((1 & 1)) ^ 0))) & 1)), _GLF_IDENTITY(((_GLF_IDENTITY(1, ~ (~ (1))) | ((1 & 1) & 1))) | (_GLF_IDENTITY(_GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(-77336))) ^ 1, (1 ^ 1) | (1 ^ 1))), (((1 | ((1 & 1) & _GLF_IDENTITY(1, (1) - 0)))) | (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1 ^ 1, (true ? _GLF_IDENTITY(_GLF_IDENTITY(1, min(1, 1)) ^ 1, _GLF_IDENTITY(min(1 ^ 1, 1 ^ 1), (false ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(min(1 ^ 1, 1 ^ 1), 0 | (min(1 ^ 1, 1 ^ 1)))))) : _GLF_FUZZED(_injected_loop_counter))), clamp(_GLF_IDENTITY(1 ^ 1, (true ? _GLF_IDENTITY(1 ^ 1, min(1 ^ 1, 1 ^ 1)) : _GLF_FUZZED(_injected_loop_counter))), _GLF_IDENTITY(1 ^ 1, (true ? _GLF_IDENTITY(1 ^ 1, min(1 ^ 1, 1 ^ 1)) : _GLF_FUZZED(_injected_loop_counter))), _GLF_IDENTITY(1 ^ 1, (true ? _GLF_IDENTITY(1 ^ 1, min(1 ^ 1, 1 ^ 1)) : _GLF_FUZZED(_injected_loop_counter))))), (1 ^ 1) | (1 ^ 1)))) >> 0)))))))); _injected_loop_counter ++)
                      {
                       do
                        {
                         return;
                        }
                       while(_GLF_WRAPPED_LOOP(false));
                      }
                    }
                   else
                    {
                    }
                  }
                 while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), bool(bvec3(_GLF_WRAPPED_LOOP(false), true, false))));
                }
               while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), bool(bvec4(_GLF_WRAPPED_LOOP(false), false, true, false))));
              }
            }
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))));
    }
  }
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = _GLF_IDENTITY(gl_NumWorkGroups.x, (_GLF_IDENTITY(gl_NumWorkGroups.x, max(gl_NumWorkGroups.x, _GLF_IDENTITY(gl_NumWorkGroups.x, (gl_NumWorkGroups.x) << 0u)))) | (gl_NumWorkGroups.x));
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = workgroup_size * workgroup_id;
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     do
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y)), false)))) || false))), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))))))))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           do
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bvec3(true, true, _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))).y)))))))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || _GLF_IDENTITY(((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(mat2x4(injectionSwitch, 0.0, 0.0, 0.0, 1.0, 1.0, sin(0.0)))).y)), _GLF_IDENTITY(! (! (((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat3(injectionSwitch, log(1.0), 0.0, _GLF_IDENTITY(0.0, max(_GLF_IDENTITY(0.0, (0.0) / 1.0), 0.0)), _GLF_IDENTITY(0.0, min(0.0, 0.0)), 1.0, 0.0, determinant(mat2(0.0, 0.0, 0.0, 0.0))))).x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(mat4x3(injectionSwitch.y, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, length(0.0), 0.0, _GLF_IDENTITY(dot(vec2(log(1.0), 1.0), vec2(0.0, 1.0)), _GLF_IDENTITY(dot(vec2(log(1.0), 1.0), vec2(0.0, 1.0)), (dot(vec2(log(1.0), 1.0), vec2(0.0, 1.0))) - 0.0)), 1.0)), 0.0 + (float(mat4x3(injectionSwitch.y, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, length(0.0), 0.0, _GLF_IDENTITY(dot(vec2(log(1.0), 1.0), vec2(0.0, 1.0)), _GLF_IDENTITY(dot(vec2(log(1.0), 1.0), vec2(0.0, 1.0)), (dot(vec2(log(1.0), 1.0), vec2(0.0, 1.0))) - 0.0)), 1.0))))), _GLF_IDENTITY(true, false || _GLF_IDENTITY((true), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((true), ! (! ((true))))), bool(bvec4(! (_GLF_IDENTITY((true), ! (! ((true))))), true, true, false)))))) && (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0)), float(_GLF_FUZZED(-20.58)), bool(false))) > injectionSwitch.y))))))))), _GLF_IDENTITY(! (! (! (! ((_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(bool((injectionSwitch.x > injectionSwitch.y))), false || (bool(bool(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false))))))))))), false || (_GLF_IDENTITY(! (! (! (! (_GLF_IDENTITY(((injectionSwitch.x > injectionSwitch.y)), (((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))) && true)))) || false))))), false || (! (! (! (! (((injectionSwitch.x > injectionSwitch.y)))))))))))))), bool(bool(! _GLF_IDENTITY((_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y, _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)), injectionSwitch)).y))), false || ((injectionSwitch.x > injectionSwitch.y)))), ! _GLF_IDENTITY((_GLF_IDENTITY(! ((_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y))))), ! (! (! _GLF_IDENTITY((_GLF_IDENTITY((_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y))), _GLF_IDENTITY(false || ((injectionSwitch.x > injectionSwitch.y)), ! (! (false || ((injectionSwitch.x > injectionSwitch.y))))))), bool(bvec4(_GLF_IDENTITY((_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y))), _GLF_IDENTITY(false || ((injectionSwitch.x > injectionSwitch.y)), ! (! (false || ((injectionSwitch.x > injectionSwitch.y))))))), true && (_GLF_IDENTITY((_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y))), _GLF_IDENTITY(false || ((injectionSwitch.x > injectionSwitch.y)), ! (! (false || ((injectionSwitch.x > injectionSwitch.y))))))), bool(bvec3((_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y))), _GLF_IDENTITY(false || ((injectionSwitch.x > injectionSwitch.y)), ! (! (false || ((injectionSwitch.x > injectionSwitch.y))))))), true, true))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false)))), ! (! (((_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-9251.9063), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-410.035)), bvec2(true, false))))).x, injectionSwitch.x)))) > injectionSwitch.y), _GLF_IDENTITY(false || ((injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), clamp(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0), (false ? _GLF_FUZZED(mat2(4383.8882, 393.779, 8.3, 8.7)) : mat2(1.0))) * _GLF_IDENTITY((injectionSwitch), max((injectionSwitch), (injectionSwitch)))), _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)))).y)), ! (! (false || ((_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(sqrt(vec2(9.1, -267.471))) : injectionSwitch)).x, injectionSwitch.x)) > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch))) * vec2(1.0, 1.0), ((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), min(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch))))) * vec2(1.0, 1.0)) * vec2(1.0, 1.0))).y, _GLF_IDENTITY(_GLF_IDENTITY(float(mat4x2(injectionSwitch.y, 1.0, 1.0, 0.0, 0.0, _GLF_IDENTITY(0.0, max(0.0, 0.0)), _GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-1243.5926)), float(injectionSwitch.y), bool(true)))))), 1.0)), (float(mat4x2(injectionSwitch.y, _GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, 1.0 * (1.0)), 1.0)), 1.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), mix(float(_GLF_ONE(1.0, injectionSwitch.y)), float(_GLF_FUZZED(-15.85)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), 1.0))) * 1.0), float(_GLF_IDENTITY(mat4(_GLF_IDENTITY(_GLF_IDENTITY(float(mat4x2(injectionSwitch.y, 1.0, 1.0, 0.0, 0.0, 0.0, _GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))), 1.0)), (float(mat4x2(_GLF_IDENTITY(injectionSwitch.y, float(vec2(_GLF_IDENTITY(injectionSwitch.y, float(mat2x3(injectionSwitch.y, 1.0, _GLF_IDENTITY(dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(1.0, 0.0, 0.0, 0.0)), dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(1.0, 0.0, 0.0, 0.0))), 0.0, 1.0, 0.0))), 1.0))), 1.0, 1.0, 0.0, 0.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), _GLF_IDENTITY(1.0, abs(0.0) + (1.0))))) * 1.0), 0.0 + (_GLF_IDENTITY(float(mat4x2(injectionSwitch.y, 1.0, 1.0, 0.0, 0.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0)), (float(mat4x2(injectionSwitch.y, 1.0, 1.0, 0.0, 0.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0))) * 1.0))), 1.0, determinant(mat4(0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, max(_GLF_IDENTITY(0.0, clamp(_GLF_IDENTITY(0.0, min(0.0, 0.0)), 0.0, _GLF_IDENTITY(0.0, min(0.0, 0.0)))), 0.0)), 1.0, 0.0, 0.0, log(1.0), 0.0, 0.0, abs(0.0), 0.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 0.0, 1.0, 0.0)), 0.0, 0.0, 0.0, 0.0, 1.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 0.0, 1.0, exp(0.0), 1.0, round(length(normalize(1.0))), 0.0, abs(1.0)), (true ? mat4(_GLF_IDENTITY(_GLF_IDENTITY(float(mat4x2(injectionSwitch.y, 1.0, 1.0, 0.0, 0.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0)), (float(mat4x2(injectionSwitch.y, 1.0, 1.0, 0.0, 0.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0))) * 1.0), 0.0 + (_GLF_IDENTITY(float(mat4x2(injectionSwitch.y, 1.0, 1.0, 0.0, 0.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0)), (float(mat4x2(injectionSwitch.y, 1.0, 1.0, 0.0, 0.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0))) * 1.0))), 1.0, determinant(mat4(0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), 1.0, 0.0, 0.0, log(1.0), 0.0, 0.0, abs(0.0), 0.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 0.0, 1.0, 0.0)), 0.0, 0.0, 0.0, 0.0, 1.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 0.0, 1.0, _GLF_IDENTITY(exp(0.0), (exp(0.0)) + 0.0), 1.0, round(length(normalize(1.0))), 0.0, abs(1.0)) : _GLF_FUZZED(mat4(39.90, 1722.7484, 79.37, -44.01, 2729.1314, -7.2, -47.28, -974.877, 8.3, 2.0, -5.9, 6.9, -8.0, 4281.5507, -7.9, 4.1)))))))))))))))))))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || ((_GLF_IDENTITY(! ((_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y))))), ! (! (! _GLF_IDENTITY(((_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y))), _GLF_IDENTITY(_GLF_IDENTITY(false || ((injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(false || ((injectionSwitch.x > injectionSwitch.y)), ! (! (false || ((_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), injectionSwitch)).x > injectionSwitch.y)))))))), ! (! (false || ((injectionSwitch.x > injectionSwitch.y)))))))), ! (! (((_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x)))))) > injectionSwitch.y), _GLF_IDENTITY(false || ((injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), clamp(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), _GLF_IDENTITY(injectionSwitch, mat2(1.0) * _GLF_IDENTITY((injectionSwitch), max((injectionSwitch), (injectionSwitch)))), _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)))).y)), ! (! (false || ((_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), min(injectionSwitch, injectionSwitch))) * vec2(1.0, 1.0)).y, _GLF_IDENTITY(_GLF_IDENTITY(float(mat4x2(injectionSwitch.y, 1.0, _GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, _GLF_IDENTITY(1.0, (1.0) - 0.0))), _GLF_IDENTITY(1.0, float(mat4(1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 0.0, round(length(normalize(1.0)))))))), 0.0, 0.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0)), (float(mat4x2(injectionSwitch.y, _GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, 1.0 * (1.0)), 1.0)), 1.0, 0.0, 0.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0))) * 1.0), float(_GLF_IDENTITY(mat4(_GLF_IDENTITY(_GLF_IDENTITY(float(mat4x2(_GLF_IDENTITY(injectionSwitch, vec2(mat3x2(injectionSwitch, 1.0, 0.0, abs(sqrt(0.0)), 1.0))).y, 1.0, 1.0, 0.0, 0.0, 0.0, _GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).y))), 1.0)), (float(mat4x2(_GLF_IDENTITY(injectionSwitch.y, float(vec2(_GLF_IDENTITY(injectionSwitch.y, float(mat2x3(injectionSwitch.y, 1.0, _GLF_IDENTITY(dot(vec4(1.0, _GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0, _GLF_IDENTITY(0.0, min(0.0, 0.0))), vec4(1.0, 0.0, 0.0, 0.0)), dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(1.0, 0.0, 0.0, 0.0))), 0.0, 1.0, 0.0))), 1.0))), 1.0, 1.0, 0.0, 0.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0))) * 1.0), 0.0 + (_GLF_IDENTITY(_GLF_IDENTITY(float(mat4x2(injectionSwitch.y, 1.0, 1.0, 0.0, 0.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0)), (float(mat4x2(injectionSwitch.y, 1.0, 1.0, 0.0, 0.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0))) * 1.0), (_GLF_IDENTITY(float(mat4x2(injectionSwitch.y, 1.0, 1.0, 0.0, 0.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0)), (float(mat4x2(injectionSwitch.y, 1.0, 1.0, 0.0, 0.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0))) * 1.0)) - 0.0))), 1.0, determinant(mat4(0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, max(_GLF_IDENTITY(0.0, clamp(_GLF_IDENTITY(0.0, min(0.0, 0.0)), _GLF_IDENTITY(0.0, max(0.0, 0.0)), _GLF_IDENTITY(0.0, min(0.0, 0.0)))), 0.0)), 1.0, 0.0, 0.0, log(1.0), 0.0, 0.0, abs(0.0), 0.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 0.0, 1.0, 0.0)), 0.0, 0.0, 0.0, 0.0, 1.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 0.0, 1.0, exp(0.0), 1.0, round(length(normalize(1.0))), 0.0, abs(1.0)), (true ? mat4(_GLF_IDENTITY(_GLF_IDENTITY(float(mat4x2(injectionSwitch.y, 1.0, 1.0, 0.0, 0.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0)), (float(mat4x2(injectionSwitch.y, 1.0, _GLF_IDENTITY(1.0, float(vec3(1.0, 1.0, 1.0))), 0.0, 0.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0))) * _GLF_IDENTITY(1.0, float(mat2x4(1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0)))), 0.0 + (_GLF_IDENTITY(float(mat4x2(injectionSwitch.y, 1.0, 1.0, 0.0, 0.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0)), (float(mat4x2(injectionSwitch.y, 1.0, 1.0, 0.0, 0.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0))) * 1.0))), 1.0, determinant(mat4(0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), 1.0, 0.0, 0.0, log(1.0), 0.0, 0.0, abs(0.0), 0.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 0.0, 1.0, 0.0)), 0.0, 0.0, 0.0, 0.0, 1.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 0.0, 1.0, _GLF_IDENTITY(exp(0.0), (exp(0.0)) + 0.0), 1.0, round(length(normalize(_GLF_IDENTITY(1.0, float(mat3(1.0, 1.0, 0.0, length(vec2(0.0, 0.0)), determinant(mat4(1.0, 0.0, 1.0, 1.0, determinant(mat2(0.0, 0.0, 1.0, 0.0)), 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0)), _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0, 1.0)))))), 0.0, abs(1.0)) : _GLF_FUZZED(mat4(39.90, 1722.7484, 79.37, -44.01, 2729.1314, -7.2, -47.28, -974.877, 8.3, 2.0, -5.9, 6.9, -8.0, 4281.5507, -7.9, 4.1)))))))))))))))))))))))))))))))))
                  {
                   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                    {
                     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (_GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), mix(float(_GLF_FUZZED(3.8)), float(_GLF_ZERO(0.0, injectionSwitch.x)), bool(true)))), (int(_GLF_ZERO(0.0, injectionSwitch.x))) / 1) >> _GLF_IDENTITY(int(6), int(_GLF_IDENTITY(6, _GLF_IDENTITY((6), int(ivec4((6), 1, int(_GLF_ZERO(0.0, injectionSwitch.x)), 1))) | (6)))))); _injected_loop_counter --)
                      {
                       return;
                      }
                    }
                   else
                    {
                    }
                  }
                }
               else
                {
                }
              }
             else
              {
              }
             for(int _injected_loop_counter = (0 | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
              {
               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (injectionSwitch.x > injectionSwitch.y))))
                {
                }
               else
                {
                 return;
                }
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         do
          {
           if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))), (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))) || false)) || false))), true && (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))))
            return;
          }
         while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), (_GLF_WRAPPED_LOOP(false)) || false));
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
   else
    {
    }
  }
 uint virtual_gid = _GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_id * subgroup_size, ~ (_GLF_IDENTITY(~ (subgroup_id * subgroup_size), clamp(~ (subgroup_id * subgroup_size), ~ _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id * subgroup_size, (_GLF_IDENTITY(subgroup_id * _GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size))) ^ 0u), (true ? _GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) | (subgroup_id * subgroup_size)) : _GLF_FUZZED(workgroup_size)))) - (0u >> _GLF_IDENTITY(_GLF_IDENTITY(uint(8u), max(uint(8u), uint(8u))), uint(8u)))), (_GLF_IDENTITY(subgroup_id * subgroup_size, (_GLF_IDENTITY(subgroup_id * subgroup_size, (_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), (_GLF_IDENTITY(! (true), true && (! (true)))) && true))) ? _GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) | (subgroup_id * subgroup_size)) : _GLF_FUZZED(workgroup_size)))) - (_GLF_IDENTITY(0u, (true ? _GLF_IDENTITY(0u, (true ? 0u : _GLF_FUZZED(workgroup_size))) : _GLF_FUZZED(workgroup_base))) >> _GLF_IDENTITY(uint(8u), uint(8u))))) | (_GLF_IDENTITY(subgroup_id * subgroup_size, (_GLF_IDENTITY(subgroup_id * subgroup_size, (true ? _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (subgroup_id) | 0u) * subgroup_size, (subgroup_id * subgroup_size) | (subgroup_id * subgroup_size)) : _GLF_FUZZED(workgroup_size)))) - (0u >> _GLF_IDENTITY(uint(8u), uint(8u))))))), clamp((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id * subgroup_size, (_GLF_IDENTITY(subgroup_id * _GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size))) ^ 0u), (true ? _GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) | (subgroup_id * subgroup_size)) : _GLF_FUZZED(workgroup_size)))) - (0u >> _GLF_IDENTITY(_GLF_IDENTITY(uint(8u), max(uint(8u), uint(8u))), uint(8u)))), (_GLF_IDENTITY(subgroup_id * subgroup_size, (_GLF_IDENTITY(subgroup_id * subgroup_size, (_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), (_GLF_IDENTITY(! (true), true && (! (true)))) && true))) ? _GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) | (subgroup_id * subgroup_size)) : _GLF_FUZZED(workgroup_size)))) - (_GLF_IDENTITY(0u, (true ? _GLF_IDENTITY(0u, (true ? 0u : _GLF_FUZZED(workgroup_size))) : _GLF_FUZZED(workgroup_base))) >> _GLF_IDENTITY(uint(8u), uint(8u))))) | (_GLF_IDENTITY(subgroup_id * subgroup_size, (_GLF_IDENTITY(subgroup_id * subgroup_size, (true ? _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (subgroup_id) | 0u) * subgroup_size, (subgroup_id * subgroup_size) | (subgroup_id * subgroup_size)) : _GLF_FUZZED(workgroup_size)))) - (0u >> _GLF_IDENTITY(uint(8u), uint(8u))))))), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id * subgroup_size, (_GLF_IDENTITY(subgroup_id * _GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size))) ^ 0u), (true ? _GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) | (subgroup_id * subgroup_size)) : _GLF_FUZZED(workgroup_size)))) - (0u >> _GLF_IDENTITY(_GLF_IDENTITY(uint(8u), max(uint(8u), uint(8u))), uint(8u)))), (_GLF_IDENTITY(subgroup_id * subgroup_size, (_GLF_IDENTITY(subgroup_id * subgroup_size, (_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), (_GLF_IDENTITY(! (true), true && (! (true)))) && true))) ? _GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) | (subgroup_id * subgroup_size)) : _GLF_FUZZED(workgroup_size)))) - (_GLF_IDENTITY(0u, (true ? _GLF_IDENTITY(0u, (true ? 0u : _GLF_FUZZED(workgroup_size))) : _GLF_FUZZED(workgroup_base))) >> _GLF_IDENTITY(uint(8u), uint(8u))))) | (_GLF_IDENTITY(subgroup_id * subgroup_size, (_GLF_IDENTITY(subgroup_id * subgroup_size, (true ? _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (subgroup_id) | 0u) * subgroup_size, (subgroup_id * subgroup_size) | (subgroup_id * subgroup_size)) : _GLF_FUZZED(workgroup_size)))) - (0u >> _GLF_IDENTITY(uint(8u), uint(8u))))))), 0u ^ ((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id * subgroup_size, (_GLF_IDENTITY(subgroup_id * _GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size))) ^ 0u), (true ? _GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) | (subgroup_id * subgroup_size)) : _GLF_FUZZED(workgroup_size)))) - (0u >> _GLF_IDENTITY(_GLF_IDENTITY(uint(8u), max(uint(8u), uint(8u))), uint(8u)))), (_GLF_IDENTITY(subgroup_id * subgroup_size, (_GLF_IDENTITY(subgroup_id * subgroup_size, (_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), (_GLF_IDENTITY(! (true), true && (! (true)))) && true))) ? _GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) | (subgroup_id * subgroup_size)) : _GLF_FUZZED(workgroup_size)))) - (_GLF_IDENTITY(0u, (true ? _GLF_IDENTITY(0u, (true ? 0u : _GLF_FUZZED(workgroup_size))) : _GLF_FUZZED(workgroup_base))) >> _GLF_IDENTITY(uint(8u), uint(8u))))) | (_GLF_IDENTITY(subgroup_id * subgroup_size, (_GLF_IDENTITY(subgroup_id * subgroup_size, (true ? _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (subgroup_id) | 0u) * subgroup_size, (subgroup_id * subgroup_size) | (subgroup_id * subgroup_size)) : _GLF_FUZZED(workgroup_size)))) - (0u >> _GLF_IDENTITY(uint(8u), uint(8u))))))))), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id * subgroup_size, (_GLF_IDENTITY(subgroup_id * _GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size))) ^ 0u), (true ? _GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) | (subgroup_id * subgroup_size)) : _GLF_FUZZED(workgroup_size)))) - (0u >> _GLF_IDENTITY(_GLF_IDENTITY(uint(8u), max(uint(8u), uint(8u))), uint(8u)))), (_GLF_IDENTITY(subgroup_id * subgroup_size, (_GLF_IDENTITY(subgroup_id * subgroup_size, (_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), (_GLF_IDENTITY(! (true), true && (! (true)))) && true))) ? _GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) | (subgroup_id * subgroup_size)) : _GLF_FUZZED(workgroup_size)))) - (_GLF_IDENTITY(0u, (true ? _GLF_IDENTITY(0u, (true ? 0u : _GLF_FUZZED(workgroup_size))) : _GLF_FUZZED(workgroup_base))) >> _GLF_IDENTITY(uint(8u), uint(8u))))) | (_GLF_IDENTITY(subgroup_id * subgroup_size, (_GLF_IDENTITY(subgroup_id * subgroup_size, (true ? _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (subgroup_id) | 0u) * subgroup_size, (subgroup_id * subgroup_size) | (subgroup_id * subgroup_size)) : _GLF_FUZZED(workgroup_size)))) - (0u >> _GLF_IDENTITY(uint(8u), uint(8u))))))), (true ? (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id * subgroup_size, (_GLF_IDENTITY(subgroup_id * _GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size))) ^ 0u), (true ? _GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) | (subgroup_id * subgroup_size)) : _GLF_FUZZED(workgroup_size)))) - (0u >> _GLF_IDENTITY(_GLF_IDENTITY(uint(8u), max(uint(8u), uint(8u))), uint(8u)))), (_GLF_IDENTITY(subgroup_id * subgroup_size, (_GLF_IDENTITY(subgroup_id * subgroup_size, (_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), (_GLF_IDENTITY(! (true), true && (! (true)))) && true))) ? _GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) | (subgroup_id * subgroup_size)) : _GLF_FUZZED(workgroup_size)))) - (_GLF_IDENTITY(0u, (true ? _GLF_IDENTITY(0u, (true ? 0u : _GLF_FUZZED(workgroup_size))) : _GLF_FUZZED(workgroup_base))) >> _GLF_IDENTITY(uint(8u), uint(8u))))) | (_GLF_IDENTITY(subgroup_id * subgroup_size, (_GLF_IDENTITY(subgroup_id * subgroup_size, (true ? _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (subgroup_id) | 0u) * subgroup_size, (subgroup_id * subgroup_size) | (subgroup_id * subgroup_size)) : _GLF_FUZZED(workgroup_size)))) - (0u >> _GLF_IDENTITY(uint(8u), uint(8u))))))) : _GLF_FUZZED(workgroup_size))))), ~ (subgroup_id * subgroup_size))))) + subgroup_local_id, (_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), ! (! (! (true)))))) ? workgroup_base + _GLF_IDENTITY(subgroup_id * subgroup_size, ~ (_GLF_IDENTITY(~ (subgroup_id * subgroup_size), _GLF_IDENTITY(clamp(~ (subgroup_id * subgroup_size), ~ (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id * subgroup_size, (_GLF_IDENTITY(subgroup_id * subgroup_size, (true ? _GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) | (subgroup_id * subgroup_size)) : _GLF_FUZZED(workgroup_size)))) - (0u >> _GLF_IDENTITY(uint(8u), uint(8u)))), (_GLF_IDENTITY(subgroup_id * subgroup_size, (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id * subgroup_size, (true ? _GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) | (subgroup_id * subgroup_size)) : _GLF_FUZZED(workgroup_size))), clamp(_GLF_IDENTITY(subgroup_id * subgroup_size, (true ? _GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) | (subgroup_id * subgroup_size)) : _GLF_FUZZED(workgroup_size))), _GLF_IDENTITY(subgroup_id * subgroup_size, (true ? _GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) | (subgroup_id * subgroup_size)) : _GLF_FUZZED(workgroup_size))), _GLF_IDENTITY(subgroup_id * subgroup_size, (true ? _GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) | (subgroup_id * subgroup_size)) : _GLF_FUZZED(workgroup_size)))))) - (0u >> _GLF_IDENTITY(uint(8u), uint(8u))))) | (_GLF_IDENTITY(subgroup_id * subgroup_size, (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) ^ 0u), (true ? _GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) | (subgroup_id * subgroup_size)) : _GLF_FUZZED(_GLF_IDENTITY(workgroup_size, (workgroup_size) << 0u))))) - (0u >> _GLF_IDENTITY(uint(8u), uint(8u))))))), ~ (subgroup_id * subgroup_size)), (clamp(~ (subgroup_id * subgroup_size), ~ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id * subgroup_size, (_GLF_IDENTITY(subgroup_id * subgroup_size, (_GLF_IDENTITY(true, true && (true)) ? _GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) | (subgroup_id * subgroup_size)) : _GLF_FUZZED(workgroup_size)))) - (0u >> _GLF_IDENTITY(uint(8u), uint(_GLF_IDENTITY(8u, max(8u, _GLF_IDENTITY(8u, (0u >> _GLF_IDENTITY(uint(2u), uint(2u))) + (8u)))))))), (_GLF_IDENTITY(subgroup_id * subgroup_size, (_GLF_IDENTITY(subgroup_id * subgroup_size, (true ? _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) | (subgroup_id * subgroup_size)), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) | (subgroup_id * subgroup_size))), (~ (_GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) | (subgroup_id * subgroup_size)))) | (~ (_GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) | (subgroup_id * subgroup_size))))))) : _GLF_FUZZED(workgroup_size)))) - (0u >> _GLF_IDENTITY(uint(8u), uint(8u))))) | (_GLF_IDENTITY(subgroup_id * subgroup_size, (_GLF_IDENTITY(subgroup_id * subgroup_size, (true ? _GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) | (subgroup_id * subgroup_size)) : _GLF_FUZZED(workgroup_size)))) - (0u >> _GLF_IDENTITY(uint(8u), uint(8u)))))), uint(uint(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id * subgroup_size, (_GLF_IDENTITY(subgroup_id * subgroup_size, (_GLF_IDENTITY(true, true && (true)) ? _GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) | (subgroup_id * subgroup_size)) : _GLF_FUZZED(workgroup_size)))) - (0u >> _GLF_IDENTITY(uint(8u), uint(_GLF_IDENTITY(8u, max(8u, _GLF_IDENTITY(8u, (0u >> _GLF_IDENTITY(uint(2u), uint(2u))) + (8u)))))))), (_GLF_IDENTITY(subgroup_id * subgroup_size, (_GLF_IDENTITY(subgroup_id * subgroup_size, (true ? _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) | (subgroup_id * subgroup_size)), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) | (subgroup_id * subgroup_size))), (~ (_GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) | (subgroup_id * subgroup_size)))) | (~ (_GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) | (subgroup_id * subgroup_size))))))) : _GLF_FUZZED(workgroup_size)))) - (0u >> _GLF_IDENTITY(uint(8u), uint(8u))))) | (_GLF_IDENTITY(subgroup_id * subgroup_size, (_GLF_IDENTITY(subgroup_id * subgroup_size, (true ? _GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) | (subgroup_id * subgroup_size)) : _GLF_FUZZED(workgroup_size)))) - (0u >> _GLF_IDENTITY(uint(8u), uint(8u)))))))))), ~ (_GLF_IDENTITY(subgroup_id, clamp(subgroup_id, subgroup_id, subgroup_id)) * subgroup_size))) - 0u)))) + subgroup_local_id : _GLF_FUZZED(atomicMin(num_workgroup, subgroup_size))));
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   do
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (true)))))
            {
             atomicStore(write_val, uint(virtual_gid), 4, 64, _GLF_IDENTITY(_GLF_IDENTITY(0, _GLF_IDENTITY((true ? _GLF_IDENTITY(0, 0 | (0)) : _GLF_FUZZED(52928)), min((true ? _GLF_IDENTITY(0, 0 | (0)) : _GLF_FUZZED(52928)), (true ? _GLF_IDENTITY(0, 0 | (0)) : _GLF_FUZZED(52928))))), 0 + _GLF_IDENTITY((_GLF_IDENTITY(0, (_GLF_IDENTITY(0, int(ivec3(0, 1, 1)))) | (0))), ((_GLF_IDENTITY(0, (_GLF_IDENTITY(0, int(ivec3(0, 1, 1)))) | (0)))) | (0 << _GLF_IDENTITY(int(3), int(3))))));
            }
           else
            {
            }
          }
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 else
  {
  }
 uint read_val = atomicLoad(write_val, 4, 64, 0);
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, _GLF_IDENTITY(true, (true) && true) && (true))) && _GLF_IDENTITY(true, bool(bool(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(true), (bool(true)) || false)), (bool(_GLF_IDENTITY(bool(true), (bool(_GLF_IDENTITY(true, (true) || false))) || false))) || false)))))), _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), bool(bvec3((injectionSwitch.x < injectionSwitch.y), false, true))))))
  {
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) || false), (injectionSwitch.x > injectionSwitch.y))))
      {
       for(int _injected_loop_counter = int(_GLF_IDENTITY(_GLF_ONE(_GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, 1.0 * (1.0)), 1.0)), injectionSwitch.y), _GLF_IDENTITY((_GLF_ONE(1.0, injectionSwitch.y)) + 0.0, (_GLF_IDENTITY((_GLF_ONE(1.0, injectionSwitch.y)) + 0.0, clamp((_GLF_ONE(1.0, injectionSwitch.y)) + 0.0, _GLF_IDENTITY(_GLF_IDENTITY((_GLF_ONE(1.0, injectionSwitch.y)) + 0.0, max(_GLF_IDENTITY((_GLF_ONE(1.0, injectionSwitch.y)) + 0.0, mix(float(_GLF_FUZZED(4925.2551)), float((_GLF_ONE(1.0, injectionSwitch.y)) + 0.0), bool(true))), (_GLF_ONE(1.0, injectionSwitch.y)) + 0.0)), min((_GLF_ONE(1.0, injectionSwitch.y)) + 0.0, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_ONE(_GLF_IDENTITY(1.0, float(float(_GLF_IDENTITY(1.0, _GLF_IDENTITY((1.0), float(_GLF_IDENTITY(mat4x2(_GLF_IDENTITY((1.0), mix(float(_GLF_FUZZED(-3295.8833)), float((1.0)), bool(true))), 1.0, 1.0, 0.0, 0.0, sqrt(1.0), 0.0, 0.0), transpose(transpose(mat4x2(_GLF_IDENTITY((1.0), mix(float(_GLF_FUZZED(-3295.8833)), float((1.0)), bool(true))), 1.0, 1.0, 0.0, 0.0, sqrt(1.0), 0.0, 0.0)))))) + _GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(0.0, 0.0)), dot(vec2(1.0, 1.0), vec2(0.0, 0.0))))))), injectionSwitch.y), (_GLF_ONE(_GLF_IDENTITY(1.0, float(_GLF_IDENTITY(float(_GLF_IDENTITY(1.0, (1.0) + _GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(0.0, 0.0)), dot(vec2(1.0, 1.0), vec2(0.0, 0.0))))), clamp(_GLF_IDENTITY(float(_GLF_IDENTITY(1.0, (1.0) + _GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(0.0, 0.0)), dot(vec2(1.0, 1.0), vec2(0.0, 0.0))))), clamp(_GLF_IDENTITY(float(_GLF_IDENTITY(1.0, (1.0) + _GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(0.0, 0.0)), dot(vec2(1.0, 1.0), vec2(0.0, 0.0))))), float(float(float(_GLF_IDENTITY(1.0, (1.0) + _GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(0.0, 0.0)), dot(vec2(1.0, 1.0), vec2(0.0, 0.0)))))))), float(_GLF_IDENTITY(1.0, (1.0) + _GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(0.0, 0.0)), dot(vec2(1.0, 1.0), vec2(0.0, 0.0))))), float(_GLF_IDENTITY(1.0, (1.0) + _GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(0.0, 0.0)), dot(vec2(1.0, 1.0), vec2(0.0, 0.0))))))), float(_GLF_IDENTITY(1.0, (1.0) + _GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(0.0, 0.0)), dot(vec2(1.0, 1.0), vec2(0.0, 0.0))))), _GLF_IDENTITY(float(_GLF_IDENTITY(1.0, (1.0) + _GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(0.0, 0.0)), dot(vec2(1.0, 1.0), vec2(0.0, 0.0))))), min(_GLF_IDENTITY(float(_GLF_IDENTITY(1.0, (1.0) + _GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(0.0, 0.0)), dot(vec2(1.0, 1.0), vec2(0.0, 0.0))))), max(float(_GLF_IDENTITY(1.0, (1.0) + _GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(0.0, 0.0)), dot(vec2(1.0, 1.0), vec2(0.0, 0.0))))), float(_GLF_IDENTITY(1.0, (1.0) + _GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(0.0, 0.0)), dot(vec2(1.0, 1.0), vec2(0.0, 0.0))))))), float(_GLF_IDENTITY(1.0, (1.0) + _GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(0.0, 0.0)), dot(vec2(1.0, 1.0), vec2(0.0, 0.0))))))))))), injectionSwitch.y)) - 0.0), _GLF_IDENTITY(float(mat4x3(_GLF_IDENTITY(_GLF_ONE(_GLF_IDENTITY(_GLF_IDENTITY(1.0, float(float(_GLF_IDENTITY(1.0, (1.0) + _GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(0.0, 0.0)), dot(vec2(1.0, 1.0), vec2(0.0, 0.0))))))), clamp(_GLF_IDENTITY(1.0, float(float(_GLF_IDENTITY(1.0, (1.0) + _GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(0.0, 0.0)), dot(vec2(1.0, 1.0), vec2(0.0, 0.0))))))), _GLF_IDENTITY(_GLF_IDENTITY(1.0, float(float(_GLF_IDENTITY(1.0, (1.0) + _GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(0.0, 0.0)), dot(vec2(1.0, 1.0), vec2(0.0, 0.0))))))), 0.0 + (_GLF_IDENTITY(_GLF_IDENTITY(1.0, float(float(_GLF_IDENTITY(1.0, (1.0) + _GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(0.0, 0.0)), dot(vec2(1.0, 1.0), vec2(0.0, 0.0))))))), float(mat4(_GLF_IDENTITY(1.0, float(float(_GLF_IDENTITY(1.0, (1.0) + _GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(0.0, 0.0)), dot(vec2(1.0, 1.0), vec2(0.0, 0.0))))))), 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0))))), _GLF_IDENTITY(1.0, float(float(_GLF_IDENTITY(1.0, (1.0) + _GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(0.0, 0.0)), dot(vec2(1.0, 1.0), vec2(0.0, 0.0))))))))), injectionSwitch.y), (_GLF_ONE(_GLF_IDENTITY(1.0, float(float(_GLF_IDENTITY(1.0, (1.0) + _GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(0.0, 0.0)), dot(vec2(1.0, 1.0), vec2(0.0, 0.0))))))), injectionSwitch.y)) - 0.0), 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, tan(tan(0.0)))), mix(float(float(mat4x3(_GLF_IDENTITY(_GLF_ONE(_GLF_IDENTITY(1.0, float(float(_GLF_IDENTITY(1.0, (1.0) + _GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(0.0, 0.0)), dot(vec2(1.0, 1.0), vec2(0.0, 0.0))))))), _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))), (_GLF_ONE(_GLF_IDENTITY(1.0, float(float(_GLF_IDENTITY(1.0, (1.0) + _GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(0.0, 0.0)), dot(vec2(1.0, 1.0), vec2(0.0, 0.0))))))), injectionSwitch.y)) - 0.0), 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, _GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, min(1.0, 1.0))) / 1.0), 0.0, tan(tan(0.0))))), float(_GLF_FUZZED(4559.0005)), bool(false))))), _GLF_IDENTITY(((_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), float(float(_GLF_ONE(1.0, injectionSwitch.y)))))), max(((_GLF_ONE(1.0, injectionSwitch.y))), ((_GLF_ONE(1.0, injectionSwitch.y))))) + determinant(mat2(0.0, 0.0, 0.0, 0.0))) + 0.0)), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(0.6) : _GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), min(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), max(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y))), _GLF_ONE(1.0, injectionSwitch.y)))))), clamp(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_ONE(1.0, injectionSwitch.y)), ((_GLF_ONE(1.0, injectionSwitch.y))) - 0.0), min(_GLF_IDENTITY((_GLF_ONE(1.0, injectionSwitch.y)), ((_GLF_ONE(1.0, injectionSwitch.y))) - 0.0), _GLF_IDENTITY((_GLF_ONE(1.0, injectionSwitch.y)), ((_GLF_ONE(1.0, injectionSwitch.y))) - 0.0))), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), (false ? _GLF_FUZZED(-7075.3534) : _GLF_ONE(1.0, injectionSwitch.y)))), mix(float((_GLF_ONE(1.0, injectionSwitch.y))), float(_GLF_FUZZED(-64.62)), bool(false))), (_GLF_ONE(1.0, injectionSwitch.y)))) + 0.0))) - 0.0))); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((0 >> _GLF_IDENTITY(int(0), int(_GLF_IDENTITY(0, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(0, (_GLF_IDENTITY(0, (false ? _GLF_FUZZED(-41739) : 0))) << 0)), (_GLF_IDENTITY((_GLF_IDENTITY(0, (_GLF_IDENTITY(0, (false ? _GLF_FUZZED(-41739) : 0))) << 0)), max((_GLF_IDENTITY(0, (_GLF_IDENTITY(0, (false ? _GLF_FUZZED(-41739) : 0))) << 0)), (_GLF_IDENTITY(0, (_GLF_IDENTITY(0, (false ? _GLF_FUZZED(-41739) : 0))) << 0))))) | ((_GLF_IDENTITY(0, (_GLF_IDENTITY(0, (false ? _GLF_FUZZED(-41739) : 0))) << 0)))), (_GLF_IDENTITY(_GLF_IDENTITY((0), ~ (~ ((_GLF_IDENTITY(_GLF_IDENTITY(0, (0) | 0), max(_GLF_IDENTITY(0, (0) | 0), _GLF_IDENTITY(0, (0) | 0))))))), min(_GLF_IDENTITY((0), ~ (~ ((_GLF_IDENTITY(_GLF_IDENTITY(0, (0) | 0), max(_GLF_IDENTITY(0, (0) | 0), _GLF_IDENTITY(0, (0) | 0))))))), _GLF_IDENTITY((0), ~ (~ ((_GLF_IDENTITY(_GLF_IDENTITY(0, (0) | 0), max(_GLF_IDENTITY(_GLF_IDENTITY(0, (0) >> int(_GLF_ZERO(0.0, injectionSwitch.x))), (0) | 0), _GLF_IDENTITY(0, (0) | 0)))))))))) | ((0))) + 0, 1 * (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(0, (_GLF_IDENTITY(0, (false ? _GLF_FUZZED(-41739) : 0))) << 0)), (_GLF_IDENTITY((_GLF_IDENTITY(0, (_GLF_IDENTITY(0, (false ? _GLF_FUZZED(-41739) : 0))) << 0)), max((_GLF_IDENTITY(0, (_GLF_IDENTITY(0, (false ? _GLF_FUZZED(-41739) : 0))) << 0)), (_GLF_IDENTITY(0, (_GLF_IDENTITY(0, (false ? _GLF_FUZZED(-41739) : 0))) << 0))))) | ((_GLF_IDENTITY(0, (_GLF_IDENTITY(0, (false ? _GLF_FUZZED(-41739) : 0))) << 0)))), (_GLF_IDENTITY(_GLF_IDENTITY((0), ~ (~ ((_GLF_IDENTITY(_GLF_IDENTITY(0, (0) | 0), max(_GLF_IDENTITY(0, (0) | 0), _GLF_IDENTITY(0, (0) | 0))))))), min(_GLF_IDENTITY((0), ~ (~ ((_GLF_IDENTITY(_GLF_IDENTITY(0, (0) | 0), max(_GLF_IDENTITY(0, (0) | 0), _GLF_IDENTITY(0, (0) | 0))))))), _GLF_IDENTITY((0), ~ (~ ((_GLF_IDENTITY(_GLF_IDENTITY(0, (0) | 0), max(_GLF_IDENTITY(_GLF_IDENTITY(0, (0) >> int(_GLF_ZERO(0.0, injectionSwitch.x))), (0) | 0), _GLF_IDENTITY(0, (0) | 0)))))))))) | ((0))) + 0, min(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(0, (_GLF_IDENTITY(0, (false ? _GLF_FUZZED(-41739) : 0))) << 0)), (_GLF_IDENTITY((_GLF_IDENTITY(0, (_GLF_IDENTITY(0, (false ? _GLF_FUZZED(-41739) : 0))) << 0)), max((_GLF_IDENTITY(0, (_GLF_IDENTITY(0, (false ? _GLF_FUZZED(-41739) : 0))) << 0)), (_GLF_IDENTITY(0, (_GLF_IDENTITY(0, (false ? _GLF_FUZZED(-41739) : 0))) << 0))))) | ((_GLF_IDENTITY(0, (_GLF_IDENTITY(0, (false ? _GLF_FUZZED(-41739) : 0))) << 0)))), (_GLF_IDENTITY(_GLF_IDENTITY((0), ~ (~ ((_GLF_IDENTITY(_GLF_IDENTITY(0, (0) | 0), max(_GLF_IDENTITY(0, (0) | 0), _GLF_IDENTITY(0, (0) | 0))))))), min(_GLF_IDENTITY((0), ~ (~ ((_GLF_IDENTITY(_GLF_IDENTITY(0, (0) | 0), max(_GLF_IDENTITY(0, (0) | 0), _GLF_IDENTITY(0, (0) | 0))))))), _GLF_IDENTITY((0), ~ (~ ((_GLF_IDENTITY(_GLF_IDENTITY(0, (0) | 0), max(_GLF_IDENTITY(_GLF_IDENTITY(0, (0) >> int(_GLF_ZERO(0.0, injectionSwitch.x))), (0) | 0), _GLF_IDENTITY(0, (0) | 0)))))))))) | ((0))) + 0, _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(0, (_GLF_IDENTITY(0, (false ? _GLF_FUZZED(-41739) : 0))) << 0)), (_GLF_IDENTITY((_GLF_IDENTITY(0, (_GLF_IDENTITY(0, (false ? _GLF_FUZZED(-41739) : 0))) << 0)), max((_GLF_IDENTITY(0, (_GLF_IDENTITY(0, (false ? _GLF_FUZZED(-41739) : 0))) << 0)), (_GLF_IDENTITY(0, (_GLF_IDENTITY(0, (false ? _GLF_FUZZED(-41739) : 0))) << 0))))) | ((_GLF_IDENTITY(0, (_GLF_IDENTITY(0, (false ? _GLF_FUZZED(-41739) : 0))) << 0)))), (_GLF_IDENTITY(_GLF_IDENTITY((0), ~ (~ ((_GLF_IDENTITY(_GLF_IDENTITY(0, (0) | 0), max(_GLF_IDENTITY(0, (0) | 0), _GLF_IDENTITY(0, (0) | 0))))))), min(_GLF_IDENTITY((0), ~ (~ ((_GLF_IDENTITY(_GLF_IDENTITY(0, (0) | 0), max(_GLF_IDENTITY(0, (0) | 0), _GLF_IDENTITY(0, (0) | 0))))))), _GLF_IDENTITY((0), ~ (~ ((_GLF_IDENTITY(_GLF_IDENTITY(0, (0) | 0), max(_GLF_IDENTITY(_GLF_IDENTITY(0, (0) >> int(_GLF_ZERO(0.0, injectionSwitch.x))), (0) | 0), _GLF_IDENTITY(0, (0) | 0)))))))))) | ((0))) + 0)))))))) << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), max(int(3), _GLF_IDENTITY(int(3), max(int(3), int(3)))))))); _injected_loop_counter --)
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), ! (! (_GLF_WRAPPED_IF_FALSE(false)))))
              {
              }
             else
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                return;
              }
            }
           else
            {
            }
          }
        }
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         do
          {
           return;
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        }
      }
    }
   while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), ! _GLF_IDENTITY((! _GLF_IDENTITY((_GLF_WRAPPED_LOOP(false)), (_GLF_IDENTITY((_GLF_WRAPPED_LOOP(false)), bool(bool(_GLF_IDENTITY((_GLF_WRAPPED_LOOP(false)), ((_GLF_WRAPPED_LOOP(false))) && true))))) && _GLF_IDENTITY(true, ! (! (true))))), bool(bvec4((! _GLF_IDENTITY((_GLF_WRAPPED_LOOP(false)), (_GLF_IDENTITY((_GLF_WRAPPED_LOOP(false)), bool(bool(_GLF_IDENTITY((_GLF_WRAPPED_LOOP(false)), ((_GLF_WRAPPED_LOOP(false))) && true))))) && true)), false, true, false)))));
  }
 else
  {
  }
 do
  {
   buf[virtual_gid] = uint(subgroupAllEqual(read_val));
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   do
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             return;
            }
           else
            {
            }
          }
        }
       else
        {
        }
      }
    }
   while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), (_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, false || (injectionSwitch.x < injectionSwitch.y)))))) && true)), bool(bvec3(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), _GLF_IDENTITY((_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, false || (injectionSwitch.x < injectionSwitch.y)))))), bool(bvec3((_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, false || (injectionSwitch.x < injectionSwitch.y)))))), true, false))) && true)), true, false))));
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
