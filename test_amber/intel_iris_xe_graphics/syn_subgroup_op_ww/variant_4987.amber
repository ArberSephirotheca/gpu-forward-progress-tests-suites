#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec4(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, false || (true))), false, false, true)), ! _GLF_IDENTITY((_GLF_IDENTITY(! (bool(bvec4(_GLF_WRAPPED_IF_TRUE(true), false, false, true))), bool(bvec4(! (bool(bvec4(_GLF_WRAPPED_IF_TRUE(true), false, false, true))), false, false, false)))), bool(bool((_GLF_IDENTITY(! (bool(bvec4(_GLF_WRAPPED_IF_TRUE(true), false, false, true))), bool(bvec4(! (bool(bvec4(_GLF_WRAPPED_IF_TRUE(true), false, false, true))), false, false, false)))))))), (_GLF_IDENTITY(bool(bvec4(_GLF_WRAPPED_IF_TRUE(true), false, false, true)), ! (_GLF_IDENTITY(! (bool(bvec4(_GLF_WRAPPED_IF_TRUE(true), false, false, true))), bool(bvec4(! (bool(bvec4(_GLF_WRAPPED_IF_TRUE(true), false, false, true))), false, false, false)))))) || false)), (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec4(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, false || (true))), false, false, true)), ! _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(! (bool(bvec4(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, true && (true))) || false)), false, false, true))), bool(bvec4(! (bool(bvec4(_GLF_WRAPPED_IF_TRUE(true), false, false, true))), false, false, false)))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY((_GLF_IDENTITY(! (bool(bvec4(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, true && (true))) || false)), false, false, true))), bool(bvec4(! (bool(bvec4(_GLF_WRAPPED_IF_TRUE(true), false, false, true))), false, false, false)))), ! (! ((_GLF_IDENTITY(! (bool(bvec4(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, true && (true))) || false)), false, false, true))), bool(bvec4(! (bool(bvec4(_GLF_WRAPPED_IF_TRUE(true), false, false, true))), false, false, false))))))))), bool(bool((_GLF_IDENTITY(! (bool(bvec4(_GLF_WRAPPED_IF_TRUE(true), false, false, true))), bool(bvec4(_GLF_IDENTITY(! (bool(bvec4(_GLF_WRAPPED_IF_TRUE(true), false, false, true))), ! (! (! (bool(bvec4(_GLF_WRAPPED_IF_TRUE(true), false, false, true)))))), false, false, false)))))))), (_GLF_IDENTITY(bool(bvec4(_GLF_WRAPPED_IF_TRUE(true), false, false, true)), ! (_GLF_IDENTITY(! (bool(bvec4(_GLF_WRAPPED_IF_TRUE(true), false, false, true))), bool(bvec4(! (bool(bvec4(_GLF_WRAPPED_IF_TRUE(true), _GLF_IDENTITY(false, bool(bool(false))), false, true))), false, false, false)))))) || false))) || false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), true && (! (false))))), (injectionSwitch.x > injectionSwitch.y)), ! _GLF_IDENTITY((_GLF_IDENTITY(! (_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), true && (! (false))))), (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(! (_GLF_IDENTITY(! (! (_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), true && (! (false))))), _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))))), true && (! (! (_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), true && (! (_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, (false) && true))))))))), (injectionSwitch.x > injectionSwitch.y))))))), (_GLF_IDENTITY(! (_GLF_IDENTITY(! (! (_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), true && (! (false))))), (injectionSwitch.x > injectionSwitch.y)))), true && (! (! (_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! _GLF_IDENTITY((false), ! (! ((false)))), true && (! _GLF_IDENTITY((false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && ((false))))))), (injectionSwitch.x > injectionSwitch.y))))))), ! (! (! _GLF_IDENTITY((_GLF_IDENTITY(! (! (_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), true && (! (false))))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)), injectionSwitch)).y)))), _GLF_IDENTITY(true && (! (! (_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), true && (! (false))))), (injectionSwitch.x > injectionSwitch.y))))), false || (true && (! (! (_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), true && (! (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), false || (_GLF_IDENTITY(false, bool(bool(false)))))))))), (injectionSwitch.x > injectionSwitch.y))))))))), bool(bvec2(_GLF_IDENTITY((_GLF_IDENTITY(! (! (_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), true && (! (false))))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)), injectionSwitch)).y)))), _GLF_IDENTITY(true && (! (! (_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), true && (! (false))))), (injectionSwitch.x > injectionSwitch.y))))), false || (true && (! (! (_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), true && (! (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), false || (_GLF_IDENTITY(false, bool(bool(false)))))))))), (injectionSwitch.x > injectionSwitch.y))))))))), ! (! ((_GLF_IDENTITY(! (! (_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), true && (! (false))))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)), injectionSwitch)).y)))), _GLF_IDENTITY(true && (! (! (_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), true && (! (false))))), (injectionSwitch.x > injectionSwitch.y))))), false || (true && (! (! (_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), true && (! (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), false || (_GLF_IDENTITY(false, bool(bool(false)))))))))), (injectionSwitch.x > injectionSwitch.y)))))))))))), true))))))) && true))), false || ((_GLF_IDENTITY(! (_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), true && (! (false))))), (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(! (_GLF_IDENTITY(! (! (_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), true && (! (false))))), _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))))), true && (! (! (_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), true && (! (_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, (false) && true))))))))), (injectionSwitch.x > injectionSwitch.y))))))), (_GLF_IDENTITY(! (_GLF_IDENTITY(! (! (_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), true && (! (false))))), (injectionSwitch.x > injectionSwitch.y)))), true && (! (! (_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! _GLF_IDENTITY((false), ! (! ((false)))), true && (! _GLF_IDENTITY((false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && ((false))))))), (injectionSwitch.x > injectionSwitch.y))))))), ! (! (! _GLF_IDENTITY((_GLF_IDENTITY(! (! (_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), true && (! (false))))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)), injectionSwitch)).y)))), _GLF_IDENTITY(true && (! (! (_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), true && (! (false))))), (injectionSwitch.x > injectionSwitch.y))))), false || (true && (! (! (_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), true && (! (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), false || (_GLF_IDENTITY(false, bool(bool(false)))))))))), (injectionSwitch.x > injectionSwitch.y))))))))), bool(bvec2(_GLF_IDENTITY((_GLF_IDENTITY(! (! (_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), true && (! (false))))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)), injectionSwitch)).y)))), _GLF_IDENTITY(true && (! (! (_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), true && (! (false))))), (injectionSwitch.x > injectionSwitch.y))))), false || (true && (! (! (_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), true && (! (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), false || (_GLF_IDENTITY(false, bool(bool(false)))))))))), (injectionSwitch.x > injectionSwitch.y))))))))), ! (! ((_GLF_IDENTITY(! (! (_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), true && (! (false))))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)), injectionSwitch)).y)))), _GLF_IDENTITY(true && (! (! (_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), true && (! (false))))), (injectionSwitch.x > injectionSwitch.y))))), false || (true && (! (! (_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), true && (! (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), false || (_GLF_IDENTITY(false, bool(bool(false)))))))))), (injectionSwitch.x > injectionSwitch.y)))))))))))), true))))))) && true))))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != 0, bool(bvec4(_injected_loop_counter != 0, true, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))); _injected_loop_counter --)
      {
       do
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
          barrier();
         barrier();
        }
       while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) && true)) && true))) && true));
       if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
    }
  }
 else
  {
  }
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)), max(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(35.26), _GLF_FUZZED(709.791)), vec2(_GLF_IDENTITY((injectionSwitch)[0], mix(float((injectionSwitch)[0]), float(_GLF_FUZZED(vec4(-838.957, -74.47, 3.0, 9.0).x)), bool(false))), (injectionSwitch)[1]), bvec2(true, _GLF_IDENTITY(true, ! (! (true)))))), _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED((vec2(8.3, 48.80) / injectionSwitch)))))).x < injectionSwitch.y))))
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _GLF_IDENTITY(_injected_loop_counter ++, (_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) >> 0), (_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter ++, (_GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) + 0)) - 0), (_injected_loop_counter ++) >> 0)) | 0)) << 0))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(9247.6779), _GLF_FUZZED(vec3(-9.7, -2214.6963, 1.9).x)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))).y))))
      barrier();
    }
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false))))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)), injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0)))))
  barrier();
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)).x > _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   do
    {
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), _GLF_IDENTITY((_GLF_IDENTITY(false, true && (false))) && true, ((_GLF_IDENTITY(false, true && (false))) && true) || _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], (false ? _GLF_FUZZED(-4.0) : injectionSwitch[0])), injectionSwitch[1])).y))))
      barrier();
     for(int _injected_loop_counter = (1 ^ 0); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > (0 << _GLF_IDENTITY(int(2), int(2)))), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter > (_GLF_IDENTITY(0 << _GLF_IDENTITY(int(2), int(2)), max(0 << _GLF_IDENTITY(int(2), int(2)), 0 << _GLF_IDENTITY(int(2), int(2))))))))); _injected_loop_counter --)
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) | 0))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, false)))))
          barrier();
         barrier();
        }
      }
    }
   barrier();
  }
 uint workgroup_size = _GLF_IDENTITY(gl_WorkGroupSize, max(gl_WorkGroupSize, gl_WorkGroupSize)).x;
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED((true ? -8.5 : -7032.2152))), float(injectionSwitch.x), bool(true))), clamp(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED((true ? -8.5 : -7032.2152))), float(injectionSwitch.x), bool(true))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED((_GLF_IDENTITY(true, (true) && true) ? -8.5 : -7032.2152))), float(injectionSwitch.x), bool(true))), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED((true ? -8.5 : -7032.2152))), float(injectionSwitch.x), bool(true))), mix(float(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED((true ? -8.5 : -7032.2152))), float(_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(injectionSwitch[1])))), bool(true)))), float(_GLF_FUZZED(9823.9733)), bool(false)))) / 1.0), _GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED((true ? -8.5 : -7032.2152))), float(injectionSwitch.x), bool(true))))), (true ? injectionSwitch.x : _GLF_FUZZED(-11.00))) > injectionSwitch.y))))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, true && _GLF_IDENTITY((_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), (_GLF_IDENTITY((false), ((false)) || false)) && true)))), ! (_GLF_IDENTITY(! ((_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), (_GLF_IDENTITY((false), ((false)) || false)) && true))))), ! (! (! ((_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), (_GLF_IDENTITY((false), ((false)) || false)) && true))))))))))), (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), true && (_GLF_IDENTITY(! (false), (_GLF_IDENTITY(! (false), bool(bvec3(! (false), false, true)))) && true))))))), (injectionSwitch.x > injectionSwitch.y))))))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(sign(determinant(mat2(6.7, 42.50, -837.324, -78.69)))) : injectionSwitch.x)) < injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(_GLF_IDENTITY(mat3(injectionSwitch.y, log(1.0), 1.0, log(1.0), _GLF_IDENTITY(determinant(mat3(1.0, abs(1.0), 0.0, 0.0, 1.0, 1.0, determinant(mat2(0.0, 0.0, 0.0, 0.0)), 0.0, 1.0)), clamp(determinant(mat3(1.0, abs(1.0), 0.0, 0.0, 1.0, 1.0, determinant(mat2(0.0, 0.0, 0.0, 0.0)), 0.0, _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(-3.8) : 1.0)))), determinant(mat3(1.0, abs(1.0), 0.0, 0.0, 1.0, 1.0, determinant(mat2(0.0, 0.0, 0.0, 0.0)), 0.0, 1.0)), determinant(mat3(1.0, abs(1.0), 0.0, 0.0, 1.0, 1.0, _GLF_IDENTITY(determinant(mat2(0.0, 0.0, 0.0, 0.0)), 1.0 * (determinant(mat2(0.0, 0.0, 0.0, 0.0)))), 0.0, 1.0)))), 1.0, _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), 1.0), transpose(transpose(_GLF_IDENTITY(mat3(injectionSwitch.y, log(1.0), 1.0, log(1.0), determinant(mat3(1.0, abs(1.0), 0.0, 0.0, 1.0, 1.0, determinant(mat2(0.0, 0.0, 0.0, 0.0)), 0.0, 1.0)), 1.0, _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), 1.0), mat3(1.0) * (mat3(injectionSwitch.y, log(1.0), 1.0, log(1.0), determinant(mat3(1.0, abs(1.0), 0.0, 0.0, 1.0, 1.0, determinant(mat2(0.0, 0.0, 0.0, 0.0)), 0.0, 1.0)), 1.0, _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), 1.0))))))))))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((false), ! (! (_GLF_IDENTITY((false), ((false)) && true)))) || _GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, bool(bool(false))), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec3(bvec3(bvec3(_GLF_IDENTITY(false, bool(bool(false))), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), ! (! (_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, bool(bool(false))), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec3(bvec3(bvec3(_GLF_IDENTITY(false, bool(bool(false))), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), (bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, bool(bool(false))), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec3(bvec3(bvec3(_GLF_IDENTITY(false, bool(bool(false))), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))) && true))))))))
  barrier();
 uint workgroup_base = workgroup_size * workgroup_id;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   do
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         barrier();
         if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
          barrier();
        }
       else
        {
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 uint virtual_gid = _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_id, max(subgroup_id, subgroup_id)) * subgroup_size, (_GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_id, max(subgroup_id, subgroup_id)) * subgroup_size, (_GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_id, max(subgroup_id, subgroup_id)) * subgroup_size, (workgroup_base + _GLF_IDENTITY(subgroup_id, max(subgroup_id, subgroup_id)) * subgroup_size) - 0u)) / 1u)) << 0u), min(_GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_id, max(subgroup_id, subgroup_id)) * subgroup_size, min(_GLF_IDENTITY(workgroup_base, (workgroup_base) << 0u) + _GLF_IDENTITY(subgroup_id, max(subgroup_id, subgroup_id)) * subgroup_size, workgroup_base + _GLF_IDENTITY(subgroup_id, max(subgroup_id, subgroup_id)) * subgroup_size)), _GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_id, max(subgroup_id, subgroup_id)) * subgroup_size, (workgroup_base + _GLF_IDENTITY(subgroup_id, max(subgroup_id, subgroup_id)) * subgroup_size) ^ 0u))) + _GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) ^ 0u), (_GLF_IDENTITY(subgroup_local_id, max(subgroup_local_id, subgroup_local_id))) * 1u);
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec2(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
        }
       else
        {
        }
      }
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 for(int _injected_loop_counter = (((1 ^ 0) << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), _GLF_IDENTITY(0 | (_GLF_IDENTITY(int(1), min(int(1), _GLF_IDENTITY(int(1), min(int(1), int(1)))))), (0 | (_GLF_IDENTITY(int(1), min(int(1), int(1))))) ^ 0)))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, false)), ! (! (bool(bvec4(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, false))))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 do
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y)))), false || (bool(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y))))))), bool(bvec2(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y)))), false || (bool(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y))))))), true))))) && true))))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(false));
 do
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), bool(bvec4(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, false || (false)))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true)))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), _GLF_IDENTITY(true && (bool(false)), bool(bvec2(true && (bool(false)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(false));
 uint next_virtual_gid = workgroup_base + _GLF_IDENTITY(subgroup_id, (subgroup_id) | (subgroup_id)) * subgroup_size + _GLF_IDENTITY(_GLF_IDENTITY(((_GLF_IDENTITY(subgroup_local_id, uint(uint(subgroup_local_id))) + _GLF_IDENTITY(1, (1) >> 0)) % subgroup_size), _GLF_IDENTITY((true ? (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, clamp((subgroup_local_id + 1) % subgroup_size, _GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, clamp((subgroup_local_id + 1) % subgroup_size, (subgroup_local_id + 1) % subgroup_size, (subgroup_local_id + 1) % subgroup_size)), (subgroup_local_id + 1) % subgroup_size)), clamp(_GLF_IDENTITY((subgroup_local_id + 1) % _GLF_IDENTITY(subgroup_size, ~ (_GLF_IDENTITY(~ (subgroup_size), (~ (subgroup_size)) * 1u))), (_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, ((subgroup_local_id + 1) % subgroup_size) | 0u), 1u * (_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, ((_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) >> 0u)))) - 0u) + 1) % subgroup_size) | 0u)))) ^ (0u | 0u)), _GLF_IDENTITY((subgroup_local_id + 1), max((subgroup_local_id + 1), (subgroup_local_id + 1))) % subgroup_size, _GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, ((subgroup_local_id + 1) % subgroup_size) * 1u))), (_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, clamp(_GLF_IDENTITY((subgroup_local_id + _GLF_IDENTITY(1, min(1, _GLF_IDENTITY(1, (false ? _GLF_FUZZED(52549) : _GLF_IDENTITY(1, ~ _GLF_IDENTITY((~ (1)), max(_GLF_IDENTITY((~ (1)), ((~ (1))) - 0), (~ (1)))))))))) % subgroup_size, (_GLF_IDENTITY((subgroup_local_id + 1) % _GLF_IDENTITY(subgroup_size, max(subgroup_size, subgroup_size)), ((subgroup_local_id + 1) % _GLF_IDENTITY(subgroup_size, max(subgroup_size, subgroup_size))) | (5081u & 0u))) ^ (0u | _GLF_IDENTITY(0u, min(_GLF_IDENTITY(0u, ~ (~ (0u))), 0u)))), (_GLF_IDENTITY(subgroup_local_id + 1, min(subgroup_local_id + 1, subgroup_local_id + 1))) % subgroup_size, _GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, (_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) | 0u) % subgroup_size) * 1u)))) ^ 0u)) : _GLF_IDENTITY(_GLF_FUZZED(workgroup_id), 0u + (_GLF_FUZZED(workgroup_id)))), ((_GLF_IDENTITY(true, bool(bool(true))) ? (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, clamp(_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, ((subgroup_local_id + 1) % subgroup_size) ^ (0u | 0u)), (subgroup_local_id + 1) % subgroup_size, _GLF_IDENTITY((subgroup_local_id + _GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) | 0)) >> 0)) % subgroup_size, ((subgroup_local_id + 1) % subgroup_size) * 1u))), min(_GLF_IDENTITY((subgroup_local_id + _GLF_IDENTITY(1, max(1, 1))) % subgroup_size, clamp(_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, ((subgroup_local_id + 1) % _GLF_IDENTITY(subgroup_size, (true ? subgroup_size : _GLF_FUZZED((++ subgroup_id))))) ^ (0u | 0u)), (subgroup_local_id + 1) % subgroup_size, _GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, ((subgroup_local_id + 1) % subgroup_size) * 1u))), _GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, clamp(_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, ((subgroup_local_id + 1) % subgroup_size) ^ (0u | 0u)), (subgroup_local_id + 1) % subgroup_size, _GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, (_GLF_IDENTITY((subgroup_local_id + 1), clamp((subgroup_local_id + 1), _GLF_IDENTITY((subgroup_local_id + 1), ~ (~ ((subgroup_local_id + 1)))), (subgroup_local_id + 1))) % subgroup_size) * 1u))), max(_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, clamp(_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, (_GLF_IDENTITY((subgroup_local_id + 1), 0u ^ (_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) - 0u))) % subgroup_size) ^ (0u | 0u)), (subgroup_local_id + 1) % subgroup_size, _GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, ((subgroup_local_id + 1) % subgroup_size) * 1u))), _GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id + 1, clamp(subgroup_local_id + 1, _GLF_IDENTITY(subgroup_local_id + 1, (false ? _GLF_FUZZED(workgroup_size) : subgroup_local_id + 1)), subgroup_local_id + 1))) % subgroup_size, clamp(_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, ((subgroup_local_id + 1) % subgroup_size) ^ (0u | 0u)), (subgroup_local_id + 1) % subgroup_size, _GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, ((subgroup_local_id + 1) % subgroup_size) * 1u))))))), (_GLF_IDENTITY((subgroup_local_id + _GLF_IDENTITY(1, int(int(1)))) % subgroup_size, clamp(_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, ((subgroup_local_id + _GLF_IDENTITY(1, int(_GLF_IDENTITY(int(1), (int(1)) * 1)))) % subgroup_size) ^ (0u | 0u)), _GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, ((subgroup_local_id + 1) % subgroup_size) >> 0u), _GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, _GLF_IDENTITY(((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) * 1u) + 1, (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) * 1u) + 1) + 0u)) % subgroup_size), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(num_workgroup) : ((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) * 1u) + 1, (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) * 1u) + 1) + 0u)) % subgroup_size))) * 1u)))) ^ 0u)) : _GLF_FUZZED(workgroup_id))) ^ 0u)), min(_GLF_IDENTITY(((subgroup_local_id + 1) % _GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(false ? _GLF_FUZZED(191906u) : subgroup_size, ~ (~ (false ? _GLF_FUZZED(191906u) : subgroup_size)))))), _GLF_IDENTITY(~ (~ (_GLF_IDENTITY((_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, ((subgroup_local_id + 1) % subgroup_size) | ((subgroup_local_id + 1) % subgroup_size))), 1u * (_GLF_IDENTITY(((subgroup_local_id + 1) % subgroup_size), (_GLF_IDENTITY((_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, 0u | _GLF_IDENTITY(((subgroup_local_id + 1) % subgroup_size), max(((subgroup_local_id + 1) % subgroup_size), ((subgroup_local_id + 1) % subgroup_size))))), clamp((_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, 0u | _GLF_IDENTITY(((subgroup_local_id + 1) % subgroup_size), max(((subgroup_local_id + 1) % subgroup_size), ((subgroup_local_id + 1) % subgroup_size))))), (_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, 0u | _GLF_IDENTITY(((subgroup_local_id + 1) % subgroup_size), max(((subgroup_local_id + 1) % subgroup_size), ((subgroup_local_id + 1) % subgroup_size))))), (_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, 0u | _GLF_IDENTITY(((subgroup_local_id + 1) % subgroup_size), max(((subgroup_local_id + 1) % subgroup_size), ((subgroup_local_id + 1) % subgroup_size)))))))) >> 0u))))), min(~ (~ (((subgroup_local_id + 1) % _GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size))))), ~ (_GLF_IDENTITY(~ _GLF_IDENTITY(((_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, uint(uvec2((subgroup_local_id + 1) % subgroup_size, 1u))))), 0u | _GLF_IDENTITY(((((subgroup_local_id + 1) % subgroup_size))), uint(_GLF_IDENTITY(uvec4(((((subgroup_local_id + 1) % subgroup_size))), ((1u << _GLF_IDENTITY(uint(4u), _GLF_IDENTITY(uint(4u), max(uint(4u), uint(4u))))) >> _GLF_IDENTITY(uint(4u), uint(4u))), (0u >> _GLF_IDENTITY(uint(2u), uint(2u))), 0u), (uvec4(((((subgroup_local_id + 1) % subgroup_size))), ((_GLF_IDENTITY(1u << _GLF_IDENTITY(uint(4u), uint(4u)), clamp(1u << _GLF_IDENTITY(uint(4u), uint(4u)), 1u << _GLF_IDENTITY(uint(4u), uint(4u)), _GLF_IDENTITY(1u << _GLF_IDENTITY(uint(4u), uint(4u)), (_GLF_IDENTITY(1u << _GLF_IDENTITY(uint(4u), uint(4u)), (1u << _GLF_IDENTITY(uint(4u), uint(4u))) + 0u)) ^ 0u)))) >> _GLF_IDENTITY(_GLF_IDENTITY(uint(4u), uint(4u)), min(_GLF_IDENTITY(uint(4u), uint(4u)), _GLF_IDENTITY(uint(4u), uint(4u))))), (0u >> _GLF_IDENTITY(uint(2u), uint(2u))), 0u)) << uvec4(0u, 0u, 0u, 0u))))), (~ _GLF_IDENTITY(((_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, uint(uvec2((subgroup_local_id + 1) % subgroup_size, 1u))))), 0u | _GLF_IDENTITY(((((subgroup_local_id + _GLF_IDENTITY(1, (1) << 0)) % subgroup_size))), uint(_GLF_IDENTITY(uvec4(((((subgroup_local_id + 1) % subgroup_size))), ((1u << _GLF_IDENTITY(uint(4u), uint(4u))) >> _GLF_IDENTITY(_GLF_IDENTITY(uint(4u), uint(4u)), (_GLF_IDENTITY(uint(4u), uint(4u))) - 0u)), (0u >> _GLF_IDENTITY(uint(2u), uint(2u))), 0u), (uvec4(((((subgroup_local_id + 1) % subgroup_size))), ((1u << _GLF_IDENTITY(uint(4u), uint(4u))) >> _GLF_IDENTITY(uint(4u), uint(4u))), (0u >> _GLF_IDENTITY(uint(2u), uint(2u))), 0u)) << uvec4(0u, 0u, 0u, 0u)))))) << 0u))))), _GLF_IDENTITY(((subgroup_local_id + 1) % _GLF_IDENTITY(subgroup_size, uint(uvec2(subgroup_size, 1u)))), clamp(_GLF_IDENTITY(((_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, subgroup_local_id))) >> uint(_GLF_ZERO(0.0, injectionSwitch.x))) + 1) % subgroup_size), (false ? _GLF_FUZZED(159256u) : ((_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, subgroup_local_id))) >> uint(_GLF_ZERO(0.0, injectionSwitch.x))) + 1) % subgroup_size))), _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | 0u) + 1, max(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | 0u) + 1, (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | 0u) + 1, uint(uint(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | 0u) + 1)))) - 0u), _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | 0u) + 1))), clamp((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | 0u) + 1, max(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | 0u) + 1, (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | 0u) + 1, uint(uint(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | 0u) + 1)))) - 0u), _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | 0u) + 1))), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | 0u) + 1, max(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | 0u) + 1, (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | 0u) + 1, uint(uint(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | 0u) + 1)))) - 0u), _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | 0u) + 1))), uint(_GLF_IDENTITY(uint((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | 0u) + 1, max(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | 0u) + 1, (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | 0u) + 1, uint(uint(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | 0u) + 1)))) - 0u), _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | 0u) + 1)))), (uint((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | 0u) + 1, max(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | 0u) + 1, (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | 0u) + 1, uint(uint(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | 0u) + 1)))) - 0u), _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | 0u) + 1))))) << 0u))), (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | 0u) + 1, max(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | 0u) + 1, (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | 0u) + 1, uint(uint(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | 0u) + 1)))) - 0u), _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | 0u) + 1))))) % subgroup_size), (((_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | 0u) + 1) % subgroup_size)) | (((_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | 0u) + 1) % subgroup_size))), (((subgroup_local_id + 1) % subgroup_size)) | uint(_GLF_ZERO(0.0, injectionSwitch.x))), (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, clamp(subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec4(subgroup_local_id, 0u, 0u, 0u), max(uvec4(subgroup_local_id, 0u, 0u, 0u), uvec4(subgroup_local_id, 0u, 0u, 0u)))), (uint(_GLF_IDENTITY(uvec4(subgroup_local_id, 0u, 0u, 0u), max(uvec4(subgroup_local_id, 0u, 0u, _GLF_IDENTITY(0u, (0u) | (0u))), uvec4(subgroup_local_id, 0u, 0u, _GLF_IDENTITY(0u, uint(uvec3(_GLF_IDENTITY(0u, (0u) / 1u), uint(_GLF_ONE(1.0, injectionSwitch.y)), 1u)))))))) << 0u)), subgroup_local_id)) + _GLF_IDENTITY(1, _GLF_IDENTITY(int(ivec2(1, int(_GLF_ONE(1.0, injectionSwitch.y)))), _GLF_IDENTITY(clamp(int(ivec2(1, int(_GLF_ONE(1.0, injectionSwitch.y)))), int(ivec2(1, int(_GLF_ONE(1.0, injectionSwitch.y)))), int(ivec2(1, int(_GLF_ONE(_GLF_IDENTITY(1.0, 0.0 + (1.0)), injectionSwitch.y))))), min(clamp(_GLF_IDENTITY(int(_GLF_IDENTITY(ivec2(1, int(_GLF_ONE(1.0, injectionSwitch.y))), ivec2(ivec2(ivec2(1, int(_GLF_ONE(1.0, injectionSwitch.y))))))), min(int(_GLF_IDENTITY(ivec2(1, int(_GLF_ONE(1.0, injectionSwitch.y))), ivec2(ivec2(ivec2(1, int(_GLF_ONE(1.0, injectionSwitch.y))))))), int(_GLF_IDENTITY(ivec2(1, int(_GLF_ONE(1.0, injectionSwitch.y))), ivec2(ivec2(ivec2(1, int(_GLF_ONE(1.0, injectionSwitch.y))))))))), int(ivec2(1, int(_GLF_ONE(1.0, injectionSwitch.y)))), int(ivec2(1, int(_GLF_ONE(1.0, injectionSwitch.y))))), clamp(int(_GLF_IDENTITY(ivec2(1, int(_GLF_ONE(1.0, injectionSwitch.y))), _GLF_IDENTITY(ivec2(ivec4(ivec2(1, int(_GLF_ONE(1.0, injectionSwitch.y))), 0, 1)), (ivec2(ivec4(ivec2(1, int(_GLF_ONE(1.0, injectionSwitch.y))), 0, 1))) << ivec2(0, 0)))), int(ivec2(1, int(_GLF_ONE(1.0, injectionSwitch.y)))), int(ivec2(1, int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, 0.0 + (injectionSwitch.y)))))))))))) % subgroup_size, (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, clamp(subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec4(subgroup_local_id, 0u, 0u, 0u), max(uvec4(subgroup_local_id, 0u, 0u, 0u), uvec4(subgroup_local_id, 0u, 0u, 0u)))), (uint(_GLF_IDENTITY(uvec4(subgroup_local_id, 0u, 0u, 0u), max(_GLF_IDENTITY(uvec4(subgroup_local_id, 0u, 0u, 0u), max(_GLF_IDENTITY(uvec4(subgroup_local_id, 0u, 0u, 0u), (uvec4(subgroup_local_id, 0u, 0u, 0u)) << uvec4(0u, 0u, 0u, 0u)), uvec4(subgroup_local_id, 0u, 0u, 0u))), uvec4(subgroup_local_id, 0u, 0u, 0u))))) << 0u)), subgroup_local_id)) + _GLF_IDENTITY(1, _GLF_IDENTITY(int(ivec2(1, int(_GLF_ONE(1.0, injectionSwitch.y)))), clamp(int(ivec2(1, int(_GLF_ONE(1.0, injectionSwitch.y)))), int(ivec2(1, int(_GLF_ONE(1.0, injectionSwitch.y)))), _GLF_IDENTITY(int(ivec2(1, int(_GLF_ONE(1.0, injectionSwitch.y)))), ~ (~ (_GLF_IDENTITY(int(ivec2(1, int(_GLF_ONE(1.0, injectionSwitch.y)))), max(int(ivec2(1, int(_GLF_ONE(1.0, injectionSwitch.y)))), int(ivec2(1, int(_GLF_ONE(1.0, injectionSwitch.y))))))))))))) % subgroup_size, clamp((_GLF_IDENTITY(subgroup_local_id, clamp(subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec4(subgroup_local_id, 0u, 0u, 0u), max(uvec4(subgroup_local_id, 0u, 0u, 0u), uvec4(subgroup_local_id, 0u, 0u, 0u)))), (uint(_GLF_IDENTITY(uvec4(subgroup_local_id, 0u, 0u, 0u), max(uvec4(subgroup_local_id, 0u, 0u, 0u), uvec4(subgroup_local_id, 0u, 0u, 0u))))) << 0u)), subgroup_local_id)) + _GLF_IDENTITY(1, _GLF_IDENTITY(int(ivec2(1, int(_GLF_ONE(1.0, injectionSwitch.y)))), clamp(int(ivec2(_GLF_IDENTITY(1, (false ? _GLF_FUZZED(91846) : 1)), int(_GLF_ONE(1.0, injectionSwitch.y)))), int(ivec2(1, int(_GLF_ONE(1.0, injectionSwitch.y)))), int(ivec2(1, int(_GLF_ONE(1.0, injectionSwitch.y)))))))) % subgroup_size, _GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, clamp(subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec4(subgroup_local_id, 0u, 0u, 0u), max(uvec4(subgroup_local_id, 0u, 0u, _GLF_IDENTITY(0u, (0u) >> 0u)), uvec4(subgroup_local_id, 0u, 0u, 0u)))), (uint(_GLF_IDENTITY(uvec4(subgroup_local_id, 0u, 0u, 0u), max(uvec4(subgroup_local_id, 0u, 0u, _GLF_IDENTITY(0u, clamp(0u, 0u, _GLF_IDENTITY(0u, uint(uint(0u)))))), uvec4(subgroup_local_id, 0u, 0u, 0u))))) << 0u)), subgroup_local_id)) + _GLF_IDENTITY(1, _GLF_IDENTITY(int(ivec2(1, int(_GLF_ONE(1.0, injectionSwitch.y)))), clamp(int(ivec2(1, int(_GLF_ONE(1.0, injectionSwitch.y)))), int(ivec2(1, int(_GLF_ONE(1.0, injectionSwitch.y)))), int(_GLF_IDENTITY(ivec2(_GLF_IDENTITY(1, min(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, 0 ^ (1))) << 0), 1)), int(_GLF_ONE(1.0, injectionSwitch.y))), ~ (~ (_GLF_IDENTITY(ivec2(_GLF_IDENTITY(1, min(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, 0 ^ (1))) << 0), 1)), int(_GLF_ONE(1.0, injectionSwitch.y))), max(_GLF_IDENTITY(ivec2(_GLF_IDENTITY(1, min(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, 0 ^ (1))) << 0), 1)), int(_GLF_ONE(1.0, injectionSwitch.y))), ~ (~ (ivec2(_GLF_IDENTITY(1, min(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, 0 ^ (1))) << 0), 1)), int(_GLF_ONE(1.0, injectionSwitch.y)))))), _GLF_IDENTITY(ivec2(_GLF_IDENTITY(1, min(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, 0 ^ (1))) << 0), 1)), int(_GLF_ONE(1.0, injectionSwitch.y))), max(ivec2(_GLF_IDENTITY(1, min(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, 0 ^ (1))) << 0), 1)), int(_GLF_ONE(1.0, injectionSwitch.y))), ivec2(_GLF_IDENTITY(1, min(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, 0 ^ (1))) << 0), 1)), int(_GLF_ONE(1.0, injectionSwitch.y))))))))))))))) % subgroup_size, _GLF_IDENTITY(min((_GLF_IDENTITY(subgroup_local_id, clamp(subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec4(subgroup_local_id, 0u, 0u, 0u), max(uvec4(subgroup_local_id, 0u, 0u, 0u), uvec4(subgroup_local_id, 0u, 0u, 0u)))), (uint(_GLF_IDENTITY(uvec4(subgroup_local_id, 0u, 0u, 0u), max(uvec4(subgroup_local_id, 0u, 0u, 0u), uvec4(subgroup_local_id, 0u, 0u, 0u))))) << 0u)), subgroup_local_id)) + _GLF_IDENTITY(1, _GLF_IDENTITY(int(ivec2(1, int(_GLF_ONE(1.0, injectionSwitch.y)))), clamp(int(ivec2(1, int(_GLF_ONE(1.0, injectionSwitch.y)))), int(ivec2(1, int(_GLF_ONE(1.0, injectionSwitch.y)))), int(ivec2(1, int(_GLF_ONE(1.0, injectionSwitch.y)))))))) % subgroup_size, (_GLF_IDENTITY(subgroup_local_id, clamp(subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec4(subgroup_local_id, 0u, 0u, 0u), max(uvec4(subgroup_local_id, 0u, 0u, 0u), uvec4(subgroup_local_id, 0u, 0u, 0u)))), (uint(_GLF_IDENTITY(uvec4(subgroup_local_id, 0u, 0u, 0u), max(uvec4(subgroup_local_id, 0u, 0u, 0u), uvec4(subgroup_local_id, 0u, 0u, 0u))))) << 0u)), subgroup_local_id)) + _GLF_IDENTITY(1, _GLF_IDENTITY(int(ivec2(1, int(_GLF_ONE(1.0, injectionSwitch.y)))), clamp(int(ivec2(1, int(_GLF_ONE(1.0, injectionSwitch.y)))), int(ivec2(1, int(_GLF_ONE(1.0, injectionSwitch.y)))), int(ivec2(1, int(_GLF_ONE(1.0, injectionSwitch.y)))))))) % subgroup_size), (true ? min((_GLF_IDENTITY(subgroup_local_id, clamp(subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(uvec4(subgroup_local_id, 0u, 0u, 0u), max(uvec4(subgroup_local_id, 0u, 0u, 0u), uvec4(subgroup_local_id, 0u, 0u, 0u)))), (uint(_GLF_IDENTITY(uvec4(subgroup_local_id, 0u, 0u, 0u), max(uvec4(subgroup_local_id, 0u, 0u, 0u), uvec4(subgroup_local_id, 0u, 0u, 0u))))) | (uint(_GLF_IDENTITY(uvec4(subgroup_local_id, 0u, 0u, 0u), max(uvec4(subgroup_local_id, 0u, 0u, 0u), uvec4(subgroup_local_id, 0u, 0u, 0u)))))), (uint(_GLF_IDENTITY(_GLF_IDENTITY(uvec4(subgroup_local_id, 0u, 0u, 0u), max(uvec4(subgroup_local_id, 0u, 0u, 0u), uvec4(subgroup_local_id, 0u, 0u, 0u))), (false ? _GLF_FUZZED(uvec4(51260u, 162926u, 11238u, 36867u)) : _GLF_IDENTITY(_GLF_IDENTITY(uvec4(subgroup_local_id, 0u, 0u, 0u), max(uvec4(subgroup_local_id, 0u, 0u, 0u), uvec4(subgroup_local_id, 0u, 0u, 0u))), (_GLF_IDENTITY(uvec4(subgroup_local_id, 0u, 0u, 0u), max(uvec4(subgroup_local_id, 0u, 0u, 0u), uvec4(subgroup_local_id, 0u, 0u, 0u)))) << uvec4(0u, 0u, 0u, 0u)))))) << 0u)), subgroup_local_id)) + _GLF_IDENTITY(1, _GLF_IDENTITY(int(ivec2(1, int(_GLF_ONE(1.0, injectionSwitch.y)))), clamp(int(ivec2(1, int(_GLF_ONE(1.0, injectionSwitch.y)))), int(ivec2(1, int(_GLF_ONE(1.0, injectionSwitch.y)))), int(ivec2(1, int(_GLF_ONE(1.0, injectionSwitch.y)))))))) % subgroup_size, (_GLF_IDENTITY(subgroup_local_id, clamp(subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec4(subgroup_local_id, 0u, 0u, 0u), max(uvec4(subgroup_local_id, _GLF_IDENTITY(0u, ~ (~ (0u))), 0u, 0u), uvec4(subgroup_local_id, 0u, 0u, 0u)))), (uint(_GLF_IDENTITY(uvec4(subgroup_local_id, 0u, 0u, 0u), max(uvec4(subgroup_local_id, 0u, 0u, 0u), uvec4(subgroup_local_id, 0u, 0u, 0u))))) << 0u)), subgroup_local_id)) + _GLF_IDENTITY(1, _GLF_IDENTITY(int(ivec2(1, int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(asin(67.13)) : injectionSwitch.y)))))), clamp(int(ivec2(1, _GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), 0 | (int(_GLF_ONE(1.0, injectionSwitch.y)))))), int(ivec2(1, int(_GLF_ONE(1.0, injectionSwitch.y)))), int(ivec2(1, int(_GLF_ONE(1.0, injectionSwitch.y)))))))) % subgroup_size) : _GLF_FUZZED((uvec3(165953u, 125668u, 157949u)[1] << num_workgroup))))), _GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, clamp(subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec4(subgroup_local_id, 0u, 0u, 0u), max(uvec4(subgroup_local_id, 0u, 0u, 0u), uvec4(subgroup_local_id, 0u, 0u, 0u)))), (uint(_GLF_IDENTITY(uvec4(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) << 0u), 0u, 0u, 0u), max(uvec4(subgroup_local_id, _GLF_IDENTITY(0u, _GLF_IDENTITY(uint(uvec2(_GLF_IDENTITY(0u, clamp(0u, 0u, 0u)), 1u)), clamp(_GLF_IDENTITY(uint(uvec2(_GLF_IDENTITY(0u, clamp(0u, 0u, 0u)), 1u)), (true ? uint(uvec2(_GLF_IDENTITY(0u, clamp(0u, 0u, 0u)), 1u)) : _GLF_FUZZED(virtual_gid))), uint(uvec2(_GLF_IDENTITY(0u, clamp(0u, 0u, 0u)), 1u)), _GLF_IDENTITY(uint(uvec2(_GLF_IDENTITY(0u, clamp(0u, 0u, 0u)), 1u)), (uint(uvec2(_GLF_IDENTITY(0u, clamp(0u, 0u, 0u)), 1u))) | 0u)))), 0u, 0u), uvec4(subgroup_local_id, 0u, 0u, 0u))))) << 0u)), subgroup_local_id)) + _GLF_IDENTITY(1, _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(ivec2(1, int(_GLF_ONE(1.0, injectionSwitch.y))), (ivec2(0, 0) & ivec2(-1351, -9677)) | (_GLF_IDENTITY(ivec2(1, int(_GLF_ONE(1.0, injectionSwitch.y))), ivec2(0, 0) + (ivec2(1, int(_GLF_ONE(1.0, injectionSwitch.y)))))))), min(int(_GLF_IDENTITY(ivec2(1, int(_GLF_ONE(1.0, injectionSwitch.y))), (ivec2(0, 0) & ivec2(-1351, -9677)) | (_GLF_IDENTITY(ivec2(1, int(_GLF_ONE(1.0, injectionSwitch.y))), ivec2(0, 0) + (ivec2(1, int(_GLF_ONE(1.0, injectionSwitch.y)))))))), int(_GLF_IDENTITY(ivec2(1, int(_GLF_ONE(1.0, injectionSwitch.y))), (ivec2(0, 0) & ivec2(-1351, -9677)) | (_GLF_IDENTITY(ivec2(1, int(_GLF_ONE(1.0, injectionSwitch.y))), ivec2(0, 0) + (ivec2(1, int(_GLF_ONE(1.0, injectionSwitch.y)))))))))), clamp(int(ivec2(1, int(_GLF_ONE(1.0, injectionSwitch.y)))), int(ivec2(1, int(_GLF_ONE(_GLF_IDENTITY(1.0, float(mat3(1.0, 0.0, 0.0, 1.0, 1.0, 0.0, sin(0.0), 1.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), (true ? dot(vec2(1.0, 0.0), vec2(1.0, 0.0)) : _GLF_FUZZED(-85.94))))))), injectionSwitch.y)))), int(ivec2(1, int(_GLF_ONE(1.0, injectionSwitch.y)))))))) % subgroup_size, min((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | (subgroup_local_id)), clamp(subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec4(subgroup_local_id, 0u, 0u, 0u), max(uvec4(subgroup_local_id, 0u, _GLF_IDENTITY(0u, clamp(_GLF_IDENTITY(0u, (0u) / 1u), _GLF_IDENTITY(0u, clamp(0u, 0u, _GLF_IDENTITY(0u, max(0u, 0u)))), 0u)), 0u), uvec4(subgroup_local_id, 0u, 0u, 0u)))), (uint(_GLF_IDENTITY(uvec4(subgroup_local_id, 0u, 0u, 0u), max(uvec4(_GLF_IDENTITY(subgroup_local_id, clamp(subgroup_local_id, subgroup_local_id, subgroup_local_id)), 0u, 0u, 0u), uvec4(subgroup_local_id, 0u, 0u, 0u))))) << 0u)), subgroup_local_id)) + _GLF_IDENTITY(1, _GLF_IDENTITY(int(ivec2(1, int(_GLF_ONE(_GLF_IDENTITY(1.0, 1.0 * (_GLF_IDENTITY(1.0, (1.0) + 0.0))), injectionSwitch.y)))), clamp(int(ivec2(1, int(_GLF_ONE(1.0, injectionSwitch.y)))), int(ivec2(1, int(_GLF_ONE(1.0, injectionSwitch.y)))), int(ivec2(1, int(_GLF_ONE(1.0, injectionSwitch.y)))))))) % subgroup_size, (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, clamp(subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec4(subgroup_local_id, 0u, 0u, 0u), max(uvec4(subgroup_local_id, 0u, 0u, 0u), uvec4(subgroup_local_id, 0u, 0u, 0u)))), (uint(_GLF_IDENTITY(uvec4(subgroup_local_id, 0u, 0u, 0u), max(uvec4(subgroup_local_id, 0u, 0u, 0u), uvec4(subgroup_local_id, 0u, 0u, 0u))))) << 0u)), subgroup_local_id)) + _GLF_IDENTITY(1, _GLF_IDENTITY(int(ivec2(1, int(_GLF_ONE(1.0, injectionSwitch.y)))), clamp(int(ivec2(1, int(_GLF_ONE(1.0, injectionSwitch.y)))), int(ivec2(1, int(_GLF_ONE(1.0, injectionSwitch.y)))), int(ivec2(1, int(_GLF_ONE(1.0, injectionSwitch.y))))))), (true ? _GLF_IDENTITY(subgroup_local_id, clamp(subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec4(subgroup_local_id, 0u, 0u, _GLF_IDENTITY(0u, clamp(0u, 0u, _GLF_IDENTITY(0u, 1u * (_GLF_IDENTITY(0u, uint(uvec3(0u, 1u, 0u)))))))), max(uvec4(subgroup_local_id, 0u, 0u, 0u), uvec4(subgroup_local_id, 0u, 0u, 0u)))), _GLF_IDENTITY((uint(_GLF_IDENTITY(_GLF_IDENTITY(uvec4(subgroup_local_id, 0u, 0u, 0u), max(uvec4(subgroup_local_id, 0u, 0u, 0u), uvec4(subgroup_local_id, 0u, 0u, 0u))), (_GLF_IDENTITY(uvec4(subgroup_local_id, 0u, 0u, 0u), max(uvec4(subgroup_local_id, 0u, 0u, 0u), uvec4(subgroup_local_id, 0u, 0u, 0u)))) ^ uvec4(0u, 0u, 0u, 0u)))), (false ? _GLF_FUZZED(60522u) : (uint(_GLF_IDENTITY(_GLF_IDENTITY(uvec4(subgroup_local_id, 0u, 0u, 0u), max(uvec4(subgroup_local_id, 0u, 0u, 0u), uvec4(subgroup_local_id, 0u, 0u, 0u))), (_GLF_IDENTITY(uvec4(subgroup_local_id, 0u, 0u, 0u), max(uvec4(subgroup_local_id, 0u, 0u, 0u), uvec4(subgroup_local_id, 0u, 0u, 0u)))) ^ uvec4(0u, 0u, 0u, 0u)))))) << 0u)), subgroup_local_id)) + _GLF_IDENTITY(1, _GLF_IDENTITY(int(ivec2(1, int(_GLF_ONE(1.0, injectionSwitch.y)))), clamp(int(ivec2(1, int(_GLF_ONE(1.0, injectionSwitch.y)))), int(ivec2(1, int(_GLF_ONE(1.0, injectionSwitch.y)))), int(ivec2(1, int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).y))))))) : _GLF_FUZZED(subgroup_size)))) % subgroup_size)))), ((_GLF_IDENTITY(subgroup_local_id, clamp(subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec4(subgroup_local_id, 0u, 0u, 0u), max(uvec4(subgroup_local_id, 0u, _GLF_IDENTITY(0u, clamp(_GLF_IDENTITY(0u, ~ (~ (0u))), 0u, _GLF_IDENTITY(0u, (0u) / 1u))), 0u), uvec4(subgroup_local_id, 0u, 0u, 0u)))), (uint(_GLF_IDENTITY(uvec4(subgroup_local_id, 0u, 0u, 0u), max(uvec4(subgroup_local_id, 0u, 0u, _GLF_IDENTITY(0u, 0u + (0u))), _GLF_IDENTITY(uvec4(subgroup_local_id, 0u, 0u, 0u), (_GLF_IDENTITY(uvec4(subgroup_local_id, 0u, 0u, 0u), uvec4(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)) ^ (uvec4(subgroup_local_id, 0u, 0u, 0u)))) >> uvec4(0u, 0u, 0u, 0u)))))) << 0u)), subgroup_local_id)) + _GLF_IDENTITY(1, _GLF_IDENTITY(int(ivec2(1, int(_GLF_ONE(1.0, injectionSwitch.y)))), clamp(int(ivec2(1, _GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), clamp(int(_GLF_ONE(1.0, injectionSwitch.y)), _GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), (int(_GLF_ONE(1.0, injectionSwitch.y))) | (int(_GLF_ONE(1.0, injectionSwitch.y)))), int(_GLF_ONE(1.0, injectionSwitch.y)))))), int(ivec2(1, int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0), injectionSwitch.y)), _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)))))))), int(_GLF_IDENTITY(ivec2(1, _GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), clamp(int(_GLF_ONE(1.0, injectionSwitch.y)), int(_GLF_ONE(1.0, injectionSwitch.y)), _GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), int(ivec2(int(_GLF_ONE(1.0, injectionSwitch.y)), 0)))))), (ivec2(1, _GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), clamp(int(_GLF_ONE(1.0, injectionSwitch.y)), int(_GLF_ONE(1.0, injectionSwitch.y)), _GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), int(ivec2(int(_GLF_ONE(1.0, injectionSwitch.y)), 0))))))) ^ ivec2(0, 0))))))) % subgroup_size) / 1u)) >> 0u), 0u | ((_GLF_IDENTITY(subgroup_local_id + _GLF_IDENTITY(1, _GLF_IDENTITY(int(ivec2(1, int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).y)))), clamp(int(ivec2(1, int(_GLF_ONE(1.0, injectionSwitch.y)))), int(ivec2(1, int(_GLF_ONE(1.0, injectionSwitch.y)))), int(ivec2(_GLF_IDENTITY(1, (1) >> (0 | 0)), int(_GLF_ONE(1.0, injectionSwitch.y))))))), (subgroup_local_id + _GLF_IDENTITY(1, _GLF_IDENTITY(int(ivec2(1, int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).y)))), clamp(int(ivec2(1, int(_GLF_ONE(1.0, injectionSwitch.y)))), int(ivec2(1, int(_GLF_ONE(1.0, injectionSwitch.y)))), int(ivec2(_GLF_IDENTITY(1, (1) >> (0 | 0)), int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)))))))))) << 0u)) % subgroup_size)))))));
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (false)), bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY((! (false)), (_GLF_IDENTITY((! (false)), ((! (false))) || false)) && true), false || _GLF_IDENTITY(((! (_GLF_IDENTITY(false, (false) || false)))), (((! (_GLF_IDENTITY(false, (false) || false))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), _GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(false, (false) || false), true, false)), true && (bool(bvec3(_GLF_IDENTITY(false, (false) || false), true, false))))))))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(-90.35)))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), true, false, false))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(384.594)))))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false))
            barrier();
          }
         else
          {
          }
         if(_GLF_DEAD(false))
          barrier();
        }
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
    }
   else
    {
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)), true && (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)), (_GLF_DEAD(_GLF_IDENTITY(false, (false) && true))) && true))))
      barrier();
     atomicStore(buf[_GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, ~ (~ (virtual_gid))), (_GLF_IDENTITY(virtual_gid, ~ (~ (virtual_gid)))) - 0u)], uint(1), 4, 64, 4);
     if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, true, true)), ! (! (bool(bvec3(false, true, true))))))) || false)))
      barrier();
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(0, (0) >> 0)); _injected_loop_counter --)
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), true)))) || false))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY((_GLF_DEAD(false)) || false, ! (_GLF_IDENTITY(! ((_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_DEAD(false), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))) || false), ! (! (_GLF_IDENTITY(! ((_GLF_DEAD(false)) || false), _GLF_IDENTITY(false, ! (! (false))) || (! _GLF_IDENTITY(((_GLF_DEAD(false)) || false), (((_GLF_DEAD(false)) || false)) || false))))))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, true, false, false)), (bool(bvec4(false, true, false, false))) || false))))
      barrier();
    }
  }
 if(subgroup_local_id + 1 < subgroup_size)
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bvec4(false, _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec3(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))), true, true))))), false, false)))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(7.6)))))).y))))
      barrier();
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
     atomicStore(buf[next_virtual_gid], uint(2), _GLF_IDENTITY(4, _GLF_IDENTITY(clamp(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(4, ~ (~ (4))), int(int(_GLF_IDENTITY(4, _GLF_IDENTITY(_GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(-77850))), (0) / 1) + _GLF_IDENTITY((4), ((4)) | _GLF_IDENTITY(0, clamp(_GLF_IDENTITY(0, 0 ^ (0)), 0, 0))))))), 0 ^ (4)), _GLF_IDENTITY(_GLF_IDENTITY(4, (4) >> 0), _GLF_IDENTITY(max(4, 4), (max(4, _GLF_IDENTITY(4, (_GLF_IDENTITY(4, clamp(4, 4, 4))) >> 0))) | (_GLF_IDENTITY(max(4, 4), clamp(max(4, 4), max(4, 4), max(4, _GLF_IDENTITY(4, min(4, 4)))))))), _GLF_IDENTITY(4, ~ (~ _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(4, (4) | 0), (_GLF_IDENTITY(4, (4) | 0)) ^ 0)), ((_GLF_IDENTITY(4, _GLF_IDENTITY((4) | 0, int(_GLF_IDENTITY(int((4) | 0), clamp(int((4) | 0), int((4) | 0), int((4) | 0)))))))) >> int(_GLF_ZERO(_GLF_IDENTITY(0.0, float(mat4x3(0.0, _GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(1.0, clamp(1.0, 1.0, _GLF_IDENTITY(1.0, float(mat4x3(1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, determinant(mat4(1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0)), 1.0, exp(0.0), 1.0, 1.0))))), sqrt(_GLF_IDENTITY(1.0, float(mat4(1.0, _GLF_IDENTITY(sin(0.0), max(sin(0.0), sin(0.0))), sqrt(0.0), _GLF_IDENTITY(dot(_GLF_IDENTITY(vec2(0.0, 1.0), (vec2(0.0, 1.0)) * mat2(1.0)), vec2(0.0, 1.0)), dot(vec2(0.0, 1.0), vec2(0.0, 1.0))), 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0)))), _GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0, 1.0, _GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat4x3(1.0, 0.0, 1.0, sin(0.0), _GLF_IDENTITY(1.0, min(1.0, 1.0)), 1.0, 1.0, 1.0, 1.0, _GLF_IDENTITY(dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(1.0, 1.0, 1.0, 0.0)), dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(_GLF_IDENTITY(1.0, 0.0 + (1.0)), 1.0, 1.0, 0.0))), 1.0, abs(1.0))), min(float(mat4x3(1.0, 0.0, 1.0, sin(0.0), 1.0, 1.0, 1.0, 1.0, 1.0, _GLF_IDENTITY(dot(vec4(0.0, 0.0, 0.0, 1.0), _GLF_IDENTITY(vec4(1.0, _GLF_IDENTITY(1.0, (true ? _GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-756.977)), bool(false))) : _GLF_FUZZED(-8934.2517))), 1.0, 0.0), (true ? vec4(1.0, _GLF_IDENTITY(1.0, (true ? _GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-756.977)), bool(false))) : _GLF_FUZZED(-8934.2517))), 1.0, 0.0) : _GLF_FUZZED(vec4(-34.36, -860.942, 85.14, -0.2))))), dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(1.0, _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(3638.3735)), float(1.0), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), 1.0, 0.0))), 1.0, abs(1.0))), float(mat4x3(1.0, 0.0, 1.0, sin(0.0), 1.0, 1.0, 1.0, 1.0, 1.0, _GLF_IDENTITY(_GLF_IDENTITY(dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(1.0, 1.0, 1.0, 0.0)), dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(1.0, 1.0, 1.0, 0.0))), (_GLF_IDENTITY(dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(1.0, 1.0, _GLF_IDENTITY(1.0, max(1.0, 1.0)), 0.0)), dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(1.0, 1.0, 1.0, 0.0)))) / round(length(normalize(1.0)))), 1.0, abs(1.0)))))), abs(0.0), tan(0.0), 0.0))), injectionSwitch.x)))))), (clamp(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(4, ~ (~ (4))), int(int(_GLF_IDENTITY(4, _GLF_IDENTITY(_GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(-77850))), (0) / 1) + _GLF_IDENTITY((4), ((4)) | _GLF_IDENTITY(0, clamp(_GLF_IDENTITY(0, 0 ^ (0)), 0, 0))))))), 0 ^ (4)), _GLF_IDENTITY(_GLF_IDENTITY(4, (4) >> 0), _GLF_IDENTITY(max(4, 4), (max(4, _GLF_IDENTITY(4, (_GLF_IDENTITY(4, clamp(4, 4, 4))) >> 0))) | (_GLF_IDENTITY(max(4, 4), clamp(max(4, 4), max(4, 4), max(4, _GLF_IDENTITY(4, min(4, 4)))))))), _GLF_IDENTITY(4, ~ (~ _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(4, (4) | 0), (_GLF_IDENTITY(4, (4) | 0)) ^ 0)), ((_GLF_IDENTITY(4, _GLF_IDENTITY((4) | 0, int(_GLF_IDENTITY(int((4) | 0), clamp(int((4) | 0), int((4) | 0), int((4) | 0)))))))) >> int(_GLF_ZERO(_GLF_IDENTITY(0.0, float(mat4x3(0.0, _GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(1.0, clamp(1.0, 1.0, _GLF_IDENTITY(1.0, float(mat4x3(1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, determinant(mat4(1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0)), 1.0, exp(0.0), 1.0, 1.0))))), sqrt(_GLF_IDENTITY(1.0, float(mat4(1.0, _GLF_IDENTITY(sin(0.0), max(sin(0.0), sin(0.0))), sqrt(0.0), _GLF_IDENTITY(dot(_GLF_IDENTITY(vec2(0.0, 1.0), (vec2(0.0, 1.0)) * mat2(1.0)), vec2(0.0, 1.0)), dot(vec2(0.0, 1.0), vec2(0.0, 1.0))), 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0)))), _GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0, 1.0, _GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat4x3(1.0, 0.0, 1.0, sin(0.0), _GLF_IDENTITY(1.0, min(1.0, 1.0)), 1.0, 1.0, 1.0, 1.0, _GLF_IDENTITY(dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(1.0, 1.0, 1.0, 0.0)), dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(_GLF_IDENTITY(1.0, 0.0 + (1.0)), 1.0, 1.0, 0.0))), 1.0, abs(1.0))), min(float(mat4x3(1.0, 0.0, 1.0, sin(0.0), 1.0, 1.0, 1.0, 1.0, 1.0, _GLF_IDENTITY(dot(vec4(0.0, 0.0, 0.0, 1.0), _GLF_IDENTITY(vec4(1.0, _GLF_IDENTITY(1.0, (true ? _GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-756.977)), bool(false))) : _GLF_FUZZED(-8934.2517))), 1.0, 0.0), (true ? vec4(1.0, _GLF_IDENTITY(1.0, (true ? _GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-756.977)), bool(false))) : _GLF_FUZZED(-8934.2517))), 1.0, 0.0) : _GLF_FUZZED(vec4(-34.36, -860.942, 85.14, -0.2))))), dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(1.0, _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(3638.3735)), float(1.0), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), 1.0, 0.0))), 1.0, abs(1.0))), float(mat4x3(1.0, 0.0, 1.0, sin(0.0), 1.0, 1.0, 1.0, 1.0, 1.0, _GLF_IDENTITY(_GLF_IDENTITY(dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(1.0, 1.0, 1.0, 0.0)), dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(1.0, 1.0, 1.0, 0.0))), (_GLF_IDENTITY(dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(1.0, 1.0, _GLF_IDENTITY(1.0, max(1.0, 1.0)), 0.0)), dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(1.0, 1.0, 1.0, 0.0)))) / round(length(normalize(1.0)))), 1.0, abs(1.0)))))), abs(0.0), tan(0.0), 0.0))), injectionSwitch.x))))))) ^ 0)), 64, 4);
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(_GLF_IDENTITY(vec2(_GLF_FUZZED(-7921.5418), (injectionSwitch)[1]), vec2(vec4(_GLF_IDENTITY(vec2(_GLF_FUZZED(-7921.5418), (injectionSwitch)[1]), vec2(vec4(vec2(_GLF_FUZZED(-7921.5418), (injectionSwitch)[1]), 1.0, 0.0))), 0.0, 0.0))), vec2((_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))[0], _GLF_FUZZED(_GLF_IDENTITY(-90.77, max(-90.77, -90.77)))), bvec2(true, false))).y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, min(_injected_loop_counter, _injected_loop_counter)) != 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      {
       do
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), (mat2(1.0) * (injectionSwitch)) + vec2(0.0, 0.0))).y), ! _GLF_IDENTITY((! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(bvec4((injectionSwitch.x > injectionSwitch.y), false, true, true)), ! (! (bool(bvec4((injectionSwitch.x > injectionSwitch.y), false, true, true)))))))), ((! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(bvec4((injectionSwitch.x > injectionSwitch.y), false, true, true)), ! (! (bool(bvec4((injectionSwitch.x > injectionSwitch.y), false, true, true))))))))) && true)))))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            {
             if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false))
              barrier();
             barrier();
            }
           barrier();
          }
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(-3.3)), vec2(_GLF_FUZZED(float(97250)), (injectionSwitch)[_GLF_IDENTITY(1, (false ? _GLF_FUZZED(bitCount(subgroup_id)) : 1))]), bvec2(false, true))).y)), _GLF_IDENTITY((_GLF_FALSE(false, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), bool(bvec3(! ((injectionSwitch.x > injectionSwitch.y)), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), ! (! (! ((injectionSwitch.x > injectionSwitch.y))))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), bool(bvec3(! ((injectionSwitch.x > injectionSwitch.y)), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), ! (! (! _GLF_IDENTITY(((injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_IDENTITY(((injectionSwitch.x > injectionSwitch.y)), bool(bvec3(((injectionSwitch.x > injectionSwitch.y)), true, true))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true)))))))))))), ((_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), bool(bvec3(! ((injectionSwitch.x > injectionSwitch.y)), false, _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)))), _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], (injectionSwitch[1]) * 1.0))))).y))))), ! (! (! ((injectionSwitch.x > injectionSwitch.y)))))))))) || false) || false)));
      }
    }
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false)))))), (false) && true)))
    barrier();
   do
    {
     subgroupAll(false);
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 else
  {
   atomicStore(buf[_GLF_IDENTITY(next_virtual_gid, _GLF_IDENTITY(clamp(_GLF_IDENTITY(next_virtual_gid, _GLF_IDENTITY((next_virtual_gid) / 1u, (false ? _GLF_FUZZED(_GLF_IDENTITY(next_virtual_gid, 0u | (next_virtual_gid))) : (next_virtual_gid) / _GLF_IDENTITY(_GLF_IDENTITY(1u, ~ (~ (1u))), uint(uint(1u)))))), next_virtual_gid, _GLF_IDENTITY(_GLF_IDENTITY(next_virtual_gid, 1u * _GLF_IDENTITY((next_virtual_gid), ((next_virtual_gid)) ^ 0u)), _GLF_IDENTITY(_GLF_IDENTITY(clamp(next_virtual_gid, next_virtual_gid, next_virtual_gid), (clamp(next_virtual_gid, next_virtual_gid, next_virtual_gid)) | (_GLF_IDENTITY(clamp(next_virtual_gid, next_virtual_gid, next_virtual_gid), ~ (~ (clamp(next_virtual_gid, next_virtual_gid, next_virtual_gid)))))), ((1u << _GLF_IDENTITY(uint(1u), uint(1u))) >> _GLF_IDENTITY(uint(1u), uint(1u))) * (_GLF_IDENTITY(clamp(next_virtual_gid, next_virtual_gid, next_virtual_gid), (clamp(next_virtual_gid, next_virtual_gid, _GLF_IDENTITY(next_virtual_gid, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(atomicAdd(next_virtual_gid, 140780u)) : next_virtual_gid)))) | (_GLF_IDENTITY(clamp(next_virtual_gid, next_virtual_gid, next_virtual_gid), ~ (~ (clamp(next_virtual_gid, next_virtual_gid, next_virtual_gid)))))))))), (clamp(_GLF_IDENTITY(_GLF_IDENTITY(next_virtual_gid, (next_virtual_gid) << 0u), _GLF_IDENTITY((next_virtual_gid) / 1u, (false ? _GLF_FUZZED(next_virtual_gid) : (next_virtual_gid) / _GLF_IDENTITY(1u, uint(uint(1u)))))), next_virtual_gid, _GLF_IDENTITY(next_virtual_gid, clamp(_GLF_IDENTITY(next_virtual_gid, (true ? _GLF_IDENTITY(next_virtual_gid, min(next_virtual_gid, next_virtual_gid)) : _GLF_FUZZED(packHalf2x16(injectionSwitch)))), next_virtual_gid, next_virtual_gid)))) << 0u))], _GLF_IDENTITY(uint(2), 0u ^ (uint(_GLF_IDENTITY(2, (2) | (2))))), 4, 64, 4);
   if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), injectionSwitch, injectionSwitch)).x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).y))))
      barrier();
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) + 0), ~ (~ (_injected_loop_counter))), (_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) + 0), ~ (~ (_GLF_IDENTITY(_injected_loop_counter, min(_injected_loop_counter, _injected_loop_counter)))))) / 1), max(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, _GLF_IDENTITY(~ (~ (_injected_loop_counter)), max(~ (~ (_injected_loop_counter)), ~ (~ (_injected_loop_counter))))), clamp(_GLF_IDENTITY(_injected_loop_counter, ~ (~ (_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) | 0)))), _GLF_IDENTITY(_injected_loop_counter, ~ (~ (_injected_loop_counter))), _GLF_IDENTITY(_injected_loop_counter, ~ _GLF_IDENTITY((~ (_GLF_IDENTITY(_injected_loop_counter, clamp(_injected_loop_counter, _GLF_IDENTITY(_injected_loop_counter, 0 ^ (_injected_loop_counter)), _GLF_IDENTITY(_injected_loop_counter, clamp(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) << 0), _injected_loop_counter, _injected_loop_counter)))))), ((~ (_GLF_IDENTITY(_injected_loop_counter, clamp(_injected_loop_counter, _GLF_IDENTITY(_injected_loop_counter, 0 ^ (_injected_loop_counter)), _GLF_IDENTITY(_injected_loop_counter, clamp(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) << 0), _injected_loop_counter, _injected_loop_counter))))))) * 1)))), _GLF_IDENTITY(_injected_loop_counter, ~ (~ (_injected_loop_counter))))) != 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
   subgroupAll(true);
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-3.0) : injectionSwitch.y)), clamp(_GLF_IDENTITY(injectionSwitch.y, 1.0 * (injectionSwitch.y)), injectionSwitch.y, injectionSwitch.y))))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false), bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(bvec3(_GLF_DEAD(false), false, true), bvec3(bvec4(bvec3(_GLF_DEAD(false), false, true), true)))))) || false), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))), (_GLF_DEAD(false)) || _GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false))), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false)))), true), bvec2(bvec3(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false), (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false)) || false)))), true), true)))))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     do
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
        barrier();
       barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
         else
          {
          }
        }
      }
     while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, false || (false))), (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, false || (false)))) && true));
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), max(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))))); _injected_loop_counter --)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_IDENTITY(_GLF_FUZZED(-8.3), min(_GLF_IDENTITY(_GLF_FUZZED(-8.3), mix(float(_GLF_FUZZED(-0.5)), float(_GLF_FUZZED(-8.3)), bool(true))), _GLF_FUZZED(-8.3)))), float(injectionSwitch.y), bool(true))), injectionSwitch.y))), ((injectionSwitch.x > injectionSwitch.y)) || false))))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = int(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), clamp(_GLF_ONE(_GLF_IDENTITY(1.0, min(1.0, 1.0)), injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y)))); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((_GLF_IDENTITY(-78470 & 0, 1 * (_GLF_IDENTITY(-78470 & 0, 0 | (-78470 & 0))))) >> _GLF_IDENTITY(int(8), _GLF_IDENTITY(int(8), 0 | (int(8)))))); _injected_loop_counter --)
      {
       barrier();
      }
    }
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, false, false)), ! (! (bool(bvec3(false, false, false)))))), (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
    }
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
