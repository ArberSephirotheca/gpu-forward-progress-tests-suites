#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    barrier();
   barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_DEAD(false))
  barrier();
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
  barrier();
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), (! (_GLF_DEAD(false))) || false))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 uint workgroup_base = workgroup_size * _GLF_IDENTITY(workgroup_id, min(workgroup_id, _GLF_IDENTITY(workgroup_id, (workgroup_id) | 0u)));
 if(_GLF_DEAD(false))
  barrier();
 uint virtual_gid = workgroup_base + _GLF_IDENTITY(subgroup_id, (_GLF_IDENTITY(subgroup_id, 0u + (subgroup_id))) >> 0u) * subgroup_size + subgroup_local_id;
 if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, (false) || false)))), _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)), ! (! ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true))))))))
  barrier();
 uint next_virtual_gid = _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, 0u ^ (workgroup_base)) + _GLF_IDENTITY(subgroup_id * subgroup_size, max(subgroup_id * subgroup_size, subgroup_id * subgroup_size)) + ((subgroup_local_id + 1) % subgroup_size), (_GLF_IDENTITY(workgroup_base, 0u ^ (workgroup_base)) + _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id * subgroup_size, ~ (~ (subgroup_id * subgroup_size))), max(subgroup_id * subgroup_size, subgroup_id * subgroup_size)) + ((subgroup_local_id + 1) % subgroup_size)) / 1u);
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 atomicStore(buf[virtual_gid], uint(1), 4, 64, 4);
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(subgroup_local_id + 1 < _GLF_IDENTITY(subgroup_size, (subgroup_size) + 0u))
  {
   if(_GLF_DEAD(false))
    barrier();
   atomicStore(buf[next_virtual_gid], uint(2), 4, 64, 4);
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   subgroupAll(false);
  }
 else
  {
   atomicStore(buf[next_virtual_gid], _GLF_IDENTITY(uint(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(2, _GLF_IDENTITY((2), ((2)) | 0) * 1), clamp(_GLF_IDENTITY(2, (2) * 1), _GLF_IDENTITY(2, (2) * 1), _GLF_IDENTITY(2, (2) * 1))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(2, (2) * 1), (_GLF_IDENTITY(2, (2) * 1)) ^ 0), clamp(_GLF_IDENTITY(_GLF_IDENTITY(2, (2) * 1), min(_GLF_IDENTITY(_GLF_IDENTITY(2, (2) * 1), (_GLF_IDENTITY(2, (2) * 1)) - 0), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(2, (2) * 1), min(_GLF_IDENTITY(2, (2) * 1), _GLF_IDENTITY(2, (2) * 1))), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(2, clamp(2, 2, 2)), (2) * 1)))))), _GLF_IDENTITY(2, (2) * 1), _GLF_IDENTITY(2, (2) * 1)))) | 0)), (_GLF_IDENTITY(uint(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(2, clamp(_GLF_IDENTITY(2, (2) | 0), _GLF_IDENTITY(2, int(int(2))), 2)), (2) * 1), clamp(_GLF_IDENTITY(2, _GLF_IDENTITY((2) * 1, ((2) * 1) - 0)), _GLF_IDENTITY(_GLF_IDENTITY(2, (2) * 1), _GLF_IDENTITY((_GLF_IDENTITY(2, (_GLF_IDENTITY(2, (_GLF_IDENTITY(2, (_GLF_IDENTITY(2, (false ? _GLF_FUZZED(5337) : 2))) - 0)) - 0)) * 1)), (true ? (_GLF_IDENTITY(2, (_GLF_IDENTITY(2, (_GLF_IDENTITY(2, (_GLF_IDENTITY(2, (false ? _GLF_FUZZED(5337) : 2))) - 0)) - 0)) * 1)) : _GLF_FUZZED(-94791))) >> 0), _GLF_IDENTITY(2, (_GLF_IDENTITY(2, _GLF_IDENTITY((2), min((2), _GLF_IDENTITY((2), (true ? (2) : _GLF_FUZZED(-24373))))) << 0)) * 1)))), _GLF_IDENTITY((uint(_GLF_IDENTITY(_GLF_IDENTITY(2, (2) * 1), _GLF_IDENTITY(_GLF_IDENTITY(clamp(_GLF_IDENTITY(2, _GLF_IDENTITY((2), (_GLF_IDENTITY((2), int(int(_GLF_IDENTITY((2), ((2)) - 0))))) | ((2))) * 1), _GLF_IDENTITY(2, (2) * 1), _GLF_IDENTITY(2, (2) * 1)), _GLF_IDENTITY(0, (_GLF_IDENTITY(0, 0 | (0))) ^ 0) | (clamp(_GLF_IDENTITY(2, (2) * 1), _GLF_IDENTITY(2, (2) * 1), _GLF_IDENTITY(2, _GLF_IDENTITY((2) * 1, ((2) * 1) << 0))))), (_GLF_IDENTITY(clamp(_GLF_IDENTITY(2, _GLF_IDENTITY((2), (_GLF_IDENTITY((2), int(int(_GLF_IDENTITY((2), ((2)) - 0))))) | ((2))) * 1), _GLF_IDENTITY(2, (2) * 1), _GLF_IDENTITY(2, (2) * 1)), _GLF_IDENTITY(0, (_GLF_IDENTITY(0, 0 | (0))) ^ 0) | (clamp(_GLF_IDENTITY(2, (2) * 1), _GLF_IDENTITY(2, (2) * 1), _GLF_IDENTITY(2, _GLF_IDENTITY((2) * 1, ((2) * 1) << 0)))))) >> 0)))) + 0u, max((uint(_GLF_IDENTITY(_GLF_IDENTITY(2, (2) * 1), _GLF_IDENTITY(_GLF_IDENTITY(clamp(_GLF_IDENTITY(2, _GLF_IDENTITY((2), (_GLF_IDENTITY((2), int(int(_GLF_IDENTITY((2), ((2)) - 0))))) | ((2))) * 1), _GLF_IDENTITY(2, (2) * 1), _GLF_IDENTITY(2, (2) * 1)), _GLF_IDENTITY(0, (_GLF_IDENTITY(0, 0 | (0))) ^ 0) | (clamp(_GLF_IDENTITY(2, (2) * 1), _GLF_IDENTITY(2, (2) * 1), _GLF_IDENTITY(2, _GLF_IDENTITY((2) * 1, ((2) * 1) << 0))))), (_GLF_IDENTITY(clamp(_GLF_IDENTITY(2, _GLF_IDENTITY((2), (_GLF_IDENTITY((2), int(int(_GLF_IDENTITY((2), ((2)) - 0))))) | ((2))) * 1), _GLF_IDENTITY(2, (2) * 1), _GLF_IDENTITY(2, (2) * 1)), _GLF_IDENTITY(0, (_GLF_IDENTITY(0, 0 | (0))) ^ 0) | (clamp(_GLF_IDENTITY(2, (2) * 1), _GLF_IDENTITY(2, (2) * 1), _GLF_IDENTITY(2, _GLF_IDENTITY((2) * 1, ((2) * 1) << 0)))))) >> 0)))) + 0u, (uint(_GLF_IDENTITY(_GLF_IDENTITY(2, (2) * 1), _GLF_IDENTITY(_GLF_IDENTITY(clamp(_GLF_IDENTITY(2, _GLF_IDENTITY((2), (_GLF_IDENTITY((2), int(int(_GLF_IDENTITY((2), ((2)) - 0))))) | ((2))) * 1), _GLF_IDENTITY(2, (2) * 1), _GLF_IDENTITY(2, (2) * 1)), _GLF_IDENTITY(0, (_GLF_IDENTITY(0, 0 | (0))) ^ 0) | (clamp(_GLF_IDENTITY(2, (2) * 1), _GLF_IDENTITY(2, (2) * 1), _GLF_IDENTITY(2, _GLF_IDENTITY((2) * 1, ((2) * 1) << 0))))), (_GLF_IDENTITY(clamp(_GLF_IDENTITY(2, _GLF_IDENTITY((2), (_GLF_IDENTITY((2), int(int(_GLF_IDENTITY((2), ((2)) - 0))))) | ((2))) * 1), _GLF_IDENTITY(2, (2) * 1), _GLF_IDENTITY(2, (2) * 1)), _GLF_IDENTITY(0, (_GLF_IDENTITY(0, 0 | (0))) ^ 0) | (clamp(_GLF_IDENTITY(2, (2) * 1), _GLF_IDENTITY(2, (2) * 1), _GLF_IDENTITY(2, _GLF_IDENTITY((2) * 1, ((2) * 1) << 0)))))) >> 0)))) + 0u)))) * 1u), 4, 64, _GLF_IDENTITY(4, int(ivec2(4, ((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(5), int(_GLF_IDENTITY(5, int(_GLF_IDENTITY(ivec4(_GLF_IDENTITY(5, 0 | (5)), 0, 1, 0), _GLF_IDENTITY((true ? ivec4(_GLF_IDENTITY(5, _GLF_IDENTITY(0 | (5), (true ? _GLF_IDENTITY(0 | (5), min(_GLF_IDENTITY(0 | _GLF_IDENTITY(_GLF_IDENTITY((5), ((5)) ^ (0 << _GLF_IDENTITY(int(_GLF_IDENTITY(8, min(_GLF_IDENTITY(8, min(8, 8)), 8))), int(8)))), clamp((5), _GLF_IDENTITY((5), ~ (~ ((5)))), (5))), clamp(0 | (5), 0 | _GLF_IDENTITY((5), min((5), (5))), 0 | (5))), 0 | (5))) : _GLF_FUZZED(-99880)))), _GLF_IDENTITY(0, (_GLF_IDENTITY(0, ~ (~ (0)))) | 0), 1, _GLF_IDENTITY(0, (0) * 1)) : _GLF_FUZZED(ivec4(-15022, 8720, -51541, -98469))), (false ? _GLF_FUZZED(ivec4(4769, -43439, 38819, -5951)) : (true ? ivec4(_GLF_IDENTITY(5, _GLF_IDENTITY(0 | (5), (true ? _GLF_IDENTITY(0 | (5), min(_GLF_IDENTITY(0 | _GLF_IDENTITY(_GLF_IDENTITY((5), ((5)) ^ (0 << _GLF_IDENTITY(int(_GLF_IDENTITY(8, min(_GLF_IDENTITY(8, min(8, 8)), 8))), int(8)))), clamp((5), _GLF_IDENTITY((5), ~ (~ ((5)))), (5))), clamp(0 | (5), 0 | _GLF_IDENTITY((5), min((5), (5))), 0 | (5))), 0 | (5))) : _GLF_FUZZED(-99880)))), _GLF_IDENTITY(0, (_GLF_IDENTITY(0, ~ (~ (0)))) | 0), 1, _GLF_IDENTITY(0, (0) * 1)) : _GLF_FUZZED(ivec4(-15022, 8720, -51541, -98469)))))))))), (1 << _GLF_IDENTITY(_GLF_IDENTITY(int(5), int(5)), (true ? _GLF_IDENTITY(int(5), int(5)) : _GLF_FUZZED(-77089)))) ^ (_GLF_IDENTITY((0 & _GLF_IDENTITY(-15622, clamp(_GLF_IDENTITY(-15622, min(-15622, -15622)), -15622, -15622))) << _GLF_IDENTITY(int(1), int(1)), 1 * ((0 & -15622) << _GLF_IDENTITY(int(1), int(1))))))) >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (_GLF_IDENTITY(int(5), (int(5)) | 0)) << 0)))))));
   subgroupAll(_GLF_IDENTITY(true, (true) && true));
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bool(false))), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bool(false))), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(false, bool(bool(false))), true, true, false)), bool(bool(bool(bvec4(_GLF_IDENTITY(false, bool(bool(false))), true, true, false)))))), true, false, false)), ! (! (bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bool(false))), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(false, bool(bool(false))), true, true, false)), bool(bool(bool(bvec4(_GLF_IDENTITY(false, bool(bool(false))), true, true, false)))))), true, false, false)))))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, ! _GLF_IDENTITY((! _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec2(bvec2(false, true))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(bool(bvec2(false, true)), (bool(bvec2(false, true))) || false)), _GLF_IDENTITY(bool(bvec3(! (_GLF_IDENTITY(bool(bvec2(false, true)), (bool(bvec2(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, true && (false))))), (! (_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, true && (false)))))) || false))), true))) || false)), true, true)), ! (! (bool(bvec3(! (_GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(false, _GLF_IDENTITY((false), bool(bvec4((false), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) || false), true)), _GLF_IDENTITY((bool(bvec2(false, true))), true && ((bool(bvec2(false, true))))) || false)), true, true))))))))), false || (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, true)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(bool(bvec2(false, true)), (bool(bvec2(false, true))) || false)), _GLF_IDENTITY(bool(bvec3(! (_GLF_IDENTITY(bool(bvec2(false, true)), (bool(bvec2(false, true))) || false)), true, true)), ! (_GLF_IDENTITY(! (bool(bvec3(! (_GLF_IDENTITY(bool(bvec2(false, true)), (bool(bvec2(false, true))) || false)), true, true))), ! (! (! (bool(bvec3(! (_GLF_IDENTITY(bool(bvec2(false, true)), (bool(bvec2(false, true))) || false)), true, true))))))))))))))), bool(bvec3(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec2(bvec2(false, true))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(bool(bvec2(false, true)), (bool(bvec2(false, true))) || false)), _GLF_IDENTITY(bool(bvec3(! (_GLF_IDENTITY(bool(bvec2(false, true)), (bool(bvec2(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, true && (false))))), (! (_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, true && (false)))))) || false))), true))) || false)), true, true)), ! (! (bool(bvec3(! (_GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(false, _GLF_IDENTITY((false), bool(bvec4((false), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) || false), true)), _GLF_IDENTITY((bool(bvec2(false, true))), true && ((bool(bvec2(false, true))))) || false)), true, true))))))))), false || (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, true)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(bool(bvec2(false, true)), (bool(bvec2(false, true))) || false)), _GLF_IDENTITY(bool(bvec3(! (_GLF_IDENTITY(bool(bvec2(false, true)), (bool(bvec2(false, true))) || false)), true, true)), ! (_GLF_IDENTITY(! (bool(bvec3(! (_GLF_IDENTITY(bool(bvec2(false, true)), (bool(bvec2(false, true))) || false)), true, true))), ! (! (! (bool(bvec3(! (_GLF_IDENTITY(bool(bvec2(false, true)), (bool(bvec2(false, true))) || false)), true, true))))))))))))))), ! (! ((_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec2(bvec2(false, true))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(bool(bvec2(false, true)), (bool(bvec2(false, true))) || false)), _GLF_IDENTITY(bool(bvec3(! (_GLF_IDENTITY(bool(bvec2(false, true)), (bool(bvec2(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, true && (false))))), (! (_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, true && (false)))))) || false))), true))) || false)), true, true)), ! (! (bool(bvec3(! (_GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(false, _GLF_IDENTITY((false), bool(bvec4((false), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) || false), true)), _GLF_IDENTITY((bool(bvec2(false, true))), true && ((bool(bvec2(false, true))))) || false)), true, true))))))))), false || (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, true)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(bool(bvec2(false, true)), (bool(bvec2(false, true))) || false)), _GLF_IDENTITY(bool(bvec3(! (_GLF_IDENTITY(bool(bvec2(false, true)), (bool(bvec2(false, true))) || false)), true, true)), ! (_GLF_IDENTITY(! (bool(bvec3(! (_GLF_IDENTITY(bool(bvec2(false, true)), (bool(bvec2(false, true))) || false)), true, true))), ! (! (! (bool(bvec3(! (_GLF_IDENTITY(bool(bvec2(false, true)), (bool(bvec2(false, true))) || false)), true, true)))))))))))))))))), true, true)))), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY((! (_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, true)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(bool(bvec2(false, true)), (bool(bvec2(_GLF_IDENTITY(false, (false) && true), true))) || false)), _GLF_IDENTITY(bool(bvec3(! _GLF_IDENTITY((_GLF_IDENTITY(bool(bvec2(false, _GLF_IDENTITY(true, true && (true)))), (bool(bvec2(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, _GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (false)))))) || (_GLF_IDENTITY(false, true && (false))))), (! (_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, true && (false)))))) || false))), true))) || false)), ((_GLF_IDENTITY(bool(bvec2(false, _GLF_IDENTITY(true, true && (true)))), (bool(bvec2(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, _GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (false)))))) || (_GLF_IDENTITY(false, true && (false))))), (! (_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, true && (false)))))) || false))), true))) || false))) && true), true, true)), ! (! (bool(bvec3(! (_GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(false, _GLF_IDENTITY((false), bool(bvec4((false), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) || false), true)), _GLF_IDENTITY((bool(bvec2(false, true))), true && ((bool(bvec2(false, true))))) || false)), true, true))))))))), false || (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, true)), ! _GLF_IDENTITY((_GLF_IDENTITY(! (_GLF_IDENTITY(bool(bvec2(false, true)), (bool(bvec2(false, true))) || false)), _GLF_IDENTITY(bool(bvec3(! _GLF_IDENTITY((_GLF_IDENTITY(bool(bvec2(false, true)), (_GLF_IDENTITY(bool(bvec2(false, true)), _GLF_IDENTITY(bool(bvec3(bool(bvec2(false, true)), true, false)), bool(bool(bool(bvec3(bool(bvec2(false, true)), true, false))))))) || false)), bool(bvec4((_GLF_IDENTITY(bool(bvec2(false, true)), (_GLF_IDENTITY(bool(bvec2(false, true)), _GLF_IDENTITY(bool(bvec3(bool(bvec2(false, true)), true, false)), bool(bool(bool(bvec3(bool(bvec2(false, true)), true, false))))))) || false)), true, true, true))), true, true)), ! (_GLF_IDENTITY(! (bool(bvec3(! (_GLF_IDENTITY(bool(bvec2(false, true)), (bool(bvec2(false, true))) || false)), true, true))), ! (! (! (bool(bvec3(! (_GLF_IDENTITY(bool(bvec2(false, true)), (bool(bvec2(false, true))) || false)), true, true)))))))))), bool(bvec4((_GLF_IDENTITY(! (_GLF_IDENTITY(bool(bvec2(false, true)), (bool(bvec2(false, true))) || false)), _GLF_IDENTITY(bool(bvec3(! _GLF_IDENTITY((_GLF_IDENTITY(bool(bvec2(false, true)), (_GLF_IDENTITY(bool(bvec2(false, true)), _GLF_IDENTITY(bool(bvec3(bool(bvec2(false, true)), true, false)), bool(bool(bool(bvec3(bool(bvec2(false, true)), true, false))))))) || false)), bool(bvec4((_GLF_IDENTITY(bool(bvec2(false, true)), (_GLF_IDENTITY(bool(bvec2(false, true)), _GLF_IDENTITY(bool(bvec3(bool(bvec2(false, true)), true, false)), bool(bool(bool(bvec3(bool(bvec2(false, true)), true, false))))))) || false)), true, true, true))), true, true)), ! (_GLF_IDENTITY(! (bool(bvec3(! (_GLF_IDENTITY(bool(bvec2(false, true)), (bool(bvec2(false, true))) || false)), true, true))), ! (! (! (bool(bvec3(! (_GLF_IDENTITY(bool(bvec2(false, true)), (bool(bvec2(false, true))) || false)), true, true)))))))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true))))))))), false || ((! _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, true)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(bool(bvec2(false, true)), (bool(bvec2(false, true))) || false)), _GLF_IDENTITY(bool(bvec3(! (_GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, false, false), bvec3(bvec4(bvec3(false, false, false), true)))))))), true)), (_GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, _GLF_IDENTITY(false || (_GLF_IDENTITY(false, true && (false))), (_GLF_IDENTITY(false || (_GLF_IDENTITY(false, true && (false))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false || (_GLF_IDENTITY(false, true && (false)))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), (! (_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, true && (false)))))))))) || false))), true)), (bool(bvec2(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, _GLF_IDENTITY(false || (_GLF_IDENTITY(false, true && (false))), (_GLF_IDENTITY(false || (_GLF_IDENTITY(false, true && (false))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false || (_GLF_IDENTITY(false, true && (false)))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), (! (_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, true && (false)))))))))) || false))), true))) || false)) || false)), true, true)), ! (! (bool(bvec3(_GLF_IDENTITY(! (_GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(false, _GLF_IDENTITY((false), bool(bvec4((false), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) || false), true)), _GLF_IDENTITY((bool(bvec2(false, true))), true && ((bool(bvec2(false, true))))) || false)), ! (! (! (_GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(false, _GLF_IDENTITY((false), bool(bvec4((false), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) || false), true)), _GLF_IDENTITY((bool(bvec2(false, true))), true && ((bool(bvec2(false, true))))) || false))))), true, true))))))))), false || (_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec2(false, true)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(bool(bvec2(false, true)), (bool(bvec2(false, true))) || false)), _GLF_IDENTITY(bool(bvec3(! (_GLF_IDENTITY(bool(bvec2(false, true)), (bool(bvec2(false, true))) || false)), true, true)), ! (_GLF_IDENTITY(! (bool(bvec3(! (_GLF_IDENTITY(bool(bvec2(false, true)), (bool(bvec2(false, true))) || false)), true, true))), ! (! (! (bool(bvec3(! (_GLF_IDENTITY(bool(bvec2(false, true)), (bool(bvec2(false, true))) || false)), true, true))))))))))), false || (_GLF_IDENTITY(_GLF_IDENTITY(bool(bvec2(false, true)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(bool(bvec2(false, true)), (bool(bvec2(false, true))) || false)), _GLF_IDENTITY(bool(bvec3(! (_GLF_IDENTITY(bool(bvec2(false, true)), (bool(bvec2(false, true))) || false)), true, true)), ! (_GLF_IDENTITY(! (bool(bvec3(! (_GLF_IDENTITY(bool(bvec2(false, true)), (bool(bvec2(false, true))) || false)), true, true))), ! (! (! (bool(bvec3(! (_GLF_IDENTITY(bool(bvec2(false, true)), (bool(bvec2(false, true))) || false)), true, true))))))))))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(bool(bvec2(false, true)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(bool(bvec2(false, true)), (bool(bvec2(false, true))) || false)), _GLF_IDENTITY(bool(bvec3(! (_GLF_IDENTITY(bool(bvec2(false, true)), (bool(bvec2(false, true))) || false)), true, true)), ! (_GLF_IDENTITY(! (bool(bvec3(! (_GLF_IDENTITY(bool(bvec2(false, true)), (bool(bvec2(false, true))) || false)), true, true))), ! (! (! (bool(bvec3(! (_GLF_IDENTITY(bool(bvec2(false, true)), (bool(bvec2(false, true))) || false)), true, true))))))))))), ! (! (_GLF_IDENTITY(bool(bvec2(false, true)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(bool(bvec2(false, true)), (bool(bvec2(false, true))) || false)), _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec3(! (_GLF_IDENTITY(bool(bvec2(false, true)), (bool(bvec2(false, true))) || false)), true, true)), ! (_GLF_IDENTITY(! (bool(bvec3(! (_GLF_IDENTITY(bool(bvec2(false, true)), (bool(bvec2(false, true))) || false)), true, true))), ! (! (! (bool(bvec3(! (_GLF_IDENTITY(bool(bvec2(false, true)), (bool(bvec2(false, true))) || false)), true, true)))))))), bool(bvec4(_GLF_IDENTITY(bool(bvec3(! (_GLF_IDENTITY(bool(bvec2(false, true)), (bool(bvec2(false, true))) || false)), true, true)), ! (_GLF_IDENTITY(! (bool(bvec3(! (_GLF_IDENTITY(bool(bvec2(false, true)), (bool(bvec2(false, true))) || false)), true, true))), ! (! (! (bool(bvec3(! (_GLF_IDENTITY(bool(bvec2(false, true)), (bool(bvec2(false, true))) || false)), true, true)))))))), true, true, false)))))))))))))))))), ((_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, true)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(bool(bvec2(false, true)), (bool(bvec2(false, true))) || false)), _GLF_IDENTITY(bool(bvec3(! (_GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, false, false), bvec3(bvec4(bvec3(false, false, false), true)))))))), true)), (_GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, _GLF_IDENTITY(false || (_GLF_IDENTITY(false, true && (false))), (_GLF_IDENTITY(false || (_GLF_IDENTITY(false, true && (false))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false || (_GLF_IDENTITY(false, true && (false)))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), (! (_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, true && (false)))))))))) || false))), true)), (bool(bvec2(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, _GLF_IDENTITY(false || (_GLF_IDENTITY(false, true && (false))), (_GLF_IDENTITY(false || (_GLF_IDENTITY(false, true && (false))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false || (_GLF_IDENTITY(false, true && (false)))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), (! (_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, true && (false)))))))))) || false))), true))) || false)) || false)), true, true)), ! (! (bool(bvec3(_GLF_IDENTITY(! (_GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(false, _GLF_IDENTITY((false), bool(bvec4((false), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) || false), true)), _GLF_IDENTITY((bool(bvec2(false, true))), true && ((bool(bvec2(false, true))))) || false)), ! (! (! (_GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(false, _GLF_IDENTITY((false), bool(bvec4((false), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) || false), true)), _GLF_IDENTITY((bool(bvec2(false, true))), true && ((bool(bvec2(false, true))))) || false))))), true, true))))))))), false || (_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec2(false, true)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(bool(bvec2(false, true)), (bool(bvec2(false, true))) || false)), _GLF_IDENTITY(bool(bvec3(! (_GLF_IDENTITY(bool(bvec2(false, true)), (bool(bvec2(false, true))) || false)), true, true)), ! (_GLF_IDENTITY(! (bool(bvec3(! (_GLF_IDENTITY(bool(bvec2(false, true)), (bool(bvec2(false, true))) || false)), true, true))), ! (! (! (bool(bvec3(! (_GLF_IDENTITY(bool(bvec2(false, true)), (bool(bvec2(false, true))) || false)), true, true))))))))))), false || (_GLF_IDENTITY(_GLF_IDENTITY(bool(bvec2(false, true)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(bool(bvec2(false, true)), (bool(bvec2(false, true))) || false)), _GLF_IDENTITY(bool(bvec3(! (_GLF_IDENTITY(bool(bvec2(false, true)), (bool(bvec2(false, true))) || false)), true, true)), ! (_GLF_IDENTITY(! (bool(bvec3(! (_GLF_IDENTITY(bool(bvec2(false, true)), (bool(bvec2(false, true))) || false)), true, true))), ! (! (! (bool(bvec3(! (_GLF_IDENTITY(bool(bvec2(false, true)), (bool(bvec2(false, true))) || false)), true, true))))))))))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(bool(bvec2(false, true)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(bool(bvec2(false, true)), (bool(bvec2(false, true))) || false)), _GLF_IDENTITY(bool(bvec3(! (_GLF_IDENTITY(bool(bvec2(false, true)), (bool(bvec2(false, true))) || false)), true, true)), ! (_GLF_IDENTITY(! (bool(bvec3(! (_GLF_IDENTITY(bool(bvec2(false, true)), (bool(bvec2(false, true))) || false)), true, true))), ! (! (! (bool(bvec3(! (_GLF_IDENTITY(bool(bvec2(false, true)), (bool(bvec2(false, true))) || false)), true, true))))))))))), ! (! (_GLF_IDENTITY(bool(bvec2(false, true)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(bool(bvec2(false, true)), (bool(bvec2(false, true))) || false)), _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec3(! (_GLF_IDENTITY(bool(bvec2(false, true)), (bool(bvec2(false, true))) || false)), true, true)), ! (_GLF_IDENTITY(! (bool(bvec3(! (_GLF_IDENTITY(bool(bvec2(false, true)), (bool(bvec2(false, true))) || false)), true, true))), ! (! (! (bool(bvec3(! (_GLF_IDENTITY(bool(bvec2(false, true)), (bool(bvec2(false, true))) || false)), true, true)))))))), bool(bvec4(_GLF_IDENTITY(bool(bvec3(! (_GLF_IDENTITY(bool(bvec2(false, true)), (bool(bvec2(false, true))) || false)), true, true)), ! (_GLF_IDENTITY(! (bool(bvec3(! (_GLF_IDENTITY(bool(bvec2(false, true)), (bool(bvec2(false, true))) || false)), true, true))), ! (! (! (bool(bvec3(! (_GLF_IDENTITY(bool(bvec2(false, true)), (bool(bvec2(false, true))) || false)), true, true)))))))), true, true, false))))))))))))))))))) && true))))), (bool(_GLF_IDENTITY((! (_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec4(_GLF_IDENTITY(bvec2(false, true), bvec2(_GLF_IDENTITY(bvec2(bvec2(false, true)), bvec2(bvec3(bvec2(bvec2(false, true)), false))))), true, false)))), ! (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY(bool(bvec2(false, true)), (bool(bvec2(false, true))) || false)), _GLF_IDENTITY(bool(bvec3(! (_GLF_IDENTITY(bool(bvec2(false, true)), (bool(bvec2(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, true && (false))))), (! (_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, true && (false)))))) || false))), true))) || false)), true, true)), ! (! (bool(bvec3(! (_GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(false, _GLF_IDENTITY((false), bool(bvec4((false), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) || false), true)), _GLF_IDENTITY((bool(bvec2(false, true))), true && ((bool(bvec2(false, true))))) || false)), true, true)))))), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(! (_GLF_IDENTITY(bool(bvec2(false, true)), (bool(bvec2(false, true))) || false)), _GLF_IDENTITY(bool(bvec3(! (_GLF_IDENTITY(bool(bvec2(false, true)), (bool(bvec2(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, true && (false))))), (! (_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, true && (false)))))) || false))), true))) || false)), true, true)), ! (! (bool(bvec3(! (_GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(false, _GLF_IDENTITY((false), bool(bvec4((false), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) || false), true)), _GLF_IDENTITY((bool(bvec2(false, true))), true && ((bool(bvec2(false, true))))) || false)), true, true)))))), true, false, true)), bool(bvec4(bool(bvec4(_GLF_IDENTITY(! (_GLF_IDENTITY(bool(bvec2(false, true)), (bool(bvec2(false, true))) || false)), _GLF_IDENTITY(bool(bvec3(! (_GLF_IDENTITY(bool(bvec2(false, true)), (bool(bvec2(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, true && (false))))), (! (_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, true && (false)))))) || false))), true))) || false)), true, true)), ! (! (bool(bvec3(! (_GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(false, _GLF_IDENTITY((false), bool(bvec4((false), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) || false), true)), _GLF_IDENTITY((bool(bvec2(false, true))), true && ((bool(bvec2(false, true))))) || false)), true, true)))))), true, false, true)), false, true, false))))))), false || (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, true)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(bool(bvec2(false, true)), (bool(bvec2(false, true))) || false)), _GLF_IDENTITY(bool(bvec3(! (_GLF_IDENTITY(bool(bvec2(false, true)), (bool(bvec2(false, true))) || false)), true, true)), ! (_GLF_IDENTITY(! (bool(bvec3(! (_GLF_IDENTITY(bool(bvec2(false, true)), (bool(bvec2(false, true))) || false)), true, true))), ! (! (! (bool(bvec3(! (_GLF_IDENTITY(bool(bvec2(false, true)), (bool(bvec2(false, true))) || false)), true, true)))))))))))))))), false || ((! (_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, true)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(bool(bvec2(false, true)), (bool(bvec2(false, true))) || false)), _GLF_IDENTITY(bool(bvec3(! (_GLF_IDENTITY(bool(bvec2(false, true)), (bool(bvec2(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, true && (false))))), (! (_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, true && (false)))))) || false))), true))) || false)), true, true)), ! (! (bool(bvec3(! (_GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(false, _GLF_IDENTITY((false), bool(bvec4((false), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) || false), true)), _GLF_IDENTITY((bool(bvec2(false, true))), true && ((bool(bvec2(false, true))))) || false)), true, true))))))))), false || (_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec2(false, true)), bool(bvec3(bool(bvec2(false, true)), true, true))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(bool(bvec2(false, true)), (bool(bvec2(false, true))) || false)), _GLF_IDENTITY(bool(bvec3(! (_GLF_IDENTITY(bool(bvec2(false, true)), (bool(bvec2(false, true))) || false)), true, true)), ! (_GLF_IDENTITY(! (bool(bvec3(! (_GLF_IDENTITY(bool(bvec2(false, true)), (bool(bvec2(false, true))) || false)), true, true))), ! (! (! (bool(bvec3(! (_GLF_IDENTITY(bool(bvec2(false, true)), (bool(bvec2(false, true))) || false)), _GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, true && (true))))), true)))))))))))))))))))) && true)))), false || _GLF_IDENTITY((_GLF_IDENTITY(false, ! (! (false)))), _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && ((_GLF_IDENTITY(false, ! (! (false))))), false || (_GLF_TRUE(true, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), (injectionSwitch.x) - 0.0) < injectionSwitch.y)) && ((false)))))))))))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
